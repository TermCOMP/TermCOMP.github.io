MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/yuItf.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 81 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/yuItf.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/yuItf.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: pc_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: pc_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: pc_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: E_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: E_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: E_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: E_3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: _I_21_1_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: _I_21_1_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: _I_21_1_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: _pc_21_1_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: _pc_21_1_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: _pc_21_1_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: _E_21_1_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: _E_21_1_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: _E_21_1_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: _E_21_1_3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: I_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: I_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: I_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "exit" returnParam: BasicVoidType parameters: (i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 53
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		Unnamed Call-Instruction = call BasicVoidType @exit(i32 0)
		unreachable
	6:
		ret void

*BasicFunctionTypename: "setpc" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 64
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		%7 = load %4
		%8 = mul i32 3, %7
		%9 = load %5
		%10 = add i32 %8, %9
		switch %10, %20 [0, %11 1, %14 2, %17]
	11:
		%12 = load %6
		%13 = trunc i32 %12 to i8
		store %13, @pc_0
		br %20
	14:
		%15 = load %6
		%16 = trunc i32 %15 to i8
		store %16, @pc_1
		br %20
	17:
		%18 = load %6
		%19 = trunc i32 %18 to i8
		store %19, @pc_2
		br %20
	20:
		ret void

*BasicFunctionTypename: "getE" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 90
	0:
		%2 = alloca i8, align 1
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		switch %4, %13 [0, %5 1, %7 2, %9 3, %11]
	5:
		%6 = load @E_0
		store %6, %2
		br %13
	7:
		%8 = load @E_1
		store %8, %2
		br %13
	9:
		%10 = load @E_2
		store %10, %2
		br %13
	11:
		%12 = load @E_3
		store %12, %2
		br %13
	13:
		%14 = load %2
		ret %14

*BasicFunctionTypename: "get_I_21_1" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 107
	0:
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = mul i32 3, %6
		%8 = load %5
		%9 = add i32 %7, %8
		switch %9, %16 [0, %10 1, %12 2, %14]
	10:
		%11 = load @_I_21_1_0
		store %11, %3
		br %16
	12:
		%13 = load @_I_21_1_1
		store %13, %3
		br %16
	14:
		%15 = load @_I_21_1_2
		store %15, %3
		br %16
	16:
		%17 = load %3
		ret %17

*BasicFunctionTypename: "get_pc_21_1" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 127
	0:
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = mul i32 3, %6
		%8 = load %5
		%9 = add i32 %7, %8
		switch %9, %16 [0, %10 1, %12 2, %14]
	10:
		%11 = load @_pc_21_1_0
		store %11, %3
		br %16
	12:
		%13 = load @_pc_21_1_1
		store %13, %3
		br %16
	14:
		%15 = load @_pc_21_1_2
		store %15, %3
		br %16
	16:
		%17 = load %3
		ret %17

*BasicFunctionTypename: "getpc" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 147
	0:
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = mul i32 3, %6
		%8 = load %5
		%9 = add i32 %7, %8
		switch %9, %16 [0, %10 1, %12 2, %14]
	10:
		%11 = load @pc_0
		store %11, %3
		br %16
	12:
		%13 = load @pc_1
		store %13, %3
		br %16
	14:
		%15 = load @pc_2
		store %15, %3
		br %16
	16:
		%17 = load %3
		ret %17

*BasicFunctionTypename: "get_E_21_1" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 167
	0:
		%2 = alloca i8, align 1
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		switch %4, %13 [0, %5 1, %7 2, %9 3, %11]
	5:
		%6 = load @_E_21_1_0
		store %6, %2
		br %13
	7:
		%8 = load @_E_21_1_1
		store %8, %2
		br %13
	9:
		%10 = load @_E_21_1_2
		store %10, %2
		br %13
	11:
		%12 = load @_E_21_1_3
		store %12, %2
		br %13
	13:
		%14 = load %2
		ret %14

*BasicFunctionTypename: "getI" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 182
	0:
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = mul i32 3, %6
		%8 = load %5
		%9 = add i32 %7, %8
		switch %9, %16 [0, %10 1, %12 2, %14]
	10:
		%11 = load @I_0
		store %11, %3
		br %16
	12:
		%13 = load @I_1
		store %13, %3
		br %16
	14:
		%15 = load @I_2
		store %15, %3
		br %16
	16:
		%17 = load %3
		ret %17

*BasicFunctionTypename: "setI" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32, 1 i32, 2 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 200
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i8, align 1
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%7 = load %4
		%8 = mul i32 3, %7
		%9 = load %5
		%10 = add i32 %8, %9
		switch %10, %17 [0, %11 1, %13 2, %15]
	11:
		%12 = load %6
		store %12, @I_0
		br %17
	13:
		%14 = load %6
		store %14, @I_1
		br %17
	15:
		%16 = load %6
		store %16, @I_2
		br %17
	17:
		ret void

*BasicFunctionTypename: "attr" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext, 3 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 225
	0:
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%9 = zext i1 %3 to i8
		store %9, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		%10 = load %5
		%11 = zext i8 %10 to i32
		%12 = load %6
		%13 = zext i8 %12 to i32
		%14 = load %7
		Unnamed Call-Instruction = call BasicVoidType @setI(i32 %11, i32 %13, i8 signext %14)
		ret void

*BasicFunctionTypename: "_0_13" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 244
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call signext i8 @getE(i32 0)
		%5 = sext i8 %4 to i32
		%6 = load %2
		%7 = icmp ne %5 %6
		%8 = zext i1 %7 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %8)
		%9 = call signext i8 @getE(i32 1)
		%10 = sext i8 %9 to i32
		%11 = icmp eq %10 1
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = call signext i8 @getE(i32 2)
		%14 = sext i8 %13 to i32
		%15 = icmp eq %14 3
		br %15, %16, %21
	16:
		%17 = load %2
		%18 = call signext i8 @getI(i32 %17, i32 0)
		%19 = sext i8 %18 to i32
		%20 = icmp eq %19 2
		br %21
	21:
		%22 = phi [0, %1], [%20, %16]
		%23 = zext i1 %22 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %23)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store 3, %3
		%24 = load %2
		%25 = trunc i32 %24 to i8
		%26 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %25, i8 zeroext 0, i8 signext %26, i1 zeroext 1)
		%27 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setpc(i32 %27, i32 0, i32 12)
		ret void

*BasicFunctionTypename: "_0_6" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 270
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store 2, %3
		%4 = load %2
		%5 = trunc i32 %4 to i8
		%6 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %5, i8 zeroext 0, i8 signext %6, i1 zeroext 1)
		%7 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setpc(i32 %7, i32 0, i32 5)
		ret void

*BasicFunctionTypename: "_0_3" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 281
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call signext i8 @getE(i32 1)
		%5 = sext i8 %4 to i32
		%6 = icmp eq %5 2
		br %6, %7, %12
	7:
		%8 = call signext i8 @getE(i32 0)
		%9 = sext i8 %8 to i32
		%10 = load %2
		%11 = icmp eq %9 %10
		br %12
	12:
		%13 = phi [0, %1], [%11, %7]
		%14 = zext i1 %13 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %14)
		%15 = load %2
		%16 = call signext i8 @getI(i32 %15, i32 0)
		%17 = sext i8 %16 to i32
		%18 = icmp eq %17 1
		br %18, %19, %23
	19:
		%20 = call signext i8 @getE(i32 3)
		%21 = sext i8 %20 to i32
		%22 = icmp eq %21 0
		br %23
	23:
		%24 = phi [0, %12], [%22, %19]
		%25 = zext i1 %24 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %25)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store 3, %3
		%26 = load %2
		%27 = trunc i32 %26 to i8
		%28 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %27, i8 zeroext 0, i8 signext %28, i1 zeroext 1)
		%29 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setpc(i32 %29, i32 0, i32 2)
		ret void

*BasicFunctionTypename: "_0_11" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 307
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call signext i8 @getE(i32 0)
		%5 = sext i8 %4 to i32
		%6 = load %2
		%7 = icmp ne %5 %6
		%8 = zext i1 %7 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %8)
		%9 = call signext i8 @getE(i32 1)
		%10 = sext i8 %9 to i32
		%11 = icmp eq %10 1
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = call signext i8 @getE(i32 2)
		%14 = sext i8 %13 to i32
		%15 = icmp eq %14 0
		br %15, %16, %21
	16:
		%17 = load %2
		%18 = call signext i8 @getI(i32 %17, i32 0)
		%19 = sext i8 %18 to i32
		%20 = icmp eq %19 3
		br %21
	21:
		%22 = phi [0, %1], [%20, %16]
		%23 = zext i1 %22 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %23)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store 2, %3
		%24 = load %2
		%25 = trunc i32 %24 to i8
		%26 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %25, i8 zeroext 0, i8 signext %26, i1 zeroext 1)
		%27 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setpc(i32 %27, i32 0, i32 10)
		ret void

*BasicFunctionTypename: "_0_9" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 333
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call signext i8 @getE(i32 0)
		%5 = sext i8 %4 to i32
		%6 = load %2
		%7 = icmp ne %5 %6
		%8 = zext i1 %7 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %8)
		%9 = call signext i8 @getE(i32 1)
		%10 = sext i8 %9 to i32
		%11 = icmp eq %10 1
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = call signext i8 @getE(i32 2)
		%14 = sext i8 %13 to i32
		%15 = icmp eq %14 1
		br %15, %16, %21
	16:
		%17 = load %2
		%18 = call signext i8 @getI(i32 %17, i32 0)
		%19 = sext i8 %18 to i32
		%20 = icmp eq %19 2
		br %21
	21:
		%22 = phi [0, %1], [%20, %16]
		%23 = zext i1 %22 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %23)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store 3, %3
		%24 = load %2
		%25 = trunc i32 %24 to i8
		%26 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %25, i8 zeroext 0, i8 signext %26, i1 zeroext 1)
		%27 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setpc(i32 %27, i32 0, i32 8)
		ret void

*BasicFunctionTypename: "setE" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32, 1 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 359
	0:
		%3 = alloca i32, align 4
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		switch %5, %14 [0, %6 1, %8 2, %10 3, %12]
	6:
		%7 = load %4
		store %7, @E_0
		br %14
	8:
		%9 = load %4
		store %9, @E_1
		br %14
	10:
		%11 = load %4
		store %11, @E_2
		br %14
	12:
		%13 = load %4
		store %13, @E_3
		br %14
	14:
		ret void

*BasicFunctionTypename: "init" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 382
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = trunc i32 %3 to i8
		store %4, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		%6 = trunc i32 %5 to i8
		store %6, %2
		%7 = call zeroext i8 @get_pc_21_1(i32 0, i32 0)
		%8 = zext i8 %7 to i32
		%9 = icmp eq %8 3
		br %9, %30, %10
	10:
		%11 = call zeroext i8 @get_pc_21_1(i32 0, i32 0)
		%12 = zext i8 %11 to i32
		%13 = icmp eq %12 4
		br %13, %30, %14
	14:
		%15 = call zeroext i8 @get_pc_21_1(i32 0, i32 0)
		%16 = zext i8 %15 to i32
		%17 = icmp eq %16 7
		br %17, %30, %18
	18:
		%19 = call zeroext i8 @get_pc_21_1(i32 0, i32 0)
		%20 = zext i8 %19 to i32
		%21 = icmp eq %20 9
		br %21, %30, %22
	22:
		%23 = call zeroext i8 @get_pc_21_1(i32 0, i32 0)
		%24 = zext i8 %23 to i32
		%25 = icmp eq %24 11
		br %25, %30, %26
	26:
		%27 = call zeroext i8 @get_pc_21_1(i32 0, i32 0)
		%28 = zext i8 %27 to i32
		%29 = icmp eq %28 13
		br %30
	30:
		%31 = phi [1, %22], [1, %18], [1, %14], [1, %10], [1, %0], [%29, %26]
		%32 = zext i1 %31 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %32)
		%33 = call zeroext i8 @get_pc_21_1(i32 1, i32 0)
		%34 = zext i8 %33 to i32
		%35 = icmp eq %34 3
		br %35, %56, %36
	36:
		%37 = call zeroext i8 @get_pc_21_1(i32 1, i32 0)
		%38 = zext i8 %37 to i32
		%39 = icmp eq %38 4
		br %39, %56, %40
	40:
		%41 = call zeroext i8 @get_pc_21_1(i32 1, i32 0)
		%42 = zext i8 %41 to i32
		%43 = icmp eq %42 7
		br %43, %56, %44
	44:
		%45 = call zeroext i8 @get_pc_21_1(i32 1, i32 0)
		%46 = zext i8 %45 to i32
		%47 = icmp eq %46 9
		br %47, %56, %48
	48:
		%49 = call zeroext i8 @get_pc_21_1(i32 1, i32 0)
		%50 = zext i8 %49 to i32
		%51 = icmp eq %50 11
		br %51, %56, %52
	52:
		%53 = call zeroext i8 @get_pc_21_1(i32 1, i32 0)
		%54 = zext i8 %53 to i32
		%55 = icmp eq %54 13
		br %56
	56:
		%57 = phi [1, %48], [1, %44], [1, %40], [1, %36], [1, %30], [%55, %52]
		%58 = zext i1 %57 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %58)
		%59 = call zeroext i8 @get_pc_21_1(i32 2, i32 0)
		%60 = zext i8 %59 to i32
		%61 = icmp eq %60 3
		br %61, %82, %62
	62:
		%63 = call zeroext i8 @get_pc_21_1(i32 2, i32 0)
		%64 = zext i8 %63 to i32
		%65 = icmp eq %64 4
		br %65, %82, %66
	66:
		%67 = call zeroext i8 @get_pc_21_1(i32 2, i32 0)
		%68 = zext i8 %67 to i32
		%69 = icmp eq %68 7
		br %69, %82, %70
	70:
		%71 = call zeroext i8 @get_pc_21_1(i32 2, i32 0)
		%72 = zext i8 %71 to i32
		%73 = icmp eq %72 9
		br %73, %82, %74
	74:
		%75 = call zeroext i8 @get_pc_21_1(i32 2, i32 0)
		%76 = zext i8 %75 to i32
		%77 = icmp eq %76 11
		br %77, %82, %78
	78:
		%79 = call zeroext i8 @get_pc_21_1(i32 2, i32 0)
		%80 = zext i8 %79 to i32
		%81 = icmp eq %80 13
		br %82
	82:
		%83 = phi [1, %74], [1, %70], [1, %66], [1, %62], [1, %56], [%81, %78]
		%84 = zext i1 %83 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %84)
		%85 = call signext i8 @get_E_21_1(i32 0)
		%86 = sext i8 %85 to i32
		%87 = icmp eq %86 -1
		%88 = zext i1 %87 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %88)
		%89 = call signext i8 @get_E_21_1(i32 1)
		%90 = sext i8 %89 to i32
		%91 = icmp eq %90 0
		%92 = zext i1 %91 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %92)
		%93 = call signext i8 @get_E_21_1(i32 2)
		%94 = sext i8 %93 to i32
		%95 = icmp eq %94 -1
		%96 = zext i1 %95 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %96)
		%97 = call signext i8 @get_E_21_1(i32 3)
		%98 = sext i8 %97 to i32
		%99 = icmp eq %98 -1
		%100 = zext i1 %99 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %100)
		%101 = call signext i8 @get_I_21_1(i32 0, i32 0)
		%102 = sext i8 %101 to i32
		%103 = icmp eq %102 0
		%104 = zext i1 %103 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %104)
		%105 = call signext i8 @get_I_21_1(i32 1, i32 0)
		%106 = sext i8 %105 to i32
		%107 = icmp eq %106 0
		%108 = zext i1 %107 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %108)
		%109 = call signext i8 @get_I_21_1(i32 2, i32 0)
		%110 = sext i8 %109 to i32
		%111 = icmp eq %110 1
		%112 = zext i1 %111 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %112)
		store 0, %1
		br %113
	113:
		%114 = load %1
		%115 = zext i8 %114 to i32
		%116 = icmp slt %115 4
		br %116, %117, %126
	117:
		%118 = load %1
		%119 = zext i8 %118 to i32
		%120 = load %1
		%121 = zext i8 %120 to i32
		%122 = call signext i8 @get_E_21_1(i32 %121)
		Unnamed Call-Instruction = call BasicVoidType @setE(i32 %119, i8 signext %122)
		br %123
	123:
		%124 = load %1
		%125 = add i8 %124, 1
		store %125, %1
		br %113
	126:
		store 0, %1
		br %127
	127:
		%128 = load %1
		%129 = zext i8 %128 to i32
		%130 = icmp slt %129 3
		br %130, %131, %172
	131:
		store 0, %2
		br %132
	132:
		%133 = load %2
		%134 = zext i8 %133 to i32
		%135 = icmp slt %134 1
		br %135, %136, %150
	136:
		%137 = load %1
		%138 = zext i8 %137 to i32
		%139 = load %2
		%140 = zext i8 %139 to i32
		%141 = load %1
		%142 = zext i8 %141 to i32
		%143 = load %2
		%144 = zext i8 %143 to i32
		%145 = call zeroext i8 @get_pc_21_1(i32 %142, i32 %144)
		%146 = zext i8 %145 to i32
		Unnamed Call-Instruction = call BasicVoidType @setpc(i32 %138, i32 %140, i32 %146)
		br %147
	147:
		%148 = load %2
		%149 = add i8 %148, 1
		store %149, %2
		br %132
	150:
		store 0, %2
		br %151
	151:
		%152 = load %2
		%153 = zext i8 %152 to i32
		%154 = icmp slt %153 1
		br %154, %155, %168
	155:
		%156 = load %1
		%157 = zext i8 %156 to i32
		%158 = load %2
		%159 = zext i8 %158 to i32
		%160 = load %1
		%161 = zext i8 %160 to i32
		%162 = load %2
		%163 = zext i8 %162 to i32
		%164 = call signext i8 @get_I_21_1(i32 %161, i32 %163)
		Unnamed Call-Instruction = call BasicVoidType @setI(i32 %157, i32 %159, i8 signext %164)
		br %165
	165:
		%166 = load %2
		%167 = add i8 %166, 1
		store %167, %2
		br %151
	168:
		br %169
	169:
		%170 = load %1
		%171 = add i8 %170, 1
		store %171, %1
		br %127
	172:
		ret void

*BasicFunctionTypename: "env" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext, 3 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 535
	0:
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%9 = zext i1 %3 to i8
		store %9, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		%10 = load %6
		%11 = zext i8 %10 to i32
		%12 = load %7
		Unnamed Call-Instruction = call BasicVoidType @setE(i32 %11, i8 signext %12)
		ret void

*BasicFunctionTypename: "_0_7" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 551
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call signext i8 @getE(i32 0)
		%6 = sext i8 %5 to i32
		%7 = load %2
		%8 = icmp ne %6 %7
		%9 = zext i1 %8 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %9)
		%10 = call signext i8 @getE(i32 1)
		%11 = sext i8 %10 to i32
		%12 = icmp eq %11 1
		%13 = zext i1 %12 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %13)
		%14 = call signext i8 @getE(i32 2)
		%15 = sext i8 %14 to i32
		%16 = icmp eq %15 1
		br %16, %17, %22
	17:
		%18 = load %2
		%19 = call signext i8 @getI(i32 %18, i32 0)
		%20 = sext i8 %19 to i32
		%21 = icmp eq %20 0
		br %22
	22:
		%23 = phi [0, %1], [%21, %17]
		%24 = zext i1 %23 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %24)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store 2, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%25 = load %2
		%26 = call signext i8 @getI(i32 %25, i32 0)
		store %26, %4
		%27 = load %2
		%28 = trunc i32 %27 to i8
		%29 = load %3
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %28, i8 zeroext 1, i8 signext %29, i1 zeroext 1)
		%30 = load %2
		%31 = trunc i32 %30 to i8
		%32 = load %4
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %31, i8 zeroext 3, i8 signext %32, i1 zeroext 0)
		%33 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setpc(i32 %33, i32 0, i32 6)
		ret void

*BasicFunctionTypename: "_0_8" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 584
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store -1, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store 0, %4
		%6 = load %2
		%7 = trunc i32 %6 to i8
		%8 = load %3
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %7, i8 zeroext 0, i8 signext %8, i1 zeroext 1)
		%9 = load %2
		%10 = trunc i32 %9 to i8
		%11 = load %4
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %10, i8 zeroext 1, i8 signext %11, i1 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%12 = call i32 @__VERIFIER_nondet_int()
		%13 = trunc i32 %12 to i8
		store %13, %5
		%14 = load %5
		%15 = zext i8 %14 to i32
		%16 = icmp eq %15 3
		br %16, %37, %17
	17:
		%18 = load %5
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 4
		br %20, %37, %21
	21:
		%22 = load %5
		%23 = zext i8 %22 to i32
		%24 = icmp eq %23 7
		br %24, %37, %25
	25:
		%26 = load %5
		%27 = zext i8 %26 to i32
		%28 = icmp eq %27 9
		br %28, %37, %29
	29:
		%30 = load %5
		%31 = zext i8 %30 to i32
		%32 = icmp eq %31 11
		br %32, %37, %33
	33:
		%34 = load %5
		%35 = zext i8 %34 to i32
		%36 = icmp eq %35 13
		br %37
	37:
		%38 = phi [1, %29], [1, %25], [1, %21], [1, %17], [1, %1], [%36, %33]
		%39 = zext i1 %38 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %39)
		%40 = load %2
		%41 = load %5
		%42 = zext i8 %41 to i32
		Unnamed Call-Instruction = call BasicVoidType @setpc(i32 %40, i32 0, i32 %42)
		ret void

*BasicFunctionTypename: "_0_2" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 622
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store 3, %3
		%5 = load %2
		%6 = trunc i32 %5 to i8
		%7 = load %3
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %6, i8 zeroext 1, i8 signext %7, i1 zeroext 1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%8 = call i32 @__VERIFIER_nondet_int()
		%9 = trunc i32 %8 to i8
		store %9, %4
		%10 = load %4
		%11 = zext i8 %10 to i32
		%12 = icmp eq %11 3
		br %12, %33, %13
	13:
		%14 = load %4
		%15 = zext i8 %14 to i32
		%16 = icmp eq %15 4
		br %16, %33, %17
	17:
		%18 = load %4
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 7
		br %20, %33, %21
	21:
		%22 = load %4
		%23 = zext i8 %22 to i32
		%24 = icmp eq %23 9
		br %24, %33, %25
	25:
		%26 = load %4
		%27 = zext i8 %26 to i32
		%28 = icmp eq %27 11
		br %28, %33, %29
	29:
		%30 = load %4
		%31 = zext i8 %30 to i32
		%32 = icmp eq %31 13
		br %33
	33:
		%34 = phi [1, %25], [1, %21], [1, %17], [1, %13], [1, %1], [%32, %29]
		%35 = zext i1 %34 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %35)
		%36 = load %2
		%37 = load %4
		%38 = zext i8 %37 to i32
		Unnamed Call-Instruction = call BasicVoidType @setpc(i32 %36, i32 0, i32 %38)
		ret void

*BasicFunctionTypename: "_0_12" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 655
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store -1, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store 0, %4
		%6 = load %2
		%7 = trunc i32 %6 to i8
		%8 = load %3
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %7, i8 zeroext 0, i8 signext %8, i1 zeroext 1)
		%9 = load %2
		%10 = trunc i32 %9 to i8
		%11 = load %4
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %10, i8 zeroext 1, i8 signext %11, i1 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%12 = call i32 @__VERIFIER_nondet_int()
		%13 = trunc i32 %12 to i8
		store %13, %5
		%14 = load %5
		%15 = zext i8 %14 to i32
		%16 = icmp eq %15 3
		br %16, %37, %17
	17:
		%18 = load %5
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 4
		br %20, %37, %21
	21:
		%22 = load %5
		%23 = zext i8 %22 to i32
		%24 = icmp eq %23 7
		br %24, %37, %25
	25:
		%26 = load %5
		%27 = zext i8 %26 to i32
		%28 = icmp eq %27 9
		br %28, %37, %29
	29:
		%30 = load %5
		%31 = zext i8 %30 to i32
		%32 = icmp eq %31 11
		br %32, %37, %33
	33:
		%34 = load %5
		%35 = zext i8 %34 to i32
		%36 = icmp eq %35 13
		br %37
	37:
		%38 = phi [1, %29], [1, %25], [1, %21], [1, %17], [1, %1], [%36, %33]
		%39 = zext i1 %38 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %39)
		%40 = load %2
		%41 = load %5
		%42 = zext i8 %41 to i32
		Unnamed Call-Instruction = call BasicVoidType @setpc(i32 %40, i32 0, i32 %42)
		ret void

*BasicFunctionTypename: "_0_5" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 693
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%7 = call signext i8 @getE(i32 1)
		%8 = sext i8 %7 to i32
		%9 = icmp eq %8 3
		%10 = zext i1 %9 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %10)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store -1, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store -1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store 0, %5
		%11 = load %2
		%12 = trunc i32 %11 to i8
		%13 = load %3
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %12, i8 zeroext 0, i8 signext %13, i1 zeroext 1)
		%14 = load %2
		%15 = trunc i32 %14 to i8
		%16 = load %4
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %15, i8 zeroext 3, i8 signext %16, i1 zeroext 0)
		%17 = load %2
		%18 = trunc i32 %17 to i8
		%19 = load %5
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %18, i8 zeroext 1, i8 signext %19, i1 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%20 = call i32 @__VERIFIER_nondet_int()
		%21 = trunc i32 %20 to i8
		store %21, %6
		%22 = load %6
		%23 = zext i8 %22 to i32
		%24 = icmp eq %23 3
		br %24, %45, %25
	25:
		%26 = load %6
		%27 = zext i8 %26 to i32
		%28 = icmp eq %27 4
		br %28, %45, %29
	29:
		%30 = load %6
		%31 = zext i8 %30 to i32
		%32 = icmp eq %31 7
		br %32, %45, %33
	33:
		%34 = load %6
		%35 = zext i8 %34 to i32
		%36 = icmp eq %35 9
		br %36, %45, %37
	37:
		%38 = load %6
		%39 = zext i8 %38 to i32
		%40 = icmp eq %39 11
		br %40, %45, %41
	41:
		%42 = load %6
		%43 = zext i8 %42 to i32
		%44 = icmp eq %43 13
		br %45
	45:
		%46 = phi [1, %37], [1, %33], [1, %29], [1, %25], [1, %1], [%44, %41]
		%47 = zext i1 %46 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %47)
		%48 = load %2
		%49 = load %6
		%50 = zext i8 %49 to i32
		Unnamed Call-Instruction = call BasicVoidType @setpc(i32 %48, i32 0, i32 %50)
		ret void

*BasicFunctionTypename: "_0_4" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 739
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%7 = call signext i8 @getE(i32 0)
		%8 = sext i8 %7 to i32
		%9 = load %2
		%10 = icmp ne %8 %9
		%11 = zext i1 %10 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %11)
		%12 = call signext i8 @getE(i32 1)
		%13 = sext i8 %12 to i32
		%14 = icmp eq %13 0
		%15 = zext i1 %14 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %15)
		%16 = load %2
		%17 = call signext i8 @getI(i32 %16, i32 0)
		%18 = sext i8 %17 to i32
		%19 = icmp ne %18 2
		%20 = zext i1 %19 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %20)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%21 = load %2
		%22 = trunc i32 %21 to i8
		store %22, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%23 = load %2
		%24 = call signext i8 @getI(i32 %23, i32 0)
		store %24, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store 1, %5
		%25 = load %2
		%26 = trunc i32 %25 to i8
		%27 = load %3
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %26, i8 zeroext 0, i8 signext %27, i1 zeroext 1)
		%28 = load %2
		%29 = trunc i32 %28 to i8
		%30 = load %4
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %29, i8 zeroext 2, i8 signext %30, i1 zeroext 0)
		%31 = load %2
		%32 = trunc i32 %31 to i8
		%33 = load %5
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %32, i8 zeroext 1, i8 signext %33, i1 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%34 = call i32 @__VERIFIER_nondet_int()
		%35 = trunc i32 %34 to i8
		store %35, %6
		%36 = load %6
		%37 = zext i8 %36 to i32
		%38 = icmp eq %37 3
		br %38, %59, %39
	39:
		%40 = load %6
		%41 = zext i8 %40 to i32
		%42 = icmp eq %41 4
		br %42, %59, %43
	43:
		%44 = load %6
		%45 = zext i8 %44 to i32
		%46 = icmp eq %45 7
		br %46, %59, %47
	47:
		%48 = load %6
		%49 = zext i8 %48 to i32
		%50 = icmp eq %49 9
		br %50, %59, %51
	51:
		%52 = load %6
		%53 = zext i8 %52 to i32
		%54 = icmp eq %53 11
		br %54, %59, %55
	55:
		%56 = load %6
		%57 = zext i8 %56 to i32
		%58 = icmp eq %57 13
		br %59
	59:
		%60 = phi [1, %51], [1, %47], [1, %43], [1, %39], [1, %1], [%58, %55]
		%61 = zext i1 %60 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %61)
		%62 = load %2
		%63 = load %6
		%64 = zext i8 %63 to i32
		Unnamed Call-Instruction = call BasicVoidType @setpc(i32 %62, i32 0, i32 %64)
		ret void

*BasicFunctionTypename: "_0_10" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 796
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store -1, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store 0, %4
		%6 = load %2
		%7 = trunc i32 %6 to i8
		%8 = load %3
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %7, i8 zeroext 0, i8 signext %8, i1 zeroext 1)
		%9 = load %2
		%10 = trunc i32 %9 to i8
		%11 = load %4
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %10, i8 zeroext 1, i8 signext %11, i1 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%12 = call i32 @__VERIFIER_nondet_int()
		%13 = trunc i32 %12 to i8
		store %13, %5
		%14 = load %5
		%15 = zext i8 %14 to i32
		%16 = icmp eq %15 3
		br %16, %37, %17
	17:
		%18 = load %5
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 4
		br %20, %37, %21
	21:
		%22 = load %5
		%23 = zext i8 %22 to i32
		%24 = icmp eq %23 7
		br %24, %37, %25
	25:
		%26 = load %5
		%27 = zext i8 %26 to i32
		%28 = icmp eq %27 9
		br %28, %37, %29
	29:
		%30 = load %5
		%31 = zext i8 %30 to i32
		%32 = icmp eq %31 11
		br %32, %37, %33
	33:
		%34 = load %5
		%35 = zext i8 %34 to i32
		%36 = icmp eq %35 13
		br %37
	37:
		%38 = phi [1, %29], [1, %25], [1, %21], [1, %17], [1, %1], [%36, %33]
		%39 = zext i1 %38 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %39)
		%40 = load %2
		%41 = load %5
		%42 = zext i8 %41 to i32
		Unnamed Call-Instruction = call BasicVoidType @setpc(i32 %40, i32 0, i32 %42)
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 834
	0:
		%1 = alloca i32, align 4
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @init()
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = trunc i32 %4 to i8
		store %5, %2
		br %6
	6:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = trunc i32 %7 to i8
		store %8, %3
		%9 = load %3
		%10 = zext i8 %9 to i32
		%11 = icmp slt %10 3
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = load %3
		store %13, %2
		%14 = load %2
		%15 = zext i8 %14 to i32
		%16 = icmp slt %15 3
		%17 = zext i1 %16 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %17)
		%18 = load %2
		%19 = zext i8 %18 to i32
		%20 = call zeroext i8 @getpc(i32 %19, i32 0)
		%21 = zext i8 %20 to i32
		switch %21, %58 [2, %22 3, %25 4, %28 5, %31 6, %34 7, %37 8, %40 9, %43 10, %46 11, %49 12, %52 13, %55]
	22:
		%23 = load %2
		%24 = zext i8 %23 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_2(i32 %24)
		br %59
	25:
		%26 = load %2
		%27 = zext i8 %26 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_3(i32 %27)
		br %59
	28:
		%29 = load %2
		%30 = zext i8 %29 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_4(i32 %30)
		br %59
	31:
		%32 = load %2
		%33 = zext i8 %32 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_5(i32 %33)
		br %59
	34:
		%35 = load %2
		%36 = zext i8 %35 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_6(i32 %36)
		br %59
	37:
		%38 = load %2
		%39 = zext i8 %38 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_7(i32 %39)
		br %59
	40:
		%41 = load %2
		%42 = zext i8 %41 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_8(i32 %42)
		br %59
	43:
		%44 = load %2
		%45 = zext i8 %44 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_9(i32 %45)
		br %59
	46:
		%47 = load %2
		%48 = zext i8 %47 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_10(i32 %48)
		br %59
	49:
		%50 = load %2
		%51 = zext i8 %50 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_11(i32 %51)
		br %59
	52:
		%53 = load %2
		%54 = zext i8 %53 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_12(i32 %54)
		br %59
	55:
		%56 = load %2
		%57 = zext i8 %56 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_13(i32 %57)
		br %59
	58:
		br %59
	59:
		%60 = call signext i8 @getI(i32 2, i32 0)
		%61 = sext i8 %60 to i32
		%62 = icmp eq %61 0
		br %62, %67, %63
	63:
		%64 = call signext i8 @getI(i32 2, i32 0)
		%65 = sext i8 %64 to i32
		%66 = icmp eq %65 2
		br %66, %67, %84
	67:
		%68 = call signext i8 @getI(i32 0, i32 0)
		%69 = sext i8 %68 to i32
		%70 = icmp eq %69 0
		br %70, %75, %71
	71:
		%72 = call signext i8 @getI(i32 0, i32 0)
		%73 = sext i8 %72 to i32
		%74 = icmp eq %73 2
		br %74, %75, %84
	75:
		%76 = call signext i8 @getI(i32 1, i32 0)
		%77 = sext i8 %76 to i32
		%78 = icmp eq %77 0
		br %78, %83, %79
	79:
		%80 = call signext i8 @getI(i32 1, i32 0)
		%81 = sext i8 %80 to i32
		%82 = icmp eq %81 2
		br %82, %83, %84
	83:
		ret 0
	84:
		br %6


Analyze Termination of all function calls matching the pattern:
main()/hpcwork/ff862203/termcomp25/benchmarks/yuItf.c:77:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]
}
^
/hpcwork/ff862203/termcomp25/benchmarks/yuItf.c:94:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]
}
^
/hpcwork/ff862203/termcomp25/benchmarks/yuItf.c:111:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]
}
^
/hpcwork/ff862203/termcomp25/benchmarks/yuItf.c:128:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]
