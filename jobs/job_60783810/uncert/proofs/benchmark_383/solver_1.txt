YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/VsZHi.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 70 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1758 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 25 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 30 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/VsZHi.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/VsZHi.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		%9 = call i32 @__VERIFIER_nondet_int()
		store %9, %5
		%10 = load %2
		%11 = load %3
		%12 = icmp eq %10 %11
		br %12, %13, %36
	13:
		br %14
	14:
		%15 = load %4
		%16 = icmp sge %15 0
		br %16, %20, %17
	17:
		%18 = load %5
		%19 = icmp sge %18 0
		br %20
	20:
		%21 = phi [1, %14], [%19, %17]
		br %21, %22, %35
	22:
		%23 = load %4
		%24 = load %2
		%25 = add i32 %23, %24
		%26 = load %3
		%27 = sub i32 %25, %26
		%28 = sub i32 %27, 1
		store %28, %4
		%29 = load %5
		%30 = load %3
		%31 = add i32 %29, %30
		%32 = load %2
		%33 = sub i32 %31, %32
		%34 = sub i32 %33, 1
		store %34, %5
		br %14
	35:
		br %36
	36:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 25 rulesP rules:
f_431(v955, v956, v957, v958, v959, v960, v961, v962, 1, v968, 0, v966, v964, v967, v969, v970, v971, v972, v973, v974, v975, 3, 2, 4) -> f_432(v955, v956, v957, v958, v959, v960, v961, v962, 1, v968, 0, v966, v964, v967, v969, v970, v971, v972, v973, v974, v975, 3, 2, 4) :|: 0 = 0
f_432(v955, v956, v957, v958, v959, v960, v961, v962, 1, v968, 0, v966, v964, v967, v969, v970, v971, v972, v973, v974, v975, 3, 2, 4) -> f_433(v955, v956, v957, v958, v959, v960, v961, v962, 1, v968, 0, v966, v964, v967, v969, v970, v971, v972, v973, v974, v975, 3, 2, 4) :|: TRUE
f_433(v955, v956, v957, v958, v959, v960, v961, v962, 1, v968, 0, v966, v964, v967, v969, v970, v971, v972, v973, v974, v975, 3, 2, 4) -> f_434(v955, v956, v957, v958, v959, v960, v961, v962, 1, v968, 0, v970, v964, v967, v966, v969, v971, v972, v973, v974, v975, 3, 2, 4) :|: 0 = 0
f_434(v955, v956, v957, v958, v959, v960, v961, v962, 1, v968, 0, v970, v964, v967, v966, v969, v971, v972, v973, v974, v975, 3, 2, 4) -> f_435(v955, v956, v957, v958, v959, v960, v961, v962, 1, v968, 0, v970, v964, v967, v966, v969, v971, v972, v973, v974, v975, 3, 2, 4) :|: 0 <= v970 && 1 <= v966 && 1 <= v962
f_435(v955, v956, v957, v958, v959, v960, v961, v962, 1, v968, 0, v970, v964, v967, v966, v969, v971, v972, v973, v974, v975, 3, 2, 4) -> f_437(v955, v956, v957, v958, v959, v960, v961, v962, 1, v968, 0, v970, v964, v967, v966, v969, v971, v972, v973, v974, v975, 3, 2, 4) :|: 0 = 0
f_437(v955, v956, v957, v958, v959, v960, v961, v962, 1, v968, 0, v970, v964, v967, v966, v969, v971, v972, v973, v974, v975, 3, 2, 4) -> f_439(v955, v956, v957, v958, v959, v960, v961, v962, 1, v968, 0, v970, v964, v967, v966, v969, v971, v972, v973, v974, v975, 3, 2, 4) :|: 0 = 0
f_439(v955, v956, v957, v958, v959, v960, v961, v962, 1, v968, 0, v970, v964, v967, v966, v969, v971, v972, v973, v974, v975, 3, 2, 4) -> f_440(v955, v956, v957, v958, v959, v960, v961, v962, 1, v968, 0, v964, v967, v966, v969, v970, v971, v972, v973, v974, v975, 3, 4) :|: TRUE
f_440(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1037, v1038, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4) -> f_442(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1037, v1038, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4) :|: TRUE
f_442(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1037, v1038, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4) -> f_444(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1038, v1037, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4) :|: 0 = 0
f_444(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1038, v1037, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4) -> f_446(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1038, v1037, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4) :|: 0 = 0
f_446(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1038, v1037, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4) -> f_447(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1037, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4) :|: v1119 = v1035 + v1031
f_447(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1037, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4) -> f_448(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1037, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4) :|: 0 = 0
f_448(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1037, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4) -> f_449(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4) :|: v1035 + v1031 = v1119
f_449(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4) -> f_450(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) :|: 1 + v1120 = v1035 && 2 + v1120 <= 0
f_450(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) -> f_451(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) :|: TRUE
f_451(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1039, v1040, v1041, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) -> f_452(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1040, v1039, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) :|: 0 = 0
f_452(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1040, v1039, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) -> f_453(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1040, v1039, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) :|: 0 = 0
f_453(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1040, v1039, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) -> f_454(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1122, v1039, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) :|: v1122 = v1041 + v1031
f_454(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1122, v1039, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) -> f_455(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1122, v1039, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) :|: 0 = 0
f_455(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1122, v1039, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) -> f_456(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1122, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) :|: v1041 + v1031 = v1122
f_456(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1122, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) -> f_457(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1122, v1123, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) :|: 1 + v1123 = v1041 && 0 <= 1 + v1123
f_457(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1122, v1123, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) -> f_458(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1122, v1123, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) :|: TRUE
f_458(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1122, v1123, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) -> f_459(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1122, v1123, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) :|: TRUE
f_459(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1119, v1120, v1041, v1122, v1123, v1042, v1043, v1044, v1045, v1046, 3, 4, 2) -> f_430(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 1, v1035, 0, v1041, v1119, v1120, v1122, v1123, v1042, v1043, v1044, v1045, v1046, 3, 2, 4) :|: TRUE
f_430(v955, v956, v957, v958, v959, v960, v961, v962, 1, v964, 0, v966, v967, v968, v969, v970, v971, v972, v973, v974, v975, 3, 2, 4) -> f_431(v955, v956, v957, v958, v959, v960, v961, v962, 1, v968, 0, v966, v964, v967, v969, v970, v971, v972, v973, v974, v975, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_431(v955:0, v956:0, v957:0, v958:0, v959:0, v960:0, v961:0, v962:0, 1, 1 + v1120:0, 0, v966:0, v964:0, v967:0, v969:0, 1 + v1123:0, v971:0, v972:0, v973:0, v974:0, v975:0, 3, 2, 4) -> f_431(v955:0, v956:0, v957:0, v958:0, v959:0, v960:0, v961:0, v962:0, 1, v1120:0, 0, 1 + v1123:0, 1 + v1120:0, 1 + v1120:0 + v960:0, 1 + v1123:0 + v960:0, v1123:0, v971:0, v972:0, v973:0, v974:0, v975:0, 3, 2, 4) :|: v966:0 > 0 && v1123:0 > -2 && v962:0 > 0 && v1120:0 < -1
Filtered unneeded arguments:
   f_431(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_431(x8, x10, x12, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_431(v962:0, sum~cons_1~v1120:0, v966:0, sum~cons_1~v1123:0) -> f_431(v962:0, v1120:0, 1 + v1123:0, v1123:0) :|: v1123:0 > -2 && v966:0 > 0 && v1120:0 < -1 && v962:0 > 0 && sum~cons_1~v1120:0 = 1 + v1120:0 && sum~cons_1~v1123:0 = 1 + v1123:0

----------------------------------------

(9)
Obligation:
Rules:
f_431(v962:0, sum~cons_1~v1120:0, v966:0, sum~cons_1~v1123:0) -> f_431(v962:0, v1120:0, 1 + v1123:0, v1123:0) :|: v1123:0 > -2 && v966:0 > 0 && v1120:0 < -1 && v962:0 > 0 && sum~cons_1~v1120:0 = 1 + v1120:0 && sum~cons_1~v1123:0 = 1 + v1123:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_431(v962:0:0, sum~cons_1~v1120:0:0, v966:0:0, sum~cons_1~v1123:0:0) -> f_431(v962:0:0, v1120:0:0, 1 + v1123:0:0, v1123:0:0) :|: v1120:0:0 < -1 && v962:0:0 > 0 && v966:0:0 > 0 && v1123:0:0 > -2 && sum~cons_1~v1120:0:0 = 1 + v1120:0:0 && sum~cons_1~v1123:0:0 = 1 + v1123:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_431(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_431(v962:0:0, sum~cons_1~v1120:0:0, v966:0:0, sum~cons_1~v1123:0:0) -> f_431(v962:0:0, v1120:0:0, 1 + v1123:0:0, v1123:0:0) :|: v1120:0:0 < -1 && v962:0:0 > 0 && v966:0:0 > 0 && v1123:0:0 > -2 && sum~cons_1~v1120:0:0 = 1 + v1120:0:0 && sum~cons_1~v1123:0:0 = 1 + v1123:0:0
The following rules are bounded:
f_431(v962:0:0, sum~cons_1~v1120:0:0, v966:0:0, sum~cons_1~v1123:0:0) -> f_431(v962:0:0, v1120:0:0, 1 + v1123:0:0, v1123:0:0) :|: v1120:0:0 < -1 && v962:0:0 > 0 && v966:0:0 > 0 && v1123:0:0 > -2 && sum~cons_1~v1120:0:0 = 1 + v1120:0:0 && sum~cons_1~v1123:0:0 = 1 + v1123:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_353(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v594, v595, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) -> f_355(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v594, v595, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) :|: 0 <= v596 && 1 <= v594 && 1 <= v591
f_355(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v594, v595, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) -> f_358(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v594, v595, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) :|: 0 = 0
f_358(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v594, v595, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) -> f_361(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v594, v595, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) :|: 0 = 0
f_361(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v594, v595, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) -> f_364(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v594, v595, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) :|: TRUE
f_364(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v594, v595, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) -> f_367(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v595, v594, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) :|: 0 = 0
f_367(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v595, v594, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) -> f_371(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v595, v594, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) :|: 0 = 0
f_371(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v595, v594, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) -> f_375(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v594, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) :|: v661 = v596 + v590
f_375(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v594, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) -> f_379(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v594, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) :|: 0 = 0
f_379(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v594, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) -> f_383(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) :|: v596 + v590 = v661
f_383(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) -> f_388(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) :|: 1 + v798 = v596 && 0 <= 1 + v798
f_388(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) -> f_391(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) :|: TRUE
f_391(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) -> f_394(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v598, v597, v600, v601, v602, v603, v604, 0, 3, 4) :|: 0 = 0
f_394(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v598, v597, v600, v601, v602, v603, v604, 0, 3, 4) -> f_397(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v598, v597, v600, v601, v602, v603, v604, 0, 3, 4) :|: 0 = 0
f_397(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v598, v597, v600, v601, v602, v603, v604, 0, 3, 4) -> f_400(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v808, v597, v600, v601, v602, v603, v604, 0, 3, 4) :|: v808 = v599 + v590
f_400(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v808, v597, v600, v601, v602, v603, v604, 0, 3, 4) -> f_404(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v808, v597, v600, v601, v602, v603, v604, 0, 3, 4) :|: 0 = 0
f_404(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v808, v597, v600, v601, v602, v603, v604, 0, 3, 4) -> f_408(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v808, v600, v601, v602, v603, v604, 0, 3, 4) :|: v599 + v590 = v808
f_408(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v808, v600, v601, v602, v603, v604, 0, 3, 4) -> f_412(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v808, v876, v600, v601, v602, v603, v604, 0, 3, 4) :|: 1 + v876 = v599
f_412(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v808, v876, v600, v601, v602, v603, v604, 0, 3, 4) -> f_416(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v808, v876, v600, v601, v602, v603, v604, 0, 3, 4) :|: TRUE
f_416(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v808, v876, v600, v601, v602, v603, v604, 0, 3, 4) -> f_420(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v808, v876, v600, v601, v602, v603, v604, 0, 3, 4) :|: TRUE
f_420(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v808, v876, v600, v601, v602, v603, v604, 0, 3, 4) -> f_351(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v661, v798, v599, v808, v876, v600, v601, v602, v603, v604, 0, 3, 4) :|: TRUE
f_351(v585, v586, v587, v588, v589, v590, v591, v592, 1, v594, v595, v596, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) -> f_353(v585, v586, v587, v588, v589, v590, v591, v592, 1, v596, v594, v595, v597, v598, v599, v600, v601, v602, v603, v604, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_353(v585:0, v586:0, v587:0, v588:0, v589:0, v590:0, v591:0, v592:0, 1, 1 + v798:0, v594:0, v595:0, v597:0, v598:0, 1 + v876:0, v600:0, v601:0, v602:0, v603:0, v604:0, 0, 3, 4) -> f_353(v585:0, v586:0, v587:0, v588:0, v589:0, v590:0, v591:0, v592:0, 1, v798:0, 1 + v798:0, 1 + v798:0 + v590:0, 1 + v876:0, 1 + v876:0 + v590:0, v876:0, v600:0, v601:0, v602:0, v603:0, v604:0, 0, 3, 4) :|: v594:0 > 0 && v798:0 > -2 && v591:0 > 0
Filtered unneeded arguments:
   f_353(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_353(x7, x10, x11, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_353(v591:0, sum~cons_1~v798:0, v594:0, sum~cons_1~v876:0) -> f_353(v591:0, v798:0, 1 + v798:0, v876:0) :|: v798:0 > -2 && v591:0 > 0 && v594:0 > 0 && sum~cons_1~v798:0 = 1 + v798:0 && sum~cons_1~v876:0 = 1 + v876:0

----------------------------------------

(16)
Obligation:
Rules:
f_353(v591:0, sum~cons_1~v798:0, v594:0, sum~cons_1~v876:0) -> f_353(v591:0, v798:0, 1 + v798:0, v876:0) :|: v798:0 > -2 && v591:0 > 0 && v594:0 > 0 && sum~cons_1~v798:0 = 1 + v798:0 && sum~cons_1~v876:0 = 1 + v876:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_353(v591:0:0, sum~cons_1~v798:0:0, v594:0:0, sum~cons_1~v876:0:0) -> f_353(v591:0:0, v798:0:0, 1 + v798:0:0, v876:0:0) :|: v798:0:0 > -2 && v591:0:0 > 0 && v594:0:0 > 0 && sum~cons_1~v798:0:0 = 1 + v798:0:0 && sum~cons_1~v876:0:0 = 1 + v876:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_353(x, x1, x2, x3)] = x1

The following rules are decreasing:
f_353(v591:0:0, sum~cons_1~v798:0:0, v594:0:0, sum~cons_1~v876:0:0) -> f_353(v591:0:0, v798:0:0, 1 + v798:0:0, v876:0:0) :|: v798:0:0 > -2 && v591:0:0 > 0 && v594:0:0 > 0 && sum~cons_1~v798:0:0 = 1 + v798:0:0 && sum~cons_1~v876:0:0 = 1 + v876:0:0
The following rules are bounded:
f_353(v591:0:0, sum~cons_1~v798:0:0, v594:0:0, sum~cons_1~v876:0:0) -> f_353(v591:0:0, v798:0:0, 1 + v798:0:0, v876:0:0) :|: v798:0:0 > -2 && v591:0:0 > 0 && v594:0:0 > 0 && sum~cons_1~v798:0:0 = 1 + v798:0:0 && sum~cons_1~v876:0:0 = 1 + v876:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
