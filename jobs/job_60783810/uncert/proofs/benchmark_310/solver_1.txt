YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/DMilY.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 491 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [EQUIVALENT, 86 ms]
(6) IntTRS
(7) IRSToKoat [EQUIVALENT, 0 ms]
(8) Koat Problem
(9) KoAT2 [EQUIVALENT, 97 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/DMilY.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/DMilY.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = icmp sgt %9 0
		br %10, %11, %15
	11:
		%12 = load %2
		%13 = load %4
		%14 = icmp slt %12 %13
		br %15
	15:
		%16 = phi [0, %8], [%14, %11]
		br %16, %17, %25
	17:
		%18 = load %2
		%19 = sub i32 0, %18
		%20 = load %3
		%21 = add i32 %19, %20
		%22 = sub i32 %21, 5
		store %22, %2
		%23 = load %3
		%24 = mul i32 2, %23
		store %24, %3
		br %8
	25:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 73 rulesP rules:
f_109 -> f_110(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_110(v1, v2, 3, 1, 4) -> f_111(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_111(v1, v3, v2, v4, 3, 1, 4) -> f_112(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_112(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_113(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_113(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_114(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_114(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_115(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_115(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_116(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_116(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_117(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_117(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_118(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_118(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_119(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_119(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_120(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_120(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_121(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_121(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_122(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_122(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_123(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_123(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_124(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_124(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_125(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 = 0
f_125(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_126(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 < v9
f_125(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_127(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: v9 <= 0
f_126(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_128(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: 0 = 0
f_127(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_129(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, 3, 1, 4) :|: 0 = 0
f_128(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_130(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: TRUE
f_129(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, 3, 1, 4) -> f_131(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, 3, 1, 4) :|: 0 = 0
f_130(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_132(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: 0 = 0
f_131(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, 3, 1, 4) -> f_133(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, 3, 1, 4) :|: TRUE
f_132(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_134(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: 0 = 0
f_134(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_135(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4, 2) :|: v9 < v13 && 2 <= v13
f_134(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_136(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: v13 <= v9
f_135(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4, 2) -> f_137(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4, 2) :|: 0 = 0
f_136(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_138(v1, v3, v5, v7, v9, v11, v13, 1, 0, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_137(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4, 2) -> f_139(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4, 2) :|: 0 = 0
f_138(v1, v3, v5, v7, v9, v11, v13, 1, 0, v2, v4, v6, v8, 3, 4) -> f_140(v1, v3, v5, v7, v9, v11, v13, 1, 0, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_139(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4, 2) -> f_141(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4, 2) :|: TRUE
f_140(v1, v3, v5, v7, v9, v11, v13, 1, 0, v2, v4, v6, v8, 3, 4) -> f_142(v1, v3, v5, v7, v9, v11, v13, 1, 0, v2, v4, v6, v8, 3, 4) :|: TRUE
f_141(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4, 2) -> f_143(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4, 2) :|: 0 = 0
f_143(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4, 2) -> f_144(v1, v3, v5, v7, v9, v11, v13, 1, v21, v2, v4, v6, v8, 0, 3, 4, 2) :|: v21 + v9 = 0 && 1 + v21 <= 0
f_144(v1, v3, v5, v7, v9, v11, v13, 1, v21, v2, v4, v6, v8, 0, 3, 4, 2) -> f_145(v1, v3, v5, v7, v9, v11, v13, 1, v21, v2, v4, v6, v8, 0, 3, 4, 2) :|: 0 = 0
f_145(v1, v3, v5, v7, v9, v11, v13, 1, v21, v2, v4, v6, v8, 0, 3, 4, 2) -> f_146(v1, v3, v5, v7, v9, v11, v13, 1, v21, v22, v2, v4, v6, v8, 0, 3, 4, 2) :|: v22 = v21 + v11
f_146(v1, v3, v5, v7, v9, v11, v13, 1, v21, v22, v2, v4, v6, v8, 0, 3, 4, 2) -> f_147(v1, v3, v5, v7, v9, v11, v13, 1, v21, v22, v23, v2, v4, v6, v8, 0, 3, 5, 4, 2) :|: 5 + v23 = v22
f_147(v1, v3, v5, v7, v9, v11, v13, 1, v21, v22, v23, v2, v4, v6, v8, 0, 3, 5, 4, 2) -> f_148(v1, v3, v5, v7, v9, v11, v13, 1, v21, v22, v23, v2, v4, v6, v8, 0, 3, 5, 4, 2) :|: TRUE
f_148(v1, v3, v5, v7, v9, v11, v13, 1, v21, v22, v23, v2, v4, v6, v8, 0, 3, 5, 4, 2) -> f_149(v1, v3, v5, v7, v9, v11, v13, 1, v21, v22, v23, v2, v4, v6, v8, 0, 3, 5, 4, 2) :|: 0 = 0
f_149(v1, v3, v5, v7, v9, v11, v13, 1, v21, v22, v23, v2, v4, v6, v8, 0, 3, 5, 4, 2) -> f_150(v1, v3, v5, v7, v9, v11, v13, 1, v21, v22, v23, v25, v2, v4, v6, v8, 0, 3, 5, 2, 4) :|: v25 = 2 * v11
f_150(v1, v3, v5, v7, v9, v11, v13, 1, v21, v22, v23, v25, v2, v4, v6, v8, 0, 3, 5, 2, 4) -> f_151(v1, v3, v5, v7, v9, v11, v13, 1, v21, v22, v23, v25, v2, v4, v6, v8, 0, 3, 5, 2, 4) :|: TRUE
f_151(v1, v3, v5, v7, v9, v11, v13, 1, v21, v22, v23, v25, v2, v4, v6, v8, 0, 3, 5, 2, 4) -> f_152(v1, v3, v5, v7, v9, v11, v13, 1, v21, v22, v23, v25, v2, v4, v6, v8, 0, 3, 5, 2, 4) :|: TRUE
f_152(v1, v3, v5, v7, v9, v11, v13, 1, v21, v22, v23, v25, v2, v4, v6, v8, 0, 3, 5, 2, 4) -> f_181(v1, v3, v5, v7, v9, v11, v13, v9, 1, v21, v11, v22, v23, v25, v2, v4, v6, v8, 0, 3, 5, 2, 4) :|: TRUE
f_181(v133, v134, v135, v136, v137, v138, v139, v140, 1, v142, v143, v144, v145, v146, v147, v148, v149, v150, 0, 3, 5, 2, 4) -> f_182(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 4) :|: 0 = 0
f_182(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 4) -> f_183(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) :|: 0 < v145 && 6 <= v144 && 7 <= v143 && 14 <= v146
f_182(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 4) -> f_184(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 4) :|: v145 <= 0 && v144 <= 5
f_183(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) -> f_185(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) :|: 0 = 0
f_184(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 4) -> f_186(v133, v134, v135, v136, v137, v138, v139, v145, 0, v140, 1, v142, v143, v144, v146, v147, v148, v149, v150, 3, 5, 2, 4) :|: 0 = 0
f_185(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) -> f_187(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) :|: TRUE
f_186(v133, v134, v135, v136, v137, v138, v139, v145, 0, v140, 1, v142, v143, v144, v146, v147, v148, v149, v150, 3, 5, 2, 4) -> f_188(v133, v134, v135, v136, v137, v138, v139, v145, 0, v140, 1, v142, v143, v144, v146, v147, v148, v149, v150, 3, 5, 2, 4) :|: 0 = 0
f_187(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) -> f_189(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) :|: 0 = 0
f_188(v133, v134, v135, v136, v137, v138, v139, v145, 0, v140, 1, v142, v143, v144, v146, v147, v148, v149, v150, 3, 5, 2, 4) -> f_190(v133, v134, v135, v136, v137, v138, v139, v145, 0, v140, 1, v142, v143, v144, v146, v147, v148, v149, v150, 3, 5, 2, 4) :|: TRUE
f_189(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) -> f_191(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) :|: 0 = 0
f_191(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) -> f_192(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) :|: v145 < v139
f_191(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) -> f_193(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 8, 7, 16, 4) :|: v139 <= v145 && 2 <= v145 && 7 <= v144 && 8 <= v143 && 16 <= v146
f_192(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) -> f_194(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) :|: 0 = 0
f_193(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 8, 7, 16, 4) -> f_195(v133, v134, v135, v136, v137, v138, v139, v145, 1, 0, v140, v142, v143, v144, v146, v147, v148, v149, v150, 3, 5, 2, 8, 7, 16, 4) :|: 0 = 0
f_194(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) -> f_196(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) :|: 0 = 0
f_195(v133, v134, v135, v136, v137, v138, v139, v145, 1, 0, v140, v142, v143, v144, v146, v147, v148, v149, v150, 3, 5, 2, 8, 7, 16, 4) -> f_197(v133, v134, v135, v136, v137, v138, v139, v145, 1, 0, v140, v142, v143, v144, v146, v147, v148, v149, v150, 3, 5, 2, 8, 7, 16, 4) :|: 0 = 0
f_196(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) -> f_198(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) :|: TRUE
f_197(v133, v134, v135, v136, v137, v138, v139, v145, 1, 0, v140, v142, v143, v144, v146, v147, v148, v149, v150, 3, 5, 2, 8, 7, 16, 4) -> f_199(v133, v134, v135, v136, v137, v138, v139, v145, 1, 0, v140, v142, v143, v144, v146, v147, v148, v149, v150, 3, 5, 2, 8, 7, 16, 4) :|: TRUE
f_198(v133, v134, v135, v136, v137, v138, v139, v145, 1, v140, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) -> f_200(v133, v134, v135, v136, v137, v138, v139, v145, 1, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) :|: 0 = 0
f_200(v133, v134, v135, v136, v137, v138, v139, v145, 1, v142, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) -> f_201(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) :|: v243 + v145 = 0 && 1 + v243 <= 0
f_201(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v143, v144, v146, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) -> f_202(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v144, v143, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) :|: 0 = 0
f_202(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v144, v143, v147, v148, v149, v150, 0, 3, 5, 2, 7, 6, 14, 4) -> f_203(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v244, v143, v147, v148, v149, v150, 0, 3, 2, 7, 14, 4) :|: v244 = v243 + v146
f_203(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v244, v143, v147, v148, v149, v150, 0, 3, 2, 7, 14, 4) -> f_204(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v244, v245, v143, v147, v148, v149, v150, 0, 3, 2, 5, 7, 14, 4) :|: 5 + v245 = v244
f_204(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v244, v245, v143, v147, v148, v149, v150, 0, 3, 2, 5, 7, 14, 4) -> f_205(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v244, v245, v143, v147, v148, v149, v150, 0, 3, 2, 5, 7, 14, 4) :|: TRUE
f_205(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v244, v245, v143, v147, v148, v149, v150, 0, 3, 2, 5, 7, 14, 4) -> f_206(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v244, v245, v147, v148, v149, v150, 0, 3, 5, 2, 14, 4) :|: 0 = 0
f_206(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v244, v245, v147, v148, v149, v150, 0, 3, 5, 2, 14, 4) -> f_207(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v244, v245, v247, v147, v148, v149, v150, 0, 3, 5, 2, 14, 4, 28) :|: v247 = 2 * v146 && 28 <= v247
f_207(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v244, v245, v247, v147, v148, v149, v150, 0, 3, 5, 2, 14, 4, 28) -> f_208(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v244, v245, v247, v147, v148, v149, v150, 0, 3, 5, 2, 14, 4, 28) :|: TRUE
f_208(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v244, v245, v247, v147, v148, v149, v150, 0, 3, 5, 2, 14, 4, 28) -> f_209(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v244, v245, v247, v147, v148, v149, v150, 0, 3, 5, 2, 14, 4, 28) :|: TRUE
f_209(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v244, v245, v247, v147, v148, v149, v150, 0, 3, 5, 2, 14, 4, 28) -> f_181(v133, v134, v135, v136, v137, v138, v139, v145, 1, v243, v146, v244, v245, v247, v147, v148, v149, v150, 0, 3, 5, 2, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_109 -> f_142(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 >= v13:0 && v9:0 > 0
f_182(v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, v145:0, 1, v140:0, v142:0, v143:0, v144:0, v146:0, v147:0, v148:0, v149:0, v150:0, 0, 3, 5, 2, 4) -> f_190(v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, v145:0, 0, v140:0, 1, v142:0, v143:0, v144:0, v146:0, v147:0, v148:0, v149:0, v150:0, 3, 5, 2, 4) :|: v145:0 < 1 && v144:0 < 6
f_182(v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, v145:0, 1, v140:0, v142:0, v143:0, v144:0, v146:0, v147:0, v148:0, v149:0, v150:0, 0, 3, 5, 2, 4) -> f_199(v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, v145:0, 1, 0, v140:0, v142:0, v143:0, v144:0, v146:0, v147:0, v148:0, v149:0, v150:0, 3, 5, 2, 8, 7, 16, 4) :|: v145:0 > 1 && v144:0 > 6 && v143:0 > 7 && v145:0 >= v139:0 && v146:0 > 15
f_182(v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, v145:0, 1, v140:0, v142:0, v143:0, v144:0, v146:0, v147:0, v148:0, v149:0, v150:0, 0, 3, 5, 2, 4) -> f_182(v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, v245:0, 1, v145:0, v243:0, v146:0, 5 + v245:0, 2 * v146:0, v147:0, v148:0, v149:0, v150:0, 0, 3, 5, 2, 4) :|: v144:0 > 5 && v145:0 > 0 && v143:0 > 6 && v146:0 > 13 && v145:0 < v139:0 && v243:0 < 0 && v243:0 + v145:0 = 0 && 27 < 2 * v146:0 && v243:0 + v146:0 = 5 + v245:0
f_109 -> f_133(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 < 1
f_109 -> f_182(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v23:0, 1, v9:0, v21:0, v11:0, 5 + v23:0, 2 * v11:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 0, 3, 5, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v13:0 > 1 && v9:0 < v13:0 && v21:0 < 0 && v21:0 + v11:0 = 5 + v23:0 && v21:0 + v9:0 = 0
Filtered unneeded arguments:
   f_182(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_182(x7, x8, x10, x11, x12, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 6 rules.P rules:
f_109 -> f_142(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v9:0 >= v13:0
f_182(v139:0, v145:0, v140:0, v142:0, v143:0, v144:0, v146:0) -> f_190(v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, v145:0, 0, v140:0, 1, v142:0, v143:0, v144:0, v146:0, v147:0, v148:0, v149:0, v150:0, 3, 5, 2, 4) :|: v145:0 < 1 && v144:0 < 6
f_182(v139:0, v145:0, v140:0, v142:0, v143:0, v144:0, v146:0) -> f_199(v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, v145:0, 1, 0, v140:0, v142:0, v143:0, v144:0, v146:0, v147:0, v148:0, v149:0, v150:0, 3, 5, 2, 8, 7, 16, 4) :|: v144:0 > 6 && v145:0 > 1 && v143:0 > 7 && v146:0 > 15 && v145:0 >= v139:0
f_182(v139:0, v145:0, v140:0, v142:0, v143:0, v144:0, v146:0) -> f_182(v139:0, v245:0, v145:0, v243:0, v146:0, 5 + v245:0, 2 * v146:0) :|: v145:0 > 0 && v144:0 > 5 && v143:0 > 6 && v146:0 > 13 && v145:0 < v139:0 && v243:0 < 0 && v243:0 + v145:0 = 0 && v243:0 + v146:0 = 5 + v245:0 && 27 < 2 * v146:0
f_109 -> f_133(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v9:0 < 1 && v7:0 > 0
f_109 -> f_182(v13:0, v23:0, v9:0, v21:0, v11:0, 5 + v23:0, 2 * v11:0) :|: v13:0 > 1 && v9:0 > 0 && v9:0 < v13:0 && v21:0 < 0 && v21:0 + v9:0 = 0 && v21:0 + v11:0 = 5 + v23:0

----------------------------------------

(6)
Obligation:
Rules:
f_109 -> f_142(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v9:0 >= v13:0
f_182(v139:0, v145:0, v140:0, v142:0, v143:0, v144:0, v146:0) -> f_190(v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, v145:0, 0, v140:0, 1, v142:0, v143:0, v144:0, v146:0, v147:0, v148:0, v149:0, v150:0, 3, 5, 2, 4) :|: v145:0 < 1 && v144:0 < 6
f_182(x, x1, x2, x3, x4, x5, x6) -> f_199(x7, x8, x9, x10, x11, x12, x, x1, 1, 0, x2, x3, x4, x5, x6, x13, x14, x15, x16, 3, 5, 2, 8, 7, 16, 4) :|: x5 > 6 && x1 > 1 && x4 > 7 && x6 > 15 && x1 >= x
f_182(x17, x18, x19, x20, x21, x22, x23) -> f_182(x17, x24, x18, x25, x23, 5 + x24, 2 * x23) :|: x18 > 0 && x22 > 5 && x21 > 6 && x23 > 13 && x18 < x17 && x25 < 0 && x25 + x18 = 0 && x25 + x23 = 5 + x24 && 27 < 2 * x23
f_109 -> f_133(x26, x27, x28, x29, x30, x31, x32, 0, 3 + x26, 3 + x27, 3 + x28, 3 + x29, 3, 1, 4) :|: x26 > 0 && x27 > 0 && x28 > 0 && x30 < 1 && x29 > 0
f_109 -> f_182(x33, x34, x35, x36, x37, 5 + x34, 2 * x37) :|: x33 > 1 && x35 > 0 && x35 < x33 && x36 < 0 && x36 + x35 = 0 && x36 + x37 = 5 + x34
Start term: f_109

----------------------------------------

(7) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(8)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_109))
(VAR x160 x162 x161 x46 x164 x47 x163 x48 x166 x49 x165 x42 x168 x43 x167 x44 x45 x169 x40 x41 x39 x151 x150 x35 x153 x36 x152 x37 x155 x38 x154 x31 x157 x32 x156 x33 x159 x34 x158 x30 x70 x140 x68 x142 x69 x141 x144 x143 x64 x146 x65 x145 x66 x148 x67 x147 x60 x61 x149 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x131 x58 x130 x59 x133 x132 x53 x135 x54 x134 x55 x137 x56 x136 x139 x50 x138 x51 x52 x90 x91 x92 x86 x87 x88 x89 x82 x83 x84 x85 x80 x81 x193 x192 x195 x194 x79 x75 x76 x'' x77 x78 x71 x72 x73 x74 k14 k15 k16 k17 k10 k11 k12 k13 x191 x190 x182 x181 x184 x183 x186 x185 x188 x187 x189 x180 x171 x170 x173 x172 x175 x174 x177 x176 x97 x179 x98 x178 x99 x93 x94 x95 x96 k36 k37 k38 k39 k32 k33 k34 k35 k30 k31 k29 k25 k26 k27 k28 k21 k22 k23 k24 k20 k18 k19 k58 k59 k54 k55 k56 k57 k50 k51 k52 k53 k47 k48 k49 k43 k44 k45 k46 k40 k41 k42 x120 x122 x121 x124 x123 x126 x125 x x128 x127 x129 k61 k60 x111 x110 x113 x112 x115 x114 x117 x116 x119 x118 x109 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x7 x27 x20 x102 x21 x101 x22 x104 x23 x103 x106 x1 x105 x108 x107 x' x17 x18 x19 x13 x14 x15 x16 x10 x11 x12)
(RULES
  f_109(x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64) -> f_142(k50, k24, k28, k32, k37, k6, k7, 1, 0, 3 + k50, 3 + k24, 3 + k28, 3 + k32, 3, 4, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75) :|: k50 > 0 && k24 > 0 && k28 > 0 && k32 > 0 && k37 > 0 && k37 >= k7
  f_109(x76, x77, x78, x79, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99, x100, x101) -> f_133(k36, k39, k23, k26, k18, k11, k12, 0, 3 + k36, 3 + k39, 3 + k23, 3 + k26, 3, 1, 4, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111, x112) :|: k36 > 0 && k39 > 0 && k23 > 0 && k18 < 1 && k26 > 0
  f_109(x113, x114, x115, x116, x117, x118, x119, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x130, x131, x132, x133, x134, x135, x136, x137, x138) -> f_182(k14, k15, k8, k9, k10, 5 + k15, 2 * k10, x139, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, x154, x155, x156, x157) :|: k14 > 1 && k8 > 0 && k8 < k14 && k9 < 0 && k9 + k8 = 0 && k9 + k10 = 5 + k15
  f_182(k5, k19, k13, k16, k61, k17, k0, x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_190(k46, k47, k3, k48, k4, k49, k5, k19, 0, k13, 1, k16, k61, k17, k0, k20, k1, k21, k43, 3, 5, 2, 4, x17, x18, x19) :|: k19 < 1 && k17 < 6
  f_182(k51, k52, k53, k40, k41, k42, k44, x158, x159, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174, x175, x176) -> f_182(k51, k31, k52, k34, k44, 5 + k31, 2 * k44, x177, x178, x179, x180, x181, x182, x183, x184, x185, x186, x187, x188, x189, x190, x191, x192, x193, x194, x195) :|: k52 > 0 && k42 > 5 && k41 > 6 && k44 > 13 && k52 < k51 && k34 < 0 && k34 + k52 = 0 && k34 + k44 = 5 + k31 && 27 < 2 * k44
  f_182(k2, k45, k27, k29, k22, k25, k35, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38) -> f_199(k38, k30, k33, k58, k59, k60, k2, k45, 1, 0, k27, k29, k22, k25, k35, k54, k55, k56, k57, 3, 5, 2, 8, 7, 16, 4) :|: k25 > 6 && k45 > 1 && k22 > 7 && k35 > 15 && k45 >= k2
)

----------------------------------------

(9) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_10341013476052498060.koat 

KoAT2's output was:

YES

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
