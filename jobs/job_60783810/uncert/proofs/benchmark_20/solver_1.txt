YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/8Jd7i.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 27 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 620 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 61 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/8Jd7i.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/8Jd7i.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%7 = alloca i8, numElementsLit: 4, align 16
		%8 = bitcast *i8 %7 to *i32
		store %8, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %6
		%11 = load %3
		%12 = load %5
		store %11, %12
		%13 = load %4
		%14 = load %6
		store %13, %14
		%15 = call i32 @__VERIFIER_nondet_int()
		%16 = load %6
		store %15, %16
		br %17
	17:
		%18 = load %5
		%19 = load %18
		%20 = icmp sgt %19 0
		br %20, %21, %27
	21:
		%22 = load %3
		%23 = load %6
		%24 = load %23
		%25 = mul i32 2, %24
		%26 = icmp eq %22 %25
		br %27
	27:
		%28 = phi [0, %17], [%26, %21]
		br %28, %29, %36
	29:
		%30 = load %5
		%31 = load %30
		%32 = sub i32 %31, 1
		%33 = load %5
		store %32, %33
		%34 = call i32 @__VERIFIER_nondet_int()
		%35 = load %6
		store %34, %35
		br %17
	36:
		%37 = load %5
		%38 = load %37
		ret %38

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 57
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 23 rulesP rules:
f_307(v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, 1, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_308(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v235, v233, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_308(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v235, v233, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_309(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v235, v233, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: 0 < v236 && 2 <= v233
f_309(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v235, v233, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_311(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v235, v233, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_311(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v235, v233, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_313(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v235, v233, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: TRUE
f_313(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v235, v233, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_315(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v235, v233, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_315(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v235, v233, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_317(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v235, v233, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_317(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v235, v233, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_319(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v233, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_319(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v233, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_321(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v274, v233, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: v274 = 2 * v237
f_321(v224, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v274, v233, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_323(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v233, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: v224 = v274 && 1 <= v237
f_323(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v233, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_325(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v233, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_325(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v233, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_327(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v233, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_327(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v233, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_329(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v233, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: TRUE
f_329(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v233, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_331(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v233, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_331(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v233, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_333(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_333(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_335(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v361, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: 1 + v361 = v236 && 0 <= v361
f_335(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v361, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_337(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v361, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_337(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v361, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_338(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v361, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: TRUE
f_338(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v361, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_339(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v361, v363, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: TRUE
f_339(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v361, v363, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_340(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v361, v363, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_340(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v361, v363, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_341(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v361, v363, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: TRUE
f_341(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v361, v363, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_342(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v361, v363, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: TRUE
f_342(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v361, v363, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_306(v274, v225, v226, v227, v228, v229, v230, v231, v232, v236, 1, v237, v361, v363, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: TRUE
f_306(v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, 1, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) -> f_307(v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, 1, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_307(2 * v237:0, v225:0, v226:0, v227:0, v228:0, v229:0, v230:0, v231:0, v232:0, v233:0, 1, v235:0, 1 + v361:0, v237:0, v238:0, v239:0, v240:0, v241:0, v242:0, v243:0, v244:0, v245:0, 0, 3, 7, 2, 4, 8) -> f_307(2 * v237:0, v225:0, v226:0, v227:0, v228:0, v229:0, v230:0, v231:0, v232:0, 1 + v361:0, 1, v237:0, v361:0, v363:0, v238:0, v239:0, v240:0, v241:0, v242:0, v243:0, v244:0, v245:0, 0, 3, 7, 2, 4, 8) :|: v233:0 > 1 && v361:0 > -1 && v237:0 > 0
Filtered unneeded arguments:
   f_307(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_307(x1, x10, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_307(times~cons_2~v237:0, v233:0, sum~cons_1~v361:0, v237:0) -> f_307(2 * v237:0, 1 + v361:0, v361:0, v363:0) :|: v361:0 > -1 && v237:0 > 0 && v233:0 > 1 && times~cons_2~v237:0 = 2 * v237:0 && sum~cons_1~v361:0 = 1 + v361:0

----------------------------------------

(8)
Obligation:
Rules:
f_307(times~cons_2~v237:0, v233:0, sum~cons_1~v361:0, v237:0) -> f_307(2 * v237:0, 1 + v361:0, v361:0, v363:0) :|: v361:0 > -1 && v237:0 > 0 && v233:0 > 1 && times~cons_2~v237:0 = 2 * v237:0 && sum~cons_1~v361:0 = 1 + v361:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_307(times~cons_2~v237:0:0, v233:0:0, sum~cons_1~v361:0:0, v237:0:0) -> f_307(2 * v237:0:0, 1 + v361:0:0, v361:0:0, v363:0:0) :|: v361:0:0 > -1 && v237:0:0 > 0 && v233:0:0 > 1 && times~cons_2~v237:0:0 = 2 * v237:0:0 && sum~cons_1~v361:0:0 = 1 + v361:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_307(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_307(times~cons_2~v237:0:0, v233:0:0, sum~cons_1~v361:0:0, v237:0:0) -> f_307(2 * v237:0:0, 1 + v361:0:0, v361:0:0, v363:0:0) :|: v361:0:0 > -1 && v237:0:0 > 0 && v233:0:0 > 1 && times~cons_2~v237:0:0 = 2 * v237:0:0 && sum~cons_1~v361:0:0 = 1 + v361:0:0
The following rules are bounded:
f_307(times~cons_2~v237:0:0, v233:0:0, sum~cons_1~v361:0:0, v237:0:0) -> f_307(2 * v237:0:0, 1 + v361:0:0, v361:0:0, v363:0:0) :|: v361:0:0 > -1 && v237:0:0 > 0 && v233:0:0 > 1 && times~cons_2~v237:0:0 = 2 * v237:0:0 && sum~cons_1~v361:0:0 = 1 + v361:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
