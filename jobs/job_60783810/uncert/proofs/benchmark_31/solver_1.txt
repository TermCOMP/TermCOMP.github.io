YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/1ZxUn.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 59 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3039 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 52 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 45 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 31 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/1ZxUn.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/1ZxUn.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %7
		%14 = load %3
		%15 = load %5
		store %14, %15
		%16 = load %4
		%17 = load %6
		store %16, %17
		%18 = load %7
		store 0, %18
		br %19
	19:
		%20 = load %5
		%21 = load %20
		%22 = icmp sgt %21 0
		br %22, %23, %46
	23:
		br %24
	24:
		%25 = load %6
		%26 = load %25
		%27 = icmp sgt %26 0
		br %27, %28, %37
	28:
		%29 = load %6
		%30 = load %29
		%31 = sub i32 %30, 1
		%32 = load %6
		store %31, %32
		%33 = load %7
		%34 = load %33
		%35 = add i32 %34, 1
		%36 = load %7
		store %35, %36
		br %24
	37:
		%38 = load %5
		%39 = load %38
		%40 = sub i32 %39, 1
		%41 = load %5
		store %40, %41
		%42 = load %7
		%43 = load %42
		%44 = add i32 %43, 1
		%45 = load %7
		store %44, %45
		br %19
	46:
		%47 = load %7
		%48 = load %47
		ret %48

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 71
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_754(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v727, 1, 0, v730, v731, v732, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_755(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: 0 = 0
f_755(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_756(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: 0 < v732 && 2 <= v727 && 2 <= v717
f_756(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_758(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: 0 = 0
f_758(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_760(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: TRUE
f_760(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_762(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: TRUE
f_762(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_764(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: 0 = 0
f_764(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_766(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: 0 = 0
f_766(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_768(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: 0 = 0
f_768(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_769(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: TRUE
f_769(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_770(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: 0 = 0
f_770(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v727, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_771(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: 0 = 0
f_771(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_772(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: 1 + v771 = v732 && 0 <= v771
f_772(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_773(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: 0 = 0
f_773(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_774(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: TRUE
f_774(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_775(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: 0 = 0
f_775(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_776(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: 0 = 0
f_776(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_777(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v734, v773, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: v773 = 1 + v734 && 3 <= v773
f_777(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v734, v773, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_778(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v734, v773, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: 0 = 0
f_778(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v734, v773, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_779(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v734, v773, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: TRUE
f_779(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v734, v773, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_780(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v734, v773, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: TRUE
f_780(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v734, v773, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_753(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v732, 1, 0, v730, v731, v771, v734, v773, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: TRUE
f_753(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v727, 1, 0, v730, v731, v732, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) -> f_754(v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v727, 1, 0, v730, v731, v732, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_754(v717:0, v718:0, v719:0, v720:0, v721:0, v722:0, v723:0, v724:0, v725:0, v726:0, v727:0, 1, 0, v730:0, v731:0, 1 + v771:0, v733:0, v734:0, v735:0, v736:0, v737:0, v738:0, v739:0, v740:0, v741:0, v742:0, v743:0, v744:0, 3, 7, 2, 4, 8) -> f_754(v717:0, v718:0, v719:0, v720:0, v721:0, v722:0, v723:0, v724:0, v725:0, v726:0, 1 + v771:0, 1, 0, v730:0, v731:0, v771:0, v734:0, 1 + v734:0, v735:0, v736:0, v737:0, v738:0, v739:0, v740:0, v741:0, v742:0, v743:0, v744:0, 3, 7, 2, 4, 8) :|: v727:0 > 1 && v771:0 > -1 && v717:0 > 1 && v734:0 > 1
Filtered unneeded arguments:
   f_754(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) -> f_754(x1, x11, x16, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_754(v717:0, v727:0, sum~cons_1~v771:0, v734:0) -> f_754(v717:0, 1 + v771:0, v771:0, 1 + v734:0) :|: v771:0 > -1 && v727:0 > 1 && v734:0 > 1 && v717:0 > 1 && sum~cons_1~v771:0 = 1 + v771:0

----------------------------------------

(9)
Obligation:
Rules:
f_754(v717:0, v727:0, sum~cons_1~v771:0, v734:0) -> f_754(v717:0, 1 + v771:0, v771:0, 1 + v734:0) :|: v771:0 > -1 && v727:0 > 1 && v734:0 > 1 && v717:0 > 1 && sum~cons_1~v771:0 = 1 + v771:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_754(v717:0:0, v727:0:0, sum~cons_1~v771:0:0, v734:0:0) -> f_754(v717:0:0, 1 + v771:0:0, v771:0:0, 1 + v734:0:0) :|: v734:0:0 > 1 && v717:0:0 > 1 && v727:0:0 > 1 && v771:0:0 > -1 && sum~cons_1~v771:0:0 = 1 + v771:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_754(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_754(v717:0:0, v727:0:0, sum~cons_1~v771:0:0, v734:0:0) -> f_754(v717:0:0, 1 + v771:0:0, v771:0:0, 1 + v734:0:0) :|: v734:0:0 > 1 && v717:0:0 > 1 && v727:0:0 > 1 && v771:0:0 > -1 && sum~cons_1~v771:0:0 = 1 + v771:0:0
The following rules are bounded:
f_754(v717:0:0, v727:0:0, sum~cons_1~v771:0:0, v734:0:0) -> f_754(v717:0:0, 1 + v771:0:0, v771:0:0, 1 + v734:0:0) :|: v734:0:0 > 1 && v717:0:0 > 1 && v727:0:0 > 1 && v771:0:0 > -1 && sum~cons_1~v771:0:0 = 1 + v771:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_692(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v557, 1, 0, v560, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 4, 8) -> f_694(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 4, 8) :|: 0 = 0
f_694(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 4, 8) -> f_696(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: 0 < v560 && 2 <= v557 && 2 <= v547
f_696(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_699(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: 0 = 0
f_699(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_702(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: TRUE
f_702(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_705(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: TRUE
f_705(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_709(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: 0 = 0
f_709(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_712(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: 0 = 0
f_712(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_715(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: 0 = 0
f_715(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_718(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: TRUE
f_718(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_721(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: 0 = 0
f_721(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v557, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_724(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: 0 = 0
f_724(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_727(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: 1 + v653 = v560 && 0 <= v653
f_727(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_730(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: 0 = 0
f_730(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_733(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: TRUE
f_733(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_735(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: 0 = 0
f_735(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_737(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: 0 = 0
f_737(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_739(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v562, v667, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: v667 = 1 + v562 && 2 <= v667
f_739(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v562, v667, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_741(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v562, v667, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: 0 = 0
f_741(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v562, v667, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_743(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v562, v667, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: TRUE
f_743(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v562, v667, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_745(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v562, v667, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) :|: TRUE
f_745(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v562, v667, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 2, 4, 8) -> f_690(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v560, 1, 0, v653, v562, v667, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 4, 8) :|: TRUE
f_690(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v557, 1, 0, v560, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 4, 8) -> f_692(v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v557, 1, 0, v560, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_692(v547:0, v548:0, v549:0, v550:0, v551:0, v552:0, v553:0, v554:0, v555:0, v556:0, v557:0, 1, 0, 1 + v653:0, v561:0, v562:0, v563:0, v564:0, v565:0, v566:0, v567:0, v568:0, v569:0, v570:0, v571:0, v572:0, 3, 7, 4, 8) -> f_692(v547:0, v548:0, v549:0, v550:0, v551:0, v552:0, v553:0, v554:0, v555:0, v556:0, 1 + v653:0, 1, 0, v653:0, v562:0, 1 + v562:0, v563:0, v564:0, v565:0, v566:0, v567:0, v568:0, v569:0, v570:0, v571:0, v572:0, 3, 7, 4, 8) :|: v557:0 > 1 && v653:0 > -1 && v547:0 > 1 && v562:0 > 0
Filtered unneeded arguments:
   f_692(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_692(x1, x11, x14, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_692(v547:0, v557:0, sum~cons_1~v653:0, v562:0) -> f_692(v547:0, 1 + v653:0, v653:0, 1 + v562:0) :|: v653:0 > -1 && v557:0 > 1 && v562:0 > 0 && v547:0 > 1 && sum~cons_1~v653:0 = 1 + v653:0

----------------------------------------

(16)
Obligation:
Rules:
f_692(v547:0, v557:0, sum~cons_1~v653:0, v562:0) -> f_692(v547:0, 1 + v653:0, v653:0, 1 + v562:0) :|: v653:0 > -1 && v557:0 > 1 && v562:0 > 0 && v547:0 > 1 && sum~cons_1~v653:0 = 1 + v653:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_692(v547:0:0, v557:0:0, sum~cons_1~v653:0:0, v562:0:0) -> f_692(v547:0:0, 1 + v653:0:0, v653:0:0, 1 + v562:0:0) :|: v562:0:0 > 0 && v547:0:0 > 1 && v557:0:0 > 1 && v653:0:0 > -1 && sum~cons_1~v653:0:0 = 1 + v653:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_692(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_692(v547:0:0, v557:0:0, sum~cons_1~v653:0:0, v562:0:0) -> f_692(v547:0:0, 1 + v653:0:0, v653:0:0, 1 + v562:0:0) :|: v562:0:0 > 0 && v547:0:0 > 1 && v557:0:0 > 1 && v653:0:0 > -1 && sum~cons_1~v653:0:0 = 1 + v653:0:0
The following rules are bounded:
f_692(v547:0:0, v557:0:0, sum~cons_1~v653:0:0, v562:0:0) -> f_692(v547:0:0, 1 + v653:0:0, v653:0:0, 1 + v562:0:0) :|: v562:0:0 > 0 && v547:0:0 > 1 && v557:0:0 > 1 && v653:0:0 > -1 && sum~cons_1~v653:0:0 = 1 + v653:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_603(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 4, 8) -> f_605(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v383, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 4, 8) :|: 0 = 0
f_605(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v383, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 4, 8) -> f_607(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v383, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) :|: 0 < v384 && 2 <= v383 && 2 <= v373
f_607(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v383, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) -> f_610(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v383, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_610(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v383, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) -> f_613(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v383, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) :|: TRUE
f_613(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v383, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) -> f_616(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v383, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_616(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v383, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) -> f_619(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_619(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) -> f_622(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) :|: 1 + v414 = v384 && 0 <= v414
f_622(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) -> f_625(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_625(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) -> f_629(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) :|: TRUE
f_629(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) -> f_632(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_632(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) -> f_635(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_635(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) -> f_639(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v386, v445, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) :|: v445 = 1 + v386 && 2 <= v445
f_639(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v386, v445, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) -> f_643(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v386, v445, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_643(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v386, v445, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) -> f_647(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v386, v445, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) :|: TRUE
f_647(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v386, v445, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) -> f_651(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v386, v445, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) :|: TRUE
f_651(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v386, v445, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 2, 4, 8) -> f_601(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v384, v414, v386, v445, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 4, 8) :|: TRUE
f_601(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 4, 8) -> f_603(v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, 1, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_603(v372:0, v373:0, v374:0, v375:0, v376:0, v377:0, v378:0, v379:0, v380:0, v381:0, 1, v383:0, 1 + v414:0, v385:0, v386:0, v387:0, v388:0, v389:0, v390:0, v391:0, v392:0, v393:0, v394:0, v395:0, v396:0, 0, 3, 7, 4, 8) -> f_603(v372:0, v373:0, v374:0, v375:0, v376:0, v377:0, v378:0, v379:0, v380:0, v381:0, 1, 1 + v414:0, v414:0, v386:0, 1 + v386:0, v387:0, v388:0, v389:0, v390:0, v391:0, v392:0, v393:0, v394:0, v395:0, v396:0, 0, 3, 7, 4, 8) :|: v383:0 > 1 && v414:0 > -1 && v373:0 > 1 && v386:0 > 0
Filtered unneeded arguments:
   f_603(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_603(x2, x12, x13, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_603(v373:0, v383:0, sum~cons_1~v414:0, v386:0) -> f_603(v373:0, 1 + v414:0, v414:0, 1 + v386:0) :|: v414:0 > -1 && v383:0 > 1 && v386:0 > 0 && v373:0 > 1 && sum~cons_1~v414:0 = 1 + v414:0

----------------------------------------

(23)
Obligation:
Rules:
f_603(v373:0, v383:0, sum~cons_1~v414:0, v386:0) -> f_603(v373:0, 1 + v414:0, v414:0, 1 + v386:0) :|: v414:0 > -1 && v383:0 > 1 && v386:0 > 0 && v373:0 > 1 && sum~cons_1~v414:0 = 1 + v414:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_603(v373:0:0, v383:0:0, sum~cons_1~v414:0:0, v386:0:0) -> f_603(v373:0:0, 1 + v414:0:0, v414:0:0, 1 + v386:0:0) :|: v386:0:0 > 0 && v373:0:0 > 1 && v383:0:0 > 1 && v414:0:0 > -1 && sum~cons_1~v414:0:0 = 1 + v414:0:0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_603(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_603(v373:0:0, v383:0:0, sum~cons_1~v414:0:0, v386:0:0) -> f_603(v373:0:0, 1 + v414:0:0, v414:0:0, 1 + v386:0:0) :|: v386:0:0 > 0 && v373:0:0 > 1 && v383:0:0 > 1 && v414:0:0 > -1 && sum~cons_1~v414:0:0 = 1 + v414:0:0
The following rules are bounded:
f_603(v373:0:0, v383:0:0, sum~cons_1~v414:0:0, v386:0:0) -> f_603(v373:0:0, 1 + v414:0:0, v414:0:0, 1 + v386:0:0) :|: v386:0:0 > 0 && v373:0:0 > 1 && v383:0:0 > 1 && v414:0:0 > -1 && sum~cons_1~v414:0:0 = 1 + v414:0:0

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
