MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/K0WiT.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 78 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/K0WiT.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/K0WiT.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_long" returnParam: i64 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "ssl3_accept" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		%8 = alloca i32, align 4
		%9 = alloca i32, align 4
		%10 = alloca i32, align 4
		%11 = alloca i32, align 4
		%12 = alloca i32, align 4
		%13 = alloca i32, align 4
		%14 = alloca i32, align 4
		%15 = alloca i32, align 4
		%16 = alloca i32, align 4
		%17 = alloca i32, align 4
		%18 = alloca i32, align 4
		%19 = alloca i32, align 4
		%20 = alloca i32, align 4
		%21 = alloca i32, align 4
		%22 = alloca i32, align 4
		%23 = alloca i32, align 4
		%24 = alloca i32, align 4
		%25 = alloca i32, align 4
		%26 = alloca i32, align 4
		%27 = alloca i32, align 4
		%28 = alloca i32, align 4
		%29 = alloca i32, align 4
		%30 = alloca i32, align 4
		%31 = alloca i32, align 4
		%32 = alloca i32, align 4
		%33 = alloca i32, align 4
		%34 = alloca i32, align 4
		%35 = alloca i64, align 8
		%36 = alloca i64, align 8
		%37 = alloca i64, align 8
		%38 = alloca i32, align 4
		%39 = alloca i64, align 8
		%40 = alloca i32, align 4
		%41 = alloca i32, align 4
		%42 = alloca i32, align 4
		%43 = alloca i32, align 4
		%44 = alloca i32, align 4
		%45 = alloca i32, align 4
		%46 = alloca i32, align 4
		%47 = alloca i32, align 4
		%48 = alloca i32, align 4
		%49 = alloca i32, align 4
		%50 = alloca i32, align 4
		%51 = alloca i32, align 4
		%52 = alloca i64, align 8
		%53 = alloca i32, align 4
		%54 = alloca i32, align 4
		%55 = alloca i32, align 4
		%56 = alloca i32, align 4
		%57 = alloca i64, align 8
		%58 = alloca i64, align 8
		%59 = alloca i64, align 8
		%60 = alloca i64, align 8
		%61 = alloca i32, align 4
		%62 = alloca i64, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%63 = call i32 @__VERIFIER_nondet_int()
		store %63, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%64 = call i32 @__VERIFIER_nondet_int()
		store %64, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %9)
		%65 = call i32 @__VERIFIER_nondet_int()
		store %65, %9
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %10)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %11)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %12)
		%66 = call i32 @__VERIFIER_nondet_int()
		store %66, %12
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %13)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %14)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %15)
		%67 = call i32 @__VERIFIER_nondet_int()
		store %67, %15
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %16)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %17)
		%68 = call i32 @__VERIFIER_nondet_int()
		store %68, %17
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %18)
		%69 = call i32 @__VERIFIER_nondet_int()
		store %69, %18
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %19)
		%70 = call i32 @__VERIFIER_nondet_int()
		store %70, %19
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %20)
		%71 = call i32 @__VERIFIER_nondet_int()
		store %71, %20
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %21)
		%72 = call i32 @__VERIFIER_nondet_int()
		store %72, %21
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %22)
		%73 = call i32 @__VERIFIER_nondet_int()
		store %73, %22
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %23)
		%74 = call i32 @__VERIFIER_nondet_int()
		store %74, %23
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %24)
		%75 = call i32 @__VERIFIER_nondet_int()
		store %75, %24
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %25)
		%76 = call i32 @__VERIFIER_nondet_int()
		store %76, %25
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %26)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %27)
		%77 = call i32 @__VERIFIER_nondet_int()
		store %77, %27
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %28)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %29)
		%78 = call i32 @__VERIFIER_nondet_int()
		store %78, %29
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %30)
		%79 = call i32 @__VERIFIER_nondet_int()
		store %79, %30
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %31)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %32)
		%80 = call i32 @__VERIFIER_nondet_int()
		store %80, %32
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %33)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %34)
		%81 = call i32 @__VERIFIER_nondet_int()
		store %81, %34
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %35)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %36)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %37)
		%82 = call i64 @__VERIFIER_nondet_long()
		store %82, %37
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %38)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %39)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %40)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %41)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %42)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %43)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %44)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %45)
		%83 = call i32 @__VERIFIER_nondet_int()
		store %83, %45
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %46)
		%84 = call i32 @__VERIFIER_nondet_int()
		store %84, %46
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %47)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %48)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %49)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %50)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %51)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %52)
		%85 = call i64 @__VERIFIER_nondet_long()
		store %85, %52
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %53)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %54)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %55)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %56)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %57)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %58)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %59)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %60)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %61)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %62)
		%86 = load %3
		store %86, %6
		store 0, %55
		%87 = load %37
		store %87, %36
		store 0, %38
		store -1, %40
		store 0, %43
		store 0, %44
		%88 = load %4
		%89 = icmp ne %88 0
		br %89, %90, %92
	90:
		%91 = load %4
		store %91, %38
		br %98
	92:
		%93 = load %22
		%94 = icmp ne %93 0
		br %94, %95, %97
	95:
		%96 = load %22
		store %96, %38
		br %97
	97:
		br %98
	98:
		%99 = load %5
		%100 = add i32 %99, 1
		store %100, %5
		%101 = load %45
		%102 = add i32 %101, 12288
		%103 = icmp ne %102 0
		br %103, %104, %110
	104:
		%105 = load %46
		%106 = add i32 %105, 16384
		%107 = icmp ne %106 0
		br %107, %108, %109
	108:
		br %109
	109:
		br %110
	110:
		%111 = load %17
		%112 = icmp eq %111 0
		br %112, %113, %114
	113:
		store -1, %2
		br %659
	114:
		br %115
	115:
		br %116
	116:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%117 = load %6
		store %117, %42
		%118 = load %6
		%119 = icmp eq %118 12292
		br %119, %120, %121
	120:
		br %260
	121:
		%122 = load %6
		%123 = icmp eq %122 16384
		br %123, %124, %125
	124:
		br %261
	125:
		%126 = load %6
		%127 = icmp eq %126 8192
		br %127, %128, %129
	128:
		br %262
	129:
		%130 = load %6
		%131 = icmp eq %130 24576
		br %131, %132, %133
	132:
		br %263
	133:
		%134 = load %6
		%135 = icmp eq %134 8195
		br %135, %136, %137
	136:
		br %264
	137:
		%138 = load %6
		%139 = icmp eq %138 8480
		br %139, %140, %141
	140:
		br %304
	141:
		%142 = load %6
		%143 = icmp eq %142 8481
		br %143, %144, %145
	144:
		br %305
	145:
		%146 = load %6
		%147 = icmp eq %146 8482
		br %147, %148, %149
	148:
		br %311
	149:
		%150 = load %6
		%151 = icmp eq %150 8464
		br %151, %152, %153
	152:
		br %312
	153:
		%154 = load %6
		%155 = icmp eq %154 8465
		br %155, %156, %157
	156:
		br %313
	157:
		%158 = load %6
		%159 = icmp eq %158 8466
		br %159, %160, %161
	160:
		br %314
	161:
		%162 = load %6
		%163 = icmp eq %162 8496
		br %163, %164, %165
	164:
		br %324
	165:
		%166 = load %6
		%167 = icmp eq %166 8497
		br %167, %168, %169
	168:
		br %325
	169:
		%170 = load %6
		%171 = icmp eq %170 8512
		br %171, %172, %173
	172:
		br %340
	173:
		%174 = load %6
		%175 = icmp eq %174 8513
		br %175, %176, %177
	176:
		br %341
	177:
		%178 = load %6
		%179 = icmp eq %178 8528
		br %179, %180, %181
	180:
		br %355
	181:
		%182 = load %6
		%183 = icmp eq %182 8529
		br %183, %184, %185
	184:
		br %356
	185:
		%186 = load %6
		%187 = icmp eq %186 8544
		br %187, %188, %189
	188:
		br %420
	189:
		%190 = load %6
		%191 = icmp eq %190 8545
		br %191, %192, %193
	192:
		br %421
	193:
		%194 = load %6
		%195 = icmp eq %194 8560
		br %195, %196, %197
	196:
		br %460
	197:
		%198 = load %6
		%199 = icmp eq %198 8561
		br %199, %200, %201
	200:
		br %461
	201:
		%202 = load %6
		%203 = icmp eq %202 8448
		br %203, %204, %205
	204:
		br %467
	205:
		%206 = load %6
		%207 = icmp eq %206 8576
		br %207, %208, %209
	208:
		br %480
	209:
		%210 = load %6
		%211 = icmp eq %210 8577
		br %211, %212, %213
	212:
		br %481
	213:
		%214 = load %6
		%215 = icmp eq %214 8592
		br %215, %216, %217
	216:
		br %497
	217:
		%218 = load %6
		%219 = icmp eq %218 8593
		br %219, %220, %221
	220:
		br %498
	221:
		%222 = load %6
		%223 = icmp eq %222 8608
		br %223, %224, %225
	224:
		br %504
	225:
		%226 = load %6
		%227 = icmp eq %226 8609
		br %227, %228, %229
	228:
		br %505
	229:
		%230 = load %6
		%231 = icmp eq %230 8640
		br %231, %232, %233
	232:
		br %511
	233:
		%234 = load %6
		%235 = icmp eq %234 8641
		br %235, %236, %237
	236:
		br %512
	237:
		%238 = load %6
		%239 = icmp eq %238 8656
		br %239, %240, %241
	240:
		br %527
	241:
		%242 = load %6
		%243 = icmp eq %242 8657
		br %243, %244, %245
	244:
		br %528
	245:
		%246 = load %6
		%247 = icmp eq %246 8672
		br %247, %248, %249
	248:
		br %549
	249:
		%250 = load %6
		%251 = icmp eq %250 8673
		br %251, %252, %253
	252:
		br %550
	253:
		%254 = load %6
		%255 = icmp eq %254 3
		br %255, %256, %257
	256:
		br %570
	257:
		br %581
	258:
		br 0, %259, %582
	259:
		br %260
	260:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 1, %7
		br %261
	261:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %262
	262:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %263
	263:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %264
	264:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 1, %8
		%265 = load %38
		%266 = icmp ne %265 0
		br %266, %267, %268
	267:
		br %268
	268:
		%269 = load %9
		%270 = mul i32 %269, 8
		store %270, %56
		%271 = load %56
		%272 = icmp ne %271 3
		br %272, %273, %274
	273:
		store -1, %2
		br %659
	274:
		store 8192, %10
		%275 = load %14
		%276 = icmp eq %275 0
		br %276, %277, %284
	277:
		%278 = call i32 @__VERIFIER_nondet_int()
		store %278, %47
		%279 = load %47
		%280 = icmp ne %279 0
		br %280, %282, %281
	281:
		store -1, %40
		br %650
	282:
		%283 = load %34
		store %283, %14
		br %284
	284:
		%285 = call i32 @__VERIFIER_nondet_int()
		store %285, %48
		%286 = load %48
		%287 = icmp ne %286 0
		br %287, %289, %288
	288:
		store -1, %40
		br %650
	289:
		store 0, %11
		%290 = load %6
		%291 = icmp ne %290 12292
		br %291, %292, %300
	292:
		%293 = call i32 @__VERIFIER_nondet_int()
		store %293, %49
		%294 = load %49
		%295 = icmp ne %294 0
		br %295, %297, %296
	296:
		store -1, %40
		br %650
	297:
		store 8464, %6
		%298 = load %24
		%299 = add i32 %298, 1
		store %299, %24
		br %303
	300:
		%301 = load %23
		%302 = add i32 %301, 1
		store %302, %23
		store 8480, %6
		br %303
	303:
		br %583
	304:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %305
	305:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 0, %16
		%306 = call i32 @__VERIFIER_nondet_int()
		store %306, %40
		%307 = load %40
		%308 = icmp sle %307 0
		br %308, %309, %310
	309:
		br %650
	310:
		store 8482, %31
		store 8448, %6
		store 0, %11
		br %583
	311:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 3, %6
		br %583
	312:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %313
	313:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %314
	314:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 0, %16
		%315 = call i32 @__VERIFIER_nondet_int()
		store %315, %40
		%316 = load %55
		%317 = icmp eq %316 0
		br %317, %318, %319
	318:
		store 1, %55
		br %319
	319:
		%320 = load %40
		%321 = icmp sle %320 0
		br %321, %322, %323
	322:
		br %650
	323:
		store 1, %44
		store 8496, %6
		store 0, %11
		br %583
	324:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %325
	325:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%326 = call i32 @__VERIFIER_nondet_int()
		store %326, %40
		%327 = load %55
		%328 = icmp eq %327 1
		br %328, %329, %330
	329:
		store 2, %55
		br %330
	330:
		%331 = load %40
		%332 = icmp sle %331 0
		br %332, %333, %334
	333:
		br %650
	334:
		%335 = load %12
		%336 = icmp ne %335 0
		br %336, %337, %338
	337:
		store 8656, %6
		br %339
	338:
		store 8512, %6
		br %339
	339:
		store 0, %11
		br %583
	340:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %341
	341:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%342 = load %30
		%343 = sext i32 %342 to i64
		store %343, %57
		%344 = load %57
		%345 = add i64 %344, 256
		%346 = icmp ne %345 0
		br %346, %347, %348
	347:
		store 1, %43
		br %354
	348:
		%349 = call i32 @__VERIFIER_nondet_int()
		store %349, %40
		%350 = load %40
		%351 = icmp sle %350 0
		br %351, %352, %353
	352:
		br %650
	353:
		br %354
	354:
		store 8528, %6
		store 0, %11
		br %583
	355:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %356
	356:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%357 = load %30
		%358 = sext i32 %357 to i64
		store %358, %35
		%359 = load %18
		%360 = sext i32 %359 to i64
		store %360, %58
		%361 = load %58
		%362 = add i64 %361, 2097152
		%363 = icmp ne %362 0
		br %363, %364, %365
	364:
		store 1, %28
		br %366
	365:
		store 0, %28
		br %366
	366:
		%367 = load %28
		%368 = icmp ne %367 0
		br %368, %369, %370
	369:
		br %405
	370:
		%371 = load %35
		%372 = add i64 %371, 30
		%373 = icmp ne %372 0
		br %373, %374, %375
	374:
		br %405
	375:
		%376 = load %35
		%377 = add i64 %376, 1
		%378 = icmp ne %377 0
		br %378, %379, %416
	379:
		%380 = load %21
		%381 = icmp eq %380 0
		br %381, %382, %383
	382:
		br %405
	383:
		%384 = load %32
		%385 = sext i32 %384 to i64
		store %385, %59
		%386 = load %59
		%387 = add i64 %386, 2
		%388 = icmp ne %387 0
		br %388, %389, %413
	389:
		%390 = call i32 @__VERIFIER_nondet_int()
		store %390, %50
		%391 = load %32
		%392 = sext i32 %391 to i64
		store %392, %60
		%393 = load %60
		%394 = add i64 %393, 4
		%395 = icmp ne %394 0
		br %395, %396, %397
	396:
		store 512, %51
		br %398
	397:
		store 1024, %51
		br %398
	398:
		%399 = load %50
		%400 = mul i32 %399, 8
		store %400, %61
		%401 = load %61
		%402 = load %51
		%403 = icmp sgt %401 %402
		br %403, %404, %411
	404:
		br %405
	405:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%406 = call i32 @__VERIFIER_nondet_int()
		store %406, %40
		%407 = load %40
		%408 = icmp sle %407 0
		br %408, %409, %410
	409:
		br %650
	410:
		br %412
	411:
		store 1, %43
		br %412
	412:
		br %414
	413:
		store 1, %43
		br %414
	414:
		br %415
	415:
		br %417
	416:
		store 1, %43
		br %417
	417:
		br %418
	418:
		br %419
	419:
		store 8544, %6
		store 0, %11
		br %583
	420:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %421
	421:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%422 = load %19
		%423 = add i32 %422, 1
		%424 = icmp ne %423 0
		br %424, %425, %458
	425:
		%426 = load %20
		%427 = icmp ne %426 0
		br %427, %428, %435
	428:
		%429 = load %19
		%430 = add i32 %429, 4
		%431 = icmp ne %430 0
		br %431, %432, %433
	432:
		store 1, %43
		store 0, %26
		store 8560, %6
		br %434
	433:
		br %436
	434:
		br %457
	435:
		br %436
	436:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%437 = load %30
		%438 = sext i32 %437 to i64
		store %438, %62
		%439 = load %62
		%440 = add i64 %439, 256
		%441 = icmp ne %440 0
		br %441, %442, %449
	442:
		%443 = load %19
		%444 = add i32 %443, 2
		%445 = icmp ne %444 0
		br %445, %446, %447
	446:
		br %450
	447:
		store 1, %43
		store 0, %26
		store 8560, %6
		br %448
	448:
		br %456
	449:
		br %450
	450:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 1, %26
		%451 = call i32 @__VERIFIER_nondet_int()
		store %451, %40
		%452 = load %40
		%453 = icmp sle %452 0
		br %453, %454, %455
	454:
		br %650
	455:
		store 8448, %6
		store 8576, %31
		store 0, %11
		br %456
	456:
		br %457
	457:
		br %459
	458:
		store 1, %43
		store 0, %26
		store 8560, %6
		br %459
	459:
		br %583
	460:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %461
	461:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%462 = call i32 @__VERIFIER_nondet_int()
		store %462, %40
		%463 = load %40
		%464 = icmp sle %463 0
		br %464, %465, %466
	465:
		br %650
	466:
		store 8576, %31
		store 8448, %6
		store 0, %11
		br %583
	467:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%468 = call i32 @__VERIFIER_nondet_int()
		%469 = sext i32 %468 to i64
		store %469, %39
		%470 = load %39
		%471 = icmp sgt %470 0
		br %471, %472, %478
	472:
		store 2, %13
		%473 = load %52
		store %473, %39
		%474 = load %39
		%475 = icmp sle %474 0
		br %475, %476, %477
	476:
		store -1, %40
		br %650
	477:
		store 1, %13
		br %478
	478:
		%479 = load %31
		store %479, %6
		br %583
	480:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %481
	481:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%482 = call i32 @__VERIFIER_nondet_int()
		store %482, %40
		%483 = load %40
		%484 = icmp sle %483 0
		br %484, %485, %486
	485:
		br %650
	486:
		%487 = load %40
		%488 = icmp eq %487 2
		br %488, %489, %490
	489:
		store 8466, %6
		br %496
	490:
		%491 = call i32 @__VERIFIER_nondet_int()
		store %491, %40
		%492 = load %40
		%493 = icmp sle %492 0
		br %493, %494, %495
	494:
		br %650
	495:
		store 0, %11
		store 8592, %6
		br %496
	496:
		br %583
	497:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %498
	498:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%499 = call i32 @__VERIFIER_nondet_int()
		store %499, %40
		%500 = load %40
		%501 = icmp sle %500 0
		br %501, %502, %503
	502:
		br %650
	503:
		store 8608, %6
		store 0, %11
		br %583
	504:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %505
	505:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%506 = call i32 @__VERIFIER_nondet_int()
		store %506, %40
		%507 = load %40
		%508 = icmp sle %507 0
		br %508, %509, %510
	509:
		br %650
	510:
		store 8640, %6
		store 0, %11
		br %583
	511:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %512
	512:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%513 = call i32 @__VERIFIER_nondet_int()
		store %513, %40
		%514 = load %55
		%515 = icmp eq %514 3
		br %515, %516, %517
	516:
		store 4, %55
		br %517
	517:
		%518 = load %40
		%519 = icmp sle %518 0
		br %519, %520, %521
	520:
		br %650
	521:
		%522 = load %12
		%523 = icmp ne %522 0
		br %523, %524, %525
	524:
		store 3, %6
		br %526
	525:
		store 8656, %6
		br %526
	526:
		store 0, %11
		br %583
	527:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %528
	528:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%529 = load %29
		store %529, %33
		%530 = call i32 @__VERIFIER_nondet_int()
		store %530, %53
		%531 = load %53
		%532 = icmp ne %531 0
		br %532, %534, %533
	533:
		store -1, %40
		br %650
	534:
		%535 = call i32 @__VERIFIER_nondet_int()
		store %535, %40
		%536 = load %55
		%537 = icmp eq %536 2
		br %537, %538, %539
	538:
		store 3, %55
		br %539
	539:
		%540 = load %40
		%541 = icmp sle %540 0
		br %541, %542, %543
	542:
		br %650
	543:
		store 8672, %6
		store 0, %11
		%544 = call i32 @__VERIFIER_nondet_int()
		store %544, %54
		%545 = load %54
		%546 = icmp ne %545 0
		br %546, %548, %547
	547:
		store -1, %40
		br %650
	548:
		br %583
	549:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %550
	550:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%551 = call i32 @__VERIFIER_nondet_int()
		store %551, %40
		%552 = load %55
		%553 = icmp eq %552 4
		br %553, %554, %555
	554:
		store 5, %55
		br %560
	555:
		%556 = load %55
		%557 = icmp eq %556 3
		br %557, %558, %559
	558:
		br %658
	559:
		br %560
	560:
		%561 = load %40
		%562 = icmp sle %561 0
		br %562, %563, %564
	563:
		br %650
	564:
		store 8448, %6
		%565 = load %12
		%566 = icmp ne %565 0
		br %566, %567, %568
	567:
		store 8640, %31
		br %569
	568:
		store 3, %31
		br %569
	569:
		store 0, %11
		br %583
	570:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 0, %14
		store 0, %11
		%571 = load %44
		%572 = icmp ne %571 0
		br %572, %573, %580
	573:
		store 0, %7
		%574 = load %25
		%575 = add i32 %574, 1
		store %575, %25
		%576 = load %38
		%577 = icmp ne %576 0
		br %577, %578, %579
	578:
		br %579
	579:
		br %580
	580:
		store 1, %40
		br %650
	581:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store -1, %40
		br %650
	582:
		br %583
	583:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %584
	584:
		br %585
	585:
		br %586
	586:
		br %587
	587:
		br %588
	588:
		br %589
	589:
		br %590
	590:
		br %591
	591:
		br %592
	592:
		br %593
	593:
		br %594
	594:
		br %595
	595:
		br %596
	596:
		br %597
	597:
		br %598
	598:
		br %599
	599:
		br %600
	600:
		br %601
	601:
		br %602
	602:
		br %603
	603:
		br %604
	604:
		br %605
	605:
		br %606
	606:
		br %607
	607:
		br %608
	608:
		br %609
	609:
		br %610
	610:
		br %611
	611:
		br %612
	612:
		br %613
	613:
		br %614
	614:
		br %615
	615:
		br %616
	616:
		br %617
	617:
		br %618
	618:
		br %619
	619:
		%620 = load %27
		%621 = icmp ne %620 0
		br %621, %648, %622
	622:
		%623 = load %43
		%624 = icmp ne %623 0
		br %624, %647, %625
	625:
		%626 = load %15
		%627 = icmp ne %626 0
		br %627, %628, %634
	628:
		%629 = call i32 @__VERIFIER_nondet_int()
		store %629, %40
		%630 = load %40
		%631 = icmp sle %630 0
		br %631, %632, %633
	632:
		br %650
	633:
		br %634
	634:
		%635 = load %38
		%636 = icmp ne %635 0
		br %636, %637, %646
	637:
		%638 = load %6
		%639 = load %42
		%640 = icmp ne %638 %639
		br %640, %641, %645
	641:
		%642 = load %6
		store %642, %41
		%643 = load %42
		store %643, %6
		%644 = load %41
		store %644, %6
		br %645
	645:
		br %646
	646:
		br %647
	647:
		br %648
	648:
		store 0, %43
		br %115
	649:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %650
	650:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%651 = load %5
		%652 = add i32 %651, -1
		store %652, %5
		%653 = load %38
		%654 = icmp ne %653 0
		br %654, %655, %656
	655:
		br %656
	656:
		%657 = load %40
		store %657, %2
		br %659
	658:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	659:
		%660 = load %2
		ret %660

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1111
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 8464, %2
		%4 = load %2
		%5 = call i32 @ssl3_accept(i32 %4)
		store %5, %3
		%6 = load %3
		ret %6


Analyze Termination of all function calls matching the pattern:
main()Instruction count:937
Aborted 1756892650Exec. 4, LLVMToSEGraph with some error. Reason: InconsistentStateException [integerState=vals:
{v3305=[1,+inf){-inf,+inf}, v3306=[1,+inf){-inf,+inf}, v3307=[1,+inf){-inf,+inf}, v3308=[1,+inf){-inf,+inf}, v3309=[1,+inf){-inf,+inf}, v3310=[1,+inf){-inf,+inf}, v3311=[1,+inf){-inf,+inf}, v3312=[1,+inf){-inf,+inf}, v3313=[1,+inf){-inf,+inf}, v3314=[1,+inf){-inf,+inf}, v3315=[1,+inf){-inf,+inf}, v3316=[1,+inf){-inf,+inf}, v3317=[1,+inf){-inf,+inf}, v3318=[1,+inf){-inf,+inf}, v3319=[1,+inf){-inf,+inf}, v3320=[1,+inf){-inf,+inf}, v3321=[1,+inf){-inf,+inf}, v3322=[1,+inf){-inf,+inf}, v3323=[1,+inf){-inf,+inf}, v3324=[1,+inf){-inf,+inf}, v3325=[1,+inf){-inf,+inf}, v3326=[1,+inf){-inf,+inf}, v3327=[1,+inf){-inf,+inf}, v3328=[1,+inf){-inf,+inf}, v3329=[1,+inf){-inf,+inf}, v3330=[1,+inf){-inf,+inf}, v3331=[1,+inf){-inf,+inf}, v3332=[1,+inf){-inf,+inf}, v3333=[1,+inf){-inf,+inf}, v3334=[1,+inf){-inf,+inf}, v3335=[1,+inf){-inf,+inf}, v3336=[1,+inf){-inf,+inf}, v3337=[1,+inf){-inf,+inf}, v3338=[1,+inf){-inf,+inf}, v3339=[1,+inf){-inf,+inf}, v3340=[1,+inf){-inf,+inf}, v3341=[1,+inf){-inf,+inf}, v3342=[1,+inf){-inf,+inf}, v3343=[1,+inf){-inf,+inf}, v3344=[1,+inf){-inf,+inf}, v3345=[1,+inf){-inf,+inf}, v3346=[1,+inf){-inf,+inf}, v3347=[1,+inf){-inf,+inf}, v3348=[1,+inf){-inf,+inf}, v3349=[1,+inf){-inf,+inf}, v3350=[1,+inf){-inf,+inf}, v3351=[1,+inf){-inf,+inf}, v3352=[1,+inf){-inf,+inf}, v3353=[1,+inf){-inf,+inf}, v3354=[1,+inf){-inf,+inf}, v3355=[1,+inf){-inf,+inf}, v3356=[1,+inf){-inf,+inf}, v3357=[1,+inf){-inf,+inf}, v3358=[4,+inf){0,+inf}, v3359=[4,+inf){0,+inf}, v3360=[4,+inf){0,+inf}, v3361=[4,+inf){0,+inf}, v3362=[4,+inf){0,+inf}, v3363=[4,+inf){0,+inf}, v3364=[4,+inf){0,+inf}, v3365=[4,+inf){0,+inf}, v3366=[4,+inf){0,+inf}, v3367=[4,+inf){0,+inf}, v3368=[4,+inf){0,+inf}, v3369=[4,+inf){0,+inf}, v3370=[4,+inf){0,+inf}, v3371=[4,+inf){0,+inf}, v3372=[4,+inf){0,+inf}, v3373=[4,+inf){0,+inf}, v3374=[4,+inf){0,+inf}, v3375=[4,+inf){0,+inf}, v3376=[4,+inf){0,+inf}, v3377=[4,+inf){0,+inf}, v3378=[4,+inf){0,+inf}, v3379=[4,+inf){0,+inf}, v3380=[4,+inf){0,+inf}, v3381=[4,+inf){0,+inf}, v3382=[4,+inf){0,+inf}, v3383=[4,+inf){0,+inf}, v3384=[4,+inf){0,+inf}, v3385=[4,+inf){0,+inf}, v3386=[4,+inf){0,+inf}, v3387=[8,+inf){0,+inf}, v3388=[4,+inf){0,+inf}, v3389=[8,+inf){0,+inf}, v3390=[4,+inf){0,+inf}, v3391=[4,+inf){0,+inf}, v3392=[4,+inf){0,+inf}, v3393=[4,+inf){0,+inf}, v3394=[4,+inf){0,+inf}, v3395=[4,+inf){0,+inf}, v3396=[4,+inf){0,+inf}, v3397=[4,+inf){0,+inf}, v3398=[4,+inf){0,+inf}, v3399=[4,+inf){0,+inf}, v3400=[8,+inf){0,+inf}, v3401=[4,+inf){0,+inf}, v3402=[4,+inf){0,+inf}, v3403=[4,+inf){0,+inf}, v3404=[4,+inf){0,+inf}, v3405=[8,+inf){0,+inf}, v3406=[8,+inf){0,+inf}, v3407=[8,+inf){0,+inf}, v3408=[8,+inf){0,+inf}, v3409=[4,+inf){0,+inf}, v3410=[8,+inf){0,+inf}, v3411=#, v3412=[8192,+inf)(l1), v3414=#, v3415=#, v3416=#, v3417=#, v3418=#, v3419=#, v3420=#, v3421=#, v3422=#, v3423=#, v3424=#, v3425=#, v3426=#, v3427=#, v3428=#, v3429=#, v3430=[-1,+inf)\{0}{-inf,+inf}, v3432=[0,1](u1), v3433=#, v3434=[0,+inf)}
associations:
{v3305=0, v3358=0, v3306=1, v3359=1, v3307=2, v3360=2, v3308=3, v3361=3, v3309=4, v3362=4, v3310=5, v3363=5, v3311=6, v3364=6, v3312=7, v3365=7, v3313=8, v3366=8, v3314=9, v3367=9, v3315=10, v3368=10, v3316=11, v3369=11, v3317=12, v3370=12, v3318=13, v3371=13, v3319=14, v3372=14, v3320=15, v3373=15, v3321=16, v3374=16, v3322=17, v3375=17, v3323=18, v3376=18, v3324=19, v3377=19, v3325=20, v3378=20, v3326=21, v3379=21, v3327=22, v3380=22, v3328=23, v3381=23, v3329=24, v3382=24, v3330=25, v3383=25, v3331=26, v3384=26, v3332=27, v3385=27, v3333=28, v3386=28, v3334=29, v3387=29, v3335=30, v3388=30, v3336=31, v3389=31, v3337=32, v3390=32, v3338=33, v3391=33, v3339=34, v3392=34, v3340=35, v3393=35, v3341=36, v3394=36, v3342=37, v3395=37, v3343=38, v3396=38, v3344=39, v3397=39, v3345=40, v3398=40, v3346=41, v3399=41, v3347=42, v3400=42, v3348=43, v3401=43, v3349=44, v3402=44, v3350=45, v3403=45, v3351=46, v3404=46, v3352=47, v3405=47, v3353=48, v3406=48, v3354=49, v3407=49, v3355=50, v3408=50, v3356=51, v3409=51, v3357=52, v3410=52}
association offsets:
{v3305=3, v3358=0, v3306=3, v3359=0, v3307=3, v3360=0, v3308=3, v3361=0, v3309=3, v3362=0, v3310=3, v3363=0, v3311=3, v3364=0, v3312=3, v3365=0, v3313=3, v3366=0, v3314=3, v3367=0, v3315=3, v3368=0, v3316=3, v3369=0, v3317=3, v3370=0, v3318=3, v3371=0, v3319=3, v3372=0, v3320=3, v3373=0, v3321=3, v3374=0, v3322=3, v3375=0, v3323=3, v3376=0, v3324=3, v3377=0, v3325=3, v3378=0, v3326=3, v3379=0, v3327=3, v3380=0, v3328=3, v3381=0, v3329=3, v3382=0, v3330=3, v3383=0, v3331=3, v3384=0, v3332=3, v3385=0, v3333=3, v3386=0, v3334=7, v3387=0, v3335=3, v3388=0, v3336=7, v3389=0, v3337=3, v3390=0, v3338=3, v3391=0, v3339=3, v3392=0, v3340=3, v3393=0, v3341=3, v3394=0, v3342=3, v3395=0, v3343=3, v3396=0, v3344=3, v3397=0, v3345=3, v3398=0, v3346=3, v3399=0, v3347=7, v3400=0, v3348=3, v3401=0, v3349=3, v3402=0, v3350=3, v3403=0, v3351=3, v3404=0, v3352=7, v3405=0, v3353=7, v3406=0, v3354=7, v3407=0, v3355=7, v3408=0, v3356=3, v3409=0, v3357=7, v3410=0}
rels:
undirected inequalities:
[]
