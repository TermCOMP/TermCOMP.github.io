YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/juVlA.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 878 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 37 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 1 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) RankingReductionPairProof [EQUIVALENT, 4 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/juVlA.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/juVlA.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		%9 = call i32 @__VERIFIER_nondet_int()
		store %9, %5
		br %10
	10:
		%11 = load %2
		%12 = load %3
		%13 = add i32 %11, %12
		%14 = icmp sge %13 0
		br %14, %15, %19
	15:
		%16 = load %2
		%17 = load %5
		%18 = icmp sle %16 %17
		br %19
	19:
		%20 = phi [0, %10], [%18, %15]
		br %20, %21, %30
	21:
		%22 = load %2
		%23 = mul i32 2, %22
		%24 = load %3
		%25 = add i32 %23, %24
		store %25, %2
		%26 = load %4
		store %26, %3
		%27 = load %4
		store %27, %4
		%28 = load %4
		%29 = add i32 %28, 1
		store %29, %4
		br %10
	30:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_257(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v354, v355, 1, v353, v357, v359, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_258(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v355, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: 0 = 0
f_258(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v355, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_259(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: v367 = v358 + v359
f_259(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_260(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: 0 <= v367
f_260(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_262(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: 0 = 0
f_262(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_264(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: TRUE
f_264(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_266(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: 0 = 0
f_266(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_268(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: 0 = 0
f_268(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_269(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: v358 <= v352
f_269(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_271(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: 0 = 0
f_271(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_273(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: 0 = 0
f_273(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_275(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: TRUE
f_275(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v353, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_277(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 4) :|: 0 = 0
f_277(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v357, v354, v360, v361, v362, v363, v364, v365, 0, 3, 4) -> f_278(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: v494 = 2 * v358
f_278(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v354, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_279(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: 0 = 0
f_279(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_280(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: v495 = v494 + v359
f_280(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_281(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: TRUE
f_281(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_282(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: 0 = 0
f_282(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_283(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: TRUE
f_283(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_284(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: 0 = 0
f_284(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_285(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: TRUE
f_285(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_286(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: 0 = 0
f_286(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_287(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v499, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: v499 = 1 + v360
f_287(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v499, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_288(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v499, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: TRUE
f_288(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v499, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_289(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v499, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: TRUE
f_289(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v499, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_256(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v359, v367, 1, v494, v495, v360, v499, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: TRUE
f_256(v344, v345, v346, v347, v348, v349, v350, v351, v352, v353, v354, v355, 1, v357, v358, v359, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) -> f_257(v344, v345, v346, v347, v348, v349, v350, v351, v352, v358, v354, v355, 1, v353, v357, v359, v360, v361, v362, v363, v364, v365, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_257(v344:0, v345:0, v346:0, v347:0, v348:0, v349:0, v350:0, v351:0, v352:0, v358:0, v354:0, v355:0, 1, v353:0, v357:0, v359:0, v360:0, v361:0, v362:0, v363:0, v364:0, v365:0, 0, 3, 2, 4) -> f_257(v344:0, v345:0, v346:0, v347:0, v348:0, v349:0, v350:0, v351:0, v352:0, 2 * v358:0 + v359:0, v359:0, v358:0 + v359:0, 1, v358:0, 2 * v358:0, v360:0, 1 + v360:0, v361:0, v362:0, v363:0, v364:0, v365:0, 0, 3, 2, 4) :|: v358:0 <= v352:0 && v358:0 + v359:0 > -1
Filtered unneeded arguments:
   f_257(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26) -> f_257(x9, x10, x16, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_257(v352:0, v358:0, v359:0, v360:0) -> f_257(v352:0, 2 * v358:0 + v359:0, v360:0, 1 + v360:0) :|: v358:0 <= v352:0 && v358:0 + v359:0 > -1

----------------------------------------

(8)
Obligation:
Rules:
f_257(v352:0, v358:0, v359:0, v360:0) -> f_257(v352:0, 2 * v358:0 + v359:0, v360:0, 1 + v360:0) :|: v358:0 <= v352:0 && v358:0 + v359:0 > -1

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

f_257(v352:0, v358:0, v359:0, v360:0) -> f_257(v352:0, 2 * v358:0 + v359:0, v360:0, 1 + v360:0) :|: v358:0 <= v352:0 && v358:0 + v359:0 > -1
has been transformed into
f_257(v352:0, v358:0, v359:0, v360:0) -> f_257(v352:0, 2 * v358:0 + v359:0, v360:0, 1 + v360:0) :|: v358:0 = 2 * x9 + x10 && (v352:0 = x8 && (v358:0 <= v352:0 && v358:0 + v359:0 > -1)) && x9 <= x8 && x9 + x10 > -1.


f_257(v352:0, v358:0, v359:0, v360:0) -> f_257(v352:0, 2 * v358:0 + v359:0, v360:0, 1 + v360:0) :|: v358:0 = 2 * x9 + x10 && (v352:0 = x8 && (v358:0 <= v352:0 && v358:0 + v359:0 > -1)) && x9 <= x8 && x9 + x10 > -1 and 
f_257(v352:0, v358:0, v359:0, v360:0) -> f_257(v352:0, 2 * v358:0 + v359:0, v360:0, 1 + v360:0) :|: v358:0 = 2 * x9 + x10 && (v352:0 = x8 && (v358:0 <= v352:0 && v358:0 + v359:0 > -1)) && x9 <= x8 && x9 + x10 > -1
have been merged into the new rule
f_257(x26, x27, x28, x29) -> f_257(x26, 2 * (2 * x27 + x28) + x29, 1 + x29, 1 + (1 + x29)) :|: x27 = 2 * x30 + x31 && (x26 = x32 && (x27 <= x26 && x27 + x28 > -1)) && x30 <= x32 && x30 + x31 > -1 && (2 * x27 + x28 = 2 * x33 + x34 && (x26 = x35 && (2 * x27 + x28 <= x26 && 2 * x27 + x28 + x29 > -1)) && x33 <= x35 && x33 + x34 > -1)


----------------------------------------

(10)
Obligation:
Rules:
f_257(x36, x37, x38, x39) -> f_257(x36, 4 * x37 + 2 * x38 + x39, 1 + x39, 2 + x39) :|: TRUE && x37 + -2 * x40 + -1 * x41 = 0 && x36 + -1 * x42 = 0 && x37 + -1 * x36 <= 0 && x37 + x38 >= 0 && x40 + -1 * x42 <= 0 && x40 + x41 >= 0 && 2 * x37 + x38 + -2 * x43 + -1 * x44 = 0 && x36 + -1 * x45 = 0 && 2 * x37 + x38 + -1 * x36 <= 0 && 2 * x37 + x38 + x39 >= 0 && x43 + -1 * x45 <= 0 && x43 + x44 >= 0

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_257(x36:0, x37:0, x38:0, x39:0) -> f_257(x36:0, 4 * x37:0 + 2 * x38:0 + x39:0, 1 + x39:0, 2 + x39:0) :|: x43:0 + -1 * x45:0 <= 0 && x43:0 + x44:0 >= 0 && 2 * x37:0 + x38:0 + x39:0 >= 0 && 2 * x37:0 + x38:0 + -1 * x36:0 <= 0 && x36:0 + -1 * x45:0 = 0 && 2 * x37:0 + x38:0 + -2 * x43:0 + -1 * x44:0 = 0 && x40:0 + x41:0 >= 0 && x40:0 + -1 * x42:0 <= 0 && x37:0 + x38:0 >= 0 && x37:0 + -1 * x36:0 <= 0 && x37:0 + -2 * x40:0 + -1 * x41:0 = 0 && x36:0 + -1 * x42:0 = 0

----------------------------------------

(13) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_257 ] = -2*f_257_2 + -1*f_257_3 + f_257_1

The following rules are decreasing:
f_257(x36:0, x37:0, x38:0, x39:0) -> f_257(x36:0, 4 * x37:0 + 2 * x38:0 + x39:0, 1 + x39:0, 2 + x39:0) :|: x43:0 + -1 * x45:0 <= 0 && x43:0 + x44:0 >= 0 && 2 * x37:0 + x38:0 + x39:0 >= 0 && 2 * x37:0 + x38:0 + -1 * x36:0 <= 0 && x36:0 + -1 * x45:0 = 0 && 2 * x37:0 + x38:0 + -2 * x43:0 + -1 * x44:0 = 0 && x40:0 + x41:0 >= 0 && x40:0 + -1 * x42:0 <= 0 && x37:0 + x38:0 >= 0 && x37:0 + -1 * x36:0 <= 0 && x37:0 + -2 * x40:0 + -1 * x41:0 = 0 && x36:0 + -1 * x42:0 = 0

The following rules are bounded:
f_257(x36:0, x37:0, x38:0, x39:0) -> f_257(x36:0, 4 * x37:0 + 2 * x38:0 + x39:0, 1 + x39:0, 2 + x39:0) :|: x43:0 + -1 * x45:0 <= 0 && x43:0 + x44:0 >= 0 && 2 * x37:0 + x38:0 + x39:0 >= 0 && 2 * x37:0 + x38:0 + -1 * x36:0 <= 0 && x36:0 + -1 * x45:0 = 0 && 2 * x37:0 + x38:0 + -2 * x43:0 + -1 * x44:0 = 0 && x40:0 + x41:0 >= 0 && x40:0 + -1 * x42:0 <= 0 && x37:0 + x38:0 >= 0 && x37:0 + -1 * x36:0 <= 0 && x37:0 + -2 * x40:0 + -1 * x41:0 = 0 && x36:0 + -1 * x42:0 = 0


----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
