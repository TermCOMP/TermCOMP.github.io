YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Ojhep.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 498 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 28 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 2 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Ojhep.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Ojhep.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = sub i32 0, %4
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		%7 = sub i32 0, %6
		store %7, %3
		br %8
	8:
		%9 = load %2
		%10 = load %3
		%11 = icmp sgt %9 %10
		br %11, %12, %18
	12:
		%13 = load %3
		%14 = load %2
		%15 = add i32 %13, %14
		store %15, %3
		%16 = load %2
		%17 = add i32 %16, 1
		store %17, %2
		br %8
	18:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_146(v41, v42, v43, v44, v45, v46, v47, v52, v49, 1, v48, v51, v53, v54, v55, 0, 3, 4) -> f_147(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v49, v48, v53, v54, v55, 0, 3, 4) :|: 0 = 0
f_147(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v49, v48, v53, v54, v55, 0, 3, 4) -> f_148(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v49, v48, v53, v54, v55, 0, 3, 4) :|: v51 < v52 && v49 <= 0
f_148(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v49, v48, v53, v54, v55, 0, 3, 4) -> f_150(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v49, v48, v53, v54, v55, 0, 3, 4) :|: 0 = 0
f_150(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v49, v48, v53, v54, v55, 0, 3, 4) -> f_152(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v49, v48, v53, v54, v55, 0, 3, 4) :|: TRUE
f_152(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v49, v48, v53, v54, v55, 0, 3, 4) -> f_154(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v48, v53, v54, v55, 0, 3, 4) :|: 0 = 0
f_154(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v48, v53, v54, v55, 0, 3, 4) -> f_155(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v48, v53, v54, v55, 0, 3, 4) :|: 0 = 0
f_155(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v48, v53, v54, v55, 0, 3, 4) -> f_156(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v57, v48, v53, v54, v55, 0, 3, 4) :|: v57 = v51 + v52
f_156(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v57, v48, v53, v54, v55, 0, 3, 4) -> f_157(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v57, v48, v53, v54, v55, 0, 3, 4) :|: TRUE
f_157(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v57, v48, v53, v54, v55, 0, 3, 4) -> f_158(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v57, v53, v54, v55, 0, 3, 4) :|: 0 = 0
f_158(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v57, v53, v54, v55, 0, 3, 4) -> f_159(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v57, v59, v53, v54, v55, 0, 3, 4) :|: v59 = 1 + v52
f_159(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v57, v59, v53, v54, v55, 0, 3, 4) -> f_160(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v57, v59, v53, v54, v55, 0, 3, 4) :|: TRUE
f_160(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v57, v59, v53, v54, v55, 0, 3, 4) -> f_161(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v57, v59, v53, v54, v55, 0, 3, 4) :|: TRUE
f_161(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v57, v59, v53, v54, v55, 0, 3, 4) -> f_145(v41, v42, v43, v44, v45, v46, v47, v52, v51, 1, v57, v59, v53, v54, v55, 0, 3, 4) :|: TRUE
f_145(v41, v42, v43, v44, v45, v46, v47, v48, v49, 1, v51, v52, v53, v54, v55, 0, 3, 4) -> f_146(v41, v42, v43, v44, v45, v46, v47, v52, v49, 1, v48, v51, v53, v54, v55, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_146(v41:0, v42:0, v43:0, v44:0, v45:0, v46:0, v47:0, v52:0, v49:0, 1, v48:0, v51:0, v53:0, v54:0, v55:0, 0, 3, 4) -> f_146(v41:0, v42:0, v43:0, v44:0, v45:0, v46:0, v47:0, 1 + v52:0, v51:0, 1, v52:0, v51:0 + v52:0, v53:0, v54:0, v55:0, 0, 3, 4) :|: v52:0 > v51:0 && v49:0 < 1
Filtered unneeded arguments:
   f_146(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_146(x8, x9, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_146(v52:0, v49:0, v51:0) -> f_146(1 + v52:0, v51:0, v51:0 + v52:0) :|: v52:0 > v51:0 && v49:0 < 1

----------------------------------------

(8)
Obligation:
Rules:
f_146(v52:0, v49:0, v51:0) -> f_146(1 + v52:0, v51:0, v51:0 + v52:0) :|: v52:0 > v51:0 && v49:0 < 1

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

f_146(v52:0, v49:0, v51:0) -> f_146(1 + v52:0, v51:0, v51:0 + v52:0) :|: v52:0 > v51:0 && v49:0 < 1
has been transformed into
f_146(v52:0, v49:0, v51:0) -> f_146(1 + v52:0, v51:0, v51:0 + v52:0) :|: v51:0 = x8 + x6 && (v49:0 = x8 && (v52:0 = 1 + x6 && (v52:0 > v51:0 && v49:0 < 1))) && x6 > x8.


f_146(v52:0, v49:0, v51:0) -> f_146(1 + v52:0, v51:0, v51:0 + v52:0) :|: v51:0 = x8 + x6 && (v49:0 = x8 && (v52:0 = 1 + x6 && (v52:0 > v51:0 && v49:0 < 1))) && x6 > x8 and 
f_146(v52:0, v49:0, v51:0) -> f_146(1 + v52:0, v51:0, v51:0 + v52:0) :|: v51:0 = x8 + x6 && (v49:0 = x8 && (v52:0 = 1 + x6 && (v52:0 > v51:0 && v49:0 < 1))) && x6 > x8
have been merged into the new rule
f_146(x19, x20, x21) -> f_146(1 + (1 + x19), x21 + x19, x21 + x19 + (1 + x19)) :|: x21 = x22 + x23 && (x20 = x22 && (x19 = 1 + x23 && (x19 > x21 && x20 < 1))) && x23 > x22 && (x21 + x19 = x24 + x25 && (x21 = x24 && (1 + x19 = 1 + x25 && (1 + x19 > x21 + x19 && x21 < 1))) && x25 > x24)


----------------------------------------

(10)
Obligation:
Rules:
f_146(x26, x27, x28) -> f_146(2 + x26, x28 + x26, x28 + 2 * x26 + 1) :|: TRUE && x28 + -1 * x29 + -1 * x30 = 0 && x27 + -1 * x29 = 0 && x26 + -1 * x30 = 1 && x26 + -1 * x28 >= 1 && x27 <= 0 && x30 + -1 * x29 >= 1 && x28 + x26 + -1 * x31 + -1 * x32 = 0 && x28 + -1 * x31 = 0 && x26 + -1 * x32 = 0 && -1 * x28 >= 0 && x32 + -1 * x31 >= 1

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_146(x26:0, x27:0, x28:0) -> f_146(2 + x26:0, x28:0 + x26:0, x28:0 + 2 * x26:0 + 1) :|: 0 <= -1 * x28:0 && x32:0 + -1 * x31:0 >= 1 && x26:0 + -1 * x32:0 = 0 && x28:0 + -1 * x31:0 = 0 && x28:0 + x26:0 + -1 * x31:0 + -1 * x32:0 = 0 && x30:0 + -1 * x29:0 >= 1 && x27:0 < 1 && x26:0 + -1 * x28:0 >= 1 && x26:0 + -1 * x30:0 = 1 && x28:0 + -1 * x29:0 + -1 * x30:0 = 0 && x27:0 + -1 * x29:0 = 0

----------------------------------------

(13) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_146(x, x1, x2)] = 1 - 2*x + x^2 - 2*x2

The following rules are decreasing:
f_146(x26:0, x27:0, x28:0) -> f_146(2 + x26:0, x28:0 + x26:0, x28:0 + 2 * x26:0 + 1) :|: 0 <= -1 * x28:0 && x32:0 + -1 * x31:0 >= 1 && x26:0 + -1 * x32:0 = 0 && x28:0 + -1 * x31:0 = 0 && x28:0 + x26:0 + -1 * x31:0 + -1 * x32:0 = 0 && x30:0 + -1 * x29:0 >= 1 && x27:0 < 1 && x26:0 + -1 * x28:0 >= 1 && x26:0 + -1 * x30:0 = 1 && x28:0 + -1 * x29:0 + -1 * x30:0 = 0 && x27:0 + -1 * x29:0 = 0
The following rules are bounded:
f_146(x26:0, x27:0, x28:0) -> f_146(2 + x26:0, x28:0 + x26:0, x28:0 + 2 * x26:0 + 1) :|: 0 <= -1 * x28:0 && x32:0 + -1 * x31:0 >= 1 && x26:0 + -1 * x32:0 = 0 && x28:0 + -1 * x31:0 = 0 && x28:0 + x26:0 + -1 * x31:0 + -1 * x32:0 = 0 && x30:0 + -1 * x29:0 >= 1 && x27:0 < 1 && x26:0 + -1 * x28:0 >= 1 && x26:0 + -1 * x30:0 = 1 && x28:0 + -1 * x29:0 + -1 * x30:0 = 0 && x27:0 + -1 * x29:0 = 0

----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
