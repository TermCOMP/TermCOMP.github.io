NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/Jy37M.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 9545 ms]
(4) LLVM Symbolic Execution Graph
(5) LLVMNonterminationProof [COMPLETE, 1455 ms]
(6) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Jy37M.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Jy37M.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "foo" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%2 = call i32 @__VERIFIER_nondet_int()
		store %2, %1
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = icmp ne %3 0
		br %4, %5, %21
	5:
		%6 = call i32 @__VERIFIER_nondet_int()
		%7 = icmp ne %6 0
		br %7, %8, %14
	8:
		%9 = call i32 @__VERIFIER_nondet_int()
		%10 = icmp ne %9 0
		br %10, %11, %12
	11:
		store 0, %1
		br %13
	12:
		store 1, %1
		br %13
	13:
		br %20
	14:
		%15 = call i32 @__VERIFIER_nondet_int()
		%16 = icmp ne %15 0
		br %16, %17, %18
	17:
		store 2, %1
		br %19
	18:
		store 3, %1
		br %19
	19:
		br %20
	20:
		br %37
	21:
		%22 = call i32 @__VERIFIER_nondet_int()
		%23 = icmp ne %22 0
		br %23, %24, %30
	24:
		%25 = call i32 @__VERIFIER_nondet_int()
		%26 = icmp ne %25 0
		br %26, %27, %28
	27:
		store 4, %1
		br %29
	28:
		store 5, %1
		br %29
	29:
		br %36
	30:
		%31 = call i32 @__VERIFIER_nondet_int()
		%32 = icmp ne %31 0
		br %32, %33, %34
	33:
		store 6, %1
		br %35
	34:
		store 7, %1
		br %35
	35:
		br %36
	36:
		br %37
	37:
		%38 = load %1
		ret %38

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 67
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		store 1, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %3
		%5 = call i32 @__VERIFIER_nondet_int()
		%6 = icmp ne %5 0
		br %6, %7, %10
	7:
		%8 = load %2
		%9 = sub i32 %8, 1
		store %9, %2
		br %10
	10:
		%11 = call i32 @__VERIFIER_nondet_int()
		%12 = icmp ne %11 0
		br %12, %13, %15
	13:
		%14 = call i32 @foo()
		br %15
	15:
		%16 = call i32 @__VERIFIER_nondet_int()
		%17 = icmp ne %16 0
		br %17, %18, %20
	18:
		%19 = call i32 @foo()
		br %20
	20:
		%21 = call i32 @__VERIFIER_nondet_int()
		%22 = icmp ne %21 0
		br %22, %23, %25
	23:
		%24 = call i32 @foo()
		br %25
	25:
		%26 = call i32 @__VERIFIER_nondet_int()
		%27 = icmp ne %26 0
		br %27, %28, %30
	28:
		%29 = call i32 @foo()
		br %30
	30:
		%31 = call i32 @__VERIFIER_nondet_int()
		%32 = icmp ne %31 0
		br %32, %33, %36
	33:
		%34 = load %2
		%35 = sub i32 %34, 1
		store %35, %2
		br %36
	36:
		br %37
	37:
		%38 = load %3
		%39 = icmp sgt %38 0
		br %39, %40, %44
	40:
		%41 = load %3
		%42 = load %2
		%43 = sub i32 %41, %42
		store %43, %3
		br %37
	44:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) LLVMNonterminationProof (COMPLETE)
Proved nontermination with the following witness:

State #311 with references set to {}.
Nondeterministic instruction %1 = alloca i32, align 4 in node #311 yields value 9.
Nondeterministic instruction %2 = alloca i32, align 4 in node #312 yields value 13.
Nondeterministic instruction %3 = alloca i32, align 4 in node #313 yields value 1.
Nondeterministic instruction %4 = call i32 @__VERIFIER_nondet_int() in node #318 yields value 7.
Nondeterministic instruction %5 = call i32 @__VERIFIER_nondet_int() in node #320 yields value 1.
Nondeterministic instruction %11 = call i32 @__VERIFIER_nondet_int() in node #336 yields value 0.
Nondeterministic instruction %16 = call i32 @__VERIFIER_nondet_int() in node #353 yields value 0.
Nondeterministic instruction %21 = call i32 @__VERIFIER_nondet_int() in node #379 yields value 0.
Nondeterministic instruction %26 = call i32 @__VERIFIER_nondet_int() in node #421 yields value 1.
Nondeterministic instruction %1 = alloca i32, align 4 in node #520 yields value 5.
Nondeterministic instruction %1 = alloca i32, align 4 in node #2299 yields value 5.
Nondeterministic instruction %2 = call i32 @__VERIFIER_nondet_int() in node #2496 yields value 0.
Nondeterministic instruction %3 = call i32 @__VERIFIER_nondet_int() in node #2833 yields value 0.
Nondeterministic instruction %22 = call i32 @__VERIFIER_nondet_int() in node #3635 yields value 1.
Nondeterministic instruction %22 = call i32 @__VERIFIER_nondet_int() in node #3636 yields value 1.
Nondeterministic instruction %22 = call i32 @__VERIFIER_nondet_int() in node #6806 yields value 1.
Nondeterministic instruction %22 = call i32 @__VERIFIER_nondet_int() in node #8290 yields value 1.
Nondeterministic instruction %25 = call i32 @__VERIFIER_nondet_int() in node #8521 yields value 1.
Nondeterministic instruction %31 = call i32 @__VERIFIER_nondet_int() in node #8927 yields value (-8).

----------------------------------------

(6)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.007s
