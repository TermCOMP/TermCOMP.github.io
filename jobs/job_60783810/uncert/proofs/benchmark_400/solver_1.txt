YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/50Ftt.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 285 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 49 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 43 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/50Ftt.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/50Ftt.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %3
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		br %6
	6:
		%7 = load %3
		%8 = icmp sgt %7 0
		br %8, %9, %16
	9:
		%10 = load %2
		%11 = icmp sgt %10 0
		br %11, %12, %16
	12:
		%13 = load %2
		%14 = load %3
		%15 = icmp ne %13 %14
		br %16
	16:
		%17 = phi [0, %9], [0, %6], [%15, %12]
		br %17, %18, %34
	18:
		%19 = load %3
		%20 = load %2
		%21 = icmp slt %19 %20
		br %21, %22, %25
	22:
		%23 = load %3
		%24 = sub i32 %23, 1
		store %24, %3
		br %33
	25:
		%26 = load %2
		%27 = load %3
		%28 = icmp slt %26 %27
		br %28, %29, %32
	29:
		%30 = load %2
		%31 = sub i32 %30, 1
		store %31, %2
		br %32
	32:
		br %33
	33:
		br %6
	34:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 27 rulesP rules:
f_323(v454, v455, v456, v457, v458, 1, v460, 0, v462, v463, v464, v465, 3, 2, 4) -> f_325(v454, v455, v456, v457, v458, 1, v460, 0, v462, v463, v464, v465, 3, 2, 4) :|: 0 = 0
f_325(v454, v455, v456, v457, v458, 1, v460, 0, v462, v463, v464, v465, 3, 2, 4) -> f_327(v454, v455, v456, v457, v458, 1, v460, 0, v462, v463, v464, v465, 3, 2, 4) :|: 0 = 0
f_327(v454, v455, v456, v457, v458, 1, v460, 0, v462, v463, v464, v465, 3, 2, 4) -> f_329(v454, v455, v456, v457, v458, 1, v460, 0, v462, v463, v464, v465, 3, 2, 4) :|: TRUE
f_329(v454, v455, v456, v457, v458, 1, v460, 0, v462, v463, v464, v465, 3, 2, 4) -> f_331(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) :|: 0 = 0
f_331(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) -> f_333(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) :|: 0 < v462 && 2 <= v460 && 3 <= v457 && 2 <= v458
f_333(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) -> f_336(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) :|: 0 = 0
f_336(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) -> f_338(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) :|: TRUE
f_338(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) -> f_340(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) :|: 0 = 0
f_340(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) -> f_342(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) :|: 0 = 0
f_342(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) -> f_343(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) :|: 0 = 0
f_343(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) -> f_344(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) :|: 0 = 0
f_344(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) -> f_345(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) :|: TRUE
f_345(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) -> f_346(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) :|: 0 = 0
f_346(v454, v455, v456, v457, v458, 1, v462, v460, 0, v463, v464, v465, 3, 2, 4) -> f_347(v454, v455, v456, v457, v458, 1, v462, 0, v460, v463, v464, v465, 3, 2, 4) :|: 0 = 0
f_347(v454, v455, v456, v457, v458, 1, v462, 0, v460, v463, v464, v465, 3, 2, 4) -> f_348(v454, v455, v456, v457, v458, 1, v462, 0, v460, v463, v464, v465, 3, 2, 4) :|: 0 = 0
f_348(v454, v455, v456, v457, v458, 1, v462, 0, v460, v463, v464, v465, 3, 2, 4) -> f_349(v454, v455, v456, v457, v458, 1, v462, 0, v460, v463, v464, v465, 3, 2, 4) :|: TRUE
f_349(v454, v455, v456, v457, v458, 1, v462, 0, v460, v463, v464, v465, 3, 2, 4) -> f_350(v454, v455, v456, v457, v458, 1, v462, 0, v460, v463, v464, v465, 3, 2, 4) :|: 0 = 0
f_350(v454, v455, v456, v457, v458, 1, v462, 0, v460, v463, v464, v465, 3, 2, 4) -> f_351(v454, v455, v456, v457, v458, 1, v462, 0, v460, v463, v464, v465, 3, 2, 4) :|: 0 = 0
f_351(v454, v455, v456, v457, v458, 1, v462, 0, v460, v463, v464, v465, 3, 2, 4) -> f_352(v454, v455, v456, v457, v458, 1, v462, 0, v460, v463, v464, v465, 3, 2, 4) :|: 0 = 0
f_352(v454, v455, v456, v457, v458, 1, v462, 0, v460, v463, v464, v465, 3, 2, 4) -> f_353(v454, v455, v456, v457, v458, 1, v462, 0, v460, v463, v464, v465, 3, 2, 4) :|: TRUE
f_353(v454, v455, v456, v457, v458, 1, v462, 0, v460, v463, v464, v465, 3, 2, 4) -> f_354(v454, v455, v456, v457, v458, 1, v462, 0, v463, v464, v465, 3, 2, 4) :|: 0 = 0
f_354(v454, v455, v456, v457, v458, 1, v462, 0, v463, v464, v465, 3, 2, 4) -> f_355(v454, v455, v456, v457, v458, 1, v462, 0, v573, v463, v464, v465, 3, 2, 4) :|: 1 + v573 = v462 && 0 <= v573
f_355(v454, v455, v456, v457, v458, 1, v462, 0, v573, v463, v464, v465, 3, 2, 4) -> f_356(v454, v455, v456, v457, v458, 1, v462, 0, v573, v463, v464, v465, 3, 2, 4) :|: TRUE
f_356(v454, v455, v456, v457, v458, 1, v462, 0, v573, v463, v464, v465, 3, 2, 4) -> f_357(v454, v455, v456, v457, v458, 1, v462, 0, v573, v463, v464, v465, 3, 2, 4) :|: TRUE
f_357(v454, v455, v456, v457, v458, 1, v462, 0, v573, v463, v464, v465, 3, 2, 4) -> f_358(v454, v455, v456, v457, v458, 1, v462, 0, v573, v463, v464, v465, 3, 2, 4) :|: TRUE
f_358(v454, v455, v456, v457, v458, 1, v462, 0, v573, v463, v464, v465, 3, 2, 4) -> f_321(v454, v455, v456, v457, v458, 1, v462, 0, v573, v463, v464, v465, 3, 2, 4) :|: TRUE
f_321(v454, v455, v456, v457, v458, 1, v460, 0, v462, v463, v464, v465, 3, 2, 4) -> f_323(v454, v455, v456, v457, v458, 1, v460, 0, v462, v463, v464, v465, 3, 2, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_323(v454:0, v455:0, v456:0, v457:0, v458:0, 1, v460:0, 0, 1 + v573:0, v463:0, v464:0, v465:0, 3, 2, 4) -> f_323(v454:0, v455:0, v456:0, v457:0, v458:0, 1, 1 + v573:0, 0, v573:0, v463:0, v464:0, v465:0, 3, 2, 4) :|: v460:0 > 1 && v573:0 > -1 && v457:0 > 2 && v458:0 > 1
Filtered unneeded arguments:
   f_323(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_323(x4, x5, x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_323(v457:0, v458:0, v460:0, sum~cons_1~v573:0) -> f_323(v457:0, v458:0, 1 + v573:0, v573:0) :|: v573:0 > -1 && v460:0 > 1 && v458:0 > 1 && v457:0 > 2 && sum~cons_1~v573:0 = 1 + v573:0

----------------------------------------

(9)
Obligation:
Rules:
f_323(v457:0, v458:0, v460:0, sum~cons_1~v573:0) -> f_323(v457:0, v458:0, 1 + v573:0, v573:0) :|: v573:0 > -1 && v460:0 > 1 && v458:0 > 1 && v457:0 > 2 && sum~cons_1~v573:0 = 1 + v573:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_323(v457:0:0, v458:0:0, v460:0:0, sum~cons_1~v573:0:0) -> f_323(v457:0:0, v458:0:0, 1 + v573:0:0, v573:0:0) :|: v458:0:0 > 1 && v457:0:0 > 2 && v460:0:0 > 1 && v573:0:0 > -1 && sum~cons_1~v573:0:0 = 1 + v573:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_323(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_323(v457:0:0, v458:0:0, v460:0:0, sum~cons_1~v573:0:0) -> f_323(v457:0:0, v458:0:0, 1 + v573:0:0, v573:0:0) :|: v458:0:0 > 1 && v457:0:0 > 2 && v460:0:0 > 1 && v573:0:0 > -1 && sum~cons_1~v573:0:0 = 1 + v573:0:0
The following rules are bounded:
f_323(v457:0:0, v458:0:0, v460:0:0, sum~cons_1~v573:0:0) -> f_323(v457:0:0, v458:0:0, 1 + v573:0:0, v573:0:0) :|: v458:0:0 > 1 && v457:0:0 > 2 && v460:0:0 > 1 && v573:0:0 > -1 && sum~cons_1~v573:0:0 = 1 + v573:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_289(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_291(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: 0 < v351 && 2 <= v349 && 3 <= v348 && 2 <= v347
f_291(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_294(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: 0 = 0
f_294(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_297(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: TRUE
f_297(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_300(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: 0 = 0
f_300(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_303(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: 0 = 0
f_303(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_305(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: TRUE
f_305(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_307(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: 0 = 0
f_307(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_309(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: 0 = 0
f_309(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_311(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: 0 = 0
f_311(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_313(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: 0 = 0
f_313(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_315(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: TRUE
f_315(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_317(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: 0 = 0
f_317(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_319(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: 0 = 0
f_319(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_322(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: 0 = 0
f_322(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_324(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: TRUE
f_324(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) -> f_326(v344, v345, v346, v347, v348, v351, 1, v352, v353, v354, 0, 3, 2, 4) :|: 0 = 0
f_326(v344, v345, v346, v347, v348, v351, 1, v352, v353, v354, 0, 3, 2, 4) -> f_328(v344, v345, v346, v347, v348, v351, 1, v470, v352, v353, v354, 0, 3, 2, 4) :|: 1 + v470 = v351 && 0 <= v470
f_328(v344, v345, v346, v347, v348, v351, 1, v470, v352, v353, v354, 0, 3, 2, 4) -> f_330(v344, v345, v346, v347, v348, v351, 1, v470, v352, v353, v354, 0, 3, 2, 4) :|: TRUE
f_330(v344, v345, v346, v347, v348, v351, 1, v470, v352, v353, v354, 0, 3, 2, 4) -> f_332(v344, v345, v346, v347, v348, v351, 1, v470, v352, v353, v354, 0, 3, 2, 4) :|: TRUE
f_332(v344, v345, v346, v347, v348, v351, 1, v470, v352, v353, v354, 0, 3, 2, 4) -> f_335(v344, v345, v346, v347, v348, v351, 1, v470, v352, v353, v354, 0, 3, 2, 4) :|: TRUE
f_335(v344, v345, v346, v347, v348, v351, 1, v470, v352, v353, v354, 0, 3, 2, 4) -> f_287(v344, v345, v346, v347, v348, v351, 1, v470, v352, v353, v354, 0, 3, 2, 4) :|: TRUE
f_287(v344, v345, v346, v347, v348, v349, 1, v351, v352, v353, v354, 0, 3, 2, 4) -> f_289(v344, v345, v346, v347, v348, v351, 1, v349, v352, v353, v354, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_289(v344:0, v345:0, v346:0, v347:0, v348:0, 1 + v470:0, 1, v349:0, v352:0, v353:0, v354:0, 0, 3, 2, 4) -> f_289(v344:0, v345:0, v346:0, v347:0, v348:0, v470:0, 1, 1 + v470:0, v352:0, v353:0, v354:0, 0, 3, 2, 4) :|: v349:0 > 1 && v470:0 > -1 && v348:0 > 2 && v347:0 > 1
Filtered unneeded arguments:
   f_289(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_289(x4, x5, x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_289(v347:0, v348:0, sum~cons_1~v470:0, v349:0) -> f_289(v347:0, v348:0, v470:0, 1 + v470:0) :|: v470:0 > -1 && v349:0 > 1 && v347:0 > 1 && v348:0 > 2 && sum~cons_1~v470:0 = 1 + v470:0

----------------------------------------

(16)
Obligation:
Rules:
f_289(v347:0, v348:0, sum~cons_1~v470:0, v349:0) -> f_289(v347:0, v348:0, v470:0, 1 + v470:0) :|: v470:0 > -1 && v349:0 > 1 && v347:0 > 1 && v348:0 > 2 && sum~cons_1~v470:0 = 1 + v470:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_289(v347:0:0, v348:0:0, sum~cons_1~v470:0:0, v349:0:0) -> f_289(v347:0:0, v348:0:0, v470:0:0, 1 + v470:0:0) :|: v347:0:0 > 1 && v348:0:0 > 2 && v349:0:0 > 1 && v470:0:0 > -1 && sum~cons_1~v470:0:0 = 1 + v470:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_289(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_289(v347:0:0, v348:0:0, sum~cons_1~v470:0:0, v349:0:0) -> f_289(v347:0:0, v348:0:0, v470:0:0, 1 + v470:0:0) :|: v347:0:0 > 1 && v348:0:0 > 2 && v349:0:0 > 1 && v470:0:0 > -1 && sum~cons_1~v470:0:0 = 1 + v470:0:0
The following rules are bounded:
f_289(v347:0:0, v348:0:0, sum~cons_1~v470:0:0, v349:0:0) -> f_289(v347:0:0, v348:0:0, v470:0:0, 1 + v470:0:0) :|: v347:0:0 > 1 && v348:0:0 > 2 && v349:0:0 > 1 && v470:0:0 > -1 && sum~cons_1~v470:0:0 = 1 + v470:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
