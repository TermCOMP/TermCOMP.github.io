YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/yji0X.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 989 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 12 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 16 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 9 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 13 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) RankingReductionPairProof [EQUIVALENT, 5 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/yji0X.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/yji0X.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		store 0, %2
		br %7
	7:
		%8 = load %3
		%9 = icmp sgt %8 0
		br %9, %13, %10
	10:
		%11 = load %4
		%12 = icmp sgt %11 0
		br %13
	13:
		%14 = phi [1, %7], [%12, %10]
		br %14, %15, %32
	15:
		%16 = load %3
		%17 = icmp sgt %16 0
		br %17, %18, %21
	18:
		%19 = load %3
		%20 = sub i32 %19, 1
		store %20, %3
		br %29
	21:
		%22 = load %4
		%23 = icmp sgt %22 0
		br %23, %24, %27
	24:
		%25 = load %4
		%26 = sub i32 %25, 1
		store %26, %4
		br %28
	27:
		br %28
	28:
		br %29
	29:
		%30 = load %2
		%31 = add i32 %30, 1
		store %31, %2
		br %7
	32:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_626(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1870, v1871, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4) -> f_628(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4) :|: 0 = 0
f_628(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4) -> f_629(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4, 2) :|: v1921 = 1 + v1871 && 2 <= v1921
f_629(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4, 2) -> f_630(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4, 2) :|: TRUE
f_630(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4, 2) -> f_631(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4, 2) :|: TRUE
f_631(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4, 2) -> f_632(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4, 2) :|: 0 = 0
f_632(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4, 2) -> f_633(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4, 2) :|: 0 = 0
f_633(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4, 2) -> f_634(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4, 2) :|: TRUE
f_634(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4, 2) -> f_635(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 4, 2) :|: 0 = 0
f_635(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 4, 2) -> f_636(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) :|: 0 < v1873 && 2 <= v1872 && 2 <= v1867
f_636(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) -> f_638(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) :|: 0 = 0
f_638(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) -> f_640(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) :|: 0 = 0
f_640(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) -> f_642(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) :|: TRUE
f_642(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) -> f_644(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) :|: 0 = 0
f_644(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) -> f_645(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) :|: 0 = 0
f_645(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) -> f_646(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) :|: TRUE
f_646(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) -> f_647(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) :|: 0 = 0
f_647(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) -> f_648(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) :|: 0 = 0
f_648(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) -> f_649(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) :|: TRUE
f_649(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1872, v1874, v1875, v1876, v1877, 3, 2, 4) -> f_650(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1874, v1875, v1876, v1877, 3, 2, 4) :|: 0 = 0
f_650(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v1874, v1875, v1876, v1877, 3, 2, 4) -> f_651(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v2074, v1874, v1875, v1876, v1877, 3, 2, 4) :|: 1 + v2074 = v1873 && 0 <= v2074
f_651(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v2074, v1874, v1875, v1876, v1877, 3, 2, 4) -> f_652(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v2074, v1874, v1875, v1876, v1877, 3, 2, 4) :|: TRUE
f_652(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v2074, v1874, v1875, v1876, v1877, 3, 2, 4) -> f_653(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v2074, v1874, v1875, v1876, v1877, 3, 2, 4) :|: TRUE
f_653(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v2074, v1874, v1875, v1876, v1877, 3, 2, 4) -> f_624(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1871, v1921, v1873, v2074, v1874, v1875, v1876, v1877, 3, 4) :|: TRUE
f_624(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1870, v1871, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4) -> f_626(v1862, v1863, v1864, v1865, v1866, v1867, 0, 1, v1870, v1871, v1872, v1873, v1874, v1875, v1876, v1877, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_626(v1862:0, v1863:0, v1864:0, v1865:0, v1866:0, v1867:0, 0, 1, v1870:0, v1871:0, v1872:0, 1 + v2074:0, v1874:0, v1875:0, v1876:0, v1877:0, 3, 4) -> f_626(v1862:0, v1863:0, v1864:0, v1865:0, v1866:0, v1867:0, 0, 1, v1871:0, 1 + v1871:0, 1 + v2074:0, v2074:0, v1874:0, v1875:0, v1876:0, v1877:0, 3, 4) :|: v1871:0 > 0 && v1872:0 > 1 && v2074:0 > -1 && v1867:0 > 1
Filtered unneeded arguments:
   f_626(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_626(x6, x10, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_626(v1867:0, v1871:0, v1872:0, sum~cons_1~v2074:0) -> f_626(v1867:0, 1 + v1871:0, 1 + v2074:0, v2074:0) :|: v1872:0 > 1 && v1871:0 > 0 && v1867:0 > 1 && v2074:0 > -1 && sum~cons_1~v2074:0 = 1 + v2074:0

----------------------------------------

(9)
Obligation:
Rules:
f_626(v1867:0, v1871:0, v1872:0, sum~cons_1~v2074:0) -> f_626(v1867:0, 1 + v1871:0, 1 + v2074:0, v2074:0) :|: v1872:0 > 1 && v1871:0 > 0 && v1867:0 > 1 && v2074:0 > -1 && sum~cons_1~v2074:0 = 1 + v2074:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_626(v1867:0:0, v1871:0:0, v1872:0:0, sum~cons_1~v2074:0:0) -> f_626(v1867:0:0, 1 + v1871:0:0, 1 + v2074:0:0, v2074:0:0) :|: v1867:0:0 > 1 && v2074:0:0 > -1 && v1871:0:0 > 0 && v1872:0:0 > 1 && sum~cons_1~v2074:0:0 = 1 + v2074:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_626(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_626(v1867:0:0, v1871:0:0, v1872:0:0, sum~cons_1~v2074:0:0) -> f_626(v1867:0:0, 1 + v1871:0:0, 1 + v2074:0:0, v2074:0:0) :|: v1867:0:0 > 1 && v2074:0:0 > -1 && v1871:0:0 > 0 && v1872:0:0 > 1 && sum~cons_1~v2074:0:0 = 1 + v2074:0:0
The following rules are bounded:
f_626(v1867:0:0, v1871:0:0, v1872:0:0, sum~cons_1~v2074:0:0) -> f_626(v1867:0:0, 1 + v1871:0:0, 1 + v2074:0:0, v2074:0:0) :|: v1867:0:0 > 1 && v2074:0:0 > -1 && v1871:0:0 > 0 && v1872:0:0 > 1 && sum~cons_1~v2074:0:0 = 1 + v2074:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_574(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1589, 1, v1591, v1592, v1593, v1594, v1595, v1596, v1597, 3, 4) -> f_576(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1589, 1, v1591, v1592, v1593, v1594, v1595, v1596, v1597, 3, 4) :|: 0 = 0
f_576(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1589, 1, v1591, v1592, v1593, v1594, v1595, v1596, v1597, 3, 4) -> f_578(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1589, 1, v1591, v1592, v1593, v1594, v1595, v1596, v1597, 3, 4) :|: TRUE
f_578(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1589, 1, v1591, v1592, v1593, v1594, v1595, v1596, v1597, 3, 4) -> f_580(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 4) :|: 0 = 0
f_580(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 4) -> f_582(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: 0 < v1591 && 2 <= v1589 && 2 <= v1587
f_582(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_585(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: 0 = 0
f_585(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_588(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: 0 = 0
f_588(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_591(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: TRUE
f_591(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_595(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: 0 = 0
f_595(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_598(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: 0 = 0
f_598(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_601(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: TRUE
f_601(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_604(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: 0 = 0
f_604(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_606(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: 0 = 0
f_606(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_608(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: TRUE
f_608(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1589, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_610(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: 0 = 0
f_610(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_612(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: 1 + v1822 = v1591 && 0 <= v1822
f_612(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_614(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: TRUE
f_614(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_616(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: TRUE
f_616(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_618(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: TRUE
f_618(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1592, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_620(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) :|: 0 = 0
f_620(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1593, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_622(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1593, v1861, v1594, v1595, v1596, v1597, 3, 2, 4) :|: v1861 = 1 + v1593 && 2 <= v1861
f_622(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1593, v1861, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_625(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1593, v1861, v1594, v1595, v1596, v1597, 3, 2, 4) :|: TRUE
f_625(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1593, v1861, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_627(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1593, v1861, v1594, v1595, v1596, v1597, 3, 2, 4) :|: TRUE
f_627(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1593, v1861, v1594, v1595, v1596, v1597, 3, 2, 4) -> f_572(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1591, 1, v1822, v1593, v1861, v1594, v1595, v1596, v1597, 3, 4) :|: TRUE
f_572(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1589, 1, v1591, v1592, v1593, v1594, v1595, v1596, v1597, 3, 4) -> f_574(v1582, v1583, v1584, v1585, v1586, v1587, 0, v1589, 1, v1591, v1592, v1593, v1594, v1595, v1596, v1597, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_574(v1582:0, v1583:0, v1584:0, v1585:0, v1586:0, v1587:0, 0, v1589:0, 1, 1 + v1822:0, v1592:0, v1593:0, v1594:0, v1595:0, v1596:0, v1597:0, 3, 4) -> f_574(v1582:0, v1583:0, v1584:0, v1585:0, v1586:0, v1587:0, 0, 1 + v1822:0, 1, v1822:0, v1593:0, 1 + v1593:0, v1594:0, v1595:0, v1596:0, v1597:0, 3, 4) :|: v1589:0 > 1 && v1822:0 > -1 && v1587:0 > 1 && v1593:0 > 0
Filtered unneeded arguments:
   f_574(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_574(x6, x8, x10, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_574(v1587:0, v1589:0, sum~cons_1~v1822:0, v1593:0) -> f_574(v1587:0, 1 + v1822:0, v1822:0, 1 + v1593:0) :|: v1822:0 > -1 && v1589:0 > 1 && v1593:0 > 0 && v1587:0 > 1 && sum~cons_1~v1822:0 = 1 + v1822:0

----------------------------------------

(16)
Obligation:
Rules:
f_574(v1587:0, v1589:0, sum~cons_1~v1822:0, v1593:0) -> f_574(v1587:0, 1 + v1822:0, v1822:0, 1 + v1593:0) :|: v1822:0 > -1 && v1589:0 > 1 && v1593:0 > 0 && v1587:0 > 1 && sum~cons_1~v1822:0 = 1 + v1822:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_574(v1587:0:0, v1589:0:0, sum~cons_1~v1822:0:0, v1593:0:0) -> f_574(v1587:0:0, 1 + v1822:0:0, v1822:0:0, 1 + v1593:0:0) :|: v1593:0:0 > 0 && v1587:0:0 > 1 && v1589:0:0 > 1 && v1822:0:0 > -1 && sum~cons_1~v1822:0:0 = 1 + v1822:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_574(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_574(v1587:0:0, v1589:0:0, sum~cons_1~v1822:0:0, v1593:0:0) -> f_574(v1587:0:0, 1 + v1822:0:0, v1822:0:0, 1 + v1593:0:0) :|: v1593:0:0 > 0 && v1587:0:0 > 1 && v1589:0:0 > 1 && v1822:0:0 > -1 && sum~cons_1~v1822:0:0 = 1 + v1822:0:0
The following rules are bounded:
f_574(v1587:0:0, v1589:0:0, sum~cons_1~v1822:0:0, v1593:0:0) -> f_574(v1587:0:0, 1 + v1822:0:0, v1822:0:0, 1 + v1593:0:0) :|: v1593:0:0 > 0 && v1587:0:0 > 1 && v1589:0:0 > 1 && v1822:0:0 > -1 && sum~cons_1~v1822:0:0 = 1 + v1822:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_453(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 4) -> f_455(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) :|: 0 < v895 && 2 <= v893 && 2 <= v891
f_455(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) -> f_459(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) :|: 0 = 0
f_459(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) -> f_463(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) :|: 0 = 0
f_463(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) -> f_467(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) :|: TRUE
f_467(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) -> f_471(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) :|: 0 = 0
f_471(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) -> f_475(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) :|: 0 = 0
f_475(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) -> f_479(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) :|: TRUE
f_479(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) -> f_483(v887, v888, v889, v890, v891, v892, v895, 1, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) :|: 0 = 0
f_483(v887, v888, v889, v890, v891, v892, v895, 1, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) -> f_487(v887, v888, v889, v890, v891, v892, v895, 1, v1037, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) :|: 1 + v1037 = v895 && 0 <= v1037
f_487(v887, v888, v889, v890, v891, v892, v895, 1, v1037, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) -> f_490(v887, v888, v889, v890, v891, v892, v895, 1, v1037, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) :|: TRUE
f_490(v887, v888, v889, v890, v891, v892, v895, 1, v1037, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) -> f_493(v887, v888, v889, v890, v891, v892, v895, 1, v1037, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) :|: TRUE
f_493(v887, v888, v889, v890, v891, v892, v895, 1, v1037, v896, v897, v898, v899, v900, v901, 0, 3, 2, 4) -> f_496(v887, v888, v889, v890, v891, v892, v895, 1, v1037, v897, v898, v899, v900, v901, 0, 3, 2, 4) :|: 0 = 0
f_496(v887, v888, v889, v890, v891, v892, v895, 1, v1037, v897, v898, v899, v900, v901, 0, 3, 2, 4) -> f_499(v887, v888, v889, v890, v891, v892, v895, 1, v1037, v897, v1048, v898, v899, v900, v901, 0, 3, 2, 4) :|: v1048 = 1 + v897 && 2 <= v1048
f_499(v887, v888, v889, v890, v891, v892, v895, 1, v1037, v897, v1048, v898, v899, v900, v901, 0, 3, 2, 4) -> f_502(v887, v888, v889, v890, v891, v892, v895, 1, v1037, v897, v1048, v898, v899, v900, v901, 0, 3, 2, 4) :|: TRUE
f_502(v887, v888, v889, v890, v891, v892, v895, 1, v1037, v897, v1048, v898, v899, v900, v901, 0, 3, 2, 4) -> f_505(v887, v888, v889, v890, v891, v892, v895, 1, v1037, v897, v1048, v898, v899, v900, v901, 0, 3, 2, 4) :|: TRUE
f_505(v887, v888, v889, v890, v891, v892, v895, 1, v1037, v897, v1048, v898, v899, v900, v901, 0, 3, 2, 4) -> f_451(v887, v888, v889, v890, v891, v892, v895, 1, v1037, v897, v1048, v898, v899, v900, v901, 0, 3, 4) :|: TRUE
f_451(v887, v888, v889, v890, v891, v892, v893, 1, v895, v896, v897, v898, v899, v900, v901, 0, 3, 4) -> f_453(v887, v888, v889, v890, v891, v892, v895, 1, v893, v896, v897, v898, v899, v900, v901, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_453(v887:0, v888:0, v889:0, v890:0, v891:0, v892:0, 1 + v1037:0, 1, v893:0, v896:0, v897:0, v898:0, v899:0, v900:0, v901:0, 0, 3, 4) -> f_453(v887:0, v888:0, v889:0, v890:0, v891:0, v892:0, v1037:0, 1, 1 + v1037:0, v897:0, 1 + v897:0, v898:0, v899:0, v900:0, v901:0, 0, 3, 4) :|: v893:0 > 1 && v1037:0 > -1 && v891:0 > 1 && v897:0 > 0
Filtered unneeded arguments:
   f_453(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_453(x5, x7, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_453(v891:0, sum~cons_1~v1037:0, v893:0, v897:0) -> f_453(v891:0, v1037:0, 1 + v1037:0, 1 + v897:0) :|: v1037:0 > -1 && v893:0 > 1 && v897:0 > 0 && v891:0 > 1 && sum~cons_1~v1037:0 = 1 + v1037:0

----------------------------------------

(23)
Obligation:
Rules:
f_453(v891:0, sum~cons_1~v1037:0, v893:0, v897:0) -> f_453(v891:0, v1037:0, 1 + v1037:0, 1 + v897:0) :|: v1037:0 > -1 && v893:0 > 1 && v897:0 > 0 && v891:0 > 1 && sum~cons_1~v1037:0 = 1 + v1037:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_453(v891:0:0, sum~cons_1~v1037:0:0, v893:0:0, v897:0:0) -> f_453(v891:0:0, v1037:0:0, 1 + v1037:0:0, 1 + v897:0:0) :|: v897:0:0 > 0 && v891:0:0 > 1 && v893:0:0 > 1 && v1037:0:0 > -1 && sum~cons_1~v1037:0:0 = 1 + v1037:0:0

----------------------------------------

(26) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_453 ] = f_453_2

The following rules are decreasing:
f_453(v891:0:0, sum~cons_1~v1037:0:0, v893:0:0, v897:0:0) -> f_453(v891:0:0, v1037:0:0, 1 + v1037:0:0, 1 + v897:0:0) :|: v897:0:0 > 0 && v891:0:0 > 1 && v893:0:0 > 1 && v1037:0:0 > -1 && sum~cons_1~v1037:0:0 = 1 + v1037:0:0

The following rules are bounded:
f_453(v891:0:0, sum~cons_1~v1037:0:0, v893:0:0, v897:0:0) -> f_453(v891:0:0, v1037:0:0, 1 + v1037:0:0, 1 + v897:0:0) :|: v897:0:0 > 0 && v891:0:0 > 1 && v893:0:0 > 1 && v1037:0:0 > -1 && sum~cons_1~v1037:0:0 = 1 + v1037:0:0


----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
