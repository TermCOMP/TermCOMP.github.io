YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Xi33p.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 54 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 78 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 16 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Xi33p.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Xi33p.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%3 = call noalias *i8 @malloc(i64 4)
		%4 = bitcast *i8 %3 to *i32
		store %4, %2
		br %5
	5:
		%6 = load %2
		%7 = load %6
		%8 = icmp sge %7 0
		br %8, %9, %13
	9:
		%10 = load %2
		%11 = load %10
		%12 = add i32 %11, -1
		store %12, %10
		br %5
	13:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 11 rulesP rules:
f_80(v1, v3, v5, v8, 1, v10, v2, v4, v6, 0, 3, 7, 4, 8) -> f_81(v1, v3, v5, v10, 1, v8, v2, v4, v6, 0, 3, 7, 4, 8) :|: 0 = 0
f_81(v1, v3, v5, v10, 1, v8, v2, v4, v6, 0, 3, 7, 4, 8) -> f_82(v1, v3, v5, v10, 1, v8, v2, v4, v6, 0, 3, 7, 4, 8) :|: 0 <= v10 && 1 <= v8
f_82(v1, v3, v5, v10, 1, v8, v2, v4, v6, 0, 3, 7, 4, 8) -> f_84(v1, v3, v5, v10, 1, v8, v2, v4, v6, 0, 3, 7, 4, 8) :|: 0 = 0
f_84(v1, v3, v5, v10, 1, v8, v2, v4, v6, 0, 3, 7, 4, 8) -> f_86(v1, v3, v5, v10, 1, v8, v2, v4, v6, 0, 3, 7, 4, 8) :|: TRUE
f_86(v1, v3, v5, v10, 1, v8, v2, v4, v6, 0, 3, 7, 4, 8) -> f_88(v1, v3, v5, v10, 1, v8, v2, v4, v6, 0, 3, 7, 4, 8) :|: 0 = 0
f_88(v1, v3, v5, v10, 1, v8, v2, v4, v6, 0, 3, 7, 4, 8) -> f_89(v1, v3, v5, v10, 1, v2, v4, v6, 0, 3, 7, 4, 8) :|: 0 = 0
f_89(v1, v3, v5, v10, 1, v2, v4, v6, 0, 3, 7, 4, 8) -> f_90(v1, v3, v5, v10, 1, v12, v2, v4, v6, 0, 3, 7, 4, 8) :|: 1 + v12 = v10 && 0 <= 1 + v12
f_90(v1, v3, v5, v10, 1, v12, v2, v4, v6, 0, 3, 7, 4, 8) -> f_91(v1, v3, v5, v10, 1, v12, v2, v4, v6, 0, 3, 7, 4, 8) :|: TRUE
f_91(v1, v3, v5, v10, 1, v12, v2, v4, v6, 0, 3, 7, 4, 8) -> f_92(v1, v3, v5, v10, 1, v12, v2, v4, v6, 0, 3, 7, 4, 8) :|: TRUE
f_92(v1, v3, v5, v10, 1, v12, v2, v4, v6, 0, 3, 7, 4, 8) -> f_79(v1, v3, v5, v10, 1, v12, v2, v4, v6, 0, 3, 7, 4, 8) :|: TRUE
f_79(v1, v3, v5, v8, 1, v10, v2, v4, v6, 0, 3, 7, 4, 8) -> f_80(v1, v3, v5, v8, 1, v10, v2, v4, v6, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_80(v1:0, v3:0, v5:0, v8:0, 1, 1 + v12:0, v2:0, v4:0, v6:0, 0, 3, 7, 4, 8) -> f_80(v1:0, v3:0, v5:0, 1 + v12:0, 1, v12:0, v2:0, v4:0, v6:0, 0, 3, 7, 4, 8) :|: v8:0 > 0 && v12:0 > -2
Filtered unneeded arguments:
   f_80(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_80(x4, x6)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_80(v8:0, sum~cons_1~v12:0) -> f_80(1 + v12:0, v12:0) :|: v8:0 > 0 && v12:0 > -2 && sum~cons_1~v12:0 = 1 + v12:0

----------------------------------------

(8)
Obligation:
Rules:
f_80(v8:0, sum~cons_1~v12:0) -> f_80(1 + v12:0, v12:0) :|: v8:0 > 0 && v12:0 > -2 && sum~cons_1~v12:0 = 1 + v12:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_80(v8:0:0, sum~cons_1~v12:0:0) -> f_80(1 + v12:0:0, v12:0:0) :|: v8:0:0 > 0 && v12:0:0 > -2 && sum~cons_1~v12:0:0 = 1 + v12:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_80(x, x1)] = x1

The following rules are decreasing:
f_80(v8:0:0, sum~cons_1~v12:0:0) -> f_80(1 + v12:0:0, v12:0:0) :|: v8:0:0 > 0 && v12:0:0 > -2 && sum~cons_1~v12:0:0 = 1 + v12:0:0
The following rules are bounded:
f_80(v8:0:0, sum~cons_1~v12:0:0) -> f_80(1 + v12:0:0, v12:0:0) :|: v8:0:0 > 0 && v12:0:0 > -2 && sum~cons_1~v12:0:0 = 1 + v12:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
