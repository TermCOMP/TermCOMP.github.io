YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/gXQpv.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 199 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 45 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/gXQpv.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/gXQpv.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		store 23, %3
		br %5
	5:
		%6 = load %2
		%7 = load %3
		%8 = icmp sge %6 %7
		br %8, %9, %12
	9:
		%10 = load %2
		%11 = sub i32 %10, 1
		store %11, %2
		br %5
	12:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_110(v27, v28, v29, v30, v34, 23, 1, v31, v35, v36, v37, 0, 3, 22, 4) -> f_111(v27, v28, v29, v30, v34, 23, 1, v31, v35, v36, v37, 0, 3, 22, 4) :|: 0 = 0
f_111(v27, v28, v29, v30, v34, 23, 1, v31, v35, v36, v37, 0, 3, 22, 4) -> f_112(v27, v28, v29, v30, v34, 23, 1, v31, v35, v36, v37, 0, 3, 24, 4) :|: 23 <= v34 && 24 <= v31 && 24 <= v30
f_112(v27, v28, v29, v30, v34, 23, 1, v31, v35, v36, v37, 0, 3, 24, 4) -> f_114(v27, v28, v29, v30, v34, 23, 1, v31, v35, v36, v37, 0, 3, 24, 4) :|: 0 = 0
f_114(v27, v28, v29, v30, v34, 23, 1, v31, v35, v36, v37, 0, 3, 24, 4) -> f_116(v27, v28, v29, v30, v34, 23, 1, v31, v35, v36, v37, 0, 3, 24, 4) :|: TRUE
f_116(v27, v28, v29, v30, v34, 23, 1, v31, v35, v36, v37, 0, 3, 24, 4) -> f_118(v27, v28, v29, v30, v34, 23, 1, v35, v36, v37, 0, 3, 24, 4) :|: 0 = 0
f_118(v27, v28, v29, v30, v34, 23, 1, v35, v36, v37, 0, 3, 24, 4) -> f_119(v27, v28, v29, v30, v34, 23, 1, v39, v35, v36, v37, 0, 3, 24, 4, 22) :|: 1 + v39 = v34 && 22 <= v39
f_119(v27, v28, v29, v30, v34, 23, 1, v39, v35, v36, v37, 0, 3, 24, 4, 22) -> f_120(v27, v28, v29, v30, v34, 23, 1, v39, v35, v36, v37, 0, 3, 24, 4, 22) :|: TRUE
f_120(v27, v28, v29, v30, v34, 23, 1, v39, v35, v36, v37, 0, 3, 24, 4, 22) -> f_121(v27, v28, v29, v30, v34, 23, 1, v39, v35, v36, v37, 0, 3, 24, 4, 22) :|: TRUE
f_121(v27, v28, v29, v30, v34, 23, 1, v39, v35, v36, v37, 0, 3, 24, 4, 22) -> f_109(v27, v28, v29, v30, v34, 23, 1, v39, v35, v36, v37, 0, 3, 22, 4) :|: TRUE
f_109(v27, v28, v29, v30, v31, 23, 1, v34, v35, v36, v37, 0, 3, 22, 4) -> f_110(v27, v28, v29, v30, v34, 23, 1, v31, v35, v36, v37, 0, 3, 22, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_110(v27:0, v28:0, v29:0, v30:0, 1 + v39:0, 23, 1, v31:0, v35:0, v36:0, v37:0, 0, 3, 22, 4) -> f_110(v27:0, v28:0, v29:0, v30:0, v39:0, 23, 1, 1 + v39:0, v35:0, v36:0, v37:0, 0, 3, 22, 4) :|: v31:0 > 23 && v39:0 > 21 && v30:0 > 23
Filtered unneeded arguments:
   f_110(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_110(x4, x5, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_110(v30:0, sum~cons_1~v39:0, v31:0) -> f_110(v30:0, v39:0, 1 + v39:0) :|: v39:0 > 21 && v30:0 > 23 && v31:0 > 23 && sum~cons_1~v39:0 = 1 + v39:0

----------------------------------------

(8)
Obligation:
Rules:
f_110(v30:0, sum~cons_1~v39:0, v31:0) -> f_110(v30:0, v39:0, 1 + v39:0) :|: v39:0 > 21 && v30:0 > 23 && v31:0 > 23 && sum~cons_1~v39:0 = 1 + v39:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_110(v30:0:0, sum~cons_1~v39:0:0, v31:0:0) -> f_110(v30:0:0, v39:0:0, 1 + v39:0:0) :|: v39:0:0 > 21 && v30:0:0 > 23 && v31:0:0 > 23 && sum~cons_1~v39:0:0 = 1 + v39:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_110(x, x1, x2)] = x1

The following rules are decreasing:
f_110(v30:0:0, sum~cons_1~v39:0:0, v31:0:0) -> f_110(v30:0:0, v39:0:0, 1 + v39:0:0) :|: v39:0:0 > 21 && v30:0:0 > 23 && v31:0:0 > 23 && sum~cons_1~v39:0:0 = 1 + v39:0:0
The following rules are bounded:
f_110(v30:0:0, sum~cons_1~v39:0:0, v31:0:0) -> f_110(v30:0:0, v39:0:0, 1 + v39:0:0) :|: v39:0:0 > 21 && v30:0:0 > 23 && v31:0:0 > 23 && sum~cons_1~v39:0:0 = 1 + v39:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
