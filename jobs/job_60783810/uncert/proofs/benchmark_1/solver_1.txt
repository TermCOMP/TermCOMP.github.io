YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/pIGNI.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 39 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2817 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 57 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (17) YES
    (18) LLVM Symbolic Execution SCC
        (19) SCC2IRS [SOUND, 51 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/pIGNI.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/pIGNI.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %7
		%14 = load %3
		%15 = load %5
		store %14, %15
		%16 = load %4
		%17 = load %6
		store %16, %17
		%18 = load %7
		store 0, %18
		br %19
	19:
		%20 = load %5
		%21 = load %20
		%22 = icmp sgt %21 0
		br %22, %23, %45
	23:
		%24 = load %6
		store 0, %24
		br %25
	25:
		%26 = load %6
		%27 = load %26
		%28 = load %5
		%29 = load %28
		%30 = icmp slt %27 %29
		br %30, %31, %40
	31:
		%32 = load %6
		%33 = load %32
		%34 = add i32 %33, 1
		%35 = load %6
		store %34, %35
		%36 = load %7
		%37 = load %36
		%38 = add i32 %37, 1
		%39 = load %7
		store %38, %39
		br %25
	40:
		%41 = load %5
		%42 = load %41
		%43 = sub i32 %42, 1
		%44 = load %5
		store %43, %44
		br %19
	45:
		%46 = load %7
		%47 = load %46
		ret %47

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 70
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 44 rulesP rules:
f_682(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v799, v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_683(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_683(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_684(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v801, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: v815 = 1 + v798 && 1 <= v815
f_684(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v801, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_685(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v801, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_685(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v801, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_686(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v801, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: TRUE
f_686(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v801, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_687(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v801, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_687(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v801, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_688(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_688(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_689(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: v817 = 1 + v802 && 3 <= v817
f_689(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_690(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_690(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_691(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: TRUE
f_691(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_692(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: TRUE
f_692(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_693(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_693(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v815, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_694(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v815, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_694(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v815, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_695(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v815, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_695(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v815, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_696(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v815, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_696(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v815, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_697(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v815, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: v815 < v796 && 2 <= v796 && 3 <= v803 && 3 <= v786
f_696(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v815, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_698(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: v796 <= v815 && v796 = v815
f_697(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v815, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_699(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v815, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_699(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v815, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_701(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v815, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: TRUE
f_701(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v815, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_681(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v815, v798, v815, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: TRUE
f_681(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v799, v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_682(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, 1, v798, v799, v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_698(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, 3, 7, 2, 4, 8) -> f_700(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: 0 = 0
f_700(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_702(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: TRUE
f_702(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_703(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: 0 = 0
f_703(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_704(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: 0 = 0
f_704(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_705(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: 1 + v798 = v815
f_705(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_706(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: 0 = 0
f_706(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_707(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: TRUE
f_707(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_708(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: TRUE
f_708(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_709(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: 0 = 0
f_709(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v815, 1, 0, v798, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_710(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v798, 1, v815, 0, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: 0 = 0
f_710(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v798, 1, v815, 0, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_711(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v798, 1, v815, 0, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: 0 < v798 && 2 <= v815 && 3 <= v786
f_711(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v798, 1, v815, 0, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_713(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v798, 1, v815, 0, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: 0 = 0
f_713(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v798, 1, v815, 0, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_715(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v798, 1, v815, 0, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: TRUE
f_715(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v798, 1, v815, 0, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_717(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v798, 1, v815, 0, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: 0 = 0
f_717(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v798, 1, v815, 0, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_719(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v798, 1, v815, 0, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: TRUE
f_719(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v798, 1, v815, 0, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_721(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v798, 1, v815, 0, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: TRUE
f_721(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v798, 1, v815, 0, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) -> f_722(v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v798, 1, v815, 0, v802, v817, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, 3, 7, 2, 4, 8) :|: TRUE
f_722(v944, v945, v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, 0, v958, v959, v960, v961, v962, v963, v964, v965, v966, v967, v968, v969, 3, 7, 2, 4, 8) -> f_724(v944, v945, v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, 0, v958, v959, v960, v961, v962, v963, v964, v965, v966, v967, v968, v969, 3, 7, 2, 4, 8) :|: 0 = 0
f_724(v944, v945, v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, 0, v958, v959, v960, v961, v962, v963, v964, v965, v966, v967, v968, v969, 3, 7, 2, 4, 8) -> f_725(v944, v945, v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, 0, v956, v958, v959, v960, v961, v962, v963, v964, v965, v966, v967, v968, v969, 3, 7, 2, 4, 8) :|: 0 = 0
f_725(v944, v945, v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, 0, v956, v958, v959, v960, v961, v962, v963, v964, v965, v966, v967, v968, v969, 3, 7, 2, 4, 8) -> f_726(v944, v945, v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, 0, v956, v958, v959, v960, v961, v962, v963, v964, v965, v966, v967, v968, v969, 3, 7, 2, 4, 8) :|: 0 = 0
f_726(v944, v945, v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, 0, v956, v958, v959, v960, v961, v962, v963, v964, v965, v966, v967, v968, v969, 3, 7, 2, 4, 8) -> f_727(v944, v945, v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, 0, v956, v958, v959, v960, v961, v962, v963, v964, v965, v966, v967, v968, v969, 3, 7, 2, 4, 8) :|: 0 = 0
f_727(v944, v945, v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, 0, v956, v958, v959, v960, v961, v962, v963, v964, v965, v966, v967, v968, v969, 3, 7, 2, 4, 8) -> f_728(v944, v945, v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, 0, v956, v958, v959, v960, v961, v962, v963, v964, v965, v966, v967, v968, v969, 3, 7, 2, 4, 8) :|: 0 = 0
f_728(v944, v945, v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, 0, v956, v958, v959, v960, v961, v962, v963, v964, v965, v966, v967, v968, v969, 3, 7, 2, 4, 8) -> f_729(v944, v945, v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, 0, v956, v958, v959, v960, v961, v962, v963, v964, v965, v966, v967, v968, v969, 3, 7, 2, 4, 8) :|: TRUE
f_729(v944, v945, v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, 0, v956, v958, v959, v960, v961, v962, v963, v964, v965, v966, v967, v968, v969, 3, 7, 2, 4, 8) -> f_681(v944, v945, v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, 0, v954, v956, v958, v959, v956, v960, v961, v962, v963, v964, v965, v966, v967, v968, v969, 0, 3, 7, 2, 4, 8) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_682(v786:0, v787:0, v788:0, v789:0, v790:0, v791:0, v792:0, v793:0, v794:0, v795:0, 1 + v798:0, 1, v798:0, v799:0, v800:0, v801:0, v802:0, v803:0, v804:0, v805:0, v806:0, v807:0, v808:0, v809:0, v810:0, v811:0, v812:0, v813:0, 0, 3, 7, 2, 4, 8) -> f_682(v786:0, v787:0, v788:0, v789:0, v790:0, v791:0, v792:0, v793:0, v794:0, v795:0, v798:0, 1, 0, v798:0, 1 + v798:0, v802:0, 1 + v802:0, 1 + v798:0, v804:0, v805:0, v806:0, v807:0, v808:0, v809:0, v810:0, v811:0, v812:0, v813:0, 0, 3, 7, 2, 4, 8) :|: v798:0 > 0 && v802:0 > 1 && v786:0 > 2
f_682(v786:0, v787:0, v788:0, v789:0, v790:0, v791:0, v792:0, v793:0, v794:0, v795:0, v796:0, 1, v798:0, v799:0, v800:0, v801:0, v802:0, v803:0, v804:0, v805:0, v806:0, v807:0, v808:0, v809:0, v810:0, v811:0, v812:0, v813:0, 0, 3, 7, 2, 4, 8) -> f_682(v786:0, v787:0, v788:0, v789:0, v790:0, v791:0, v792:0, v793:0, v794:0, v795:0, v796:0, 1, 1 + v798:0, v798:0, 1 + v798:0, v802:0, 1 + v802:0, v803:0, v804:0, v805:0, v806:0, v807:0, v808:0, v809:0, v810:0, v811:0, v812:0, v813:0, 0, 3, 7, 2, 4, 8) :|: v798:0 > -1 && v802:0 > 1 && v796:0 > 1 && v796:0 > 1 + v798:0 && v786:0 > 2 && v803:0 > 2
Filtered unneeded arguments:
   f_682(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34) -> f_682(x1, x11, x13, x17, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_682(v786:0, sum~cons_1~v798:0, v798:0, v802:0, v803:0) -> f_682(v786:0, v798:0, 0, 1 + v802:0, 1 + v798:0) :|: v802:0 > 1 && v786:0 > 2 && v798:0 > 0 && sum~cons_1~v798:0 = 1 + v798:0
f_682(v786:0, v796:0, v798:0, v802:0, v803:0) -> f_682(v786:0, v796:0, 1 + v798:0, 1 + v802:0, v803:0) :|: v802:0 > 1 && v798:0 > -1 && v796:0 > 1 && v796:0 > 1 + v798:0 && v803:0 > 2 && v786:0 > 2

----------------------------------------

(9)
Obligation:
Rules:
f_682(v786:0, sum~cons_1~v798:0, v798:0, v802:0, v803:0) -> f_682(v786:0, v798:0, 0, 1 + v802:0, 1 + v798:0) :|: v802:0 > 1 && v786:0 > 2 && v798:0 > 0 && sum~cons_1~v798:0 = 1 + v798:0
f_682(x, x1, x2, x3, x4) -> f_682(x, x1, 1 + x2, 1 + x3, x4) :|: x3 > 1 && x2 > -1 && x1 > 1 && x1 > 1 + x2 && x4 > 2 && x > 2

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_682(v786:0:0, sum~cons_1~v798:0:0, v798:0:0, v802:0:0, v803:0:0) -> f_682(v786:0:0, v798:0:0, 0, 1 + v802:0:0, 1 + v798:0:0) :|: v802:0:0 > 1 && v786:0:0 > 2 && v798:0:0 > 0 && sum~cons_1~v798:0:0 = 1 + v798:0:0
f_682(x:0, x1:0, x2:0, x3:0, x4:0) -> f_682(x:0, x1:0, 1 + x2:0, 1 + x3:0, x4:0) :|: x4:0 > 2 && x:0 > 2 && x1:0 > 1 + x2:0 && x1:0 > 1 && x2:0 > -1 && x3:0 > 1

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_682(x, x1, x2, x3, x4)] = x1

The following rules are decreasing:
f_682(v786:0:0, sum~cons_1~v798:0:0, v798:0:0, v802:0:0, v803:0:0) -> f_682(v786:0:0, v798:0:0, 0, 1 + v802:0:0, 1 + v798:0:0) :|: v802:0:0 > 1 && v786:0:0 > 2 && v798:0:0 > 0 && sum~cons_1~v798:0:0 = 1 + v798:0:0
The following rules are bounded:
f_682(v786:0:0, sum~cons_1~v798:0:0, v798:0:0, v802:0:0, v803:0:0) -> f_682(v786:0:0, v798:0:0, 0, 1 + v802:0:0, 1 + v798:0:0) :|: v802:0:0 > 1 && v786:0:0 > 2 && v798:0:0 > 0 && sum~cons_1~v798:0:0 = 1 + v798:0:0
f_682(x:0, x1:0, x2:0, x3:0, x4:0) -> f_682(x:0, x1:0, 1 + x2:0, 1 + x3:0, x4:0) :|: x4:0 > 2 && x:0 > 2 && x1:0 > 1 + x2:0 && x1:0 > 1 && x2:0 > -1 && x3:0 > 1

----------------------------------------

(13)
Obligation:
Rules:
f_682(x:0, x1:0, x2:0, x3:0, x4:0) -> f_682(x:0, x1:0, 1 + x2:0, 1 + x3:0, x4:0) :|: x4:0 > 2 && x:0 > 2 && x1:0 > 1 + x2:0 && x1:0 > 1 && x2:0 > -1 && x3:0 > 1

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_682(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_682(x:0:0, x1:0:0, 1 + x2:0:0, 1 + x3:0:0, x4:0:0) :|: x2:0:0 > -1 && x3:0:0 > 1 && x1:0:0 > 1 && x1:0:0 > 1 + x2:0:0 && x:0:0 > 2 && x4:0:0 > 2

----------------------------------------

(16) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_682(x, x1, x2, x3, x4)] = x1 - x2

The following rules are decreasing:
f_682(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_682(x:0:0, x1:0:0, 1 + x2:0:0, 1 + x3:0:0, x4:0:0) :|: x2:0:0 > -1 && x3:0:0 > 1 && x1:0:0 > 1 && x1:0:0 > 1 + x2:0:0 && x:0:0 > 2 && x4:0:0 > 2
The following rules are bounded:
f_682(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_682(x:0:0, x1:0:0, 1 + x2:0:0, 1 + x3:0:0, x4:0:0) :|: x2:0:0 > -1 && x3:0:0 > 1 && x1:0:0 > 1 && x1:0:0 > 1 + x2:0:0 && x:0:0 > 2 && x4:0:0 > 2

----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
SCC
----------------------------------------

(19) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_481(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 4, 8) -> f_482(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 4, 8) :|: 0 = 0
f_482(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 4, 8) -> f_483(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 4, 8) :|: 0 = 0
f_483(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 4, 8) -> f_484(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 4, 8) :|: 0 = 0
f_484(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 4, 8) -> f_485(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) :|: v180 < v168 && 2 <= v168
f_485(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) -> f_487(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_487(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) -> f_489(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) :|: TRUE
f_489(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) -> f_491(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_491(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) -> f_493(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_493(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) -> f_495(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) :|: v192 = 1 + v180 && 2 <= v192
f_495(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) -> f_497(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_497(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) -> f_499(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) :|: TRUE
f_499(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) -> f_501(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_501(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v179, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) -> f_503(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_503(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) -> f_505(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) :|: v192 = 1 + v180
f_505(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) -> f_507(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_507(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) -> f_510(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) :|: TRUE
f_510(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) -> f_513(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) :|: TRUE
f_513(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 2, 4, 8) -> f_480(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v180, v192, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 4, 8) :|: TRUE
f_480(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 4, 8) -> f_481(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 1, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_481(v168:0, v169:0, v170:0, v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, 1, v179:0, v180:0, v181:0, v182:0, v183:0, v184:0, v185:0, v186:0, v187:0, v188:0, v189:0, v190:0, 0, 3, 7, 4, 8) -> f_481(v168:0, v169:0, v170:0, v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, 1, v180:0, 1 + v180:0, v181:0, v182:0, v183:0, v184:0, v185:0, v186:0, v187:0, v188:0, v189:0, v190:0, 0, 3, 7, 4, 8) :|: v168:0 > 1 && v180:0 > 0 && v180:0 < v168:0
Filtered unneeded arguments:
   f_481(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_481(x1, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_481(v168:0, v180:0) -> f_481(v168:0, 1 + v180:0) :|: v180:0 > 0 && v180:0 < v168:0 && v168:0 > 1

----------------------------------------

(20)
Obligation:
Rules:
f_481(v168:0, v180:0) -> f_481(v168:0, 1 + v180:0) :|: v180:0 > 0 && v180:0 < v168:0 && v168:0 > 1

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_481(v168:0:0, v180:0:0) -> f_481(v168:0:0, 1 + v180:0:0) :|: v180:0:0 > 0 && v180:0:0 < v168:0:0 && v168:0:0 > 1

----------------------------------------

(23) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_481(x, x1)] = x - x1

The following rules are decreasing:
f_481(v168:0:0, v180:0:0) -> f_481(v168:0:0, 1 + v180:0:0) :|: v180:0:0 > 0 && v180:0:0 < v168:0:0 && v168:0:0 > 1
The following rules are bounded:
f_481(v168:0:0, v180:0:0) -> f_481(v168:0:0, 1 + v180:0:0) :|: v180:0:0 > 0 && v180:0:0 < v168:0:0 && v168:0:0 > 1

----------------------------------------

(24)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
