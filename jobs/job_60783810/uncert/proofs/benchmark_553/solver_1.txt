YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/PIqeQ.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 389 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 24 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 29 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/PIqeQ.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/PIqeQ.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sle %7 10
		br %8, %9, %19
	9:
		store 10, %3
		br %10
	10:
		%11 = load %3
		%12 = icmp sgt %11 1
		br %12, %13, %16
	13:
		%14 = load %3
		%15 = sub i32 %14, 1
		store %15, %3
		br %10
	16:
		%17 = load %2
		%18 = add i32 %17, 1
		store %18, %2
		br %6
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 27 rulesP rules:
f_220(v300, v301, v302, v303, v304, v305, 1, v307, v309, v310, v311, v312, v313, 0, 3, 9, 10, 2, 4) -> f_221(v300, v301, v302, v303, v304, v305, 1, v307, v315, v310, v311, v312, v313, 0, 3, 9, 10, 2, 4) :|: 1 + v315 = v307 && 1 <= v315 && v315 <= 9
f_221(v300, v301, v302, v303, v304, v305, 1, v307, v315, v310, v311, v312, v313, 0, 3, 9, 10, 2, 4) -> f_222(v300, v301, v302, v303, v304, v305, 1, v307, v315, v310, v311, v312, v313, 0, 3, 9, 10, 2, 4) :|: TRUE
f_222(v300, v301, v302, v303, v304, v305, 1, v307, v315, v310, v311, v312, v313, 0, 3, 9, 10, 2, 4) -> f_223(v300, v301, v302, v303, v304, v305, 1, v307, v315, v310, v311, v312, v313, 0, 3, 9, 10, 2, 4) :|: TRUE
f_223(v300, v301, v302, v303, v304, v305, 1, v307, v315, v310, v311, v312, v313, 0, 3, 9, 10, 2, 4) -> f_224(v300, v301, v302, v303, v304, v305, 1, v315, v307, v310, v311, v312, v313, 0, 3, 9, 10, 2, 4) :|: 0 = 0
f_224(v300, v301, v302, v303, v304, v305, 1, v315, v307, v310, v311, v312, v313, 0, 3, 9, 10, 2, 4) -> f_225(v300, v301, v302, v303, v304, v305, 1, v315, v307, v310, v311, v312, v313, 0, 3, 9, 10, 4, 2) :|: 1 < v315 && 3 <= v307
f_224(v300, v301, v302, v303, v304, v305, 1, v315, v307, v310, v311, v312, v313, 0, 3, 9, 10, 2, 4) -> f_226(v300, v301, v302, v303, v304, v305, 1, 2, v310, v311, v312, v313, 0, 3, 9, 10, 4) :|: v315 <= 1 && v307 = 2 && v315 = 1 && 0 = 0
f_225(v300, v301, v302, v303, v304, v305, 1, v315, v307, v310, v311, v312, v313, 0, 3, 9, 10, 4, 2) -> f_227(v300, v301, v302, v303, v304, v305, 1, v315, v307, v310, v311, v312, v313, 0, 3, 9, 10, 4, 2) :|: 0 = 0
f_227(v300, v301, v302, v303, v304, v305, 1, v315, v307, v310, v311, v312, v313, 0, 3, 9, 10, 4, 2) -> f_229(v300, v301, v302, v303, v304, v305, 1, v315, v307, v310, v311, v312, v313, 0, 3, 9, 10, 4, 2) :|: TRUE
f_229(v300, v301, v302, v303, v304, v305, 1, v315, v307, v310, v311, v312, v313, 0, 3, 9, 10, 4, 2) -> f_219(v300, v301, v302, v303, v304, v305, 1, v315, v307, v315, v310, v311, v312, v313, 0, 3, 9, 10, 2, 4) :|: TRUE
f_219(v300, v301, v302, v303, v304, v305, 1, v307, v308, v309, v310, v311, v312, v313, 0, 3, 9, 10, 2, 4) -> f_220(v300, v301, v302, v303, v304, v305, 1, v307, v309, v310, v311, v312, v313, 0, 3, 9, 10, 2, 4) :|: 0 = 0
f_226(v300, v301, v302, v303, v304, v305, 1, 2, v310, v311, v312, v313, 0, 3, 9, 10, 4) -> f_228(v300, v301, v302, v303, v304, v305, 1, 0, 2, v310, v311, v312, v313, 3, 9, 10, 4) :|: 0 = 0
f_228(v300, v301, v302, v303, v304, v305, 1, 0, 2, v310, v311, v312, v313, 3, 9, 10, 4) -> f_230(v300, v301, v302, v303, v304, v305, 1, 0, 2, v310, v311, v312, v313, 3, 9, 10, 4) :|: TRUE
f_230(v300, v301, v302, v303, v304, v305, 1, 0, 2, v310, v311, v312, v313, 3, 9, 10, 4) -> f_231(v300, v301, v302, v303, v304, v305, 1, 0, 2, v311, v312, v313, 3, 9, 10, 4) :|: 0 = 0
f_231(v300, v301, v302, v303, v304, v305, 1, 0, 2, v311, v312, v313, 3, 9, 10, 4) -> f_232(v300, v301, v302, v303, v304, v305, 1, 0, 2, v358, v311, v312, v313, 3, 9, 10, 4, 11) :|: v358 = 1 + v305 && v358 <= 11
f_232(v300, v301, v302, v303, v304, v305, 1, 0, 2, v358, v311, v312, v313, 3, 9, 10, 4, 11) -> f_233(v300, v301, v302, v303, v304, v305, 1, 0, 2, v358, v311, v312, v313, 3, 9, 10, 4, 11) :|: TRUE
f_233(v300, v301, v302, v303, v304, v305, 1, 0, 2, v358, v311, v312, v313, 3, 9, 10, 4, 11) -> f_234(v300, v301, v302, v303, v304, v305, 1, 0, 2, v358, v311, v312, v313, 3, 9, 10, 4, 11) :|: TRUE
f_234(v300, v301, v302, v303, v304, v305, 1, 0, 2, v358, v311, v312, v313, 3, 9, 10, 4, 11) -> f_235(v300, v301, v302, v303, v304, v358, 1, 0, 2, v305, v311, v312, v313, 3, 9, 10, 4, 11) :|: 0 = 0
f_235(v300, v301, v302, v303, v304, v358, 1, 0, 2, v305, v311, v312, v313, 3, 9, 10, 4, 11) -> f_236(v300, v301, v302, v303, v304, v358, 1, 0, 2, v305, v311, v312, v313, 3, 8, 9, 4, 10) :|: v358 <= 10 && v305 <= 9 && v303 <= 8
f_236(v300, v301, v302, v303, v304, v358, 1, 0, 2, v305, v311, v312, v313, 3, 8, 9, 4, 10) -> f_238(v300, v301, v302, v303, v304, v358, 1, 0, 2, v305, v311, v312, v313, 3, 8, 9, 4, 10) :|: 0 = 0
f_238(v300, v301, v302, v303, v304, v358, 1, 0, 2, v305, v311, v312, v313, 3, 8, 9, 4, 10) -> f_240(v300, v301, v302, v303, v304, v358, 1, 0, 2, v305, v311, v312, v313, 3, 8, 9, 4, 10) :|: TRUE
f_240(v300, v301, v302, v303, v304, v358, 1, 0, 2, v305, v311, v312, v313, 3, 8, 9, 4, 10) -> f_242(v300, v301, v302, v303, v304, v358, 1, 0, 2, v305, v311, v312, v313, 10, 3, 8, 9, 4) :|: TRUE
f_242(v300, v301, v302, v303, v304, v358, 1, 0, 2, v305, v311, v312, v313, 10, 3, 8, 9, 4) -> f_243(v300, v301, v302, v303, v304, v358, 1, 0, 2, v305, v311, v312, v313, 10, 3, 8, 9, 4) :|: TRUE
f_243(v300, v301, v302, v303, v304, v358, 1, 0, 2, v305, v311, v312, v313, 10, 3, 8, 9, 4) -> f_244(v300, v301, v302, v303, v304, v358, 1, 0, 2, v305, v311, v312, v313, 10, 3, 9, 4) :|: TRUE
f_244(v387, v388, v389, v390, v391, v392, 1, 0, 2, v396, v397, v398, v399, 10, 3, 9, 4) -> f_245(v387, v388, v389, v390, v391, v392, 1, 10, 0, 2, v396, v397, v398, v399, 3, 9, 4) :|: 0 = 0
f_245(v387, v388, v389, v390, v391, v392, 1, 10, 0, 2, v396, v397, v398, v399, 3, 9, 4) -> f_246(v387, v388, v389, v390, v391, v392, 1, 10, 2, v396, v397, v398, v399, 0, 3, 9, 4) :|: 0 = 0
f_246(v387, v388, v389, v390, v391, v392, 1, 10, 2, v396, v397, v398, v399, 0, 3, 9, 4) -> f_247(v387, v388, v389, v390, v391, v392, 1, 10, 2, v396, v397, v398, v399, 0, 3, 9, 4) :|: TRUE
f_247(v387, v388, v389, v390, v391, v392, 1, 10, 2, v396, v397, v398, v399, 0, 3, 9, 4) -> f_219(v387, v388, v389, v390, v391, v392, 1, 10, 2, 1, v396, v397, v398, v399, 0, 3, 9, 10, 2, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_220(v300:0, v301:0, v302:0, v303:0, v304:0, v305:0, 1, 1 + v315:0, v309:0, v310:0, v311:0, v312:0, v313:0, 0, 3, 9, 10, 2, 4) -> f_220(v300:0, v301:0, v302:0, v303:0, v304:0, v305:0, 1, v315:0, v315:0, v310:0, v311:0, v312:0, v313:0, 0, 3, 9, 10, 2, 4) :|: v315:0 > 1 && v315:0 < 10
f_220(v300:0, v301:0, v302:0, v303:0, v304:0, v305:0, 1, 2, v309:0, v310:0, v311:0, v312:0, v313:0, 0, 3, 9, 10, 2, 4) -> f_220(v300:0, v301:0, v302:0, v303:0, v304:0, 1 + v305:0, 1, 10, 1, v305:0, v311:0, v312:0, v313:0, 0, 3, 9, 10, 2, 4) :|: v305:0 < 11 && v305:0 < 10 && v303:0 < 9
Filtered unneeded arguments:
   f_220(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_220(x4, x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_220(v303:0, v305:0, sum~cons_1~v315:0) -> f_220(v303:0, v305:0, v315:0) :|: v315:0 > 1 && v315:0 < 10 && sum~cons_1~v315:0 = 1 + v315:0
f_220(v303:0, v305:0, cons_2) -> f_220(v303:0, 1 + v305:0, 10) :|: v305:0 < 10 && v303:0 < 9 && v305:0 < 11 && cons_2 = 2

----------------------------------------

(9)
Obligation:
Rules:
f_220(v303:0, v305:0, sum~cons_1~v315:0) -> f_220(v303:0, v305:0, v315:0) :|: v315:0 > 1 && v315:0 < 10 && sum~cons_1~v315:0 = 1 + v315:0
f_220(x, x1, x2) -> f_220(x, 1 + x1, 10) :|: x1 < 10 && x < 9 && x1 < 11 && x2 = 2

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_220(x:0, x1:0, cons_2) -> f_220(x:0, 1 + x1:0, 10) :|: x1:0 < 10 && x:0 < 9 && x1:0 < 11 && cons_2 = 2
f_220(v303:0:0, v305:0:0, sum~cons_1~v315:0:0) -> f_220(v303:0:0, v305:0:0, v315:0:0) :|: v315:0:0 > 1 && v315:0:0 < 10 && sum~cons_1~v315:0:0 = 1 + v315:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_220(x, x1, x2)] = 17 - x - x1

The following rules are decreasing:
f_220(x:0, x1:0, cons_2) -> f_220(x:0, 1 + x1:0, 10) :|: x1:0 < 10 && x:0 < 9 && x1:0 < 11 && cons_2 = 2
The following rules are bounded:
f_220(x:0, x1:0, cons_2) -> f_220(x:0, 1 + x1:0, 10) :|: x1:0 < 10 && x:0 < 9 && x1:0 < 11 && cons_2 = 2

----------------------------------------

(13)
Obligation:
Rules:
f_220(v303:0:0, v305:0:0, sum~cons_1~v315:0:0) -> f_220(v303:0:0, v305:0:0, v315:0:0) :|: v315:0:0 > 1 && v315:0:0 < 10 && sum~cons_1~v315:0:0 = 1 + v315:0:0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_220(v303:0:0:0, v305:0:0:0, sum~cons_1~v315:0:0:0) -> f_220(v303:0:0:0, v305:0:0:0, v315:0:0:0) :|: v315:0:0:0 > 1 && v315:0:0:0 < 10 && sum~cons_1~v315:0:0:0 = 1 + v315:0:0:0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_220(x1, x2, x3) -> f_220(x3)

----------------------------------------

(17)
Obligation:
Rules:
f_220(sum~cons_1~v315:0:0:0) -> f_220(v315:0:0:0) :|: v315:0:0:0 > 1 && v315:0:0:0 < 10 && sum~cons_1~v315:0:0:0 = 1 + v315:0:0:0

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_220(x)] = x

The following rules are decreasing:
f_220(sum~cons_1~v315:0:0:0) -> f_220(v315:0:0:0) :|: v315:0:0:0 > 1 && v315:0:0:0 < 10 && sum~cons_1~v315:0:0:0 = 1 + v315:0:0:0
The following rules are bounded:
f_220(sum~cons_1~v315:0:0:0) -> f_220(v315:0:0:0) :|: v315:0:0:0 > 1 && v315:0:0:0 < 10 && sum~cons_1~v315:0:0:0 = 1 + v315:0:0:0

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 9 rulesP rules:
f_140(v39, v40, v41, v42, v43, 1, v46, v45, v47, v48, v49, 0, 3, 10, 2, 9, 4) -> f_141(v39, v40, v41, v42, v43, 1, v46, v45, v47, v48, v49, 0, 3, 10, 2, 9, 4) :|: 1 < v46 && 3 <= v45
f_141(v39, v40, v41, v42, v43, 1, v46, v45, v47, v48, v49, 0, 3, 10, 2, 9, 4) -> f_143(v39, v40, v41, v42, v43, 1, v46, v45, v47, v48, v49, 0, 3, 10, 2, 9, 4) :|: 0 = 0
f_143(v39, v40, v41, v42, v43, 1, v46, v45, v47, v48, v49, 0, 3, 10, 2, 9, 4) -> f_145(v39, v40, v41, v42, v43, 1, v46, v45, v47, v48, v49, 0, 3, 10, 2, 9, 4) :|: TRUE
f_145(v39, v40, v41, v42, v43, 1, v46, v45, v47, v48, v49, 0, 3, 10, 2, 9, 4) -> f_147(v39, v40, v41, v42, v43, 1, v46, v47, v48, v49, 0, 3, 10, 2, 9, 4) :|: 0 = 0
f_147(v39, v40, v41, v42, v43, 1, v46, v47, v48, v49, 0, 3, 10, 2, 9, 4) -> f_149(v39, v40, v41, v42, v43, 1, v46, v51, v47, v48, v49, 0, 3, 10, 2, 9, 4, 8) :|: 1 + v51 = v46 && 1 <= v51 && v51 <= 8
f_149(v39, v40, v41, v42, v43, 1, v46, v51, v47, v48, v49, 0, 3, 10, 2, 9, 4, 8) -> f_151(v39, v40, v41, v42, v43, 1, v46, v51, v47, v48, v49, 0, 3, 10, 2, 9, 4, 8) :|: TRUE
f_151(v39, v40, v41, v42, v43, 1, v46, v51, v47, v48, v49, 0, 3, 10, 2, 9, 4, 8) -> f_153(v39, v40, v41, v42, v43, 1, v46, v51, v47, v48, v49, 0, 3, 10, 2, 9, 4, 8) :|: TRUE
f_153(v39, v40, v41, v42, v43, 1, v46, v51, v47, v48, v49, 0, 3, 10, 2, 9, 4, 8) -> f_139(v39, v40, v41, v42, v43, 1, v46, v51, v47, v48, v49, 0, 3, 10, 2, 9, 4) :|: TRUE
f_139(v39, v40, v41, v42, v43, 1, v45, v46, v47, v48, v49, 0, 3, 10, 2, 9, 4) -> f_140(v39, v40, v41, v42, v43, 1, v46, v45, v47, v48, v49, 0, 3, 10, 2, 9, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_140(v39:0, v40:0, v41:0, v42:0, v43:0, 1, 1 + v51:0, v45:0, v47:0, v48:0, v49:0, 0, 3, 10, 2, 9, 4) -> f_140(v39:0, v40:0, v41:0, v42:0, v43:0, 1, v51:0, 1 + v51:0, v47:0, v48:0, v49:0, 0, 3, 10, 2, 9, 4) :|: v45:0 > 2 && v51:0 > 0 && v51:0 < 9
Filtered unneeded arguments:
   f_140(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_140(x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_140(sum~cons_1~v51:0, v45:0) -> f_140(v51:0, 1 + v51:0) :|: v51:0 > 0 && v51:0 < 9 && v45:0 > 2 && sum~cons_1~v51:0 = 1 + v51:0

----------------------------------------

(22)
Obligation:
Rules:
f_140(sum~cons_1~v51:0, v45:0) -> f_140(v51:0, 1 + v51:0) :|: v51:0 > 0 && v51:0 < 9 && v45:0 > 2 && sum~cons_1~v51:0 = 1 + v51:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_140(sum~cons_1~v51:0:0, v45:0:0) -> f_140(v51:0:0, 1 + v51:0:0) :|: v51:0:0 > 0 && v51:0:0 < 9 && v45:0:0 > 2 && sum~cons_1~v51:0:0 = 1 + v51:0:0

----------------------------------------

(25) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_140 ] = f_140_1

The following rules are decreasing:
f_140(sum~cons_1~v51:0:0, v45:0:0) -> f_140(v51:0:0, 1 + v51:0:0) :|: v51:0:0 > 0 && v51:0:0 < 9 && v45:0:0 > 2 && sum~cons_1~v51:0:0 = 1 + v51:0:0

The following rules are bounded:
f_140(sum~cons_1~v51:0:0, v45:0:0) -> f_140(v51:0:0, 1 + v51:0:0) :|: v51:0:0 > 0 && v51:0:0 < 9 && v45:0:0 > 2 && sum~cons_1~v51:0:0 = 1 + v51:0:0


----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
