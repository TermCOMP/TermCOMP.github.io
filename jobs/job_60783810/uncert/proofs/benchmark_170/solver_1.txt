YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/rTY27.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 57 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 449 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 39 ms]
(8) IntTRS
(9) RankingReductionPairProof [EQUIVALENT, 8 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/rTY27.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/rTY27.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %6
	6:
		%7 = load %3
		%8 = load %4
		%9 = icmp sgt %7 %8
		br %9, %10, %15
	10:
		%11 = load %4
		%12 = add i32 %11, 1
		store %12, %4
		%13 = load %5
		%14 = add i32 %13, 1
		store %14, %5
		br %6
	15:
		%16 = load %5
		ret %16

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 33
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_215(v97, v98, v99, v100, v101, v102, 1, v104, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_216(v97, v98, v99, v100, v101, v104, 1, v102, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: 0 = 0
f_216(v97, v98, v99, v100, v101, v104, 1, v102, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_217(v97, v98, v99, v100, v101, v104, 1, v102, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: v104 < v97
f_217(v97, v98, v99, v100, v101, v104, 1, v102, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_219(v97, v98, v99, v100, v101, v104, 1, v102, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: 0 = 0
f_219(v97, v98, v99, v100, v101, v104, 1, v102, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_221(v97, v98, v99, v100, v101, v104, 1, v102, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: TRUE
f_221(v97, v98, v99, v100, v101, v104, 1, v102, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_223(v97, v98, v99, v100, v101, v104, 1, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: 0 = 0
f_223(v97, v98, v99, v100, v101, v104, 1, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_225(v97, v98, v99, v100, v101, v104, 1, v113, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: v113 = 1 + v104
f_225(v97, v98, v99, v100, v101, v104, 1, v113, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_227(v97, v98, v99, v100, v101, v104, 1, v113, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: TRUE
f_227(v97, v98, v99, v100, v101, v104, 1, v113, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_228(v97, v98, v99, v100, v101, v104, 1, v113, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: 0 = 0
f_228(v97, v98, v99, v100, v101, v104, 1, v113, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_229(v97, v98, v99, v100, v101, v104, 1, v113, v106, v115, v107, v108, v109, v110, v111, 0, 3, 4, 2) :|: v115 = 1 + v106 && 2 <= v115
f_229(v97, v98, v99, v100, v101, v104, 1, v113, v106, v115, v107, v108, v109, v110, v111, 0, 3, 4, 2) -> f_230(v97, v98, v99, v100, v101, v104, 1, v113, v106, v115, v107, v108, v109, v110, v111, 0, 3, 4, 2) :|: TRUE
f_230(v97, v98, v99, v100, v101, v104, 1, v113, v106, v115, v107, v108, v109, v110, v111, 0, 3, 4, 2) -> f_231(v97, v98, v99, v100, v101, v104, 1, v113, v106, v115, v107, v108, v109, v110, v111, 0, 3, 4, 2) :|: TRUE
f_231(v97, v98, v99, v100, v101, v104, 1, v113, v106, v115, v107, v108, v109, v110, v111, 0, 3, 4, 2) -> f_214(v97, v98, v99, v100, v101, v104, 1, v113, v106, v115, v107, v108, v109, v110, v111, 0, 3, 4) :|: TRUE
f_214(v97, v98, v99, v100, v101, v102, 1, v104, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_215(v97, v98, v99, v100, v101, v102, 1, v104, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_215(v97:0, v98:0, v99:0, v100:0, v101:0, v102:0, 1, v104:0, v105:0, v106:0, v107:0, v108:0, v109:0, v110:0, v111:0, 0, 3, 4) -> f_215(v97:0, v98:0, v99:0, v100:0, v101:0, v104:0, 1, 1 + v104:0, v106:0, 1 + v106:0, v107:0, v108:0, v109:0, v110:0, v111:0, 0, 3, 4) :|: v106:0 > 0 && v97:0 > v104:0
Filtered unneeded arguments:
   f_215(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_215(x1, x8, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_215(v97:0, v104:0, v106:0) -> f_215(v97:0, 1 + v104:0, 1 + v106:0) :|: v106:0 > 0 && v97:0 > v104:0

----------------------------------------

(8)
Obligation:
Rules:
f_215(v97:0, v104:0, v106:0) -> f_215(v97:0, 1 + v104:0, 1 + v106:0) :|: v106:0 > 0 && v97:0 > v104:0

----------------------------------------

(9) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_215 ] = f_215_1 + -1*f_215_2

The following rules are decreasing:
f_215(v97:0, v104:0, v106:0) -> f_215(v97:0, 1 + v104:0, 1 + v106:0) :|: v106:0 > 0 && v97:0 > v104:0

The following rules are bounded:
f_215(v97:0, v104:0, v106:0) -> f_215(v97:0, 1 + v104:0, 1 + v106:0) :|: v106:0 > 0 && v97:0 > v104:0


----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
