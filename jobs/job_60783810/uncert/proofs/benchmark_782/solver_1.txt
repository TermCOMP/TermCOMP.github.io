YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/0Uz4I.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 790 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 110 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) IntTRS
(13) TerminationGraphProcessor [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/0Uz4I.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/0Uz4I.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "f" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp sle %4 0
		br %5, %6, %7
	6:
		store 0, %2
		br %14
	7:
		%8 = load %3
		%9 = call i32 @g(i32 %8)
		%10 = load %3
		%11 = add i32 %10, 1
		%12 = call i32 @g(i32 %11)
		%13 = add i32 %9, %12
		store %13, %2
		br %14
	14:
		%15 = load %2
		ret %15

*BasicFunctionTypename: "g" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 27
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp sle %4 0
		br %5, %6, %7
	6:
		store 0, %2
		br %15
	7:
		%8 = load %3
		%9 = sub i32 %8, 2
		%10 = call i32 @f(i32 %9)
		%11 = load %3
		%12 = sub i32 %11, 3
		%13 = call i32 @f(i32 %12)
		%14 = add i32 %10, %13
		store %14, %2
		br %15
	15:
		%16 = load %2
		ret %16

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 44
	0:
		%1 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%2 = call i32 (...)* @__VERIFIER_nondet_int()
		store %2, %1
		%3 = load %1
		%4 = call i32 @g(i32 %3)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 76 rulesP rules:
f_297(v147, v148, v149, 3, 1, 4) -> f_298(v147, v148, v150, v149, v151, 3, 1, 4) :|: 1 <= v150 && v151 = 3 + v150 && 4 <= v151
f_298(v147, v148, v150, v149, v151, 3, 1, 4) -> f_299(v147, v148, v150, v149, v151, 3, 1, 4) :|: TRUE
f_299(v147, v148, v150, v149, v151, 3, 1, 4) -> f_300(v147, v148, v150, v149, v151, 3, 1, 4) :|: TRUE
f_300(v147, v148, v150, v149, v151, 3, 1, 4) -> f_301(v147, v148, v150, v149, v151, 3, 1, 4) :|: 0 = 0
f_301(v147, v148, v150, v149, v151, 3, 1, 4) -> f_303(v147, v148, v150, v149, v151, 3, 1, 4) :|: 0 < v147
f_303(v147, v148, v150, v149, v151, 3, 1, 4) -> f_305(v147, v148, v150, 0, v149, v151, 3, 1, 4) :|: 0 = 0
f_305(v147, v148, v150, 0, v149, v151, 3, 1, 4) -> f_307(v147, v148, v150, 0, v149, v151, 3, 1, 4) :|: TRUE
f_307(v147, v148, v150, 0, v149, v151, 3, 1, 4) -> f_309(v147, v148, v150, 0, v149, v151, 3, 1, 4) :|: 0 = 0
f_309(v147, v148, v150, 0, v149, v151, 3, 1, 4) -> f_311(v147, v148, v150, 0, v153, v149, v151, 3, 2, 1, 4) :|: 2 + v153 = v147 && 0 <= 1 + v153
f_311(v147, v148, v150, 0, v153, v149, v151, 3, 2, 1, 4) -> f_313(v153, v148, v149, v150, v151, v147, 0, 3, 2, 1, 4) :|: 0 = 0
f_313(v153, v148, v149, v150, v151, v147, 0, 3, 2, 1, 4) -> f_315(v153, v148, v149, v150, v151, v147, 3, 2, 1, 4, 0) :|: TRUE
f_313(v153, v148, v149, v150, v151, v147, 0, 3, 2, 1, 4) -> f_384(v153, 0, v148, v149, v150, v151, v147, 3, 2, 1, 4) :|: TRUE
f_313(v153, v148, v149, v150, v151, v147, 0, 3, 2, 1, 4) -> f_488(v153, 0, v148, v149, v150, v151, v147, 3, 2, 1, 4) :|: TRUE
f_313(v153, v148, v149, v150, v151, v147, 0, 3, 2, 1, 4) -> f_501(v153, 0, v148, v149, v150, v151, v147, 3, 2, 1, 4) :|: TRUE
f_313(v153, v148, v149, v150, v151, v147, 0, 3, 2, 1, 4) -> f_533(v153, 0, v148, v149, v150, v151, v147, 3, 2, 1, 4) :|: TRUE
f_313(v153, v148, v149, v150, v151, v147, 0, 3, 2, 1, 4) -> f_556(v153, 0, v148, v149, v150, v151, v147, 3, 2, 1, 4) :|: TRUE
f_315(v153, v148, v149, v150, v151, v147, 3, 2, 1, 4, 0) -> f_341(v153, v148, v149, v150, v151, v147, 3, 2, 0, 1, 4) :|: TRUE
f_341(v181, v182, v183, v184, v185, v186, 3, 2, 0, 1, 4) -> f_366(v181, 0, 2) :|: TRUE
f_366(v209, 0, 2) -> f_367(v209, v210, v211, 3, 0, 2, 1, 4) :|: 1 <= v210 && v211 = 3 + v210 && 4 <= v211
f_367(v209, v210, v211, 3, 0, 2, 1, 4) -> f_368(v209, v210, v212, v211, v213, 3, 0, 2, 1, 4) :|: 1 <= v212 && v213 = 3 + v212 && 4 <= v213
f_368(v209, v210, v212, v211, v213, 3, 0, 2, 1, 4) -> f_369(v209, v210, v212, v211, v213, 3, 0, 2, 1, 4) :|: TRUE
f_369(v209, v210, v212, v211, v213, 3, 0, 2, 1, 4) -> f_370(v209, v210, v212, v211, v213, 3, 0, 2, 1, 4) :|: TRUE
f_370(v209, v210, v212, v211, v213, 3, 0, 2, 1, 4) -> f_371(v209, v210, v212, v211, v213, 3, 0, 2, 1, 4) :|: 0 = 0
f_371(v209, v210, v212, v211, v213, 3, 0, 2, 1, 4) -> f_373(v209, v210, v212, v211, v213, 3, 1, 4) :|: 0 < v209
f_373(v209, v210, v212, v211, v213, 3, 1, 4) -> f_375(v209, v210, v212, 0, v211, v213, 3, 1, 4) :|: 0 = 0
f_375(v209, v210, v212, 0, v211, v213, 3, 1, 4) -> f_377(v209, v210, v212, 0, v211, v213, 3, 1, 4) :|: TRUE
f_377(v209, v210, v212, 0, v211, v213, 3, 1, 4) -> f_379(v209, v210, v212, 0, v211, v213, 3, 1, 4) :|: 0 = 0
f_379(v209, v210, v212, 0, v211, v213, 3, 1, 4) -> f_381(v209, v210, v211, v212, v213, 0, 3, 1, 4) :|: 0 = 0
f_381(v209, v210, v211, v212, v213, 0, 3, 1, 4) -> f_383(v209, v210, v211, v212, v213, 3, 1, 4) :|: TRUE
f_381(v209, v210, v211, v212, v213, 0, 3, 1, 4) -> f_441(v209, 0, v210, v211, v212, v213, 3, 1, 4) :|: TRUE
f_381(v209, v210, v211, v212, v213, 0, 3, 1, 4) -> f_475(v209, 0, v210, v211, v212, v213, 3, 1, 4) :|: TRUE
f_381(v209, v210, v211, v212, v213, 0, 3, 1, 4) -> f_516(v209, 0, v210, v211, v212, v213, 3, 1, 4) :|: TRUE
f_381(v209, v210, v211, v212, v213, 0, 3, 1, 4) -> f_551(v209, 0, v210, v211, v212, v213, 3, 1, 4) :|: TRUE
f_381(v209, v210, v211, v212, v213, 0, 3, 1, 4) -> f_570(v209, 0, v210, v211, v212, v213, 3, 1, 4) :|: TRUE
f_383(v209, v210, v211, v212, v213, 3, 1, 4) -> f_295(v209) :|: TRUE
f_295(v147) -> f_297(v147, v148, v149, 3, 1, 4) :|: 1 <= v148 && v149 = 3 + v148 && 4 <= v149
f_441(v209, 0, v210, v211, v212, v213, 3, 1, 4) -> f_443(v209, v210, v212, 0, v211, v213, 3, 1, 4) :|: 0 = 0
f_443(v209, v210, v212, 0, v211, v213, 3, 1, 4) -> f_444(v209, v210, v212, 0, v211, v213, 3, 1, 4) :|: 0 = 0
f_444(v209, v210, v212, 0, v211, v213, 3, 1, 4) -> f_445(v209, v210, v212, 0, v318, v211, v213, 3, 1, 4, 2) :|: v318 = 1 + v209 && 2 <= v318
f_445(v209, v210, v212, 0, v318, v211, v213, 3, 1, 4, 2) -> f_446(v318, v210, v211, v212, v213, v209, 0, 3, 1, 4, 2) :|: 0 = 0
f_446(v318, v210, v211, v212, v213, v209, 0, 3, 1, 4, 2) -> f_447(v318, v210, v211, v212, v213, v209, 3, 1, 4, 2) :|: TRUE
f_447(v318, v210, v211, v212, v213, v209, 3, 1, 4, 2) -> f_295(v318) :|: TRUE
f_475(v209, 0, v210, v211, v212, v213, 3, 1, 4) -> f_478(v209, v210, v212, 0, v211, v213, 3, 1, 4) :|: 0 = 0
f_478(v209, v210, v212, 0, v211, v213, 3, 1, 4) -> f_480(v209, v210, v212, 0, v211, v213, 3, 1, 4) :|: 0 = 0
f_480(v209, v210, v212, 0, v211, v213, 3, 1, 4) -> f_482(v209, v210, v212, 0, v394, v211, v213, 3, 1, 4, 2) :|: v394 = 1 + v209 && 2 <= v394
f_482(v209, v210, v212, 0, v394, v211, v213, 3, 1, 4, 2) -> f_484(v394, v210, v211, v212, v213, v209, 0, 3, 1, 4, 2) :|: 0 = 0
f_484(v394, v210, v211, v212, v213, v209, 0, 3, 1, 4, 2) -> f_486(v394, v210, v211, v212, v213, v209, 3, 1, 4, 2) :|: TRUE
f_486(v394, v210, v211, v212, v213, v209, 3, 1, 4, 2) -> f_295(v394) :|: TRUE
f_516(v209, 0, v210, v211, v212, v213, 3, 1, 4) -> f_520(v209, v210, v212, 0, v211, v213, 3, 1, 4) :|: 0 = 0
f_520(v209, v210, v212, 0, v211, v213, 3, 1, 4) -> f_523(v209, v210, v212, 0, v211, v213, 3, 1, 4) :|: 0 = 0
f_523(v209, v210, v212, 0, v211, v213, 3, 1, 4) -> f_526(v209, v210, v212, 0, v490, v211, v213, 3, 1, 4, 2) :|: v490 = 1 + v209 && 2 <= v490
f_526(v209, v210, v212, 0, v490, v211, v213, 3, 1, 4, 2) -> f_529(v490, v210, v211, v212, v213, v209, 0, 3, 1, 4, 2) :|: 0 = 0
f_529(v490, v210, v211, v212, v213, v209, 0, 3, 1, 4, 2) -> f_532(v490, v210, v211, v212, v213, v209, 3, 1, 4, 2) :|: TRUE
f_532(v490, v210, v211, v212, v213, v209, 3, 1, 4, 2) -> f_295(v490) :|: TRUE
f_551(v209, 0, v210, v211, v212, v213, 3, 1, 4) -> f_516(v209, 0, v210, v211, v212, v213, 3, 1, 4) :|: TRUE
f_570(v209, 0, v210, v211, v212, v213, 3, 1, 4) -> f_551(v209, 0, v210, v211, v212, v213, 3, 1, 4) :|: TRUE
f_384(v153, 0, v148, v149, v150, v151, v147, 3, 2, 1, 4) -> f_385(v147, v148, v150, 0, v153, v149, v151, 3, 2, 1, 4) :|: 0 = 0
f_385(v147, v148, v150, 0, v153, v149, v151, 3, 2, 1, 4) -> f_387(v147, v148, v150, 0, v153, v149, v151, 3, 2, 1, 4) :|: 0 = 0
f_387(v147, v148, v150, 0, v153, v149, v151, 3, 2, 1, 4) -> f_388(v147, v148, v150, 0, v153, v226, v149, v151, 3, 2, 1, 4) :|: 3 + v226 = v147 && 0 <= 2 + v226 && 1 + v226 <= 0
f_388(v147, v148, v150, 0, v153, v226, v149, v151, 3, 2, 1, 4) -> f_389(v226, v148, v149, v150, v151, v147, 0, v153, 3, 2, 1, 4) :|: 0 = 0
f_389(v226, v148, v149, v150, v151, v147, 0, v153, 3, 2, 1, 4) -> f_390(v226, v148, v149, v150, v151, v147, 3, 1, 2, 4, 0) :|: TRUE
f_390(v226, v148, v149, v150, v151, v147, 3, 1, 2, 4, 0) -> f_366(v226, 0, 2) :|: TRUE
f_488(v153, 0, v148, v149, v150, v151, v147, 3, 2, 1, 4) -> f_492(v147, v148, v150, 0, v153, v149, v151, 3, 2, 1, 4) :|: 0 = 0
f_492(v147, v148, v150, 0, v153, v149, v151, 3, 2, 1, 4) -> f_494(v147, v148, v150, 0, v153, v149, v151, 3, 2, 1, 4) :|: 0 = 0
f_494(v147, v148, v150, 0, v153, v149, v151, 3, 2, 1, 4) -> f_496(v147, v148, v150, 0, v153, v420, v149, v151, 3, 2, 1, 4) :|: 3 + v420 = v147 && 0 <= v420
f_496(v147, v148, v150, 0, v153, v420, v149, v151, 3, 2, 1, 4) -> f_498(v420, v148, v149, v150, v151, v147, 0, v153, 3, 2, 1, 4) :|: 0 = 0
f_498(v420, v148, v149, v150, v151, v147, 0, v153, 3, 2, 1, 4) -> f_500(v420, v148, v149, v150, v151, v147, 3, 1, 4, 0) :|: TRUE
f_500(v420, v148, v149, v150, v151, v147, 3, 1, 4, 0) -> f_366(v420, 0, 2) :|: TRUE
f_501(v153, 0, v148, v149, v150, v151, v147, 3, 2, 1, 4) -> f_488(v153, 0, v148, v149, v150, v151, v147, 3, 2, 1, 4) :|: TRUE
f_533(v153, 0, v148, v149, v150, v151, v147, 3, 2, 1, 4) -> f_536(v147, v148, v150, 0, v153, v149, v151, 3, 2, 1, 4) :|: 0 = 0
f_536(v147, v148, v150, 0, v153, v149, v151, 3, 2, 1, 4) -> f_540(v147, v148, v150, 0, v153, v149, v151, 3, 2, 1, 4) :|: 0 = 0
f_540(v147, v148, v150, 0, v153, v149, v151, 3, 2, 1, 4) -> f_543(v147, v148, v150, 0, v153, v536, v149, v151, 3, 2, 1, 4) :|: 3 + v536 = v147 && 0 <= v536
f_543(v147, v148, v150, 0, v153, v536, v149, v151, 3, 2, 1, 4) -> f_546(v536, v148, v149, v150, v151, v147, 0, v153, 3, 2, 1, 4) :|: 0 = 0
f_546(v536, v148, v149, v150, v151, v147, 0, v153, 3, 2, 1, 4) -> f_549(v536, v148, v149, v150, v151, v147, 3, 1, 4, 0) :|: TRUE
f_549(v536, v148, v149, v150, v151, v147, 3, 1, 4, 0) -> f_366(v536, 0, 2) :|: TRUE
f_556(v153, 0, v148, v149, v150, v151, v147, 3, 2, 1, 4) -> f_533(v153, 0, v148, v149, v150, v151, v147, 3, 2, 1, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_297(3 + v420:0, v148:0, v149:0, 3, 1, 4) -> f_381(v420:0, v210:0, 3 + v210:0, v212:0, 3 + v212:0, 0, 3, 1, 4) :|: v420:0 > 0 && v150:0 > 0 && v210:0 > 0 && v212:0 > 0 && 3 + v420:0 = 2 + v153:0 && v153:0 > -2
f_381(v209:0, v210:0, v211:0, v212:0, v213:0, 0, 3, 1, 4) -> f_297(1 + v209:0, v148:0, 3 + v148:0, 3, 1, 4) :|: v209:0 > 0 && v148:0 > 0
f_381(v209:0, v210:0, v211:0, v212:0, v213:0, 0, 3, 1, 4) -> f_297(v209:0, v148:0, 3 + v148:0, 3, 1, 4) :|: v148:0 > 0
f_297(2 + v153:0, v148:0, v149:0, 3, 1, 4) -> f_381(v153:0, v210:0, 3 + v210:0, v212:0, 3 + v212:0, 0, 3, 1, 4) :|: v153:0 > 0 && v150:0 > 0 && v210:0 > 0 && v212:0 > 0
Filtered unneeded arguments:
   f_297(x1, x2, x3, x4, x5, x6) -> f_297(x1)
   f_381(x1, x2, x3, x4, x5, x6, x7, x8, x9) -> f_381(x1)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_297(sum~cons_3~v420:0) -> f_381(v420:0) :|: v420:0 > 0 && sum~cons_3~v420:0 = 3 + v420:0
f_381(v209:0) -> f_297(1 + v209:0) :|: v209:0 > 0
f_381(v209:0) -> f_297(v209:0) :|: TRUE
f_297(sum~cons_2~v153:0) -> f_381(v153:0) :|: v153:0 > 0 && sum~cons_2~v153:0 = 2 + v153:0

----------------------------------------

(8)
Obligation:
Rules:
f_297(sum~cons_3~v420:0) -> f_381(v420:0) :|: v420:0 > 0 && sum~cons_3~v420:0 = 3 + v420:0
f_381(v209:0) -> f_297(1 + v209:0) :|: v209:0 > 0
f_381(x) -> f_297(x) :|: TRUE
f_297(sum~cons_2~v153:0) -> f_381(v153:0) :|: v153:0 > 0 && sum~cons_2~v153:0 = 2 + v153:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_381(x:0) -> f_297(x:0) :|: TRUE
f_297(sum~cons_3~v420:0:0) -> f_381(v420:0:0) :|: v420:0:0 > 0 && sum~cons_3~v420:0:0 = 3 + v420:0:0
f_297(sum~cons_2~v153:0:0) -> f_381(v153:0:0) :|: v153:0:0 > 0 && sum~cons_2~v153:0:0 = 2 + v153:0:0
f_381(v209:0:0) -> f_297(1 + v209:0:0) :|: v209:0:0 > 0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_381(x)] = -2 + x
[f_297(x1)] = -3 + x1

The following rules are decreasing:
f_381(x:0) -> f_297(x:0) :|: TRUE
f_297(sum~cons_3~v420:0:0) -> f_381(v420:0:0) :|: v420:0:0 > 0 && sum~cons_3~v420:0:0 = 3 + v420:0:0
f_297(sum~cons_2~v153:0:0) -> f_381(v153:0:0) :|: v153:0:0 > 0 && sum~cons_2~v153:0:0 = 2 + v153:0:0
The following rules are bounded:
f_297(sum~cons_3~v420:0:0) -> f_381(v420:0:0) :|: v420:0:0 > 0 && sum~cons_3~v420:0:0 = 3 + v420:0:0
f_297(sum~cons_2~v153:0:0) -> f_381(v153:0:0) :|: v153:0:0 > 0 && sum~cons_2~v153:0:0 = 2 + v153:0:0

----------------------------------------

(12)
Obligation:
Rules:
f_381(x:0) -> f_297(x:0) :|: TRUE
f_381(v209:0:0) -> f_297(1 + v209:0:0) :|: v209:0:0 > 0

----------------------------------------

(13) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(14)
YES
/hpcwork/ff862203/termcomp25/benchmarks/0Uz4I.c:11:15: warning: implicit declaration of function 'g' is invalid in C99 [-Wimplicit-function-declaration]
  else return g(x) + g(x + 1); 
              ^
1 warning generated.

Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
