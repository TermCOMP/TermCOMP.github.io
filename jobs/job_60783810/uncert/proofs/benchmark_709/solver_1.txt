YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/0faJm.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 219 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 26 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 19 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/0faJm.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/0faJm.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 (...)* @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = load %3
		%9 = icmp sgt %7 %8
		br %9, %10, %22
	10:
		%11 = load %2
		%12 = load %3
		%13 = sub i32 %11, %12
		store %13, %2
		%14 = call i32 (...)* @__VERIFIER_nondet_int()
		store %14, %3
		%15 = load %3
		%16 = icmp slt %15 1
		br %16, %20, %17
	17:
		%18 = load %3
		%19 = icmp sgt %18 2
		br %19, %20, %21
	20:
		br %22
	21:
		br %6
	22:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_169(v102, v103, v104, v105, v106, v110, v108, 1, v107, v111, 0, v113, v114, v115, 3, 2, 4) -> f_170(v102, v103, v104, v105, v106, v110, v111, 1, v107, v108, 0, v113, v114, v115, 3, 2, 4) :|: 0 = 0
f_170(v102, v103, v104, v105, v106, v110, v111, 1, v107, v108, 0, v113, v114, v115, 3, 2, 4) -> f_171(v102, v103, v104, v105, v106, v110, v111, 1, v107, v108, 0, v113, v114, v115, 3, 2, 4) :|: v111 < v110 && 2 <= v110
f_171(v102, v103, v104, v105, v106, v110, v111, 1, v107, v108, 0, v113, v114, v115, 3, 2, 4) -> f_173(v102, v103, v104, v105, v106, v110, v111, 1, v107, v108, 0, v113, v114, v115, 3, 2, 4) :|: 0 = 0
f_173(v102, v103, v104, v105, v106, v110, v111, 1, v107, v108, 0, v113, v114, v115, 3, 2, 4) -> f_175(v102, v103, v104, v105, v106, v110, v111, 1, v107, v108, 0, v113, v114, v115, 3, 2, 4) :|: TRUE
f_175(v102, v103, v104, v105, v106, v110, v111, 1, v107, v108, 0, v113, v114, v115, 3, 2, 4) -> f_177(v102, v103, v104, v105, v106, v110, v111, 1, v108, 0, v113, v114, v115, 3, 2, 4) :|: 0 = 0
f_177(v102, v103, v104, v105, v106, v110, v111, 1, v108, 0, v113, v114, v115, 3, 2, 4) -> f_178(v102, v103, v104, v105, v106, v110, v111, 1, 0, v113, v114, v115, 3, 2, 4) :|: 0 = 0
f_178(v102, v103, v104, v105, v106, v110, v111, 1, 0, v113, v114, v115, 3, 2, 4) -> f_179(v102, v103, v104, v105, v106, v110, v111, 1, v128, 0, v113, v114, v115, 3, 2, 4) :|: v128 + v111 = v110 && 1 <= v128
f_179(v102, v103, v104, v105, v106, v110, v111, 1, v128, 0, v113, v114, v115, 3, 2, 4) -> f_180(v102, v103, v104, v105, v106, v110, v111, 1, v128, 0, v113, v114, v115, 3, 2, 4) :|: TRUE
f_180(v102, v103, v104, v105, v106, v110, v111, 1, v128, 0, v113, v114, v115, 3, 2, 4) -> f_181(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) :|: TRUE
f_181(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) -> f_182(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) :|: TRUE
f_182(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) -> f_183(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) :|: 0 = 0
f_183(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) -> f_185(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) :|: 1 <= v130
f_185(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) -> f_187(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) :|: 0 = 0
f_187(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) -> f_189(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) :|: TRUE
f_189(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) -> f_191(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) :|: 0 = 0
f_191(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) -> f_193(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) :|: v130 <= 2
f_193(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) -> f_195(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) :|: 0 = 0
f_195(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) -> f_197(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) :|: TRUE
f_197(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) -> f_199(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) :|: TRUE
f_199(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) -> f_168(v102, v103, v104, v105, v106, v110, v111, 1, v128, v130, 0, v113, v114, v115, 3, 2, 4) :|: TRUE
f_168(v102, v103, v104, v105, v106, v107, v108, 1, v110, v111, 0, v113, v114, v115, 3, 2, 4) -> f_169(v102, v103, v104, v105, v106, v110, v108, 1, v107, v111, 0, v113, v114, v115, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_169(v102:0, v103:0, v104:0, v105:0, v106:0, v128:0 + v111:0, v108:0, 1, v107:0, v111:0, 0, v113:0, v114:0, v115:0, 3, 2, 4) -> f_169(v102:0, v103:0, v104:0, v105:0, v106:0, v128:0, v111:0, 1, v128:0 + v111:0, v130:0, 0, v113:0, v114:0, v115:0, 3, 2, 4) :|: v128:0 + v111:0 > 1 && v128:0 + v111:0 > v111:0 && v128:0 > 0 && v130:0 < 3 && v130:0 > 0
Filtered unneeded arguments:
   f_169(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_169(x6, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_169(sum~v128:0~v111:0, v111:0) -> f_169(v128:0, v130:0) :|: v128:0 + v111:0 > v111:0 && v128:0 + v111:0 > 1 && v128:0 > 0 && v130:0 > 0 && v130:0 < 3 && sum~v128:0~v111:0 = v128:0 + v111:0

----------------------------------------

(8)
Obligation:
Rules:
f_169(sum~v128:0~v111:0, v111:0) -> f_169(v128:0, v130:0) :|: v128:0 + v111:0 > v111:0 && v128:0 + v111:0 > 1 && v128:0 > 0 && v130:0 > 0 && v130:0 < 3 && sum~v128:0~v111:0 = v128:0 + v111:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_169(sum~v128:0:0~v111:0:0, v111:0:0) -> f_169(v128:0:0, v130:0:0) :|: v130:0:0 > 0 && v130:0:0 < 3 && v128:0:0 > 0 && v128:0:0 + v111:0:0 > 1 && v128:0:0 + v111:0:0 > v111:0:0 && sum~v128:0:0~v111:0:0 = v128:0:0 + v111:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_169 ] = f_169_1 + -1*f_169_2

The following rules are decreasing:
f_169(sum~v128:0:0~v111:0:0, v111:0:0) -> f_169(v128:0:0, v130:0:0) :|: v130:0:0 > 0 && v130:0:0 < 3 && v128:0:0 > 0 && v128:0:0 + v111:0:0 > 1 && v128:0:0 + v111:0:0 > v111:0:0 && sum~v128:0:0~v111:0:0 = v128:0:0 + v111:0:0

The following rules are bounded:
f_169(sum~v128:0:0~v111:0:0, v111:0:0) -> f_169(v128:0:0, v130:0:0) :|: v130:0:0 > 0 && v130:0:0 < 3 && v128:0:0 > 0 && v128:0:0 + v111:0:0 > 1 && v128:0:0 + v111:0:0 > v111:0:0 && sum~v128:0:0~v111:0:0 = v128:0:0 + v111:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
