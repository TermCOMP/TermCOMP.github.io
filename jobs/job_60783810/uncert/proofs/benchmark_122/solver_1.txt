YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/kizvL.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 59 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 557 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/kizvL.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/kizvL.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "f" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		%8 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%11 = alloca i8, numElementsLit: 4, align 16
		%12 = bitcast *i8 %11 to *i32
		store %12, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%13 = alloca i8, numElementsLit: 4, align 16
		%14 = bitcast *i8 %13 to *i32
		store %14, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %8)
		%15 = alloca i8, numElementsLit: 4, align 16
		%16 = bitcast *i8 %15 to *i32
		store %16, %8
		%17 = load %3
		%18 = load %5
		store %17, %18
		%19 = load %4
		%20 = load %6
		store %19, %20
		%21 = load %7
		store 0, %21
		%22 = load %8
		store 0, %22
		br %23
	23:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %24
	24:
		%25 = load %7
		%26 = load %25
		%27 = load %5
		%28 = load %27
		%29 = icmp slt %26 %28
		br %29, %30, %40
	30:
		%31 = load %7
		%32 = load %31
		%33 = add i32 %32, 1
		store %33, %31
		%34 = load %7
		%35 = load %34
		%36 = srem i32 %35, 2
		%37 = icmp ne %36 0
		br %37, %38, %39
	38:
		br %24
	39:
		br %41
	40:
		br %41
	41:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %42
	42:
		%43 = load %8
		%44 = load %43
		%45 = icmp slt %44 1
		br %45, %46, %56
	46:
		%47 = load %8
		%48 = load %47
		%49 = add i32 %48, 1
		store %49, %47
		%50 = load %7
		%51 = load %50
		%52 = srem i32 %51, 2
		%53 = icmp ne %52 0
		br %53, %54, %55
	54:
		br %42
	55:
		br %23
	56:
		%57 = load %7
		%58 = load %57
		%59 = load %8
		%60 = load %59
		%61 = add i32 %58, %60
		ret %61

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 86
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @f(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Proven termination by absence of SCCs
----------------------------------------

(6)
TRUE
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
