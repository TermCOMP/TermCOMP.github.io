YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/0o3lI.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 214 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 11 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/0o3lI.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/0o3lI.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		store 0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %3
		br %4
	4:
		%5 = load %2
		%6 = icmp sgt %5 10
		br %6, %7, %8
	7:
		br %13
	8:
		%9 = load %2
		%10 = add i32 %9, 1
		store %10, %2
		%11 = load %3
		%12 = add i32 %11, 1
		store %12, %3
		br %4
	13:
		%14 = load %3
		ret %14


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_156(v55, v56, v57, v60, 0, v58, v61, v62, v63, 3, 1, 4) -> f_158(v55, v56, v57, v60, 0, v58, v61, v62, v63, 3, 1, 9, 10, 4) :|: v60 <= 10 && v58 <= 9
f_158(v55, v56, v57, v60, 0, v58, v61, v62, v63, 3, 1, 9, 10, 4) -> f_160(v55, v56, v57, v60, 0, v58, v61, v62, v63, 3, 1, 9, 10, 4) :|: 0 = 0
f_160(v55, v56, v57, v60, 0, v58, v61, v62, v63, 3, 1, 9, 10, 4) -> f_162(v55, v56, v57, v60, 0, v58, v61, v62, v63, 3, 1, 9, 10, 4) :|: TRUE
f_162(v55, v56, v57, v60, 0, v58, v61, v62, v63, 3, 1, 9, 10, 4) -> f_164(v55, v56, v57, v60, 0, v58, v61, v62, v63, 3, 1, 9, 10, 4) :|: 0 = 0
f_164(v55, v56, v57, v60, 0, v58, v61, v62, v63, 3, 1, 9, 10, 4) -> f_166(v55, v56, v57, v60, 0, v64, v58, v61, v62, v63, 3, 1, 9, 10, 4, 2, 11) :|: v64 = 1 + v60 && 2 <= v64 && v64 <= 11
f_166(v55, v56, v57, v60, 0, v64, v58, v61, v62, v63, 3, 1, 9, 10, 4, 2, 11) -> f_167(v55, v56, v57, v60, 0, v64, v58, v61, v62, v63, 3, 1, 9, 10, 4, 2, 11) :|: TRUE
f_167(v55, v56, v57, v60, 0, v64, v58, v61, v62, v63, 3, 1, 9, 10, 4, 2, 11) -> f_168(v55, v56, v57, v60, 0, v64, v61, v62, v63, 3, 1, 10, 4, 2, 11) :|: 0 = 0
f_168(v55, v56, v57, v60, 0, v64, v61, v62, v63, 3, 1, 10, 4, 2, 11) -> f_169(v55, v56, v57, v60, 0, v64, v61, v62, v63, 3, 1, 10, 4, 2, 11) :|: v64 = 1 + v60
f_169(v55, v56, v57, v60, 0, v64, v61, v62, v63, 3, 1, 10, 4, 2, 11) -> f_170(v55, v56, v57, v60, 0, v64, v61, v62, v63, 3, 1, 10, 4, 2, 11) :|: TRUE
f_170(v55, v56, v57, v60, 0, v64, v61, v62, v63, 3, 1, 10, 4, 2, 11) -> f_171(v55, v56, v57, v60, 0, v64, v61, v62, v63, 3, 1, 10, 4, 2, 11) :|: TRUE
f_171(v55, v56, v57, v60, 0, v64, v61, v62, v63, 3, 1, 10, 4, 2, 11) -> f_155(v55, v56, v57, v60, 0, v64, v61, v62, v63, 3, 1, 4) :|: TRUE
f_155(v55, v56, v57, v58, 0, v60, v61, v62, v63, 3, 1, 4) -> f_156(v55, v56, v57, v60, 0, v58, v61, v62, v63, 3, 1, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_156(v55:0, v56:0, v57:0, v60:0, 0, v58:0, v61:0, v62:0, v63:0, 3, 1, 4) -> f_156(v55:0, v56:0, v57:0, 1 + v60:0, 0, v60:0, v61:0, v62:0, v63:0, 3, 1, 4) :|: v58:0 < 10 && v60:0 < 11 && v60:0 > 0
Filtered unneeded arguments:
   f_156(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) -> f_156(x4, x6)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_156(v60:0, v58:0) -> f_156(1 + v60:0, v60:0) :|: v60:0 < 11 && v60:0 > 0 && v58:0 < 10

----------------------------------------

(8)
Obligation:
Rules:
f_156(v60:0, v58:0) -> f_156(1 + v60:0, v60:0) :|: v60:0 < 11 && v60:0 > 0 && v58:0 < 10

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_156(v60:0:0, v58:0:0) -> f_156(1 + v60:0:0, v60:0:0) :|: v60:0:0 < 11 && v60:0:0 > 0 && v58:0:0 < 10

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_156 ] = -1*f_156_1

The following rules are decreasing:
f_156(v60:0:0, v58:0:0) -> f_156(1 + v60:0:0, v60:0:0) :|: v60:0:0 < 11 && v60:0:0 > 0 && v58:0:0 < 10

The following rules are bounded:
f_156(v60:0:0, v58:0:0) -> f_156(1 + v60:0:0, v60:0:0) :|: v60:0:0 < 11 && v60:0:0 > 0 && v58:0:0 < 10


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
