YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/l8zt2.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 36 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2610 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 42 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 44 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/l8zt2.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/l8zt2.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%5 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store null, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%6 = load %3
		store %6, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %7
	7:
		%8 = load %5
		%9 = load %2
		%10 = icmp slt %8 %9
		br %10, %11, %24
	11:
		%12 = call noalias *i8 @malloc(i64 16)
		%13 = bitcast *i8 %12 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %13, %3
		%14 = load %5
		%15 = load %3
		%16 = getelementptr %15, 0, 0
		store %14, %16
		%17 = load %4
		%18 = load %3
		%19 = getelementptr %18, 0, 1
		store %17, %19
		%20 = load %3
		store %20, %4
		br %21
	21:
		%22 = load %5
		%23 = add i32 %22, 1
		store %23, %5
		br %7
	24:
		%25 = load %3
		ret %25

*BasicFunctionTypename: "search" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 53
	0:
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca i32, align 4
		%5 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %5)
		%6 = load %3
		store %6, %5
		br %7
	7:
		%8 = load %5
		%9 = getelementptr %8, 0, 0
		%10 = load %9
		%11 = load %4
		%12 = icmp ne %10 %11
		br %12, %13, %17
	13:
		%14 = load %5
		%15 = getelementptr %14, 0, 1
		%16 = load %15
		store %16, %5
		br %7
	17:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 75
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 (...)* @__VERIFIER_nondet_int()
		store %5, %2
		%6 = load %2
		%7 = icmp slt %6 1
		br %7, %8, %9
	8:
		store 0, %1
		br %21
	9:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%10 = call i32 (...)* @__VERIFIER_nondet_int()
		store %10, %3
		%11 = load %3
		%12 = icmp slt %11 0
		br %12, %13, %14
	13:
		store 0, %1
		br %21
	14:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%15 = load %2
		%16 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %15)
		store %16, %4
		%17 = load %4
		%18 = load %3
		%19 = load %2
		%20 = srem i32 %18, %19
		Unnamed Call-Instruction = call BasicVoidType @search(*BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %17, i32 %20)
		store 0, %1
		br %21
	21:
		%22 = load %1
		ret %22


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_749(v430, v431, v432, v433, v434, v439, v435, v436, 1, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v457, v454, 0, v458, v444, v446, 3, 7, 4, 8, 9, 2, v456) -> f_750(v430, v431, v432, v433, v434, v439, v436, 1, v435, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v457, v454, 0, v458, v444, v446, 3, 7, 4, 8, 9, 2, v456) :|: 0 = 0
f_750(v430, v431, v432, v433, v434, v439, v436, 1, v435, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v457, v454, 0, v458, v444, v446, 3, 7, 4, 8, 9, 2, v456) -> f_751(v430, v431, v432, v433, v434, v439, v454, 1, v435, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v436, v457, 0, v458, v444, v446, 3, 7, 4, 8, 9, 2, v456) :|: 0 = 0
f_751(v430, v431, v432, v433, v434, v439, v454, 1, v435, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v436, v457, 0, v458, v444, v446, 3, 7, 4, 8, 9, 2, v456) -> f_752(v430, v431, v432, v433, v434, v439, v454, 1, v435, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v436, v457, 0, v458, v444, v446, 3, 7, 4, 8, 9, 2, v456) :|: 0 = 0
f_752(v430, v431, v432, v433, v434, v439, v454, 1, v435, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v436, v457, 0, v458, v444, v446, 3, 7, 4, 8, 9, 2, v456) -> f_753(v430, v431, v432, v433, v434, v439, v454, 1, v435, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v436, v457, 0, v458, v444, v446, 3, 7, 4, 8, 2, 9, v456) :|: v431 < v454 && 1 <= v454 && 2 <= v436 && 2 <= v455 && 3 <= v444 && 1 <= v458
f_753(v430, v431, v432, v433, v434, v439, v454, 1, v435, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v436, v457, 0, v458, v444, v446, 3, 7, 4, 8, 2, 9, v456) -> f_755(v430, v431, v432, v433, v434, v439, v454, 1, v435, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v436, v457, 0, v458, v444, v446, 3, 7, 4, 8, 2, 9, v456) :|: 0 = 0
f_755(v430, v431, v432, v433, v434, v439, v454, 1, v435, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v436, v457, 0, v458, v444, v446, 3, 7, 4, 8, 2, 9, v456) -> f_757(v430, v431, v432, v433, v434, v439, v454, 1, v435, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v436, v457, 0, v458, v444, v446, 3, 7, 4, 8, 2, 9, v456) :|: TRUE
f_757(v430, v431, v432, v433, v434, v439, v454, 1, v435, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v436, v457, 0, v458, v444, v446, 3, 7, 4, 8, 2, 9, v456) -> f_759(v430, v431, v432, v433, v434, v439, v454, 1, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v436, v457, 0, v458, v444, v446, 3, 7, 4, 2, 9, 8, v456) :|: 0 = 0
f_759(v430, v431, v432, v433, v434, v439, v454, 1, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v436, v457, 0, v458, v444, v446, 3, 7, 4, 2, 9, 8, v456) -> f_767(v430, v431, v432, v433, v434, v439, v454, 1, v459, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v463, v438, 0, v444, v446, v458, v462, v460, v455, v457, 3, 7, 4, 8, 15, 9, 2, 16, v464) :|: v459 = 8 + v439 && 1 + v461 = v436 && 1 + v462 = v454 && v463 = 15 + v439 && v464 = 1 + v456 && 9 <= v459 && 0 <= v462 && 16 <= v463 && 2 <= v464 && v461 = v454
f_767(v430, v431, v432, v433, v434, v439, v454, 1, v459, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v463, v438, 0, v444, v446, v458, v462, v460, v455, v457, 3, 7, 4, 8, 15, 9, 2, 16, v464) -> f_769(v430, v431, v432, v433, v434, v439, v454, 1, v459, v458, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v463, v438, 0, v444, v446, v462, v460, v455, v457, 3, 7, 4, 8, 15, 9, 2, 16, v464) :|: 0 = 0
f_769(v430, v431, v432, v433, v434, v439, v454, 1, v459, v458, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v463, v438, 0, v444, v446, v462, v460, v455, v457, 3, 7, 4, 8, 15, 9, 2, 16, v464) -> f_771(v430, v431, v432, v433, v434, v439, v454, 1, v459, v458, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v463, 0, v444, v446, v462, v460, v455, v457, 3, 7, 4, 8, 15, 2, 9, 16, v464) :|: TRUE
f_771(v430, v431, v432, v433, v434, v439, v454, 1, v459, v458, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v463, 0, v444, v446, v462, v460, v455, v457, 3, 7, 4, 8, 15, 2, 9, 16, v464) -> f_773(v430, v431, v432, v433, v434, v439, v454, 1, v459, v458, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v463, 0, v444, v446, v462, v460, v455, v457, 3, 7, 4, 8, 15, 2, 9, 16, v464) :|: TRUE
f_773(v430, v431, v432, v433, v434, v439, v454, 1, v459, v458, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v463, 0, v444, v446, v462, v460, v455, v457, 3, 7, 4, 8, 15, 2, 9, 16, v464) -> f_748(v430, v431, v432, v433, v434, v439, v454, 1, v459, v458, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v457, v462, 0, v460, v444, v446, 3, 7, 4, 8, 9, 2, v464) :|: TRUE
f_748(v430, v431, v432, v433, v434, v435, v436, 1, v438, v439, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v457, v454, 0, v458, v444, v446, 3, 7, 4, 8, 9, 2, v456) -> f_749(v430, v431, v432, v433, v434, v439, v435, v436, 1, v438, v440, v447, v441, v448, v442, v449, v443, v450, v451, v452, v453, v455, v457, v454, 0, v458, v444, v446, 3, 7, 4, 8, 9, 2, v456) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_749(v430:0, v431:0, v432:0, v433:0, v434:0, v439:0, v435:0, 1 + (1 + v462:0), 1, v438:0, v440:0, v447:0, v441:0, v448:0, v442:0, v449:0, v443:0, v450:0, v451:0, v452:0, v453:0, v455:0, v457:0, 1 + v462:0, 0, v458:0, v444:0, v446:0, 3, 7, 4, 8, 9, 2, v456:0) -> f_749(v430:0, v431:0, v432:0, v433:0, v434:0, v458:0, v439:0, 1 + v462:0, 1, 8 + v439:0, v440:0, v447:0, v441:0, v448:0, v442:0, v449:0, v443:0, v450:0, v451:0, v452:0, v453:0, v455:0, v457:0, v462:0, 0, v460:0, v444:0, v446:0, 3, 7, 4, 8, 9, 2, 1 + v456:0) :|: v462:0 > -1 && v431:0 < 1 + v462:0 && v455:0 > 1 && v444:0 > 2 && v439:0 > 0 && v458:0 > 0 && v456:0 > 0
Filtered unneeded arguments:
   f_749(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35) -> f_749(x2, x6, x8, x22, x24, x26, x27, x35)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_749(v431:0, v439:0, sum~cons_1~sum~cons_1~v462:0, v455:0, sum~cons_1~v462:0, v458:0, v444:0, v456:0) -> f_749(v431:0, v458:0, 1 + v462:0, v455:0, v462:0, v460:0, v444:0, 1 + v456:0) :|: v431:0 < 1 + v462:0 && v462:0 > -1 && v455:0 > 1 && v444:0 > 2 && v439:0 > 0 && v456:0 > 0 && v458:0 > 0 && sum~cons_1~sum~cons_1~v462:0 = 1 + (1 + v462:0) && sum~cons_1~v462:0 = 1 + v462:0

----------------------------------------

(9)
Obligation:
Rules:
f_749(v431:0, v439:0, sum~cons_1~sum~cons_1~v462:0, v455:0, sum~cons_1~v462:0, v458:0, v444:0, v456:0) -> f_749(v431:0, v458:0, 1 + v462:0, v455:0, v462:0, v460:0, v444:0, 1 + v456:0) :|: v431:0 < 1 + v462:0 && v462:0 > -1 && v455:0 > 1 && v444:0 > 2 && v439:0 > 0 && v456:0 > 0 && v458:0 > 0 && sum~cons_1~sum~cons_1~v462:0 = 1 + (1 + v462:0) && sum~cons_1~v462:0 = 1 + v462:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_749(v431:0:0, v439:0:0, sum~cons_1~sum~cons_1~v462:0:0, v455:0:0, sum~cons_1~v462:0:0, v458:0:0, v444:0:0, v456:0:0) -> f_749(v431:0:0, v458:0:0, 1 + v462:0:0, v455:0:0, v462:0:0, v460:0:0, v444:0:0, 1 + v456:0:0) :|: v456:0:0 > 0 && v458:0:0 > 0 && v439:0:0 > 0 && v444:0:0 > 2 && v455:0:0 > 1 && v462:0:0 > -1 && v431:0:0 < 1 + v462:0:0 && sum~cons_1~sum~cons_1~v462:0:0 = 1 + (1 + v462:0:0) && sum~cons_1~v462:0:0 = 1 + v462:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_749(x, x1, x2, x3, x4, x5, x6, x7)] = x2

The following rules are decreasing:
f_749(v431:0:0, v439:0:0, sum~cons_1~sum~cons_1~v462:0:0, v455:0:0, sum~cons_1~v462:0:0, v458:0:0, v444:0:0, v456:0:0) -> f_749(v431:0:0, v458:0:0, 1 + v462:0:0, v455:0:0, v462:0:0, v460:0:0, v444:0:0, 1 + v456:0:0) :|: v456:0:0 > 0 && v458:0:0 > 0 && v439:0:0 > 0 && v444:0:0 > 2 && v455:0:0 > 1 && v462:0:0 > -1 && v431:0:0 < 1 + v462:0:0 && sum~cons_1~sum~cons_1~v462:0:0 = 1 + (1 + v462:0:0) && sum~cons_1~v462:0:0 = 1 + v462:0:0
The following rules are bounded:
f_749(v431:0:0, v439:0:0, sum~cons_1~sum~cons_1~v462:0:0, v455:0:0, sum~cons_1~v462:0:0, v458:0:0, v444:0:0, v456:0:0) -> f_749(v431:0:0, v458:0:0, 1 + v462:0:0, v455:0:0, v462:0:0, v460:0:0, v444:0:0, 1 + v456:0:0) :|: v456:0:0 > 0 && v458:0:0 > 0 && v439:0:0 > 0 && v444:0:0 > 2 && v455:0:0 > 1 && v462:0:0 > -1 && v431:0:0 < 1 + v462:0:0 && sum~cons_1~sum~cons_1~v462:0:0 = 1 + (1 + v462:0:0) && sum~cons_1~v462:0:0 = 1 + v462:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_627(v263, v264, v265, v266, v267, 0, v274, 1, v271, v269, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 9) -> f_628(v263, v264, v265, v266, v267, 0, v274, 1, v271, v269, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 9) :|: 0 = 0
f_628(v263, v264, v265, v266, v267, 0, v274, 1, v271, v269, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 9) -> f_629(v263, v264, v265, v266, v267, 0, v274, 1, v271, v269, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 2, 9) :|: v274 < v263 && 2 <= v263
f_629(v263, v264, v265, v266, v267, 0, v274, 1, v271, v269, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 2, 9) -> f_631(v263, v264, v265, v266, v267, 0, v274, 1, v271, v269, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 2, 9) :|: 0 = 0
f_631(v263, v264, v265, v266, v267, 0, v274, 1, v271, v269, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 2, 9) -> f_633(v263, v264, v265, v266, v267, 0, v274, 1, v271, v269, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 2, 9) :|: TRUE
f_633(v263, v264, v265, v266, v267, 0, v274, 1, v271, v269, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 2, 9) -> f_635(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v269, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v279, 3, 7, 4, 8, 15, 2, 9, 16) :|: v289 = 15 + v288 && v288 % 4 = 0 && 16 <= v289
f_635(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v269, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v279, 3, 7, 4, 8, 15, 2, 9, 16) -> f_637(v263, v264, v265, v266, v267, 0, v274, 1, v288, v269, v271, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v279, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_637(v263, v264, v265, v266, v267, 0, v274, 1, v288, v269, v271, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v279, 3, 7, 4, 8, 15, 2, 9, 16) -> f_639(v263, v264, v265, v266, v267, 0, v274, 1, v288, v269, v271, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v279, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_639(v263, v264, v265, v266, v267, 0, v274, 1, v288, v269, v271, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v279, 3, 7, 4, 8, 15, 2, 9, 16) -> f_641(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v272, v273, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v279, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_641(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v272, v273, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v279, 3, 7, 4, 8, 15, 2, 9, 16) -> f_643(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v272, v273, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v279, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_643(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v272, v273, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v279, 3, 7, 4, 8, 15, 2, 9, 16) -> f_645(v263, v264, v265, v266, v267, 0, v274, 1, v288, v272, v271, v273, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v279, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_645(v263, v264, v265, v266, v267, 0, v274, 1, v288, v272, v271, v273, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v279, 3, 7, 4, 8, 15, 2, 9, 16) -> f_647(v263, v264, v265, v266, v267, 0, v274, 1, v288, v272, v271, v273, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v279, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_647(v263, v264, v265, v266, v267, 0, v274, 1, v288, v272, v271, v273, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v279, 3, 7, 4, 8, 15, 2, 9, 16) -> f_649(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v273, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v272, v279, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_649(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v273, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v272, v279, 3, 7, 4, 8, 15, 2, 9, 16) -> f_651(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v273, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v272, v279, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_651(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v273, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v272, v279, 3, 7, 4, 8, 15, 2, 9, 16) -> f_653(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v272, v279, 3, 7, 4, 15, 8, 2, 16, 9) :|: v296 = 8 + v288 && 9 <= v296
f_653(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v289, v272, v279, 3, 7, 4, 15, 8, 2, 16, 9) -> f_655(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, v300, 2, 9) :|: v300 = 1 + v274 && 2 <= v300
f_655(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, v300, 2, 9) -> f_657(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, v300, 2, 9) :|: 0 = 0
f_657(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, v300, 2, 9) -> f_659(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, v300, 2, 9) :|: TRUE
f_659(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, v300, 2, 9) -> f_661(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, v300, 2, 9) :|: TRUE
f_661(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v269, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, v300, 2, 9) -> f_663(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, v300, 2, 9) :|: 0 = 0
f_663(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, v300, 2, 9) -> f_665(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v300, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 2, 9) :|: v300 = 1 + v274
f_665(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v300, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 2, 9) -> f_667(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v300, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 2, 9) :|: TRUE
f_667(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v300, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 2, 9) -> f_669(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v300, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 2, 9) :|: TRUE
f_669(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v300, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 2, 9) -> f_626(v263, v264, v265, v266, v267, 0, v274, 1, v288, v271, v296, v300, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 9) :|: TRUE
f_626(v263, v264, v265, v266, v267, 0, v269, 1, v271, v272, v273, v274, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 9) -> f_627(v263, v264, v265, v266, v267, 0, v274, 1, v271, v269, v272, v273, v275, v280, v276, v281, v277, v282, v278, v283, v284, v285, v286, v287, v279, 3, 7, 4, 8, 9) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_627(v263:0, v264:0, v265:0, v266:0, v267:0, 0, v274:0, 1, v271:0, v269:0, v272:0, v273:0, v275:0, v280:0, v276:0, v281:0, v277:0, v282:0, v278:0, v283:0, v284:0, v285:0, v286:0, v287:0, v279:0, 3, 7, 4, 8, 9) -> f_627(v263:0, v264:0, v265:0, v266:0, v267:0, 0, 1 + v274:0, 1, v288:0, v274:0, v271:0, 8 + v288:0, v275:0, v280:0, v276:0, v281:0, v277:0, v282:0, v278:0, v283:0, v284:0, v285:0, v286:0, v287:0, v279:0, 3, 7, 4, 8, 9) :|: v263:0 > 1 && v274:0 < v263:0 && v288:0 % 4 = 0 && v288:0 > 0 && v274:0 > 0
Filtered unneeded arguments:
   f_627(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_627(x1, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_627(v263:0, v274:0) -> f_627(v263:0, 1 + v274:0) :|: v274:0 < v263:0 && v274:0 > 0 && v263:0 > 1

----------------------------------------

(16)
Obligation:
Rules:
f_627(v263:0, v274:0) -> f_627(v263:0, 1 + v274:0) :|: v274:0 < v263:0 && v274:0 > 0 && v263:0 > 1

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_627(v263:0:0, v274:0:0) -> f_627(v263:0:0, 1 + v274:0:0) :|: v274:0:0 < v263:0:0 && v274:0:0 > 0 && v263:0:0 > 1

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_627(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_627(v263:0:0, v274:0:0) -> f_627(v263:0:0, 1 + v274:0:0) :|: v274:0:0 < v263:0:0 && v274:0:0 > 0 && v263:0:0 > 1
The following rules are bounded:
f_627(v263:0:0, v274:0:0) -> f_627(v263:0:0, 1 + v274:0:0) :|: v274:0:0 < v263:0:0 && v274:0:0 > 0 && v263:0:0 > 1

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
