YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/5dzAD.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 872 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 13 ms]
        (9) IntTRS
        (10) TerminationGraphProcessor [EQUIVALENT, 2 ms]
        (11) YES
    (12) LLVM Symbolic Execution SCC
        (13) SCC2IRS [SOUND, 60 ms]
        (14) IntTRS
        (15) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (16) IntTRS
        (17) RankingReductionPairProof [EQUIVALENT, 8 ms]
        (18) IntTRS
        (19) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (20) IntTRS
        (21) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (22) YES
    (23) LLVM Symbolic Execution SCC
        (24) SCC2IRS [SOUND, 17 ms]
        (25) IntTRS
        (26) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (27) IntTRS
        (28) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (29) YES
    (30) LLVM Symbolic Execution SCC
        (31) SCC2IRS [SOUND, 12 ms]
        (32) IntTRS
        (33) TerminationGraphProcessor [EQUIVALENT, 4 ms]
        (34) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/5dzAD.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/5dzAD.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %4
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = load %4
		store %7, %2
		%8 = load %2
		%9 = icmp sge %8 0
		br %9, %10, %31
	10:
		br %11
	11:
		%12 = load %2
		%13 = icmp sge %12 0
		br %13, %14, %30
	14:
		store 1, %3
		%15 = load %3
		%16 = load %2
		%17 = icmp slt %15 %16
		br %17, %18, %27
	18:
		br %19
	19:
		%20 = load %3
		%21 = load %2
		%22 = icmp slt %20 %21
		br %22, %23, %26
	23:
		%24 = load %3
		%25 = mul i32 2, %24
		store %25, %3
		br %19
	26:
		br %27
	27:
		%28 = load %2
		%29 = sub i32 %28, 1
		store %29, %2
		br %11
	30:
		br %31
	31:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 4 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_447(v864, v865, v866, v867, v868, v869, 1, v871, 0, 2, v875, v876, v877, v878, 3, 4) -> f_449(v864, v865, v866, v867, v868, v869, 1, v871, 0, 2, v923, v875, v876, v877, v878, 3, 4) :|: 1 + v923 = v871 && 0 <= 1 + v923 && v923 <= 0
f_449(v864, v865, v866, v867, v868, v869, 1, v871, 0, 2, v923, v875, v876, v877, v878, 3, 4) -> f_451(v864, v865, v866, v867, v868, v869, 1, v871, 0, 2, v923, v875, v876, v877, v878, 3, 4) :|: TRUE
f_451(v864, v865, v866, v867, v868, v869, 1, v871, 0, 2, v923, v875, v876, v877, v878, 3, 4) -> f_453(v864, v865, v866, v867, v868, v869, 1, v871, 0, 2, v923, v875, v876, v877, v878, 3, 4) :|: TRUE
f_453(v864, v865, v866, v867, v868, v869, 1, v871, 0, 2, v923, v875, v876, v877, v878, 3, 4) -> f_455(v864, v865, v866, v867, v868, v869, 1, v923, v871, 0, 2, v875, v876, v877, v878, 3, 4) :|: 0 = 0
f_455(v864, v865, v866, v867, v868, v869, 1, v923, v871, 0, 2, v875, v876, v877, v878, 3, 4) -> f_456(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) :|: 0 <= v923 && v871 = 1 && v923 = 0 && 0 = 0
f_456(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) -> f_458(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) :|: 0 = 0
f_458(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) -> f_460(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) :|: TRUE
f_460(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) -> f_462(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) :|: TRUE
f_462(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) -> f_464(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) :|: 0 = 0
f_464(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) -> f_465(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) :|: 0 = 0
f_465(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) -> f_466(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) :|: 0 = 0
f_466(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) -> f_467(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) :|: TRUE
f_467(v864, v865, v866, v867, v868, v869, 1, 0, 2, v875, v876, v877, v878, 3, 4) -> f_444(v864, v865, v866, v867, v868, v869, 1, 0, 0, 2, 1, v875, v876, v877, v878, 3, 4) :|: TRUE
f_444(v864, v865, v866, v867, v868, v869, 1, v871, 0, 2, v874, v875, v876, v877, v878, 3, 4) -> f_447(v864, v865, v866, v867, v868, v869, 1, v871, 0, 2, v875, v876, v877, v878, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_447(v864:0, v865:0, v866:0, v867:0, v868:0, v869:0, 1, 1, 0, 2, v875:0, v876:0, v877:0, v878:0, 3, 4) -> f_447(v864:0, v865:0, v866:0, v867:0, v868:0, v869:0, 1, 0, 0, 2, v875:0, v876:0, v877:0, v878:0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_447(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_447(x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_447(cons_1) -> f_447(0) :|: TRUE && cons_1 = 1

----------------------------------------

(9)
Obligation:
Rules:
f_447(cons_1) -> f_447(0) :|: TRUE && cons_1 = 1

----------------------------------------

(10) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
SCC
----------------------------------------

(13) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 34 rulesP rules:
f_403(v661, v662, v663, v664, v665, v666, 1, v668, v669, v671, v672, v673, v674, v675, v676, 0, 3, 2, 4) -> f_406(v661, v662, v663, v664, v665, v666, 1, v668, v669, v678, v672, v673, v674, v675, v676, 0, 3, 2, 4) :|: v678 = 2 * v669 && 2 <= v678
f_406(v661, v662, v663, v664, v665, v666, 1, v668, v669, v678, v672, v673, v674, v675, v676, 0, 3, 2, 4) -> f_409(v661, v662, v663, v664, v665, v666, 1, v668, v669, v678, v672, v673, v674, v675, v676, 0, 3, 2, 4) :|: TRUE
f_409(v661, v662, v663, v664, v665, v666, 1, v668, v669, v678, v672, v673, v674, v675, v676, 0, 3, 2, 4) -> f_412(v661, v662, v663, v664, v665, v666, 1, v668, v669, v678, v672, v673, v674, v675, v676, 0, 3, 2, 4) :|: TRUE
f_412(v661, v662, v663, v664, v665, v666, 1, v668, v669, v678, v672, v673, v674, v675, v676, 0, 3, 2, 4) -> f_415(v661, v662, v663, v664, v665, v666, 1, v668, v678, v669, v672, v673, v674, v675, v676, 0, 3, 2, 4) :|: 0 = 0
f_415(v661, v662, v663, v664, v665, v666, 1, v668, v678, v669, v672, v673, v674, v675, v676, 0, 3, 2, 4) -> f_417(v661, v662, v663, v664, v665, v666, 1, v668, v678, v669, v672, v673, v674, v675, v676, 0, 3, 2, 4) :|: 0 = 0
f_417(v661, v662, v663, v664, v665, v666, 1, v668, v678, v669, v672, v673, v674, v675, v676, 0, 3, 2, 4) -> f_419(v661, v662, v663, v664, v665, v666, 1, v668, v678, v669, v672, v673, v674, v675, v676, 0, 3, 2, 4) :|: v678 < v668 && 3 <= v668 && 4 <= v672 && 4 <= v665
f_417(v661, v662, v663, v664, v665, v666, 1, v668, v678, v669, v672, v673, v674, v675, v676, 0, 3, 2, 4) -> f_420(v661, v662, v663, v664, v665, v666, 1, v668, v678, v669, v672, v673, v674, v675, v676, 0, 3, 2, 4) :|: v668 <= v678
f_419(v661, v662, v663, v664, v665, v666, 1, v668, v678, v669, v672, v673, v674, v675, v676, 0, 3, 2, 4) -> f_422(v661, v662, v663, v664, v665, v666, 1, v668, v678, v669, v672, v673, v674, v675, v676, 0, 3, 2, 4) :|: 0 = 0
f_422(v661, v662, v663, v664, v665, v666, 1, v668, v678, v669, v672, v673, v674, v675, v676, 0, 3, 2, 4) -> f_425(v661, v662, v663, v664, v665, v666, 1, v668, v678, v669, v672, v673, v674, v675, v676, 0, 3, 2, 4) :|: TRUE
f_425(v661, v662, v663, v664, v665, v666, 1, v668, v678, v669, v672, v673, v674, v675, v676, 0, 3, 2, 4) -> f_401(v661, v662, v663, v664, v665, v666, 1, v668, v678, v669, v678, v672, v673, v674, v675, v676, 0, 3, 2, 4) :|: TRUE
f_401(v661, v662, v663, v664, v665, v666, 1, v668, v669, v670, v671, v672, v673, v674, v675, v676, 0, 3, 2, 4) -> f_403(v661, v662, v663, v664, v665, v666, 1, v668, v669, v671, v672, v673, v674, v675, v676, 0, 3, 2, 4) :|: 0 = 0
f_420(v661, v662, v663, v664, v665, v666, 1, v668, v678, v669, v672, v673, v674, v675, v676, 0, 3, 2, 4) -> f_423(v661, v662, v663, v664, v665, v666, 1, v668, v678, 0, v669, v672, v673, v674, v675, v676, 3, 2, 4) :|: 0 = 0
f_423(v661, v662, v663, v664, v665, v666, 1, v668, v678, 0, v669, v672, v673, v674, v675, v676, 3, 2, 4) -> f_426(v661, v662, v663, v664, v665, v666, 1, v668, v678, 0, v669, v672, v673, v674, v675, v676, 3, 2, 4) :|: TRUE
f_426(v661, v662, v663, v664, v665, v666, 1, v668, v678, 0, v669, v672, v673, v674, v675, v676, 3, 2, 4) -> f_427(v661, v662, v663, v664, v665, v666, 1, v668, v678, 0, v669, v672, v673, v674, v675, v676, 3, 2, 4) :|: TRUE
f_427(v661, v662, v663, v664, v665, v666, 1, v668, v678, 0, v669, v672, v673, v674, v675, v676, 3, 2, 4) -> f_428(v661, v662, v663, v664, v665, v666, 1, v668, v678, 0, v669, v673, v674, v675, v676, 3, 2, 4) :|: 0 = 0
f_428(v661, v662, v663, v664, v665, v666, 1, v668, v678, 0, v669, v673, v674, v675, v676, 3, 2, 4) -> f_429(v661, v662, v663, v664, v665, v666, 1, v668, v678, 0, v669, v801, v673, v674, v675, v676, 3, 2, 4) :|: 1 + v801 = v668 && 1 <= v801
f_429(v661, v662, v663, v664, v665, v666, 1, v668, v678, 0, v669, v801, v673, v674, v675, v676, 3, 2, 4) -> f_430(v661, v662, v663, v664, v665, v666, 1, v668, v678, 0, v669, v801, v673, v674, v675, v676, 3, 2, 4) :|: TRUE
f_430(v661, v662, v663, v664, v665, v666, 1, v668, v678, 0, v669, v801, v673, v674, v675, v676, 3, 2, 4) -> f_431(v661, v662, v663, v664, v665, v666, 1, v668, v678, 0, v669, v801, v673, v674, v675, v676, 3, 2, 4) :|: TRUE
f_431(v661, v662, v663, v664, v665, v666, 1, v668, v678, 0, v669, v801, v673, v674, v675, v676, 3, 2, 4) -> f_432(v661, v662, v663, v664, v665, v666, 1, v801, v668, v678, 0, v669, v673, v674, v675, v676, 3, 2, 4) :|: 0 = 0
f_432(v661, v662, v663, v664, v665, v666, 1, v801, v668, v678, 0, v669, v673, v674, v675, v676, 3, 2, 4) -> f_433(v661, v662, v663, v664, v665, v666, 1, v801, v668, v678, 0, v669, v673, v674, v675, v676, 3, 2, 4) :|: 0 = 0
f_433(v661, v662, v663, v664, v665, v666, 1, v801, v668, v678, 0, v669, v673, v674, v675, v676, 3, 2, 4) -> f_434(v661, v662, v663, v664, v665, v666, 1, v801, v668, v678, 0, v669, v673, v674, v675, v676, 3, 2, 4) :|: TRUE
f_434(v661, v662, v663, v664, v665, v666, 1, v801, v668, v678, 0, v669, v673, v674, v675, v676, 3, 2, 4) -> f_435(v661, v662, v663, v664, v665, v666, 1, v801, v668, v678, 0, v669, v673, v674, v675, v676, 3, 2, 4) :|: TRUE
f_435(v661, v662, v663, v664, v665, v666, 1, v801, v668, v678, 0, v669, v673, v674, v675, v676, 3, 2, 4) -> f_436(v661, v662, v663, v664, v665, v666, 1, v801, v668, v678, 0, v669, v673, v674, v675, v676, 3, 2, 4) :|: 0 = 0
f_436(v661, v662, v663, v664, v665, v666, 1, v801, v668, v678, 0, v669, v673, v674, v675, v676, 3, 2, 4) -> f_437(v661, v662, v663, v664, v665, v666, 1, v801, v678, v668, 0, v669, v673, v674, v675, v676, 3, 2, 4) :|: 0 = 0
f_437(v661, v662, v663, v664, v665, v666, 1, v801, v678, v668, 0, v669, v673, v674, v675, v676, 3, 2, 4) -> f_438(v661, v662, v663, v664, v665, v666, 1, v801, v678, v668, 0, v669, v673, v674, v675, v676, 3, 2, 4) :|: 1 < v801 && 3 <= v668 && 4 <= v665 && 4 <= v678 && 2 <= v669
f_438(v661, v662, v663, v664, v665, v666, 1, v801, v678, v668, 0, v669, v673, v674, v675, v676, 3, 2, 4) -> f_440(v661, v662, v663, v664, v665, v666, 1, v801, v678, v668, 0, v669, v673, v674, v675, v676, 3, 2, 4) :|: 0 = 0
f_440(v661, v662, v663, v664, v665, v666, 1, v801, v678, v668, 0, v669, v673, v674, v675, v676, 3, 2, 4) -> f_442(v661, v662, v663, v664, v665, v666, 1, v801, v678, v668, 0, v669, v673, v674, v675, v676, 3, 2, 4) :|: TRUE
f_442(v661, v662, v663, v664, v665, v666, 1, v801, v678, v668, 0, v669, v673, v674, v675, v676, 3, 2, 4) -> f_445(v661, v662, v663, v664, v665, v666, 1, v801, v678, v668, 0, v669, v673, v674, v675, v676, 3, 2, 4) :|: TRUE
f_445(v661, v662, v663, v664, v665, v666, 1, v801, v678, v668, 0, v669, v673, v674, v675, v676, 3, 2, 4) -> f_446(v661, v662, v663, v664, v665, v666, 1, v801, v678, v668, 0, v669, v673, v674, v675, v676, 3, 2, 4) :|: TRUE
f_446(v897, v898, v899, v900, v901, v902, 1, v904, v905, v906, 0, v908, v909, v910, v911, v912, 3, 2, 4) -> f_448(v897, v898, v899, v900, v901, v902, 1, v904, v906, 0, v908, v905, v909, v910, v911, v912, 3, 2, 4) :|: 0 = 0
f_448(v897, v898, v899, v900, v901, v902, 1, v904, v906, 0, v908, v905, v909, v910, v911, v912, 3, 2, 4) -> f_450(v897, v898, v899, v900, v901, v902, 1, v904, 0, v908, v905, v906, v909, v910, v911, v912, 3, 2, 4) :|: 0 = 0
f_450(v897, v898, v899, v900, v901, v902, 1, v904, 0, v908, v905, v906, v909, v910, v911, v912, 3, 2, 4) -> f_452(v897, v898, v899, v900, v901, v902, 1, v904, v908, v905, v906, v909, v910, v911, v912, 0, 3, 2, 4) :|: 0 = 0
f_452(v897, v898, v899, v900, v901, v902, 1, v904, v908, v905, v906, v909, v910, v911, v912, 0, 3, 2, 4) -> f_454(v897, v898, v899, v900, v901, v902, 1, v904, v908, v905, v906, v909, v910, v911, v912, 0, 3, 2, 4) :|: TRUE
f_454(v897, v898, v899, v900, v901, v902, 1, v904, v908, v905, v906, v909, v910, v911, v912, 0, 3, 2, 4) -> f_401(v897, v898, v899, v900, v901, v902, 1, v904, 1, v908, v905, v906, v909, v910, v911, v912, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_403(v661:0, v662:0, v663:0, v664:0, v665:0, v666:0, 1, v668:0, v669:0, v671:0, v672:0, v673:0, v674:0, v675:0, v676:0, 0, 3, 2, 4) -> f_403(v661:0, v662:0, v663:0, v664:0, v665:0, v666:0, 1, v668:0, 2 * v669:0, 2 * v669:0, v672:0, v673:0, v674:0, v675:0, v676:0, 0, 3, 2, 4) :|: 2 * v669:0 > 1 && v668:0 > 2 && v668:0 > 2 * v669:0 && v665:0 > 3 && v672:0 > 3
f_403(v661:0, v662:0, v663:0, v664:0, v665:0, v666:0, 1, 1 + v801:0, v669:0, v671:0, v672:0, v673:0, v674:0, v675:0, v676:0, 0, 3, 2, 4) -> f_403(v661:0, v662:0, v663:0, v664:0, v665:0, v666:0, 1, v801:0, 1, 2 * v669:0, 1 + v801:0, v673:0, v674:0, v675:0, v676:0, 0, 3, 2, 4) :|: v801:0 > 1 && 3 < 2 * v669:0 && 2 * v669:0 >= 1 + v801:0 && v669:0 > 1 && v665:0 > 3
Filtered unneeded arguments:
   f_403(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_403(x5, x8, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_403(v665:0, v668:0, v669:0, v672:0) -> f_403(v665:0, v668:0, 2 * v669:0, v672:0) :|: v668:0 > 2 && 2 * v669:0 > 1 && v668:0 > 2 * v669:0 && v672:0 > 3 && v665:0 > 3
f_403(v665:0, sum~cons_1~v801:0, v669:0, v672:0) -> f_403(v665:0, v801:0, 1, 1 + v801:0) :|: 3 < 2 * v669:0 && v801:0 > 1 && 2 * v669:0 >= 1 + v801:0 && v665:0 > 3 && v669:0 > 1 && sum~cons_1~v801:0 = 1 + v801:0

----------------------------------------

(14)
Obligation:
Rules:
f_403(v665:0, v668:0, v669:0, v672:0) -> f_403(v665:0, v668:0, 2 * v669:0, v672:0) :|: v668:0 > 2 && 2 * v669:0 > 1 && v668:0 > 2 * v669:0 && v672:0 > 3 && v665:0 > 3
f_403(x, x1, x2, x3) -> f_403(x, x4, 1, 1 + x4) :|: 3 < 2 * x2 && x4 > 1 && 2 * x2 >= 1 + x4 && x > 3 && x2 > 1 && x1 = 1 + x4

----------------------------------------

(15) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(16)
Obligation:
Rules:
f_403(x:0, sum~cons_1~x4:0, x2:0, x3:0) -> f_403(x:0, x4:0, 1, 1 + x4:0) :|: x:0 > 3 && x2:0 > 1 && 2 * x2:0 >= 1 + x4:0 && x4:0 > 1 && 3 < 2 * x2:0 && sum~cons_1~x4:0 = 1 + x4:0
f_403(v665:0:0, v668:0:0, v669:0:0, v672:0:0) -> f_403(v665:0:0, v668:0:0, 2 * v669:0:0, v672:0:0) :|: v672:0:0 > 3 && v665:0:0 > 3 && v668:0:0 > 2 * v669:0:0 && 2 * v669:0:0 > 1 && v668:0:0 > 2

----------------------------------------

(17) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_403 ] = f_403_2

The following rules are decreasing:
f_403(x:0, sum~cons_1~x4:0, x2:0, x3:0) -> f_403(x:0, x4:0, 1, 1 + x4:0) :|: x:0 > 3 && x2:0 > 1 && 2 * x2:0 >= 1 + x4:0 && x4:0 > 1 && 3 < 2 * x2:0 && sum~cons_1~x4:0 = 1 + x4:0

The following rules are bounded:
f_403(x:0, sum~cons_1~x4:0, x2:0, x3:0) -> f_403(x:0, x4:0, 1, 1 + x4:0) :|: x:0 > 3 && x2:0 > 1 && 2 * x2:0 >= 1 + x4:0 && x4:0 > 1 && 3 < 2 * x2:0 && sum~cons_1~x4:0 = 1 + x4:0
f_403(v665:0:0, v668:0:0, v669:0:0, v672:0:0) -> f_403(v665:0:0, v668:0:0, 2 * v669:0:0, v672:0:0) :|: v672:0:0 > 3 && v665:0:0 > 3 && v668:0:0 > 2 * v669:0:0 && 2 * v669:0:0 > 1 && v668:0:0 > 2


----------------------------------------

(18)
Obligation:
Rules:
f_403(v665:0:0, v668:0:0, v669:0:0, v672:0:0) -> f_403(v665:0:0, v668:0:0, 2 * v669:0:0, v672:0:0) :|: v672:0:0 > 3 && v665:0:0 > 3 && v668:0:0 > 2 * v669:0:0 && 2 * v669:0:0 > 1 && v668:0:0 > 2

----------------------------------------

(19) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(20)
Obligation:
Rules:
f_403(v665:0:0:0, v668:0:0:0, v669:0:0:0, v672:0:0:0) -> f_403(v665:0:0:0, v668:0:0:0, 2 * v669:0:0:0, v672:0:0:0) :|: 2 * v669:0:0:0 > 1 && v668:0:0:0 > 2 && v668:0:0:0 > 2 * v669:0:0:0 && v665:0:0:0 > 3 && v672:0:0:0 > 3

----------------------------------------

(21) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_403(x, x1, x2, x3)] = -1 + x1 - 2*x2

The following rules are decreasing:
f_403(v665:0:0:0, v668:0:0:0, v669:0:0:0, v672:0:0:0) -> f_403(v665:0:0:0, v668:0:0:0, 2 * v669:0:0:0, v672:0:0:0) :|: 2 * v669:0:0:0 > 1 && v668:0:0:0 > 2 && v668:0:0:0 > 2 * v669:0:0:0 && v665:0:0:0 > 3 && v672:0:0:0 > 3
The following rules are bounded:
f_403(v665:0:0:0, v668:0:0:0, v669:0:0:0, v672:0:0:0) -> f_403(v665:0:0:0, v668:0:0:0, 2 * v669:0:0:0, v672:0:0:0) :|: 2 * v669:0:0:0 > 1 && v668:0:0:0 > 2 && v668:0:0:0 > 2 * v669:0:0:0 && v665:0:0:0 > 3 && v672:0:0:0 > 3

----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
SCC
----------------------------------------

(24) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_261(v90, v91, v92, v93, v94, v95, 1, v98, v97, v99, v100, v101, v102, 0, 3, 2, 4) -> f_262(v90, v91, v92, v93, v94, v95, 1, v98, v97, v99, v100, v101, v102, 0, 3, 2, 4) :|: 0 = 0
f_262(v90, v91, v92, v93, v94, v95, 1, v98, v97, v99, v100, v101, v102, 0, 3, 2, 4) -> f_263(v90, v91, v92, v93, v94, v95, 1, v98, v97, v99, v100, v101, v102, 0, 3, 2, 4) :|: v98 < v94 && 3 <= v94
f_263(v90, v91, v92, v93, v94, v95, 1, v98, v97, v99, v100, v101, v102, 0, 3, 2, 4) -> f_265(v90, v91, v92, v93, v94, v95, 1, v98, v97, v99, v100, v101, v102, 0, 3, 2, 4) :|: 0 = 0
f_265(v90, v91, v92, v93, v94, v95, 1, v98, v97, v99, v100, v101, v102, 0, 3, 2, 4) -> f_267(v90, v91, v92, v93, v94, v95, 1, v98, v97, v99, v100, v101, v102, 0, 3, 2, 4) :|: TRUE
f_267(v90, v91, v92, v93, v94, v95, 1, v98, v97, v99, v100, v101, v102, 0, 3, 2, 4) -> f_269(v90, v91, v92, v93, v94, v95, 1, v98, v99, v100, v101, v102, 0, 3, 2, 4) :|: 0 = 0
f_269(v90, v91, v92, v93, v94, v95, 1, v98, v99, v100, v101, v102, 0, 3, 2, 4) -> f_271(v90, v91, v92, v93, v94, v95, 1, v98, v108, v99, v100, v101, v102, 0, 3, 2, 4) :|: v108 = 2 * v98 && 4 <= v108
f_271(v90, v91, v92, v93, v94, v95, 1, v98, v108, v99, v100, v101, v102, 0, 3, 2, 4) -> f_273(v90, v91, v92, v93, v94, v95, 1, v98, v108, v99, v100, v101, v102, 0, 3, 2, 4) :|: TRUE
f_273(v90, v91, v92, v93, v94, v95, 1, v98, v108, v99, v100, v101, v102, 0, 3, 2, 4) -> f_275(v90, v91, v92, v93, v94, v95, 1, v98, v108, v99, v100, v101, v102, 0, 3, 2, 4) :|: TRUE
f_275(v90, v91, v92, v93, v94, v95, 1, v98, v108, v99, v100, v101, v102, 0, 3, 2, 4) -> f_260(v90, v91, v92, v93, v94, v95, 1, v98, v108, v99, v100, v101, v102, 0, 3, 2, 4) :|: TRUE
f_260(v90, v91, v92, v93, v94, v95, 1, v97, v98, v99, v100, v101, v102, 0, 3, 2, 4) -> f_261(v90, v91, v92, v93, v94, v95, 1, v98, v97, v99, v100, v101, v102, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_261(v90:0, v91:0, v92:0, v93:0, v94:0, v95:0, 1, v98:0, v97:0, v99:0, v100:0, v101:0, v102:0, 0, 3, 2, 4) -> f_261(v90:0, v91:0, v92:0, v93:0, v94:0, v95:0, 1, 2 * v98:0, v98:0, v99:0, v100:0, v101:0, v102:0, 0, 3, 2, 4) :|: v94:0 > 2 && 3 < 2 * v98:0 && v98:0 < v94:0
Filtered unneeded arguments:
   f_261(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_261(x5, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_261(v94:0, v98:0) -> f_261(v94:0, 2 * v98:0) :|: 3 < 2 * v98:0 && v98:0 < v94:0 && v94:0 > 2

----------------------------------------

(25)
Obligation:
Rules:
f_261(v94:0, v98:0) -> f_261(v94:0, 2 * v98:0) :|: 3 < 2 * v98:0 && v98:0 < v94:0 && v94:0 > 2

----------------------------------------

(26) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(27)
Obligation:
Rules:
f_261(v94:0:0, v98:0:0) -> f_261(v94:0:0, 2 * v98:0:0) :|: 3 < 2 * v98:0:0 && v98:0:0 < v94:0:0 && v94:0:0 > 2

----------------------------------------

(28) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_261(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_261(v94:0:0, v98:0:0) -> f_261(v94:0:0, 2 * v98:0:0) :|: 3 < 2 * v98:0:0 && v98:0:0 < v94:0:0 && v94:0:0 > 2
The following rules are bounded:
f_261(v94:0:0, v98:0:0) -> f_261(v94:0:0, 2 * v98:0:0) :|: 3 < 2 * v98:0:0 && v98:0:0 < v94:0:0 && v94:0:0 > 2

----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
SCC
----------------------------------------

(31) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_212(v20, v21, v22, v23, v24, v25, 1, v29, v27, 0, v30, v31, v32, v33, 3, 4) -> f_214(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) :|: 0 <= v29 && v27 = 1 && v29 = 0 && 0 = 0
f_214(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) -> f_217(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) :|: 0 = 0
f_217(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) -> f_221(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) :|: TRUE
f_221(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) -> f_225(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) :|: TRUE
f_225(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) -> f_229(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) :|: 0 = 0
f_229(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) -> f_232(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) :|: 0 = 0
f_232(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) -> f_235(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) :|: 0 = 0
f_235(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) -> f_238(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) :|: TRUE
f_238(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) -> f_241(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) :|: 0 = 0
f_241(v20, v21, v22, v23, 1, v25, 0, v30, v31, v32, v33, 3, 4) -> f_243(v20, v21, v22, v23, 1, v25, 0, -1, v30, v31, v32, v33, 3, 4) :|: 0 = 0
f_243(v20, v21, v22, v23, 1, v25, 0, -1, v30, v31, v32, v33, 3, 4) -> f_245(v20, v21, v22, v23, 1, v25, 0, -1, v30, v31, v32, v33, 3, 4) :|: TRUE
f_245(v20, v21, v22, v23, 1, v25, 0, -1, v30, v31, v32, v33, 3, 4) -> f_248(v20, v21, v22, v23, 1, v25, 0, -1, v30, v31, v32, v33, 3, 4) :|: TRUE
f_248(v20, v21, v22, v23, 1, v25, 0, -1, v30, v31, v32, v33, 3, 4) -> f_209(v20, v21, v22, v23, 1, v25, 1, 0, 0, -1, v30, v31, v32, v33, 3, 4) :|: TRUE
f_209(v20, v21, v22, v23, v24, v25, 1, v27, 0, v29, v30, v31, v32, v33, 3, 4) -> f_212(v20, v21, v22, v23, v24, v25, 1, v29, v27, 0, v30, v31, v32, v33, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_212(v20:0, v21:0, v22:0, v23:0, v24:0, v25:0, 1, 0, 1, 0, v30:0, v31:0, v32:0, v33:0, 3, 4) -> f_212(v20:0, v21:0, v22:0, v23:0, 1, v25:0, 1, -1, 0, 0, v30:0, v31:0, v32:0, v33:0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_212(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_212(x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_212(cons_0, cons_1) -> f_212(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(32)
Obligation:
Rules:
f_212(cons_0, cons_1) -> f_212(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(33) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(34)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
