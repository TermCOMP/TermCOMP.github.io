YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/OPr6L.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 67 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3053 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 42 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/OPr6L.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/OPr6L.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = load %2
		%7 = icmp slt %6 1
		br %7, %8, %9
	8:
		store 1, %2
		br %9
	9:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%10 = load %2
		%11 = sext i32 %10 to i64
		%12 = mul i64 %11, 1
		%13 = alloca i8, numElementsLit: %12, align 16
		store %13, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%14 = load %3
		%15 = load %4
		%16 = icmp ule %14 %15
		br %16, %17, %37
	17:
		%18 = load %4
		%19 = load %3
		%20 = load %2
		%21 = sext i32 %20 to i64
		%22 = mul i64 %21, 1
		%23 = getelementptr %19, %22
		%24 = icmp ult %18 %23
		br %24, %25, %37
	25:
		%26 = load %4
		store 0, %26
		br %27
	27:
		%28 = load %3
		%29 = load %28
		%30 = sext i8 %29 to i32
		%31 = icmp ne %30 0
		br %31, %32, %36
	32:
		%33 = load %3
		store 0, %33
		%34 = load %3
		%35 = getelementptr %34, 1
		store %35, %3
		br %27
	36:
		br %37
	37:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_299(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v359, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 2, 8) -> f_300(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v359, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 2, 8) :|: TRUE
f_300(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v359, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 2, 8) -> f_301(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 2, 8) :|: 0 = 0
f_301(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 2, 8) -> f_302(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 5, 2, 8) :|: v367 != 0 && v360 < v355 && 4 <= v355 && 5 <= v357 && 4 <= v365
f_302(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 5, 2, 8) -> f_304(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 5, 2, 8) :|: 0 = 0
f_304(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 5, 2, 8) -> f_306(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 5, 2, 8) :|: TRUE
f_306(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 5, 2, 8) -> f_308(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 5, 2, 8) :|: 0 = 0
f_308(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 5, 2, 8) -> f_310(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 5, 2, 8) :|: TRUE
f_310(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 5, 2, 8) -> f_311(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v361, v362, v363, v364, v365, v358, v366, 3, 7, 4, 5, 2, 8) :|: 0 = 0
f_311(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v361, v362, v363, v364, v365, v358, v366, 3, 7, 4, 5, 2, 8) -> f_312(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v443, v361, v362, v363, v364, v365, v358, v366, 3, 7, 4, 5, 2, 8) :|: v443 = 1 + v360 && 4 <= v443
f_312(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v443, v361, v362, v363, v364, v365, v358, v366, 3, 7, 4, 5, 2, 8) -> f_313(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v443, v361, v362, v363, v364, v365, v358, v366, 3, 7, 4, 5, 2, 8) :|: TRUE
f_313(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v443, v361, v362, v363, v364, v365, v358, v366, 3, 7, 4, 5, 2, 8) -> f_314(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v443, v361, v362, v363, v364, v365, v358, v366, 3, 7, 4, 5, 2, 8) :|: TRUE
f_314(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v443, v361, v362, v363, v364, v365, v358, v366, 3, 7, 4, 5, 2, 8) -> f_298(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v367, v443, v361, v362, v363, v364, v365, v366, 3, 7, 4, 2, 8) :|: TRUE
f_298(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v358, v359, v360, v361, v362, v363, v364, v365, v366, 3, 7, 4, 2, 8) -> f_299(v348, v349, v350, v351, v352, 0, v354, v355, 1, v357, v360, v359, v358, v361, v362, v363, v364, v365, v366, 3, 7, 4, 2, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_299(v348:0, v349:0, v350:0, v351:0, v352:0, 0, v354:0, v355:0, 1, v357:0, v360:0, v359:0, v358:0, v361:0, v362:0, v363:0, v364:0, v365:0, v366:0, 3, 7, 4, 2, 8) -> f_299(v348:0, v349:0, v350:0, v351:0, v352:0, 0, v354:0, v355:0, 1, v357:0, 1 + v360:0, v367:0, v360:0, v361:0, v362:0, v363:0, v364:0, v365:0, v366:0, 3, 7, 4, 2, 8) :|: v360:0 < v355:0 && v367:0 < 0 && v355:0 > 3 && v357:0 > 4 && v360:0 > 2 && v365:0 > 3
f_299(v348:0, v349:0, v350:0, v351:0, v352:0, 0, v354:0, v355:0, 1, v357:0, v360:0, v359:0, v358:0, v361:0, v362:0, v363:0, v364:0, v365:0, v366:0, 3, 7, 4, 2, 8) -> f_299(v348:0, v349:0, v350:0, v351:0, v352:0, 0, v354:0, v355:0, 1, v357:0, 1 + v360:0, v367:0, v360:0, v361:0, v362:0, v363:0, v364:0, v365:0, v366:0, 3, 7, 4, 2, 8) :|: v360:0 < v355:0 && v367:0 > 0 && v355:0 > 3 && v357:0 > 4 && v360:0 > 2 && v365:0 > 3
Filtered unneeded arguments:
   f_299(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_299(x8, x10, x11, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_299(v355:0, v357:0, v360:0, v365:0) -> f_299(v355:0, v357:0, 1 + v360:0, v365:0) :|: v355:0 > 3 && v360:0 < v355:0 && v357:0 > 4 && v365:0 > 3 && v360:0 > 2

----------------------------------------

(8)
Obligation:
Rules:
f_299(v355:0, v357:0, v360:0, v365:0) -> f_299(v355:0, v357:0, 1 + v360:0, v365:0) :|: v355:0 > 3 && v360:0 < v355:0 && v357:0 > 4 && v365:0 > 3 && v360:0 > 2

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_299(v355:0:0, v357:0:0, v360:0:0, v365:0:0) -> f_299(v355:0:0, v357:0:0, 1 + v360:0:0, v365:0:0) :|: v365:0:0 > 3 && v360:0:0 > 2 && v357:0:0 > 4 && v360:0:0 < v355:0:0 && v355:0:0 > 3

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_299(x, x1, x2, x3)] = -1 + x - x2

The following rules are decreasing:
f_299(v355:0:0, v357:0:0, v360:0:0, v365:0:0) -> f_299(v355:0:0, v357:0:0, 1 + v360:0:0, v365:0:0) :|: v365:0:0 > 3 && v360:0:0 > 2 && v357:0:0 > 4 && v360:0:0 < v355:0:0 && v355:0:0 > 3
The following rules are bounded:
f_299(v355:0:0, v357:0:0, v360:0:0, v365:0:0) -> f_299(v355:0:0, v357:0:0, 1 + v360:0:0, v365:0:0) :|: v365:0:0 > 3 && v360:0:0 > 2 && v357:0:0 > 4 && v360:0:0 < v355:0:0 && v355:0:0 > 3

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
