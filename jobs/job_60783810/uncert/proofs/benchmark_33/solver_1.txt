YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/xvvq9.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 39 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 632 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 4 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 9 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 3 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/xvvq9.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/xvvq9.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%7 = alloca i8, numElementsLit: 4, align 16
		%8 = bitcast *i8 %7 to *i32
		store %8, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %6
		%11 = load %3
		%12 = load %5
		store %11, %12
		%13 = load %4
		%14 = load %6
		store %13, %14
		br %15
	15:
		%16 = load %5
		%17 = load %16
		%18 = icmp sgt %17 0
		br %18, %19, %23
	19:
		%20 = load %6
		%21 = load %20
		%22 = icmp sgt %21 0
		br %23
	23:
		%24 = phi [0, %15], [%22, %19]
		br %24, %25, %54
	25:
		%26 = load %5
		%27 = load %26
		%28 = load %6
		%29 = load %28
		%30 = icmp sgt %27 %29
		br %30, %31, %42
	31:
		br %32
	32:
		%33 = load %5
		%34 = load %33
		%35 = icmp sgt %34 0
		br %35, %36, %41
	36:
		%37 = load %5
		%38 = load %37
		%39 = sub i32 %38, 1
		%40 = load %5
		store %39, %40
		br %32
	41:
		br %53
	42:
		br %43
	43:
		%44 = load %6
		%45 = load %44
		%46 = icmp sgt %45 0
		br %46, %47, %52
	47:
		%48 = load %6
		%49 = load %48
		%50 = sub i32 %49, 1
		%51 = load %6
		store %50, %51
		br %43
	52:
		br %53
	53:
		br %15
	54:
		%55 = load %5
		%56 = load %55
		%57 = load %6
		%58 = load %57
		%59 = add i32 %56, %58
		ret %59

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 81
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_398(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 4, 8) -> f_401(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v108, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 4, 8) :|: 0 = 0
f_401(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v108, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 4, 8) -> f_404(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v108, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) :|: 0 < v109 && 2 <= v108 && 2 <= v99
f_404(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v108, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) -> f_408(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v108, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) :|: 0 = 0
f_408(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v108, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) -> f_412(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v108, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) :|: TRUE
f_412(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v108, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) -> f_416(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v108, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) :|: 0 = 0
f_416(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v108, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) -> f_420(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) :|: 0 = 0
f_420(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) -> f_424(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v119, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) :|: 1 + v119 = v109 && 0 <= v119
f_424(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v119, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) -> f_428(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v119, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) :|: 0 = 0
f_428(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v119, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) -> f_432(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v119, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) :|: TRUE
f_432(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v119, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) -> f_435(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v119, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) :|: TRUE
f_435(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v119, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 2, 4, 8) -> f_396(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v109, v119, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 4, 8) :|: TRUE
f_396(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 4, 8) -> f_398(v98, v99, v100, v101, v102, v103, v104, v105, 1, 0, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_398(v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, v104:0, v105:0, 1, 0, v108:0, 1 + v119:0, v110:0, v111:0, v112:0, v113:0, v114:0, v115:0, v116:0, v117:0, 3, 7, 4, 8) -> f_398(v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, v104:0, v105:0, 1, 0, 1 + v119:0, v119:0, v110:0, v111:0, v112:0, v113:0, v114:0, v115:0, v116:0, v117:0, 3, 7, 4, 8) :|: v108:0 > 1 && v119:0 > -1 && v99:0 > 1
Filtered unneeded arguments:
   f_398(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_398(x2, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_398(v99:0, v108:0, sum~cons_1~v119:0) -> f_398(v99:0, 1 + v119:0, v119:0) :|: v119:0 > -1 && v99:0 > 1 && v108:0 > 1 && sum~cons_1~v119:0 = 1 + v119:0

----------------------------------------

(9)
Obligation:
Rules:
f_398(v99:0, v108:0, sum~cons_1~v119:0) -> f_398(v99:0, 1 + v119:0, v119:0) :|: v119:0 > -1 && v99:0 > 1 && v108:0 > 1 && sum~cons_1~v119:0 = 1 + v119:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_398(v99:0:0, v108:0:0, sum~cons_1~v119:0:0) -> f_398(v99:0:0, 1 + v119:0:0, v119:0:0) :|: v119:0:0 > -1 && v99:0:0 > 1 && v108:0:0 > 1 && sum~cons_1~v119:0:0 = 1 + v119:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_398 ] = f_398_3

The following rules are decreasing:
f_398(v99:0:0, v108:0:0, sum~cons_1~v119:0:0) -> f_398(v99:0:0, 1 + v119:0:0, v119:0:0) :|: v119:0:0 > -1 && v99:0:0 > 1 && v108:0:0 > 1 && sum~cons_1~v119:0:0 = 1 + v119:0:0

The following rules are bounded:
f_398(v99:0:0, v108:0:0, sum~cons_1~v119:0:0) -> f_398(v99:0:0, 1 + v119:0:0, v119:0:0) :|: v119:0:0 > -1 && v99:0:0 > 1 && v108:0:0 > 1 && sum~cons_1~v119:0:0 = 1 + v119:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_394(v77, v78, v79, v80, v81, v82, v83, v84, 1, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) -> f_397(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v86, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_397(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v86, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) -> f_399(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v86, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) :|: 0 < v87 && 2 <= v86
f_399(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v86, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) -> f_402(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v86, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_402(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v86, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) -> f_406(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v86, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) :|: TRUE
f_406(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v86, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) -> f_410(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v86, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_410(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v86, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) -> f_414(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_414(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) -> f_418(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v118, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) :|: 1 + v118 = v87 && 0 <= v118
f_418(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v118, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) -> f_422(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v118, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_422(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v118, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) -> f_426(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v118, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) :|: TRUE
f_426(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v118, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) -> f_430(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v118, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) :|: TRUE
f_430(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v118, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) -> f_391(v77, v78, v79, v80, v81, v82, v83, v84, 1, v87, v118, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) :|: TRUE
f_391(v77, v78, v79, v80, v81, v82, v83, v84, 1, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) -> f_394(v77, v78, v79, v80, v81, v82, v83, v84, 1, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_394(v77:0, v78:0, v79:0, v80:0, v81:0, v82:0, v83:0, v84:0, 1, v86:0, 1 + v118:0, v88:0, v89:0, v90:0, v91:0, v92:0, v93:0, v94:0, v95:0, 0, 3, 7, 2, 4, 8) -> f_394(v77:0, v78:0, v79:0, v80:0, v81:0, v82:0, v83:0, v84:0, 1, 1 + v118:0, v118:0, v88:0, v89:0, v90:0, v91:0, v92:0, v93:0, v94:0, v95:0, 0, 3, 7, 2, 4, 8) :|: v86:0 > 1 && v118:0 > -1
Filtered unneeded arguments:
   f_394(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_394(x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_394(v86:0, sum~cons_1~v118:0) -> f_394(1 + v118:0, v118:0) :|: v86:0 > 1 && v118:0 > -1 && sum~cons_1~v118:0 = 1 + v118:0

----------------------------------------

(16)
Obligation:
Rules:
f_394(v86:0, sum~cons_1~v118:0) -> f_394(1 + v118:0, v118:0) :|: v86:0 > 1 && v118:0 > -1 && sum~cons_1~v118:0 = 1 + v118:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_394(v86:0:0, sum~cons_1~v118:0:0) -> f_394(1 + v118:0:0, v118:0:0) :|: v86:0:0 > 1 && v118:0:0 > -1 && sum~cons_1~v118:0:0 = 1 + v118:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_394(x, x1)] = x1

The following rules are decreasing:
f_394(v86:0:0, sum~cons_1~v118:0:0) -> f_394(1 + v118:0:0, v118:0:0) :|: v86:0:0 > 1 && v118:0:0 > -1 && sum~cons_1~v118:0:0 = 1 + v118:0:0
The following rules are bounded:
f_394(v86:0:0, sum~cons_1~v118:0:0) -> f_394(1 + v118:0:0, v118:0:0) :|: v86:0:0 > 1 && v118:0:0 > -1 && sum~cons_1~v118:0:0 = 1 + v118:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
