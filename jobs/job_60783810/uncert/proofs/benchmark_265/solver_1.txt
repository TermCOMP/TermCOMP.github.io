YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/VjWQ1.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 72 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1754 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 34 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) IntTRS
        (14) TerminationGraphProcessor [EQUIVALENT, 0 ms]
        (15) YES
    (16) LLVM Symbolic Execution SCC
        (17) SCC2IRS [SOUND, 13 ms]
        (18) IntTRS
        (19) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (20) IntTRS
        (21) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (22) YES
    (23) LLVM Symbolic Execution SCC
        (24) SCC2IRS [SOUND, 15 ms]
        (25) IntTRS
        (26) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (27) IntTRS
        (28) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/VjWQ1.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/VjWQ1.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %4
		%6 = load %4
		%7 = icmp sgt %6 0
		br %7, %8, %26
	8:
		store 0, %2
		store 1, %3
		br %9
	9:
		%10 = load %3
		%11 = load %4
		%12 = icmp sle %10 %11
		br %12, %13, %25
	13:
		%14 = call i32 @__VERIFIER_nondet_int()
		%15 = icmp ne %14 0
		br %15, %16, %19
	16:
		%17 = load %2
		%18 = add i32 %17, 1
		store %18, %2
		br %22
	19:
		%20 = load %2
		%21 = sub i32 %20, 1
		store %21, %2
		br %22
	22:
		%23 = load %3
		%24 = add i32 %23, 1
		store %24, %3
		br %9
	25:
		br %26
	26:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 46 rulesP rules:
f_595(v1559, v1560, v1561, v1562, v1563, 1, v1565, v1566, v1567, v1568, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) -> f_597(v1559, v1560, v1561, v1562, v1563, 1, v1565, v1566, v1567, v1568, v1631, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) :|: v1631 = 1 + v1565 && 3 <= v1631
f_597(v1559, v1560, v1561, v1562, v1563, 1, v1565, v1566, v1567, v1568, v1631, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) -> f_599(v1559, v1560, v1561, v1562, v1563, 1, v1565, v1566, v1567, v1568, v1631, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) :|: TRUE
f_599(v1559, v1560, v1561, v1562, v1563, 1, v1565, v1566, v1567, v1568, v1631, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) -> f_601(v1559, v1560, v1561, v1562, v1563, 1, v1565, v1566, v1567, v1568, v1631, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) :|: TRUE
f_601(v1559, v1560, v1561, v1562, v1563, 1, v1565, v1566, v1567, v1568, v1631, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) -> f_603(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1566, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) :|: 0 = 0
f_603(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1566, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) -> f_605(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1566, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) :|: 0 = 0
f_605(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1566, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) -> f_607(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1566, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) :|: v1631 <= v1563 && 3 <= v1563
f_607(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1566, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) -> f_611(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1566, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) :|: 0 = 0
f_611(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1566, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) -> f_615(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1566, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) :|: TRUE
f_615(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1566, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) -> f_619(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1750, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) :|: TRUE
f_619(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1750, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) -> f_623(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1750, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) :|: v1750 != 0
f_619(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1750, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) -> f_624(v1559, v1560, v1561, v1562, v1563, 1, v1631, 0, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 3, 2, 4) :|: v1750 = 0
f_623(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1750, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) -> f_627(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1750, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) :|: 0 = 0
f_627(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1750, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) -> f_631(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1750, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) :|: TRUE
f_631(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1750, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) -> f_669(v1559, v1560, v1561, v1562, v1563, 1, v1631, v1750, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1571, 3, 2, 4) :|: TRUE
f_669(v2139, v2140, v2141, v2142, v2143, 1, v2145, v2146, v2147, v2148, v2149, v2150, v2151, v2152, v2153, v2154, v2155, 0, v2157, 3, 2, 4) -> f_672(v2139, v2140, v2141, v2142, v2143, 1, v2145, v2146, v2147, v2148, v2149, v2157, v2151, v2152, v2153, v2154, v2155, 0, 3, 2, 4) :|: 0 = 0
f_672(v2139, v2140, v2141, v2142, v2143, 1, v2145, v2146, v2147, v2148, v2149, v2157, v2151, v2152, v2153, v2154, v2155, 0, 3, 2, 4) -> f_674(v2139, v2140, v2141, v2142, v2143, 1, v2145, v2146, v2147, v2148, v2149, v2157, v2198, v2152, v2153, v2154, v2155, 0, 3, 2, 4) :|: v2198 = 1 + v2157
f_674(v2139, v2140, v2141, v2142, v2143, 1, v2145, v2146, v2147, v2148, v2149, v2157, v2198, v2152, v2153, v2154, v2155, 0, 3, 2, 4) -> f_676(v2139, v2140, v2141, v2142, v2143, 1, v2145, v2146, v2147, v2148, v2149, v2157, v2198, v2152, v2153, v2154, v2155, 0, 3, 2, 4) :|: TRUE
f_676(v2139, v2140, v2141, v2142, v2143, 1, v2145, v2146, v2147, v2148, v2149, v2157, v2198, v2152, v2153, v2154, v2155, 0, 3, 2, 4) -> f_678(v2139, v2140, v2141, v2142, v2143, 1, v2145, v2146, v2147, v2148, v2149, v2157, v2198, v2152, v2153, v2154, v2155, 0, 3, 2, 4) :|: TRUE
f_678(v2139, v2140, v2141, v2142, v2143, 1, v2145, v2146, v2147, v2148, v2149, v2157, v2198, v2152, v2153, v2154, v2155, 0, 3, 2, 4) -> f_592(v2139, v2140, v2141, v2142, v2143, 1, v2145, v2146, v2147, v2148, v2149, v2157, v2198, v2152, v2153, v2154, v2155, 0, 3, 2, 4) :|: TRUE
f_592(v1559, v1560, v1561, v1562, v1563, 1, v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) -> f_595(v1559, v1560, v1561, v1562, v1563, 1, v1565, v1566, v1567, v1568, v1570, v1571, v1572, v1573, v1574, v1575, 0, 3, 2, 4) :|: 0 = 0
f_624(v1559, v1560, v1561, v1562, v1563, 1, v1631, 0, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 3, 2, 4) -> f_628(v1559, v1560, v1561, v1562, v1563, 1, v1631, 0, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 3, 2, 4) :|: 0 = 0
f_628(v1559, v1560, v1561, v1562, v1563, 1, v1631, 0, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 3, 2, 4) -> f_632(v1559, v1560, v1561, v1562, v1563, 1, v1631, 0, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 3, 2, 4) :|: TRUE
f_632(v1559, v1560, v1561, v1562, v1563, 1, v1631, 0, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, 3, 2, 4) -> f_671(v1559, v1560, v1561, v1562, v1563, 1, v1631, 0, v1567, v1568, v1565, v1570, v1571, v1572, v1573, v1574, v1575, v1571, 3, 2, 4) :|: TRUE
f_671(v2180, v2181, v2182, v2183, v2184, 1, v2186, 0, v2188, v2189, v2190, v2191, v2192, v2193, v2194, v2195, v2196, v2197, 3, 2, 4) -> f_673(v2180, v2181, v2182, v2183, v2184, 1, v2186, 0, v2197, v2189, v2190, v2191, v2192, v2193, v2194, v2195, v2196, 3, 2, 4) :|: 0 = 0
f_673(v2180, v2181, v2182, v2183, v2184, 1, v2186, 0, v2197, v2189, v2190, v2191, v2192, v2193, v2194, v2195, v2196, 3, 2, 4) -> f_675(v2180, v2181, v2182, v2183, v2184, 1, v2186, 0, v2197, v2199, v2190, v2191, v2192, v2193, v2194, v2195, v2196, 3, 2, 4) :|: 1 + v2199 = v2197
f_675(v2180, v2181, v2182, v2183, v2184, 1, v2186, 0, v2197, v2199, v2190, v2191, v2192, v2193, v2194, v2195, v2196, 3, 2, 4) -> f_677(v2180, v2181, v2182, v2183, v2184, 1, v2186, 0, v2197, v2199, v2190, v2191, v2192, v2193, v2194, v2195, v2196, 3, 2, 4) :|: TRUE
f_677(v2180, v2181, v2182, v2183, v2184, 1, v2186, 0, v2197, v2199, v2190, v2191, v2192, v2193, v2194, v2195, v2196, 3, 2, 4) -> f_679(v2180, v2181, v2182, v2183, v2184, 1, v2186, 0, v2197, v2199, v2190, v2191, v2192, v2193, v2194, v2195, v2196, 3, 2, 4) :|: TRUE
f_679(v2180, v2181, v2182, v2183, v2184, 1, v2186, 0, v2197, v2199, v2190, v2191, v2192, v2193, v2194, v2195, v2196, 3, 2, 4) -> f_649(v2180, v2181, v2182, v2183, v2184, 1, v2186, 0, v2191, v2192, v2190, v2197, v2199, v2193, v2194, v2195, v2196, 3, 2, 4) :|: TRUE
f_649(v1995, v1996, v1997, v1998, v1999, 1, v2001, 0, v2003, v2004, v2005, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_650(v1995, v1996, v1997, v1998, v1999, 1, v2001, 0, v2003, v2004, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) :|: 0 = 0
f_650(v1995, v1996, v1997, v1998, v1999, 1, v2001, 0, v2003, v2004, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_651(v1995, v1996, v1997, v1998, v1999, 1, v2001, 0, v2003, v2004, v2012, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) :|: v2012 = 1 + v2001 && 3 <= v2012
f_651(v1995, v1996, v1997, v1998, v1999, 1, v2001, 0, v2003, v2004, v2012, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_652(v1995, v1996, v1997, v1998, v1999, 1, v2001, 0, v2003, v2004, v2012, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) :|: TRUE
f_652(v1995, v1996, v1997, v1998, v1999, 1, v2001, 0, v2003, v2004, v2012, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_653(v1995, v1996, v1997, v1998, v1999, 1, v2001, 0, v2003, v2004, v2012, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) :|: TRUE
f_653(v1995, v1996, v1997, v1998, v1999, 1, v2001, 0, v2003, v2004, v2012, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_654(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) :|: 0 = 0
f_654(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_655(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) :|: 0 = 0
f_655(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_656(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) :|: v2012 <= v1999 && 3 <= v1999
f_656(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_658(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) :|: 0 = 0
f_658(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_660(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) :|: TRUE
f_660(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_662(v1995, v1996, v1997, v1998, v1999, 1, v2012, v2092, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) :|: TRUE
f_662(v1995, v1996, v1997, v1998, v1999, 1, v2012, v2092, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_664(v1995, v1996, v1997, v1998, v1999, 1, v2012, v2092, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) :|: v2092 != 0
f_662(v1995, v1996, v1997, v1998, v1999, 1, v2012, v2092, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_665(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) :|: v2092 = 0
f_664(v1995, v1996, v1997, v1998, v1999, 1, v2012, v2092, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_666(v1995, v1996, v1997, v1998, v1999, 1, v2012, v2092, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 0, 3, 2, 4) :|: 0 = 0
f_666(v1995, v1996, v1997, v1998, v1999, 1, v2012, v2092, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 0, 3, 2, 4) -> f_668(v1995, v1996, v1997, v1998, v1999, 1, v2012, v2092, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 0, 3, 2, 4) :|: TRUE
f_668(v1995, v1996, v1997, v1998, v1999, 1, v2012, v2092, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 0, 3, 2, 4) -> f_669(v1995, v1996, v1997, v1998, v1999, 1, v2012, v2092, v2006, v2007, v2001, v2003, v2004, v2008, v2009, v2010, v2011, 0, v2007, 3, 2, 4) :|: TRUE
f_665(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_667(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) :|: 0 = 0
f_667(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_670(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) :|: TRUE
f_670(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2003, v2004, v2001, v2006, v2007, v2008, v2009, v2010, v2011, 3, 2, 4) -> f_671(v1995, v1996, v1997, v1998, v1999, 1, v2012, 0, v2006, v2007, v2001, v2003, v2004, v2008, v2009, v2010, v2011, v2007, 3, 2, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_595(v1559:0, v1560:0, v1561:0, v1562:0, v1563:0, 1, v1565:0, v1566:0, v1567:0, v1568:0, v1570:0, 1 + v2199:0, v1572:0, v1573:0, v1574:0, v1575:0, 0, 3, 2, 4) -> f_662(v1559:0, v1560:0, v1561:0, v1562:0, v1563:0, 1, 1 + (1 + v1565:0), v2092:0, 0, v1570:0, 1 + v2199:0, 1 + v1565:0, 1 + v2199:0, v2199:0, v1572:0, v1573:0, v1574:0, v1575:0, 3, 2, 4) :|: v1565:0 > 1 && v1563:0 > 2 && v1563:0 >= 1 + v1565:0 && v1563:0 >= 1 + (1 + v1565:0)
f_595(v1559:0, v1560:0, v1561:0, v1562:0, v1563:0, 1, v1565:0, v1566:0, v1567:0, v1568:0, v1570:0, v1571:0, v1572:0, v1573:0, v1574:0, v1575:0, 0, 3, 2, 4) -> f_595(v1559:0, v1560:0, v1561:0, v1562:0, v1563:0, 1, 1 + v1565:0, v1750:0, v1567:0, v1568:0, v1571:0, 1 + v1571:0, v1572:0, v1573:0, v1574:0, v1575:0, 0, 3, 2, 4) :|: v1565:0 > 1 && v1563:0 > 2 && v1750:0 < 0 && v1563:0 >= 1 + v1565:0
f_595(v1559:0, v1560:0, v1561:0, v1562:0, v1563:0, 1, v1565:0, v1566:0, v1567:0, v1568:0, v1570:0, v1571:0, v1572:0, v1573:0, v1574:0, v1575:0, 0, 3, 2, 4) -> f_595(v1559:0, v1560:0, v1561:0, v1562:0, v1563:0, 1, 1 + v1565:0, v1750:0, v1567:0, v1568:0, v1571:0, 1 + v1571:0, v1572:0, v1573:0, v1574:0, v1575:0, 0, 3, 2, 4) :|: v1565:0 > 1 && v1563:0 > 2 && v1750:0 > 0 && v1563:0 >= 1 + v1565:0
f_662(v1995:0, v1996:0, v1997:0, v1998:0, v1999:0, 1, v2012:0, v2092:0, 0, v2003:0, v2004:0, v2001:0, v2006:0, v2007:0, v2008:0, v2009:0, v2010:0, v2011:0, 3, 2, 4) -> f_595(v1995:0, v1996:0, v1997:0, v1998:0, v1999:0, 1, v2012:0, v2092:0, v2006:0, v2007:0, v2007:0, 1 + v2007:0, v2008:0, v2009:0, v2010:0, v2011:0, 0, 3, 2, 4) :|: v2092:0 < 0
f_662(v1995:0, v1996:0, v1997:0, v1998:0, v1999:0, 1, v2012:0, v2092:0, 0, v2003:0, v2004:0, v2001:0, v2006:0, v2007:0, v2008:0, v2009:0, v2010:0, v2011:0, 3, 2, 4) -> f_595(v1995:0, v1996:0, v1997:0, v1998:0, v1999:0, 1, v2012:0, v2092:0, v2006:0, v2007:0, v2007:0, 1 + v2007:0, v2008:0, v2009:0, v2010:0, v2011:0, 0, 3, 2, 4) :|: v2092:0 > 0
f_662(v1995:0, v1996:0, v1997:0, v1998:0, v1999:0, 1, v2012:0, 0, 0, v2003:0, v2004:0, v2001:0, v2006:0, 1 + v2199:0, v2008:0, v2009:0, v2010:0, v2011:0, 3, 2, 4) -> f_662(v1995:0, v1996:0, v1997:0, v1998:0, v1999:0, 1, 1 + v2012:0, v2092:1, 0, v2003:0, v2004:0, v2012:0, 1 + v2199:0, v2199:0, v2008:0, v2009:0, v2010:0, v2011:0, 3, 2, 4) :|: v2012:0 > 1 && v1999:0 >= 1 + v2012:0 && v1999:0 > 2
Filtered unneeded arguments:
   f_595(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_595(x5, x7, x12)
   f_662(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_662(x5, x7, x8, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_595(v1563:0, v1565:0, sum~cons_1~v2199:0) -> f_662(v1563:0, 1 + (1 + v1565:0), v2092:0, v2199:0) :|: v1563:0 > 2 && v1565:0 > 1 && v1563:0 >= 1 + (1 + v1565:0) && v1563:0 >= 1 + v1565:0 && sum~cons_1~v2199:0 = 1 + v2199:0
f_595(v1563:0, v1565:0, v1571:0) -> f_595(v1563:0, 1 + v1565:0, 1 + v1571:0) :|: v1563:0 > 2 && v1563:0 >= 1 + v1565:0 && v1565:0 > 1
f_662(v1999:0, v2012:0, v2092:0, v2007:0) -> f_595(v1999:0, v2012:0, 1 + v2007:0) :|: v2092:0 < 0
f_662(v1999:0, v2012:0, v2092:0, v2007:0) -> f_595(v1999:0, v2012:0, 1 + v2007:0) :|: v2092:0 > 0
f_662(v1999:0, v2012:0, cons_0, sum~cons_1~v2199:0) -> f_662(v1999:0, 1 + v2012:0, v2092:1, v2199:0) :|: v1999:0 >= 1 + v2012:0 && v1999:0 > 2 && v2012:0 > 1 && cons_0 = 0 && sum~cons_1~v2199:0 = 1 + v2199:0

----------------------------------------

(9)
Obligation:
Rules:
f_595(v1563:0, v1565:0, sum~cons_1~v2199:0) -> f_662(v1563:0, 1 + (1 + v1565:0), v2092:0, v2199:0) :|: v1563:0 > 2 && v1565:0 > 1 && v1563:0 >= 1 + (1 + v1565:0) && v1563:0 >= 1 + v1565:0 && sum~cons_1~v2199:0 = 1 + v2199:0
f_595(x, x1, x2) -> f_595(x, 1 + x1, 1 + x2) :|: x > 2 && x >= 1 + x1 && x1 > 1
f_662(x3, x4, x5, x6) -> f_595(x3, x4, 1 + x6) :|: x5 < 0
f_662(x7, x8, x9, x10) -> f_595(x7, x8, 1 + x10) :|: x9 > 0
f_662(x11, x12, x13, x14) -> f_662(x11, 1 + x12, x15, x16) :|: x11 >= 1 + x12 && x11 > 2 && x12 > 1 && x13 = 0 && x14 = 1 + x16

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_662(x3:0, x4:0, x5:0, x6:0) -> f_595(x3:0, x4:0, 1 + x6:0) :|: x5:0 < 0
f_595(x:0, x1:0, x2:0) -> f_595(x:0, 1 + x1:0, 1 + x2:0) :|: x:0 > 2 && x:0 >= 1 + x1:0 && x1:0 > 1
f_662(x7:0, x8:0, x9:0, x10:0) -> f_595(x7:0, x8:0, 1 + x10:0) :|: x9:0 > 0
f_595(v1563:0:0, v1565:0:0, sum~cons_1~v2199:0:0) -> f_662(v1563:0:0, 1 + (1 + v1565:0:0), v2092:0:0, v2199:0:0) :|: v1563:0:0 >= 1 + (1 + v1565:0:0) && v1563:0:0 >= 1 + v1565:0:0 && v1565:0:0 > 1 && v1563:0:0 > 2 && sum~cons_1~v2199:0:0 = 1 + v2199:0:0
f_662(x11:0, x12:0, cons_0, sum~cons_1~x16:0) -> f_662(x11:0, 1 + x12:0, x15:0, x16:0) :|: x11:0 >= 1 + x12:0 && x11:0 > 2 && x12:0 > 1 && cons_0 = 0 && sum~cons_1~x16:0 = 1 + x16:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_662(x, x1, x2, x3)] = -1 + x - x1
[f_595(x4, x5, x6)] = -1 + x4 - x5

The following rules are decreasing:
f_595(x:0, x1:0, x2:0) -> f_595(x:0, 1 + x1:0, 1 + x2:0) :|: x:0 > 2 && x:0 >= 1 + x1:0 && x1:0 > 1
f_595(v1563:0:0, v1565:0:0, sum~cons_1~v2199:0:0) -> f_662(v1563:0:0, 1 + (1 + v1565:0:0), v2092:0:0, v2199:0:0) :|: v1563:0:0 >= 1 + (1 + v1565:0:0) && v1563:0:0 >= 1 + v1565:0:0 && v1565:0:0 > 1 && v1563:0:0 > 2 && sum~cons_1~v2199:0:0 = 1 + v2199:0:0
f_662(x11:0, x12:0, cons_0, sum~cons_1~x16:0) -> f_662(x11:0, 1 + x12:0, x15:0, x16:0) :|: x11:0 >= 1 + x12:0 && x11:0 > 2 && x12:0 > 1 && cons_0 = 0 && sum~cons_1~x16:0 = 1 + x16:0
The following rules are bounded:
f_595(x:0, x1:0, x2:0) -> f_595(x:0, 1 + x1:0, 1 + x2:0) :|: x:0 > 2 && x:0 >= 1 + x1:0 && x1:0 > 1
f_595(v1563:0:0, v1565:0:0, sum~cons_1~v2199:0:0) -> f_662(v1563:0:0, 1 + (1 + v1565:0:0), v2092:0:0, v2199:0:0) :|: v1563:0:0 >= 1 + (1 + v1565:0:0) && v1563:0:0 >= 1 + v1565:0:0 && v1565:0:0 > 1 && v1563:0:0 > 2 && sum~cons_1~v2199:0:0 = 1 + v2199:0:0
f_662(x11:0, x12:0, cons_0, sum~cons_1~x16:0) -> f_662(x11:0, 1 + x12:0, x15:0, x16:0) :|: x11:0 >= 1 + x12:0 && x11:0 > 2 && x12:0 > 1 && cons_0 = 0 && sum~cons_1~x16:0 = 1 + x16:0

----------------------------------------

(13)
Obligation:
Rules:
f_662(x3:0, x4:0, x5:0, x6:0) -> f_595(x3:0, x4:0, 1 + x6:0) :|: x5:0 < 0
f_662(x7:0, x8:0, x9:0, x10:0) -> f_595(x7:0, x8:0, 1 + x10:0) :|: x9:0 > 0

----------------------------------------

(14) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
SCC
----------------------------------------

(17) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_487(v909, v910, v911, v912, v913, 1, v918, v916, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) -> f_489(v909, v910, v911, v912, v913, 1, v918, v916, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) :|: 0 = 0
f_489(v909, v910, v911, v912, v913, 1, v918, v916, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) -> f_491(v909, v910, v911, v912, v913, 1, v918, v916, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) :|: v918 <= v913 && 2 <= v913
f_491(v909, v910, v911, v912, v913, 1, v918, v916, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) -> f_495(v909, v910, v911, v912, v913, 1, v918, v916, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) :|: 0 = 0
f_495(v909, v910, v911, v912, v913, 1, v918, v916, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) -> f_499(v909, v910, v911, v912, v913, 1, v918, v916, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) :|: TRUE
f_499(v909, v910, v911, v912, v913, 1, v918, v916, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) -> f_503(v909, v910, v911, v912, v913, 1, v918, v1031, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) :|: TRUE
f_503(v909, v910, v911, v912, v913, 1, v918, v1031, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) -> f_507(v909, v910, v911, v912, v913, 1, v918, v1031, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) :|: v1031 != 0
f_507(v909, v910, v911, v912, v913, 1, v918, v1031, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) -> f_511(v909, v910, v911, v912, v913, 1, v918, v1031, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) :|: 0 = 0
f_511(v909, v910, v911, v912, v913, 1, v918, v1031, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) -> f_515(v909, v910, v911, v912, v913, 1, v918, v1031, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) :|: TRUE
f_515(v909, v910, v911, v912, v913, 1, v918, v1031, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) -> f_519(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v919, v920, v921, v922, 0, 3, 2, 4) :|: 0 = 0
f_519(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v919, v920, v921, v922, 0, 3, 2, 4) -> f_523(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v919, v920, v921, v922, 0, 3, 2, 4) :|: v918 = 1 + v915
f_523(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v919, v920, v921, v922, 0, 3, 2, 4) -> f_527(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v919, v920, v921, v922, 0, 3, 2, 4) :|: TRUE
f_527(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v919, v920, v921, v922, 0, 3, 2, 4) -> f_531(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v919, v920, v921, v922, 0, 3, 2, 4) :|: TRUE
f_531(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v919, v920, v921, v922, 0, 3, 2, 4) -> f_535(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v919, v920, v921, v922, 0, 3, 2, 4) :|: 0 = 0
f_535(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v919, v920, v921, v922, 0, 3, 2, 4) -> f_538(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v1225, v919, v920, v921, v922, 0, 3, 2, 4) :|: v1225 = 1 + v918 && 3 <= v1225
f_538(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v1225, v919, v920, v921, v922, 0, 3, 2, 4) -> f_541(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v1225, v919, v920, v921, v922, 0, 3, 2, 4) :|: TRUE
f_541(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v1225, v919, v920, v921, v922, 0, 3, 2, 4) -> f_544(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v1225, v919, v920, v921, v922, 0, 3, 2, 4) :|: TRUE
f_544(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v1225, v919, v920, v921, v922, 0, 3, 2, 4) -> f_484(v909, v910, v911, v912, v913, 1, v918, v1031, v915, v1225, v919, v920, v921, v922, 0, 3, 2, 4) :|: TRUE
f_484(v909, v910, v911, v912, v913, 1, v915, v916, v917, v918, v919, v920, v921, v922, 0, 3, 2, 4) -> f_487(v909, v910, v911, v912, v913, 1, v918, v916, v917, v915, v919, v920, v921, v922, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_487(v909:0, v910:0, v911:0, v912:0, v913:0, 1, 1 + v915:0, v916:0, v917:0, v915:0, v919:0, v920:0, v921:0, v922:0, 0, 3, 2, 4) -> f_487(v909:0, v910:0, v911:0, v912:0, v913:0, 1, 1 + (1 + v915:0), v1031:0, v915:0, 1 + v915:0, v919:0, v920:0, v921:0, v922:0, 0, 3, 2, 4) :|: v913:0 > 1 && v913:0 >= 1 + v915:0 && v915:0 > 0 && v1031:0 < 0
f_487(v909:0, v910:0, v911:0, v912:0, v913:0, 1, 1 + v915:0, v916:0, v917:0, v915:0, v919:0, v920:0, v921:0, v922:0, 0, 3, 2, 4) -> f_487(v909:0, v910:0, v911:0, v912:0, v913:0, 1, 1 + (1 + v915:0), v1031:0, v915:0, 1 + v915:0, v919:0, v920:0, v921:0, v922:0, 0, 3, 2, 4) :|: v913:0 > 1 && v913:0 >= 1 + v915:0 && v915:0 > 0 && v1031:0 > 0
Filtered unneeded arguments:
   f_487(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_487(x5, x7, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_487(v913:0, sum~cons_1~v915:0, v915:0) -> f_487(v913:0, 1 + (1 + v915:0), 1 + v915:0) :|: v913:0 >= 1 + v915:0 && v915:0 > 0 && v913:0 > 1 && sum~cons_1~v915:0 = 1 + v915:0

----------------------------------------

(18)
Obligation:
Rules:
f_487(v913:0, sum~cons_1~v915:0, v915:0) -> f_487(v913:0, 1 + (1 + v915:0), 1 + v915:0) :|: v913:0 >= 1 + v915:0 && v915:0 > 0 && v913:0 > 1 && sum~cons_1~v915:0 = 1 + v915:0

----------------------------------------

(19) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(20)
Obligation:
Rules:
f_487(v913:0:0, sum~cons_1~v915:0:0, v915:0:0) -> f_487(v913:0:0, 1 + (1 + v915:0:0), 1 + v915:0:0) :|: v913:0:0 >= 1 + v915:0:0 && v915:0:0 > 0 && v913:0:0 > 1 && sum~cons_1~v915:0:0 = 1 + v915:0:0

----------------------------------------

(21) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_487(x, x1, x2)] = x - x1

The following rules are decreasing:
f_487(v913:0:0, sum~cons_1~v915:0:0, v915:0:0) -> f_487(v913:0:0, 1 + (1 + v915:0:0), 1 + v915:0:0) :|: v913:0:0 >= 1 + v915:0:0 && v915:0:0 > 0 && v913:0:0 > 1 && sum~cons_1~v915:0:0 = 1 + v915:0:0
The following rules are bounded:
f_487(v913:0:0, sum~cons_1~v915:0:0, v915:0:0) -> f_487(v913:0:0, 1 + (1 + v915:0:0), 1 + v915:0:0) :|: v913:0:0 >= 1 + v915:0:0 && v915:0:0 > 0 && v913:0:0 > 1 && sum~cons_1~v915:0:0 = 1 + v915:0:0

----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
SCC
----------------------------------------

(24) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_424(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) -> f_426(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) :|: 0 = 0
f_426(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) -> f_429(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) :|: v766 <= v760 && 2 <= v760
f_429(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) -> f_433(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) :|: 0 = 0
f_433(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) -> f_437(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) :|: TRUE
f_437(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) -> f_441(v756, v757, v758, v759, v760, 1, v766, v803, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) :|: TRUE
f_441(v756, v757, v758, v759, v760, 1, v766, v803, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) -> f_446(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) :|: v803 = 0
f_446(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) -> f_450(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) :|: 0 = 0
f_450(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) -> f_454(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) :|: TRUE
f_454(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) -> f_458(v756, v757, v758, v759, v760, 1, v766, 0, v765, v762, v767, v768, v769, v770, 3, 2, 4) :|: 0 = 0
f_458(v756, v757, v758, v759, v760, 1, v766, 0, v765, v762, v767, v768, v769, v770, 3, 2, 4) -> f_462(v756, v757, v758, v759, v760, 1, v766, 0, v765, v828, v762, v767, v768, v769, v770, 3, 2, 4) :|: 1 + v828 = v765 && 2 + v828 <= 0
f_462(v756, v757, v758, v759, v760, 1, v766, 0, v765, v828, v762, v767, v768, v769, v770, 3, 2, 4) -> f_466(v756, v757, v758, v759, v760, 1, v766, 0, v765, v828, v762, v767, v768, v769, v770, 3, 2, 4) :|: TRUE
f_466(v756, v757, v758, v759, v760, 1, v766, 0, v765, v828, v762, v767, v768, v769, v770, 3, 2, 4) -> f_470(v756, v757, v758, v759, v760, 1, v766, 0, v765, v828, v762, v767, v768, v769, v770, 3, 2, 4) :|: TRUE
f_470(v756, v757, v758, v759, v760, 1, v766, 0, v765, v828, v762, v767, v768, v769, v770, 3, 2, 4) -> f_474(v756, v757, v758, v759, v760, 1, v766, 0, v765, v828, v767, v768, v769, v770, 3, 2, 4) :|: 0 = 0
f_474(v756, v757, v758, v759, v760, 1, v766, 0, v765, v828, v767, v768, v769, v770, 3, 2, 4) -> f_478(v756, v757, v758, v759, v760, 1, v766, 0, v765, v828, v904, v767, v768, v769, v770, 3, 2, 4) :|: v904 = 1 + v766 && 3 <= v904
f_478(v756, v757, v758, v759, v760, 1, v766, 0, v765, v828, v904, v767, v768, v769, v770, 3, 2, 4) -> f_482(v756, v757, v758, v759, v760, 1, v766, 0, v765, v828, v904, v767, v768, v769, v770, 3, 2, 4) :|: TRUE
f_482(v756, v757, v758, v759, v760, 1, v766, 0, v765, v828, v904, v767, v768, v769, v770, 3, 2, 4) -> f_486(v756, v757, v758, v759, v760, 1, v766, 0, v765, v828, v904, v767, v768, v769, v770, 3, 2, 4) :|: TRUE
f_486(v756, v757, v758, v759, v760, 1, v766, 0, v765, v828, v904, v767, v768, v769, v770, 3, 2, 4) -> f_422(v756, v757, v758, v759, v760, 1, v766, 0, v765, v828, v904, v767, v768, v769, v770, 3, 2, 4) :|: TRUE
f_422(v756, v757, v758, v759, v760, 1, v762, 0, v764, v765, v766, v767, v768, v769, v770, 3, 2, 4) -> f_424(v756, v757, v758, v759, v760, 1, v766, 0, v764, v765, v762, v767, v768, v769, v770, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_424(v756:0, v757:0, v758:0, v759:0, v760:0, 1, v766:0, 0, v764:0, 1 + v828:0, v762:0, v767:0, v768:0, v769:0, v770:0, 3, 2, 4) -> f_424(v756:0, v757:0, v758:0, v759:0, v760:0, 1, 1 + v766:0, 0, 1 + v828:0, v828:0, v766:0, v767:0, v768:0, v769:0, v770:0, 3, 2, 4) :|: v760:0 > 1 && v766:0 <= v760:0 && v766:0 > 1 && v828:0 < -1
Filtered unneeded arguments:
   f_424(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_424(x5, x7, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_424(v760:0, v766:0, sum~cons_1~v828:0) -> f_424(v760:0, 1 + v766:0, v828:0) :|: v766:0 <= v760:0 && v760:0 > 1 && v828:0 < -1 && v766:0 > 1 && sum~cons_1~v828:0 = 1 + v828:0

----------------------------------------

(25)
Obligation:
Rules:
f_424(v760:0, v766:0, sum~cons_1~v828:0) -> f_424(v760:0, 1 + v766:0, v828:0) :|: v766:0 <= v760:0 && v760:0 > 1 && v828:0 < -1 && v766:0 > 1 && sum~cons_1~v828:0 = 1 + v828:0

----------------------------------------

(26) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(27)
Obligation:
Rules:
f_424(v760:0:0, v766:0:0, sum~cons_1~v828:0:0) -> f_424(v760:0:0, 1 + v766:0:0, v828:0:0) :|: v828:0:0 < -1 && v766:0:0 > 1 && v760:0:0 > 1 && v766:0:0 <= v760:0:0 && sum~cons_1~v828:0:0 = 1 + v828:0:0

----------------------------------------

(28) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_424(x, x1, x2)] = x - x1

The following rules are decreasing:
f_424(v760:0:0, v766:0:0, sum~cons_1~v828:0:0) -> f_424(v760:0:0, 1 + v766:0:0, v828:0:0) :|: v828:0:0 < -1 && v766:0:0 > 1 && v760:0:0 > 1 && v766:0:0 <= v760:0:0 && sum~cons_1~v828:0:0 = 1 + v828:0:0
The following rules are bounded:
f_424(v760:0:0, v766:0:0, sum~cons_1~v828:0:0) -> f_424(v760:0:0, 1 + v766:0:0, v828:0:0) :|: v828:0:0 < -1 && v766:0:0 > 1 && v760:0:0 > 1 && v766:0:0 <= v760:0:0 && sum~cons_1~v828:0:0 = 1 + v828:0:0

----------------------------------------

(29)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
