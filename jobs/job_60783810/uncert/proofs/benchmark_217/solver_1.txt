YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/JRuwX.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 52 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 272 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 38 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 11 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/JRuwX.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/JRuwX.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "mlog" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %3
		br %4
	4:
		%5 = load %2
		%6 = icmp sgt %5 1
		br %6, %7, %12
	7:
		%8 = load %2
		%9 = sdiv i32 %8, 2
		store %9, %2
		%10 = load %3
		%11 = add i32 %10, 1
		store %11, %3
		br %4
	12:
		%13 = load %3
		ret %13

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 28
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @mlog(i32 %2)
		ret %3


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_190(v81, v82, v83, v86, 1, v84, v87, v88, v89, v90, v91, v92, 0, 3, 2, 4) -> f_191(v81, v82, v83, v86, 1, v84, v87, v88, v89, v90, v91, v92, 0, 3, 2, 4) :|: 1 < v86
f_191(v81, v82, v83, v86, 1, v84, v87, v88, v89, v90, v91, v92, 0, 3, 2, 4) -> f_193(v81, v82, v83, v86, 1, v84, v87, v88, v89, v90, v91, v92, 0, 3, 2, 4) :|: 0 = 0
f_193(v81, v82, v83, v86, 1, v84, v87, v88, v89, v90, v91, v92, 0, 3, 2, 4) -> f_195(v81, v82, v83, v86, 1, v84, v87, v88, v89, v90, v91, v92, 0, 3, 2, 4) :|: TRUE
f_195(v81, v82, v83, v86, 1, v84, v87, v88, v89, v90, v91, v92, 0, 3, 2, 4) -> f_197(v81, v82, v83, v86, 1, v87, v88, v89, v90, v91, v92, 0, 3, 2, 4) :|: 0 = 0
f_197(v81, v82, v83, v86, 1, v87, v88, v89, v90, v91, v92, 0, 3, 2, 4) -> f_199(v81, v82, v83, v86, 1, v94, v87, v88, v89, v90, v91, v92, 0, 3, 2, 4) :|: v94 = v86 / 2
f_199(v81, v82, v83, v86, 1, v94, v87, v88, v89, v90, v91, v92, 0, 3, 2, 4) -> f_201(v81, v82, v83, v86, 1, v94, v87, v88, v89, v90, v91, v92, 0, 3, 2, 4) :|: TRUE
f_201(v81, v82, v83, v86, 1, v94, v87, v88, v89, v90, v91, v92, 0, 3, 2, 4) -> f_202(v81, v82, v83, v86, 1, v94, v88, v89, v90, v91, v92, 0, 3, 2, 4) :|: 0 = 0
f_202(v81, v82, v83, v86, 1, v94, v88, v89, v90, v91, v92, 0, 3, 2, 4) -> f_203(v81, v82, v83, v86, 1, v94, v88, v96, v89, v90, v91, v92, 0, 3, 2, 4) :|: v96 = 1 + v88 && 2 <= v96
f_203(v81, v82, v83, v86, 1, v94, v88, v96, v89, v90, v91, v92, 0, 3, 2, 4) -> f_204(v81, v82, v83, v86, 1, v94, v88, v96, v89, v90, v91, v92, 0, 3, 2, 4) :|: TRUE
f_204(v81, v82, v83, v86, 1, v94, v88, v96, v89, v90, v91, v92, 0, 3, 2, 4) -> f_205(v81, v82, v83, v86, 1, v94, v88, v96, v89, v90, v91, v92, 0, 3, 2, 4) :|: TRUE
f_205(v81, v82, v83, v86, 1, v94, v88, v96, v89, v90, v91, v92, 0, 3, 2, 4) -> f_189(v81, v82, v83, v86, 1, v94, v88, v96, v89, v90, v91, v92, 0, 3, 2, 4) :|: TRUE
f_189(v81, v82, v83, v84, 1, v86, v87, v88, v89, v90, v91, v92, 0, 3, 2, 4) -> f_190(v81, v82, v83, v86, 1, v84, v87, v88, v89, v90, v91, v92, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_190(v81:0, v82:0, v83:0, v86:0, 1, v84:0, v87:0, v88:0, v89:0, v90:0, v91:0, v92:0, 0, 3, 2, 4) -> f_190(v81:0, v82:0, v83:0, v94:0, 1, v86:0, v88:0, 1 + v88:0, v89:0, v90:0, v91:0, v92:0, 0, 3, 2, 4) :|: v86:0 > 1 && v88:0 > 0 && v94:0 = v86:0 / 2
Filtered unneeded arguments:
   f_190(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_190(x4, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_190(v86:0, v88:0) -> f_190'(v86:0, v88:0) :|: v86:0 > 1 && v88:0 > 0
f_190'(v86:0, v88:0) -> f_190(div, 1 + v88:0) :|: v88:0 > 0 && v86:0 > 1 && v86:0 < 0 && v86:0 - 2 * div <= 0 && v86:0 - 2 * div > -2
f_190'(v86:0, v88:0) -> f_190(div, 1 + v88:0) :|: v86:0 > 1 && v88:0 > 0 && v86:0 - 2 * div < 2 && v86:0 - 2 * div >= 0

----------------------------------------

(8)
Obligation:
Rules:
f_190(v86:0, v88:0) -> f_190'(v86:0, v88:0) :|: v86:0 > 1 && v88:0 > 0
f_190'(x, x1) -> f_190(x2, 1 + x1) :|: x1 > 0 && x > 1 && x < 0 && x - 2 * x2 <= 0 && x - 2 * x2 > -2
f_190'(x3, x4) -> f_190(x5, 1 + x4) :|: x3 > 1 && x4 > 0 && x3 - 2 * x5 < 2 && x3 - 2 * x5 >= 0

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(10)
Obligation:
Rules:
f_190(v86:0, v88:0) -> f_190'(v86:0, v88:0) :|: v86:0 > 1 && v88:0 > 0
f_190'(x3, x4) -> f_190(x5, 1 + x4) :|: x3 > 1 && x4 > 0 && x3 - 2 * x5 < 2 && x3 - 2 * x5 >= 0

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_190(v86:0:0, v88:0:0) -> f_190(x5:0, 1 + v88:0:0) :|: v86:0:0 - 2 * x5:0 >= 0 && v86:0:0 - 2 * x5:0 < 2 && v88:0:0 > 0 && v86:0:0 > 1

----------------------------------------

(13) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_190(x, x1)] = -2 + x

The following rules are decreasing:
f_190(v86:0:0, v88:0:0) -> f_190(x5:0, 1 + v88:0:0) :|: v86:0:0 - 2 * x5:0 >= 0 && v86:0:0 - 2 * x5:0 < 2 && v88:0:0 > 0 && v86:0:0 > 1
The following rules are bounded:
f_190(v86:0:0, v88:0:0) -> f_190(x5:0, 1 + v88:0:0) :|: v86:0:0 - 2 * x5:0 >= 0 && v86:0:0 - 2 * x5:0 < 2 && v88:0:0 > 0 && v86:0:0 > 1

----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
