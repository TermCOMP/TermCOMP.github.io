YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/1dFdl.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 16 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1476 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 18 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 6 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 16 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/1dFdl.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/1dFdl.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store 0, %4
		store 0, %2
		br %5
	5:
		%6 = load %2
		%7 = icmp slt %6 10
		br %7, %8, %24
	8:
		store 3, %3
		br %9
	9:
		%10 = load %3
		%11 = icmp slt %10 12
		br %11, %12, %20
	12:
		%13 = load %3
		%14 = sub i32 %13, 1
		store %14, %3
		%15 = load %4
		%16 = add i32 %15, 1
		store %16, %4
		br %17
	17:
		%18 = load %3
		%19 = add i32 %18, 2
		store %19, %3
		br %9
	20:
		br %21
	21:
		%22 = load %2
		%23 = add i32 %22, 1
		store %23, %2
		br %5
	24:
		%25 = load %4
		ret %25


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 35 rulesP rules:
f_536(v1035, v1036, v1037, v1038, v1039, 1, 3, 0, 11, 10, v1045, v1046, 12, v1047, v1048, v1049, v1050, v1051, 9, 8, 4) -> f_537(v1035, v1036, v1037, v1038, v1039, 1, 3, 11, 10, v1045, v1046, 12, v1047, v1048, v1049, v1050, v1051, 0, 9, 8, 4) :|: 0 = 0
f_537(v1035, v1036, v1037, v1038, v1039, 1, 3, 11, 10, v1045, v1046, 12, v1047, v1048, v1049, v1050, v1051, 0, 9, 8, 4) -> f_538(v1035, v1036, v1037, v1038, v1039, 1, 3, 11, 10, v1045, v1046, 12, v1047, v1048, v1049, v1050, v1051, 0, 9, 8, 4) :|: TRUE
f_538(v1035, v1036, v1037, v1038, v1039, 1, 3, 11, 10, v1045, v1046, 12, v1047, v1048, v1049, v1050, v1051, 0, 9, 8, 4) -> f_539(v1035, v1036, v1037, v1038, v1039, 1, 3, 11, 10, v1045, v1046, 12, v1047, v1048, v1049, v1050, v1051, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) :|: TRUE
f_539(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) -> f_540(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1080, v1081, v1082, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) :|: 0 = 0
f_540(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1080, v1081, v1082, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) -> f_541(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1081, v1082, v1080, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) :|: 1 + v1090 = v1078 && 2 <= v1090 && v1090 <= 10
f_541(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1081, v1082, v1080, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) -> f_542(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1081, v1082, v1080, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) :|: TRUE
f_542(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1081, v1082, v1080, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) -> f_543(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1080, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 10, 4, 12, 8) :|: 0 = 0
f_543(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1080, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 10, 4, 12, 8) -> f_544(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1092, v1080, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 10, 4, 12, 8) :|: v1092 = 1 + v1082 && 10 <= v1092
f_544(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1092, v1080, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 10, 4, 12, 8) -> f_545(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1092, v1080, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 10, 4, 12, 8) :|: TRUE
f_545(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1092, v1080, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 10, 4, 12, 8) -> f_546(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1092, v1080, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 10, 4, 12, 8) :|: TRUE
f_546(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1092, v1080, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 10, 4, 12, 8) -> f_547(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1092, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 6, 9, 11, 4, 12, 8, 2, 10) :|: 0 = 0
f_547(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1092, v1083, v1084, v1085, v1086, v1087, v1088, 0, 3, 6, 9, 11, 4, 12, 8, 2, 10) -> f_548(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1092, v1098, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) :|: v1098 = 2 + v1090 && 4 <= v1098 && v1098 <= 12
f_548(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1092, v1098, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) -> f_549(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1092, v1098, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) :|: TRUE
f_549(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1092, v1098, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) -> f_550(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1092, v1098, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) :|: TRUE
f_550(v1072, v1073, v1074, v1075, v1076, 1, v1078, v1090, v1082, v1092, v1098, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) -> f_551(v1072, v1073, v1074, v1075, v1076, 1, v1098, v1078, v1090, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) :|: 0 = 0
f_551(v1072, v1073, v1074, v1075, v1076, 1, v1098, v1078, v1090, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) -> f_552(v1072, v1073, v1074, v1075, v1076, 1, v1098, v1078, v1090, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 10, 8, 4, 11) :|: v1098 < 12 && v1090 <= 9 && v1078 <= 10
f_551(v1072, v1073, v1074, v1075, v1076, 1, v1098, v1078, v1090, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) -> f_553(v1072, v1073, v1074, v1075, v1076, 1, 12, 11, 10, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 0, 3, 9, 17, 8, 4, 18) :|: 12 <= v1098 && v1090 = 10 && v1098 = 12 && 0 = 0 && v1078 = 11
f_552(v1072, v1073, v1074, v1075, v1076, 1, v1098, v1078, v1090, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 10, 8, 4, 11) -> f_554(v1072, v1073, v1074, v1075, v1076, 1, v1098, v1078, v1090, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 10, 8, 4, 11) :|: 0 = 0
f_554(v1072, v1073, v1074, v1075, v1076, 1, v1098, v1078, v1090, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 10, 8, 4, 11) -> f_556(v1072, v1073, v1074, v1075, v1076, 1, v1098, v1078, v1090, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 10, 8, 4, 11) :|: TRUE
f_556(v1072, v1073, v1074, v1075, v1076, 1, v1098, v1078, v1090, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 6, 9, 10, 8, 4, 11) -> f_539(v1072, v1073, v1074, v1075, v1076, 1, v1098, v1078, v1090, v1082, v1092, v1098, v1084, v1085, v1086, v1087, v1088, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) :|: TRUE
f_553(v1072, v1073, v1074, v1075, v1076, 1, 12, 11, 10, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 0, 3, 9, 17, 8, 4, 18) -> f_555(v1072, v1073, v1074, v1075, v1076, 1, 12, 0, 11, 10, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 3, 9, 17, 8, 4, 18) :|: 0 = 0
f_555(v1072, v1073, v1074, v1075, v1076, 1, 12, 0, 11, 10, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 3, 9, 17, 8, 4, 18) -> f_557(v1072, v1073, v1074, v1075, v1076, 1, 12, 0, 11, 10, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 3, 9, 17, 8, 4, 18) :|: TRUE
f_557(v1072, v1073, v1074, v1075, v1076, 1, 12, 0, 11, 10, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 3, 9, 17, 8, 4, 18) -> f_558(v1072, v1073, v1074, v1075, v1076, 1, 12, 0, 11, 10, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 3, 9, 17, 8, 4, 18) :|: TRUE
f_558(v1072, v1073, v1074, v1075, v1076, 1, 12, 0, 11, 10, v1082, v1092, v1084, v1085, v1086, v1087, v1088, 3, 9, 17, 8, 4, 18) -> f_559(v1072, v1073, v1074, v1075, v1076, 1, 12, 0, 11, 10, v1082, v1092, v1085, v1086, v1087, v1088, 3, 9, 17, 4, 18) :|: 0 = 0
f_559(v1072, v1073, v1074, v1075, v1076, 1, 12, 0, 11, 10, v1082, v1092, v1085, v1086, v1087, v1088, 3, 9, 17, 4, 18) -> f_560(v1072, v1073, v1074, v1075, v1076, 1, 12, 0, 11, 10, v1082, v1092, v1155, v1085, v1086, v1087, v1088, 3, 9, 17, 4, 18, 2) :|: v1155 = 1 + v1076 && 2 <= v1155 && v1155 <= 10
f_560(v1072, v1073, v1074, v1075, v1076, 1, 12, 0, 11, 10, v1082, v1092, v1155, v1085, v1086, v1087, v1088, 3, 9, 17, 4, 18, 2) -> f_561(v1072, v1073, v1074, v1075, v1076, 1, 12, 0, 11, 10, v1082, v1092, v1155, v1085, v1086, v1087, v1088, 3, 9, 17, 4, 18, 2) :|: TRUE
f_561(v1072, v1073, v1074, v1075, v1076, 1, 12, 0, 11, 10, v1082, v1092, v1155, v1085, v1086, v1087, v1088, 3, 9, 17, 4, 18, 2) -> f_562(v1072, v1073, v1074, v1075, v1076, 1, 12, 0, 11, 10, v1082, v1092, v1155, v1085, v1086, v1087, v1088, 3, 9, 17, 4, 18, 2) :|: TRUE
f_562(v1072, v1073, v1074, v1075, v1076, 1, 12, 0, 11, 10, v1082, v1092, v1155, v1085, v1086, v1087, v1088, 3, 9, 17, 4, 18, 2) -> f_563(v1072, v1073, v1074, v1075, v1155, 1, 12, 0, 11, 10, v1082, v1092, v1076, v1085, v1086, v1087, v1088, 3, 9, 17, 4, 18, 2) :|: 0 = 0
f_563(v1072, v1073, v1074, v1075, v1155, 1, 12, 0, 11, 10, v1082, v1092, v1076, v1085, v1086, v1087, v1088, 3, 9, 17, 4, 18, 2) -> f_564(v1072, v1073, v1074, v1075, v1155, 1, 12, 0, 11, 10, v1082, v1092, v1076, v1085, v1086, v1087, v1088, 3, 8, 17, 4, 18, 2, 9) :|: v1155 < 10 && v1076 <= 8
f_564(v1072, v1073, v1074, v1075, v1155, 1, 12, 0, 11, 10, v1082, v1092, v1076, v1085, v1086, v1087, v1088, 3, 8, 17, 4, 18, 2, 9) -> f_566(v1072, v1073, v1074, v1075, v1155, 1, 12, 0, 11, 10, v1082, v1092, v1076, v1085, v1086, v1087, v1088, 3, 8, 17, 4, 18, 2, 9) :|: 0 = 0
f_566(v1072, v1073, v1074, v1075, v1155, 1, 12, 0, 11, 10, v1082, v1092, v1076, v1085, v1086, v1087, v1088, 3, 8, 17, 4, 18, 2, 9) -> f_568(v1072, v1073, v1074, v1075, v1155, 1, 12, 0, 11, 10, v1082, v1092, v1076, v1085, v1086, v1087, v1088, 3, 8, 17, 4, 18, 2, 9) :|: TRUE
f_568(v1072, v1073, v1074, v1075, v1155, 1, 12, 0, 11, 10, v1082, v1092, v1076, v1085, v1086, v1087, v1088, 3, 8, 17, 4, 18, 2, 9) -> f_570(v1072, v1073, v1074, v1075, v1155, 1, 12, 0, 11, 10, v1082, v1092, v1076, v1085, v1086, v1087, v1088, 3, 8, 17, 4, 18, 2, 9) :|: TRUE
f_570(v1072, v1073, v1074, v1075, v1155, 1, 12, 0, 11, 10, v1082, v1092, v1076, v1085, v1086, v1087, v1088, 3, 8, 17, 4, 18, 2, 9) -> f_572(v1072, v1073, v1074, v1075, v1155, 1, 12, 0, 11, 10, v1082, v1092, v1076, v1085, v1086, v1087, v1088, 3, 8, 17, 4, 18, 2, 9) :|: TRUE
f_572(v1072, v1073, v1074, v1075, v1155, 1, 12, 0, 11, 10, v1082, v1092, v1076, v1085, v1086, v1087, v1088, 3, 8, 17, 4, 18, 2, 9) -> f_535(v1072, v1073, v1074, v1075, v1155, 1, 12, 0, 11, 10, v1082, v1092, v1076, v1085, v1086, v1087, v1088, 3, 9, 8, 4) :|: TRUE
f_535(v1035, v1036, v1037, v1038, v1039, 1, 12, 0, 11, 10, v1045, v1046, v1047, v1048, v1049, v1050, v1051, 3, 9, 8, 4) -> f_536(v1035, v1036, v1037, v1038, v1039, 1, 3, 0, 11, 10, v1045, v1046, 12, v1047, v1048, v1049, v1050, v1051, 9, 8, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_551(v1072:0, v1073:0, v1074:0, v1075:0, v1076:0, 1, 1 + v1090:1, v1078:0, v1090:0, v1082:0, v1092:0, v1084:0, v1085:0, v1086:0, v1087:0, v1088:0, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) -> f_551(v1072:0, v1073:0, v1074:0, v1075:0, v1076:0, 1, 2 + v1090:1, 1 + v1090:1, v1090:1, v1092:0, 1 + v1092:0, v1084:0, v1085:0, v1086:0, v1087:0, v1088:0, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) :|: v1090:1 > 1 && v1090:1 < 11 && v1092:0 > 8 && v1090:0 < 10 && v1078:0 < 11
f_551(v1072:0, v1073:0, v1074:0, v1075:0, v1076:0, 1, 12, 11, 10, v1082:0, v1092:0, v1084:0, v1085:0, v1086:0, v1087:0, v1088:0, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) -> f_551(v1072:0, v1073:0, v1074:0, v1075:0, 1 + v1076:0, 1, 4, 3, 2, v1092:0, 1 + v1092:0, v1076:0, v1085:0, v1086:0, v1087:0, v1088:0, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) :|: v1076:0 > 0 && v1076:0 < 10 && v1092:0 > 8 && v1076:0 < 9
Filtered unneeded arguments:
   f_551(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26) -> f_551(x5, x7, x8, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_551(v1076:0, sum~cons_1~v1090:1, v1078:0, v1090:0, v1092:0) -> f_551(v1076:0, 2 + v1090:1, 1 + v1090:1, v1090:1, 1 + v1092:0) :|: v1090:1 < 11 && v1090:1 > 1 && v1092:0 > 8 && v1078:0 < 11 && v1090:0 < 10 && sum~cons_1~v1090:1 = 1 + v1090:1
f_551(v1076:0, cons_12, cons_11, cons_10, v1092:0) -> f_551(1 + v1076:0, 4, 3, 2, 1 + v1092:0) :|: v1076:0 < 10 && v1076:0 > 0 && v1076:0 < 9 && v1092:0 > 8 && cons_12 = 12 && cons_11 = 11 && cons_10 = 10

----------------------------------------

(9)
Obligation:
Rules:
f_551(v1076:0, sum~cons_1~v1090:1, v1078:0, v1090:0, v1092:0) -> f_551(v1076:0, 2 + v1090:1, 1 + v1090:1, v1090:1, 1 + v1092:0) :|: v1090:1 < 11 && v1090:1 > 1 && v1092:0 > 8 && v1078:0 < 11 && v1090:0 < 10 && sum~cons_1~v1090:1 = 1 + v1090:1
f_551(x, x1, x2, x3, x4) -> f_551(1 + x, 4, 3, 2, 1 + x4) :|: x < 10 && x > 0 && x < 9 && x4 > 8 && x1 = 12 && x2 = 11 && x3 = 10

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_551(v1076:0:0, sum~cons_1~v1090:1:0, v1078:0:0, v1090:0:0, v1092:0:0) -> f_551(v1076:0:0, 2 + v1090:1:0, 1 + v1090:1:0, v1090:1:0, 1 + v1092:0:0) :|: v1078:0:0 < 11 && v1090:0:0 < 10 && v1092:0:0 > 8 && v1090:1:0 > 1 && v1090:1:0 < 11 && sum~cons_1~v1090:1:0 = 1 + v1090:1:0
f_551(x:0, cons_12, cons_11, cons_10, x4:0) -> f_551(1 + x:0, 4, 3, 2, 1 + x4:0) :|: x:0 < 9 && x4:0 > 8 && x:0 > 0 && x:0 < 10 && cons_12 = 12 && cons_11 = 11 && cons_10 = 10

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_551 ] = -9*f_551_1 + -1*f_551_2

The following rules are decreasing:
f_551(v1076:0:0, sum~cons_1~v1090:1:0, v1078:0:0, v1090:0:0, v1092:0:0) -> f_551(v1076:0:0, 2 + v1090:1:0, 1 + v1090:1:0, v1090:1:0, 1 + v1092:0:0) :|: v1078:0:0 < 11 && v1090:0:0 < 10 && v1092:0:0 > 8 && v1090:1:0 > 1 && v1090:1:0 < 11 && sum~cons_1~v1090:1:0 = 1 + v1090:1:0
f_551(x:0, cons_12, cons_11, cons_10, x4:0) -> f_551(1 + x:0, 4, 3, 2, 1 + x4:0) :|: x:0 < 9 && x4:0 > 8 && x:0 > 0 && x:0 < 10 && cons_12 = 12 && cons_11 = 11 && cons_10 = 10

The following rules are bounded:
f_551(x:0, cons_12, cons_11, cons_10, x4:0) -> f_551(1 + x:0, 4, 3, 2, 1 + x4:0) :|: x:0 < 9 && x4:0 > 8 && x:0 > 0 && x:0 < 10 && cons_12 = 12 && cons_11 = 11 && cons_10 = 10


----------------------------------------

(13)
Obligation:
Rules:
f_551(v1076:0:0, sum~cons_1~v1090:1:0, v1078:0:0, v1090:0:0, v1092:0:0) -> f_551(v1076:0:0, 2 + v1090:1:0, 1 + v1090:1:0, v1090:1:0, 1 + v1092:0:0) :|: v1078:0:0 < 11 && v1090:0:0 < 10 && v1092:0:0 > 8 && v1090:1:0 > 1 && v1090:1:0 < 11 && sum~cons_1~v1090:1:0 = 1 + v1090:1:0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_551(v1076:0:0:0, sum~cons_1~v1090:1:0:0, v1078:0:0:0, v1090:0:0:0, v1092:0:0:0) -> f_551(v1076:0:0:0, 2 + v1090:1:0:0, 1 + v1090:1:0:0, v1090:1:0:0, 1 + v1092:0:0:0) :|: v1090:1:0:0 > 1 && v1090:1:0:0 < 11 && v1092:0:0:0 > 8 && v1090:0:0:0 < 10 && v1078:0:0:0 < 11 && sum~cons_1~v1090:1:0:0 = 1 + v1090:1:0:0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_551(x1, x2, x3, x4, x5) -> f_551(x2, x3, x4, x5)

----------------------------------------

(17)
Obligation:
Rules:
f_551(sum~cons_1~v1090:1:0:0, v1078:0:0:0, v1090:0:0:0, v1092:0:0:0) -> f_551(2 + v1090:1:0:0, 1 + v1090:1:0:0, v1090:1:0:0, 1 + v1092:0:0:0) :|: v1090:1:0:0 > 1 && v1090:1:0:0 < 11 && v1092:0:0:0 > 8 && v1090:0:0:0 < 10 && v1078:0:0:0 < 11 && sum~cons_1~v1090:1:0:0 = 1 + v1090:1:0:0

----------------------------------------

(18) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_551 ] = -1*f_551_1

The following rules are decreasing:
f_551(sum~cons_1~v1090:1:0:0, v1078:0:0:0, v1090:0:0:0, v1092:0:0:0) -> f_551(2 + v1090:1:0:0, 1 + v1090:1:0:0, v1090:1:0:0, 1 + v1092:0:0:0) :|: v1090:1:0:0 > 1 && v1090:1:0:0 < 11 && v1092:0:0:0 > 8 && v1090:0:0:0 < 10 && v1078:0:0:0 < 11 && sum~cons_1~v1090:1:0:0 = 1 + v1090:1:0:0

The following rules are bounded:
f_551(sum~cons_1~v1090:1:0:0, v1078:0:0:0, v1090:0:0:0, v1092:0:0:0) -> f_551(2 + v1090:1:0:0, 1 + v1090:1:0:0, v1090:1:0:0, 1 + v1092:0:0:0) :|: v1090:1:0:0 > 1 && v1090:1:0:0 < 11 && v1092:0:0:0 > 8 && v1090:0:0:0 < 10 && v1078:0:0:0 < 11 && sum~cons_1~v1090:1:0:0 = 1 + v1090:1:0:0


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_248(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 11, 10, 8, 9, 4, 12) -> f_249(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 10, 9, 7, 8, 4, 11) :|: v120 < 12 && v117 <= 9 && v116 <= 10 && v118 <= 7 && v119 <= 8
f_249(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 10, 9, 7, 8, 4, 11) -> f_251(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 10, 9, 7, 8, 4, 11) :|: 0 = 0
f_251(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 10, 9, 7, 8, 4, 11) -> f_253(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 10, 9, 7, 8, 4, 11) :|: TRUE
f_253(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 10, 9, 7, 8, 4, 11) -> f_255(v110, v111, v112, v113, 0, 1, v120, v117, v118, v119, v121, v122, v123, v124, 3, 2, 9, 7, 8, 4, 11) :|: 0 = 0
f_255(v110, v111, v112, v113, 0, 1, v120, v117, v118, v119, v121, v122, v123, v124, 3, 2, 9, 7, 8, 4, 11) -> f_257(v110, v111, v112, v113, 0, 1, v120, v132, v118, v119, v117, v121, v122, v123, v124, 3, 2, 9, 7, 8, 4, 11, 10) :|: 1 + v132 = v120 && 3 <= v132 && v132 <= 10
f_257(v110, v111, v112, v113, 0, 1, v120, v132, v118, v119, v117, v121, v122, v123, v124, 3, 2, 9, 7, 8, 4, 11, 10) -> f_259(v110, v111, v112, v113, 0, 1, v120, v132, v118, v119, v117, v121, v122, v123, v124, 3, 2, 9, 7, 8, 4, 11, 10) :|: TRUE
f_259(v110, v111, v112, v113, 0, 1, v120, v132, v118, v119, v117, v121, v122, v123, v124, 3, 2, 9, 7, 8, 4, 11, 10) -> f_261(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) :|: 0 = 0
f_261(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) -> f_263(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) :|: v117 = 1 + v119
f_263(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) -> f_265(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) :|: TRUE
f_265(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) -> f_267(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) :|: TRUE
f_267(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) -> f_269(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) :|: 0 = 0
f_269(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) -> f_271(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v135, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10, 5, 12) :|: v135 = 2 + v132 && 5 <= v135 && v135 <= 12
f_271(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v135, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10, 5, 12) -> f_273(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v135, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10, 5, 12) :|: TRUE
f_273(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v135, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10, 5, 12) -> f_275(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v135, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10, 5, 12) :|: TRUE
f_275(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v135, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10, 5, 12) -> f_247(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v135, v121, v122, v123, v124, 3, 2, 11, 10, 8, 9, 4, 12) :|: TRUE
f_247(v110, v111, v112, v113, 0, 1, v116, v117, v118, v119, v120, v121, v122, v123, v124, 3, 2, 11, 10, 8, 9, 4, 12) -> f_248(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 11, 10, 8, 9, 4, 12) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_248(v110:0, v111:0, v112:0, v113:0, 0, 1, 1 + v132:0, v116:0, 1 + v119:0, v118:0, v119:0, v121:0, v122:0, v123:0, v124:0, 3, 2, 11, 10, 8, 9, 4, 12) -> f_248(v110:0, v111:0, v112:0, v113:0, 0, 1, 2 + v132:0, 1 + v132:0, v132:0, v119:0, 1 + v119:0, v121:0, v122:0, v123:0, v124:0, 3, 2, 11, 10, 8, 9, 4, 12) :|: v119:0 < 9 && v132:0 < 11 && v116:0 < 11 && v118:0 < 8 && v132:0 > 2
Filtered unneeded arguments:
   f_248(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_248(x7, x8, x9, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_248(sum~cons_1~v132:0, v116:0, sum~cons_1~v119:0, v118:0, v119:0) -> f_248(2 + v132:0, 1 + v132:0, v132:0, v119:0, 1 + v119:0) :|: v132:0 < 11 && v119:0 < 9 && v116:0 < 11 && v132:0 > 2 && v118:0 < 8 && sum~cons_1~v132:0 = 1 + v132:0 && sum~cons_1~v119:0 = 1 + v119:0

----------------------------------------

(22)
Obligation:
Rules:
f_248(sum~cons_1~v132:0, v116:0, sum~cons_1~v119:0, v118:0, v119:0) -> f_248(2 + v132:0, 1 + v132:0, v132:0, v119:0, 1 + v119:0) :|: v132:0 < 11 && v119:0 < 9 && v116:0 < 11 && v132:0 > 2 && v118:0 < 8 && sum~cons_1~v132:0 = 1 + v132:0 && sum~cons_1~v119:0 = 1 + v119:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_248(sum~cons_1~v132:0:0, v116:0:0, sum~cons_1~v119:0:0, v118:0:0, v119:0:0) -> f_248(2 + v132:0:0, 1 + v132:0:0, v132:0:0, v119:0:0, 1 + v119:0:0) :|: v132:0:0 > 2 && v118:0:0 < 8 && v116:0:0 < 11 && v119:0:0 < 9 && v132:0:0 < 11 && sum~cons_1~v132:0:0 = 1 + v132:0:0 && sum~cons_1~v119:0:0 = 1 + v119:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_248(x, x1, x2, x3, x4)] = 8 - x4

The following rules are decreasing:
f_248(sum~cons_1~v132:0:0, v116:0:0, sum~cons_1~v119:0:0, v118:0:0, v119:0:0) -> f_248(2 + v132:0:0, 1 + v132:0:0, v132:0:0, v119:0:0, 1 + v119:0:0) :|: v132:0:0 > 2 && v118:0:0 < 8 && v116:0:0 < 11 && v119:0:0 < 9 && v132:0:0 < 11 && sum~cons_1~v132:0:0 = 1 + v132:0:0 && sum~cons_1~v119:0:0 = 1 + v119:0:0
The following rules are bounded:
f_248(sum~cons_1~v132:0:0, v116:0:0, sum~cons_1~v119:0:0, v118:0:0, v119:0:0) -> f_248(2 + v132:0:0, 1 + v132:0:0, v132:0:0, v119:0:0, 1 + v119:0:0) :|: v132:0:0 > 2 && v118:0:0 < 8 && v116:0:0 < 11 && v119:0:0 < 9 && v132:0:0 < 11 && sum~cons_1~v132:0:0 = 1 + v132:0:0 && sum~cons_1~v119:0:0 = 1 + v119:0:0

----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
