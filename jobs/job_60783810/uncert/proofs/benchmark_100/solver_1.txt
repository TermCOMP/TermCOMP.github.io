YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/BfEhW.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 50 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2832 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 73 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/BfEhW.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/BfEhW.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cstrcmp" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 12
	0:
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		br %6
	6:
		%7 = load %4
		%8 = load %7
		%9 = sext i8 %8 to i32
		%10 = load %5
		%11 = getelementptr %10, 1
		store %11, %5
		%12 = load %10
		%13 = sext i8 %12 to i32
		%14 = icmp eq %9 %13
		br %14, %15, %23
	15:
		%16 = load %4
		%17 = getelementptr %16, 1
		store %17, %4
		%18 = load %16
		%19 = sext i8 %18 to i32
		%20 = icmp eq %19 0
		br %20, %21, %22
	21:
		store 0, %3
		br %32
	22:
		br %6
	23:
		%24 = load %4
		%25 = load %24
		%26 = zext i8 %25 to i32
		%27 = load %5
		%28 = getelementptr %27, -1
		store %28, %5
		%29 = load %28
		%30 = zext i8 %29 to i32
		%31 = sub i32 %26, %30
		store %31, %3
		br %32
	32:
		%33 = load %3
		ret %33

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 44
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = load %2
		%9 = icmp slt %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %11
	11:
		%12 = load %3
		%13 = icmp slt %12 1
		br %13, %14, %15
	14:
		store 1, %3
		br %15
	15:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%16 = load %2
		%17 = sext i32 %16 to i64
		%18 = mul i64 %17, 1
		%19 = alloca i8, numElementsLit: %18, align 16
		store %19, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%20 = load %3
		%21 = sext i32 %20 to i64
		%22 = mul i64 %21, 1
		%23 = alloca i8, numElementsLit: %22, align 16
		store %23, %5
		%24 = load %4
		%25 = load %2
		%26 = sub i32 %25, 1
		%27 = sext i32 %26 to i64
		%28 = getelementptr %24, %27
		store 0, %28
		%29 = load %5
		%30 = load %3
		%31 = sub i32 %30, 1
		%32 = sext i32 %31 to i64
		%33 = getelementptr %29, %32
		store 0, %33
		%34 = load %4
		%35 = load %5
		%36 = call i32 @cstrcmp(*i8 %34, *i8 %35)
		ret %36


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_714(v978, v979, v980, v981, v982, v988, v984, v985, v986, 1, v983, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_715(v978, v979, v980, v981, v982, v988, v1013, v984, v985, v986, 1, v983, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: TRUE
f_715(v978, v979, v980, v981, v982, v988, v1013, v984, v985, v986, 1, v983, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_716(v978, v979, v980, v981, v982, v988, v1013, v985, v986, v984, 1, v983, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: 0 = 0
f_716(v978, v979, v980, v981, v982, v988, v1013, v985, v986, v984, 1, v983, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_717(v978, v979, v980, v981, v982, v988, v1013, v986, v984, 1, v983, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: 0 = 0
f_717(v978, v979, v980, v981, v982, v988, v1013, v986, v984, 1, v983, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_718(v978, v979, v980, v981, v982, v988, v1013, v986, v1015, v984, 1, v983, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: v1015 = 1 + v986 && 4 <= v1015
f_718(v978, v979, v980, v981, v982, v988, v1013, v986, v1015, v984, 1, v983, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_719(v978, v979, v980, v981, v982, v988, v1013, v986, v1015, v984, 1, v983, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: TRUE
f_719(v978, v979, v980, v981, v982, v988, v1013, v986, v1015, v984, 1, v983, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_720(v978, v979, v980, v981, v982, v988, v1013, v986, v1015, v1017, v984, 1, v983, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: TRUE
f_720(v978, v979, v980, v981, v982, v988, v1013, v986, v1015, v1017, v984, 1, v983, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_721(v978, v979, v980, v981, v982, v988, v1013, v986, v1015, v1017, 1, v983, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: 0 = 0
f_721(v978, v979, v980, v981, v982, v988, v1013, v986, v1015, v1017, 1, v983, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_722(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v983, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: v1013 = v1017
f_722(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v983, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_724(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v983, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: 0 = 0
f_724(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v983, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_726(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v983, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: TRUE
f_726(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v983, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_728(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: 0 = 0
f_728(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_730(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: v1072 = 1 + v988 && 4 <= v1072
f_730(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_732(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: TRUE
f_732(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_734(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: 0 = 0
f_734(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, v984, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_736(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v984, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: 0 = 0
f_736(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v984, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_739(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v984, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: v1017 != 0 && v988 < v998 && v986 < v1000 && 4 <= v998 && 4 <= v1000
f_739(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v984, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_742(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v984, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: 0 = 0
f_742(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v984, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_745(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v984, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: TRUE
f_745(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v984, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_748(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v984, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: TRUE
f_748(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v983, v984, v985, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_713(v978, v979, v980, v981, v982, v988, v1017, v986, v1015, 1, v1072, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: TRUE
f_713(v978, v979, v980, v981, v982, v983, v984, v985, v986, 1, v988, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) -> f_714(v978, v979, v980, v981, v982, v988, v984, v985, v986, 1, v983, 0, v990, v1001, v991, v1002, v992, v1003, v993, v1004, v994, v1005, v998, v1000, v1006, v1007, v1008, v1011, v995, v996, v1009, v1012, v1010, v997, v999, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_714(v978:0, v979:0, v980:0, v981:0, v982:0, v988:0, v984:0, v985:0, v986:0, 1, v983:0, 0, v990:0, v1001:0, v991:0, v1002:0, v992:0, v1003:0, v993:0, v1004:0, v994:0, v1005:0, v998:0, v1000:0, v1006:0, v1007:0, v1008:0, v1011:0, v995:0, v996:0, v1009:0, v1012:0, v1010:0, v997:0, v999:0, 3, 7, 2, 4, 8) -> f_714(v978:0, v979:0, v980:0, v981:0, v982:0, 1 + v988:0, v1013:0, v986:0, 1 + v986:0, 1, v988:0, 0, v990:0, v1001:0, v991:0, v1002:0, v992:0, v1003:0, v993:0, v1004:0, v994:0, v1005:0, v998:0, v1000:0, v1006:0, v1007:0, v1008:0, v1011:0, v995:0, v996:0, v1009:0, v1012:0, v1010:0, v997:0, v999:0, 3, 7, 2, 4, 8) :|: v986:0 > 2 && v988:0 > 2 && v998:0 > v988:0 && v1013:0 < 0 && v986:0 < v1000:0 && v1000:0 > 3 && v998:0 > 3
f_714(v978:0, v979:0, v980:0, v981:0, v982:0, v988:0, v984:0, v985:0, v986:0, 1, v983:0, 0, v990:0, v1001:0, v991:0, v1002:0, v992:0, v1003:0, v993:0, v1004:0, v994:0, v1005:0, v998:0, v1000:0, v1006:0, v1007:0, v1008:0, v1011:0, v995:0, v996:0, v1009:0, v1012:0, v1010:0, v997:0, v999:0, 3, 7, 2, 4, 8) -> f_714(v978:0, v979:0, v980:0, v981:0, v982:0, 1 + v988:0, v1013:0, v986:0, 1 + v986:0, 1, v988:0, 0, v990:0, v1001:0, v991:0, v1002:0, v992:0, v1003:0, v993:0, v1004:0, v994:0, v1005:0, v998:0, v1000:0, v1006:0, v1007:0, v1008:0, v1011:0, v995:0, v996:0, v1009:0, v1012:0, v1010:0, v997:0, v999:0, 3, 7, 2, 4, 8) :|: v986:0 > 2 && v988:0 > 2 && v998:0 > v988:0 && v1013:0 > 0 && v986:0 < v1000:0 && v1000:0 > 3 && v998:0 > 3
Filtered unneeded arguments:
   f_714(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40) -> f_714(x6, x9, x23, x24)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_714(v988:0, v986:0, v998:0, v1000:0) -> f_714(1 + v988:0, 1 + v986:0, v998:0, v1000:0) :|: v988:0 > 2 && v986:0 > 2 && v998:0 > v988:0 && v986:0 < v1000:0 && v998:0 > 3 && v1000:0 > 3

----------------------------------------

(8)
Obligation:
Rules:
f_714(v988:0, v986:0, v998:0, v1000:0) -> f_714(1 + v988:0, 1 + v986:0, v998:0, v1000:0) :|: v988:0 > 2 && v986:0 > 2 && v998:0 > v988:0 && v986:0 < v1000:0 && v998:0 > 3 && v1000:0 > 3

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_714(v988:0:0, v986:0:0, v998:0:0, v1000:0:0) -> f_714(1 + v988:0:0, 1 + v986:0:0, v998:0:0, v1000:0:0) :|: v998:0:0 > 3 && v1000:0:0 > 3 && v986:0:0 < v1000:0:0 && v998:0:0 > v988:0:0 && v986:0:0 > 2 && v988:0:0 > 2

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_714(x, x1, x2, x3)] = -1 - x1 + x3

The following rules are decreasing:
f_714(v988:0:0, v986:0:0, v998:0:0, v1000:0:0) -> f_714(1 + v988:0:0, 1 + v986:0:0, v998:0:0, v1000:0:0) :|: v998:0:0 > 3 && v1000:0:0 > 3 && v986:0:0 < v1000:0:0 && v998:0:0 > v988:0:0 && v986:0:0 > 2 && v988:0:0 > 2
The following rules are bounded:
f_714(v988:0:0, v986:0:0, v998:0:0, v1000:0:0) -> f_714(1 + v988:0:0, 1 + v986:0:0, v998:0:0, v1000:0:0) :|: v998:0:0 > 3 && v1000:0:0 > 3 && v986:0:0 < v1000:0:0 && v998:0:0 > v988:0:0 && v986:0:0 > 2 && v988:0:0 > 2

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
