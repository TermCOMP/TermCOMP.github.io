YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/BfSGs.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 38 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 342 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 52 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/BfSGs.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/BfSGs.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_String" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i8, align 8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %1
		%4 = load %1
		%5 = icmp slt %4 1
		br %5, %6, %7
	6:
		store 1, %1
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		%8 = load %1
		%9 = sext i32 %8 to i64
		%10 = mul i64 %9, 1
		%11 = call noalias *i8 @malloc(i64 %10)
		store %11, %2
		%12 = load %2
		%13 = load %1
		%14 = sub i32 %13, 1
		%15 = sext i32 %14 to i64
		%16 = getelementptr %12, %15
		store 0, %16
		%17 = load %2
		ret %17

*BasicFunctionTypename: "cstrchr" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 36
	0:
		%3 = alloca *i8, align 8
		%4 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		br %5
	5:
		%6 = load %3
		%7 = load %6
		%8 = sext i8 %7 to i32
		%9 = icmp ne %8 0
		br %9, %10, %18
	10:
		%11 = load %3
		%12 = load %11
		%13 = sext i8 %12 to i32
		%14 = load %4
		%15 = trunc i32 %14 to i8
		%16 = sext i8 %15 to i32
		%17 = icmp ne %13 %16
		br %18
	18:
		%19 = phi [0, %5], [%17, %10]
		br %19, %20, %23
	20:
		%21 = load %3
		%22 = getelementptr %21, 1
		store %22, %3
		br %5
	23:
		%24 = load %3
		%25 = load %24
		%26 = sext i8 %25 to i32
		%27 = load %4
		%28 = icmp eq %26 %27
		br %28, %29, %31
	29:
		%30 = load %3
		br %32
	31:
		br %32
	32:
		%33 = phi [%30, %29], [null, %31]
		ret %33

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 65
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call *i8 @__VERIFIER_nondet_String()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call *i8 @cstrchr(*i8 %2, i32 %3)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_373(v259, v260, v261, v262, v267, v264, 1, v263, v266, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) -> f_374(v259, v260, v261, v262, v267, v275, v264, 1, v263, v266, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) :|: TRUE
f_374(v259, v260, v261, v262, v267, v275, v264, 1, v263, v266, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) -> f_375(v259, v260, v261, v262, v267, v275, 1, v263, v264, v266, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_375(v259, v260, v261, v262, v267, v275, 1, v263, v264, v266, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) -> f_376(v259, v260, v261, v262, v267, v275, 1, v263, v264, v266, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) :|: v275 != 0 && v267 < v270 && 3 <= v270
f_376(v259, v260, v261, v262, v267, v275, 1, v263, v264, v266, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) -> f_378(v259, v260, v261, v262, v267, v275, 1, v263, v264, v266, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_378(v259, v260, v261, v262, v267, v275, 1, v263, v264, v266, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) -> f_380(v259, v260, v261, v262, v267, v275, 1, v263, v264, v266, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) :|: TRUE
f_380(v259, v260, v261, v262, v267, v275, 1, v263, v264, v266, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) -> f_382(v259, v260, v261, v262, v267, v275, 1, v264, v266, v263, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_382(v259, v260, v261, v262, v267, v275, 1, v264, v266, v263, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) -> f_384(v259, v260, v261, v262, v267, v275, 1, v264, v266, v263, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_384(v259, v260, v261, v262, v267, v275, 1, v264, v266, v263, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) -> f_386(v259, v260, v261, v262, v267, v275, 1, v266, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_386(v259, v260, v261, v262, v267, v275, 1, v266, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) -> f_388(v259, v260, v261, v262, v267, v275, 1, v266, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_388(v259, v260, v261, v262, v267, v275, 1, v266, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) -> f_390(v259, v260, v261, v262, v267, v275, 1, v292, v266, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) :|: TRUE
f_390(v259, v260, v261, v262, v267, v275, 1, v292, v266, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) -> f_392(v259, v260, v261, v262, v267, v275, 1, v292, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_392(v259, v260, v261, v262, v267, v275, 1, v292, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) -> f_395(v259, v260, v261, v262, v267, v275, 1, v292, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) :|: v275 != v292
f_395(v259, v260, v261, v262, v267, v275, 1, v292, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) -> f_399(v259, v260, v261, v262, v267, v275, 1, v292, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_399(v259, v260, v261, v262, v267, v275, 1, v292, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) -> f_403(v259, v260, v261, v262, v267, v275, 1, v292, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_403(v259, v260, v261, v262, v267, v275, 1, v292, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) -> f_407(v259, v260, v261, v262, v267, v275, 1, v292, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) :|: TRUE
f_407(v259, v260, v261, v262, v267, v275, 1, v292, v263, v268, v269, v270, v271, v272, v273, v264, 0, 3, 7, 2, 4, 8) -> f_411(v259, v260, v261, v262, v267, v275, 1, v292, v268, v269, v270, v271, v272, v273, v263, v264, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_411(v259, v260, v261, v262, v267, v275, 1, v292, v268, v269, v270, v271, v272, v273, v263, v264, 0, 3, 7, 2, 4, 8) -> f_414(v259, v260, v261, v262, v267, v275, 1, v292, v370, v268, v269, v270, v271, v272, v273, v263, v264, 0, 3, 7, 2, 4, 8) :|: v370 = 1 + v267 && 3 <= v370
f_414(v259, v260, v261, v262, v267, v275, 1, v292, v370, v268, v269, v270, v271, v272, v273, v263, v264, 0, 3, 7, 2, 4, 8) -> f_416(v259, v260, v261, v262, v267, v275, 1, v292, v370, v268, v269, v270, v271, v272, v273, v263, v264, 0, 3, 7, 2, 4, 8) :|: TRUE
f_416(v259, v260, v261, v262, v267, v275, 1, v292, v370, v268, v269, v270, v271, v272, v273, v263, v264, 0, 3, 7, 2, 4, 8) -> f_418(v259, v260, v261, v262, v267, v275, 1, v292, v370, v268, v269, v270, v271, v272, v273, v263, v264, 0, 3, 7, 2, 4, 8) :|: TRUE
f_418(v259, v260, v261, v262, v267, v275, 1, v292, v370, v268, v269, v270, v271, v272, v273, v263, v264, 0, 3, 7, 2, 4, 8) -> f_372(v259, v260, v261, v262, v267, v275, 1, v292, v370, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) :|: TRUE
f_372(v259, v260, v261, v262, v263, v264, 1, v266, v267, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) -> f_373(v259, v260, v261, v262, v267, v264, 1, v263, v266, v268, v269, v270, v271, v272, v273, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 4 rulesP rules:
f_373(v259:0, v260:0, v261:0, v262:0, v267:0, v264:0, 1, v263:0, v266:0, v268:0, v269:0, v270:0, v271:0, v272:0, v273:0, 0, 3, 7, 2, 4, 8) -> f_373(v259:0, v260:0, v261:0, v262:0, 1 + v267:0, v275:0, 1, v267:0, v292:0, v268:0, v269:0, v270:0, v271:0, v272:0, v273:0, 0, 3, 7, 2, 4, 8) :|: v270:0 > v267:0 && v275:0 < 0 && v270:0 > 2 && v267:0 > 1 && v292:0 > v275:0
f_373(v259:0, v260:0, v261:0, v262:0, v267:0, v264:0, 1, v263:0, v266:0, v268:0, v269:0, v270:0, v271:0, v272:0, v273:0, 0, 3, 7, 2, 4, 8) -> f_373(v259:0, v260:0, v261:0, v262:0, 1 + v267:0, v275:0, 1, v267:0, v292:0, v268:0, v269:0, v270:0, v271:0, v272:0, v273:0, 0, 3, 7, 2, 4, 8) :|: v270:0 > v267:0 && v275:0 < 0 && v270:0 > 2 && v267:0 > 1 && v292:0 < v275:0
f_373(v259:0, v260:0, v261:0, v262:0, v267:0, v264:0, 1, v263:0, v266:0, v268:0, v269:0, v270:0, v271:0, v272:0, v273:0, 0, 3, 7, 2, 4, 8) -> f_373(v259:0, v260:0, v261:0, v262:0, 1 + v267:0, v275:0, 1, v267:0, v292:0, v268:0, v269:0, v270:0, v271:0, v272:0, v273:0, 0, 3, 7, 2, 4, 8) :|: v270:0 > v267:0 && v275:0 > 0 && v270:0 > 2 && v267:0 > 1 && v292:0 > v275:0
f_373(v259:0, v260:0, v261:0, v262:0, v267:0, v264:0, 1, v263:0, v266:0, v268:0, v269:0, v270:0, v271:0, v272:0, v273:0, 0, 3, 7, 2, 4, 8) -> f_373(v259:0, v260:0, v261:0, v262:0, 1 + v267:0, v275:0, 1, v267:0, v292:0, v268:0, v269:0, v270:0, v271:0, v272:0, v273:0, 0, 3, 7, 2, 4, 8) :|: v270:0 > v267:0 && v275:0 > 0 && v270:0 > 2 && v267:0 > 1 && v292:0 < v275:0
Filtered unneeded arguments:
   f_373(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_373(x5, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_373(v267:0, v270:0) -> f_373(1 + v267:0, v270:0) :|: v270:0 > 2 && v267:0 > 1 && v270:0 > v267:0

----------------------------------------

(8)
Obligation:
Rules:
f_373(v267:0, v270:0) -> f_373(1 + v267:0, v270:0) :|: v270:0 > 2 && v267:0 > 1 && v270:0 > v267:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_373(v267:0:0, v270:0:0) -> f_373(1 + v267:0:0, v270:0:0) :|: v270:0:0 > 2 && v267:0:0 > 1 && v270:0:0 > v267:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_373 ] = f_373_2 + -1*f_373_1

The following rules are decreasing:
f_373(v267:0:0, v270:0:0) -> f_373(1 + v267:0:0, v270:0:0) :|: v270:0:0 > 2 && v267:0:0 > 1 && v270:0:0 > v267:0:0

The following rules are bounded:
f_373(v267:0:0, v270:0:0) -> f_373(1 + v267:0:0, v270:0:0) :|: v270:0:0 > 2 && v267:0:0 > 1 && v270:0:0 > v267:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
