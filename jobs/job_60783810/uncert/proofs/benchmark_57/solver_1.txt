YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/BwaN3.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 47 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 851 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 24 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/BwaN3.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/BwaN3.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cstrlen" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 11
	0:
		%2 = alloca *i8, align 8
		%3 = alloca *i8, align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%4 = load %2
		store %4, %3
		br %5
	5:
		%6 = load %3
		%7 = load %6
		%8 = sext i8 %7 to i32
		%9 = icmp ne %8 0
		br %9, %10, %13
	10:
		%11 = load %3
		%12 = getelementptr %11, 1
		store %12, %3
		br %5
	13:
		%14 = load %3
		%15 = load %2
		%16 = ptrtoint *i8 %14 to i64
		%17 = ptrtoint *i8 %15 to i64
		%18 = sub i64 %16, %17
		%19 = trunc i64 %18 to i32
		ret %19

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 33
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %7, %8
	7:
		store 1, %2
		br %8
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%9 = load %2
		%10 = sext i32 %9 to i64
		%11 = mul i64 %10, 1
		%12 = alloca i8, numElementsLit: %11, align 16
		store %12, %3
		%13 = load %3
		%14 = load %2
		%15 = sub i32 %14, 1
		%16 = sext i32 %15 to i64
		%17 = getelementptr %13, %16
		store 0, %17
		%18 = load %3
		%19 = call i32 @cstrlen(*i8 %18)
		ret %19


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 11 rulesP rules:
f_306(v158, v159, v160, v164, v162, 1, v161, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) -> f_307(v158, v159, v160, v164, v180, v162, 1, v161, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) :|: TRUE
f_307(v158, v159, v160, v164, v180, v162, 1, v161, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) -> f_308(v158, v159, v160, v164, v180, 1, v161, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) :|: 0 = 0
f_308(v158, v159, v160, v164, v180, 1, v161, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) -> f_309(v158, v159, v160, v164, v180, 1, v161, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) :|: v180 != 0 && v164 < v171 && 4 <= v171
f_309(v158, v159, v160, v164, v180, 1, v161, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) -> f_311(v158, v159, v160, v164, v180, 1, v161, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) :|: 0 = 0
f_311(v158, v159, v160, v164, v180, 1, v161, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) -> f_313(v158, v159, v160, v164, v180, 1, v161, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) :|: TRUE
f_313(v158, v159, v160, v164, v180, 1, v161, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) -> f_315(v158, v159, v160, v164, v180, 1, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v161, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) :|: 0 = 0
f_315(v158, v159, v160, v164, v180, 1, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v161, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) -> f_317(v158, v159, v160, v164, v180, 1, v199, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v161, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) :|: v199 = 1 + v164 && 4 <= v199
f_317(v158, v159, v160, v164, v180, 1, v199, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v161, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) -> f_319(v158, v159, v160, v164, v180, 1, v199, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v161, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) :|: TRUE
f_319(v158, v159, v160, v164, v180, 1, v199, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v161, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) -> f_321(v158, v159, v160, v164, v180, 1, v199, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v161, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) :|: TRUE
f_321(v158, v159, v160, v164, v180, 1, v199, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, v161, v162, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) -> f_305(v158, v159, v160, v164, v180, 1, v199, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) :|: TRUE
f_305(v158, v159, v160, v161, v162, 1, v164, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) -> f_306(v158, v159, v160, v164, v162, 1, v161, v165, v172, v166, v173, v167, v174, v171, v175, v176, v178, 0, v168, v177, v179, v170, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_306(v158:0, v159:0, v160:0, v164:0, v162:0, 1, v161:0, v165:0, v172:0, v166:0, v173:0, v167:0, v174:0, v171:0, v175:0, v176:0, v178:0, 0, v168:0, v177:0, v179:0, v170:0, 3, 7, 2, 4, 8) -> f_306(v158:0, v159:0, v160:0, 1 + v164:0, v180:0, 1, v164:0, v165:0, v172:0, v166:0, v173:0, v167:0, v174:0, v171:0, v175:0, v176:0, v178:0, 0, v168:0, v177:0, v179:0, v170:0, 3, 7, 2, 4, 8) :|: v171:0 > v164:0 && v180:0 < 0 && v164:0 > 2 && v171:0 > 3
f_306(v158:0, v159:0, v160:0, v164:0, v162:0, 1, v161:0, v165:0, v172:0, v166:0, v173:0, v167:0, v174:0, v171:0, v175:0, v176:0, v178:0, 0, v168:0, v177:0, v179:0, v170:0, 3, 7, 2, 4, 8) -> f_306(v158:0, v159:0, v160:0, 1 + v164:0, v180:0, 1, v164:0, v165:0, v172:0, v166:0, v173:0, v167:0, v174:0, v171:0, v175:0, v176:0, v178:0, 0, v168:0, v177:0, v179:0, v170:0, 3, 7, 2, 4, 8) :|: v171:0 > v164:0 && v180:0 > 0 && v164:0 > 2 && v171:0 > 3
Filtered unneeded arguments:
   f_306(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_306(x4, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_306(v164:0, v171:0) -> f_306(1 + v164:0, v171:0) :|: v164:0 > 2 && v171:0 > 3 && v171:0 > v164:0

----------------------------------------

(8)
Obligation:
Rules:
f_306(v164:0, v171:0) -> f_306(1 + v164:0, v171:0) :|: v164:0 > 2 && v171:0 > 3 && v171:0 > v164:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_306(v164:0:0, v171:0:0) -> f_306(1 + v164:0:0, v171:0:0) :|: v164:0:0 > 2 && v171:0:0 > 3 && v171:0:0 > v164:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_306 ] = -1*f_306_1 + f_306_2

The following rules are decreasing:
f_306(v164:0:0, v171:0:0) -> f_306(1 + v164:0:0, v171:0:0) :|: v164:0:0 > 2 && v171:0:0 > 3 && v171:0:0 > v164:0:0

The following rules are bounded:
f_306(v164:0:0, v171:0:0) -> f_306(1 + v164:0:0, v171:0:0) :|: v164:0:0 > 2 && v171:0:0 > 3 && v171:0:0 > v164:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
