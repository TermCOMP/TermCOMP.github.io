YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/E60OB.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 16 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 398 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 52 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 37 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/E60OB.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/E60OB.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%4 = alloca i8, numElementsLit: 4, align 16
		%5 = bitcast *i8 %4 to *i32
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%6 = alloca i8, numElementsLit: 4, align 16
		%7 = bitcast *i8 %6 to *i32
		store %7, %3
		br %8
	8:
		%9 = load %2
		%10 = load %9
		%11 = icmp sle %10 10
		br %11, %12, %28
	12:
		%13 = load %3
		store 10, %13
		br %14
	14:
		%15 = load %3
		%16 = load %15
		%17 = icmp sgt %16 1
		br %17, %18, %23
	18:
		%19 = load %3
		%20 = load %19
		%21 = sub i32 %20, 1
		%22 = load %3
		store %21, %22
		br %14
	23:
		%24 = load %2
		%25 = load %24
		%26 = add i32 %25, 1
		%27 = load %2
		store %26, %27
		br %8
	28:
		%29 = load %1
		ret %29


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 37 rulesP rules:
f_206(v49, v50, v51, v52, v53, v54, 1, 0, 2, v65, v58, v59, v60, v61, v62, 3, 7, 10, 4, 8, 11) -> f_207(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 3, 7, 10, 4, 8, 11) :|: 0 = 0
f_207(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 3, 7, 10, 4, 8, 11) -> f_208(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 3, 7, 9, 4, 8, 10) :|: v65 <= 10 && v54 <= 9
f_208(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 3, 7, 9, 4, 8, 10) -> f_210(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 3, 7, 9, 4, 8, 10) :|: 0 = 0
f_210(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 3, 7, 9, 4, 8, 10) -> f_212(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 3, 7, 9, 4, 8, 10) :|: TRUE
f_212(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 3, 7, 9, 4, 8, 10) -> f_214(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 3, 7, 9, 4, 8, 10) :|: 0 = 0
f_214(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 3, 7, 9, 4, 8, 10) -> f_216(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 10, 3, 7, 9, 4, 8) :|: TRUE
f_216(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 10, 3, 7, 9, 4, 8) -> f_217(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 10, 3, 7, 9, 4, 8) :|: TRUE
f_217(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 10, 3, 7, 9, 4, 8) -> f_218(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 10, 3, 7, 9, 4, 8) :|: 0 = 0
f_218(v49, v50, v51, v52, v53, v65, 1, 0, 2, v54, v58, v59, v60, v61, v62, 10, 3, 7, 9, 4, 8) -> f_219(v49, v50, v51, v52, v53, v65, 1, 10, 0, 2, v54, v58, v59, v60, v61, v62, 3, 7, 9, 4, 8) :|: 0 = 0
f_219(v49, v50, v51, v52, v53, v65, 1, 10, 0, 2, v54, v58, v59, v60, v61, v62, 3, 7, 9, 4, 8) -> f_220(v49, v50, v51, v52, v53, v65, 1, 10, 2, v54, v58, v59, v60, v61, v62, 0, 3, 7, 9, 4, 8) :|: 0 = 0
f_220(v49, v50, v51, v52, v53, v65, 1, 10, 2, v54, v58, v59, v60, v61, v62, 0, 3, 7, 9, 4, 8) -> f_221(v49, v50, v51, v52, v53, v65, 1, 10, 2, v54, v58, v59, v60, v61, v62, 0, 3, 7, 9, 4, 8) :|: TRUE
f_221(v49, v50, v51, v52, v53, v65, 1, 10, 2, v54, v58, v59, v60, v61, v62, 0, 3, 7, 9, 4, 8) -> f_232(v49, v50, v51, v52, v53, v65, 1, 10, 2, 1, v54, v58, v59, v60, v61, v62, 0, 3, 7, 10, 9, 2, 4, 8) :|: TRUE
f_232(v127, v128, v129, v130, v131, v132, 1, v134, v135, v136, v137, v138, v139, v140, v141, v142, 0, 3, 7, 10, 9, 2, 4, 8) -> f_243(v127, v128, v129, v130, v131, v132, 1, v134, v135, v136, v137, v138, v139, v140, v141, v142, 0, 3, 7, 10, 8, 2, 9, 4) :|: TRUE
f_243(v171, v172, v173, v174, v175, v176, 1, v178, v179, v180, v181, v182, v183, v184, v185, v186, 0, 3, 7, 10, 8, 2, 9, 4) -> f_254(v171, v172, v173, v174, v175, v176, 1, v178, v179, v180, v181, v182, v183, v184, v185, v186, 0, 3, 7, 10, 2, 9, 4, 8) :|: TRUE
f_254(v215, v216, v217, v218, v219, v220, 1, v222, v223, v224, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) -> f_255(v215, v216, v217, v218, v219, v220, 1, v222, v223, v224, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) :|: 0 = 0
f_255(v215, v216, v217, v218, v219, v220, 1, v222, v223, v224, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) -> f_256(v215, v216, v217, v218, v219, v220, 1, v222, v224, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) :|: 0 = 0
f_256(v215, v216, v217, v218, v219, v220, 1, v222, v224, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) -> f_257(v215, v216, v217, v218, v219, v220, 1, v222, v232, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) :|: 1 + v232 = v222 && 1 <= v232 && v232 <= 9
f_257(v215, v216, v217, v218, v219, v220, 1, v222, v232, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) -> f_258(v215, v216, v217, v218, v219, v220, 1, v222, v232, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) :|: 0 = 0
f_258(v215, v216, v217, v218, v219, v220, 1, v222, v232, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) -> f_259(v215, v216, v217, v218, v219, v220, 1, v222, v232, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) :|: TRUE
f_259(v215, v216, v217, v218, v219, v220, 1, v222, v232, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) -> f_260(v215, v216, v217, v218, v219, v220, 1, v222, v232, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) :|: TRUE
f_260(v215, v216, v217, v218, v219, v220, 1, v222, v232, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) -> f_261(v215, v216, v217, v218, v219, v220, 1, v222, v232, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) :|: 0 = 0
f_261(v215, v216, v217, v218, v219, v220, 1, v222, v232, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) -> f_262(v215, v216, v217, v218, v219, v220, 1, v232, v222, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) :|: 0 = 0
f_262(v215, v216, v217, v218, v219, v220, 1, v232, v222, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) -> f_263(v215, v216, v217, v218, v219, v220, 1, v232, v222, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 9, 4, 8, 2) :|: 1 < v232 && 3 <= v222
f_262(v215, v216, v217, v218, v219, v220, 1, v232, v222, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) -> f_264(v215, v216, v217, v218, v219, v220, 1, 2, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 9, 4, 8) :|: v232 <= 1 && v222 = 2 && v232 = 1 && 0 = 0
f_263(v215, v216, v217, v218, v219, v220, 1, v232, v222, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 9, 4, 8, 2) -> f_265(v215, v216, v217, v218, v219, v220, 1, v232, v222, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 9, 4, 8, 2) :|: 0 = 0
f_265(v215, v216, v217, v218, v219, v220, 1, v232, v222, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 9, 4, 8, 2) -> f_267(v215, v216, v217, v218, v219, v220, 1, v232, v222, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 9, 4, 8, 2) :|: TRUE
f_267(v215, v216, v217, v218, v219, v220, 1, v232, v222, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 9, 4, 8, 2) -> f_254(v215, v216, v217, v218, v219, v220, 1, v232, v222, v232, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 2, 9, 4, 8) :|: TRUE
f_264(v215, v216, v217, v218, v219, v220, 1, 2, v225, v226, v227, v228, v229, v230, 0, 3, 7, 10, 9, 4, 8) -> f_266(v215, v216, v217, v218, v219, v220, 1, 0, 2, v225, v226, v227, v228, v229, v230, 3, 7, 10, 9, 4, 8) :|: 0 = 0
f_266(v215, v216, v217, v218, v219, v220, 1, 0, 2, v225, v226, v227, v228, v229, v230, 3, 7, 10, 9, 4, 8) -> f_268(v215, v216, v217, v218, v219, v220, 1, 0, 2, v225, v226, v227, v228, v229, v230, 3, 7, 10, 9, 4, 8) :|: TRUE
f_268(v215, v216, v217, v218, v219, v220, 1, 0, 2, v225, v226, v227, v228, v229, v230, 3, 7, 10, 9, 4, 8) -> f_269(v215, v216, v217, v218, v219, v220, 1, 0, 2, v225, v226, v227, v228, v229, v230, 3, 7, 10, 9, 4, 8) :|: 0 = 0
f_269(v215, v216, v217, v218, v219, v220, 1, 0, 2, v225, v226, v227, v228, v229, v230, 3, 7, 10, 9, 4, 8) -> f_270(v215, v216, v217, v218, v219, v220, 1, 0, 2, v226, v227, v228, v229, v230, 3, 7, 10, 4, 8) :|: 0 = 0
f_270(v215, v216, v217, v218, v219, v220, 1, 0, 2, v226, v227, v228, v229, v230, 3, 7, 10, 4, 8) -> f_271(v215, v216, v217, v218, v219, v220, 1, 0, 2, v276, v226, v227, v228, v229, v230, 3, 7, 10, 4, 8, 11) :|: v276 = 1 + v220 && v276 <= 11
f_271(v215, v216, v217, v218, v219, v220, 1, 0, 2, v276, v226, v227, v228, v229, v230, 3, 7, 10, 4, 8, 11) -> f_272(v215, v216, v217, v218, v219, v220, 1, 0, 2, v276, v226, v227, v228, v229, v230, 3, 7, 10, 4, 8, 11) :|: 0 = 0
f_272(v215, v216, v217, v218, v219, v220, 1, 0, 2, v276, v226, v227, v228, v229, v230, 3, 7, 10, 4, 8, 11) -> f_273(v215, v216, v217, v218, v219, v220, 1, 0, 2, v276, v226, v227, v228, v229, v230, 3, 7, 10, 4, 8, 11) :|: TRUE
f_273(v215, v216, v217, v218, v219, v220, 1, 0, 2, v276, v226, v227, v228, v229, v230, 3, 7, 10, 4, 8, 11) -> f_274(v215, v216, v217, v218, v219, v220, 1, 0, 2, v276, v226, v227, v228, v229, v230, 3, 7, 10, 4, 8, 11) :|: TRUE
f_274(v215, v216, v217, v218, v219, v220, 1, 0, 2, v276, v226, v227, v228, v229, v230, 3, 7, 10, 4, 8, 11) -> f_205(v215, v216, v217, v218, v219, v220, 1, 0, 2, v276, v226, v227, v228, v229, v230, 3, 7, 10, 4, 8, 11) :|: TRUE
f_205(v49, v50, v51, v52, v53, v54, 1, 0, 2, v65, v58, v59, v60, v61, v62, 3, 7, 10, 4, 8, 11) -> f_206(v49, v50, v51, v52, v53, v54, 1, 0, 2, v65, v58, v59, v60, v61, v62, 3, 7, 10, 4, 8, 11) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_262(v215:0, v216:0, v217:0, v218:0, v219:0, v220:0, 1, 1, 2, v225:0, v226:0, v227:0, v228:0, v229:0, v230:0, 0, 3, 7, 10, 2, 9, 4, 8) -> f_262(v215:0, v216:0, v217:0, v218:0, v219:0, 1 + v220:0, 1, 9, 10, v220:0, v226:0, v227:0, v228:0, v229:0, v230:0, 0, 3, 7, 10, 2, 9, 4, 8) :|: v220:0 < 10 && v220:0 < 11
f_262(v215:0, v216:0, v217:0, v218:0, v219:0, v220:0, 1, 1 + v232:1, v222:0, v225:0, v226:0, v227:0, v228:0, v229:0, v230:0, 0, 3, 7, 10, 2, 9, 4, 8) -> f_262(v215:0, v216:0, v217:0, v218:0, v219:0, v220:0, 1, v232:1, 1 + v232:1, v225:0, v226:0, v227:0, v228:0, v229:0, v230:0, 0, 3, 7, 10, 2, 9, 4, 8) :|: v232:1 > 0 && v232:1 < 10 && v222:0 > 2
Filtered unneeded arguments:
   f_262(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_262(x6, x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_262(v220:0, cons_1, cons_2) -> f_262(1 + v220:0, 9, 10) :|: v220:0 < 10 && v220:0 < 11 && cons_1 = 1 && cons_2 = 2
f_262(v220:0, sum~cons_1~v232:1, v222:0) -> f_262(v220:0, v232:1, 1 + v232:1) :|: v232:1 < 10 && v222:0 > 2 && v232:1 > 0 && sum~cons_1~v232:1 = 1 + v232:1

----------------------------------------

(9)
Obligation:
Rules:
f_262(v220:0, cons_1, cons_2) -> f_262(1 + v220:0, 9, 10) :|: v220:0 < 10 && v220:0 < 11 && cons_1 = 1 && cons_2 = 2
f_262(x, x1, x2) -> f_262(x, x3, 1 + x3) :|: x3 < 10 && x2 > 2 && x3 > 0 && x1 = 1 + x3

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_262(v220:0:0, cons_1, cons_2) -> f_262(1 + v220:0:0, 9, 10) :|: v220:0:0 < 10 && v220:0:0 < 11 && cons_1 = 1 && cons_2 = 2
f_262(x:0, sum~cons_1~x3:0, x2:0) -> f_262(x:0, x3:0, 1 + x3:0) :|: x3:0 < 10 && x2:0 > 2 && x3:0 > 0 && sum~cons_1~x3:0 = 1 + x3:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_262 ] = -9*f_262_1 + f_262_2

The following rules are decreasing:
f_262(v220:0:0, cons_1, cons_2) -> f_262(1 + v220:0:0, 9, 10) :|: v220:0:0 < 10 && v220:0:0 < 11 && cons_1 = 1 && cons_2 = 2
f_262(x:0, sum~cons_1~x3:0, x2:0) -> f_262(x:0, x3:0, 1 + x3:0) :|: x3:0 < 10 && x2:0 > 2 && x3:0 > 0 && sum~cons_1~x3:0 = 1 + x3:0

The following rules are bounded:
f_262(v220:0:0, cons_1, cons_2) -> f_262(1 + v220:0:0, 9, 10) :|: v220:0:0 < 10 && v220:0:0 < 11 && cons_1 = 1 && cons_2 = 2


----------------------------------------

(13)
Obligation:
Rules:
f_262(x:0, sum~cons_1~x3:0, x2:0) -> f_262(x:0, x3:0, 1 + x3:0) :|: x3:0 < 10 && x2:0 > 2 && x3:0 > 0 && sum~cons_1~x3:0 = 1 + x3:0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_262(x:0:0, sum~cons_1~x3:0:0, x2:0:0) -> f_262(x:0:0, x3:0:0, 1 + x3:0:0) :|: x3:0:0 < 10 && x2:0:0 > 2 && x3:0:0 > 0 && sum~cons_1~x3:0:0 = 1 + x3:0:0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_262(x1, x2, x3) -> f_262(x2, x3)

----------------------------------------

(17)
Obligation:
Rules:
f_262(sum~cons_1~x3:0:0, x2:0:0) -> f_262(x3:0:0, 1 + x3:0:0) :|: x3:0:0 < 10 && x2:0:0 > 2 && x3:0:0 > 0 && sum~cons_1~x3:0:0 = 1 + x3:0:0

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_262(x, x1)] = x

The following rules are decreasing:
f_262(sum~cons_1~x3:0:0, x2:0:0) -> f_262(x3:0:0, 1 + x3:0:0) :|: x3:0:0 < 10 && x2:0:0 > 2 && x3:0:0 > 0 && sum~cons_1~x3:0:0 = 1 + x3:0:0
The following rules are bounded:
f_262(sum~cons_1~x3:0:0, x2:0:0) -> f_262(x3:0:0, 1 + x3:0:0) :|: x3:0:0 < 10 && x2:0:0 > 2 && x3:0:0 > 0 && sum~cons_1~x3:0:0 = 1 + x3:0:0

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_186(v49, v50, v51, v52, v53, v54, 1, v56, v57, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) -> f_187(v49, v50, v51, v52, v53, v54, 1, v57, v56, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) :|: 0 = 0
f_187(v49, v50, v51, v52, v53, v54, 1, v57, v56, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) -> f_188(v49, v50, v51, v52, v53, v54, 1, v57, v56, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) :|: 1 < v57 && 3 <= v56
f_188(v49, v50, v51, v52, v53, v54, 1, v57, v56, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) -> f_190(v49, v50, v51, v52, v53, v54, 1, v57, v56, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) :|: 0 = 0
f_190(v49, v50, v51, v52, v53, v54, 1, v57, v56, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) -> f_192(v49, v50, v51, v52, v53, v54, 1, v57, v56, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) :|: TRUE
f_192(v49, v50, v51, v52, v53, v54, 1, v57, v56, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) -> f_194(v49, v50, v51, v52, v53, v54, 1, v57, v56, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) :|: 0 = 0
f_194(v49, v50, v51, v52, v53, v54, 1, v57, v56, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) -> f_196(v49, v50, v51, v52, v53, v54, 1, v57, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) :|: 0 = 0
f_196(v49, v50, v51, v52, v53, v54, 1, v57, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) -> f_198(v49, v50, v51, v52, v53, v54, 1, v57, v64, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) :|: 1 + v64 = v57 && 1 <= v64 && v64 <= 8
f_198(v49, v50, v51, v52, v53, v54, 1, v57, v64, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) -> f_200(v49, v50, v51, v52, v53, v54, 1, v57, v64, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) :|: 0 = 0
f_200(v49, v50, v51, v52, v53, v54, 1, v57, v64, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) -> f_202(v49, v50, v51, v52, v53, v54, 1, v57, v64, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) :|: TRUE
f_202(v49, v50, v51, v52, v53, v54, 1, v57, v64, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) -> f_204(v49, v50, v51, v52, v53, v54, 1, v57, v64, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) :|: TRUE
f_204(v49, v50, v51, v52, v53, v54, 1, v57, v64, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) -> f_185(v49, v50, v51, v52, v53, v54, 1, v57, v64, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) :|: TRUE
f_185(v49, v50, v51, v52, v53, v54, 1, v56, v57, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) -> f_186(v49, v50, v51, v52, v53, v54, 1, v56, v57, v58, v59, v60, v61, v62, 0, 3, 7, 10, 2, 9, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_186(v49:0, v50:0, v51:0, v52:0, v53:0, v54:0, 1, v56:0, 1 + v64:0, v58:0, v59:0, v60:0, v61:0, v62:0, 0, 3, 7, 10, 2, 9, 4, 8) -> f_186(v49:0, v50:0, v51:0, v52:0, v53:0, v54:0, 1, 1 + v64:0, v64:0, v58:0, v59:0, v60:0, v61:0, v62:0, 0, 3, 7, 10, 2, 9, 4, 8) :|: v56:0 > 2 && v64:0 > 0 && v64:0 < 9
Filtered unneeded arguments:
   f_186(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_186(x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_186(v56:0, sum~cons_1~v64:0) -> f_186(1 + v64:0, v64:0) :|: v64:0 > 0 && v64:0 < 9 && v56:0 > 2 && sum~cons_1~v64:0 = 1 + v64:0

----------------------------------------

(22)
Obligation:
Rules:
f_186(v56:0, sum~cons_1~v64:0) -> f_186(1 + v64:0, v64:0) :|: v64:0 > 0 && v64:0 < 9 && v56:0 > 2 && sum~cons_1~v64:0 = 1 + v64:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_186(v56:0:0, sum~cons_1~v64:0:0) -> f_186(1 + v64:0:0, v64:0:0) :|: v64:0:0 > 0 && v64:0:0 < 9 && v56:0:0 > 2 && sum~cons_1~v64:0:0 = 1 + v64:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_186(x, x1)] = x1

The following rules are decreasing:
f_186(v56:0:0, sum~cons_1~v64:0:0) -> f_186(1 + v64:0:0, v64:0:0) :|: v64:0:0 > 0 && v64:0:0 < 9 && v56:0:0 > 2 && sum~cons_1~v64:0:0 = 1 + v64:0:0
The following rules are bounded:
f_186(v56:0:0, sum~cons_1~v64:0:0) -> f_186(1 + v64:0:0, v64:0:0) :|: v64:0:0 > 0 && v64:0:0 < 9 && v56:0:0 > 2 && sum~cons_1~v64:0:0 = 1 + v64:0:0

----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
