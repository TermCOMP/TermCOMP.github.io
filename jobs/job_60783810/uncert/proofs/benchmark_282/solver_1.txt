YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ciIUW.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 882 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 41 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 42 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 43 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/ciIUW.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/ciIUW.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = icmp sgt %9 0
		br %10, %11, %17
	11:
		%12 = load %3
		%13 = icmp sgt %12 0
		br %13, %14, %17
	14:
		%15 = load %4
		%16 = icmp sgt %15 0
		br %17
	17:
		%18 = phi [0, %11], [0, %8], [%16, %14]
		br %18, %19, %35
	19:
		%20 = load %3
		%21 = load %2
		%22 = icmp sgt %20 %21
		br %22, %23, %28
	23:
		%24 = load %4
		store %24, %3
		%25 = call i32 @__VERIFIER_nondet_int()
		store %25, %2
		%26 = load %2
		%27 = sub i32 %26, 1
		store %27, %4
		br %34
	28:
		%29 = load %4
		%30 = sub i32 %29, 1
		store %30, %4
		%31 = call i32 @__VERIFIER_nondet_int()
		store %31, %2
		%32 = load %2
		%33 = sub i32 %32, 1
		store %33, %3
		br %34
	34:
		br %8
	35:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 28 rulesP rules:
f_509(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2900, 1, v2902, v2903, 0, v2905, v2906, v2907, v2908, v2909, v2910, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_510(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2902, v2903, v2900, 0, v2905, v2906, v2907, v2908, v2910, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 0 = 0
f_510(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2902, v2903, v2900, 0, v2905, v2906, v2907, v2908, v2910, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_511(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2902, v2903, v2900, 0, v2905, v2906, v2907, v2908, v2910, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 0 < v2909 && 0 <= v2910
f_511(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2902, v2903, v2900, 0, v2905, v2906, v2907, v2908, v2910, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_513(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2902, v2903, v2900, 0, v2905, v2906, v2907, v2908, v2910, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 0 = 0
f_513(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2902, v2903, v2900, 0, v2905, v2906, v2907, v2908, v2910, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_515(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2902, v2903, v2900, 0, v2905, v2906, v2907, v2908, v2910, v2911, v2912, v2913, v2914, 3, 2, 4) :|: TRUE
f_515(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2902, v2903, v2900, 0, v2905, v2906, v2907, v2908, v2910, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_517(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2903, v2902, v2900, 0, v2905, v2906, v2907, v2908, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 0 = 0
f_517(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2903, v2902, v2900, 0, v2905, v2906, v2907, v2908, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_519(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2903, v2902, v2900, 0, v2905, v2906, v2907, v2908, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 0 < v2910 && 2 <= v2909
f_519(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2903, v2902, v2900, 0, v2905, v2906, v2907, v2908, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_521(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2903, v2902, v2900, 0, v2905, v2906, v2907, v2908, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 0 = 0
f_521(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2903, v2902, v2900, 0, v2905, v2906, v2907, v2908, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_523(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2903, v2902, v2900, 0, v2905, v2906, v2907, v2908, v2911, v2912, v2913, v2914, 3, 2, 4) :|: TRUE
f_523(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2903, v2902, v2900, 0, v2905, v2906, v2907, v2908, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_525(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, v2902, v2900, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 0 = 0
f_525(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, v2902, v2900, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_527(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, v2902, v2900, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 0 < v2908 && 2 <= v2903 && 2 <= v2907 && 3 <= v2906
f_527(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, v2902, v2900, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_529(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, v2902, v2900, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 0 = 0
f_529(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, v2902, v2900, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_531(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, v2902, v2900, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 0 = 0
f_531(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, v2902, v2900, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_533(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, v2902, v2900, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) :|: TRUE
f_533(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, v2902, v2900, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_535(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, v2900, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 0 = 0
f_535(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, v2900, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_536(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 0 = 0
f_536(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_537(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 0 = 0
f_537(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_538(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) :|: TRUE
f_538(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v2903, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_539(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 0 = 0
f_539(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_540(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 1 + v3552 = v2908 && 0 <= v3552
f_540(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_541(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v2911, v2912, v2913, v2914, 3, 2, 4) :|: TRUE
f_541(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_542(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v3554, v2911, v2912, v2913, v2914, 3, 2, 4) :|: TRUE
f_542(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v3554, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_543(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v3554, v2911, v2912, v2913, v2914, 3, 2, 4) :|: TRUE
f_543(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v3554, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_544(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v3554, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 0 = 0
f_544(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v3554, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_545(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v3554, v3556, v2911, v2912, v2913, v2914, 3, 2, 4) :|: 1 + v3556 = v3554
f_545(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v3554, v3556, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_546(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v3554, v3556, v2911, v2912, v2913, v2914, 3, 2, 4) :|: TRUE
f_546(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v3554, v3556, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_547(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v3554, v3556, v2911, v2912, v2913, v2914, 3, 2, 4) :|: TRUE
f_547(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v3554, v3556, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_508(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2909, 1, v2910, v2908, 0, v2905, v2906, v2907, v3552, v3554, v3556, v2911, v2912, v2913, v2914, 3, 2, 4) :|: TRUE
f_508(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2900, 1, v2902, v2903, 0, v2905, v2906, v2907, v2908, v2909, v2910, v2911, v2912, v2913, v2914, 3, 2, 4) -> f_509(v2893, v2894, v2895, v2896, v2897, v2898, v2899, v2900, 1, v2902, v2903, 0, v2905, v2906, v2907, v2908, v2909, v2910, v2911, v2912, v2913, v2914, 3, 2, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_509(v2893:0, v2894:0, v2895:0, v2896:0, v2897:0, v2898:0, v2899:0, v2900:0, 1, v2902:0, v2903:0, 0, v2905:0, v2906:0, v2907:0, 1 + v3552:0, v2909:0, v2910:0, v2911:0, v2912:0, v2913:0, v2914:0, 3, 2, 4) -> f_509(v2893:0, v2894:0, v2895:0, v2896:0, v2897:0, v2898:0, v2899:0, v2909:0, 1, v2910:0, 1 + v3552:0, 0, v2905:0, v2906:0, v2907:0, v3552:0, 1 + v3556:0, v3556:0, v2911:0, v2912:0, v2913:0, v2914:0, 3, 2, 4) :|: v2909:0 > 1 && v2910:0 > 0 && v2903:0 > 1 && v3552:0 > -1 && v2907:0 > 1 && v2906:0 > 2
Filtered unneeded arguments:
   f_509(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_509(x11, x14, x15, x16, x17, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_509(v2903:0, v2906:0, v2907:0, sum~cons_1~v3552:0, v2909:0, v2910:0) -> f_509(1 + v3552:0, v2906:0, v2907:0, v3552:0, 1 + v3556:0, v3556:0) :|: v2910:0 > 0 && v2909:0 > 1 && v2903:0 > 1 && v3552:0 > -1 && v2906:0 > 2 && v2907:0 > 1 && sum~cons_1~v3552:0 = 1 + v3552:0

----------------------------------------

(9)
Obligation:
Rules:
f_509(v2903:0, v2906:0, v2907:0, sum~cons_1~v3552:0, v2909:0, v2910:0) -> f_509(1 + v3552:0, v2906:0, v2907:0, v3552:0, 1 + v3556:0, v3556:0) :|: v2910:0 > 0 && v2909:0 > 1 && v2903:0 > 1 && v3552:0 > -1 && v2906:0 > 2 && v2907:0 > 1 && sum~cons_1~v3552:0 = 1 + v3552:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_509(v2903:0:0, v2906:0:0, v2907:0:0, sum~cons_1~v3552:0:0, v2909:0:0, v2910:0:0) -> f_509(1 + v3552:0:0, v2906:0:0, v2907:0:0, v3552:0:0, 1 + v3556:0:0, v3556:0:0) :|: v2906:0:0 > 2 && v2907:0:0 > 1 && v3552:0:0 > -1 && v2903:0:0 > 1 && v2909:0:0 > 1 && v2910:0:0 > 0 && sum~cons_1~v3552:0:0 = 1 + v3552:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_509(x, x1, x2, x3, x4, x5)] = x3

The following rules are decreasing:
f_509(v2903:0:0, v2906:0:0, v2907:0:0, sum~cons_1~v3552:0:0, v2909:0:0, v2910:0:0) -> f_509(1 + v3552:0:0, v2906:0:0, v2907:0:0, v3552:0:0, 1 + v3556:0:0, v3556:0:0) :|: v2906:0:0 > 2 && v2907:0:0 > 1 && v3552:0:0 > -1 && v2903:0:0 > 1 && v2909:0:0 > 1 && v2910:0:0 > 0 && sum~cons_1~v3552:0:0 = 1 + v3552:0:0
The following rules are bounded:
f_509(v2903:0:0, v2906:0:0, v2907:0:0, sum~cons_1~v3552:0:0, v2909:0:0, v2910:0:0) -> f_509(1 + v3552:0:0, v2906:0:0, v2907:0:0, v3552:0:0, 1 + v3556:0:0, v3556:0:0) :|: v2906:0:0 > 2 && v2907:0:0 > 1 && v3552:0:0 > -1 && v2903:0:0 > 1 && v2909:0:0 > 1 && v2910:0:0 > 0 && sum~cons_1~v3552:0:0 = 1 + v3552:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 28 rulesP rules:
f_394(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1187, 1, v1189, v1190, 0, v1192, v1193, v1194, v1195, v1196, v1197, v1198, 3, 4) -> f_397(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1189, v1190, v1187, 0, v1192, v1194, v1195, v1196, v1197, v1198, 3, 4) :|: 0 = 0
f_397(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1189, v1190, v1187, 0, v1192, v1194, v1195, v1196, v1197, v1198, 3, 4) -> f_400(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1189, v1190, v1187, 0, v1192, v1194, v1195, v1196, v1197, v1198, 3, 4) :|: 0 < v1193 && 0 <= v1194
f_400(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1189, v1190, v1187, 0, v1192, v1194, v1195, v1196, v1197, v1198, 3, 4) -> f_404(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1189, v1190, v1187, 0, v1192, v1194, v1195, v1196, v1197, v1198, 3, 4) :|: 0 = 0
f_404(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1189, v1190, v1187, 0, v1192, v1194, v1195, v1196, v1197, v1198, 3, 4) -> f_408(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1189, v1190, v1187, 0, v1192, v1194, v1195, v1196, v1197, v1198, 3, 4) :|: TRUE
f_408(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1189, v1190, v1187, 0, v1192, v1194, v1195, v1196, v1197, v1198, 3, 4) -> f_412(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1190, v1189, v1187, 0, v1192, v1195, v1196, v1197, v1198, 3, 4) :|: 0 = 0
f_412(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1190, v1189, v1187, 0, v1192, v1195, v1196, v1197, v1198, 3, 4) -> f_416(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1190, v1189, v1187, 0, v1192, v1195, v1196, v1197, v1198, 3, 2, 4) :|: 0 < v1194 && 2 <= v1193
f_416(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1190, v1189, v1187, 0, v1192, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_420(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1190, v1189, v1187, 0, v1192, v1195, v1196, v1197, v1198, 3, 2, 4) :|: 0 = 0
f_420(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1190, v1189, v1187, 0, v1192, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_424(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1190, v1189, v1187, 0, v1192, v1195, v1196, v1197, v1198, 3, 2, 4) :|: TRUE
f_424(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1190, v1189, v1187, 0, v1192, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_428(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, v1189, v1187, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) :|: 0 = 0
f_428(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, v1189, v1187, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_432(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, v1189, v1187, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) :|: 0 < v1192 && 2 <= v1190 && 2 <= v1186
f_432(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, v1189, v1187, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_436(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, v1189, v1187, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) :|: 0 = 0
f_436(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, v1189, v1187, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_439(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, v1189, v1187, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) :|: 0 = 0
f_439(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, v1189, v1187, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_442(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, v1189, v1187, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) :|: TRUE
f_442(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, v1189, v1187, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_445(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, v1187, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) :|: 0 = 0
f_445(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, v1187, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_447(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) :|: 0 = 0
f_447(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_449(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) :|: 0 = 0
f_449(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_451(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) :|: TRUE
f_451(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v1190, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_453(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v1195, v1196, v1197, v1198, 3, 2, 4) :|: 0 = 0
f_453(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_455(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v1195, v1196, v1197, v1198, 3, 2, 4) :|: 1 + v2132 = v1192 && 0 <= v2132
f_455(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_457(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v1195, v1196, v1197, v1198, 3, 2, 4) :|: TRUE
f_457(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_459(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v2135, v1195, v1196, v1197, v1198, 3, 2, 4) :|: TRUE
f_459(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v2135, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_461(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v2135, v1195, v1196, v1197, v1198, 3, 2, 4) :|: TRUE
f_461(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v2135, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_463(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v2135, v1195, v1196, v1197, v1198, 3, 2, 4) :|: 0 = 0
f_463(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v2135, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_466(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v2135, v2187, v1195, v1196, v1197, v1198, 3, 2, 4) :|: 1 + v2187 = v2135
f_466(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v2135, v2187, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_468(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v2135, v2187, v1195, v1196, v1197, v1198, 3, 2, 4) :|: TRUE
f_468(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v2135, v2187, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_470(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v2135, v2187, v1195, v1196, v1197, v1198, 3, 2, 4) :|: TRUE
f_470(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v2135, v2187, v1195, v1196, v1197, v1198, 3, 2, 4) -> f_391(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1193, 1, v1194, v1192, 0, v2132, v2135, v2187, v1195, v1196, v1197, v1198, 3, 4) :|: TRUE
f_391(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1187, 1, v1189, v1190, 0, v1192, v1193, v1194, v1195, v1196, v1197, v1198, 3, 4) -> f_394(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1187, 1, v1189, v1190, 0, v1192, v1193, v1194, v1195, v1196, v1197, v1198, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_394(v1180:0, v1181:0, v1182:0, v1183:0, v1184:0, v1185:0, v1186:0, v1187:0, 1, v1189:0, v1190:0, 0, 1 + v2132:0, v1193:0, v1194:0, v1195:0, v1196:0, v1197:0, v1198:0, 3, 4) -> f_394(v1180:0, v1181:0, v1182:0, v1183:0, v1184:0, v1185:0, v1186:0, v1193:0, 1, v1194:0, 1 + v2132:0, 0, v2132:0, 1 + v2187:0, v2187:0, v1195:0, v1196:0, v1197:0, v1198:0, 3, 4) :|: v1193:0 > 1 && v1194:0 > 0 && v1190:0 > 1 && v2132:0 > -1 && v1186:0 > 1
Filtered unneeded arguments:
   f_394(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_394(x7, x11, x13, x14, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_394(v1186:0, v1190:0, sum~cons_1~v2132:0, v1193:0, v1194:0) -> f_394(v1186:0, 1 + v2132:0, v2132:0, 1 + v2187:0, v2187:0) :|: v1194:0 > 0 && v1193:0 > 1 && v1190:0 > 1 && v1186:0 > 1 && v2132:0 > -1 && sum~cons_1~v2132:0 = 1 + v2132:0

----------------------------------------

(16)
Obligation:
Rules:
f_394(v1186:0, v1190:0, sum~cons_1~v2132:0, v1193:0, v1194:0) -> f_394(v1186:0, 1 + v2132:0, v2132:0, 1 + v2187:0, v2187:0) :|: v1194:0 > 0 && v1193:0 > 1 && v1190:0 > 1 && v1186:0 > 1 && v2132:0 > -1 && sum~cons_1~v2132:0 = 1 + v2132:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_394(v1186:0:0, v1190:0:0, sum~cons_1~v2132:0:0, v1193:0:0, v1194:0:0) -> f_394(v1186:0:0, 1 + v2132:0:0, v2132:0:0, 1 + v2187:0:0, v2187:0:0) :|: v1186:0:0 > 1 && v2132:0:0 > -1 && v1190:0:0 > 1 && v1193:0:0 > 1 && v1194:0:0 > 0 && sum~cons_1~v2132:0:0 = 1 + v2132:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_394(x, x1, x2, x3, x4)] = x2

The following rules are decreasing:
f_394(v1186:0:0, v1190:0:0, sum~cons_1~v2132:0:0, v1193:0:0, v1194:0:0) -> f_394(v1186:0:0, 1 + v2132:0:0, v2132:0:0, 1 + v2187:0:0, v2187:0:0) :|: v1186:0:0 > 1 && v2132:0:0 > -1 && v1190:0:0 > 1 && v1193:0:0 > 1 && v1194:0:0 > 0 && sum~cons_1~v2132:0:0 = 1 + v2132:0:0
The following rules are bounded:
f_394(v1186:0:0, v1190:0:0, sum~cons_1~v2132:0:0, v1193:0:0, v1194:0:0) -> f_394(v1186:0:0, 1 + v2132:0:0, v2132:0:0, 1 + v2187:0:0, v2187:0:0) :|: v1186:0:0 > 1 && v2132:0:0 > -1 && v1190:0:0 > 1 && v1193:0:0 > 1 && v1194:0:0 > 0 && sum~cons_1~v2132:0:0 = 1 + v2132:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 27 rulesP rules:
f_302(v617, v618, v619, v620, v621, v622, v623, v628, 1, v626, v627, v624, v629, v630, v631, v632, v633, 0, 3, 2, 4) -> f_305(v617, v618, v619, v620, v621, v622, v623, v628, 1, v626, v627, v624, v629, v630, v631, v632, v633, 0, 3, 2, 4) :|: 0 < v628 && 0 <= v629
f_305(v617, v618, v619, v620, v621, v622, v623, v628, 1, v626, v627, v624, v629, v630, v631, v632, v633, 0, 3, 2, 4) -> f_308(v617, v618, v619, v620, v621, v622, v623, v628, 1, v626, v627, v624, v629, v630, v631, v632, v633, 0, 3, 2, 4) :|: 0 = 0
f_308(v617, v618, v619, v620, v621, v622, v623, v628, 1, v626, v627, v624, v629, v630, v631, v632, v633, 0, 3, 2, 4) -> f_311(v617, v618, v619, v620, v621, v622, v623, v628, 1, v626, v627, v624, v629, v630, v631, v632, v633, 0, 3, 2, 4) :|: TRUE
f_311(v617, v618, v619, v620, v621, v622, v623, v628, 1, v626, v627, v624, v629, v630, v631, v632, v633, 0, 3, 2, 4) -> f_315(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v626, v624, v629, v630, v631, v632, v633, 0, 3, 2, 4) :|: 0 = 0
f_315(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v626, v624, v629, v630, v631, v632, v633, 0, 3, 2, 4) -> f_319(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v626, v624, v629, v630, v631, v632, v633, 0, 3, 2, 4) :|: 0 = 0
f_319(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v626, v624, v629, v630, v631, v632, v633, 0, 3, 2, 4) -> f_322(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v626, v624, v629, v630, v631, v632, v633, 0, 3, 2, 4) :|: TRUE
f_322(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v626, v624, v629, v630, v631, v632, v633, 0, 3, 2, 4) -> f_325(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v626, v624, v630, v631, v632, v633, 0, 3, 2, 4) :|: 0 = 0
f_325(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v626, v624, v630, v631, v632, v633, 0, 3, 2, 4) -> f_328(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v626, v624, v630, v631, v632, v633, 0, 3, 2, 4) :|: 0 < v629 && 2 <= v628
f_328(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v626, v624, v630, v631, v632, v633, 0, 3, 2, 4) -> f_332(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v626, v624, v630, v631, v632, v633, 0, 3, 2, 4) :|: 0 = 0
f_332(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v626, v624, v630, v631, v632, v633, 0, 3, 2, 4) -> f_336(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v626, v624, v630, v631, v632, v633, 0, 3, 2, 4) :|: 0 = 0
f_336(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v626, v624, v630, v631, v632, v633, 0, 3, 2, 4) -> f_340(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v626, v624, v630, v631, v632, v633, 0, 3, 2, 4) :|: TRUE
f_340(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v626, v624, v630, v631, v632, v633, 0, 3, 2, 4) -> f_344(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v624, v630, v631, v632, v633, 0, 3, 2, 4) :|: 0 = 0
f_344(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v624, v630, v631, v632, v633, 0, 3, 2, 4) -> f_347(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v630, v631, v632, v633, 0, 3, 2, 4) :|: 0 = 0
f_347(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v630, v631, v632, v633, 0, 3, 2, 4) -> f_350(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v630, v631, v632, v633, 0, 3, 2, 4) :|: v628 < v627 && 3 <= v627
f_350(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v630, v631, v632, v633, 0, 3, 2, 4) -> f_354(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v630, v631, v632, v633, 0, 3, 2, 4) :|: 0 = 0
f_354(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v630, v631, v632, v633, 0, 3, 2, 4) -> f_357(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v630, v631, v632, v633, 0, 3, 2, 4) :|: TRUE
f_357(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v630, v631, v632, v633, 0, 3, 2, 4) -> f_360(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v630, v631, v632, v633, 0, 3, 2, 4) :|: 0 = 0
f_360(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v630, v631, v632, v633, 0, 3, 2, 4) -> f_363(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v630, v631, v632, v633, 0, 3, 2, 4) :|: TRUE
f_363(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v630, v631, v632, v633, 0, 3, 2, 4) -> f_366(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v1073, v630, v631, v632, v633, 0, 3, 2, 4) :|: TRUE
f_366(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v1073, v630, v631, v632, v633, 0, 3, 2, 4) -> f_369(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v1073, v630, v631, v632, v633, 0, 3, 2, 4) :|: TRUE
f_369(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v1073, v630, v631, v632, v633, 0, 3, 2, 4) -> f_372(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v1073, v630, v631, v632, v633, 0, 3, 2, 4) :|: 0 = 0
f_372(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v1073, v630, v631, v632, v633, 0, 3, 2, 4) -> f_375(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v1073, v1080, v630, v631, v632, v633, 0, 3, 2, 4) :|: 1 + v1080 = v1073
f_375(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v1073, v1080, v630, v631, v632, v633, 0, 3, 2, 4) -> f_378(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v1073, v1080, v630, v631, v632, v633, 0, 3, 2, 4) :|: TRUE
f_378(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v1073, v1080, v630, v631, v632, v633, 0, 3, 2, 4) -> f_381(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v1073, v1080, v630, v631, v632, v633, 0, 3, 2, 4) :|: TRUE
f_381(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v1073, v1080, v630, v631, v632, v633, 0, 3, 2, 4) -> f_384(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v1073, v1080, v630, v631, v632, v633, 0, 3, 2, 4) :|: TRUE
f_384(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v1073, v1080, v630, v631, v632, v633, 0, 3, 2, 4) -> f_300(v617, v618, v619, v620, v621, v622, v623, v628, 1, v627, v629, v1073, v1080, v630, v631, v632, v633, 0, 3, 2, 4) :|: TRUE
f_300(v617, v618, v619, v620, v621, v622, v623, v624, 1, v626, v627, v628, v629, v630, v631, v632, v633, 0, 3, 2, 4) -> f_302(v617, v618, v619, v620, v621, v622, v623, v628, 1, v626, v627, v624, v629, v630, v631, v632, v633, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_302(v617:0, v618:0, v619:0, v620:0, v621:0, v622:0, v623:0, v628:0, 1, v626:0, v627:0, v624:0, v629:0, v630:0, v631:0, v632:0, v633:0, 0, 3, 2, 4) -> f_302(v617:0, v618:0, v619:0, v620:0, v621:0, v622:0, v623:0, 1 + v1080:0, 1, v627:0, v629:0, v628:0, v1080:0, v630:0, v631:0, v632:0, v633:0, 0, 3, 2, 4) :|: v628:0 > 1 && v629:0 > 0 && v628:0 < v627:0 && v627:0 > 2
Filtered unneeded arguments:
   f_302(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_302(x8, x11, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_302(v628:0, v627:0, v629:0) -> f_302(1 + v1080:0, v629:0, v1080:0) :|: v629:0 > 0 && v628:0 > 1 && v627:0 > 2 && v628:0 < v627:0

----------------------------------------

(23)
Obligation:
Rules:
f_302(v628:0, v627:0, v629:0) -> f_302(1 + v1080:0, v629:0, v1080:0) :|: v629:0 > 0 && v628:0 > 1 && v627:0 > 2 && v628:0 < v627:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_302(v628:0:0, v627:0:0, v629:0:0) -> f_302(1 + v1080:0:0, v629:0:0, v1080:0:0) :|: v627:0:0 > 2 && v628:0:0 < v627:0:0 && v628:0:0 > 1 && v629:0:0 > 0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_302(x, x1, x2)] = -1 - x + x1 + x2

The following rules are decreasing:
f_302(v628:0:0, v627:0:0, v629:0:0) -> f_302(1 + v1080:0:0, v629:0:0, v1080:0:0) :|: v627:0:0 > 2 && v628:0:0 < v627:0:0 && v628:0:0 > 1 && v629:0:0 > 0
The following rules are bounded:
f_302(v628:0:0, v627:0:0, v629:0:0) -> f_302(1 + v1080:0:0, v629:0:0, v1080:0:0) :|: v627:0:0 > 2 && v628:0:0 < v627:0:0 && v628:0:0 > 1 && v629:0:0 > 0

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
