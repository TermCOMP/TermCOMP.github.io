YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/JBE2l.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1678 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 57 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/JBE2l.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/JBE2l.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "r1" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = icmp eq %6 0
		br %7, %8, %10
	8:
		%9 = load %5
		store %9, %3
		br %18
	10:
		%11 = load %4
		%12 = sub i32 %11, 1
		%13 = load %4
		%14 = add i32 %13, 1
		%15 = load %5
		%16 = add i32 %14, %15
		%17 = call i32 @r1(i32 %12, i32 %16)
		store %17, %3
		br %18
	18:
		%19 = load %3
		ret %19

*BasicFunctionTypename: "rev" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 33
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = call i32 @r1(i32 %3, i32 0)
		ret %4

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 41
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %2
		%4 = load %2
		%5 = icmp sge %4 0
		br %5, %6, %9
	6:
		%7 = load %2
		%8 = call i32 @rev(i32 %7)
		br %9
	9:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_219(v67, v68, v77, v69, v70, v71, v72, v73, v74, v78, 0, v76, 3, 1, 4) -> f_220(v67, v68, v77, v79, v69, v70, v71, v72, v73, v74, v78, v80, 0, v76, 3, 1, 4) :|: 1 <= v79 && v80 = 3 + v79 && 4 <= v80
f_220(v67, v68, v77, v79, v69, v70, v71, v72, v73, v74, v78, v80, 0, v76, 3, 1, 4) -> f_221(v67, v68, v77, v79, v81, v69, v70, v71, v72, v73, v74, v78, v80, v82, 0, v76, 3, 1, 4) :|: 1 <= v81 && v82 = 3 + v81 && 4 <= v82
f_221(v67, v68, v77, v79, v81, v69, v70, v71, v72, v73, v74, v78, v80, v82, 0, v76, 3, 1, 4) -> f_222(v67, v68, v77, v79, v81, v69, v70, v71, v72, v73, v74, v78, v80, v82, 0, v76, 3, 1, 4) :|: TRUE
f_222(v67, v68, v77, v79, v81, v69, v70, v71, v72, v73, v74, v78, v80, v82, 0, v76, 3, 1, 4) -> f_223(v67, v68, v77, v79, v81, v69, v70, v71, v72, v73, v74, v78, v80, v82, 0, v76, 3, 1, 4) :|: TRUE
f_223(v67, v68, v77, v79, v81, v69, v70, v71, v72, v73, v74, v78, v80, v82, 0, v76, 3, 1, 4) -> f_224(v67, v68, v77, v79, v81, v69, v70, v71, v72, v73, v74, v78, v80, v82, 0, v76, 3, 1, 4) :|: TRUE
f_224(v67, v68, v77, v79, v81, v69, v70, v71, v72, v73, v74, v78, v80, v82, 0, v76, 3, 1, 4) -> f_225(v67, v68, v77, v79, v81, v69, v70, v71, v72, v73, v74, v78, v80, v82, 0, v76, 3, 1, 4) :|: TRUE
f_225(v67, v68, v77, v79, v81, v69, v70, v71, v72, v73, v74, v78, v80, v82, 0, v76, 3, 1, 4) -> f_226(v67, v68, v77, v79, v81, v69, v70, v71, v72, v73, v74, v78, v80, v82, 0, v76, 3, 1, 4) :|: 0 = 0
f_226(v67, v68, v77, v79, v81, v69, v70, v71, v72, v73, v74, v78, v80, v82, 0, v76, 3, 1, 4) -> f_228(v67, v68, v77, v79, v81, v69, v70, v71, v72, v73, v74, v78, v80, v82, 0, v76, 3, 1, 4) :|: v67 != 0 && 1 <= v76
f_228(v67, v68, v77, v79, v81, v69, v70, v71, v72, v73, v74, v78, v80, v82, 0, v76, 3, 1, 4) -> f_230(v67, v68, v77, v79, v81, 0, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4) :|: 0 = 0
f_230(v67, v68, v77, v79, v81, 0, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4) -> f_232(v67, v68, v77, v79, v81, 0, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4) :|: TRUE
f_232(v67, v68, v77, v79, v81, 0, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4) -> f_234(v67, v68, v77, v79, v81, 0, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4) :|: 0 = 0
f_234(v67, v68, v77, v79, v81, 0, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4) -> f_236(v67, v68, v77, v79, v81, 0, v86, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4) :|: 1 + v86 = v67 && 0 <= v86
f_236(v67, v68, v77, v79, v81, 0, v86, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4) -> f_238(v67, v68, v77, v79, v81, 0, v86, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4) :|: 0 = 0
f_238(v67, v68, v77, v79, v81, 0, v86, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4) -> f_240(v67, v68, v77, v79, v81, 0, v86, v87, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4, 2) :|: v87 = 1 + v67 && 2 <= v87
f_240(v67, v68, v77, v79, v81, 0, v86, v87, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4, 2) -> f_242(v67, v68, v77, v79, v81, 0, v86, v87, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4, 2) :|: 0 = 0
f_242(v67, v68, v77, v79, v81, 0, v86, v87, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4, 2) -> f_244(v67, v68, v77, v79, v81, 0, v86, v87, v102, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4, 2) :|: v102 = v87 + v68 && 2 <= v102
f_244(v67, v68, v77, v79, v81, 0, v86, v87, v102, v69, v70, v71, v72, v73, v74, v78, v80, v82, v76, 3, 1, 4, 2) -> f_246(v86, v102, v69, v70, v71, v72, v73, v74, v77, v78, v79, v80, v81, v82, 0, v76, v67, v68, v87, 3, 1, 4, 2) :|: 0 = 0
f_246(v86, v102, v69, v70, v71, v72, v73, v74, v77, v78, v79, v80, v81, v82, 0, v76, v67, v68, v87, 3, 1, 4, 2) -> f_248(v86, v102, v69, v70, v71, v72, v73, v74, v77, v78, v79, v80, v81, v82, 0, v76, v67, v68, 3, 1, 4, 2) :|: TRUE
f_248(v86, v102, v69, v70, v71, v72, v73, v74, v77, v78, v79, v80, v81, v82, 0, v76, v67, v68, 3, 1, 4, 2) -> f_218(v86, v102, v69, v70, v71, v72, v73, v74, 0, v76, 3, 1, 4) :|: TRUE
f_218(v67, v68, v69, v70, v71, v72, v73, v74, 0, v76, 3, 1, 4) -> f_219(v67, v68, v77, v69, v70, v71, v72, v73, v74, v78, 0, v76, 3, 1, 4) :|: 1 <= v77 && v78 = 3 + v77 && 4 <= v78
Combined rules. Obtained 1 rulesP rules:
f_219(1 + v86:0, v68:0, v77:0, v69:0, v70:0, v71:0, v72:0, v73:0, v74:0, v78:0, 0, v76:0, 3, 1, 4) -> f_219(v86:0, 1 + (1 + v86:0) + v68:0, v77:1, v69:0, v70:0, v71:0, v72:0, v73:0, v74:0, 3 + v77:1, 0, v76:0, 3, 1, 4) :|: v81:0 > 0 && v79:0 > 0 && v76:0 > 0 && v86:0 > -1 && 1 + (1 + v86:0) + v68:0 > 1 && v77:1 > 0
Filtered unneeded arguments:
   f_219(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_219(x1, x2, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_219(sum~cons_1~v86:0, v68:0, v76:0) -> f_219(v86:0, 1 + (1 + v86:0) + v68:0, v76:0) :|: v86:0 > -1 && 1 + (1 + v86:0) + v68:0 > 1 && v76:0 > 0 && sum~cons_1~v86:0 = 1 + v86:0

----------------------------------------

(8)
Obligation:
Rules:
f_219(sum~cons_1~v86:0, v68:0, v76:0) -> f_219(v86:0, 1 + (1 + v86:0) + v68:0, v76:0) :|: v86:0 > -1 && 1 + (1 + v86:0) + v68:0 > 1 && v76:0 > 0 && sum~cons_1~v86:0 = 1 + v86:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_219(sum~cons_1~v86:0:0, v68:0:0, v76:0:0) -> f_219(v86:0:0, 1 + (1 + v86:0:0) + v68:0:0, v76:0:0) :|: v86:0:0 > -1 && 1 + (1 + v86:0:0) + v68:0:0 > 1 && v76:0:0 > 0 && sum~cons_1~v86:0:0 = 1 + v86:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_219(x, x1, x2)] = x

The following rules are decreasing:
f_219(sum~cons_1~v86:0:0, v68:0:0, v76:0:0) -> f_219(v86:0:0, 1 + (1 + v86:0:0) + v68:0:0, v76:0:0) :|: v86:0:0 > -1 && 1 + (1 + v86:0:0) + v68:0:0 > 1 && v76:0:0 > 0 && sum~cons_1~v86:0:0 = 1 + v86:0:0
The following rules are bounded:
f_219(sum~cons_1~v86:0:0, v68:0:0, v76:0:0) -> f_219(v86:0:0, 1 + (1 + v86:0:0) + v68:0:0, v76:0:0) :|: v86:0:0 > -1 && 1 + (1 + v86:0:0) + v68:0:0 > 1 && v76:0:0 > 0 && sum~cons_1~v86:0:0 = 1 + v86:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
