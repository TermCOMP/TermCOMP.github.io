YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/YnloS.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 883 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 15 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 8 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (17) YES
    (18) LLVM Symbolic Execution SCC
        (19) SCC2IRS [SOUND, 16 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/YnloS.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/YnloS.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		br %5
	5:
		%6 = load %2
		%7 = icmp sge %6 0
		br %7, %8, %21
	8:
		%9 = load %2
		%10 = add i32 %9, 1
		store %10, %2
		store 1, %3
		br %11
	11:
		%12 = load %2
		%13 = load %3
		%14 = icmp sge %12 %13
		br %14, %15, %18
	15:
		%16 = load %3
		%17 = add i32 %16, 1
		store %17, %3
		br %11
	18:
		%19 = load %2
		%20 = sub i32 %19, 2
		store %20, %2
		br %5
	21:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 32 rulesP rules:
f_348(v523, v524, v525, v526, v527, 1, v529, v530, v532, v533, v534, v535, v536, 0, 3, 2, 4) -> f_349(v523, v524, v525, v526, v527, 1, v529, v530, v538, v533, v534, v535, v536, 0, 3, 2, 4) :|: v538 = 1 + v530 && 2 <= v538
f_349(v523, v524, v525, v526, v527, 1, v529, v530, v538, v533, v534, v535, v536, 0, 3, 2, 4) -> f_350(v523, v524, v525, v526, v527, 1, v529, v530, v538, v533, v534, v535, v536, 0, 3, 2, 4) :|: TRUE
f_350(v523, v524, v525, v526, v527, 1, v529, v530, v538, v533, v534, v535, v536, 0, 3, 2, 4) -> f_351(v523, v524, v525, v526, v527, 1, v529, v530, v538, v533, v534, v535, v536, 0, 3, 2, 4) :|: TRUE
f_351(v523, v524, v525, v526, v527, 1, v529, v530, v538, v533, v534, v535, v536, 0, 3, 2, 4) -> f_352(v523, v524, v525, v526, v527, 1, v529, v530, v538, v533, v534, v535, v536, 0, 3, 2, 4) :|: 0 = 0
f_352(v523, v524, v525, v526, v527, 1, v529, v530, v538, v533, v534, v535, v536, 0, 3, 2, 4) -> f_353(v523, v524, v525, v526, v527, 1, v529, v538, v530, v533, v534, v535, v536, 0, 3, 2, 4) :|: 0 = 0
f_353(v523, v524, v525, v526, v527, 1, v529, v538, v530, v533, v534, v535, v536, 0, 3, 2, 4) -> f_354(v523, v524, v525, v526, v527, 1, v529, v538, v530, v533, v534, v535, v536, 0, 3, 2, 4) :|: v538 <= v529 && 2 <= v529 && 3 <= v533 && 1 <= v527
f_353(v523, v524, v525, v526, v527, 1, v529, v538, v530, v533, v534, v535, v536, 0, 3, 2, 4) -> f_355(v523, v524, v525, v526, v527, 1, v530, v538, v534, v535, v536, 0, 3, 2, 4) :|: v529 < v538 && v533 = v538 && v529 = v530
f_354(v523, v524, v525, v526, v527, 1, v529, v538, v530, v533, v534, v535, v536, 0, 3, 2, 4) -> f_356(v523, v524, v525, v526, v527, 1, v529, v538, v530, v533, v534, v535, v536, 0, 3, 2, 4) :|: 0 = 0
f_356(v523, v524, v525, v526, v527, 1, v529, v538, v530, v533, v534, v535, v536, 0, 3, 2, 4) -> f_358(v523, v524, v525, v526, v527, 1, v529, v538, v530, v533, v534, v535, v536, 0, 3, 2, 4) :|: TRUE
f_358(v523, v524, v525, v526, v527, 1, v529, v538, v530, v533, v534, v535, v536, 0, 3, 2, 4) -> f_347(v523, v524, v525, v526, v527, 1, v529, v538, v530, v538, v533, v534, v535, v536, 0, 3, 2, 4) :|: TRUE
f_347(v523, v524, v525, v526, v527, 1, v529, v530, v531, v532, v533, v534, v535, v536, 0, 3, 2, 4) -> f_348(v523, v524, v525, v526, v527, 1, v529, v530, v532, v533, v534, v535, v536, 0, 3, 2, 4) :|: 0 = 0
f_355(v523, v524, v525, v526, v527, 1, v530, v538, v534, v535, v536, 0, 3, 2, 4) -> f_357(v523, v524, v525, v526, v527, 1, v530, v538, 0, v534, v535, v536, 3, 2, 4) :|: 0 = 0
f_357(v523, v524, v525, v526, v527, 1, v530, v538, 0, v534, v535, v536, 3, 2, 4) -> f_359(v523, v524, v525, v526, v527, 1, v530, v538, 0, v534, v535, v536, 3, 2, 4) :|: TRUE
f_359(v523, v524, v525, v526, v527, 1, v530, v538, 0, v534, v535, v536, 3, 2, 4) -> f_360(v523, v524, v525, v526, v527, 1, v530, v538, 0, v534, v535, v536, 3, 2, 4) :|: 0 = 0
f_360(v523, v524, v525, v526, v527, 1, v530, v538, 0, v534, v535, v536, 3, 2, 4) -> f_361(v523, v524, v525, v526, v527, 1, v530, v538, 0, v581, v534, v535, v536, 3, 2, 4) :|: 2 + v581 = v530 && 0 <= 1 + v581
f_361(v523, v524, v525, v526, v527, 1, v530, v538, 0, v581, v534, v535, v536, 3, 2, 4) -> f_362(v523, v524, v525, v526, v527, 1, v530, v538, 0, v581, v534, v535, v536, 3, 2, 4) :|: TRUE
f_362(v523, v524, v525, v526, v527, 1, v530, v538, 0, v581, v534, v535, v536, 3, 2, 4) -> f_363(v523, v524, v525, v526, v527, 1, v530, v538, 0, v581, v534, v535, v536, 3, 2, 4) :|: TRUE
f_363(v523, v524, v525, v526, v527, 1, v530, v538, 0, v581, v534, v535, v536, 3, 2, 4) -> f_364(v523, v524, v525, v526, v581, 1, v527, v530, v538, 0, v534, v535, v536, 3, 2, 4) :|: 0 = 0
f_364(v523, v524, v525, v526, v581, 1, v527, v530, v538, 0, v534, v535, v536, 3, 2, 4) -> f_365(v523, v524, v525, v526, v581, 1, v527, v530, v538, 0, v534, v535, v536, 3, 2, 4) :|: 0 <= v581 && 2 <= v530 && 3 <= v538 && 1 <= v527
f_365(v523, v524, v525, v526, v581, 1, v527, v530, v538, 0, v534, v535, v536, 3, 2, 4) -> f_367(v523, v524, v525, v526, v581, 1, v527, v530, v538, 0, v534, v535, v536, 3, 2, 4) :|: 0 = 0
f_367(v523, v524, v525, v526, v581, 1, v527, v530, v538, 0, v534, v535, v536, 3, 2, 4) -> f_369(v523, v524, v525, v526, v581, 1, v527, v530, v538, 0, v534, v535, v536, 3, 2, 4) :|: TRUE
f_369(v523, v524, v525, v526, v581, 1, v527, v530, v538, 0, v534, v535, v536, 3, 2, 4) -> f_371(v523, v524, v525, v526, v581, 1, v530, v538, 0, v534, v535, v536, 3, 2, 4) :|: 0 = 0
f_371(v523, v524, v525, v526, v581, 1, v530, v538, 0, v534, v535, v536, 3, 2, 4) -> f_372(v523, v524, v525, v526, v581, 1, v598, v530, v538, 0, v534, v535, v536, 3, 2, 4) :|: v598 = 1 + v581 && 1 <= v598
f_372(v523, v524, v525, v526, v581, 1, v598, v530, v538, 0, v534, v535, v536, 3, 2, 4) -> f_373(v523, v524, v525, v526, v581, 1, v598, v530, v538, 0, v534, v535, v536, 3, 2, 4) :|: TRUE
f_373(v523, v524, v525, v526, v581, 1, v598, v530, v538, 0, v534, v535, v536, 3, 2, 4) -> f_374(v523, v524, v525, v526, v581, 1, v598, v530, v538, 0, v534, v535, v536, 3, 2, 4) :|: TRUE
f_374(v523, v524, v525, v526, v581, 1, v598, v530, v538, 0, v534, v535, v536, 3, 2, 4) -> f_375(v523, v524, v525, v526, v581, 1, v598, v530, v538, 0, v534, v535, v536, 3, 2, 4) :|: TRUE
f_375(v523, v524, v525, v526, v581, 1, v598, v530, v538, 0, v534, v535, v536, 3, 2, 4) -> f_376(v523, v524, v525, v526, v581, 1, v598, v530, v538, 0, v534, v535, v536, 3, 2, 4) :|: TRUE
f_376(v609, v610, v611, v612, v613, 1, v615, v616, v617, 0, v619, v620, v621, 3, 2, 4) -> f_377(v609, v610, v611, v612, v613, 1, v615, v617, 0, v616, v619, v620, v621, 3, 2, 4) :|: 0 = 0
f_377(v609, v610, v611, v612, v613, 1, v615, v617, 0, v616, v619, v620, v621, 3, 2, 4) -> f_378(v609, v610, v611, v612, v613, 1, v615, 0, v616, v617, v619, v620, v621, 3, 2, 4) :|: 0 = 0
f_378(v609, v610, v611, v612, v613, 1, v615, 0, v616, v617, v619, v620, v621, 3, 2, 4) -> f_379(v609, v610, v611, v612, v613, 1, v615, v616, v617, v619, v620, v621, 0, 3, 2, 4) :|: 0 = 0
f_379(v609, v610, v611, v612, v613, 1, v615, v616, v617, v619, v620, v621, 0, 3, 2, 4) -> f_380(v609, v610, v611, v612, v613, 1, v615, v616, v617, v619, v620, v621, 0, 3, 2, 4) :|: TRUE
f_380(v609, v610, v611, v612, v613, 1, v615, v616, v617, v619, v620, v621, 0, 3, 2, 4) -> f_347(v609, v610, v611, v612, v613, 1, v615, 1, v616, v617, v616, v619, v620, v621, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_348(v523:0, v524:0, v525:0, v526:0, v527:0, 1, 2 + v581:0, 2 + v581:0, v532:0, 1 + (2 + v581:0), v534:0, v535:0, v536:0, 0, 3, 2, 4) -> f_348(v523:0, v524:0, v525:0, v526:0, v581:0, 1, 1 + v581:0, 1, 1 + (2 + v581:0), 2 + v581:0, v534:0, v535:0, v536:0, 0, 3, 2, 4) :|: v581:0 > -1 && 2 + v581:0 < 1 + (2 + v581:0) && v527:0 > 0
f_348(v523:0, v524:0, v525:0, v526:0, v527:0, 1, v529:0, v530:0, v532:0, v533:0, v534:0, v535:0, v536:0, 0, 3, 2, 4) -> f_348(v523:0, v524:0, v525:0, v526:0, v527:0, 1, v529:0, 1 + v530:0, 1 + v530:0, v533:0, v534:0, v535:0, v536:0, 0, 3, 2, 4) :|: v530:0 > 0 && v529:0 > 1 && v529:0 >= 1 + v530:0 && v527:0 > 0 && v533:0 > 2
Filtered unneeded arguments:
   f_348(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_348(x5, x7, x8, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_348(v527:0, sum~cons_2~v581:0, sum~cons_2~v581:01, sum~cons_1~sum~cons_2~v581:0) -> f_348(v581:0, 1 + v581:0, 1, 2 + v581:0) :|: 2 + v581:0 < 1 + (2 + v581:0) && v527:0 > 0 && v581:0 > -1 && sum~cons_2~v581:0 = 2 + v581:0 && sum~cons_2~v581:01 = 2 + v581:0 && sum~cons_1~sum~cons_2~v581:0 = 1 + (2 + v581:0)
f_348(v527:0, v529:0, v530:0, v533:0) -> f_348(v527:0, v529:0, 1 + v530:0, v533:0) :|: v529:0 > 1 && v530:0 > 0 && v529:0 >= 1 + v530:0 && v533:0 > 2 && v527:0 > 0

----------------------------------------

(9)
Obligation:
Rules:
f_348(v527:0, sum~cons_2~v581:0, sum~cons_2~v581:01, sum~cons_1~sum~cons_2~v581:0) -> f_348(v581:0, 1 + v581:0, 1, 2 + v581:0) :|: 2 + v581:0 < 1 + (2 + v581:0) && v527:0 > 0 && v581:0 > -1 && sum~cons_2~v581:0 = 2 + v581:0 && sum~cons_2~v581:01 = 2 + v581:0 && sum~cons_1~sum~cons_2~v581:0 = 1 + (2 + v581:0)
f_348(x, x1, x2, x3) -> f_348(x, x1, 1 + x2, x3) :|: x1 > 1 && x2 > 0 && x1 >= 1 + x2 && x3 > 2 && x > 0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_348(x:0, x1:0, x2:0, x3:0) -> f_348(x:0, x1:0, 1 + x2:0, x3:0) :|: x3:0 > 2 && x:0 > 0 && x1:0 >= 1 + x2:0 && x2:0 > 0 && x1:0 > 1
f_348(v527:0:0, sum~cons_2~v581:0:0, sum~cons_2~v581:0:01, sum~cons_1~sum~cons_2~v581:0:0) -> f_348(v581:0:0, 1 + v581:0:0, 1, 2 + v581:0:0) :|: 2 + v581:0:0 < 1 + (2 + v581:0:0) && v527:0:0 > 0 && v581:0:0 > -1 && sum~cons_2~v581:0:0 = 2 + v581:0:0 && sum~cons_2~v581:0:01 = 2 + v581:0:0 && sum~cons_1~sum~cons_2~v581:0:0 = 1 + (2 + v581:0:0)

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_348 ] = f_348_4

The following rules are decreasing:
f_348(v527:0:0, sum~cons_2~v581:0:0, sum~cons_2~v581:0:01, sum~cons_1~sum~cons_2~v581:0:0) -> f_348(v581:0:0, 1 + v581:0:0, 1, 2 + v581:0:0) :|: 2 + v581:0:0 < 1 + (2 + v581:0:0) && v527:0:0 > 0 && v581:0:0 > -1 && sum~cons_2~v581:0:0 = 2 + v581:0:0 && sum~cons_2~v581:0:01 = 2 + v581:0:0 && sum~cons_1~sum~cons_2~v581:0:0 = 1 + (2 + v581:0:0)

The following rules are bounded:
f_348(x:0, x1:0, x2:0, x3:0) -> f_348(x:0, x1:0, 1 + x2:0, x3:0) :|: x3:0 > 2 && x:0 > 0 && x1:0 >= 1 + x2:0 && x2:0 > 0 && x1:0 > 1
f_348(v527:0:0, sum~cons_2~v581:0:0, sum~cons_2~v581:0:01, sum~cons_1~sum~cons_2~v581:0:0) -> f_348(v581:0:0, 1 + v581:0:0, 1, 2 + v581:0:0) :|: 2 + v581:0:0 < 1 + (2 + v581:0:0) && v527:0:0 > 0 && v581:0:0 > -1 && sum~cons_2~v581:0:0 = 2 + v581:0:0 && sum~cons_2~v581:0:01 = 2 + v581:0:0 && sum~cons_1~sum~cons_2~v581:0:0 = 1 + (2 + v581:0:0)


----------------------------------------

(13)
Obligation:
Rules:
f_348(x:0, x1:0, x2:0, x3:0) -> f_348(x:0, x1:0, 1 + x2:0, x3:0) :|: x3:0 > 2 && x:0 > 0 && x1:0 >= 1 + x2:0 && x2:0 > 0 && x1:0 > 1

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_348(x:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_348(x:0:0, x1:0:0, 1 + x2:0:0, x3:0:0) :|: x2:0:0 > 0 && x1:0:0 > 1 && x1:0:0 >= 1 + x2:0:0 && x:0:0 > 0 && x3:0:0 > 2

----------------------------------------

(16) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_348(x, x1, x2, x3)] = -1 + x1 - x2

The following rules are decreasing:
f_348(x:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_348(x:0:0, x1:0:0, 1 + x2:0:0, x3:0:0) :|: x2:0:0 > 0 && x1:0:0 > 1 && x1:0:0 >= 1 + x2:0:0 && x:0:0 > 0 && x3:0:0 > 2
The following rules are bounded:
f_348(x:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_348(x:0:0, x1:0:0, 1 + x2:0:0, x3:0:0) :|: x2:0:0 > 0 && x1:0:0 > 1 && x1:0:0 >= 1 + x2:0:0 && x:0:0 > 0 && x3:0:0 > 2

----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
SCC
----------------------------------------

(19) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_188(v59, v60, v61, v62, 1, v64, v65, v66, v67, v68, v69, 0, 3, 2, 4) -> f_189(v59, v60, v61, v62, 1, v64, v66, v65, v67, v68, v69, 0, 3, 2, 4) :|: 0 = 0
f_189(v59, v60, v61, v62, 1, v64, v66, v65, v67, v68, v69, 0, 3, 2, 4) -> f_190(v59, v60, v61, v62, 1, v64, v66, v65, v67, v68, v69, 0, 3, 2, 4) :|: v66 <= v64 && 2 <= v64 && 1 <= v62
f_190(v59, v60, v61, v62, 1, v64, v66, v65, v67, v68, v69, 0, 3, 2, 4) -> f_192(v59, v60, v61, v62, 1, v64, v66, v65, v67, v68, v69, 0, 3, 2, 4) :|: 0 = 0
f_192(v59, v60, v61, v62, 1, v64, v66, v65, v67, v68, v69, 0, 3, 2, 4) -> f_194(v59, v60, v61, v62, 1, v64, v66, v65, v67, v68, v69, 0, 3, 2, 4) :|: TRUE
f_194(v59, v60, v61, v62, 1, v64, v66, v65, v67, v68, v69, 0, 3, 2, 4) -> f_196(v59, v60, v61, v62, 1, v64, v66, v67, v68, v69, 0, 3, 2, 4) :|: 0 = 0
f_196(v59, v60, v61, v62, 1, v64, v66, v67, v68, v69, 0, 3, 2, 4) -> f_198(v59, v60, v61, v62, 1, v64, v66, v71, v67, v68, v69, 0, 3, 2, 4) :|: v71 = 1 + v66 && 3 <= v71
f_198(v59, v60, v61, v62, 1, v64, v66, v71, v67, v68, v69, 0, 3, 2, 4) -> f_200(v59, v60, v61, v62, 1, v64, v66, v71, v67, v68, v69, 0, 3, 2, 4) :|: TRUE
f_200(v59, v60, v61, v62, 1, v64, v66, v71, v67, v68, v69, 0, 3, 2, 4) -> f_202(v59, v60, v61, v62, 1, v64, v66, v71, v67, v68, v69, 0, 3, 2, 4) :|: TRUE
f_202(v59, v60, v61, v62, 1, v64, v66, v71, v67, v68, v69, 0, 3, 2, 4) -> f_187(v59, v60, v61, v62, 1, v64, v66, v71, v67, v68, v69, 0, 3, 2, 4) :|: TRUE
f_187(v59, v60, v61, v62, 1, v64, v65, v66, v67, v68, v69, 0, 3, 2, 4) -> f_188(v59, v60, v61, v62, 1, v64, v65, v66, v67, v68, v69, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_188(v59:0, v60:0, v61:0, v62:0, 1, v64:0, v65:0, v66:0, v67:0, v68:0, v69:0, 0, 3, 2, 4) -> f_188(v59:0, v60:0, v61:0, v62:0, 1, v64:0, v66:0, 1 + v66:0, v67:0, v68:0, v69:0, 0, 3, 2, 4) :|: v64:0 > 1 && v66:0 <= v64:0 && v66:0 > 1 && v62:0 > 0
Filtered unneeded arguments:
   f_188(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_188(x4, x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_188(v62:0, v64:0, v66:0) -> f_188(v62:0, v64:0, 1 + v66:0) :|: v66:0 <= v64:0 && v64:0 > 1 && v62:0 > 0 && v66:0 > 1

----------------------------------------

(20)
Obligation:
Rules:
f_188(v62:0, v64:0, v66:0) -> f_188(v62:0, v64:0, 1 + v66:0) :|: v66:0 <= v64:0 && v64:0 > 1 && v62:0 > 0 && v66:0 > 1

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_188(v62:0:0, v64:0:0, v66:0:0) -> f_188(v62:0:0, v64:0:0, 1 + v66:0:0) :|: v62:0:0 > 0 && v66:0:0 > 1 && v64:0:0 > 1 && v66:0:0 <= v64:0:0

----------------------------------------

(23) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_188(x, x1, x2)] = x1 - x2

The following rules are decreasing:
f_188(v62:0:0, v64:0:0, v66:0:0) -> f_188(v62:0:0, v64:0:0, 1 + v66:0:0) :|: v62:0:0 > 0 && v66:0:0 > 1 && v64:0:0 > 1 && v66:0:0 <= v64:0:0
The following rules are bounded:
f_188(v62:0:0, v64:0:0, v66:0:0) -> f_188(v62:0:0, v64:0:0, 1 + v66:0:0) :|: v62:0:0 > 0 && v66:0:0 > 1 && v64:0:0 > 1 && v66:0:0 <= v64:0:0

----------------------------------------

(24)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
