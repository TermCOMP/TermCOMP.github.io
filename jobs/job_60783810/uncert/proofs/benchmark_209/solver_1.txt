YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/0v2nq.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 475 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 52 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/0v2nq.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/0v2nq.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %6
	6:
		%7 = load %3
		%8 = icmp sgt %7 1
		br %8, %9, %13
	9:
		%10 = load %3
		%11 = load %4
		%12 = icmp slt %10 %11
		br %13
	13:
		%14 = phi [0, %6], [%12, %9]
		br %14, %15, %21
	15:
		%16 = load %3
		%17 = load %3
		%18 = mul i32 %16, %17
		store %18, %3
		%19 = load %5
		%20 = add i32 %19, 1
		store %20, %5
		br %6
	21:
		%22 = load %5
		ret %22

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 38
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_311(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_312(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: 1 < v449
f_312(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_314(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: 0 = 0
f_314(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_316(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: TRUE
f_316(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_318(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: 0 = 0
f_318(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_320(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: 0 = 0
f_320(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_322(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: v449 < v443
f_322(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_325(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: 0 = 0
f_325(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_327(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: 0 = 0
f_327(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_329(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: TRUE
f_329(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_331(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: 0 = 0
f_331(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_333(v442, v443, v444, v445, v446, v449, 1, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: 0 = 0
f_333(v442, v443, v444, v445, v446, v449, 1, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_335(v442, v443, v444, v445, v446, v449, 1, v525, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: v525 = v449 * v449
f_335(v442, v443, v444, v445, v446, v449, 1, v525, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_336(v442, v443, v444, v445, v446, v449, 1, v525, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: TRUE
f_336(v442, v443, v444, v445, v446, v449, 1, v525, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_337(v442, v443, v444, v445, v446, v449, 1, v525, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: 0 = 0
f_337(v442, v443, v444, v445, v446, v449, 1, v525, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_338(v442, v443, v444, v445, v446, v449, 1, v525, v451, v527, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: v527 = 1 + v451 && 2 <= v527
f_338(v442, v443, v444, v445, v446, v449, 1, v525, v451, v527, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_339(v442, v443, v444, v445, v446, v449, 1, v525, v451, v527, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: TRUE
f_339(v442, v443, v444, v445, v446, v449, 1, v525, v451, v527, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_340(v442, v443, v444, v445, v446, v449, 1, v525, v451, v527, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: TRUE
f_340(v442, v443, v444, v445, v446, v449, 1, v525, v451, v527, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_310(v442, v443, v444, v445, v446, v449, 1, v525, v451, v527, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: TRUE
f_310(v442, v443, v444, v445, v446, v447, 1, v449, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) -> f_311(v442, v443, v444, v445, v446, v449, 1, v447, v450, v451, v452, v453, v454, v455, v456, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_311(v442:0, v443:0, v444:0, v445:0, v446:0, v449:0, 1, v447:0, v450:0, v451:0, v452:0, v453:0, v454:0, v455:0, v456:0, 0, 3, 2, 4) -> f_311(v442:0, v443:0, v444:0, v445:0, v446:0, v449:0 * v449:0, 1, v449:0, v451:0, 1 + v451:0, v452:0, v453:0, v454:0, v455:0, v456:0, 0, 3, 2, 4) :|: v449:0 > 1 && v451:0 > 0 && v449:0 < v443:0
Filtered unneeded arguments:
   f_311(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_311(x2, x6, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_311(v443:0, v449:0, v451:0) -> f_311(v443:0, v449:0 * v449:0, 1 + v451:0) :|: v451:0 > 0 && v449:0 < v443:0 && v449:0 > 1

----------------------------------------

(8)
Obligation:
Rules:
f_311(v443:0, v449:0, v451:0) -> f_311(v443:0, v449:0 * v449:0, 1 + v451:0) :|: v451:0 > 0 && v449:0 < v443:0 && v449:0 > 1

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_311(v443:0:0, v449:0:0, v451:0:0) -> f_311(v443:0:0, v449:0:0 * v449:0:0, 1 + v451:0:0) :|: v451:0:0 > 0 && v449:0:0 < v443:0:0 && v449:0:0 > 1

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_311(x, x1, x2)] = -2 + x - x1 + x2

The following rules are decreasing:
f_311(v443:0:0, v449:0:0, v451:0:0) -> f_311(v443:0:0, v449:0:0 * v449:0:0, 1 + v451:0:0) :|: v451:0:0 > 0 && v449:0:0 < v443:0:0 && v449:0:0 > 1
The following rules are bounded:
f_311(v443:0:0, v449:0:0, v451:0:0) -> f_311(v443:0:0, v449:0:0 * v449:0:0, 1 + v451:0:0) :|: v451:0:0 > 0 && v449:0:0 < v443:0:0 && v449:0:0 > 1

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
