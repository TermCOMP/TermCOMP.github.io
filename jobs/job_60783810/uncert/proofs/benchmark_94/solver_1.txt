YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/F2B19.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 57 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2927 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 74 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/F2B19.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/F2B19.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cmemchr" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8, 1 i32, 2 i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 12
	0:
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		%6 = alloca i32, align 4
		%7 = alloca i64, align 8
		%8 = alloca *i8, align 8
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %7)
		%9 = load %7
		%10 = icmp ne %9 0
		br %10, %11, %31
	11:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %8)
		%12 = load %5
		store %12, %8
		br %13
	13:
		%14 = load %8
		%15 = getelementptr %14, 1
		store %15, %8
		%16 = load %14
		%17 = zext i8 %16 to i32
		%18 = load %6
		%19 = trunc i32 %18 to i8
		%20 = zext i8 %19 to i32
		%21 = icmp eq %17 %20
		br %21, %22, %25
	22:
		%23 = load %8
		%24 = getelementptr %23, -1
		store %24, %4
		br %32
	25:
		br %26
	26:
		%27 = load %7
		%28 = add i64 %27, -1
		store %28, %7
		%29 = icmp ne %28 0
		br %29, %13, %30
	30:
		br %31
	31:
		store null, %4
		br %32
	32:
		%33 = load %4
		ret %33

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 58
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		%9 = load %2
		%10 = icmp slt %9 1
		br %10, %11, %12
	11:
		store 1, %2
		br %12
	12:
		%13 = load %3
		%14 = icmp slt %13 1
		br %14, %15, %16
	15:
		store 1, %3
		br %16
	16:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%17 = load %3
		%18 = sext i32 %17 to i64
		%19 = mul i64 %18, 1
		%20 = alloca i8, numElementsLit: %19, align 16
		store %20, %5
		%21 = load %5
		%22 = load %4
		%23 = load %3
		%24 = sext i32 %23 to i64
		%25 = call *i8 @cmemchr(*i8 %21, i32 %22, i64 %24)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_642(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1820, v1821, v1822, v1823, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) -> f_644(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1820, v1821, v1822, v1823, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) :|: v1865 = 1 + v1819 && 4 <= v1865
f_644(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1820, v1821, v1822, v1823, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) -> f_646(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1820, v1821, v1822, v1823, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) :|: TRUE
f_646(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1820, v1821, v1822, v1823, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) -> f_648(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1821, v1822, v1823, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) :|: TRUE
f_648(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1821, v1822, v1823, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) -> f_650(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1923, v1822, v1823, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) :|: TRUE
f_650(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1923, v1822, v1823, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) -> f_652(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1923, v1822, v1823, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) :|: 0 = 0
f_652(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1923, v1822, v1823, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) -> f_653(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1923, v1924, v1823, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) :|: TRUE
f_653(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1923, v1924, v1823, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) -> f_654(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1923, v1924, v1925, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) :|: TRUE
f_654(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1923, v1924, v1925, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) -> f_656(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1923, v1924, v1925, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) :|: v1923 != v1925
f_656(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1923, v1924, v1925, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) -> f_658(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1923, v1924, v1925, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) :|: 0 = 0
f_658(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1923, v1924, v1925, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) -> f_660(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1923, v1924, v1925, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) :|: TRUE
f_660(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1923, v1924, v1925, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1820, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) -> f_661(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1865, v1921, v1923, v1924, v1925, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1848, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) :|: TRUE
f_661(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2076, v2077, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v2098, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) -> f_663(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2076, v2077, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v2098, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) :|: TRUE
f_663(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2076, v2077, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v2098, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) -> f_665(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2077, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v2098, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) :|: 0 = 0
f_665(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2077, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v2098, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) -> f_667(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2077, v2132, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v2098, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) :|: 1 + v2132 = v2077 && 0 <= v2132
f_667(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2077, v2132, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v2098, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) -> f_669(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2077, v2132, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v2098, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) :|: TRUE
f_669(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2077, v2132, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v2098, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) -> f_671(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2077, v2132, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v2098, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) :|: 0 < v2132 && 2 <= v2077 && 3 <= v2090 && 3 <= v2062
f_671(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2077, v2132, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v2098, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) -> f_674(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2077, v2132, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v2098, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) :|: 0 = 0
f_674(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2077, v2132, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v2098, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) -> f_676(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2077, v2132, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v2098, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) :|: TRUE
f_676(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2077, v2132, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v2098, v2096, v2099, v2083, v2084, 3, 7, 2, 4, 8) -> f_640(v2060, v2061, v2062, v2063, v2064, v2065, v2066, v2067, 1, v2069, v2070, v2071, v2072, v2073, v2074, 0, v2077, v2132, v2078, v2085, v2079, v2086, v2080, v2087, v2081, v2088, v2082, v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2097, v1845, v1847, v2098, v1832, v1833, 3, 7, 2, 4, 8) :|: TRUE
f_640(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1818, v1819, v1820, v1821, v1822, v1823, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) -> f_642(v1809, v1810, v1811, v1812, v1813, v1814, v1815, v1816, 1, v1819, v1820, v1821, v1822, v1823, 0, v1825, v1826, v1827, v1834, v1828, v1835, v1829, v1836, v1830, v1837, v1831, v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1846, v1818, v1845, v1847, v1848, v1832, v1833, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_642(v1809:0, v1810:0, v1811:0, v1812:0, v1813:0, v1814:0, v1815:0, v1816:0, 1, v1819:0, v1820:0, v1821:0, v1822:0, v1823:0, 0, v1825:0, 1 + v2132:0, v1827:0, v1834:0, v1828:0, v1835:0, v1829:0, v1836:0, v1830:0, v1837:0, v1831:0, v1838:0, v1839:0, v1840:0, v1841:0, v1842:0, v1843:0, v1844:0, v1846:0, v1818:0, v1845:0, v1847:0, v1848:0, v1832:0, v1833:0, 3, 7, 2, 4, 8) -> f_642(v1809:0, v1810:0, v1811:0, v1812:0, v1813:0, v1814:0, v1815:0, v1816:0, 1, 1 + v1819:0, v1921:0, v1923:0, v1924:0, v1925:0, 0, 1 + v2132:0, v2132:0, v1827:0, v1834:0, v1828:0, v1835:0, v1829:0, v1836:0, v1830:0, v1837:0, v1831:0, v1838:0, v1839:0, v1840:0, v1841:0, v1842:0, v1843:0, v1844:0, v1846:0, v1819:0, v1845:1, v1847:1, v1848:0, v1832:1, v1833:1, 3, 7, 2, 4, 8) :|: v2132:0 > 0 && v1819:0 > 2 && v1925:0 > v1923:0 && v1811:0 > 2 && v1839:0 > 2
f_642(v1809:0, v1810:0, v1811:0, v1812:0, v1813:0, v1814:0, v1815:0, v1816:0, 1, v1819:0, v1820:0, v1821:0, v1822:0, v1823:0, 0, v1825:0, 1 + v2132:0, v1827:0, v1834:0, v1828:0, v1835:0, v1829:0, v1836:0, v1830:0, v1837:0, v1831:0, v1838:0, v1839:0, v1840:0, v1841:0, v1842:0, v1843:0, v1844:0, v1846:0, v1818:0, v1845:0, v1847:0, v1848:0, v1832:0, v1833:0, 3, 7, 2, 4, 8) -> f_642(v1809:0, v1810:0, v1811:0, v1812:0, v1813:0, v1814:0, v1815:0, v1816:0, 1, 1 + v1819:0, v1921:0, v1923:0, v1924:0, v1925:0, 0, 1 + v2132:0, v2132:0, v1827:0, v1834:0, v1828:0, v1835:0, v1829:0, v1836:0, v1830:0, v1837:0, v1831:0, v1838:0, v1839:0, v1840:0, v1841:0, v1842:0, v1843:0, v1844:0, v1846:0, v1819:0, v1845:1, v1847:1, v1848:0, v1832:1, v1833:1, 3, 7, 2, 4, 8) :|: v2132:0 > 0 && v1819:0 > 2 && v1925:0 < v1923:0 && v1811:0 > 2 && v1839:0 > 2
Filtered unneeded arguments:
   f_642(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45) -> f_642(x3, x10, x17, x28)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_642(v1811:0, v1819:0, sum~cons_1~v2132:0, v1839:0) -> f_642(v1811:0, 1 + v1819:0, v2132:0, v1839:0) :|: v1819:0 > 2 && v2132:0 > 0 && v1839:0 > 2 && v1811:0 > 2 && sum~cons_1~v2132:0 = 1 + v2132:0

----------------------------------------

(8)
Obligation:
Rules:
f_642(v1811:0, v1819:0, sum~cons_1~v2132:0, v1839:0) -> f_642(v1811:0, 1 + v1819:0, v2132:0, v1839:0) :|: v1819:0 > 2 && v2132:0 > 0 && v1839:0 > 2 && v1811:0 > 2 && sum~cons_1~v2132:0 = 1 + v2132:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_642(v1811:0:0, v1819:0:0, sum~cons_1~v2132:0:0, v1839:0:0) -> f_642(v1811:0:0, 1 + v1819:0:0, v2132:0:0, v1839:0:0) :|: v1839:0:0 > 2 && v1811:0:0 > 2 && v2132:0:0 > 0 && v1819:0:0 > 2 && sum~cons_1~v2132:0:0 = 1 + v2132:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_642(x, x1, x2, x3)] = -2 + x2

The following rules are decreasing:
f_642(v1811:0:0, v1819:0:0, sum~cons_1~v2132:0:0, v1839:0:0) -> f_642(v1811:0:0, 1 + v1819:0:0, v2132:0:0, v1839:0:0) :|: v1839:0:0 > 2 && v1811:0:0 > 2 && v2132:0:0 > 0 && v1819:0:0 > 2 && sum~cons_1~v2132:0:0 = 1 + v2132:0:0
The following rules are bounded:
f_642(v1811:0:0, v1819:0:0, sum~cons_1~v2132:0:0, v1839:0:0) -> f_642(v1811:0:0, 1 + v1819:0:0, v2132:0:0, v1839:0:0) :|: v1839:0:0 > 2 && v1811:0:0 > 2 && v2132:0:0 > 0 && v1819:0:0 > 2 && sum~cons_1~v2132:0:0 = 1 + v2132:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
