YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/r5zOn.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2773 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 2 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 96 ms]
        (16) IntTRS
        (17) TerminationGraphProcessor [EQUIVALENT, 11 ms]
        (18) IntTRS
        (19) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (20) IntTRS
        (21) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/r5zOn.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/r5zOn.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: counter initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "hanoi" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 12
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp eq %4 1
		br %5, %6, %7
	6:
		store 1, %2
		br %13
	7:
		%8 = load %3
		%9 = sub i32 %8, 1
		%10 = call i32 @hanoi(i32 %9)
		%11 = mul i32 2, %10
		%12 = add i32 %11, 1
		store %12, %2
		br %13
	13:
		%14 = load %2
		ret %14

*BasicFunctionTypename: "applyHanoi" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32, 1 i32, 2 i32, 3 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 30
	0:
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		%8 = alloca i32, align 4
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		store %3, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		%9 = load %5
		%10 = icmp eq %9 0
		br %10, %11, %12
	11:
		br %25
	12:
		%13 = load @counter
		%14 = add i32 %13, 1
		store %14, @counter
		%15 = load %5
		%16 = sub i32 %15, 1
		%17 = load %6
		%18 = load %8
		%19 = load %7
		Unnamed Call-Instruction = call BasicVoidType @applyHanoi(i32 %16, i32 %17, i32 %18, i32 %19)
		%20 = load %5
		%21 = sub i32 %20, 1
		%22 = load %8
		%23 = load %7
		%24 = load %6
		Unnamed Call-Instruction = call BasicVoidType @applyHanoi(i32 %21, i32 %22, i32 %23, i32 %24)
		br %25
	25:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 61
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %10, %7
	7:
		%8 = load %2
		%9 = icmp sgt %8 31
		br %9, %10, %11
	10:
		store 0, %1
		br %21
	11:
		store 0, @counter
		%12 = load %2
		Unnamed Call-Instruction = call BasicVoidType @applyHanoi(i32 %12, i32 1, i32 3, i32 2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%13 = load %2
		%14 = call i32 @hanoi(i32 %13)
		store %14, %3
		%15 = load %3
		%16 = load @counter
		%17 = icmp eq %15 %16
		br %17, %18, %19
	18:
		store 0, %1
		br %21
	19:
		br %20
	20:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	21:
		%22 = load %1
		ret %22


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_716(v1194, v1195, v1200, v1196, v1201, v1197, 3, 1, 31, 4) -> f_720(v1194, v1195, v1200, v1240, v1196, v1201, v1241, v1197, 3, 1, 31, 4) :|: 1 <= v1240 && v1241 = 3 + v1240 && 4 <= v1241
f_720(v1194, v1195, v1200, v1240, v1196, v1201, v1241, v1197, 3, 1, 31, 4) -> f_728(v1194, v1195, v1200, v1240, v1196, v1201, v1241, v1197, 3, 1, 31, 4) :|: TRUE
f_728(v1194, v1195, v1200, v1240, v1196, v1201, v1241, v1197, 3, 1, 31, 4) -> f_731(v1194, v1195, v1200, v1240, v1196, v1201, v1241, v1197, 3, 1, 31, 4) :|: TRUE
f_731(v1194, v1195, v1200, v1240, v1196, v1201, v1241, v1197, 3, 1, 31, 4) -> f_735(v1194, v1195, v1200, v1240, v1196, v1201, v1241, v1197, 3, 1, 31, 4) :|: 0 = 0
f_735(v1194, v1195, v1200, v1240, v1196, v1201, v1241, v1197, 3, 1, 31, 4) -> f_740(v1194, v1195, v1200, v1240, v1196, v1201, v1241, v1197, 3, 1, 2, 31, 4) :|: v1195 != 1 && 2 <= v1195 && v1195 <= 31
f_740(v1194, v1195, v1200, v1240, v1196, v1201, v1241, v1197, 3, 1, 2, 31, 4) -> f_745(v1194, v1195, v1200, v1240, 0, v1196, v1201, v1241, v1197, 3, 1, 2, 31, 4) :|: 0 = 0
f_745(v1194, v1195, v1200, v1240, 0, v1196, v1201, v1241, v1197, 3, 1, 2, 31, 4) -> f_747(v1194, v1195, v1200, v1240, 0, v1196, v1201, v1241, v1197, 3, 1, 2, 31, 4) :|: TRUE
f_747(v1194, v1195, v1200, v1240, 0, v1196, v1201, v1241, v1197, 3, 1, 2, 31, 4) -> f_756(v1194, v1195, v1200, v1240, 0, v1196, v1201, v1241, v1197, 3, 1, 2, 31, 4) :|: 0 = 0
f_756(v1194, v1195, v1200, v1240, 0, v1196, v1201, v1241, v1197, 3, 1, 2, 31, 4) -> f_760(v1194, v1195, v1200, v1240, 0, v1393, v1196, v1201, v1241, v1197, 3, 1, 2, 31, 4, 30) :|: 1 + v1393 = v1195 && 1 <= v1393 && v1393 <= 30
f_760(v1194, v1195, v1200, v1240, 0, v1393, v1196, v1201, v1241, v1197, 3, 1, 2, 31, 4, 30) -> f_764(v1194, v1393, v1196, v1200, v1201, v1240, v1241, v1197, v1195, 0, 3, 1, 2, 31, 4, 30) :|: 0 = 0
f_764(v1194, v1393, v1196, v1200, v1201, v1240, v1241, v1197, v1195, 0, 3, 1, 2, 31, 4, 30) -> f_768(v1194, v1393, v1196, v1200, v1201, v1240, v1241, v1197, v1195, 3, 1, 2, 31, 4, 30) :|: TRUE
f_768(v1194, v1393, v1196, v1200, v1201, v1240, v1241, v1197, v1195, 3, 1, 2, 31, 4, 30) -> f_708(v1194, v1393, v1196, v1197, 3, 1, 31, 4) :|: TRUE
f_708(v1194, v1195, v1196, v1197, 3, 1, 31, 4) -> f_716(v1194, v1195, v1200, v1196, v1201, v1197, 3, 1, 31, 4) :|: 1 <= v1200 && v1201 = 3 + v1200 && 4 <= v1201
Combined rules. Obtained 1 rulesP rules:
f_716(v1194:0, 1 + v1393:0, v1200:0, v1196:0, v1201:0, v1197:0, 3, 1, 31, 4) -> f_716(v1194:0, v1393:0, v1200:1, v1196:0, 3 + v1200:1, v1197:0, 3, 1, 31, 4) :|: v1240:0 > 0 && v1393:0 > 0 && v1393:0 < 31 && v1200:1 > 0
Filtered unneeded arguments:
   f_716(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10) -> f_716(x2)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_716(sum~cons_1~v1393:0) -> f_716(v1393:0) :|: v1393:0 > 0 && v1393:0 < 31 && sum~cons_1~v1393:0 = 1 + v1393:0

----------------------------------------

(9)
Obligation:
Rules:
f_716(sum~cons_1~v1393:0) -> f_716(v1393:0) :|: v1393:0 > 0 && v1393:0 < 31 && sum~cons_1~v1393:0 = 1 + v1393:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_716(sum~cons_1~v1393:0:0) -> f_716(v1393:0:0) :|: v1393:0:0 > 0 && v1393:0:0 < 31 && sum~cons_1~v1393:0:0 = 1 + v1393:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_716(x)] = x

The following rules are decreasing:
f_716(sum~cons_1~v1393:0:0) -> f_716(v1393:0:0) :|: v1393:0:0 > 0 && v1393:0:0 < 31 && sum~cons_1~v1393:0:0 = 1 + v1393:0:0
The following rules are bounded:
f_716(sum~cons_1~v1393:0:0) -> f_716(v1393:0:0) :|: v1393:0:0 > 0 && v1393:0:0 < 31 && sum~cons_1~v1393:0:0 = 1 + v1393:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 73 rulesP rules:
f_522(v353, v354, v355, v356, v357, v368, v358, v359, v360, v361, v362, v363, v364, v369, v365, 0, v367, 3, 1, 31, 4) -> f_523(v353, v354, v355, v356, v357, v368, v370, v358, v359, v360, v361, v362, v363, v364, v369, v371, v365, 0, v367, 3, 1, 31, 4) :|: 1 <= v370 && v371 = 3 + v370 && 4 <= v371
f_523(v353, v354, v355, v356, v357, v368, v370, v358, v359, v360, v361, v362, v363, v364, v369, v371, v365, 0, v367, 3, 1, 31, 4) -> f_524(v353, v354, v355, v356, v357, v368, v370, v372, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v365, 0, v367, 3, 1, 31, 4) :|: 1 <= v372 && v373 = 3 + v372 && 4 <= v373
f_524(v353, v354, v355, v356, v357, v368, v370, v372, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v365, 0, v367, 3, 1, 31, 4) -> f_525(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) :|: 1 <= v374 && v375 = 3 + v374 && 4 <= v375
f_525(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) -> f_526(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) :|: TRUE
f_526(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) -> f_527(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) :|: TRUE
f_527(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) -> f_528(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) :|: TRUE
f_528(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) -> f_529(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) :|: TRUE
f_529(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) -> f_530(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) :|: TRUE
f_530(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) -> f_531(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) :|: TRUE
f_531(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) -> f_532(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) :|: TRUE
f_532(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) -> f_533(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) :|: TRUE
f_533(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) -> f_534(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) :|: 0 = 0
f_534(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) -> f_536(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) :|: v354 != 0
f_536(v353, v354, v355, v356, v357, v368, v370, v372, v374, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, 0, v367, 3, 1, 31, 4) -> f_538(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, v367, 3, 1, 31, 4) :|: 0 = 0
f_538(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, v367, 3, 1, 31, 4) -> f_540(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, v367, 3, 1, 31, 4) :|: TRUE
f_540(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v365, v367, 3, 1, 31, 4) -> f_542(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4) :|: 0 = 0
f_542(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4) -> f_544(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4) :|: v401 = 1 + v365 && 1 <= v401
f_544(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4) -> f_545(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4) :|: TRUE
f_545(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4) -> f_546(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4) :|: 0 = 0
f_546(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4) -> f_547(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4, 30) :|: 1 + v403 = v354 && 0 <= v403 && v403 <= 30
f_547(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4, 30) -> f_548(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4, 30) :|: 0 = 0
f_548(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4, 30) -> f_549(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4, 30) :|: 0 = 0
f_549(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4, 30) -> f_550(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4, 30) :|: 0 = 0
f_550(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 1, 31, 4, 30) -> f_551(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v401, v365, 3, 1, 31, 4, 30) :|: 0 = 0
f_551(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v401, v365, 3, 1, 31, 4, 30) -> f_552(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v401, 3, 1, 31, 4, 30) :|: TRUE
f_551(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v401, v365, 3, 1, 31, 4, 30) -> f_553(v353, 0, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, v367, 1, v401, v365, 3, 4, 31) :|: TRUE
f_551(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v401, v365, 3, 1, 31, 4, 30) -> f_633(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v849, v365, v401, 3, 1, 31, 4, 30, 2) :|: TRUE
f_551(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v401, v365, 3, 1, 31, 4, 30) -> f_671(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1019, v365, v401, 3, 1, 31, 4, 30, 2) :|: TRUE
f_551(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v401, v365, 3, 1, 31, 4, 30) -> f_695(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1143, v365, v401, 3, 1, 31, 4, 30, 2) :|: TRUE
f_551(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v401, v365, 3, 1, 31, 4, 30) -> f_725(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1143, v365, v401, 3, 1, 31, 4, 30, 2) :|: TRUE
f_551(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v401, v365, 3, 1, 31, 4, 30) -> f_749(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1143, v365, v401, 3, 1, 31, 4, 30, 2) :|: TRUE
f_551(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v401, v365, 3, 1, 31, 4, 30) -> f_770(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1143, v365, v401, 3, 1, 31, 4, 30, 2) :|: TRUE
f_552(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v401, 3, 1, 31, 4, 30) -> f_521(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v401, 0, v367, 3, 1, 31, 4) :|: TRUE
f_521(v353, v354, v355, v356, v357, v358, v359, v360, v361, v362, v363, v364, v365, 0, v367, 3, 1, 31, 4) -> f_522(v353, v354, v355, v356, v357, v368, v358, v359, v360, v361, v362, v363, v364, v369, v365, 0, v367, 3, 1, 31, 4) :|: 1 <= v368 && v369 = 3 + v368 && 4 <= v369
f_553(v353, 0, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, v367, 1, v401, v365, 3, 4, 31) -> f_554(v353, 1, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 4, 31) :|: TRUE
f_554(v353, 1, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 4, 31) -> f_555(v353, 1, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 4, 31) :|: 0 = 0
f_555(v353, 1, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 4, 31) -> f_556(v353, 1, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 4, 31) :|: 0 = 0
f_556(v353, 1, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 4, 31) -> f_557(v353, 1, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 4, 31) :|: 0 = 0
f_557(v353, 1, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 4, 31) -> f_558(v353, 1, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 4, 31) :|: 0 = 0
f_558(v353, 1, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 4, 31) -> f_559(v353, 1, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 4, 31) :|: 0 = 0
f_559(v353, 1, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, 3, 4, 31) -> f_560(v353, 0, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, v367, 1, v401, v365, 3, 4, 31) :|: 0 = 0
f_560(v353, 0, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, v367, 1, v401, v365, 3, 4, 31) -> f_561(v353, 0, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, v367, 1, v401, 3, 4, 31) :|: TRUE
f_561(v353, 0, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, v367, 1, v401, 3, 4, 31) -> f_521(v353, 0, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v401, 0, v367, 3, 1, 31, 4) :|: TRUE
f_633(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v849, v365, v401, 3, 1, 31, 4, 30, 2) -> f_636(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v849, 3, 1, 31, 4, 30, 2) :|: TRUE
f_636(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v849, 3, 1, 31, 4, 30, 2) -> f_639(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v849, 3, 1, 31, 4, 30, 2) :|: 0 = 0
f_639(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v849, 3, 1, 31, 4, 30, 2) -> f_642(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v849, 3, 1, 31, 4, 30, 2) :|: 1 + v403 = v354
f_642(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v849, 3, 1, 31, 4, 30, 2) -> f_644(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v849, 3, 1, 31, 4, 30, 2) :|: 0 = 0
f_644(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v849, 3, 1, 31, 4, 30, 2) -> f_649(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v849, 3, 1, 31, 4, 30, 2) :|: 0 = 0
f_649(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v849, 3, 1, 31, 4, 30, 2) -> f_650(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v849, 3, 1, 31, 4, 30, 2) :|: 0 = 0
f_650(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v849, 3, 1, 31, 4, 30, 2) -> f_652(v353, v403, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v849, v365, v401, 3, 1, 31, 4, 30, 2) :|: 0 = 0
f_652(v353, v403, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v849, v365, v401, 3, 1, 31, 4, 30, 2) -> f_654(v353, v403, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v849, 3, 1, 31, 4, 30, 2) :|: TRUE
f_654(v353, v403, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v849, 3, 1, 31, 4, 30, 2) -> f_521(v353, v403, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v849, 0, v367, 3, 1, 31, 4) :|: TRUE
f_671(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1019, v365, v401, 3, 1, 31, 4, 30, 2) -> f_677(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1019, 3, 1, 31, 4, 30, 2) :|: TRUE
f_677(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1019, 3, 1, 31, 4, 30, 2) -> f_683(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1019, 3, 1, 31, 4, 30, 2) :|: 0 = 0
f_683(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1019, 3, 1, 31, 4, 30, 2) -> f_689(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1019, 3, 1, 31, 4, 30, 2) :|: 1 + v403 = v354
f_689(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1019, 3, 1, 31, 4, 30, 2) -> f_693(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1019, 3, 1, 31, 4, 30, 2) :|: 0 = 0
f_693(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1019, 3, 1, 31, 4, 30, 2) -> f_701(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1019, 3, 1, 31, 4, 30, 2) :|: 0 = 0
f_701(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1019, 3, 1, 31, 4, 30, 2) -> f_709(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1019, 3, 1, 31, 4, 30, 2) :|: 0 = 0
f_709(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1019, 3, 1, 31, 4, 30, 2) -> f_717(v353, v403, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1019, v365, v401, 3, 1, 31, 4, 30, 2) :|: 0 = 0
f_717(v353, v403, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1019, v365, v401, 3, 1, 31, 4, 30, 2) -> f_721(v353, v403, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1019, 3, 1, 31, 4, 30, 2) :|: TRUE
f_721(v353, v403, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1019, 3, 1, 31, 4, 30, 2) -> f_521(v353, v403, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v1019, 0, v367, 3, 1, 31, 4) :|: TRUE
f_695(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1143, v365, v401, 3, 1, 31, 4, 30, 2) -> f_703(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1143, 3, 1, 31, 4, 30, 2) :|: TRUE
f_703(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1143, 3, 1, 31, 4, 30, 2) -> f_711(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1143, 3, 1, 31, 4, 30, 2) :|: 0 = 0
f_711(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1143, 3, 1, 31, 4, 30, 2) -> f_719(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1143, 3, 1, 31, 4, 30, 2) :|: 1 + v403 = v354
f_719(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1143, 3, 1, 31, 4, 30, 2) -> f_723(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1143, 3, 1, 31, 4, 30, 2) :|: 0 = 0
f_723(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1143, 3, 1, 31, 4, 30, 2) -> f_730(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1143, 3, 1, 31, 4, 30, 2) :|: 0 = 0
f_730(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1143, 3, 1, 31, 4, 30, 2) -> f_734(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1143, 3, 1, 31, 4, 30, 2) :|: 0 = 0
f_734(v353, v354, v355, v356, v357, v368, v370, v372, v374, 0, v365, v401, v403, v358, v359, v360, v361, v362, v363, v364, v369, v371, v373, v375, v367, v1143, 3, 1, 31, 4, 30, 2) -> f_738(v353, v403, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1143, v365, v401, 3, 1, 31, 4, 30, 2) :|: 0 = 0
f_738(v353, v403, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1143, v365, v401, 3, 1, 31, 4, 30, 2) -> f_743(v353, v403, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1143, 3, 1, 31, 4, 30, 2) :|: TRUE
f_743(v353, v403, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1143, 3, 1, 31, 4, 30, 2) -> f_521(v353, v403, v357, v356, v355, v358, v359, v360, v361, v362, v363, v364, v1143, 0, v367, 3, 1, 31, 4) :|: TRUE
f_725(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1143, v365, v401, 3, 1, 31, 4, 30, 2) -> f_695(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1143, v365, v401, 3, 1, 31, 4, 30, 2) :|: TRUE
f_749(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1143, v365, v401, 3, 1, 31, 4, 30, 2) -> f_725(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1143, v365, v401, 3, 1, 31, 4, 30, 2) :|: TRUE
f_770(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1143, v365, v401, 3, 1, 31, 4, 30, 2) -> f_749(v353, v403, v355, v357, v356, v358, v359, v360, v361, v362, v363, v364, v368, v369, v370, v371, v372, v373, v374, v375, 0, v367, v354, v1143, v365, v401, 3, 1, 31, 4, 30, 2) :|: TRUE
Combined rules. Obtained 3 rulesP rules:
f_522(v353:0, 1 + v403:0, v355:0, v356:0, v357:0, v368:0, v358:0, v359:0, v360:0, v361:0, v362:0, v363:0, v364:0, v369:0, v365:0, 0, v367:0, 3, 1, 31, 4) -> f_522(v353:0, v403:0, v357:0, v356:0, v355:0, v368:1, v358:0, v359:0, v360:0, v361:0, v362:0, v363:0, v364:0, 3 + v368:1, v849:0, 0, v367:0, 3, 1, 31, 4) :|: v372:0 > 0 && v370:0 > 0 && v374:0 > 0 && v403:0 > -1 && v365:0 > -1 && v403:0 < 31 && v368:1 > 0
f_522(v353:0, 1 + v403:0, v355:0, v356:0, v357:0, v368:0, v358:0, v359:0, v360:0, v361:0, v362:0, v363:0, v364:0, v369:0, v365:0, 0, v367:0, 3, 1, 31, 4) -> f_522(v353:0, 0, v357:0, v356:0, v355:0, v368:1, v358:0, v359:0, v360:0, v361:0, v362:0, v363:0, v364:0, 3 + v368:1, 1 + v365:0, 0, v367:0, 3, 1, 31, 4) :|: v372:0 > 0 && v370:0 > 0 && v374:0 > 0 && v403:0 > -1 && v365:0 > -1 && v403:0 < 31 && v368:1 > 0
f_522(v353:0, 1 + v403:0, v355:0, v356:0, v357:0, v368:0, v358:0, v359:0, v360:0, v361:0, v362:0, v363:0, v364:0, v369:0, v365:0, 0, v367:0, 3, 1, 31, 4) -> f_522(v353:0, v403:0, v355:0, v357:0, v356:0, v368:1, v358:0, v359:0, v360:0, v361:0, v362:0, v363:0, v364:0, 3 + v368:1, 1 + v365:0, 0, v367:0, 3, 1, 31, 4) :|: v372:0 > 0 && v370:0 > 0 && v374:0 > 0 && v403:0 > -1 && v365:0 > -1 && v403:0 < 31 && v368:1 > 0
Filtered unneeded arguments:
   f_522(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_522(x2, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_522(sum~cons_1~v403:0, v365:0) -> f_522(v403:0, v849:0) :|: v365:0 > -1 && v403:0 < 31 && v403:0 > -1 && sum~cons_1~v403:0 = 1 + v403:0
f_522(sum~cons_1~v403:0, v365:0) -> f_522(0, 1 + v365:0) :|: v365:0 > -1 && v403:0 < 31 && v403:0 > -1 && sum~cons_1~v403:0 = 1 + v403:0
f_522(sum~cons_1~v403:0, v365:0) -> f_522(v403:0, 1 + v365:0) :|: v365:0 > -1 && v403:0 < 31 && v403:0 > -1 && sum~cons_1~v403:0 = 1 + v403:0

----------------------------------------

(16)
Obligation:
Rules:
f_522(sum~cons_1~v403:0, v365:0) -> f_522(v403:0, v849:0) :|: v365:0 > -1 && v403:0 < 31 && v403:0 > -1 && sum~cons_1~v403:0 = 1 + v403:0
f_522(x, x1) -> f_522(0, 1 + x1) :|: x1 > -1 && x2 < 31 && x2 > -1 && x = 1 + x2
f_522(x3, x4) -> f_522(x5, 1 + x4) :|: x4 > -1 && x5 < 31 && x5 > -1 && x3 = 1 + x5

----------------------------------------

(17) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(18)
Obligation:
Rules:
f_522(sum~cons_1~v403:0, v365:0) -> f_522(v403:0, v849:0) :|: v365:0 > -1 && v403:0 < 31 && v403:0 > -1 && sum~cons_1~v403:0 = 1 + v403:0
f_522(x3, x4) -> f_522(x5, 1 + x4) :|: x4 > -1 && x5 < 31 && x5 > -1 && x3 = 1 + x5

----------------------------------------

(19) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(20)
Obligation:
Rules:
f_522(sum~cons_1~x5:0, x4:0) -> f_522(x5:0, 1 + x4:0) :|: x4:0 > -1 && x5:0 < 31 && x5:0 > -1 && sum~cons_1~x5:0 = 1 + x5:0
f_522(sum~cons_1~v403:0:0, v365:0:0) -> f_522(v403:0:0, v849:0:0) :|: v365:0:0 > -1 && v403:0:0 < 31 && v403:0:0 > -1 && sum~cons_1~v403:0:0 = 1 + v403:0:0

----------------------------------------

(21) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_522 ] = f_522_1

The following rules are decreasing:
f_522(sum~cons_1~x5:0, x4:0) -> f_522(x5:0, 1 + x4:0) :|: x4:0 > -1 && x5:0 < 31 && x5:0 > -1 && sum~cons_1~x5:0 = 1 + x5:0
f_522(sum~cons_1~v403:0:0, v365:0:0) -> f_522(v403:0:0, v849:0:0) :|: v365:0:0 > -1 && v403:0:0 < 31 && v403:0:0 > -1 && sum~cons_1~v403:0:0 = 1 + v403:0:0

The following rules are bounded:
f_522(sum~cons_1~x5:0, x4:0) -> f_522(x5:0, 1 + x4:0) :|: x4:0 > -1 && x5:0 < 31 && x5:0 > -1 && sum~cons_1~x5:0 = 1 + x5:0
f_522(sum~cons_1~v403:0:0, v365:0:0) -> f_522(v403:0:0, v849:0:0) :|: v365:0:0 > -1 && v403:0:0 < 31 && v403:0:0 > -1 && sum~cons_1~v403:0:0 = 1 + v403:0:0


----------------------------------------

(22)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.003s
