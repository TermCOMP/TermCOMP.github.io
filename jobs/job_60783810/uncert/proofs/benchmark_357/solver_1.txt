YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/PP8vi.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 395 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 20 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 12 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 17 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/PP8vi.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/PP8vi.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store 0, %2
		store 100, %3
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %4
		br %6
	6:
		%7 = load %2
		%8 = icmp slt %7 40
		br %8, %9, %19
	9:
		%10 = load %4
		%11 = icmp eq %10 0
		br %11, %12, %15
	12:
		%13 = load %2
		%14 = add i32 %13, 1
		store %14, %2
		br %18
	15:
		%16 = load %2
		%17 = add i32 %16, 2
		store %17, %2
		br %18
	18:
		br %6
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_243(v228, v229, v230, v231, 0, v235, 1, v233, v236, v237, v238, v239, 100, 3, 39, 40, 4) -> f_244(v228, v229, v230, v231, 0, v235, 1, v233, v236, v237, v238, v239, 100, 3, 38, 39, 4) :|: v235 < 40 && v233 <= 38
f_244(v228, v229, v230, v231, 0, v235, 1, v233, v236, v237, v238, v239, 100, 3, 38, 39, 4) -> f_246(v228, v229, v230, v231, 0, v235, 1, v233, v236, v237, v238, v239, 100, 3, 38, 39, 4) :|: 0 = 0
f_246(v228, v229, v230, v231, 0, v235, 1, v233, v236, v237, v238, v239, 100, 3, 38, 39, 4) -> f_248(v228, v229, v230, v231, 0, v235, 1, v233, v236, v237, v238, v239, 100, 3, 38, 39, 4) :|: TRUE
f_248(v228, v229, v230, v231, 0, v235, 1, v233, v236, v237, v238, v239, 100, 3, 38, 39, 4) -> f_250(v228, v229, v230, v231, 0, v235, 1, v233, v236, v237, v238, v239, 100, 3, 38, 39, 4) :|: 0 = 0
f_250(v228, v229, v230, v231, 0, v235, 1, v233, v236, v237, v238, v239, 100, 3, 38, 39, 4) -> f_251(v228, v229, v230, v231, 0, v235, 1, v233, v236, v237, v238, v239, 100, 3, 38, 39, 4) :|: 0 = 0
f_251(v228, v229, v230, v231, 0, v235, 1, v233, v236, v237, v238, v239, 100, 3, 38, 39, 4) -> f_252(v228, v229, v230, v231, 0, v235, 1, v233, v236, v237, v238, v239, 100, 3, 38, 39, 4) :|: TRUE
f_252(v228, v229, v230, v231, 0, v235, 1, v233, v236, v237, v238, v239, 100, 3, 38, 39, 4) -> f_253(v228, v229, v230, v231, 0, v235, 1, v236, v237, v238, v239, 100, 3, 39, 4) :|: 0 = 0
f_253(v228, v229, v230, v231, 0, v235, 1, v236, v237, v238, v239, 100, 3, 39, 4) -> f_254(v228, v229, v230, v231, 0, v235, 1, v249, v236, v237, v238, v239, 100, 3, 39, 4, 2, 40) :|: v249 = 1 + v235 && 2 <= v249 && v249 <= 40
f_254(v228, v229, v230, v231, 0, v235, 1, v249, v236, v237, v238, v239, 100, 3, 39, 4, 2, 40) -> f_255(v228, v229, v230, v231, 0, v235, 1, v249, v236, v237, v238, v239, 100, 3, 39, 4, 2, 40) :|: TRUE
f_255(v228, v229, v230, v231, 0, v235, 1, v249, v236, v237, v238, v239, 100, 3, 39, 4, 2, 40) -> f_256(v228, v229, v230, v231, 0, v235, 1, v249, v236, v237, v238, v239, 100, 3, 39, 4, 2, 40) :|: TRUE
f_256(v228, v229, v230, v231, 0, v235, 1, v249, v236, v237, v238, v239, 100, 3, 39, 4, 2, 40) -> f_257(v228, v229, v230, v231, 0, v235, 1, v249, v236, v237, v238, v239, 100, 3, 39, 4, 2, 40) :|: TRUE
f_257(v228, v229, v230, v231, 0, v235, 1, v249, v236, v237, v238, v239, 100, 3, 39, 4, 2, 40) -> f_242(v228, v229, v230, v231, 0, v235, 1, v249, v236, v237, v238, v239, 100, 3, 39, 40, 4) :|: TRUE
f_242(v228, v229, v230, v231, 0, v233, 1, v235, v236, v237, v238, v239, 100, 3, 39, 40, 4) -> f_243(v228, v229, v230, v231, 0, v235, 1, v233, v236, v237, v238, v239, 100, 3, 39, 40, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_243(v228:0, v229:0, v230:0, v231:0, 0, v235:0, 1, v233:0, v236:0, v237:0, v238:0, v239:0, 100, 3, 39, 40, 4) -> f_243(v228:0, v229:0, v230:0, v231:0, 0, 1 + v235:0, 1, v235:0, v236:0, v237:0, v238:0, v239:0, 100, 3, 39, 40, 4) :|: v233:0 < 39 && v235:0 < 40 && v235:0 > 0
Filtered unneeded arguments:
   f_243(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_243(x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_243(v235:0, v233:0) -> f_243(1 + v235:0, v235:0) :|: v235:0 < 40 && v235:0 > 0 && v233:0 < 39

----------------------------------------

(9)
Obligation:
Rules:
f_243(v235:0, v233:0) -> f_243(1 + v235:0, v235:0) :|: v235:0 < 40 && v235:0 > 0 && v233:0 < 39

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_243(v235:0:0, v233:0:0) -> f_243(1 + v235:0:0, v235:0:0) :|: v235:0:0 < 40 && v235:0:0 > 0 && v233:0:0 < 39

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_243 ] = -1*f_243_1

The following rules are decreasing:
f_243(v235:0:0, v233:0:0) -> f_243(1 + v235:0:0, v235:0:0) :|: v235:0:0 < 40 && v235:0:0 > 0 && v233:0:0 < 39

The following rules are bounded:
f_243(v235:0:0, v233:0:0) -> f_243(1 + v235:0:0, v235:0:0) :|: v235:0:0 < 40 && v235:0:0 > 0 && v233:0:0 < 39


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_196(v121, v122, v123, v124, v125, v126, 1, 0, v129, v130, v131, v132, v133, 100, 3, 2, 39, 41, 4) -> f_198(v121, v122, v123, v124, v125, v129, 1, 0, v126, v130, v131, v132, v133, 100, 3, 2, 39, 41, 4) :|: 0 = 0
f_198(v121, v122, v123, v124, v125, v129, 1, 0, v126, v130, v131, v132, v133, 100, 3, 2, 39, 41, 4) -> f_201(v121, v122, v123, v124, v125, v129, 1, 0, v126, v130, v131, v132, v133, 100, 3, 2, 37, 39, 4) :|: v129 < 40 && v126 <= 37
f_201(v121, v122, v123, v124, v125, v129, 1, 0, v126, v130, v131, v132, v133, 100, 3, 2, 37, 39, 4) -> f_205(v121, v122, v123, v124, v125, v129, 1, 0, v126, v130, v131, v132, v133, 100, 3, 2, 37, 39, 4) :|: 0 = 0
f_205(v121, v122, v123, v124, v125, v129, 1, 0, v126, v130, v131, v132, v133, 100, 3, 2, 37, 39, 4) -> f_209(v121, v122, v123, v124, v125, v129, 1, 0, v126, v130, v131, v132, v133, 100, 3, 2, 37, 39, 4) :|: TRUE
f_209(v121, v122, v123, v124, v125, v129, 1, 0, v126, v130, v131, v132, v133, 100, 3, 2, 37, 39, 4) -> f_212(v121, v122, v123, v124, v125, v129, 1, 0, v126, v130, v131, v132, v133, 100, 3, 2, 37, 39, 4) :|: 0 = 0
f_212(v121, v122, v123, v124, v125, v129, 1, 0, v126, v130, v131, v132, v133, 100, 3, 2, 37, 39, 4) -> f_214(v121, v122, v123, v124, v125, v129, 1, 0, v126, v130, v131, v132, v133, 100, 3, 2, 37, 39, 4) :|: 0 = 0
f_214(v121, v122, v123, v124, v125, v129, 1, 0, v126, v130, v131, v132, v133, 100, 3, 2, 37, 39, 4) -> f_216(v121, v122, v123, v124, v125, v129, 1, 0, v126, v130, v131, v132, v133, 100, 3, 2, 37, 39, 4) :|: TRUE
f_216(v121, v122, v123, v124, v125, v129, 1, 0, v126, v130, v131, v132, v133, 100, 3, 2, 37, 39, 4) -> f_218(v121, v122, v123, v124, v125, v129, 1, 0, v130, v131, v132, v133, 100, 3, 2, 39, 4) :|: 0 = 0
f_218(v121, v122, v123, v124, v125, v129, 1, 0, v130, v131, v132, v133, 100, 3, 2, 39, 4) -> f_220(v121, v122, v123, v124, v125, v129, 1, 0, v162, v130, v131, v132, v133, 100, 3, 2, 39, 4, 41) :|: v162 = 2 + v129 && 4 <= v162 && v162 <= 41
f_220(v121, v122, v123, v124, v125, v129, 1, 0, v162, v130, v131, v132, v133, 100, 3, 2, 39, 4, 41) -> f_222(v121, v122, v123, v124, v125, v129, 1, 0, v162, v130, v131, v132, v133, 100, 3, 2, 39, 4, 41) :|: TRUE
f_222(v121, v122, v123, v124, v125, v129, 1, 0, v162, v130, v131, v132, v133, 100, 3, 2, 39, 4, 41) -> f_224(v121, v122, v123, v124, v125, v129, 1, 0, v162, v130, v131, v132, v133, 100, 3, 2, 39, 4, 41) :|: TRUE
f_224(v121, v122, v123, v124, v125, v129, 1, 0, v162, v130, v131, v132, v133, 100, 3, 2, 39, 4, 41) -> f_193(v121, v122, v123, v124, v125, v129, 1, 0, v162, v130, v131, v132, v133, 100, 3, 2, 39, 41, 4) :|: TRUE
f_193(v121, v122, v123, v124, v125, v126, 1, 0, v129, v130, v131, v132, v133, 100, 3, 2, 39, 41, 4) -> f_196(v121, v122, v123, v124, v125, v126, 1, 0, v129, v130, v131, v132, v133, 100, 3, 2, 39, 41, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_196(v121:0, v122:0, v123:0, v124:0, v125:0, v126:0, 1, 0, v129:0, v130:0, v131:0, v132:0, v133:0, 100, 3, 2, 39, 41, 4) -> f_196(v121:0, v122:0, v123:0, v124:0, v125:0, v129:0, 1, 0, 2 + v129:0, v130:0, v131:0, v132:0, v133:0, 100, 3, 2, 39, 41, 4) :|: v126:0 < 38 && v129:0 < 40 && v129:0 > 1
Filtered unneeded arguments:
   f_196(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_196(x6, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_196(v126:0, v129:0) -> f_196(v129:0, 2 + v129:0) :|: v129:0 < 40 && v129:0 > 1 && v126:0 < 38

----------------------------------------

(16)
Obligation:
Rules:
f_196(v126:0, v129:0) -> f_196(v129:0, 2 + v129:0) :|: v129:0 < 40 && v129:0 > 1 && v126:0 < 38

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_196(v126:0:0, v129:0:0) -> f_196(v129:0:0, 2 + v129:0:0) :|: v129:0:0 < 40 && v129:0:0 > 1 && v126:0:0 < 38

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_196 ] = -1/2*f_196_2

The following rules are decreasing:
f_196(v126:0:0, v129:0:0) -> f_196(v129:0:0, 2 + v129:0:0) :|: v129:0:0 < 40 && v129:0:0 > 1 && v126:0:0 < 38

The following rules are bounded:
f_196(v126:0:0, v129:0:0) -> f_196(v129:0:0, 2 + v129:0:0) :|: v129:0:0 < 40 && v129:0:0 > 1 && v126:0:0 < 38


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
