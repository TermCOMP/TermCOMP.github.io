MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/8tgto.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 81 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/8tgto.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/8tgto.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: __LABS_time initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: tupleStart initVal: \00\01 type: [2 x i8] addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: tupleEnd initVal: \00\01 type: [2 x i8] addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: I initVal: ((0),(0),(0)) type: [3 x [1 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Ltstamp initVal: ((0,0),(0,0),(0,0)) type: [3 x [2 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HinCnt initVal: (0,0,0) type: [3 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hin initVal: ((0,0),(0,0),(0,0)) type: [3 x [2 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HoutCnt initVal: (0,0,0) type: [3 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hout initVal: ((0,0),(0,0),(0,0)) type: [3 x [2 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Lvalue initVal: ((0,0),(0,0),(0,0)) type: [3 x [2 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: pc initVal: ((0),(0),(0)) type: [3 x [1 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "exit" returnParam: BasicVoidType parameters: (i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 54
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		Unnamed Call-Instruction = call BasicVoidType @exit(i32 0)
		unreachable
	6:
		ret void

*BasicFunctionTypename: "__abs" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 65
	0:
		%2 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%3 = load %2
		%4 = sext i8 %3 to i32
		%5 = icmp sgt %4 0
		br %5, %6, %9
	6:
		%7 = load %2
		%8 = sext i8 %7 to i32
		br %13
	9:
		%10 = load %2
		%11 = sext i8 %10 to i32
		%12 = sub i32 0, %11
		br %13
	13:
		%14 = phi [%8, %6], [%12, %9]
		%15 = trunc i32 %14 to i8
		ret %15

*BasicFunctionTypename: "now" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 78
	0:
		%1 = load @__LABS_time
		%2 = add i8 %1, 1
		store %2, @__LABS_time
		ret %2

*BasicFunctionTypename: "link" linkageType: EXTERNALLY_VISIBLE returnParam: i1 zeroext parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 83
	0:
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		store 0, %7
		%8 = load %6
		%9 = zext i8 %8 to i32
		%10 = icmp sge %9 0
		br %10, %11, %48
	11:
		%12 = load %6
		%13 = zext i8 %12 to i32
		%14 = icmp sle %13 0
		br %14, %15, %48
	15:
		%16 = load %4
		%17 = zext i8 %16 to i64
		%18 = getelementptr @I, 0, %17
		%19 = getelementptr %18, 0, 0
		%20 = load %19
		%21 = sext i8 %20 to i32
		%22 = load %5
		%23 = zext i8 %22 to i64
		%24 = getelementptr @I, 0, %23
		%25 = getelementptr %24, 0, 0
		%26 = load %25
		%27 = sext i8 %26 to i32
		%28 = sub i32 %21, %27
		%29 = icmp sge %28 0
		br %29, %30, %45
	30:
		%31 = load %4
		%32 = zext i8 %31 to i64
		%33 = getelementptr @I, 0, %32
		%34 = getelementptr %33, 0, 0
		%35 = load %34
		%36 = sext i8 %35 to i32
		%37 = load %5
		%38 = zext i8 %37 to i64
		%39 = getelementptr @I, 0, %38
		%40 = getelementptr %39, 0, 0
		%41 = load %40
		%42 = sext i8 %41 to i32
		%43 = sub i32 %36, %42
		%44 = icmp sle %43 2
		br %45
	45:
		%46 = phi [0, %15], [%44, %30]
		%47 = zext i1 %46 to i8
		store %47, %7
		br %90
	48:
		%49 = load %6
		%50 = zext i8 %49 to i32
		%51 = icmp sge %50 1
		br %51, %52, %89
	52:
		%53 = load %6
		%54 = zext i8 %53 to i32
		%55 = icmp sle %54 1
		br %55, %56, %89
	56:
		%57 = load %5
		%58 = zext i8 %57 to i64
		%59 = getelementptr @I, 0, %58
		%60 = getelementptr %59, 0, 0
		%61 = load %60
		%62 = sext i8 %61 to i32
		%63 = load %4
		%64 = zext i8 %63 to i64
		%65 = getelementptr @I, 0, %64
		%66 = getelementptr %65, 0, 0
		%67 = load %66
		%68 = sext i8 %67 to i32
		%69 = sub i32 %62, %68
		%70 = icmp sgt %69 0
		br %70, %71, %86
	71:
		%72 = load %5
		%73 = zext i8 %72 to i64
		%74 = getelementptr @I, 0, %73
		%75 = getelementptr %74, 0, 0
		%76 = load %75
		%77 = sext i8 %76 to i32
		%78 = load %4
		%79 = zext i8 %78 to i64
		%80 = getelementptr @I, 0, %79
		%81 = getelementptr %80, 0, 0
		%82 = load %81
		%83 = sext i8 %82 to i32
		%84 = sub i32 %77, %83
		%85 = icmp sle %84 2
		br %86
	86:
		%87 = phi [0, %56], [%85, %71]
		%88 = zext i1 %87 to i8
		store %88, %7
		br %89
	89:
		br %90
	90:
		%91 = load %7
		%92 = trunc i8 %91 to i1
		ret %92

*BasicFunctionTypename: "timeof" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 145
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i64
		%7 = getelementptr @Ltstamp, 0, %6
		%8 = load %4
		%9 = zext i8 %8 to i64
		%10 = getelementptr @tupleStart, 0, %9
		%11 = load %10
		%12 = zext i8 %11 to i64
		%13 = getelementptr %7, 0, %12
		%14 = load %13
		ret %14

*BasicFunctionTypename: "setHin" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 157
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i64
		%7 = getelementptr @HinCnt, 0, %6
		%8 = load %7
		%9 = zext i8 %8 to i32
		%10 = load %3
		%11 = zext i8 %10 to i64
		%12 = getelementptr @Hin, 0, %11
		%13 = load %4
		%14 = zext i8 %13 to i64
		%15 = getelementptr @tupleStart, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i64
		%18 = getelementptr %12, 0, %17
		%19 = load %18
		%20 = trunc i8 %19 to i1
		%21 = xor i1 %20, 1
		%22 = zext i1 %21 to i32
		%23 = add i32 %9, %22
		%24 = trunc i32 %23 to i8
		%25 = load %3
		%26 = zext i8 %25 to i64
		%27 = getelementptr @HinCnt, 0, %26
		store %24, %27
		%28 = load %3
		%29 = zext i8 %28 to i64
		%30 = getelementptr @Hin, 0, %29
		%31 = load %4
		%32 = zext i8 %31 to i64
		%33 = getelementptr @tupleStart, 0, %32
		%34 = load %33
		%35 = zext i8 %34 to i64
		%36 = getelementptr %30, 0, %35
		store 1, %36
		ret void

*BasicFunctionTypename: "clearHin" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 181
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i64
		%7 = getelementptr @HinCnt, 0, %6
		%8 = load %7
		%9 = zext i8 %8 to i32
		%10 = load %3
		%11 = zext i8 %10 to i64
		%12 = getelementptr @Hin, 0, %11
		%13 = load %4
		%14 = zext i8 %13 to i64
		%15 = getelementptr @tupleStart, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i64
		%18 = getelementptr %12, 0, %17
		%19 = load %18
		%20 = trunc i8 %19 to i1
		%21 = zext i1 %20 to i32
		%22 = sub i32 %9, %21
		%23 = trunc i32 %22 to i8
		%24 = load %3
		%25 = zext i8 %24 to i64
		%26 = getelementptr @HinCnt, 0, %25
		store %23, %26
		%27 = load %3
		%28 = zext i8 %27 to i64
		%29 = getelementptr @Hin, 0, %28
		%30 = load %4
		%31 = zext i8 %30 to i64
		%32 = getelementptr @tupleStart, 0, %31
		%33 = load %32
		%34 = zext i8 %33 to i64
		%35 = getelementptr %29, 0, %34
		store 0, %35
		ret void

*BasicFunctionTypename: "setHout" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 202
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i64
		%7 = getelementptr @HoutCnt, 0, %6
		%8 = load %7
		%9 = zext i8 %8 to i32
		%10 = load %3
		%11 = zext i8 %10 to i64
		%12 = getelementptr @Hout, 0, %11
		%13 = load %4
		%14 = zext i8 %13 to i64
		%15 = getelementptr @tupleStart, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i64
		%18 = getelementptr %12, 0, %17
		%19 = load %18
		%20 = trunc i8 %19 to i1
		%21 = xor i1 %20, 1
		%22 = zext i1 %21 to i32
		%23 = add i32 %9, %22
		%24 = trunc i32 %23 to i8
		%25 = load %3
		%26 = zext i8 %25 to i64
		%27 = getelementptr @HoutCnt, 0, %26
		store %24, %27
		%28 = load %3
		%29 = zext i8 %28 to i64
		%30 = getelementptr @Hout, 0, %29
		%31 = load %4
		%32 = zext i8 %31 to i64
		%33 = getelementptr @tupleStart, 0, %32
		%34 = load %33
		%35 = zext i8 %34 to i64
		%36 = getelementptr %30, 0, %35
		store 1, %36
		ret void

*BasicFunctionTypename: "clearHout" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 224
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i64
		%7 = getelementptr @HoutCnt, 0, %6
		%8 = load %7
		%9 = zext i8 %8 to i32
		%10 = load %3
		%11 = zext i8 %10 to i64
		%12 = getelementptr @Hout, 0, %11
		%13 = load %4
		%14 = zext i8 %13 to i64
		%15 = getelementptr @tupleStart, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i64
		%18 = getelementptr %12, 0, %17
		%19 = load %18
		%20 = trunc i8 %19 to i1
		%21 = zext i1 %20 to i32
		%22 = sub i32 %9, %21
		%23 = trunc i32 %22 to i8
		%24 = load %3
		%25 = zext i8 %24 to i64
		%26 = getelementptr @HoutCnt, 0, %25
		store %23, %26
		%27 = load %3
		%28 = zext i8 %27 to i64
		%29 = getelementptr @Hout, 0, %28
		%30 = load %4
		%31 = zext i8 %30 to i64
		%32 = getelementptr @tupleStart, 0, %31
		%33 = load %32
		%34 = zext i8 %33 to i64
		%35 = getelementptr %29, 0, %34
		store 0, %35
		ret void

*BasicFunctionTypename: "attr" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext, 3 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 245
	0:
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%9 = zext i1 %3 to i8
		store %9, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		%10 = load %8
		%11 = trunc i8 %10 to i1
		br %11, %12, %19
	12:
		%13 = load %5
		%14 = zext i8 %13 to i64
		%15 = getelementptr @HoutCnt, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i32
		%18 = icmp eq %17 0
		br %19
	19:
		%20 = phi [1, %4], [%18, %12]
		%21 = zext i1 %20 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %21)
		%22 = load %8
		%23 = trunc i8 %22 to i1
		br %23, %24, %31
	24:
		%25 = load %5
		%26 = zext i8 %25 to i64
		%27 = getelementptr @HinCnt, 0, %26
		%28 = load %27
		%29 = zext i8 %28 to i32
		%30 = icmp eq %29 0
		br %31
	31:
		%32 = phi [1, %19], [%30, %24]
		%33 = zext i1 %32 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %33)
		%34 = load %7
		%35 = load %5
		%36 = zext i8 %35 to i64
		%37 = getelementptr @I, 0, %36
		%38 = load %6
		%39 = zext i8 %38 to i64
		%40 = getelementptr %37, 0, %39
		store %34, %40
		%41 = call zeroext i8 @now()
		ret void

*BasicFunctionTypename: "lstig" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext, 3 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 276
	0:
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%9 = zext i1 %3 to i8
		store %9, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		%10 = load %8
		%11 = trunc i8 %10 to i1
		br %11, %12, %19
	12:
		%13 = load %5
		%14 = zext i8 %13 to i64
		%15 = getelementptr @HoutCnt, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i32
		%18 = icmp eq %17 0
		br %19
	19:
		%20 = phi [1, %4], [%18, %12]
		%21 = zext i1 %20 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %21)
		%22 = load %8
		%23 = trunc i8 %22 to i1
		br %23, %24, %31
	24:
		%25 = load %5
		%26 = zext i8 %25 to i64
		%27 = getelementptr @HinCnt, 0, %26
		%28 = load %27
		%29 = zext i8 %28 to i32
		%30 = icmp eq %29 0
		br %31
	31:
		%32 = phi [1, %19], [%30, %24]
		%33 = zext i1 %32 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %33)
		%34 = load %7
		%35 = load %5
		%36 = zext i8 %35 to i64
		%37 = getelementptr @Lvalue, 0, %36
		%38 = load %6
		%39 = zext i8 %38 to i64
		%40 = getelementptr %37, 0, %39
		store %34, %40
		%41 = call zeroext i8 @now()
		%42 = load %5
		%43 = zext i8 %42 to i64
		%44 = getelementptr @Ltstamp, 0, %43
		%45 = load %6
		%46 = zext i8 %45 to i64
		%47 = getelementptr @tupleStart, 0, %46
		%48 = load %47
		%49 = zext i8 %48 to i64
		%50 = getelementptr %44, 0, %49
		store %41, %50
		%51 = load %5
		%52 = load %6
		Unnamed Call-Instruction = call BasicVoidType @setHout(i8 zeroext %51, i8 zeroext %52)
		ret void

*BasicFunctionTypename: "confirm" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 314
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = trunc i32 %7 to i8
		store %8, %1
		%9 = load %1
		%10 = zext i8 %9 to i32
		%11 = icmp slt %10 3
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = load %1
		%14 = zext i8 %13 to i64
		%15 = getelementptr @HinCnt, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i32
		%18 = icmp sgt %17 0
		%19 = zext i1 %18 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %19)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%20 = call i32 @__VERIFIER_nondet_int()
		%21 = trunc i32 %20 to i8
		store %21, %2
		%22 = load %2
		%23 = zext i8 %22 to i32
		%24 = icmp slt %23 2
		%25 = zext i1 %24 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %25)
		%26 = load %1
		%27 = zext i8 %26 to i64
		%28 = getelementptr @Hin, 0, %27
		%29 = load %2
		%30 = zext i8 %29 to i64
		%31 = getelementptr %28, 0, %30
		%32 = load %31
		%33 = trunc i8 %32 to i1
		%34 = zext i1 %33 to i32
		%35 = icmp eq %34 1
		%36 = zext i1 %35 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %36)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%37 = call i32 @__VERIFIER_nondet_int()
		%38 = trunc i32 %37 to i8
		store %38, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%39 = load %1
		%40 = load %2
		%41 = call zeroext i8 @timeof(i8 zeroext %39, i8 zeroext %40)
		store %41, %4
		store 0, %3
		br %42
	42:
		%43 = load %3
		%44 = zext i8 %43 to i32
		%45 = icmp slt %44 3
		br %45, %46, %132
	46:
		%47 = load %1
		%48 = zext i8 %47 to i32
		%49 = load %3
		%50 = zext i8 %49 to i32
		%51 = icmp ne %48 %50
		br %51, %52, %128
	52:
		%53 = load %3
		%54 = load %2
		%55 = call zeroext i8 @timeof(i8 zeroext %53, i8 zeroext %54)
		%56 = zext i8 %55 to i32
		%57 = load %4
		%58 = zext i8 %57 to i32
		%59 = icmp ne %56 %58
		br %59, %60, %128
	60:
		%61 = load %1
		%62 = load %3
		%63 = load %2
		%64 = call zeroext i1 @link(i8 zeroext %61, i8 zeroext %62, i8 zeroext %63)
		br %64, %65, %128
	65:
		%66 = load %3
		%67 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setHout(i8 zeroext %66, i8 zeroext %67)
		%68 = load %3
		%69 = load %2
		%70 = call zeroext i8 @timeof(i8 zeroext %68, i8 zeroext %69)
		%71 = zext i8 %70 to i32
		%72 = load %4
		%73 = zext i8 %72 to i32
		%74 = icmp slt %71 %73
		br %74, %75, %127
	75:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%76 = call i32 @__VERIFIER_nondet_int()
		%77 = trunc i32 %76 to i8
		store %77, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%78 = call i32 @__VERIFIER_nondet_int()
		%79 = trunc i32 %78 to i8
		store %79, %6
		%80 = load %3
		%81 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHin(i8 zeroext %80, i8 zeroext %81)
		store 0, %5
		br %82
	82:
		%83 = load %5
		%84 = zext i8 %83 to i32
		%85 = icmp slt %84 1
		br %85, %86, %119
	86:
		%87 = load %2
		%88 = zext i8 %87 to i32
		%89 = load %5
		%90 = zext i8 %89 to i32
		%91 = add i32 %88, %90
		%92 = trunc i32 %91 to i8
		store %92, %6
		%93 = load %6
		%94 = zext i8 %93 to i32
		%95 = load %2
		%96 = zext i8 %95 to i64
		%97 = getelementptr @tupleEnd, 0, %96
		%98 = load %97
		%99 = zext i8 %98 to i32
		%100 = icmp sle %94 %99
		br %100, %101, %115
	101:
		%102 = load %1
		%103 = zext i8 %102 to i64
		%104 = getelementptr @Lvalue, 0, %103
		%105 = load %6
		%106 = zext i8 %105 to i64
		%107 = getelementptr %104, 0, %106
		%108 = load %107
		%109 = load %3
		%110 = zext i8 %109 to i64
		%111 = getelementptr @Lvalue, 0, %110
		%112 = load %6
		%113 = zext i8 %112 to i64
		%114 = getelementptr %111, 0, %113
		store %108, %114
		br %115
	115:
		br %116
	116:
		%117 = load %5
		%118 = add i8 %117, 1
		store %118, %5
		br %82
	119:
		%120 = load %4
		%121 = load %3
		%122 = zext i8 %121 to i64
		%123 = getelementptr @Ltstamp, 0, %122
		%124 = load %2
		%125 = zext i8 %124 to i64
		%126 = getelementptr %123, 0, %125
		store %120, %126
		br %127
	127:
		br %128
	128:
		br %129
	129:
		%130 = load %3
		%131 = add i8 %130, 1
		store %131, %3
		br %42
	132:
		%133 = load %1
		%134 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHin(i8 zeroext %133, i8 zeroext %134)
		ret void

*BasicFunctionTypename: "propagate" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 437
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = trunc i32 %7 to i8
		store %8, %1
		%9 = load %1
		%10 = zext i8 %9 to i32
		%11 = icmp slt %10 3
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = load %1
		%14 = zext i8 %13 to i64
		%15 = getelementptr @HoutCnt, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i32
		%18 = icmp sgt %17 0
		%19 = zext i1 %18 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %19)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%20 = call i32 @__VERIFIER_nondet_int()
		%21 = trunc i32 %20 to i8
		store %21, %2
		%22 = load %2
		%23 = zext i8 %22 to i32
		%24 = icmp slt %23 2
		%25 = zext i1 %24 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %25)
		%26 = load %1
		%27 = zext i8 %26 to i64
		%28 = getelementptr @Hout, 0, %27
		%29 = load %2
		%30 = zext i8 %29 to i64
		%31 = getelementptr %28, 0, %30
		%32 = load %31
		%33 = trunc i8 %32 to i1
		%34 = zext i1 %33 to i32
		%35 = icmp eq %34 1
		%36 = zext i1 %35 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %36)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%37 = call i32 @__VERIFIER_nondet_int()
		%38 = trunc i32 %37 to i8
		store %38, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%39 = load %1
		%40 = load %2
		%41 = call zeroext i8 @timeof(i8 zeroext %39, i8 zeroext %40)
		store %41, %4
		store 0, %3
		br %42
	42:
		%43 = load %3
		%44 = zext i8 %43 to i32
		%45 = icmp slt %44 3
		br %45, %46, %123
	46:
		%47 = load %1
		%48 = zext i8 %47 to i32
		%49 = load %3
		%50 = zext i8 %49 to i32
		%51 = icmp ne %48 %50
		br %51, %52, %119
	52:
		%53 = load %3
		%54 = load %2
		%55 = call zeroext i8 @timeof(i8 zeroext %53, i8 zeroext %54)
		%56 = zext i8 %55 to i32
		%57 = load %4
		%58 = zext i8 %57 to i32
		%59 = icmp slt %56 %58
		br %59, %60, %119
	60:
		%61 = load %1
		%62 = load %3
		%63 = load %2
		%64 = call zeroext i1 @link(i8 zeroext %61, i8 zeroext %62, i8 zeroext %63)
		br %64, %65, %119
	65:
		%66 = load %3
		%67 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setHout(i8 zeroext %66, i8 zeroext %67)
		%68 = load %3
		%69 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHin(i8 zeroext %68, i8 zeroext %69)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%70 = call i32 @__VERIFIER_nondet_int()
		%71 = trunc i32 %70 to i8
		store %71, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%72 = call i32 @__VERIFIER_nondet_int()
		%73 = trunc i32 %72 to i8
		store %73, %6
		store 0, %5
		br %74
	74:
		%75 = load %5
		%76 = zext i8 %75 to i32
		%77 = icmp slt %76 1
		br %77, %78, %111
	78:
		%79 = load %2
		%80 = zext i8 %79 to i32
		%81 = load %5
		%82 = zext i8 %81 to i32
		%83 = add i32 %80, %82
		%84 = trunc i32 %83 to i8
		store %84, %6
		%85 = load %6
		%86 = zext i8 %85 to i32
		%87 = load %2
		%88 = zext i8 %87 to i64
		%89 = getelementptr @tupleEnd, 0, %88
		%90 = load %89
		%91 = zext i8 %90 to i32
		%92 = icmp sle %86 %91
		br %92, %93, %107
	93:
		%94 = load %1
		%95 = zext i8 %94 to i64
		%96 = getelementptr @Lvalue, 0, %95
		%97 = load %6
		%98 = zext i8 %97 to i64
		%99 = getelementptr %96, 0, %98
		%100 = load %99
		%101 = load %3
		%102 = zext i8 %101 to i64
		%103 = getelementptr @Lvalue, 0, %102
		%104 = load %6
		%105 = zext i8 %104 to i64
		%106 = getelementptr %103, 0, %105
		store %100, %106
		br %107
	107:
		br %108
	108:
		%109 = load %5
		%110 = add i8 %109, 1
		store %110, %5
		br %74
	111:
		%112 = load %4
		%113 = load %3
		%114 = zext i8 %113 to i64
		%115 = getelementptr @Ltstamp, 0, %114
		%116 = load %2
		%117 = zext i8 %116 to i64
		%118 = getelementptr %115, 0, %117
		store %112, %118
		br %119
	119:
		br %120
	120:
		%121 = load %3
		%122 = add i8 %121, 1
		store %122, %3
		br %42
	123:
		%124 = load %1
		%125 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHout(i8 zeroext %124, i8 zeroext %125)
		ret void

*BasicFunctionTypename: "init" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 549
	0:
		%1 = alloca [3 x [1 x i8]], align 1
		%2 = alloca [3 x [1 x i8]], align 1
		%3 = alloca [3 x [2 x i8]], align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [1 x i8]] %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [1 x i8]] %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [2 x i8]] %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%6 = call i32 @__VERIFIER_nondet_int()
		%7 = trunc i32 %6 to i8
		store %7, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%8 = call i32 @__VERIFIER_nondet_int()
		%9 = trunc i32 %8 to i8
		store %9, %5
		store 0, %4
		br %10
	10:
		%11 = load %4
		%12 = zext i8 %11 to i32
		%13 = icmp slt %12 3
		br %13, %14, %51
	14:
		store 0, %5
		br %15
	15:
		%16 = load %5
		%17 = zext i8 %16 to i32
		%18 = icmp slt %17 2
		br %18, %19, %41
	19:
		%20 = load %4
		%21 = zext i8 %20 to i64
		%22 = getelementptr @Ltstamp, 0, %21
		%23 = load %5
		%24 = zext i8 %23 to i64
		%25 = getelementptr %22, 0, %24
		store 0, %25
		%26 = load %4
		%27 = zext i8 %26 to i64
		%28 = getelementptr @Hin, 0, %27
		%29 = load %5
		%30 = zext i8 %29 to i64
		%31 = getelementptr %28, 0, %30
		store 0, %31
		%32 = load %4
		%33 = zext i8 %32 to i64
		%34 = getelementptr @Hout, 0, %33
		%35 = load %5
		%36 = zext i8 %35 to i64
		%37 = getelementptr %34, 0, %36
		store 0, %37
		br %38
	38:
		%39 = load %5
		%40 = add i8 %39, 1
		store %40, %5
		br %15
	41:
		%42 = load %4
		%43 = zext i8 %42 to i64
		%44 = getelementptr @HinCnt, 0, %43
		store 0, %44
		%45 = load %4
		%46 = zext i8 %45 to i64
		%47 = getelementptr @HoutCnt, 0, %46
		store 0, %47
		br %48
	48:
		%49 = load %4
		%50 = add i8 %49, 1
		store %50, %4
		br %10
	51:
		%52 = getelementptr %2, 0, 0
		%53 = getelementptr %52, 0, 0
		store 6, %53
		%54 = getelementptr %2, 0, 1
		%55 = getelementptr %54, 0, 0
		store 6, %55
		%56 = getelementptr %2, 0, 2
		%57 = getelementptr %56, 0, 0
		store 6, %57
		%58 = getelementptr %3, 0, 0
		%59 = getelementptr %58, 0, 0
		%60 = load %59
		%61 = sext i8 %60 to i32
		%62 = icmp eq %61 -128
		%63 = zext i1 %62 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %63)
		%64 = getelementptr %3, 0, 1
		%65 = getelementptr %64, 0, 0
		%66 = load %65
		%67 = sext i8 %66 to i32
		%68 = icmp eq %67 -128
		%69 = zext i1 %68 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %69)
		%70 = getelementptr %3, 0, 2
		%71 = getelementptr %70, 0, 0
		%72 = load %71
		%73 = sext i8 %72 to i32
		%74 = icmp eq %73 -128
		%75 = zext i1 %74 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %75)
		%76 = getelementptr %3, 0, 0
		%77 = getelementptr %76, 0, 1
		%78 = load %77
		%79 = sext i8 %78 to i32
		%80 = icmp eq %79 -128
		%81 = zext i1 %80 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %81)
		%82 = getelementptr %3, 0, 1
		%83 = getelementptr %82, 0, 1
		%84 = load %83
		%85 = sext i8 %84 to i32
		%86 = icmp eq %85 -128
		%87 = zext i1 %86 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %87)
		%88 = getelementptr %3, 0, 2
		%89 = getelementptr %88, 0, 1
		%90 = load %89
		%91 = sext i8 %90 to i32
		%92 = icmp eq %91 -128
		%93 = zext i1 %92 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %93)
		%94 = getelementptr %1, 0, 0
		%95 = getelementptr %94, 0, 0
		%96 = load %95
		%97 = sext i8 %96 to i32
		%98 = icmp sge %97 1
		br %98, %99, %105
	99:
		%100 = getelementptr %1, 0, 0
		%101 = getelementptr %100, 0, 0
		%102 = load %101
		%103 = sext i8 %102 to i32
		%104 = icmp slt %103 10
		br %105
	105:
		%106 = phi [0, %51], [%104, %99]
		%107 = zext i1 %106 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %107)
		%108 = getelementptr %1, 0, 1
		%109 = getelementptr %108, 0, 0
		%110 = load %109
		%111 = sext i8 %110 to i32
		%112 = icmp sge %111 1
		br %112, %113, %119
	113:
		%114 = getelementptr %1, 0, 1
		%115 = getelementptr %114, 0, 0
		%116 = load %115
		%117 = sext i8 %116 to i32
		%118 = icmp slt %117 10
		br %119
	119:
		%120 = phi [0, %105], [%118, %113]
		%121 = zext i1 %120 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %121)
		%122 = getelementptr %1, 0, 2
		%123 = getelementptr %122, 0, 0
		%124 = load %123
		%125 = sext i8 %124 to i32
		%126 = icmp sge %125 1
		br %126, %127, %133
	127:
		%128 = getelementptr %1, 0, 2
		%129 = getelementptr %128, 0, 0
		%130 = load %129
		%131 = sext i8 %130 to i32
		%132 = icmp slt %131 10
		br %133
	133:
		%134 = phi [0, %119], [%132, %127]
		%135 = zext i1 %134 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %135)
		%136 = call zeroext i8 @now()
		%137 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5593a2ec
		%138 = zext i8 %137 to i64
		%139 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@9cc2aad, 0, %138
		store %136, %139
		%140 = call zeroext i8 @now()
		%141 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3d70fe4d
		%142 = zext i8 %141 to i64
		%143 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7c725576, 0, %142
		store %140, %143
		%144 = call zeroext i8 @now()
		%145 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@343e0cd6
		%146 = zext i8 %145 to i64
		%147 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5ccfd1be, 0, %146
		store %144, %147
		%148 = call zeroext i8 @now()
		%149 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@66f7cefc
		%150 = zext i8 %149 to i64
		%151 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@840eeb1, 0, %150
		store %148, %151
		%152 = call zeroext i8 @now()
		%153 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4cdc1bd3
		%154 = zext i8 %153 to i64
		%155 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6ebc71d7, 0, %154
		store %152, %155
		%156 = call zeroext i8 @now()
		%157 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3664d2d2
		%158 = zext i8 %157 to i64
		%159 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@39de87c9, 0, %158
		store %156, %159
		%160 = call zeroext i8 @now()
		store 0, %4
		br %161
	161:
		%162 = load %4
		%163 = zext i8 %162 to i32
		%164 = icmp slt %163 3
		br %164, %165, %235
	165:
		store 0, %5
		br %166
	166:
		%167 = load %5
		%168 = zext i8 %167 to i32
		%169 = icmp slt %168 1
		br %169, %170, %187
	170:
		%171 = load %4
		%172 = zext i8 %171 to i64
		%173 = getelementptr %2, 0, %172
		%174 = load %5
		%175 = zext i8 %174 to i64
		%176 = getelementptr %173, 0, %175
		%177 = load %176
		%178 = load %4
		%179 = zext i8 %178 to i64
		%180 = getelementptr @pc, 0, %179
		%181 = load %5
		%182 = zext i8 %181 to i64
		%183 = getelementptr %180, 0, %182
		store %177, %183
		br %184
	184:
		%185 = load %5
		%186 = add i8 %185, 1
		store %186, %5
		br %166
	187:
		store 0, %5
		br %188
	188:
		%189 = load %5
		%190 = zext i8 %189 to i32
		%191 = icmp slt %190 1
		br %191, %192, %209
	192:
		%193 = load %4
		%194 = zext i8 %193 to i64
		%195 = getelementptr %1, 0, %194
		%196 = load %5
		%197 = zext i8 %196 to i64
		%198 = getelementptr %195, 0, %197
		%199 = load %198
		%200 = load %4
		%201 = zext i8 %200 to i64
		%202 = getelementptr @I, 0, %201
		%203 = load %5
		%204 = zext i8 %203 to i64
		%205 = getelementptr %202, 0, %204
		store %199, %205
		br %206
	206:
		%207 = load %5
		%208 = add i8 %207, 1
		store %208, %5
		br %188
	209:
		store 0, %5
		br %210
	210:
		%211 = load %5
		%212 = zext i8 %211 to i32
		%213 = icmp slt %212 2
		br %213, %214, %231
	214:
		%215 = load %4
		%216 = zext i8 %215 to i64
		%217 = getelementptr %3, 0, %216
		%218 = load %5
		%219 = zext i8 %218 to i64
		%220 = getelementptr %217, 0, %219
		%221 = load %220
		%222 = load %4
		%223 = zext i8 %222 to i64
		%224 = getelementptr @Lvalue, 0, %223
		%225 = load %5
		%226 = zext i8 %225 to i64
		%227 = getelementptr %224, 0, %226
		store %221, %227
		br %228
	228:
		%229 = load %5
		%230 = add i8 %229, 1
		store %230, %5
		br %210
	231:
		br %232
	232:
		%233 = load %4
		%234 = add i8 %233, 1
		store %234, %4
		br %161
	235:
		ret void

*BasicFunctionTypename: "_0_2" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 748
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = load %2
		%5 = sext i32 %4 to i64
		%6 = getelementptr @Lvalue, 0, %5
		%7 = getelementptr %6, 0, 0
		%8 = load %7
		%9 = sext i8 %8 to i32
		%10 = load %2
		%11 = icmp ne %9 %10
		br %11, %12, %20
	12:
		%13 = load %2
		%14 = sext i32 %13 to i64
		%15 = getelementptr @Lvalue, 0, %14
		%16 = getelementptr %15, 0, 0
		%17 = load %16
		%18 = sext i8 %17 to i32
		%19 = icmp ne %18 -128
		br %20
	20:
		%21 = phi [0, %1], [%19, %12]
		%22 = zext i1 %21 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %22)
		%23 = load %2
		%24 = sext i32 %23 to i64
		%25 = getelementptr @I, 0, %24
		%26 = getelementptr %25, 0, 0
		%27 = load %26
		%28 = sext i8 %27 to i32
		%29 = icmp sgt %28 0
		%30 = zext i1 %29 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %30)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%31 = load %2
		%32 = sext i32 %31 to i64
		%33 = getelementptr @I, 0, %32
		%34 = getelementptr %33, 0, 0
		%35 = load %34
		%36 = sext i8 %35 to i32
		%37 = sub i32 %36, 1
		%38 = trunc i32 %37 to i8
		store %38, %3
		%39 = load %2
		%40 = trunc i32 %39 to i8
		%41 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %40, i8 zeroext 0, i8 signext %41, i1 zeroext 1)
		%42 = load %2
		%43 = trunc i32 %42 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %43, i8 zeroext 0)
		%44 = load %2
		%45 = sext i32 %44 to i64
		%46 = getelementptr @pc, 0, %45
		%47 = getelementptr %46, 0, 0
		store 6, %47
		ret void

*BasicFunctionTypename: "_0_3" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 779
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = load %2
		%5 = sext i32 %4 to i64
		%6 = getelementptr @Lvalue, 0, %5
		%7 = getelementptr %6, 0, 0
		%8 = load %7
		%9 = sext i8 %8 to i32
		%10 = load %2
		%11 = icmp ne %9 %10
		br %11, %12, %20
	12:
		%13 = load %2
		%14 = sext i32 %13 to i64
		%15 = getelementptr @Lvalue, 0, %14
		%16 = getelementptr %15, 0, 0
		%17 = load %16
		%18 = sext i8 %17 to i32
		%19 = icmp ne %18 -128
		br %20
	20:
		%21 = phi [0, %1], [%19, %12]
		%22 = zext i1 %21 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %22)
		%23 = load %2
		%24 = sext i32 %23 to i64
		%25 = getelementptr @I, 0, %24
		%26 = getelementptr %25, 0, 0
		%27 = load %26
		%28 = sext i8 %27 to i32
		%29 = icmp eq %28 0
		%30 = zext i1 %29 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %30)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%31 = load %2
		%32 = sext i32 %31 to i64
		%33 = getelementptr @I, 0, %32
		%34 = getelementptr %33, 0, 0
		%35 = load %34
		%36 = sext i8 %35 to i32
		%37 = add i32 %36, 1
		%38 = trunc i32 %37 to i8
		store %38, %3
		%39 = load %2
		%40 = trunc i32 %39 to i8
		%41 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %40, i8 zeroext 0, i8 signext %41, i1 zeroext 1)
		%42 = load %2
		%43 = trunc i32 %42 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %43, i8 zeroext 0)
		%44 = load %2
		%45 = sext i32 %44 to i64
		%46 = getelementptr @pc, 0, %45
		%47 = getelementptr %46, 0, 0
		store 6, %47
		ret void

*BasicFunctionTypename: "_0_4" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 810
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = load %2
		%5 = sext i32 %4 to i64
		%6 = getelementptr @Lvalue, 0, %5
		%7 = getelementptr %6, 0, 1
		%8 = load %7
		%9 = sext i8 %8 to i32
		%10 = load %2
		%11 = icmp ne %9 %10
		br %11, %12, %20
	12:
		%13 = load %2
		%14 = sext i32 %13 to i64
		%15 = getelementptr @Lvalue, 0, %14
		%16 = getelementptr %15, 0, 1
		%17 = load %16
		%18 = sext i8 %17 to i32
		%19 = icmp ne %18 -128
		br %20
	20:
		%21 = phi [0, %1], [%19, %12]
		%22 = zext i1 %21 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %22)
		%23 = load %2
		%24 = sext i32 %23 to i64
		%25 = getelementptr @I, 0, %24
		%26 = getelementptr %25, 0, 0
		%27 = load %26
		%28 = sext i8 %27 to i32
		%29 = icmp slt %28 9
		%30 = zext i1 %29 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %30)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%31 = load %2
		%32 = sext i32 %31 to i64
		%33 = getelementptr @I, 0, %32
		%34 = getelementptr %33, 0, 0
		%35 = load %34
		%36 = sext i8 %35 to i32
		%37 = add i32 %36, 1
		%38 = trunc i32 %37 to i8
		store %38, %3
		%39 = load %2
		%40 = trunc i32 %39 to i8
		%41 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %40, i8 zeroext 0, i8 signext %41, i1 zeroext 1)
		%42 = load %2
		%43 = trunc i32 %42 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %43, i8 zeroext 1)
		%44 = load %2
		%45 = sext i32 %44 to i64
		%46 = getelementptr @pc, 0, %45
		%47 = getelementptr %46, 0, 0
		store 6, %47
		ret void

*BasicFunctionTypename: "_0_5" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 841
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = load %2
		%5 = sext i32 %4 to i64
		%6 = getelementptr @Lvalue, 0, %5
		%7 = getelementptr %6, 0, 1
		%8 = load %7
		%9 = sext i8 %8 to i32
		%10 = load %2
		%11 = icmp ne %9 %10
		br %11, %12, %20
	12:
		%13 = load %2
		%14 = sext i32 %13 to i64
		%15 = getelementptr @Lvalue, 0, %14
		%16 = getelementptr %15, 0, 1
		%17 = load %16
		%18 = sext i8 %17 to i32
		%19 = icmp ne %18 -128
		br %20
	20:
		%21 = phi [0, %1], [%19, %12]
		%22 = zext i1 %21 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %22)
		%23 = load %2
		%24 = sext i32 %23 to i64
		%25 = getelementptr @I, 0, %24
		%26 = getelementptr %25, 0, 0
		%27 = load %26
		%28 = sext i8 %27 to i32
		%29 = icmp eq %28 9
		%30 = zext i1 %29 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %30)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%31 = load %2
		%32 = sext i32 %31 to i64
		%33 = getelementptr @I, 0, %32
		%34 = getelementptr %33, 0, 0
		%35 = load %34
		%36 = sext i8 %35 to i32
		%37 = sub i32 %36, 1
		%38 = trunc i32 %37 to i8
		store %38, %3
		%39 = load %2
		%40 = trunc i32 %39 to i8
		%41 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %40, i8 zeroext 0, i8 signext %41, i1 zeroext 1)
		%42 = load %2
		%43 = trunc i32 %42 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %43, i8 zeroext 1)
		%44 = load %2
		%45 = sext i32 %44 to i64
		%46 = getelementptr @pc, 0, %45
		%47 = getelementptr %46, 0, 0
		store 6, %47
		ret void

*BasicFunctionTypename: "_0_6" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 872
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%6 = load %2
		%7 = trunc i32 %6 to i8
		store %7, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%8 = load %2
		%9 = trunc i32 %8 to i8
		store %9, %4
		%10 = load %2
		%11 = trunc i32 %10 to i8
		%12 = load %3
		Unnamed Call-Instruction = call BasicVoidType @lstig(i8 zeroext %11, i8 zeroext 0, i8 signext %12, i1 zeroext 1)
		%13 = load %2
		%14 = trunc i32 %13 to i8
		%15 = load %4
		Unnamed Call-Instruction = call BasicVoidType @lstig(i8 zeroext %14, i8 zeroext 1, i8 signext %15, i1 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%16 = call i32 @__VERIFIER_nondet_int()
		%17 = trunc i32 %16 to i8
		store %17, %5
		%18 = load %5
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 2
		br %20, %33, %21
	21:
		%22 = load %5
		%23 = zext i8 %22 to i32
		%24 = icmp eq %23 3
		br %24, %33, %25
	25:
		%26 = load %5
		%27 = zext i8 %26 to i32
		%28 = icmp eq %27 4
		br %28, %33, %29
	29:
		%30 = load %5
		%31 = zext i8 %30 to i32
		%32 = icmp eq %31 5
		br %33
	33:
		%34 = phi [1, %25], [1, %21], [1, %1], [%32, %29]
		%35 = zext i1 %34 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %35)
		%36 = load %5
		%37 = load %2
		%38 = sext i32 %37 to i64
		%39 = getelementptr @pc, 0, %38
		%40 = getelementptr %39, 0, 0
		store %36, %40
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 907
	0:
		%1 = alloca i32, align 4
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @init()
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		store 0, %2
		br %4
	4:
		%5 = call i32 @__VERIFIER_nondet_int()
		%6 = icmp ne %5 0
		br %6, %7, %43
	7:
		%8 = load %2
		%9 = zext i8 %8 to i32
		%10 = icmp slt %9 3
		%11 = zext i1 %10 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %11)
		%12 = load %2
		%13 = zext i8 %12 to i64
		%14 = getelementptr @pc, 0, %13
		%15 = getelementptr %14, 0, 0
		%16 = load %15
		%17 = zext i8 %16 to i32
		switch %17, %33 [2, %18 3, %21 4, %24 5, %27 6, %30]
	18:
		%19 = load %2
		%20 = zext i8 %19 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_2(i32 %20)
		br %34
	21:
		%22 = load %2
		%23 = zext i8 %22 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_3(i32 %23)
		br %34
	24:
		%25 = load %2
		%26 = zext i8 %25 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_4(i32 %26)
		br %34
	27:
		%28 = load %2
		%29 = zext i8 %28 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_5(i32 %29)
		br %34
	30:
		%31 = load %2
		%32 = zext i8 %31 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_6(i32 %32)
		br %34
	33:
		br %34
	34:
		%35 = load %2
		%36 = zext i8 %35 to i32
		%37 = icmp eq %36 2
		br %37, %38, %39
	38:
		store 0, %2
		br %42
	39:
		%40 = load %2
		%41 = add i8 %40, 1
		store %41, %2
		br %42
	42:
		br %52
	43:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%44 = call i32 @__VERIFIER_nondet_int()
		%45 = icmp ne %44 0
		%46 = zext i1 %45 to i8
		store %46, %3
		%47 = load %3
		%48 = trunc i8 %47 to i1
		br %48, %49, %50
	49:
		Unnamed Call-Instruction = call BasicVoidType @propagate()
		br %51
	50:
		Unnamed Call-Instruction = call BasicVoidType @confirm()
		br %51
	51:
		br %52
	52:
		%53 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@157011a2
		%54 = sext i8 %53 to i32
		%55 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@18cfe812
		%56 = sext i8 %55 to i32
		%57 = sub i32 %54, %56
		%58 = trunc i32 %57 to i8
		%59 = call signext i8 @__abs(i8 signext %58)
		%60 = sext i8 %59 to i32
		%61 = icmp sge %60 2
		br %61, %62, %113
	62:
		%63 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@82d4b9b
		%64 = sext i8 %63 to i32
		%65 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@45807598
		%66 = sext i8 %65 to i32
		%67 = sub i32 %64, %66
		%68 = trunc i32 %67 to i8
		%69 = call signext i8 @__abs(i8 signext %68)
		%70 = sext i8 %69 to i32
		%71 = icmp sge %70 2
		br %71, %72, %113
	72:
		%73 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@50e8918b
		%74 = sext i8 %73 to i32
		%75 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@37806cfc
		%76 = sext i8 %75 to i32
		%77 = sub i32 %74, %76
		%78 = trunc i32 %77 to i8
		%79 = call signext i8 @__abs(i8 signext %78)
		%80 = sext i8 %79 to i32
		%81 = icmp sge %80 2
		br %81, %82, %113
	82:
		%83 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@55139804
		%84 = sext i8 %83 to i32
		%85 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@13f90b8b
		%86 = sext i8 %85 to i32
		%87 = sub i32 %84, %86
		%88 = trunc i32 %87 to i8
		%89 = call signext i8 @__abs(i8 signext %88)
		%90 = sext i8 %89 to i32
		%91 = icmp sge %90 2
		br %91, %92, %113
	92:
		%93 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@789b4b6
		%94 = sext i8 %93 to i32
		%95 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@33dacf37
		%96 = sext i8 %95 to i32
		%97 = sub i32 %94, %96
		%98 = trunc i32 %97 to i8
		%99 = call signext i8 @__abs(i8 signext %98)
		%100 = sext i8 %99 to i32
		%101 = icmp sge %100 2
		br %101, %102, %113
	102:
		%103 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7ac0a2f0
		%104 = sext i8 %103 to i32
		%105 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@213e4b70
		%106 = sext i8 %105 to i32
		%107 = sub i32 %104, %106
		%108 = trunc i32 %107 to i8
		%109 = call signext i8 @__abs(i8 signext %108)
		%110 = sext i8 %109 to i32
		%111 = icmp sge %110 2
		br %111, %112, %113
	112:
		ret 0
	113:
		br %4


Analyze Termination of all function calls matching the pattern:
main()Instruction count:1420
deleted entry node of __VERIFIER_assume
deleted entry node of __VERIFIER_assume
deleted entry node of __VERIFIER_assume
Aborted 1756892324Exec. 4, LLVMToSEGraph with some error. Reason: java.lang.AssertionError: Constants should not occur as base for GEPs - at least this is not documented (node 6881)..
            aprove.InputModules.Programs.llvm.internalStructures.instructions.LLVMGetElementPtrInstruction.evaluate(LLVMGetElementPtrInstruction.java:170)
            aprove.InputModules.Programs.llvm.states.LLVMAbstractState.evaluate(LLVMAbstractState.java:531)
            aprove.InputModules.Programs.llvm.segraph.graphConstructionSteps.LLVMStandardStep.perform(LLVMStandardStep.java:98)
            aprove.InputModules.Programs.llvm.segraph.LLVMSEGraph.executeStepAndPutSucessorStepsInQueue(LLVMSEGraph.java:1087)
            aprove.InputModules.Programs.llvm.segraph.LLVMSEGraph.buildFullGraph(LLVMSEGraph.java:243)
