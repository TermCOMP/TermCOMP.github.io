YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/KRXD8.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 226 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/KRXD8.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/KRXD8.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sgt %7 0
		br %8, %9, %13
	9:
		%10 = load %2
		%11 = load %3
		%12 = icmp slt %10 %11
		br %13
	13:
		%14 = phi [0, %6], [%12, %9]
		br %14, %15, %20
	15:
		%16 = load %2
		%17 = mul i32 2, %16
		store %17, %2
		%18 = load %3
		%19 = add i32 %18, 1
		store %19, %3
		br %6
	20:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_167(v126, v127, v128, v129, v130, v134, 1, v131, v133, v135, v136, v137, v138, 0, 3, 2, 4) -> f_168(v126, v127, v128, v129, v130, v134, 1, v131, v133, v135, v136, v137, v138, 0, 3, 2, 4) :|: 0 = 0
f_168(v126, v127, v128, v129, v130, v134, 1, v131, v133, v135, v136, v137, v138, 0, 3, 2, 4) -> f_169(v126, v127, v128, v129, v130, v134, 1, v131, v133, v135, v136, v137, v138, 0, 3, 2, 4) :|: TRUE
f_169(v126, v127, v128, v129, v130, v134, 1, v131, v133, v135, v136, v137, v138, 0, 3, 2, 4) -> f_170(v126, v127, v128, v129, v130, v134, 1, v133, v131, v135, v136, v137, v138, 0, 3, 2, 4) :|: 0 = 0
f_170(v126, v127, v128, v129, v130, v134, 1, v133, v131, v135, v136, v137, v138, 0, 3, 2, 4) -> f_171(v126, v127, v128, v129, v130, v134, 1, v135, v131, v133, v136, v137, v138, 0, 3, 2, 4) :|: 0 = 0
f_171(v126, v127, v128, v129, v130, v134, 1, v135, v131, v133, v136, v137, v138, 0, 3, 2, 4) -> f_172(v126, v127, v128, v129, v130, v134, 1, v135, v131, v133, v136, v137, v138, 0, 3, 2, 4) :|: v134 < v135
f_172(v126, v127, v128, v129, v130, v134, 1, v135, v131, v133, v136, v137, v138, 0, 3, 2, 4) -> f_174(v126, v127, v128, v129, v130, v134, 1, v135, v131, v133, v136, v137, v138, 0, 3, 2, 4) :|: 0 = 0
f_174(v126, v127, v128, v129, v130, v134, 1, v135, v131, v133, v136, v137, v138, 0, 3, 2, 4) -> f_176(v126, v127, v128, v129, v130, v134, 1, v135, v131, v133, v136, v137, v138, 0, 3, 2, 4) :|: 0 = 0
f_176(v126, v127, v128, v129, v130, v134, 1, v135, v131, v133, v136, v137, v138, 0, 3, 2, 4) -> f_178(v126, v127, v128, v129, v130, v134, 1, v135, v131, v133, v136, v137, v138, 0, 3, 2, 4) :|: TRUE
f_178(v126, v127, v128, v129, v130, v134, 1, v135, v131, v133, v136, v137, v138, 0, 3, 2, 4) -> f_180(v126, v127, v128, v129, v130, v134, 1, v135, v133, v136, v137, v138, 0, 3, 2, 4) :|: 0 = 0
f_180(v126, v127, v128, v129, v130, v134, 1, v135, v133, v136, v137, v138, 0, 3, 2, 4) -> f_181(v126, v127, v128, v129, v130, v134, 1, v135, v178, v133, v136, v137, v138, 0, 3, 2, 4) :|: v178 = 2 * v134 && 4 <= v178
f_181(v126, v127, v128, v129, v130, v134, 1, v135, v178, v133, v136, v137, v138, 0, 3, 2, 4) -> f_182(v126, v127, v128, v129, v130, v134, 1, v135, v178, v133, v136, v137, v138, 0, 3, 2, 4) :|: TRUE
f_182(v126, v127, v128, v129, v130, v134, 1, v135, v178, v133, v136, v137, v138, 0, 3, 2, 4) -> f_183(v126, v127, v128, v129, v130, v134, 1, v135, v178, v136, v137, v138, 0, 3, 2, 4) :|: 0 = 0
f_183(v126, v127, v128, v129, v130, v134, 1, v135, v178, v136, v137, v138, 0, 3, 2, 4) -> f_184(v126, v127, v128, v129, v130, v134, 1, v135, v178, v180, v136, v137, v138, 0, 3, 2, 4) :|: v180 = 1 + v135 && 4 <= v180
f_184(v126, v127, v128, v129, v130, v134, 1, v135, v178, v180, v136, v137, v138, 0, 3, 2, 4) -> f_185(v126, v127, v128, v129, v130, v134, 1, v135, v178, v180, v136, v137, v138, 0, 3, 2, 4) :|: TRUE
f_185(v126, v127, v128, v129, v130, v134, 1, v135, v178, v180, v136, v137, v138, 0, 3, 2, 4) -> f_186(v126, v127, v128, v129, v130, v134, 1, v135, v178, v180, v136, v137, v138, 0, 3, 2, 4) :|: TRUE
f_186(v126, v127, v128, v129, v130, v134, 1, v135, v178, v180, v136, v137, v138, 0, 3, 2, 4) -> f_166(v126, v127, v128, v129, v130, v134, 1, v135, v178, v180, v136, v137, v138, 0, 3, 2, 4) :|: TRUE
f_166(v126, v127, v128, v129, v130, v131, 1, v133, v134, v135, v136, v137, v138, 0, 3, 2, 4) -> f_167(v126, v127, v128, v129, v130, v134, 1, v131, v133, v135, v136, v137, v138, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_167(v126:0, v127:0, v128:0, v129:0, v130:0, v134:0, 1, v131:0, v133:0, v135:0, v136:0, v137:0, v138:0, 0, 3, 2, 4) -> f_167(v126:0, v127:0, v128:0, v129:0, v130:0, 2 * v134:0, 1, v134:0, v135:0, 1 + v135:0, v136:0, v137:0, v138:0, 0, 3, 2, 4) :|: v135:0 > v134:0 && v135:0 > 2 && 3 < 2 * v134:0
Filtered unneeded arguments:
   f_167(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_167(x6, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_167(v134:0, v135:0) -> f_167(2 * v134:0, 1 + v135:0) :|: v135:0 > 2 && 3 < 2 * v134:0 && v135:0 > v134:0

----------------------------------------

(8)
Obligation:
Rules:
f_167(v134:0, v135:0) -> f_167(2 * v134:0, 1 + v135:0) :|: v135:0 > 2 && 3 < 2 * v134:0 && v135:0 > v134:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_167(v134:0:0, v135:0:0) -> f_167(2 * v134:0:0, 1 + v135:0:0) :|: v135:0:0 > 2 && 3 < 2 * v134:0:0 && v135:0:0 > v134:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_167(x, x1)] = -1 - x + x1

The following rules are decreasing:
f_167(v134:0:0, v135:0:0) -> f_167(2 * v134:0:0, 1 + v135:0:0) :|: v135:0:0 > 2 && 3 < 2 * v134:0:0 && v135:0:0 > v134:0:0
The following rules are bounded:
f_167(v134:0:0, v135:0:0) -> f_167(2 * v134:0:0, 1 + v135:0:0) :|: v135:0:0 > 2 && 3 < 2 * v134:0:0 && v135:0:0 > v134:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
