YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/rqqWe.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 406 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 11 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 12 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/rqqWe.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/rqqWe.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		store 0, %2
		br %7
	7:
		%8 = load %3
		%9 = load %4
		%10 = icmp sgt %8 %9
		br %10, %11, %16
	11:
		%12 = load %3
		%13 = sub i32 %12, 1
		store %13, %3
		%14 = load %2
		%15 = add i32 %14, 1
		store %15, %2
		br %7
	16:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_192(v97, v98, v99, v100, v101, v102, v105, 1, v103, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_193(v97, v98, v99, v100, v101, v102, v105, 1, v103, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: 0 = 0
f_193(v97, v98, v99, v100, v101, v102, v105, 1, v103, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_194(v97, v98, v99, v100, v101, v102, v105, 1, v103, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: v102 < v105
f_194(v97, v98, v99, v100, v101, v102, v105, 1, v103, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_196(v97, v98, v99, v100, v101, v102, v105, 1, v103, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: 0 = 0
f_196(v97, v98, v99, v100, v101, v102, v105, 1, v103, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_198(v97, v98, v99, v100, v101, v102, v105, 1, v103, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: TRUE
f_198(v97, v98, v99, v100, v101, v102, v105, 1, v103, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_200(v97, v98, v99, v100, v101, v102, v105, 1, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: 0 = 0
f_200(v97, v98, v99, v100, v101, v102, v105, 1, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_201(v97, v98, v99, v100, v101, v102, v105, 1, v113, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: 1 + v113 = v105
f_201(v97, v98, v99, v100, v101, v102, v105, 1, v113, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_202(v97, v98, v99, v100, v101, v102, v105, 1, v113, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: TRUE
f_202(v97, v98, v99, v100, v101, v102, v105, 1, v113, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_203(v97, v98, v99, v100, v101, v102, v105, 1, v113, v107, v108, v109, v110, v111, 0, 3, 4) :|: 0 = 0
f_203(v97, v98, v99, v100, v101, v102, v105, 1, v113, v107, v108, v109, v110, v111, 0, 3, 4) -> f_204(v97, v98, v99, v100, v101, v102, v105, 1, v113, v107, v115, v108, v109, v110, v111, 0, 3, 4, 2) :|: v115 = 1 + v107 && 2 <= v115
f_204(v97, v98, v99, v100, v101, v102, v105, 1, v113, v107, v115, v108, v109, v110, v111, 0, 3, 4, 2) -> f_205(v97, v98, v99, v100, v101, v102, v105, 1, v113, v107, v115, v108, v109, v110, v111, 0, 3, 4, 2) :|: TRUE
f_205(v97, v98, v99, v100, v101, v102, v105, 1, v113, v107, v115, v108, v109, v110, v111, 0, 3, 4, 2) -> f_206(v97, v98, v99, v100, v101, v102, v105, 1, v113, v107, v115, v108, v109, v110, v111, 0, 3, 4, 2) :|: TRUE
f_206(v97, v98, v99, v100, v101, v102, v105, 1, v113, v107, v115, v108, v109, v110, v111, 0, 3, 4, 2) -> f_191(v97, v98, v99, v100, v101, v102, v105, 1, v113, v107, v115, v108, v109, v110, v111, 0, 3, 4) :|: TRUE
f_191(v97, v98, v99, v100, v101, v102, v103, 1, v105, v106, v107, v108, v109, v110, v111, 0, 3, 4) -> f_192(v97, v98, v99, v100, v101, v102, v105, 1, v103, v106, v107, v108, v109, v110, v111, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_192(v97:0, v98:0, v99:0, v100:0, v101:0, v102:0, 1 + v113:0, 1, v103:0, v106:0, v107:0, v108:0, v109:0, v110:0, v111:0, 0, 3, 4) -> f_192(v97:0, v98:0, v99:0, v100:0, v101:0, v102:0, v113:0, 1, 1 + v113:0, v107:0, 1 + v107:0, v108:0, v109:0, v110:0, v111:0, 0, 3, 4) :|: v107:0 > 0 && v102:0 < 1 + v113:0
Filtered unneeded arguments:
   f_192(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_192(x6, x7, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_192(v102:0, sum~cons_1~v113:0, v107:0) -> f_192(v102:0, v113:0, 1 + v107:0) :|: v107:0 > 0 && v102:0 < 1 + v113:0 && sum~cons_1~v113:0 = 1 + v113:0

----------------------------------------

(8)
Obligation:
Rules:
f_192(v102:0, sum~cons_1~v113:0, v107:0) -> f_192(v102:0, v113:0, 1 + v107:0) :|: v107:0 > 0 && v102:0 < 1 + v113:0 && sum~cons_1~v113:0 = 1 + v113:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_192(v102:0:0, sum~cons_1~v113:0:0, v107:0:0) -> f_192(v102:0:0, v113:0:0, 1 + v107:0:0) :|: v107:0:0 > 0 && v102:0:0 < 1 + v113:0:0 && sum~cons_1~v113:0:0 = 1 + v113:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_192 ] = -1*f_192_1 + f_192_2

The following rules are decreasing:
f_192(v102:0:0, sum~cons_1~v113:0:0, v107:0:0) -> f_192(v102:0:0, v113:0:0, 1 + v107:0:0) :|: v107:0:0 > 0 && v102:0:0 < 1 + v113:0:0 && sum~cons_1~v113:0:0 = 1 + v113:0:0

The following rules are bounded:
f_192(v102:0:0, sum~cons_1~v113:0:0, v107:0:0) -> f_192(v102:0:0, v113:0:0, 1 + v107:0:0) :|: v107:0:0 > 0 && v102:0:0 < 1 + v113:0:0 && sum~cons_1~v113:0:0 = 1 + v113:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
