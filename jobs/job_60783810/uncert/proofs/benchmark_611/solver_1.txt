MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/4mPw9.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 68 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 11.8 s]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
    (8) LLVM Symbolic Execution SCC
    (9) LLVM Symbolic Execution SCC


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/4mPw9.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/4mPw9.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: nomsg initVal: -1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: votedValue_History_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: votedValue_History_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: votedValue_History_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: gate1Failed_History_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: gate1Failed_History_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: gate1Failed_History_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: gate2Failed_History_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: gate2Failed_History_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: gate2Failed_History_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: gate3Failed_History_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: gate3Failed_History_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: gate3Failed_History_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: gate1Failed initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: gate2Failed initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: gate3Failed initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: VALUE1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: VALUE2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: VALUE3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: g1v_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: g2v_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: g3v_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: g1v_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: g2v_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: g3v_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: nodes initVal: (@gate1_each_pals_period,@gate2_each_pals_period,@gate3_each_pals_period,@voter) type: [4 x *BasicFunctionType varArgs: falsereturnType: BasicVoidTypeparamTypes: ()] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: null section: null

Name: g1v initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: g2v initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: g3v initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_bool" returnParam: i1 zeroext parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int8_t" returnParam: i8 signext parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet__Bool" returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_msg_t" returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "add_history_type" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 80
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		%8 = alloca i32, align 4
		%9 = alloca i32, align 4
		%10 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %9)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %10)
		store 0, %4
		store -2, %5
		store 0, %6
		br %11
	11:
		%12 = load %6
		%13 = icmp slt %12 3
		br %13, %14, %71
	14:
		%15 = load %3
		%16 = icmp eq %15 0
		br %16, %17, %27
	17:
		%18 = call zeroext i1 @read_history_bool(i32 0, i32 0)
		%19 = zext i1 %18 to i32
		store %19, %7
		%20 = load %7
		%21 = load %4
		%22 = trunc i8 %21 to i1
		%23 = zext i1 %22 to i32
		%24 = icmp eq %20 %23
		br %24, %26, %25
	25:
		store 0, %2
		br %72
	26:
		br %68
	27:
		%28 = load %3
		%29 = icmp eq %28 1
		br %29, %30, %40
	30:
		%31 = call zeroext i1 @read_history_bool(i32 1, i32 0)
		%32 = zext i1 %31 to i32
		store %32, %8
		%33 = load %8
		%34 = load %4
		%35 = trunc i8 %34 to i1
		%36 = zext i1 %35 to i32
		%37 = icmp eq %33 %36
		br %37, %39, %38
	38:
		store 0, %2
		br %72
	39:
		br %67
	40:
		%41 = load %3
		%42 = icmp eq %41 2
		br %42, %43, %53
	43:
		%44 = call zeroext i1 @read_history_bool(i32 2, i32 0)
		%45 = zext i1 %44 to i32
		store %45, %9
		%46 = load %9
		%47 = load %4
		%48 = trunc i8 %47 to i1
		%49 = zext i1 %48 to i32
		%50 = icmp eq %46 %49
		br %50, %52, %51
	51:
		store 0, %2
		br %72
	52:
		br %66
	53:
		%54 = load %3
		%55 = icmp eq %54 3
		br %55, %56, %65
	56:
		%57 = call signext i8 @read_history_int8(i32 3, i32 0)
		%58 = sext i8 %57 to i32
		store %58, %10
		%59 = load %10
		%60 = load %5
		%61 = sext i8 %60 to i32
		%62 = icmp eq %59 %61
		br %62, %64, %63
	63:
		store 0, %2
		br %72
	64:
		br %65
	65:
		br %66
	66:
		br %67
	67:
		br %68
	68:
		%69 = load %6
		%70 = add i32 %69, 1
		store %70, %6
		br %11
	71:
		store 1, %2
		br %72
	72:
		%73 = load %2
		ret %73

*BasicFunctionTypename: "read_history_bool" linkageType: EXTERNALLY_VISIBLE returnParam: i1 zeroext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 180
	0:
		%3 = alloca i1, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = icmp eq %6 0
		br %7, %8, %23
	8:
		%9 = load %5
		%10 = icmp eq %9 0
		br %10, %11, %14
	11:
		%12 = load @gate1Failed_History_0
		%13 = trunc i8 %12 to i1
		store %13, %3
		br %63
	14:
		%15 = load %5
		%16 = icmp eq %15 1
		br %16, %17, %20
	17:
		%18 = load @gate1Failed_History_1
		%19 = trunc i8 %18 to i1
		store %19, %3
		br %63
	20:
		%21 = load @gate1Failed_History_2
		%22 = trunc i8 %21 to i1
		store %22, %3
		br %63
	23:
		%24 = load %4
		%25 = icmp eq %24 1
		br %25, %26, %41
	26:
		%27 = load %5
		%28 = icmp eq %27 0
		br %28, %29, %32
	29:
		%30 = load @gate2Failed_History_0
		%31 = trunc i8 %30 to i1
		store %31, %3
		br %63
	32:
		%33 = load %5
		%34 = icmp eq %33 1
		br %34, %35, %38
	35:
		%36 = load @gate2Failed_History_1
		%37 = trunc i8 %36 to i1
		store %37, %3
		br %63
	38:
		%39 = load @gate2Failed_History_2
		%40 = trunc i8 %39 to i1
		store %40, %3
		br %63
	41:
		%42 = load %4
		%43 = icmp eq %42 2
		br %43, %44, %59
	44:
		%45 = load %5
		%46 = icmp eq %45 0
		br %46, %47, %50
	47:
		%48 = load @gate3Failed_History_0
		%49 = trunc i8 %48 to i1
		store %49, %3
		br %63
	50:
		%51 = load %5
		%52 = icmp eq %51 1
		br %52, %53, %56
	53:
		%54 = load @gate3Failed_History_1
		%55 = trunc i8 %54 to i1
		store %55, %3
		br %63
	56:
		%57 = load @gate3Failed_History_2
		%58 = trunc i8 %57 to i1
		store %58, %3
		br %63
	59:
		Unnamed Call-Instruction = call BasicVoidType @assert(i1 zeroext 0)
		br %60
	60:
		br %61
	61:
		br %62
	62:
		store 0, %3
		br %63
	63:
		%64 = load %3
		ret %64

*BasicFunctionTypename: "read_history_int8" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 258
	0:
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = icmp eq %6 3
		br %7, %8, %20
	8:
		%9 = load %5
		%10 = icmp eq %9 0
		br %10, %11, %13
	11:
		%12 = load @votedValue_History_0
		store %12, %3
		br %22
	13:
		%14 = load %5
		%15 = icmp eq %14 1
		br %15, %16, %18
	16:
		%17 = load @votedValue_History_1
		store %17, %3
		br %22
	18:
		%19 = load @votedValue_History_2
		store %19, %3
		br %22
	20:
		Unnamed Call-Instruction = call BasicVoidType @assert(i1 zeroext 0)
		br %21
	21:
		store -2, %3
		br %22
	22:
		%23 = load %3
		ret %23

*BasicFunctionTypename: "assert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 292
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%4 = load %2
		%5 = trunc i8 %4 to i1
		br %5, %8, %6
	6:
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	8:
		ret void

*BasicFunctionTypename: "write_history_int8" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32, 1 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 308
	0:
		%3 = alloca i32, align 4
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = icmp eq %5 3
		br %6, %7, %11
	7:
		%8 = load @votedValue_History_1
		store %8, @votedValue_History_2
		%9 = load @votedValue_History_0
		store %9, @votedValue_History_1
		%10 = load %4
		store %10, @votedValue_History_0
		br %12
	11:
		Unnamed Call-Instruction = call BasicVoidType @assert(i1 zeroext 0)
		br %12
	12:
		ret void

*BasicFunctionTypename: "write_history_bool" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32, 1 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 331
	0:
		%3 = alloca i32, align 4
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = zext i1 %1 to i8
		store %5, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%6 = load %3
		%7 = icmp eq %6 0
		br %7, %8, %18
	8:
		%9 = load @gate1Failed_History_1
		%10 = trunc i8 %9 to i1
		%11 = zext i1 %10 to i8
		store %11, @gate1Failed_History_2
		%12 = load @gate1Failed_History_0
		%13 = trunc i8 %12 to i1
		%14 = zext i1 %13 to i8
		store %14, @gate1Failed_History_1
		%15 = load %4
		%16 = trunc i8 %15 to i1
		%17 = zext i1 %16 to i8
		store %17, @gate1Failed_History_0
		br %47
	18:
		%19 = load %3
		%20 = icmp eq %19 1
		br %20, %21, %31
	21:
		%22 = load @gate2Failed_History_1
		%23 = trunc i8 %22 to i1
		%24 = zext i1 %23 to i8
		store %24, @gate2Failed_History_2
		%25 = load @gate2Failed_History_0
		%26 = trunc i8 %25 to i1
		%27 = zext i1 %26 to i8
		store %27, @gate2Failed_History_1
		%28 = load %4
		%29 = trunc i8 %28 to i1
		%30 = zext i1 %29 to i8
		store %30, @gate2Failed_History_0
		br %46
	31:
		%32 = load %3
		%33 = icmp eq %32 2
		br %33, %34, %44
	34:
		%35 = load @gate3Failed_History_1
		%36 = trunc i8 %35 to i1
		%37 = zext i1 %36 to i8
		store %37, @gate3Failed_History_2
		%38 = load @gate3Failed_History_0
		%39 = trunc i8 %38 to i1
		%40 = zext i1 %39 to i8
		store %40, @gate3Failed_History_1
		%41 = load %4
		%42 = trunc i8 %41 to i1
		%43 = zext i1 %42 to i8
		store %43, @gate3Failed_History_0
		br %45
	44:
		Unnamed Call-Instruction = call BasicVoidType @assert(i1 zeroext 0)
		br %45
	45:
		br %46
	46:
		br %47
	47:
		ret void

*BasicFunctionTypename: "init" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 378
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @add_history_type(i32 0)
		store %6, %2
		%7 = load %2
		%8 = icmp ne %7 0
		br %8, %10, %9
	9:
		store 0, %1
		br %26
	10:
		%11 = call i32 @add_history_type(i32 1)
		store %11, %3
		%12 = load %3
		%13 = icmp ne %12 0
		br %13, %15, %14
	14:
		store 0, %1
		br %26
	15:
		%16 = call i32 @add_history_type(i32 2)
		store %16, %4
		%17 = load %4
		%18 = icmp ne %17 0
		br %18, %20, %19
	19:
		store 0, %1
		br %26
	20:
		%21 = call i32 @add_history_type(i32 3)
		store %21, %5
		%22 = load %5
		%23 = icmp ne %22 0
		br %23, %25, %24
	24:
		store 0, %1
		br %26
	25:
		store 1, %1
		br %26
	26:
		%27 = load %1
		ret %27

*BasicFunctionTypename: "check" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 420
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		%9 = alloca i8, align 1
		%10 = alloca i8, align 1
		%11 = alloca i8, align 1
		%12 = alloca i8, align 1
		%13 = alloca i8, align 1
		%14 = alloca i8, align 1
		%15 = alloca i8, align 1
		%16 = alloca i8, align 1
		%17 = alloca i8, align 1
		%18 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %9)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %10)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %11)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %12)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %13)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %14)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %15)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %16)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %17)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %18)
		%19 = load @gate1Failed
		%20 = trunc i8 %19 to i1
		br %20, %22, %21
	21:
		store 1, %2
		br %33
	22:
		%23 = load @gate2Failed
		%24 = trunc i8 %23 to i1
		br %24, %26, %25
	25:
		store 1, %2
		br %32
	26:
		%27 = load @gate3Failed
		%28 = trunc i8 %27 to i1
		br %28, %30, %29
	29:
		store 1, %2
		br %31
	30:
		store 0, %2
		br %31
	31:
		br %32
	32:
		br %33
	33:
		%34 = load %2
		%35 = icmp ne %34 0
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i1 zeroext %35)
		%36 = call zeroext i1 @read_history_bool(i32 0, i32 1)
		%37 = zext i1 %36 to i8
		store %37, %7
		%38 = load %7
		%39 = trunc i8 %38 to i1
		br %39, %116, %40
	40:
		%41 = call zeroext i1 @read_history_bool(i32 1, i32 1)
		%42 = zext i1 %41 to i8
		store %42, %8
		%43 = load %8
		%44 = trunc i8 %43 to i1
		br %44, %115, %45
	45:
		%46 = call zeroext i1 @read_history_bool(i32 2, i32 1)
		%47 = zext i1 %46 to i8
		store %47, %9
		%48 = load %9
		%49 = trunc i8 %48 to i1
		br %49, %114, %50
	50:
		store 0, %3
		%51 = call signext i8 @read_history_int8(i32 3, i32 0)
		store %51, %4
		%52 = load @VALUE1
		%53 = sext i8 %52 to i32
		%54 = load %4
		%55 = sext i8 %54 to i32
		%56 = icmp eq %53 %55
		br %56, %57, %60
	57:
		%58 = load %3
		%59 = add i32 %58, 1
		store %59, %3
		br %60
	60:
		%61 = call signext i8 @read_history_int8(i32 3, i32 0)
		store %61, %5
		%62 = load @VALUE2
		%63 = sext i8 %62 to i32
		%64 = load %5
		%65 = sext i8 %64 to i32
		%66 = icmp eq %63 %65
		br %66, %67, %70
	67:
		%68 = load %3
		%69 = add i32 %68, 1
		store %69, %3
		br %70
	70:
		%71 = call signext i8 @read_history_int8(i32 3, i32 0)
		store %71, %6
		%72 = load @VALUE3
		%73 = sext i8 %72 to i32
		%74 = load %6
		%75 = sext i8 %74 to i32
		%76 = icmp eq %73 %75
		br %76, %77, %80
	77:
		%78 = load %3
		%79 = add i32 %78, 1
		store %79, %3
		br %80
	80:
		%81 = load @VALUE1
		%82 = sext i8 %81 to i32
		%83 = load @VALUE2
		%84 = sext i8 %83 to i32
		%85 = icmp ne %82 %84
		br %85, %86, %107
	86:
		%87 = load @VALUE1
		%88 = sext i8 %87 to i32
		%89 = load @VALUE3
		%90 = sext i8 %89 to i32
		%91 = icmp ne %88 %90
		br %91, %92, %105
	92:
		%93 = load @VALUE2
		%94 = sext i8 %93 to i32
		%95 = load @VALUE3
		%96 = sext i8 %95 to i32
		%97 = icmp ne %94 %96
		br %97, %98, %103
	98:
		%99 = load %3
		%100 = icmp eq %99 1
		br %100, %102, %101
	101:
		store 0, %1
		br %183
	102:
		br %104
	103:
		br %108
	104:
		br %106
	105:
		br %108
	106:
		br %113
	107:
		br %108
	108:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%109 = load %3
		%110 = icmp sgt %109 1
		br %110, %112, %111
	111:
		store 0, %1
		br %183
	112:
		br %113
	113:
		br %114
	114:
		br %115
	115:
		br %116
	116:
		%117 = call signext i8 @read_history_int8(i32 3, i32 1)
		store %117, %14
		%118 = load %14
		%119 = sext i8 %118 to i32
		%120 = icmp sgt %119 -2
		br %120, %121, %150
	121:
		%122 = call signext i8 @read_history_int8(i32 3, i32 0)
		store %122, %10
		%123 = load %10
		%124 = sext i8 %123 to i32
		%125 = load @nomsg
		%126 = sext i8 %125 to i32
		%127 = icmp eq %124 %126
		br %127, %128, %149
	128:
		%129 = call zeroext i1 @read_history_bool(i32 0, i32 1)
		%130 = zext i1 %129 to i8
		store %130, %11
		%131 = load %11
		%132 = trunc i8 %131 to i1
		br %132, %133, %147
	133:
		%134 = call zeroext i1 @read_history_bool(i32 1, i32 1)
		%135 = zext i1 %134 to i8
		store %135, %12
		%136 = load %12
		%137 = trunc i8 %136 to i1
		br %137, %138, %145
	138:
		%139 = call zeroext i1 @read_history_bool(i32 2, i32 1)
		%140 = zext i1 %139 to i8
		store %140, %13
		%141 = load %13
		%142 = trunc i8 %141 to i1
		br %142, %144, %143
	143:
		store 0, %1
		br %183
	144:
		br %146
	145:
		store 0, %1
		br %183
	146:
		br %148
	147:
		store 0, %1
		br %183
	148:
		br %149
	149:
		br %150
	150:
		%151 = call signext i8 @read_history_int8(i32 3, i32 0)
		store %151, %15
		%152 = load %15
		%153 = sext i8 %152 to i32
		%154 = load @nomsg
		%155 = sext i8 %154 to i32
		%156 = icmp ne %153 %155
		br %156, %157, %182
	157:
		%158 = call signext i8 @read_history_int8(i32 3, i32 0)
		store %158, %16
		%159 = load @VALUE1
		%160 = sext i8 %159 to i32
		%161 = load %16
		%162 = sext i8 %161 to i32
		%163 = icmp eq %160 %162
		br %163, %181, %164
	164:
		%165 = call signext i8 @read_history_int8(i32 3, i32 0)
		store %165, %17
		%166 = load @VALUE2
		%167 = sext i8 %166 to i32
		%168 = load %17
		%169 = sext i8 %168 to i32
		%170 = icmp eq %167 %169
		br %170, %180, %171
	171:
		%172 = call signext i8 @read_history_int8(i32 3, i32 0)
		store %172, %18
		%173 = load @VALUE3
		%174 = sext i8 %173 to i32
		%175 = load %18
		%176 = sext i8 %175 to i32
		%177 = icmp eq %174 %176
		br %177, %179, %178
	178:
		store 0, %1
		br %183
	179:
		br %180
	180:
		br %181
	181:
		br %182
	182:
		store 1, %1
		br %183
	183:
		%184 = load %1
		ret %184

*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 673
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		br %4
	4:
		%5 = load %2
		%6 = trunc i8 %5 to i1
		%7 = xor i1 %6, 1
		br %7, %8, %9
	8:
		br %4
	9:
		ret void

*BasicFunctionTypename: "gate1_each_pals_period" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 683
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call zeroext i1 (...)* @__VERIFIER_nondet_bool()
		%5 = zext i1 %4 to i8
		store %5, @gate1Failed
		%6 = load @gate1Failed
		%7 = trunc i8 %6 to i1
		Unnamed Call-Instruction = call BasicVoidType @write_history_bool(i32 0, i1 zeroext %7)
		%8 = load @gate1Failed
		%9 = trunc i8 %8 to i1
		br %9, %10, %31
	10:
		%11 = load @nomsg
		%12 = sext i8 %11 to i32
		%13 = load @nomsg
		%14 = sext i8 %13 to i32
		%15 = icmp ne %12 %14
		br %15, %16, %25
	16:
		%17 = load @g1v_new
		%18 = sext i8 %17 to i32
		%19 = load @nomsg
		%20 = sext i8 %19 to i32
		%21 = icmp eq %18 %20
		br %21, %22, %25
	22:
		%23 = load @nomsg
		%24 = sext i8 %23 to i32
		br %28
	25:
		%26 = load @g1v_new
		%27 = sext i8 %26 to i32
		br %28
	28:
		%29 = phi [%24, %22], [%27, %25]
		%30 = trunc i32 %29 to i8
		store %30, @g1v_new
		br %74
	31:
		%32 = call signext i8 (...)* @__VERIFIER_nondet_int8_t()
		store %32, %2
		%33 = load %2
		store %33, %1
		%34 = load %1
		%35 = sext i8 %34 to i32
		%36 = icmp eq %35 0
		br %36, %37, %38
	37:
		store 1, %3
		br %51
	38:
		%39 = load %1
		%40 = sext i8 %39 to i32
		%41 = icmp eq %40 1
		br %41, %42, %43
	42:
		store 1, %3
		br %50
	43:
		%44 = load %1
		%45 = sext i8 %44 to i32
		%46 = icmp eq %45 2
		br %46, %47, %48
	47:
		store 1, %3
		br %49
	48:
		store 0, %3
		br %49
	49:
		br %50
	50:
		br %51
	51:
		%52 = load %3
		%53 = icmp ne %52 0
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i1 zeroext %53)
		%54 = load %1
		%55 = sext i8 %54 to i32
		%56 = load @nomsg
		%57 = sext i8 %56 to i32
		%58 = icmp ne %55 %57
		br %58, %59, %68
	59:
		%60 = load @g1v_new
		%61 = sext i8 %60 to i32
		%62 = load @nomsg
		%63 = sext i8 %62 to i32
		%64 = icmp eq %61 %63
		br %64, %65, %68
	65:
		%66 = load %1
		%67 = sext i8 %66 to i32
		br %71
	68:
		%69 = load @g1v_new
		%70 = sext i8 %69 to i32
		br %71
	71:
		%72 = phi [%67, %65], [%70, %68]
		%73 = trunc i32 %72 to i8
		store %73, @g1v_new
		br %74
	74:
		ret void

*BasicFunctionTypename: "gate2_each_pals_period" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 755
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call zeroext i1 (...)* @__VERIFIER_nondet_bool()
		%5 = zext i1 %4 to i8
		store %5, @gate2Failed
		%6 = load @gate2Failed
		%7 = trunc i8 %6 to i1
		Unnamed Call-Instruction = call BasicVoidType @write_history_bool(i32 1, i1 zeroext %7)
		%8 = load @gate2Failed
		%9 = trunc i8 %8 to i1
		br %9, %10, %31
	10:
		%11 = load @nomsg
		%12 = sext i8 %11 to i32
		%13 = load @nomsg
		%14 = sext i8 %13 to i32
		%15 = icmp ne %12 %14
		br %15, %16, %25
	16:
		%17 = load @g2v_new
		%18 = sext i8 %17 to i32
		%19 = load @nomsg
		%20 = sext i8 %19 to i32
		%21 = icmp eq %18 %20
		br %21, %22, %25
	22:
		%23 = load @nomsg
		%24 = sext i8 %23 to i32
		br %28
	25:
		%26 = load @g2v_new
		%27 = sext i8 %26 to i32
		br %28
	28:
		%29 = phi [%24, %22], [%27, %25]
		%30 = trunc i32 %29 to i8
		store %30, @g2v_new
		br %74
	31:
		%32 = call signext i8 (...)* @__VERIFIER_nondet_int8_t()
		store %32, %2
		%33 = load %2
		store %33, %1
		%34 = load %1
		%35 = sext i8 %34 to i32
		%36 = icmp eq %35 0
		br %36, %37, %38
	37:
		store 1, %3
		br %51
	38:
		%39 = load %1
		%40 = sext i8 %39 to i32
		%41 = icmp eq %40 1
		br %41, %42, %43
	42:
		store 1, %3
		br %50
	43:
		%44 = load %1
		%45 = sext i8 %44 to i32
		%46 = icmp eq %45 2
		br %46, %47, %48
	47:
		store 1, %3
		br %49
	48:
		store 0, %3
		br %49
	49:
		br %50
	50:
		br %51
	51:
		%52 = load %3
		%53 = icmp ne %52 0
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i1 zeroext %53)
		%54 = load %1
		%55 = sext i8 %54 to i32
		%56 = load @nomsg
		%57 = sext i8 %56 to i32
		%58 = icmp ne %55 %57
		br %58, %59, %68
	59:
		%60 = load @g2v_new
		%61 = sext i8 %60 to i32
		%62 = load @nomsg
		%63 = sext i8 %62 to i32
		%64 = icmp eq %61 %63
		br %64, %65, %68
	65:
		%66 = load %1
		%67 = sext i8 %66 to i32
		br %71
	68:
		%69 = load @g2v_new
		%70 = sext i8 %69 to i32
		br %71
	71:
		%72 = phi [%67, %65], [%70, %68]
		%73 = trunc i32 %72 to i8
		store %73, @g2v_new
		br %74
	74:
		ret void

*BasicFunctionTypename: "gate3_each_pals_period" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 827
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call zeroext i1 (...)* @__VERIFIER_nondet_bool()
		%5 = zext i1 %4 to i8
		store %5, @gate3Failed
		%6 = load @gate3Failed
		%7 = trunc i8 %6 to i1
		Unnamed Call-Instruction = call BasicVoidType @write_history_bool(i32 2, i1 zeroext %7)
		%8 = load @gate3Failed
		%9 = trunc i8 %8 to i1
		br %9, %10, %31
	10:
		%11 = load @nomsg
		%12 = sext i8 %11 to i32
		%13 = load @nomsg
		%14 = sext i8 %13 to i32
		%15 = icmp ne %12 %14
		br %15, %16, %25
	16:
		%17 = load @g3v_new
		%18 = sext i8 %17 to i32
		%19 = load @nomsg
		%20 = sext i8 %19 to i32
		%21 = icmp eq %18 %20
		br %21, %22, %25
	22:
		%23 = load @nomsg
		%24 = sext i8 %23 to i32
		br %28
	25:
		%26 = load @g3v_new
		%27 = sext i8 %26 to i32
		br %28
	28:
		%29 = phi [%24, %22], [%27, %25]
		%30 = trunc i32 %29 to i8
		store %30, @g3v_new
		br %74
	31:
		%32 = call signext i8 (...)* @__VERIFIER_nondet_int8_t()
		store %32, %2
		%33 = load %2
		store %33, %1
		%34 = load %1
		%35 = sext i8 %34 to i32
		%36 = icmp eq %35 0
		br %36, %37, %38
	37:
		store 1, %3
		br %51
	38:
		%39 = load %1
		%40 = sext i8 %39 to i32
		%41 = icmp eq %40 1
		br %41, %42, %43
	42:
		store 1, %3
		br %50
	43:
		%44 = load %1
		%45 = sext i8 %44 to i32
		%46 = icmp eq %45 2
		br %46, %47, %48
	47:
		store 1, %3
		br %49
	48:
		store 0, %3
		br %49
	49:
		br %50
	50:
		br %51
	51:
		%52 = load %3
		%53 = icmp ne %52 0
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i1 zeroext %53)
		%54 = load %1
		%55 = sext i8 %54 to i32
		%56 = load @nomsg
		%57 = sext i8 %56 to i32
		%58 = icmp ne %55 %57
		br %58, %59, %68
	59:
		%60 = load @g3v_new
		%61 = sext i8 %60 to i32
		%62 = load @nomsg
		%63 = sext i8 %62 to i32
		%64 = icmp eq %61 %63
		br %64, %65, %68
	65:
		%66 = load %1
		%67 = sext i8 %66 to i32
		br %71
	68:
		%69 = load @g3v_new
		%70 = sext i8 %69 to i32
		br %71
	71:
		%72 = phi [%67, %65], [%70, %68]
		%73 = trunc i32 %72 to i8
		store %73, @g3v_new
		br %74
	74:
		ret void

*BasicFunctionTypename: "voter" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 899
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @g1v_old
		store %3, @VALUE1
		%4 = load @nomsg
		store %4, @g1v_old
		%5 = load @g2v_old
		store %5, @VALUE2
		%6 = load @nomsg
		store %6, @g2v_old
		%7 = load @g3v_old
		store %7, @VALUE3
		%8 = load @nomsg
		store %8, @g3v_old
		%9 = load @VALUE1
		%10 = sext i8 %9 to i32
		%11 = load @VALUE2
		%12 = sext i8 %11 to i32
		%13 = icmp eq %10 %12
		br %13, %14, %16
	14:
		%15 = load @VALUE1
		store %15, %1
		br %81
	16:
		%17 = load @VALUE1
		%18 = sext i8 %17 to i32
		%19 = load @VALUE3
		%20 = sext i8 %19 to i32
		%21 = icmp eq %18 %20
		br %21, %22, %33
	22:
		%23 = load @VALUE1
		%24 = sext i8 %23 to i32
		%25 = load @nomsg
		%26 = sext i8 %25 to i32
		%27 = icmp eq %24 %26
		br %27, %28, %30
	28:
		%29 = load @VALUE2
		store %29, %1
		br %32
	30:
		%31 = load @VALUE1
		store %31, %1
		br %32
	32:
		br %80
	33:
		%34 = load @VALUE2
		%35 = sext i8 %34 to i32
		%36 = load @VALUE3
		%37 = sext i8 %36 to i32
		%38 = icmp eq %35 %37
		br %38, %39, %51
	39:
		%40 = load @VALUE2
		store %40, %1
		%41 = load @VALUE2
		%42 = sext i8 %41 to i32
		%43 = load @nomsg
		%44 = sext i8 %43 to i32
		%45 = icmp eq %42 %44
		br %45, %46, %48
	46:
		%47 = load @VALUE1
		store %47, %1
		br %50
	48:
		%49 = load @VALUE2
		store %49, %1
		br %50
	50:
		br %79
	51:
		%52 = load @VALUE1
		%53 = sext i8 %52 to i32
		%54 = load @nomsg
		%55 = sext i8 %54 to i32
		%56 = icmp ne %53 %55
		br %56, %57, %59
	57:
		%58 = load @VALUE1
		store %58, %1
		br %78
	59:
		%60 = load @VALUE2
		%61 = sext i8 %60 to i32
		%62 = load @nomsg
		%63 = sext i8 %62 to i32
		%64 = icmp ne %61 %63
		br %64, %65, %67
	65:
		%66 = load @VALUE2
		store %66, %1
		br %77
	67:
		%68 = load @VALUE3
		%69 = sext i8 %68 to i32
		%70 = load @nomsg
		%71 = sext i8 %70 to i32
		%72 = icmp ne %69 %71
		br %72, %73, %75
	73:
		%74 = load @VALUE3
		store %74, %1
		br %76
	75:
		Unnamed Call-Instruction = call BasicVoidType @assert(i1 zeroext 0)
		br %76
	76:
		br %77
	77:
		br %78
	78:
		br %79
	79:
		br %80
	80:
		br %81
	81:
		%82 = load %1
		Unnamed Call-Instruction = call BasicVoidType @write_history_int8(i32 3, i8 signext %82)
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1014
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %2
		%4 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%5 = zext i1 %4 to i8
		store %5, @gate1Failed
		%6 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%7 = zext i1 %6 to i8
		store %7, @gate2Failed
		%8 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%9 = zext i1 %8 to i8
		store %9, @gate3Failed
		%10 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %10, @VALUE1
		%11 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %11, @VALUE2
		%12 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %12, @VALUE3
		%13 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%14 = zext i1 %13 to i8
		store %14, @gate1Failed_History_0
		%15 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%16 = zext i1 %15 to i8
		store %16, @gate1Failed_History_1
		%17 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%18 = zext i1 %17 to i8
		store %18, @gate1Failed_History_2
		%19 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%20 = zext i1 %19 to i8
		store %20, @gate2Failed_History_0
		%21 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%22 = zext i1 %21 to i8
		store %22, @gate2Failed_History_1
		%23 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%24 = zext i1 %23 to i8
		store %24, @gate2Failed_History_2
		%25 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%26 = zext i1 %25 to i8
		store %26, @gate3Failed_History_0
		%27 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%28 = zext i1 %27 to i8
		store %28, @gate3Failed_History_1
		%29 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%30 = zext i1 %29 to i8
		store %30, @gate3Failed_History_2
		%31 = call signext i8 (...)* @__VERIFIER_nondet_int8_t()
		store %31, @votedValue_History_0
		%32 = call signext i8 (...)* @__VERIFIER_nondet_int8_t()
		store %32, @votedValue_History_1
		%33 = call signext i8 (...)* @__VERIFIER_nondet_int8_t()
		store %33, @votedValue_History_2
		%34 = call i32 @init()
		store %34, %3
		%35 = load %3
		%36 = icmp ne %35 0
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i1 zeroext %36)
		%37 = load @nomsg
		store %37, @g1v_old
		%38 = load @nomsg
		store %38, @g1v_new
		%39 = load @nomsg
		store %39, @g2v_old
		%40 = load @nomsg
		store %40, @g2v_new
		%41 = load @nomsg
		store %41, @g3v_old
		%42 = load @nomsg
		store %42, @g3v_new
		store 0, %3
		br %43
	43:
		%44 = load %3
		%45 = icmp slt %44 10
		br %45, %46, %58
	46:
		Unnamed Call-Instruction = call BasicVoidType @gate1_each_pals_period()
		Unnamed Call-Instruction = call BasicVoidType @gate2_each_pals_period()
		Unnamed Call-Instruction = call BasicVoidType @gate3_each_pals_period()
		Unnamed Call-Instruction = call BasicVoidType @voter()
		%47 = load @g1v_new
		store %47, @g1v_old
		%48 = load @nomsg
		store %48, @g1v_new
		%49 = load @g2v_new
		store %49, @g2v_old
		%50 = load @nomsg
		store %50, @g2v_new
		%51 = load @g3v_new
		store %51, @g3v_old
		%52 = load @nomsg
		store %52, @g3v_new
		%53 = call i32 @check()
		store %53, %2
		%54 = load %2
		%55 = icmp ne %54 0
		Unnamed Call-Instruction = call BasicVoidType @assert(i1 zeroext %55)
		%56 = load %3
		%57 = add i32 %56, 1
		store %57, %3
		br %43
	58:
		%59 = load %1
		ret %59


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8)
Obligation:
SCC
----------------------------------------

(9)
Obligation:
SCC/hpcwork/ff862203/termcomp25/benchmarks/4mPw9.c:391:21: warning: self-comparison always evaluates to false [-Wtautological-compare]
    g1v_new = nomsg != nomsg && g1v_new == nomsg ? nomsg : g1v_new;
                    ^
/hpcwork/ff862203/termcomp25/benchmarks/4mPw9.c:422:21: warning: self-comparison always evaluates to false [-Wtautological-compare]
    g2v_new = nomsg != nomsg && g2v_new == nomsg ? nomsg : g2v_new;
                    ^
/hpcwork/ff862203/termcomp25/benchmarks/4mPw9.c:453:21: warning: self-comparison always evaluates to false [-Wtautological-compare]
    g3v_new = nomsg != nomsg && g3v_new == nomsg ? nomsg : g3v_new;
                    ^
3 warnings generated.
