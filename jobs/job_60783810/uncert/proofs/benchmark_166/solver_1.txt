YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/31JS0.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1185 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 29 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 25 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/31JS0.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/31JS0.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "rec" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = load %3
		%7 = icmp eq %6 0
		br %7, %8, %9
	8:
		store 0, %2
		br %23
	9:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%10 = load %3
		%11 = sub i32 %10, 1
		%12 = call i32 @rec(i32 %11)
		store %12, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%13 = load %4
		store %13, %5
		br %14
	14:
		%15 = load %5
		%16 = icmp sgt %15 0
		br %16, %17, %20
	17:
		%18 = load %5
		%19 = add i32 %18, -1
		store %19, %5
		br %14
	20:
		%21 = load %4
		%22 = add i32 1, %21
		store %22, %2
		br %23
	23:
		%24 = load %2
		ret %24

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 37
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp sle %5 0
		br %6, %7, %8
	7:
		store 0, %1
		br %11
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%9 = load %2
		%10 = call i32 @rec(i32 %9)
		store %10, %3
		br %11
	11:
		%12 = load %1
		ret %12


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 9 rulesP rules:
f_428(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v615, v618, v619, v620, v621, 3, 4) -> f_429(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v615, v618, v619, v620, v621, 3, 2, 4) :|: 0 < v617 && 2 <= v615 && 2 <= v614 && 2 <= v607 && 1 <= v613
f_429(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v615, v618, v619, v620, v621, 3, 2, 4) -> f_431(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v615, v618, v619, v620, v621, 3, 2, 4) :|: 0 = 0
f_431(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v615, v618, v619, v620, v621, 3, 2, 4) -> f_433(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v615, v618, v619, v620, v621, 3, 2, 4) :|: TRUE
f_433(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v615, v618, v619, v620, v621, 3, 2, 4) -> f_435(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v618, v619, v620, v621, 3, 2, 4) :|: 0 = 0
f_435(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v618, v619, v620, v621, 3, 2, 4) -> f_437(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v630, v618, v619, v620, v621, 3, 2, 4) :|: 1 + v630 = v617 && 0 <= v630
f_437(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v630, v618, v619, v620, v621, 3, 2, 4) -> f_439(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v630, v618, v619, v620, v621, 3, 2, 4) :|: TRUE
f_439(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v630, v618, v619, v620, v621, 3, 2, 4) -> f_441(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v630, v618, v619, v620, v621, 3, 2, 4) :|: TRUE
f_441(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v630, v618, v619, v620, v621, 3, 2, 4) -> f_427(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v630, v618, v619, v620, v621, 3, 4) :|: TRUE
f_427(v607, v608, v609, v610, v611, 0, v613, v614, v615, 1, v617, v618, v619, v620, v621, 3, 4) -> f_428(v607, v608, v609, v610, v611, 0, v613, v614, v617, 1, v615, v618, v619, v620, v621, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_428(v607:0, v608:0, v609:0, v610:0, v611:0, 0, v613:0, v614:0, 1 + v630:0, 1, v615:0, v618:0, v619:0, v620:0, v621:0, 3, 4) -> f_428(v607:0, v608:0, v609:0, v610:0, v611:0, 0, v613:0, v614:0, v630:0, 1, 1 + v630:0, v618:0, v619:0, v620:0, v621:0, 3, 4) :|: v615:0 > 1 && v630:0 > -1 && v614:0 > 1 && v607:0 > 1 && v613:0 > 0
Filtered unneeded arguments:
   f_428(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_428(x1, x7, x8, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_428(v607:0, v613:0, v614:0, sum~cons_1~v630:0, v615:0) -> f_428(v607:0, v613:0, v614:0, v630:0, 1 + v630:0) :|: v630:0 > -1 && v615:0 > 1 && v614:0 > 1 && v613:0 > 0 && v607:0 > 1 && sum~cons_1~v630:0 = 1 + v630:0

----------------------------------------

(9)
Obligation:
Rules:
f_428(v607:0, v613:0, v614:0, sum~cons_1~v630:0, v615:0) -> f_428(v607:0, v613:0, v614:0, v630:0, 1 + v630:0) :|: v630:0 > -1 && v615:0 > 1 && v614:0 > 1 && v613:0 > 0 && v607:0 > 1 && sum~cons_1~v630:0 = 1 + v630:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_428(v607:0:0, v613:0:0, v614:0:0, sum~cons_1~v630:0:0, v615:0:0) -> f_428(v607:0:0, v613:0:0, v614:0:0, v630:0:0, 1 + v630:0:0) :|: v613:0:0 > 0 && v607:0:0 > 1 && v614:0:0 > 1 && v615:0:0 > 1 && v630:0:0 > -1 && sum~cons_1~v630:0:0 = 1 + v630:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_428(x, x1, x2, x3, x4)] = x3

The following rules are decreasing:
f_428(v607:0:0, v613:0:0, v614:0:0, sum~cons_1~v630:0:0, v615:0:0) -> f_428(v607:0:0, v613:0:0, v614:0:0, v630:0:0, 1 + v630:0:0) :|: v613:0:0 > 0 && v607:0:0 > 1 && v614:0:0 > 1 && v615:0:0 > 1 && v630:0:0 > -1 && sum~cons_1~v630:0:0 = 1 + v630:0:0
The following rules are bounded:
f_428(v607:0:0, v613:0:0, v614:0:0, sum~cons_1~v630:0:0, v615:0:0) -> f_428(v607:0:0, v613:0:0, v614:0:0, v630:0:0, 1 + v630:0:0) :|: v613:0:0 > 0 && v607:0:0 > 1 && v614:0:0 > 1 && v615:0:0 > 1 && v630:0:0 > -1 && sum~cons_1~v630:0:0 = 1 + v630:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_221(v52, v61, v53, v54, v55, v56, v57, v58, v62, 0, v60, 3, 1, 4) -> f_222(v52, v61, v63, v53, v54, v55, v56, v57, v58, v62, v64, 0, v60, 3, 1, 4) :|: 1 <= v63 && v64 = 3 + v63 && 4 <= v64
f_222(v52, v61, v63, v53, v54, v55, v56, v57, v58, v62, v64, 0, v60, 3, 1, 4) -> f_223(v52, v61, v63, v65, v53, v54, v55, v56, v57, v58, v62, v64, v66, 0, v60, 3, 1, 4) :|: 1 <= v65 && v66 = 3 + v65 && 4 <= v66
f_223(v52, v61, v63, v65, v53, v54, v55, v56, v57, v58, v62, v64, v66, 0, v60, 3, 1, 4) -> f_224(v52, v61, v63, v65, v67, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, 0, v60, 3, 1, 4) :|: 1 <= v67 && v68 = 3 + v67 && 4 <= v68
f_224(v52, v61, v63, v65, v67, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, 0, v60, 3, 1, 4) -> f_225(v52, v61, v63, v65, v67, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, 0, v60, 3, 1, 4) :|: TRUE
f_225(v52, v61, v63, v65, v67, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, 0, v60, 3, 1, 4) -> f_226(v52, v61, v63, v65, v67, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, 0, v60, 3, 1, 4) :|: TRUE
f_226(v52, v61, v63, v65, v67, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, 0, v60, 3, 1, 4) -> f_227(v52, v61, v63, v65, v67, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, 0, v60, 3, 1, 4) :|: 0 = 0
f_227(v52, v61, v63, v65, v67, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, 0, v60, 3, 1, 4) -> f_229(v52, v61, v63, v65, v67, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, 0, v60, 3, 1, 4) :|: v52 != 0
f_229(v52, v61, v63, v65, v67, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, 0, v60, 3, 1, 4) -> f_231(v52, v61, v63, v65, v67, 0, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, v60, 3, 1, 4) :|: 0 = 0
f_231(v52, v61, v63, v65, v67, 0, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, v60, 3, 1, 4) -> f_233(v52, v61, v63, v65, v67, 0, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, v60, 3, 1, 4) :|: TRUE
f_233(v52, v61, v63, v65, v67, 0, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, v60, 3, 1, 4) -> f_235(v52, v61, v63, v65, v67, 0, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, v60, 3, 1, 4) :|: TRUE
f_235(v52, v61, v63, v65, v67, 0, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, v60, 3, 1, 4) -> f_237(v52, v61, v63, v65, v67, 0, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, v60, 3, 1, 4) :|: 0 = 0
f_237(v52, v61, v63, v65, v67, 0, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, v60, 3, 1, 4) -> f_239(v52, v61, v63, v65, v67, 0, v70, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, v60, 3, 1, 4) :|: 1 + v70 = v52 && 0 <= v70
f_239(v52, v61, v63, v65, v67, 0, v70, v53, v54, v55, v56, v57, v58, v62, v64, v66, v68, v60, 3, 1, 4) -> f_241(v70, v53, v54, v55, v56, v57, v58, v61, v62, v63, v64, v65, v66, v67, v68, 0, v60, v52, 3, 1, 4) :|: 0 = 0
f_241(v70, v53, v54, v55, v56, v57, v58, v61, v62, v63, v64, v65, v66, v67, v68, 0, v60, v52, 3, 1, 4) -> f_242(v70, v53, v54, v55, v56, v57, v58, v61, v62, v63, v64, v65, v66, v67, v68, 0, v60, v52, 3, 1, 4) :|: TRUE
f_242(v70, v53, v54, v55, v56, v57, v58, v61, v62, v63, v64, v65, v66, v67, v68, 0, v60, v52, 3, 1, 4) -> f_220(v70, v53, v54, v55, v56, v57, v58, 0, v60, 3, 1, 4) :|: TRUE
f_220(v52, v53, v54, v55, v56, v57, v58, 0, v60, 3, 1, 4) -> f_221(v52, v61, v53, v54, v55, v56, v57, v58, v62, 0, v60, 3, 1, 4) :|: 1 <= v61 && v62 = 3 + v61 && 4 <= v62
Combined rules. Obtained 1 rulesP rules:
f_221(1 + v70:0, v61:0, v53:0, v54:0, v55:0, v56:0, v57:0, v58:0, v62:0, 0, v60:0, 3, 1, 4) -> f_221(v70:0, v61:1, v53:0, v54:0, v55:0, v56:0, v57:0, v58:0, 3 + v61:1, 0, v60:0, 3, 1, 4) :|: v65:0 > 0 && v63:0 > 0 && v67:0 > 0 && v70:0 > -1 && v61:1 > 0
Filtered unneeded arguments:
   f_221(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_221(x1)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_221(sum~cons_1~v70:0) -> f_221(v70:0) :|: v70:0 > -1 && sum~cons_1~v70:0 = 1 + v70:0

----------------------------------------

(16)
Obligation:
Rules:
f_221(sum~cons_1~v70:0) -> f_221(v70:0) :|: v70:0 > -1 && sum~cons_1~v70:0 = 1 + v70:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_221(sum~cons_1~v70:0:0) -> f_221(v70:0:0) :|: v70:0:0 > -1 && sum~cons_1~v70:0:0 = 1 + v70:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_221(x)] = x

The following rules are decreasing:
f_221(sum~cons_1~v70:0:0) -> f_221(v70:0:0) :|: v70:0:0 > -1 && sum~cons_1~v70:0:0 = 1 + v70:0:0
The following rules are bounded:
f_221(sum~cons_1~v70:0:0) -> f_221(v70:0:0) :|: v70:0:0 > -1 && sum~cons_1~v70:0:0 = 1 + v70:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
