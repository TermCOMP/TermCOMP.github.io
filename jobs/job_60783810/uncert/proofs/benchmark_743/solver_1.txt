YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Z1SCj.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 21 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 466 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 45 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 9 ms]
(12) AND
    (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) RankingReductionPairProof [EQUIVALENT, 1 ms]
        (17) IntTRS
        (18) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (21) YES
    (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (26) IntTRS
        (27) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (28) IntTRS
        (29) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (30) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Z1SCj.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Z1SCj.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "f" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %5
		%7 = icmp eq %6 0
		br %7, %8, %10
	8:
		%9 = load %4
		store %9, %3
		br %23
	10:
		%11 = load %4
		%12 = icmp eq %11 0
		br %12, %13, %18
	13:
		%14 = load %5
		%15 = load %5
		%16 = sub i32 %15, 1
		%17 = call i32 @f(i32 %14, i32 %16)
		store %17, %3
		br %23
	18:
		%19 = load %5
		%20 = load %4
		%21 = sub i32 %20, 1
		%22 = call i32 @f(i32 %19, i32 %21)
		store %22, %3
		br %23
	23:
		%24 = load %3
		ret %24

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 41
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = load %2
		%7 = icmp sge %6 0
		br %7, %8, %15
	8:
		%9 = load %3
		%10 = icmp sge %9 0
		br %10, %11, %15
	11:
		%12 = load %2
		%13 = load %3
		%14 = call i32 @f(i32 %12, i32 %13)
		br %15
	15:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 30 rulesP rules:
f_227(v50, v51, v52, v53, 3, 0, 1, 4) -> f_228(v50, v51, v52, v54, v53, v55, 3, 0, 1, 4) :|: 1 <= v54 && v55 = 3 + v54 && 4 <= v55
f_228(v50, v51, v52, v54, v53, v55, 3, 0, 1, 4) -> f_229(v50, v51, v52, v54, v56, v53, v55, v57, 3, 0, 1, 4) :|: 1 <= v56 && v57 = 3 + v56 && 4 <= v57
f_229(v50, v51, v52, v54, v56, v53, v55, v57, 3, 0, 1, 4) -> f_230(v50, v51, v52, v54, v56, v53, v55, v57, 3, 0, 1, 4) :|: TRUE
f_230(v50, v51, v52, v54, v56, v53, v55, v57, 3, 0, 1, 4) -> f_231(v50, v51, v52, v54, v56, v53, v55, v57, 3, 0, 1, 4) :|: TRUE
f_231(v50, v51, v52, v54, v56, v53, v55, v57, 3, 0, 1, 4) -> f_232(v50, v51, v52, v54, v56, v53, v55, v57, 3, 0, 1, 4) :|: TRUE
f_232(v50, v51, v52, v54, v56, v53, v55, v57, 3, 0, 1, 4) -> f_233(v50, v51, v52, v54, v56, v53, v55, v57, 3, 0, 1, 4) :|: TRUE
f_233(v50, v51, v52, v54, v56, v53, v55, v57, 3, 0, 1, 4) -> f_234(v50, v51, v52, v54, v56, v53, v55, v57, 3, 0, 1, 4) :|: 0 = 0
f_234(v50, v51, v52, v54, v56, v53, v55, v57, 3, 0, 1, 4) -> f_236(v50, v51, v52, v54, v56, v53, v55, v57, 3, 0, 1, 4) :|: v51 != 0
f_236(v50, v51, v52, v54, v56, v53, v55, v57, 3, 0, 1, 4) -> f_238(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) :|: 0 = 0
f_238(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) -> f_240(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) :|: TRUE
f_240(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) -> f_242(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) :|: 0 = 0
f_242(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) -> f_244(0, v51, v52, v54, v56, v53, v55, v57, 3, 1, 4) :|: v50 = 0
f_242(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) -> f_245(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) :|: v50 != 0
f_244(0, v51, v52, v54, v56, v53, v55, v57, 3, 1, 4) -> f_247(0, v51, v52, v54, v56, 1, v53, v55, v57, 3, 4) :|: 0 = 0
f_247(0, v51, v52, v54, v56, 1, v53, v55, v57, 3, 4) -> f_250(0, v51, v52, v54, v56, 1, v53, v55, v57, 3, 4) :|: TRUE
f_250(0, v51, v52, v54, v56, 1, v53, v55, v57, 3, 4) -> f_253(0, v51, v52, v54, v56, 1, v53, v55, v57, 3, 4) :|: 0 = 0
f_253(0, v51, v52, v54, v56, 1, v53, v55, v57, 3, 4) -> f_256(0, v51, v52, v54, v56, 1, v53, v55, v57, 3, 4) :|: 0 = 0
f_256(0, v51, v52, v54, v56, 1, v53, v55, v57, 3, 4) -> f_259(0, v51, v52, v54, v56, 1, v72, v53, v55, v57, 3, 4) :|: 1 + v72 = v51 && 0 <= v72
f_259(0, v51, v52, v54, v56, 1, v72, v53, v55, v57, 3, 4) -> f_261(v51, v72, v52, v53, v54, v55, v56, v57, 0, 1, 3, 4) :|: 0 = 0
f_261(v51, v72, v52, v53, v54, v55, v56, v57, 0, 1, 3, 4) -> f_263(v51, v72, v52, v53, v54, v55, v56, v57, 0, 3, 1, 4) :|: TRUE
f_263(v51, v72, v52, v53, v54, v55, v56, v57, 0, 3, 1, 4) -> f_226(v51, v72, 0) :|: TRUE
f_226(v50, v51, 0) -> f_227(v50, v51, v52, v53, 3, 0, 1, 4) :|: 1 <= v52 && v53 = 3 + v52 && 4 <= v53
f_245(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) -> f_248(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) :|: 0 = 0
f_248(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) -> f_251(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) :|: TRUE
f_251(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) -> f_254(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) :|: 0 = 0
f_254(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) -> f_257(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) :|: 0 = 0
f_257(v50, v51, v52, v54, v56, 0, v53, v55, v57, 3, 1, 4) -> f_260(v50, v51, v52, v54, v56, 0, v73, v53, v55, v57, 3, 1, 4) :|: 1 + v73 = v50 && 0 <= v73
f_260(v50, v51, v52, v54, v56, 0, v73, v53, v55, v57, 3, 1, 4) -> f_262(v51, v73, v52, v53, v54, v55, v56, v57, v50, 0, 3, 1, 4) :|: 0 = 0
f_262(v51, v73, v52, v53, v54, v55, v56, v57, v50, 0, 3, 1, 4) -> f_264(v51, v73, v52, v53, v54, v55, v56, v57, v50, 3, 1, 4, 0) :|: TRUE
f_264(v51, v73, v52, v53, v54, v55, v56, v57, v50, 3, 1, 4, 0) -> f_226(v51, v73, 0) :|: TRUE
Combined rules. Obtained 3 rulesP rules:
f_227(0, 1 + v72:0, v52:0, v53:0, 3, 0, 1, 4) -> f_227(1 + v72:0, v72:0, v52:1, 3 + v52:1, 3, 0, 1, 4) :|: v56:0 > 0 && v54:0 > 0 && v72:0 > -1 && v52:1 > 0
f_227(1 + v73:0, v51:0, v52:0, v53:0, 3, 0, 1, 4) -> f_227(v51:0, v73:0, v52:1, 3 + v52:1, 3, 0, 1, 4) :|: v56:0 > 0 && v54:0 > 0 && v51:0 < 0 && v73:0 > -1 && v52:1 > 0
f_227(1 + v73:0, v51:0, v52:0, v53:0, 3, 0, 1, 4) -> f_227(v51:0, v73:0, v52:1, 3 + v52:1, 3, 0, 1, 4) :|: v56:0 > 0 && v54:0 > 0 && v51:0 > 0 && v73:0 > -1 && v52:1 > 0
Filtered unneeded arguments:
   f_227(x1, x2, x3, x4, x5, x6, x7, x8) -> f_227(x1, x2)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_227(cons_0, sum~cons_1~v72:0) -> f_227(1 + v72:0, v72:0) :|: v72:0 > -1 && cons_0 = 0 && sum~cons_1~v72:0 = 1 + v72:0
f_227(sum~cons_1~v73:0, v51:0) -> f_227(v51:0, v73:0) :|: v51:0 < 0 && v73:0 > -1 && sum~cons_1~v73:0 = 1 + v73:0
f_227(sum~cons_1~v73:0, v51:0) -> f_227(v51:0, v73:0) :|: v51:0 > 0 && v73:0 > -1 && sum~cons_1~v73:0 = 1 + v73:0

----------------------------------------

(8)
Obligation:
Rules:
f_227(cons_0, sum~cons_1~v72:0) -> f_227(1 + v72:0, v72:0) :|: v72:0 > -1 && cons_0 = 0 && sum~cons_1~v72:0 = 1 + v72:0
f_227(sum~cons_1~v73:0, v51:0) -> f_227(v51:0, v73:0) :|: v51:0 < 0 && v73:0 > -1 && sum~cons_1~v73:0 = 1 + v73:0
f_227(x, x1) -> f_227(x1, x2) :|: x1 > 0 && x2 > -1 && x = 1 + x2

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_227(cons_0, sum~cons_1~v72:0:0) -> f_227(1 + v72:0:0, v72:0:0) :|: v72:0:0 > -1 && cons_0 = 0 && sum~cons_1~v72:0:0 = 1 + v72:0:0
f_227(sum~cons_1~x2:0, x1:0) -> f_227(x1:0, x2:0) :|: x1:0 > 0 && x2:0 > -1 && sum~cons_1~x2:0 = 1 + x2:0
f_227(sum~cons_1~v73:0:0, v51:0:0) -> f_227(v51:0:0, v73:0:0) :|: v51:0:0 < 0 && v73:0:0 > -1 && sum~cons_1~v73:0:0 = 1 + v73:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_227(x, x1)] = -4 - 2*x - 3*x*x1 + 2*x^2 + x1 + 2*x1^2

The following rules are decreasing:
f_227(cons_0, sum~cons_1~v72:0:0) -> f_227(1 + v72:0:0, v72:0:0) :|: v72:0:0 > -1 && cons_0 = 0 && sum~cons_1~v72:0:0 = 1 + v72:0:0
The following rules are bounded:
f_227(sum~cons_1~v73:0:0, v51:0:0) -> f_227(v51:0:0, v73:0:0) :|: v51:0:0 < 0 && v73:0:0 > -1 && sum~cons_1~v73:0:0 = 1 + v73:0:0

----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:
Rules:
f_227(sum~cons_1~x2:0, x1:0) -> f_227(x1:0, x2:0) :|: x1:0 > 0 && x2:0 > -1 && sum~cons_1~x2:0 = 1 + x2:0
f_227(sum~cons_1~v73:0:0, v51:0:0) -> f_227(v51:0:0, v73:0:0) :|: v51:0:0 < 0 && v73:0:0 > -1 && sum~cons_1~v73:0:0 = 1 + v73:0:0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_227(sum~cons_1~x2:0:0, x1:0:0) -> f_227(x1:0:0, x2:0:0) :|: x1:0:0 > 0 && x2:0:0 > -1 && sum~cons_1~x2:0:0 = 1 + x2:0:0
f_227(sum~cons_1~v73:0:0:0, v51:0:0:0) -> f_227(v51:0:0:0, v73:0:0:0) :|: v51:0:0:0 < 0 && v73:0:0:0 > -1 && sum~cons_1~v73:0:0:0 = 1 + v73:0:0:0

----------------------------------------

(16) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_227 ] = 3*f_227_2 + 3*f_227_1

The following rules are decreasing:
f_227(sum~cons_1~x2:0:0, x1:0:0) -> f_227(x1:0:0, x2:0:0) :|: x1:0:0 > 0 && x2:0:0 > -1 && sum~cons_1~x2:0:0 = 1 + x2:0:0
f_227(sum~cons_1~v73:0:0:0, v51:0:0:0) -> f_227(v51:0:0:0, v73:0:0:0) :|: v51:0:0:0 < 0 && v73:0:0:0 > -1 && sum~cons_1~v73:0:0:0 = 1 + v73:0:0:0

The following rules are bounded:
f_227(sum~cons_1~x2:0:0, x1:0:0) -> f_227(x1:0:0, x2:0:0) :|: x1:0:0 > 0 && x2:0:0 > -1 && sum~cons_1~x2:0:0 = 1 + x2:0:0


----------------------------------------

(17)
Obligation:
Rules:
f_227(sum~cons_1~v73:0:0:0, v51:0:0:0) -> f_227(v51:0:0:0, v73:0:0:0) :|: v51:0:0:0 < 0 && v73:0:0:0 > -1 && sum~cons_1~v73:0:0:0 = 1 + v73:0:0:0

----------------------------------------

(18) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(19)
Obligation:
Rules:
f_227(sum~cons_1~v73:0:0:0:0, v51:0:0:0:0) -> f_227(v51:0:0:0:0, v73:0:0:0:0) :|: v51:0:0:0:0 < 0 && v73:0:0:0:0 > -1 && sum~cons_1~v73:0:0:0:0 = 1 + v73:0:0:0:0

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_227(x, x1)] = -x1

The following rules are decreasing:
f_227(sum~cons_1~v73:0:0:0:0, v51:0:0:0:0) -> f_227(v51:0:0:0:0, v73:0:0:0:0) :|: v51:0:0:0:0 < 0 && v73:0:0:0:0 > -1 && sum~cons_1~v73:0:0:0:0 = 1 + v73:0:0:0:0
The following rules are bounded:
f_227(sum~cons_1~v73:0:0:0:0, v51:0:0:0:0) -> f_227(v51:0:0:0:0, v73:0:0:0:0) :|: v51:0:0:0:0 < 0 && v73:0:0:0:0 > -1 && sum~cons_1~v73:0:0:0:0 = 1 + v73:0:0:0:0

----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Rules:
f_227(cons_0, sum~cons_1~v72:0:0) -> f_227(1 + v72:0:0, v72:0:0) :|: v72:0:0 > -1 && cons_0 = 0 && sum~cons_1~v72:0:0 = 1 + v72:0:0
f_227(sum~cons_1~x2:0, x1:0) -> f_227(x1:0, x2:0) :|: x1:0 > 0 && x2:0 > -1 && sum~cons_1~x2:0 = 1 + x2:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_227(cons_0, sum~cons_1~v72:0:0:0) -> f_227(1 + v72:0:0:0, v72:0:0:0) :|: v72:0:0:0 > -1 && cons_0 = 0 && sum~cons_1~v72:0:0:0 = 1 + v72:0:0:0
f_227(sum~cons_1~x2:0:0, x1:0:0) -> f_227(x1:0:0, x2:0:0) :|: x1:0:0 > 0 && x2:0:0 > -1 && sum~cons_1~x2:0:0 = 1 + x2:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_227(x, x1)] = -2*x - x*x1 + x^2 + x1^2

The following rules are decreasing:
f_227(cons_0, sum~cons_1~v72:0:0:0) -> f_227(1 + v72:0:0:0, v72:0:0:0) :|: v72:0:0:0 > -1 && cons_0 = 0 && sum~cons_1~v72:0:0:0 = 1 + v72:0:0:0
The following rules are bounded:
f_227(cons_0, sum~cons_1~v72:0:0:0) -> f_227(1 + v72:0:0:0, v72:0:0:0) :|: v72:0:0:0 > -1 && cons_0 = 0 && sum~cons_1~v72:0:0:0 = 1 + v72:0:0:0

----------------------------------------

(26)
Obligation:
Rules:
f_227(sum~cons_1~x2:0:0, x1:0:0) -> f_227(x1:0:0, x2:0:0) :|: x1:0:0 > 0 && x2:0:0 > -1 && sum~cons_1~x2:0:0 = 1 + x2:0:0

----------------------------------------

(27) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(28)
Obligation:
Rules:
f_227(sum~cons_1~x2:0:0:0, x1:0:0:0) -> f_227(x1:0:0:0, x2:0:0:0) :|: x1:0:0:0 > 0 && x2:0:0:0 > -1 && sum~cons_1~x2:0:0:0 = 1 + x2:0:0:0

----------------------------------------

(29) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_227(x, x1)] = x + x1

The following rules are decreasing:
f_227(sum~cons_1~x2:0:0:0, x1:0:0:0) -> f_227(x1:0:0:0, x2:0:0:0) :|: x1:0:0:0 > 0 && x2:0:0:0 > -1 && sum~cons_1~x2:0:0:0 = 1 + x2:0:0:0
The following rules are bounded:
f_227(sum~cons_1~x2:0:0:0, x1:0:0:0) -> f_227(x1:0:0:0, x2:0:0:0) :|: x1:0:0:0 > 0 && x2:0:0:0 > -1 && sum~cons_1~x2:0:0:0 = 1 + x2:0:0:0

----------------------------------------

(30)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
