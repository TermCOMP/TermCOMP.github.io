YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/xjO2f.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 120 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 26 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/xjO2f.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/xjO2f.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca [1048 x i32], align 16
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[1048 x i32] %2)
		br %3
	3:
		%4 = getelementptr %2, 0, 3
		%5 = load %4
		%6 = icmp sge %5 0
		br %6, %7, %12
	7:
		%8 = getelementptr %2, 0, 3
		%9 = load %8
		%10 = sub i32 %9, 1
		%11 = getelementptr %2, 0, 3
		store %10, %11
		br %3
	12:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_71(v1, v3, v5, v6, 1, v8, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) -> f_72(v1, v3, v5, v8, 1, v6, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) :|: 0 = 0
f_72(v1, v3, v5, v8, 1, v6, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) -> f_73(v1, v3, v5, v8, 1, v6, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) :|: 0 <= v8 && 1 <= v6
f_73(v1, v3, v5, v8, 1, v6, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) -> f_75(v1, v3, v5, v8, 1, v6, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) :|: 0 = 0
f_75(v1, v3, v5, v8, 1, v6, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) -> f_77(v1, v3, v5, v8, 1, v6, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) :|: TRUE
f_77(v1, v3, v5, v8, 1, v6, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) -> f_79(v1, v3, v5, v8, 1, v6, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) :|: v5 = 12 + v3
f_79(v1, v3, v5, v8, 1, v6, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) -> f_80(v1, v3, v5, v8, 1, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) :|: 0 = 0
f_80(v1, v3, v5, v8, 1, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) -> f_81(v1, v3, v5, v8, 1, v10, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) :|: 1 + v10 = v8 && 0 <= 1 + v10
f_81(v1, v3, v5, v8, 1, v10, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) -> f_82(v1, v3, v5, v8, 1, v10, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) :|: v5 = 12 + v3
f_82(v1, v3, v5, v8, 1, v10, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) -> f_83(v1, v3, v5, v8, 1, v10, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) :|: TRUE
f_83(v1, v3, v5, v8, 1, v10, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) -> f_84(v1, v3, v5, v8, 1, v10, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) :|: TRUE
f_84(v1, v3, v5, v8, 1, v10, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) -> f_70(v1, v3, v5, v8, 1, v10, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) :|: TRUE
f_70(v1, v3, v5, v6, 1, v8, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) -> f_71(v1, v3, v5, v6, 1, v8, v2, v4, 0, 3, 4191, 12, 4, 4192, 13) :|: v5 = 12 + v3
Combined rules. Obtained 1 rulesP rules:
f_71(v1:0, v3:0, 12 + v3:0, v6:0, 1, 1 + v10:0, v2:0, v4:0, 0, 3, 4191, 12, 4, 4192, 13) -> f_71(v1:0, v3:0, 12 + v3:0, 1 + v10:0, 1, v10:0, v2:0, v4:0, 0, 3, 4191, 12, 4, 4192, 13) :|: v6:0 > 0 && v10:0 > -2
Filtered unneeded arguments:
   f_71(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_71(x2, x3, x4, x6)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_71(v3:0, sum~cons_12~v3:0, v6:0, sum~cons_1~v10:0) -> f_71(v3:0, 12 + v3:0, 1 + v10:0, v10:0) :|: v6:0 > 0 && v10:0 > -2 && sum~cons_12~v3:0 = 12 + v3:0 && sum~cons_1~v10:0 = 1 + v10:0

----------------------------------------

(8)
Obligation:
Rules:
f_71(v3:0, sum~cons_12~v3:0, v6:0, sum~cons_1~v10:0) -> f_71(v3:0, 12 + v3:0, 1 + v10:0, v10:0) :|: v6:0 > 0 && v10:0 > -2 && sum~cons_12~v3:0 = 12 + v3:0 && sum~cons_1~v10:0 = 1 + v10:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_71(v3:0:0, sum~cons_12~v3:0:0, v6:0:0, sum~cons_1~v10:0:0) -> f_71(v3:0:0, 12 + v3:0:0, 1 + v10:0:0, v10:0:0) :|: v6:0:0 > 0 && v10:0:0 > -2 && sum~cons_12~v3:0:0 = 12 + v3:0:0 && sum~cons_1~v10:0:0 = 1 + v10:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_71(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_71(v3:0:0, sum~cons_12~v3:0:0, v6:0:0, sum~cons_1~v10:0:0) -> f_71(v3:0:0, 12 + v3:0:0, 1 + v10:0:0, v10:0:0) :|: v6:0:0 > 0 && v10:0:0 > -2 && sum~cons_12~v3:0:0 = 12 + v3:0:0 && sum~cons_1~v10:0:0 = 1 + v10:0:0
The following rules are bounded:
f_71(v3:0:0, sum~cons_12~v3:0:0, v6:0:0, sum~cons_1~v10:0:0) -> f_71(v3:0:0, 12 + v3:0:0, 1 + v10:0:0, v10:0:0) :|: v6:0:0 > 0 && v10:0:0 > -2 && sum~cons_12~v3:0:0 = 12 + v3:0:0 && sum~cons_1~v10:0:0 = 1 + v10:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
