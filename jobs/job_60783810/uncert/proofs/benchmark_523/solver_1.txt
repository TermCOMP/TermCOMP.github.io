YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/iUuZb.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1289 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 52 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (13) AND
            (14) IntTRS
                (15) TerminationGraphProcessor [EQUIVALENT, 3 ms]
                (16) IntTRS
                (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (18) IntTRS
                (19) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (20) IntTRS
                (21) RankingReductionPairProof [EQUIVALENT, 0 ms]
                (22) YES
            (23) IntTRS
                (24) TerminationGraphProcessor [EQUIVALENT, 10 ms]
                (25) IntTRS
                (26) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (27) IntTRS
                (28) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (29) IntTRS
                (30) RankingReductionPairProof [EQUIVALENT, 2 ms]
                (31) YES
    (32) LLVM Symbolic Execution SCC
        (33) SCC2IRS [SOUND, 32 ms]
        (34) IntTRS
        (35) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (36) IntTRS
        (37) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (38) YES
    (39) LLVM Symbolic Execution SCC
        (40) SCC2IRS [SOUND, 34 ms]
        (41) IntTRS
        (42) TerminationGraphProcessor [EQUIVALENT, 0 ms]
        (43) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/iUuZb.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/iUuZb.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sge %7 0
		br %8, %9, %12
	9:
		%10 = load %3
		%11 = icmp sgt %10 0
		br %12
	12:
		%13 = phi [0, %6], [%11, %9]
		br %13, %14, %30
	14:
		store 1, %3
		br %15
	15:
		%16 = load %2
		%17 = load %3
		%18 = icmp sgt %16 %17
		br %18, %19, %22
	19:
		%20 = load %3
		%21 = icmp sgt %20 0
		br %22
	22:
		%23 = phi [0, %15], [%21, %19]
		br %23, %24, %27
	24:
		%25 = load %3
		%26 = mul i32 2, %25
		store %26, %3
		br %15
	27:
		%28 = load %2
		%29 = sub i32 %28, 1
		store %29, %2
		br %6
	30:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 51 rulesP rules:
f_668(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) -> f_669(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) :|: 0 = 0
f_669(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) -> f_670(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) :|: 1 < v3160 && 3 <= v3163 && 3 <= v3158 && 4 <= v3166 && 2 <= v3165
f_669(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) -> f_671(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) :|: v3160 <= 1 && v3163 <= 2
f_670(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) -> f_672(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, v3165, 0, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) :|: 0 = 0
f_672(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, v3165, 0, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) -> f_674(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, v3165, 0, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) :|: TRUE
f_674(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, v3165, 0, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) -> f_676(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) :|: 0 = 0
f_676(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) -> f_678(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) :|: 0 = 0
f_678(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) -> f_680(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, v3165, v3166, v3163, v3167, v3168, v3169, 0, 3, 2, 4) :|: 0 = 0
f_680(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, v3165, v3166, v3163, v3167, v3168, v3169, 0, 3, 2, 4) -> f_714(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 1, v3165, v3166, v3163, v3167, v3168, v3169, 0, 3, 2, 4) :|: TRUE
f_714(v3535, v3536, v3537, v3538, v3539, v3540, 1, v3542, v3543, v3544, v3545, v3546, v3547, v3548, v3549, 0, 3, 2, 4) -> f_748(v3535, v3536, v3537, v3538, v3539, v3540, 1, v3542, v3543, v3544, v3545, v3546, v3547, v3548, v3549, 0, 3, 2, 4) :|: TRUE
f_748(v3848, v3849, v3850, v3851, v3852, v3853, 1, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, 0, 3, 2, 4) -> f_782(v3848, v3849, v3850, v3851, v3852, v3853, 1, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, 0, 3, 2, 4) :|: TRUE
f_782(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4165, v4166, v4167, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_784(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4165, v4166, v4167, v4168, v4169, v4170, v4171, 0, 3, 2, 4) :|: TRUE
f_784(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4165, v4166, v4167, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_786(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4165, v4167, v4168, v4169, v4170, v4171, 0, 3, 2, 4) :|: 0 = 0
f_786(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4165, v4167, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_788(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4165, v4208, v4168, v4169, v4170, v4171, 0, 3, 2, 4) :|: v4208 = 2 * v4165 && 2 <= v4208
f_788(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4165, v4208, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_790(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4165, v4208, v4168, v4169, v4170, v4171, 0, 3, 2, 4) :|: TRUE
f_790(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4165, v4208, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_793(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4165, v4208, v4168, v4169, v4170, v4171, 0, 3, 2, 4) :|: TRUE
f_793(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4165, v4208, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_796(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4165, v4208, v4168, v4169, v4170, v4171, 0, 3, 2, 4) :|: 0 = 0
f_796(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4165, v4208, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_799(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) :|: 0 = 0
f_799(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_802(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) :|: v4208 < v4162 && 3 <= v4162 && 4 <= v4168 && 4 <= v4160
f_799(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_803(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) :|: v4162 <= v4208
f_802(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_805(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) :|: 0 = 0
f_805(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_808(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) :|: TRUE
f_808(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_811(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) :|: 0 = 0
f_811(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_813(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) :|: 0 = 0
f_813(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_815(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) :|: 0 = 0
f_815(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_782(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4208, v4168, v4169, v4170, v4171, 0, 3, 2, 4) :|: TRUE
f_803(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, v4165, v4168, v4169, v4170, v4171, 0, 3, 2, 4) -> f_806(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, 0, v4165, v4168, v4169, v4170, v4171, 3, 2, 4) :|: 0 = 0
f_806(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, 0, v4165, v4168, v4169, v4170, v4171, 3, 2, 4) -> f_809(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, 0, v4165, v4168, v4169, v4170, v4171, 3, 2, 4) :|: 0 = 0
f_809(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, 0, v4165, v4168, v4169, v4170, v4171, 3, 2, 4) -> f_776(v4157, v4158, v4159, v4160, v4161, v4162, 1, v4164, v4208, 0, v4165, v4208, v4168, v4169, v4170, v4171, 3, 2, 4) :|: TRUE
f_776(v4087, v4088, v4089, v4090, v4091, v4092, 1, v4094, v4095, 0, v4097, v4098, v4099, v4100, v4101, v4102, 3, 2, 4) -> f_778(v4087, v4088, v4089, v4090, v4091, v4092, 1, v4094, v4095, 0, v4097, v4098, v4099, v4100, v4101, v4102, 3, 2, 4) :|: TRUE
f_778(v4087, v4088, v4089, v4090, v4091, v4092, 1, v4094, v4095, 0, v4097, v4098, v4099, v4100, v4101, v4102, 3, 2, 4) -> f_780(v4087, v4088, v4089, v4090, v4091, v4092, 1, v4094, v4095, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) :|: 0 = 0
f_780(v4087, v4088, v4089, v4090, v4091, v4092, 1, v4094, v4095, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) -> f_783(v4087, v4088, v4089, v4090, v4091, v4092, 1, v4094, v4095, 0, v4097, v4098, v4182, v4100, v4101, v4102, 3, 2, 4) :|: 1 + v4182 = v4092 && 0 <= 1 + v4182
f_783(v4087, v4088, v4089, v4090, v4091, v4092, 1, v4094, v4095, 0, v4097, v4098, v4182, v4100, v4101, v4102, 3, 2, 4) -> f_785(v4087, v4088, v4089, v4090, v4091, v4092, 1, v4094, v4095, 0, v4097, v4098, v4182, v4100, v4101, v4102, 3, 2, 4) :|: TRUE
f_785(v4087, v4088, v4089, v4090, v4091, v4092, 1, v4094, v4095, 0, v4097, v4098, v4182, v4100, v4101, v4102, 3, 2, 4) -> f_787(v4087, v4088, v4089, v4090, v4091, v4092, 1, v4094, v4095, 0, v4097, v4098, v4182, v4100, v4101, v4102, 3, 2, 4) :|: TRUE
f_787(v4087, v4088, v4089, v4090, v4091, v4092, 1, v4094, v4095, 0, v4097, v4098, v4182, v4100, v4101, v4102, 3, 2, 4) -> f_789(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4094, v4092, v4095, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) :|: 0 = 0
f_789(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4094, v4092, v4095, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) -> f_791(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4094, v4092, v4095, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) :|: 0 <= v4182 && 1 <= v4092
f_791(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4094, v4092, v4095, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) -> f_794(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4094, v4092, v4095, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) :|: 0 = 0
f_794(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4094, v4092, v4095, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) -> f_797(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4094, v4092, v4095, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) :|: TRUE
f_797(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4094, v4092, v4095, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) -> f_800(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4095, v4092, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) :|: 0 = 0
f_800(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4095, v4092, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) -> f_804(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4095, v4092, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) :|: 0 = 0
f_804(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4095, v4092, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) -> f_807(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4095, v4092, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) :|: 0 = 0
f_807(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4095, v4092, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) -> f_810(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4095, v4092, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) :|: TRUE
f_810(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4095, v4092, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) -> f_812(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4095, v4092, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) :|: TRUE
f_812(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4095, v4092, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) -> f_814(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4095, v4092, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) :|: TRUE
f_814(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4095, v4092, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) -> f_667(v4087, v4088, v4089, v4090, v4091, v4182, 1, v4095, v4092, 0, v4097, v4098, v4100, v4101, v4102, 3, 2, 4) :|: TRUE
f_667(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, v3163, 0, v3165, v3166, v3167, v3168, v3169, 3, 2, 4) -> f_668(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) :|: 0 = 0
f_671(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) -> f_673(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) :|: 0 = 0
f_673(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) -> f_675(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) :|: 0 = 0
f_675(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) -> f_708(v3155, v3156, v3157, v3158, v3159, v3160, 1, v3162, 1, 0, v3165, v3166, v3163, v3167, v3168, v3169, 3, 2, 4) :|: TRUE
f_708(v3465, v3466, v3467, v3468, v3469, v3470, 1, v3472, v3473, 0, v3475, v3476, v3477, v3478, v3479, v3480, 3, 2, 4) -> f_742(v3465, v3466, v3467, v3468, v3469, v3470, 1, v3472, v3473, 0, v3475, v3476, v3477, v3478, v3479, v3480, 3, 2, 4, 5) :|: TRUE
f_742(v3778, v3779, v3780, v3781, v3782, v3783, 1, v3785, v3786, 0, v3788, v3789, v3790, v3791, v3792, v3793, 3, 2, 4, 5) -> f_776(v3778, v3779, v3780, v3781, v3782, v3783, 1, v3785, v3786, 0, v3788, v3789, v3790, v3791, v3792, v3793, 3, 2, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_668(v3155:0, v3156:0, v3157:0, v3158:0, v3159:0, v3160:0, 1, v3162:0, 0, v3165:0, v3166:0, v3163:0, v3167:0, v3168:0, v3169:0, 3, 2, 4) -> f_799(v3155:0, v3156:0, v3157:0, v3158:0, v3159:0, v3160:0, 1, v3162:0, 2, 1, v3163:0, v3167:0, v3168:0, v3169:0, 0, 3, 2, 4) :|: v3163:0 > 2 && v3160:0 > 1 && v3158:0 > 2 && v3165:0 > 1 && v3166:0 > 3
f_799(v4157:0, v4158:0, v4159:0, v4160:0, v4161:0, 1 + v4182:0, 1, v4164:0, v4208:0, v4165:0, v4168:0, v4169:0, v4170:0, v4171:0, 0, 3, 2, 4) -> f_668(v4157:0, v4158:0, v4159:0, v4160:0, v4161:0, v4182:0, 1, v4208:0, 0, v4165:0, v4208:0, 1 + v4182:0, v4169:0, v4170:0, v4171:0, 3, 2, 4) :|: v4182:0 > -1 && v4208:0 >= 1 + v4182:0
f_668(v3155:0, v3156:0, v3157:0, v3158:0, v3159:0, 1 + v4182:0, 1, v3162:0, 0, v3165:0, v3166:0, v3163:0, v3167:0, v3168:0, v3169:0, 3, 2, 4) -> f_668(v3155:0, v3156:0, v3157:0, v3158:0, v3159:0, v4182:0, 1, 1, 0, v3165:0, v3166:0, 1 + v4182:0, v3167:0, v3168:0, v3169:0, 3, 2, 4) :|: v4182:0 > -1 && v4182:0 < 1 && v3163:0 < 3
f_799(v4157:0, v4158:0, v4159:0, v4160:0, v4161:0, v4162:0, 1, v4164:0, v4208:0, v4165:0, v4168:0, v4169:0, v4170:0, v4171:0, 0, 3, 2, 4) -> f_799(v4157:0, v4158:0, v4159:0, v4160:0, v4161:0, v4162:0, 1, v4164:0, 2 * v4208:0, v4208:0, v4168:0, v4169:0, v4170:0, v4171:0, 0, 3, 2, 4) :|: v4162:0 > 2 && v4208:0 < v4162:0 && v4168:0 > 3 && v4160:0 > 3 && 2 * v4208:0 > 1
Filtered unneeded arguments:
   f_668(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_668(x4, x6, x10, x11, x12)
   f_799(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_799(x4, x6, x9, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_668(v3158:0, v3160:0, v3165:0, v3166:0, v3163:0) -> f_799(v3158:0, v3160:0, 2, 1, v3163:0) :|: v3160:0 > 1 && v3163:0 > 2 && v3158:0 > 2 && v3166:0 > 3 && v3165:0 > 1
f_799(v4160:0, sum~cons_1~v4182:0, v4208:0, v4165:0, v4168:0) -> f_668(v4160:0, v4182:0, v4165:0, v4208:0, 1 + v4182:0) :|: v4182:0 > -1 && v4208:0 >= 1 + v4182:0 && sum~cons_1~v4182:0 = 1 + v4182:0
f_668(v3158:0, sum~cons_1~v4182:0, v3165:0, v3166:0, v3163:0) -> f_668(v3158:0, v4182:0, v3165:0, v3166:0, 1 + v4182:0) :|: v4182:0 < 1 && v3163:0 < 3 && v4182:0 > -1 && sum~cons_1~v4182:0 = 1 + v4182:0
f_799(v4160:0, v4162:0, v4208:0, v4165:0, v4168:0) -> f_799(v4160:0, v4162:0, 2 * v4208:0, v4208:0, v4168:0) :|: v4208:0 < v4162:0 && v4162:0 > 2 && v4168:0 > 3 && 2 * v4208:0 > 1 && v4160:0 > 3

----------------------------------------

(9)
Obligation:
Rules:
f_668(v3158:0, v3160:0, v3165:0, v3166:0, v3163:0) -> f_799(v3158:0, v3160:0, 2, 1, v3163:0) :|: v3160:0 > 1 && v3163:0 > 2 && v3158:0 > 2 && v3166:0 > 3 && v3165:0 > 1
f_799(v4160:0, sum~cons_1~v4182:0, v4208:0, v4165:0, v4168:0) -> f_668(v4160:0, v4182:0, v4165:0, v4208:0, 1 + v4182:0) :|: v4182:0 > -1 && v4208:0 >= 1 + v4182:0 && sum~cons_1~v4182:0 = 1 + v4182:0
f_668(x, x1, x2, x3, x4) -> f_668(x, x5, x2, x3, 1 + x5) :|: x5 < 1 && x4 < 3 && x5 > -1 && x1 = 1 + x5
f_799(x6, x7, x8, x9, x10) -> f_799(x6, x7, 2 * x8, x8, x10) :|: x8 < x7 && x7 > 2 && x10 > 3 && 2 * x8 > 1 && x6 > 3

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_799(v4160:0:0, sum~cons_1~v4182:0:0, v4208:0:0, v4165:0:0, v4168:0:0) -> f_668(v4160:0:0, v4182:0:0, v4165:0:0, v4208:0:0, 1 + v4182:0:0) :|: v4182:0:0 > -1 && v4208:0:0 >= 1 + v4182:0:0 && sum~cons_1~v4182:0:0 = 1 + v4182:0:0
f_668(v3158:0:0, v3160:0:0, v3165:0:0, v3166:0:0, v3163:0:0) -> f_799(v3158:0:0, v3160:0:0, 2, 1, v3163:0:0) :|: v3166:0:0 > 3 && v3165:0:0 > 1 && v3158:0:0 > 2 && v3163:0:0 > 2 && v3160:0:0 > 1
f_799(x6:0, x7:0, x8:0, x9:0, x10:0) -> f_799(x6:0, x7:0, 2 * x8:0, x8:0, x10:0) :|: 2 * x8:0 > 1 && x6:0 > 3 && x10:0 > 3 && x7:0 > 2 && x8:0 < x7:0
f_668(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_668(x:0, x5:0, x2:0, x3:0, 1 + x5:0) :|: x5:0 < 1 && x4:0 < 3 && x5:0 > -1 && sum~cons_1~x5:0 = 1 + x5:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_799(x, x1, x2, x3, x4)] = -3 + x + x1
[f_668(x5, x6, x7, x8, x9)] = -2 + x5 + x6

The following rules are decreasing:
f_668(v3158:0:0, v3160:0:0, v3165:0:0, v3166:0:0, v3163:0:0) -> f_799(v3158:0:0, v3160:0:0, 2, 1, v3163:0:0) :|: v3166:0:0 > 3 && v3165:0:0 > 1 && v3158:0:0 > 2 && v3163:0:0 > 2 && v3160:0:0 > 1
f_668(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_668(x:0, x5:0, x2:0, x3:0, 1 + x5:0) :|: x5:0 < 1 && x4:0 < 3 && x5:0 > -1 && sum~cons_1~x5:0 = 1 + x5:0
The following rules are bounded:
f_668(v3158:0:0, v3160:0:0, v3165:0:0, v3166:0:0, v3163:0:0) -> f_799(v3158:0:0, v3160:0:0, 2, 1, v3163:0:0) :|: v3166:0:0 > 3 && v3165:0:0 > 1 && v3158:0:0 > 2 && v3163:0:0 > 2 && v3160:0:0 > 1
f_799(x6:0, x7:0, x8:0, x9:0, x10:0) -> f_799(x6:0, x7:0, 2 * x8:0, x8:0, x10:0) :|: 2 * x8:0 > 1 && x6:0 > 3 && x10:0 > 3 && x7:0 > 2 && x8:0 < x7:0

----------------------------------------

(13)
Complex Obligation (AND)

----------------------------------------

(14)
Obligation:
Rules:
f_799(v4160:0:0, sum~cons_1~v4182:0:0, v4208:0:0, v4165:0:0, v4168:0:0) -> f_668(v4160:0:0, v4182:0:0, v4165:0:0, v4208:0:0, 1 + v4182:0:0) :|: v4182:0:0 > -1 && v4208:0:0 >= 1 + v4182:0:0 && sum~cons_1~v4182:0:0 = 1 + v4182:0:0
f_799(x6:0, x7:0, x8:0, x9:0, x10:0) -> f_799(x6:0, x7:0, 2 * x8:0, x8:0, x10:0) :|: 2 * x8:0 > 1 && x6:0 > 3 && x10:0 > 3 && x7:0 > 2 && x8:0 < x7:0

----------------------------------------

(15) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(16)
Obligation:
Rules:
f_799(x6:0, x7:0, x8:0, x9:0, x10:0) -> f_799(x6:0, x7:0, 2 * x8:0, x8:0, x10:0) :|: 2 * x8:0 > 1 && x6:0 > 3 && x10:0 > 3 && x7:0 > 2 && x8:0 < x7:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_799(x6:0:0, x7:0:0, x8:0:0, x9:0:0, x10:0:0) -> f_799(x6:0:0, x7:0:0, 2 * x8:0:0, x8:0:0, x10:0:0) :|: x7:0:0 > 2 && x8:0:0 < x7:0:0 && x10:0:0 > 3 && x6:0:0 > 3 && 2 * x8:0:0 > 1

----------------------------------------

(19) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_799(x1, x2, x3, x4, x5) -> f_799(x1, x2, x3, x5)

----------------------------------------

(20)
Obligation:
Rules:
f_799(x6:0:0, x7:0:0, x8:0:0, x10:0:0) -> f_799(x6:0:0, x7:0:0, 2 * x8:0:0, x10:0:0) :|: x7:0:0 > 2 && x8:0:0 < x7:0:0 && x10:0:0 > 3 && x6:0:0 > 3 && 2 * x8:0:0 > 1

----------------------------------------

(21) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_799 ] = f_799_2 + -1*f_799_3

The following rules are decreasing:
f_799(x6:0:0, x7:0:0, x8:0:0, x10:0:0) -> f_799(x6:0:0, x7:0:0, 2 * x8:0:0, x10:0:0) :|: x7:0:0 > 2 && x8:0:0 < x7:0:0 && x10:0:0 > 3 && x6:0:0 > 3 && 2 * x8:0:0 > 1

The following rules are bounded:
f_799(x6:0:0, x7:0:0, x8:0:0, x10:0:0) -> f_799(x6:0:0, x7:0:0, 2 * x8:0:0, x10:0:0) :|: x7:0:0 > 2 && x8:0:0 < x7:0:0 && x10:0:0 > 3 && x6:0:0 > 3 && 2 * x8:0:0 > 1


----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Rules:
f_799(v4160:0:0, sum~cons_1~v4182:0:0, v4208:0:0, v4165:0:0, v4168:0:0) -> f_668(v4160:0:0, v4182:0:0, v4165:0:0, v4208:0:0, 1 + v4182:0:0) :|: v4182:0:0 > -1 && v4208:0:0 >= 1 + v4182:0:0 && sum~cons_1~v4182:0:0 = 1 + v4182:0:0
f_668(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_668(x:0, x5:0, x2:0, x3:0, 1 + x5:0) :|: x5:0 < 1 && x4:0 < 3 && x5:0 > -1 && sum~cons_1~x5:0 = 1 + x5:0

----------------------------------------

(24) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(25)
Obligation:
Rules:
f_668(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_668(x:0, x5:0, x2:0, x3:0, 1 + x5:0) :|: x5:0 < 1 && x4:0 < 3 && x5:0 > -1 && sum~cons_1~x5:0 = 1 + x5:0

----------------------------------------

(26) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(27)
Obligation:
Rules:
f_668(x:0:0, sum~cons_1~x5:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_668(x:0:0, x5:0:0, x2:0:0, x3:0:0, 1 + x5:0:0) :|: x5:0:0 < 1 && x4:0:0 < 3 && x5:0:0 > -1 && sum~cons_1~x5:0:0 = 1 + x5:0:0

----------------------------------------

(28) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_668(x1, x2, x3, x4, x5) -> f_668(x2, x5)

----------------------------------------

(29)
Obligation:
Rules:
f_668(sum~cons_1~x5:0:0, x4:0:0) -> f_668(x5:0:0, 1 + x5:0:0) :|: x5:0:0 < 1 && x4:0:0 < 3 && x5:0:0 > -1 && sum~cons_1~x5:0:0 = 1 + x5:0:0

----------------------------------------

(30) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_668 ] = f_668_1

The following rules are decreasing:
f_668(sum~cons_1~x5:0:0, x4:0:0) -> f_668(x5:0:0, 1 + x5:0:0) :|: x5:0:0 < 1 && x4:0:0 < 3 && x5:0:0 > -1 && sum~cons_1~x5:0:0 = 1 + x5:0:0

The following rules are bounded:
f_668(sum~cons_1~x5:0:0, x4:0:0) -> f_668(x5:0:0, 1 + x5:0:0) :|: x5:0:0 < 1 && x4:0:0 < 3 && x5:0:0 > -1 && sum~cons_1~x5:0:0 = 1 + x5:0:0


----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
SCC
----------------------------------------

(33) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_292(v237, v238, v239, v240, v241, 1, v243, v244, v245, v246, v247, 0, 3, 2, 4) -> f_293(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) :|: 0 = 0
f_293(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) -> f_294(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) :|: v244 < v240 && 3 <= v240
f_294(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) -> f_296(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) :|: 0 = 0
f_296(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) -> f_298(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) :|: TRUE
f_298(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) -> f_300(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) :|: 0 = 0
f_300(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) -> f_302(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) :|: 0 = 0
f_302(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) -> f_304(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) :|: 0 = 0
f_304(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) -> f_306(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) :|: TRUE
f_306(v237, v238, v239, v240, v241, 1, v244, v243, v245, v246, v247, 0, 3, 2, 4) -> f_308(v237, v238, v239, v240, v241, 1, v244, v245, v246, v247, 0, 3, 2, 4) :|: 0 = 0
f_308(v237, v238, v239, v240, v241, 1, v244, v245, v246, v247, 0, 3, 2, 4) -> f_310(v237, v238, v239, v240, v241, 1, v244, v289, v245, v246, v247, 0, 3, 2, 4) :|: v289 = 2 * v244 && 4 <= v289
f_310(v237, v238, v239, v240, v241, 1, v244, v289, v245, v246, v247, 0, 3, 2, 4) -> f_312(v237, v238, v239, v240, v241, 1, v244, v289, v245, v246, v247, 0, 3, 2, 4) :|: TRUE
f_312(v237, v238, v239, v240, v241, 1, v244, v289, v245, v246, v247, 0, 3, 2, 4) -> f_314(v237, v238, v239, v240, v241, 1, v244, v289, v245, v246, v247, 0, 3, 2, 4) :|: TRUE
f_314(v237, v238, v239, v240, v241, 1, v244, v289, v245, v246, v247, 0, 3, 2, 4) -> f_291(v237, v238, v239, v240, v241, 1, v244, v289, v245, v246, v247, 0, 3, 2, 4) :|: TRUE
f_291(v237, v238, v239, v240, v241, 1, v243, v244, v245, v246, v247, 0, 3, 2, 4) -> f_292(v237, v238, v239, v240, v241, 1, v243, v244, v245, v246, v247, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_292(v237:0, v238:0, v239:0, v240:0, v241:0, 1, v243:0, v244:0, v245:0, v246:0, v247:0, 0, 3, 2, 4) -> f_292(v237:0, v238:0, v239:0, v240:0, v241:0, 1, v244:0, 2 * v244:0, v245:0, v246:0, v247:0, 0, 3, 2, 4) :|: v240:0 > 2 && 3 < 2 * v244:0 && v244:0 < v240:0
Filtered unneeded arguments:
   f_292(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_292(x4, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_292(v240:0, v244:0) -> f_292(v240:0, 2 * v244:0) :|: 3 < 2 * v244:0 && v244:0 < v240:0 && v240:0 > 2

----------------------------------------

(34)
Obligation:
Rules:
f_292(v240:0, v244:0) -> f_292(v240:0, 2 * v244:0) :|: 3 < 2 * v244:0 && v244:0 < v240:0 && v240:0 > 2

----------------------------------------

(35) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(36)
Obligation:
Rules:
f_292(v240:0:0, v244:0:0) -> f_292(v240:0:0, 2 * v244:0:0) :|: 3 < 2 * v244:0:0 && v244:0:0 < v240:0:0 && v240:0:0 > 2

----------------------------------------

(37) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_292(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_292(v240:0:0, v244:0:0) -> f_292(v240:0:0, 2 * v244:0:0) :|: 3 < 2 * v244:0:0 && v244:0:0 < v240:0:0 && v240:0:0 > 2
The following rules are bounded:
f_292(v240:0:0, v244:0:0) -> f_292(v240:0:0, 2 * v244:0:0) :|: 3 < 2 * v244:0:0 && v244:0:0 < v240:0:0 && v240:0:0 > 2

----------------------------------------

(38)
YES

----------------------------------------

(39)
Obligation:
SCC
----------------------------------------

(40) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_227(v112, v113, v114, v115, v116, v121, 1, v119, v117, 0, v122, v123, v124, 3, 4) -> f_230(v112, v113, v114, 1, v116, 0, v119, v122, v123, v124, 3, 4) :|: 0 <= v121 && v117 = 1 && v121 = 0 && 0 = 0
f_230(v112, v113, v114, 1, v116, 0, v119, v122, v123, v124, 3, 4) -> f_234(v112, v113, v114, 1, v116, 0, v119, v122, v123, v124, 3, 4) :|: 0 = 0
f_234(v112, v113, v114, 1, v116, 0, v119, v122, v123, v124, 3, 4) -> f_238(v112, v113, v114, 1, v116, 0, v119, v122, v123, v124, 3, 4) :|: TRUE
f_238(v112, v113, v114, 1, v116, 0, v119, v122, v123, v124, 3, 4) -> f_242(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) :|: 0 = 0
f_242(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) -> f_246(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) :|: 0 = 0
f_246(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) -> f_249(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) :|: 0 = 0
f_249(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) -> f_252(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) :|: TRUE
f_252(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) -> f_255(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) :|: TRUE
f_255(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) -> f_258(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) :|: TRUE
f_258(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) -> f_260(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) :|: 0 = 0
f_260(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) -> f_262(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) :|: 0 = 0
f_262(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) -> f_265(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) :|: 0 = 0
f_265(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) -> f_268(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) :|: 0 = 0
f_268(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) -> f_271(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) :|: TRUE
f_271(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) -> f_274(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) :|: 0 = 0
f_274(v112, v113, v114, 1, v116, 0, v122, v123, v124, 3, 4) -> f_277(v112, v113, v114, 1, v116, 0, -1, v122, v123, v124, 3, 4) :|: 0 = 0
f_277(v112, v113, v114, 1, v116, 0, -1, v122, v123, v124, 3, 4) -> f_280(v112, v113, v114, 1, v116, 0, -1, v122, v123, v124, 3, 4) :|: TRUE
f_280(v112, v113, v114, 1, v116, 0, -1, v122, v123, v124, 3, 4) -> f_283(v112, v113, v114, 1, v116, 0, -1, v122, v123, v124, 3, 4) :|: TRUE
f_283(v112, v113, v114, 1, v116, 0, -1, v122, v123, v124, 3, 4) -> f_224(v112, v113, v114, 1, v116, 0, 1, 1, 0, -1, v122, v123, v124, 3, 4) :|: TRUE
f_224(v112, v113, v114, v115, v116, v117, 1, v119, 0, v121, v122, v123, v124, 3, 4) -> f_227(v112, v113, v114, v115, v116, v121, 1, v119, v117, 0, v122, v123, v124, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_227(v112:0, v113:0, v114:0, v115:0, v116:0, 0, 1, v119:0, 1, 0, v122:0, v123:0, v124:0, 3, 4) -> f_227(v112:0, v113:0, v114:0, 1, v116:0, -1, 1, 1, 0, 0, v122:0, v123:0, v124:0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_227(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_227(x6, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_227(cons_0, cons_1) -> f_227(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(41)
Obligation:
Rules:
f_227(cons_0, cons_1) -> f_227(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(42) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(43)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
