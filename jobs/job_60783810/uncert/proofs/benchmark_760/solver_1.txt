YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/HfNV8.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 517 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 8 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 11 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 7 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/HfNV8.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/HfNV8.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = icmp ne %7 0
		br %8, %9, %10
	9:
		store 1, %4
		br %11
	10:
		store -1, %4
		br %11
	11:
		br %12
	12:
		%13 = load %2
		%14 = icmp slt %13 100
		br %14, %15, %18
	15:
		%16 = load %3
		%17 = icmp slt %16 100
		br %18
	18:
		%19 = phi [0, %12], [%17, %15]
		br %19, %20, %27
	20:
		%21 = load %2
		%22 = load %4
		%23 = add i32 %21, %22
		store %23, %2
		%24 = load %3
		%25 = load %4
		%26 = sub i32 %24, %25
		store %26, %3
		br %12
	27:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_285(v715, v716, v717, v718, v719, v720, 0, v726, 1, v724, v722, -1, v727, v728, v729, v730, v731, 3, 99, 98, 100, 4) -> f_288(v715, v716, v717, v718, v719, v720, 0, v726, 1, v724, v722, -1, v727, v728, v729, v730, v731, 3, 99, 98, 100, 4) :|: 0 = 0
f_288(v715, v716, v717, v718, v719, v720, 0, v726, 1, v724, v722, -1, v727, v728, v729, v730, v731, 3, 99, 98, 100, 4) -> f_291(v715, v716, v717, v718, v719, v720, 0, v726, 1, v724, v722, -1, v727, v728, v729, v730, v731, 3, 99, 98, 100, 4) :|: TRUE
f_291(v715, v716, v717, v718, v719, v720, 0, v726, 1, v724, v722, -1, v727, v728, v729, v730, v731, 3, 99, 98, 100, 4) -> f_294(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, v722, -1, v724, v728, v729, v730, v731, 3, 99, 98, 100, 4) :|: 0 = 0
f_294(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, v722, -1, v724, v728, v729, v730, v731, 3, 99, 98, 100, 4) -> f_297(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, v722, -1, v724, v728, v729, v730, v731, 3, 99, 98, 4) :|: v727 < 100 && v724 <= 98 && v720 <= 98
f_297(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, v722, -1, v724, v728, v729, v730, v731, 3, 99, 98, 4) -> f_300(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, v722, -1, v724, v728, v729, v730, v731, 3, 99, 98, 4) :|: 0 = 0
f_300(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, v722, -1, v724, v728, v729, v730, v731, 3, 99, 98, 4) -> f_303(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, v722, -1, v724, v728, v729, v730, v731, 3, 99, 98, 4) :|: 0 = 0
f_303(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, v722, -1, v724, v728, v729, v730, v731, 3, 99, 98, 4) -> f_306(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, v722, -1, v724, v728, v729, v730, v731, 3, 99, 98, 4) :|: TRUE
f_306(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, v722, -1, v724, v728, v729, v730, v731, 3, 99, 98, 4) -> f_309(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v724, v728, v729, v730, v731, 3, 99, 98, 4) :|: 0 = 0
f_309(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v724, v728, v729, v730, v731, 3, 99, 98, 4) -> f_311(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v724, v728, v729, v730, v731, 3, 99, 98, 4) :|: 0 = 0
f_311(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v724, v728, v729, v730, v731, 3, 99, 98, 4) -> f_313(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v958, v724, v728, v729, v730, v731, 3, 99, 98, 4, 97) :|: 1 + v958 = v726 && v958 <= 97
f_313(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v958, v724, v728, v729, v730, v731, 3, 99, 98, 4, 97) -> f_315(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v958, v724, v728, v729, v730, v731, 3, 99, 98, 4, 97) :|: TRUE
f_315(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v958, v724, v728, v729, v730, v731, 3, 99, 98, 4, 97) -> f_317(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v958, v728, v729, v730, v731, 3, 99, 98, 4, 97) :|: 0 = 0
f_317(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v958, v728, v729, v730, v731, 3, 99, 98, 4, 97) -> f_319(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v958, v728, v729, v730, v731, 3, 99, 98, 4, 97) :|: 0 = 0
f_319(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v958, v728, v729, v730, v731, 3, 99, 98, 4, 97) -> f_321(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v958, v962, v728, v729, v730, v731, 3, 99, 98, 4, 97, 100) :|: v962 = 1 + v727 && v962 <= 100
f_321(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v958, v962, v728, v729, v730, v731, 3, 99, 98, 4, 97, 100) -> f_323(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v958, v962, v728, v729, v730, v731, 3, 99, 98, 4, 97, 100) :|: TRUE
f_323(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v958, v962, v728, v729, v730, v731, 3, 99, 98, 4, 97, 100) -> f_325(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v958, v962, v728, v729, v730, v731, 3, 99, 98, 4, 97, 100) :|: TRUE
f_325(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v958, v962, v728, v729, v730, v731, 3, 99, 98, 4, 97, 100) -> f_283(v715, v716, v717, v718, v719, v720, 0, v726, 1, v727, -1, v958, v962, v728, v729, v730, v731, 3, 99, 98, 100, 4) :|: TRUE
f_283(v715, v716, v717, v718, v719, v720, 0, v722, 1, v724, -1, v726, v727, v728, v729, v730, v731, 3, 99, 98, 100, 4) -> f_285(v715, v716, v717, v718, v719, v720, 0, v726, 1, v724, v722, -1, v727, v728, v729, v730, v731, 3, 99, 98, 100, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_285(v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, 0, 1 + v958:0, 1, v724:0, v722:0, -1, v727:0, v728:0, v729:0, v730:0, v731:0, 3, 99, 98, 100, 4) -> f_285(v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, 0, v958:0, 1, v727:0, 1 + v958:0, -1, 1 + v727:0, v728:0, v729:0, v730:0, v731:0, 3, 99, 98, 100, 4) :|: v724:0 < 99 && v727:0 < 100 && v720:0 < 99 && v958:0 < 98
Filtered unneeded arguments:
   f_285(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_285(x6, x8, x10, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_285(v720:0, sum~cons_1~v958:0, v724:0, v727:0) -> f_285(v720:0, v958:0, v727:0, 1 + v727:0) :|: v727:0 < 100 && v724:0 < 99 && v958:0 < 98 && v720:0 < 99 && sum~cons_1~v958:0 = 1 + v958:0

----------------------------------------

(9)
Obligation:
Rules:
f_285(v720:0, sum~cons_1~v958:0, v724:0, v727:0) -> f_285(v720:0, v958:0, v727:0, 1 + v727:0) :|: v727:0 < 100 && v724:0 < 99 && v958:0 < 98 && v720:0 < 99 && sum~cons_1~v958:0 = 1 + v958:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_285(v720:0:0, sum~cons_1~v958:0:0, v724:0:0, v727:0:0) -> f_285(v720:0:0, v958:0:0, v727:0:0, 1 + v727:0:0) :|: v958:0:0 < 98 && v720:0:0 < 99 && v724:0:0 < 99 && v727:0:0 < 100 && sum~cons_1~v958:0:0 = 1 + v958:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_285(x, x1, x2, x3)] = 99 - x3

The following rules are decreasing:
f_285(v720:0:0, sum~cons_1~v958:0:0, v724:0:0, v727:0:0) -> f_285(v720:0:0, v958:0:0, v727:0:0, 1 + v727:0:0) :|: v958:0:0 < 98 && v720:0:0 < 99 && v724:0:0 < 99 && v727:0:0 < 100 && sum~cons_1~v958:0:0 = 1 + v958:0:0
The following rules are bounded:
f_285(v720:0:0, sum~cons_1~v958:0:0, v724:0:0, v727:0:0) -> f_285(v720:0:0, v958:0:0, v727:0:0, 1 + v727:0:0) :|: v958:0:0 < 98 && v720:0:0 < 99 && v724:0:0 < 99 && v727:0:0 < 100 && sum~cons_1~v958:0:0 = 1 + v958:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_284(v684, v685, v686, v687, v688, v689, v690, 1, v694, v693, v692, v695, v696, v697, v698, v699, 0, 3, 99, 100, 98, 4) -> f_286(v684, v685, v686, v687, v688, v689, v690, 1, v694, v693, v692, v695, v696, v697, v698, v699, 0, 3, 98, 99, 4) :|: v694 < 100 && v692 <= 98 && v688 <= 98
f_286(v684, v685, v686, v687, v688, v689, v690, 1, v694, v693, v692, v695, v696, v697, v698, v699, 0, 3, 98, 99, 4) -> f_289(v684, v685, v686, v687, v688, v689, v690, 1, v694, v693, v692, v695, v696, v697, v698, v699, 0, 3, 98, 99, 4) :|: 0 = 0
f_289(v684, v685, v686, v687, v688, v689, v690, 1, v694, v693, v692, v695, v696, v697, v698, v699, 0, 3, 98, 99, 4) -> f_292(v684, v685, v686, v687, v688, v689, v690, 1, v694, v693, v692, v695, v696, v697, v698, v699, 0, 3, 98, 99, 4) :|: TRUE
f_292(v684, v685, v686, v687, v688, v689, v690, 1, v694, v693, v692, v695, v696, v697, v698, v699, 0, 3, 98, 99, 4) -> f_295(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v692, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4) :|: 0 = 0
f_295(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v692, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4) -> f_299(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v692, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4) :|: 0 = 0
f_299(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v692, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4) -> f_302(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v692, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4) :|: 0 = 0
f_302(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v692, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4) -> f_305(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v692, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4) :|: TRUE
f_305(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v692, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4) -> f_308(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4) :|: 0 = 0
f_308(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4) -> f_310(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4) :|: 0 = 0
f_310(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4) -> f_312(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v957, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4, 100) :|: v957 = 1 + v694 && v957 <= 100
f_312(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v957, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4, 100) -> f_314(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v957, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4, 100) :|: TRUE
f_314(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v957, v693, v696, v697, v698, v699, 0, 3, 98, 99, 4, 100) -> f_316(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v957, v696, v697, v698, v699, 0, 3, 98, 99, 4, 100) :|: 0 = 0
f_316(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v957, v696, v697, v698, v699, 0, 3, 98, 99, 4, 100) -> f_318(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v957, v696, v697, v698, v699, 0, 3, 98, 99, 4, 100) :|: 0 = 0
f_318(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v957, v696, v697, v698, v699, 0, 3, 98, 99, 4, 100) -> f_320(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v957, v961, v696, v697, v698, v699, 0, 3, 98, 99, 4, 100, 97) :|: 1 + v961 = v695 && v961 <= 97
f_320(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v957, v961, v696, v697, v698, v699, 0, 3, 98, 99, 4, 100, 97) -> f_322(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v957, v961, v696, v697, v698, v699, 0, 3, 98, 99, 4, 100, 97) :|: TRUE
f_322(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v957, v961, v696, v697, v698, v699, 0, 3, 98, 99, 4, 100, 97) -> f_324(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v957, v961, v696, v697, v698, v699, 0, 3, 98, 99, 4, 100, 97) :|: TRUE
f_324(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v957, v961, v696, v697, v698, v699, 0, 3, 98, 99, 4, 100, 97) -> f_281(v684, v685, v686, v687, v688, v689, v690, 1, v694, v695, v957, v961, v696, v697, v698, v699, 0, 3, 99, 100, 98, 4) :|: TRUE
f_281(v684, v685, v686, v687, v688, v689, v690, 1, v692, v693, v694, v695, v696, v697, v698, v699, 0, 3, 99, 100, 98, 4) -> f_284(v684, v685, v686, v687, v688, v689, v690, 1, v694, v693, v692, v695, v696, v697, v698, v699, 0, 3, 99, 100, 98, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_284(v684:0, v685:0, v686:0, v687:0, v688:0, v689:0, v690:0, 1, v694:0, v693:0, v692:0, 1 + v961:0, v696:0, v697:0, v698:0, v699:0, 0, 3, 99, 100, 98, 4) -> f_284(v684:0, v685:0, v686:0, v687:0, v688:0, v689:0, v690:0, 1, 1 + v694:0, 1 + v961:0, v694:0, v961:0, v696:0, v697:0, v698:0, v699:0, 0, 3, 99, 100, 98, 4) :|: v692:0 < 99 && v694:0 < 100 && v688:0 < 99 && v961:0 < 98
Filtered unneeded arguments:
   f_284(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_284(x5, x9, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_284(v688:0, v694:0, v692:0, sum~cons_1~v961:0) -> f_284(v688:0, 1 + v694:0, v694:0, v961:0) :|: v694:0 < 100 && v692:0 < 99 && v961:0 < 98 && v688:0 < 99 && sum~cons_1~v961:0 = 1 + v961:0

----------------------------------------

(16)
Obligation:
Rules:
f_284(v688:0, v694:0, v692:0, sum~cons_1~v961:0) -> f_284(v688:0, 1 + v694:0, v694:0, v961:0) :|: v694:0 < 100 && v692:0 < 99 && v961:0 < 98 && v688:0 < 99 && sum~cons_1~v961:0 = 1 + v961:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_284(v688:0:0, v694:0:0, v692:0:0, sum~cons_1~v961:0:0) -> f_284(v688:0:0, 1 + v694:0:0, v694:0:0, v961:0:0) :|: v961:0:0 < 98 && v688:0:0 < 99 && v692:0:0 < 99 && v694:0:0 < 100 && sum~cons_1~v961:0:0 = 1 + v961:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_284(x, x1, x2, x3)] = 99 - x1

The following rules are decreasing:
f_284(v688:0:0, v694:0:0, v692:0:0, sum~cons_1~v961:0:0) -> f_284(v688:0:0, 1 + v694:0:0, v694:0:0, v961:0:0) :|: v961:0:0 < 98 && v688:0:0 < 99 && v692:0:0 < 99 && v694:0:0 < 100 && sum~cons_1~v961:0:0 = 1 + v961:0:0
The following rules are bounded:
f_284(v688:0:0, v694:0:0, v692:0:0, sum~cons_1~v961:0:0) -> f_284(v688:0:0, 1 + v694:0:0, v694:0:0, v961:0:0) :|: v961:0:0 < 98 && v688:0:0 < 99 && v692:0:0 < 99 && v694:0:0 < 100 && sum~cons_1~v961:0:0 = 1 + v961:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
