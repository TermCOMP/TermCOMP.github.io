YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/tKFYN.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3831 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 147 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
(12) IntTRS
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IntTRS
(15) RankingReductionPairProof [EQUIVALENT, 3 ms]
(16) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/tKFYN.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/tKFYN.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "Ack" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = icmp eq %6 0
		br %7, %8, %11
	8:
		%9 = load %5
		%10 = add i32 %9, 1
		store %10, %3
		br %26
	11:
		%12 = load %5
		%13 = icmp eq %12 0
		br %13, %14, %18
	14:
		%15 = load %4
		%16 = sub i32 %15, 1
		%17 = call i32 @Ack(i32 %16, i32 1)
		store %17, %3
		br %26
	18:
		%19 = load %4
		%20 = sub i32 %19, 1
		%21 = load %4
		%22 = load %5
		%23 = sub i32 %22, 1
		%24 = call i32 @Ack(i32 %21, i32 %23)
		%25 = call i32 @Ack(i32 %20, i32 %24)
		store %25, %3
		br %26
	26:
		%27 = load %3
		ret %27

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 40
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 (...)* @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 (...)* @__VERIFIER_nondet_int()
		store %6, %3
		%7 = load %2
		%8 = icmp slt %7 0
		br %8, %12, %9
	9:
		%10 = load %3
		%11 = icmp slt %10 0
		br %11, %12, %13
	12:
		store 0, %1
		br %18
	13:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%14 = load %2
		%15 = load %3
		%16 = call i32 @Ack(i32 %14, i32 %15)
		store %16, %4
		%17 = load %4
		store %17, %1
		br %18
	18:
		%19 = load %1
		ret %19


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 88 rulesP rules:
f_311(v93, v94, v108, v95, v96, v97, v98, v99, v100, v101, v102, v109, 0, v104, v105, 3, 1, 4) -> f_313(v93, v94, v108, v115, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, 0, v104, v105, 3, 1, 4) :|: 1 <= v115 && v116 = 3 + v115 && 4 <= v116
f_313(v93, v94, v108, v115, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, 0, v104, v105, 3, 1, 4) -> f_314(v93, v94, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, 0, v104, v105, 3, 1, 4) :|: 1 <= v117 && v118 = 3 + v117 && 4 <= v118
f_314(v93, v94, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, 0, v104, v105, 3, 1, 4) -> f_315(v93, v94, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, 0, v104, v105, 3, 1, 4) :|: TRUE
f_315(v93, v94, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, 0, v104, v105, 3, 1, 4) -> f_316(v93, v94, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, 0, v104, v105, 3, 1, 4) :|: TRUE
f_316(v93, v94, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, 0, v104, v105, 3, 1, 4) -> f_317(v93, v94, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, 0, v104, v105, 3, 1, 4) :|: TRUE
f_317(v93, v94, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, 0, v104, v105, 3, 1, 4) -> f_318(v93, v94, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, 0, v104, v105, 3, 1, 4) :|: TRUE
f_318(v93, v94, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, 0, v104, v105, 3, 1, 4) -> f_319(v93, v94, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, 0, v104, v105, 3, 1, 4) :|: 0 = 0
f_319(v93, v94, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, 0, v104, v105, 3, 1, 4) -> f_321(v93, v94, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, 0, v104, v105, 3, 1, 4) :|: v93 != 0 && 1 <= v104
f_321(v93, v94, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, 0, v104, v105, 3, 1, 4) -> f_323(v93, v94, v108, v115, v117, 0, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) :|: 0 = 0
f_323(v93, v94, v108, v115, v117, 0, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_325(v93, v94, v108, v115, v117, 0, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) :|: TRUE
f_325(v93, v94, v108, v115, v117, 0, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_327(v93, v94, v108, v115, v117, 0, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) :|: 0 = 0
f_327(v93, v94, v108, v115, v117, 0, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_329(v93, 0, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) :|: v94 = 0
f_327(v93, v94, v108, v115, v117, 0, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_330(v93, v94, v108, v115, v117, 0, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) :|: v94 != 0
f_329(v93, 0, v108, v115, v117, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_332(v93, 0, v108, v115, v117, 1, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4) :|: 0 = 0
f_332(v93, 0, v108, v115, v117, 1, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4) -> f_335(v93, 0, v108, v115, v117, 1, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4) :|: TRUE
f_335(v93, 0, v108, v115, v117, 1, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4) -> f_338(v93, 0, v108, v115, v117, 1, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4) :|: 0 = 0
f_338(v93, 0, v108, v115, v117, 1, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4) -> f_341(v93, 0, v108, v115, v117, 1, v141, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4) :|: 1 + v141 = v93 && 0 <= v141
f_341(v93, 0, v108, v115, v117, 1, v141, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4) -> f_344(v141, 1, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 3, 4) :|: 0 = 0
f_344(v141, 1, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 3, 4) -> f_347(v141, 1, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 3, 4) :|: TRUE
f_347(v141, 1, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 3, 4) -> f_308(v141, 1, v95, v96, v97, v98, v99, v100, v101, v102, 0, v104, v105, 3, 1, 4) :|: TRUE
f_308(v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, 0, v104, v105, 3, 1, 4) -> f_311(v93, v94, v108, v95, v96, v97, v98, v99, v100, v101, v102, v109, 0, v104, v105, 3, 1, 4) :|: 1 <= v108 && v109 = 3 + v108 && 4 <= v109
f_330(v93, v94, v108, v115, v117, 0, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_333(v93, v94, v108, v115, v117, 0, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) :|: 0 = 0
f_333(v93, v94, v108, v115, v117, 0, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_336(v93, v94, v108, v115, v117, 0, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) :|: TRUE
f_336(v93, v94, v108, v115, v117, 0, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_339(v93, v94, v108, v115, v117, 0, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) :|: 0 = 0
f_339(v93, v94, v108, v115, v117, 0, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_342(v93, v94, v108, v115, v117, 0, v142, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) :|: 1 + v142 = v93 && 0 <= v142
f_342(v93, v94, v108, v115, v117, 0, v142, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_345(v93, v94, v108, v115, v117, 0, v142, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) :|: 0 = 0
f_345(v93, v94, v108, v115, v117, 0, v142, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_348(v93, v94, v108, v115, v117, 0, v142, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) :|: 0 = 0
f_348(v93, v94, v108, v115, v117, 0, v142, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_350(v93, v94, v108, v115, v117, 0, v142, v157, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) :|: 1 + v157 = v94 && 0 <= v157
f_350(v93, v94, v108, v115, v117, 0, v142, v157, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) :|: 0 = 0
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_356(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, 3, 1, 4) :|: TRUE
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_499(v93, 0, v1084, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) :|: TRUE
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_545(v93, 0, v1355, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) :|: TRUE
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_589(v93, 0, v1655, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) :|: TRUE
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_644(v93, 0, v1960, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) :|: TRUE
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_703(v93, 0, v1960, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) :|: TRUE
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_714(v93, v157, v2360, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) :|: TRUE
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_760(v93, 0, v2624, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) :|: TRUE
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_813(v93, 0, v2624, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) :|: TRUE
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_821(v93, v157, v3017, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) :|: TRUE
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_869(v93, 0, v3405, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) :|: TRUE
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_878(v93, v157, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) :|: TRUE
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_916(v93, v157, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) :|: TRUE
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_943(v93, 0, v3405, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) :|: TRUE
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_953(v93, v157, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) :|: TRUE
f_353(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_983(v93, v157, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) :|: TRUE
f_356(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, 3, 1, 4) -> f_308(v93, v157, v95, v96, v97, v98, v99, v100, v101, v102, 0, v104, v105, 3, 1, 4) :|: TRUE
f_499(v93, 0, v1084, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) -> f_504(v93, 1, v108, v115, v117, 0, v142, v1084, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4, 2) :|: 0 = 0
f_504(v93, 1, v108, v115, v117, 0, v142, v1084, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4, 2) -> f_506(v142, v1084, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) :|: 0 = 0
f_506(v142, v1084, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) -> f_508(v142, v1084, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) :|: TRUE
f_508(v142, v1084, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) -> f_308(v142, v1084, v95, v96, v97, v98, v99, v100, v101, v102, 0, v104, v105, 3, 1, 4) :|: TRUE
f_545(v93, 0, v1355, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) -> f_554(v93, 1, v108, v115, v117, 0, v142, v1355, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4, 2) :|: 0 = 0
f_554(v93, 1, v108, v115, v117, 0, v142, v1355, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4, 2) -> f_560(v142, v1355, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) :|: 0 = 0
f_560(v142, v1355, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) -> f_566(v142, v1355, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) :|: TRUE
f_566(v142, v1355, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) -> f_308(v142, v1355, v95, v96, v97, v98, v99, v100, v101, v102, 0, v104, v105, 3, 1, 4) :|: TRUE
f_589(v93, 0, v1655, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) -> f_601(v93, 1, v108, v115, v117, 0, v142, v1655, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4, 2) :|: 0 = 0
f_601(v93, 1, v108, v115, v117, 0, v142, v1655, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4, 2) -> f_609(v142, v1655, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) :|: 0 = 0
f_609(v142, v1655, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) -> f_621(v142, v1655, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) :|: TRUE
f_621(v142, v1655, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) -> f_308(v142, v1655, v95, v96, v97, v98, v99, v100, v101, v102, 0, v104, v105, 3, 1, 4) :|: TRUE
f_644(v93, 0, v1960, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) -> f_660(v93, 1, v108, v115, v117, 0, v142, v1960, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4, 2) :|: 0 = 0
f_660(v93, 1, v108, v115, v117, 0, v142, v1960, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4, 2) -> f_672(v142, v1960, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) :|: 0 = 0
f_672(v142, v1960, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) -> f_689(v142, v1960, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) :|: TRUE
f_689(v142, v1960, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) -> f_308(v142, v1960, v95, v96, v97, v98, v99, v100, v101, v102, 0, v104, v105, 3, 1, 4) :|: TRUE
f_703(v93, 0, v1960, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) -> f_644(v93, 0, v1960, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) :|: TRUE
f_714(v93, v157, v2360, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_722(v93, v94, v108, v115, v117, 0, v142, v157, v2360, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) :|: 0 = 0
f_722(v93, v94, v108, v115, v117, 0, v142, v157, v2360, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_730(v142, v2360, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, v94, v157, 3, 1, 4) :|: 0 = 0
f_730(v142, v2360, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, v94, v157, 3, 1, 4) -> f_738(v142, v2360, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, v94, 3, 1, 4) :|: TRUE
f_738(v142, v2360, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, v94, 3, 1, 4) -> f_308(v142, v2360, v95, v96, v97, v98, v99, v100, v101, v102, 0, v104, v105, 3, 1, 4) :|: TRUE
f_760(v93, 0, v2624, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) -> f_776(v93, 1, v108, v115, v117, 0, v142, v2624, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4, 2) :|: 0 = 0
f_776(v93, 1, v108, v115, v117, 0, v142, v2624, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4, 2) -> f_788(v142, v2624, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) :|: 0 = 0
f_788(v142, v2624, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) -> f_799(v142, v2624, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) :|: TRUE
f_799(v142, v2624, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) -> f_308(v142, v2624, v95, v96, v97, v98, v99, v100, v101, v102, 0, v104, v105, 3, 1, 4) :|: TRUE
f_813(v93, 0, v2624, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) -> f_760(v93, 0, v2624, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) :|: TRUE
f_821(v93, v157, v3017, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_838(v93, v94, v108, v115, v117, 0, v142, v157, v3017, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) :|: 0 = 0
f_838(v93, v94, v108, v115, v117, 0, v142, v157, v3017, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_848(v142, v3017, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, v94, v157, 3, 1, 4) :|: 0 = 0
f_848(v142, v3017, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, v94, v157, 3, 1, 4) -> f_858(v142, v3017, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, v94, 3, 1, 4) :|: TRUE
f_858(v142, v3017, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, v94, 3, 1, 4) -> f_308(v142, v3017, v95, v96, v97, v98, v99, v100, v101, v102, 0, v104, v105, 3, 1, 4) :|: TRUE
f_869(v93, 0, v3405, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) -> f_888(v93, 1, v108, v115, v117, 0, v142, v3405, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4, 2) :|: 0 = 0
f_888(v93, 1, v108, v115, v117, 0, v142, v3405, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 4, 2) -> f_902(v142, v3405, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) :|: 0 = 0
f_902(v142, v3405, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) -> f_925(v142, v3405, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) :|: TRUE
f_925(v142, v3405, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, 1, 3, 4, 2) -> f_308(v142, v3405, v95, v96, v97, v98, v99, v100, v101, v102, 0, v104, v105, 3, 1, 4) :|: TRUE
f_878(v93, v157, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_894(v93, v94, v108, v115, v117, 0, v142, v157, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) :|: 0 = 0
f_894(v93, v94, v108, v115, v117, 0, v142, v157, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v109, v116, v118, v104, v105, 3, 1, 4) -> f_907(v142, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, v94, v157, 3, 1, 4) :|: 0 = 0
f_907(v142, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, v94, v157, 3, 1, 4) -> f_930(v142, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, v94, 3, 1, 4) :|: TRUE
f_930(v142, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v93, v94, 3, 1, 4) -> f_308(v142, v3508, v95, v96, v97, v98, v99, v100, v101, v102, 0, v104, v105, 3, 1, 4) :|: TRUE
f_916(v93, v157, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_878(v93, v157, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) :|: TRUE
f_943(v93, 0, v3405, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) -> f_869(v93, 0, v3405, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, v104, v105, 1, v142, 3, 4, 2) :|: TRUE
f_953(v93, v157, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_916(v93, v157, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) :|: TRUE
f_983(v93, v157, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) -> f_953(v93, v157, v3508, v95, v96, v97, v98, v99, v100, v101, v102, v108, v109, v115, v116, v117, v118, 0, v104, v105, v94, v142, 3, 1, 4) :|: TRUE
Combined rules. Obtained 3 rulesP rules:
f_311(1 + v142:0, 1 + v157:0, v108:0, v95:0, v96:0, v97:0, v98:0, v99:0, v100:0, v101:0, v102:0, v109:0, 0, v104:0, v105:0, 3, 1, 4) -> f_311(1 + v142:0, v157:0, v108:1, v95:0, v96:0, v97:0, v98:0, v99:0, v100:0, v101:0, v102:0, 3 + v108:1, 0, v104:0, v105:0, 3, 1, 4) :|: v117:0 > 0 && v115:0 > 0 && v104:0 > 0 && v142:0 > -1 && v157:0 > -1 && v108:1 > 0
f_311(1 + v141:0, 0, v108:0, v95:0, v96:0, v97:0, v98:0, v99:0, v100:0, v101:0, v102:0, v109:0, 0, v104:0, v105:0, 3, 1, 4) -> f_311(v141:0, 1, v108:1, v95:0, v96:0, v97:0, v98:0, v99:0, v100:0, v101:0, v102:0, 3 + v108:1, 0, v104:0, v105:0, 3, 1, 4) :|: v117:0 > 0 && v115:0 > 0 && v104:0 > 0 && v141:0 > -1 && v108:1 > 0
f_311(1 + v142:0, 1 + v157:0, v108:0, v95:0, v96:0, v97:0, v98:0, v99:0, v100:0, v101:0, v102:0, v109:0, 0, v104:0, v105:0, 3, 1, 4) -> f_311(v142:0, v3508:0, v108:1, v95:0, v96:0, v97:0, v98:0, v99:0, v100:0, v101:0, v102:0, 3 + v108:1, 0, v104:0, v105:0, 3, 1, 4) :|: v117:0 > 0 && v115:0 > 0 && v104:0 > 0 && v142:0 > -1 && v157:0 > -1 && v108:1 > 0
Filtered unneeded arguments:
   f_311(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_311(x1, x2, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_311(sum~cons_1~v142:0, sum~cons_1~v157:0, v104:0) -> f_311(1 + v142:0, v157:0, v104:0) :|: v142:0 > -1 && v157:0 > -1 && v104:0 > 0 && sum~cons_1~v142:0 = 1 + v142:0 && sum~cons_1~v157:0 = 1 + v157:0
f_311(sum~cons_1~v141:0, cons_0, v104:0) -> f_311(v141:0, 1, v104:0) :|: v104:0 > 0 && v141:0 > -1 && sum~cons_1~v141:0 = 1 + v141:0 && cons_0 = 0
f_311(sum~cons_1~v142:0, sum~cons_1~v157:0, v104:0) -> f_311(v142:0, v3508:0, v104:0) :|: v142:0 > -1 && v157:0 > -1 && v104:0 > 0 && sum~cons_1~v142:0 = 1 + v142:0 && sum~cons_1~v157:0 = 1 + v157:0

----------------------------------------

(8)
Obligation:
Rules:
f_311(sum~cons_1~v142:0, sum~cons_1~v157:0, v104:0) -> f_311(1 + v142:0, v157:0, v104:0) :|: v142:0 > -1 && v157:0 > -1 && v104:0 > 0 && sum~cons_1~v142:0 = 1 + v142:0 && sum~cons_1~v157:0 = 1 + v157:0
f_311(x, x1, x2) -> f_311(x3, 1, x2) :|: x2 > 0 && x3 > -1 && x = 1 + x3 && x1 = 0
f_311(x4, x5, x6) -> f_311(x7, x8, x6) :|: x7 > -1 && x9 > -1 && x6 > 0 && x4 = 1 + x7 && x5 = 1 + x9

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_311(sum~cons_1~v142:0:0, sum~cons_1~v157:0:0, v104:0:0) -> f_311(1 + v142:0:0, v157:0:0, v104:0:0) :|: v142:0:0 > -1 && v157:0:0 > -1 && v104:0:0 > 0 && sum~cons_1~v142:0:0 = 1 + v142:0:0 && sum~cons_1~v157:0:0 = 1 + v157:0:0
f_311(sum~cons_1~x7:0, sum~cons_1~x9:0, x6:0) -> f_311(x7:0, x8:0, x6:0) :|: x7:0 > -1 && x9:0 > -1 && x6:0 > 0 && sum~cons_1~x7:0 = 1 + x7:0 && sum~cons_1~x9:0 = 1 + x9:0
f_311(sum~cons_1~x3:0, cons_0, x2:0) -> f_311(x3:0, 1, x2:0) :|: x2:0 > 0 && x3:0 > -1 && sum~cons_1~x3:0 = 1 + x3:0 && cons_0 = 0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_311(x, x1, x2)] = x

The following rules are decreasing:
f_311(sum~cons_1~x7:0, sum~cons_1~x9:0, x6:0) -> f_311(x7:0, x8:0, x6:0) :|: x7:0 > -1 && x9:0 > -1 && x6:0 > 0 && sum~cons_1~x7:0 = 1 + x7:0 && sum~cons_1~x9:0 = 1 + x9:0
f_311(sum~cons_1~x3:0, cons_0, x2:0) -> f_311(x3:0, 1, x2:0) :|: x2:0 > 0 && x3:0 > -1 && sum~cons_1~x3:0 = 1 + x3:0 && cons_0 = 0
The following rules are bounded:
f_311(sum~cons_1~v142:0:0, sum~cons_1~v157:0:0, v104:0:0) -> f_311(1 + v142:0:0, v157:0:0, v104:0:0) :|: v142:0:0 > -1 && v157:0:0 > -1 && v104:0:0 > 0 && sum~cons_1~v142:0:0 = 1 + v142:0:0 && sum~cons_1~v157:0:0 = 1 + v157:0:0
f_311(sum~cons_1~x7:0, sum~cons_1~x9:0, x6:0) -> f_311(x7:0, x8:0, x6:0) :|: x7:0 > -1 && x9:0 > -1 && x6:0 > 0 && sum~cons_1~x7:0 = 1 + x7:0 && sum~cons_1~x9:0 = 1 + x9:0
f_311(sum~cons_1~x3:0, cons_0, x2:0) -> f_311(x3:0, 1, x2:0) :|: x2:0 > 0 && x3:0 > -1 && sum~cons_1~x3:0 = 1 + x3:0 && cons_0 = 0

----------------------------------------

(12)
Obligation:
Rules:
f_311(sum~cons_1~v142:0:0, sum~cons_1~v157:0:0, v104:0:0) -> f_311(1 + v142:0:0, v157:0:0, v104:0:0) :|: v142:0:0 > -1 && v157:0:0 > -1 && v104:0:0 > 0 && sum~cons_1~v142:0:0 = 1 + v142:0:0 && sum~cons_1~v157:0:0 = 1 + v157:0:0

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f_311(sum~cons_1~v142:0:0:0, sum~cons_1~v157:0:0:0, v104:0:0:0) -> f_311(1 + v142:0:0:0, v157:0:0:0, v104:0:0:0) :|: v142:0:0:0 > -1 && v157:0:0:0 > -1 && v104:0:0:0 > 0 && sum~cons_1~v142:0:0:0 = 1 + v142:0:0:0 && sum~cons_1~v157:0:0:0 = 1 + v157:0:0:0

----------------------------------------

(15) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_311 ] = f_311_2

The following rules are decreasing:
f_311(sum~cons_1~v142:0:0:0, sum~cons_1~v157:0:0:0, v104:0:0:0) -> f_311(1 + v142:0:0:0, v157:0:0:0, v104:0:0:0) :|: v142:0:0:0 > -1 && v157:0:0:0 > -1 && v104:0:0:0 > 0 && sum~cons_1~v142:0:0:0 = 1 + v142:0:0:0 && sum~cons_1~v157:0:0:0 = 1 + v157:0:0:0

The following rules are bounded:
f_311(sum~cons_1~v142:0:0:0, sum~cons_1~v157:0:0:0, v104:0:0:0) -> f_311(1 + v142:0:0:0, v157:0:0:0, v104:0:0:0) :|: v142:0:0:0 > -1 && v157:0:0:0 > -1 && v104:0:0:0 > 0 && sum~cons_1~v142:0:0:0 = 1 + v142:0:0:0 && sum~cons_1~v157:0:0:0 = 1 + v157:0:0:0


----------------------------------------

(16)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.003s
