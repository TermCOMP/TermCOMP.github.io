YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/1Tve8.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2201 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 99 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 24 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) RankingReductionPairProof [EQUIVALENT, 13 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/1Tve8.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/1Tve8.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "fibonacci" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp slt %4 1
		br %5, %6, %7
	6:
		store 0, %2
		br %19
	7:
		%8 = load %3
		%9 = icmp eq %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %19
	11:
		%12 = load %3
		%13 = sub i32 %12, 1
		%14 = call i32 @fibonacci(i32 %13)
		%15 = load %3
		%16 = sub i32 %15, 2
		%17 = call i32 @fibonacci(i32 %16)
		%18 = add i32 %14, %17
		store %18, %2
		br %19
	19:
		%20 = load %2
		ret %20

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 36
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp sgt %5 46
		br %6, %11, %7
	7:
		%8 = load %2
		%9 = sext i32 %8 to i64
		%10 = icmp eq %9 -2147483648
		br %10, %11, %12
	11:
		store 0, %1
		br %22
	12:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%13 = load %2
		%14 = call i32 @fibonacci(i32 %13)
		store %14, %3
		%15 = load %3
		%16 = load %2
		%17 = sub i32 %16, 1
		%18 = icmp sge %15 %17
		br %18, %19, %20
	19:
		store 0, %1
		br %22
	20:
		br %21
	21:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	22:
		%23 = load %1
		ret %23


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 49 rulesP rules:
f_292(v76, v85, v77, v78, v79, v80, v81, v82, v86, 0, v84, 3, 46, 1, 4) -> f_295(v76, v85, v87, v77, v78, v79, v80, v81, v82, v86, v88, 0, v84, 3, 46, 1, 4) :|: 1 <= v87 && v88 = 3 + v87 && 4 <= v88
f_295(v76, v85, v87, v77, v78, v79, v80, v81, v82, v86, v88, 0, v84, 3, 46, 1, 4) -> f_296(v76, v85, v87, v77, v78, v79, v80, v81, v82, v86, v88, 0, v84, 3, 46, 1, 4) :|: TRUE
f_296(v76, v85, v87, v77, v78, v79, v80, v81, v82, v86, v88, 0, v84, 3, 46, 1, 4) -> f_297(v76, v85, v87, v77, v78, v79, v80, v81, v82, v86, v88, 0, v84, 3, 46, 1, 4) :|: TRUE
f_297(v76, v85, v87, v77, v78, v79, v80, v81, v82, v86, v88, 0, v84, 3, 46, 1, 4) -> f_298(v76, v85, v87, v77, v78, v79, v80, v81, v82, v86, v88, 0, v84, 3, 46, 1, 4) :|: 0 = 0
f_298(v76, v85, v87, v77, v78, v79, v80, v81, v82, v86, v88, 0, v84, 3, 46, 1, 4) -> f_300(v76, v85, v87, v77, v78, v79, v80, v81, v82, v86, v88, 0, v84, 3, 1, 46, 4) :|: 1 <= v76 && 1 <= v84
f_300(v76, v85, v87, v77, v78, v79, v80, v81, v82, v86, v88, 0, v84, 3, 1, 46, 4) -> f_302(v76, v85, v87, 0, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 46, 4) :|: 0 = 0
f_302(v76, v85, v87, 0, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 46, 4) -> f_304(v76, v85, v87, 0, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 46, 4) :|: TRUE
f_304(v76, v85, v87, 0, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 46, 4) -> f_306(v76, v85, v87, 0, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 46, 4) :|: 0 = 0
f_306(v76, v85, v87, 0, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 46, 4) -> f_309(v76, v85, v87, 0, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 2, 46, 1, 4) :|: v76 != 1 && 2 <= v76 && v76 <= 46 && 2 <= v84
f_309(v76, v85, v87, 0, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 2, 46, 1, 4) -> f_312(v76, v85, v87, 0, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 2, 46, 1, 4) :|: 0 = 0
f_312(v76, v85, v87, 0, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 2, 46, 1, 4) -> f_315(v76, v85, v87, 0, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 2, 46, 1, 4) :|: TRUE
f_315(v76, v85, v87, 0, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 2, 46, 1, 4) -> f_318(v76, v85, v87, 0, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 2, 46, 1, 4) :|: 0 = 0
f_318(v76, v85, v87, 0, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 2, 46, 1, 4) -> f_321(v76, v85, v87, 0, v102, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45) :|: 1 + v102 = v76 && 1 <= v102 && v102 <= 45
f_321(v76, v85, v87, 0, v102, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45) -> f_324(v102, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) :|: 0 = 0
f_324(v102, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) -> f_327(v102, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) :|: TRUE
f_324(v102, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) -> f_333(1, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, 2, 3, 4, 46) :|: TRUE
f_324(v102, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) -> f_703(v102, v1196, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) :|: TRUE
f_324(v102, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) -> f_733(v102, v1295, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) :|: TRUE
f_324(v102, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) -> f_779(v102, v1430, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) :|: TRUE
f_324(v102, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) -> f_820(v102, v1430, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) :|: TRUE
f_324(v102, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) -> f_846(v102, v1430, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) :|: TRUE
f_327(v102, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) -> f_289(v102, v77, v78, v79, v80, v81, v82, 0, v84, 3, 46, 1, 4) :|: TRUE
f_289(v76, v77, v78, v79, v80, v81, v82, 0, v84, 3, 46, 1, 4) -> f_292(v76, v85, v77, v78, v79, v80, v81, v82, v86, 0, v84, 3, 46, 1, 4) :|: 1 <= v85 && v86 = 3 + v85 && 4 <= v86
f_333(1, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, 2, 3, 4, 46) -> f_336(2, v85, v87, 0, 1, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 4, 46) :|: 0 = 0
f_336(2, v85, v87, 0, 1, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 4, 46) -> f_339(2, v85, v87, 0, 1, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 4, 46) :|: 0 = 0
f_339(2, v85, v87, 0, 1, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 4, 46) -> f_342(2, v85, v87, 0, 1, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 4, 46) :|: 0 = 0
f_342(2, v85, v87, 0, 1, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 4, 46) -> f_345(0, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, v84, 2, 1, 3, 4, 46) :|: 0 = 0
f_345(0, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, v84, 2, 1, 3, 4, 46) -> f_347(0, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, v84, 2, 3, 1, 4, 46) :|: TRUE
f_347(0, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, v84, 2, 3, 1, 4, 46) -> f_289(0, v77, v78, v79, v80, v81, v82, 0, v84, 3, 46, 1, 4) :|: TRUE
f_703(v102, v1196, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) -> f_711(v76, v85, v87, 0, v102, v1196, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45) :|: 0 = 0
f_711(v76, v85, v87, 0, v102, v1196, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45) -> f_714(v76, v85, v87, 0, v102, v1196, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45) :|: 0 = 0
f_714(v76, v85, v87, 0, v102, v1196, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45) -> f_717(v76, v85, v87, 0, v102, v1196, v1217, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45, 44) :|: 2 + v1217 = v76 && 0 <= v1217 && v1217 <= 44
f_717(v76, v85, v87, 0, v102, v1196, v1217, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45, 44) -> f_720(v1217, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, v102, v1196, 3, 1, 2, 46, 4, 45, 44) :|: 0 = 0
f_720(v1217, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, v102, v1196, 3, 1, 2, 46, 4, 45, 44) -> f_723(v1217, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 2, 46, 1, 4, 44) :|: TRUE
f_723(v1217, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 2, 46, 1, 4, 44) -> f_289(v1217, v77, v78, v79, v80, v81, v82, 0, v84, 3, 46, 1, 4) :|: TRUE
f_733(v102, v1295, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) -> f_741(v76, v85, v87, 0, v102, v1295, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45) :|: 0 = 0
f_741(v76, v85, v87, 0, v102, v1295, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45) -> f_749(v76, v85, v87, 0, v102, v1295, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45) :|: 0 = 0
f_749(v76, v85, v87, 0, v102, v1295, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45) -> f_757(v76, v85, v87, 0, v102, v1295, v1332, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45, 44) :|: 2 + v1332 = v76 && 0 <= v1332 && v1332 <= 44
f_757(v76, v85, v87, 0, v102, v1295, v1332, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45, 44) -> f_765(v1332, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, v102, v1295, 3, 1, 2, 46, 4, 45, 44) :|: 0 = 0
f_765(v1332, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, v102, v1295, 3, 1, 2, 46, 4, 45, 44) -> f_771(v1332, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 2, 46, 1, 4, 44) :|: TRUE
f_771(v1332, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 2, 46, 1, 4, 44) -> f_289(v1332, v77, v78, v79, v80, v81, v82, 0, v84, 3, 46, 1, 4) :|: TRUE
f_779(v102, v1430, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) -> f_788(v76, v85, v87, 0, v102, v1430, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45) :|: 0 = 0
f_788(v76, v85, v87, 0, v102, v1430, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45) -> f_797(v76, v85, v87, 0, v102, v1430, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45) :|: 0 = 0
f_797(v76, v85, v87, 0, v102, v1430, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45) -> f_804(v76, v85, v87, 0, v102, v1430, v1518, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45, 44) :|: 2 + v1518 = v76 && 0 <= v1518 && v1518 <= 44
f_804(v76, v85, v87, 0, v102, v1430, v1518, v77, v78, v79, v80, v81, v82, v86, v88, v84, 3, 1, 2, 46, 4, 45, 44) -> f_811(v1518, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, v102, v1430, 3, 1, 2, 46, 4, 45, 44) :|: 0 = 0
f_811(v1518, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, v102, v1430, 3, 1, 2, 46, 4, 45, 44) -> f_818(v1518, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 2, 46, 1, 4, 44) :|: TRUE
f_818(v1518, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 2, 46, 1, 4, 44) -> f_289(v1518, v77, v78, v79, v80, v81, v82, 0, v84, 3, 46, 1, 4) :|: TRUE
f_820(v102, v1430, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) -> f_779(v102, v1430, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) :|: TRUE
f_846(v102, v1430, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) -> f_820(v102, v1430, v77, v78, v79, v80, v81, v82, v85, v86, v87, v88, 0, v84, v76, 3, 1, 2, 46, 4, 45) :|: TRUE
Combined rules. Obtained 3 rulesP rules:
f_292(2 + v1217:0, v85:0, v77:0, v78:0, v79:0, v80:0, v81:0, v82:0, v86:0, 0, v84:0, 3, 46, 1, 4) -> f_292(v1217:0, v85:1, v77:0, v78:0, v79:0, v80:0, v81:0, v82:0, 3 + v85:1, 0, v84:0, 3, 46, 1, 4) :|: v1217:0 > -1 && v84:0 > 1 && v87:0 > 0 && v1217:0 < 45 && v102:0 > 0 && 2 + v1217:0 = 1 + v102:0 && v102:0 < 46 && v85:1 > 0
f_292(1 + v102:0, v85:0, v77:0, v78:0, v79:0, v80:0, v81:0, v82:0, v86:0, 0, v84:0, 3, 46, 1, 4) -> f_292(0, v85:1, v77:0, v78:0, v79:0, v80:0, v81:0, v82:0, 3 + v85:1, 0, v84:0, 3, 46, 1, 4) :|: v102:0 > 0 && v84:0 > 1 && v87:0 > 0 && v102:0 < 46 && v85:1 > 0
f_292(1 + v102:0, v85:0, v77:0, v78:0, v79:0, v80:0, v81:0, v82:0, v86:0, 0, v84:0, 3, 46, 1, 4) -> f_292(v102:0, v85:1, v77:0, v78:0, v79:0, v80:0, v81:0, v82:0, 3 + v85:1, 0, v84:0, 3, 46, 1, 4) :|: v102:0 > 0 && v84:0 > 1 && v87:0 > 0 && v102:0 < 46 && v85:1 > 0
Filtered unneeded arguments:
   f_292(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_292(x1, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_292(sum~cons_2~v1217:0, v84:0) -> f_292(v1217:0, v84:0) :|: v84:0 > 1 && v1217:0 < 45 && v1217:0 > -1 && sum~cons_2~v1217:0 = 2 + v1217:0
f_292(sum~cons_1~v102:0, v84:0) -> f_292(0, v84:0) :|: v84:0 > 1 && v102:0 < 46 && v102:0 > 0 && sum~cons_1~v102:0 = 1 + v102:0
f_292(sum~cons_1~v102:0, v84:0) -> f_292(v102:0, v84:0) :|: v84:0 > 1 && v102:0 < 46 && v102:0 > 0 && sum~cons_1~v102:0 = 1 + v102:0

----------------------------------------

(8)
Obligation:
Rules:
f_292(sum~cons_2~v1217:0, v84:0) -> f_292(v1217:0, v84:0) :|: v84:0 > 1 && v1217:0 < 45 && v1217:0 > -1 && sum~cons_2~v1217:0 = 2 + v1217:0
f_292(x, x1) -> f_292(0, x1) :|: x1 > 1 && x2 < 46 && x2 > 0 && x = 1 + x2
f_292(x3, x4) -> f_292(x5, x4) :|: x4 > 1 && x5 < 46 && x5 > 0 && x3 = 1 + x5

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(10)
Obligation:
Rules:
f_292(sum~cons_2~v1217:0, v84:0) -> f_292(v1217:0, v84:0) :|: v84:0 > 1 && v1217:0 < 45 && v1217:0 > -1 && sum~cons_2~v1217:0 = 2 + v1217:0
f_292(x3, x4) -> f_292(x5, x4) :|: x4 > 1 && x5 < 46 && x5 > 0 && x3 = 1 + x5

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_292(sum~cons_1~x5:0, x4:0) -> f_292(x5:0, x4:0) :|: x4:0 > 1 && x5:0 < 46 && x5:0 > 0 && sum~cons_1~x5:0 = 1 + x5:0
f_292(sum~cons_2~v1217:0:0, v84:0:0) -> f_292(v1217:0:0, v84:0:0) :|: v84:0:0 > 1 && v1217:0:0 < 45 && v1217:0:0 > -1 && sum~cons_2~v1217:0:0 = 2 + v1217:0:0

----------------------------------------

(13) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_292 ] = f_292_1

The following rules are decreasing:
f_292(sum~cons_1~x5:0, x4:0) -> f_292(x5:0, x4:0) :|: x4:0 > 1 && x5:0 < 46 && x5:0 > 0 && sum~cons_1~x5:0 = 1 + x5:0
f_292(sum~cons_2~v1217:0:0, v84:0:0) -> f_292(v1217:0:0, v84:0:0) :|: v84:0:0 > 1 && v1217:0:0 < 45 && v1217:0:0 > -1 && sum~cons_2~v1217:0:0 = 2 + v1217:0:0

The following rules are bounded:
f_292(sum~cons_1~x5:0, x4:0) -> f_292(x5:0, x4:0) :|: x4:0 > 1 && x5:0 < 46 && x5:0 > 0 && sum~cons_1~x5:0 = 1 + x5:0
f_292(sum~cons_2~v1217:0:0, v84:0:0) -> f_292(v1217:0:0, v84:0:0) :|: v84:0:0 > 1 && v1217:0:0 < 45 && v1217:0:0 > -1 && sum~cons_2~v1217:0:0 = 2 + v1217:0:0


----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
