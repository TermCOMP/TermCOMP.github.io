YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/r5Nye.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 400 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 9 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 9 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/r5Nye.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/r5Nye.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %4
		%6 = load %4
		store %6, %2
		br %7
	7:
		%8 = load %2
		%9 = icmp sgt %8 0
		br %9, %10, %21
	10:
		%11 = load %4
		store %11, %3
		br %12
	12:
		%13 = load %3
		%14 = icmp sgt %13 0
		br %14, %15, %18
	15:
		%16 = load %3
		%17 = sub i32 %16, 1
		store %17, %3
		br %12
	18:
		%19 = load %2
		%20 = sub i32 %19, 1
		store %20, %2
		br %7
	21:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 28 rulesP rules:
f_224(v231, v232, v233, v234, v235, v236, 1, v238, v240, v241, v242, v243, v244, v245, 0, 3, 2, 4) -> f_225(v231, v232, v233, v234, v235, v236, 1, v238, v247, v241, v242, v243, v244, v245, 0, 3, 2, 4) :|: 1 + v247 = v238 && 0 <= v247
f_225(v231, v232, v233, v234, v235, v236, 1, v238, v247, v241, v242, v243, v244, v245, 0, 3, 2, 4) -> f_226(v231, v232, v233, v234, v235, v236, 1, v238, v247, v241, v242, v243, v244, v245, 0, 3, 2, 4) :|: TRUE
f_226(v231, v232, v233, v234, v235, v236, 1, v238, v247, v241, v242, v243, v244, v245, 0, 3, 2, 4) -> f_227(v231, v232, v233, v234, v235, v236, 1, v238, v247, v241, v242, v243, v244, v245, 0, 3, 2, 4) :|: TRUE
f_227(v231, v232, v233, v234, v235, v236, 1, v238, v247, v241, v242, v243, v244, v245, 0, 3, 2, 4) -> f_228(v231, v232, v233, v234, v235, v236, 1, v247, v238, v241, v242, v243, v244, v245, 0, 3, 2, 4) :|: 0 = 0
f_228(v231, v232, v233, v234, v235, v236, 1, v247, v238, v241, v242, v243, v244, v245, 0, 3, 2, 4) -> f_229(v231, v232, v233, v234, v235, v236, 1, v247, v238, v241, v242, v243, v244, v245, 0, 3, 2, 4) :|: 0 < v247 && 2 <= v238
f_228(v231, v232, v233, v234, v235, v236, 1, v247, v238, v241, v242, v243, v244, v245, 0, 3, 2, 4) -> f_230(v231, v232, v233, v234, v235, v236, 1, 0, v241, v242, v243, v244, v245, 3, 2, 4) :|: v247 <= 0 && v238 = 1 && v247 = 0 && 0 = 0
f_229(v231, v232, v233, v234, v235, v236, 1, v247, v238, v241, v242, v243, v244, v245, 0, 3, 2, 4) -> f_231(v231, v232, v233, v234, v235, v236, 1, v247, v238, v241, v242, v243, v244, v245, 0, 3, 2, 4) :|: 0 = 0
f_231(v231, v232, v233, v234, v235, v236, 1, v247, v238, v241, v242, v243, v244, v245, 0, 3, 2, 4) -> f_233(v231, v232, v233, v234, v235, v236, 1, v247, v238, v241, v242, v243, v244, v245, 0, 3, 2, 4) :|: TRUE
f_233(v231, v232, v233, v234, v235, v236, 1, v247, v238, v241, v242, v243, v244, v245, 0, 3, 2, 4) -> f_223(v231, v232, v233, v234, v235, v236, 1, v247, v238, v247, v241, v242, v243, v244, v245, 0, 3, 2, 4) :|: TRUE
f_223(v231, v232, v233, v234, v235, v236, 1, v238, v239, v240, v241, v242, v243, v244, v245, 0, 3, 2, 4) -> f_224(v231, v232, v233, v234, v235, v236, 1, v238, v240, v241, v242, v243, v244, v245, 0, 3, 2, 4) :|: 0 = 0
f_230(v231, v232, v233, v234, v235, v236, 1, 0, v241, v242, v243, v244, v245, 3, 2, 4) -> f_232(v231, v232, v233, v234, v235, v236, 1, 0, v241, v242, v243, v244, v245, 3, 2, 4) :|: 0 = 0
f_232(v231, v232, v233, v234, v235, v236, 1, 0, v241, v242, v243, v244, v245, 3, 2, 4) -> f_234(v231, v232, v233, v234, v235, v236, 1, 0, v241, v242, v243, v244, v245, 3, 2, 4) :|: TRUE
f_234(v231, v232, v233, v234, v235, v236, 1, 0, v241, v242, v243, v244, v245, 3, 2, 4) -> f_235(v231, v232, v233, v234, v235, v236, 1, 0, v242, v243, v244, v245, 3, 2, 4) :|: 0 = 0
f_235(v231, v232, v233, v234, v235, v236, 1, 0, v242, v243, v244, v245, 3, 2, 4) -> f_236(v231, v232, v233, v234, v235, v236, 1, 0, v297, v242, v243, v244, v245, 3, 2, 4) :|: 1 + v297 = v236 && 0 <= v297
f_236(v231, v232, v233, v234, v235, v236, 1, 0, v297, v242, v243, v244, v245, 3, 2, 4) -> f_237(v231, v232, v233, v234, v235, v236, 1, 0, v297, v242, v243, v244, v245, 3, 2, 4) :|: TRUE
f_237(v231, v232, v233, v234, v235, v236, 1, 0, v297, v242, v243, v244, v245, 3, 2, 4) -> f_238(v231, v232, v233, v234, v235, v236, 1, 0, v297, v242, v243, v244, v245, 3, 2, 4) :|: TRUE
f_238(v231, v232, v233, v234, v235, v236, 1, 0, v297, v242, v243, v244, v245, 3, 2, 4) -> f_239(v231, v232, v233, v234, v235, v297, 1, 0, v236, v242, v243, v244, v245, 3, 2, 4) :|: 0 = 0
f_239(v231, v232, v233, v234, v235, v297, 1, 0, v236, v242, v243, v244, v245, 3, 2, 4) -> f_240(v231, v232, v233, v234, v235, v297, 1, 0, v236, v242, v243, v244, v245, 3, 2, 4) :|: 0 < v297 && 2 <= v236 && 3 <= v235
f_240(v231, v232, v233, v234, v235, v297, 1, 0, v236, v242, v243, v244, v245, 3, 2, 4) -> f_242(v231, v232, v233, v234, v235, v297, 1, 0, v236, v242, v243, v244, v245, 3, 2, 4) :|: 0 = 0
f_242(v231, v232, v233, v234, v235, v297, 1, 0, v236, v242, v243, v244, v245, 3, 2, 4) -> f_244(v231, v232, v233, v234, v235, v297, 1, 0, v236, v242, v243, v244, v245, 3, 2, 4) :|: TRUE
f_244(v231, v232, v233, v234, v235, v297, 1, 0, v236, v242, v243, v244, v245, 3, 2, 4) -> f_246(v231, v232, v233, v234, v235, v297, 1, 0, v236, v242, v243, v244, v245, 3, 2, 4) :|: 0 = 0
f_246(v231, v232, v233, v234, v235, v297, 1, 0, v236, v242, v243, v244, v245, 3, 2, 4) -> f_247(v231, v232, v233, v234, v235, v297, 1, 0, v236, v242, v243, v244, v245, 3, 2, 4) :|: TRUE
f_247(v231, v232, v233, v234, v235, v297, 1, 0, v236, v242, v243, v244, v245, 3, 2, 4) -> f_248(v231, v232, v233, v234, v235, v297, 1, 0, v236, v242, v243, v244, v245, 3, 2, 4) :|: TRUE
f_248(v231, v232, v233, v234, v235, v297, 1, 0, v236, v242, v243, v244, v245, 3, 2, 4) -> f_249(v231, v232, v233, v234, v235, v297, 1, 0, v236, v242, v243, v244, v245, 3, 2, 4) :|: TRUE
f_249(v327, v328, v329, v330, v331, v332, 1, 0, v335, v336, v337, v338, v339, 3, 2, 4) -> f_250(v327, v328, v329, v330, v331, v332, 1, 0, v335, v336, v337, v338, v339, 3, 2, 4) :|: 0 = 0
f_250(v327, v328, v329, v330, v331, v332, 1, 0, v335, v336, v337, v338, v339, 3, 2, 4) -> f_251(v327, v328, v329, v330, v331, v332, 1, 0, v335, v336, v337, v338, v339, 3, 2, 4) :|: 0 = 0
f_251(v327, v328, v329, v330, v331, v332, 1, 0, v335, v336, v337, v338, v339, 3, 2, 4) -> f_252(v327, v328, v329, v330, v331, v332, 1, 0, v335, v336, v337, v338, v339, 3, 2, 4) :|: TRUE
f_252(v327, v328, v329, v330, v331, v332, 1, 0, v335, v336, v337, v338, v339, 3, 2, 4) -> f_223(v327, v328, v329, v330, v331, v332, 1, v331, 1, 0, v335, v336, v337, v338, v339, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_224(v231:0, v232:0, v233:0, v234:0, v235:0, 1 + v297:0, 1, 1, v240:0, v241:0, v242:0, v243:0, v244:0, v245:0, 0, 3, 2, 4) -> f_224(v231:0, v232:0, v233:0, v234:0, v235:0, v297:0, 1, v235:0, 0, 1 + v297:0, v242:0, v243:0, v244:0, v245:0, 0, 3, 2, 4) :|: v297:0 > 0 && v235:0 > 2
f_224(v231:0, v232:0, v233:0, v234:0, v235:0, v236:0, 1, 1 + v247:0, v240:0, v241:0, v242:0, v243:0, v244:0, v245:0, 0, 3, 2, 4) -> f_224(v231:0, v232:0, v233:0, v234:0, v235:0, v236:0, 1, v247:0, v247:0, v241:0, v242:0, v243:0, v244:0, v245:0, 0, 3, 2, 4) :|: v247:0 > 0
Filtered unneeded arguments:
   f_224(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_224(x5, x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_224(v235:0, sum~cons_1~v297:0, cons_1) -> f_224(v235:0, v297:0, v235:0) :|: v297:0 > 0 && v235:0 > 2 && sum~cons_1~v297:0 = 1 + v297:0 && cons_1 = 1
f_224(v235:0, v236:0, sum~cons_1~v247:0) -> f_224(v235:0, v236:0, v247:0) :|: v247:0 > 0 && sum~cons_1~v247:0 = 1 + v247:0

----------------------------------------

(9)
Obligation:
Rules:
f_224(v235:0, sum~cons_1~v297:0, cons_1) -> f_224(v235:0, v297:0, v235:0) :|: v297:0 > 0 && v235:0 > 2 && sum~cons_1~v297:0 = 1 + v297:0 && cons_1 = 1
f_224(x, x1, x2) -> f_224(x, x1, x3) :|: x3 > 0 && x2 = 1 + x3

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_224(x:0, x1:0, sum~cons_1~x3:0) -> f_224(x:0, x1:0, x3:0) :|: x3:0 > 0 && sum~cons_1~x3:0 = 1 + x3:0
f_224(v235:0:0, sum~cons_1~v297:0:0, cons_1) -> f_224(v235:0:0, v297:0:0, v235:0:0) :|: v297:0:0 > 0 && v235:0:0 > 2 && sum~cons_1~v297:0:0 = 1 + v297:0:0 && cons_1 = 1

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_224(x, x1, x2)] = -1 + x + x*x1 + x1 + x1^2

The following rules are decreasing:
f_224(v235:0:0, sum~cons_1~v297:0:0, cons_1) -> f_224(v235:0:0, v297:0:0, v235:0:0) :|: v297:0:0 > 0 && v235:0:0 > 2 && sum~cons_1~v297:0:0 = 1 + v297:0:0 && cons_1 = 1
The following rules are bounded:
f_224(v235:0:0, sum~cons_1~v297:0:0, cons_1) -> f_224(v235:0:0, v297:0:0, v235:0:0) :|: v297:0:0 > 0 && v235:0:0 > 2 && sum~cons_1~v297:0:0 = 1 + v297:0:0 && cons_1 = 1

----------------------------------------

(13)
Obligation:
Rules:
f_224(x:0, x1:0, sum~cons_1~x3:0) -> f_224(x:0, x1:0, x3:0) :|: x3:0 > 0 && sum~cons_1~x3:0 = 1 + x3:0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_224(x:0:0, x1:0:0, sum~cons_1~x3:0:0) -> f_224(x:0:0, x1:0:0, x3:0:0) :|: x3:0:0 > 0 && sum~cons_1~x3:0:0 = 1 + x3:0:0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_224(x1, x2, x3) -> f_224(x3)

----------------------------------------

(17)
Obligation:
Rules:
f_224(sum~cons_1~x3:0:0) -> f_224(x3:0:0) :|: x3:0:0 > 0 && sum~cons_1~x3:0:0 = 1 + x3:0:0

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_224(x)] = x

The following rules are decreasing:
f_224(sum~cons_1~x3:0:0) -> f_224(x3:0:0) :|: x3:0:0 > 0 && sum~cons_1~x3:0:0 = 1 + x3:0:0
The following rules are bounded:
f_224(sum~cons_1~x3:0:0) -> f_224(x3:0:0) :|: x3:0:0 > 0 && sum~cons_1~x3:0:0 = 1 + x3:0:0

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 9 rulesP rules:
f_158(v34, v35, v36, v37, v38, 1, v41, v40, v42, v43, v44, v45, 0, 3, 4) -> f_159(v34, v35, v36, v37, v38, 1, v41, v40, v42, v43, v44, v45, 0, 3, 2, 4) :|: 0 < v41 && 2 <= v40 && 2 <= v38
f_159(v34, v35, v36, v37, v38, 1, v41, v40, v42, v43, v44, v45, 0, 3, 2, 4) -> f_161(v34, v35, v36, v37, v38, 1, v41, v40, v42, v43, v44, v45, 0, 3, 2, 4) :|: 0 = 0
f_161(v34, v35, v36, v37, v38, 1, v41, v40, v42, v43, v44, v45, 0, 3, 2, 4) -> f_163(v34, v35, v36, v37, v38, 1, v41, v40, v42, v43, v44, v45, 0, 3, 2, 4) :|: TRUE
f_163(v34, v35, v36, v37, v38, 1, v41, v40, v42, v43, v44, v45, 0, 3, 2, 4) -> f_165(v34, v35, v36, v37, v38, 1, v41, v42, v43, v44, v45, 0, 3, 2, 4) :|: 0 = 0
f_165(v34, v35, v36, v37, v38, 1, v41, v42, v43, v44, v45, 0, 3, 2, 4) -> f_167(v34, v35, v36, v37, v38, 1, v41, v47, v42, v43, v44, v45, 0, 3, 2, 4) :|: 1 + v47 = v41 && 0 <= v47
f_167(v34, v35, v36, v37, v38, 1, v41, v47, v42, v43, v44, v45, 0, 3, 2, 4) -> f_169(v34, v35, v36, v37, v38, 1, v41, v47, v42, v43, v44, v45, 0, 3, 2, 4) :|: TRUE
f_169(v34, v35, v36, v37, v38, 1, v41, v47, v42, v43, v44, v45, 0, 3, 2, 4) -> f_171(v34, v35, v36, v37, v38, 1, v41, v47, v42, v43, v44, v45, 0, 3, 2, 4) :|: TRUE
f_171(v34, v35, v36, v37, v38, 1, v41, v47, v42, v43, v44, v45, 0, 3, 2, 4) -> f_157(v34, v35, v36, v37, v38, 1, v41, v47, v42, v43, v44, v45, 0, 3, 4) :|: TRUE
f_157(v34, v35, v36, v37, v38, 1, v40, v41, v42, v43, v44, v45, 0, 3, 4) -> f_158(v34, v35, v36, v37, v38, 1, v41, v40, v42, v43, v44, v45, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_158(v34:0, v35:0, v36:0, v37:0, v38:0, 1, 1 + v47:0, v40:0, v42:0, v43:0, v44:0, v45:0, 0, 3, 4) -> f_158(v34:0, v35:0, v36:0, v37:0, v38:0, 1, v47:0, 1 + v47:0, v42:0, v43:0, v44:0, v45:0, 0, 3, 4) :|: v40:0 > 1 && v47:0 > -1 && v38:0 > 1
Filtered unneeded arguments:
   f_158(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_158(x5, x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_158(v38:0, sum~cons_1~v47:0, v40:0) -> f_158(v38:0, v47:0, 1 + v47:0) :|: v47:0 > -1 && v38:0 > 1 && v40:0 > 1 && sum~cons_1~v47:0 = 1 + v47:0

----------------------------------------

(22)
Obligation:
Rules:
f_158(v38:0, sum~cons_1~v47:0, v40:0) -> f_158(v38:0, v47:0, 1 + v47:0) :|: v47:0 > -1 && v38:0 > 1 && v40:0 > 1 && sum~cons_1~v47:0 = 1 + v47:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_158(v38:0:0, sum~cons_1~v47:0:0, v40:0:0) -> f_158(v38:0:0, v47:0:0, 1 + v47:0:0) :|: v47:0:0 > -1 && v38:0:0 > 1 && v40:0:0 > 1 && sum~cons_1~v47:0:0 = 1 + v47:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_158(x, x1, x2)] = x1

The following rules are decreasing:
f_158(v38:0:0, sum~cons_1~v47:0:0, v40:0:0) -> f_158(v38:0:0, v47:0:0, 1 + v47:0:0) :|: v47:0:0 > -1 && v38:0:0 > 1 && v40:0:0 > 1 && sum~cons_1~v47:0:0 = 1 + v47:0:0
The following rules are bounded:
f_158(v38:0:0, sum~cons_1~v47:0:0, v40:0:0) -> f_158(v38:0:0, v47:0:0, 1 + v47:0:0) :|: v47:0:0 > -1 && v38:0:0 > 1 && v40:0:0 > 1 && sum~cons_1~v47:0:0 = 1 + v47:0:0

----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
