YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/aIbTr.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 57 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1148 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 99 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 16 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/aIbTr.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/aIbTr.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_String" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 12
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i8, align 8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %1
		%4 = load %1
		%5 = icmp slt %4 1
		br %5, %6, %7
	6:
		store 1, %1
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		%8 = load %1
		%9 = sext i32 %8 to i64
		%10 = mul i64 %9, 1
		%11 = call noalias *i8 @malloc(i64 %10)
		store %11, %2
		%12 = load %2
		%13 = load %1
		%14 = sub i32 %13, 1
		%15 = sext i32 %14 to i64
		%16 = getelementptr %12, %15
		store 0, %16
		%17 = load %2
		ret %17

*BasicFunctionTypename: "cstrncmp" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 38
	0:
		%4 = alloca i32, align 4
		%5 = alloca *i8, align 8
		%6 = alloca *i8, align 8
		%7 = alloca i32, align 4
		%8 = alloca i8, align 1
		%9 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %9)
		%10 = load %7
		%11 = icmp eq %10 0
		br %11, %12, %13
	12:
		store 0, %4
		br %62
	13:
		br %14
	14:
		%15 = load %7
		%16 = add i32 %15, -1
		store %16, %7
		%17 = icmp sgt %15 0
		br %17, %18, %26
	18:
		%19 = load %5
		%20 = load %19
		%21 = sext i8 %20 to i32
		%22 = load %6
		%23 = load %22
		%24 = sext i8 %23 to i32
		%25 = icmp eq %21 %24
		br %26
	26:
		%27 = phi [0, %14], [%25, %18]
		br %27, %28, %42
	28:
		%29 = load %7
		%30 = icmp eq %29 0
		br %30, %36, %31
	31:
		%32 = load %5
		%33 = load %32
		%34 = sext i8 %33 to i32
		%35 = icmp eq %34 0
		br %35, %36, %37
	36:
		store 0, %4
		br %62
	37:
		%38 = load %5
		%39 = getelementptr %38, 1
		store %39, %5
		%40 = load %6
		%41 = getelementptr %40, 1
		store %41, %6
		br %14
	42:
		%43 = load %5
		%44 = load %43
		store %44, %8
		%45 = load %6
		%46 = load %45
		store %46, %9
		%47 = load %8
		%48 = zext i8 %47 to i32
		%49 = load %9
		%50 = zext i8 %49 to i32
		%51 = icmp slt %48 %50
		br %51, %52, %53
	52:
		br %60
	53:
		%54 = load %8
		%55 = zext i8 %54 to i32
		%56 = load %9
		%57 = zext i8 %56 to i32
		%58 = icmp sgt %55 %57
		%59 = zext i1 %58 to i32
		br %60
	60:
		%61 = phi [-1, %52], [%59, %53]
		store %61, %4
		br %62
	62:
		%63 = load %4
		ret %63

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 97
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call *i8 @__VERIFIER_nondet_String()
		%3 = call *i8 @__VERIFIER_nondet_String()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @cstrncmp(*i8 %2, *i8 %3, i32 %4)
		ret %5


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 33 rulesP rules:
f_647(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_648(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: 1 + v1016 = v1000 && 0 <= v1016
f_648(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_649(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: TRUE
f_649(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_650(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: 0 = 0
f_650(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_651(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: TRUE
f_651(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_652(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1003, v1004, v1002, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: 0 = 0
f_652(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1003, v1004, v1002, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_653(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1018, v1003, v1004, v1002, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: TRUE
f_653(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1018, v1003, v1004, v1002, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_654(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1018, v1004, v1003, v1002, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: 0 = 0
f_654(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1018, v1004, v1003, v1002, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_655(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1018, v1006, v1003, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: 0 = 0
f_655(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1018, v1006, v1003, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_656(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1018, v1006, v1020, v1003, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: TRUE
f_656(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1018, v1006, v1020, v1003, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_657(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1018, v1006, v1020, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: 0 = 0
f_657(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1018, v1006, v1020, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_658(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: v1018 = v1020
f_658(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_660(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: 0 = 0
f_660(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_662(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: 0 = 0
f_662(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_664(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: TRUE
f_664(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_666(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: 0 = 0
f_666(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_669(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: v1016 != 0 && 2 <= v1000 && 3 <= v991
f_669(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_672(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: 0 = 0
f_672(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_675(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: TRUE
f_675(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1003, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_678(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1003, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: 0 = 0
f_678(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1003, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_681(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1003, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: 0 = 0
f_681(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1003, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_684(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1003, 3, 7, 2, 4, 8) :|: 0 = 0
f_684(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1003, 3, 7, 2, 4, 8) -> f_688(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1003, 3, 7, 2, 4, 8) :|: v1020 != 0 && v1005 < v1009 && v1006 < v1010 && 3 <= v1009 && 3 <= v1010
f_688(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1003, 3, 7, 2, 4, 8) -> f_691(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1003, 3, 7, 2, 4, 8) :|: 0 = 0
f_691(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1003, 3, 7, 2, 4, 8) -> f_694(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1003, 3, 7, 2, 4, 8) :|: TRUE
f_694(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1002, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1003, 3, 7, 2, 4, 8) -> f_697(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1002, v1003, 3, 7, 2, 4, 8) :|: 0 = 0
f_697(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1002, v1003, 3, 7, 2, 4, 8) -> f_701(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1242, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1002, v1003, 3, 7, 2, 4, 8) :|: v1242 = 1 + v1005 && 3 <= v1242
f_701(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1242, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1002, v1003, 3, 7, 2, 4, 8) -> f_705(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1242, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1002, v1003, 3, 7, 2, 4, 8) :|: TRUE
f_705(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1242, v1004, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1002, v1003, 3, 7, 2, 4, 8) -> f_709(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1242, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1002, v1003, v1004, 3, 7, 2, 4, 8) :|: 0 = 0
f_709(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1242, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1002, v1003, v1004, 3, 7, 2, 4, 8) -> f_712(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1242, v1303, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1002, v1003, v1004, 3, 7, 2, 4, 8) :|: v1303 = 1 + v1006 && 3 <= v1303
f_712(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1242, v1303, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1002, v1003, v1004, 3, 7, 2, 4, 8) -> f_715(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1242, v1303, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1002, v1003, v1004, 3, 7, 2, 4, 8) :|: TRUE
f_715(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1242, v1303, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1002, v1003, v1004, 3, 7, 2, 4, 8) -> f_718(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1242, v1303, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1002, v1003, v1004, 3, 7, 2, 4, 8) :|: TRUE
f_718(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1242, v1303, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1002, v1003, v1004, 3, 7, 2, 4, 8) -> f_646(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, v1016, 1, v1005, v1020, v1006, v1242, v1303, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: TRUE
f_646(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v999, v1000, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) -> f_647(v989, v990, v991, v992, v993, v994, v995, v996, v997, 0, v1000, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_647(v989:0, v990:0, v991:0, v992:0, v993:0, v994:0, v995:0, v996:0, v997:0, 0, 1 + v1016:0, 1, v1002:0, v1003:0, v1004:0, v1005:0, v1006:0, v1007:0, v1008:0, v1009:0, v1010:0, v1011:0, v1012:0, v1013:0, v1014:0, v1015:0, 3, 7, 2, 4, 8) -> f_647(v989:0, v990:0, v991:0, v992:0, v993:0, v994:0, v995:0, v996:0, v997:0, 0, v1016:0, 1, v1005:0, v1018:0, v1006:0, 1 + v1005:0, 1 + v1006:0, v1007:0, v1008:0, v1009:0, v1010:0, v1011:0, v1012:0, v1013:0, v1014:0, v1015:0, 3, 7, 2, 4, 8) :|: v1016:0 > 0 && v991:0 > 2 && v1009:0 > v1005:0 && v1018:0 < 0 && v1010:0 > v1006:0 && v1009:0 > 2 && v1010:0 > 2 && v1006:0 > 1 && v1005:0 > 1
f_647(v989:0, v990:0, v991:0, v992:0, v993:0, v994:0, v995:0, v996:0, v997:0, 0, 1 + v1016:0, 1, v1002:0, v1003:0, v1004:0, v1005:0, v1006:0, v1007:0, v1008:0, v1009:0, v1010:0, v1011:0, v1012:0, v1013:0, v1014:0, v1015:0, 3, 7, 2, 4, 8) -> f_647(v989:0, v990:0, v991:0, v992:0, v993:0, v994:0, v995:0, v996:0, v997:0, 0, v1016:0, 1, v1005:0, v1018:0, v1006:0, 1 + v1005:0, 1 + v1006:0, v1007:0, v1008:0, v1009:0, v1010:0, v1011:0, v1012:0, v1013:0, v1014:0, v1015:0, 3, 7, 2, 4, 8) :|: v1016:0 > 0 && v991:0 > 2 && v1009:0 > v1005:0 && v1018:0 > 0 && v1010:0 > v1006:0 && v1009:0 > 2 && v1010:0 > 2 && v1006:0 > 1 && v1005:0 > 1
Filtered unneeded arguments:
   f_647(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_647(x3, x11, x16, x17, x20, x21)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_647(v991:0, sum~cons_1~v1016:0, v1005:0, v1006:0, v1009:0, v1010:0) -> f_647(v991:0, v1016:0, 1 + v1005:0, 1 + v1006:0, v1009:0, v1010:0) :|: v991:0 > 2 && v1016:0 > 0 && v1009:0 > v1005:0 && v1010:0 > v1006:0 && v1009:0 > 2 && v1010:0 > 2 && v1005:0 > 1 && v1006:0 > 1 && sum~cons_1~v1016:0 = 1 + v1016:0

----------------------------------------

(8)
Obligation:
Rules:
f_647(v991:0, sum~cons_1~v1016:0, v1005:0, v1006:0, v1009:0, v1010:0) -> f_647(v991:0, v1016:0, 1 + v1005:0, 1 + v1006:0, v1009:0, v1010:0) :|: v991:0 > 2 && v1016:0 > 0 && v1009:0 > v1005:0 && v1010:0 > v1006:0 && v1009:0 > 2 && v1010:0 > 2 && v1005:0 > 1 && v1006:0 > 1 && sum~cons_1~v1016:0 = 1 + v1016:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_647(v991:0:0, sum~cons_1~v1016:0:0, v1005:0:0, v1006:0:0, v1009:0:0, v1010:0:0) -> f_647(v991:0:0, v1016:0:0, 1 + v1005:0:0, 1 + v1006:0:0, v1009:0:0, v1010:0:0) :|: v1005:0:0 > 1 && v1006:0:0 > 1 && v1010:0:0 > 2 && v1009:0:0 > 2 && v1010:0:0 > v1006:0:0 && v1009:0:0 > v1005:0:0 && v1016:0:0 > 0 && v991:0:0 > 2 && sum~cons_1~v1016:0:0 = 1 + v1016:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_647(x, x1, x2, x3, x4, x5)] = -1 - x2 + x4

The following rules are decreasing:
f_647(v991:0:0, sum~cons_1~v1016:0:0, v1005:0:0, v1006:0:0, v1009:0:0, v1010:0:0) -> f_647(v991:0:0, v1016:0:0, 1 + v1005:0:0, 1 + v1006:0:0, v1009:0:0, v1010:0:0) :|: v1005:0:0 > 1 && v1006:0:0 > 1 && v1010:0:0 > 2 && v1009:0:0 > 2 && v1010:0:0 > v1006:0:0 && v1009:0:0 > v1005:0:0 && v1016:0:0 > 0 && v991:0:0 > 2 && sum~cons_1~v1016:0:0 = 1 + v1016:0:0
The following rules are bounded:
f_647(v991:0:0, sum~cons_1~v1016:0:0, v1005:0:0, v1006:0:0, v1009:0:0, v1010:0:0) -> f_647(v991:0:0, v1016:0:0, 1 + v1005:0:0, 1 + v1006:0:0, v1009:0:0, v1010:0:0) :|: v1005:0:0 > 1 && v1006:0:0 > 1 && v1010:0:0 > 2 && v1009:0:0 > 2 && v1010:0:0 > v1006:0:0 && v1009:0:0 > v1005:0:0 && v1016:0:0 > 0 && v991:0:0 > 2 && sum~cons_1~v1016:0:0 = 1 + v1016:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
