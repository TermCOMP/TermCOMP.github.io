YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/DB6DN.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1084 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 88 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 9 ms]
        (13) IntTRS
        (14) TerminationGraphProcessor [EQUIVALENT, 5 ms]
        (15) AND
            (16) IntTRS
                (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (18) IntTRS
                (19) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (20) IntTRS
                (21) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
                (22) YES
            (23) IntTRS
                (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (25) IntTRS
                (26) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (27) IntTRS
                (28) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
                (29) YES
    (30) LLVM Symbolic Execution SCC
        (31) SCC2IRS [SOUND, 43 ms]
        (32) IntTRS
        (33) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (34) IntTRS
        (35) RankingReductionPairProof [EQUIVALENT, 13 ms]
        (36) YES
    (37) LLVM Symbolic Execution SCC
        (38) SCC2IRS [SOUND, 5 ms]
        (39) IntTRS
        (40) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (41) IntTRS
        (42) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (43) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/DB6DN.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/DB6DN.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		br %7
	7:
		%8 = load %2
		%9 = icmp sgt %8 0
		br %9, %10, %13
	10:
		%11 = load %3
		%12 = icmp sgt %11 0
		br %13
	13:
		%14 = phi [0, %7], [%12, %10]
		br %14, %15, %28
	15:
		%16 = call i32 @__VERIFIER_nondet_int()
		store %16, %4
		%17 = load %4
		%18 = icmp slt %17 42
		br %18, %19, %24
	19:
		%20 = load %2
		%21 = sub i32 %20, 1
		store %21, %2
		%22 = call i32 @__VERIFIER_nondet_int()
		store %22, %4
		%23 = load %4
		store %23, %3
		br %27
	24:
		%25 = load %3
		%26 = sub i32 %25, 1
		store %26, %3
		br %27
	27:
		br %7
	28:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 58 rulesP rules:
f_544(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2716, v2717, 0, v2719, v2720, v2721, v2722, v2723, v2724, v2725, 3, 2, 42, 4) -> f_546(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2716, v2717, 0, v2719, v2720, v2721, v2722, v2723, v2724, v2725, 3, 2, 42, 4) :|: 0 = 0
f_546(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2716, v2717, 0, v2719, v2720, v2721, v2722, v2723, v2724, v2725, 3, 2, 42, 4) -> f_549(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2716, v2717, 0, v2719, v2720, v2721, v2722, v2723, v2724, v2725, 3, 2, 42, 4) :|: 0 = 0
f_549(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2716, v2717, 0, v2719, v2720, v2721, v2722, v2723, v2724, v2725, 3, 2, 42, 4) -> f_552(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2716, v2717, 0, v2719, v2720, v2721, v2722, v2723, v2724, v2725, 3, 2, 42, 4) :|: TRUE
f_552(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2716, v2717, 0, v2719, v2720, v2721, v2722, v2723, v2724, v2725, 3, 2, 42, 4) -> f_555(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v2717, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 42, 4) :|: 0 = 0
f_555(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v2717, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 42, 4) -> f_558(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v2717, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 42, 4) :|: 0 < v2721 && 2 <= v2716 && 2 <= v2720
f_558(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v2717, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 42, 4) -> f_562(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v2717, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 42, 4) :|: 0 = 0
f_562(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v2717, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 42, 4) -> f_566(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v2717, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 42, 4) :|: 0 = 0
f_566(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v2717, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 42, 4) -> f_570(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v2717, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 42, 4) :|: TRUE
f_570(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v2717, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 42, 4) -> f_574(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, v2717, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 42, 4) :|: TRUE
f_574(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, v2717, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 42, 4) -> f_576(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, v2717, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 42, 4) :|: TRUE
f_576(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, v2717, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 42, 4) -> f_578(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 4) :|: 0 = 0
f_578(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 4) -> f_580(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 4, 41) :|: v3275 < 42
f_578(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 4) -> f_581(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 4, 42) :|: 42 <= v3275
f_580(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 4, 41) -> f_584(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 0, 3, 2, 4, 41) :|: 0 = 0
f_584(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 0, 3, 2, 4, 41) -> f_588(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 0, 3, 2, 4, 41) :|: TRUE
f_588(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 0, 3, 2, 4, 41) -> f_642(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, v2719, v2720, v2716, v2721, v2722, v2723, v2724, v2725, 0, 3, 2, 41, 4) :|: TRUE
f_642(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4003, v4004, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) -> f_644(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4004, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) :|: 0 = 0
f_644(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4004, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) -> f_646(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4041, v4004, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) :|: 1 + v4041 = v3999 && 0 <= v4041
f_646(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4041, v4004, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) -> f_648(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4041, v4004, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) :|: TRUE
f_648(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4041, v4004, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) -> f_650(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4041, v4045, v4004, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) :|: TRUE
f_650(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4041, v4045, v4004, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) -> f_652(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4041, v4045, v4004, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) :|: TRUE
f_652(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4041, v4045, v4004, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) -> f_653(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4041, v4045, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) :|: 0 = 0
f_653(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4041, v4045, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) -> f_654(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4041, v4045, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) :|: TRUE
f_654(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4041, v4045, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) -> f_655(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4041, v4045, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) :|: TRUE
f_655(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4041, v4045, v4005, v4006, v4007, v4008, v4009, v4010, 0, 3, 2, 41, 4) -> f_615(v3993, v3994, v3995, v3996, v3997, v3998, v3999, 1, v4001, v4002, v4005, v4006, v4041, v4045, v4007, v4008, v4009, v4010, 0, 3, 41, 2, 4) :|: TRUE
f_615(v3510, v3511, v3512, v3513, v3514, v3515, v3516, 1, v3518, v3519, v3520, v3521, v3522, v3523, v3524, v3525, v3526, v3527, 0, 3, 41, 2, 4) -> f_616(v3510, v3511, v3512, v3513, v3514, v3515, v3516, 1, v3518, v3519, v3520, v3521, v3522, v3523, v3524, v3525, v3526, v3527, 0, 3, 41, 2, 4) :|: TRUE
f_616(v3510, v3511, v3512, v3513, v3514, v3515, v3516, 1, v3518, v3519, v3520, v3521, v3522, v3523, v3524, v3525, v3526, v3527, 0, 3, 41, 2, 4) -> f_617(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3518, v3519, v3520, v3521, v3516, v3523, v3524, v3525, v3526, v3527, 0, 3, 41, 2, 4) :|: 0 = 0
f_617(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3518, v3519, v3520, v3521, v3516, v3523, v3524, v3525, v3526, v3527, 0, 3, 41, 2, 4) -> f_618(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3518, v3519, v3520, v3521, v3516, v3523, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) :|: 0 < v3522 && 2 <= v3516 && 2 <= v3514
f_618(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3518, v3519, v3520, v3521, v3516, v3523, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) -> f_620(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3518, v3519, v3520, v3521, v3516, v3523, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) :|: 0 = 0
f_620(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3518, v3519, v3520, v3521, v3516, v3523, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) -> f_622(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3518, v3519, v3520, v3521, v3516, v3523, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) :|: TRUE
f_622(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3518, v3519, v3520, v3521, v3516, v3523, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) -> f_624(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3519, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) :|: 0 = 0
f_624(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3519, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) -> f_626(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3519, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) :|: 0 < v3523
f_626(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3519, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) -> f_628(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3519, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) :|: 0 = 0
f_628(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3519, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) -> f_630(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3519, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) :|: 0 = 0
f_630(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3519, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) -> f_632(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3519, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) :|: TRUE
f_632(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3519, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) -> f_634(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3519, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) :|: TRUE
f_634(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3519, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) -> f_635(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3519, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) :|: TRUE
f_635(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3519, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) -> f_636(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 4) :|: 0 = 0
f_636(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 4) -> f_637(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 4, 41) :|: v3968 < 42
f_636(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 4) -> f_638(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 4, 42) :|: 42 <= v3968
f_637(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 4, 41) -> f_639(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 4, 41) :|: 0 = 0
f_639(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 4, 41) -> f_641(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 4, 41) :|: TRUE
f_641(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 4, 41) -> f_642(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3516, v3523, v3520, v3521, v3524, v3525, v3526, v3527, 0, 3, 2, 41, 4) :|: TRUE
f_638(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 0, 3, 2, 4, 42) -> f_640(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, 0, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 3, 2, 4, 42) :|: 0 = 0
f_640(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, 0, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 3, 2, 4, 42) -> f_643(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, 0, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 3, 2, 4, 42) :|: TRUE
f_643(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, 0, v3520, v3521, v3516, v3524, v3525, v3526, v3527, 3, 2, 4, 42) -> f_645(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, 0, v3521, v3516, v3524, v3525, v3526, v3527, 3, 2, 4, 42) :|: 0 = 0
f_645(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, 0, v3521, v3516, v3524, v3525, v3526, v3527, 3, 2, 4, 42) -> f_647(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, 0, v4042, v3516, v3524, v3525, v3526, v3527, 3, 2, 4, 42) :|: 1 + v4042 = v3523 && 0 <= v4042
f_647(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, 0, v4042, v3516, v3524, v3525, v3526, v3527, 3, 2, 4, 42) -> f_649(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, 0, v4042, v3516, v3524, v3525, v3526, v3527, 3, 2, 4, 42) :|: TRUE
f_649(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, 0, v4042, v3516, v3524, v3525, v3526, v3527, 3, 2, 4, 42) -> f_651(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, 0, v4042, v3516, v3524, v3525, v3526, v3527, 3, 2, 4, 42) :|: TRUE
f_651(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, 0, v4042, v3516, v3524, v3525, v3526, v3527, 3, 2, 4, 42) -> f_542(v3510, v3511, v3512, v3513, v3514, v3515, v3522, 1, v3523, v3968, 0, v3516, v3523, v4042, v3524, v3525, v3526, v3527, 3, 2, 42, 4) :|: TRUE
f_542(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2716, v2717, 0, v2719, v2720, v2721, v2722, v2723, v2724, v2725, 3, 2, 42, 4) -> f_544(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2716, v2717, 0, v2719, v2720, v2721, v2722, v2723, v2724, v2725, 3, 2, 42, 4) :|: TRUE
f_581(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 4, 42) -> f_585(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 4, 42) :|: 0 = 0
f_585(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 4, 42) -> f_589(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 4, 42) :|: TRUE
f_589(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v2716, v2722, v2723, v2724, v2725, 3, 2, 4, 42) -> f_593(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v2722, v2723, v2724, v2725, 3, 2, 4, 42) :|: 0 = 0
f_593(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v2722, v2723, v2724, v2725, 3, 2, 4, 42) -> f_597(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v3375, v2722, v2723, v2724, v2725, 3, 2, 4, 42) :|: 1 + v3375 = v2721 && 0 <= v3375
f_597(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v3375, v2722, v2723, v2724, v2725, 3, 2, 4, 42) -> f_601(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v3375, v2722, v2723, v2724, v2725, 3, 2, 4, 42) :|: TRUE
f_601(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v3375, v2722, v2723, v2724, v2725, 3, 2, 4, 42) -> f_605(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v3375, v2722, v2723, v2724, v2725, 3, 2, 4, 42) :|: TRUE
f_605(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v3375, v2722, v2723, v2724, v2725, 3, 2, 4, 42) -> f_542(v2708, v2709, v2710, v2711, v2712, v2713, v2714, 1, v2721, v3275, 0, v2719, v2720, v3375, v2722, v2723, v2724, v2725, 3, 2, 42, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_544(v2708:0, v2709:0, v2710:0, v2711:0, v2712:0, v2713:0, v2714:0, 1, v2716:0, v2717:0, 0, v2719:0, v2720:0, 1 + v3375:0, v2722:0, v2723:0, v2724:0, v2725:0, 3, 2, 42, 4) -> f_544(v2708:0, v2709:0, v2710:0, v2711:0, v2712:0, v2713:0, v2714:0, 1, 1 + v3375:0, v3275:0, 0, v2719:0, v2720:0, v3375:0, v2722:0, v2723:0, v2724:0, v2725:0, 3, 2, 42, 4) :|: v2716:0 > 1 && v3375:0 > -1 && v2720:0 > 1 && v3275:0 > 41
f_544(v2708:0, v2709:0, v2710:0, v2711:0, v2712:0, v2713:0, 1 + v4041:0, 1, v2716:0, v2717:0, 0, v2719:0, v2720:0, v2721:0, v2722:0, v2723:0, v2724:0, v2725:0, 3, 2, 42, 4) -> f_636(v2708:0, v2709:0, v2710:0, v2711:0, v2712:0, v2713:0, v4041:0, 1, v4045:0, v3968:0, v2716:0, v2721:0, 1 + v4041:0, v2722:0, v2723:0, v2724:0, v2725:0, 0, 3, 2, 4) :|: v4041:0 > 0 && v2716:0 > 1 && v2721:0 > 0 && v2720:0 > 1 && v3275:0 < 42 && v4045:0 > 0 && v2712:0 > 1
f_636(v3510:0, v3511:0, v3512:0, v3513:0, v3514:0, v3515:0, 1 + v4041:0, 1, v3523:0, v3968:0, v3520:0, v3521:0, v3516:0, v3524:0, v3525:0, v3526:0, v3527:0, 0, 3, 2, 4) -> f_636(v3510:0, v3511:0, v3512:0, v3513:0, v3514:0, v3515:0, v4041:0, 1, v4045:0, v3968:1, v3520:0, v3521:0, 1 + v4041:0, v3524:0, v3525:0, v3526:0, v3527:0, 0, 3, 2, 4) :|: v4041:0 > 0 && v3514:0 > 1 && v3968:0 < 42 && v4045:0 > 0
f_636(v3510:0, v3511:0, v3512:0, v3513:0, v3514:0, v3515:0, v3522:0, 1, 1 + v4042:0, v3968:0, v3520:0, v3521:0, v3516:0, v3524:0, v3525:0, v3526:0, v3527:0, 0, 3, 2, 4) -> f_544(v3510:0, v3511:0, v3512:0, v3513:0, v3514:0, v3515:0, v3522:0, 1, 1 + v4042:0, v3968:0, 0, v3516:0, 1 + v4042:0, v4042:0, v3524:0, v3525:0, v3526:0, v3527:0, 3, 2, 42, 4) :|: v4042:0 > -1 && v3968:0 > 41
Filtered unneeded arguments:
   f_544(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_544(x5, x7, x9, x13, x14)
   f_636(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_636(x5, x7, x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_544(v2712:0, v2714:0, v2716:0, v2720:0, sum~cons_1~v3375:0) -> f_544(v2712:0, v2714:0, 1 + v3375:0, v2720:0, v3375:0) :|: v3375:0 > -1 && v2720:0 > 1 && v2716:0 > 1 && sum~cons_1~v3375:0 = 1 + v3375:0
f_544(v2712:0, sum~cons_1~v4041:0, v2716:0, v2720:0, v2721:0) -> f_636(v2712:0, v4041:0, v4045:0, v3968:0) :|: v2716:0 > 1 && v4041:0 > 0 && v2721:0 > 0 && v2720:0 > 1 && v2712:0 > 1 && v4045:0 > 0 && sum~cons_1~v4041:0 = 1 + v4041:0
f_636(v3514:0, sum~cons_1~v4041:0, v3523:0, v3968:0) -> f_636(v3514:0, v4041:0, v4045:0, v3968:1) :|: v3514:0 > 1 && v4041:0 > 0 && v4045:0 > 0 && v3968:0 < 42 && sum~cons_1~v4041:0 = 1 + v4041:0
f_636(v3514:0, v3522:0, sum~cons_1~v4042:0, v3968:0) -> f_544(v3514:0, v3522:0, 1 + v4042:0, 1 + v4042:0, v4042:0) :|: v4042:0 > -1 && v3968:0 > 41 && sum~cons_1~v4042:0 = 1 + v4042:0

----------------------------------------

(9)
Obligation:
Rules:
f_544(v2712:0, v2714:0, v2716:0, v2720:0, sum~cons_1~v3375:0) -> f_544(v2712:0, v2714:0, 1 + v3375:0, v2720:0, v3375:0) :|: v3375:0 > -1 && v2720:0 > 1 && v2716:0 > 1 && sum~cons_1~v3375:0 = 1 + v3375:0
f_544(x, x1, x2, x3, x4) -> f_636(x, x5, x6, x7) :|: x2 > 1 && x5 > 0 && x4 > 0 && x3 > 1 && x > 1 && x6 > 0 && x1 = 1 + x5
f_636(v3514:0, sum~cons_1~v4041:0, v3523:0, v3968:0) -> f_636(v3514:0, v4041:0, v4045:0, v3968:1) :|: v3514:0 > 1 && v4041:0 > 0 && v4045:0 > 0 && v3968:0 < 42 && sum~cons_1~v4041:0 = 1 + v4041:0
f_636(x8, x9, x10, x11) -> f_544(x8, x9, 1 + x12, 1 + x12, x12) :|: x12 > -1 && x11 > 41 && x10 = 1 + x12

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_544(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_636(x:0, x5:0, x6:0, x7:0) :|: x:0 > 1 && x6:0 > 0 && x3:0 > 1 && x4:0 > 0 && x5:0 > 0 && x2:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0
f_636(v3514:0:0, sum~cons_1~v4041:0:0, v3523:0:0, v3968:0:0) -> f_636(v3514:0:0, v4041:0:0, v4045:0:0, v3968:1:0) :|: v4045:0:0 > 0 && v3968:0:0 < 42 && v4041:0:0 > 0 && v3514:0:0 > 1 && sum~cons_1~v4041:0:0 = 1 + v4041:0:0
f_636(x8:0, x9:0, sum~cons_1~x12:0, x11:0) -> f_544(x8:0, x9:0, 1 + x12:0, 1 + x12:0, x12:0) :|: x12:0 > -1 && x11:0 > 41 && sum~cons_1~x12:0 = 1 + x12:0
f_544(v2712:0:0, v2714:0:0, v2716:0:0, v2720:0:0, sum~cons_1~v3375:0:0) -> f_544(v2712:0:0, v2714:0:0, 1 + v3375:0:0, v2720:0:0, v3375:0:0) :|: v3375:0:0 > -1 && v2720:0:0 > 1 && v2716:0:0 > 1 && sum~cons_1~v3375:0:0 = 1 + v3375:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_544 ] = 2*f_544_1 + 2*f_544_2
[ f_636 ] = 2*f_636_1 + 2*f_636_2 + 1

The following rules are decreasing:
f_544(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_636(x:0, x5:0, x6:0, x7:0) :|: x:0 > 1 && x6:0 > 0 && x3:0 > 1 && x4:0 > 0 && x5:0 > 0 && x2:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0
f_636(v3514:0:0, sum~cons_1~v4041:0:0, v3523:0:0, v3968:0:0) -> f_636(v3514:0:0, v4041:0:0, v4045:0:0, v3968:1:0) :|: v4045:0:0 > 0 && v3968:0:0 < 42 && v4041:0:0 > 0 && v3514:0:0 > 1 && sum~cons_1~v4041:0:0 = 1 + v4041:0:0
f_636(x8:0, x9:0, sum~cons_1~x12:0, x11:0) -> f_544(x8:0, x9:0, 1 + x12:0, 1 + x12:0, x12:0) :|: x12:0 > -1 && x11:0 > 41 && sum~cons_1~x12:0 = 1 + x12:0

The following rules are bounded:
f_544(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_636(x:0, x5:0, x6:0, x7:0) :|: x:0 > 1 && x6:0 > 0 && x3:0 > 1 && x4:0 > 0 && x5:0 > 0 && x2:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0


----------------------------------------

(13)
Obligation:
Rules:
f_636(v3514:0:0, sum~cons_1~v4041:0:0, v3523:0:0, v3968:0:0) -> f_636(v3514:0:0, v4041:0:0, v4045:0:0, v3968:1:0) :|: v4045:0:0 > 0 && v3968:0:0 < 42 && v4041:0:0 > 0 && v3514:0:0 > 1 && sum~cons_1~v4041:0:0 = 1 + v4041:0:0
f_636(x8:0, x9:0, sum~cons_1~x12:0, x11:0) -> f_544(x8:0, x9:0, 1 + x12:0, 1 + x12:0, x12:0) :|: x12:0 > -1 && x11:0 > 41 && sum~cons_1~x12:0 = 1 + x12:0
f_544(v2712:0:0, v2714:0:0, v2716:0:0, v2720:0:0, sum~cons_1~v3375:0:0) -> f_544(v2712:0:0, v2714:0:0, 1 + v3375:0:0, v2720:0:0, v3375:0:0) :|: v3375:0:0 > -1 && v2720:0:0 > 1 && v2716:0:0 > 1 && sum~cons_1~v3375:0:0 = 1 + v3375:0:0

----------------------------------------

(14) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained 2 non-trivial SCCs.

----------------------------------------

(15)
Complex Obligation (AND)

----------------------------------------

(16)
Obligation:
Rules:
f_636(v3514:0:0, sum~cons_1~v4041:0:0, v3523:0:0, v3968:0:0) -> f_636(v3514:0:0, v4041:0:0, v4045:0:0, v3968:1:0) :|: v4045:0:0 > 0 && v3968:0:0 < 42 && v4041:0:0 > 0 && v3514:0:0 > 1 && sum~cons_1~v4041:0:0 = 1 + v4041:0:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_636(v3514:0:0:0, sum~cons_1~v4041:0:0:0, v3523:0:0:0, v3968:0:0:0) -> f_636(v3514:0:0:0, v4041:0:0:0, v4045:0:0:0, v3968:1:0:0) :|: v4041:0:0:0 > 0 && v3514:0:0:0 > 1 && v3968:0:0:0 < 42 && v4045:0:0:0 > 0 && sum~cons_1~v4041:0:0:0 = 1 + v4041:0:0:0

----------------------------------------

(19) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_636(x1, x2, x3, x4) -> f_636(x1, x2, x4)

----------------------------------------

(20)
Obligation:
Rules:
f_636(v3514:0:0:0, sum~cons_1~v4041:0:0:0, v3968:0:0:0) -> f_636(v3514:0:0:0, v4041:0:0:0, v3968:1:0:0) :|: v4041:0:0:0 > 0 && v3514:0:0:0 > 1 && v3968:0:0:0 < 42 && v4045:0:0:0 > 0 && sum~cons_1~v4041:0:0:0 = 1 + v4041:0:0:0

----------------------------------------

(21) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_636(x, x1, x2)] = x1

The following rules are decreasing:
f_636(v3514:0:0:0, sum~cons_1~v4041:0:0:0, v3968:0:0:0) -> f_636(v3514:0:0:0, v4041:0:0:0, v3968:1:0:0) :|: v4041:0:0:0 > 0 && v3514:0:0:0 > 1 && v3968:0:0:0 < 42 && v4045:0:0:0 > 0 && sum~cons_1~v4041:0:0:0 = 1 + v4041:0:0:0
The following rules are bounded:
f_636(v3514:0:0:0, sum~cons_1~v4041:0:0:0, v3968:0:0:0) -> f_636(v3514:0:0:0, v4041:0:0:0, v3968:1:0:0) :|: v4041:0:0:0 > 0 && v3514:0:0:0 > 1 && v3968:0:0:0 < 42 && v4045:0:0:0 > 0 && sum~cons_1~v4041:0:0:0 = 1 + v4041:0:0:0

----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Rules:
f_544(v2712:0:0, v2714:0:0, v2716:0:0, v2720:0:0, sum~cons_1~v3375:0:0) -> f_544(v2712:0:0, v2714:0:0, 1 + v3375:0:0, v2720:0:0, v3375:0:0) :|: v3375:0:0 > -1 && v2720:0:0 > 1 && v2716:0:0 > 1 && sum~cons_1~v3375:0:0 = 1 + v3375:0:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_544(v2712:0:0:0, v2714:0:0:0, v2716:0:0:0, v2720:0:0:0, sum~cons_1~v3375:0:0:0) -> f_544(v2712:0:0:0, v2714:0:0:0, 1 + v3375:0:0:0, v2720:0:0:0, v3375:0:0:0) :|: v3375:0:0:0 > -1 && v2720:0:0:0 > 1 && v2716:0:0:0 > 1 && sum~cons_1~v3375:0:0:0 = 1 + v3375:0:0:0

----------------------------------------

(26) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_544(x1, x2, x3, x4, x5) -> f_544(x3, x4, x5)

----------------------------------------

(27)
Obligation:
Rules:
f_544(v2716:0:0:0, v2720:0:0:0, sum~cons_1~v3375:0:0:0) -> f_544(1 + v3375:0:0:0, v2720:0:0:0, v3375:0:0:0) :|: v3375:0:0:0 > -1 && v2720:0:0:0 > 1 && v2716:0:0:0 > 1 && sum~cons_1~v3375:0:0:0 = 1 + v3375:0:0:0

----------------------------------------

(28) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_544(x, x1, x2)] = x2

The following rules are decreasing:
f_544(v2716:0:0:0, v2720:0:0:0, sum~cons_1~v3375:0:0:0) -> f_544(1 + v3375:0:0:0, v2720:0:0:0, v3375:0:0:0) :|: v3375:0:0:0 > -1 && v2720:0:0:0 > 1 && v2716:0:0:0 > 1 && sum~cons_1~v3375:0:0:0 = 1 + v3375:0:0:0
The following rules are bounded:
f_544(v2716:0:0:0, v2720:0:0:0, sum~cons_1~v3375:0:0:0) -> f_544(1 + v3375:0:0:0, v2720:0:0:0, v3375:0:0:0) :|: v3375:0:0:0 > -1 && v2720:0:0:0 > 1 && v2716:0:0:0 > 1 && sum~cons_1~v3375:0:0:0 = 1 + v3375:0:0:0

----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
SCC
----------------------------------------

(31) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 25 rulesP rules:
f_346(v708, v709, v710, v711, v712, v713, v714, 1, v716, v717, v718, v719, v720, v721, v722, v723, 0, 3, 41, 4) -> f_349(v708, v709, v710, v711, v712, v713, v718, 1, v716, v717, v714, v719, v720, v721, v722, v723, 0, 3, 41, 4) :|: 0 = 0
f_349(v708, v709, v710, v711, v712, v713, v718, 1, v716, v717, v714, v719, v720, v721, v722, v723, 0, 3, 41, 4) -> f_352(v708, v709, v710, v711, v712, v713, v718, 1, v716, v717, v714, v719, v720, v721, v722, v723, 0, 3, 2, 41, 4) :|: 0 < v718 && 2 <= v714 && 2 <= v712
f_352(v708, v709, v710, v711, v712, v713, v718, 1, v716, v717, v714, v719, v720, v721, v722, v723, 0, 3, 2, 41, 4) -> f_356(v708, v709, v710, v711, v712, v713, v718, 1, v716, v717, v714, v719, v720, v721, v722, v723, 0, 3, 2, 41, 4) :|: 0 = 0
f_356(v708, v709, v710, v711, v712, v713, v718, 1, v716, v717, v714, v719, v720, v721, v722, v723, 0, 3, 2, 41, 4) -> f_360(v708, v709, v710, v711, v712, v713, v718, 1, v716, v717, v714, v719, v720, v721, v722, v723, 0, 3, 2, 41, 4) :|: TRUE
f_360(v708, v709, v710, v711, v712, v713, v718, 1, v716, v717, v714, v719, v720, v721, v722, v723, 0, 3, 2, 41, 4) -> f_364(v708, v709, v710, v711, v712, v713, v718, 1, v719, v717, v714, v720, v721, v722, v723, 0, 3, 2, 41, 4) :|: 0 = 0
f_364(v708, v709, v710, v711, v712, v713, v718, 1, v719, v717, v714, v720, v721, v722, v723, 0, 3, 2, 41, 4) -> f_368(v708, v709, v710, v711, v712, v713, v718, 1, v719, v717, v714, v720, v721, v722, v723, 0, 3, 2, 41, 4) :|: 0 < v719
f_368(v708, v709, v710, v711, v712, v713, v718, 1, v719, v717, v714, v720, v721, v722, v723, 0, 3, 2, 41, 4) -> f_371(v708, v709, v710, v711, v712, v713, v718, 1, v719, v717, v714, v720, v721, v722, v723, 0, 3, 2, 41, 4) :|: 0 = 0
f_371(v708, v709, v710, v711, v712, v713, v718, 1, v719, v717, v714, v720, v721, v722, v723, 0, 3, 2, 41, 4) -> f_374(v708, v709, v710, v711, v712, v713, v718, 1, v719, v717, v714, v720, v721, v722, v723, 0, 3, 2, 41, 4) :|: 0 = 0
f_374(v708, v709, v710, v711, v712, v713, v718, 1, v719, v717, v714, v720, v721, v722, v723, 0, 3, 2, 41, 4) -> f_377(v708, v709, v710, v711, v712, v713, v718, 1, v719, v717, v714, v720, v721, v722, v723, 0, 3, 2, 41, 4) :|: TRUE
f_377(v708, v709, v710, v711, v712, v713, v718, 1, v719, v717, v714, v720, v721, v722, v723, 0, 3, 2, 41, 4) -> f_380(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v717, v714, v720, v721, v722, v723, 0, 3, 2, 41, 4) :|: TRUE
f_380(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v717, v714, v720, v721, v722, v723, 0, 3, 2, 41, 4) -> f_382(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v717, v714, v720, v721, v722, v723, 0, 3, 2, 41, 4) :|: TRUE
f_382(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v717, v714, v720, v721, v722, v723, 0, 3, 2, 41, 4) -> f_385(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v714, v720, v721, v722, v723, 0, 3, 2, 4) :|: 0 = 0
f_385(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v714, v720, v721, v722, v723, 0, 3, 2, 4) -> f_388(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v714, v720, v721, v722, v723, 0, 3, 2, 4, 41) :|: v955 < 42
f_388(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v714, v720, v721, v722, v723, 0, 3, 2, 4, 41) -> f_392(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v714, v720, v721, v722, v723, 0, 3, 2, 4, 41) :|: 0 = 0
f_392(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v714, v720, v721, v722, v723, 0, 3, 2, 4, 41) -> f_396(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v714, v720, v721, v722, v723, 0, 3, 2, 4, 41) :|: TRUE
f_396(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v714, v720, v721, v722, v723, 0, 3, 2, 4, 41) -> f_400(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v720, v721, v722, v723, 0, 3, 2, 4, 41) :|: 0 = 0
f_400(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v720, v721, v722, v723, 0, 3, 2, 4, 41) -> f_404(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v1068, v720, v721, v722, v723, 0, 3, 2, 4, 41) :|: 1 + v1068 = v718 && 0 <= v1068
f_404(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v1068, v720, v721, v722, v723, 0, 3, 2, 4, 41) -> f_408(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v1068, v720, v721, v722, v723, 0, 3, 2, 4, 41) :|: TRUE
f_408(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v1068, v720, v721, v722, v723, 0, 3, 2, 4, 41) -> f_412(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v1068, v1281, v720, v721, v722, v723, 0, 3, 2, 4, 41) :|: TRUE
f_412(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v1068, v1281, v720, v721, v722, v723, 0, 3, 2, 4, 41) -> f_415(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v1068, v1281, v720, v721, v722, v723, 0, 3, 2, 4, 41) :|: TRUE
f_415(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v1068, v1281, v720, v721, v722, v723, 0, 3, 2, 4, 41) -> f_418(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v1068, v1281, v720, v721, v722, v723, 0, 3, 2, 4, 41) :|: 0 = 0
f_418(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v1068, v1281, v720, v721, v722, v723, 0, 3, 2, 4, 41) -> f_421(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v1068, v1281, v720, v721, v722, v723, 0, 3, 2, 4, 41) :|: TRUE
f_421(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v1068, v1281, v720, v721, v722, v723, 0, 3, 2, 4, 41) -> f_425(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v1068, v1281, v720, v721, v722, v723, 0, 3, 2, 4, 41) :|: TRUE
f_425(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v1068, v1281, v720, v721, v722, v723, 0, 3, 2, 4, 41) -> f_343(v708, v709, v710, v711, v712, v713, v718, 1, v719, v955, v1068, v1281, v720, v721, v722, v723, 0, 3, 41, 4) :|: TRUE
f_343(v708, v709, v710, v711, v712, v713, v714, 1, v716, v717, v718, v719, v720, v721, v722, v723, 0, 3, 41, 4) -> f_346(v708, v709, v710, v711, v712, v713, v714, 1, v716, v717, v718, v719, v720, v721, v722, v723, 0, 3, 41, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_346(v708:0, v709:0, v710:0, v711:0, v712:0, v713:0, v714:0, 1, v716:0, v717:0, 1 + v1068:0, v719:0, v720:0, v721:0, v722:0, v723:0, 0, 3, 41, 4) -> f_346(v708:0, v709:0, v710:0, v711:0, v712:0, v713:0, 1 + v1068:0, 1, v719:0, v955:0, v1068:0, v1281:0, v720:0, v721:0, v722:0, v723:0, 0, 3, 41, 4) :|: v714:0 > 1 && v1068:0 > -1 && v712:0 > 1 && v719:0 > 0 && v955:0 < 42
Filtered unneeded arguments:
   f_346(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_346(x5, x7, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_346(v712:0, v714:0, sum~cons_1~v1068:0, v719:0) -> f_346(v712:0, 1 + v1068:0, v1068:0, v1281:0) :|: v1068:0 > -1 && v714:0 > 1 && v719:0 > 0 && v712:0 > 1 && sum~cons_1~v1068:0 = 1 + v1068:0

----------------------------------------

(32)
Obligation:
Rules:
f_346(v712:0, v714:0, sum~cons_1~v1068:0, v719:0) -> f_346(v712:0, 1 + v1068:0, v1068:0, v1281:0) :|: v1068:0 > -1 && v714:0 > 1 && v719:0 > 0 && v712:0 > 1 && sum~cons_1~v1068:0 = 1 + v1068:0

----------------------------------------

(33) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(34)
Obligation:
Rules:
f_346(v712:0:0, v714:0:0, sum~cons_1~v1068:0:0, v719:0:0) -> f_346(v712:0:0, 1 + v1068:0:0, v1068:0:0, v1281:0:0) :|: v719:0:0 > 0 && v712:0:0 > 1 && v714:0:0 > 1 && v1068:0:0 > -1 && sum~cons_1~v1068:0:0 = 1 + v1068:0:0

----------------------------------------

(35) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_346 ] = f_346_3

The following rules are decreasing:
f_346(v712:0:0, v714:0:0, sum~cons_1~v1068:0:0, v719:0:0) -> f_346(v712:0:0, 1 + v1068:0:0, v1068:0:0, v1281:0:0) :|: v719:0:0 > 0 && v712:0:0 > 1 && v714:0:0 > 1 && v1068:0:0 > -1 && sum~cons_1~v1068:0:0 = 1 + v1068:0:0

The following rules are bounded:
f_346(v712:0:0, v714:0:0, sum~cons_1~v1068:0:0, v719:0:0) -> f_346(v712:0:0, 1 + v1068:0:0, v1068:0:0, v1281:0:0) :|: v719:0:0 > 0 && v712:0:0 > 1 && v714:0:0 > 1 && v1068:0:0 > -1 && sum~cons_1~v1068:0:0 = 1 + v1068:0:0


----------------------------------------

(36)
YES

----------------------------------------

(37)
Obligation:
SCC
----------------------------------------

(38) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_304(v566, v567, v568, v569, v570, v571, 1, v573, v574, 0, v576, v577, v578, v579, v580, 3, 42, 4) -> f_306(v566, v567, v568, v569, v570, v571, 1, v573, v574, 0, v576, v577, v578, v579, v580, 3, 42, 4) :|: 0 = 0
f_306(v566, v567, v568, v569, v570, v571, 1, v573, v574, 0, v576, v577, v578, v579, v580, 3, 42, 4) -> f_309(v566, v567, v568, v569, v570, v571, 1, v573, v574, 0, v576, v577, v578, v579, v580, 3, 42, 4) :|: TRUE
f_309(v566, v567, v568, v569, v570, v571, 1, v573, v574, 0, v576, v577, v578, v579, v580, 3, 42, 4) -> f_312(v566, v567, v568, v569, v570, v571, 1, v576, v574, 0, v573, v577, v578, v579, v580, 3, 42, 4) :|: 0 = 0
f_312(v566, v567, v568, v569, v570, v571, 1, v576, v574, 0, v573, v577, v578, v579, v580, 3, 42, 4) -> f_315(v566, v567, v568, v569, v570, v571, 1, v576, v574, 0, v573, v577, v578, v579, v580, 3, 2, 42, 4) :|: 0 < v576 && 2 <= v573 && 2 <= v571
f_315(v566, v567, v568, v569, v570, v571, 1, v576, v574, 0, v573, v577, v578, v579, v580, 3, 2, 42, 4) -> f_319(v566, v567, v568, v569, v570, v571, 1, v576, v574, 0, v573, v577, v578, v579, v580, 3, 2, 42, 4) :|: 0 = 0
f_319(v566, v567, v568, v569, v570, v571, 1, v576, v574, 0, v573, v577, v578, v579, v580, 3, 2, 42, 4) -> f_323(v566, v567, v568, v569, v570, v571, 1, v576, v574, 0, v573, v577, v578, v579, v580, 3, 2, 42, 4) :|: 0 = 0
f_323(v566, v567, v568, v569, v570, v571, 1, v576, v574, 0, v573, v577, v578, v579, v580, 3, 2, 42, 4) -> f_327(v566, v567, v568, v569, v570, v571, 1, v576, v574, 0, v573, v577, v578, v579, v580, 3, 2, 42, 4) :|: TRUE
f_327(v566, v567, v568, v569, v570, v571, 1, v576, v574, 0, v573, v577, v578, v579, v580, 3, 2, 42, 4) -> f_331(v566, v567, v568, v569, v570, v571, 1, v576, v682, v574, 0, v573, v577, v578, v579, v580, 3, 2, 42, 4) :|: TRUE
f_331(v566, v567, v568, v569, v570, v571, 1, v576, v682, v574, 0, v573, v577, v578, v579, v580, 3, 2, 42, 4) -> f_334(v566, v567, v568, v569, v570, v571, 1, v576, v682, v574, 0, v573, v577, v578, v579, v580, 3, 2, 42, 4) :|: TRUE
f_334(v566, v567, v568, v569, v570, v571, 1, v576, v682, v574, 0, v573, v577, v578, v579, v580, 3, 2, 42, 4) -> f_337(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v573, v577, v578, v579, v580, 3, 2, 4) :|: 0 = 0
f_337(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v573, v577, v578, v579, v580, 3, 2, 4) -> f_341(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v573, v577, v578, v579, v580, 3, 2, 4, 42) :|: 42 <= v682
f_341(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v573, v577, v578, v579, v580, 3, 2, 4, 42) -> f_345(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v573, v577, v578, v579, v580, 3, 2, 4, 42) :|: 0 = 0
f_345(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v573, v577, v578, v579, v580, 3, 2, 4, 42) -> f_348(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v573, v577, v578, v579, v580, 3, 2, 4, 42) :|: TRUE
f_348(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v573, v577, v578, v579, v580, 3, 2, 4, 42) -> f_351(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v577, v578, v579, v580, 3, 2, 4, 42) :|: 0 = 0
f_351(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v577, v578, v579, v580, 3, 2, 4, 42) -> f_355(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v743, v577, v578, v579, v580, 3, 2, 4, 42) :|: 1 + v743 = v576 && 0 <= v743
f_355(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v743, v577, v578, v579, v580, 3, 2, 4, 42) -> f_359(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v743, v577, v578, v579, v580, 3, 2, 4, 42) :|: TRUE
f_359(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v743, v577, v578, v579, v580, 3, 2, 4, 42) -> f_363(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v743, v577, v578, v579, v580, 3, 2, 4, 42) :|: TRUE
f_363(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v743, v577, v578, v579, v580, 3, 2, 4, 42) -> f_367(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v743, v577, v578, v579, v580, 3, 2, 4, 42) :|: TRUE
f_367(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v743, v577, v578, v579, v580, 3, 2, 4, 42) -> f_302(v566, v567, v568, v569, v570, v571, 1, v576, v682, 0, v743, v577, v578, v579, v580, 3, 42, 4) :|: TRUE
f_302(v566, v567, v568, v569, v570, v571, 1, v573, v574, 0, v576, v577, v578, v579, v580, 3, 42, 4) -> f_304(v566, v567, v568, v569, v570, v571, 1, v573, v574, 0, v576, v577, v578, v579, v580, 3, 42, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_304(v566:0, v567:0, v568:0, v569:0, v570:0, v571:0, 1, v573:0, v574:0, 0, 1 + v743:0, v577:0, v578:0, v579:0, v580:0, 3, 42, 4) -> f_304(v566:0, v567:0, v568:0, v569:0, v570:0, v571:0, 1, 1 + v743:0, v682:0, 0, v743:0, v577:0, v578:0, v579:0, v580:0, 3, 42, 4) :|: v573:0 > 1 && v743:0 > -1 && v571:0 > 1 && v682:0 > 41
Filtered unneeded arguments:
   f_304(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_304(x6, x8, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_304(v571:0, v573:0, sum~cons_1~v743:0) -> f_304(v571:0, 1 + v743:0, v743:0) :|: v743:0 > -1 && v571:0 > 1 && v573:0 > 1 && sum~cons_1~v743:0 = 1 + v743:0

----------------------------------------

(39)
Obligation:
Rules:
f_304(v571:0, v573:0, sum~cons_1~v743:0) -> f_304(v571:0, 1 + v743:0, v743:0) :|: v743:0 > -1 && v571:0 > 1 && v573:0 > 1 && sum~cons_1~v743:0 = 1 + v743:0

----------------------------------------

(40) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(41)
Obligation:
Rules:
f_304(v571:0:0, v573:0:0, sum~cons_1~v743:0:0) -> f_304(v571:0:0, 1 + v743:0:0, v743:0:0) :|: v743:0:0 > -1 && v571:0:0 > 1 && v573:0:0 > 1 && sum~cons_1~v743:0:0 = 1 + v743:0:0

----------------------------------------

(42) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_304 ] = f_304_3

The following rules are decreasing:
f_304(v571:0:0, v573:0:0, sum~cons_1~v743:0:0) -> f_304(v571:0:0, 1 + v743:0:0, v743:0:0) :|: v743:0:0 > -1 && v571:0:0 > 1 && v573:0:0 > 1 && sum~cons_1~v743:0:0 = 1 + v743:0:0

The following rules are bounded:
f_304(v571:0:0, v573:0:0, sum~cons_1~v743:0:0) -> f_304(v571:0:0, 1 + v743:0:0, v743:0:0) :|: v743:0:0 > -1 && v571:0:0 > 1 && v573:0:0 > 1 && sum~cons_1~v743:0:0 = 1 + v743:0:0


----------------------------------------

(43)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
