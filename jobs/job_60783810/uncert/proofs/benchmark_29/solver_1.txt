YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/qFoyA.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 58 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1749 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 71 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/qFoyA.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/qFoyA.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %7
		%14 = load %3
		%15 = load %5
		store %14, %15
		%16 = load %4
		%17 = load %6
		store %16, %17
		%18 = load %7
		store 0, %18
		br %19
	19:
		%20 = load %5
		%21 = load %20
		%22 = load %6
		%23 = load %22
		%24 = icmp eq %21 %23
		br %24, %25, %29
	25:
		%26 = load %5
		%27 = load %26
		%28 = icmp sgt %27 0
		br %29
	29:
		%30 = phi [0, %19], [%28, %25]
		br %30, %31, %50
	31:
		br %32
	32:
		%33 = load %6
		%34 = load %33
		%35 = icmp sgt %34 0
		br %35, %36, %49
	36:
		%37 = load %5
		%38 = load %37
		%39 = sub i32 %38, 1
		%40 = load %5
		store %39, %40
		%41 = load %6
		%42 = load %41
		%43 = sub i32 %42, 1
		%44 = load %6
		store %43, %44
		%45 = load %7
		%46 = load %45
		%47 = add i32 %46, 1
		%48 = load %7
		store %47, %48
		br %32
	49:
		br %19
	50:
		%51 = load %7
		%52 = load %51
		ret %52

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 73
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_548(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 4, 8) -> f_549(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 4, 8) :|: 0 = 0
f_549(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 4, 8) -> f_550(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: 0 < v263 && 2 <= v262 && 2 <= v252
f_550(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_552(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_552(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_554(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: TRUE
f_554(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_556(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_556(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_558(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_558(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_560(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: 1 + v277 = v263 && 0 <= v277
f_560(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_562(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_562(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_564(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: TRUE
f_564(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_566(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_566(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v262, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_568(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_568(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_570(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: 1 + v277 = v263
f_570(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_572(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_572(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_574(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: TRUE
f_574(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_576(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_576(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_578(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_578(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_580(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v265, v289, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: v289 = 1 + v265 && 2 <= v289
f_580(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v265, v289, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_582(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v265, v289, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_582(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v265, v289, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_584(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v265, v289, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: TRUE
f_584(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v265, v289, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_586(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v265, v289, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) :|: TRUE
f_586(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v265, v289, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 2, 4, 8) -> f_547(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v263, v277, v265, v289, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 4, 8) :|: TRUE
f_547(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 4, 8) -> f_548(v252, v253, v254, v255, v256, v257, v258, v259, v260, 1, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_548(v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v258:0, v259:0, v260:0, 1, v262:0, 1 + v277:0, v264:0, v265:0, v266:0, v267:0, v268:0, v269:0, v270:0, v271:0, v272:0, v273:0, v274:0, v275:0, 0, 3, 7, 4, 8) -> f_548(v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v258:0, v259:0, v260:0, 1, 1 + v277:0, v277:0, v265:0, 1 + v265:0, v266:0, v267:0, v268:0, v269:0, v270:0, v271:0, v272:0, v273:0, v274:0, v275:0, 0, 3, 7, 4, 8) :|: v262:0 > 1 && v277:0 > -1 && v252:0 > 1 && v265:0 > 0
Filtered unneeded arguments:
   f_548(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_548(x1, x11, x12, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_548(v252:0, v262:0, sum~cons_1~v277:0, v265:0) -> f_548(v252:0, 1 + v277:0, v277:0, 1 + v265:0) :|: v277:0 > -1 && v262:0 > 1 && v265:0 > 0 && v252:0 > 1 && sum~cons_1~v277:0 = 1 + v277:0

----------------------------------------

(8)
Obligation:
Rules:
f_548(v252:0, v262:0, sum~cons_1~v277:0, v265:0) -> f_548(v252:0, 1 + v277:0, v277:0, 1 + v265:0) :|: v277:0 > -1 && v262:0 > 1 && v265:0 > 0 && v252:0 > 1 && sum~cons_1~v277:0 = 1 + v277:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_548(v252:0:0, v262:0:0, sum~cons_1~v277:0:0, v265:0:0) -> f_548(v252:0:0, 1 + v277:0:0, v277:0:0, 1 + v265:0:0) :|: v265:0:0 > 0 && v252:0:0 > 1 && v262:0:0 > 1 && v277:0:0 > -1 && sum~cons_1~v277:0:0 = 1 + v277:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_548(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_548(v252:0:0, v262:0:0, sum~cons_1~v277:0:0, v265:0:0) -> f_548(v252:0:0, 1 + v277:0:0, v277:0:0, 1 + v265:0:0) :|: v265:0:0 > 0 && v252:0:0 > 1 && v262:0:0 > 1 && v277:0:0 > -1 && sum~cons_1~v277:0:0 = 1 + v277:0:0
The following rules are bounded:
f_548(v252:0:0, v262:0:0, sum~cons_1~v277:0:0, v265:0:0) -> f_548(v252:0:0, 1 + v277:0:0, v277:0:0, 1 + v265:0:0) :|: v265:0:0 > 0 && v252:0:0 > 1 && v262:0:0 > 1 && v277:0:0 > -1 && sum~cons_1~v277:0:0 = 1 + v277:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
