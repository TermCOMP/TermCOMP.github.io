YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/dQ1EY.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 383 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 70 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) IntTRS
        (14) TerminationGraphProcessor [EQUIVALENT, 2 ms]
        (15) IntTRS
        (16) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (21) YES
    (22) LLVM Symbolic Execution SCC
        (23) SCC2IRS [SOUND, 38 ms]
        (24) IntTRS
        (25) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (26) IntTRS
        (27) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (28) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/dQ1EY.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/dQ1EY.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		br %4
	4:
		%5 = load %2
		%6 = icmp sge %5 0
		br %6, %7, %21
	7:
		%8 = load %3
		%9 = sub i32 %8, 1
		store %9, %3
		%10 = load %3
		%11 = icmp slt %10 0
		br %11, %12, %16
	12:
		%13 = load %2
		%14 = sub i32 %13, 1
		store %14, %2
		%15 = call i32 @__VERIFIER_nondet_int()
		store %15, %3
		br %16
	16:
		%17 = load %3
		%18 = icmp slt %17 0
		br %18, %19, %20
	19:
		br %21
	20:
		br %4
	21:
		%22 = load %1
		ret %22


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 55 rulesP rules:
f_141(v1, v3, v5, v7, 1, v9, v11, v13, v15, 0, v2, v4, v6, 3, 4) -> f_144(v1, v3, v5, v13, 1, v9, v11, v7, v15, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_144(v1, v3, v5, v13, 1, v9, v11, v7, v15, 0, v2, v4, v6, 3, 4) -> f_147(v1, v3, v5, v13, 1, v9, v11, v7, v15, 0, v2, v4, v6, 3, 4) :|: 0 <= v13 && 1 <= v7
f_147(v1, v3, v5, v13, 1, v9, v11, v7, v15, 0, v2, v4, v6, 3, 4) -> f_151(v1, v3, v5, v13, 1, v9, v11, v7, v15, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_151(v1, v3, v5, v13, 1, v9, v11, v7, v15, 0, v2, v4, v6, 3, 4) -> f_155(v1, v3, v5, v13, 1, v9, v11, v7, v15, 0, v2, v4, v6, 3, 4) :|: TRUE
f_155(v1, v3, v5, v13, 1, v9, v11, v7, v15, 0, v2, v4, v6, 3, 4) -> f_159(v1, v3, v5, v13, 1, v15, v11, v7, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_159(v1, v3, v5, v13, 1, v15, v11, v7, 0, v2, v4, v6, 3, 4) -> f_163(v1, v3, v5, v13, 1, v15, v38, v11, v7, 0, v2, v4, v6, 3, 4) :|: 1 + v38 = v15 && 0 <= 1 + v38
f_163(v1, v3, v5, v13, 1, v15, v38, v11, v7, 0, v2, v4, v6, 3, 4) -> f_166(v1, v3, v5, v13, 1, v15, v38, v11, v7, 0, v2, v4, v6, 3, 4) :|: TRUE
f_166(v1, v3, v5, v13, 1, v15, v38, v11, v7, 0, v2, v4, v6, 3, 4) -> f_169(v1, v3, v5, v13, 1, v15, v38, v7, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_169(v1, v3, v5, v13, 1, v15, v38, v7, 0, v2, v4, v6, 3, 4) -> f_171(v1, v3, v5, v13, 1, 0, -1, v7, v2, v4, v6, 3, 4) :|: v38 < 0 && v15 = 0 && 1 + v38 = 0 && 0 = 0
f_169(v1, v3, v5, v13, 1, v15, v38, v7, 0, v2, v4, v6, 3, 4) -> f_172(v1, v3, v5, v13, 1, v15, v38, v7, 0, v2, v4, v6, 3, 4) :|: 0 <= v38 && 1 <= v15
f_171(v1, v3, v5, v13, 1, 0, -1, v7, v2, v4, v6, 3, 4) -> f_174(v1, v3, v5, v13, 1, 0, -1, v7, v2, v4, v6, 3, 4) :|: 0 = 0
f_174(v1, v3, v5, v13, 1, 0, -1, v7, v2, v4, v6, 3, 4) -> f_177(v1, v3, v5, v13, 1, 0, -1, v7, v2, v4, v6, 3, 4) :|: TRUE
f_177(v1, v3, v5, v13, 1, 0, -1, v7, v2, v4, v6, 3, 4) -> f_208(v1, v3, v5, v13, 1, 0, -1, v7, 0, v2, v4, v6, 3, 4) :|: TRUE
f_208(v234, v235, v236, v237, 1, 0, -1, v241, v242, v243, v244, v245, 3, 4) -> f_211(v234, v235, v236, v237, 1, 0, -1, v242, v243, v244, v245, 3, 4) :|: 0 = 0
f_211(v234, v235, v236, v237, 1, 0, -1, v242, v243, v244, v245, 3, 4) -> f_213(v234, v235, v236, v237, 1, 0, -1, v281, v242, v243, v244, v245, 3, 4) :|: 1 + v281 = v237 && 0 <= 1 + v281
f_213(v234, v235, v236, v237, 1, 0, -1, v281, v242, v243, v244, v245, 3, 4) -> f_215(v234, v235, v236, v237, 1, 0, -1, v281, v242, v243, v244, v245, 3, 4) :|: TRUE
f_215(v234, v235, v236, v237, 1, 0, -1, v281, v242, v243, v244, v245, 3, 4) -> f_217(v234, v235, v236, v237, 1, 0, -1, v281, v296, v243, v244, v245, 3, 4) :|: TRUE
f_217(v234, v235, v236, v237, 1, 0, -1, v281, v296, v243, v244, v245, 3, 4) -> f_219(v234, v235, v236, v237, 1, 0, -1, v281, v296, v243, v244, v245, 3, 4) :|: TRUE
f_219(v234, v235, v236, v237, 1, 0, -1, v281, v296, v243, v244, v245, 3, 4) -> f_221(v234, v235, v236, v237, 1, 0, -1, v281, v296, v243, v244, v245, 3, 4) :|: TRUE
f_221(v234, v235, v236, v237, 1, 0, -1, v281, v296, v243, v244, v245, 3, 4) -> f_173(v234, v235, v236, v237, 1, 0, -1, v281, v296, v243, v244, v245, 3, 4) :|: TRUE
f_173(v1, v3, v5, v7, 1, 0, -1, v37, v46, v2, v4, v6, 3, 4) -> f_176(v1, v3, v5, v7, 1, 0, -1, v46, v37, v2, v4, v6, 3, 4) :|: 0 = 0
f_176(v1, v3, v5, v7, 1, 0, -1, v46, v37, v2, v4, v6, 3, 4) -> f_180(v1, v3, v5, v7, 1, 0, -1, v46, v37, v2, v4, v6, 3, 4) :|: 0 <= v46
f_180(v1, v3, v5, v7, 1, 0, -1, v46, v37, v2, v4, v6, 3, 4) -> f_184(v1, v3, v5, v7, 1, 0, -1, v46, v37, v2, v4, v6, 3, 4) :|: 0 = 0
f_184(v1, v3, v5, v7, 1, 0, -1, v46, v37, v2, v4, v6, 3, 4) -> f_188(v1, v3, v5, v7, 1, 0, -1, v46, v37, v2, v4, v6, 3, 4) :|: TRUE
f_188(v1, v3, v5, v7, 1, 0, -1, v46, v37, v2, v4, v6, 3, 4) -> f_138(v1, v3, v5, v7, 1, 0, -1, v37, v46, 0, v2, v4, v6, 3, 4) :|: TRUE
f_138(v1, v3, v5, v7, 1, v9, v11, v13, v15, 0, v2, v4, v6, 3, 4) -> f_141(v1, v3, v5, v7, 1, v9, v11, v13, v15, 0, v2, v4, v6, 3, 4) :|: TRUE
f_172(v1, v3, v5, v13, 1, v15, v38, v7, 0, v2, v4, v6, 3, 4) -> f_175(v1, v3, v5, v13, 1, v15, v38, 0, v7, v2, v4, v6, 3, 4) :|: 0 = 0
f_175(v1, v3, v5, v13, 1, v15, v38, 0, v7, v2, v4, v6, 3, 4) -> f_178(v1, v3, v5, v13, 1, v15, v38, 0, v7, v2, v4, v6, 3, 4) :|: TRUE
f_178(v1, v3, v5, v13, 1, v15, v38, 0, v7, v2, v4, v6, 3, 4) -> f_210(v1, v3, v5, v13, 1, v15, v38, 0, v7, v15, v2, v4, v6, 3, 4) :|: TRUE
f_210(v268, v269, v270, v271, 1, v273, v274, 0, v276, v277, v278, v279, v280, 3, 4) -> f_234(v268, v269, v270, v271, 1, v273, v274, 0, v276, v277, v278, v279, v280, 3, 4) :|: TRUE
f_234(v394, v395, v396, v397, 1, v399, v400, 0, v402, v403, v404, v405, v406, 3, 4) -> f_235(v394, v395, v396, v397, 1, v399, v400, 0, v402, v403, v404, v405, v406, 3, 4) :|: 0 = 0
f_235(v394, v395, v396, v397, 1, v399, v400, 0, v402, v403, v404, v405, v406, 3, 4) -> f_236(v394, v395, v396, v397, 1, v399, v400, 0, v402, v403, v404, v405, v406, 3, 4) :|: 0 = 0
f_236(v394, v395, v396, v397, 1, v399, v400, 0, v402, v403, v404, v405, v406, 3, 4) -> f_237(v394, v395, v396, v397, 1, v399, v400, 0, v402, v403, v404, v405, v406, 3, 4) :|: TRUE
f_237(v394, v395, v396, v397, 1, v399, v400, 0, v402, v403, v404, v405, v406, 3, 4) -> f_238(v394, v395, v396, v397, 1, v399, v400, 0, v402, v403, v404, v405, v406, 3, 4) :|: TRUE
f_238(v394, v395, v396, v397, 1, v399, v400, 0, v402, v403, v404, v405, v406, 3, 4) -> f_239(v394, v395, v396, v397, 1, v399, v400, 0, v402, v403, v404, v405, v406, 3, 4) :|: 0 = 0
f_239(v394, v395, v396, v397, 1, v399, v400, 0, v402, v403, v404, v405, v406, 3, 4) -> f_240(v394, v395, v396, v397, 1, v399, v400, 0, v402, v403, v404, v405, v406, 3, 4) :|: 0 = 0
f_240(v394, v395, v396, v397, 1, v399, v400, 0, v402, v403, v404, v405, v406, 3, 4) -> f_241(v394, v395, v396, v397, 1, v399, v400, 0, v402, v403, v404, v405, v406, 3, 4) :|: TRUE
f_241(v394, v395, v396, v397, 1, v399, v400, 0, v402, v403, v404, v405, v406, 3, 4) -> f_242(v394, v395, v396, v397, 1, v400, 0, v402, v403, v404, v405, v406, 3, 4) :|: 0 = 0
f_242(v394, v395, v396, v397, 1, v400, 0, v402, v403, v404, v405, v406, 3, 4) -> f_243(v394, v395, v396, v397, 1, v400, v446, 0, v402, v403, v404, v405, v406, 3, 4) :|: 1 + v446 = v400 && 0 <= 1 + v446
f_243(v394, v395, v396, v397, 1, v400, v446, 0, v402, v403, v404, v405, v406, 3, 4) -> f_244(v394, v395, v396, v397, 1, v400, v446, 0, v402, v403, v404, v405, v406, 3, 4) :|: TRUE
f_244(v394, v395, v396, v397, 1, v400, v446, 0, v402, v403, v404, v405, v406, 3, 4) -> f_245(v394, v395, v396, v397, 1, v400, v446, 0, v402, v403, v404, v405, v406, 3, 4) :|: 0 = 0
f_245(v394, v395, v396, v397, 1, v400, v446, 0, v402, v403, v404, v405, v406, 3, 4) -> f_246(v394, v395, v396, v397, 1, 0, -1, v402, v403, v404, v405, v406, 3, 4) :|: v446 < 0 && v400 = 0 && 1 + v446 = 0 && 0 = 0
f_245(v394, v395, v396, v397, 1, v400, v446, 0, v402, v403, v404, v405, v406, 3, 4) -> f_247(v394, v395, v396, v397, 1, v400, v446, 0, v402, v403, v404, v405, v406, 3, 2, 4) :|: 0 <= v446 && 1 <= v400 && 2 <= v403
f_246(v394, v395, v396, v397, 1, 0, -1, v402, v403, v404, v405, v406, 3, 4) -> f_248(v394, v395, v396, v397, 1, 0, -1, v402, v403, v404, v405, v406, 3, 4) :|: 0 = 0
f_248(v394, v395, v396, v397, 1, 0, -1, v402, v403, v404, v405, v406, 3, 4) -> f_250(v394, v395, v396, v397, 1, 0, -1, v402, v403, v404, v405, v406, 3, 4) :|: TRUE
f_250(v394, v395, v396, v397, 1, 0, -1, v402, v403, v404, v405, v406, 3, 4) -> f_252(v394, v395, v396, v397, 1, 0, -1, v403, v404, v405, v406, 3, 4) :|: 0 = 0
f_252(v394, v395, v396, v397, 1, 0, -1, v403, v404, v405, v406, 3, 4) -> f_253(v394, v395, v396, v397, 1, 0, -1, v498, v403, v404, v405, v406, 3, 4) :|: 1 + v498 = v397 && 0 <= 1 + v498
f_253(v394, v395, v396, v397, 1, 0, -1, v498, v403, v404, v405, v406, 3, 4) -> f_254(v394, v395, v396, v397, 1, 0, -1, v498, v403, v404, v405, v406, 3, 4) :|: TRUE
f_254(v394, v395, v396, v397, 1, 0, -1, v498, v403, v404, v405, v406, 3, 4) -> f_255(v394, v395, v396, v397, 1, 0, -1, v498, v500, v404, v405, v406, 3, 4) :|: TRUE
f_255(v394, v395, v396, v397, 1, 0, -1, v498, v500, v404, v405, v406, 3, 4) -> f_256(v394, v395, v396, v397, 1, 0, -1, v498, v500, v404, v405, v406, 3, 4) :|: TRUE
f_256(v394, v395, v396, v397, 1, 0, -1, v498, v500, v404, v405, v406, 3, 4) -> f_257(v394, v395, v396, v397, 1, 0, -1, v498, v500, v404, v405, v406, 3, 4) :|: TRUE
f_257(v394, v395, v396, v397, 1, 0, -1, v498, v500, v404, v405, v406, 3, 4) -> f_173(v394, v395, v396, v397, 1, 0, -1, v498, v500, v404, v405, v406, 3, 4) :|: TRUE
f_247(v394, v395, v396, v397, 1, v400, v446, 0, v402, v403, v404, v405, v406, 3, 2, 4) -> f_249(v394, v395, v396, v397, 1, v400, v446, 0, v402, v403, v404, v405, v406, 3, 2, 4) :|: 0 = 0
f_249(v394, v395, v396, v397, 1, v400, v446, 0, v402, v403, v404, v405, v406, 3, 2, 4) -> f_251(v394, v395, v396, v397, 1, v400, v446, 0, v402, v403, v404, v405, v406, 3, 2, 4) :|: TRUE
f_251(v394, v395, v396, v397, 1, v400, v446, 0, v402, v403, v404, v405, v406, 3, 2, 4) -> f_234(v394, v395, v396, v397, 1, v400, v446, 0, v402, v403, v404, v405, v406, 3, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_245(v394:0, v395:0, v396:0, v397:0, 1, v400:0, 1 + v446:1, 0, v402:0, v403:0, v404:0, v405:0, v406:0, 3, 4) -> f_245(v394:0, v395:0, v396:0, v397:0, 1, 1 + v446:1, v446:1, 0, v402:0, v403:0, v404:0, v405:0, v406:0, 3, 4) :|: v446:1 > -2 && v400:0 > 0 && v403:0 > 1
f_141(v1:0, v3:0, v5:0, v7:0, 1, v9:0, v11:0, v13:0, 1 + (1 + v446:0), 0, v2:0, v4:0, v6:0, 3, 4) -> f_245(v1:0, v3:0, v5:0, v13:0, 1, 1 + v446:0, v446:0, 0, v7:0, 1 + (1 + v446:0), v2:0, v4:0, v6:0, 3, 4) :|: v446:0 > -2 && v7:0 > 0 && v13:0 > -1
f_141(v1:0, v3:0, v5:0, v7:0, 1, v9:0, v11:0, 1 + v281:0, 0, 0, v2:0, v4:0, v6:0, 3, 4) -> f_141(v1:0, v3:0, v5:0, 1 + v281:0, 1, 0, -1, v281:0, v296:0, 0, v2:0, v4:0, v6:0, 3, 4) :|: v7:0 > 0 && v281:0 > -2 && v296:0 > -1
f_245(v394:0, v395:0, v396:0, 1 + v498:0, 1, 0, -1, 0, v402:0, v403:0, v404:0, v405:0, v406:0, 3, 4) -> f_141(v394:0, v395:0, v396:0, 1 + v498:0, 1, 0, -1, v498:0, v500:0, 0, v404:0, v405:0, v406:0, 3, 4) :|: v500:0 > -1 && v498:0 > -2
Filtered unneeded arguments:
   f_245(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_245(x4, x6, x7, x10)
   f_141(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_141(x4, x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_245(v397:0, v400:0, sum~cons_1~v446:1, v403:0) -> f_245(v397:0, 1 + v446:1, v446:1, v403:0) :|: v400:0 > 0 && v403:0 > 1 && v446:1 > -2 && sum~cons_1~v446:1 = 1 + v446:1
f_141(v7:0, v13:0, sum~cons_1~sum~cons_1~v446:0) -> f_245(v13:0, 1 + v446:0, v446:0, 1 + (1 + v446:0)) :|: v7:0 > 0 && v13:0 > -1 && v446:0 > -2 && sum~cons_1~sum~cons_1~v446:0 = 1 + (1 + v446:0)
f_141(v7:0, sum~cons_1~v281:0, cons_0) -> f_141(1 + v281:0, v281:0, v296:0) :|: v281:0 > -2 && v296:0 > -1 && v7:0 > 0 && sum~cons_1~v281:0 = 1 + v281:0 && cons_0 = 0
f_245(sum~cons_1~v498:0, cons_0, cons_-1, v403:0) -> f_141(1 + v498:0, v498:0, v500:0) :|: v500:0 > -1 && v498:0 > -2 && sum~cons_1~v498:0 = 1 + v498:0 && cons_0 = 0 && cons_-1 = -1

----------------------------------------

(9)
Obligation:
Rules:
f_245(v397:0, v400:0, sum~cons_1~v446:1, v403:0) -> f_245(v397:0, 1 + v446:1, v446:1, v403:0) :|: v400:0 > 0 && v403:0 > 1 && v446:1 > -2 && sum~cons_1~v446:1 = 1 + v446:1
f_141(v7:0, v13:0, sum~cons_1~sum~cons_1~v446:0) -> f_245(v13:0, 1 + v446:0, v446:0, 1 + (1 + v446:0)) :|: v7:0 > 0 && v13:0 > -1 && v446:0 > -2 && sum~cons_1~sum~cons_1~v446:0 = 1 + (1 + v446:0)
f_141(x, x1, x2) -> f_141(1 + x3, x3, x4) :|: x3 > -2 && x4 > -1 && x > 0 && x1 = 1 + x3 && x2 = 0
f_245(x5, x6, x7, x8) -> f_141(1 + x9, x9, x10) :|: x10 > -1 && x9 > -2 && x5 = 1 + x9 && x6 = 0 && x7 = -1

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_245(v397:0:0, v400:0:0, sum~cons_1~v446:1:0, v403:0:0) -> f_245(v397:0:0, 1 + v446:1:0, v446:1:0, v403:0:0) :|: v400:0:0 > 0 && v403:0:0 > 1 && v446:1:0 > -2 && sum~cons_1~v446:1:0 = 1 + v446:1:0
f_245(sum~cons_1~x9:0, cons_0, cons_-1, x8:0) -> f_141(1 + x9:0, x9:0, x10:0) :|: x10:0 > -1 && x9:0 > -2 && sum~cons_1~x9:0 = 1 + x9:0 && cons_0 = 0 && cons_-1 = -1
f_141(x, x1, x2) -> f_141(1 + x3, x3, x4) :|: x3 > -2 && x4 > -1 && x > 0 && x1 = 1 + x3 && x2 = 0
f_141(v7:0:0, v13:0:0, sum~cons_1~sum~cons_1~v446:0:0) -> f_245(v13:0:0, 1 + v446:0:0, v446:0:0, 1 + (1 + v446:0:0)) :|: v7:0:0 > 0 && v13:0:0 > -1 && v446:0:0 > -2 && sum~cons_1~sum~cons_1~v446:0:0 = 1 + (1 + v446:0:0)

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_245(x, x1, x2, x3)] = -1 + x
[f_141(x4, x5, x6)] = x5

The following rules are decreasing:
f_141(x, x1, x2) -> f_141(1 + x3, x3, x4) :|: x3 > -2 && x4 > -1 && x > 0 && x1 = 1 + x3 && x2 = 0
f_141(v7:0:0, v13:0:0, sum~cons_1~sum~cons_1~v446:0:0) -> f_245(v13:0:0, 1 + v446:0:0, v446:0:0, 1 + (1 + v446:0:0)) :|: v7:0:0 > 0 && v13:0:0 > -1 && v446:0:0 > -2 && sum~cons_1~sum~cons_1~v446:0:0 = 1 + (1 + v446:0:0)
The following rules are bounded:
f_141(x, x1, x2) -> f_141(1 + x3, x3, x4) :|: x3 > -2 && x4 > -1 && x > 0 && x1 = 1 + x3 && x2 = 0
f_141(v7:0:0, v13:0:0, sum~cons_1~sum~cons_1~v446:0:0) -> f_245(v13:0:0, 1 + v446:0:0, v446:0:0, 1 + (1 + v446:0:0)) :|: v7:0:0 > 0 && v13:0:0 > -1 && v446:0:0 > -2 && sum~cons_1~sum~cons_1~v446:0:0 = 1 + (1 + v446:0:0)

----------------------------------------

(13)
Obligation:
Rules:
f_245(v397:0:0, v400:0:0, sum~cons_1~v446:1:0, v403:0:0) -> f_245(v397:0:0, 1 + v446:1:0, v446:1:0, v403:0:0) :|: v400:0:0 > 0 && v403:0:0 > 1 && v446:1:0 > -2 && sum~cons_1~v446:1:0 = 1 + v446:1:0
f_245(sum~cons_1~x9:0, cons_0, cons_-1, x8:0) -> f_141(1 + x9:0, x9:0, x10:0) :|: x10:0 > -1 && x9:0 > -2 && sum~cons_1~x9:0 = 1 + x9:0 && cons_0 = 0 && cons_-1 = -1

----------------------------------------

(14) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(15)
Obligation:
Rules:
f_245(v397:0:0, v400:0:0, sum~cons_1~v446:1:0, v403:0:0) -> f_245(v397:0:0, 1 + v446:1:0, v446:1:0, v403:0:0) :|: v400:0:0 > 0 && v403:0:0 > 1 && v446:1:0 > -2 && sum~cons_1~v446:1:0 = 1 + v446:1:0

----------------------------------------

(16) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(17)
Obligation:
Rules:
f_245(v397:0:0:0, v400:0:0:0, sum~cons_1~v446:1:0:0, v403:0:0:0) -> f_245(v397:0:0:0, 1 + v446:1:0:0, v446:1:0:0, v403:0:0:0) :|: v400:0:0:0 > 0 && v403:0:0:0 > 1 && v446:1:0:0 > -2 && sum~cons_1~v446:1:0:0 = 1 + v446:1:0:0

----------------------------------------

(18) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_245(x1, x2, x3, x4) -> f_245(x2, x3, x4)

----------------------------------------

(19)
Obligation:
Rules:
f_245(v400:0:0:0, sum~cons_1~v446:1:0:0, v403:0:0:0) -> f_245(1 + v446:1:0:0, v446:1:0:0, v403:0:0:0) :|: v400:0:0:0 > 0 && v403:0:0:0 > 1 && v446:1:0:0 > -2 && sum~cons_1~v446:1:0:0 = 1 + v446:1:0:0

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_245(x, x1, x2)] = x1

The following rules are decreasing:
f_245(v400:0:0:0, sum~cons_1~v446:1:0:0, v403:0:0:0) -> f_245(1 + v446:1:0:0, v446:1:0:0, v403:0:0:0) :|: v400:0:0:0 > 0 && v403:0:0:0 > 1 && v446:1:0:0 > -2 && sum~cons_1~v446:1:0:0 = 1 + v446:1:0:0
The following rules are bounded:
f_245(v400:0:0:0, sum~cons_1~v446:1:0:0, v403:0:0:0) -> f_245(1 + v446:1:0:0, v446:1:0:0, v403:0:0:0) :|: v400:0:0:0 > 0 && v403:0:0:0 > 1 && v446:1:0:0 > -2 && sum~cons_1~v446:1:0:0 = 1 + v446:1:0:0

----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
SCC
----------------------------------------

(23) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_126(v1, v3, v5, v7, 1, v9, v11, 0, v2, v4, v6, 3, 4) -> f_128(v1, v3, v5, v7, 1, v9, v11, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_128(v1, v3, v5, v7, 1, v9, v11, 0, v2, v4, v6, 3, 4) -> f_130(v1, v3, v5, v7, 1, v9, v11, 0, v2, v4, v6, 3, 4) :|: TRUE
f_130(v1, v3, v5, v7, 1, v9, v11, 0, v2, v4, v6, 3, 4) -> f_133(v1, v3, v5, v7, 1, v11, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_133(v1, v3, v5, v7, 1, v11, 0, v2, v4, v6, 3, 4) -> f_136(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) :|: 1 + v17 = v11 && 0 <= 1 + v17
f_136(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) -> f_139(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) :|: TRUE
f_139(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) -> f_142(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_142(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) -> f_146(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) :|: 0 <= v17 && 1 <= v11
f_146(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) -> f_150(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_150(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) -> f_154(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) :|: TRUE
f_154(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) -> f_158(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_158(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) -> f_162(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_162(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) -> f_165(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) :|: TRUE
f_165(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) -> f_168(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) :|: TRUE
f_168(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) -> f_124(v1, v3, v5, v7, 1, v11, v17, 0, v2, v4, v6, 3, 4) :|: TRUE
f_124(v1, v3, v5, v7, 1, v9, v11, 0, v2, v4, v6, 3, 4) -> f_126(v1, v3, v5, v7, 1, v9, v11, 0, v2, v4, v6, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_126(v1:0, v3:0, v5:0, v7:0, 1, v9:0, 1 + v17:0, 0, v2:0, v4:0, v6:0, 3, 4) -> f_126(v1:0, v3:0, v5:0, v7:0, 1, 1 + v17:0, v17:0, 0, v2:0, v4:0, v6:0, 3, 4) :|: v17:0 > -1
Filtered unneeded arguments:
   f_126(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) -> f_126(x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_126(sum~cons_1~v17:0) -> f_126(v17:0) :|: v17:0 > -1 && sum~cons_1~v17:0 = 1 + v17:0

----------------------------------------

(24)
Obligation:
Rules:
f_126(sum~cons_1~v17:0) -> f_126(v17:0) :|: v17:0 > -1 && sum~cons_1~v17:0 = 1 + v17:0

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f_126(sum~cons_1~v17:0:0) -> f_126(v17:0:0) :|: v17:0:0 > -1 && sum~cons_1~v17:0:0 = 1 + v17:0:0

----------------------------------------

(27) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_126(x)] = x

The following rules are decreasing:
f_126(sum~cons_1~v17:0:0) -> f_126(v17:0:0) :|: v17:0:0 > -1 && sum~cons_1~v17:0:0 = 1 + v17:0:0
The following rules are bounded:
f_126(sum~cons_1~v17:0:0) -> f_126(v17:0:0) :|: v17:0:0 > -1 && sum~cons_1~v17:0:0 = 1 + v17:0:0

----------------------------------------

(28)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
