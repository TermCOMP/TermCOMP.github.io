NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/X2vMt.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 110 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [EQUIVALENT, 0 ms]
(6) IntTRS
(7) IRSNoOverapproximation [EQUIVALENT, 0 ms]
(8) IntTRS
(9) IRSToKoat [EQUIVALENT, 0 ms]
(10) Koat Problem
(11) LoAT [COMPLETE, 385 ms]
(12) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/X2vMt.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/X2vMt.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %2
		br %4
	4:
		%5 = load %2
		%6 = icmp sge %5 0
		br %6, %7, %11
	7:
		%8 = load %2
		%9 = call i32 @__VERIFIER_nondet_int()
		%10 = add i32 %8, %9
		store %10, %2
		br %4
	11:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 33 rulesP rules:
f_52 -> f_53(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_53(v1, v2, 3, 1, 4) -> f_54(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_54(v1, v3, v2, v4, 3, 1, 4) -> f_55(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_55(v1, v3, v2, v4, 0, 3, 1, 4) -> f_56(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_56(v1, v3, v2, v4, 0, 3, 1, 4) -> f_57(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_57(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_58(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_58(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_59(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_59(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_60(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: 0 = 0
f_60(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_61(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: 0 <= v5
f_60(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_62(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: v5 < 0
f_61(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_63(v1, v3, v5, 1, v2, v4, 0, 3, 4) :|: 0 = 0
f_62(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_64(v1, v3, v5, 0, v2, v4, 3, 1, 4) :|: 0 = 0
f_63(v1, v3, v5, 1, v2, v4, 0, 3, 4) -> f_65(v1, v3, v5, 1, v2, v4, 0, 3, 4) :|: TRUE
f_64(v1, v3, v5, 0, v2, v4, 3, 1, 4) -> f_66(v1, v3, v5, 0, v2, v4, 3, 1, 4) :|: TRUE
f_65(v1, v3, v5, 1, v2, v4, 0, 3, 4) -> f_67(v1, v3, v5, 1, v2, v4, 0, 3, 4) :|: 0 = 0
f_67(v1, v3, v5, 1, v2, v4, 0, 3, 4) -> f_68(v1, v3, v5, 1, v7, v2, v4, 0, 3, 4) :|: TRUE
f_68(v1, v3, v5, 1, v7, v2, v4, 0, 3, 4) -> f_69(v1, v3, v5, 1, v7, v8, v2, v4, 0, 3, 4) :|: v8 = v5 + v7
f_69(v1, v3, v5, 1, v7, v8, v2, v4, 0, 3, 4) -> f_70(v1, v3, v5, 1, v7, v8, v2, v4, 0, 3, 4) :|: TRUE
f_70(v1, v3, v5, 1, v7, v8, v2, v4, 0, 3, 4) -> f_71(v1, v3, v5, 1, v7, v8, v2, v4, 0, 3, 4) :|: TRUE
f_71(v1, v3, v5, 1, v7, v8, v2, v4, 0, 3, 4) -> f_84(v1, v3, v5, v5, 1, v7, v8, v2, v4, 0, 3, 4) :|: TRUE
f_84(v13, v14, v15, v16, 1, v18, v19, v20, v21, 0, 3, 4) -> f_85(v13, v14, v15, v19, 1, v16, v18, v20, v21, 0, 3, 4) :|: 0 = 0
f_85(v13, v14, v15, v19, 1, v16, v18, v20, v21, 0, 3, 4) -> f_86(v13, v14, v15, v19, 1, v16, v18, v20, v21, 0, 3, 4) :|: 0 <= v19
f_85(v13, v14, v15, v19, 1, v16, v18, v20, v21, 0, 3, 4) -> f_87(v13, v14, v15, v19, 1, v16, v18, v20, v21, 0, 3, 4) :|: v19 < 0 && 1 + v18 <= 0
f_86(v13, v14, v15, v19, 1, v16, v18, v20, v21, 0, 3, 4) -> f_88(v13, v14, v15, v19, 1, v16, v18, v20, v21, 0, 3, 4) :|: 0 = 0
f_87(v13, v14, v15, v19, 1, v16, v18, v20, v21, 0, 3, 4) -> f_89(v13, v14, v15, v19, 0, v16, v18, v20, v21, 3, 1, 4) :|: 0 = 0
f_88(v13, v14, v15, v19, 1, v16, v18, v20, v21, 0, 3, 4) -> f_90(v13, v14, v15, v19, 1, v16, v18, v20, v21, 0, 3, 4) :|: TRUE
f_89(v13, v14, v15, v19, 0, v16, v18, v20, v21, 3, 1, 4) -> f_91(v13, v14, v15, v19, 0, v16, v18, v20, v21, 3, 1, 4) :|: TRUE
f_90(v13, v14, v15, v19, 1, v16, v18, v20, v21, 0, 3, 4) -> f_92(v13, v14, v15, v19, 1, v18, v20, v21, 0, 3, 4) :|: 0 = 0
f_92(v13, v14, v15, v19, 1, v18, v20, v21, 0, 3, 4) -> f_93(v13, v14, v15, v19, 1, v23, v20, v21, 0, 3, 4) :|: TRUE
f_93(v13, v14, v15, v19, 1, v23, v20, v21, 0, 3, 4) -> f_94(v13, v14, v15, v19, 1, v23, v24, v20, v21, 0, 3, 4) :|: v24 = v19 + v23
f_94(v13, v14, v15, v19, 1, v23, v24, v20, v21, 0, 3, 4) -> f_95(v13, v14, v15, v19, 1, v23, v24, v20, v21, 0, 3, 4) :|: TRUE
f_95(v13, v14, v15, v19, 1, v23, v24, v20, v21, 0, 3, 4) -> f_96(v13, v14, v15, v19, 1, v23, v24, v20, v21, 0, 3, 4) :|: TRUE
f_96(v13, v14, v15, v19, 1, v23, v24, v20, v21, 0, 3, 4) -> f_84(v13, v14, v15, v19, 1, v23, v24, v20, v21, 0, 3, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_85(v13:0, v14:0, v15:0, v19:0, 1, v16:0, v18:0, v20:0, v21:0, 0, 3, 4) -> f_91(v13:0, v14:0, v15:0, v19:0, 0, v16:0, v18:0, v20:0, v21:0, 3, 1, 4) :|: v19:0 < 0 && v18:0 < 0
f_85(v13:0, v14:0, v15:0, v19:0, 1, v16:0, v18:0, v20:0, v21:0, 0, 3, 4) -> f_85(v13:0, v14:0, v15:0, v19:0 + v23:0, 1, v19:0, v23:0, v20:0, v21:0, 0, 3, 4) :|: v19:0 > -1
f_52 -> f_66(v1:0, v3:0, v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 < 0
f_52 -> f_85(v1:0, v3:0, v5:0, v5:0 + v7:0, 1, v5:0, v7:0, 3 + v1:0, 3 + v3:0, 0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > -1
Filtered unneeded arguments:
   f_85(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) -> f_85(x4, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_85(v19:0, v18:0) -> f_91(v13:0, v14:0, v15:0, v19:0, 0, v16:0, v18:0, v20:0, v21:0, 3, 1, 4) :|: v19:0 < 0 && v18:0 < 0
f_85(v19:0, v18:0) -> f_85(v19:0 + v23:0, v23:0) :|: v19:0 > -1
f_52 -> f_66(v1:0, v3:0, v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4) :|: v1:0 > 0 && v5:0 < 0 && v3:0 > 0
f_52 -> f_85(v5:0 + v7:0, v7:0) :|: v5:0 > -1

----------------------------------------

(6)
Obligation:
Rules:
f_85(v19:0, v18:0) -> f_91(v13:0, v14:0, v15:0, v19:0, 0, v16:0, v18:0, v20:0, v21:0, 3, 1, 4) :|: v19:0 < 0 && v18:0 < 0
f_85(x, x1) -> f_85(x + x2, x2) :|: x > -1
f_52 -> f_66(v1:0, v3:0, v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4) :|: v1:0 > 0 && v5:0 < 0 && v3:0 > 0
f_52 -> f_85(x3 + x4, x4) :|: x3 > -1
Start term: f_52

----------------------------------------

(7) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination can continue
----------------------------------------

(8)
Obligation:
Rules:
f_85(v19:0, v18:0) -> f_91(v13:0, v14:0, v15:0, v19:0, 0, v16:0, v18:0, v20:0, v21:0, 3, 1, 4) :|: v19:0 < 0 && v18:0 < 0
f_85(x, x1) -> f_85(x + x2, x2) :|: x > -1
f_52 -> f_66(v1:0, v3:0, v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4) :|: v1:0 > 0 && v5:0 < 0 && v3:0 > 0
f_52 -> f_85(x3 + x4, x4) :|: x3 > -1
Start term: f_52

----------------------------------------

(9) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(10)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_52))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x x40 x41 x39 x35 x36 x37 x38 x31 x32 x'' x33 x34 x30 k14 k15 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x7 x27 x20 x64 x21 x22 x23 x60 x1 x61 x62 x63 k7 k8 k5 k6 k9 x' k0 k3 k4 k1 k2 x17 x18 x19 x13 x57 x14 x58 x15 x59 x16 x53 x10 x54 x11 x55 x12 x56 x50 x51 x52)
(RULES
  f_85(k14, k15, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32) -> f_85(k14 + k11, k11, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42) :|: k14 > -1
  f_52(x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54) -> f_85(k13 + k7, k7, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64) :|: k13 > -1
  f_52(x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_66(k6, k9, k12, 0, 3 + k6, 3 + k9, 3, 1, 4, x20, x21, x22) :|: k6 > 0 && k12 < 0 && k9 > 0
  f_85(k10, k8, x, x', x'', x1, x2, x3, x4, x5, x6, x7) -> f_91(k2, k3, k4, k10, 0, k5, k8, k0, k1, 3, 1, 4) :|: k10 < 0 && k8 < 0
)

----------------------------------------

(11) LoAT (COMPLETE)
LoAT was called with the following command:

/aprove/bin/loat --plain --nonterm --proof-level 3 /tmp/aprove.InputModules.Programs.loat2650719670626736022.koat 

LoAT's output was:


### Pre-processing the ITS problem ###

Initial linear ITS problem
   Start location: f_52
      0: f_85 -> f_85 : k14'=k14+free_5, k15'=free_5, x23'=free_8, x24'=free, x25'=free_3, x26'=free_7, x27'=free_10, x28'=free_2, x29'=free_6, x30'=free_1, x31'=free_4, x32'=free_9, [ k14>-1 ], cost: 1
      3: f_85 -> f_91 : k0'=free_29, k1'=free_30, k10'=free_32, k11'=k14, k12'=0, k13'=free_34, k14'=k15, k15'=free_31, k2'=free_33, k3'=3, k4'=1, k5'=4, [ k14<0 && k15<0 ], cost: 1
      1: f_52 -> f_85 : k14'=free_12+free_17, k15'=free_17, x23'=free_21, x24'=free_14, x25'=free_16, x26'=free_20, x27'=free_13, x28'=free_19, x29'=free_11, x30'=free_15, x31'=free_18, x32'=free_22, [ free_12>-1 ], cost: 1
      2: f_52 -> f_66 : k0'=free_24, k1'=free_23, k10'=free_27, k11'=0, k12'=3+free_24, k13'=3+free_23, k14'=3, k15'=1, k2'=4, k3'=free_25, k4'=free_26, k5'=free_28, [ free_24>0 && free_27<0 && free_23>0 ], cost: 1

Checking for constant complexity:
   The following rule is satisfiable with cost >= 1, yielding constant complexity:
      1: f_52 -> f_85 : k14'=free_12+free_17, k15'=free_17, x23'=free_21, x24'=free_14, x25'=free_16, x26'=free_20, x27'=free_13, x28'=free_19, x29'=free_11, x30'=free_15, x31'=free_18, x32'=free_22, [ free_12>-1 ], cost: 1

Removed unreachable and leaf rules:
   Start location: f_52
      0: f_85 -> f_85 : k14'=k14+free_5, k15'=free_5, x23'=free_8, x24'=free, x25'=free_3, x26'=free_7, x27'=free_10, x28'=free_2, x29'=free_6, x30'=free_1, x31'=free_4, x32'=free_9, [ k14>-1 ], cost: 1
      1: f_52 -> f_85 : k14'=free_12+free_17, k15'=free_17, x23'=free_21, x24'=free_14, x25'=free_16, x26'=free_20, x27'=free_13, x28'=free_19, x29'=free_11, x30'=free_15, x31'=free_18, x32'=free_22, [ free_12>-1 ], cost: 1

### Simplification by acceleration and chaining ###

Accelerating simple loops of location 0.
   Accelerating the following rules:
      0: f_85 -> f_85 : k14'=k14+free_5, k15'=free_5, x23'=free_8, x24'=free, x25'=free_3, x26'=free_7, x27'=free_10, x28'=free_2, x29'=free_6, x30'=free_1, x31'=free_4, x32'=free_9, [ k14>-1 ], cost: 1

[0;36m[test] deduced pseudo-invariant -free_5<=0, also trying free_5<=-1[0m
   Accelerated rule 0 with non-termination, yielding the new rule 4.
   Accelerated rule 0 with non-termination, yielding the new rule 5.
   Accelerated rule 0 with backward acceleration, yielding the new rule 6.
   Accelerated rule 0 with backward acceleration, yielding the new rule 7.
   Also removing duplicate rules: 5.

Accelerated all simple loops using metering functions (where possible):
   Start location: f_52
      0: f_85 -> f_85 : k14'=k14+free_5, k15'=free_5, x23'=free_8, x24'=free, x25'=free_3, x26'=free_7, x27'=free_10, x28'=free_2, x29'=free_6, x30'=free_1, x31'=free_4, x32'=free_9, [ k14>-1 ], cost: 1
      4: f_85 -> [4] : [ k14>-1 && k14==k14+free_5 ], cost: NONTERM
      6: f_85 -> [4] : [ k14>-1 && -free_5<=0 ], cost: NONTERM
      7: f_85 -> f_85 : k14'=k14+k*free_5, k15'=free_5, x23'=free_8, x24'=free, x25'=free_3, x26'=free_7, x27'=free_10, x28'=free_2, x29'=free_6, x30'=free_1, x31'=free_4, x32'=free_9, [ free_5<=-1 && k>=1 && k14+(-1+k)*free_5>-1 ], cost: k
      1: f_52 -> f_85 : k14'=free_12+free_17, k15'=free_17, x23'=free_21, x24'=free_14, x25'=free_16, x26'=free_20, x27'=free_13, x28'=free_19, x29'=free_11, x30'=free_15, x31'=free_18, x32'=free_22, [ free_12>-1 ], cost: 1

Chaining 4 accelerated rules with incoming rules:
   Chained incoming rule 1 with accelerated rule 0 to new rule 8.
   Removing accelerated rule 0.
   Chained incoming rule 1 with accelerated rule 4 to new rule 9.
   Removing accelerated rule 4.
   Chained incoming rule 1 with accelerated rule 6 to new rule 10.
   Removing accelerated rule 6.
   Chained incoming rule 1 with accelerated rule 7 to new rule 11.
   Removing accelerated rule 7.

Chained accelerated rules (with incoming rules):
   Start location: f_52
      1: f_52 -> f_85 : k14'=free_12+free_17, k15'=free_17, x23'=free_21, x24'=free_14, x25'=free_16, x26'=free_20, x27'=free_13, x28'=free_19, x29'=free_11, x30'=free_15, x31'=free_18, x32'=free_22, [ free_12>-1 ], cost: 1
      8: f_52 -> f_85 : k14'=free_12+free_17+free_5, k15'=free_5, x23'=free_8, x24'=free, x25'=free_3, x26'=free_7, x27'=free_10, x28'=free_2, x29'=free_6, x30'=free_1, x31'=free_4, x32'=free_9, [ free_12>-1 && free_12+free_17>-1 ], cost: 2
      9: f_52 -> [4] : [], cost: NONTERM
     10: f_52 -> [4] : [], cost: NONTERM
     11: f_52 -> f_85 : k14'=free_12+k*free_5+free_17, k15'=free_5, x23'=free_8, x24'=free, x25'=free_3, x26'=free_7, x27'=free_10, x28'=free_2, x29'=free_6, x30'=free_1, x31'=free_4, x32'=free_9, [ free_12>-1 && free_5<=-1 && k>=1 && free_12+(-1+k)*free_5+free_17>-1 ], cost: 1+k

Removed unreachable locations (and leaf rules with constant cost):
   Start location: f_52
      9: f_52 -> [4] : [], cost: NONTERM
     10: f_52 -> [4] : [], cost: NONTERM
     11: f_52 -> f_85 : k14'=free_12+k*free_5+free_17, k15'=free_5, x23'=free_8, x24'=free, x25'=free_3, x26'=free_7, x27'=free_10, x28'=free_2, x29'=free_6, x30'=free_1, x31'=free_4, x32'=free_9, [ free_12>-1 && free_5<=-1 && k>=1 && free_12+(-1+k)*free_5+free_17>-1 ], cost: 1+k

### Computing asymptotic complexity ###

Fully simplified ITS problem
   Start location: f_52
     10: f_52 -> [4] : [], cost: NONTERM
     11: f_52 -> f_85 : k14'=free_12+k*free_5+free_17, k15'=free_5, x23'=free_8, x24'=free, x25'=free_3, x26'=free_7, x27'=free_10, x28'=free_2, x29'=free_6, x30'=free_1, x31'=free_4, x32'=free_9, [ free_12>-1 && free_5<=-1 && k>=1 && free_12+(-1+k)*free_5+free_17>-1 ], cost: 1+k

Computing asymptotic complexity for rule 10
   Guard is satisfiable, yielding nontermination
   Resulting cost NONTERM has complexity: Nonterm

Found new complexity Nonterm.

Obtained the following overall complexity (w.r.t. the length of the input n):
   Complexity:  Nonterm
   Cpx degree:  Nonterm
   Solved cost: NONTERM
   Rule cost:   NONTERM
   Rule guard:  []

NO


The final guard is:


Z3 found a model for the final guard:
{}

Try to generate a witness via retracing LoAT's simplifications:
  AssertionError: null
No witness generated
----------------------------------------

(12)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
Truth value repropagation in proof tree changed value to NO
