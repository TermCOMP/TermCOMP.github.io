YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/4iPJw.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 891 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 36 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 36 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/4iPJw.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/4iPJw.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		store 0, %2
		%7 = load %3
		%8 = icmp sgt %7 0
		br %8, %9, %30
	9:
		%10 = load %4
		%11 = icmp sgt %10 0
		br %11, %12, %30
	12:
		br %13
	13:
		%14 = load %3
		%15 = icmp eq %14 0
		%16 = xor i1 %15, 1
		br %16, %17, %29
	17:
		%18 = load %3
		%19 = load %4
		%20 = icmp sgt %18 %19
		br %20, %21, %23
	21:
		%22 = load %4
		store %22, %3
		br %26
	23:
		%24 = load %3
		%25 = sub i32 %24, 1
		store %25, %3
		br %26
	26:
		%27 = load %2
		%28 = add i32 %27, 1
		store %28, %2
		br %13
	29:
		br %30
	30:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_441(v846, v847, v848, v849, v850, v851, 1, v853, 0, v856, v857, v858, v859, v860, v861, 3, 2, 4) -> f_443(v846, v847, v848, v849, v850, v851, 1, v853, 0, v856, v864, v857, v858, v859, v860, v861, 3, 2, 4) :|: v864 = 1 + v856 && 2 <= v864
f_443(v846, v847, v848, v849, v850, v851, 1, v853, 0, v856, v864, v857, v858, v859, v860, v861, 3, 2, 4) -> f_445(v846, v847, v848, v849, v850, v851, 1, v853, 0, v856, v864, v857, v858, v859, v860, v861, 3, 2, 4) :|: TRUE
f_445(v846, v847, v848, v849, v850, v851, 1, v853, 0, v856, v864, v857, v858, v859, v860, v861, 3, 2, 4) -> f_447(v846, v847, v848, v849, v850, v851, 1, v853, 0, v856, v864, v857, v858, v859, v860, v861, 3, 2, 4) :|: TRUE
f_447(v846, v847, v848, v849, v850, v851, 1, v853, 0, v856, v864, v857, v858, v859, v860, v861, 3, 2, 4) -> f_449(v846, v847, v848, v849, v850, v851, 1, v857, 0, v853, v856, v864, v858, v859, v860, v861, 3, 2, 4) :|: 0 = 0
f_449(v846, v847, v848, v849, v850, v851, 1, v857, 0, v853, v856, v864, v858, v859, v860, v861, 3, 2, 4) -> f_452(v846, v847, v848, v849, v850, v851, 1, v857, 0, v853, v856, v864, v858, v859, v860, v861, 3, 2, 4) :|: v857 != 0 && 2 <= v853 && 3 <= v850 && 2 <= v851
f_452(v846, v847, v848, v849, v850, v851, 1, v857, 0, v853, v856, v864, v858, v859, v860, v861, 3, 2, 4) -> f_455(v846, v847, v848, v849, v850, v851, 1, v857, 0, v853, v856, v864, v858, v859, v860, v861, 3, 2, 4) :|: 0 = 0
f_455(v846, v847, v848, v849, v850, v851, 1, v857, 0, v853, v856, v864, v858, v859, v860, v861, 3, 2, 4) -> f_457(v846, v847, v848, v849, v850, v851, 1, v857, 0, v853, v856, v864, v858, v859, v860, v861, 3, 2, 4) :|: 0 = 0
f_457(v846, v847, v848, v849, v850, v851, 1, v857, 0, v853, v856, v864, v858, v859, v860, v861, 3, 2, 4) -> f_459(v846, v847, v848, v849, v850, v851, 1, v857, 0, v853, v856, v864, v858, v859, v860, v861, 3, 2, 4) :|: TRUE
f_459(v846, v847, v848, v849, v850, v851, 1, v857, 0, v853, v856, v864, v858, v859, v860, v861, 3, 2, 4) -> f_461(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v853, v858, v859, v860, v861, 3, 2, 4) :|: 0 = 0
f_461(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v853, v858, v859, v860, v861, 3, 2, 4) -> f_462(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v853, v858, v859, v860, v861, 3, 2, 4) :|: 0 = 0
f_462(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v853, v858, v859, v860, v861, 3, 2, 4) -> f_463(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v853, v858, v859, v860, v861, 3, 2, 4) :|: 0 = 0
f_463(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v853, v858, v859, v860, v861, 3, 2, 4) -> f_464(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v853, v858, v859, v860, v861, 3, 2, 4) :|: TRUE
f_464(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v853, v858, v859, v860, v861, 3, 2, 4) -> f_465(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v858, v859, v860, v861, 3, 2, 4) :|: 0 = 0
f_465(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v858, v859, v860, v861, 3, 2, 4) -> f_466(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v1003, v858, v859, v860, v861, 3, 2, 4) :|: 1 + v1003 = v857 && 0 <= v1003
f_466(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v1003, v858, v859, v860, v861, 3, 2, 4) -> f_467(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v1003, v858, v859, v860, v861, 3, 2, 4) :|: TRUE
f_467(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v1003, v858, v859, v860, v861, 3, 2, 4) -> f_468(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v1003, v858, v859, v860, v861, 3, 2, 4) :|: TRUE
f_468(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v1003, v858, v859, v860, v861, 3, 2, 4) -> f_439(v846, v847, v848, v849, v850, v851, 1, v857, 0, v856, v864, v1003, v858, v859, v860, v861, 3, 2, 4) :|: TRUE
f_439(v846, v847, v848, v849, v850, v851, 1, v853, 0, v855, v856, v857, v858, v859, v860, v861, 3, 2, 4) -> f_441(v846, v847, v848, v849, v850, v851, 1, v853, 0, v856, v857, v858, v859, v860, v861, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_441(v846:0, v847:0, v848:0, v849:0, v850:0, v851:0, 1, v853:0, 0, v856:0, 1 + v1003:0, v858:0, v859:0, v860:0, v861:0, 3, 2, 4) -> f_441(v846:0, v847:0, v848:0, v849:0, v850:0, v851:0, 1, 1 + v1003:0, 0, 1 + v856:0, v1003:0, v858:0, v859:0, v860:0, v861:0, 3, 2, 4) :|: v856:0 > 0 && v853:0 > 1 && v1003:0 > -1 && v850:0 > 2 && v851:0 > 1
Filtered unneeded arguments:
   f_441(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_441(x5, x6, x8, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_441(v850:0, v851:0, v853:0, v856:0, sum~cons_1~v1003:0) -> f_441(v850:0, v851:0, 1 + v1003:0, 1 + v856:0, v1003:0) :|: v853:0 > 1 && v856:0 > 0 && v1003:0 > -1 && v851:0 > 1 && v850:0 > 2 && sum~cons_1~v1003:0 = 1 + v1003:0

----------------------------------------

(9)
Obligation:
Rules:
f_441(v850:0, v851:0, v853:0, v856:0, sum~cons_1~v1003:0) -> f_441(v850:0, v851:0, 1 + v1003:0, 1 + v856:0, v1003:0) :|: v853:0 > 1 && v856:0 > 0 && v1003:0 > -1 && v851:0 > 1 && v850:0 > 2 && sum~cons_1~v1003:0 = 1 + v1003:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_441(v850:0:0, v851:0:0, v853:0:0, v856:0:0, sum~cons_1~v1003:0:0) -> f_441(v850:0:0, v851:0:0, 1 + v1003:0:0, 1 + v856:0:0, v1003:0:0) :|: v851:0:0 > 1 && v850:0:0 > 2 && v1003:0:0 > -1 && v856:0:0 > 0 && v853:0:0 > 1 && sum~cons_1~v1003:0:0 = 1 + v1003:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_441(x, x1, x2, x3, x4)] = x4

The following rules are decreasing:
f_441(v850:0:0, v851:0:0, v853:0:0, v856:0:0, sum~cons_1~v1003:0:0) -> f_441(v850:0:0, v851:0:0, 1 + v1003:0:0, 1 + v856:0:0, v1003:0:0) :|: v851:0:0 > 1 && v850:0:0 > 2 && v1003:0:0 > -1 && v856:0:0 > 0 && v853:0:0 > 1 && sum~cons_1~v1003:0:0 = 1 + v1003:0:0
The following rules are bounded:
f_441(v850:0:0, v851:0:0, v853:0:0, v856:0:0, sum~cons_1~v1003:0:0) -> f_441(v850:0:0, v851:0:0, 1 + v1003:0:0, 1 + v856:0:0, v1003:0:0) :|: v851:0:0 > 1 && v850:0:0 > 2 && v1003:0:0 > -1 && v856:0:0 > 0 && v853:0:0 > 1 && sum~cons_1~v1003:0:0 = 1 + v1003:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_411(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 4) -> f_415(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) :|: v760 != 0 && 2 <= v758 && 2 <= v755 && 2 <= v756
f_415(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) -> f_419(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) :|: 0 = 0
f_419(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) -> f_423(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) :|: 0 = 0
f_423(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) -> f_426(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) :|: TRUE
f_426(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) -> f_429(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) :|: 0 = 0
f_429(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) -> f_431(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) :|: 0 = 0
f_431(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) -> f_433(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) :|: 0 = 0
f_433(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) -> f_435(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) :|: TRUE
f_435(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 2, 4) -> f_437(v751, v752, v753, v754, v755, v756, 1, v760, 0, v761, v762, v763, v764, v765, v766, 3, 2, 4) :|: 0 = 0
f_437(v751, v752, v753, v754, v755, v756, 1, v760, 0, v761, v762, v763, v764, v765, v766, 3, 2, 4) -> f_440(v751, v752, v753, v754, v755, v756, 1, v760, 0, v862, v761, v762, v763, v764, v765, v766, 3, 2, 4) :|: 1 + v862 = v760 && 0 <= v862
f_440(v751, v752, v753, v754, v755, v756, 1, v760, 0, v862, v761, v762, v763, v764, v765, v766, 3, 2, 4) -> f_442(v751, v752, v753, v754, v755, v756, 1, v760, 0, v862, v761, v762, v763, v764, v765, v766, 3, 2, 4) :|: TRUE
f_442(v751, v752, v753, v754, v755, v756, 1, v760, 0, v862, v761, v762, v763, v764, v765, v766, 3, 2, 4) -> f_444(v751, v752, v753, v754, v755, v756, 1, v760, 0, v862, v761, v762, v763, v764, v765, v766, 3, 2, 4) :|: TRUE
f_444(v751, v752, v753, v754, v755, v756, 1, v760, 0, v862, v761, v762, v763, v764, v765, v766, 3, 2, 4) -> f_446(v751, v752, v753, v754, v755, v756, 1, v760, 0, v862, v762, v763, v764, v765, v766, 3, 2, 4) :|: 0 = 0
f_446(v751, v752, v753, v754, v755, v756, 1, v760, 0, v862, v762, v763, v764, v765, v766, 3, 2, 4) -> f_448(v751, v752, v753, v754, v755, v756, 1, v760, 0, v862, v762, v902, v763, v764, v765, v766, 3, 2, 4) :|: v902 = 1 + v762 && 2 <= v902
f_448(v751, v752, v753, v754, v755, v756, 1, v760, 0, v862, v762, v902, v763, v764, v765, v766, 3, 2, 4) -> f_450(v751, v752, v753, v754, v755, v756, 1, v760, 0, v862, v762, v902, v763, v764, v765, v766, 3, 2, 4) :|: TRUE
f_450(v751, v752, v753, v754, v755, v756, 1, v760, 0, v862, v762, v902, v763, v764, v765, v766, 3, 2, 4) -> f_453(v751, v752, v753, v754, v755, v756, 1, v760, 0, v862, v762, v902, v763, v764, v765, v766, 3, 2, 4) :|: TRUE
f_453(v751, v752, v753, v754, v755, v756, 1, v760, 0, v862, v762, v902, v763, v764, v765, v766, 3, 2, 4) -> f_408(v751, v752, v753, v754, v755, v756, 1, v760, 0, v862, v762, v902, v763, v764, v765, v766, 3, 4) :|: TRUE
f_408(v751, v752, v753, v754, v755, v756, 1, v758, 0, v760, v761, v762, v763, v764, v765, v766, 3, 4) -> f_411(v751, v752, v753, v754, v755, v756, 1, v760, 0, v758, v761, v762, v763, v764, v765, v766, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_411(v751:0, v752:0, v753:0, v754:0, v755:0, v756:0, 1, 1 + v862:0, 0, v758:0, v761:0, v762:0, v763:0, v764:0, v765:0, v766:0, 3, 4) -> f_411(v751:0, v752:0, v753:0, v754:0, v755:0, v756:0, 1, v862:0, 0, 1 + v862:0, v762:0, 1 + v762:0, v763:0, v764:0, v765:0, v766:0, 3, 4) :|: v758:0 > 1 && v862:0 > -1 && v755:0 > 1 && v756:0 > 1 && v762:0 > 0
Filtered unneeded arguments:
   f_411(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_411(x5, x6, x8, x10, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_411(v755:0, v756:0, sum~cons_1~v862:0, v758:0, v762:0) -> f_411(v755:0, v756:0, v862:0, 1 + v862:0, 1 + v762:0) :|: v862:0 > -1 && v758:0 > 1 && v755:0 > 1 && v762:0 > 0 && v756:0 > 1 && sum~cons_1~v862:0 = 1 + v862:0

----------------------------------------

(16)
Obligation:
Rules:
f_411(v755:0, v756:0, sum~cons_1~v862:0, v758:0, v762:0) -> f_411(v755:0, v756:0, v862:0, 1 + v862:0, 1 + v762:0) :|: v862:0 > -1 && v758:0 > 1 && v755:0 > 1 && v762:0 > 0 && v756:0 > 1 && sum~cons_1~v862:0 = 1 + v862:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_411(v755:0:0, v756:0:0, sum~cons_1~v862:0:0, v758:0:0, v762:0:0) -> f_411(v755:0:0, v756:0:0, v862:0:0, 1 + v862:0:0, 1 + v762:0:0) :|: v762:0:0 > 0 && v756:0:0 > 1 && v755:0:0 > 1 && v758:0:0 > 1 && v862:0:0 > -1 && sum~cons_1~v862:0:0 = 1 + v862:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_411(x, x1, x2, x3, x4)] = x2

The following rules are decreasing:
f_411(v755:0:0, v756:0:0, sum~cons_1~v862:0:0, v758:0:0, v762:0:0) -> f_411(v755:0:0, v756:0:0, v862:0:0, 1 + v862:0:0, 1 + v762:0:0) :|: v762:0:0 > 0 && v756:0:0 > 1 && v755:0:0 > 1 && v758:0:0 > 1 && v862:0:0 > -1 && sum~cons_1~v862:0:0 = 1 + v862:0:0
The following rules are bounded:
f_411(v755:0:0, v756:0:0, sum~cons_1~v862:0:0, v758:0:0, v762:0:0) -> f_411(v755:0:0, v756:0:0, v862:0:0, 1 + v862:0:0, 1 + v762:0:0) :|: v762:0:0 > 0 && v756:0:0 > 1 && v755:0:0 > 1 && v758:0:0 > 1 && v862:0:0 > -1 && sum~cons_1~v862:0:0 = 1 + v862:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
