YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Pkqv4.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3863 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 48 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 48 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 14 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 52 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Pkqv4.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Pkqv4.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %7
		%14 = load %3
		%15 = load %5
		store %14, %15
		%16 = load %4
		%17 = load %6
		store %16, %17
		%18 = load %7
		store 0, %18
		br %19
	19:
		%20 = load %5
		%21 = load %20
		%22 = load %6
		%23 = load %22
		%24 = add i32 %21, %23
		%25 = icmp sgt %24 0
		br %25, %26, %51
	26:
		%27 = load %5
		%28 = load %27
		%29 = icmp sgt %28 0
		br %29, %30, %35
	30:
		%31 = load %5
		%32 = load %31
		%33 = sub i32 %32, 1
		%34 = load %5
		store %33, %34
		br %46
	35:
		%36 = load %6
		%37 = load %36
		%38 = icmp sgt %37 0
		br %38, %39, %44
	39:
		%40 = load %6
		%41 = load %40
		%42 = sub i32 %41, 1
		%43 = load %6
		store %42, %43
		br %45
	44:
		br %45
	45:
		br %46
	46:
		%47 = load %7
		%48 = load %47
		%49 = add i32 %48, 1
		%50 = load %7
		store %49, %50
		br %19
	51:
		%52 = load %7
		%53 = load %52
		ret %53

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 77
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 30 rulesP rules:
f_957(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8) -> f_958(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8) :|: 0 = 0
f_958(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8) -> f_959(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8) :|: 0 = 0
f_959(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8) -> f_960(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1015, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) :|: v1015 = 1 + v1003 && 2 <= v1015
f_960(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1015, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) -> f_961(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1015, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) :|: 0 = 0
f_961(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1015, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) -> f_962(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1015, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) :|: TRUE
f_962(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1015, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) -> f_963(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1015, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) :|: TRUE
f_963(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1015, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) -> f_964(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1015, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) :|: 0 = 0
f_964(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1015, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) -> f_965(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1015, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) :|: 0 = 0
f_965(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1015, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) -> f_966(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1015, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) :|: 0 = 0
f_966(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1003, v1015, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) -> f_967(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, v1000, 1, v1003, v1015, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) :|: 0 = 0
f_967(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, v1000, 1, v1003, v1015, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) -> f_968(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) :|: 0 = 0
f_968(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8, 2) -> f_969(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: 0 < v1004 && 2 <= v1000 && 2 <= v990
f_969(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_971(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: 0 = 0
f_971(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_973(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: TRUE
f_973(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_975(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: 0 = 0
f_975(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_977(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: 0 = 0
f_977(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_979(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: 0 = 0
f_979(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_981(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: TRUE
f_981(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_982(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: 0 = 0
f_982(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_983(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: 0 = 0
f_983(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_984(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: 0 = 0
f_984(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_985(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: TRUE
f_985(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_986(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: 0 = 0
f_986(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1000, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_987(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: 0 = 0
f_987(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_988(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1064, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: 1 + v1064 = v1004 && 0 <= v1064
f_988(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1064, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_989(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1064, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: 0 = 0
f_989(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1064, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_990(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1064, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: TRUE
f_990(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1064, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_991(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1064, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) :|: TRUE
f_991(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1064, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 2, 4, 8) -> f_956(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1004, 1, v1003, v1015, v1064, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8) :|: TRUE
f_956(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8) -> f_957(v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, 0, v1000, 1, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, 3, 7, 4, 8) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_957(v989:0, v990:0, v991:0, v992:0, v993:0, v994:0, v995:0, v996:0, v997:0, v998:0, 0, v1000:0, 1, v1002:0, v1003:0, 1 + v1064:0, v1005:0, v1006:0, v1007:0, v1008:0, v1009:0, v1010:0, v1011:0, v1012:0, v1013:0, v1014:0, 3, 7, 4, 8) -> f_957(v989:0, v990:0, v991:0, v992:0, v993:0, v994:0, v995:0, v996:0, v997:0, v998:0, 0, 1 + v1064:0, 1, v1003:0, 1 + v1003:0, v1064:0, v1005:0, v1006:0, v1007:0, v1008:0, v1009:0, v1010:0, v1011:0, v1012:0, v1013:0, v1014:0, 3, 7, 4, 8) :|: v1003:0 > 0 && v1000:0 > 1 && v1064:0 > -1 && v990:0 > 1
Filtered unneeded arguments:
   f_957(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_957(x2, x12, x15, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_957(v990:0, v1000:0, v1003:0, sum~cons_1~v1064:0) -> f_957(v990:0, 1 + v1064:0, 1 + v1003:0, v1064:0) :|: v1000:0 > 1 && v1003:0 > 0 && v990:0 > 1 && v1064:0 > -1 && sum~cons_1~v1064:0 = 1 + v1064:0

----------------------------------------

(9)
Obligation:
Rules:
f_957(v990:0, v1000:0, v1003:0, sum~cons_1~v1064:0) -> f_957(v990:0, 1 + v1064:0, 1 + v1003:0, v1064:0) :|: v1000:0 > 1 && v1003:0 > 0 && v990:0 > 1 && v1064:0 > -1 && sum~cons_1~v1064:0 = 1 + v1064:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_957(v990:0:0, v1000:0:0, v1003:0:0, sum~cons_1~v1064:0:0) -> f_957(v990:0:0, 1 + v1064:0:0, 1 + v1003:0:0, v1064:0:0) :|: v990:0:0 > 1 && v1064:0:0 > -1 && v1003:0:0 > 0 && v1000:0:0 > 1 && sum~cons_1~v1064:0:0 = 1 + v1064:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_957 ] = f_957_4

The following rules are decreasing:
f_957(v990:0:0, v1000:0:0, v1003:0:0, sum~cons_1~v1064:0:0) -> f_957(v990:0:0, 1 + v1064:0:0, 1 + v1003:0:0, v1064:0:0) :|: v990:0:0 > 1 && v1064:0:0 > -1 && v1003:0:0 > 0 && v1000:0:0 > 1 && sum~cons_1~v1064:0:0 = 1 + v1064:0:0

The following rules are bounded:
f_957(v990:0:0, v1000:0:0, v1003:0:0, sum~cons_1~v1064:0:0) -> f_957(v990:0:0, 1 + v1064:0:0, 1 + v1003:0:0, v1064:0:0) :|: v990:0:0 > 1 && v1064:0:0 > -1 && v1003:0:0 > 0 && v1000:0:0 > 1 && sum~cons_1~v1064:0:0 = 1 + v1064:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 30 rulesP rules:
f_857(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672, v673, 1, 0, v676, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 4, 8) -> f_859(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672, v673, 1, 0, v676, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 4, 8) :|: 0 = 0
f_859(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672, v673, 1, 0, v676, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 4, 8) -> f_861(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672, v673, 1, 0, v676, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 4, 8) :|: 0 = 0
f_861(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672, v673, 1, 0, v676, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 4, 8) -> f_863(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v673, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 4, 8) :|: 0 = 0
f_863(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v673, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 4, 8) -> f_865(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 4, 8) :|: v720 = v662 + v676
f_865(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 4, 8) -> f_867(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: 0 < v720 && 1 <= v676 && 2 <= v672 && 2 <= v663
f_867(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_871(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: 0 = 0
f_871(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_875(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: TRUE
f_875(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_879(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: 0 = 0
f_879(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_883(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: 0 = 0
f_883(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_887(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: 0 = 0
f_887(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_891(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: TRUE
f_891(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_893(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: 0 = 0
f_893(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_895(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: 0 = 0
f_895(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_897(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: 0 = 0
f_897(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_899(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: TRUE
f_899(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_901(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: 0 = 0
f_901(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v672, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_903(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: 0 = 0
f_903(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_905(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: 1 + v821 = v676 && 0 <= v821
f_905(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_907(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: 0 = 0
f_907(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_909(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: TRUE
f_909(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_911(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: TRUE
f_911(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_914(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: TRUE
f_914(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_916(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: 0 = 0
f_916(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_918(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: 0 = 0
f_918(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_920(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v678, v877, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: v877 = 1 + v678 && 2 <= v877
f_920(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v678, v877, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_922(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v678, v877, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: 0 = 0
f_922(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v678, v877, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_924(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v678, v877, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: TRUE
f_924(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v678, v877, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_926(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v678, v877, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) :|: TRUE
f_926(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v678, v877, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 2, 4, 8) -> f_855(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v676, v720, 1, 0, v821, v678, v877, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 4, 8) :|: TRUE
f_855(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672, v673, 1, 0, v676, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 4, 8) -> f_857(v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672, v673, 1, 0, v676, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_857(v662:0, v663:0, v664:0, v665:0, v666:0, v667:0, v668:0, v669:0, v670:0, v671:0, v672:0, v673:0, 1, 0, 1 + v821:0, v677:0, v678:0, v679:0, v680:0, v681:0, v682:0, v683:0, v684:0, v685:0, v686:0, v687:0, v688:0, 3, 7, 4, 8) -> f_857(v662:0, v663:0, v664:0, v665:0, v666:0, v667:0, v668:0, v669:0, v670:0, v671:0, 1 + v821:0, v662:0 + (1 + v821:0), 1, 0, v821:0, v678:0, 1 + v678:0, v679:0, v680:0, v681:0, v682:0, v683:0, v684:0, v685:0, v686:0, v687:0, v688:0, 3, 7, 4, 8) :|: v821:0 > -1 && v662:0 + (1 + v821:0) > 0 && v672:0 > 1 && v663:0 > 1 && v678:0 > 0
Filtered unneeded arguments:
   f_857(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_857(x1, x2, x11, x15, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_857(v662:0, v663:0, v672:0, sum~cons_1~v821:0, v678:0) -> f_857(v662:0, v663:0, 1 + v821:0, v821:0, 1 + v678:0) :|: v662:0 + (1 + v821:0) > 0 && v821:0 > -1 && v672:0 > 1 && v678:0 > 0 && v663:0 > 1 && sum~cons_1~v821:0 = 1 + v821:0

----------------------------------------

(16)
Obligation:
Rules:
f_857(v662:0, v663:0, v672:0, sum~cons_1~v821:0, v678:0) -> f_857(v662:0, v663:0, 1 + v821:0, v821:0, 1 + v678:0) :|: v662:0 + (1 + v821:0) > 0 && v821:0 > -1 && v672:0 > 1 && v678:0 > 0 && v663:0 > 1 && sum~cons_1~v821:0 = 1 + v821:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_857(v662:0:0, v663:0:0, v672:0:0, sum~cons_1~v821:0:0, v678:0:0) -> f_857(v662:0:0, v663:0:0, 1 + v821:0:0, v821:0:0, 1 + v678:0:0) :|: v678:0:0 > 0 && v663:0:0 > 1 && v672:0:0 > 1 && v821:0:0 > -1 && v662:0:0 + (1 + v821:0:0) > 0 && sum~cons_1~v821:0:0 = 1 + v821:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_857 ] = f_857_4

The following rules are decreasing:
f_857(v662:0:0, v663:0:0, v672:0:0, sum~cons_1~v821:0:0, v678:0:0) -> f_857(v662:0:0, v663:0:0, 1 + v821:0:0, v821:0:0, 1 + v678:0:0) :|: v678:0:0 > 0 && v663:0:0 > 1 && v672:0:0 > 1 && v821:0:0 > -1 && v662:0:0 + (1 + v821:0:0) > 0 && sum~cons_1~v821:0:0 = 1 + v821:0:0

The following rules are bounded:
f_857(v662:0:0, v663:0:0, v672:0:0, sum~cons_1~v821:0:0, v678:0:0) -> f_857(v662:0:0, v663:0:0, 1 + v821:0:0, v821:0:0, 1 + v678:0:0) :|: v678:0:0 > 0 && v663:0:0 > 1 && v672:0:0 > 1 && v821:0:0 > -1 && v662:0:0 + (1 + v821:0:0) > 0 && sum~cons_1~v821:0:0 = 1 + v821:0:0


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_770(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v538, v539, 1, v541, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) -> f_772(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v539, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) :|: 0 = 0
f_772(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v539, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) -> f_774(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v539, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) :|: 0 = 0
f_774(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v539, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) -> f_776(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v539, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) :|: 0 = 0
f_776(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v539, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) -> f_778(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) :|: v596 = v541 + v529
f_778(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) -> f_780(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) :|: 0 < v596
f_780(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) -> f_784(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) :|: 0 = 0
f_784(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) -> f_788(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) :|: TRUE
f_788(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) -> f_792(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) :|: 0 = 0
f_792(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) -> f_796(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) :|: 0 = 0
f_796(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) -> f_800(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) :|: 0 < v541 && 2 <= v538 && 2 <= v528
f_800(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) -> f_805(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_805(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) -> f_808(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) :|: TRUE
f_808(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) -> f_811(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_811(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v538, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) -> f_814(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_814(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) -> f_817(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) :|: 1 + v598 = v541 && 0 <= v598
f_817(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) -> f_820(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_820(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) -> f_823(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) :|: TRUE
f_823(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) -> f_826(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) :|: TRUE
f_826(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) -> f_829(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_829(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) -> f_832(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_832(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) -> f_835(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v543, v603, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) :|: v603 = 1 + v543 && 2 <= v603
f_835(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v543, v603, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) -> f_838(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v543, v603, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_838(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v543, v603, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) -> f_841(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v543, v603, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) :|: TRUE
f_841(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v543, v603, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) -> f_844(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v543, v603, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) :|: TRUE
f_844(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v543, v603, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 2, 4, 8) -> f_767(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v541, v596, 1, v598, v543, v603, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) :|: TRUE
f_767(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v538, v539, 1, v541, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) -> f_770(v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v538, v539, 1, v541, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_770(v528:0, v529:0, v530:0, v531:0, v532:0, v533:0, v534:0, v535:0, v536:0, v537:0, v538:0, v539:0, 1, 1 + v598:0, v542:0, v543:0, v544:0, v545:0, v546:0, v547:0, v548:0, v549:0, v550:0, v551:0, v552:0, v553:0, 0, 3, 7, 4, 8) -> f_770(v528:0, v529:0, v530:0, v531:0, v532:0, v533:0, v534:0, v535:0, v536:0, v537:0, 1 + v598:0, 1 + v598:0 + v529:0, 1, v598:0, v543:0, 1 + v543:0, v544:0, v545:0, v546:0, v547:0, v548:0, v549:0, v550:0, v551:0, v552:0, v553:0, 0, 3, 7, 4, 8) :|: 1 + v598:0 + v529:0 > 0 && v538:0 > 1 && v598:0 > -1 && v528:0 > 1 && v543:0 > 0
Filtered unneeded arguments:
   f_770(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_770(x1, x2, x11, x14, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_770(v528:0, v529:0, v538:0, sum~cons_1~v598:0, v543:0) -> f_770(v528:0, v529:0, 1 + v598:0, v598:0, 1 + v543:0) :|: v538:0 > 1 && 1 + v598:0 + v529:0 > 0 && v598:0 > -1 && v543:0 > 0 && v528:0 > 1 && sum~cons_1~v598:0 = 1 + v598:0

----------------------------------------

(23)
Obligation:
Rules:
f_770(v528:0, v529:0, v538:0, sum~cons_1~v598:0, v543:0) -> f_770(v528:0, v529:0, 1 + v598:0, v598:0, 1 + v543:0) :|: v538:0 > 1 && 1 + v598:0 + v529:0 > 0 && v598:0 > -1 && v543:0 > 0 && v528:0 > 1 && sum~cons_1~v598:0 = 1 + v598:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_770(v528:0:0, v529:0:0, v538:0:0, sum~cons_1~v598:0:0, v543:0:0) -> f_770(v528:0:0, v529:0:0, 1 + v598:0:0, v598:0:0, 1 + v543:0:0) :|: v543:0:0 > 0 && v528:0:0 > 1 && v598:0:0 > -1 && 1 + v598:0:0 + v529:0:0 > 0 && v538:0:0 > 1 && sum~cons_1~v598:0:0 = 1 + v598:0:0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_770(x, x1, x2, x3, x4)] = x3

The following rules are decreasing:
f_770(v528:0:0, v529:0:0, v538:0:0, sum~cons_1~v598:0:0, v543:0:0) -> f_770(v528:0:0, v529:0:0, 1 + v598:0:0, v598:0:0, 1 + v543:0:0) :|: v543:0:0 > 0 && v528:0:0 > 1 && v598:0:0 > -1 && 1 + v598:0:0 + v529:0:0 > 0 && v538:0:0 > 1 && sum~cons_1~v598:0:0 = 1 + v598:0:0
The following rules are bounded:
f_770(v528:0:0, v529:0:0, v538:0:0, sum~cons_1~v598:0:0, v543:0:0) -> f_770(v528:0:0, v529:0:0, 1 + v598:0:0, v598:0:0, 1 + v543:0:0) :|: v543:0:0 > 0 && v528:0:0 > 1 && v598:0:0 > -1 && 1 + v598:0:0 + v529:0:0 > 0 && v538:0:0 > 1 && sum~cons_1~v598:0:0 = 1 + v598:0:0

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
