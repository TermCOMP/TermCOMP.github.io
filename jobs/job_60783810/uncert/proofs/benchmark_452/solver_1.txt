YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/2muIS.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2565 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 7 ms]
        (9) IntTRS
        (10) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (11) YES
    (12) LLVM Symbolic Execution SCC
        (13) SCC2IRS [SOUND, 18 ms]
        (14) IntTRS
        (15) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (16) IntTRS
        (17) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
        (18) YES
    (19) LLVM Symbolic Execution SCC
        (20) SCC2IRS [SOUND, 22 ms]
        (21) IntTRS
        (22) RankingReductionPairProof [EQUIVALENT, 6 ms]
        (23) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/2muIS.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/2muIS.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		%8 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		%9 = call i32 @__VERIFIER_nondet_int()
		store %9, %6
		%10 = call i32 @__VERIFIER_nondet_int()
		store %10, %7
		%11 = call i32 @__VERIFIER_nondet_int()
		store %11, %8
		%12 = load %6
		store %12, %3
		%13 = load %7
		store %13, %4
		%14 = load %8
		store %14, %5
		store 0, %2
		br %15
	15:
		%16 = load %6
		%17 = load %7
		%18 = icmp sge %16 %17
		br %18, %19, %34
	19:
		%20 = load %2
		%21 = add i32 %20, 1
		store %21, %2
		%22 = load %8
		%23 = icmp sgt %22 1
		br %23, %24, %30
	24:
		%25 = load %8
		%26 = sub i32 %25, 1
		store %26, %8
		%27 = load %6
		%28 = load %8
		%29 = add i32 %27, %28
		store %29, %6
		br %33
	30:
		%31 = load %7
		%32 = add i32 %31, 1
		store %32, %7
		br %33
	33:
		br %15
	34:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_585(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1578, 1, v1580, v1581, 0, 2, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_586(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1578, 1, v1580, v1581, 0, 2, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: 0 = 0
f_586(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1578, 1, v1580, v1581, 0, 2, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_587(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1580, v1581, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: 0 = 0
f_587(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1580, v1581, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_588(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1580, v1581, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: v1585 <= v1577
f_588(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1580, v1581, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_590(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1580, v1581, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: 0 = 0
f_590(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1580, v1581, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_592(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1580, v1581, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: TRUE
f_592(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1580, v1581, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_594(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: 0 = 0
f_594(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_595(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: v1663 = 1 + v1581 && 3 <= v1663
f_595(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_596(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: TRUE
f_596(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_597(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: 0 = 0
f_597(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_598(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: 0 = 0
f_598(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_599(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: TRUE
f_599(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1578, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_600(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: 0 = 0
f_600(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_601(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1688, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: v1688 = 1 + v1585
f_601(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1688, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_602(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1688, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: TRUE
f_602(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1688, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_603(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1688, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: TRUE
f_603(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1688, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_584(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1585, 1, v1581, v1663, 0, 2, v1584, v1688, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: TRUE
f_584(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1578, 1, v1580, v1581, 0, 2, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) -> f_585(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1578, 1, v1580, v1581, 0, 2, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_585(v1566:0, v1567:0, v1568:0, v1569:0, v1570:0, v1571:0, v1572:0, v1573:0, v1574:0, v1575:0, v1576:0, v1577:0, v1578:0, 1, v1580:0, v1581:0, 0, 2, v1584:0, v1585:0, v1586:0, v1587:0, v1588:0, v1589:0, v1590:0, v1591:0, v1592:0, v1593:0, 3, 4) -> f_585(v1566:0, v1567:0, v1568:0, v1569:0, v1570:0, v1571:0, v1572:0, v1573:0, v1574:0, v1575:0, v1576:0, v1577:0, v1585:0, 1, v1581:0, 1 + v1581:0, 0, 2, v1584:0, 1 + v1585:0, v1586:0, v1587:0, v1588:0, v1589:0, v1590:0, v1591:0, v1592:0, v1593:0, 3, 4) :|: v1581:0 > 1 && v1585:0 <= v1577:0
Filtered unneeded arguments:
   f_585(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_585(x12, x16, x20)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_585(v1577:0, v1581:0, v1585:0) -> f_585(v1577:0, 1 + v1581:0, 1 + v1585:0) :|: v1581:0 > 1 && v1585:0 <= v1577:0

----------------------------------------

(9)
Obligation:
Rules:
f_585(v1577:0, v1581:0, v1585:0) -> f_585(v1577:0, 1 + v1581:0, 1 + v1585:0) :|: v1581:0 > 1 && v1585:0 <= v1577:0

----------------------------------------

(10) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_585(x, x1, x2)] = x - x2

The following rules are decreasing:
f_585(v1577:0, v1581:0, v1585:0) -> f_585(v1577:0, 1 + v1581:0, 1 + v1585:0) :|: v1581:0 > 1 && v1585:0 <= v1577:0
The following rules are bounded:
f_585(v1577:0, v1581:0, v1585:0) -> f_585(v1577:0, 1 + v1581:0, 1 + v1585:0) :|: v1581:0 > 1 && v1585:0 <= v1577:0

----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
SCC
----------------------------------------

(13) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_514(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1043, 1, v1045, v1046, v1047, v1048, v1049, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_515(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1045, v1046, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: 0 = 0
f_515(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1045, v1046, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_516(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1045, v1046, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: 0 = 0
f_516(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1045, v1046, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_517(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1045, v1046, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: v1041 <= v1049
f_517(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1045, v1046, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_519(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1045, v1046, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: 0 = 0
f_519(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1045, v1046, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_521(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1045, v1046, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: TRUE
f_521(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1045, v1046, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_523(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: 0 = 0
f_523(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_524(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: v1122 = 1 + v1046 && 2 <= v1122
f_524(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_525(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: TRUE
f_525(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1047, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_526(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1047, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: 0 = 0
f_526(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1047, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_527(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1047, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: 1 < v1048 && 3 <= v1047 && 3 <= v1042
f_527(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1047, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_529(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1047, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: 0 = 0
f_529(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1047, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_531(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1047, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: TRUE
f_531(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1047, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_533(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: 0 = 0
f_533(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_535(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1134, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: 1 + v1134 = v1048 && 1 <= v1134
f_535(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1134, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_537(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1134, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: TRUE
f_537(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1134, v1043, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_539(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1134, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: 0 = 0
f_539(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1134, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_541(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1134, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: 0 = 0
f_541(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1134, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_543(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1134, v1208, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: v1208 = v1049 + v1134
f_543(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1134, v1208, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_545(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1134, v1208, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: TRUE
f_545(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1134, v1208, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_547(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1134, v1208, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: TRUE
f_547(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1134, v1208, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_513(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1049, 1, v1046, v1122, v1048, v1134, v1208, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: TRUE
f_513(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1043, 1, v1045, v1046, v1047, v1048, v1049, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) -> f_514(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1043, 1, v1045, v1046, v1047, v1048, v1049, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_514(v1032:0, v1033:0, v1034:0, v1035:0, v1036:0, v1037:0, v1038:0, v1039:0, v1040:0, v1041:0, v1042:0, v1043:0, 1, v1045:0, v1046:0, v1047:0, 1 + v1134:0, v1049:0, v1050:0, v1051:0, v1052:0, v1053:0, v1054:0, v1055:0, v1056:0, v1057:0, 0, 3, 2, 4) -> f_514(v1032:0, v1033:0, v1034:0, v1035:0, v1036:0, v1037:0, v1038:0, v1039:0, v1040:0, v1041:0, v1042:0, v1049:0, 1, v1046:0, 1 + v1046:0, 1 + v1134:0, v1134:0, v1049:0 + v1134:0, v1050:0, v1051:0, v1052:0, v1053:0, v1054:0, v1055:0, v1056:0, v1057:0, 0, 3, 2, 4) :|: v1049:0 >= v1041:0 && v1046:0 > 0 && v1047:0 > 2 && v1134:0 > 0 && v1042:0 > 2
Filtered unneeded arguments:
   f_514(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_514(x10, x11, x15, x16, x17, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_514(v1041:0, v1042:0, v1046:0, v1047:0, sum~cons_1~v1134:0, v1049:0) -> f_514(v1041:0, v1042:0, 1 + v1046:0, 1 + v1134:0, v1134:0, v1049:0 + v1134:0) :|: v1046:0 > 0 && v1049:0 >= v1041:0 && v1047:0 > 2 && v1042:0 > 2 && v1134:0 > 0 && sum~cons_1~v1134:0 = 1 + v1134:0

----------------------------------------

(14)
Obligation:
Rules:
f_514(v1041:0, v1042:0, v1046:0, v1047:0, sum~cons_1~v1134:0, v1049:0) -> f_514(v1041:0, v1042:0, 1 + v1046:0, 1 + v1134:0, v1134:0, v1049:0 + v1134:0) :|: v1046:0 > 0 && v1049:0 >= v1041:0 && v1047:0 > 2 && v1042:0 > 2 && v1134:0 > 0 && sum~cons_1~v1134:0 = 1 + v1134:0

----------------------------------------

(15) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(16)
Obligation:
Rules:
f_514(v1041:0:0, v1042:0:0, v1046:0:0, v1047:0:0, sum~cons_1~v1134:0:0, v1049:0:0) -> f_514(v1041:0:0, v1042:0:0, 1 + v1046:0:0, 1 + v1134:0:0, v1134:0:0, v1049:0:0 + v1134:0:0) :|: v1042:0:0 > 2 && v1134:0:0 > 0 && v1047:0:0 > 2 && v1049:0:0 >= v1041:0:0 && v1046:0:0 > 0 && sum~cons_1~v1134:0:0 = 1 + v1134:0:0

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_514(x, x1, x2, x3, x4, x5)] = -2 + x4

The following rules are decreasing:
f_514(v1041:0:0, v1042:0:0, v1046:0:0, v1047:0:0, sum~cons_1~v1134:0:0, v1049:0:0) -> f_514(v1041:0:0, v1042:0:0, 1 + v1046:0:0, 1 + v1134:0:0, v1134:0:0, v1049:0:0 + v1134:0:0) :|: v1042:0:0 > 2 && v1134:0:0 > 0 && v1047:0:0 > 2 && v1049:0:0 >= v1041:0:0 && v1046:0:0 > 0 && sum~cons_1~v1134:0:0 = 1 + v1134:0:0
The following rules are bounded:
f_514(v1041:0:0, v1042:0:0, v1046:0:0, v1047:0:0, sum~cons_1~v1134:0:0, v1049:0:0) -> f_514(v1041:0:0, v1042:0:0, 1 + v1046:0:0, 1 + v1134:0:0, v1134:0:0, v1049:0:0 + v1134:0:0) :|: v1042:0:0 > 2 && v1134:0:0 > 0 && v1047:0:0 > 2 && v1049:0:0 >= v1041:0:0 && v1046:0:0 > 0 && sum~cons_1~v1134:0:0 = 1 + v1134:0:0

----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
SCC
----------------------------------------

(20) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_452(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 1, v740, v741, 0, v743, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4) -> f_455(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v740, v741, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4) :|: 0 = 0
f_455(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v740, v741, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4) -> f_458(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v740, v741, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4) :|: v743 <= v735
f_458(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v740, v741, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4) -> f_462(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v740, v741, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4) :|: 0 = 0
f_462(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v740, v741, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4) -> f_466(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v740, v741, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4) :|: TRUE
f_466(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v740, v741, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4) -> f_469(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4) :|: 0 = 0
f_469(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4) -> f_471(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) :|: v875 = 1 + v741 && 2 <= v875
f_471(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) -> f_473(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) :|: TRUE
f_473(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) -> f_476(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) :|: 0 = 0
f_476(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) -> f_479(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) :|: 0 = 0
f_479(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) -> f_482(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) :|: TRUE
f_482(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v738, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) -> f_484(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) :|: 0 = 0
f_484(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) -> f_486(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v898, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) :|: v898 = 1 + v743
f_486(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v898, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) -> f_488(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v898, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) :|: TRUE
f_488(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v898, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) -> f_490(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v898, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) :|: TRUE
f_490(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v898, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) -> f_493(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v898, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) :|: TRUE
f_493(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v898, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4, 2) -> f_449(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v743, 1, v741, v875, 0, v898, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4) :|: TRUE
f_449(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 1, v740, v741, 0, v743, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4) -> f_452(v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 1, v740, v741, 0, v743, v744, v745, v746, v747, v748, v749, v750, v751, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_452(v727:0, v728:0, v729:0, v730:0, v731:0, v732:0, v733:0, v734:0, v735:0, v736:0, v737:0, v738:0, 1, v740:0, v741:0, 0, v743:0, v744:0, v745:0, v746:0, v747:0, v748:0, v749:0, v750:0, v751:0, 3, 4) -> f_452(v727:0, v728:0, v729:0, v730:0, v731:0, v732:0, v733:0, v734:0, v735:0, v736:0, v737:0, v743:0, 1, v741:0, 1 + v741:0, 0, 1 + v743:0, v744:0, v745:0, v746:0, v747:0, v748:0, v749:0, v750:0, v751:0, 3, 4) :|: v741:0 > 0 && v743:0 <= v735:0
Filtered unneeded arguments:
   f_452(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_452(x9, x15, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_452(v735:0, v741:0, v743:0) -> f_452(v735:0, 1 + v741:0, 1 + v743:0) :|: v741:0 > 0 && v743:0 <= v735:0

----------------------------------------

(21)
Obligation:
Rules:
f_452(v735:0, v741:0, v743:0) -> f_452(v735:0, 1 + v741:0, 1 + v743:0) :|: v741:0 > 0 && v743:0 <= v735:0

----------------------------------------

(22) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_452 ] = -1*f_452_3 + f_452_1

The following rules are decreasing:
f_452(v735:0, v741:0, v743:0) -> f_452(v735:0, 1 + v741:0, 1 + v743:0) :|: v741:0 > 0 && v743:0 <= v735:0

The following rules are bounded:
f_452(v735:0, v741:0, v743:0) -> f_452(v735:0, 1 + v741:0, 1 + v743:0) :|: v741:0 > 0 && v743:0 <= v735:0


----------------------------------------

(23)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
