YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/6MiJU.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 691 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/6MiJU.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/6MiJU.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "fact" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = load %3
		%6 = icmp sgt %5 1
		br %6, %7, %14
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%8 = load %3
		%9 = sub i32 %8, 1
		%10 = call i32 @fact(i32 %9)
		store %10, %4
		%11 = load %4
		%12 = load %3
		%13 = mul i32 %11, %12
		store %13, %2
		br %15
	14:
		store 1, %2
		br %15
	15:
		%16 = load %2
		ret %16

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 30
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = load %2
		%7 = icmp slt %6 0
		br %7, %8, %9
	8:
		store 0, %1
		br %18
	9:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%10 = call i32 @__VERIFIER_nondet_int()
		store %10, %3
		%11 = load %3
		%12 = icmp slt %11 0
		br %12, %13, %14
	13:
		store 0, %1
		br %18
	14:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%15 = call i32 @__VERIFIER_nondet_int()
		store %15, %4
		%16 = load %2
		%17 = call i32 @fact(i32 %16)
		br %18
	18:
		%19 = load %1
		ret %19


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_245(v85, v104, v86, v87, v88, v89, v90, v91, v92, v93, v105, 0, v95, v96, v97, 3, 1, 4) -> f_247(v85, v104, v106, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, 0, v95, v96, v97, 3, 1, 4) :|: 1 <= v106 && v107 = 3 + v106 && 4 <= v107
f_247(v85, v104, v106, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, 0, v95, v96, v97, 3, 1, 4) -> f_248(v85, v104, v106, v108, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 1, 4) :|: 1 <= v108 && v109 = 3 + v108 && 4 <= v109
f_248(v85, v104, v106, v108, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 1, 4) -> f_249(v85, v104, v106, v108, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 1, 4) :|: TRUE
f_249(v85, v104, v106, v108, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 1, 4) -> f_250(v85, v104, v106, v108, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 1, 4) :|: TRUE
f_250(v85, v104, v106, v108, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 1, 4) -> f_251(v85, v104, v106, v108, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 1, 4) :|: 0 = 0
f_251(v85, v104, v106, v108, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 1, 4) -> f_252(v85, v104, v106, v108, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 2, 1, 4) :|: 1 < v85 && 2 <= v95
f_252(v85, v104, v106, v108, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 2, 1, 4) -> f_254(v85, v104, v106, v108, 1, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 2, 4) :|: 0 = 0
f_254(v85, v104, v106, v108, 1, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 2, 4) -> f_256(v85, v104, v106, v108, 1, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 2, 4) :|: TRUE
f_256(v85, v104, v106, v108, 1, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 2, 4) -> f_258(v85, v104, v106, v108, 1, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 2, 4) :|: TRUE
f_258(v85, v104, v106, v108, 1, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 2, 4) -> f_260(v85, v104, v106, v108, 1, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 2, 4) :|: 0 = 0
f_260(v85, v104, v106, v108, 1, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 2, 4) -> f_262(v85, v104, v106, v108, 1, v111, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 2, 4) :|: 1 + v111 = v85 && 1 <= v111
f_262(v85, v104, v106, v108, 1, v111, v86, v87, v88, v89, v90, v91, v92, v93, v105, v107, v109, 0, v95, v96, v97, 3, 2, 4) -> f_264(v111, v86, v87, v88, v89, v90, v91, v92, v93, v104, v105, v106, v107, v108, v109, 0, v95, v96, v97, v85, 1, 3, 2, 4) :|: 0 = 0
f_264(v111, v86, v87, v88, v89, v90, v91, v92, v93, v104, v105, v106, v107, v108, v109, 0, v95, v96, v97, v85, 1, 3, 2, 4) -> f_266(v111, v86, v87, v88, v89, v90, v91, v92, v93, v104, v105, v106, v107, v108, v109, 0, v95, v96, v97, v85, 3, 1, 2, 4) :|: TRUE
f_266(v111, v86, v87, v88, v89, v90, v91, v92, v93, v104, v105, v106, v107, v108, v109, 0, v95, v96, v97, v85, 3, 1, 2, 4) -> f_243(v111, v86, v87, v88, v89, v90, v91, v92, v93, 0, v95, v96, v97, 3, 1, 4) :|: TRUE
f_243(v85, v86, v87, v88, v89, v90, v91, v92, v93, 0, v95, v96, v97, 3, 1, 4) -> f_245(v85, v104, v86, v87, v88, v89, v90, v91, v92, v93, v105, 0, v95, v96, v97, 3, 1, 4) :|: 1 <= v104 && v105 = 3 + v104 && 4 <= v105
Combined rules. Obtained 1 rulesP rules:
f_245(1 + v111:0, v104:0, v86:0, v87:0, v88:0, v89:0, v90:0, v91:0, v92:0, v93:0, v105:0, 0, v95:0, v96:0, v97:0, 3, 1, 4) -> f_245(v111:0, v104:1, v86:0, v87:0, v88:0, v89:0, v90:0, v91:0, v92:0, v93:0, 3 + v104:1, 0, v95:0, v96:0, v97:0, 3, 1, 4) :|: v108:0 > 0 && v106:0 > 0 && v95:0 > 1 && v111:0 > 0 && v104:1 > 0
Filtered unneeded arguments:
   f_245(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_245(x1, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_245(sum~cons_1~v111:0, v95:0) -> f_245(v111:0, v95:0) :|: v95:0 > 1 && v111:0 > 0 && sum~cons_1~v111:0 = 1 + v111:0

----------------------------------------

(8)
Obligation:
Rules:
f_245(sum~cons_1~v111:0, v95:0) -> f_245(v111:0, v95:0) :|: v95:0 > 1 && v111:0 > 0 && sum~cons_1~v111:0 = 1 + v111:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_245(sum~cons_1~v111:0:0, v95:0:0) -> f_245(v111:0:0, v95:0:0) :|: v95:0:0 > 1 && v111:0:0 > 0 && sum~cons_1~v111:0:0 = 1 + v111:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_245(x, x1)] = x

The following rules are decreasing:
f_245(sum~cons_1~v111:0:0, v95:0:0) -> f_245(v111:0:0, v95:0:0) :|: v95:0:0 > 1 && v111:0:0 > 0 && sum~cons_1~v111:0:0 = 1 + v111:0:0
The following rules are bounded:
f_245(sum~cons_1~v111:0:0, v95:0:0) -> f_245(v111:0:0, v95:0:0) :|: v95:0:0 > 1 && v111:0:0 > 0 && sum~cons_1~v111:0:0 = 1 + v111:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
