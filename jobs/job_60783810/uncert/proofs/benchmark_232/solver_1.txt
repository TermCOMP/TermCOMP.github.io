YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/RYs4q.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 37 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1233 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 29 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 28 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 14 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/RYs4q.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/RYs4q.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%5 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store null, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%6 = load %3
		store %6, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%7 = load %2
		store %7, %5
		br %8
	8:
		%9 = load %5
		%10 = icmp sge %9 0
		br %10, %11, %24
	11:
		%12 = call noalias *i8 @malloc(i64 16)
		%13 = bitcast *i8 %12 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %13, %3
		%14 = load %5
		%15 = load %3
		%16 = getelementptr %15, 0, 0
		store %14, %16
		%17 = load %4
		%18 = load %3
		%19 = getelementptr %18, 0, 1
		store %17, %19
		%20 = load %3
		store %20, %4
		br %21
	21:
		%22 = load %5
		%23 = add i32 %22, -1
		store %23, %5
		br %8
	24:
		%25 = load %3
		ret %25

*BasicFunctionTypename: "search" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 53
	0:
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca i32, align 4
		%5 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %5)
		%6 = load %3
		store %6, %5
		br %7
	7:
		%8 = load %5
		%9 = getelementptr %8, 0, 0
		%10 = load %9
		%11 = load %4
		%12 = icmp ne %10 %11
		br %12, %13, %17
	13:
		%14 = load %5
		%15 = getelementptr %14, 0, 1
		%16 = load %15
		store %16, %5
		br %7
	17:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 75
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 0
		br %6, %7, %8
	7:
		store 0, %1
		br %13
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		%9 = load %2
		%10 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %9)
		store %10, %3
		%11 = load %3
		%12 = load %2
		Unnamed Call-Instruction = call BasicVoidType @search(*BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %11, i32 %12)
		store 0, %1
		br %13
	13:
		%14 = load %1
		ret %14


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_521(v228, v229, v230, v231, v232, v237, v233, v234, 1, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v249, v251, v252, 3, 7, 4, 8, 9, v248, v250) -> f_522(v228, v229, v230, v231, v232, v237, v234, 1, v233, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v249, v251, v252, 3, 7, 4, 8, 9, v248, v250) :|: 0 = 0
f_522(v228, v229, v230, v231, v232, v237, v234, 1, v233, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v249, v251, v252, 3, 7, 4, 8, 9, v248, v250) -> f_523(v228, v229, v230, v231, v232, v237, v251, 1, v233, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v234, v249, v252, 3, 7, 4, 8, 9, v248, v250) :|: 0 = 0
f_523(v228, v229, v230, v231, v232, v237, v251, 1, v233, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v234, v249, v252, 3, 7, 4, 8, 9, v248, v250) -> f_524(v228, v229, v230, v231, v232, v237, v251, 1, v233, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v234, v249, v252, 3, 7, 4, 8, 9, v248, v250) :|: 0 = 0
f_524(v228, v229, v230, v231, v232, v237, v251, 1, v233, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v234, v249, v252, 3, 7, 4, 8, 9, v248, v250) -> f_525(v228, v229, v230, v231, v232, v237, v251, 1, v233, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v234, v249, v252, 3, 7, 4, 8, 9, v248, 2, v250) :|: v251 != v229 && 2 <= v250 && 1 <= v252
f_525(v228, v229, v230, v231, v232, v237, v251, 1, v233, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v234, v249, v252, 3, 7, 4, 8, 9, v248, 2, v250) -> f_527(v228, v229, v230, v231, v232, v237, v251, 1, v233, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v234, v249, v252, 3, 7, 4, 8, 9, v248, 2, v250) :|: 0 = 0
f_527(v228, v229, v230, v231, v232, v237, v251, 1, v233, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v234, v249, v252, 3, 7, 4, 8, 9, v248, 2, v250) -> f_529(v228, v229, v230, v231, v232, v237, v251, 1, v233, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v234, v249, v252, 3, 7, 4, 8, 9, v248, 2, v250) :|: TRUE
f_529(v228, v229, v230, v231, v232, v237, v251, 1, v233, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v234, v249, v252, 3, 7, 4, 8, 9, v248, 2, v250) -> f_531(v228, v229, v230, v231, v232, v237, v251, 1, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v234, v249, v252, 3, 7, 4, 9, 8, v248, 2, v250) :|: 0 = 0
f_531(v228, v229, v230, v231, v232, v237, v251, 1, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v234, v249, v252, 3, 7, 4, 9, 8, v248, 2, v250) -> f_539(v228, v229, v230, v231, v232, v237, v251, 1, v253, v238, v242, v239, v243, v240, v244, v245, v246, v247, v257, v236, 0, v252, v256, v254, v249, 3, 7, 4, 8, 15, 9, v255, 2, 16, v258) :|: v253 = 8 + v237 && v256 = 1 + v251 && v257 = 15 + v237 && v258 = 1 + v248 && 1 + v255 = v250 && 9 <= v253 && 2 <= v256 && 16 <= v257 && 1 <= v255 && 2 <= v258
f_539(v228, v229, v230, v231, v232, v237, v251, 1, v253, v238, v242, v239, v243, v240, v244, v245, v246, v247, v257, v236, 0, v252, v256, v254, v249, 3, 7, 4, 8, 15, 9, v255, 2, 16, v258) -> f_541(v228, v229, v230, v231, v232, v237, v251, 1, v253, v252, v238, v242, v239, v243, v240, v244, v245, v246, v247, v257, v236, 0, v256, v254, v249, 3, 7, 4, 8, 15, 9, v255, 2, 16, v258) :|: 0 = 0
f_541(v228, v229, v230, v231, v232, v237, v251, 1, v253, v252, v238, v242, v239, v243, v240, v244, v245, v246, v247, v257, v236, 0, v256, v254, v249, 3, 7, 4, 8, 15, 9, v255, 2, 16, v258) -> f_543(v228, v229, v230, v231, v232, v237, v251, 1, v253, v252, v238, v242, v239, v243, v240, v244, v245, v246, v247, v257, 0, v256, v254, v249, 3, 7, 4, 8, 15, 9, v255, 2, 16, v258) :|: TRUE
f_543(v228, v229, v230, v231, v232, v237, v251, 1, v253, v252, v238, v242, v239, v243, v240, v244, v245, v246, v247, v257, 0, v256, v254, v249, 3, 7, 4, 8, 15, 9, v255, 2, 16, v258) -> f_545(v228, v229, v230, v231, v232, v237, v251, 1, v253, v252, v238, v242, v239, v243, v240, v244, v245, v246, v247, v257, 0, v256, v254, v249, 3, 7, 4, 8, 15, 9, v255, 2, 16, v258) :|: TRUE
f_545(v228, v229, v230, v231, v232, v237, v251, 1, v253, v252, v238, v242, v239, v243, v240, v244, v245, v246, v247, v257, 0, v256, v254, v249, 3, 7, 4, 8, 15, 9, v255, 2, 16, v258) -> f_520(v228, v229, v230, v231, v232, v237, v251, 1, v253, v252, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v249, v256, v254, 3, 7, 4, 8, 9, v258, v255) :|: TRUE
f_520(v228, v229, v230, v231, v232, v233, v234, 1, v236, v237, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v249, v251, v252, 3, 7, 4, 8, 9, v248, v250) -> f_521(v228, v229, v230, v231, v232, v237, v233, v234, 1, v236, v238, v242, v239, v243, v240, v244, v245, v246, v247, 0, v249, v251, v252, 3, 7, 4, 8, 9, v248, v250) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_521(v228:0, v229:0, v230:0, v231:0, v232:0, v237:0, v233:0, v234:0, 1, v236:0, v238:0, v242:0, v239:0, v243:0, v240:0, v244:0, v245:0, v246:0, v247:0, 0, v249:0, v251:0, v252:0, 3, 7, 4, 8, 9, v248:0, 1 + v255:0) -> f_521(v228:0, v229:0, v230:0, v231:0, v232:0, v252:0, v237:0, v251:0, 1, 8 + v237:0, v238:0, v242:0, v239:0, v243:0, v240:0, v244:0, v245:0, v246:0, v247:0, 0, v249:0, 1 + v251:0, v254:0, 3, 7, 4, 8, 9, 1 + v248:0, v255:0) :|: v255:0 > 0 && v251:0 < v229:0 && v237:0 > 0 && v252:0 > 0 && v251:0 > 0 && v248:0 > 0
f_521(v228:0, v229:0, v230:0, v231:0, v232:0, v237:0, v233:0, v234:0, 1, v236:0, v238:0, v242:0, v239:0, v243:0, v240:0, v244:0, v245:0, v246:0, v247:0, 0, v249:0, v251:0, v252:0, 3, 7, 4, 8, 9, v248:0, 1 + v255:0) -> f_521(v228:0, v229:0, v230:0, v231:0, v232:0, v252:0, v237:0, v251:0, 1, 8 + v237:0, v238:0, v242:0, v239:0, v243:0, v240:0, v244:0, v245:0, v246:0, v247:0, 0, v249:0, 1 + v251:0, v254:0, 3, 7, 4, 8, 9, 1 + v248:0, v255:0) :|: v255:0 > 0 && v251:0 > v229:0 && v237:0 > 0 && v252:0 > 0 && v251:0 > 0 && v248:0 > 0
Filtered unneeded arguments:
   f_521(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_521(x2, x6, x22, x23, x29, x30)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_521(v229:0, v237:0, v251:0, v252:0, v248:0, sum~cons_1~v255:0) -> f_521(v229:0, v252:0, 1 + v251:0, v254:0, 1 + v248:0, v255:0) :|: v251:0 < v229:0 && v255:0 > 0 && v237:0 > 0 && v252:0 > 0 && v248:0 > 0 && v251:0 > 0 && sum~cons_1~v255:0 = 1 + v255:0
f_521(v229:0, v237:0, v251:0, v252:0, v248:0, sum~cons_1~v255:0) -> f_521(v229:0, v252:0, 1 + v251:0, v254:0, 1 + v248:0, v255:0) :|: v251:0 > v229:0 && v255:0 > 0 && v237:0 > 0 && v252:0 > 0 && v248:0 > 0 && v251:0 > 0 && sum~cons_1~v255:0 = 1 + v255:0

----------------------------------------

(9)
Obligation:
Rules:
f_521(v229:0, v237:0, v251:0, v252:0, v248:0, sum~cons_1~v255:0) -> f_521(v229:0, v252:0, 1 + v251:0, v254:0, 1 + v248:0, v255:0) :|: v251:0 < v229:0 && v255:0 > 0 && v237:0 > 0 && v252:0 > 0 && v248:0 > 0 && v251:0 > 0 && sum~cons_1~v255:0 = 1 + v255:0
f_521(x, x1, x2, x3, x4, x5) -> f_521(x, x3, 1 + x2, x6, 1 + x4, x7) :|: x2 > x && x7 > 0 && x1 > 0 && x3 > 0 && x4 > 0 && x2 > 0 && x5 = 1 + x7

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_521(v229:0:0, v237:0:0, v251:0:0, v252:0:0, v248:0:0, sum~cons_1~v255:0:0) -> f_521(v229:0:0, v252:0:0, 1 + v251:0:0, v254:0:0, 1 + v248:0:0, v255:0:0) :|: v248:0:0 > 0 && v251:0:0 > 0 && v252:0:0 > 0 && v237:0:0 > 0 && v255:0:0 > 0 && v251:0:0 < v229:0:0 && sum~cons_1~v255:0:0 = 1 + v255:0:0
f_521(x:0, x1:0, x2:0, x3:0, x4:0, sum~cons_1~x7:0) -> f_521(x:0, x3:0, 1 + x2:0, x6:0, 1 + x4:0, x7:0) :|: x4:0 > 0 && x2:0 > 0 && x3:0 > 0 && x1:0 > 0 && x7:0 > 0 && x:0 < x2:0 && sum~cons_1~x7:0 = 1 + x7:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_521(x, x1, x2, x3, x4, x5)] = x5

The following rules are decreasing:
f_521(v229:0:0, v237:0:0, v251:0:0, v252:0:0, v248:0:0, sum~cons_1~v255:0:0) -> f_521(v229:0:0, v252:0:0, 1 + v251:0:0, v254:0:0, 1 + v248:0:0, v255:0:0) :|: v248:0:0 > 0 && v251:0:0 > 0 && v252:0:0 > 0 && v237:0:0 > 0 && v255:0:0 > 0 && v251:0:0 < v229:0:0 && sum~cons_1~v255:0:0 = 1 + v255:0:0
f_521(x:0, x1:0, x2:0, x3:0, x4:0, sum~cons_1~x7:0) -> f_521(x:0, x3:0, 1 + x2:0, x6:0, 1 + x4:0, x7:0) :|: x4:0 > 0 && x2:0 > 0 && x3:0 > 0 && x1:0 > 0 && x7:0 > 0 && x:0 < x2:0 && sum~cons_1~x7:0 = 1 + x7:0
The following rules are bounded:
f_521(v229:0:0, v237:0:0, v251:0:0, v252:0:0, v248:0:0, sum~cons_1~v255:0:0) -> f_521(v229:0:0, v252:0:0, 1 + v251:0:0, v254:0:0, 1 + v248:0:0, v255:0:0) :|: v248:0:0 > 0 && v251:0:0 > 0 && v252:0:0 > 0 && v237:0:0 > 0 && v255:0:0 > 0 && v251:0:0 < v229:0:0 && sum~cons_1~v255:0:0 = 1 + v255:0:0
f_521(x:0, x1:0, x2:0, x3:0, x4:0, sum~cons_1~x7:0) -> f_521(x:0, x3:0, 1 + x2:0, x6:0, 1 + x4:0, x7:0) :|: x4:0 > 0 && x2:0 > 0 && x3:0 > 0 && x1:0 > 0 && x7:0 > 0 && x:0 < x2:0 && sum~cons_1~x7:0 = 1 + x7:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 23 rulesP rules:
f_402(v89, v90, v91, v92, v93, 0, v100, 1, v97, v95, v98, v99, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, v111) -> f_403(v89, v90, v91, v92, v93, 0, v100, 1, v97, v95, v98, v99, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, v111) :|: 0 <= v100 && 1 <= v95 && 1 <= v89
f_403(v89, v90, v91, v92, v93, 0, v100, 1, v97, v95, v98, v99, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, v111) -> f_405(v89, v90, v91, v92, v93, 0, v100, 1, v97, v95, v98, v99, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, v111) :|: 0 = 0
f_405(v89, v90, v91, v92, v93, 0, v100, 1, v97, v95, v98, v99, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, v111) -> f_407(v89, v90, v91, v92, v93, 0, v100, 1, v97, v95, v98, v99, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, v111) :|: TRUE
f_407(v89, v90, v91, v92, v93, 0, v100, 1, v97, v95, v98, v99, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, v111) -> f_409(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v95, v98, v99, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, 3, 7, 4, 8, 15, 9, v111, 16) :|: v113 = 15 + v112 && v112 % 4 = 0 && 16 <= v113
f_409(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v95, v98, v99, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, 3, 7, 4, 8, 15, 9, v111, 16) -> f_411(v89, v90, v91, v92, v93, 0, v100, 1, v112, v95, v97, v98, v99, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, 3, 7, 4, 8, 15, 9, v111, 16) :|: 0 = 0
f_411(v89, v90, v91, v92, v93, 0, v100, 1, v112, v95, v97, v98, v99, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, 3, 7, 4, 8, 15, 9, v111, 16) -> f_413(v89, v90, v91, v92, v93, 0, v100, 1, v112, v95, v97, v98, v99, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, 3, 7, 4, 8, 15, 9, v111, 16) :|: TRUE
f_413(v89, v90, v91, v92, v93, 0, v100, 1, v112, v95, v97, v98, v99, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, 3, 7, 4, 8, 15, 9, v111, 16) -> f_415(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v98, v99, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, 3, 7, 4, 8, 15, 9, v111, 16) :|: 0 = 0
f_415(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v98, v99, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, 3, 7, 4, 8, 15, 9, v111, 16) -> f_417(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v98, v99, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, 3, 7, 4, 8, 15, 9, v111, 16) :|: 0 = 0
f_417(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v98, v99, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, 3, 7, 4, 8, 15, 9, v111, 16) -> f_419(v89, v90, v91, v92, v93, 0, v100, 1, v112, v98, v97, v99, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, 3, 7, 4, 8, 15, 9, v111, 16) :|: 0 = 0
f_419(v89, v90, v91, v92, v93, 0, v100, 1, v112, v98, v97, v99, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, 3, 7, 4, 8, 15, 9, v111, 16) -> f_421(v89, v90, v91, v92, v93, 0, v100, 1, v112, v98, v97, v99, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, 3, 7, 4, 8, 15, 9, v111, 16) :|: TRUE
f_421(v89, v90, v91, v92, v93, 0, v100, 1, v112, v98, v97, v99, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, 3, 7, 4, 8, 15, 9, v111, 16) -> f_423(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v99, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, v98, 3, 7, 4, 8, 15, 9, v111, 16) :|: 0 = 0
f_423(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v99, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, v98, 3, 7, 4, 8, 15, 9, v111, 16) -> f_425(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v99, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, v98, 3, 7, 4, 8, 15, 9, v111, 16) :|: 0 = 0
f_425(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v99, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, v98, 3, 7, 4, 8, 15, 9, v111, 16) -> f_427(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, v98, 3, 7, 4, 15, 8, v111, 16, 9) :|: v123 = 8 + v112 && 9 <= v123
f_427(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, v113, v98, 3, 7, 4, 15, 8, v111, 16, 9) -> f_429(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) :|: v126 = 1 + v111 && 2 <= v126
f_429(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) -> f_431(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) :|: 0 = 0
f_431(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) -> f_433(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) :|: TRUE
f_433(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) -> f_435(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) :|: TRUE
f_435(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v95, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) -> f_437(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) :|: 0 = 0
f_437(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) -> f_439(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v129, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) :|: 1 + v129 = v100 && 0 <= 1 + v129
f_439(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v129, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) -> f_441(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v129, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) :|: TRUE
f_441(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v129, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) -> f_443(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v129, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) :|: TRUE
f_443(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v129, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, 2, v126) -> f_401(v89, v90, v91, v92, v93, 0, v100, 1, v112, v97, v123, v129, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, v126) :|: TRUE
f_401(v89, v90, v91, v92, v93, 0, v95, 1, v97, v98, v99, v100, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, v111) -> f_402(v89, v90, v91, v92, v93, 0, v100, 1, v97, v95, v98, v99, v101, v104, v102, v105, v103, v106, v107, v108, v109, v110, 3, 7, 4, 8, 9, v111) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_402(v89:0, v90:0, v91:0, v92:0, v93:0, 0, 1 + v129:0, 1, v97:0, v95:0, v98:0, v99:0, v101:0, v104:0, v102:0, v105:0, v103:0, v106:0, v107:0, v108:0, v109:0, v110:0, 3, 7, 4, 8, 9, v111:0) -> f_402(v89:0, v90:0, v91:0, v92:0, v93:0, 0, v129:0, 1, v112:0, 1 + v129:0, v97:0, 8 + v112:0, v101:0, v104:0, v102:0, v105:0, v103:0, v106:0, v107:0, v108:0, v109:0, v110:0, 3, 7, 4, 8, 9, 1 + v111:0) :|: v95:0 > 0 && v129:0 > -2 && v89:0 > 0 && v112:0 % 4 = 0 && v112:0 > 0 && v111:0 > 0
Filtered unneeded arguments:
   f_402(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_402(x1, x7, x10, x28)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_402(v89:0, sum~cons_1~v129:0, v95:0, v111:0) -> f_402(v89:0, v129:0, 1 + v129:0, 1 + v111:0) :|: v129:0 > -2 && v95:0 > 0 && v111:0 > 0 && v89:0 > 0 && sum~cons_1~v129:0 = 1 + v129:0

----------------------------------------

(16)
Obligation:
Rules:
f_402(v89:0, sum~cons_1~v129:0, v95:0, v111:0) -> f_402(v89:0, v129:0, 1 + v129:0, 1 + v111:0) :|: v129:0 > -2 && v95:0 > 0 && v111:0 > 0 && v89:0 > 0 && sum~cons_1~v129:0 = 1 + v129:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_402(v89:0:0, sum~cons_1~v129:0:0, v95:0:0, v111:0:0) -> f_402(v89:0:0, v129:0:0, 1 + v129:0:0, 1 + v111:0:0) :|: v111:0:0 > 0 && v89:0:0 > 0 && v95:0:0 > 0 && v129:0:0 > -2 && sum~cons_1~v129:0:0 = 1 + v129:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_402 ] = f_402_2

The following rules are decreasing:
f_402(v89:0:0, sum~cons_1~v129:0:0, v95:0:0, v111:0:0) -> f_402(v89:0:0, v129:0:0, 1 + v129:0:0, 1 + v111:0:0) :|: v111:0:0 > 0 && v89:0:0 > 0 && v95:0:0 > 0 && v129:0:0 > -2 && sum~cons_1~v129:0:0 = 1 + v129:0:0

The following rules are bounded:
f_402(v89:0:0, sum~cons_1~v129:0:0, v95:0:0, v111:0:0) -> f_402(v89:0:0, v129:0:0, 1 + v129:0:0, 1 + v111:0:0) :|: v111:0:0 > 0 && v89:0:0 > 0 && v95:0:0 > 0 && v129:0:0 > -2 && sum~cons_1~v129:0:0 = 1 + v129:0:0


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
