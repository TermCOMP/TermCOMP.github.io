YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/8oRzj.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 967 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 23 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/8oRzj.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/8oRzj.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "mult" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %5
		%7 = icmp slt %6 0
		br %7, %8, %13
	8:
		%9 = load %4
		%10 = load %5
		%11 = sub i32 0, %10
		%12 = call i32 @mult(i32 %9, i32 %11)
		store %12, %3
		br %24
	13:
		%14 = load %5
		%15 = icmp eq %14 0
		br %15, %16, %17
	16:
		store 0, %3
		br %24
	17:
		%18 = load %4
		%19 = load %4
		%20 = load %5
		%21 = sub i32 %20, 1
		%22 = call i32 @mult(i32 %19, i32 %21)
		%23 = add i32 %18, %22
		store %23, %3
		br %24
	24:
		%25 = load %3
		ret %25

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 40
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = load %2
		%8 = icmp slt %7 0
		br %8, %9, %10
	9:
		store 0, %1
		br %33
	10:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%11 = call i32 @__VERIFIER_nondet_int()
		store %11, %3
		%12 = load %3
		%13 = icmp slt %12 0
		br %13, %14, %15
	14:
		store 0, %1
		br %33
	15:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%16 = load %2
		%17 = load %3
		%18 = call i32 @mult(i32 %16, i32 %17)
		store %18, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%19 = load %3
		%20 = load %2
		%21 = call i32 @mult(i32 %19, i32 %20)
		store %21, %5
		%22 = load %4
		%23 = icmp eq %22 0
		br %23, %30, %24
	24:
		%25 = load %2
		%26 = icmp sgt %25 0
		br %26, %30, %27
	27:
		%28 = load %3
		%29 = icmp sgt %28 0
		br %29, %30, %31
	30:
		store 0, %1
		br %33
	31:
		br %32
	32:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	33:
		%34 = load %1
		ret %34


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_391(v156, v157, v159, v160, 3, 0, 1, 4) -> f_392(v156, v157, v159, v161, v160, v162, 3, 0, 1, 4) :|: 1 <= v161 && v162 = 3 + v161 && 4 <= v162
f_392(v156, v157, v159, v161, v160, v162, 3, 0, 1, 4) -> f_393(v156, v157, v159, v161, v163, v160, v162, v164, 3, 0, 1, 4) :|: 1 <= v163 && v164 = 3 + v163 && 4 <= v164
f_393(v156, v157, v159, v161, v163, v160, v162, v164, 3, 0, 1, 4) -> f_394(v156, v157, v159, v161, v163, v160, v162, v164, 3, 0, 1, 4) :|: TRUE
f_394(v156, v157, v159, v161, v163, v160, v162, v164, 3, 0, 1, 4) -> f_395(v156, v157, v159, v161, v163, v160, v162, v164, 3, 0, 1, 4) :|: TRUE
f_395(v156, v157, v159, v161, v163, v160, v162, v164, 3, 0, 1, 4) -> f_396(v156, v157, v159, v161, v163, v160, v162, v164, 3, 0, 1, 4) :|: TRUE
f_396(v156, v157, v159, v161, v163, v160, v162, v164, 3, 0, 1, 4) -> f_397(v156, v157, v159, v161, v163, v160, v162, v164, 3, 0, 1, 4) :|: TRUE
f_397(v156, v157, v159, v161, v163, v160, v162, v164, 3, 0, 1, 4) -> f_398(v156, v157, v159, v161, v163, v160, v162, v164, 3, 0, 1, 4) :|: 0 = 0
f_398(v156, v157, v159, v161, v163, v160, v162, v164, 3, 0, 1, 4) -> f_399(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) :|: 0 = 0
f_399(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) -> f_400(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) :|: TRUE
f_400(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) -> f_401(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) :|: 0 = 0
f_401(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) -> f_403(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) :|: v157 != 0
f_403(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) -> f_405(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) :|: 0 = 0
f_405(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) -> f_407(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) :|: TRUE
f_407(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) -> f_409(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) :|: 0 = 0
f_409(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) -> f_411(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) :|: 0 = 0
f_411(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) -> f_413(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) :|: 0 = 0
f_413(v156, v157, v159, v161, v163, 0, v160, v162, v164, 3, 1, 4) -> f_415(v156, v157, v159, v161, v163, 0, v174, v160, v162, v164, 3, 1, 4) :|: 1 + v174 = v157 && 0 <= v174
f_415(v156, v157, v159, v161, v163, 0, v174, v160, v162, v164, 3, 1, 4) -> f_417(v156, v174, v159, v160, v161, v162, v163, v164, v157, 0, 3, 1, 4) :|: 0 = 0
f_417(v156, v174, v159, v160, v161, v162, v163, v164, v157, 0, 3, 1, 4) -> f_419(v156, v174, v159, v160, v161, v162, v163, v164, v157, 3, 1, 0, 4) :|: TRUE
f_419(v156, v174, v159, v160, v161, v162, v163, v164, v157, 3, 1, 0, 4) -> f_389(v156, v174, 0) :|: TRUE
f_389(v156, v157, 0) -> f_391(v156, v157, v159, v160, 3, 0, 1, 4) :|: 1 <= v159 && v160 = 3 + v159 && 4 <= v160
Combined rules. Obtained 1 rulesP rules:
f_391(v156:0, 1 + v174:0, v159:0, v160:0, 3, 0, 1, 4) -> f_391(v156:0, v174:0, v159:1, 3 + v159:1, 3, 0, 1, 4) :|: v163:0 > 0 && v161:0 > 0 && v174:0 > -1 && v159:1 > 0
Filtered unneeded arguments:
   f_391(x1, x2, x3, x4, x5, x6, x7, x8) -> f_391(x2)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_391(sum~cons_1~v174:0) -> f_391(v174:0) :|: v174:0 > -1 && sum~cons_1~v174:0 = 1 + v174:0

----------------------------------------

(8)
Obligation:
Rules:
f_391(sum~cons_1~v174:0) -> f_391(v174:0) :|: v174:0 > -1 && sum~cons_1~v174:0 = 1 + v174:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_391(sum~cons_1~v174:0:0) -> f_391(v174:0:0) :|: v174:0:0 > -1 && sum~cons_1~v174:0:0 = 1 + v174:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_391(x)] = x

The following rules are decreasing:
f_391(sum~cons_1~v174:0:0) -> f_391(v174:0:0) :|: v174:0:0 > -1 && sum~cons_1~v174:0:0 = 1 + v174:0:0
The following rules are bounded:
f_391(sum~cons_1~v174:0:0) -> f_391(v174:0:0) :|: v174:0:0 > -1 && sum~cons_1~v174:0:0 = 1 + v174:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
