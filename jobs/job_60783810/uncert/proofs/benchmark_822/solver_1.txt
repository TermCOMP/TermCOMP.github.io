YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ytO7y.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1066 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 49 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) IntTRS
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IntTRS
(15) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(16) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/ytO7y.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/ytO7y.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "mult" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %5
		%7 = icmp slt %6 0
		br %7, %8, %14
	8:
		%9 = load %4
		%10 = load %5
		%11 = sub i32 0, %10
		%12 = call i32 @mult(i32 %9, i32 %11)
		%13 = mul i32 -1, %12
		store %13, %3
		br %25
	14:
		%15 = load %5
		%16 = icmp eq %15 0
		br %16, %17, %18
	17:
		store 0, %3
		br %25
	18:
		%19 = load %4
		%20 = load %4
		%21 = load %5
		%22 = sub i32 %21, 1
		%23 = call i32 @mult(i32 %20, i32 %22)
		%24 = add i32 %19, %23
		store %24, %3
		br %25
	25:
		%26 = load %3
		ret %26

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 41
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%7 = load %2
		%8 = load %3
		%9 = call i32 @mult(i32 %7, i32 %8)
		store %9, %4
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 31 rulesP rules:
f_200(v22, v23, v34, v24, v25, v26, v27, v28, v29, v30, v31, v35, 0, v33, 3, 1, 4) -> f_201(v22, v23, v34, v36, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, 0, v33, 3, 1, 4) :|: 1 <= v36 && v37 = 3 + v36 && 4 <= v37
f_201(v22, v23, v34, v36, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, 0, v33, 3, 1, 4) -> f_202(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) :|: 1 <= v38 && v39 = 3 + v38 && 4 <= v39
f_202(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) -> f_203(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) :|: TRUE
f_203(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) -> f_204(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) :|: TRUE
f_204(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) -> f_205(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) :|: TRUE
f_205(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) -> f_206(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) :|: TRUE
f_206(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) -> f_207(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) :|: 0 = 0
f_207(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) -> f_208(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) :|: v23 < 0
f_207(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) -> f_209(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) :|: 0 <= v23
f_208(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) -> f_210(v22, v23, v34, v36, v38, 1, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 4) :|: 0 = 0
f_210(v22, v23, v34, v36, v38, 1, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 4) -> f_212(v22, v23, v34, v36, v38, 1, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 4) :|: TRUE
f_212(v22, v23, v34, v36, v38, 1, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 4) -> f_214(v22, v23, v34, v36, v38, 1, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 4) :|: 0 = 0
f_214(v22, v23, v34, v36, v38, 1, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 4) -> f_216(v22, v23, v34, v36, v38, 1, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 4) :|: 0 = 0
f_216(v22, v23, v34, v36, v38, 1, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 4) -> f_219(v22, v23, v34, v36, v38, 1, v42, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 4) :|: v42 + v23 = 0 && 1 <= v42
f_219(v22, v23, v34, v36, v38, 1, v42, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 4) -> f_222(v22, v42, v24, v25, v26, v27, v28, v29, v30, v31, v34, v35, v36, v37, v38, v39, 0, v33, v23, 1, 3, 4) :|: 0 = 0
f_222(v22, v42, v24, v25, v26, v27, v28, v29, v30, v31, v34, v35, v36, v37, v38, v39, 0, v33, v23, 1, 3, 4) -> f_225(v22, v42, v24, v25, v26, v27, v28, v29, v30, v31, v34, v35, v36, v37, v38, v39, 0, v33, v23, 3, 1, 4) :|: TRUE
f_225(v22, v42, v24, v25, v26, v27, v28, v29, v30, v31, v34, v35, v36, v37, v38, v39, 0, v33, v23, 3, 1, 4) -> f_197(v22, v42, v24, v25, v26, v27, v28, v29, v30, v31, 0, v33, 3, 1, 4) :|: TRUE
f_197(v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, 0, v33, 3, 1, 4) -> f_200(v22, v23, v34, v24, v25, v26, v27, v28, v29, v30, v31, v35, 0, v33, 3, 1, 4) :|: 1 <= v34 && v35 = 3 + v34 && 4 <= v35
f_209(v22, v23, v34, v36, v38, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, 0, v33, 3, 1, 4) -> f_211(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) :|: 0 = 0
f_211(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) -> f_213(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) :|: TRUE
f_213(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) -> f_215(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) :|: 0 = 0
f_215(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) -> f_218(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) :|: v23 != 0
f_218(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) -> f_221(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) :|: 0 = 0
f_221(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) -> f_224(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) :|: TRUE
f_224(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) -> f_227(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) :|: 0 = 0
f_227(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) -> f_229(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) :|: 0 = 0
f_229(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) -> f_231(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) :|: 0 = 0
f_231(v22, v23, v34, v36, v38, 0, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) -> f_234(v22, v23, v34, v36, v38, 0, v87, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) :|: 1 + v87 = v23 && 0 <= v87
f_234(v22, v23, v34, v36, v38, 0, v87, v24, v25, v26, v27, v28, v29, v30, v31, v35, v37, v39, v33, 3, 1, 4) -> f_236(v22, v87, v24, v25, v26, v27, v28, v29, v30, v31, v34, v35, v36, v37, v38, v39, 0, v33, v23, 3, 1, 4) :|: 0 = 0
f_236(v22, v87, v24, v25, v26, v27, v28, v29, v30, v31, v34, v35, v36, v37, v38, v39, 0, v33, v23, 3, 1, 4) -> f_238(v22, v87, v24, v25, v26, v27, v28, v29, v30, v31, v34, v35, v36, v37, v38, v39, 0, v33, v23, 3, 1, 4) :|: TRUE
f_238(v22, v87, v24, v25, v26, v27, v28, v29, v30, v31, v34, v35, v36, v37, v38, v39, 0, v33, v23, 3, 1, 4) -> f_197(v22, v87, v24, v25, v26, v27, v28, v29, v30, v31, 0, v33, 3, 1, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_200(v22:0, v23:0, v34:0, v24:0, v25:0, v26:0, v27:0, v28:0, v29:0, v30:0, v31:0, v35:0, 0, v33:0, 3, 1, 4) -> f_200(v22:0, v42:0, v34:1, v24:0, v25:0, v26:0, v27:0, v28:0, v29:0, v30:0, v31:0, 3 + v34:1, 0, v33:0, 3, 1, 4) :|: v38:0 > 0 && v36:0 > 0 && v23:0 < 0 && v42:0 > 0 && v42:0 + v23:0 = 0 && v34:1 > 0
f_200(v22:0, 1 + v87:0, v34:0, v24:0, v25:0, v26:0, v27:0, v28:0, v29:0, v30:0, v31:0, v35:0, 0, v33:0, 3, 1, 4) -> f_200(v22:0, v87:0, v34:1, v24:0, v25:0, v26:0, v27:0, v28:0, v29:0, v30:0, v31:0, 3 + v34:1, 0, v33:0, 3, 1, 4) :|: v87:0 > -1 && v38:0 > 0 && v36:0 > 0 && v34:1 > 0
Filtered unneeded arguments:
   f_200(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_200(x2)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_200(v23:0) -> f_200(v42:0) :|: v42:0 > 0 && v42:0 + v23:0 = 0 && v23:0 < 0
f_200(sum~cons_1~v87:0) -> f_200(v87:0) :|: v87:0 > -1 && sum~cons_1~v87:0 = 1 + v87:0

----------------------------------------

(8)
Obligation:
Rules:
f_200(v23:0) -> f_200(v42:0) :|: v42:0 > 0 && v42:0 + v23:0 = 0 && v23:0 < 0
f_200(sum~cons_1~v87:0) -> f_200(v87:0) :|: v87:0 > -1 && sum~cons_1~v87:0 = 1 + v87:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_200(v23:0:0) -> f_200(v42:0:0) :|: v42:0:0 > 0 && v42:0:0 + v23:0:0 = 0 && v23:0:0 < 0
f_200(sum~cons_1~v87:0:0) -> f_200(v87:0:0) :|: v87:0:0 > -1 && sum~cons_1~v87:0:0 = 1 + v87:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_200(x)] = -x + x^2

The following rules are decreasing:
f_200(v23:0:0) -> f_200(v42:0:0) :|: v42:0:0 > 0 && v42:0:0 + v23:0:0 = 0 && v23:0:0 < 0
The following rules are bounded:
f_200(v23:0:0) -> f_200(v42:0:0) :|: v42:0:0 > 0 && v42:0:0 + v23:0:0 = 0 && v23:0:0 < 0
f_200(sum~cons_1~v87:0:0) -> f_200(v87:0:0) :|: v87:0:0 > -1 && sum~cons_1~v87:0:0 = 1 + v87:0:0

----------------------------------------

(12)
Obligation:
Rules:
f_200(sum~cons_1~v87:0:0) -> f_200(v87:0:0) :|: v87:0:0 > -1 && sum~cons_1~v87:0:0 = 1 + v87:0:0

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f_200(sum~cons_1~v87:0:0:0) -> f_200(v87:0:0:0) :|: v87:0:0:0 > -1 && sum~cons_1~v87:0:0:0 = 1 + v87:0:0:0

----------------------------------------

(15) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_200(x)] = x

The following rules are decreasing:
f_200(sum~cons_1~v87:0:0:0) -> f_200(v87:0:0:0) :|: v87:0:0:0 > -1 && sum~cons_1~v87:0:0:0 = 1 + v87:0:0:0
The following rules are bounded:
f_200(sum~cons_1~v87:0:0:0) -> f_200(v87:0:0:0) :|: v87:0:0:0 > -1 && sum~cons_1~v87:0:0:0 = 1 + v87:0:0:0

----------------------------------------

(16)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
