YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/DAEh2.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 207 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 31 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/DAEh2.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/DAEh2.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 (...)* @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sgt %7 0
		br %8, %9, %13
	9:
		%10 = load %3
		store %10, %2
		%11 = load %3
		%12 = add i32 %11, -1
		store %12, %3
		br %6
	13:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 11 rulesP rules:
f_120(v33, v34, v35, v36, v37, v40, 1, v41, v42, v43, v44, 0, 3, 4) -> f_121(v33, v34, v35, v36, v37, v40, 1, v41, v42, v43, v44, 0, 3, 4) :|: 0 < v40 && 0 <= v41 && 1 <= v37
f_121(v33, v34, v35, v36, v37, v40, 1, v41, v42, v43, v44, 0, 3, 4) -> f_123(v33, v34, v35, v36, v37, v40, 1, v41, v42, v43, v44, 0, 3, 4) :|: 0 = 0
f_123(v33, v34, v35, v36, v37, v40, 1, v41, v42, v43, v44, 0, 3, 4) -> f_125(v33, v34, v35, v36, v37, v40, 1, v41, v42, v43, v44, 0, 3, 4) :|: TRUE
f_125(v33, v34, v35, v36, v37, v40, 1, v41, v42, v43, v44, 0, 3, 4) -> f_127(v33, v34, v35, v36, v37, v40, 1, v41, v42, v43, v44, 0, 3, 4) :|: 0 = 0
f_127(v33, v34, v35, v36, v37, v40, 1, v41, v42, v43, v44, 0, 3, 4) -> f_128(v33, v34, v35, v36, v37, v40, 1, v41, v42, v43, v44, 0, 3, 4) :|: TRUE
f_128(v33, v34, v35, v36, v37, v40, 1, v41, v42, v43, v44, 0, 3, 4) -> f_129(v33, v34, v35, v36, v37, v40, 1, v41, v42, v43, v44, 0, 3, 4) :|: 0 = 0
f_129(v33, v34, v35, v36, v37, v40, 1, v41, v42, v43, v44, 0, 3, 4) -> f_130(v33, v34, v35, v36, v37, v40, 1, v41, v47, v42, v43, v44, 0, 3, 4) :|: 1 + v47 = v41 && 0 <= 1 + v47
f_130(v33, v34, v35, v36, v37, v40, 1, v41, v47, v42, v43, v44, 0, 3, 4) -> f_131(v33, v34, v35, v36, v37, v40, 1, v41, v47, v42, v43, v44, 0, 3, 4) :|: TRUE
f_131(v33, v34, v35, v36, v37, v40, 1, v41, v47, v42, v43, v44, 0, 3, 4) -> f_132(v33, v34, v35, v36, v37, v40, 1, v41, v47, v42, v43, v44, 0, 3, 4) :|: TRUE
f_132(v33, v34, v35, v36, v37, v40, 1, v41, v47, v42, v43, v44, 0, 3, 4) -> f_119(v33, v34, v35, v36, v37, v40, 1, v41, v47, v42, v43, v44, 0, 3, 4) :|: TRUE
f_119(v33, v34, v35, v36, v37, v38, 1, v40, v41, v42, v43, v44, 0, 3, 4) -> f_120(v33, v34, v35, v36, v37, v40, 1, v41, v42, v43, v44, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_120(v33:0, v34:0, v35:0, v36:0, v37:0, v40:0, 1, 1 + v47:0, v42:0, v43:0, v44:0, 0, 3, 4) -> f_120(v33:0, v34:0, v35:0, v36:0, v37:0, 1 + v47:0, 1, v47:0, v42:0, v43:0, v44:0, 0, 3, 4) :|: v47:0 > -2 && v40:0 > 0 && v37:0 > 0
Filtered unneeded arguments:
   f_120(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_120(x5, x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_120(v37:0, v40:0, sum~cons_1~v47:0) -> f_120(v37:0, 1 + v47:0, v47:0) :|: v40:0 > 0 && v37:0 > 0 && v47:0 > -2 && sum~cons_1~v47:0 = 1 + v47:0

----------------------------------------

(8)
Obligation:
Rules:
f_120(v37:0, v40:0, sum~cons_1~v47:0) -> f_120(v37:0, 1 + v47:0, v47:0) :|: v40:0 > 0 && v37:0 > 0 && v47:0 > -2 && sum~cons_1~v47:0 = 1 + v47:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_120(v37:0:0, v40:0:0, sum~cons_1~v47:0:0) -> f_120(v37:0:0, 1 + v47:0:0, v47:0:0) :|: v40:0:0 > 0 && v37:0:0 > 0 && v47:0:0 > -2 && sum~cons_1~v47:0:0 = 1 + v47:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_120(x, x1, x2)] = x2

The following rules are decreasing:
f_120(v37:0:0, v40:0:0, sum~cons_1~v47:0:0) -> f_120(v37:0:0, 1 + v47:0:0, v47:0:0) :|: v40:0:0 > 0 && v37:0:0 > 0 && v47:0:0 > -2 && sum~cons_1~v47:0:0 = 1 + v47:0:0
The following rules are bounded:
f_120(v37:0:0, v40:0:0, sum~cons_1~v47:0:0) -> f_120(v37:0:0, 1 + v47:0:0, v47:0:0) :|: v40:0:0 > 0 && v37:0:0 > 0 && v47:0:0 > -2 && sum~cons_1~v47:0:0 = 1 + v47:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
