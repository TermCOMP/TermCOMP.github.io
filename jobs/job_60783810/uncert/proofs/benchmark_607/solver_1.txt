MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/Rd1nK.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 62 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 16.6 s]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
    (8) LLVM Symbolic Execution SCC
    (9) LLVM Symbolic Execution SCC


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Rd1nK.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Rd1nK.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: nomsg initVal: -1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: mode1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: r1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p6_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: alive1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p1_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p1_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: alive2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p2_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p2_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: alive3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p3_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode4 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p3_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: alive4 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id4 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send4 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st4 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p4_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode5 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p4_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: alive5 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id5 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send5 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st5 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p5_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode6 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p5_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: alive6 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id6 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send6 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st6 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p6_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: nodes initVal: (@node1,@node2,@node3,@node4,@node5,@node6) type: [6 x *BasicFunctionType varArgs: falsereturnType: BasicVoidTypeparamTypes: ()] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: null section: null

Name: p1 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p2 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p3 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p4 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p5 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p6 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_char" returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_msg_t" returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet__Bool" returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "node1" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 123
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode1
		%4 = trunc i8 %3 to i1
		br %4, %5, %43
	5:
		%6 = load @r1
		%7 = sext i8 %6 to i32
		%8 = add i32 %7, 1
		%9 = trunc i32 %8 to i8
		store %9, @r1
		%10 = load @p6_old
		store %10, %1
		%11 = load @nomsg
		store %11, @p6_old
		%12 = load %1
		%13 = sext i8 %12 to i32
		%14 = load @nomsg
		%15 = sext i8 %14 to i32
		%16 = icmp ne %13 %15
		br %16, %17, %42
	17:
		%18 = load @alive1
		%19 = trunc i8 %18 to i1
		br %19, %20, %39
	20:
		%21 = load %1
		%22 = sext i8 %21 to i32
		%23 = load @id1
		%24 = sext i8 %23 to i32
		%25 = icmp sgt %22 %24
		br %25, %26, %28
	26:
		%27 = load %1
		store %27, @send1
		br %38
	28:
		%29 = load %1
		%30 = sext i8 %29 to i32
		%31 = load @id1
		%32 = sext i8 %31 to i32
		%33 = icmp eq %30 %32
		br %33, %34, %35
	34:
		store 1, @st1
		br %37
	35:
		%36 = load %1
		store %36, @send1
		br %37
	37:
		br %38
	38:
		br %41
	39:
		%40 = load %1
		store %40, @send1
		br %41
	41:
		br %42
	42:
		store 0, @mode1
		br %96
	43:
		%44 = load @alive1
		%45 = trunc i8 %44 to i1
		br %45, %46, %67
	46:
		%47 = load @send1
		%48 = sext i8 %47 to i32
		%49 = load @nomsg
		%50 = sext i8 %49 to i32
		%51 = icmp ne %48 %50
		br %51, %52, %61
	52:
		%53 = load @p1_new
		%54 = sext i8 %53 to i32
		%55 = load @nomsg
		%56 = sext i8 %55 to i32
		%57 = icmp eq %54 %56
		br %57, %58, %61
	58:
		%59 = load @send1
		%60 = sext i8 %59 to i32
		br %64
	61:
		%62 = load @p1_new
		%63 = sext i8 %62 to i32
		br %64
	64:
		%65 = phi [%60, %58], [%63, %61]
		%66 = trunc i32 %65 to i8
		store %66, @p1_new
		br %95
	67:
		%68 = load @send1
		%69 = sext i8 %68 to i32
		%70 = load @id1
		%71 = sext i8 %70 to i32
		%72 = icmp ne %69 %71
		br %72, %73, %94
	73:
		%74 = load @send1
		%75 = sext i8 %74 to i32
		%76 = load @nomsg
		%77 = sext i8 %76 to i32
		%78 = icmp ne %75 %77
		br %78, %79, %88
	79:
		%80 = load @p1_new
		%81 = sext i8 %80 to i32
		%82 = load @nomsg
		%83 = sext i8 %82 to i32
		%84 = icmp eq %81 %83
		br %84, %85, %88
	85:
		%86 = load @send1
		%87 = sext i8 %86 to i32
		br %91
	88:
		%89 = load @p1_new
		%90 = sext i8 %89 to i32
		br %91
	91:
		%92 = phi [%87, %85], [%90, %88]
		%93 = trunc i32 %92 to i8
		store %93, @p1_new
		br %94
	94:
		br %95
	95:
		store 1, @mode1
		br %96
	96:
		ret void

*BasicFunctionTypename: "node2" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 222
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode2
		%4 = trunc i8 %3 to i1
		br %4, %5, %37
	5:
		%6 = load @p1_old
		store %6, %1
		%7 = load @nomsg
		store %7, @p1_old
		%8 = load %1
		%9 = sext i8 %8 to i32
		%10 = load @nomsg
		%11 = sext i8 %10 to i32
		%12 = icmp ne %9 %11
		br %12, %13, %36
	13:
		%14 = load @alive2
		%15 = trunc i8 %14 to i1
		br %15, %16, %33
	16:
		%17 = load %1
		%18 = sext i8 %17 to i32
		%19 = load @id2
		%20 = sext i8 %19 to i32
		%21 = icmp sgt %18 %20
		br %21, %22, %24
	22:
		%23 = load %1
		store %23, @send2
		br %32
	24:
		%25 = load %1
		%26 = sext i8 %25 to i32
		%27 = load @id2
		%28 = sext i8 %27 to i32
		%29 = icmp eq %26 %28
		br %29, %30, %31
	30:
		store 1, @st2
		br %31
	31:
		br %32
	32:
		br %35
	33:
		%34 = load %1
		store %34, @send2
		br %35
	35:
		br %36
	36:
		store 0, @mode2
		br %90
	37:
		%38 = load @alive2
		%39 = trunc i8 %38 to i1
		br %39, %40, %61
	40:
		%41 = load @send2
		%42 = sext i8 %41 to i32
		%43 = load @nomsg
		%44 = sext i8 %43 to i32
		%45 = icmp ne %42 %44
		br %45, %46, %55
	46:
		%47 = load @p2_new
		%48 = sext i8 %47 to i32
		%49 = load @nomsg
		%50 = sext i8 %49 to i32
		%51 = icmp eq %48 %50
		br %51, %52, %55
	52:
		%53 = load @send2
		%54 = sext i8 %53 to i32
		br %58
	55:
		%56 = load @p2_new
		%57 = sext i8 %56 to i32
		br %58
	58:
		%59 = phi [%54, %52], [%57, %55]
		%60 = trunc i32 %59 to i8
		store %60, @p2_new
		br %89
	61:
		%62 = load @send2
		%63 = sext i8 %62 to i32
		%64 = load @id2
		%65 = sext i8 %64 to i32
		%66 = icmp ne %63 %65
		br %66, %67, %88
	67:
		%68 = load @send2
		%69 = sext i8 %68 to i32
		%70 = load @nomsg
		%71 = sext i8 %70 to i32
		%72 = icmp ne %69 %71
		br %72, %73, %82
	73:
		%74 = load @p2_new
		%75 = sext i8 %74 to i32
		%76 = load @nomsg
		%77 = sext i8 %76 to i32
		%78 = icmp eq %75 %77
		br %78, %79, %82
	79:
		%80 = load @send2
		%81 = sext i8 %80 to i32
		br %85
	82:
		%83 = load @p2_new
		%84 = sext i8 %83 to i32
		br %85
	85:
		%86 = phi [%81, %79], [%84, %82]
		%87 = trunc i32 %86 to i8
		store %87, @p2_new
		br %88
	88:
		br %89
	89:
		store 1, @mode2
		br %90
	90:
		ret void

*BasicFunctionTypename: "node3" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 313
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode3
		%4 = trunc i8 %3 to i1
		br %4, %5, %37
	5:
		%6 = load @p2_old
		store %6, %1
		%7 = load @nomsg
		store %7, @p2_old
		%8 = load %1
		%9 = sext i8 %8 to i32
		%10 = load @nomsg
		%11 = sext i8 %10 to i32
		%12 = icmp ne %9 %11
		br %12, %13, %36
	13:
		%14 = load @alive3
		%15 = trunc i8 %14 to i1
		br %15, %16, %33
	16:
		%17 = load %1
		%18 = sext i8 %17 to i32
		%19 = load @id3
		%20 = sext i8 %19 to i32
		%21 = icmp sgt %18 %20
		br %21, %22, %24
	22:
		%23 = load %1
		store %23, @send3
		br %32
	24:
		%25 = load %1
		%26 = sext i8 %25 to i32
		%27 = load @id3
		%28 = sext i8 %27 to i32
		%29 = icmp eq %26 %28
		br %29, %30, %31
	30:
		store 1, @st3
		br %31
	31:
		br %32
	32:
		br %35
	33:
		%34 = load %1
		store %34, @send3
		br %35
	35:
		br %36
	36:
		store 0, @mode3
		br %90
	37:
		%38 = load @alive3
		%39 = trunc i8 %38 to i1
		br %39, %40, %61
	40:
		%41 = load @send3
		%42 = sext i8 %41 to i32
		%43 = load @nomsg
		%44 = sext i8 %43 to i32
		%45 = icmp ne %42 %44
		br %45, %46, %55
	46:
		%47 = load @p3_new
		%48 = sext i8 %47 to i32
		%49 = load @nomsg
		%50 = sext i8 %49 to i32
		%51 = icmp eq %48 %50
		br %51, %52, %55
	52:
		%53 = load @send3
		%54 = sext i8 %53 to i32
		br %58
	55:
		%56 = load @p3_new
		%57 = sext i8 %56 to i32
		br %58
	58:
		%59 = phi [%54, %52], [%57, %55]
		%60 = trunc i32 %59 to i8
		store %60, @p3_new
		br %89
	61:
		%62 = load @send3
		%63 = sext i8 %62 to i32
		%64 = load @id3
		%65 = sext i8 %64 to i32
		%66 = icmp ne %63 %65
		br %66, %67, %88
	67:
		%68 = load @send3
		%69 = sext i8 %68 to i32
		%70 = load @nomsg
		%71 = sext i8 %70 to i32
		%72 = icmp ne %69 %71
		br %72, %73, %82
	73:
		%74 = load @p3_new
		%75 = sext i8 %74 to i32
		%76 = load @nomsg
		%77 = sext i8 %76 to i32
		%78 = icmp eq %75 %77
		br %78, %79, %82
	79:
		%80 = load @send3
		%81 = sext i8 %80 to i32
		br %85
	82:
		%83 = load @p3_new
		%84 = sext i8 %83 to i32
		br %85
	85:
		%86 = phi [%81, %79], [%84, %82]
		%87 = trunc i32 %86 to i8
		store %87, @p3_new
		br %88
	88:
		br %89
	89:
		store 1, @mode3
		br %90
	90:
		ret void

*BasicFunctionTypename: "node4" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 404
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode4
		%4 = trunc i8 %3 to i1
		br %4, %5, %37
	5:
		%6 = load @p3_old
		store %6, %1
		%7 = load @nomsg
		store %7, @p3_old
		%8 = load %1
		%9 = sext i8 %8 to i32
		%10 = load @nomsg
		%11 = sext i8 %10 to i32
		%12 = icmp ne %9 %11
		br %12, %13, %36
	13:
		%14 = load @alive4
		%15 = trunc i8 %14 to i1
		br %15, %16, %33
	16:
		%17 = load %1
		%18 = sext i8 %17 to i32
		%19 = load @id4
		%20 = sext i8 %19 to i32
		%21 = icmp sgt %18 %20
		br %21, %22, %24
	22:
		%23 = load %1
		store %23, @send4
		br %32
	24:
		%25 = load %1
		%26 = sext i8 %25 to i32
		%27 = load @id4
		%28 = sext i8 %27 to i32
		%29 = icmp eq %26 %28
		br %29, %30, %31
	30:
		store 1, @st4
		br %31
	31:
		br %32
	32:
		br %35
	33:
		%34 = load %1
		store %34, @send4
		br %35
	35:
		br %36
	36:
		store 0, @mode4
		br %90
	37:
		%38 = load @alive4
		%39 = trunc i8 %38 to i1
		br %39, %40, %61
	40:
		%41 = load @send4
		%42 = sext i8 %41 to i32
		%43 = load @nomsg
		%44 = sext i8 %43 to i32
		%45 = icmp ne %42 %44
		br %45, %46, %55
	46:
		%47 = load @p4_new
		%48 = sext i8 %47 to i32
		%49 = load @nomsg
		%50 = sext i8 %49 to i32
		%51 = icmp eq %48 %50
		br %51, %52, %55
	52:
		%53 = load @send4
		%54 = sext i8 %53 to i32
		br %58
	55:
		%56 = load @p4_new
		%57 = sext i8 %56 to i32
		br %58
	58:
		%59 = phi [%54, %52], [%57, %55]
		%60 = trunc i32 %59 to i8
		store %60, @p4_new
		br %89
	61:
		%62 = load @send4
		%63 = sext i8 %62 to i32
		%64 = load @id4
		%65 = sext i8 %64 to i32
		%66 = icmp ne %63 %65
		br %66, %67, %88
	67:
		%68 = load @send4
		%69 = sext i8 %68 to i32
		%70 = load @nomsg
		%71 = sext i8 %70 to i32
		%72 = icmp ne %69 %71
		br %72, %73, %82
	73:
		%74 = load @p4_new
		%75 = sext i8 %74 to i32
		%76 = load @nomsg
		%77 = sext i8 %76 to i32
		%78 = icmp eq %75 %77
		br %78, %79, %82
	79:
		%80 = load @send4
		%81 = sext i8 %80 to i32
		br %85
	82:
		%83 = load @p4_new
		%84 = sext i8 %83 to i32
		br %85
	85:
		%86 = phi [%81, %79], [%84, %82]
		%87 = trunc i32 %86 to i8
		store %87, @p4_new
		br %88
	88:
		br %89
	89:
		store 1, @mode4
		br %90
	90:
		ret void

*BasicFunctionTypename: "node5" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 495
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode5
		%4 = trunc i8 %3 to i1
		br %4, %5, %37
	5:
		%6 = load @p4_old
		store %6, %1
		%7 = load @nomsg
		store %7, @p4_old
		%8 = load %1
		%9 = sext i8 %8 to i32
		%10 = load @nomsg
		%11 = sext i8 %10 to i32
		%12 = icmp ne %9 %11
		br %12, %13, %36
	13:
		%14 = load @alive5
		%15 = trunc i8 %14 to i1
		br %15, %16, %33
	16:
		%17 = load %1
		%18 = sext i8 %17 to i32
		%19 = load @id5
		%20 = sext i8 %19 to i32
		%21 = icmp sgt %18 %20
		br %21, %22, %24
	22:
		%23 = load %1
		store %23, @send5
		br %32
	24:
		%25 = load %1
		%26 = sext i8 %25 to i32
		%27 = load @id5
		%28 = sext i8 %27 to i32
		%29 = icmp eq %26 %28
		br %29, %30, %31
	30:
		store 1, @st5
		br %31
	31:
		br %32
	32:
		br %35
	33:
		%34 = load %1
		store %34, @send5
		br %35
	35:
		br %36
	36:
		store 0, @mode5
		br %90
	37:
		%38 = load @alive5
		%39 = trunc i8 %38 to i1
		br %39, %40, %61
	40:
		%41 = load @send5
		%42 = sext i8 %41 to i32
		%43 = load @nomsg
		%44 = sext i8 %43 to i32
		%45 = icmp ne %42 %44
		br %45, %46, %55
	46:
		%47 = load @p5_new
		%48 = sext i8 %47 to i32
		%49 = load @nomsg
		%50 = sext i8 %49 to i32
		%51 = icmp eq %48 %50
		br %51, %52, %55
	52:
		%53 = load @send5
		%54 = sext i8 %53 to i32
		br %58
	55:
		%56 = load @p5_new
		%57 = sext i8 %56 to i32
		br %58
	58:
		%59 = phi [%54, %52], [%57, %55]
		%60 = trunc i32 %59 to i8
		store %60, @p5_new
		br %89
	61:
		%62 = load @send5
		%63 = sext i8 %62 to i32
		%64 = load @id5
		%65 = sext i8 %64 to i32
		%66 = icmp ne %63 %65
		br %66, %67, %88
	67:
		%68 = load @send5
		%69 = sext i8 %68 to i32
		%70 = load @nomsg
		%71 = sext i8 %70 to i32
		%72 = icmp ne %69 %71
		br %72, %73, %82
	73:
		%74 = load @p5_new
		%75 = sext i8 %74 to i32
		%76 = load @nomsg
		%77 = sext i8 %76 to i32
		%78 = icmp eq %75 %77
		br %78, %79, %82
	79:
		%80 = load @send5
		%81 = sext i8 %80 to i32
		br %85
	82:
		%83 = load @p5_new
		%84 = sext i8 %83 to i32
		br %85
	85:
		%86 = phi [%81, %79], [%84, %82]
		%87 = trunc i32 %86 to i8
		store %87, @p5_new
		br %88
	88:
		br %89
	89:
		store 1, @mode5
		br %90
	90:
		ret void

*BasicFunctionTypename: "node6" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 586
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode6
		%4 = trunc i8 %3 to i1
		br %4, %5, %37
	5:
		%6 = load @p5_old
		store %6, %1
		%7 = load @nomsg
		store %7, @p5_old
		%8 = load %1
		%9 = sext i8 %8 to i32
		%10 = load @nomsg
		%11 = sext i8 %10 to i32
		%12 = icmp ne %9 %11
		br %12, %13, %36
	13:
		%14 = load @alive6
		%15 = trunc i8 %14 to i1
		br %15, %16, %33
	16:
		%17 = load %1
		%18 = sext i8 %17 to i32
		%19 = load @id6
		%20 = sext i8 %19 to i32
		%21 = icmp sgt %18 %20
		br %21, %22, %24
	22:
		%23 = load %1
		store %23, @send6
		br %32
	24:
		%25 = load %1
		%26 = sext i8 %25 to i32
		%27 = load @id6
		%28 = sext i8 %27 to i32
		%29 = icmp eq %26 %28
		br %29, %30, %31
	30:
		store 1, @st6
		br %31
	31:
		br %32
	32:
		br %35
	33:
		%34 = load %1
		store %34, @send6
		br %35
	35:
		br %36
	36:
		store 0, @mode6
		br %90
	37:
		%38 = load @alive6
		%39 = trunc i8 %38 to i1
		br %39, %40, %61
	40:
		%41 = load @send6
		%42 = sext i8 %41 to i32
		%43 = load @nomsg
		%44 = sext i8 %43 to i32
		%45 = icmp ne %42 %44
		br %45, %46, %55
	46:
		%47 = load @p6_new
		%48 = sext i8 %47 to i32
		%49 = load @nomsg
		%50 = sext i8 %49 to i32
		%51 = icmp eq %48 %50
		br %51, %52, %55
	52:
		%53 = load @send6
		%54 = sext i8 %53 to i32
		br %58
	55:
		%56 = load @p6_new
		%57 = sext i8 %56 to i32
		br %58
	58:
		%59 = phi [%54, %52], [%57, %55]
		%60 = trunc i32 %59 to i8
		store %60, @p6_new
		br %89
	61:
		%62 = load @send6
		%63 = sext i8 %62 to i32
		%64 = load @id6
		%65 = sext i8 %64 to i32
		%66 = icmp ne %63 %65
		br %66, %67, %88
	67:
		%68 = load @send6
		%69 = sext i8 %68 to i32
		%70 = load @nomsg
		%71 = sext i8 %70 to i32
		%72 = icmp ne %69 %71
		br %72, %73, %82
	73:
		%74 = load @p6_new
		%75 = sext i8 %74 to i32
		%76 = load @nomsg
		%77 = sext i8 %76 to i32
		%78 = icmp eq %75 %77
		br %78, %79, %82
	79:
		%80 = load @send6
		%81 = sext i8 %80 to i32
		br %85
	82:
		%83 = load @p6_new
		%84 = sext i8 %83 to i32
		br %85
	85:
		%86 = phi [%81, %79], [%84, %82]
		%87 = trunc i32 %86 to i8
		store %87, @p6_new
		br %88
	88:
		br %89
	89:
		store 1, @mode6
		br %90
	90:
		ret void

*BasicFunctionTypename: "init" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 677
	0:
		%1 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%2 = load @r1
		%3 = sext i8 %2 to i32
		%4 = icmp eq %3 0
		br %4, %5, %315
	5:
		%6 = load @alive1
		%7 = trunc i8 %6 to i1
		%8 = zext i1 %7 to i32
		%9 = load @alive2
		%10 = trunc i8 %9 to i1
		%11 = zext i1 %10 to i32
		%12 = add i32 %8, %11
		%13 = load @alive3
		%14 = trunc i8 %13 to i1
		%15 = zext i1 %14 to i32
		%16 = add i32 %12, %15
		%17 = load @alive4
		%18 = trunc i8 %17 to i1
		%19 = zext i1 %18 to i32
		%20 = add i32 %16, %19
		%21 = load @alive5
		%22 = trunc i8 %21 to i1
		%23 = zext i1 %22 to i32
		%24 = add i32 %20, %23
		%25 = load @alive6
		%26 = trunc i8 %25 to i1
		%27 = zext i1 %26 to i32
		%28 = add i32 %24, %27
		%29 = icmp sge %28 1
		br %29, %30, %313
	30:
		%31 = load @id1
		%32 = sext i8 %31 to i32
		%33 = icmp sge %32 0
		br %33, %34, %311
	34:
		%35 = load @st1
		%36 = sext i8 %35 to i32
		%37 = icmp eq %36 0
		br %37, %38, %309
	38:
		%39 = load @send1
		%40 = sext i8 %39 to i32
		%41 = load @id1
		%42 = sext i8 %41 to i32
		%43 = icmp eq %40 %42
		br %43, %44, %307
	44:
		%45 = load @mode1
		%46 = trunc i8 %45 to i1
		%47 = zext i1 %46 to i32
		%48 = icmp eq %47 0
		br %48, %49, %305
	49:
		%50 = load @id2
		%51 = sext i8 %50 to i32
		%52 = icmp sge %51 0
		br %52, %53, %303
	53:
		%54 = load @st2
		%55 = sext i8 %54 to i32
		%56 = icmp eq %55 0
		br %56, %57, %301
	57:
		%58 = load @send2
		%59 = sext i8 %58 to i32
		%60 = load @id2
		%61 = sext i8 %60 to i32
		%62 = icmp eq %59 %61
		br %62, %63, %299
	63:
		%64 = load @mode2
		%65 = trunc i8 %64 to i1
		%66 = zext i1 %65 to i32
		%67 = icmp eq %66 0
		br %67, %68, %297
	68:
		%69 = load @id3
		%70 = sext i8 %69 to i32
		%71 = icmp sge %70 0
		br %71, %72, %295
	72:
		%73 = load @st3
		%74 = sext i8 %73 to i32
		%75 = icmp eq %74 0
		br %75, %76, %293
	76:
		%77 = load @send3
		%78 = sext i8 %77 to i32
		%79 = load @id3
		%80 = sext i8 %79 to i32
		%81 = icmp eq %78 %80
		br %81, %82, %291
	82:
		%83 = load @mode3
		%84 = trunc i8 %83 to i1
		%85 = zext i1 %84 to i32
		%86 = icmp eq %85 0
		br %86, %87, %289
	87:
		%88 = load @id4
		%89 = sext i8 %88 to i32
		%90 = icmp sge %89 0
		br %90, %91, %287
	91:
		%92 = load @st4
		%93 = sext i8 %92 to i32
		%94 = icmp eq %93 0
		br %94, %95, %285
	95:
		%96 = load @send4
		%97 = sext i8 %96 to i32
		%98 = load @id4
		%99 = sext i8 %98 to i32
		%100 = icmp eq %97 %99
		br %100, %101, %283
	101:
		%102 = load @mode4
		%103 = trunc i8 %102 to i1
		%104 = zext i1 %103 to i32
		%105 = icmp eq %104 0
		br %105, %106, %281
	106:
		%107 = load @id5
		%108 = sext i8 %107 to i32
		%109 = icmp sge %108 0
		br %109, %110, %279
	110:
		%111 = load @st5
		%112 = sext i8 %111 to i32
		%113 = icmp eq %112 0
		br %113, %114, %277
	114:
		%115 = load @send5
		%116 = sext i8 %115 to i32
		%117 = load @id5
		%118 = sext i8 %117 to i32
		%119 = icmp eq %116 %118
		br %119, %120, %275
	120:
		%121 = load @mode5
		%122 = trunc i8 %121 to i1
		%123 = zext i1 %122 to i32
		%124 = icmp eq %123 0
		br %124, %125, %273
	125:
		%126 = load @id6
		%127 = sext i8 %126 to i32
		%128 = icmp sge %127 0
		br %128, %129, %271
	129:
		%130 = load @st6
		%131 = sext i8 %130 to i32
		%132 = icmp eq %131 0
		br %132, %133, %269
	133:
		%134 = load @send6
		%135 = sext i8 %134 to i32
		%136 = load @id6
		%137 = sext i8 %136 to i32
		%138 = icmp eq %135 %137
		br %138, %139, %267
	139:
		%140 = load @mode6
		%141 = trunc i8 %140 to i1
		%142 = zext i1 %141 to i32
		%143 = icmp eq %142 0
		br %143, %144, %265
	144:
		%145 = load @id1
		%146 = sext i8 %145 to i32
		%147 = load @id2
		%148 = sext i8 %147 to i32
		%149 = icmp ne %146 %148
		br %149, %150, %263
	150:
		%151 = load @id1
		%152 = sext i8 %151 to i32
		%153 = load @id3
		%154 = sext i8 %153 to i32
		%155 = icmp ne %152 %154
		br %155, %156, %261
	156:
		%157 = load @id1
		%158 = sext i8 %157 to i32
		%159 = load @id4
		%160 = sext i8 %159 to i32
		%161 = icmp ne %158 %160
		br %161, %162, %259
	162:
		%163 = load @id1
		%164 = sext i8 %163 to i32
		%165 = load @id5
		%166 = sext i8 %165 to i32
		%167 = icmp ne %164 %166
		br %167, %168, %257
	168:
		%169 = load @id1
		%170 = sext i8 %169 to i32
		%171 = load @id6
		%172 = sext i8 %171 to i32
		%173 = icmp ne %170 %172
		br %173, %174, %255
	174:
		%175 = load @id2
		%176 = sext i8 %175 to i32
		%177 = load @id3
		%178 = sext i8 %177 to i32
		%179 = icmp ne %176 %178
		br %179, %180, %253
	180:
		%181 = load @id2
		%182 = sext i8 %181 to i32
		%183 = load @id4
		%184 = sext i8 %183 to i32
		%185 = icmp ne %182 %184
		br %185, %186, %251
	186:
		%187 = load @id2
		%188 = sext i8 %187 to i32
		%189 = load @id5
		%190 = sext i8 %189 to i32
		%191 = icmp ne %188 %190
		br %191, %192, %249
	192:
		%193 = load @id2
		%194 = sext i8 %193 to i32
		%195 = load @id6
		%196 = sext i8 %195 to i32
		%197 = icmp ne %194 %196
		br %197, %198, %247
	198:
		%199 = load @id3
		%200 = sext i8 %199 to i32
		%201 = load @id4
		%202 = sext i8 %201 to i32
		%203 = icmp ne %200 %202
		br %203, %204, %245
	204:
		%205 = load @id3
		%206 = sext i8 %205 to i32
		%207 = load @id5
		%208 = sext i8 %207 to i32
		%209 = icmp ne %206 %208
		br %209, %210, %243
	210:
		%211 = load @id3
		%212 = sext i8 %211 to i32
		%213 = load @id6
		%214 = sext i8 %213 to i32
		%215 = icmp ne %212 %214
		br %215, %216, %241
	216:
		%217 = load @id4
		%218 = sext i8 %217 to i32
		%219 = load @id5
		%220 = sext i8 %219 to i32
		%221 = icmp ne %218 %220
		br %221, %222, %239
	222:
		%223 = load @id4
		%224 = sext i8 %223 to i32
		%225 = load @id6
		%226 = sext i8 %225 to i32
		%227 = icmp ne %224 %226
		br %227, %228, %237
	228:
		%229 = load @id5
		%230 = sext i8 %229 to i32
		%231 = load @id6
		%232 = sext i8 %231 to i32
		%233 = icmp ne %230 %232
		br %233, %234, %235
	234:
		store 1, %1
		br %236
	235:
		store 0, %1
		br %236
	236:
		br %238
	237:
		store 0, %1
		br %238
	238:
		br %240
	239:
		store 0, %1
		br %240
	240:
		br %242
	241:
		store 0, %1
		br %242
	242:
		br %244
	243:
		store 0, %1
		br %244
	244:
		br %246
	245:
		store 0, %1
		br %246
	246:
		br %248
	247:
		store 0, %1
		br %248
	248:
		br %250
	249:
		store 0, %1
		br %250
	250:
		br %252
	251:
		store 0, %1
		br %252
	252:
		br %254
	253:
		store 0, %1
		br %254
	254:
		br %256
	255:
		store 0, %1
		br %256
	256:
		br %258
	257:
		store 0, %1
		br %258
	258:
		br %260
	259:
		store 0, %1
		br %260
	260:
		br %262
	261:
		store 0, %1
		br %262
	262:
		br %264
	263:
		store 0, %1
		br %264
	264:
		br %266
	265:
		store 0, %1
		br %266
	266:
		br %268
	267:
		store 0, %1
		br %268
	268:
		br %270
	269:
		store 0, %1
		br %270
	270:
		br %272
	271:
		store 0, %1
		br %272
	272:
		br %274
	273:
		store 0, %1
		br %274
	274:
		br %276
	275:
		store 0, %1
		br %276
	276:
		br %278
	277:
		store 0, %1
		br %278
	278:
		br %280
	279:
		store 0, %1
		br %280
	280:
		br %282
	281:
		store 0, %1
		br %282
	282:
		br %284
	283:
		store 0, %1
		br %284
	284:
		br %286
	285:
		store 0, %1
		br %286
	286:
		br %288
	287:
		store 0, %1
		br %288
	288:
		br %290
	289:
		store 0, %1
		br %290
	290:
		br %292
	291:
		store 0, %1
		br %292
	292:
		br %294
	293:
		store 0, %1
		br %294
	294:
		br %296
	295:
		store 0, %1
		br %296
	296:
		br %298
	297:
		store 0, %1
		br %298
	298:
		br %300
	299:
		store 0, %1
		br %300
	300:
		br %302
	301:
		store 0, %1
		br %302
	302:
		br %304
	303:
		store 0, %1
		br %304
	304:
		br %306
	305:
		store 0, %1
		br %306
	306:
		br %308
	307:
		store 0, %1
		br %308
	308:
		br %310
	309:
		store 0, %1
		br %310
	310:
		br %312
	311:
		store 0, %1
		br %312
	312:
		br %314
	313:
		store 0, %1
		br %314
	314:
		br %316
	315:
		store 0, %1
		br %316
	316:
		%317 = load %1
		ret %317

*BasicFunctionTypename: "check" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1112
	0:
		%1 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%2 = load @st1
		%3 = sext i8 %2 to i32
		%4 = load @st2
		%5 = sext i8 %4 to i32
		%6 = add i32 %3, %5
		%7 = load @st3
		%8 = sext i8 %7 to i32
		%9 = add i32 %6, %8
		%10 = load @st4
		%11 = sext i8 %10 to i32
		%12 = add i32 %9, %11
		%13 = load @st5
		%14 = sext i8 %13 to i32
		%15 = add i32 %12, %14
		%16 = load @st6
		%17 = sext i8 %16 to i32
		%18 = add i32 %15, %17
		%19 = icmp sle %18 1
		br %19, %20, %48
	20:
		%21 = load @r1
		%22 = sext i8 %21 to i32
		%23 = icmp slt %22 6
		br %23, %24, %25
	24:
		store 1, %1
		br %47
	25:
		%26 = load @st1
		%27 = sext i8 %26 to i32
		%28 = load @st2
		%29 = sext i8 %28 to i32
		%30 = add i32 %27, %29
		%31 = load @st3
		%32 = sext i8 %31 to i32
		%33 = add i32 %30, %32
		%34 = load @st4
		%35 = sext i8 %34 to i32
		%36 = add i32 %33, %35
		%37 = load @st5
		%38 = sext i8 %37 to i32
		%39 = add i32 %36, %38
		%40 = load @st6
		%41 = sext i8 %40 to i32
		%42 = add i32 %39, %41
		%43 = icmp eq %42 1
		br %43, %44, %45
	44:
		store 1, %1
		br %46
	45:
		store 0, %1
		br %46
	46:
		br %47
	47:
		br %49
	48:
		store 0, %1
		br %49
	49:
		%50 = load %1
		ret %50

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1175
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %2
		%4 = call signext i8 @__VERIFIER_nondet_char()
		store %4, @r1
		%5 = call signext i8 @__VERIFIER_nondet_char()
		store %5, @id1
		%6 = call signext i8 @__VERIFIER_nondet_char()
		store %6, @st1
		%7 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %7, @send1
		%8 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%9 = zext i1 %8 to i8
		store %9, @mode1
		%10 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%11 = zext i1 %10 to i8
		store %11, @alive1
		%12 = call signext i8 @__VERIFIER_nondet_char()
		store %12, @id2
		%13 = call signext i8 @__VERIFIER_nondet_char()
		store %13, @st2
		%14 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %14, @send2
		%15 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%16 = zext i1 %15 to i8
		store %16, @mode2
		%17 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%18 = zext i1 %17 to i8
		store %18, @alive2
		%19 = call signext i8 @__VERIFIER_nondet_char()
		store %19, @id3
		%20 = call signext i8 @__VERIFIER_nondet_char()
		store %20, @st3
		%21 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %21, @send3
		%22 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%23 = zext i1 %22 to i8
		store %23, @mode3
		%24 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%25 = zext i1 %24 to i8
		store %25, @alive3
		%26 = call signext i8 @__VERIFIER_nondet_char()
		store %26, @id4
		%27 = call signext i8 @__VERIFIER_nondet_char()
		store %27, @st4
		%28 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %28, @send4
		%29 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%30 = zext i1 %29 to i8
		store %30, @mode4
		%31 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%32 = zext i1 %31 to i8
		store %32, @alive4
		%33 = call signext i8 @__VERIFIER_nondet_char()
		store %33, @id5
		%34 = call signext i8 @__VERIFIER_nondet_char()
		store %34, @st5
		%35 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %35, @send5
		%36 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%37 = zext i1 %36 to i8
		store %37, @mode5
		%38 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%39 = zext i1 %38 to i8
		store %39, @alive5
		%40 = call signext i8 @__VERIFIER_nondet_char()
		store %40, @id6
		%41 = call signext i8 @__VERIFIER_nondet_char()
		store %41, @st6
		%42 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %42, @send6
		%43 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%44 = zext i1 %43 to i8
		store %44, @mode6
		%45 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%46 = zext i1 %45 to i8
		store %46, @alive6
		%47 = call i32 @init()
		store %47, %3
		%48 = load %3
		%49 = icmp ne %48 0
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i1 zeroext %49)
		%50 = load @nomsg
		store %50, @p1_old
		%51 = load @nomsg
		store %51, @p1_new
		%52 = load @nomsg
		store %52, @p2_old
		%53 = load @nomsg
		store %53, @p2_new
		%54 = load @nomsg
		store %54, @p3_old
		%55 = load @nomsg
		store %55, @p3_new
		%56 = load @nomsg
		store %56, @p4_old
		%57 = load @nomsg
		store %57, @p4_new
		%58 = load @nomsg
		store %58, @p5_old
		%59 = load @nomsg
		store %59, @p5_new
		%60 = load @nomsg
		store %60, @p6_old
		%61 = load @nomsg
		store %61, @p6_new
		store 0, %3
		br %62
	62:
		%63 = load %3
		%64 = icmp slt %63 12
		br %64, %65, %83
	65:
		Unnamed Call-Instruction = call BasicVoidType @node1()
		Unnamed Call-Instruction = call BasicVoidType @node2()
		Unnamed Call-Instruction = call BasicVoidType @node3()
		Unnamed Call-Instruction = call BasicVoidType @node4()
		Unnamed Call-Instruction = call BasicVoidType @node5()
		Unnamed Call-Instruction = call BasicVoidType @node6()
		%66 = load @p1_new
		store %66, @p1_old
		%67 = load @nomsg
		store %67, @p1_new
		%68 = load @p2_new
		store %68, @p2_old
		%69 = load @nomsg
		store %69, @p2_new
		%70 = load @p3_new
		store %70, @p3_old
		%71 = load @nomsg
		store %71, @p3_new
		%72 = load @p4_new
		store %72, @p4_old
		%73 = load @nomsg
		store %73, @p4_new
		%74 = load @p5_new
		store %74, @p5_old
		%75 = load @nomsg
		store %75, @p5_new
		%76 = load @p6_new
		store %76, @p6_old
		%77 = load @nomsg
		store %77, @p6_new
		%78 = call i32 @check()
		store %78, %2
		%79 = load %2
		%80 = icmp ne %79 0
		Unnamed Call-Instruction = call BasicVoidType @assert(i1 zeroext %80)
		%81 = load %3
		%82 = add i32 %81, 1
		store %82, %3
		br %62
	83:
		%84 = load %1
		ret %84

*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1316
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		br %4
	4:
		%5 = load %2
		%6 = trunc i8 %5 to i1
		%7 = xor i1 %6, 1
		br %7, %8, %9
	8:
		br %4
	9:
		ret void

*BasicFunctionTypename: "assert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1328
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%4 = load %2
		%5 = trunc i8 %4 to i1
		br %5, %8, %6
	6:
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	8:
		ret void


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8)
Obligation:
SCC
----------------------------------------

(9)
Obligation:
SCCInstruction count:1216
deleted entry node of node1
deleted entry node of node2
deleted entry node of node3
deleted entry node of node4
deleted entry node of node5
deleted entry node of node6
deleted entry node of check
deleted entry node of assert
deleted entry node of assert
