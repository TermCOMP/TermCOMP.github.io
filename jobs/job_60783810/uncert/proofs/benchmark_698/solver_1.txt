YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ANOTB.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 116 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 51 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 11 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/ANOTB.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/ANOTB.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		br %5
	5:
		%6 = load %2
		%7 = icmp sgt %6 1
		br %7, %8, %17
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%9 = load %2
		store %9, %3
		%10 = call i32 (...)* @__VERIFIER_nondet_int()
		store %10, %2
		%11 = load %2
		%12 = mul i32 2, %11
		%13 = load %3
		%14 = icmp sgt %12 %13
		br %14, %15, %16
	15:
		br %17
	16:
		br %5
	17:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_132(v30, v31, v32, v33, v36, 1, v34, v37, 0, v39, v40, v41, 3, 2, 4) -> f_133(v30, v31, v32, v33, v36, 1, v34, v37, 0, v39, v40, v41, 3, 2, 4) :|: 1 < v36 && 4 <= v37 && 4 <= v34
f_133(v30, v31, v32, v33, v36, 1, v34, v37, 0, v39, v40, v41, 3, 2, 4) -> f_135(v30, v31, v32, v33, v36, 1, v34, v37, 0, v39, v40, v41, 3, 2, 4) :|: 0 = 0
f_135(v30, v31, v32, v33, v36, 1, v34, v37, 0, v39, v40, v41, 3, 2, 4) -> f_137(v30, v31, v32, v33, v36, 1, v34, v37, 0, v39, v40, v41, 3, 2, 4) :|: TRUE
f_137(v30, v31, v32, v33, v36, 1, v34, v37, 0, v39, v40, v41, 3, 2, 4) -> f_139(v30, v31, v32, v33, v36, 1, v34, v37, 0, v39, v40, v41, 3, 2, 4) :|: TRUE
f_139(v30, v31, v32, v33, v36, 1, v34, v37, 0, v39, v40, v41, 3, 2, 4) -> f_140(v30, v31, v32, v33, v36, 1, v37, v34, 0, v39, v40, v41, 3, 2, 4) :|: 0 = 0
f_140(v30, v31, v32, v33, v36, 1, v37, v34, 0, v39, v40, v41, 3, 2, 4) -> f_141(v30, v31, v32, v33, v36, 1, v37, v34, 0, v39, v40, v41, 3, 2, 4) :|: TRUE
f_141(v30, v31, v32, v33, v36, 1, v37, v34, 0, v39, v40, v41, 3, 2, 4) -> f_142(v30, v31, v32, v33, v36, 1, v47, v37, v34, 0, v39, v40, v41, 3, 2, 4) :|: TRUE
f_142(v30, v31, v32, v33, v36, 1, v47, v37, v34, 0, v39, v40, v41, 3, 2, 4) -> f_143(v30, v31, v32, v33, v36, 1, v47, v37, v34, 0, v39, v40, v41, 3, 2, 4) :|: TRUE
f_143(v30, v31, v32, v33, v36, 1, v47, v37, v34, 0, v39, v40, v41, 3, 2, 4) -> f_144(v30, v31, v32, v33, v36, 1, v47, v37, v34, 0, v39, v40, v41, 3, 2, 4) :|: 0 = 0
f_144(v30, v31, v32, v33, v36, 1, v47, v37, v34, 0, v39, v40, v41, 3, 2, 4) -> f_145(v30, v31, v32, v33, v36, 1, v47, v49, v34, 0, v39, v40, v41, 3, 2, 4) :|: v49 = 2 * v47
f_145(v30, v31, v32, v33, v36, 1, v47, v49, v34, 0, v39, v40, v41, 3, 2, 4) -> f_146(v30, v31, v32, v33, v36, 1, v47, v49, 0, v39, v40, v41, 3, 2, 4) :|: 0 = 0
f_146(v30, v31, v32, v33, v36, 1, v47, v49, 0, v39, v40, v41, 3, 2, 4) -> f_148(v30, v31, v32, v33, v36, 1, v47, v49, 0, v39, v40, v41, 3, 2, 4) :|: v49 <= v36
f_148(v30, v31, v32, v33, v36, 1, v47, v49, 0, v39, v40, v41, 3, 2, 4) -> f_150(v30, v31, v32, v33, v36, 1, v47, v49, 0, v39, v40, v41, 3, 2, 4) :|: 0 = 0
f_150(v30, v31, v32, v33, v36, 1, v47, v49, 0, v39, v40, v41, 3, 2, 4) -> f_152(v30, v31, v32, v33, v36, 1, v47, v49, 0, v39, v40, v41, 3, 2, 4) :|: TRUE
f_152(v30, v31, v32, v33, v36, 1, v47, v49, 0, v39, v40, v41, 3, 2, 4) -> f_154(v30, v31, v32, v33, v36, 1, v47, v49, 0, v39, v40, v41, 3, 2, 4) :|: TRUE
f_154(v30, v31, v32, v33, v36, 1, v47, v49, 0, v39, v40, v41, 3, 2, 4) -> f_131(v30, v31, v32, v33, v36, 1, v47, v49, 0, v39, v40, v41, 3, 2, 4) :|: TRUE
f_131(v30, v31, v32, v33, v34, 1, v36, v37, 0, v39, v40, v41, 3, 2, 4) -> f_132(v30, v31, v32, v33, v36, 1, v34, v37, 0, v39, v40, v41, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_132(v30:0, v31:0, v32:0, v33:0, v36:0, 1, v34:0, v37:0, 0, v39:0, v40:0, v41:0, 3, 2, 4) -> f_132(v30:0, v31:0, v32:0, v33:0, v47:0, 1, v36:0, 2 * v47:0, 0, v39:0, v40:0, v41:0, 3, 2, 4) :|: v37:0 > 3 && v36:0 > 1 && v36:0 >= 2 * v47:0 && v34:0 > 3
Filtered unneeded arguments:
   f_132(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_132(x5, x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_132(v36:0, v34:0, v37:0) -> f_132(v47:0, v36:0, 2 * v47:0) :|: v36:0 > 1 && v37:0 > 3 && v34:0 > 3 && v36:0 >= 2 * v47:0

----------------------------------------

(8)
Obligation:
Rules:
f_132(v36:0, v34:0, v37:0) -> f_132(v47:0, v36:0, 2 * v47:0) :|: v36:0 > 1 && v37:0 > 3 && v34:0 > 3 && v36:0 >= 2 * v47:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_132(v36:0:0, v34:0:0, v37:0:0) -> f_132(v47:0:0, v36:0:0, 2 * v47:0:0) :|: v34:0:0 > 3 && v36:0:0 >= 2 * v47:0:0 && v37:0:0 > 3 && v36:0:0 > 1

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_132 ] = 1/4*f_132_3 + 1/2*f_132_1

The following rules are decreasing:
f_132(v36:0:0, v34:0:0, v37:0:0) -> f_132(v47:0:0, v36:0:0, 2 * v47:0:0) :|: v34:0:0 > 3 && v36:0:0 >= 2 * v47:0:0 && v37:0:0 > 3 && v36:0:0 > 1

The following rules are bounded:
f_132(v36:0:0, v34:0:0, v37:0:0) -> f_132(v47:0:0, v36:0:0, 2 * v47:0:0) :|: v34:0:0 > 3 && v36:0:0 >= 2 * v47:0:0 && v37:0:0 > 3 && v36:0:0 > 1


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
