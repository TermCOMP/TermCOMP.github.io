YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/eDBlI.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 297 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [EQUIVALENT, 50 ms]
(6) IntTRS
(7) IRSToKoat [EQUIVALENT, 0 ms]
(8) Koat Problem
(9) KoAT2 [EQUIVALENT, 125 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/eDBlI.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/eDBlI.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		%8 = load %3
		%9 = mul i32 2, %8
		%10 = load %4
		%11 = icmp sge %9 %10
		br %11, %12, %28
	12:
		br %13
	13:
		%14 = load %2
		%15 = icmp sge %14 0
		br %15, %16, %19
	16:
		%17 = load %4
		%18 = icmp eq %17 1
		br %19
	19:
		%20 = phi [0, %13], [%18, %16]
		br %20, %21, %27
	21:
		%22 = load %2
		%23 = load %3
		%24 = mul i32 2, %23
		%25 = sub i32 %22, %24
		%26 = add i32 %25, 1
		store %26, %2
		br %13
	27:
		br %28
	28:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 72 rulesP rules:
f_115 -> f_116(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_116(v1, v2, 3, 1, 4) -> f_117(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_117(v1, v3, v2, v4, 3, 1, 4) -> f_118(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_118(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_119(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_119(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_120(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_120(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_121(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_121(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_122(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_122(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_123(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_123(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_124(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_124(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_125(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_125(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_126(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_126(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_127(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_127(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_128(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_128(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_129(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_129(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_130(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 = 0
f_130(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_131(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, 0, 3, 2, 1, 4) :|: v15 = 2 * v11
f_131(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, 0, 3, 2, 1, 4) -> f_132(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, 0, 3, 2, 1, 4) :|: 0 = 0
f_132(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, 0, 3, 2, 1, 4) -> f_133(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, 0, 3, 2, 1, 4) :|: v13 <= v15
f_132(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, 0, 3, 2, 1, 4) -> f_134(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, 0, 3, 2, 1, 4) :|: v15 < v13
f_133(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, 0, 3, 2, 1, 4) -> f_135(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_134(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, 0, 3, 2, 1, 4) -> f_136(v1, v3, v5, v7, v9, v11, v13, v15, 0, v2, v4, v6, v8, 3, 2, 1, 4) :|: 0 = 0
f_135(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) -> f_137(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_136(v1, v3, v5, v7, v9, v11, v13, v15, 0, v2, v4, v6, v8, 3, 2, 1, 4) -> f_138(v1, v3, v5, v7, v9, v11, v13, v15, 0, v2, v4, v6, v8, 3, 2, 1, 4) :|: TRUE
f_137(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) -> f_139(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_139(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) -> f_140(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_140(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) -> f_141(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 <= v9
f_140(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) -> f_142(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) :|: v9 < 0
f_141(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) -> f_143(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_142(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) -> f_144(v1, v3, v5, v7, v9, v11, v13, v15, 1, 0, v2, v4, v6, v8, 3, 2, 4) :|: 0 = 0
f_143(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) -> f_145(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_144(v1, v3, v5, v7, v9, v11, v13, v15, 1, 0, v2, v4, v6, v8, 3, 2, 4) -> f_146(v1, v3, v5, v7, v9, v11, v13, v15, 1, 0, v2, v4, v6, v8, 3, 2, 4) :|: 0 = 0
f_145(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) -> f_147(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_146(v1, v3, v5, v7, v9, v11, v13, v15, 1, 0, v2, v4, v6, v8, 3, 2, 4) -> f_148(v1, v3, v5, v7, v9, v11, v13, v15, 1, 0, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
f_147(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) -> f_149(v1, v3, v5, v7, v9, v11, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: v13 = 1 && 2 <= v15 && 1 <= v11
f_147(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) -> f_150(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) :|: v13 != 1
f_148(v1, v3, v5, v7, v9, v11, v13, v15, 1, 0, v2, v4, v6, v8, 3, 2, 4) -> f_151(v1, v3, v5, v7, v9, v11, v13, v15, 1, 0, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
f_149(v1, v3, v5, v7, v9, v11, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_152(v1, v3, v5, v7, v9, v11, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_150(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, 0, 3, 2, 4) -> f_153(v1, v3, v5, v7, v9, v11, v13, v15, 1, 0, v2, v4, v6, v8, 3, 2, 4) :|: 0 = 0
f_152(v1, v3, v5, v7, v9, v11, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_154(v1, v3, v5, v7, v9, v11, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_153(v1, v3, v5, v7, v9, v11, v13, v15, 1, 0, v2, v4, v6, v8, 3, 2, 4) -> f_155(v1, v3, v5, v7, v9, v11, v13, v15, 1, 0, v2, v4, v6, v8, 3, 2, 4) :|: 0 = 0
f_154(v1, v3, v5, v7, v9, v11, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_156(v1, v3, v5, v7, v9, v11, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_155(v1, v3, v5, v7, v9, v11, v13, v15, 1, 0, v2, v4, v6, v8, 3, 2, 4) -> f_157(v1, v3, v5, v7, v9, v11, v13, v15, 1, 0, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
f_156(v1, v3, v5, v7, v9, v11, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_158(v1, v3, v5, v7, v9, v11, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_157(v1, v3, v5, v7, v9, v11, v13, v15, 1, 0, v2, v4, v6, v8, 3, 2, 4) -> f_159(v1, v3, v5, v7, v9, v11, v13, v15, 1, 0, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
f_158(v1, v3, v5, v7, v9, v11, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_160(v1, v3, v5, v7, v9, v11, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_160(v1, v3, v5, v7, v9, v11, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_161(v1, v3, v5, v7, v9, v11, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: v15 = 2 * v11
f_161(v1, v3, v5, v7, v9, v11, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_162(v1, v3, v5, v7, v9, v11, 1, v15, v25, v2, v4, v6, v8, 0, 3, 2, 4) :|: v25 + v15 = v9
f_162(v1, v3, v5, v7, v9, v11, 1, v15, v25, v2, v4, v6, v8, 0, 3, 2, 4) -> f_163(v1, v3, v5, v7, v9, v11, 1, v15, v25, v26, v2, v4, v6, v8, 0, 3, 2, 4) :|: v26 = 1 + v25
f_163(v1, v3, v5, v7, v9, v11, 1, v15, v25, v26, v2, v4, v6, v8, 0, 3, 2, 4) -> f_164(v1, v3, v5, v7, v9, v11, 1, v15, v25, v26, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_164(v1, v3, v5, v7, v9, v11, 1, v15, v25, v26, v2, v4, v6, v8, 0, 3, 2, 4) -> f_165(v1, v3, v5, v7, v9, v11, 1, v15, v25, v26, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_165(v1, v3, v5, v7, v9, v11, 1, v15, v25, v26, v2, v4, v6, v8, 0, 3, 2, 4) -> f_186(v1, v3, v5, v7, v9, v11, 1, v15, v9, v25, v26, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_186(v100, v101, v102, v103, v104, v105, 1, v107, v108, v109, v110, v111, v112, v113, v114, 0, 3, 2, 4) -> f_187(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) :|: 0 = 0
f_187(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) -> f_188(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) :|: 0 <= v110 && 0 <= 1 + v109 && 1 <= v108
f_187(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) -> f_189(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) :|: v110 < 0 && 2 + v109 <= 0
f_188(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) -> f_190(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) :|: 0 = 0
f_189(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) -> f_191(v100, v101, v102, v103, v104, v105, 1, v107, v110, 0, v108, v109, v111, v112, v113, v114, 3, 2, 4) :|: 0 = 0
f_190(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) -> f_192(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) :|: TRUE
f_191(v100, v101, v102, v103, v104, v105, 1, v107, v110, 0, v108, v109, v111, v112, v113, v114, 3, 2, 4) -> f_193(v100, v101, v102, v103, v104, v105, 1, v107, v110, 0, v108, v109, v111, v112, v113, v114, 3, 2, 4) :|: 0 = 0
f_192(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) -> f_194(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) :|: 0 = 0
f_193(v100, v101, v102, v103, v104, v105, 1, v107, v110, 0, v108, v109, v111, v112, v113, v114, 3, 2, 4) -> f_195(v100, v101, v102, v103, v104, v105, 1, v107, v110, 0, v108, v109, v111, v112, v113, v114, 3, 2, 4) :|: TRUE
f_194(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) -> f_196(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) :|: 0 = 0
f_195(v100, v101, v102, v103, v104, v105, 1, v107, v110, 0, v108, v109, v111, v112, v113, v114, 3, 2, 4) -> f_197(v100, v101, v102, v103, v104, v105, 1, v107, v110, 0, v108, v109, v111, v112, v113, v114, 3, 2, 4) :|: TRUE
f_196(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) -> f_198(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) :|: 0 = 0
f_198(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) -> f_199(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) :|: TRUE
f_199(v100, v101, v102, v103, v104, v105, 1, v107, v110, v108, v109, v111, v112, v113, v114, 0, 3, 2, 4) -> f_200(v100, v101, v102, v103, v104, v105, 1, v107, v110, v109, v111, v112, v113, v114, 0, 3, 2, 4) :|: 0 = 0
f_200(v100, v101, v102, v103, v104, v105, 1, v107, v110, v109, v111, v112, v113, v114, 0, 3, 2, 4) -> f_201(v100, v101, v102, v103, v104, v105, 1, v107, v110, v109, v111, v112, v113, v114, 0, 3, 2, 4) :|: 0 = 0
f_201(v100, v101, v102, v103, v104, v105, 1, v107, v110, v109, v111, v112, v113, v114, 0, 3, 2, 4) -> f_202(v100, v101, v102, v103, v104, v105, 1, v107, v110, v109, v111, v112, v113, v114, 0, 3, 2, 4) :|: v107 = 2 * v105
f_202(v100, v101, v102, v103, v104, v105, 1, v107, v110, v109, v111, v112, v113, v114, 0, 3, 2, 4) -> f_203(v100, v101, v102, v103, v104, v105, 1, v107, v110, v182, v111, v112, v113, v114, 0, 3, 2, 4) :|: v182 + v107 = v110
f_203(v100, v101, v102, v103, v104, v105, 1, v107, v110, v182, v111, v112, v113, v114, 0, 3, 2, 4) -> f_204(v100, v101, v102, v103, v104, v105, 1, v107, v110, v182, v183, v111, v112, v113, v114, 0, 3, 2, 4) :|: v183 = 1 + v182
f_204(v100, v101, v102, v103, v104, v105, 1, v107, v110, v182, v183, v111, v112, v113, v114, 0, 3, 2, 4) -> f_205(v100, v101, v102, v103, v104, v105, 1, v107, v110, v182, v183, v111, v112, v113, v114, 0, 3, 2, 4) :|: TRUE
f_205(v100, v101, v102, v103, v104, v105, 1, v107, v110, v182, v183, v111, v112, v113, v114, 0, 3, 2, 4) -> f_206(v100, v101, v102, v103, v104, v105, 1, v107, v110, v182, v183, v111, v112, v113, v114, 0, 3, 2, 4) :|: TRUE
f_206(v100, v101, v102, v103, v104, v105, 1, v107, v110, v182, v183, v111, v112, v113, v114, 0, 3, 2, 4) -> f_186(v100, v101, v102, v103, v104, v105, 1, v107, v110, v182, v183, v111, v112, v113, v114, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 7 rulesP rules:
f_187(v100:0, v101:0, v102:0, v103:0, v104:0, v105:0, 1, v107:0, v110:0, v108:0, v109:0, v111:0, v112:0, v113:0, v114:0, 0, 3, 2, 4) -> f_197(v100:0, v101:0, v102:0, v103:0, v104:0, v105:0, 1, v107:0, v110:0, 0, v108:0, v109:0, v111:0, v112:0, v113:0, v114:0, 3, 2, 4) :|: v110:0 < 0 && v109:0 < -1
f_115 -> f_151(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 2 * v11:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 < 0 && v13:0 <= 2 * v11:0
f_115 -> f_138(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 2 * v11:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 2, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v13:0 > 2 * v11:0
f_115 -> f_187(v1:0, v3:0, v5:0, v7:0, v25:0 + 2 * v11:0, v11:0, 1, 2 * v11:0, 1 + v25:0, v25:0 + 2 * v11:0, v25:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 0, 3, 2, 4) :|: 2 * v11:0 > 1 && v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v11:0 > 0 && v25:0 + 2 * v11:0 > -1
f_115 -> f_159(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 2 * v11:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v13:0 <= 2 * v11:0 && v13:0 < 1 && v9:0 > -1
f_115 -> f_159(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 2 * v11:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v13:0 <= 2 * v11:0 && v13:0 > 1 && v9:0 > -1
f_187(v100:0, v101:0, v102:0, v103:0, v104:0, v105:0, 1, 2 * v105:0, v182:0 + 2 * v105:0, v108:0, v109:0, v111:0, v112:0, v113:0, v114:0, 0, 3, 2, 4) -> f_187(v100:0, v101:0, v102:0, v103:0, v104:0, v105:0, 1, 2 * v105:0, 1 + v182:0, v182:0 + 2 * v105:0, v182:0, v111:0, v112:0, v113:0, v114:0, 0, 3, 2, 4) :|: v109:0 > -2 && v108:0 > 0 && v182:0 + 2 * v105:0 > -1
Filtered unneeded arguments:
   f_187(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_187(x6, x8, x9, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 7 rules.P rules:
f_187(v105:0, v107:0, v110:0, v108:0, v109:0) -> f_197(v100:0, v101:0, v102:0, v103:0, v104:0, v105:0, 1, v107:0, v110:0, 0, v108:0, v109:0, v111:0, v112:0, v113:0, v114:0, 3, 2, 4) :|: v110:0 < 0 && v109:0 < -1
f_115 -> f_151(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 2 * v11:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 2, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v7:0 > 0 && v13:0 <= 2 * v11:0 && v9:0 < 0
f_115 -> f_138(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 2 * v11:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 2, 1, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v13:0 > 2 * v11:0 && v7:0 > 0
f_115 -> f_187(v11:0, 2 * v11:0, 1 + v25:0, v25:0 + 2 * v11:0, v25:0) :|: v11:0 > 0 && v25:0 + 2 * v11:0 > -1 && 2 * v11:0 > 1
f_115 -> f_159(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 2 * v11:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 2, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v7:0 > 0 && v13:0 <= 2 * v11:0 && v9:0 > -1 && v13:0 < 1
f_115 -> f_159(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 2 * v11:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 2, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v7:0 > 0 && v13:0 <= 2 * v11:0 && v9:0 > -1 && v13:0 > 1
f_187(v105:0, times~cons_2~v105:0, sum~v182:0~times~cons_2~v105:0, v108:0, v109:0) -> f_187(v105:0, 2 * v105:0, 1 + v182:0, v182:0 + 2 * v105:0, v182:0) :|: v108:0 > 0 && v182:0 + 2 * v105:0 > -1 && v109:0 > -2 && times~cons_2~v105:0 = 2 * v105:0 && sum~v182:0~times~cons_2~v105:0 = v182:0 + 2 * v105:0

----------------------------------------

(6)
Obligation:
Rules:
f_187(v105:0, v107:0, v110:0, v108:0, v109:0) -> f_197(v100:0, v101:0, v102:0, v103:0, v104:0, v105:0, 1, v107:0, v110:0, 0, v108:0, v109:0, v111:0, v112:0, v113:0, v114:0, 3, 2, 4) :|: v110:0 < 0 && v109:0 < -1
f_115 -> f_151(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 2 * v11:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 2, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v7:0 > 0 && v13:0 <= 2 * v11:0 && v9:0 < 0
f_115 -> f_138(x, x1, x2, x3, x4, x5, x6, 2 * x5, 0, 3 + x, 3 + x1, 3 + x2, 3 + x3, 3, 2, 1, 4) :|: x > 0 && x1 > 0 && x2 > 0 && x6 > 2 * x5 && x3 > 0
f_115 -> f_187(x7, 2 * x7, 1 + x8, x8 + 2 * x7, x8) :|: x7 > 0 && x8 + 2 * x7 > -1 && 2 * x7 > 1
f_115 -> f_159(x9, x10, x11, x12, x13, x14, x15, 2 * x14, 1, 0, 3 + x9, 3 + x10, 3 + x11, 3 + x12, 3, 2, 4) :|: x9 > 0 && x10 > 0 && x11 > 0 && x12 > 0 && x15 <= 2 * x14 && x13 > -1 && x15 < 1
f_115 -> f_159(x16, x17, x18, x19, x20, x21, x22, 2 * x21, 1, 0, 3 + x16, 3 + x17, 3 + x18, 3 + x19, 3, 2, 4) :|: x16 > 0 && x17 > 0 && x18 > 0 && x19 > 0 && x22 <= 2 * x21 && x20 > -1 && x22 > 1
f_187(x23, x24, x25, x26, x27) -> f_187(x23, 2 * x23, 1 + x28, x28 + 2 * x23, x28) :|: x26 > 0 && x28 + 2 * x23 > -1 && x27 > -2 && x24 = 2 * x23 && x25 = x28 + 2 * x23
Start term: f_115

----------------------------------------

(7) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(8)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_115))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x40 x41 x39 x151 x150 x35 x153 x36 x152 x37 x155 x38 x154 x31 x32 x156 x33 x34 x30 x70 x140 x68 x142 x69 x141 x144 x143 x64 x146 x65 x145 x66 x148 x67 x147 x60 x61 x149 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x131 x58 x130 x59 x133 x132 x53 x135 x54 x134 x55 x137 x56 x136 x139 x50 x138 x51 x52 x90 x91 x92 x86 x87 x88 x89 x82 x83 x84 x85 x80 x81 x79 x75 x76 x'' x77 x78 x71 x72 x73 x74 k14 k15 k16 k17 k10 k11 k12 k13 x97 x98 x99 x93 x94 x95 x96 k36 k37 k38 k39 k32 k33 k34 k35 k30 k31 k29 k25 k26 k27 k28 k21 k22 k23 k24 k20 k18 k19 k47 k48 k49 k43 k44 k45 k46 k40 k41 k42 x120 x122 x121 x124 x123 x126 x125 x x128 x127 x129 x111 x110 x113 x112 x115 x114 x117 x116 x119 x118 x109 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x7 x27 x20 x102 x21 x101 x22 x104 x23 x103 x106 x1 x105 x108 x107 x' x17 x18 x19 x13 x14 x15 x16 x10 x11 x12)
(RULES
  f_115(x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99, x100) -> f_159(k42, k35, k36, k37, k27, k28, k29, 2 * k28, 1, 0, 3 + k42, 3 + k35, 3 + k36, 3 + k37, 3, 2, 4, x101, x102) :|: k42 > 0 && k35 > 0 && k36 > 0 && k37 > 0 && k29 <= 2 * k28 && k27 > -1 && k29 > 1
  f_115(x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_151(k34, k12, k15, k19, k24, k5, k6, 2 * k5, 1, 0, 3 + k34, 3 + k12, 3 + k15, 3 + k19, 3, 2, 4, x17, x18) :|: k34 > 0 && k12 > 0 && k15 > 0 && k19 > 0 && k6 <= 2 * k5 && k24 < 0
  f_187(k46, k43, k33, k7, k41, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81) -> f_197(k0, k49, k9, k48, k8, k46, 1, k43, k33, 0, k7, k41, k4, k3, k32, k2, 3, 2, 4) :|: k33 < 0 && k41 < -1
  f_115(x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37) -> f_159(k20, k44, k45, k47, k38, k39, k40, 2 * k39, 1, 0, 3 + k20, 3 + k44, 3 + k45, 3 + k47, 3, 2, 4, x38, x39) :|: k20 > 0 && k44 > 0 && k45 > 0 && k47 > 0 && k40 <= 2 * k39 && k38 > -1 && k40 < 1
  f_115(x124, x125, x126, x127, x128, x129, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x140, x141, x142) -> f_187(k25, 2 * k25, 1 + k17, k17 + 2 * k25, k17, x143, x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, x154, x155, x156) :|: k25 > 0 && k17 + 2 * k25 > -1 && 2 * k25 > 1
  f_187(k30, k18, k21, k23, k26, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53) -> f_187(k30, 2 * k30, 1 + k11, k11 + 2 * k30, k11, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67) :|: k23 > 0 && k11 + 2 * k30 > -1 && k26 > -2 && k18 = 2 * k30 && k21 = k11 + 2 * k30
  f_115(x103, x104, x105, x106, x107, x108, x109, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x120, x121) -> f_138(k1, k31, k14, k16, k10, k13, k22, 2 * k13, 0, 3 + k1, 3 + k31, 3 + k14, 3 + k16, 3, 2, 1, 4, x122, x123) :|: k1 > 0 && k31 > 0 && k14 > 0 && k22 > 2 * k13 && k16 > 0
)

----------------------------------------

(9) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_10689044435769465718.koat 

KoAT2's output was:

YES

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
