YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Q4Kus.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 476 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 46 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 11 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Q4Kus.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Q4Kus.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		store 0, %2
		br %7
	7:
		%8 = load %3
		%9 = load %4
		%10 = icmp eq %8 %9
		br %10, %11, %14
	11:
		%12 = load %3
		%13 = icmp sgt %12 0
		br %14
	14:
		%15 = phi [0, %7], [%13, %11]
		br %15, %16, %28
	16:
		br %17
	17:
		%18 = load %4
		%19 = icmp sgt %18 0
		br %19, %20, %27
	20:
		%21 = load %3
		%22 = sub i32 %21, 1
		store %22, %3
		%23 = load %4
		%24 = sub i32 %23, 1
		store %24, %4
		%25 = load %2
		%26 = add i32 %25, 1
		store %26, %2
		br %17
	27:
		br %7
	28:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_303(v174, v175, v176, v177, v178, 1, v181, v180, v182, v183, v184, v185, v186, v187, 0, 3, 4) -> f_304(v174, v175, v176, v177, v178, 1, v181, v180, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) :|: 0 < v181 && 2 <= v180 && 2 <= v178
f_304(v174, v175, v176, v177, v178, 1, v181, v180, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) -> f_306(v174, v175, v176, v177, v178, 1, v181, v180, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) :|: 0 = 0
f_306(v174, v175, v176, v177, v178, 1, v181, v180, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) -> f_308(v174, v175, v176, v177, v178, 1, v181, v180, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) :|: TRUE
f_308(v174, v175, v176, v177, v178, 1, v181, v180, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) -> f_310(v174, v175, v176, v177, v178, 1, v181, v180, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) :|: 0 = 0
f_310(v174, v175, v176, v177, v178, 1, v181, v180, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) -> f_312(v174, v175, v176, v177, v178, 1, v181, v189, v180, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) :|: 1 + v189 = v181 && 0 <= v189
f_312(v174, v175, v176, v177, v178, 1, v181, v189, v180, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) -> f_314(v174, v175, v176, v177, v178, 1, v181, v189, v180, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) :|: TRUE
f_314(v174, v175, v176, v177, v178, 1, v181, v189, v180, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) -> f_316(v174, v175, v176, v177, v178, 1, v181, v189, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) :|: 0 = 0
f_316(v174, v175, v176, v177, v178, 1, v181, v189, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) -> f_318(v174, v175, v176, v177, v178, 1, v181, v189, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) :|: 1 + v189 = v181
f_318(v174, v175, v176, v177, v178, 1, v181, v189, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) -> f_320(v174, v175, v176, v177, v178, 1, v181, v189, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) :|: TRUE
f_320(v174, v175, v176, v177, v178, 1, v181, v189, v182, v183, v184, v185, v186, v187, 0, 3, 2, 4) -> f_322(v174, v175, v176, v177, v178, 1, v181, v189, v183, v184, v185, v186, v187, 0, 3, 2, 4) :|: 0 = 0
f_322(v174, v175, v176, v177, v178, 1, v181, v189, v183, v184, v185, v186, v187, 0, 3, 2, 4) -> f_324(v174, v175, v176, v177, v178, 1, v181, v189, v183, v192, v184, v185, v186, v187, 0, 3, 2, 4) :|: v192 = 1 + v183 && 2 <= v192
f_324(v174, v175, v176, v177, v178, 1, v181, v189, v183, v192, v184, v185, v186, v187, 0, 3, 2, 4) -> f_326(v174, v175, v176, v177, v178, 1, v181, v189, v183, v192, v184, v185, v186, v187, 0, 3, 2, 4) :|: TRUE
f_326(v174, v175, v176, v177, v178, 1, v181, v189, v183, v192, v184, v185, v186, v187, 0, 3, 2, 4) -> f_328(v174, v175, v176, v177, v178, 1, v181, v189, v183, v192, v184, v185, v186, v187, 0, 3, 2, 4) :|: TRUE
f_328(v174, v175, v176, v177, v178, 1, v181, v189, v183, v192, v184, v185, v186, v187, 0, 3, 2, 4) -> f_302(v174, v175, v176, v177, v178, 1, v181, v189, v183, v192, v184, v185, v186, v187, 0, 3, 4) :|: TRUE
f_302(v174, v175, v176, v177, v178, 1, v180, v181, v182, v183, v184, v185, v186, v187, 0, 3, 4) -> f_303(v174, v175, v176, v177, v178, 1, v181, v180, v182, v183, v184, v185, v186, v187, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_303(v174:0, v175:0, v176:0, v177:0, v178:0, 1, 1 + v189:0, v180:0, v182:0, v183:0, v184:0, v185:0, v186:0, v187:0, 0, 3, 4) -> f_303(v174:0, v175:0, v176:0, v177:0, v178:0, 1, v189:0, 1 + v189:0, v183:0, 1 + v183:0, v184:0, v185:0, v186:0, v187:0, 0, 3, 4) :|: v180:0 > 1 && v189:0 > -1 && v178:0 > 1 && v183:0 > 0
Filtered unneeded arguments:
   f_303(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_303(x5, x7, x8, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_303(v178:0, sum~cons_1~v189:0, v180:0, v183:0) -> f_303(v178:0, v189:0, 1 + v189:0, 1 + v183:0) :|: v189:0 > -1 && v180:0 > 1 && v183:0 > 0 && v178:0 > 1 && sum~cons_1~v189:0 = 1 + v189:0

----------------------------------------

(8)
Obligation:
Rules:
f_303(v178:0, sum~cons_1~v189:0, v180:0, v183:0) -> f_303(v178:0, v189:0, 1 + v189:0, 1 + v183:0) :|: v189:0 > -1 && v180:0 > 1 && v183:0 > 0 && v178:0 > 1 && sum~cons_1~v189:0 = 1 + v189:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_303(v178:0:0, sum~cons_1~v189:0:0, v180:0:0, v183:0:0) -> f_303(v178:0:0, v189:0:0, 1 + v189:0:0, 1 + v183:0:0) :|: v183:0:0 > 0 && v178:0:0 > 1 && v180:0:0 > 1 && v189:0:0 > -1 && sum~cons_1~v189:0:0 = 1 + v189:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_303(x, x1, x2, x3)] = -1 + x1

The following rules are decreasing:
f_303(v178:0:0, sum~cons_1~v189:0:0, v180:0:0, v183:0:0) -> f_303(v178:0:0, v189:0:0, 1 + v189:0:0, 1 + v183:0:0) :|: v183:0:0 > 0 && v178:0:0 > 1 && v180:0:0 > 1 && v189:0:0 > -1 && sum~cons_1~v189:0:0 = 1 + v189:0:0
The following rules are bounded:
f_303(v178:0:0, sum~cons_1~v189:0:0, v180:0:0, v183:0:0) -> f_303(v178:0:0, v189:0:0, 1 + v189:0:0, 1 + v183:0:0) :|: v183:0:0 > 0 && v178:0:0 > 1 && v180:0:0 > 1 && v189:0:0 > -1 && sum~cons_1~v189:0:0 = 1 + v189:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
