MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/0pKlx.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 82 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/0pKlx.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/0pKlx.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: I_0_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: I_1_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: I_2_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: pc_0_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: pc_1_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: pc_2_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: tupleStart_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: tupleStart_1 initVal: 1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: tupleEnd_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: tupleEnd_1 initVal: 1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: Hin_0_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hin_0_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hin_1_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hin_1_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hin_2_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hin_2_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hout_0_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hout_0_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hout_1_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hout_1_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hout_2_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hout_2_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HinCnt_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HinCnt_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HinCnt_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HoutCnt_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HoutCnt_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HoutCnt_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __LABS_time initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Lvalue_0_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Lvalue_0_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Lvalue_1_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Lvalue_1_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Lvalue_2_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Lvalue_2_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Ltstamp_0_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Ltstamp_0_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Ltstamp_1_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Ltstamp_1_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Ltstamp_2_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Ltstamp_2_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "exit" returnParam: BasicVoidType parameters: (i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 100
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		Unnamed Call-Instruction = call BasicVoidType @exit(i32 0)
		unreachable
	6:
		ret void

*BasicFunctionTypename: "__abs" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 111
	0:
		%2 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%3 = load %2
		%4 = sext i8 %3 to i32
		%5 = icmp sgt %4 0
		br %5, %6, %9
	6:
		%7 = load %2
		%8 = sext i8 %7 to i32
		br %13
	9:
		%10 = load %2
		%11 = sext i8 %10 to i32
		%12 = sub i32 0, %11
		br %13
	13:
		%14 = phi [%8, %6], [%12, %9]
		%15 = trunc i32 %14 to i8
		ret %15

*BasicFunctionTypename: "getI" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i8 zeroext, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 124
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = zext i8 %6 to i32
		switch %7, %14 [0, %8 1, %10 2, %12]
	8:
		%9 = load @I_0_0
		store %9, %3
		br %15
	10:
		%11 = load @I_1_0
		store %11, %3
		br %15
	12:
		%13 = load @I_2_0
		store %13, %3
		br %15
	14:
		br %15
	15:
		%16 = load %3
		ret %16

*BasicFunctionTypename: "getpc" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i8 zeroext, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 143
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = zext i8 %6 to i32
		switch %7, %14 [0, %8 1, %10 2, %12]
	8:
		%9 = load @pc_0_0
		store %9, %3
		br %15
	10:
		%11 = load @pc_1_0
		store %11, %3
		br %15
	12:
		%13 = load @pc_2_0
		store %13, %3
		br %15
	14:
		br %15
	15:
		%16 = load %3
		ret %16

*BasicFunctionTypename: "setpc" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i32, 2 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 159
	0:
		%4 = alloca i8, align 1
		%5 = alloca i32, align 4
		%6 = alloca i8, align 1
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%7 = load %4
		%8 = zext i8 %7 to i32
		switch %8, %15 [0, %9 1, %11 2, %13]
	9:
		%10 = load %6
		store %10, @pc_0_0
		br %16
	11:
		%12 = load %6
		store %12, @pc_1_0
		br %16
	13:
		%14 = load %6
		store %14, @pc_2_0
		br %16
	15:
		br %16
	16:
		ret void

*BasicFunctionTypename: "getHin" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 182
	0:
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		switch %6, %49 [0, %7 1, %21 2, %35]
	7:
		%8 = load %5
		%9 = icmp eq %8 0
		br %9, %10, %14
	10:
		%11 = load @Hin_0_0
		%12 = trunc i8 %11 to i1
		%13 = zext i1 %12 to i32
		br %18
	14:
		%15 = load @Hin_0_1
		%16 = trunc i8 %15 to i1
		%17 = zext i1 %16 to i32
		br %18
	18:
		%19 = phi [%13, %10], [%17, %14]
		%20 = trunc i32 %19 to i8
		store %20, %3
		br %50
	21:
		%22 = load %5
		%23 = icmp eq %22 0
		br %23, %24, %28
	24:
		%25 = load @Hin_1_0
		%26 = trunc i8 %25 to i1
		%27 = zext i1 %26 to i32
		br %32
	28:
		%29 = load @Hin_1_1
		%30 = trunc i8 %29 to i1
		%31 = zext i1 %30 to i32
		br %32
	32:
		%33 = phi [%27, %24], [%31, %28]
		%34 = trunc i32 %33 to i8
		store %34, %3
		br %50
	35:
		%36 = load %5
		%37 = icmp eq %36 0
		br %37, %38, %42
	38:
		%39 = load @Hin_2_0
		%40 = trunc i8 %39 to i1
		%41 = zext i1 %40 to i32
		br %46
	42:
		%43 = load @Hin_2_1
		%44 = trunc i8 %43 to i1
		%45 = zext i1 %44 to i32
		br %46
	46:
		%47 = phi [%41, %38], [%45, %42]
		%48 = trunc i32 %47 to i8
		store %48, %3
		br %50
	49:
		br %50
	50:
		%51 = load %3
		ret %51

*BasicFunctionTypename: "getHout" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 218
	0:
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		switch %6, %49 [0, %7 1, %21 2, %35]
	7:
		%8 = load %5
		%9 = icmp eq %8 0
		br %9, %10, %14
	10:
		%11 = load @Hout_0_0
		%12 = trunc i8 %11 to i1
		%13 = zext i1 %12 to i32
		br %18
	14:
		%15 = load @Hout_0_1
		%16 = trunc i8 %15 to i1
		%17 = zext i1 %16 to i32
		br %18
	18:
		%19 = phi [%13, %10], [%17, %14]
		%20 = trunc i32 %19 to i8
		store %20, %3
		br %50
	21:
		%22 = load %5
		%23 = icmp eq %22 0
		br %23, %24, %28
	24:
		%25 = load @Hout_1_0
		%26 = trunc i8 %25 to i1
		%27 = zext i1 %26 to i32
		br %32
	28:
		%29 = load @Hout_1_1
		%30 = trunc i8 %29 to i1
		%31 = zext i1 %30 to i32
		br %32
	32:
		%33 = phi [%27, %24], [%31, %28]
		%34 = trunc i32 %33 to i8
		store %34, %3
		br %50
	35:
		%36 = load %5
		%37 = icmp eq %36 0
		br %37, %38, %42
	38:
		%39 = load @Hout_2_0
		%40 = trunc i8 %39 to i1
		%41 = zext i1 %40 to i32
		br %46
	42:
		%43 = load @Hout_2_1
		%44 = trunc i8 %43 to i1
		%45 = zext i1 %44 to i32
		br %46
	46:
		%47 = phi [%41, %38], [%45, %42]
		%48 = trunc i32 %47 to i8
		store %48, %3
		br %50
	49:
		br %50
	50:
		%51 = load %3
		ret %51

*BasicFunctionTypename: "getHinCnt" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 252
	0:
		%2 = alloca i8, align 1
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		switch %4, %11 [0, %5 1, %7 2, %9]
	5:
		%6 = load @HinCnt_0
		store %6, %2
		br %12
	7:
		%8 = load @HinCnt_1
		store %8, %2
		br %12
	9:
		%10 = load @HinCnt_2
		store %10, %2
		br %12
	11:
		br %12
	12:
		%13 = load %2
		ret %13

*BasicFunctionTypename: "setHinCnt" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 268
	0:
		%3 = alloca i32, align 4
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		switch %5, %12 [0, %6 1, %8 2, %10]
	6:
		%7 = load %4
		store %7, @HinCnt_0
		br %13
	8:
		%9 = load %4
		store %9, @HinCnt_1
		br %13
	10:
		%11 = load %4
		store %11, @HinCnt_2
		br %13
	12:
		br %13
	13:
		ret void

*BasicFunctionTypename: "getHoutCnt" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 289
	0:
		%2 = alloca i8, align 1
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		switch %4, %11 [0, %5 1, %7 2, %9]
	5:
		%6 = load @HoutCnt_0
		store %6, %2
		br %12
	7:
		%8 = load @HoutCnt_1
		store %8, %2
		br %12
	9:
		%10 = load @HoutCnt_2
		store %10, %2
		br %12
	11:
		br %12
	12:
		%13 = load %2
		ret %13

*BasicFunctionTypename: "setHoutCnt" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 305
	0:
		%3 = alloca i32, align 4
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		switch %5, %12 [0, %6 1, %8 2, %10]
	6:
		%7 = load %4
		store %7, @HoutCnt_0
		br %13
	8:
		%9 = load %4
		store %9, @HoutCnt_1
		br %13
	10:
		%11 = load %4
		store %11, @HoutCnt_2
		br %13
	12:
		br %13
	13:
		ret void

*BasicFunctionTypename: "setHin" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 324
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %4
		%6 = zext i8 %5 to i32
		%7 = icmp eq %6 0
		br %7, %8, %23
	8:
		%9 = load %3
		%10 = zext i8 %9 to i32
		%11 = load %3
		%12 = zext i8 %11 to i32
		%13 = call signext i8 @getHinCnt(i32 %12)
		%14 = sext i8 %13 to i32
		%15 = load %3
		%16 = zext i8 %15 to i32
		%17 = call signext i8 @getHin(i32 %16, i32 0)
		%18 = icmp ne %17 0
		%19 = xor i1 %18, 1
		%20 = zext i1 %19 to i32
		%21 = add i32 %14, %20
		%22 = trunc i32 %21 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHinCnt(i32 %10, i8 zeroext %22)
		br %38
	23:
		%24 = load %3
		%25 = zext i8 %24 to i32
		%26 = load %3
		%27 = zext i8 %26 to i32
		%28 = call signext i8 @getHinCnt(i32 %27)
		%29 = sext i8 %28 to i32
		%30 = load %3
		%31 = zext i8 %30 to i32
		%32 = call signext i8 @getHin(i32 %31, i32 1)
		%33 = icmp ne %32 0
		%34 = xor i1 %33, 1
		%35 = zext i1 %34 to i32
		%36 = add i32 %29, %35
		%37 = trunc i32 %36 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHinCnt(i32 %25, i8 zeroext %37)
		br %38
	38:
		%39 = load %3
		%40 = zext i8 %39 to i32
		switch %40, %59 [0, %41 1, %47 2, %53]
	41:
		%42 = load %4
		%43 = zext i8 %42 to i32
		switch %43, %46 [0, %44 1, %45]
	44:
		store 1, @Hin_0_0
		br %46
	45:
		store 1, @Hin_0_1
		br %46
	46:
		br %60
	47:
		%48 = load %4
		%49 = zext i8 %48 to i32
		switch %49, %52 [0, %50 1, %51]
	50:
		store 1, @Hin_1_0
		br %52
	51:
		store 1, @Hin_1_1
		br %52
	52:
		br %60
	53:
		%54 = load %4
		%55 = zext i8 %54 to i32
		switch %55, %58 [0, %56 1, %57]
	56:
		store 1, @Hin_2_0
		br %58
	57:
		store 1, @Hin_2_1
		br %58
	58:
		br %60
	59:
		br %60
	60:
		ret void

*BasicFunctionTypename: "clearHin" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 380
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %4
		%6 = zext i8 %5 to i32
		%7 = icmp eq %6 0
		br %7, %8, %21
	8:
		%9 = load %3
		%10 = zext i8 %9 to i32
		%11 = load %3
		%12 = zext i8 %11 to i32
		%13 = call signext i8 @getHinCnt(i32 %12)
		%14 = sext i8 %13 to i32
		%15 = load %3
		%16 = zext i8 %15 to i32
		%17 = call signext i8 @getHin(i32 %16, i32 0)
		%18 = sext i8 %17 to i32
		%19 = sub i32 %14, %18
		%20 = trunc i32 %19 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHinCnt(i32 %10, i8 zeroext %20)
		br %34
	21:
		%22 = load %3
		%23 = zext i8 %22 to i32
		%24 = load %3
		%25 = zext i8 %24 to i32
		%26 = call signext i8 @getHinCnt(i32 %25)
		%27 = sext i8 %26 to i32
		%28 = load %3
		%29 = zext i8 %28 to i32
		%30 = call signext i8 @getHin(i32 %29, i32 1)
		%31 = sext i8 %30 to i32
		%32 = sub i32 %27, %31
		%33 = trunc i32 %32 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHinCnt(i32 %23, i8 zeroext %33)
		br %34
	34:
		%35 = load %3
		%36 = zext i8 %35 to i32
		switch %36, %55 [0, %37 1, %43 2, %49]
	37:
		%38 = load %4
		%39 = zext i8 %38 to i32
		switch %39, %42 [0, %40 1, %41]
	40:
		store 0, @Hin_0_0
		br %42
	41:
		store 0, @Hin_0_1
		br %42
	42:
		br %56
	43:
		%44 = load %4
		%45 = zext i8 %44 to i32
		switch %45, %48 [0, %46 1, %47]
	46:
		store 0, @Hin_1_0
		br %48
	47:
		store 0, @Hin_1_1
		br %48
	48:
		br %56
	49:
		%50 = load %4
		%51 = zext i8 %50 to i32
		switch %51, %54 [0, %52 1, %53]
	52:
		store 0, @Hin_2_0
		br %54
	53:
		store 0, @Hin_2_1
		br %54
	54:
		br %56
	55:
		br %56
	56:
		ret void

*BasicFunctionTypename: "setHout" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 432
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %4
		%6 = zext i8 %5 to i32
		%7 = icmp eq %6 0
		br %7, %8, %23
	8:
		%9 = load %3
		%10 = zext i8 %9 to i32
		%11 = load %3
		%12 = zext i8 %11 to i32
		%13 = call zeroext i8 @getHoutCnt(i32 %12)
		%14 = zext i8 %13 to i32
		%15 = load %3
		%16 = zext i8 %15 to i32
		%17 = call signext i8 @getHout(i32 %16, i32 0)
		%18 = icmp ne %17 0
		%19 = xor i1 %18, 1
		%20 = zext i1 %19 to i32
		%21 = add i32 %14, %20
		%22 = trunc i32 %21 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHoutCnt(i32 %10, i8 zeroext %22)
		br %38
	23:
		%24 = load %3
		%25 = zext i8 %24 to i32
		%26 = load %3
		%27 = zext i8 %26 to i32
		%28 = call zeroext i8 @getHoutCnt(i32 %27)
		%29 = zext i8 %28 to i32
		%30 = load %3
		%31 = zext i8 %30 to i32
		%32 = call signext i8 @getHout(i32 %31, i32 1)
		%33 = icmp ne %32 0
		%34 = xor i1 %33, 1
		%35 = zext i1 %34 to i32
		%36 = add i32 %29, %35
		%37 = trunc i32 %36 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHoutCnt(i32 %25, i8 zeroext %37)
		br %38
	38:
		%39 = load %3
		%40 = zext i8 %39 to i32
		switch %40, %59 [0, %41 1, %47 2, %53]
	41:
		%42 = load %4
		%43 = zext i8 %42 to i32
		switch %43, %46 [0, %44 1, %45]
	44:
		store 1, @Hout_0_0
		br %46
	45:
		store 1, @Hout_0_1
		br %46
	46:
		br %60
	47:
		%48 = load %4
		%49 = zext i8 %48 to i32
		switch %49, %52 [0, %50 1, %51]
	50:
		store 1, @Hout_1_0
		br %52
	51:
		store 1, @Hout_1_1
		br %52
	52:
		br %60
	53:
		%54 = load %4
		%55 = zext i8 %54 to i32
		switch %55, %58 [0, %56 1, %57]
	56:
		store 1, @Hout_2_0
		br %58
	57:
		store 1, @Hout_2_1
		br %58
	58:
		br %60
	59:
		br %60
	60:
		ret void

*BasicFunctionTypename: "clearHout" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 486
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %4
		%6 = zext i8 %5 to i32
		%7 = icmp eq %6 0
		br %7, %8, %21
	8:
		%9 = load %3
		%10 = zext i8 %9 to i32
		%11 = load %3
		%12 = zext i8 %11 to i32
		%13 = call zeroext i8 @getHoutCnt(i32 %12)
		%14 = zext i8 %13 to i32
		%15 = load %3
		%16 = zext i8 %15 to i32
		%17 = call signext i8 @getHout(i32 %16, i32 0)
		%18 = sext i8 %17 to i32
		%19 = sub i32 %14, %18
		%20 = trunc i32 %19 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHoutCnt(i32 %10, i8 zeroext %20)
		br %34
	21:
		%22 = load %3
		%23 = zext i8 %22 to i32
		%24 = load %3
		%25 = zext i8 %24 to i32
		%26 = call zeroext i8 @getHoutCnt(i32 %25)
		%27 = zext i8 %26 to i32
		%28 = load %3
		%29 = zext i8 %28 to i32
		%30 = call signext i8 @getHout(i32 %29, i32 1)
		%31 = sext i8 %30 to i32
		%32 = sub i32 %27, %31
		%33 = trunc i32 %32 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHoutCnt(i32 %23, i8 zeroext %33)
		br %34
	34:
		%35 = load %3
		%36 = zext i8 %35 to i32
		switch %36, %55 [0, %37 1, %43 2, %49]
	37:
		%38 = load %4
		%39 = zext i8 %38 to i32
		switch %39, %42 [0, %40 1, %41]
	40:
		store 0, @Hout_0_0
		br %42
	41:
		store 0, @Hout_0_1
		br %42
	42:
		br %56
	43:
		%44 = load %4
		%45 = zext i8 %44 to i32
		switch %45, %48 [0, %46 1, %47]
	46:
		store 0, @Hout_1_0
		br %48
	47:
		store 0, @Hout_1_1
		br %48
	48:
		br %56
	49:
		%50 = load %4
		%51 = zext i8 %50 to i32
		switch %51, %54 [0, %52 1, %53]
	52:
		store 0, @Hout_2_0
		br %54
	53:
		store 0, @Hout_2_1
		br %54
	54:
		br %56
	55:
		br %56
	56:
		ret void

*BasicFunctionTypename: "now" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 538
	0:
		%1 = load @__LABS_time
		%2 = add i8 %1, 1
		store %2, @__LABS_time
		ret %2

*BasicFunctionTypename: "getLvalue" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 543
	0:
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		switch %6, %43 [0, %7 1, %19 2, %31]
	7:
		%8 = load %5
		%9 = icmp eq %8 0
		br %9, %10, %13
	10:
		%11 = load @Lvalue_0_0
		%12 = sext i8 %11 to i32
		br %16
	13:
		%14 = load @Lvalue_0_1
		%15 = sext i8 %14 to i32
		br %16
	16:
		%17 = phi [%12, %10], [%15, %13]
		%18 = trunc i32 %17 to i8
		store %18, %3
		br %44
	19:
		%20 = load %5
		%21 = icmp eq %20 0
		br %21, %22, %25
	22:
		%23 = load @Lvalue_1_0
		%24 = sext i8 %23 to i32
		br %28
	25:
		%26 = load @Lvalue_1_1
		%27 = sext i8 %26 to i32
		br %28
	28:
		%29 = phi [%24, %22], [%27, %25]
		%30 = trunc i32 %29 to i8
		store %30, %3
		br %44
	31:
		%32 = load %5
		%33 = icmp eq %32 0
		br %33, %34, %37
	34:
		%35 = load @Lvalue_2_0
		%36 = sext i8 %35 to i32
		br %40
	37:
		%38 = load @Lvalue_2_1
		%39 = sext i8 %38 to i32
		br %40
	40:
		%41 = phi [%36, %34], [%39, %37]
		%42 = trunc i32 %41 to i8
		store %42, %3
		br %44
	43:
		br %44
	44:
		%45 = load %3
		ret %45

*BasicFunctionTypename: "setLvalue" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 577
	0:
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%7 = load %4
		%8 = zext i8 %7 to i32
		switch %8, %36 [0, %9 1, %18 2, %27]
	9:
		%10 = load %5
		%11 = zext i8 %10 to i32
		%12 = icmp eq %11 0
		br %12, %13, %15
	13:
		%14 = load %6
		store %14, @Lvalue_0_0
		br %17
	15:
		%16 = load %6
		store %16, @Lvalue_0_1
		br %17
	17:
		br %37
	18:
		%19 = load %5
		%20 = zext i8 %19 to i32
		%21 = icmp eq %20 0
		br %21, %22, %24
	22:
		%23 = load %6
		store %23, @Lvalue_1_0
		br %26
	24:
		%25 = load %6
		store %25, @Lvalue_1_1
		br %26
	26:
		br %37
	27:
		%28 = load %5
		%29 = zext i8 %28 to i32
		%30 = icmp eq %29 0
		br %30, %31, %33
	31:
		%32 = load %6
		store %32, @Lvalue_2_0
		br %35
	33:
		%34 = load %6
		store %34, @Lvalue_2_1
		br %35
	35:
		br %37
	36:
		br %37
	37:
		ret void

*BasicFunctionTypename: "getLtstamp" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 627
	0:
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		switch %6, %43 [0, %7 1, %19 2, %31]
	7:
		%8 = load %5
		%9 = icmp eq %8 0
		br %9, %10, %13
	10:
		%11 = load @Ltstamp_0_0
		%12 = sext i8 %11 to i32
		br %16
	13:
		%14 = load @Ltstamp_0_1
		%15 = sext i8 %14 to i32
		br %16
	16:
		%17 = phi [%12, %10], [%15, %13]
		%18 = trunc i32 %17 to i8
		store %18, %3
		br %44
	19:
		%20 = load %5
		%21 = icmp eq %20 0
		br %21, %22, %25
	22:
		%23 = load @Ltstamp_1_0
		%24 = sext i8 %23 to i32
		br %28
	25:
		%26 = load @Ltstamp_1_1
		%27 = sext i8 %26 to i32
		br %28
	28:
		%29 = phi [%24, %22], [%27, %25]
		%30 = trunc i32 %29 to i8
		store %30, %3
		br %44
	31:
		%32 = load %5
		%33 = icmp eq %32 0
		br %33, %34, %37
	34:
		%35 = load @Ltstamp_2_0
		%36 = sext i8 %35 to i32
		br %40
	37:
		%38 = load @Ltstamp_2_1
		%39 = sext i8 %38 to i32
		br %40
	40:
		%41 = phi [%36, %34], [%39, %37]
		%42 = trunc i32 %41 to i8
		store %42, %3
		br %44
	43:
		br %44
	44:
		%45 = load %3
		ret %45

*BasicFunctionTypename: "setLtstamp" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 663
	0:
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%7 = load %4
		%8 = zext i8 %7 to i32
		switch %8, %36 [0, %9 1, %18 2, %27]
	9:
		%10 = load %5
		%11 = zext i8 %10 to i32
		%12 = icmp eq %11 0
		br %12, %13, %15
	13:
		%14 = load %6
		store %14, @Ltstamp_0_0
		br %17
	15:
		%16 = load %6
		store %16, @Ltstamp_0_1
		br %17
	17:
		br %37
	18:
		%19 = load %5
		%20 = zext i8 %19 to i32
		%21 = icmp eq %20 0
		br %21, %22, %24
	22:
		%23 = load %6
		store %23, @Ltstamp_1_0
		br %26
	24:
		%25 = load %6
		store %25, @Ltstamp_1_1
		br %26
	26:
		br %37
	27:
		%28 = load %5
		%29 = zext i8 %28 to i32
		%30 = icmp eq %29 0
		br %30, %31, %33
	31:
		%32 = load %6
		store %32, @Ltstamp_2_0
		br %35
	33:
		%34 = load %6
		store %34, @Ltstamp_2_1
		br %35
	35:
		br %37
	36:
		br %37
	37:
		ret void

*BasicFunctionTypename: "timeof" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 711
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i32
		%7 = load %4
		%8 = zext i8 %7 to i32
		%9 = call zeroext i8 @getLtstamp(i32 %6, i32 %8)
		ret %9

*BasicFunctionTypename: "getTupleStart" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 722
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp eq %3 0
		%5 = zext i1 %4 to i64
		%6 = select %4, 0, 1
		%7 = trunc i32 %6 to i8
		ret %7

*BasicFunctionTypename: "getTupleEnd" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 731
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp eq %3 0
		%5 = zext i1 %4 to i64
		%6 = select %4, 0, 1
		%7 = trunc i32 %6 to i8
		ret %7

*BasicFunctionTypename: "link" linkageType: EXTERNALLY_VISIBLE returnParam: i1 zeroext parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 738
	0:
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		store 0, %7
		%8 = load %6
		%9 = zext i8 %8 to i32
		%10 = icmp sge %9 0
		br %10, %11, %36
	11:
		%12 = load %6
		%13 = zext i8 %12 to i32
		%14 = icmp sle %13 0
		br %14, %15, %36
	15:
		%16 = load %4
		%17 = call signext i8 @getI(i8 zeroext %16, i32 0)
		%18 = sext i8 %17 to i32
		%19 = load %5
		%20 = call signext i8 @getI(i8 zeroext %19, i32 0)
		%21 = sext i8 %20 to i32
		%22 = sub i32 %18, %21
		%23 = icmp sge %22 0
		br %23, %24, %33
	24:
		%25 = load %4
		%26 = call signext i8 @getI(i8 zeroext %25, i32 0)
		%27 = sext i8 %26 to i32
		%28 = load %5
		%29 = call signext i8 @getI(i8 zeroext %28, i32 0)
		%30 = sext i8 %29 to i32
		%31 = sub i32 %27, %30
		%32 = icmp sle %31 2
		br %33
	33:
		%34 = phi [0, %15], [%32, %24]
		%35 = zext i1 %34 to i8
		store %35, %7
		br %66
	36:
		%37 = load %6
		%38 = zext i8 %37 to i32
		%39 = icmp sge %38 1
		br %39, %40, %65
	40:
		%41 = load %6
		%42 = zext i8 %41 to i32
		%43 = icmp sle %42 1
		br %43, %44, %65
	44:
		%45 = load %5
		%46 = call signext i8 @getI(i8 zeroext %45, i32 0)
		%47 = sext i8 %46 to i32
		%48 = load %4
		%49 = call signext i8 @getI(i8 zeroext %48, i32 0)
		%50 = sext i8 %49 to i32
		%51 = sub i32 %47, %50
		%52 = icmp sgt %51 0
		br %52, %53, %62
	53:
		%54 = load %5
		%55 = call signext i8 @getI(i8 zeroext %54, i32 0)
		%56 = sext i8 %55 to i32
		%57 = load %4
		%58 = call signext i8 @getI(i8 zeroext %57, i32 0)
		%59 = sext i8 %58 to i32
		%60 = sub i32 %56, %59
		%61 = icmp sle %60 2
		br %62
	62:
		%63 = phi [0, %44], [%61, %53]
		%64 = zext i1 %63 to i8
		store %64, %7
		br %65
	65:
		br %66
	66:
		%67 = load %7
		%68 = trunc i8 %67 to i1
		ret %68

*BasicFunctionTypename: "attr" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext, 3 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 799
	0:
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%9 = zext i1 %3 to i8
		store %9, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		%10 = load %8
		%11 = trunc i8 %10 to i1
		br %11, %12, %18
	12:
		%13 = load %5
		%14 = zext i8 %13 to i32
		%15 = call zeroext i8 @getHoutCnt(i32 %14)
		%16 = zext i8 %15 to i32
		%17 = icmp eq %16 0
		br %18
	18:
		%19 = phi [1, %4], [%17, %12]
		%20 = zext i1 %19 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %20)
		%21 = load %8
		%22 = trunc i8 %21 to i1
		br %22, %23, %29
	23:
		%24 = load %5
		%25 = zext i8 %24 to i32
		%26 = call signext i8 @getHinCnt(i32 %25)
		%27 = sext i8 %26 to i32
		%28 = icmp eq %27 0
		br %29
	29:
		%30 = phi [1, %18], [%28, %23]
		%31 = zext i1 %30 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %31)
		%32 = load %5
		%33 = zext i8 %32 to i32
		switch %33, %40 [0, %34 1, %36 2, %38]
	34:
		%35 = load %7
		store %35, @I_0_0
		br %40
	36:
		%37 = load %7
		store %37, @I_1_0
		br %40
	38:
		%39 = load %7
		store %39, @I_2_0
		br %40
	40:
		%41 = call zeroext i8 @now()
		ret void

*BasicFunctionTypename: "lstig" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext, 3 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 837
	0:
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%9 = zext i1 %3 to i8
		store %9, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		%10 = load %8
		%11 = trunc i8 %10 to i1
		br %11, %12, %18
	12:
		%13 = load %5
		%14 = zext i8 %13 to i32
		%15 = call zeroext i8 @getHoutCnt(i32 %14)
		%16 = zext i8 %15 to i32
		%17 = icmp eq %16 0
		br %18
	18:
		%19 = phi [1, %4], [%17, %12]
		%20 = zext i1 %19 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %20)
		%21 = load %8
		%22 = trunc i8 %21 to i1
		br %22, %23, %29
	23:
		%24 = load %5
		%25 = zext i8 %24 to i32
		%26 = call signext i8 @getHinCnt(i32 %25)
		%27 = sext i8 %26 to i32
		%28 = icmp eq %27 0
		br %29
	29:
		%30 = phi [1, %18], [%28, %23]
		%31 = zext i1 %30 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %31)
		%32 = load %5
		%33 = load %6
		%34 = load %7
		Unnamed Call-Instruction = call BasicVoidType @setLvalue(i8 zeroext %32, i8 zeroext %33, i8 signext %34)
		%35 = load %6
		%36 = zext i8 %35 to i32
		%37 = icmp eq %36 0
		br %37, %38, %41
	38:
		%39 = load %5
		%40 = call zeroext i8 @now()
		Unnamed Call-Instruction = call BasicVoidType @setLtstamp(i8 zeroext %39, i8 zeroext 0, i8 signext %40)
		br %44
	41:
		%42 = load %5
		%43 = call zeroext i8 @now()
		Unnamed Call-Instruction = call BasicVoidType @setLtstamp(i8 zeroext %42, i8 zeroext 1, i8 signext %43)
		br %44
	44:
		%45 = load %5
		%46 = load %6
		Unnamed Call-Instruction = call BasicVoidType @setHout(i8 zeroext %45, i8 zeroext %46)
		ret void

*BasicFunctionTypename: "differentLstig" linkageType: EXTERNALLY_VISIBLE returnParam: i1 zeroext parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 878
	0:
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%8 = load %6
		%9 = zext i8 %8 to i32
		%10 = icmp eq %9 0
		%11 = zext i1 %10 to i64
		%12 = select %10, 0, 1
		%13 = trunc i32 %12 to i8
		store %13, %7
		%14 = load %4
		%15 = zext i8 %14 to i32
		%16 = load %7
		%17 = zext i8 %16 to i32
		%18 = call signext i8 @getLvalue(i32 %15, i32 %17)
		%19 = sext i8 %18 to i32
		%20 = load %4
		%21 = zext i8 %20 to i32
		%22 = load %7
		%23 = zext i8 %22 to i32
		%24 = call signext i8 @getLvalue(i32 %21, i32 %23)
		%25 = sext i8 %24 to i32
		%26 = icmp ne %19 %25
		br %26, %41, %27
	27:
		%28 = load %4
		%29 = zext i8 %28 to i32
		%30 = load %7
		%31 = zext i8 %30 to i32
		%32 = call zeroext i8 @getLtstamp(i32 %29, i32 %31)
		%33 = zext i8 %32 to i32
		%34 = load %5
		%35 = zext i8 %34 to i32
		%36 = load %7
		%37 = zext i8 %36 to i32
		%38 = call zeroext i8 @getLtstamp(i32 %35, i32 %37)
		%39 = zext i8 %38 to i32
		%40 = icmp ne %33 %39
		br %41
	41:
		%42 = phi [1, %3], [%40, %27]
		ret %42

*BasicFunctionTypename: "confirm" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 906
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = trunc i32 %7 to i8
		store %8, %1
		%9 = load %1
		%10 = zext i8 %9 to i32
		%11 = icmp slt %10 3
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = load %1
		%14 = zext i8 %13 to i32
		%15 = call signext i8 @getHinCnt(i32 %14)
		%16 = sext i8 %15 to i32
		%17 = icmp sgt %16 0
		%18 = zext i1 %17 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %18)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%19 = call i32 @__VERIFIER_nondet_int()
		%20 = trunc i32 %19 to i8
		store %20, %2
		%21 = load %2
		%22 = zext i8 %21 to i32
		%23 = icmp slt %22 2
		%24 = zext i1 %23 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %24)
		%25 = load %1
		%26 = zext i8 %25 to i32
		%27 = load %2
		%28 = zext i8 %27 to i32
		%29 = call signext i8 @getHin(i32 %26, i32 %28)
		%30 = sext i8 %29 to i32
		%31 = icmp eq %30 1
		%32 = zext i1 %31 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %32)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%33 = call i32 @__VERIFIER_nondet_int()
		%34 = trunc i32 %33 to i8
		store %34, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%35 = load %1
		%36 = load %2
		%37 = call zeroext i8 @timeof(i8 zeroext %35, i8 zeroext %36)
		store %37, %4
		store 0, %3
		br %38
	38:
		%39 = load %3
		%40 = zext i8 %39 to i32
		%41 = icmp slt %40 3
		br %41, %42, %117
	42:
		%43 = load %1
		%44 = zext i8 %43 to i32
		%45 = load %3
		%46 = zext i8 %45 to i32
		%47 = icmp ne %44 %46
		br %47, %48, %113
	48:
		%49 = load %3
		%50 = load %2
		%51 = call zeroext i8 @timeof(i8 zeroext %49, i8 zeroext %50)
		%52 = zext i8 %51 to i32
		%53 = load %4
		%54 = zext i8 %53 to i32
		%55 = icmp ne %52 %54
		br %55, %56, %113
	56:
		%57 = load %1
		%58 = load %3
		%59 = load %2
		%60 = call zeroext i1 @link(i8 zeroext %57, i8 zeroext %58, i8 zeroext %59)
		br %60, %61, %113
	61:
		%62 = load %3
		%63 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setHout(i8 zeroext %62, i8 zeroext %63)
		%64 = load %3
		%65 = load %2
		%66 = call zeroext i8 @timeof(i8 zeroext %64, i8 zeroext %65)
		%67 = zext i8 %66 to i32
		%68 = load %4
		%69 = zext i8 %68 to i32
		%70 = icmp slt %67 %69
		br %70, %71, %112
	71:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%72 = call i32 @__VERIFIER_nondet_int()
		%73 = trunc i32 %72 to i8
		store %73, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%74 = call i32 @__VERIFIER_nondet_int()
		%75 = trunc i32 %74 to i8
		store %75, %6
		%76 = load %3
		%77 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHin(i8 zeroext %76, i8 zeroext %77)
		store 0, %5
		br %78
	78:
		%79 = load %5
		%80 = zext i8 %79 to i32
		%81 = icmp slt %80 1
		br %81, %82, %108
	82:
		%83 = load %2
		%84 = zext i8 %83 to i32
		%85 = load %5
		%86 = zext i8 %85 to i32
		%87 = add i32 %84, %86
		%88 = trunc i32 %87 to i8
		store %88, %6
		%89 = load %6
		%90 = zext i8 %89 to i32
		%91 = load %2
		%92 = zext i8 %91 to i32
		%93 = call zeroext i8 @getTupleEnd(i32 %92)
		%94 = zext i8 %93 to i32
		%95 = icmp sle %90 %94
		br %95, %96, %104
	96:
		%97 = load %3
		%98 = load %6
		%99 = load %1
		%100 = zext i8 %99 to i32
		%101 = load %6
		%102 = zext i8 %101 to i32
		%103 = call signext i8 @getLvalue(i32 %100, i32 %102)
		Unnamed Call-Instruction = call BasicVoidType @setLvalue(i8 zeroext %97, i8 zeroext %98, i8 signext %103)
		br %104
	104:
		br %105
	105:
		%106 = load %5
		%107 = add i8 %106, 1
		store %107, %5
		br %78
	108:
		%109 = load %3
		%110 = load %2
		%111 = load %4
		Unnamed Call-Instruction = call BasicVoidType @setLtstamp(i8 zeroext %109, i8 zeroext %110, i8 signext %111)
		br %112
	112:
		br %113
	113:
		br %114
	114:
		%115 = load %3
		%116 = add i8 %115, 1
		store %116, %3
		br %38
	117:
		%118 = load %1
		%119 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHin(i8 zeroext %118, i8 zeroext %119)
		ret void

*BasicFunctionTypename: "propagate" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1027
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = trunc i32 %7 to i8
		store %8, %1
		%9 = load %1
		%10 = zext i8 %9 to i32
		%11 = icmp slt %10 3
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = load %1
		%14 = zext i8 %13 to i32
		%15 = call zeroext i8 @getHoutCnt(i32 %14)
		%16 = zext i8 %15 to i32
		%17 = icmp sgt %16 0
		%18 = zext i1 %17 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %18)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%19 = call i32 @__VERIFIER_nondet_int()
		%20 = trunc i32 %19 to i8
		store %20, %2
		%21 = load %2
		%22 = zext i8 %21 to i32
		%23 = icmp slt %22 2
		%24 = zext i1 %23 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %24)
		%25 = load %1
		%26 = zext i8 %25 to i32
		%27 = load %2
		%28 = zext i8 %27 to i32
		%29 = call signext i8 @getHout(i32 %26, i32 %28)
		%30 = sext i8 %29 to i32
		%31 = icmp eq %30 1
		%32 = zext i1 %31 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %32)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%33 = call i32 @__VERIFIER_nondet_int()
		%34 = trunc i32 %33 to i8
		store %34, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%35 = load %1
		%36 = load %2
		%37 = call zeroext i8 @timeof(i8 zeroext %35, i8 zeroext %36)
		store %37, %4
		store 0, %3
		br %38
	38:
		%39 = load %3
		%40 = zext i8 %39 to i32
		%41 = icmp slt %40 3
		br %41, %42, %108
	42:
		%43 = load %1
		%44 = zext i8 %43 to i32
		%45 = load %3
		%46 = zext i8 %45 to i32
		%47 = icmp ne %44 %46
		br %47, %48, %104
	48:
		%49 = load %3
		%50 = load %2
		%51 = call zeroext i8 @timeof(i8 zeroext %49, i8 zeroext %50)
		%52 = zext i8 %51 to i32
		%53 = load %4
		%54 = zext i8 %53 to i32
		%55 = icmp slt %52 %54
		br %55, %56, %104
	56:
		%57 = load %1
		%58 = load %3
		%59 = load %2
		%60 = call zeroext i1 @link(i8 zeroext %57, i8 zeroext %58, i8 zeroext %59)
		br %60, %61, %104
	61:
		%62 = load %3
		%63 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setHout(i8 zeroext %62, i8 zeroext %63)
		%64 = load %3
		%65 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHin(i8 zeroext %64, i8 zeroext %65)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%66 = call i32 @__VERIFIER_nondet_int()
		%67 = trunc i32 %66 to i8
		store %67, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%68 = call i32 @__VERIFIER_nondet_int()
		%69 = trunc i32 %68 to i8
		store %69, %6
		store 0, %5
		br %70
	70:
		%71 = load %5
		%72 = zext i8 %71 to i32
		%73 = icmp slt %72 1
		br %73, %74, %100
	74:
		%75 = load %2
		%76 = zext i8 %75 to i32
		%77 = load %5
		%78 = zext i8 %77 to i32
		%79 = add i32 %76, %78
		%80 = trunc i32 %79 to i8
		store %80, %6
		%81 = load %6
		%82 = zext i8 %81 to i32
		%83 = load %2
		%84 = zext i8 %83 to i32
		%85 = call zeroext i8 @getTupleEnd(i32 %84)
		%86 = zext i8 %85 to i32
		%87 = icmp sle %82 %86
		br %87, %88, %96
	88:
		%89 = load %3
		%90 = load %6
		%91 = load %1
		%92 = zext i8 %91 to i32
		%93 = load %6
		%94 = zext i8 %93 to i32
		%95 = call signext i8 @getLvalue(i32 %92, i32 %94)
		Unnamed Call-Instruction = call BasicVoidType @setLvalue(i8 zeroext %89, i8 zeroext %90, i8 signext %95)
		br %96
	96:
		br %97
	97:
		%98 = load %5
		%99 = add i8 %98, 1
		store %99, %5
		br %70
	100:
		%101 = load %3
		%102 = load %2
		%103 = load %4
		Unnamed Call-Instruction = call BasicVoidType @setLtstamp(i8 zeroext %101, i8 zeroext %102, i8 signext %103)
		br %104
	104:
		br %105
	105:
		%106 = load %3
		%107 = add i8 %106, 1
		store %107, %3
		br %38
	108:
		%109 = load %1
		%110 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHout(i8 zeroext %109, i8 zeroext %110)
		ret void

*BasicFunctionTypename: "init" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1137
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, @Ltstamp_0_0
		store 0, @Ltstamp_0_1
		store 0, @Ltstamp_1_0
		store 0, @Ltstamp_1_1
		store 0, @Ltstamp_2_0
		store 0, @Ltstamp_2_1
		store 0, @Hin_0_0
		store 0, @Hin_0_1
		store 0, @Hin_1_0
		store 0, @Hin_1_1
		store 0, @Hin_2_0
		store 0, @Hin_2_1
		store 0, @Hout_0_0
		store 0, @Hout_0_1
		store 0, @Hout_1_0
		store 0, @Hout_1_1
		store 0, @Hout_2_0
		store 0, @Hout_2_1
		store 0, @HinCnt_0
		store 0, @HinCnt_1
		store 0, @HinCnt_2
		store 0, @HoutCnt_0
		store 0, @HoutCnt_1
		store 0, @HoutCnt_2
		store 6, @pc_0_0
		store 6, @pc_1_0
		store 6, @pc_2_0
		store -128, @Lvalue_0_0
		store -128, @Lvalue_1_0
		store -128, @Lvalue_2_0
		store -128, @Lvalue_0_1
		store -128, @Lvalue_1_1
		store -128, @Lvalue_2_1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %1
		%5 = load %1
		%6 = icmp sge %5 1
		br %6, %7, %10
	7:
		%8 = load %1
		%9 = icmp slt %8 10
		br %10
	10:
		%11 = phi [0, %0], [%9, %7]
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = load %1
		%14 = trunc i32 %13 to i8
		store %14, @I_0_0
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%15 = call i32 @__VERIFIER_nondet_int()
		store %15, %2
		%16 = load %2
		%17 = icmp sge %16 1
		br %17, %18, %21
	18:
		%19 = load %2
		%20 = icmp slt %19 10
		br %21
	21:
		%22 = phi [0, %10], [%20, %18]
		%23 = zext i1 %22 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %23)
		%24 = load %2
		%25 = trunc i32 %24 to i8
		store %25, @I_1_0
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%26 = call i32 @__VERIFIER_nondet_int()
		store %26, %3
		%27 = load %3
		%28 = icmp sge %27 1
		br %28, %29, %32
	29:
		%30 = load %3
		%31 = icmp slt %30 10
		br %32
	32:
		%33 = phi [0, %21], [%31, %29]
		%34 = zext i1 %33 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %34)
		%35 = load %3
		%36 = trunc i32 %35 to i8
		store %36, @I_2_0
		%37 = call zeroext i8 @now()
		store %37, @Ltstamp_0_0
		%38 = call zeroext i8 @now()
		store %38, @Ltstamp_0_1
		%39 = call zeroext i8 @now()
		store %39, @Ltstamp_1_0
		%40 = call zeroext i8 @now()
		store %40, @Ltstamp_1_1
		%41 = call zeroext i8 @now()
		store %41, @Ltstamp_2_0
		%42 = call zeroext i8 @now()
		store %42, @Ltstamp_2_1
		%43 = call zeroext i8 @now()
		ret void

*BasicFunctionTypename: "_0_2" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1219
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = load %2
		%5 = call signext i8 @getLvalue(i32 %4, i32 0)
		%6 = sext i8 %5 to i32
		%7 = load %2
		%8 = icmp ne %6 %7
		br %8, %9, %14
	9:
		%10 = load %2
		%11 = call signext i8 @getLvalue(i32 %10, i32 0)
		%12 = sext i8 %11 to i32
		%13 = icmp ne %12 -128
		br %14
	14:
		%15 = phi [0, %1], [%13, %9]
		%16 = zext i1 %15 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %16)
		%17 = load %2
		%18 = trunc i32 %17 to i8
		%19 = call signext i8 @getI(i8 zeroext %18, i32 0)
		%20 = sext i8 %19 to i32
		%21 = icmp sgt %20 0
		%22 = zext i1 %21 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %22)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%23 = load %2
		%24 = trunc i32 %23 to i8
		%25 = call signext i8 @getI(i8 zeroext %24, i32 0)
		%26 = sext i8 %25 to i32
		%27 = sub i32 %26, 1
		%28 = trunc i32 %27 to i8
		store %28, %3
		%29 = load %2
		%30 = trunc i32 %29 to i8
		%31 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %30, i8 zeroext 0, i8 signext %31, i1 zeroext 1)
		%32 = load %2
		%33 = trunc i32 %32 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %33, i8 zeroext 0)
		%34 = load %2
		%35 = trunc i32 %34 to i8
		Unnamed Call-Instruction = call BasicVoidType @setpc(i8 zeroext %35, i32 0, i8 zeroext 6)
		ret void

*BasicFunctionTypename: "_0_3" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1249
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = load %2
		%5 = call signext i8 @getLvalue(i32 %4, i32 0)
		%6 = sext i8 %5 to i32
		%7 = load %2
		%8 = icmp ne %6 %7
		br %8, %9, %14
	9:
		%10 = load %2
		%11 = call signext i8 @getLvalue(i32 %10, i32 0)
		%12 = sext i8 %11 to i32
		%13 = icmp ne %12 -128
		br %14
	14:
		%15 = phi [0, %1], [%13, %9]
		%16 = zext i1 %15 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %16)
		%17 = load %2
		%18 = trunc i32 %17 to i8
		%19 = call signext i8 @getI(i8 zeroext %18, i32 0)
		%20 = sext i8 %19 to i32
		%21 = icmp eq %20 0
		%22 = zext i1 %21 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %22)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%23 = load %2
		%24 = trunc i32 %23 to i8
		%25 = call signext i8 @getI(i8 zeroext %24, i32 0)
		%26 = sext i8 %25 to i32
		%27 = add i32 %26, 1
		%28 = trunc i32 %27 to i8
		store %28, %3
		%29 = load %2
		%30 = trunc i32 %29 to i8
		%31 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %30, i8 zeroext 0, i8 signext %31, i1 zeroext 1)
		%32 = load %2
		%33 = trunc i32 %32 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %33, i8 zeroext 0)
		%34 = load %2
		%35 = trunc i32 %34 to i8
		Unnamed Call-Instruction = call BasicVoidType @setpc(i8 zeroext %35, i32 0, i8 zeroext 6)
		ret void

*BasicFunctionTypename: "_0_4" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1279
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = load %2
		%5 = call signext i8 @getLvalue(i32 %4, i32 1)
		%6 = sext i8 %5 to i32
		%7 = load %2
		%8 = icmp ne %6 %7
		br %8, %9, %14
	9:
		%10 = load %2
		%11 = call signext i8 @getLvalue(i32 %10, i32 1)
		%12 = sext i8 %11 to i32
		%13 = icmp ne %12 -128
		br %14
	14:
		%15 = phi [0, %1], [%13, %9]
		%16 = zext i1 %15 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %16)
		%17 = load %2
		%18 = trunc i32 %17 to i8
		%19 = call signext i8 @getI(i8 zeroext %18, i32 0)
		%20 = sext i8 %19 to i32
		%21 = icmp slt %20 9
		%22 = zext i1 %21 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %22)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%23 = load %2
		%24 = trunc i32 %23 to i8
		%25 = call signext i8 @getI(i8 zeroext %24, i32 0)
		%26 = sext i8 %25 to i32
		%27 = add i32 %26, 1
		%28 = trunc i32 %27 to i8
		store %28, %3
		%29 = load %2
		%30 = trunc i32 %29 to i8
		%31 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %30, i8 zeroext 0, i8 signext %31, i1 zeroext 1)
		%32 = load %2
		%33 = trunc i32 %32 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %33, i8 zeroext 1)
		%34 = load %2
		%35 = trunc i32 %34 to i8
		Unnamed Call-Instruction = call BasicVoidType @setpc(i8 zeroext %35, i32 0, i8 zeroext 6)
		ret void

*BasicFunctionTypename: "_0_5" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1309
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = load %2
		%5 = call signext i8 @getLvalue(i32 %4, i32 1)
		%6 = sext i8 %5 to i32
		%7 = load %2
		%8 = icmp ne %6 %7
		br %8, %9, %14
	9:
		%10 = load %2
		%11 = call signext i8 @getLvalue(i32 %10, i32 1)
		%12 = sext i8 %11 to i32
		%13 = icmp ne %12 -128
		br %14
	14:
		%15 = phi [0, %1], [%13, %9]
		%16 = zext i1 %15 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %16)
		%17 = load %2
		%18 = trunc i32 %17 to i8
		%19 = call signext i8 @getI(i8 zeroext %18, i32 0)
		%20 = sext i8 %19 to i32
		%21 = icmp eq %20 9
		%22 = zext i1 %21 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %22)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%23 = load %2
		%24 = trunc i32 %23 to i8
		%25 = call signext i8 @getI(i8 zeroext %24, i32 0)
		%26 = sext i8 %25 to i32
		%27 = sub i32 %26, 1
		%28 = trunc i32 %27 to i8
		store %28, %3
		%29 = load %2
		%30 = trunc i32 %29 to i8
		%31 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %30, i8 zeroext 0, i8 signext %31, i1 zeroext 1)
		%32 = load %2
		%33 = trunc i32 %32 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %33, i8 zeroext 1)
		%34 = load %2
		%35 = trunc i32 %34 to i8
		Unnamed Call-Instruction = call BasicVoidType @setpc(i8 zeroext %35, i32 0, i8 zeroext 6)
		ret void

*BasicFunctionTypename: "_0_6" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1339
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%6 = load %2
		%7 = trunc i32 %6 to i8
		store %7, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%8 = load %2
		%9 = trunc i32 %8 to i8
		store %9, %4
		%10 = load %2
		%11 = trunc i32 %10 to i8
		%12 = load %3
		Unnamed Call-Instruction = call BasicVoidType @lstig(i8 zeroext %11, i8 zeroext 0, i8 signext %12, i1 zeroext 1)
		%13 = load %2
		%14 = trunc i32 %13 to i8
		%15 = load %4
		Unnamed Call-Instruction = call BasicVoidType @lstig(i8 zeroext %14, i8 zeroext 1, i8 signext %15, i1 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%16 = call i32 @__VERIFIER_nondet_int()
		%17 = trunc i32 %16 to i8
		store %17, %5
		%18 = load %5
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 2
		br %20, %33, %21
	21:
		%22 = load %5
		%23 = zext i8 %22 to i32
		%24 = icmp eq %23 3
		br %24, %33, %25
	25:
		%26 = load %5
		%27 = zext i8 %26 to i32
		%28 = icmp eq %27 4
		br %28, %33, %29
	29:
		%30 = load %5
		%31 = zext i8 %30 to i32
		%32 = icmp eq %31 5
		br %33
	33:
		%34 = phi [1, %25], [1, %21], [1, %1], [%32, %29]
		%35 = zext i1 %34 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %35)
		%36 = load %2
		%37 = trunc i32 %36 to i8
		%38 = load %5
		Unnamed Call-Instruction = call BasicVoidType @setpc(i8 zeroext %37, i32 0, i8 zeroext %38)
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1373
	0:
		%1 = alloca i32, align 4
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @init()
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		store 0, %2
		br %4
	4:
		%5 = call i32 @__VERIFIER_nondet_int()
		%6 = icmp ne %5 0
		br %6, %7, %40
	7:
		%8 = load %2
		%9 = zext i8 %8 to i32
		%10 = icmp slt %9 3
		%11 = zext i1 %10 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %11)
		%12 = load %2
		%13 = call signext i8 @getpc(i8 zeroext %12, i32 0)
		%14 = sext i8 %13 to i32
		switch %14, %30 [2, %15 3, %18 4, %21 5, %24 6, %27]
	15:
		%16 = load %2
		%17 = zext i8 %16 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_2(i32 %17)
		br %31
	18:
		%19 = load %2
		%20 = zext i8 %19 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_3(i32 %20)
		br %31
	21:
		%22 = load %2
		%23 = zext i8 %22 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_4(i32 %23)
		br %31
	24:
		%25 = load %2
		%26 = zext i8 %25 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_5(i32 %26)
		br %31
	27:
		%28 = load %2
		%29 = zext i8 %28 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_6(i32 %29)
		br %31
	30:
		br %31
	31:
		%32 = load %2
		%33 = zext i8 %32 to i32
		%34 = icmp eq %33 2
		br %34, %35, %36
	35:
		store 0, %2
		br %39
	36:
		%37 = load %2
		%38 = add i8 %37, 1
		store %38, %2
		br %39
	39:
		br %49
	40:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%41 = call i32 @__VERIFIER_nondet_int()
		%42 = icmp ne %41 0
		%43 = zext i1 %42 to i8
		store %43, %3
		%44 = load %3
		%45 = trunc i8 %44 to i1
		br %45, %46, %47
	46:
		Unnamed Call-Instruction = call BasicVoidType @propagate()
		br %48
	47:
		Unnamed Call-Instruction = call BasicVoidType @confirm()
		br %48
	48:
		br %49
	49:
		%50 = call signext i8 @getI(i8 zeroext 0, i32 0)
		%51 = sext i8 %50 to i32
		%52 = call signext i8 @getI(i8 zeroext 1, i32 0)
		%53 = sext i8 %52 to i32
		%54 = sub i32 %51, %53
		%55 = trunc i32 %54 to i8
		%56 = call signext i8 @__abs(i8 signext %55)
		%57 = sext i8 %56 to i32
		%58 = icmp sge %57 2
		br %58, %59, %110
	59:
		%60 = call signext i8 @getI(i8 zeroext 0, i32 0)
		%61 = sext i8 %60 to i32
		%62 = call signext i8 @getI(i8 zeroext 2, i32 0)
		%63 = sext i8 %62 to i32
		%64 = sub i32 %61, %63
		%65 = trunc i32 %64 to i8
		%66 = call signext i8 @__abs(i8 signext %65)
		%67 = sext i8 %66 to i32
		%68 = icmp sge %67 2
		br %68, %69, %110
	69:
		%70 = call signext i8 @getI(i8 zeroext 1, i32 0)
		%71 = sext i8 %70 to i32
		%72 = call signext i8 @getI(i8 zeroext 0, i32 0)
		%73 = sext i8 %72 to i32
		%74 = sub i32 %71, %73
		%75 = trunc i32 %74 to i8
		%76 = call signext i8 @__abs(i8 signext %75)
		%77 = sext i8 %76 to i32
		%78 = icmp sge %77 2
		br %78, %79, %110
	79:
		%80 = call signext i8 @getI(i8 zeroext 1, i32 0)
		%81 = sext i8 %80 to i32
		%82 = call signext i8 @getI(i8 zeroext 2, i32 0)
		%83 = sext i8 %82 to i32
		%84 = sub i32 %81, %83
		%85 = trunc i32 %84 to i8
		%86 = call signext i8 @__abs(i8 signext %85)
		%87 = sext i8 %86 to i32
		%88 = icmp sge %87 2
		br %88, %89, %110
	89:
		%90 = call signext i8 @getI(i8 zeroext 2, i32 0)
		%91 = sext i8 %90 to i32
		%92 = call signext i8 @getI(i8 zeroext 0, i32 0)
		%93 = sext i8 %92 to i32
		%94 = sub i32 %91, %93
		%95 = trunc i32 %94 to i8
		%96 = call signext i8 @__abs(i8 signext %95)
		%97 = sext i8 %96 to i32
		%98 = icmp sge %97 2
		br %98, %99, %110
	99:
		%100 = call signext i8 @getI(i8 zeroext 2, i32 0)
		%101 = sext i8 %100 to i32
		%102 = call signext i8 @getI(i8 zeroext 1, i32 0)
		%103 = sext i8 %102 to i32
		%104 = sub i32 %101, %103
		%105 = trunc i32 %104 to i8
		%106 = call signext i8 @__abs(i8 signext %105)
		%107 = sext i8 %106 to i32
		%108 = icmp sge %107 2
		br %108, %109, %110
	109:
		ret 0
	110:
		br %4


Analyze Termination of all function calls matching the pattern:
main()/hpcwork/ff862203/termcomp25/benchmarks/0pKlx.c:45:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]
}
^
/hpcwork/ff862203/termcomp25/benchmarks/0pKlx.c:69:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]
}
^
/hpcwork/ff862203/termcomp25/benchmarks/0pKlx.c:125:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]
}
^
/hpcwork/ff862203/termcomp25/benchmarks/0pKlx.c:152:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]
