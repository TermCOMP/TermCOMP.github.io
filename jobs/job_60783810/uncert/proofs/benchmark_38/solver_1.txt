YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/oY86k.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1768 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 26 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 21 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) RankingReductionPairProof [EQUIVALENT, 11 ms]
        (26) YES
    (27) LLVM Symbolic Execution SCC
        (28) SCC2IRS [SOUND, 29 ms]
        (29) IntTRS
        (30) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (31) IntTRS
        (32) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (33) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/oY86k.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/oY86k.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		%4 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%5 = alloca i8, numElementsLit: 4, align 16
		%6 = bitcast *i8 %5 to *i32
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%7 = alloca i8, numElementsLit: 4, align 16
		%8 = bitcast *i8 %7 to *i32
		store %8, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %4)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %4
		br %11
	11:
		%12 = load %2
		%13 = load %12
		%14 = load %4
		%15 = load %14
		%16 = icmp slt %13 %15
		br %16, %17, %35
	17:
		%18 = load %3
		store 0, %18
		br %19
	19:
		%20 = load %3
		%21 = load %20
		%22 = load %2
		%23 = load %22
		%24 = icmp sle %21 %23
		br %24, %25, %30
	25:
		%26 = load %3
		%27 = load %26
		%28 = add i32 %27, 1
		%29 = load %3
		store %28, %29
		br %19
	30:
		%31 = load %2
		%32 = load %31
		%33 = add i32 %32, 1
		%34 = load %2
		store %33, %34
		br %11
	35:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 47 rulesP rules:
f_477(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 4, 8) -> f_479(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 4, 8) :|: 0 = 0
f_479(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 4, 8) -> f_481(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 4, 8) :|: 0 = 0
f_481(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 4, 8) -> f_483(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 4, 8) :|: 0 = 0
f_483(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 4, 8) -> f_485(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 2, 4, 8) :|: v695 < v692 && 2 <= v692
f_485(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 2, 4, 8) -> f_488(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 2, 4, 8) :|: 0 = 0
f_488(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 2, 4, 8) -> f_491(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 2, 4, 8) :|: TRUE
f_491(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 2, 4, 8) -> f_494(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 2, 4, 8) :|: 0 = 0
f_494(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 2, 4, 8) -> f_497(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 2, 4, 8) :|: TRUE
f_497(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 2, 4, 8) -> f_499(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 2, 4, 8) :|: TRUE
f_499(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 2, 4, 8) -> f_500(v684, v685, v686, v687, v688, v689, v690, v695, v692, 1, v691, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 2, 4, 8) :|: TRUE
f_500(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025, 1, v1027, 0, v1029, v1030, v1031, v1032, v1033, v1034, v1035, 3, 7, 2, 4, 8) -> f_502(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025, 1, v1027, 0, v1029, v1030, v1031, v1032, v1033, v1034, v1035, 3, 7, 2, 4, 8) :|: 0 = 0
f_502(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025, 1, v1027, 0, v1029, v1030, v1031, v1032, v1033, v1034, v1035, 3, 7, 2, 4, 8) -> f_504(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025, 1, 0, v1027, v1029, v1030, v1031, v1032, v1033, v1034, v1035, 3, 7, 2, 4, 8) :|: 0 = 0
f_504(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025, 1, 0, v1027, v1029, v1030, v1031, v1032, v1033, v1034, v1035, 3, 7, 2, 4, 8) -> f_506(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025, 1, 0, v1027, v1029, v1030, v1031, v1032, v1033, v1034, v1035, 3, 7, 2, 4, 8) :|: 0 = 0
f_506(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025, 1, 0, v1027, v1029, v1030, v1031, v1032, v1033, v1034, v1035, 3, 7, 2, 4, 8) -> f_508(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025, 1, 0, v1027, v1029, v1030, v1031, v1032, v1033, v1034, v1035, 3, 7, 2, 4, 8) :|: 0 = 0
f_508(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025, 1, 0, v1027, v1029, v1030, v1031, v1032, v1033, v1034, v1035, 3, 7, 2, 4, 8) -> f_510(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025, 1, 0, v1027, v1029, v1030, v1031, v1032, v1033, v1034, v1035, 3, 7, 2, 4, 8) :|: 0 = 0
f_510(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025, 1, 0, v1027, v1029, v1030, v1031, v1032, v1033, v1034, v1035, 3, 7, 2, 4, 8) -> f_512(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025, 1, 0, v1027, v1029, v1030, v1031, v1032, v1033, v1034, v1035, 3, 7, 2, 4, 8) :|: TRUE
f_512(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025, 1, 0, v1027, v1029, v1030, v1031, v1032, v1033, v1034, v1035, 3, 7, 2, 4, 8) -> f_513(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025, 1, 0, v1027, v1029, v1030, v1031, v1032, v1033, v1034, v1035, 0, 3, 7, 2, 4, 8) :|: TRUE
f_513(v1099, v1100, v1101, v1102, v1103, v1104, v1105, v1106, v1107, 1, v1109, v1110, v1111, v1112, v1113, v1114, v1115, v1116, v1117, 0, 3, 7, 2, 4, 8) -> f_530(v1099, v1100, v1101, v1102, v1103, v1104, v1105, v1106, v1107, 1, v1109, v1110, v1110, v1106, v1111, v1112, v1113, v1114, v1115, v1116, v1117, 0, 3, 7, 2, 4, 8) :|: TRUE
f_530(v1201, v1202, v1203, v1204, v1205, v1206, v1207, v1208, v1209, 1, v1211, v1212, v1213, v1214, v1215, v1216, v1217, v1218, v1219, v1220, v1221, 0, 3, 7, 2, 4, 8) -> f_553(v1201, v1202, v1203, v1204, v1205, v1206, v1207, v1208, v1209, 1, v1211, v1212, v1213, v1214, v1215, v1216, v1217, v1218, v1219, v1220, v1221, 0, 3, 7, 2, 4, 8) :|: TRUE
f_553(v1326, v1327, v1328, v1329, v1330, v1331, v1332, v1333, v1334, 1, v1336, v1337, v1338, v1339, v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 3, 7, 2, 4, 8) -> f_576(v1326, v1327, v1328, v1329, v1330, v1331, v1332, v1333, v1334, 1, v1336, v1337, v1338, v1339, v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 3, 7, 2, 4, 8) :|: TRUE
f_576(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, 1, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, 0, 3, 7, 2, 4, 8) -> f_599(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, 1, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, 0, 3, 7, 2, 4, 8) :|: TRUE
f_599(v1576, v1577, v1578, v1579, v1580, v1581, v1582, v1583, v1584, 1, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, v1594, v1595, v1596, 0, 3, 7, 2, 4, 8) -> f_601(v1576, v1577, v1578, v1579, v1580, v1581, v1582, v1583, v1584, 1, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, v1594, v1595, v1596, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_601(v1576, v1577, v1578, v1579, v1580, v1581, v1582, v1583, v1584, 1, v1586, v1587, v1588, v1589, v1590, v1591, v1592, v1593, v1594, v1595, v1596, 0, 3, 7, 2, 4, 8) -> f_603(v1576, v1577, v1578, v1579, v1580, v1581, v1582, v1583, v1584, 1, v1586, v1587, v1589, v1590, v1591, v1592, v1593, v1594, v1595, v1596, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_603(v1576, v1577, v1578, v1579, v1580, v1581, v1582, v1583, v1584, 1, v1586, v1587, v1589, v1590, v1591, v1592, v1593, v1594, v1595, v1596, 0, 3, 7, 2, 4, 8) -> f_605(v1576, v1577, v1578, v1579, v1580, v1581, v1582, v1583, v1584, 1, v1586, v1587, v1617, v1590, v1591, v1592, v1593, v1594, v1595, v1596, 0, 3, 7, 2, 4, 8) :|: v1617 = 1 + v1586 && 1 <= v1617
f_605(v1576, v1577, v1578, v1579, v1580, v1581, v1582, v1583, v1584, 1, v1586, v1587, v1617, v1590, v1591, v1592, v1593, v1594, v1595, v1596, 0, 3, 7, 2, 4, 8) -> f_607(v1576, v1577, v1578, v1579, v1580, v1581, v1582, v1583, v1584, 1, v1586, v1587, v1617, v1590, v1591, v1592, v1593, v1594, v1595, v1596, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_607(v1576, v1577, v1578, v1579, v1580, v1581, v1582, v1583, v1584, 1, v1586, v1587, v1617, v1590, v1591, v1592, v1593, v1594, v1595, v1596, 0, 3, 7, 2, 4, 8) -> f_609(v1576, v1577, v1578, v1579, v1580, v1581, v1582, v1583, v1584, 1, v1586, v1587, v1617, v1590, v1591, v1592, v1593, v1594, v1595, v1596, 0, 3, 7, 2, 4, 8) :|: TRUE
f_609(v1576, v1577, v1578, v1579, v1580, v1581, v1582, v1583, v1584, 1, v1586, v1587, v1617, v1590, v1591, v1592, v1593, v1594, v1595, v1596, 0, 3, 7, 2, 4, 8) -> f_611(v1576, v1577, v1578, v1579, v1580, v1581, v1582, v1583, v1584, 1, v1586, v1587, v1617, v1590, v1591, v1592, v1593, v1594, v1595, v1596, 0, 3, 7, 2, 4, 8) :|: TRUE
f_611(v1576, v1577, v1578, v1579, v1580, v1581, v1582, v1583, v1584, 1, v1586, v1587, v1617, v1590, v1591, v1592, v1593, v1594, v1595, v1596, 0, 3, 7, 2, 4, 8) -> f_612(v1576, v1577, v1578, v1579, v1580, v1581, v1582, v1583, v1584, 1, v1586, v1587, v1617, v1590, v1591, v1592, v1593, v1594, v1595, v1596, 0, 3, 7, 4, 8) :|: TRUE
f_612(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 4, 8) -> f_613(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 4, 8) :|: 0 = 0
f_613(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 4, 8) -> f_614(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1666, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 4, 8) :|: 0 = 0
f_614(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1666, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 4, 8) -> f_615(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1666, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 4, 8) :|: 0 = 0
f_615(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1666, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 4, 8) -> f_616(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1666, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 4, 8) :|: 0 = 0
f_616(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1666, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 4, 8) -> f_617(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1666, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 2, 4, 8) :|: v1668 <= v1663 && 1 <= v1663 && 0 <= v1667 && 2 <= v1664
f_616(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1666, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 4, 8) -> f_618(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 4, 8) :|: v1663 < v1668 && v1666 = v1663
f_617(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1666, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 2, 4, 8) -> f_619(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1666, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_619(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1666, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 2, 4, 8) -> f_621(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1666, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 2, 4, 8) :|: TRUE
f_621(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1666, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 2, 4, 8) -> f_599(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1666, v1668, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 2, 4, 8) :|: TRUE
f_618(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, v1667, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 0, 3, 7, 4, 8) -> f_620(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1667, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) :|: 0 = 0
f_620(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1667, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) -> f_622(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1667, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) :|: TRUE
f_622(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1667, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) -> f_623(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1667, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) :|: 0 = 0
f_623(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1667, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) -> f_624(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) :|: 0 = 0
f_624(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) -> f_625(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) :|: v1668 = 1 + v1663
f_625(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) -> f_626(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) :|: 0 = 0
f_626(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) -> f_627(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) :|: TRUE
f_627(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) -> f_628(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) :|: TRUE
f_628(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) -> f_475(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663, v1664, 1, v1668, 0, v1669, v1670, v1671, v1672, v1673, v1674, v1675, 3, 7, 4, 8) :|: TRUE
f_475(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 4, 8) -> f_477(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, 0, v696, v697, v698, v699, v700, v701, v702, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_616(v1656:0, v1657:0, v1658:0, v1659:0, v1660:0, v1661:0, v1662:0, v1663:0, v1664:0, 1, v1668:0, v1667:0, v1666:0, v1669:0, v1670:0, v1671:0, v1672:0, v1673:0, v1674:0, v1675:0, 0, 3, 7, 4, 8) -> f_616(v1656:0, v1657:0, v1658:0, v1659:0, v1660:0, v1661:0, v1662:0, v1663:0, v1664:0, 1, 1 + v1668:0, v1667:0, v1668:0, v1669:0, v1670:0, v1671:0, v1672:0, v1673:0, v1674:0, v1675:0, 0, 3, 7, 4, 8) :|: v1668:0 > -1 && v1663:0 > 0 && v1668:0 <= v1663:0 && v1664:0 > 1 && v1667:0 > -1
f_616(v1656:0, v1657:0, v1658:0, v1659:0, v1660:0, v1661:0, v1662:0, v1663:0, v1664:0, 1, 1 + v1663:0, v1667:0, v1663:0, v1669:0, v1670:0, v1671:0, v1672:0, v1673:0, v1674:0, v1675:0, 0, 3, 7, 4, 8) -> f_616(v1656:0, v1657:0, v1658:0, v1659:0, v1660:0, v1661:0, v1662:0, 1 + v1663:0, v1664:0, 1, 1, v1663:0, 0, v1669:0, v1670:0, v1671:0, v1672:0, v1673:0, v1674:0, v1675:0, 0, 3, 7, 4, 8) :|: v1664:0 > 1 && v1663:0 < 1 + v1663:0 && v1664:0 > 1 + v1663:0
Filtered unneeded arguments:
   f_616(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_616(x8, x9, x11, x12, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_616(v1663:0, v1664:0, v1668:0, v1667:0, v1666:0) -> f_616(v1663:0, v1664:0, 1 + v1668:0, v1667:0, v1668:0) :|: v1663:0 > 0 && v1668:0 > -1 && v1668:0 <= v1663:0 && v1667:0 > -1 && v1664:0 > 1
f_616(v1663:0, v1664:0, sum~cons_1~v1663:0, v1667:0, v1663:01) -> f_616(1 + v1663:0, v1664:0, 1, v1663:0, 0) :|: v1663:0 < 1 + v1663:0 && v1664:0 > 1 + v1663:0 && v1664:0 > 1 && sum~cons_1~v1663:0 = 1 + v1663:0 && v1663:0 = v1663:01

----------------------------------------

(9)
Obligation:
Rules:
f_616(v1663:0, v1664:0, v1668:0, v1667:0, v1666:0) -> f_616(v1663:0, v1664:0, 1 + v1668:0, v1667:0, v1668:0) :|: v1663:0 > 0 && v1668:0 > -1 && v1668:0 <= v1663:0 && v1667:0 > -1 && v1664:0 > 1
f_616(x, x1, x2, x3, x4) -> f_616(1 + x, x1, 1, x, 0) :|: x < 1 + x && x1 > 1 + x && x1 > 1 && x2 = 1 + x && x = x4

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_616(v1663:0:0, v1664:0:0, v1668:0:0, v1667:0:0, v1666:0:0) -> f_616(v1663:0:0, v1664:0:0, 1 + v1668:0:0, v1667:0:0, v1668:0:0) :|: v1667:0:0 > -1 && v1664:0:0 > 1 && v1668:0:0 <= v1663:0:0 && v1668:0:0 > -1 && v1663:0:0 > 0
f_616(x4:0, x1:0, sum~cons_1~x4:0, x3:0, x4:01) -> f_616(1 + x4:0, x1:0, 1, x4:0, 0) :|: x4:0 < 1 + x4:0 && x1:0 > 1 + x4:0 && x1:0 > 1 && sum~cons_1~x4:0 = 1 + x4:0 && x4:0 = x4:01

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_616 ] = 4*f_616_2 + -4*f_616_1

The following rules are decreasing:
f_616(x4:0, x1:0, sum~cons_1~x4:0, x3:0, x4:01) -> f_616(1 + x4:0, x1:0, 1, x4:0, 0) :|: x4:0 < 1 + x4:0 && x1:0 > 1 + x4:0 && x1:0 > 1 && sum~cons_1~x4:0 = 1 + x4:0 && x4:0 = x4:01

The following rules are bounded:
f_616(x4:0, x1:0, sum~cons_1~x4:0, x3:0, x4:01) -> f_616(1 + x4:0, x1:0, 1, x4:0, 0) :|: x4:0 < 1 + x4:0 && x1:0 > 1 + x4:0 && x1:0 > 1 && sum~cons_1~x4:0 = 1 + x4:0 && x4:0 = x4:01


----------------------------------------

(13)
Obligation:
Rules:
f_616(v1663:0:0, v1664:0:0, v1668:0:0, v1667:0:0, v1666:0:0) -> f_616(v1663:0:0, v1664:0:0, 1 + v1668:0:0, v1667:0:0, v1668:0:0) :|: v1667:0:0 > -1 && v1664:0:0 > 1 && v1668:0:0 <= v1663:0:0 && v1668:0:0 > -1 && v1663:0:0 > 0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_616(v1663:0:0:0, v1664:0:0:0, v1668:0:0:0, v1667:0:0:0, v1666:0:0:0) -> f_616(v1663:0:0:0, v1664:0:0:0, 1 + v1668:0:0:0, v1667:0:0:0, v1668:0:0:0) :|: v1668:0:0:0 > -1 && v1663:0:0:0 > 0 && v1668:0:0:0 <= v1663:0:0:0 && v1664:0:0:0 > 1 && v1667:0:0:0 > -1

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_616(x1, x2, x3, x4, x5) -> f_616(x1, x2, x3, x4)

----------------------------------------

(17)
Obligation:
Rules:
f_616(v1663:0:0:0, v1664:0:0:0, v1668:0:0:0, v1667:0:0:0) -> f_616(v1663:0:0:0, v1664:0:0:0, 1 + v1668:0:0:0, v1667:0:0:0) :|: v1668:0:0:0 > -1 && v1663:0:0:0 > 0 && v1668:0:0:0 <= v1663:0:0:0 && v1664:0:0:0 > 1 && v1667:0:0:0 > -1

----------------------------------------

(18) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_616 ] = -1*f_616_3 + f_616_1

The following rules are decreasing:
f_616(v1663:0:0:0, v1664:0:0:0, v1668:0:0:0, v1667:0:0:0) -> f_616(v1663:0:0:0, v1664:0:0:0, 1 + v1668:0:0:0, v1667:0:0:0) :|: v1668:0:0:0 > -1 && v1663:0:0:0 > 0 && v1668:0:0:0 <= v1663:0:0:0 && v1664:0:0:0 > 1 && v1667:0:0:0 > -1

The following rules are bounded:
f_616(v1663:0:0:0, v1664:0:0:0, v1668:0:0:0, v1667:0:0:0) -> f_616(v1663:0:0:0, v1664:0:0:0, 1 + v1668:0:0:0, v1667:0:0:0) :|: v1668:0:0:0 > -1 && v1663:0:0:0 > 0 && v1668:0:0:0 <= v1663:0:0:0 && v1664:0:0:0 > 1 && v1667:0:0:0 > -1


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_434(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v694, v695, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 4, 8) -> f_437(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v694, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 4, 8) :|: 0 = 0
f_437(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v694, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 4, 8) -> f_440(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v694, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 4, 8) :|: 0 = 0
f_440(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v694, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 4, 8) -> f_443(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v694, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 4, 8) :|: 0 = 0
f_443(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v694, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 4, 8) -> f_446(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v694, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) :|: v695 <= v691 && 1 <= v691 && 2 <= v692
f_446(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v694, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) -> f_450(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v694, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_450(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v694, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) -> f_453(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v694, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) :|: TRUE
f_453(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v694, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) -> f_456(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v694, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_456(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v694, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) -> f_459(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_459(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) -> f_462(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v796, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) :|: v796 = 1 + v695 && 2 <= v796
f_462(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v796, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) -> f_466(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v796, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_466(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v796, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) -> f_470(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v796, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) :|: TRUE
f_470(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v796, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) -> f_474(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v796, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) :|: TRUE
f_474(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v796, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 2, 4, 8) -> f_431(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v695, v796, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 4, 8) :|: TRUE
f_431(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v694, v695, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 4, 8) -> f_434(v684, v685, v686, v687, v688, v689, v690, v691, v692, 1, v694, v695, v696, v697, v698, v699, v700, v701, v702, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_434(v684:0, v685:0, v686:0, v687:0, v688:0, v689:0, v690:0, v691:0, v692:0, 1, v694:0, v695:0, v696:0, v697:0, v698:0, v699:0, v700:0, v701:0, v702:0, 0, 3, 7, 4, 8) -> f_434(v684:0, v685:0, v686:0, v687:0, v688:0, v689:0, v690:0, v691:0, v692:0, 1, v695:0, 1 + v695:0, v696:0, v697:0, v698:0, v699:0, v700:0, v701:0, v702:0, 0, 3, 7, 4, 8) :|: v691:0 > 0 && v695:0 <= v691:0 && v695:0 > 0 && v692:0 > 1
Filtered unneeded arguments:
   f_434(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_434(x8, x9, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_434(v691:0, v692:0, v695:0) -> f_434(v691:0, v692:0, 1 + v695:0) :|: v695:0 <= v691:0 && v691:0 > 0 && v692:0 > 1 && v695:0 > 0

----------------------------------------

(22)
Obligation:
Rules:
f_434(v691:0, v692:0, v695:0) -> f_434(v691:0, v692:0, 1 + v695:0) :|: v695:0 <= v691:0 && v691:0 > 0 && v692:0 > 1 && v695:0 > 0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_434(v691:0:0, v692:0:0, v695:0:0) -> f_434(v691:0:0, v692:0:0, 1 + v695:0:0) :|: v692:0:0 > 1 && v695:0:0 > 0 && v691:0:0 > 0 && v695:0:0 <= v691:0:0

----------------------------------------

(25) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_434 ] = -1*f_434_3 + f_434_1

The following rules are decreasing:
f_434(v691:0:0, v692:0:0, v695:0:0) -> f_434(v691:0:0, v692:0:0, 1 + v695:0:0) :|: v692:0:0 > 1 && v695:0:0 > 0 && v691:0:0 > 0 && v695:0:0 <= v691:0:0

The following rules are bounded:
f_434(v691:0:0, v692:0:0, v695:0:0) -> f_434(v691:0:0, v692:0:0, 1 + v695:0:0) :|: v692:0:0 > 1 && v695:0:0 > 0 && v691:0:0 > 0 && v695:0:0 <= v691:0:0


----------------------------------------

(26)
YES

----------------------------------------

(27)
Obligation:
SCC
----------------------------------------

(28) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_196(v1, v3, v5, v7, v9, v12, v15, v18, v20, 1, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_198(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_198(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_200(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_200(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_202(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_202(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_205(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: v22 < v20
f_205(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_209(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_209(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_213(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_213(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_217(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_217(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_220(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_220(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_223(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_223(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_226(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_226(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_229(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_229(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_232(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_232(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_234(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_234(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_237(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: v22 < 0 && 2 + v18 <= 0
f_237(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_240(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_240(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_243(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_243(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_247(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_247(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_251(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_251(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_255(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v77, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: v77 = 1 + v22 && v77 <= 0
f_255(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v77, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_259(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v77, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_259(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v77, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_263(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v77, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_263(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v77, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_267(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v77, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_267(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v77, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_194(v1, v3, v5, v7, v9, v12, v15, v22, v20, 1, 0, v77, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_194(v1, v3, v5, v7, v9, v12, v15, v18, v20, 1, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_196(v1, v3, v5, v7, v9, v12, v15, v18, v20, 1, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_196(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v18:0, v20:0, 1, 0, v22:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8) -> f_196(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v22:0, v20:0, 1, 0, 1 + v22:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8) :|: v22:0 < v20:0 && v18:0 < -1 && v22:0 < 0
Filtered unneeded arguments:
   f_196(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_196(x8, x9, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_196(v18:0, v20:0, v22:0) -> f_196(v22:0, v20:0, 1 + v22:0) :|: v18:0 < -1 && v22:0 < 0 && v22:0 < v20:0

----------------------------------------

(29)
Obligation:
Rules:
f_196(v18:0, v20:0, v22:0) -> f_196(v22:0, v20:0, 1 + v22:0) :|: v18:0 < -1 && v22:0 < 0 && v22:0 < v20:0

----------------------------------------

(30) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(31)
Obligation:
Rules:
f_196(v18:0:0, v20:0:0, v22:0:0) -> f_196(v22:0:0, v20:0:0, 1 + v22:0:0) :|: v18:0:0 < -1 && v22:0:0 < 0 && v22:0:0 < v20:0:0

----------------------------------------

(32) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_196 ] = -1*f_196_3

The following rules are decreasing:
f_196(v18:0:0, v20:0:0, v22:0:0) -> f_196(v22:0:0, v20:0:0, 1 + v22:0:0) :|: v18:0:0 < -1 && v22:0:0 < 0 && v22:0:0 < v20:0:0

The following rules are bounded:
f_196(v18:0:0, v20:0:0, v22:0:0) -> f_196(v22:0:0, v20:0:0, 1 + v22:0:0) :|: v18:0:0 < -1 && v22:0:0 < 0 && v22:0:0 < v20:0:0


----------------------------------------

(33)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
