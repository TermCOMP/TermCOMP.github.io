YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/2XFRk.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 304 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 30 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 9 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/2XFRk.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/2XFRk.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 (...)* @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 (...)* @__VERIFIER_nondet_int()
		store %7, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%8 = call i32 (...)* @__VERIFIER_nondet_int()
		store %8, %4
		br %9
	9:
		%10 = load %2
		%11 = icmp sgt %10 0
		br %11, %12, %16
	12:
		%13 = load %2
		%14 = load %3
		%15 = icmp slt %13 %14
		br %16
	16:
		%17 = phi [0, %9], [%15, %12]
		br %17, %18, %28
	18:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%19 = load %2
		store %19, %5
		%20 = call i32 (...)* @__VERIFIER_nondet_int()
		store %20, %2
		%21 = load %2
		%22 = load %5
		%23 = mul i32 2, %22
		%24 = icmp sle %21 %23
		br %24, %25, %26
	25:
		br %28
	26:
		%27 = load %4
		store %27, %3
		br %9
	28:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_209(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v153, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_210(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v153, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: 0 = 0
f_210(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v153, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_211(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v153, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: TRUE
f_211(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v153, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_212(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v153, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: 0 = 0
f_212(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v153, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_213(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: 0 = 0
f_213(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_214(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: v154 < v150 && 4 <= v150
f_214(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_216(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: 0 = 0
f_216(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_218(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: 0 = 0
f_218(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_220(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: TRUE
f_220(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_222(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: TRUE
f_222(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_223(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: 0 = 0
f_223(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_224(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: TRUE
f_224(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_225(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: TRUE
f_225(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_226(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: TRUE
f_226(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_227(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: 0 = 0
f_227(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v151, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_228(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: 0 = 0
f_228(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_229(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v226, 0, v157, v158, v159, v160, v161, 3, 2, 4, 6) :|: v226 = 2 * v154 && 6 <= v226
f_229(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v226, 0, v157, v158, v159, v160, v161, 3, 2, 4, 6) -> f_231(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v226, 0, v157, v158, v159, v160, v161, 3, 2, 4, 7, 6) :|: v226 < v224 && 7 <= v224
f_231(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v226, 0, v157, v158, v159, v160, v161, 3, 2, 4, 7, 6) -> f_233(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v226, 0, v157, v158, v159, v160, v161, 3, 2, 4, 7, 6) :|: 0 = 0
f_233(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v226, 0, v157, v158, v159, v160, v161, 3, 2, 4, 7, 6) -> f_235(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v226, 0, v157, v158, v159, v160, v161, 3, 2, 4, 7, 6) :|: TRUE
f_235(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v226, 0, v157, v158, v159, v160, v161, 3, 2, 4, 7, 6) -> f_237(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v226, 0, v157, v158, v159, v160, v161, 3, 2, 4, 7, 6) :|: 0 = 0
f_237(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v226, 0, v157, v158, v159, v160, v161, 3, 2, 4, 7, 6) -> f_238(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v226, 0, v157, v158, v159, v160, v161, 3, 2, 4, 7, 6) :|: TRUE
f_238(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v226, 0, v157, v158, v159, v160, v161, 3, 2, 4, 7, 6) -> f_239(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v226, 0, v157, v158, v159, v160, v161, 3, 2, 4, 7, 6) :|: TRUE
f_239(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v224, v226, 0, v157, v158, v159, v160, v161, 3, 2, 4, 7, 6) -> f_208(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v150, v224, v226, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: TRUE
f_208(v143, v144, v145, v146, v147, v148, v149, v150, v151, 1, v153, v154, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) -> f_209(v143, v144, v145, v146, v147, v148, v149, v150, v154, 1, v151, v153, v155, 0, v157, v158, v159, v160, v161, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_209(v143:0, v144:0, v145:0, v146:0, v147:0, v148:0, v149:0, v150:0, v154:0, 1, v151:0, v153:0, v155:0, 0, v157:0, v158:0, v159:0, v160:0, v161:0, 3, 2, 4) -> f_209(v143:0, v144:0, v145:0, v146:0, v147:0, v148:0, v149:0, v150:0, v224:0, 1, v154:0, v150:0, 2 * v154:0, 0, v157:0, v158:0, v159:0, v160:0, v161:0, 3, 2, 4) :|: v150:0 > 3 && v154:0 < v150:0 && 5 < 2 * v154:0 && v224:0 > 2 * v154:0 && v224:0 > 6
Filtered unneeded arguments:
   f_209(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_209(x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_209(v150:0, v154:0) -> f_209(v150:0, v224:0) :|: v154:0 < v150:0 && v150:0 > 3 && 5 < 2 * v154:0 && v224:0 > 6 && v224:0 > 2 * v154:0

----------------------------------------

(8)
Obligation:
Rules:
f_209(v150:0, v154:0) -> f_209(v150:0, v224:0) :|: v154:0 < v150:0 && v150:0 > 3 && 5 < 2 * v154:0 && v224:0 > 6 && v224:0 > 2 * v154:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_209(v150:0:0, v154:0:0) -> f_209(v150:0:0, v224:0:0) :|: v224:0:0 > 6 && v224:0:0 > 2 * v154:0:0 && 5 < 2 * v154:0:0 && v150:0:0 > 3 && v154:0:0 < v150:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_209 ] = -1/4*f_209_2 + 1/4*f_209_1

The following rules are decreasing:
f_209(v150:0:0, v154:0:0) -> f_209(v150:0:0, v224:0:0) :|: v224:0:0 > 6 && v224:0:0 > 2 * v154:0:0 && 5 < 2 * v154:0:0 && v150:0:0 > 3 && v154:0:0 < v150:0:0

The following rules are bounded:
f_209(v150:0:0, v154:0:0) -> f_209(v150:0:0, v224:0:0) :|: v224:0:0 > 6 && v224:0:0 > 2 * v154:0:0 && 5 < 2 * v154:0:0 && v150:0:0 > 3 && v154:0:0 < v150:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
