YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/XNRY8.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 395 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 24 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 10 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 18 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 23 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) RankingReductionPairProof [EQUIVALENT, 11 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/XNRY8.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/XNRY8.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sgt %7 0
		br %8, %9, %19
	9:
		br %10
	10:
		%11 = load %3
		%12 = icmp sgt %11 0
		br %12, %13, %16
	13:
		%14 = load %3
		%15 = sub i32 %14, 1
		store %15, %3
		br %10
	16:
		%17 = load %2
		%18 = sub i32 %17, 1
		store %18, %2
		br %6
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_244(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 4) -> f_245(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 2, 4) :|: 0 < v256 && 2 <= v253 && 2 <= v251
f_245(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 2, 4) -> f_247(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 2, 4) :|: 0 = 0
f_247(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 2, 4) -> f_249(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 2, 4) :|: TRUE
f_249(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 2, 4) -> f_251(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 2, 4) :|: TRUE
f_251(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 2, 4) -> f_252(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 2, 4) :|: 0 = 0
f_252(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 2, 4) -> f_253(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 2, 4) :|: 0 = 0
f_253(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 2, 4) -> f_254(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 2, 4) :|: TRUE
f_254(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 2, 4) -> f_255(v248, v249, v250, v251, v252, v256, 1, 0, v257, v258, v259, 3, 2, 4) :|: 0 = 0
f_255(v248, v249, v250, v251, v252, v256, 1, 0, v257, v258, v259, 3, 2, 4) -> f_256(v248, v249, v250, v251, v252, v256, 1, 0, v288, v257, v258, v259, 3, 2, 4) :|: 1 + v288 = v256 && 0 <= v288
f_256(v248, v249, v250, v251, v252, v256, 1, 0, v288, v257, v258, v259, 3, 2, 4) -> f_257(v248, v249, v250, v251, v252, v256, 1, 0, v288, v257, v258, v259, 3, 2, 4) :|: TRUE
f_257(v248, v249, v250, v251, v252, v256, 1, 0, v288, v257, v258, v259, 3, 2, 4) -> f_258(v248, v249, v250, v251, v252, v256, 1, 0, v288, v257, v258, v259, 3, 2, 4) :|: TRUE
f_258(v248, v249, v250, v251, v252, v256, 1, 0, v288, v257, v258, v259, 3, 2, 4) -> f_243(v248, v249, v250, v251, v252, v256, 1, 0, v288, v257, v258, v259, 3, 4) :|: TRUE
f_243(v248, v249, v250, v251, v252, v253, 1, 0, v256, v257, v258, v259, 3, 4) -> f_244(v248, v249, v250, v251, v252, v256, 1, 0, v253, v257, v258, v259, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_244(v248:0, v249:0, v250:0, v251:0, v252:0, 1 + v288:0, 1, 0, v253:0, v257:0, v258:0, v259:0, 3, 4) -> f_244(v248:0, v249:0, v250:0, v251:0, v252:0, v288:0, 1, 0, 1 + v288:0, v257:0, v258:0, v259:0, 3, 4) :|: v253:0 > 1 && v288:0 > -1 && v251:0 > 1
Filtered unneeded arguments:
   f_244(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_244(x4, x6, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_244(v251:0, sum~cons_1~v288:0, v253:0) -> f_244(v251:0, v288:0, 1 + v288:0) :|: v288:0 > -1 && v251:0 > 1 && v253:0 > 1 && sum~cons_1~v288:0 = 1 + v288:0

----------------------------------------

(9)
Obligation:
Rules:
f_244(v251:0, sum~cons_1~v288:0, v253:0) -> f_244(v251:0, v288:0, 1 + v288:0) :|: v288:0 > -1 && v251:0 > 1 && v253:0 > 1 && sum~cons_1~v288:0 = 1 + v288:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_244(v251:0:0, sum~cons_1~v288:0:0, v253:0:0) -> f_244(v251:0:0, v288:0:0, 1 + v288:0:0) :|: v288:0:0 > -1 && v251:0:0 > 1 && v253:0:0 > 1 && sum~cons_1~v288:0:0 = 1 + v288:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_244(x, x1, x2)] = x1

The following rules are decreasing:
f_244(v251:0:0, sum~cons_1~v288:0:0, v253:0:0) -> f_244(v251:0:0, v288:0:0, 1 + v288:0:0) :|: v288:0:0 > -1 && v251:0:0 > 1 && v253:0:0 > 1 && sum~cons_1~v288:0:0 = 1 + v288:0:0
The following rules are bounded:
f_244(v251:0:0, sum~cons_1~v288:0:0, v253:0:0) -> f_244(v251:0:0, v288:0:0, 1 + v288:0:0) :|: v288:0:0 > -1 && v251:0:0 > 1 && v253:0:0 > 1 && sum~cons_1~v288:0:0 = 1 + v288:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_198(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 4) -> f_201(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 2, 4) :|: 0 < v117 && 2 <= v114 && 2 <= v112
f_201(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 2, 4) -> f_205(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 2, 4) :|: 0 = 0
f_205(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 2, 4) -> f_209(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 2, 4) :|: TRUE
f_209(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 2, 4) -> f_212(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 2, 4) :|: TRUE
f_212(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 2, 4) -> f_214(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 2, 4) :|: 0 = 0
f_214(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 2, 4) -> f_216(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 2, 4) :|: 0 = 0
f_216(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 2, 4) -> f_218(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 2, 4) :|: TRUE
f_218(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 2, 4) -> f_220(v109, v110, v111, v112, v113, v117, 1, 0, v118, v119, v120, 3, 2, 4) :|: 0 = 0
f_220(v109, v110, v111, v112, v113, v117, 1, 0, v118, v119, v120, 3, 2, 4) -> f_222(v109, v110, v111, v112, v113, v117, 1, 0, v167, v118, v119, v120, 3, 2, 4) :|: 1 + v167 = v117 && 0 <= v167
f_222(v109, v110, v111, v112, v113, v117, 1, 0, v167, v118, v119, v120, 3, 2, 4) -> f_224(v109, v110, v111, v112, v113, v117, 1, 0, v167, v118, v119, v120, 3, 2, 4) :|: TRUE
f_224(v109, v110, v111, v112, v113, v117, 1, 0, v167, v118, v119, v120, 3, 2, 4) -> f_227(v109, v110, v111, v112, v113, v117, 1, 0, v167, v118, v119, v120, 3, 2, 4) :|: TRUE
f_227(v109, v110, v111, v112, v113, v117, 1, 0, v167, v118, v119, v120, 3, 2, 4) -> f_196(v109, v110, v111, v112, v113, v117, 1, 0, v167, v118, v119, v120, 3, 4) :|: TRUE
f_196(v109, v110, v111, v112, v113, v114, 1, 0, v117, v118, v119, v120, 3, 4) -> f_198(v109, v110, v111, v112, v113, v117, 1, 0, v114, v118, v119, v120, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_198(v109:0, v110:0, v111:0, v112:0, v113:0, 1 + v167:0, 1, 0, v114:0, v118:0, v119:0, v120:0, 3, 4) -> f_198(v109:0, v110:0, v111:0, v112:0, v113:0, v167:0, 1, 0, 1 + v167:0, v118:0, v119:0, v120:0, 3, 4) :|: v114:0 > 1 && v167:0 > -1 && v112:0 > 1
Filtered unneeded arguments:
   f_198(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_198(x4, x6, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_198(v112:0, sum~cons_1~v167:0, v114:0) -> f_198(v112:0, v167:0, 1 + v167:0) :|: v167:0 > -1 && v112:0 > 1 && v114:0 > 1 && sum~cons_1~v167:0 = 1 + v167:0

----------------------------------------

(16)
Obligation:
Rules:
f_198(v112:0, sum~cons_1~v167:0, v114:0) -> f_198(v112:0, v167:0, 1 + v167:0) :|: v167:0 > -1 && v112:0 > 1 && v114:0 > 1 && sum~cons_1~v167:0 = 1 + v167:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_198(v112:0:0, sum~cons_1~v167:0:0, v114:0:0) -> f_198(v112:0:0, v167:0:0, 1 + v167:0:0) :|: v167:0:0 > -1 && v112:0:0 > 1 && v114:0:0 > 1 && sum~cons_1~v167:0:0 = 1 + v167:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_198 ] = f_198_2

The following rules are decreasing:
f_198(v112:0:0, sum~cons_1~v167:0:0, v114:0:0) -> f_198(v112:0:0, v167:0:0, 1 + v167:0:0) :|: v167:0:0 > -1 && v112:0:0 > 1 && v114:0:0 > 1 && sum~cons_1~v167:0:0 = 1 + v167:0:0

The following rules are bounded:
f_198(v112:0:0, sum~cons_1~v167:0:0, v114:0:0) -> f_198(v112:0:0, v167:0:0, 1 + v167:0:0) :|: v167:0:0 > -1 && v112:0:0 > 1 && v114:0:0 > 1 && sum~cons_1~v167:0:0 = 1 + v167:0:0


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 9 rulesP rules:
f_173(v64, v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 4) -> f_175(v64, v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 2, 4) :|: 0 < v71 && 2 <= v70 && 2 <= v68
f_175(v64, v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 2, 4) -> f_178(v64, v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 2, 4) :|: 0 = 0
f_178(v64, v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 2, 4) -> f_181(v64, v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 2, 4) :|: TRUE
f_181(v64, v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 2, 4) -> f_184(v64, v65, v66, v67, v68, 1, v71, v72, v73, v74, 0, 3, 2, 4) :|: 0 = 0
f_184(v64, v65, v66, v67, v68, 1, v71, v72, v73, v74, 0, 3, 2, 4) -> f_187(v64, v65, v66, v67, v68, 1, v71, v84, v72, v73, v74, 0, 3, 2, 4) :|: 1 + v84 = v71 && 0 <= v84
f_187(v64, v65, v66, v67, v68, 1, v71, v84, v72, v73, v74, 0, 3, 2, 4) -> f_190(v64, v65, v66, v67, v68, 1, v71, v84, v72, v73, v74, 0, 3, 2, 4) :|: TRUE
f_190(v64, v65, v66, v67, v68, 1, v71, v84, v72, v73, v74, 0, 3, 2, 4) -> f_193(v64, v65, v66, v67, v68, 1, v71, v84, v72, v73, v74, 0, 3, 2, 4) :|: TRUE
f_193(v64, v65, v66, v67, v68, 1, v71, v84, v72, v73, v74, 0, 3, 2, 4) -> f_170(v64, v65, v66, v67, v68, 1, v71, v84, v72, v73, v74, 0, 3, 4) :|: TRUE
f_170(v64, v65, v66, v67, v68, 1, v70, v71, v72, v73, v74, 0, 3, 4) -> f_173(v64, v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_173(v64:0, v65:0, v66:0, v67:0, v68:0, 1, 1 + v84:0, v70:0, v72:0, v73:0, v74:0, 0, 3, 4) -> f_173(v64:0, v65:0, v66:0, v67:0, v68:0, 1, v84:0, 1 + v84:0, v72:0, v73:0, v74:0, 0, 3, 4) :|: v70:0 > 1 && v84:0 > -1 && v68:0 > 1
Filtered unneeded arguments:
   f_173(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_173(x5, x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_173(v68:0, sum~cons_1~v84:0, v70:0) -> f_173(v68:0, v84:0, 1 + v84:0) :|: v84:0 > -1 && v68:0 > 1 && v70:0 > 1 && sum~cons_1~v84:0 = 1 + v84:0

----------------------------------------

(23)
Obligation:
Rules:
f_173(v68:0, sum~cons_1~v84:0, v70:0) -> f_173(v68:0, v84:0, 1 + v84:0) :|: v84:0 > -1 && v68:0 > 1 && v70:0 > 1 && sum~cons_1~v84:0 = 1 + v84:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_173(v68:0:0, sum~cons_1~v84:0:0, v70:0:0) -> f_173(v68:0:0, v84:0:0, 1 + v84:0:0) :|: v84:0:0 > -1 && v68:0:0 > 1 && v70:0:0 > 1 && sum~cons_1~v84:0:0 = 1 + v84:0:0

----------------------------------------

(26) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_173 ] = f_173_2

The following rules are decreasing:
f_173(v68:0:0, sum~cons_1~v84:0:0, v70:0:0) -> f_173(v68:0:0, v84:0:0, 1 + v84:0:0) :|: v84:0:0 > -1 && v68:0:0 > 1 && v70:0:0 > 1 && sum~cons_1~v84:0:0 = 1 + v84:0:0

The following rules are bounded:
f_173(v68:0:0, sum~cons_1~v84:0:0, v70:0:0) -> f_173(v68:0:0, v84:0:0, 1 + v84:0:0) :|: v84:0:0 > -1 && v68:0:0 > 1 && v70:0:0 > 1 && sum~cons_1~v84:0:0 = 1 + v84:0:0


----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
