YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Hy1bH.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 711 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Hy1bH.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Hy1bH.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "f" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store 0, %6
		br %7
	7:
		%8 = load %5
		%9 = icmp ne %8 0
		br %9, %10, %18
	10:
		%11 = load %3
		%12 = add i32 %11, 1
		store %12, %3
		%13 = load %4
		%14 = icmp slt %11 %13
		%15 = zext i1 %14 to i32
		store %15, %5
		%16 = load %6
		%17 = add i32 %16, 1
		store %17, %6
		br %7
	18:
		%19 = load %6
		ret %19

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 34
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @f(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_272(v168, v169, v170, v171, v172, v173, 1, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) -> f_273(v168, v169, v170, v171, v172, v173, 1, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) :|: 0 = 0
f_273(v168, v169, v170, v171, v172, v173, 1, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) -> f_274(v168, v169, v170, v171, v172, v173, 1, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) :|: TRUE
f_274(v168, v169, v170, v171, v172, v173, 1, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) -> f_275(v168, v169, v170, v171, v172, v173, 1, v176, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) :|: 0 = 0
f_275(v168, v169, v170, v171, v172, v173, 1, v176, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) -> f_276(v168, v169, v170, v171, v172, v173, 1, v176, v186, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) :|: v186 = 1 + v176
f_276(v168, v169, v170, v171, v172, v173, 1, v176, v186, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) -> f_277(v168, v169, v170, v171, v172, v173, 1, v176, v186, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) :|: TRUE
f_277(v168, v169, v170, v171, v172, v173, 1, v176, v186, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) -> f_278(v168, v169, v170, v171, v172, v173, 1, v176, v186, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) :|: 0 = 0
f_278(v168, v169, v170, v171, v172, v173, 1, v176, v186, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) -> f_279(v168, v169, v170, v171, v172, v173, 1, v176, v186, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) :|: v176 < v169
f_279(v168, v169, v170, v171, v172, v173, 1, v176, v186, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) -> f_281(v168, v169, v170, v171, v172, v173, 1, v176, v186, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) :|: 0 = 0
f_281(v168, v169, v170, v171, v172, v173, 1, v176, v186, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) -> f_283(v168, v169, v170, v171, v172, v173, 1, v176, v186, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) :|: 0 = 0
f_283(v168, v169, v170, v171, v172, v173, 1, v176, v186, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) -> f_285(v168, v169, v170, v171, v172, v173, 1, v176, v186, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) :|: TRUE
f_285(v168, v169, v170, v171, v172, v173, 1, v176, v186, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) -> f_287(v168, v169, v170, v171, v172, v173, 1, v176, v186, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) :|: 0 = 0
f_287(v168, v169, v170, v171, v172, v173, 1, v176, v186, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) -> f_289(v168, v169, v170, v171, v172, v173, 1, v176, v186, v178, v188, v179, v180, v181, v182, v183, v184, 0, 3, 4, 2) :|: v188 = 1 + v178 && 2 <= v188
f_289(v168, v169, v170, v171, v172, v173, 1, v176, v186, v178, v188, v179, v180, v181, v182, v183, v184, 0, 3, 4, 2) -> f_291(v168, v169, v170, v171, v172, v173, 1, v176, v186, v178, v188, v179, v180, v181, v182, v183, v184, 0, 3, 4, 2) :|: TRUE
f_291(v168, v169, v170, v171, v172, v173, 1, v176, v186, v178, v188, v179, v180, v181, v182, v183, v184, 0, 3, 4, 2) -> f_293(v168, v169, v170, v171, v172, v173, 1, v176, v186, v178, v188, v179, v180, v181, v182, v183, v184, 0, 3, 4, 2) :|: TRUE
f_293(v168, v169, v170, v171, v172, v173, 1, v176, v186, v178, v188, v179, v180, v181, v182, v183, v184, 0, 3, 4, 2) -> f_271(v168, v169, v170, v171, v172, v173, 1, v176, v186, v178, v188, v179, v180, v181, v182, v183, v184, 0, 3, 4) :|: TRUE
f_271(v168, v169, v170, v171, v172, v173, 1, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) -> f_272(v168, v169, v170, v171, v172, v173, 1, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_272(v168:0, v169:0, v170:0, v171:0, v172:0, v173:0, 1, v175:0, v176:0, v177:0, v178:0, v179:0, v180:0, v181:0, v182:0, v183:0, v184:0, 0, 3, 4) -> f_272(v168:0, v169:0, v170:0, v171:0, v172:0, v173:0, 1, v176:0, 1 + v176:0, v178:0, 1 + v178:0, v179:0, v180:0, v181:0, v182:0, v183:0, v184:0, 0, 3, 4) :|: v178:0 > 0 && v176:0 < v169:0
Filtered unneeded arguments:
   f_272(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_272(x2, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_272(v169:0, v176:0, v178:0) -> f_272(v169:0, 1 + v176:0, 1 + v178:0) :|: v178:0 > 0 && v176:0 < v169:0

----------------------------------------

(8)
Obligation:
Rules:
f_272(v169:0, v176:0, v178:0) -> f_272(v169:0, 1 + v176:0, 1 + v178:0) :|: v178:0 > 0 && v176:0 < v169:0

----------------------------------------

(9) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_272(x, x1, x2)] = x - x1

The following rules are decreasing:
f_272(v169:0, v176:0, v178:0) -> f_272(v169:0, 1 + v176:0, 1 + v178:0) :|: v178:0 > 0 && v176:0 < v169:0
The following rules are bounded:
f_272(v169:0, v176:0, v178:0) -> f_272(v169:0, 1 + v176:0, 1 + v178:0) :|: v178:0 > 0 && v176:0 < v169:0

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
