YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Yt9XK.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 29 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2509 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 19 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 6 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 23 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 13 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Yt9XK.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Yt9XK.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%6 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%7 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %5)
		store null, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %6)
		%8 = load %5
		store %8, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		%9 = load %4
		store %9, %7
		br %10
	10:
		%11 = load %7
		%12 = load %4
		%13 = load %3
		%14 = add i32 %12, %13
		%15 = icmp slt %11 %14
		br %15, %16, %29
	16:
		%17 = call noalias *i8 @malloc(i64 16)
		%18 = bitcast *i8 %17 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %18, %5
		%19 = load %7
		%20 = load %5
		%21 = getelementptr %20, 0, 0
		store %19, %21
		%22 = load %6
		%23 = load %5
		%24 = getelementptr %23, 0, 1
		store %22, %24
		%25 = load %5
		store %25, %6
		br %26
	26:
		%27 = load %7
		%28 = add i32 %27, 1
		store %28, %7
		br %10
	29:
		%30 = load %5
		ret %30

*BasicFunctionTypename: "search" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 58
	0:
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca i32, align 4
		%5 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %5)
		%6 = load %3
		store %6, %5
		br %7
	7:
		%8 = load %5
		%9 = getelementptr %8, 0, 0
		%10 = load %9
		%11 = load %4
		%12 = icmp ne %10 %11
		br %12, %13, %17
	13:
		%14 = load %5
		%15 = getelementptr %14, 0, 1
		%16 = load %15
		store %16, %5
		br %7
	17:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 80
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 (...)* @__VERIFIER_nondet_int()
		store %6, %2
		%7 = load %2
		%8 = icmp slt %7 1
		br %8, %9, %10
	9:
		store 0, %1
		br %28
	10:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%11 = call i32 (...)* @__VERIFIER_nondet_int()
		store %11, %3
		%12 = load %3
		%13 = icmp slt %12 1
		br %13, %18, %14
	14:
		%15 = load %3
		%16 = load %2
		%17 = icmp sge %15 %16
		br %17, %18, %19
	18:
		store 0, %1
		br %28
	19:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%20 = call i32 (...)* @__VERIFIER_nondet_int()
		store %20, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %5)
		%21 = load %2
		%22 = load %4
		%23 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %21, i32 %22)
		store %23, %5
		%24 = load %5
		%25 = load %4
		%26 = load %3
		%27 = add i32 %25, %26
		Unnamed Call-Instruction = call BasicVoidType @search(*BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %24, i32 %27)
		store 0, %1
		br %28
	28:
		%29 = load %1
		ret %29


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_625(v327, v328, v329, v330, v331, v336, v332, v333, 1, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v357, v354, v345, v359, 0, v342, v344, 3, 7, 4, 8, 9, 2, v356, v358) -> f_626(v327, v328, v329, v330, v331, v336, v333, 1, v332, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v357, v354, v345, v359, 0, v342, v344, 3, 7, 4, 8, 9, 2, v356, v358) :|: 0 = 0
f_626(v327, v328, v329, v330, v331, v336, v333, 1, v332, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v357, v354, v345, v359, 0, v342, v344, 3, 7, 4, 8, 9, 2, v356, v358) -> f_627(v327, v328, v329, v330, v331, v336, v354, 1, v332, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v333, v357, v345, v359, 0, v342, v344, 3, 7, 4, 8, 9, 2, v356, v358) :|: 0 = 0
f_627(v327, v328, v329, v330, v331, v336, v354, 1, v332, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v333, v357, v345, v359, 0, v342, v344, 3, 7, 4, 8, 9, 2, v356, v358) -> f_628(v327, v328, v329, v330, v331, v336, v354, 1, v332, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v333, v357, v345, v359, 0, v342, v344, 3, 7, 4, 8, 9, 2, v356, v358) :|: 0 = 0
f_628(v327, v328, v329, v330, v331, v336, v354, 1, v332, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v333, v357, v345, v359, 0, v342, v344, 3, 7, 4, 8, 9, 2, v356, v358) -> f_629(v327, v328, v329, v330, v331, v336, v354, 1, v332, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v333, v357, v345, v359, 0, v342, v344, 3, 7, 4, 8, 9, 2, v356, v358) :|: v328 < v354
f_629(v327, v328, v329, v330, v331, v336, v354, 1, v332, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v333, v357, v345, v359, 0, v342, v344, 3, 7, 4, 8, 9, 2, v356, v358) -> f_631(v327, v328, v329, v330, v331, v336, v354, 1, v332, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v333, v357, v345, v359, 0, v342, v344, 3, 7, 4, 8, 9, 2, v356, v358) :|: 0 = 0
f_631(v327, v328, v329, v330, v331, v336, v354, 1, v332, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v333, v357, v345, v359, 0, v342, v344, 3, 7, 4, 8, 9, 2, v356, v358) -> f_633(v327, v328, v329, v330, v331, v336, v354, 1, v332, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v333, v357, v345, v359, 0, v342, v344, 3, 7, 4, 8, 9, 2, v356, v358) :|: TRUE
f_633(v327, v328, v329, v330, v331, v336, v354, 1, v332, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v333, v357, v345, v359, 0, v342, v344, 3, 7, 4, 8, 9, 2, v356, v358) -> f_635(v327, v328, v329, v330, v331, v336, v354, 1, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v333, v357, v345, v359, 0, v342, v344, 3, 7, 4, 9, 2, 8, v356, v358) :|: 0 = 0
f_635(v327, v328, v329, v330, v331, v336, v354, 1, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v333, v357, v345, v359, 0, v342, v344, 3, 7, 4, 9, 2, 8, v356, v358) -> f_643(v327, v328, v329, v330, v331, v336, v354, 1, v360, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v364, v335, 0, v342, v344, v345, v359, v363, v361, v355, v357, 3, 7, 4, 8, 15, 9, 2, v362, 16, v365) :|: v360 = 8 + v336 && v365 = 1 + v356 && v364 = 15 + v336 && 1 + v362 = v358 && 1 + v363 = v354 && 9 <= v360 && 16 <= v364 && 2 <= v362 && 1 <= v361 && 2 <= v365
f_643(v327, v328, v329, v330, v331, v336, v354, 1, v360, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v364, v335, 0, v342, v344, v345, v359, v363, v361, v355, v357, 3, 7, 4, 8, 15, 9, 2, v362, 16, v365) -> f_645(v327, v328, v329, v330, v331, v336, v354, 1, v360, v359, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v364, v335, 0, v342, v344, v345, v363, v361, v355, v357, 3, 7, 4, 8, 15, 9, 2, v362, 16, v365) :|: 0 = 0
f_645(v327, v328, v329, v330, v331, v336, v354, 1, v360, v359, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v364, v335, 0, v342, v344, v345, v363, v361, v355, v357, 3, 7, 4, 8, 15, 9, 2, v362, 16, v365) -> f_647(v327, v328, v329, v330, v331, v336, v354, 1, v360, v359, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v364, 0, v342, v344, v345, v363, v361, v355, v357, 3, 7, 4, 8, 15, 2, 9, v362, 16, v365) :|: TRUE
f_647(v327, v328, v329, v330, v331, v336, v354, 1, v360, v359, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v364, 0, v342, v344, v345, v363, v361, v355, v357, 3, 7, 4, 8, 15, 2, 9, v362, 16, v365) -> f_649(v327, v328, v329, v330, v331, v336, v354, 1, v360, v359, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v364, 0, v342, v344, v345, v363, v361, v355, v357, 3, 7, 4, 8, 15, 2, 9, v362, 16, v365) :|: TRUE
f_649(v327, v328, v329, v330, v331, v336, v354, 1, v360, v359, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v364, 0, v342, v344, v345, v363, v361, v355, v357, 3, 7, 4, 8, 15, 2, 9, v362, 16, v365) -> f_624(v327, v328, v329, v330, v331, v336, v354, 1, v360, v359, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v357, v363, v345, v361, 0, v342, v344, 3, 7, 4, 8, 9, 2, v365, v362) :|: TRUE
f_624(v327, v328, v329, v330, v331, v332, v333, 1, v335, v336, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v357, v354, v345, v359, 0, v342, v344, 3, 7, 4, 8, 9, 2, v356, v358) -> f_625(v327, v328, v329, v330, v331, v336, v332, v333, 1, v335, v337, v346, v338, v347, v339, v348, v340, v349, v341, v350, v351, v352, v353, v355, v357, v354, v345, v359, 0, v342, v344, 3, 7, 4, 8, 9, 2, v356, v358) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_625(v327:0, v328:0, v329:0, v330:0, v331:0, v336:0, v332:0, v333:0, 1, v335:0, v337:0, v346:0, v338:0, v347:0, v339:0, v348:0, v340:0, v349:0, v341:0, v350:0, v351:0, v352:0, v353:0, v355:0, v357:0, 1 + v363:0, v345:0, v359:0, 0, v342:0, v344:0, 3, 7, 4, 8, 9, 2, v356:0, 1 + v362:0) -> f_625(v327:0, v328:0, v329:0, v330:0, v331:0, v359:0, v336:0, 1 + v363:0, 1, 8 + v336:0, v337:0, v346:0, v338:0, v347:0, v339:0, v348:0, v340:0, v349:0, v341:0, v350:0, v351:0, v352:0, v353:0, v355:0, v357:0, v363:0, v345:0, v361:0, 0, v342:0, v344:0, 3, 7, 4, 8, 9, 2, 1 + v356:0, v362:0) :|: v336:0 > 0 && v328:0 < 1 + v363:0 && v362:0 > 1 && v356:0 > 0 && v361:0 > 0
Filtered unneeded arguments:
   f_625(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39) -> f_625(x2, x6, x26, x28, x38, x39)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_625(v328:0, v336:0, sum~cons_1~v363:0, v359:0, v356:0, sum~cons_1~v362:0) -> f_625(v328:0, v359:0, v363:0, v361:0, 1 + v356:0, v362:0) :|: v328:0 < 1 + v363:0 && v336:0 > 0 && v362:0 > 1 && v361:0 > 0 && v356:0 > 0 && sum~cons_1~v363:0 = 1 + v363:0 && sum~cons_1~v362:0 = 1 + v362:0

----------------------------------------

(9)
Obligation:
Rules:
f_625(v328:0, v336:0, sum~cons_1~v363:0, v359:0, v356:0, sum~cons_1~v362:0) -> f_625(v328:0, v359:0, v363:0, v361:0, 1 + v356:0, v362:0) :|: v328:0 < 1 + v363:0 && v336:0 > 0 && v362:0 > 1 && v361:0 > 0 && v356:0 > 0 && sum~cons_1~v363:0 = 1 + v363:0 && sum~cons_1~v362:0 = 1 + v362:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_625(v328:0:0, v336:0:0, sum~cons_1~v363:0:0, v359:0:0, v356:0:0, sum~cons_1~v362:0:0) -> f_625(v328:0:0, v359:0:0, v363:0:0, v361:0:0, 1 + v356:0:0, v362:0:0) :|: v361:0:0 > 0 && v356:0:0 > 0 && v362:0:0 > 1 && v336:0:0 > 0 && v328:0:0 < 1 + v363:0:0 && sum~cons_1~v363:0:0 = 1 + v363:0:0 && sum~cons_1~v362:0:0 = 1 + v362:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_625 ] = f_625_6

The following rules are decreasing:
f_625(v328:0:0, v336:0:0, sum~cons_1~v363:0:0, v359:0:0, v356:0:0, sum~cons_1~v362:0:0) -> f_625(v328:0:0, v359:0:0, v363:0:0, v361:0:0, 1 + v356:0:0, v362:0:0) :|: v361:0:0 > 0 && v356:0:0 > 0 && v362:0:0 > 1 && v336:0:0 > 0 && v328:0:0 < 1 + v363:0:0 && sum~cons_1~v363:0:0 = 1 + v363:0:0 && sum~cons_1~v362:0:0 = 1 + v362:0:0

The following rules are bounded:
f_625(v328:0:0, v336:0:0, sum~cons_1~v363:0:0, v359:0:0, v356:0:0, sum~cons_1~v362:0:0) -> f_625(v328:0:0, v359:0:0, v363:0:0, v361:0:0, 1 + v356:0:0, v362:0:0) :|: v361:0:0 > 0 && v356:0:0 > 0 && v362:0:0 > 1 && v336:0:0 > 0 && v328:0:0 < 1 + v363:0:0 && sum~cons_1~v363:0:0 = 1 + v363:0:0 && sum~cons_1~v362:0:0 = 1 + v362:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_501(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v139) -> f_502(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v139) :|: 0 = 0
f_502(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v139) -> f_503(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v139) :|: 0 = 0
f_503(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v139) -> f_504(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v139) :|: v117 = v109 + v108
f_504(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v139) -> f_505(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v139) :|: v122 < v117
f_505(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v139) -> f_507(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v139) :|: 0 = 0
f_507(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v139) -> f_509(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v139) :|: TRUE
f_509(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v139) -> f_511(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) :|: v141 = 15 + v140 && v140 % 4 = 0 && 16 <= v141
f_511(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) -> f_513(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v116, v119, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) :|: 0 = 0
f_513(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v116, v119, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) -> f_515(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v116, v119, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) :|: TRUE
f_515(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v116, v119, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) -> f_517(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v120, v121, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) :|: 0 = 0
f_517(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v120, v121, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) -> f_519(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v120, v121, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) :|: 0 = 0
f_519(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v120, v121, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) -> f_521(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v120, v119, v121, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) :|: 0 = 0
f_521(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v120, v119, v121, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) -> f_523(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v120, v119, v121, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) :|: TRUE
f_523(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v120, v119, v121, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) -> f_525(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v121, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v120, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) :|: 0 = 0
f_525(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v121, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v120, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) -> f_527(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v121, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v120, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) :|: 0 = 0
f_527(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v121, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v120, v128, 3, 7, 4, 8, 15, 2, 9, v139, 16) -> f_529(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v120, v128, 3, 7, 4, 15, 8, 2, v139, 16, 9) :|: v148 = 8 + v140 && 9 <= v148
f_529(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v141, v120, v128, 3, 7, 4, 15, 8, 2, v139, 16, 9) -> f_531(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) :|: v152 = 1 + v139 && 2 <= v152
f_531(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) -> f_533(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) :|: 0 = 0
f_533(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) -> f_535(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) :|: TRUE
f_535(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) -> f_537(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) :|: TRUE
f_537(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v116, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) -> f_539(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) :|: 0 = 0
f_539(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) -> f_541(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v158, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) :|: v158 = 1 + v122
f_541(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v158, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) -> f_543(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v158, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) :|: TRUE
f_543(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v158, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) -> f_545(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v158, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) :|: TRUE
f_545(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v158, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) -> f_500(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v140, v119, v148, v158, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v152) :|: TRUE
f_500(v108, v109, v110, v111, v112, v113, v114, 0, v116, v117, 1, v119, v120, v121, v122, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v139) -> f_501(v108, v109, v110, v111, v112, v113, v114, 0, v122, v117, 1, v119, v116, v120, v121, v123, v129, v124, v130, v125, v131, v126, v132, v127, v133, v134, v135, v136, v137, v138, v128, 3, 7, 4, 8, 2, 9, v139) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_501(v108:0, v109:0, v110:0, v111:0, v112:0, v113:0, v114:0, 0, v122:0, v109:0 + v108:0, 1, v119:0, v116:0, v120:0, v121:0, v123:0, v129:0, v124:0, v130:0, v125:0, v131:0, v126:0, v132:0, v127:0, v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v128:0, 3, 7, 4, 8, 2, 9, v139:0) -> f_501(v108:0, v109:0, v110:0, v111:0, v112:0, v113:0, v114:0, 0, 1 + v122:0, v109:0 + v108:0, 1, v140:0, v122:0, v119:0, 8 + v140:0, v123:0, v129:0, v124:0, v130:0, v125:0, v131:0, v126:0, v132:0, v127:0, v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v128:0, 3, 7, 4, 8, 2, 9, 1 + v139:0) :|: v122:0 < v109:0 + v108:0 && v140:0 % 4 = 0 && v140:0 > 0 && v139:0 > 0
Filtered unneeded arguments:
   f_501(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38) -> f_501(x1, x2, x9, x10, x38)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_501(v108:0, v109:0, v122:0, sum~v109:0~v108:0, v139:0) -> f_501(v108:0, v109:0, 1 + v122:0, v109:0 + v108:0, 1 + v139:0) :|: v122:0 < v109:0 + v108:0 && v139:0 > 0 && sum~v109:0~v108:0 = v109:0 + v108:0

----------------------------------------

(16)
Obligation:
Rules:
f_501(v108:0, v109:0, v122:0, sum~v109:0~v108:0, v139:0) -> f_501(v108:0, v109:0, 1 + v122:0, v109:0 + v108:0, 1 + v139:0) :|: v122:0 < v109:0 + v108:0 && v139:0 > 0 && sum~v109:0~v108:0 = v109:0 + v108:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_501(v108:0:0, v109:0:0, v122:0:0, sum~v109:0:0~v108:0:0, v139:0:0) -> f_501(v108:0:0, v109:0:0, 1 + v122:0:0, v109:0:0 + v108:0:0, 1 + v139:0:0) :|: v122:0:0 < v109:0:0 + v108:0:0 && v139:0:0 > 0 && sum~v109:0:0~v108:0:0 = v109:0:0 + v108:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_501(x, x1, x2, x3, x4)] = -1 + x + x1 - x2

The following rules are decreasing:
f_501(v108:0:0, v109:0:0, v122:0:0, sum~v109:0:0~v108:0:0, v139:0:0) -> f_501(v108:0:0, v109:0:0, 1 + v122:0:0, v109:0:0 + v108:0:0, 1 + v139:0:0) :|: v122:0:0 < v109:0:0 + v108:0:0 && v139:0:0 > 0 && sum~v109:0:0~v108:0:0 = v109:0:0 + v108:0:0
The following rules are bounded:
f_501(v108:0:0, v109:0:0, v122:0:0, sum~v109:0:0~v108:0:0, v139:0:0) -> f_501(v108:0:0, v109:0:0, 1 + v122:0:0, v109:0:0 + v108:0:0, 1 + v139:0:0) :|: v122:0:0 < v109:0:0 + v108:0:0 && v139:0:0 > 0 && sum~v109:0:0~v108:0:0 = v109:0:0 + v108:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
