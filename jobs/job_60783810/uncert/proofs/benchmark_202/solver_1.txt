YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/4RRvx.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1203 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 58 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/4RRvx.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/4RRvx.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32, 3 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		%8 = alloca i32, align 4
		%9 = alloca i32, align 4
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		store %3, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %9)
		store 0, %9
		br %10
	10:
		%11 = load %5
		%12 = icmp sle %11 100
		br %12, %13, %17
	13:
		%14 = load %6
		%15 = load %7
		%16 = icmp sle %14 %15
		br %17
	17:
		%18 = phi [0, %10], [%16, %13]
		br %18, %19, %28
	19:
		%20 = load %5
		store %20, %8
		%21 = load %6
		store %21, %5
		%22 = load %8
		%23 = add i32 %22, 1
		store %23, %6
		%24 = load %7
		%25 = sub i32 %24, 1
		store %25, %7
		%26 = load %9
		%27 = add i32 %26, 1
		store %27, %9
		br %10
	28:
		%29 = load %9
		ret %29

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 48
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @__VERIFIER_nondet_int()
		%6 = call i32 @test_fun(i32 %2, i32 %3, i32 %4, i32 %5)
		ret %6


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 25 rulesP rules:
f_397(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v694, v691, v695, v696, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_398(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v694, v691, v695, v696, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: v693 <= 100
f_398(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v694, v691, v695, v696, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_400(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v694, v691, v695, v696, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: 0 = 0
f_400(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v694, v691, v695, v696, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_402(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v694, v691, v695, v696, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: TRUE
f_402(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v694, v691, v695, v696, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_404(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v694, v691, v696, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: 0 = 0
f_404(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v694, v691, v696, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_406(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: 0 = 0
f_406(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_408(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: v695 <= v696
f_408(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_411(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: 0 = 0
f_411(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_413(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: 0 = 0
f_413(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_415(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: TRUE
f_415(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_417(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: 0 = 0
f_417(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_419(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: TRUE
f_419(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_421(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: 0 = 0
f_421(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_422(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: TRUE
f_422(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v691, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_423(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: 0 = 0
f_423(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_424(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: v805 = 1 + v693 && v805 <= 101
f_424(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_425(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: TRUE
f_425(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v694, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_426(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: 0 = 0
f_426(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_427(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v807, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: 1 + v807 = v696
f_427(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v807, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_428(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v807, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: TRUE
f_428(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v807, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_429(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v807, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: 0 = 0
f_429(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v807, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_430(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v807, v698, v809, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4, 2) :|: v809 = 1 + v698 && 2 <= v809
f_430(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v807, v698, v809, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4, 2) -> f_431(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v807, v698, v809, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4, 2) :|: TRUE
f_431(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v807, v698, v809, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4, 2) -> f_432(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v807, v698, v809, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4, 2) :|: TRUE
f_432(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v807, v698, v809, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4, 2) -> f_396(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v695, v696, v805, v807, v698, v809, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: TRUE
f_396(v682, v683, v684, v685, v686, v687, v688, v689, v690, v691, 1, v693, v694, v695, v696, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) -> f_397(v682, v683, v684, v685, v686, v687, v688, v689, v690, v693, 1, v694, v691, v695, v696, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 100, 101, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_397(v682:0, v683:0, v684:0, v685:0, v686:0, v687:0, v688:0, v689:0, v690:0, v693:0, 1, v694:0, v691:0, v695:0, 1 + v807:0, v697:0, v698:0, v699:0, v700:0, v701:0, v702:0, v703:0, v704:0, v705:0, 0, 3, 100, 101, 4) -> f_397(v682:0, v683:0, v684:0, v685:0, v686:0, v687:0, v688:0, v689:0, v690:0, v695:0, 1, 1 + v807:0, v693:0, 1 + v693:0, v807:0, v698:0, 1 + v698:0, v699:0, v700:0, v701:0, v702:0, v703:0, v704:0, v705:0, 0, 3, 100, 101, 4) :|: v693:0 < 101 && v695:0 <= 1 + v807:0 && v698:0 > 0
Filtered unneeded arguments:
   f_397(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_397(x10, x14, x15, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_397(v693:0, v695:0, sum~cons_1~v807:0, v698:0) -> f_397(v695:0, 1 + v693:0, v807:0, 1 + v698:0) :|: v695:0 <= 1 + v807:0 && v698:0 > 0 && v693:0 < 101 && sum~cons_1~v807:0 = 1 + v807:0

----------------------------------------

(8)
Obligation:
Rules:
f_397(v693:0, v695:0, sum~cons_1~v807:0, v698:0) -> f_397(v695:0, 1 + v693:0, v807:0, 1 + v698:0) :|: v695:0 <= 1 + v807:0 && v698:0 > 0 && v693:0 < 101 && sum~cons_1~v807:0 = 1 + v807:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_397(v693:0:0, v695:0:0, sum~cons_1~v807:0:0, v698:0:0) -> f_397(v695:0:0, 1 + v693:0:0, v807:0:0, 1 + v698:0:0) :|: v695:0:0 <= 1 + v807:0:0 && v698:0:0 > 0 && v693:0:0 < 101 && sum~cons_1~v807:0:0 = 1 + v807:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_397(x, x1, x2, x3)] = 100 - x - x1 + x2

The following rules are decreasing:
f_397(v693:0:0, v695:0:0, sum~cons_1~v807:0:0, v698:0:0) -> f_397(v695:0:0, 1 + v693:0:0, v807:0:0, 1 + v698:0:0) :|: v695:0:0 <= 1 + v807:0:0 && v698:0:0 > 0 && v693:0:0 < 101 && sum~cons_1~v807:0:0 = 1 + v807:0:0
The following rules are bounded:
f_397(v693:0:0, v695:0:0, sum~cons_1~v807:0:0, v698:0:0) -> f_397(v695:0:0, 1 + v693:0:0, v807:0:0, 1 + v698:0:0) :|: v695:0:0 <= 1 + v807:0:0 && v698:0:0 > 0 && v693:0:0 < 101 && sum~cons_1~v807:0:0 = 1 + v807:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
