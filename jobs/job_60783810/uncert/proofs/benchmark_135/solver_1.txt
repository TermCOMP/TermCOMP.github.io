MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/TOkT3.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 56 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 261 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
    (7) SCC2IRS [SOUND, 35 ms]
    (8) IntTRS
        (9) IntTRSNonPeriodicNontermProof [COMPLETE, 4 ms]
        (10) NO
    (11) SCC2IRS [SOUND, 0 ms]
    (12) IntTRS
        (13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (14) IntTRS
        (15) IntTRSNonPeriodicNontermProof [COMPLETE, 2 ms]
        (16) NO
(17) SEGraph to IRS [SOUND, 41 ms]
(18) IntTRS
    (19) IRSNoOverapproximation [EQUIVALENT, 0 ms]
    (20) MAYBE
(21) SEGraph to IRS [SOUND, 36 ms]
(22) IntTRS
    (23) IRSToKoat [EQUIVALENT, 0 ms]
    (24) Koat Problem
    (25) KoAT2 [EQUIVALENT, 332 ms]
    (26) MAYBE


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/TOkT3.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/TOkT3.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_String" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 11
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i8, align 8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %1
		%4 = load %1
		%5 = icmp slt %4 1
		br %5, %6, %7
	6:
		store 1, %1
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		%8 = load %1
		%9 = sext i32 %8 to i64
		%10 = mul i64 %9, 1
		%11 = call noalias *i8 @malloc(i64 %10)
		store %11, %2
		%12 = load %2
		%13 = load %1
		%14 = sub i32 %13, 1
		%15 = sext i32 %14 to i64
		%16 = getelementptr %12, %15
		store 0, %16
		%17 = load %2
		ret %17

*BasicFunctionTypename: "cstrlen" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 36
	0:
		%2 = alloca *i8, align 8
		%3 = alloca *i8, align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%4 = load %2
		store %4, %3
		br %5
	5:
		%6 = load %3
		%7 = load %6
		%8 = sext i8 %7 to i32
		%9 = icmp ne %8 0
		br %9, %10, %13
	10:
		%11 = load %3
		%12 = getelementptr %11, 2
		store %12, %3
		br %5
	13:
		%14 = load %3
		%15 = load %2
		%16 = ptrtoint *i8 %14 to i64
		%17 = ptrtoint *i8 %15 to i64
		%18 = sub i64 %16, %17
		%19 = trunc i64 %18 to i32
		ret %19

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 60
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call *i8 @__VERIFIER_nondet_String()
		%3 = call i32 @cstrlen(*i8 %2)
		ret %3


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 11 rulesP rules:
f_233(v38, v39, v40, v44, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_234(v38, v39, v40, v44, v52, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: TRUE
f_234(v38, v39, v40, v44, v52, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_235(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_235(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_236(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: v52 != 0
f_236(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_238(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_238(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_240(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: TRUE
f_240(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_242(v38, v39, v40, v44, v52, 1, v45, v46, v47, v48, v49, v50, 0, 3, 7, 4, 2, 8) :|: 0 = 0
f_242(v38, v39, v40, v44, v52, 1, v45, v46, v47, v48, v49, v50, 0, 3, 7, 4, 2, 8) -> f_244(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) :|: v54 = 2 + v44 && 5 <= v54
f_244(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) -> f_246(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) :|: TRUE
f_246(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) -> f_248(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) :|: TRUE
f_248(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) -> f_232(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: TRUE
f_232(v38, v39, v40, v41, v42, 1, v44, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_233(v38, v39, v40, v44, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_233(v38:0, v39:0, v40:0, v44:0, v42:0, 1, v41:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) -> f_233(v38:0, v39:0, v40:0, 2 + v44:0, v52:0, 1, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) :|: v44:0 > 2 && v52:0 < 0
f_233(v38:0, v39:0, v40:0, v44:0, v42:0, 1, v41:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) -> f_233(v38:0, v39:0, v40:0, 2 + v44:0, v52:0, 1, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) :|: v44:0 > 2 && v52:0 > 0
Filtered unneeded arguments:
   f_233(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_233(x4)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_233(v44:0) -> f_233(2 + v44:0) :|: v44:0 > 2

----------------------------------------

(8)
Obligation:
Rules:
f_233(v44:0) -> f_233(2 + v44:0) :|: v44:0 > 2

----------------------------------------

(9) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v44:0) -> f(1, 2 + v44:0) :|: pc = 1 && v44:0 > 2
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
(((run2_0 = ((1 * 1)) and run2_1 = ((1 * 2) + (run1_1 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and ((run1_1 * 1)) > ((1 * 2)))) and !(((run2_0 * 1)) = ((1 * 1)) and ((run2_1 * 1)) > ((1 * 2))))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
((run2_0 = ((1 * 1)) and run2_1 = ((1 * 2) + (run1_1 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and ((run1_1 * 1)) > ((1 * 2))))

----------------------------------------

(10)
NO

----------------------------------------

(11) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 11 rulesP rules:
f_233(v38, v39, v40, v44, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_234(v38, v39, v40, v44, v52, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: TRUE
f_234(v38, v39, v40, v44, v52, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_235(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_235(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_236(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: v52 != 0
f_236(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_238(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_238(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_240(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: TRUE
f_240(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_242(v38, v39, v40, v44, v52, 1, v45, v46, v47, v48, v49, v50, 0, 3, 7, 4, 2, 8) :|: 0 = 0
f_242(v38, v39, v40, v44, v52, 1, v45, v46, v47, v48, v49, v50, 0, 3, 7, 4, 2, 8) -> f_244(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) :|: v54 = 2 + v44 && 5 <= v54
f_244(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) -> f_246(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) :|: TRUE
f_246(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) -> f_248(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) :|: TRUE
f_248(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) -> f_232(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: v38 < v47 && 1 <= v38 && 1 <= v39 && 1 <= v40 && 1 <= v44 && 3 <= v54 && 1 <= v45 && 4 <= v46 && 2 <= v47 && 8 <= v48 && 8 <= v49 && v45 <= v46 && v38 <= v47 && v39 <= v48 && v40 <= v49
f_232(v38, v39, v40, v41, v42, 1, v44, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_233(v38, v39, v40, v44, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_233(v38:0, v39:0, v40:0, v44:0, v42:0, 1, v41:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) -> f_233(v38:0, v39:0, v40:0, 2 + v44:0, v52:0, 1, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) :|: v44:0 > 2 && v47:0 > v38:0 && v38:0 > 0 && v39:0 > 0 && v40:0 > 0 && v45:0 > 0 && v46:0 > 3 && v47:0 > 1 && v52:0 < 0 && v48:0 > 7 && v49:0 > 7 && v46:0 >= v45:0 && v49:0 >= v40:0 && v48:0 >= v39:0
f_233(v38:0, v39:0, v40:0, v44:0, v42:0, 1, v41:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) -> f_233(v38:0, v39:0, v40:0, 2 + v44:0, v52:0, 1, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) :|: v44:0 > 2 && v47:0 > v38:0 && v38:0 > 0 && v39:0 > 0 && v40:0 > 0 && v45:0 > 0 && v46:0 > 3 && v47:0 > 1 && v52:0 > 0 && v48:0 > 7 && v49:0 > 7 && v46:0 >= v45:0 && v49:0 >= v40:0 && v48:0 >= v39:0
Filtered unneeded arguments:
   f_233(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_233(x1, x2, x3, x4, x8, x9, x10, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_233(v38:0, v39:0, v40:0, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0) -> f_233(v38:0, v39:0, v40:0, 2 + v44:0, v45:0, v46:0, v47:0, v48:0, v49:0) :|: v47:0 > v38:0 && v44:0 > 2 && v38:0 > 0 && v39:0 > 0 && v40:0 > 0 && v45:0 > 0 && v46:0 > 3 && v47:0 > 1 && v48:0 > 7 && v49:0 > 7 && v46:0 >= v45:0 && v48:0 >= v39:0 && v49:0 >= v40:0

----------------------------------------

(12)
Obligation:
Rules:
f_233(v38:0, v39:0, v40:0, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0) -> f_233(v38:0, v39:0, v40:0, 2 + v44:0, v45:0, v46:0, v47:0, v48:0, v49:0) :|: v47:0 > v38:0 && v44:0 > 2 && v38:0 > 0 && v39:0 > 0 && v40:0 > 0 && v45:0 > 0 && v46:0 > 3 && v47:0 > 1 && v48:0 > 7 && v49:0 > 7 && v46:0 >= v45:0 && v48:0 >= v39:0 && v49:0 >= v40:0

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f_233(v38:0:0, v39:0:0, v40:0:0, v44:0:0, v45:0:0, v46:0:0, v47:0:0, v48:0:0, v49:0:0) -> f_233(v38:0:0, v39:0:0, v40:0:0, 2 + v44:0:0, v45:0:0, v46:0:0, v47:0:0, v48:0:0, v49:0:0) :|: v48:0:0 >= v39:0:0 && v49:0:0 >= v40:0:0 && v46:0:0 >= v45:0:0 && v49:0:0 > 7 && v48:0:0 > 7 && v47:0:0 > 1 && v46:0:0 > 3 && v45:0:0 > 0 && v40:0:0 > 0 && v39:0:0 > 0 && v38:0:0 > 0 && v44:0:0 > 2 && v47:0:0 > v38:0:0

----------------------------------------

(15) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v38:0:0, v39:0:0, v40:0:0, v44:0:0, v45:0:0, v46:0:0, v47:0:0, v48:0:0, v49:0:0) -> f(1, v38:0:0, v39:0:0, v40:0:0, 2 + v44:0:0, v45:0:0, v46:0:0, v47:0:0, v48:0:0, v49:0:0) :|: pc = 1 && (v48:0:0 >= v39:0:0 && v49:0:0 >= v40:0:0 && v46:0:0 >= v45:0:0 && v49:0:0 > 7 && v48:0:0 > 7 && v47:0:0 > 1 && v46:0:0 > 3 && v45:0:0 > 0 && v40:0:0 > 0 && v39:0:0 > 0 && v38:0:0 > 0 && v44:0:0 > 2 && v47:0:0 > v38:0:0)
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
(((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1)) and run2_2 = ((run1_2 * 1)) and run2_3 = ((run1_3 * 1)) and run2_4 = ((1 * 2) + (run1_4 * 1)) and run2_5 = ((run1_5 * 1)) and run2_6 = ((run1_6 * 1)) and run2_7 = ((run1_7 * 1)) and run2_8 = ((run1_8 * 1)) and run2_9 = ((run1_9 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and ((((((((((((((run1_8 * 1)) >= ((run1_2 * 1)) and ((run1_9 * 1)) >= ((run1_3 * 1))) and ((run1_6 * 1)) >= ((run1_5 * 1))) and ((run1_9 * 1)) > ((1 * 7))) and ((run1_8 * 1)) > ((1 * 7))) and ((run1_7 * 1)) > ((1 * 1))) and ((run1_6 * 1)) > ((1 * 3))) and ((run1_5 * 1)) > 0) and ((run1_3 * 1)) > 0) and ((run1_2 * 1)) > 0) and ((run1_1 * 1)) > 0) and ((run1_4 * 1)) > ((1 * 2))) and ((run1_7 * 1)) > ((run1_1 * 1))))) and !(((run2_0 * 1)) = ((1 * 1)) and ((((((((((((((run2_8 * 1)) >= ((run2_2 * 1)) and ((run2_9 * 1)) >= ((run2_3 * 1))) and ((run2_6 * 1)) >= ((run2_5 * 1))) and ((run2_9 * 1)) > ((1 * 7))) and ((run2_8 * 1)) > ((1 * 7))) and ((run2_7 * 1)) > ((1 * 1))) and ((run2_6 * 1)) > ((1 * 3))) and ((run2_5 * 1)) > 0) and ((run2_3 * 1)) > 0) and ((run2_2 * 1)) > 0) and ((run2_1 * 1)) > 0) and ((run2_4 * 1)) > ((1 * 2))) and ((run2_7 * 1)) > ((run2_1 * 1)))))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1)) and run2_2 = ((run1_2 * 1)) and run2_3 = ((run1_3 * 1)) and run2_4 = ((1 * 2) + (run1_4 * 1)) and run2_5 = ((run1_5 * 1)) and run2_6 = ((run1_6 * 1)) and run2_7 = ((run1_7 * 1)) and run2_8 = ((run1_8 * 1)) and run2_9 = ((run1_9 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and ((((((((((((((run1_8 * 1)) >= ((run1_2 * 1)) and ((run1_9 * 1)) >= ((run1_3 * 1))) and ((run1_6 * 1)) >= ((run1_5 * 1))) and ((run1_9 * 1)) > ((1 * 7))) and ((run1_8 * 1)) > ((1 * 7))) and ((run1_7 * 1)) > ((1 * 1))) and ((run1_6 * 1)) > ((1 * 3))) and ((run1_5 * 1)) > 0) and ((run1_3 * 1)) > 0) and ((run1_2 * 1)) > 0) and ((run1_1 * 1)) > 0) and ((run1_4 * 1)) > ((1 * 2))) and ((run1_7 * 1)) > ((run1_1 * 1)))))

----------------------------------------

(16)
NO

----------------------------------------

(17) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 55 rulesP rules:
f_166 -> f_167(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_167(v1, v2, 3, 1, 4) -> f_168(v1, v2, 0, 3, 1, 4) :|: TRUE
f_168(v1, v2, 0, 3, 1, 4) -> f_169(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_169(v1, v3, v2, v4, 0, 3, 1, 4) -> f_170(v3, v1, v2, v4, 0, 3, 1, 4) :|: 0 = 0
f_170(v3, v1, v2, v4, 0, 3, 1, 4) -> f_171(v3, v5, v1, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: 1 <= v5 && v6 = 7 + v5 && 8 <= v6
f_171(v3, v5, v1, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_172(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: 1 <= v7 && v8 = 7 + v7 && 8 <= v8
f_172(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_173(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: TRUE
f_173(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_174(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: TRUE
f_174(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_175(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: TRUE
f_175(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_176(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_176(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_177(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: TRUE
f_177(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_178(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: TRUE
f_178(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_179(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_179(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_180(v3, v5, v7, v11, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: TRUE
f_180(v3, v5, v7, v11, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_181(v3, v5, v7, v11, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_181(v3, v5, v7, v11, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_182(v3, v5, v7, v11, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 2, 8) :|: v11 != 0 && v3 < v4 && 2 <= v4
f_181(v3, v5, v7, v11, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_183(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: v11 = 0
f_182(v3, v5, v7, v11, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 2, 8) -> f_184(v3, v5, v7, v11, 1, v1, v2, v4, v6, v8, 0, 3, 7, 4, 2, 8) :|: 0 = 0
f_183(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_185(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: 0 = 0
f_184(v3, v5, v7, v11, 1, v1, v2, v4, v6, v8, 0, 3, 7, 4, 2, 8) -> f_186(v3, v5, v7, v11, 1, v1, v2, v4, v6, v8, 0, 3, 7, 4, 2, 8) :|: TRUE
f_185(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_187(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: TRUE
f_186(v3, v5, v7, v11, 1, v1, v2, v4, v6, v8, 0, 3, 7, 4, 2, 8) -> f_188(v3, v5, v7, v11, 1, v1, v2, v4, v6, v8, 0, 3, 7, 4, 2, 8) :|: 0 = 0
f_187(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_189(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: 0 = 0
f_188(v3, v5, v7, v11, 1, v1, v2, v4, v6, v8, 0, 3, 7, 4, 2, 8) -> f_190(v3, v5, v7, v11, 1, v13, v1, v2, v4, v6, v8, 0, 3, 7, 2, 4, 8) :|: v13 = 2 + v3 && 3 <= v13
f_189(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_191(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: 0 = 0
f_190(v3, v5, v7, v11, 1, v13, v1, v2, v4, v6, v8, 0, 3, 7, 2, 4, 8) -> f_192(v3, v5, v7, v11, 1, v13, v1, v2, v4, v6, v8, 0, 3, 7, 2, 4, 8) :|: TRUE
f_191(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_193(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: 0 = 0
f_192(v3, v5, v7, v11, 1, v13, v1, v2, v4, v6, v8, 0, 3, 7, 2, 4, 8) -> f_194(v3, v5, v7, v11, 1, v13, v1, v2, v4, v6, v8, 0, 3, 7, 2, 4, 8) :|: TRUE
f_193(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_195(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: 0 = 0
f_194(v3, v5, v7, v11, 1, v13, v1, v2, v4, v6, v8, 0, 3, 7, 2, 4, 8) -> f_215(v3, v5, v7, v3, v11, 1, v13, v1, v2, v4, v6, v8, v11, 0, 3, 7, 2, 4, 8) :|: TRUE
f_195(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_197(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: 0 = 0
f_197(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_199(v3, v5, v7, 0, v17, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: TRUE
f_199(v3, v5, v7, 0, v17, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_201(v1, v3, v17, v2, v4, 0, 3, 1, 4) :|: 0 = 0
f_215(v20, v21, v22, v23, v24, 1, v26, v27, v28, v29, v30, v31, v32, 0, 3, 7, 2, 4, 8) -> f_232(v20, v21, v22, v23, v24, 1, v26, v27, v28, v29, v30, v31, v32, 0, 3, 7, 2, 4, 8) :|: TRUE
f_232(v38, v39, v40, v41, v42, 1, v44, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_233(v38, v39, v40, v44, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_233(v38, v39, v40, v44, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_234(v38, v39, v40, v44, v52, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: TRUE
f_234(v38, v39, v40, v44, v52, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_235(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_235(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_236(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: v52 != 0
f_235(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_237(v38, v39, v40, v44, 0, 1, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 4, 8) :|: v52 = 0
f_236(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_238(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_237(v38, v39, v40, v44, 0, 1, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 4, 8) -> f_239(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: 0 = 0
f_238(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_240(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: TRUE
f_239(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_241(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: TRUE
f_240(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_242(v38, v39, v40, v44, v52, 1, v45, v46, v47, v48, v49, v50, 0, 3, 7, 4, 2, 8) :|: 0 = 0
f_241(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_243(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: 0 = 0
f_242(v38, v39, v40, v44, v52, 1, v45, v46, v47, v48, v49, v50, 0, 3, 7, 4, 2, 8) -> f_244(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) :|: v54 = 2 + v44 && 5 <= v54
f_243(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_245(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: 0 = 0
f_244(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) -> f_246(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) :|: TRUE
f_245(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_247(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: 0 = 0
f_246(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) -> f_248(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) :|: TRUE
f_247(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_249(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: 0 = 0
f_248(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) -> f_232(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: TRUE
f_249(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_250(v38, v39, v40, v44, 0, v41, v70, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: v70 + v38 = v44
f_250(v38, v39, v40, v44, 0, v41, v70, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_251(v38, v39, v40, v44, 0, v41, v70, v71, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: TRUE
f_251(v38, v39, v40, v44, 0, v41, v70, v71, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_252(v45, v38, v71, v46, v47, v50, 0, 3, 1, 4, 2) :|: 0 = 0
Combined rules. Obtained 6 rulesP rules:
f_166 -> f_235(v3:0, v5:0, v7:0, 2 + v3:0, v52:0, 1, v3:0, v1:0, 3 + v1:0, v4:0, 7 + v5:0, 7 + v7:0, v11:0, 0, 3, 7, 2, 4, 8) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v4:0 > v3:0 && v11:0 < 0 && v3:0 > 0 && v4:0 > 1
f_166 -> f_235(v3:0, v5:0, v7:0, 2 + v3:0, v52:0, 1, v3:0, v1:0, 3 + v1:0, v4:0, 7 + v5:0, 7 + v7:0, v11:0, 0, 3, 7, 2, 4, 8) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v4:0 > v3:0 && v11:0 > 0 && v3:0 > 0 && v4:0 > 1
f_166 -> f_201(v1:0, v3:0, v17:0, 3 + v1:0, v4:0, 0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0
f_235(v38:0, v39:0, v40:0, v44:0, v52:0, 1, v41:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) -> f_235(v38:0, v39:0, v40:0, 2 + v44:0, v52:1, 1, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) :|: v44:0 > 2 && v52:0 < 0
f_235(v38:0, v39:0, v40:0, v44:0, v52:0, 1, v41:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) -> f_235(v38:0, v39:0, v40:0, 2 + v44:0, v52:1, 1, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) :|: v44:0 > 2 && v52:0 > 0
f_235(v38:0, v39:0, v40:0, v70:0 + v38:0, 0, 1, v41:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) -> f_252(v45:0, v38:0, v71:0, v46:0, v47:0, v50:0, 0, 3, 1, 4, 2) :|: TRUE
Filtered unneeded arguments:
   f_235(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_235(x1, x4, x5)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_166 -> f_235(v3:0, 2 + v3:0, v52:0) :|: v3:0 > 0
f_166 -> f_201(v1:0, v3:0, v17:0, 3 + v1:0, v4:0, 0, 3, 1, 4) :|: v1:0 > 0
f_235(v38:0, v44:0, v52:0) -> f_235(v38:0, 2 + v44:0, v52:1) :|: v44:0 > 2 && v52:0 < 0
f_235(v38:0, v44:0, v52:0) -> f_235(v38:0, 2 + v44:0, v52:1) :|: v44:0 > 2 && v52:0 > 0
f_235(v38:0, sum~v70:0~v38:0, cons_0) -> f_252(v45:0, v38:0, v71:0, v46:0, v47:0, v50:0, 0, 3, 1, 4, 2) :|: TRUE && sum~v70:0~v38:0 = v70:0 + v38:0 && cons_0 = 0

----------------------------------------

(18)
Obligation:
Rules:
f_166 -> f_235(v3:0, 2 + v3:0, v52:0) :|: v3:0 > 0
f_166 -> f_201(x, x1, x2, 3 + x, x3, 0, 3, 1, 4) :|: x > 0
f_235(x4, x5, x6) -> f_235(x4, 2 + x5, x7) :|: x5 > 2 && x6 < 0
f_235(x8, x9, x10) -> f_235(x8, 2 + x9, x11) :|: x9 > 2 && x10 > 0
f_235(v38:0, sum~v70:0~v38:0, cons_0) -> f_252(v45:0, v38:0, v71:0, v46:0, v47:0, v50:0, 0, 3, 1, 4, 2) :|: TRUE && sum~v70:0~v38:0 = v70:0 + v38:0 && cons_0 = 0
Start term: f_166

----------------------------------------

(19) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination is aborted since the IRSProblem over-approximates
----------------------------------------

(20)
MAYBE

----------------------------------------

(21) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 55 rulesP rules:
f_166 -> f_167(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_167(v1, v2, 3, 1, 4) -> f_168(v1, v2, 0, 3, 1, 4) :|: TRUE
f_168(v1, v2, 0, 3, 1, 4) -> f_169(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_169(v1, v3, v2, v4, 0, 3, 1, 4) -> f_170(v3, v1, v2, v4, 0, 3, 1, 4) :|: 0 = 0
f_170(v3, v1, v2, v4, 0, 3, 1, 4) -> f_171(v3, v5, v1, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: 1 <= v5 && v6 = 7 + v5 && 8 <= v6
f_171(v3, v5, v1, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_172(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: 1 <= v7 && v8 = 7 + v7 && 8 <= v8
f_172(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_173(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: TRUE
f_173(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_174(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: TRUE
f_174(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_175(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: TRUE
f_175(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_176(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_176(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_177(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: TRUE
f_177(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_178(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: TRUE
f_178(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_179(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_179(v3, v5, v7, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_180(v3, v5, v7, v11, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: TRUE
f_180(v3, v5, v7, v11, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_181(v3, v5, v7, v11, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_181(v3, v5, v7, v11, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_182(v3, v5, v7, v11, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 2, 8) :|: v11 != 0 && v3 < v4 && 2 <= v4
f_181(v3, v5, v7, v11, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 8) -> f_183(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: v11 = 0
f_182(v3, v5, v7, v11, v1, v2, v4, v6, v8, 0, 3, 7, 1, 4, 2, 8) -> f_184(v3, v5, v7, v11, 1, v1, v2, v4, v6, v8, 0, 3, 7, 4, 2, 8) :|: 0 = 0
f_183(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_185(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: 0 = 0
f_184(v3, v5, v7, v11, 1, v1, v2, v4, v6, v8, 0, 3, 7, 4, 2, 8) -> f_186(v3, v5, v7, v11, 1, v1, v2, v4, v6, v8, 0, 3, 7, 4, 2, 8) :|: TRUE
f_185(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_187(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: TRUE
f_186(v3, v5, v7, v11, 1, v1, v2, v4, v6, v8, 0, 3, 7, 4, 2, 8) -> f_188(v3, v5, v7, v11, 1, v1, v2, v4, v6, v8, 0, 3, 7, 4, 2, 8) :|: 0 = 0
f_187(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_189(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: 0 = 0
f_188(v3, v5, v7, v11, 1, v1, v2, v4, v6, v8, 0, 3, 7, 4, 2, 8) -> f_190(v3, v5, v7, v11, 1, v13, v1, v2, v4, v6, v8, 0, 3, 7, 2, 4, 8) :|: v13 = 2 + v3 && 3 <= v13
f_189(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_191(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: 0 = 0
f_190(v3, v5, v7, v11, 1, v13, v1, v2, v4, v6, v8, 0, 3, 7, 2, 4, 8) -> f_192(v3, v5, v7, v11, 1, v13, v1, v2, v4, v6, v8, 0, 3, 7, 2, 4, 8) :|: TRUE
f_191(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_193(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: 0 = 0
f_192(v3, v5, v7, v11, 1, v13, v1, v2, v4, v6, v8, 0, 3, 7, 2, 4, 8) -> f_194(v3, v5, v7, v11, 1, v13, v1, v2, v4, v6, v8, 0, 3, 7, 2, 4, 8) :|: TRUE
f_193(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_195(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: 0 = 0
f_194(v3, v5, v7, v11, 1, v13, v1, v2, v4, v6, v8, 0, 3, 7, 2, 4, 8) -> f_215(v3, v5, v7, v3, v11, 1, v13, v1, v2, v4, v6, v8, v11, 0, 3, 7, 2, 4, 8) :|: TRUE
f_195(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_197(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: 0 = 0
f_197(v3, v5, v7, 0, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_199(v3, v5, v7, 0, v17, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) :|: TRUE
f_199(v3, v5, v7, 0, v17, v1, v2, v4, v6, v8, 3, 7, 1, 4, 8) -> f_201(v1, v3, v17, v2, v4, 0, 3, 1, 4) :|: 0 = 0
f_215(v20, v21, v22, v23, v24, 1, v26, v27, v28, v29, v30, v31, v32, 0, 3, 7, 2, 4, 8) -> f_232(v20, v21, v22, v23, v24, 1, v26, v27, v28, v29, v30, v31, v32, 0, 3, 7, 2, 4, 8) :|: TRUE
f_232(v38, v39, v40, v41, v42, 1, v44, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_233(v38, v39, v40, v44, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_233(v38, v39, v40, v44, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_234(v38, v39, v40, v44, v52, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: TRUE
f_234(v38, v39, v40, v44, v52, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_235(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_235(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_236(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: v52 != 0
f_235(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_237(v38, v39, v40, v44, 0, 1, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 4, 8) :|: v52 = 0
f_236(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_238(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_237(v38, v39, v40, v44, 0, 1, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 4, 8) -> f_239(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: 0 = 0
f_238(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_240(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: TRUE
f_239(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_241(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: TRUE
f_240(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_242(v38, v39, v40, v44, v52, 1, v45, v46, v47, v48, v49, v50, 0, 3, 7, 4, 2, 8) :|: 0 = 0
f_241(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_243(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: 0 = 0
f_242(v38, v39, v40, v44, v52, 1, v45, v46, v47, v48, v49, v50, 0, 3, 7, 4, 2, 8) -> f_244(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) :|: v54 = 2 + v44 && 5 <= v54
f_243(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_245(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: 0 = 0
f_244(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) -> f_246(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) :|: TRUE
f_245(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_247(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: 0 = 0
f_246(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) -> f_248(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) :|: TRUE
f_247(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_249(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: 0 = 0
f_248(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8, 5) -> f_232(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: TRUE
f_249(v38, v39, v40, v44, 0, v41, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_250(v38, v39, v40, v44, 0, v41, v70, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: v70 + v38 = v44
f_250(v38, v39, v40, v44, 0, v41, v70, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_251(v38, v39, v40, v44, 0, v41, v70, v71, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) :|: TRUE
f_251(v38, v39, v40, v44, 0, v41, v70, v71, v45, v46, v47, v48, v49, v50, 3, 7, 2, 1, 4, 8) -> f_252(v45, v38, v71, v46, v47, v50, 0, 3, 1, 4, 2) :|: 0 = 0
Combined rules. Obtained 6 rulesP rules:
f_166 -> f_235(v3:0, v5:0, v7:0, 2 + v3:0, v52:0, 1, v3:0, v1:0, 3 + v1:0, v4:0, 7 + v5:0, 7 + v7:0, v11:0, 0, 3, 7, 2, 4, 8) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v4:0 > v3:0 && v11:0 < 0 && v3:0 > 0 && v4:0 > 1
f_166 -> f_235(v3:0, v5:0, v7:0, 2 + v3:0, v52:0, 1, v3:0, v1:0, 3 + v1:0, v4:0, 7 + v5:0, 7 + v7:0, v11:0, 0, 3, 7, 2, 4, 8) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v4:0 > v3:0 && v11:0 > 0 && v3:0 > 0 && v4:0 > 1
f_166 -> f_201(v1:0, v3:0, v17:0, 3 + v1:0, v4:0, 0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0
f_235(v38:0, v39:0, v40:0, v44:0, v52:0, 1, v41:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) -> f_235(v38:0, v39:0, v40:0, 2 + v44:0, v52:1, 1, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) :|: v44:0 > 2 && v52:0 < 0
f_235(v38:0, v39:0, v40:0, v44:0, v52:0, 1, v41:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) -> f_235(v38:0, v39:0, v40:0, 2 + v44:0, v52:1, 1, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) :|: v44:0 > 2 && v52:0 > 0
f_235(v38:0, v39:0, v40:0, v70:0 + v38:0, 0, 1, v41:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) -> f_252(v45:0, v38:0, v71:0, v46:0, v47:0, v50:0, 0, 3, 1, 4, 2) :|: TRUE
Filtered unneeded arguments:
   f_235(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_235(x1, x4, x5)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_166 -> f_235(v3:0, 2 + v3:0, v52:0) :|: v3:0 > 0
f_166 -> f_201(v1:0, v3:0, v17:0, 3 + v1:0, v4:0, 0, 3, 1, 4) :|: v1:0 > 0
f_235(v38:0, v44:0, v52:0) -> f_235(v38:0, 2 + v44:0, v52:1) :|: v44:0 > 2 && v52:0 < 0
f_235(v38:0, v44:0, v52:0) -> f_235(v38:0, 2 + v44:0, v52:1) :|: v44:0 > 2 && v52:0 > 0
f_235(v38:0, sum~v70:0~v38:0, cons_0) -> f_252(v45:0, v38:0, v71:0, v46:0, v47:0, v50:0, 0, 3, 1, 4, 2) :|: TRUE && sum~v70:0~v38:0 = v70:0 + v38:0 && cons_0 = 0

----------------------------------------

(22)
Obligation:
Rules:
f_166 -> f_235(v3:0, 2 + v3:0, v52:0) :|: v3:0 > 0
f_166 -> f_201(x, x1, x2, 3 + x, x3, 0, 3, 1, 4) :|: x > 0
f_235(x4, x5, x6) -> f_235(x4, 2 + x5, x7) :|: x5 > 2 && x6 < 0
f_235(x8, x9, x10) -> f_235(x8, 2 + x9, x11) :|: x9 > 2 && x10 > 0
f_235(v38:0, sum~v70:0~v38:0, cons_0) -> f_252(v45:0, v38:0, v71:0, v46:0, v47:0, v50:0, 0, 3, 1, 4, 2) :|: TRUE && sum~v70:0~v38:0 = v70:0 + v38:0 && cons_0 = 0
Start term: f_166

----------------------------------------

(23) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(24)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_166))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x x40 x41 v700 k21 k20 x39 x35 x36 x37 x38 x31 x32 x'' x33 x34 k18 k19 x30 k14 k15 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x68 x9 x25 x69 x6 x26 x7 x27 x20 x64 x21 x65 x22 x66 x23 x67 x60 x1 x61 x62 x63 k7 k8 k5 k6 k9 x' k0 k3 k4 k1 k2 x17 x18 x19 x13 x57 x14 x58 x15 x59 x16 x53 x10 x54 x11 x55 x12 x56 x50 x51 x52)
(RULES
  f_166(x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8) -> f_235(k10, 2 + k10, k1, x9, x10, x11, x12, x13, x14, x15, x16) :|: k10 > 0
  f_166(x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67) -> f_201(k20, k21, k12, 3 + k20, k13, 0, 3, 1, 4, x68, x69) :|: k20 > 0
  f_235(k14, k15, k18, x17, x18, x19, x20, x21, x22, x23, x24) -> f_235(k14, 2 + k15, k19, x25, x26, x27, x28, x29, x30, x31, x32) :|: k15 > 2 && k18 > 0
  f_235(k8, k0, k4, x33, x34, x35, x36, x37, x38, x39, x40) -> f_252(k5, k8, k2, k7, k6, k3, 0, 3, 1, 4, 2) :|: 0 = 0 && k0 = v700 + k8 && k4 = 0
  f_235(k9, k11, k16, x41, x42, x43, x44, x45, x46, x47, x48) -> f_235(k9, 2 + k11, k17, x49, x50, x51, x52, x53, x54, x55, x56) :|: k11 > 2 && k16 < 0
)

----------------------------------------

(25) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_14357384631065979502.koat 

KoAT2's output was:

MAYBE

----------------------------------------

(26)
MAYBE
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
