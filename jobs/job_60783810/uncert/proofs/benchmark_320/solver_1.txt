YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/If9St.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 300 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 27 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) TerminationGraphProcessor [EQUIVALENT, 0 ms]
(12) IntTRS
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IntTRS
(15) RankingReductionPairProof [EQUIVALENT, 2 ms]
(16) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/If9St.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/If9St.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = load %3
		%9 = add i32 %7, %8
		%10 = icmp sgt %9 0
		br %10, %11, %16
	11:
		%12 = load %2
		%13 = sub i32 %12, 1
		store %13, %2
		%14 = load %3
		%15 = mul i32 -2, %14
		store %15, %3
		br %6
	16:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_138(v41, v42, v43, v44, v45, v50, v47, v48, 1, v46, v51, v52, v53, v54, 0, 3, 2, 4) -> f_139(v41, v42, v43, v44, v45, v50, v51, v48, 1, v46, v47, v52, v53, v54, 0, 3, 2, 4) :|: 0 = 0
f_139(v41, v42, v43, v44, v45, v50, v51, v48, 1, v46, v47, v52, v53, v54, 0, 3, 2, 4) -> f_140(v41, v42, v43, v44, v45, v50, v51, v56, 1, v46, v47, v52, v53, v54, 0, 3, 2, 4) :|: v56 = v50 + v51
f_140(v41, v42, v43, v44, v45, v50, v51, v56, 1, v46, v47, v52, v53, v54, 0, 3, 2, 4) -> f_141(v41, v42, v43, v44, v45, v50, v51, v56, 1, v46, v47, v52, v53, v54, 0, 3, 2, 4) :|: 0 < v56
f_141(v41, v42, v43, v44, v45, v50, v51, v56, 1, v46, v47, v52, v53, v54, 0, 3, 2, 4) -> f_143(v41, v42, v43, v44, v45, v50, v51, v56, 1, v46, v47, v52, v53, v54, 0, 3, 2, 4) :|: 0 = 0
f_143(v41, v42, v43, v44, v45, v50, v51, v56, 1, v46, v47, v52, v53, v54, 0, 3, 2, 4) -> f_145(v41, v42, v43, v44, v45, v50, v51, v56, 1, v46, v47, v52, v53, v54, 0, 3, 2, 4) :|: TRUE
f_145(v41, v42, v43, v44, v45, v50, v51, v56, 1, v46, v47, v52, v53, v54, 0, 3, 2, 4) -> f_147(v41, v42, v43, v44, v45, v50, v51, v56, 1, v47, v52, v53, v54, 0, 3, 2, 4) :|: 0 = 0
f_147(v41, v42, v43, v44, v45, v50, v51, v56, 1, v47, v52, v53, v54, 0, 3, 2, 4) -> f_148(v41, v42, v43, v44, v45, v50, v51, v56, 1, v57, v47, v52, v53, v54, 0, 3, 2, 4) :|: 1 + v57 = v50
f_148(v41, v42, v43, v44, v45, v50, v51, v56, 1, v57, v47, v52, v53, v54, 0, 3, 2, 4) -> f_149(v41, v42, v43, v44, v45, v50, v51, v56, 1, v57, v47, v52, v53, v54, 0, 3, 2, 4) :|: TRUE
f_149(v41, v42, v43, v44, v45, v50, v51, v56, 1, v57, v47, v52, v53, v54, 0, 3, 2, 4) -> f_150(v41, v42, v43, v44, v45, v50, v51, v56, 1, v57, v52, v53, v54, 0, 3, 4) :|: 0 = 0
f_150(v41, v42, v43, v44, v45, v50, v51, v56, 1, v57, v52, v53, v54, 0, 3, 4) -> f_151(v41, v42, v43, v44, v45, v50, v51, v56, 1, v57, v59, v52, v53, v54, 0, 3, 2, 4) :|: v59 + 2 * v51 = 0
f_151(v41, v42, v43, v44, v45, v50, v51, v56, 1, v57, v59, v52, v53, v54, 0, 3, 2, 4) -> f_152(v41, v42, v43, v44, v45, v50, v51, v56, 1, v57, v59, v52, v53, v54, 0, 3, 2, 4) :|: TRUE
f_152(v41, v42, v43, v44, v45, v50, v51, v56, 1, v57, v59, v52, v53, v54, 0, 3, 2, 4) -> f_153(v41, v42, v43, v44, v45, v50, v51, v56, 1, v57, v59, v52, v53, v54, 0, 3, 2, 4) :|: TRUE
f_153(v41, v42, v43, v44, v45, v50, v51, v56, 1, v57, v59, v52, v53, v54, 0, 3, 2, 4) -> f_137(v41, v42, v43, v44, v45, v50, v51, v56, 1, v57, v59, v52, v53, v54, 0, 3, 2, 4) :|: TRUE
f_137(v41, v42, v43, v44, v45, v46, v47, v48, 1, v50, v51, v52, v53, v54, 0, 3, 2, 4) -> f_138(v41, v42, v43, v44, v45, v50, v47, v48, 1, v46, v51, v52, v53, v54, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_138(v41:0, v42:0, v43:0, v44:0, v45:0, 1 + v57:0, v47:0, v48:0, 1, v46:0, v51:0, v52:0, v53:0, v54:0, 0, 3, 2, 4) -> f_138(v41:0, v42:0, v43:0, v44:0, v45:0, v57:0, v51:0, 1 + v57:0 + v51:0, 1, 1 + v57:0, v59:0, v52:0, v53:0, v54:0, 0, 3, 2, 4) :|: v59:0 + 2 * v51:0 = 0 && 1 + v57:0 + v51:0 > 0
Filtered unneeded arguments:
   f_138(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_138(x6, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_138(sum~cons_1~v57:0, v51:0) -> f_138(v57:0, v59:0) :|: v59:0 + 2 * v51:0 = 0 && 1 + v57:0 + v51:0 > 0 && sum~cons_1~v57:0 = 1 + v57:0

----------------------------------------

(8)
Obligation:
Rules:
f_138(sum~cons_1~v57:0, v51:0) -> f_138(v57:0, v59:0) :|: v59:0 + 2 * v51:0 = 0 && 1 + v57:0 + v51:0 > 0 && sum~cons_1~v57:0 = 1 + v57:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_138(sum~cons_1~v57:0:0, v51:0:0) -> f_138(v57:0:0, v59:0:0) :|: v59:0:0 + 2 * v51:0:0 = 0 && 1 + v57:0:0 + v51:0:0 > 0 && sum~cons_1~v57:0:0 = 1 + v57:0:0

----------------------------------------

(11) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

f_138(sum~cons_1~v57:0:0, v51:0:0) -> f_138(v57:0:0, v59:0:0) :|: v59:0:0 + 2 * v51:0:0 = 0 && 1 + v57:0:0 + v51:0:0 > 0 && sum~cons_1~v57:0:0 = 1 + v57:0:0
has been transformed into
f_138(sum~cons_1~v57:0:0, v51:0:0) -> f_138(v57:0:0, v59:0:0) :|: v59:0:0 + 2 * v51:0:0 = 0 && 1 + v57:0:0 + v51:0:0 > 0 && sum~cons_1~v57:0:0 = 1 + v57:0:0.


f_138(sum~cons_1~v57:0:0, v51:0:0) -> f_138(v57:0:0, v59:0:0) :|: v59:0:0 + 2 * v51:0:0 = 0 && 1 + v57:0:0 + v51:0:0 > 0 && sum~cons_1~v57:0:0 = 1 + v57:0:0 and 
f_138(sum~cons_1~v57:0:0, v51:0:0) -> f_138(v57:0:0, v59:0:0) :|: v59:0:0 + 2 * v51:0:0 = 0 && 1 + v57:0:0 + v51:0:0 > 0 && sum~cons_1~v57:0:0 = 1 + v57:0:0
have been merged into the new rule
f_138(x20, x21) -> f_138(x22, x23) :|: x24 + 2 * x21 = 0 && 1 + x25 + x21 > 0 && x20 = 1 + x25 && (x23 + 2 * x24 = 0 && 1 + x22 + x24 > 0 && x25 = 1 + x22)


----------------------------------------

(12)
Obligation:
Rules:
f_138(x26, x27) -> f_138(x28, x29) :|: TRUE && x30 + 2 * x27 = 0 && x31 + x27 >= 0 && x26 + -1 * x31 = 1 && x29 + 2 * x30 = 0 && x28 + x30 >= 0 && x31 + -1 * x28 = 1

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f_138(x26:0, x27:0) -> f_138(x28:0, x29:0) :|: x28:0 + x30:0 >= 0 && x31:0 + -1 * x28:0 = 1 && x29:0 + 2 * x30:0 = 0 && x26:0 + -1 * x31:0 = 1 && x30:0 + 2 * x27:0 = 0 && x31:0 + x27:0 >= 0

----------------------------------------

(15) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_138 ] = 1/2*f_138_1

The following rules are decreasing:
f_138(x26:0, x27:0) -> f_138(x28:0, x29:0) :|: x28:0 + x30:0 >= 0 && x31:0 + -1 * x28:0 = 1 && x29:0 + 2 * x30:0 = 0 && x26:0 + -1 * x31:0 = 1 && x30:0 + 2 * x27:0 = 0 && x31:0 + x27:0 >= 0

The following rules are bounded:
f_138(x26:0, x27:0) -> f_138(x28:0, x29:0) :|: x28:0 + x30:0 >= 0 && x31:0 + -1 * x28:0 = 1 && x29:0 + 2 * x30:0 = 0 && x26:0 + -1 * x31:0 = 1 && x30:0 + 2 * x27:0 = 0 && x31:0 + x27:0 >= 0


----------------------------------------

(16)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
