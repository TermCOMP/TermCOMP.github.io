YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/A1AMW.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 225 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [SOUND, 36 ms]
(6) IntTRS
(7) IRSToKoat [EQUIVALENT, 0 ms]
(8) Koat Problem
(9) KoAT2 [EQUIVALENT, 2 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/A1AMW.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/A1AMW.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		%8 = load %6
		%9 = icmp sle %8 0
		br %9, %10, %12
	10:
		%11 = load %7
		store %11, %4
		br %28
	12:
		br %13
	13:
		%14 = load %5
		%15 = load %7
		%16 = icmp sge %14 %15
		br %16, %17, %26
	17:
		%18 = load %6
		%19 = icmp sle %18 0
		br %19, %20, %22
	20:
		%21 = load %7
		store %21, %4
		br %28
	22:
		%23 = load %7
		%24 = load %6
		%25 = add i32 %23, %24
		store %25, %7
		br %13
	26:
		%27 = load %7
		store %27, %4
		br %28
	28:
		%29 = load %4
		ret %29

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 46
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @test_fun(i32 %2, i32 %3, i32 %4)
		ret %5


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 73 rulesP rules:
f_137 -> f_138(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_138(v1, v2, 3, 1, 4) -> f_139(v1, v2, 0, 3, 1, 4) :|: TRUE
f_139(v1, v2, 0, 3, 1, 4) -> f_140(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_140(v1, v3, v2, 0, 3, 1, 4) -> f_141(v1, v3, v4, v2, 0, 3, 1, 4) :|: TRUE
f_141(v1, v3, v4, v2, 0, 3, 1, 4) -> f_142(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_142(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_143(v3, v4, v5, v1, v2, 0, 3, 1, 4) :|: 0 = 0
f_143(v3, v4, v5, v1, v2, 0, 3, 1, 4) -> f_144(v3, v4, v5, v6, v1, v2, v7, 0, 3, 1, 4) :|: 1 <= v6 && v7 = 3 + v6 && 4 <= v7
f_144(v3, v4, v5, v6, v1, v2, v7, 0, 3, 1, 4) -> f_145(v3, v4, v5, v6, v8, v1, v2, v7, v9, 0, 3, 1, 4) :|: 1 <= v8 && v9 = 3 + v8 && 4 <= v9
f_145(v3, v4, v5, v6, v8, v1, v2, v7, v9, 0, 3, 1, 4) -> f_146(v3, v4, v5, v6, v8, v10, v1, v2, v7, v9, v11, 0, 3, 1, 4) :|: 1 <= v10 && v11 = 3 + v10 && 4 <= v11
f_146(v3, v4, v5, v6, v8, v10, v1, v2, v7, v9, v11, 0, 3, 1, 4) -> f_147(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) :|: 1 <= v12 && v13 = 3 + v12 && 4 <= v13
f_147(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) -> f_148(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) :|: TRUE
f_148(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) -> f_149(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) :|: TRUE
f_149(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) -> f_150(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) :|: TRUE
f_150(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) -> f_151(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) :|: TRUE
f_151(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) -> f_152(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) :|: TRUE
f_152(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) -> f_153(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) :|: TRUE
f_153(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) -> f_154(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) :|: 0 = 0
f_154(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) -> f_155(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) :|: v4 <= 0
f_154(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) -> f_156(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) :|: 0 < v4
f_155(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) -> f_157(v3, v4, v5, v6, v8, v10, v12, 1, v1, v2, v7, v9, v11, v13, 0, 3, 4) :|: 0 = 0
f_156(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) -> f_158(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) :|: 0 = 0
f_157(v3, v4, v5, v6, v8, v10, v12, 1, v1, v2, v7, v9, v11, v13, 0, 3, 4) -> f_159(v3, v4, v5, v6, v8, v10, v12, 1, v1, v2, v7, v9, v11, v13, 0, 3, 4) :|: TRUE
f_158(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) -> f_160(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) :|: TRUE
f_159(v3, v4, v5, v6, v8, v10, v12, 1, v1, v2, v7, v9, v11, v13, 0, 3, 4) -> f_161(v3, v4, v5, v6, v8, v10, v12, 1, v1, v2, v7, v9, v11, v13, 0, 3, 4) :|: 0 = 0
f_160(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) -> f_162(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) :|: TRUE
f_161(v3, v4, v5, v6, v8, v10, v12, 1, v1, v2, v7, v9, v11, v13, 0, 3, 4) -> f_163(v3, v4, v5, v6, v8, v10, v12, 1, v1, v2, v7, v9, v11, v13, 0, 3, 4) :|: TRUE
f_162(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) -> f_164(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) :|: 0 = 0
f_163(v3, v4, v5, v6, v8, v10, v12, 1, v1, v2, v7, v9, v11, v13, 0, 3, 4) -> f_165(v3, v4, v5, v6, v8, v10, v12, 1, v1, v2, v7, v9, v11, v13, 0, 3, 4) :|: TRUE
f_164(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) -> f_166(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) :|: 0 = 0
f_165(v3, v4, v5, v6, v8, v10, v12, 1, v1, v2, v7, v9, v11, v13, 0, 3, 4) -> f_167(v3, v4, v5, v6, v8, v10, v12, 1, v1, v2, v7, v9, v11, v13, 0, 3, 4) :|: 0 = 0
f_166(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) -> f_168(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) :|: v5 <= v3
f_166(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) -> f_169(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) :|: v3 < v5
f_167(v3, v4, v5, v6, v8, v10, v12, 1, v1, v2, v7, v9, v11, v13, 0, 3, 4) -> f_170(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: 0 = 0
f_168(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) -> f_171(v3, v4, v5, v6, v8, v10, v12, 0, 1, v1, v2, v7, v9, v11, v13, 3, 4) :|: 0 = 0
f_169(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) -> f_172(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) :|: 0 = 0
f_171(v3, v4, v5, v6, v8, v10, v12, 0, 1, v1, v2, v7, v9, v11, v13, 3, 4) -> f_173(v3, v4, v5, v6, v8, v10, v12, 0, 1, v1, v2, v7, v9, v11, v13, 3, 4) :|: TRUE
f_172(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) -> f_174(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) :|: TRUE
f_173(v3, v4, v5, v6, v8, v10, v12, 0, 1, v1, v2, v7, v9, v11, v13, 3, 4) -> f_175(v3, v4, v5, v6, v8, v10, v12, 0, 1, v1, v2, v7, v9, v11, v13, 3, 4) :|: 0 = 0
f_174(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) -> f_176(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) :|: 0 = 0
f_175(v3, v4, v5, v6, v8, v10, v12, 0, 1, v1, v2, v7, v9, v11, v13, 3, 4) -> f_177(v3, v4, v5, v6, v8, v10, v12, 0, 1, v1, v2, v7, v9, v11, v13, 3, 4) :|: 0 = 0
f_176(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) -> f_178(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) :|: TRUE
f_177(v3, v4, v5, v6, v8, v10, v12, 0, 1, v1, v2, v7, v9, v11, v13, 3, 4) -> f_179(v3, v4, v5, v6, v8, v10, v12, 0, 1, v1, v2, v7, v9, v11, v13, 3, 4) :|: TRUE
f_178(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) -> f_180(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) :|: TRUE
f_179(v3, v4, v5, v6, v8, v10, v12, 0, 1, v1, v2, v7, v9, v11, v13, 3, 4) -> f_181(v3, v4, v5, v6, v8, v10, v12, 0, 1, v1, v2, v7, v9, v11, v13, 3, 4) :|: 0 = 0
f_180(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) -> f_182(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) :|: 0 = 0
f_181(v3, v4, v5, v6, v8, v10, v12, 0, 1, v1, v2, v7, v9, v11, v13, 3, 4) -> f_183(v3, v4, v5, v6, v8, v10, v12, 0, 1, v1, v2, v7, v9, v11, v13, 3, 4) :|: 0 = 0
f_182(v3, v4, v5, v6, v8, v10, v12, 0, v1, v2, v7, v9, v11, v13, 3, 1, 4) -> f_184(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: 0 = 0
f_183(v3, v4, v5, v6, v8, v10, v12, 0, 1, v1, v2, v7, v9, v11, v13, 3, 4) -> f_185(v3, v4, v5, v6, v8, v10, v12, 0, 1, v19, v1, v2, v7, v9, v11, v13, 3, 4) :|: v19 = v5 + v4
f_185(v3, v4, v5, v6, v8, v10, v12, 0, 1, v19, v1, v2, v7, v9, v11, v13, 3, 4) -> f_186(v3, v4, v5, v6, v8, v10, v12, 0, 1, v19, v1, v2, v7, v9, v11, v13, 3, 4) :|: TRUE
f_186(v3, v4, v5, v6, v8, v10, v12, 0, 1, v19, v1, v2, v7, v9, v11, v13, 3, 4) -> f_187(v3, v4, v5, v6, v8, v10, v12, 0, 1, v19, v1, v2, v7, v9, v11, v13, 3, 4) :|: TRUE
f_187(v3, v4, v5, v6, v8, v10, v12, 0, 1, v19, v1, v2, v7, v9, v11, v13, 3, 4) -> f_209(v3, v4, v5, v6, v8, v10, v12, 0, v5, 1, v19, v1, v2, v7, v9, v11, v13, 3, 4) :|: TRUE
f_209(v33, v34, v35, v36, v37, v38, v39, 0, v41, 1, v43, v44, v45, v46, v47, v48, v49, 3, 4) -> f_210(v33, v34, v35, v36, v37, v38, v39, 0, v41, 1, v43, v44, v45, v46, v47, v48, v49, 3, 4) :|: 0 = 0
f_210(v33, v34, v35, v36, v37, v38, v39, 0, v41, 1, v43, v44, v45, v46, v47, v48, v49, 3, 4) -> f_211(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) :|: 0 = 0
f_211(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) -> f_212(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) :|: v43 <= v33
f_211(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) -> f_213(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) :|: v33 < v43
f_212(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) -> f_214(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) :|: 0 = 0
f_213(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) -> f_215(v33, v34, v35, v36, v37, v38, v39, 0, v43, v41, v44, v45, v46, v47, v48, v49, 3, 1, 4) :|: 0 = 0
f_214(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) -> f_216(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) :|: TRUE
f_215(v33, v34, v35, v36, v37, v38, v39, 0, v43, v41, v44, v45, v46, v47, v48, v49, 3, 1, 4) -> f_217(v33, v34, v35, v36, v37, v38, v39, 0, v43, v41, v44, v45, v46, v47, v48, v49, 3, 1, 4) :|: TRUE
f_216(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) -> f_218(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) :|: 0 = 0
f_217(v33, v34, v35, v36, v37, v38, v39, 0, v43, v41, v44, v45, v46, v47, v48, v49, 3, 1, 4) -> f_219(v33, v34, v35, v36, v37, v38, v39, 0, v43, v41, v44, v45, v46, v47, v48, v49, 3, 1, 4) :|: 0 = 0
f_218(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) -> f_220(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) :|: 0 = 0
f_219(v33, v34, v35, v36, v37, v38, v39, 0, v43, v41, v44, v45, v46, v47, v48, v49, 3, 1, 4) -> f_221(v33, v34, v35, v36, v37, v38, v39, 0, v43, v41, v44, v45, v46, v47, v48, v49, 3, 1, 4) :|: TRUE
f_220(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) -> f_222(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) :|: TRUE
f_221(v33, v34, v35, v36, v37, v38, v39, 0, v43, v41, v44, v45, v46, v47, v48, v49, 3, 1, 4) -> f_223(v33, v34, v35, v36, v37, v38, v39, 0, v43, v41, v44, v45, v46, v47, v48, v49, 3, 1, 4) :|: TRUE
f_222(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v41, v44, v45, v46, v47, v48, v49, 3, 4) -> f_224(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v44, v45, v46, v47, v48, v49, 3, 4) :|: 0 = 0
f_223(v33, v34, v35, v36, v37, v38, v39, 0, v43, v41, v44, v45, v46, v47, v48, v49, 3, 1, 4) -> f_225(v33, v34, v35, v36, v37, v38, v39, 0, v43, v41, v44, v45, v46, v47, v48, v49, 3, 1, 4) :|: 0 = 0
f_224(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v44, v45, v46, v47, v48, v49, 3, 4) -> f_226(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v44, v45, v46, v47, v48, v49, 3, 4) :|: 0 = 0
f_225(v33, v34, v35, v36, v37, v38, v39, 0, v43, v41, v44, v45, v46, v47, v48, v49, 3, 1, 4) -> f_227(v44, v33, v34, v35, v43, v45, 0, 3, 1, 4) :|: 0 = 0
f_226(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v44, v45, v46, v47, v48, v49, 3, 4) -> f_228(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v60, v44, v45, v46, v47, v48, v49, 3, 4) :|: v60 = v43 + v34
f_228(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v60, v44, v45, v46, v47, v48, v49, 3, 4) -> f_229(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v60, v44, v45, v46, v47, v48, v49, 3, 4) :|: TRUE
f_229(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v60, v44, v45, v46, v47, v48, v49, 3, 4) -> f_230(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v60, v44, v45, v46, v47, v48, v49, 3, 4) :|: TRUE
f_230(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v60, v44, v45, v46, v47, v48, v49, 3, 4) -> f_209(v33, v34, v35, v36, v37, v38, v39, 0, v43, 1, v60, v44, v45, v46, v47, v48, v49, 3, 4) :|: TRUE
Combined rules. Obtained 5 rulesP rules:
f_137 -> f_184(v1:0, v3:0, v4:0, v5:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v6:0 > 0 && v8:0 > 0 && v10:0 > 0 && v12:0 > 0 && v5:0 > v3:0 && v4:0 > 0
f_137 -> f_211(v3:0, v4:0, v5:0, v6:0, v8:0, v10:0, v12:0, 0, v5:0 + v4:0, 1, v5:0, v1:0, 3 + v1:0, 3 + v6:0, 3 + v8:0, 3 + v10:0, 3 + v12:0, 3, 4) :|: v1:0 > 0 && v6:0 > 0 && v8:0 > 0 && v10:0 > 0 && v12:0 > 0 && v5:0 <= v3:0 && v4:0 > 0
f_211(v33:0, v34:0, v35:0, v36:0, v37:0, v38:0, v39:0, 0, v43:0, 1, v41:0, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, 3, 4) -> f_211(v33:0, v34:0, v35:0, v36:0, v37:0, v38:0, v39:0, 0, v43:0 + v34:0, 1, v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, 3, 4) :|: v43:0 <= v33:0
f_211(v33:0, v34:0, v35:0, v36:0, v37:0, v38:0, v39:0, 0, v43:0, 1, v41:0, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, 3, 4) -> f_227(v44:0, v33:0, v34:0, v35:0, v43:0, v45:0, 0, 3, 1, 4) :|: v43:0 > v33:0
f_137 -> f_170(v1:0, v3:0, v4:0, v5:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v6:0 > 0 && v8:0 > 0 && v10:0 > 0 && v12:0 > 0 && v4:0 < 1
Filtered unneeded arguments:
   f_211(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_211(x1, x2, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_137 -> f_184(v1:0, v3:0, v4:0, v5:0, 3 + v1:0, 0, 3, 1, 4) :|: v5:0 > v3:0 && v4:0 > 0 && v1:0 > 0
f_137 -> f_211(v3:0, v4:0, v5:0 + v4:0) :|: v5:0 <= v3:0 && v4:0 > 0
f_211(v33:0, v34:0, v43:0) -> f_211(v33:0, v34:0, v43:0 + v34:0) :|: v43:0 <= v33:0
f_211(v33:0, v34:0, v43:0) -> f_227(v44:0, v33:0, v34:0, v35:0, v43:0, v45:0, 0, 3, 1, 4) :|: v43:0 > v33:0
f_137 -> f_170(v1:0, v3:0, v4:0, v5:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v4:0 < 1

----------------------------------------

(6)
Obligation:
Rules:
f_137 -> f_184(v1:0, v3:0, v4:0, v5:0, 3 + v1:0, 0, 3, 1, 4) :|: v5:0 > v3:0 && v4:0 > 0 && v1:0 > 0
f_137 -> f_211(x, x1, x2 + x1) :|: x2 <= x && x1 > 0
f_211(v33:0, v34:0, v43:0) -> f_211(v33:0, v34:0, v43:0 + v34:0) :|: v43:0 <= v33:0
f_211(x3, x4, x5) -> f_227(x6, x3, x4, x7, x5, x8, 0, 3, 1, 4) :|: x5 > x3
f_137 -> f_170(x9, x10, x11, x12, 3 + x9, 0, 3, 1, 4) :|: x9 > 0 && x11 < 1
Start term: f_137

----------------------------------------

(7) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(8)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_137))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x x40 x41 x39 x35 x36 x37 x38 x31 x32 x'' x33 x34 k18 k19 x30 k14 k15 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x7 x27 x20 x21 x22 x23 x1 k7 k8 k5 k6 k9 x' k0 k3 k4 k1 k2 x17 x18 x19 x13 x57 x14 x15 x16 x53 x10 x54 x11 x55 x12 x56 x50 x51 x52)
(RULES
  f_137(x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_170(k12, k15, k16, k17, 3 + k12, 0, 3, 1, 4, x29) :|: k12 > 0 && k16 < 1
  f_137(x47, x48, x49, x50, x51, x52, x53, x54, x55, x56) -> f_184(k3, k5, k7, k9, 3 + k3, 0, 3, 1, 4, x57) :|: k9 > k5 && k7 > 0 && k3 > 0
  f_137(x30, x31, x32, x33, x34, x35, x36, x37, x38, x39) -> f_211(k18, k19, k8 + k19, x40, x41, x42, x43, x44, x45, x46) :|: k8 <= k18 && k19 > 0
  f_211(k10, k4, k6, x, x', x'', x1, x2, x3, x4) -> f_227(k13, k10, k4, k14, k6, k11, 0, 3, 1, 4) :|: k6 > k10
  f_211(k2, k1, k0, x5, x6, x7, x8, x9, x10, x11) -> f_211(k2, k1, k0 + k1, x12, x13, x14, x15, x16, x17, x18) :|: k0 <= k2
)

----------------------------------------

(9) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_17558602352491621144.koat 

KoAT2's output was:

YES

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
