YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/5Zk0t.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 62 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3024 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 179 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (13) AND
            (14) IntTRS
                (15) TerminationGraphProcessor [EQUIVALENT, 24 ms]
                (16) AND
                    (17) IntTRS
                        (18) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                        (19) IntTRS
                        (20) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                        (21) IntTRS
                        (22) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
                        (23) IntTRS
                        (24) TerminationGraphProcessor [EQUIVALENT, 3 ms]
                        (25) IntTRS
                        (26) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                        (27) IntTRS
                        (28) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                        (29) IntTRS
                        (30) RankingReductionPairProof [EQUIVALENT, 0 ms]
                        (31) YES
                    (32) IntTRS
                        (33) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                        (34) IntTRS
                        (35) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                        (36) IntTRS
                        (37) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
                        (38) YES
            (39) IntTRS
                (40) TerminationGraphProcessor [EQUIVALENT, 16 ms]
                (41) AND
                    (42) IntTRS
                        (43) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                        (44) IntTRS
                        (45) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                        (46) IntTRS
                        (47) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
                        (48) YES
                    (49) IntTRS
                        (50) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                        (51) IntTRS
                        (52) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                        (53) IntTRS
                        (54) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
                        (55) AND
                            (56) IntTRS
                                (57) TerminationGraphProcessor [EQUIVALENT, 7 ms]
                                (58) IntTRS
                                (59) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                                (60) IntTRS
                                (61) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                                (62) IntTRS
                                (63) RankingReductionPairProof [EQUIVALENT, 0 ms]
                                (64) YES
                            (65) IntTRS
                                (66) TerminationGraphProcessor [EQUIVALENT, 4 ms]
                                (67) IntTRS
                                (68) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                                (69) IntTRS
                                (70) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                                (71) IntTRS
                                (72) RankingReductionPairProof [EQUIVALENT, 2 ms]
                                (73) YES
    (74) LLVM Symbolic Execution SCC
        (75) SCC2IRS [SOUND, 106 ms]
        (76) IntTRS
        (77) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (78) IntTRS
        (79) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (80) IntTRS
        (81) TerminationGraphProcessor [EQUIVALENT, 1 ms]
        (82) IntTRS
        (83) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (84) IntTRS
        (85) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (86) IntTRS
        (87) RankingReductionPairProof [EQUIVALENT, 1 ms]
        (88) YES
    (89) LLVM Symbolic Execution SCC
        (90) SCC2IRS [SOUND, 110 ms]
        (91) IntTRS
        (92) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (93) IntTRS
        (94) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
        (95) IntTRS
        (96) TerminationGraphProcessor [EQUIVALENT, 5 ms]
        (97) IntTRS
        (98) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (99) IntTRS
        (100) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (101) IntTRS
        (102) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (103) YES
    (104) LLVM Symbolic Execution SCC
        (105) SCC2IRS [SOUND, 112 ms]
        (106) IntTRS
        (107) IntTRSCompressionProof [EQUIVALENT, 1 ms]
        (108) IntTRS
        (109) RankingReductionPairProof [EQUIVALENT, 6 ms]
        (110) IntTRS
        (111) TerminationGraphProcessor [EQUIVALENT, 7 ms]
        (112) AND
            (113) IntTRS
                (114) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (115) IntTRS
                (116) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (117) IntTRS
                (118) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
                (119) YES
            (120) IntTRS
                (121) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (122) IntTRS
                (123) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (124) IntTRS
                (125) RankingReductionPairProof [EQUIVALENT, 2 ms]
                (126) YES
    (127) LLVM Symbolic Execution SCC
        (128) SCC2IRS [SOUND, 62 ms]
        (129) IntTRS
        (130) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (131) IntTRS
        (132) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (133) YES
    (134) LLVM Symbolic Execution SCC
        (135) SCC2IRS [SOUND, 54 ms]
        (136) IntTRS
        (137) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (138) IntTRS
        (139) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (140) YES
    (141) LLVM Symbolic Execution SCC
        (142) SCC2IRS [SOUND, 44 ms]
        (143) IntTRS
        (144) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (145) IntTRS
        (146) RankingReductionPairProof [EQUIVALENT, 8 ms]
        (147) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/5Zk0t.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/5Zk0t.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		%4 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%5 = alloca i8, numElementsLit: 4, align 16
		%6 = bitcast *i8 %5 to *i32
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%7 = alloca i8, numElementsLit: 4, align 16
		%8 = bitcast *i8 %7 to *i32
		store %8, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %4)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %4
		br %11
	11:
		%12 = load %2
		%13 = load %12
		%14 = icmp sgt %13 0
		br %14, %15, %23
	15:
		%16 = load %3
		%17 = load %16
		%18 = icmp sgt %17 0
		br %18, %19, %23
	19:
		%20 = load %4
		%21 = load %20
		%22 = icmp sgt %21 0
		br %23
	23:
		%24 = phi [0, %15], [0, %11], [%22, %19]
		br %24, %25, %52
	25:
		%26 = call i32 @__VERIFIER_nondet_int()
		%27 = icmp ne %26 0
		br %27, %28, %33
	28:
		%29 = load %2
		%30 = load %29
		%31 = sub i32 %30, 1
		%32 = load %2
		store %31, %32
		br %51
	33:
		%34 = call i32 @__VERIFIER_nondet_int()
		%35 = icmp ne %34 0
		br %35, %36, %43
	36:
		%37 = load %3
		%38 = load %37
		%39 = sub i32 %38, 1
		%40 = load %3
		store %39, %40
		%41 = call i32 @__VERIFIER_nondet_int()
		%42 = load %4
		store %41, %42
		br %50
	43:
		%44 = load %4
		%45 = load %44
		%46 = sub i32 %45, 1
		%47 = load %4
		store %46, %47
		%48 = call i32 @__VERIFIER_nondet_int()
		%49 = load %2
		store %48, %49
		br %50
	50:
		br %51
	51:
		br %11
	52:
		%53 = load %1
		ret %53


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 7 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 151 rulesP rules:
f_1099(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25200, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1105(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25200, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: TRUE
f_1105(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25200, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1111(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25200, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: 0 = 0
f_1111(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25200, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1117(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25200, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: 0 = 0
f_1117(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25200, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1124(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25200, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: 0 = 0
f_1124(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25200, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1131(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25200, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: TRUE
f_1131(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25200, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1139(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25200, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: 0 = 0
f_1139(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25200, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1147(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: 0 = 0
f_1147(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1155(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: 0 < v25209 && 2 <= v25200
f_1155(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1164(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: 0 = 0
f_1164(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1172(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: TRUE
f_1172(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1179(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: 0 = 0
f_1179(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1184(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: 0 = 0
f_1184(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1190(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: 0 < v25210
f_1190(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1197(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: 0 = 0
f_1197(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1206(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: 0 = 0
f_1206(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1213(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: TRUE
f_1213(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1220(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: TRUE
f_1220(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1227(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: v33742 != 0
f_1220(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1228(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: v33742 = 0
f_1227(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1234(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_1234(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) -> f_1243(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) :|: TRUE
f_1243(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) -> f_1250(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_1250(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) -> f_1256(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_1256(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) -> f_1264(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v34663, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) :|: 1 + v34663 = v25198 && 0 <= v34663
f_1264(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v34663, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) -> f_1272(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v34663, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_1272(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v34663, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) -> f_1280(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v34663, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) :|: TRUE
f_1280(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v34663, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) -> f_1287(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v34663, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) :|: TRUE
f_1287(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v34663, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) -> f_1288(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, v33742, v25205, v25206, v25207, v25208, v25200, v34663, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 0, 3, 7, 2, 4, 8) :|: TRUE
f_1288(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36535, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36545, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1295(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36535, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36545, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: TRUE
f_1295(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36535, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36545, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1302(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36535, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36545, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_1302(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36535, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36545, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1309(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_1309(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1317(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: 0 < v36545 && 2 <= v36535 && 2 <= v36543
f_1317(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1326(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_1326(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1337(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: TRUE
f_1337(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1347(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_1347(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1358(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_1358(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1364(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_1364(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1368(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: TRUE
f_1368(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1372(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_1372(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1375(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_1375(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1379(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_1379(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1384(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_1384(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1389(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: TRUE
f_1389(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v36539, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1394(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v42206, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: TRUE
f_1394(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v42206, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1399(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v42206, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: v42206 != 0
f_1394(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v42206, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1400(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, 0, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 3, 7, 2, 4, 8) :|: v42206 = 0
f_1399(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v42206, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1404(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v42206, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_1404(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v42206, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1408(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v42206, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: TRUE
f_1408(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v42206, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) -> f_1243(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, v42206, v36535, v36545, v36540, v36541, v36542, v36543, v36544, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 0, 3, 7, 2, 4, 8) :|: TRUE
f_1400(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, 0, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 3, 7, 2, 4, 8) -> f_1405(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, 0, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 3, 7, 2, 4, 8) :|: 0 = 0
f_1405(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, 0, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 3, 7, 2, 4, 8) -> f_1409(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, 0, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 3, 7, 2, 4, 8) :|: TRUE
f_1409(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, 0, v36540, v36541, v36542, v36543, v36544, v36535, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 3, 7, 2, 4, 8) -> f_1244(v36528, v36529, v36530, v36531, v36532, v36533, v36534, v36545, 1, v36537, v36538, 0, v36535, v36545, v36540, v36541, v36542, v36543, v36544, v36546, v36547, v36548, v36549, v36550, v36551, v36552, 3, 7, 2, 4, 8) :|: TRUE
f_1244(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1251(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v34661, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: TRUE
f_1251(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v34661, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1257(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v34661, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: v34661 != 0
f_1251(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v34661, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1258(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: v34661 = 0
f_1257(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v34661, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1265(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v34661, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: 0 = 0
f_1265(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v34661, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1273(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v34661, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: TRUE
f_1273(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v34661, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1274(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v34661, v25200, v25210, v25206, v25207, v25208, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: TRUE
f_1274(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v34958, v34959, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) -> f_1281(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v34958, v34959, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) :|: 0 = 0
f_1281(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v34958, v34959, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) -> f_1289(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v34959, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) :|: 0 = 0
f_1289(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v34959, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) -> f_1296(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v36937, v34959, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) :|: 1 + v36937 = v34952 && 0 <= v36937
f_1296(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v36937, v34959, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) -> f_1303(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v36937, v34959, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) :|: 0 = 0
f_1303(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v36937, v34959, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) -> f_1310(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v36937, v34959, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) :|: TRUE
f_1310(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v36937, v34959, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) -> f_1319(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v36937, v37165, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) :|: TRUE
f_1319(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v36937, v37165, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) -> f_1328(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v36937, v37165, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) :|: 0 = 0
f_1328(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v36937, v37165, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) -> f_1339(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v36937, v37165, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) :|: TRUE
f_1339(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v36937, v37165, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) -> f_1349(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v36937, v37165, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) :|: TRUE
f_1349(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v36937, v37165, v34960, v34961, v34962, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) -> f_1087(v34943, v34944, v34945, v34946, v34947, v34948, v34949, v34950, 1, v34952, v34953, 0, v34955, v34956, v34957, v34960, v34961, v34962, v36937, v37165, v34963, v34964, v34965, v34966, v34967, v34968, v34969, 3, 7, 2, 4, 8) :|: TRUE
f_1087(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25200, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1099(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25200, v25201, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: TRUE
f_1258(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1266(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: 0 = 0
f_1266(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1275(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: TRUE
f_1275(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1454(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25206, v25207, v25208, v25200, v25210, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: TRUE
f_1454(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45594, v45595, v45596, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) -> f_1456(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45594, v45595, v45596, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) :|: 0 = 0
f_1456(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45594, v45595, v45596, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) -> f_1458(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45595, v45596, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) :|: 0 = 0
f_1458(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45595, v45596, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) -> f_1459(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45832, v45596, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) :|: 1 + v45832 = v45590 && 0 <= v45832
f_1459(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45832, v45596, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) -> f_1460(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45832, v45596, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) :|: 0 = 0
f_1460(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45832, v45596, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) -> f_1461(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45832, v45596, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) :|: TRUE
f_1461(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45832, v45596, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) -> f_1462(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45832, v45834, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) :|: TRUE
f_1462(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45832, v45834, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) -> f_1463(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45832, v45834, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) :|: 0 = 0
f_1463(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45832, v45834, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) -> f_1464(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45832, v45834, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) :|: TRUE
f_1464(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45832, v45834, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) -> f_1465(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45832, v45834, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) :|: TRUE
f_1465(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45832, v45834, v45597, v45598, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) -> f_1466(v45580, v45581, v45582, v45583, v45584, v45585, v45586, v45587, 1, v45589, v45590, 0, v45592, v45593, v45597, v45598, v45832, v45834, v45599, v45600, v45601, v45602, v45603, v45604, v45605, 3, 7, 2, 4, 8) :|: TRUE
f_1466(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45977, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45987, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1467(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45977, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45987, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: TRUE
f_1467(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45977, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45987, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1468(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45977, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45987, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: TRUE
f_1468(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45977, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45987, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1469(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45977, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45987, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: 0 = 0
f_1469(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45977, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45987, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1470(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: 0 = 0
f_1470(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1471(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: 0 < v45987
f_1471(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1473(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: 0 = 0
f_1473(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1475(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: TRUE
f_1475(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1477(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: 0 = 0
f_1477(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1479(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: 0 = 0
f_1479(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1481(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: 0 = 0
f_1481(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1482(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: TRUE
f_1482(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1483(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: 0 = 0
f_1483(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45980, 0, v45982, v45983, v45984, v45985, v45986, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1484(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: 0 = 0
f_1484(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1485(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: 0 < v45986 && 2 <= v45980
f_1485(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1487(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: 0 = 0
f_1487(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1489(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: 0 = 0
f_1489(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1491(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: TRUE
f_1491(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1493(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, v48509, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: TRUE
f_1493(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, v48509, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1495(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, v48509, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: v48509 != 0
f_1493(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, v48509, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1496(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: v48509 = 0
f_1495(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, v48509, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1497(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, v48509, v45982, v45983, 0, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: 0 = 0
f_1497(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, v48509, v45982, v45983, 0, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1499(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, v48509, v45982, v45983, 0, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: TRUE
f_1499(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, v48509, v45982, v45983, 0, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1440(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, v48509, v45982, v45983, 0, v45984, v45985, v45980, v45987, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: TRUE
f_1440(v45186, v45187, v45188, v45189, v45190, v45191, v45192, v45193, 1, v45195, v45196, v45197, v45198, v45199, 0, v45201, v45202, v45203, v45204, v45205, v45206, v45207, v45208, v45209, v45210, v45211, 3, 7, 2, 4, 8) -> f_1443(v45186, v45187, v45188, v45189, v45190, v45191, v45192, v45193, 1, v45195, v45196, v45197, v45198, v45199, 0, v45201, v45202, v45203, v45204, v45205, v45206, v45207, v45208, v45209, v45210, v45211, 3, 7, 2, 4, 8) :|: 0 = 0
f_1443(v45186, v45187, v45188, v45189, v45190, v45191, v45192, v45193, 1, v45195, v45196, v45197, v45198, v45199, 0, v45201, v45202, v45203, v45204, v45205, v45206, v45207, v45208, v45209, v45210, v45211, 3, 7, 2, 4, 8) -> f_1445(v45186, v45187, v45188, v45189, v45190, v45191, v45192, v45193, 1, v45195, v45196, v45197, v45199, 0, v45201, v45202, v45203, v45204, v45205, v45206, v45207, v45208, v45209, v45210, v45211, 3, 7, 2, 4, 8) :|: 0 = 0
f_1445(v45186, v45187, v45188, v45189, v45190, v45191, v45192, v45193, 1, v45195, v45196, v45197, v45199, 0, v45201, v45202, v45203, v45204, v45205, v45206, v45207, v45208, v45209, v45210, v45211, 3, 7, 2, 4, 8) -> f_1448(v45186, v45187, v45188, v45189, v45190, v45191, v45192, v45193, 1, v45195, v45196, v45197, v45368, 0, v45201, v45202, v45203, v45204, v45205, v45206, v45207, v45208, v45209, v45210, v45211, 3, 7, 2, 4, 8) :|: 1 + v45368 = v45193 && 0 <= v45368
f_1448(v45186, v45187, v45188, v45189, v45190, v45191, v45192, v45193, 1, v45195, v45196, v45197, v45368, 0, v45201, v45202, v45203, v45204, v45205, v45206, v45207, v45208, v45209, v45210, v45211, 3, 7, 2, 4, 8) -> f_1451(v45186, v45187, v45188, v45189, v45190, v45191, v45192, v45193, 1, v45195, v45196, v45197, v45368, 0, v45201, v45202, v45203, v45204, v45205, v45206, v45207, v45208, v45209, v45210, v45211, 3, 7, 2, 4, 8) :|: 0 = 0
f_1451(v45186, v45187, v45188, v45189, v45190, v45191, v45192, v45193, 1, v45195, v45196, v45197, v45368, 0, v45201, v45202, v45203, v45204, v45205, v45206, v45207, v45208, v45209, v45210, v45211, 3, 7, 2, 4, 8) -> f_1455(v45186, v45187, v45188, v45189, v45190, v45191, v45192, v45193, 1, v45195, v45196, v45197, v45368, 0, v45201, v45202, v45203, v45204, v45205, v45206, v45207, v45208, v45209, v45210, v45211, 3, 7, 2, 4, 8) :|: TRUE
f_1455(v45186, v45187, v45188, v45189, v45190, v45191, v45192, v45193, 1, v45195, v45196, v45197, v45368, 0, v45201, v45202, v45203, v45204, v45205, v45206, v45207, v45208, v45209, v45210, v45211, 3, 7, 2, 4, 8) -> f_1457(v45186, v45187, v45188, v45189, v45190, v45191, v45192, v45193, 1, v45195, v45196, v45197, v45368, 0, v45201, v45202, v45203, v45204, v45205, v45206, v45207, v45208, v45209, v45210, v45211, 3, 7, 2, 4, 8) :|: TRUE
f_1457(v45186, v45187, v45188, v45189, v45190, v45191, v45192, v45193, 1, v45195, v45196, v45197, v45368, 0, v45201, v45202, v45203, v45204, v45205, v45206, v45207, v45208, v45209, v45210, v45211, 3, 7, 2, 4, 8) -> f_1367(v45186, v45187, v45188, v45189, v45190, v45191, v45192, v45193, 1, v45195, v45196, v45197, v45368, 0, v45201, v45202, v45203, v45204, v45205, v45206, v45207, v45208, v45209, v45210, v45211, 3, 7, 2, 4, 8) :|: TRUE
f_1367(v40141, v40142, v40143, v40144, v40145, v40146, v40147, v40148, 1, v40150, v40151, v40152, v40153, 0, v40155, v40156, v40157, v40158, v40159, v40160, v40161, v40162, v40163, v40164, v40165, 3, 7, 2, 4, 8) -> f_1370(v40141, v40142, v40143, v40144, v40145, v40146, v40147, v40148, 1, v40150, v40151, v40152, v40153, 0, v40155, v40156, v40157, v40158, v40159, v40160, v40161, v40162, v40163, v40164, v40165, 3, 7, 2, 4, 8) :|: TRUE
f_1370(v40141, v40142, v40143, v40144, v40145, v40146, v40147, v40148, 1, v40150, v40151, v40152, v40153, 0, v40155, v40156, v40157, v40158, v40159, v40160, v40161, v40162, v40163, v40164, v40165, 3, 7, 2, 4, 8) -> f_1371(v40141, v40142, v40143, v40144, v40145, v40146, v40147, v40148, 1, v40150, v40151, v40152, 0, v40155, v40156, v40157, v40158, v40153, v40159, v40160, v40161, v40162, v40163, v40164, v40165, 3, 7, 2, 4, 8) :|: TRUE
f_1371(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40474, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40484, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1374(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40474, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40484, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: 0 = 0
f_1374(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40474, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40484, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1378(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: 0 = 0
f_1378(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1382(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: 0 < v40484 && 2 <= v40474 && 2 <= v40483
f_1382(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1387(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: 0 = 0
f_1387(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1392(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: TRUE
f_1392(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1397(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: 0 = 0
f_1397(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1402(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: 0 = 0
f_1402(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1407(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: 0 = 0
f_1407(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1411(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: TRUE
f_1411(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1413(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: 0 = 0
f_1413(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1416(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: 0 = 0
f_1416(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1419(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: 0 = 0
f_1419(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1422(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: 0 = 0
f_1422(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1425(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: TRUE
f_1425(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v40478, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1428(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v44789, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: TRUE
f_1428(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v44789, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1431(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v44789, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: v44789 != 0
f_1428(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v44789, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1432(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: v44789 = 0
f_1431(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v44789, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1435(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v44789, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: 0 = 0
f_1435(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v44789, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1439(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v44789, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: TRUE
f_1439(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v44789, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1440(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, v44789, v40474, v40484, 0, v40480, v40481, v40482, v40483, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: TRUE
f_1432(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1436(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: 0 = 0
f_1436(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1441(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: TRUE
f_1441(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, 0, v40480, v40481, v40482, v40483, v40474, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) -> f_1442(v40467, v40468, v40469, v40470, v40471, v40472, v40473, v40484, 1, v40476, v40477, 0, v40474, v40484, v40480, v40481, v40482, v40483, v40485, v40486, v40487, v40488, v40489, v40490, v40491, 3, 7, 2, 4, 8) :|: TRUE
f_1442(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) -> f_1444(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45367, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) :|: TRUE
f_1444(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45367, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) -> f_1446(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45367, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) :|: v45367 != 0
f_1444(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45367, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) -> f_1447(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) :|: v45367 = 0
f_1446(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45367, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) -> f_1449(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45367, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) :|: 0 = 0
f_1449(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45367, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) -> f_1452(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45367, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) :|: TRUE
f_1452(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45367, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) -> f_1274(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45367, v45356, v45357, v45358, v45352, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) :|: TRUE
f_1447(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) -> f_1450(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) :|: 0 = 0
f_1450(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) -> f_1453(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) :|: TRUE
f_1453(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45356, v45357, v45358, v45359, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) -> f_1454(v45342, v45343, v45344, v45345, v45346, v45347, v45348, v45349, 1, v45351, v45352, 0, v45354, v45355, v45358, v45352, v45359, v45356, v45357, v45360, v45361, v45362, v45363, v45364, v45365, v45366, 3, 7, 2, 4, 8) :|: TRUE
f_1496(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1498(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: 0 = 0
f_1498(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1500(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: TRUE
f_1500(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) -> f_1442(v45970, v45971, v45972, v45973, v45974, v45975, v45976, v45987, 1, v45979, v45986, 0, v45982, v45983, v45984, v45985, v45980, v45987, v45988, v45989, v45990, v45991, v45992, v45993, v45994, 3, 7, 2, 4, 8) :|: TRUE
f_1228(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1235(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: 0 = 0
f_1235(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) -> f_1244(v25191, v25192, v25193, v25194, v25195, v25196, v25197, v25198, 1, v25209, v25210, 0, v25203, v25204, v25205, v25206, v25207, v25208, v25200, v25211, v25212, v25213, v25214, v25215, v25216, v25217, 3, 7, 2, 4, 8) :|: TRUE
Combined rules. Obtained 18 rulesP rules:
f_1251(v25191:0, v25192:0, v25193:0, v25194:0, v25195:0, v25196:0, v25197:0, v25198:0, 1, v25209:0, 1 + v45832:0, 0, v25203:0, v25204:0, 0, v25206:0, v25207:0, v25208:0, v25200:0, v25211:0, v25212:0, v25213:0, v25214:0, v25215:0, v25216:0, v25217:0, 3, 7, 2, 4, 8) -> f_1493(v25191:0, v25192:0, v25193:0, v25194:0, v25195:0, v25196:0, v25197:0, v45834:0, 1, v25209:0, v45832:0, v48509:0, 0, v25203:0, v25204:0, v25200:0, 1 + v45832:0, 1 + v45832:0, v25211:0, v25212:0, v25213:0, v25214:0, v25215:0, v25216:0, v25217:0, 3, 7, 2, 4, 8) :|: v45832:0 > 0 && v45834:0 > 0
f_1444(v45342:0, v45343:0, v45344:0, v45345:0, v45346:0, v45347:0, v45348:0, v45349:0, 1, v45351:0, 1 + v45832:0, 0, v45354:0, v45355:0, 0, v45356:0, v45357:0, v45358:0, v45359:0, v45360:0, v45361:0, v45362:0, v45363:0, v45364:0, v45365:0, v45366:0, 3, 7, 2, 4, 8) -> f_1493(v45342:0, v45343:0, v45344:0, v45345:0, v45346:0, v45347:0, v45348:0, v45834:0, 1, v45351:0, v45832:0, v48509:0, 0, v45354:0, v45355:0, v45356:0, v45357:0, 1 + v45832:0, v45360:0, v45361:0, v45362:0, v45363:0, v45364:0, v45365:0, v45366:0, 3, 7, 2, 4, 8) :|: v45832:0 > 0 && v45834:0 > 0
f_1493(v45970:0, v45971:0, v45972:0, v45973:0, v45974:0, v45975:0, v45976:0, 1 + v45368:0, 1, v45979:0, v45986:0, v48509:0, 0, v45982:0, v45983:0, v45984:0, v45985:0, v45980:0, v45988:0, v45989:0, v45990:0, v45991:0, v45992:0, v45993:0, v45994:0, 3, 7, 2, 4, 8) -> f_1428(v45970:0, v45971:0, v45972:0, v45973:0, v45974:0, v45975:0, v45976:0, v45368:0, 1, v45979:0, v45986:0, v44789:0, 0, v45984:0, v45985:0, v45980:0, 1 + v45368:0, 1 + v45368:0, v45988:0, v45989:0, v45990:0, v45991:0, v45992:0, v45993:0, v45994:0, 3, 7, 2, 4, 8) :|: v45368:0 > 0 && v48509:0 < 0
f_1493(v45970:0, v45971:0, v45972:0, v45973:0, v45974:0, v45975:0, v45976:0, 1 + v45368:0, 1, v45979:0, v45986:0, v48509:0, 0, v45982:0, v45983:0, v45984:0, v45985:0, v45980:0, v45988:0, v45989:0, v45990:0, v45991:0, v45992:0, v45993:0, v45994:0, 3, 7, 2, 4, 8) -> f_1428(v45970:0, v45971:0, v45972:0, v45973:0, v45974:0, v45975:0, v45976:0, v45368:0, 1, v45979:0, v45986:0, v44789:0, 0, v45984:0, v45985:0, v45980:0, 1 + v45368:0, 1 + v45368:0, v45988:0, v45989:0, v45990:0, v45991:0, v45992:0, v45993:0, v45994:0, 3, 7, 2, 4, 8) :|: v45368:0 > 0 && v48509:0 > 0
f_1394(v36528:0, v36529:0, v36530:0, v36531:0, v36532:0, v36533:0, v36534:0, v36545:0, 1, v36537:0, v36538:0, 0, v36540:0, v36541:0, v36542:0, v36543:0, v36544:0, v36535:0, v36546:0, v36547:0, v36548:0, v36549:0, v36550:0, v36551:0, v36552:0, 0, 3, 7, 2, 4, 8) -> f_1251(v36528:0, v36529:0, v36530:0, v36531:0, v36532:0, v36533:0, v36534:0, v36545:0, 1, v36537:0, v36538:0, 0, v36535:0, v36545:0, v34661:0, v36541:0, v36542:0, v36543:0, v36544:0, v36546:0, v36547:0, v36548:0, v36549:0, v36550:0, v36551:0, v36552:0, 3, 7, 2, 4, 8) :|: TRUE
f_1444(v45342:0, v45343:0, v45344:0, v45345:0, v45346:0, v45347:0, v45348:0, v45349:0, 1, 1 + v36937:0, v45352:0, 0, v45354:0, v45355:0, v45367:0, v45356:0, v45357:0, v45358:0, v45359:0, v45360:0, v45361:0, v45362:0, v45363:0, v45364:0, v45365:0, v45366:0, 3, 7, 2, 4, 8) -> f_1099(v45342:0, v45343:0, v45344:0, v45345:0, v45346:0, v45347:0, v45348:0, v45349:0, 1, 1 + v36937:0, v45352:0, 0, v45354:0, v45355:0, v45367:0, v45358:0, v45352:0, v45359:0, v36937:0, v37165:0, v45360:0, v45361:0, v45362:0, v45363:0, v45364:0, v45365:0, v45366:0, 3, 7, 2, 4, 8) :|: v45367:0 < 0 && v36937:0 > -1
f_1444(v45342:0, v45343:0, v45344:0, v45345:0, v45346:0, v45347:0, v45348:0, v45349:0, 1, 1 + v36937:0, v45352:0, 0, v45354:0, v45355:0, v45367:0, v45356:0, v45357:0, v45358:0, v45359:0, v45360:0, v45361:0, v45362:0, v45363:0, v45364:0, v45365:0, v45366:0, 3, 7, 2, 4, 8) -> f_1099(v45342:0, v45343:0, v45344:0, v45345:0, v45346:0, v45347:0, v45348:0, v45349:0, 1, 1 + v36937:0, v45352:0, 0, v45354:0, v45355:0, v45367:0, v45358:0, v45352:0, v45359:0, v36937:0, v37165:0, v45360:0, v45361:0, v45362:0, v45363:0, v45364:0, v45365:0, v45366:0, 3, 7, 2, 4, 8) :|: v45367:0 > 0 && v36937:0 > -1
f_1251(v25191:0, v25192:0, v25193:0, v25194:0, v25195:0, v25196:0, v25197:0, v25198:0, 1, 1 + v36937:0, v25210:0, 0, v25203:0, v25204:0, v34661:0, v25206:0, v25207:0, v25208:0, v25200:0, v25211:0, v25212:0, v25213:0, v25214:0, v25215:0, v25216:0, v25217:0, 3, 7, 2, 4, 8) -> f_1099(v25191:0, v25192:0, v25193:0, v25194:0, v25195:0, v25196:0, v25197:0, v25198:0, 1, 1 + v36937:0, v25210:0, 0, v25203:0, v25204:0, v34661:0, v25206:0, v25207:0, v25208:0, v36937:0, v37165:0, v25211:0, v25212:0, v25213:0, v25214:0, v25215:0, v25216:0, v25217:0, 3, 7, 2, 4, 8) :|: v36937:0 > -1 && v34661:0 < 0
f_1251(v25191:0, v25192:0, v25193:0, v25194:0, v25195:0, v25196:0, v25197:0, v25198:0, 1, 1 + v36937:0, v25210:0, 0, v25203:0, v25204:0, v34661:0, v25206:0, v25207:0, v25208:0, v25200:0, v25211:0, v25212:0, v25213:0, v25214:0, v25215:0, v25216:0, v25217:0, 3, 7, 2, 4, 8) -> f_1099(v25191:0, v25192:0, v25193:0, v25194:0, v25195:0, v25196:0, v25197:0, v25198:0, 1, 1 + v36937:0, v25210:0, 0, v25203:0, v25204:0, v34661:0, v25206:0, v25207:0, v25208:0, v36937:0, v37165:0, v25211:0, v25212:0, v25213:0, v25214:0, v25215:0, v25216:0, v25217:0, 3, 7, 2, 4, 8) :|: v36937:0 > -1 && v34661:0 > 0
f_1099(v25191:0, v25192:0, v25193:0, v25194:0, v25195:0, v25196:0, v25197:0, v25198:0, 1, v25200:0, v25201:0, 0, v25203:0, v25204:0, v25205:0, v25206:0, v25207:0, v25208:0, v25209:0, v25210:0, v25211:0, v25212:0, v25213:0, v25214:0, v25215:0, v25216:0, v25217:0, 3, 7, 2, 4, 8) -> f_1251(v25191:0, v25192:0, v25193:0, v25194:0, v25195:0, v25196:0, v25197:0, v25198:0, 1, v25209:0, v25210:0, 0, v25203:0, v25204:0, v34661:0, v25206:0, v25207:0, v25208:0, v25200:0, v25211:0, v25212:0, v25213:0, v25214:0, v25215:0, v25216:0, v25217:0, 3, 7, 2, 4, 8) :|: v25200:0 > 1 && v25210:0 > 0 && v25209:0 > 0
f_1428(v40467:0, v40468:0, v40469:0, v40470:0, v40471:0, v40472:0, v40473:0, 1 + v45368:0, 1, v40476:0, v40477:0, v44789:0, 0, v40480:0, v40481:0, v40482:0, v40483:0, v40474:0, v40485:0, v40486:0, v40487:0, v40488:0, v40489:0, v40490:0, v40491:0, 3, 7, 2, 4, 8) -> f_1428(v40467:0, v40468:0, v40469:0, v40470:0, v40471:0, v40472:0, v40473:0, v45368:0, 1, v40476:0, v40477:0, v44789:1, 0, v40480:0, v40481:0, v40482:0, v40483:0, 1 + v45368:0, v40485:0, v40486:0, v40487:0, v40488:0, v40489:0, v40490:0, v40491:0, 3, 7, 2, 4, 8) :|: v45368:0 > 0 && v44789:0 < 0 && v40483:0 > 1
f_1428(v40467:0, v40468:0, v40469:0, v40470:0, v40471:0, v40472:0, v40473:0, 1 + v45368:0, 1, v40476:0, v40477:0, v44789:0, 0, v40480:0, v40481:0, v40482:0, v40483:0, v40474:0, v40485:0, v40486:0, v40487:0, v40488:0, v40489:0, v40490:0, v40491:0, 3, 7, 2, 4, 8) -> f_1428(v40467:0, v40468:0, v40469:0, v40470:0, v40471:0, v40472:0, v40473:0, v45368:0, 1, v40476:0, v40477:0, v44789:1, 0, v40480:0, v40481:0, v40482:0, v40483:0, 1 + v45368:0, v40485:0, v40486:0, v40487:0, v40488:0, v40489:0, v40490:0, v40491:0, 3, 7, 2, 4, 8) :|: v45368:0 > 0 && v44789:0 > 0 && v40483:0 > 1
f_1099(v25191:0, v25192:0, v25193:0, v25194:0, v25195:0, v25196:0, v25197:0, 1 + v34663:0, 1, v25200:0, v25201:0, 0, v25203:0, v25204:0, v25205:0, v25206:0, v25207:0, v25208:0, v25209:0, v25210:0, v25211:0, v25212:0, v25213:0, v25214:0, v25215:0, v25216:0, v25217:0, 3, 7, 2, 4, 8) -> f_1394(v25191:0, v25192:0, v25193:0, v25194:0, v25195:0, v25196:0, v25197:0, v34663:0, 1, v25209:0, v25210:0, v42206:0, v25205:0, v25206:0, v25207:0, v25208:0, v25200:0, 1 + v34663:0, v25211:0, v25212:0, v25213:0, v25214:0, v25215:0, v25216:0, v25217:0, 0, 3, 7, 2, 4, 8) :|: v34663:0 > 0 && v25200:0 > 1 && v25209:0 > 0 && v25210:0 > 0 && v33742:0 < 0 && v25208:0 > 1
f_1099(v25191:0, v25192:0, v25193:0, v25194:0, v25195:0, v25196:0, v25197:0, 1 + v34663:0, 1, v25200:0, v25201:0, 0, v25203:0, v25204:0, v25205:0, v25206:0, v25207:0, v25208:0, v25209:0, v25210:0, v25211:0, v25212:0, v25213:0, v25214:0, v25215:0, v25216:0, v25217:0, 3, 7, 2, 4, 8) -> f_1394(v25191:0, v25192:0, v25193:0, v25194:0, v25195:0, v25196:0, v25197:0, v34663:0, 1, v25209:0, v25210:0, v42206:0, v25205:0, v25206:0, v25207:0, v25208:0, v25200:0, 1 + v34663:0, v25211:0, v25212:0, v25213:0, v25214:0, v25215:0, v25216:0, v25217:0, 0, 3, 7, 2, 4, 8) :|: v34663:0 > 0 && v25200:0 > 1 && v25209:0 > 0 && v25210:0 > 0 && v33742:0 > 0 && v25208:0 > 1
f_1394(v36528:0, v36529:0, v36530:0, v36531:0, v36532:0, v36533:0, v36534:0, 1 + v34663:0, 1, v36537:0, v36538:0, v42206:0, v36540:0, v36541:0, v36542:0, v36543:0, v36544:0, v36535:0, v36546:0, v36547:0, v36548:0, v36549:0, v36550:0, v36551:0, v36552:0, 0, 3, 7, 2, 4, 8) -> f_1394(v36528:0, v36529:0, v36530:0, v36531:0, v36532:0, v36533:0, v36534:0, v34663:0, 1, v36537:0, v36538:0, v42206:1, v36540:0, v36541:0, v36542:0, v36543:0, v36544:0, 1 + v34663:0, v36546:0, v36547:0, v36548:0, v36549:0, v36550:0, v36551:0, v36552:0, 0, 3, 7, 2, 4, 8) :|: v34663:0 > 0 && v42206:0 < 0 && v36543:0 > 1
f_1394(v36528:0, v36529:0, v36530:0, v36531:0, v36532:0, v36533:0, v36534:0, 1 + v34663:0, 1, v36537:0, v36538:0, v42206:0, v36540:0, v36541:0, v36542:0, v36543:0, v36544:0, v36535:0, v36546:0, v36547:0, v36548:0, v36549:0, v36550:0, v36551:0, v36552:0, 0, 3, 7, 2, 4, 8) -> f_1394(v36528:0, v36529:0, v36530:0, v36531:0, v36532:0, v36533:0, v36534:0, v34663:0, 1, v36537:0, v36538:0, v42206:1, v36540:0, v36541:0, v36542:0, v36543:0, v36544:0, 1 + v34663:0, v36546:0, v36547:0, v36548:0, v36549:0, v36550:0, v36551:0, v36552:0, 0, 3, 7, 2, 4, 8) :|: v34663:0 > 0 && v42206:0 > 0 && v36543:0 > 1
f_1428(v40467:0, v40468:0, v40469:0, v40470:0, v40471:0, v40472:0, v40473:0, v40484:0, 1, v40476:0, v40477:0, 0, 0, v40480:0, v40481:0, v40482:0, v40483:0, v40474:0, v40485:0, v40486:0, v40487:0, v40488:0, v40489:0, v40490:0, v40491:0, 3, 7, 2, 4, 8) -> f_1444(v40467:0, v40468:0, v40469:0, v40470:0, v40471:0, v40472:0, v40473:0, v40484:0, 1, v40476:0, v40477:0, 0, v40474:0, v40484:0, v45367:0, v40480:0, v40481:0, v40482:0, v40483:0, v40485:0, v40486:0, v40487:0, v40488:0, v40489:0, v40490:0, v40491:0, 3, 7, 2, 4, 8) :|: TRUE
f_1493(v45970:0, v45971:0, v45972:0, v45973:0, v45974:0, v45975:0, v45976:0, v45987:0, 1, v45979:0, v45986:0, 0, 0, v45982:0, v45983:0, v45984:0, v45985:0, v45980:0, v45988:0, v45989:0, v45990:0, v45991:0, v45992:0, v45993:0, v45994:0, 3, 7, 2, 4, 8) -> f_1444(v45970:0, v45971:0, v45972:0, v45973:0, v45974:0, v45975:0, v45976:0, v45987:0, 1, v45979:0, v45986:0, 0, v45982:0, v45983:0, v45367:0, v45984:0, v45985:0, v45980:0, v45987:0, v45988:0, v45989:0, v45990:0, v45991:0, v45992:0, v45993:0, v45994:0, 3, 7, 2, 4, 8) :|: TRUE
Filtered unneeded arguments:
   f_1251(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_1251(x8, x10, x11, x15, x18)
   f_1444(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_1444(x8, x10, x11, x15, x19)
   f_1493(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_1493(x8, x10, x11, x12)
   f_1394(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_1394(x8, x10, x11, x12, x16)
   f_1099(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32) -> f_1099(x8, x10, x18, x19, x20)
   f_1428(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_1428(x8, x10, x11, x12, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 17 rules.P rules:
f_1251(v25198:0, v25209:0, sum~cons_1~v45832:0, cons_0, v25208:0) -> f_1493(v45834:0, v25209:0, v45832:0, v48509:0) :|: v45832:0 > 0 && v45834:0 > 0 && sum~cons_1~v45832:0 = 1 + v45832:0 && cons_0 = 0
f_1444(v45349:0, v45351:0, sum~cons_1~v45832:0, cons_0, v45359:0) -> f_1493(v45834:0, v45351:0, v45832:0, v48509:0) :|: v45832:0 > 0 && v45834:0 > 0 && sum~cons_1~v45832:0 = 1 + v45832:0 && cons_0 = 0
f_1493(sum~cons_1~v45368:0, v45979:0, v45986:0, v48509:0) -> f_1428(v45368:0, v45979:0, v45986:0, v44789:0, 1 + v45368:0) :|: v45368:0 > 0 && v48509:0 < 0 && sum~cons_1~v45368:0 = 1 + v45368:0
f_1493(sum~cons_1~v45368:0, v45979:0, v45986:0, v48509:0) -> f_1428(v45368:0, v45979:0, v45986:0, v44789:0, 1 + v45368:0) :|: v45368:0 > 0 && v48509:0 > 0 && sum~cons_1~v45368:0 = 1 + v45368:0
f_1394(v36545:0, v36537:0, v36538:0, cons_0, v36543:0) -> f_1251(v36545:0, v36537:0, v36538:0, v34661:0, v36543:0) :|: TRUE && cons_0 = 0
f_1444(v45349:0, sum~cons_1~v36937:0, v45352:0, v45367:0, v45359:0) -> f_1099(v45349:0, 1 + v36937:0, v45359:0, v36937:0, v37165:0) :|: v45367:0 < 0 && v36937:0 > -1 && sum~cons_1~v36937:0 = 1 + v36937:0
f_1444(v45349:0, sum~cons_1~v36937:0, v45352:0, v45367:0, v45359:0) -> f_1099(v45349:0, 1 + v36937:0, v45359:0, v36937:0, v37165:0) :|: v45367:0 > 0 && v36937:0 > -1 && sum~cons_1~v36937:0 = 1 + v36937:0
f_1251(v25198:0, sum~cons_1~v36937:0, v25210:0, v34661:0, v25208:0) -> f_1099(v25198:0, 1 + v36937:0, v25208:0, v36937:0, v37165:0) :|: v36937:0 > -1 && v34661:0 < 0 && sum~cons_1~v36937:0 = 1 + v36937:0
f_1251(v25198:0, sum~cons_1~v36937:0, v25210:0, v34661:0, v25208:0) -> f_1099(v25198:0, 1 + v36937:0, v25208:0, v36937:0, v37165:0) :|: v36937:0 > -1 && v34661:0 > 0 && sum~cons_1~v36937:0 = 1 + v36937:0
f_1099(v25198:0, v25200:0, v25208:0, v25209:0, v25210:0) -> f_1251(v25198:0, v25209:0, v25210:0, v34661:0, v25208:0) :|: v25210:0 > 0 && v25209:0 > 0 && v25200:0 > 1
f_1428(sum~cons_1~v45368:0, v40476:0, v40477:0, v44789:0, v40483:0) -> f_1428(v45368:0, v40476:0, v40477:0, v44789:1, v40483:0) :|: v44789:0 < 0 && v40483:0 > 1 && v45368:0 > 0 && sum~cons_1~v45368:0 = 1 + v45368:0
f_1428(sum~cons_1~v45368:0, v40476:0, v40477:0, v44789:0, v40483:0) -> f_1428(v45368:0, v40476:0, v40477:0, v44789:1, v40483:0) :|: v44789:0 > 0 && v40483:0 > 1 && v45368:0 > 0 && sum~cons_1~v45368:0 = 1 + v45368:0
f_1099(sum~cons_1~v34663:0, v25200:0, v25208:0, v25209:0, v25210:0) -> f_1394(v34663:0, v25209:0, v25210:0, v42206:0, v25208:0) :|: v25200:0 > 1 && v34663:0 > 0 && v25209:0 > 0 && v25208:0 > 1 && v25210:0 > 0 && sum~cons_1~v34663:0 = 1 + v34663:0
f_1394(sum~cons_1~v34663:0, v36537:0, v36538:0, v42206:0, v36543:0) -> f_1394(v34663:0, v36537:0, v36538:0, v42206:1, v36543:0) :|: v42206:0 < 0 && v36543:0 > 1 && v34663:0 > 0 && sum~cons_1~v34663:0 = 1 + v34663:0
f_1394(sum~cons_1~v34663:0, v36537:0, v36538:0, v42206:0, v36543:0) -> f_1394(v34663:0, v36537:0, v36538:0, v42206:1, v36543:0) :|: v42206:0 > 0 && v36543:0 > 1 && v34663:0 > 0 && sum~cons_1~v34663:0 = 1 + v34663:0
f_1428(v40484:0, v40476:0, v40477:0, cons_0, v40483:0) -> f_1444(v40484:0, v40476:0, v40477:0, v45367:0, v40483:0) :|: TRUE && cons_0 = 0
f_1493(v45987:0, v45979:0, v45986:0, cons_0) -> f_1444(v45987:0, v45979:0, v45986:0, v45367:0, v45987:0) :|: TRUE && cons_0 = 0

----------------------------------------

(9)
Obligation:
Rules:
f_1251(v25198:0, v25209:0, sum~cons_1~v45832:0, cons_0, v25208:0) -> f_1493(v45834:0, v25209:0, v45832:0, v48509:0) :|: v45832:0 > 0 && v45834:0 > 0 && sum~cons_1~v45832:0 = 1 + v45832:0 && cons_0 = 0
f_1444(x, x1, x2, x3, x4) -> f_1493(x5, x1, x6, x7) :|: x6 > 0 && x5 > 0 && x2 = 1 + x6 && x3 = 0
f_1493(x8, x9, x10, x11) -> f_1428(x12, x9, x10, x13, 1 + x12) :|: x12 > 0 && x11 < 0 && x8 = 1 + x12
f_1493(x14, x15, x16, x17) -> f_1428(x18, x15, x16, x19, 1 + x18) :|: x18 > 0 && x17 > 0 && x14 = 1 + x18
f_1394(x20, x21, x22, x23, x24) -> f_1251(x20, x21, x22, x25, x24) :|: TRUE && x23 = 0
f_1444(v45349:0, sum~cons_1~v36937:0, v45352:0, v45367:0, v45359:0) -> f_1099(v45349:0, 1 + v36937:0, v45359:0, v36937:0, v37165:0) :|: v45367:0 < 0 && v36937:0 > -1 && sum~cons_1~v36937:0 = 1 + v36937:0
f_1444(x26, x27, x28, x29, x30) -> f_1099(x26, 1 + x31, x30, x31, x32) :|: x29 > 0 && x31 > -1 && x27 = 1 + x31
f_1251(x33, x34, x35, x36, x37) -> f_1099(x33, 1 + x38, x37, x38, x39) :|: x38 > -1 && x36 < 0 && x34 = 1 + x38
f_1251(x40, x41, x42, x43, x44) -> f_1099(x40, 1 + x45, x44, x45, x46) :|: x45 > -1 && x43 > 0 && x41 = 1 + x45
f_1099(x47, x48, x49, x50, x51) -> f_1251(x47, x50, x51, x52, x49) :|: x51 > 0 && x50 > 0 && x48 > 1
f_1428(sum~cons_1~v45368:0, v40476:0, v40477:0, v44789:0, v40483:0) -> f_1428(v45368:0, v40476:0, v40477:0, v44789:1, v40483:0) :|: v44789:0 < 0 && v40483:0 > 1 && v45368:0 > 0 && sum~cons_1~v45368:0 = 1 + v45368:0
f_1428(x53, x54, x55, x56, x57) -> f_1428(x58, x54, x55, x59, x57) :|: x56 > 0 && x57 > 1 && x58 > 0 && x53 = 1 + x58
f_1099(x60, x61, x62, x63, x64) -> f_1394(x65, x63, x64, x66, x62) :|: x61 > 1 && x65 > 0 && x63 > 0 && x62 > 1 && x64 > 0 && x60 = 1 + x65
f_1394(sum~cons_1~v34663:0, v36537:0, v36538:0, v42206:0, v36543:0) -> f_1394(v34663:0, v36537:0, v36538:0, v42206:1, v36543:0) :|: v42206:0 < 0 && v36543:0 > 1 && v34663:0 > 0 && sum~cons_1~v34663:0 = 1 + v34663:0
f_1394(x67, x68, x69, x70, x71) -> f_1394(x72, x68, x69, x73, x71) :|: x70 > 0 && x71 > 1 && x72 > 0 && x67 = 1 + x72
f_1428(x74, x75, x76, x77, x78) -> f_1444(x74, x75, x76, x79, x78) :|: TRUE && x77 = 0
f_1493(x80, x81, x82, x83) -> f_1444(x80, x81, x82, x84, x80) :|: TRUE && x83 = 0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_1428(sum~cons_1~x58:0, x54:0, x55:0, x56:0, x57:0) -> f_1428(x58:0, x54:0, x55:0, x59:0, x57:0) :|: x56:0 > 0 && x57:0 > 1 && x58:0 > 0 && sum~cons_1~x58:0 = 1 + x58:0
f_1428(x74:0, x75:0, x76:0, cons_0, x78:0) -> f_1444(x74:0, x75:0, x76:0, x79:0, x78:0) :|: TRUE && cons_0 = 0
f_1493(sum~cons_1~x12:0, x9:0, x10:0, x11:0) -> f_1428(x12:0, x9:0, x10:0, x13:0, 1 + x12:0) :|: x12:0 > 0 && x11:0 < 0 && sum~cons_1~x12:0 = 1 + x12:0
f_1444(v45349:0:0, sum~cons_1~v36937:0:0, v45352:0:0, v45367:0:0, v45359:0:0) -> f_1099(v45349:0:0, 1 + v36937:0:0, v45359:0:0, v36937:0:0, v37165:0:0) :|: v45367:0:0 < 0 && v36937:0:0 > -1 && sum~cons_1~v36937:0:0 = 1 + v36937:0:0
f_1394(sum~cons_1~x72:0, x68:0, x69:0, x70:0, x71:0) -> f_1394(x72:0, x68:0, x69:0, x73:0, x71:0) :|: x70:0 > 0 && x71:0 > 1 && x72:0 > 0 && sum~cons_1~x72:0 = 1 + x72:0
f_1493(sum~cons_1~x18:0, x15:0, x16:0, x17:0) -> f_1428(x18:0, x15:0, x16:0, x19:0, 1 + x18:0) :|: x18:0 > 0 && x17:0 > 0 && sum~cons_1~x18:0 = 1 + x18:0
f_1394(x, x1, x2, x3, x4) -> f_1251(x, x1, x2, x5, x4) :|: TRUE && x3 = 0
f_1251(x33:0, sum~cons_1~x38:0, x35:0, x36:0, x37:0) -> f_1099(x33:0, 1 + x38:0, x37:0, x38:0, x39:0) :|: x38:0 > -1 && x36:0 < 0 && sum~cons_1~x38:0 = 1 + x38:0
f_1099(sum~cons_1~x65:0, x61:0, x62:0, x63:0, x64:0) -> f_1394(x65:0, x63:0, x64:0, x66:0, x62:0) :|: x62:0 > 1 && x64:0 > 0 && x63:0 > 0 && x65:0 > 0 && x61:0 > 1 && sum~cons_1~x65:0 = 1 + x65:0
f_1394(sum~cons_1~v34663:0:0, v36537:0:0, v36538:0:0, v42206:0:0, v36543:0:0) -> f_1394(v34663:0:0, v36537:0:0, v36538:0:0, v42206:1:0, v36543:0:0) :|: v42206:0:0 < 0 && v36543:0:0 > 1 && v34663:0:0 > 0 && sum~cons_1~v34663:0:0 = 1 + v34663:0:0
f_1444(x26:0, sum~cons_1~x31:0, x28:0, x29:0, x30:0) -> f_1099(x26:0, 1 + x31:0, x30:0, x31:0, x32:0) :|: x29:0 > 0 && x31:0 > -1 && sum~cons_1~x31:0 = 1 + x31:0
f_1251(x6, x7, x8, x9, x10) -> f_1493(x11, x7, x12, x13) :|: x12 > 0 && x11 > 0 && x8 = 1 + x12 && x9 = 0
f_1444(x14, x15, x16, x17, x18) -> f_1493(x19, x15, x20, x21) :|: x20 > 0 && x19 > 0 && x16 = 1 + x20 && x17 = 0
f_1251(x40:0, sum~cons_1~x45:0, x42:0, x43:0, x44:0) -> f_1099(x40:0, 1 + x45:0, x44:0, x45:0, x46:0) :|: x45:0 > -1 && x43:0 > 0 && sum~cons_1~x45:0 = 1 + x45:0
f_1428(sum~cons_1~v45368:0:0, v40476:0:0, v40477:0:0, v44789:0:0, v40483:0:0) -> f_1428(v45368:0:0, v40476:0:0, v40477:0:0, v44789:1:0, v40483:0:0) :|: v44789:0:0 < 0 && v40483:0:0 > 1 && v45368:0:0 > 0 && sum~cons_1~v45368:0:0 = 1 + v45368:0:0
f_1099(x47:0, x48:0, x49:0, x50:0, x51:0) -> f_1251(x47:0, x50:0, x51:0, x52:0, x49:0) :|: x51:0 > 0 && x50:0 > 0 && x48:0 > 1
f_1493(x22, x23, x24, x25) -> f_1444(x22, x23, x24, x26, x22) :|: TRUE && x25 = 0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1428(x, x1, x2, x3, x4)] = -2 + x1
[f_1444(x5, x6, x7, x8, x9)] = -2 + x6
[f_1493(x10, x11, x12, x13)] = -2 + x11
[f_1099(x14, x15, x16, x17, x18)] = -1 + x17
[f_1394(x19, x20, x21, x22, x23)] = -1 + x20
[f_1251(x24, x25, x26, x27, x28)] = -1 + x25

The following rules are decreasing:
f_1251(x33:0, sum~cons_1~x38:0, x35:0, x36:0, x37:0) -> f_1099(x33:0, 1 + x38:0, x37:0, x38:0, x39:0) :|: x38:0 > -1 && x36:0 < 0 && sum~cons_1~x38:0 = 1 + x38:0
f_1251(x6, x7, x8, x9, x10) -> f_1493(x11, x7, x12, x13) :|: x12 > 0 && x11 > 0 && x8 = 1 + x12 && x9 = 0
f_1251(x40:0, sum~cons_1~x45:0, x42:0, x43:0, x44:0) -> f_1099(x40:0, 1 + x45:0, x44:0, x45:0, x46:0) :|: x45:0 > -1 && x43:0 > 0 && sum~cons_1~x45:0 = 1 + x45:0
The following rules are bounded:
f_1251(x33:0, sum~cons_1~x38:0, x35:0, x36:0, x37:0) -> f_1099(x33:0, 1 + x38:0, x37:0, x38:0, x39:0) :|: x38:0 > -1 && x36:0 < 0 && sum~cons_1~x38:0 = 1 + x38:0
f_1099(sum~cons_1~x65:0, x61:0, x62:0, x63:0, x64:0) -> f_1394(x65:0, x63:0, x64:0, x66:0, x62:0) :|: x62:0 > 1 && x64:0 > 0 && x63:0 > 0 && x65:0 > 0 && x61:0 > 1 && sum~cons_1~x65:0 = 1 + x65:0
f_1251(x40:0, sum~cons_1~x45:0, x42:0, x43:0, x44:0) -> f_1099(x40:0, 1 + x45:0, x44:0, x45:0, x46:0) :|: x45:0 > -1 && x43:0 > 0 && sum~cons_1~x45:0 = 1 + x45:0
f_1099(x47:0, x48:0, x49:0, x50:0, x51:0) -> f_1251(x47:0, x50:0, x51:0, x52:0, x49:0) :|: x51:0 > 0 && x50:0 > 0 && x48:0 > 1

----------------------------------------

(13)
Complex Obligation (AND)

----------------------------------------

(14)
Obligation:
Rules:
f_1428(sum~cons_1~x58:0, x54:0, x55:0, x56:0, x57:0) -> f_1428(x58:0, x54:0, x55:0, x59:0, x57:0) :|: x56:0 > 0 && x57:0 > 1 && x58:0 > 0 && sum~cons_1~x58:0 = 1 + x58:0
f_1428(x74:0, x75:0, x76:0, cons_0, x78:0) -> f_1444(x74:0, x75:0, x76:0, x79:0, x78:0) :|: TRUE && cons_0 = 0
f_1493(sum~cons_1~x12:0, x9:0, x10:0, x11:0) -> f_1428(x12:0, x9:0, x10:0, x13:0, 1 + x12:0) :|: x12:0 > 0 && x11:0 < 0 && sum~cons_1~x12:0 = 1 + x12:0
f_1444(v45349:0:0, sum~cons_1~v36937:0:0, v45352:0:0, v45367:0:0, v45359:0:0) -> f_1099(v45349:0:0, 1 + v36937:0:0, v45359:0:0, v36937:0:0, v37165:0:0) :|: v45367:0:0 < 0 && v36937:0:0 > -1 && sum~cons_1~v36937:0:0 = 1 + v36937:0:0
f_1394(sum~cons_1~x72:0, x68:0, x69:0, x70:0, x71:0) -> f_1394(x72:0, x68:0, x69:0, x73:0, x71:0) :|: x70:0 > 0 && x71:0 > 1 && x72:0 > 0 && sum~cons_1~x72:0 = 1 + x72:0
f_1493(sum~cons_1~x18:0, x15:0, x16:0, x17:0) -> f_1428(x18:0, x15:0, x16:0, x19:0, 1 + x18:0) :|: x18:0 > 0 && x17:0 > 0 && sum~cons_1~x18:0 = 1 + x18:0
f_1394(x, x1, x2, x3, x4) -> f_1251(x, x1, x2, x5, x4) :|: TRUE && x3 = 0
f_1099(sum~cons_1~x65:0, x61:0, x62:0, x63:0, x64:0) -> f_1394(x65:0, x63:0, x64:0, x66:0, x62:0) :|: x62:0 > 1 && x64:0 > 0 && x63:0 > 0 && x65:0 > 0 && x61:0 > 1 && sum~cons_1~x65:0 = 1 + x65:0
f_1394(sum~cons_1~v34663:0:0, v36537:0:0, v36538:0:0, v42206:0:0, v36543:0:0) -> f_1394(v34663:0:0, v36537:0:0, v36538:0:0, v42206:1:0, v36543:0:0) :|: v42206:0:0 < 0 && v36543:0:0 > 1 && v34663:0:0 > 0 && sum~cons_1~v34663:0:0 = 1 + v34663:0:0
f_1444(x26:0, sum~cons_1~x31:0, x28:0, x29:0, x30:0) -> f_1099(x26:0, 1 + x31:0, x30:0, x31:0, x32:0) :|: x29:0 > 0 && x31:0 > -1 && sum~cons_1~x31:0 = 1 + x31:0
f_1444(x14, x15, x16, x17, x18) -> f_1493(x19, x15, x20, x21) :|: x20 > 0 && x19 > 0 && x16 = 1 + x20 && x17 = 0
f_1428(sum~cons_1~v45368:0:0, v40476:0:0, v40477:0:0, v44789:0:0, v40483:0:0) -> f_1428(v45368:0:0, v40476:0:0, v40477:0:0, v44789:1:0, v40483:0:0) :|: v44789:0:0 < 0 && v40483:0:0 > 1 && v45368:0:0 > 0 && sum~cons_1~v45368:0:0 = 1 + v45368:0:0
f_1099(x47:0, x48:0, x49:0, x50:0, x51:0) -> f_1251(x47:0, x50:0, x51:0, x52:0, x49:0) :|: x51:0 > 0 && x50:0 > 0 && x48:0 > 1
f_1493(x22, x23, x24, x25) -> f_1444(x22, x23, x24, x26, x22) :|: TRUE && x25 = 0

----------------------------------------

(15) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained 2 non-trivial SCCs.

----------------------------------------

(16)
Complex Obligation (AND)

----------------------------------------

(17)
Obligation:
Rules:
f_1428(sum~cons_1~x58:0, x54:0, x55:0, x56:0, x57:0) -> f_1428(x58:0, x54:0, x55:0, x59:0, x57:0) :|: x56:0 > 0 && x57:0 > 1 && x58:0 > 0 && sum~cons_1~x58:0 = 1 + x58:0
f_1493(sum~cons_1~x12:0, x9:0, x10:0, x11:0) -> f_1428(x12:0, x9:0, x10:0, x13:0, 1 + x12:0) :|: x12:0 > 0 && x11:0 < 0 && sum~cons_1~x12:0 = 1 + x12:0
f_1444(x14, x15, x16, x17, x18) -> f_1493(x19, x15, x20, x21) :|: x20 > 0 && x19 > 0 && x16 = 1 + x20 && x17 = 0
f_1428(x74:0, x75:0, x76:0, cons_0, x78:0) -> f_1444(x74:0, x75:0, x76:0, x79:0, x78:0) :|: TRUE && cons_0 = 0
f_1493(sum~cons_1~x18:0, x15:0, x16:0, x17:0) -> f_1428(x18:0, x15:0, x16:0, x19:0, 1 + x18:0) :|: x18:0 > 0 && x17:0 > 0 && sum~cons_1~x18:0 = 1 + x18:0
f_1428(sum~cons_1~v45368:0:0, v40476:0:0, v40477:0:0, v44789:0:0, v40483:0:0) -> f_1428(v45368:0:0, v40476:0:0, v40477:0:0, v44789:1:0, v40483:0:0) :|: v44789:0:0 < 0 && v40483:0:0 > 1 && v45368:0:0 > 0 && sum~cons_1~v45368:0:0 = 1 + v45368:0:0
f_1493(x22, x23, x24, x25) -> f_1444(x22, x23, x24, x26, x22) :|: TRUE && x25 = 0

----------------------------------------

(18) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(19)
Obligation:
Rules:
f_1444(x14:0, x15:0, sum~cons_1~x20:0, cons_0, x18:0) -> f_1428(x18:0:0, x15:0, x20:0, x19:0:0, 1 + x18:0:0) :|: x20:0 > 0 && x18:0:0 > 0 && x21:0 > 0 && sum~cons_1~x20:0 = 1 + x20:0 && cons_0 = 0
f_1428(sum~cons_1~x58:0:0, x54:0:0, x55:0:0, x56:0:0, x57:0:0) -> f_1428(x58:0:0, x54:0:0, x55:0:0, x59:0:0, x57:0:0) :|: x56:0:0 > 0 && x57:0:0 > 1 && x58:0:0 > 0 && sum~cons_1~x58:0:0 = 1 + x58:0:0
f_1428(x, x1, x2, x3, x4) -> f_1444(x, x1, x2, x5, x4) :|: TRUE && x3 = 0
f_1428(sum~cons_1~v45368:0:0:0, v40476:0:0:0, v40477:0:0:0, v44789:0:0:0, v40483:0:0:0) -> f_1428(v45368:0:0:0, v40476:0:0:0, v40477:0:0:0, v44789:1:0:0, v40483:0:0:0) :|: v44789:0:0:0 < 0 && v40483:0:0:0 > 1 && v45368:0:0:0 > 0 && sum~cons_1~v45368:0:0:0 = 1 + v45368:0:0:0
f_1444(x6, x7, x8, x9, x10) -> f_1444(x11, x7, x12, x13, x11) :|: x12 > 0 && x11 > 0 && x8 = 1 + x12 && x9 = 0
f_1444(x14, x15, x16, x17, x18) -> f_1428(x19, x15, x20, x21, 1 + x19) :|: x20 > 0 && x19 > 0 && x22 < 0 && x16 = 1 + x20 && x17 = 0

----------------------------------------

(20) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1444(x1, x2, x3, x4, x5) -> f_1444(x3, x4)
   f_1428(x1, x2, x3, x4, x5) -> f_1428(x1, x3, x4, x5)

----------------------------------------

(21)
Obligation:
Rules:
f_1444(sum~cons_1~x20:0, cons_0) -> f_1428(x18:0:0, x20:0, x19:0:0, 1 + x18:0:0) :|: x20:0 > 0 && x18:0:0 > 0 && x21:0 > 0 && sum~cons_1~x20:0 = 1 + x20:0 && cons_0 = 0
f_1428(sum~cons_1~x58:0:0, x55:0:0, x56:0:0, x57:0:0) -> f_1428(x58:0:0, x55:0:0, x59:0:0, x57:0:0) :|: x56:0:0 > 0 && x57:0:0 > 1 && x58:0:0 > 0 && sum~cons_1~x58:0:0 = 1 + x58:0:0
f_1428(x, x2, x3, x4) -> f_1444(x2, x5) :|: TRUE && x3 = 0
f_1428(sum~cons_1~v45368:0:0:0, v40477:0:0:0, v44789:0:0:0, v40483:0:0:0) -> f_1428(v45368:0:0:0, v40477:0:0:0, v44789:1:0:0, v40483:0:0:0) :|: v44789:0:0:0 < 0 && v40483:0:0:0 > 1 && v45368:0:0:0 > 0 && sum~cons_1~v45368:0:0:0 = 1 + v45368:0:0:0
f_1444(x8, x9) -> f_1444(x12, x13) :|: x12 > 0 && x11 > 0 && x8 = 1 + x12 && x9 = 0
f_1444(x16, x17) -> f_1428(x19, x20, x21, 1 + x19) :|: x20 > 0 && x19 > 0 && x22 < 0 && x16 = 1 + x20 && x17 = 0

----------------------------------------

(22) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1444(x, x1)] = -1 + x
[f_1428(x2, x3, x4, x5)] = -1 + x3

The following rules are decreasing:
f_1444(sum~cons_1~x20:0, cons_0) -> f_1428(x18:0:0, x20:0, x19:0:0, 1 + x18:0:0) :|: x20:0 > 0 && x18:0:0 > 0 && x21:0 > 0 && sum~cons_1~x20:0 = 1 + x20:0 && cons_0 = 0
f_1444(x8, x9) -> f_1444(x12, x13) :|: x12 > 0 && x11 > 0 && x8 = 1 + x12 && x9 = 0
f_1444(x16, x17) -> f_1428(x19, x20, x21, 1 + x19) :|: x20 > 0 && x19 > 0 && x22 < 0 && x16 = 1 + x20 && x17 = 0
The following rules are bounded:
f_1444(sum~cons_1~x20:0, cons_0) -> f_1428(x18:0:0, x20:0, x19:0:0, 1 + x18:0:0) :|: x20:0 > 0 && x18:0:0 > 0 && x21:0 > 0 && sum~cons_1~x20:0 = 1 + x20:0 && cons_0 = 0
f_1444(x8, x9) -> f_1444(x12, x13) :|: x12 > 0 && x11 > 0 && x8 = 1 + x12 && x9 = 0
f_1444(x16, x17) -> f_1428(x19, x20, x21, 1 + x19) :|: x20 > 0 && x19 > 0 && x22 < 0 && x16 = 1 + x20 && x17 = 0

----------------------------------------

(23)
Obligation:
Rules:
f_1428(sum~cons_1~x58:0:0, x55:0:0, x56:0:0, x57:0:0) -> f_1428(x58:0:0, x55:0:0, x59:0:0, x57:0:0) :|: x56:0:0 > 0 && x57:0:0 > 1 && x58:0:0 > 0 && sum~cons_1~x58:0:0 = 1 + x58:0:0
f_1428(x, x2, x3, x4) -> f_1444(x2, x5) :|: TRUE && x3 = 0
f_1428(sum~cons_1~v45368:0:0:0, v40477:0:0:0, v44789:0:0:0, v40483:0:0:0) -> f_1428(v45368:0:0:0, v40477:0:0:0, v44789:1:0:0, v40483:0:0:0) :|: v44789:0:0:0 < 0 && v40483:0:0:0 > 1 && v45368:0:0:0 > 0 && sum~cons_1~v45368:0:0:0 = 1 + v45368:0:0:0

----------------------------------------

(24) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(25)
Obligation:
Rules:
f_1428(sum~cons_1~x58:0:0, x55:0:0, x56:0:0, x57:0:0) -> f_1428(x58:0:0, x55:0:0, x59:0:0, x57:0:0) :|: x56:0:0 > 0 && x57:0:0 > 1 && x58:0:0 > 0 && sum~cons_1~x58:0:0 = 1 + x58:0:0
f_1428(sum~cons_1~v45368:0:0:0, v40477:0:0:0, v44789:0:0:0, v40483:0:0:0) -> f_1428(v45368:0:0:0, v40477:0:0:0, v44789:1:0:0, v40483:0:0:0) :|: v44789:0:0:0 < 0 && v40483:0:0:0 > 1 && v45368:0:0:0 > 0 && sum~cons_1~v45368:0:0:0 = 1 + v45368:0:0:0

----------------------------------------

(26) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(27)
Obligation:
Rules:
f_1428(sum~cons_1~v45368:0:0:0:0, v40477:0:0:0:0, v44789:0:0:0:0, v40483:0:0:0:0) -> f_1428(v45368:0:0:0:0, v40477:0:0:0:0, v44789:1:0:0:0, v40483:0:0:0:0) :|: v44789:0:0:0:0 < 0 && v40483:0:0:0:0 > 1 && v45368:0:0:0:0 > 0 && sum~cons_1~v45368:0:0:0:0 = 1 + v45368:0:0:0:0
f_1428(sum~cons_1~x58:0:0:0, x55:0:0:0, x56:0:0:0, x57:0:0:0) -> f_1428(x58:0:0:0, x55:0:0:0, x59:0:0:0, x57:0:0:0) :|: x56:0:0:0 > 0 && x57:0:0:0 > 1 && x58:0:0:0 > 0 && sum~cons_1~x58:0:0:0 = 1 + x58:0:0:0

----------------------------------------

(28) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1428(x1, x2, x3, x4) -> f_1428(x1, x3, x4)

----------------------------------------

(29)
Obligation:
Rules:
f_1428(sum~cons_1~v45368:0:0:0:0, v44789:0:0:0:0, v40483:0:0:0:0) -> f_1428(v45368:0:0:0:0, v44789:1:0:0:0, v40483:0:0:0:0) :|: v44789:0:0:0:0 < 0 && v40483:0:0:0:0 > 1 && v45368:0:0:0:0 > 0 && sum~cons_1~v45368:0:0:0:0 = 1 + v45368:0:0:0:0
f_1428(sum~cons_1~x58:0:0:0, x56:0:0:0, x57:0:0:0) -> f_1428(x58:0:0:0, x59:0:0:0, x57:0:0:0) :|: x56:0:0:0 > 0 && x57:0:0:0 > 1 && x58:0:0:0 > 0 && sum~cons_1~x58:0:0:0 = 1 + x58:0:0:0

----------------------------------------

(30) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1428 ] = f_1428_1

The following rules are decreasing:
f_1428(sum~cons_1~v45368:0:0:0:0, v44789:0:0:0:0, v40483:0:0:0:0) -> f_1428(v45368:0:0:0:0, v44789:1:0:0:0, v40483:0:0:0:0) :|: v44789:0:0:0:0 < 0 && v40483:0:0:0:0 > 1 && v45368:0:0:0:0 > 0 && sum~cons_1~v45368:0:0:0:0 = 1 + v45368:0:0:0:0
f_1428(sum~cons_1~x58:0:0:0, x56:0:0:0, x57:0:0:0) -> f_1428(x58:0:0:0, x59:0:0:0, x57:0:0:0) :|: x56:0:0:0 > 0 && x57:0:0:0 > 1 && x58:0:0:0 > 0 && sum~cons_1~x58:0:0:0 = 1 + x58:0:0:0

The following rules are bounded:
f_1428(sum~cons_1~v45368:0:0:0:0, v44789:0:0:0:0, v40483:0:0:0:0) -> f_1428(v45368:0:0:0:0, v44789:1:0:0:0, v40483:0:0:0:0) :|: v44789:0:0:0:0 < 0 && v40483:0:0:0:0 > 1 && v45368:0:0:0:0 > 0 && sum~cons_1~v45368:0:0:0:0 = 1 + v45368:0:0:0:0
f_1428(sum~cons_1~x58:0:0:0, x56:0:0:0, x57:0:0:0) -> f_1428(x58:0:0:0, x59:0:0:0, x57:0:0:0) :|: x56:0:0:0 > 0 && x57:0:0:0 > 1 && x58:0:0:0 > 0 && sum~cons_1~x58:0:0:0 = 1 + x58:0:0:0


----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
Rules:
f_1394(sum~cons_1~x72:0, x68:0, x69:0, x70:0, x71:0) -> f_1394(x72:0, x68:0, x69:0, x73:0, x71:0) :|: x70:0 > 0 && x71:0 > 1 && x72:0 > 0 && sum~cons_1~x72:0 = 1 + x72:0
f_1394(sum~cons_1~v34663:0:0, v36537:0:0, v36538:0:0, v42206:0:0, v36543:0:0) -> f_1394(v34663:0:0, v36537:0:0, v36538:0:0, v42206:1:0, v36543:0:0) :|: v42206:0:0 < 0 && v36543:0:0 > 1 && v34663:0:0 > 0 && sum~cons_1~v34663:0:0 = 1 + v34663:0:0

----------------------------------------

(33) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(34)
Obligation:
Rules:
f_1394(sum~cons_1~v34663:0:0:0, v36537:0:0:0, v36538:0:0:0, v42206:0:0:0, v36543:0:0:0) -> f_1394(v34663:0:0:0, v36537:0:0:0, v36538:0:0:0, v42206:1:0:0, v36543:0:0:0) :|: v42206:0:0:0 < 0 && v36543:0:0:0 > 1 && v34663:0:0:0 > 0 && sum~cons_1~v34663:0:0:0 = 1 + v34663:0:0:0
f_1394(sum~cons_1~x72:0:0, x68:0:0, x69:0:0, x70:0:0, x71:0:0) -> f_1394(x72:0:0, x68:0:0, x69:0:0, x73:0:0, x71:0:0) :|: x70:0:0 > 0 && x71:0:0 > 1 && x72:0:0 > 0 && sum~cons_1~x72:0:0 = 1 + x72:0:0

----------------------------------------

(35) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1394(x1, x2, x3, x4, x5) -> f_1394(x1, x4, x5)

----------------------------------------

(36)
Obligation:
Rules:
f_1394(sum~cons_1~v34663:0:0:0, v42206:0:0:0, v36543:0:0:0) -> f_1394(v34663:0:0:0, v42206:1:0:0, v36543:0:0:0) :|: v42206:0:0:0 < 0 && v36543:0:0:0 > 1 && v34663:0:0:0 > 0 && sum~cons_1~v34663:0:0:0 = 1 + v34663:0:0:0
f_1394(sum~cons_1~x72:0:0, x70:0:0, x71:0:0) -> f_1394(x72:0:0, x73:0:0, x71:0:0) :|: x70:0:0 > 0 && x71:0:0 > 1 && x72:0:0 > 0 && sum~cons_1~x72:0:0 = 1 + x72:0:0

----------------------------------------

(37) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1394(x, x1, x2)] = x

The following rules are decreasing:
f_1394(sum~cons_1~v34663:0:0:0, v42206:0:0:0, v36543:0:0:0) -> f_1394(v34663:0:0:0, v42206:1:0:0, v36543:0:0:0) :|: v42206:0:0:0 < 0 && v36543:0:0:0 > 1 && v34663:0:0:0 > 0 && sum~cons_1~v34663:0:0:0 = 1 + v34663:0:0:0
f_1394(sum~cons_1~x72:0:0, x70:0:0, x71:0:0) -> f_1394(x72:0:0, x73:0:0, x71:0:0) :|: x70:0:0 > 0 && x71:0:0 > 1 && x72:0:0 > 0 && sum~cons_1~x72:0:0 = 1 + x72:0:0
The following rules are bounded:
f_1394(sum~cons_1~v34663:0:0:0, v42206:0:0:0, v36543:0:0:0) -> f_1394(v34663:0:0:0, v42206:1:0:0, v36543:0:0:0) :|: v42206:0:0:0 < 0 && v36543:0:0:0 > 1 && v34663:0:0:0 > 0 && sum~cons_1~v34663:0:0:0 = 1 + v34663:0:0:0
f_1394(sum~cons_1~x72:0:0, x70:0:0, x71:0:0) -> f_1394(x72:0:0, x73:0:0, x71:0:0) :|: x70:0:0 > 0 && x71:0:0 > 1 && x72:0:0 > 0 && sum~cons_1~x72:0:0 = 1 + x72:0:0

----------------------------------------

(38)
YES

----------------------------------------

(39)
Obligation:
Rules:
f_1428(sum~cons_1~x58:0, x54:0, x55:0, x56:0, x57:0) -> f_1428(x58:0, x54:0, x55:0, x59:0, x57:0) :|: x56:0 > 0 && x57:0 > 1 && x58:0 > 0 && sum~cons_1~x58:0 = 1 + x58:0
f_1428(x74:0, x75:0, x76:0, cons_0, x78:0) -> f_1444(x74:0, x75:0, x76:0, x79:0, x78:0) :|: TRUE && cons_0 = 0
f_1493(sum~cons_1~x12:0, x9:0, x10:0, x11:0) -> f_1428(x12:0, x9:0, x10:0, x13:0, 1 + x12:0) :|: x12:0 > 0 && x11:0 < 0 && sum~cons_1~x12:0 = 1 + x12:0
f_1444(v45349:0:0, sum~cons_1~v36937:0:0, v45352:0:0, v45367:0:0, v45359:0:0) -> f_1099(v45349:0:0, 1 + v36937:0:0, v45359:0:0, v36937:0:0, v37165:0:0) :|: v45367:0:0 < 0 && v36937:0:0 > -1 && sum~cons_1~v36937:0:0 = 1 + v36937:0:0
f_1394(sum~cons_1~x72:0, x68:0, x69:0, x70:0, x71:0) -> f_1394(x72:0, x68:0, x69:0, x73:0, x71:0) :|: x70:0 > 0 && x71:0 > 1 && x72:0 > 0 && sum~cons_1~x72:0 = 1 + x72:0
f_1493(sum~cons_1~x18:0, x15:0, x16:0, x17:0) -> f_1428(x18:0, x15:0, x16:0, x19:0, 1 + x18:0) :|: x18:0 > 0 && x17:0 > 0 && sum~cons_1~x18:0 = 1 + x18:0
f_1394(x, x1, x2, x3, x4) -> f_1251(x, x1, x2, x5, x4) :|: TRUE && x3 = 0
f_1394(sum~cons_1~v34663:0:0, v36537:0:0, v36538:0:0, v42206:0:0, v36543:0:0) -> f_1394(v34663:0:0, v36537:0:0, v36538:0:0, v42206:1:0, v36543:0:0) :|: v42206:0:0 < 0 && v36543:0:0 > 1 && v34663:0:0 > 0 && sum~cons_1~v34663:0:0 = 1 + v34663:0:0
f_1444(x26:0, sum~cons_1~x31:0, x28:0, x29:0, x30:0) -> f_1099(x26:0, 1 + x31:0, x30:0, x31:0, x32:0) :|: x29:0 > 0 && x31:0 > -1 && sum~cons_1~x31:0 = 1 + x31:0
f_1251(x6, x7, x8, x9, x10) -> f_1493(x11, x7, x12, x13) :|: x12 > 0 && x11 > 0 && x8 = 1 + x12 && x9 = 0
f_1444(x14, x15, x16, x17, x18) -> f_1493(x19, x15, x20, x21) :|: x20 > 0 && x19 > 0 && x16 = 1 + x20 && x17 = 0
f_1428(sum~cons_1~v45368:0:0, v40476:0:0, v40477:0:0, v44789:0:0, v40483:0:0) -> f_1428(v45368:0:0, v40476:0:0, v40477:0:0, v44789:1:0, v40483:0:0) :|: v44789:0:0 < 0 && v40483:0:0 > 1 && v45368:0:0 > 0 && sum~cons_1~v45368:0:0 = 1 + v45368:0:0
f_1493(x22, x23, x24, x25) -> f_1444(x22, x23, x24, x26, x22) :|: TRUE && x25 = 0

----------------------------------------

(40) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained 2 non-trivial SCCs.

----------------------------------------

(41)
Complex Obligation (AND)

----------------------------------------

(42)
Obligation:
Rules:
f_1394(sum~cons_1~x72:0, x68:0, x69:0, x70:0, x71:0) -> f_1394(x72:0, x68:0, x69:0, x73:0, x71:0) :|: x70:0 > 0 && x71:0 > 1 && x72:0 > 0 && sum~cons_1~x72:0 = 1 + x72:0
f_1394(sum~cons_1~v34663:0:0, v36537:0:0, v36538:0:0, v42206:0:0, v36543:0:0) -> f_1394(v34663:0:0, v36537:0:0, v36538:0:0, v42206:1:0, v36543:0:0) :|: v42206:0:0 < 0 && v36543:0:0 > 1 && v34663:0:0 > 0 && sum~cons_1~v34663:0:0 = 1 + v34663:0:0

----------------------------------------

(43) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(44)
Obligation:
Rules:
f_1394(sum~cons_1~v34663:0:0:0, v36537:0:0:0, v36538:0:0:0, v42206:0:0:0, v36543:0:0:0) -> f_1394(v34663:0:0:0, v36537:0:0:0, v36538:0:0:0, v42206:1:0:0, v36543:0:0:0) :|: v42206:0:0:0 < 0 && v36543:0:0:0 > 1 && v34663:0:0:0 > 0 && sum~cons_1~v34663:0:0:0 = 1 + v34663:0:0:0
f_1394(sum~cons_1~x72:0:0, x68:0:0, x69:0:0, x70:0:0, x71:0:0) -> f_1394(x72:0:0, x68:0:0, x69:0:0, x73:0:0, x71:0:0) :|: x70:0:0 > 0 && x71:0:0 > 1 && x72:0:0 > 0 && sum~cons_1~x72:0:0 = 1 + x72:0:0

----------------------------------------

(45) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1394(x1, x2, x3, x4, x5) -> f_1394(x1, x4, x5)

----------------------------------------

(46)
Obligation:
Rules:
f_1394(sum~cons_1~v34663:0:0:0, v42206:0:0:0, v36543:0:0:0) -> f_1394(v34663:0:0:0, v42206:1:0:0, v36543:0:0:0) :|: v42206:0:0:0 < 0 && v36543:0:0:0 > 1 && v34663:0:0:0 > 0 && sum~cons_1~v34663:0:0:0 = 1 + v34663:0:0:0
f_1394(sum~cons_1~x72:0:0, x70:0:0, x71:0:0) -> f_1394(x72:0:0, x73:0:0, x71:0:0) :|: x70:0:0 > 0 && x71:0:0 > 1 && x72:0:0 > 0 && sum~cons_1~x72:0:0 = 1 + x72:0:0

----------------------------------------

(47) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1394(x, x1, x2)] = x

The following rules are decreasing:
f_1394(sum~cons_1~v34663:0:0:0, v42206:0:0:0, v36543:0:0:0) -> f_1394(v34663:0:0:0, v42206:1:0:0, v36543:0:0:0) :|: v42206:0:0:0 < 0 && v36543:0:0:0 > 1 && v34663:0:0:0 > 0 && sum~cons_1~v34663:0:0:0 = 1 + v34663:0:0:0
f_1394(sum~cons_1~x72:0:0, x70:0:0, x71:0:0) -> f_1394(x72:0:0, x73:0:0, x71:0:0) :|: x70:0:0 > 0 && x71:0:0 > 1 && x72:0:0 > 0 && sum~cons_1~x72:0:0 = 1 + x72:0:0
The following rules are bounded:
f_1394(sum~cons_1~v34663:0:0:0, v42206:0:0:0, v36543:0:0:0) -> f_1394(v34663:0:0:0, v42206:1:0:0, v36543:0:0:0) :|: v42206:0:0:0 < 0 && v36543:0:0:0 > 1 && v34663:0:0:0 > 0 && sum~cons_1~v34663:0:0:0 = 1 + v34663:0:0:0
f_1394(sum~cons_1~x72:0:0, x70:0:0, x71:0:0) -> f_1394(x72:0:0, x73:0:0, x71:0:0) :|: x70:0:0 > 0 && x71:0:0 > 1 && x72:0:0 > 0 && sum~cons_1~x72:0:0 = 1 + x72:0:0

----------------------------------------

(48)
YES

----------------------------------------

(49)
Obligation:
Rules:
f_1428(sum~cons_1~x58:0, x54:0, x55:0, x56:0, x57:0) -> f_1428(x58:0, x54:0, x55:0, x59:0, x57:0) :|: x56:0 > 0 && x57:0 > 1 && x58:0 > 0 && sum~cons_1~x58:0 = 1 + x58:0
f_1493(sum~cons_1~x12:0, x9:0, x10:0, x11:0) -> f_1428(x12:0, x9:0, x10:0, x13:0, 1 + x12:0) :|: x12:0 > 0 && x11:0 < 0 && sum~cons_1~x12:0 = 1 + x12:0
f_1444(x14, x15, x16, x17, x18) -> f_1493(x19, x15, x20, x21) :|: x20 > 0 && x19 > 0 && x16 = 1 + x20 && x17 = 0
f_1428(x74:0, x75:0, x76:0, cons_0, x78:0) -> f_1444(x74:0, x75:0, x76:0, x79:0, x78:0) :|: TRUE && cons_0 = 0
f_1493(sum~cons_1~x18:0, x15:0, x16:0, x17:0) -> f_1428(x18:0, x15:0, x16:0, x19:0, 1 + x18:0) :|: x18:0 > 0 && x17:0 > 0 && sum~cons_1~x18:0 = 1 + x18:0
f_1428(sum~cons_1~v45368:0:0, v40476:0:0, v40477:0:0, v44789:0:0, v40483:0:0) -> f_1428(v45368:0:0, v40476:0:0, v40477:0:0, v44789:1:0, v40483:0:0) :|: v44789:0:0 < 0 && v40483:0:0 > 1 && v45368:0:0 > 0 && sum~cons_1~v45368:0:0 = 1 + v45368:0:0
f_1493(x22, x23, x24, x25) -> f_1444(x22, x23, x24, x26, x22) :|: TRUE && x25 = 0

----------------------------------------

(50) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(51)
Obligation:
Rules:
f_1444(x14:0, x15:0, sum~cons_1~x20:0, cons_0, x18:0) -> f_1428(x18:0:0, x15:0, x20:0, x19:0:0, 1 + x18:0:0) :|: x20:0 > 0 && x18:0:0 > 0 && x21:0 > 0 && sum~cons_1~x20:0 = 1 + x20:0 && cons_0 = 0
f_1428(sum~cons_1~x58:0:0, x54:0:0, x55:0:0, x56:0:0, x57:0:0) -> f_1428(x58:0:0, x54:0:0, x55:0:0, x59:0:0, x57:0:0) :|: x56:0:0 > 0 && x57:0:0 > 1 && x58:0:0 > 0 && sum~cons_1~x58:0:0 = 1 + x58:0:0
f_1428(x, x1, x2, x3, x4) -> f_1444(x, x1, x2, x5, x4) :|: TRUE && x3 = 0
f_1428(sum~cons_1~v45368:0:0:0, v40476:0:0:0, v40477:0:0:0, v44789:0:0:0, v40483:0:0:0) -> f_1428(v45368:0:0:0, v40476:0:0:0, v40477:0:0:0, v44789:1:0:0, v40483:0:0:0) :|: v44789:0:0:0 < 0 && v40483:0:0:0 > 1 && v45368:0:0:0 > 0 && sum~cons_1~v45368:0:0:0 = 1 + v45368:0:0:0
f_1444(x6, x7, x8, x9, x10) -> f_1444(x11, x7, x12, x13, x11) :|: x12 > 0 && x11 > 0 && x8 = 1 + x12 && x9 = 0
f_1444(x14, x15, x16, x17, x18) -> f_1428(x19, x15, x20, x21, 1 + x19) :|: x20 > 0 && x19 > 0 && x22 < 0 && x16 = 1 + x20 && x17 = 0

----------------------------------------

(52) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1444(x1, x2, x3, x4, x5) -> f_1444(x3, x4)
   f_1428(x1, x2, x3, x4, x5) -> f_1428(x1, x3, x4, x5)

----------------------------------------

(53)
Obligation:
Rules:
f_1444(sum~cons_1~x20:0, cons_0) -> f_1428(x18:0:0, x20:0, x19:0:0, 1 + x18:0:0) :|: x20:0 > 0 && x18:0:0 > 0 && x21:0 > 0 && sum~cons_1~x20:0 = 1 + x20:0 && cons_0 = 0
f_1428(sum~cons_1~x58:0:0, x55:0:0, x56:0:0, x57:0:0) -> f_1428(x58:0:0, x55:0:0, x59:0:0, x57:0:0) :|: x56:0:0 > 0 && x57:0:0 > 1 && x58:0:0 > 0 && sum~cons_1~x58:0:0 = 1 + x58:0:0
f_1428(x, x2, x3, x4) -> f_1444(x2, x5) :|: TRUE && x3 = 0
f_1428(sum~cons_1~v45368:0:0:0, v40477:0:0:0, v44789:0:0:0, v40483:0:0:0) -> f_1428(v45368:0:0:0, v40477:0:0:0, v44789:1:0:0, v40483:0:0:0) :|: v44789:0:0:0 < 0 && v40483:0:0:0 > 1 && v45368:0:0:0 > 0 && sum~cons_1~v45368:0:0:0 = 1 + v45368:0:0:0
f_1444(x8, x9) -> f_1444(x12, x13) :|: x12 > 0 && x11 > 0 && x8 = 1 + x12 && x9 = 0
f_1444(x16, x17) -> f_1428(x19, x20, x21, 1 + x19) :|: x20 > 0 && x19 > 0 && x22 < 0 && x16 = 1 + x20 && x17 = 0

----------------------------------------

(54) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1444(x, x1)] = -5 + x + x^2
[f_1428(x2, x3, x4, x5)] = -1 + x3 + x3^2

The following rules are decreasing:
f_1428(x, x2, x3, x4) -> f_1444(x2, x5) :|: TRUE && x3 = 0
f_1444(x8, x9) -> f_1444(x12, x13) :|: x12 > 0 && x11 > 0 && x8 = 1 + x12 && x9 = 0
The following rules are bounded:
f_1444(sum~cons_1~x20:0, cons_0) -> f_1428(x18:0:0, x20:0, x19:0:0, 1 + x18:0:0) :|: x20:0 > 0 && x18:0:0 > 0 && x21:0 > 0 && sum~cons_1~x20:0 = 1 + x20:0 && cons_0 = 0
f_1444(x8, x9) -> f_1444(x12, x13) :|: x12 > 0 && x11 > 0 && x8 = 1 + x12 && x9 = 0
f_1444(x16, x17) -> f_1428(x19, x20, x21, 1 + x19) :|: x20 > 0 && x19 > 0 && x22 < 0 && x16 = 1 + x20 && x17 = 0

----------------------------------------

(55)
Complex Obligation (AND)

----------------------------------------

(56)
Obligation:
Rules:
f_1444(sum~cons_1~x20:0, cons_0) -> f_1428(x18:0:0, x20:0, x19:0:0, 1 + x18:0:0) :|: x20:0 > 0 && x18:0:0 > 0 && x21:0 > 0 && sum~cons_1~x20:0 = 1 + x20:0 && cons_0 = 0
f_1428(sum~cons_1~x58:0:0, x55:0:0, x56:0:0, x57:0:0) -> f_1428(x58:0:0, x55:0:0, x59:0:0, x57:0:0) :|: x56:0:0 > 0 && x57:0:0 > 1 && x58:0:0 > 0 && sum~cons_1~x58:0:0 = 1 + x58:0:0
f_1428(sum~cons_1~v45368:0:0:0, v40477:0:0:0, v44789:0:0:0, v40483:0:0:0) -> f_1428(v45368:0:0:0, v40477:0:0:0, v44789:1:0:0, v40483:0:0:0) :|: v44789:0:0:0 < 0 && v40483:0:0:0 > 1 && v45368:0:0:0 > 0 && sum~cons_1~v45368:0:0:0 = 1 + v45368:0:0:0
f_1444(x16, x17) -> f_1428(x19, x20, x21, 1 + x19) :|: x20 > 0 && x19 > 0 && x22 < 0 && x16 = 1 + x20 && x17 = 0

----------------------------------------

(57) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(58)
Obligation:
Rules:
f_1428(sum~cons_1~x58:0:0, x55:0:0, x56:0:0, x57:0:0) -> f_1428(x58:0:0, x55:0:0, x59:0:0, x57:0:0) :|: x56:0:0 > 0 && x57:0:0 > 1 && x58:0:0 > 0 && sum~cons_1~x58:0:0 = 1 + x58:0:0
f_1428(sum~cons_1~v45368:0:0:0, v40477:0:0:0, v44789:0:0:0, v40483:0:0:0) -> f_1428(v45368:0:0:0, v40477:0:0:0, v44789:1:0:0, v40483:0:0:0) :|: v44789:0:0:0 < 0 && v40483:0:0:0 > 1 && v45368:0:0:0 > 0 && sum~cons_1~v45368:0:0:0 = 1 + v45368:0:0:0

----------------------------------------

(59) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(60)
Obligation:
Rules:
f_1428(sum~cons_1~v45368:0:0:0:0, v40477:0:0:0:0, v44789:0:0:0:0, v40483:0:0:0:0) -> f_1428(v45368:0:0:0:0, v40477:0:0:0:0, v44789:1:0:0:0, v40483:0:0:0:0) :|: v44789:0:0:0:0 < 0 && v40483:0:0:0:0 > 1 && v45368:0:0:0:0 > 0 && sum~cons_1~v45368:0:0:0:0 = 1 + v45368:0:0:0:0
f_1428(sum~cons_1~x58:0:0:0, x55:0:0:0, x56:0:0:0, x57:0:0:0) -> f_1428(x58:0:0:0, x55:0:0:0, x59:0:0:0, x57:0:0:0) :|: x56:0:0:0 > 0 && x57:0:0:0 > 1 && x58:0:0:0 > 0 && sum~cons_1~x58:0:0:0 = 1 + x58:0:0:0

----------------------------------------

(61) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1428(x1, x2, x3, x4) -> f_1428(x1, x3, x4)

----------------------------------------

(62)
Obligation:
Rules:
f_1428(sum~cons_1~v45368:0:0:0:0, v44789:0:0:0:0, v40483:0:0:0:0) -> f_1428(v45368:0:0:0:0, v44789:1:0:0:0, v40483:0:0:0:0) :|: v44789:0:0:0:0 < 0 && v40483:0:0:0:0 > 1 && v45368:0:0:0:0 > 0 && sum~cons_1~v45368:0:0:0:0 = 1 + v45368:0:0:0:0
f_1428(sum~cons_1~x58:0:0:0, x56:0:0:0, x57:0:0:0) -> f_1428(x58:0:0:0, x59:0:0:0, x57:0:0:0) :|: x56:0:0:0 > 0 && x57:0:0:0 > 1 && x58:0:0:0 > 0 && sum~cons_1~x58:0:0:0 = 1 + x58:0:0:0

----------------------------------------

(63) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1428 ] = f_1428_1

The following rules are decreasing:
f_1428(sum~cons_1~v45368:0:0:0:0, v44789:0:0:0:0, v40483:0:0:0:0) -> f_1428(v45368:0:0:0:0, v44789:1:0:0:0, v40483:0:0:0:0) :|: v44789:0:0:0:0 < 0 && v40483:0:0:0:0 > 1 && v45368:0:0:0:0 > 0 && sum~cons_1~v45368:0:0:0:0 = 1 + v45368:0:0:0:0
f_1428(sum~cons_1~x58:0:0:0, x56:0:0:0, x57:0:0:0) -> f_1428(x58:0:0:0, x59:0:0:0, x57:0:0:0) :|: x56:0:0:0 > 0 && x57:0:0:0 > 1 && x58:0:0:0 > 0 && sum~cons_1~x58:0:0:0 = 1 + x58:0:0:0

The following rules are bounded:
f_1428(sum~cons_1~v45368:0:0:0:0, v44789:0:0:0:0, v40483:0:0:0:0) -> f_1428(v45368:0:0:0:0, v44789:1:0:0:0, v40483:0:0:0:0) :|: v44789:0:0:0:0 < 0 && v40483:0:0:0:0 > 1 && v45368:0:0:0:0 > 0 && sum~cons_1~v45368:0:0:0:0 = 1 + v45368:0:0:0:0
f_1428(sum~cons_1~x58:0:0:0, x56:0:0:0, x57:0:0:0) -> f_1428(x58:0:0:0, x59:0:0:0, x57:0:0:0) :|: x56:0:0:0 > 0 && x57:0:0:0 > 1 && x58:0:0:0 > 0 && sum~cons_1~x58:0:0:0 = 1 + x58:0:0:0


----------------------------------------

(64)
YES

----------------------------------------

(65)
Obligation:
Rules:
f_1428(sum~cons_1~x58:0:0, x55:0:0, x56:0:0, x57:0:0) -> f_1428(x58:0:0, x55:0:0, x59:0:0, x57:0:0) :|: x56:0:0 > 0 && x57:0:0 > 1 && x58:0:0 > 0 && sum~cons_1~x58:0:0 = 1 + x58:0:0
f_1428(x, x2, x3, x4) -> f_1444(x2, x5) :|: TRUE && x3 = 0
f_1428(sum~cons_1~v45368:0:0:0, v40477:0:0:0, v44789:0:0:0, v40483:0:0:0) -> f_1428(v45368:0:0:0, v40477:0:0:0, v44789:1:0:0, v40483:0:0:0) :|: v44789:0:0:0 < 0 && v40483:0:0:0 > 1 && v45368:0:0:0 > 0 && sum~cons_1~v45368:0:0:0 = 1 + v45368:0:0:0

----------------------------------------

(66) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(67)
Obligation:
Rules:
f_1428(sum~cons_1~x58:0:0, x55:0:0, x56:0:0, x57:0:0) -> f_1428(x58:0:0, x55:0:0, x59:0:0, x57:0:0) :|: x56:0:0 > 0 && x57:0:0 > 1 && x58:0:0 > 0 && sum~cons_1~x58:0:0 = 1 + x58:0:0
f_1428(sum~cons_1~v45368:0:0:0, v40477:0:0:0, v44789:0:0:0, v40483:0:0:0) -> f_1428(v45368:0:0:0, v40477:0:0:0, v44789:1:0:0, v40483:0:0:0) :|: v44789:0:0:0 < 0 && v40483:0:0:0 > 1 && v45368:0:0:0 > 0 && sum~cons_1~v45368:0:0:0 = 1 + v45368:0:0:0

----------------------------------------

(68) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(69)
Obligation:
Rules:
f_1428(sum~cons_1~v45368:0:0:0:0, v40477:0:0:0:0, v44789:0:0:0:0, v40483:0:0:0:0) -> f_1428(v45368:0:0:0:0, v40477:0:0:0:0, v44789:1:0:0:0, v40483:0:0:0:0) :|: v44789:0:0:0:0 < 0 && v40483:0:0:0:0 > 1 && v45368:0:0:0:0 > 0 && sum~cons_1~v45368:0:0:0:0 = 1 + v45368:0:0:0:0
f_1428(sum~cons_1~x58:0:0:0, x55:0:0:0, x56:0:0:0, x57:0:0:0) -> f_1428(x58:0:0:0, x55:0:0:0, x59:0:0:0, x57:0:0:0) :|: x56:0:0:0 > 0 && x57:0:0:0 > 1 && x58:0:0:0 > 0 && sum~cons_1~x58:0:0:0 = 1 + x58:0:0:0

----------------------------------------

(70) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1428(x1, x2, x3, x4) -> f_1428(x1, x3, x4)

----------------------------------------

(71)
Obligation:
Rules:
f_1428(sum~cons_1~v45368:0:0:0:0, v44789:0:0:0:0, v40483:0:0:0:0) -> f_1428(v45368:0:0:0:0, v44789:1:0:0:0, v40483:0:0:0:0) :|: v44789:0:0:0:0 < 0 && v40483:0:0:0:0 > 1 && v45368:0:0:0:0 > 0 && sum~cons_1~v45368:0:0:0:0 = 1 + v45368:0:0:0:0
f_1428(sum~cons_1~x58:0:0:0, x56:0:0:0, x57:0:0:0) -> f_1428(x58:0:0:0, x59:0:0:0, x57:0:0:0) :|: x56:0:0:0 > 0 && x57:0:0:0 > 1 && x58:0:0:0 > 0 && sum~cons_1~x58:0:0:0 = 1 + x58:0:0:0

----------------------------------------

(72) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1428 ] = f_1428_1

The following rules are decreasing:
f_1428(sum~cons_1~v45368:0:0:0:0, v44789:0:0:0:0, v40483:0:0:0:0) -> f_1428(v45368:0:0:0:0, v44789:1:0:0:0, v40483:0:0:0:0) :|: v44789:0:0:0:0 < 0 && v40483:0:0:0:0 > 1 && v45368:0:0:0:0 > 0 && sum~cons_1~v45368:0:0:0:0 = 1 + v45368:0:0:0:0
f_1428(sum~cons_1~x58:0:0:0, x56:0:0:0, x57:0:0:0) -> f_1428(x58:0:0:0, x59:0:0:0, x57:0:0:0) :|: x56:0:0:0 > 0 && x57:0:0:0 > 1 && x58:0:0:0 > 0 && sum~cons_1~x58:0:0:0 = 1 + x58:0:0:0

The following rules are bounded:
f_1428(sum~cons_1~v45368:0:0:0:0, v44789:0:0:0:0, v40483:0:0:0:0) -> f_1428(v45368:0:0:0:0, v44789:1:0:0:0, v40483:0:0:0:0) :|: v44789:0:0:0:0 < 0 && v40483:0:0:0:0 > 1 && v45368:0:0:0:0 > 0 && sum~cons_1~v45368:0:0:0:0 = 1 + v45368:0:0:0:0
f_1428(sum~cons_1~x58:0:0:0, x56:0:0:0, x57:0:0:0) -> f_1428(x58:0:0:0, x59:0:0:0, x57:0:0:0) :|: x56:0:0:0 > 0 && x57:0:0:0 > 1 && x58:0:0:0 > 0 && sum~cons_1~x58:0:0:0 = 1 + x58:0:0:0


----------------------------------------

(73)
YES

----------------------------------------

(74)
Obligation:
SCC
----------------------------------------

(75) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 81 rulesP rules:
f_1093(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v25556, v25557, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) -> f_1101(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v25556, v25557, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) :|: 0 = 0
f_1101(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v25556, v25557, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) -> f_1107(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v25557, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) :|: 0 = 0
f_1107(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v25557, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) -> f_1113(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v26790, v25557, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) :|: 1 + v26790 = v25552 && 0 <= v26790
f_1113(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v26790, v25557, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) -> f_1119(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v26790, v25557, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) :|: 0 = 0
f_1119(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v26790, v25557, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) -> f_1126(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v26790, v25557, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) :|: TRUE
f_1126(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v26790, v25557, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) -> f_1134(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v26790, v26935, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) :|: TRUE
f_1134(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v26790, v26935, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) -> f_1142(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v26790, v26935, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) :|: 0 = 0
f_1142(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v26790, v26935, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) -> f_1150(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v26790, v26935, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) :|: TRUE
f_1150(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v26790, v26935, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) -> f_1159(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v26790, v26935, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) :|: TRUE
f_1159(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v26790, v26935, v25558, v25559, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) -> f_857(v25543, v25544, v25545, v25546, v25547, v25548, v25549, v25550, 1, v25552, v25553, 0, v25555, v25558, v25559, v26790, v26935, v25560, v25561, v25562, v25563, v25564, v25565, v25566, 3, 7, 2, 4, 8) :|: TRUE
f_857(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14100, v14101, 0, v14103, v14104, v14105, v14106, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_866(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14100, v14101, 0, v14103, v14104, v14105, v14106, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: TRUE
f_866(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14100, v14101, 0, v14103, v14104, v14105, v14106, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_874(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14100, v14101, 0, v14103, v14104, v14105, v14106, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: TRUE
f_874(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14100, v14101, 0, v14103, v14104, v14105, v14106, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_882(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14100, v14101, 0, v14103, v14104, v14105, v14106, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: 0 = 0
f_882(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14100, v14101, 0, v14103, v14104, v14105, v14106, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_888(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14100, v14101, 0, v14103, v14104, v14105, v14106, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: 0 = 0
f_888(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14100, v14101, 0, v14103, v14104, v14105, v14106, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_895(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14100, v14101, 0, v14103, v14104, v14105, v14106, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: 0 = 0
f_895(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14100, v14101, 0, v14103, v14104, v14105, v14106, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_903(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14100, v14101, 0, v14103, v14104, v14105, v14106, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: TRUE
f_903(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14100, v14101, 0, v14103, v14104, v14105, v14106, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_911(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14100, v14101, 0, v14103, v14104, v14105, v14106, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: 0 = 0
f_911(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14100, v14101, 0, v14103, v14104, v14105, v14106, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_919(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14101, 0, v14103, v14104, v14105, v14100, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: 0 = 0
f_919(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14101, 0, v14103, v14104, v14105, v14100, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_927(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14101, 0, v14103, v14104, v14105, v14100, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: 0 < v14106 && 2 <= v14100
f_927(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14101, 0, v14103, v14104, v14105, v14100, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_937(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14101, 0, v14103, v14104, v14105, v14100, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: 0 = 0
f_937(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14101, 0, v14103, v14104, v14105, v14100, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_946(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14101, 0, v14103, v14104, v14105, v14100, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: TRUE
f_946(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14101, 0, v14103, v14104, v14105, v14100, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_957(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14101, 0, v14103, v14104, v14105, v14100, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: 0 = 0
f_957(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14101, 0, v14103, v14104, v14105, v14100, v14107, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_964(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: 0 = 0
f_964(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_973(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: 0 < v14107
f_973(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_983(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: 0 = 0
f_983(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_994(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: 0 = 0
f_994(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_1003(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: TRUE
f_1003(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_1013(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, v22847, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: TRUE
f_1013(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, v22847, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_1023(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: v22847 = 0
f_1023(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_1032(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: 0 = 0
f_1032(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_1041(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: TRUE
f_1041(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14103, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_1052(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v23601, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: TRUE
f_1052(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v23601, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_1063(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v23601, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: v23601 != 0
f_1052(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v23601, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_1064(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: v23601 = 0
f_1063(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v23601, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_1076(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v23601, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: 0 = 0
f_1076(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v23601, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_1089(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v23601, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: TRUE
f_1089(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v23601, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_767(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v23601, v14100, v14107, v14104, v14105, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: TRUE
f_767(v9904, v9905, v9906, v9907, v9908, v9909, v9910, v9911, 1, v9913, v9914, 0, v9916, v9917, v9918, v9919, v9920, v9921, v9922, v9923, v9924, v9925, v9926, v9927, 3, 7, 2, 4, 8) -> f_1093(v9904, v9905, v9906, v9907, v9908, v9909, v9910, v9911, 1, v9913, v9914, 0, v9916, v9917, v9918, v9919, v9920, v9921, v9922, v9923, v9924, v9925, v9926, v9927, 3, 7, 2, 4, 8) :|: TRUE
f_1064(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_1077(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: 0 = 0
f_1077(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_1090(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: TRUE
f_1090(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14104, v14105, v14100, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) -> f_769(v14091, v14092, v14093, v14094, v14095, v14096, v14097, v14098, 1, v14106, v14107, 0, v14100, v14107, v14104, v14105, v14108, v14109, v14110, v14111, v14112, v14113, v14114, 3, 7, 2, 4, 8) :|: TRUE
f_769(v9991, v9992, v9993, v9994, v9995, v9996, v9997, v9998, 1, v10000, v10001, 0, v10003, v10004, v10005, v10006, v10007, v10008, v10009, v10010, v10011, v10012, v10013, 3, 7, 2, 4, 8) -> f_1095(v9991, v9992, v9993, v9994, v9995, v9996, v9997, v9998, 1, v10000, v10001, 0, v10003, v10004, v10005, v10006, v10007, v10008, v10009, v10010, v10011, v10012, v10013, 3, 7, 2, 4, 8) :|: TRUE
f_1095(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v25656, v25657, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1102(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v25656, v25657, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1102(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v25656, v25657, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1108(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v25657, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1108(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v25657, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1114(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 1 + v26791 = v25652 && 0 <= v26791
f_1114(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1120(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1120(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1127(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
f_1127(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1135(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v26936, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
f_1135(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v26936, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1143(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v26936, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1143(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v26936, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1151(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v26936, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
f_1151(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v26936, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1160(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v26936, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
f_1160(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v26936, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1168(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v26936, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
f_1168(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v26936, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1175(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v26936, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
f_1175(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v26936, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1182(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v26936, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1182(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v25649, 1, v25651, v25652, 0, v25654, v25655, v26791, v26936, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1187(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1187(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1193(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 < v26936
f_1193(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1200(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1200(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1209(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
f_1209(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1216(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1216(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1223(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1223(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1231(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1231(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1238(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
f_1238(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1247(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1247(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v25652, 0, v25654, v25655, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1252(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1252(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1259(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 < v26791 && 2 <= v25652
f_1259(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1267(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1267(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1276(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1276(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1283(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
f_1283(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1291(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, v36580, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
f_1291(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, v36580, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1299(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: v36580 = 0
f_1299(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1306(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1306(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1313(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
f_1313(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1322(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v37167, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
f_1322(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v37167, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1331(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v37167, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: v37167 != 0
f_1322(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v37167, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1332(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: v37167 = 0
f_1331(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v37167, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1342(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v37167, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1342(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v37167, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1353(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v37167, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
f_1353(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v37167, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1093(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v37167, v25654, v25655, v25652, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
f_1332(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1343(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1343(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1354(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
f_1354(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) -> f_1095(v25642, v25643, v25644, v25645, v25646, v25647, v25648, v26936, 1, v25651, v26791, 0, v25654, v25655, v25652, v26791, v25658, v25659, v25660, v25661, v25662, v25663, v25664, 3, 7, 2, 4, 8) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_1093(v25543:0, v25544:0, v25545:0, v25546:0, v25547:0, v25548:0, v25549:0, v25550:0, 1, 1 + v26790:0, v25553:0, 0, v25555:0, v25556:0, v25557:0, v25558:0, v25559:0, v25560:0, v25561:0, v25562:0, v25563:0, v25564:0, v25565:0, v25566:0, 3, 7, 2, 4, 8) -> f_1093(v25543:0, v25544:0, v25545:0, v25546:0, v25547:0, v25548:0, v25549:0, v25550:0, 1, v26790:0, v26935:0, 0, v23601:0, 1 + v26790:0, v26935:0, v25558:0, v25559:0, v25560:0, v25561:0, v25562:0, v25563:0, v25564:0, v25565:0, v25566:0, 3, 7, 2, 4, 8) :|: v26790:0 > 0 && v23601:0 < 0 && v26935:0 > 0
f_1093(v25543:0, v25544:0, v25545:0, v25546:0, v25547:0, v25548:0, v25549:0, v25550:0, 1, 1 + v26790:0, v25553:0, 0, v25555:0, v25556:0, v25557:0, v25558:0, v25559:0, v25560:0, v25561:0, v25562:0, v25563:0, v25564:0, v25565:0, v25566:0, 3, 7, 2, 4, 8) -> f_1093(v25543:0, v25544:0, v25545:0, v25546:0, v25547:0, v25548:0, v25549:0, v25550:0, 1, v26790:0, v26935:0, 0, v23601:0, 1 + v26790:0, v26935:0, v25558:0, v25559:0, v25560:0, v25561:0, v25562:0, v25563:0, v25564:0, v25565:0, v25566:0, 3, 7, 2, 4, 8) :|: v26790:0 > 0 && v23601:0 > 0 && v26935:0 > 0
f_1093(v25543:0, v25544:0, v25545:0, v25546:0, v25547:0, v25548:0, v25549:0, v25550:0, 1, 1 + v26790:0, v25553:0, 0, v25555:0, v25556:0, v25557:0, v25558:0, v25559:0, v25560:0, v25561:0, v25562:0, v25563:0, v25564:0, v25565:0, v25566:0, 3, 7, 2, 4, 8) -> f_1322(v25543:0, v25544:0, v25545:0, v25546:0, v25547:0, v25548:0, v25549:0, v26936:0, 1, v26790:0, v26791:0, 0, v37167:0, 1 + v26790:0, 1 + v26791:0, 1 + v26791:0, v25560:0, v25561:0, v25562:0, v25563:0, v25564:0, v25565:0, v25566:0, 3, 7, 2, 4, 8) :|: v26790:0 > 0 && v26791:0 > 0 && v26936:0 > 0
f_1322(v25642:0, v25643:0, v25644:0, v25645:0, v25646:0, v25647:0, v25648:0, v26936:0, 1, v25651:0, v26791:0, 0, v37167:0, v25654:0, v25655:0, v25652:0, v25658:0, v25659:0, v25660:0, v25661:0, v25662:0, v25663:0, v25664:0, 3, 7, 2, 4, 8) -> f_1093(v25642:0, v25643:0, v25644:0, v25645:0, v25646:0, v25647:0, v25648:0, v26936:0, 1, v25651:0, v26791:0, 0, v37167:0, v25654:0, v25655:0, v25652:0, v26791:0, v25658:0, v25659:0, v25660:0, v25661:0, v25662:0, v25663:0, v25664:0, 3, 7, 2, 4, 8) :|: v37167:0 < 0
f_1322(v25642:0, v25643:0, v25644:0, v25645:0, v25646:0, v25647:0, v25648:0, v26936:0, 1, v25651:0, v26791:0, 0, v37167:0, v25654:0, v25655:0, v25652:0, v25658:0, v25659:0, v25660:0, v25661:0, v25662:0, v25663:0, v25664:0, 3, 7, 2, 4, 8) -> f_1093(v25642:0, v25643:0, v25644:0, v25645:0, v25646:0, v25647:0, v25648:0, v26936:0, 1, v25651:0, v26791:0, 0, v37167:0, v25654:0, v25655:0, v25652:0, v26791:0, v25658:0, v25659:0, v25660:0, v25661:0, v25662:0, v25663:0, v25664:0, 3, 7, 2, 4, 8) :|: v37167:0 > 0
f_1322(v25642:0, v25643:0, v25644:0, v25645:0, v25646:0, v25647:0, v25648:0, v26936:0, 1, v25651:0, 1 + v26791:1, 0, 0, v25654:0, v25655:0, v25652:0, v25658:0, v25659:0, v25660:0, v25661:0, v25662:0, v25663:0, v25664:0, 3, 7, 2, 4, 8) -> f_1322(v25642:0, v25643:0, v25644:0, v25645:0, v25646:0, v25647:0, v25648:0, v26936:1, 1, v25651:0, v26791:1, 0, v37167:1, v25654:0, v25655:0, 1 + v26791:1, v25658:0, v25659:0, v25660:0, v25661:0, v25662:0, v25663:0, v25664:0, 3, 7, 2, 4, 8) :|: v26791:1 > 0 && v26936:1 > 0
Filtered unneeded arguments:
   f_1093(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_1093(x10)
   f_1322(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_1322(x10, x11, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_1093(sum~cons_1~v26790:0) -> f_1093(v26790:0) :|: v26790:0 > 0 && sum~cons_1~v26790:0 = 1 + v26790:0
f_1093(sum~cons_1~v26790:0) -> f_1322(v26790:0, v26791:0, v37167:0) :|: v26790:0 > 0 && v26791:0 > 0 && sum~cons_1~v26790:0 = 1 + v26790:0
f_1322(v25651:0, v26791:0, v37167:0) -> f_1093(v25651:0) :|: v37167:0 < 0
f_1322(v25651:0, v26791:0, v37167:0) -> f_1093(v25651:0) :|: v37167:0 > 0
f_1322(v25651:0, sum~cons_1~v26791:1, cons_0) -> f_1322(v25651:0, v26791:1, v37167:1) :|: v26791:1 > 0 && sum~cons_1~v26791:1 = 1 + v26791:1 && cons_0 = 0

----------------------------------------

(76)
Obligation:
Rules:
f_1093(sum~cons_1~v26790:0) -> f_1093(v26790:0) :|: v26790:0 > 0 && sum~cons_1~v26790:0 = 1 + v26790:0
f_1093(x) -> f_1322(x1, x2, x3) :|: x1 > 0 && x2 > 0 && x = 1 + x1
f_1322(v25651:0, v26791:0, v37167:0) -> f_1093(v25651:0) :|: v37167:0 < 0
f_1322(x4, x5, x6) -> f_1093(x4) :|: x6 > 0
f_1322(x7, x8, x9) -> f_1322(x7, x10, x11) :|: x10 > 0 && x8 = 1 + x10 && x9 = 0

----------------------------------------

(77) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(78)
Obligation:
Rules:
f_1322(v25651:0:0, v26791:0:0, v37167:0:0) -> f_1093(v25651:0:0) :|: v37167:0:0 < 0
f_1093(sum~cons_1~v26790:0:0) -> f_1093(v26790:0:0) :|: v26790:0:0 > 0 && sum~cons_1~v26790:0:0 = 1 + v26790:0:0
f_1322(x4:0, x5:0, x6:0) -> f_1093(x4:0) :|: x6:0 > 0
f_1093(sum~cons_1~x1:0) -> f_1322(x1:0, x2:0, x3:0) :|: x1:0 > 0 && x2:0 > 0 && sum~cons_1~x1:0 = 1 + x1:0
f_1322(x7:0, sum~cons_1~x10:0, cons_0) -> f_1322(x7:0, x10:0, x11:0) :|: x10:0 > 0 && sum~cons_1~x10:0 = 1 + x10:0 && cons_0 = 0

----------------------------------------

(79) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1322(x, x1, x2)] = 3 + x^2
[f_1093(x3)] = x3^2

The following rules are decreasing:
f_1322(v25651:0:0, v26791:0:0, v37167:0:0) -> f_1093(v25651:0:0) :|: v37167:0:0 < 0
f_1093(sum~cons_1~v26790:0:0) -> f_1093(v26790:0:0) :|: v26790:0:0 > 0 && sum~cons_1~v26790:0:0 = 1 + v26790:0:0
f_1322(x4:0, x5:0, x6:0) -> f_1093(x4:0) :|: x6:0 > 0
The following rules are bounded:
f_1322(v25651:0:0, v26791:0:0, v37167:0:0) -> f_1093(v25651:0:0) :|: v37167:0:0 < 0
f_1093(sum~cons_1~v26790:0:0) -> f_1093(v26790:0:0) :|: v26790:0:0 > 0 && sum~cons_1~v26790:0:0 = 1 + v26790:0:0
f_1322(x4:0, x5:0, x6:0) -> f_1093(x4:0) :|: x6:0 > 0
f_1093(sum~cons_1~x1:0) -> f_1322(x1:0, x2:0, x3:0) :|: x1:0 > 0 && x2:0 > 0 && sum~cons_1~x1:0 = 1 + x1:0
f_1322(x7:0, sum~cons_1~x10:0, cons_0) -> f_1322(x7:0, x10:0, x11:0) :|: x10:0 > 0 && sum~cons_1~x10:0 = 1 + x10:0 && cons_0 = 0

----------------------------------------

(80)
Obligation:
Rules:
f_1093(sum~cons_1~x1:0) -> f_1322(x1:0, x2:0, x3:0) :|: x1:0 > 0 && x2:0 > 0 && sum~cons_1~x1:0 = 1 + x1:0
f_1322(x7:0, sum~cons_1~x10:0, cons_0) -> f_1322(x7:0, x10:0, x11:0) :|: x10:0 > 0 && sum~cons_1~x10:0 = 1 + x10:0 && cons_0 = 0

----------------------------------------

(81) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(82)
Obligation:
Rules:
f_1322(x7:0, sum~cons_1~x10:0, cons_0) -> f_1322(x7:0, x10:0, x11:0) :|: x10:0 > 0 && sum~cons_1~x10:0 = 1 + x10:0 && cons_0 = 0

----------------------------------------

(83) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(84)
Obligation:
Rules:
f_1322(x7:0:0, sum~cons_1~x10:0:0, cons_0) -> f_1322(x7:0:0, x10:0:0, x11:0:0) :|: x10:0:0 > 0 && sum~cons_1~x10:0:0 = 1 + x10:0:0 && cons_0 = 0

----------------------------------------

(85) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1322(x1, x2, x3) -> f_1322(x2, x3)

----------------------------------------

(86)
Obligation:
Rules:
f_1322(sum~cons_1~x10:0:0, cons_0) -> f_1322(x10:0:0, x11:0:0) :|: x10:0:0 > 0 && sum~cons_1~x10:0:0 = 1 + x10:0:0 && cons_0 = 0

----------------------------------------

(87) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1322 ] = f_1322_1

The following rules are decreasing:
f_1322(sum~cons_1~x10:0:0, cons_0) -> f_1322(x10:0:0, x11:0:0) :|: x10:0:0 > 0 && sum~cons_1~x10:0:0 = 1 + x10:0:0 && cons_0 = 0

The following rules are bounded:
f_1322(sum~cons_1~x10:0:0, cons_0) -> f_1322(x10:0:0, x11:0:0) :|: x10:0:0 > 0 && sum~cons_1~x10:0:0 = 1 + x10:0:0 && cons_0 = 0


----------------------------------------

(88)
YES

----------------------------------------

(89)
Obligation:
SCC
----------------------------------------

(90) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 71 rulesP rules:
f_503(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v22, 0, v18, v63, v978, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_515(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v22, 0, v18, v63, v978, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_515(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v22, 0, v18, v63, v978, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_527(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v22, 0, v18, v63, v978, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_527(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v22, 0, v18, v63, v978, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_537(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v22, 0, v18, v63, v978, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_537(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v22, 0, v18, v63, v978, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_544(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v22, 0, v18, v63, v978, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_544(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v22, 0, v18, v63, v978, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_551(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_551(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_558(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 < v978 && 2 <= v22
f_558(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_567(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_567(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_576(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_576(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_585(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_585(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_594(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, v5569, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_594(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, v5569, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_604(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, v5569, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: v5569 != 0
f_594(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, v5569, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_605(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: v5569 = 0
f_604(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, v5569, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_615(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, v5569, v18, v63, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_615(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, v5569, v18, v63, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_626(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, v5569, v18, v63, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_626(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, v5569, v18, v63, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_632(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, v5569, v18, v63, 0, v22, v1054, v2, v4, v6, v8, v10, v13, v16, 3, 7, 2, 4, 8) :|: TRUE
f_632(v6371, v6372, v6373, v6374, v6375, v6376, v6377, v6378, 1, v6380, v6381, v6382, v6383, v6384, 0, v6386, v6387, v6388, v6389, v6390, v6391, v6392, v6393, v6394, 3, 7, 2, 4, 8) -> f_640(v6371, v6372, v6373, v6374, v6375, v6376, v6377, v6378, 1, v6380, v6381, v6382, v6383, v6384, 0, v6386, v6387, v6388, v6389, v6390, v6391, v6392, v6393, v6394, 3, 7, 2, 4, 8) :|: 0 = 0
f_640(v6371, v6372, v6373, v6374, v6375, v6376, v6377, v6378, 1, v6380, v6381, v6382, v6383, v6384, 0, v6386, v6387, v6388, v6389, v6390, v6391, v6392, v6393, v6394, 3, 7, 2, 4, 8) -> f_649(v6371, v6372, v6373, v6374, v6375, v6376, v6377, v6378, 1, v6380, v6381, v6382, v6384, 0, v6386, v6387, v6388, v6389, v6390, v6391, v6392, v6393, v6394, 3, 7, 2, 4, 8) :|: 0 = 0
f_649(v6371, v6372, v6373, v6374, v6375, v6376, v6377, v6378, 1, v6380, v6381, v6382, v6384, 0, v6386, v6387, v6388, v6389, v6390, v6391, v6392, v6393, v6394, 3, 7, 2, 4, 8) -> f_659(v6371, v6372, v6373, v6374, v6375, v6376, v6377, v6378, 1, v6380, v6381, v6382, v6597, 0, v6386, v6387, v6388, v6389, v6390, v6391, v6392, v6393, v6394, 3, 7, 2, 4, 8) :|: 1 + v6597 = v6378 && 0 <= v6597
f_659(v6371, v6372, v6373, v6374, v6375, v6376, v6377, v6378, 1, v6380, v6381, v6382, v6597, 0, v6386, v6387, v6388, v6389, v6390, v6391, v6392, v6393, v6394, 3, 7, 2, 4, 8) -> f_669(v6371, v6372, v6373, v6374, v6375, v6376, v6377, v6378, 1, v6380, v6381, v6382, v6597, 0, v6386, v6387, v6388, v6389, v6390, v6391, v6392, v6393, v6394, 3, 7, 2, 4, 8) :|: 0 = 0
f_669(v6371, v6372, v6373, v6374, v6375, v6376, v6377, v6378, 1, v6380, v6381, v6382, v6597, 0, v6386, v6387, v6388, v6389, v6390, v6391, v6392, v6393, v6394, 3, 7, 2, 4, 8) -> f_679(v6371, v6372, v6373, v6374, v6375, v6376, v6377, v6378, 1, v6380, v6381, v6382, v6597, 0, v6386, v6387, v6388, v6389, v6390, v6391, v6392, v6393, v6394, 3, 7, 2, 4, 8) :|: TRUE
f_679(v6371, v6372, v6373, v6374, v6375, v6376, v6377, v6378, 1, v6380, v6381, v6382, v6597, 0, v6386, v6387, v6388, v6389, v6390, v6391, v6392, v6393, v6394, 3, 7, 2, 4, 8) -> f_689(v6371, v6372, v6373, v6374, v6375, v6376, v6377, v6378, 1, v6380, v6381, v6382, v6597, 0, v6386, v6387, v6388, v6389, v6390, v6391, v6392, v6393, v6394, 3, 7, 2, 4, 8) :|: TRUE
f_689(v6371, v6372, v6373, v6374, v6375, v6376, v6377, v6378, 1, v6380, v6381, v6382, v6597, 0, v6386, v6387, v6388, v6389, v6390, v6391, v6392, v6393, v6394, 3, 7, 2, 4, 8) -> f_690(v6371, v6372, v6373, v6374, v6375, v6376, v6377, v6378, 1, v6380, v6381, v6382, 0, v6386, v6387, v6597, v6388, v6389, v6390, v6391, v6392, v6393, v6394, 3, 7, 2, 4, 8) :|: TRUE
f_690(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8482, 1, v8484, v8485, v8486, 0, v8488, v8489, v8490, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_699(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8482, 1, v8484, v8485, v8486, 0, v8488, v8489, v8490, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: TRUE
f_699(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8482, 1, v8484, v8485, v8486, 0, v8488, v8489, v8490, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_708(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8482, 1, v8484, v8485, v8486, 0, v8488, v8489, v8490, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: 0 = 0
f_708(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8482, 1, v8484, v8485, v8486, 0, v8488, v8489, v8490, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_717(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: 0 = 0
f_717(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_726(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: 0 < v8490 && 2 <= v8482 && 2 <= v8489
f_726(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_737(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: 0 = 0
f_737(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_749(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: TRUE
f_749(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_761(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: 0 = 0
f_761(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_772(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: 0 = 0
f_772(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_781(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: 0 = 0
f_781(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_789(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: TRUE
f_789(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_797(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: 0 = 0
f_797(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_806(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: 0 = 0
f_806(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_817(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: 0 = 0
f_817(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_829(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: 0 = 0
f_829(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_841(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: TRUE
f_841(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v8486, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_851(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v13850, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: TRUE
f_851(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v13850, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_862(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v13850, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: v13850 != 0
f_851(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v13850, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_863(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: v13850 = 0
f_862(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v13850, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_870(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v13850, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: 0 = 0
f_870(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v13850, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_878(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v13850, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: TRUE
f_878(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v13850, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_632(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, v13850, v8482, v8490, 0, v8488, v8489, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: TRUE
f_863(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_871(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: 0 = 0
f_871(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_879(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: TRUE
f_879(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, 0, v8488, v8489, v8482, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) -> f_634(v8475, v8476, v8477, v8478, v8479, v8480, v8481, v8490, 1, v8484, v8485, 0, v8482, v8490, v8488, v8489, v8491, v8492, v8493, v8494, v8495, v8496, v8497, 3, 7, 2, 4, 8) :|: TRUE
f_634(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v6463, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_641(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v6595, v6463, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: TRUE
f_641(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v6595, v6463, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_651(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v6463, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: v6595 = 0
f_651(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v6463, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_661(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v6463, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: 0 = 0
f_661(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v6463, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_671(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v6463, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: TRUE
f_671(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v6463, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_681(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v6463, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: 0 = 0
f_681(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v6463, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_692(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: 0 = 0
f_692(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_701(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: 1 + v8617 = v6459 && 0 <= v8617
f_701(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_710(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: 0 = 0
f_710(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_719(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: TRUE
f_719(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v6464, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_729(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v8900, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: TRUE
f_729(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v8900, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_740(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v8900, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: 0 = 0
f_740(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v8900, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_752(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v8900, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: TRUE
f_752(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v8900, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_764(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v8900, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: TRUE
f_764(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v8900, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_775(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v8900, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: TRUE
f_775(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v8900, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_783(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v8900, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: TRUE
f_783(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v8900, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_791(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v8900, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: 0 = 0
f_791(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v6456, 1, v6458, v6459, 0, v6461, v6462, v8617, v8900, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_799(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v8900, 1, v6458, v6459, 0, v6461, v6462, v8617, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: 0 = 0
f_799(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v8900, 1, v6458, v6459, 0, v6461, v6462, v8617, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_808(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v8900, 1, v6458, v6459, 0, v6461, v6462, v8617, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: 0 < v8900
f_808(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v8900, 1, v6458, v6459, 0, v6461, v6462, v8617, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_819(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v8900, 1, v6458, v6459, 0, v6461, v6462, v8617, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: 0 = 0
f_819(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v8900, 1, v6458, v6459, 0, v6461, v6462, v8617, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_831(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v8900, 1, v6458, v6459, 0, v6461, v6462, v8617, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) :|: TRUE
f_831(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v8900, 1, v6458, v6459, 0, v6461, v6462, v8617, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 2, 4, 8) -> f_492(v6449, v6450, v6451, v6452, v6453, v6454, v6455, v8900, 1, v6458, v6459, 0, v6461, v6462, v8617, v6465, v6466, v6467, v6468, v6469, v6470, v6471, 3, 7, 4, 8, 2) :|: TRUE
f_492(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v22, 0, v18, v63, v978, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_503(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v22, 0, v18, v63, v978, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_605(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_616(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_616(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_627(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_627(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_634(v1, v3, v5, v7, v9, v12, v15, v1054, 1, v20, v978, 0, v18, v63, v22, v1054, v2, v4, v6, v8, v10, v13, v16, 3, 7, 2, 4, 8) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_851(v8475:0, v8476:0, v8477:0, v8478:0, v8479:0, v8480:0, v8481:0, v8490:0, 1, v8484:0, 1 + v8617:0, 0, 0, v8488:0, v8489:0, v8482:0, v8491:0, v8492:0, v8493:0, v8494:0, v8495:0, v8496:0, v8497:0, 3, 7, 2, 4, 8) -> f_503(v8475:0, v8476:0, v8477:0, v8478:0, v8479:0, v8480:0, v8481:0, v8900:0, 1, v8484:0, 1 + v8617:0, 0, v8482:0, v8490:0, v8617:0, v8491:0, v8492:0, v8493:0, v8494:0, v8495:0, v8496:0, v8497:0, 3, 7, 4, 8, 2) :|: v8900:0 > 0 && v8617:0 > -1
f_851(v8475:0, v8476:0, v8477:0, v8478:0, v8479:0, v8480:0, v8481:0, 1 + v6597:0, 1, v8484:0, v8485:0, v13850:0, 0, v8488:0, v8489:0, v8482:0, v8491:0, v8492:0, v8493:0, v8494:0, v8495:0, v8496:0, v8497:0, 3, 7, 2, 4, 8) -> f_851(v8475:0, v8476:0, v8477:0, v8478:0, v8479:0, v8480:0, v8481:0, v6597:0, 1, v8484:0, v8485:0, v13850:1, 0, v8488:0, v8489:0, 1 + v6597:0, v8491:0, v8492:0, v8493:0, v8494:0, v8495:0, v8496:0, v8497:0, 3, 7, 2, 4, 8) :|: v6597:0 > 0 && v13850:0 < 0 && v8489:0 > 1
f_851(v8475:0, v8476:0, v8477:0, v8478:0, v8479:0, v8480:0, v8481:0, 1 + v6597:0, 1, v8484:0, v8485:0, v13850:0, 0, v8488:0, v8489:0, v8482:0, v8491:0, v8492:0, v8493:0, v8494:0, v8495:0, v8496:0, v8497:0, 3, 7, 2, 4, 8) -> f_851(v8475:0, v8476:0, v8477:0, v8478:0, v8479:0, v8480:0, v8481:0, v6597:0, 1, v8484:0, v8485:0, v13850:1, 0, v8488:0, v8489:0, 1 + v6597:0, v8491:0, v8492:0, v8493:0, v8494:0, v8495:0, v8496:0, v8497:0, 3, 7, 2, 4, 8) :|: v6597:0 > 0 && v13850:0 > 0 && v8489:0 > 1
f_503(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v1054:0, 1, v20:0, v22:0, 0, v18:0, v63:0, 1 + v8617:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8, 2) -> f_503(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v8900:0, 1, v20:0, 1 + v8617:0, 0, v18:0, v63:0, v8617:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8, 2) :|: v8617:0 > -1 && v22:0 > 1 && v8900:0 > 0
f_503(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, 1 + v6597:0, 1, v20:0, v22:0, 0, v18:0, v63:0, v978:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8, 2) -> f_851(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v6597:0, 1, v20:0, v978:0, v13850:0, 0, v22:0, 1 + v6597:0, 1 + v6597:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 2, 4, 8) :|: v6597:0 > 0 && v22:0 > 1 && v978:0 > 0 && v5569:0 < 0
f_503(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, 1 + v6597:0, 1, v20:0, v22:0, 0, v18:0, v63:0, v978:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8, 2) -> f_851(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v6597:0, 1, v20:0, v978:0, v13850:0, 0, v22:0, 1 + v6597:0, 1 + v6597:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 2, 4, 8) :|: v6597:0 > 0 && v22:0 > 1 && v978:0 > 0 && v5569:0 > 0
Filtered unneeded arguments:
   f_851(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_851(x8, x11, x12, x15)
   f_503(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_503(x8, x11, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_851(v8490:0, sum~cons_1~v8617:0, cons_0, v8489:0) -> f_503(v8900:0, 1 + v8617:0, v8617:0) :|: v8900:0 > 0 && v8617:0 > -1 && sum~cons_1~v8617:0 = 1 + v8617:0 && cons_0 = 0
f_851(sum~cons_1~v6597:0, v8485:0, v13850:0, v8489:0) -> f_851(v6597:0, v8485:0, v13850:1, v8489:0) :|: v13850:0 < 0 && v8489:0 > 1 && v6597:0 > 0 && sum~cons_1~v6597:0 = 1 + v6597:0
f_851(sum~cons_1~v6597:0, v8485:0, v13850:0, v8489:0) -> f_851(v6597:0, v8485:0, v13850:1, v8489:0) :|: v13850:0 > 0 && v8489:0 > 1 && v6597:0 > 0 && sum~cons_1~v6597:0 = 1 + v6597:0
f_503(v1054:0, v22:0, sum~cons_1~v8617:0) -> f_503(v8900:0, 1 + v8617:0, v8617:0) :|: v22:0 > 1 && v8900:0 > 0 && v8617:0 > -1 && sum~cons_1~v8617:0 = 1 + v8617:0
f_503(sum~cons_1~v6597:0, v22:0, v978:0) -> f_851(v6597:0, v978:0, v13850:0, 1 + v6597:0) :|: v22:0 > 1 && v978:0 > 0 && v6597:0 > 0 && sum~cons_1~v6597:0 = 1 + v6597:0

----------------------------------------

(91)
Obligation:
Rules:
f_851(v8490:0, sum~cons_1~v8617:0, cons_0, v8489:0) -> f_503(v8900:0, 1 + v8617:0, v8617:0) :|: v8900:0 > 0 && v8617:0 > -1 && sum~cons_1~v8617:0 = 1 + v8617:0 && cons_0 = 0
f_851(x, x1, x2, x3) -> f_851(x4, x1, x5, x3) :|: x2 < 0 && x3 > 1 && x4 > 0 && x = 1 + x4
f_851(x6, x7, x8, x9) -> f_851(x10, x7, x11, x9) :|: x8 > 0 && x9 > 1 && x10 > 0 && x6 = 1 + x10
f_503(x12, x13, x14) -> f_503(x15, 1 + x16, x16) :|: x13 > 1 && x15 > 0 && x16 > -1 && x14 = 1 + x16
f_503(sum~cons_1~v6597:0, v22:0, v978:0) -> f_851(v6597:0, v978:0, v13850:0, 1 + v6597:0) :|: v22:0 > 1 && v978:0 > 0 && v6597:0 > 0 && sum~cons_1~v6597:0 = 1 + v6597:0

----------------------------------------

(92) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(93)
Obligation:
Rules:
f_851(sum~cons_1~x10:0, x7:0, x8:0, x9:0) -> f_851(x10:0, x7:0, x11:0, x9:0) :|: x8:0 > 0 && x9:0 > 1 && x10:0 > 0 && sum~cons_1~x10:0 = 1 + x10:0
f_503(x12:0, x13:0, sum~cons_1~x16:0) -> f_503(x15:0, 1 + x16:0, x16:0) :|: x13:0 > 1 && x15:0 > 0 && x16:0 > -1 && sum~cons_1~x16:0 = 1 + x16:0
f_503(sum~cons_1~v6597:0:0, v22:0:0, v978:0:0) -> f_851(v6597:0:0, v978:0:0, v13850:0:0, 1 + v6597:0:0) :|: v22:0:0 > 1 && v978:0:0 > 0 && v6597:0:0 > 0 && sum~cons_1~v6597:0:0 = 1 + v6597:0:0
f_851(v8490:0:0, sum~cons_1~v8617:0:0, cons_0, v8489:0:0) -> f_503(v8900:0:0, 1 + v8617:0:0, v8617:0:0) :|: v8900:0:0 > 0 && v8617:0:0 > -1 && sum~cons_1~v8617:0:0 = 1 + v8617:0:0 && cons_0 = 0
f_851(sum~cons_1~x4:0, x1:0, x2:0, x3:0) -> f_851(x4:0, x1:0, x5:0, x3:0) :|: x2:0 < 0 && x3:0 > 1 && x4:0 > 0 && sum~cons_1~x4:0 = 1 + x4:0

----------------------------------------

(94) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_851(x, x1, x2, x3)] = -1 + x1 + x1^2
[f_503(x4, x5, x6)] = -1 + x6 + x6^2

The following rules are decreasing:
f_503(x12:0, x13:0, sum~cons_1~x16:0) -> f_503(x15:0, 1 + x16:0, x16:0) :|: x13:0 > 1 && x15:0 > 0 && x16:0 > -1 && sum~cons_1~x16:0 = 1 + x16:0
f_851(v8490:0:0, sum~cons_1~v8617:0:0, cons_0, v8489:0:0) -> f_503(v8900:0:0, 1 + v8617:0:0, v8617:0:0) :|: v8900:0:0 > 0 && v8617:0:0 > -1 && sum~cons_1~v8617:0:0 = 1 + v8617:0:0 && cons_0 = 0
The following rules are bounded:
f_503(x12:0, x13:0, sum~cons_1~x16:0) -> f_503(x15:0, 1 + x16:0, x16:0) :|: x13:0 > 1 && x15:0 > 0 && x16:0 > -1 && sum~cons_1~x16:0 = 1 + x16:0
f_503(sum~cons_1~v6597:0:0, v22:0:0, v978:0:0) -> f_851(v6597:0:0, v978:0:0, v13850:0:0, 1 + v6597:0:0) :|: v22:0:0 > 1 && v978:0:0 > 0 && v6597:0:0 > 0 && sum~cons_1~v6597:0:0 = 1 + v6597:0:0
f_851(v8490:0:0, sum~cons_1~v8617:0:0, cons_0, v8489:0:0) -> f_503(v8900:0:0, 1 + v8617:0:0, v8617:0:0) :|: v8900:0:0 > 0 && v8617:0:0 > -1 && sum~cons_1~v8617:0:0 = 1 + v8617:0:0 && cons_0 = 0

----------------------------------------

(95)
Obligation:
Rules:
f_851(sum~cons_1~x10:0, x7:0, x8:0, x9:0) -> f_851(x10:0, x7:0, x11:0, x9:0) :|: x8:0 > 0 && x9:0 > 1 && x10:0 > 0 && sum~cons_1~x10:0 = 1 + x10:0
f_503(sum~cons_1~v6597:0:0, v22:0:0, v978:0:0) -> f_851(v6597:0:0, v978:0:0, v13850:0:0, 1 + v6597:0:0) :|: v22:0:0 > 1 && v978:0:0 > 0 && v6597:0:0 > 0 && sum~cons_1~v6597:0:0 = 1 + v6597:0:0
f_851(sum~cons_1~x4:0, x1:0, x2:0, x3:0) -> f_851(x4:0, x1:0, x5:0, x3:0) :|: x2:0 < 0 && x3:0 > 1 && x4:0 > 0 && sum~cons_1~x4:0 = 1 + x4:0

----------------------------------------

(96) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(97)
Obligation:
Rules:
f_851(sum~cons_1~x10:0, x7:0, x8:0, x9:0) -> f_851(x10:0, x7:0, x11:0, x9:0) :|: x8:0 > 0 && x9:0 > 1 && x10:0 > 0 && sum~cons_1~x10:0 = 1 + x10:0
f_851(sum~cons_1~x4:0, x1:0, x2:0, x3:0) -> f_851(x4:0, x1:0, x5:0, x3:0) :|: x2:0 < 0 && x3:0 > 1 && x4:0 > 0 && sum~cons_1~x4:0 = 1 + x4:0

----------------------------------------

(98) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(99)
Obligation:
Rules:
f_851(sum~cons_1~x10:0:0, x7:0:0, x8:0:0, x9:0:0) -> f_851(x10:0:0, x7:0:0, x11:0:0, x9:0:0) :|: x8:0:0 > 0 && x9:0:0 > 1 && x10:0:0 > 0 && sum~cons_1~x10:0:0 = 1 + x10:0:0
f_851(sum~cons_1~x4:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_851(x4:0:0, x1:0:0, x5:0:0, x3:0:0) :|: x2:0:0 < 0 && x3:0:0 > 1 && x4:0:0 > 0 && sum~cons_1~x4:0:0 = 1 + x4:0:0

----------------------------------------

(100) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_851(x1, x2, x3, x4) -> f_851(x1, x3, x4)

----------------------------------------

(101)
Obligation:
Rules:
f_851(sum~cons_1~x10:0:0, x8:0:0, x9:0:0) -> f_851(x10:0:0, x11:0:0, x9:0:0) :|: x8:0:0 > 0 && x9:0:0 > 1 && x10:0:0 > 0 && sum~cons_1~x10:0:0 = 1 + x10:0:0
f_851(sum~cons_1~x4:0:0, x2:0:0, x3:0:0) -> f_851(x4:0:0, x5:0:0, x3:0:0) :|: x2:0:0 < 0 && x3:0:0 > 1 && x4:0:0 > 0 && sum~cons_1~x4:0:0 = 1 + x4:0:0

----------------------------------------

(102) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_851 ] = f_851_1

The following rules are decreasing:
f_851(sum~cons_1~x10:0:0, x8:0:0, x9:0:0) -> f_851(x10:0:0, x11:0:0, x9:0:0) :|: x8:0:0 > 0 && x9:0:0 > 1 && x10:0:0 > 0 && sum~cons_1~x10:0:0 = 1 + x10:0:0
f_851(sum~cons_1~x4:0:0, x2:0:0, x3:0:0) -> f_851(x4:0:0, x5:0:0, x3:0:0) :|: x2:0:0 < 0 && x3:0:0 > 1 && x4:0:0 > 0 && sum~cons_1~x4:0:0 = 1 + x4:0:0

The following rules are bounded:
f_851(sum~cons_1~x10:0:0, x8:0:0, x9:0:0) -> f_851(x10:0:0, x11:0:0, x9:0:0) :|: x8:0:0 > 0 && x9:0:0 > 1 && x10:0:0 > 0 && sum~cons_1~x10:0:0 = 1 + x10:0:0
f_851(sum~cons_1~x4:0:0, x2:0:0, x3:0:0) -> f_851(x4:0:0, x5:0:0, x3:0:0) :|: x2:0:0 < 0 && x3:0:0 > 1 && x4:0:0 > 0 && sum~cons_1~x4:0:0 = 1 + x4:0:0


----------------------------------------

(103)
YES

----------------------------------------

(104)
Obligation:
SCC
----------------------------------------

(105) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 69 rulesP rules:
f_439(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, 0, v18, v423, v977, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_447(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, 0, v18, v423, v977, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_447(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, 0, v18, v423, v977, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_455(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, 0, v18, v423, v977, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_455(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, 0, v18, v423, v977, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_463(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, 0, v18, v423, v977, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_463(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, 0, v18, v423, v977, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_471(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, 0, v18, v423, v977, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_471(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, 0, v18, v423, v977, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_480(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, 0, v18, v423, v977, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_480(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, 0, v18, v423, v977, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_491(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, 0, v18, v423, v977, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_491(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, 0, v18, v423, v977, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_502(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v22, 0, v18, v423, v20, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_502(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v22, 0, v18, v423, v20, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_513(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v22, 0, v18, v423, v20, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 < v977 && 2 <= v20
f_513(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v22, 0, v18, v423, v20, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_525(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v22, 0, v18, v423, v20, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_525(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v22, 0, v18, v423, v20, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_535(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v22, 0, v18, v423, v20, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_535(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v22, 0, v18, v423, v20, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_542(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v22, 0, v18, v423, v20, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_542(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v22, 0, v18, v423, v20, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_549(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_549(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_556(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 < v1053
f_556(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_565(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_565(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_574(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_574(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_583(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_583(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_592(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_592(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_602(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: v5568 != 0
f_592(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_603(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: v5568 = 0
f_602(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_613(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_613(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_624(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_624(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_637(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_637(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_644(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_644(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_654(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v6596, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 1 + v6596 = v63 && 0 <= v6596
f_654(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v6596, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_664(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v6596, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_664(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v6596, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_674(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v6596, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_674(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v6596, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_684(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v6596, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_684(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v6596, v423, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_449(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, v5568, v423, v20, v6596, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_449(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, v932, v62, v20, v1059, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_457(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, v932, v62, v20, v1059, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_457(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, v932, v62, v20, v1059, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_465(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, v932, v62, v20, v1059, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_465(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, v932, v62, v20, v1059, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_474(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_474(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_483(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 < v1059 && 2 <= v18
f_483(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_494(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_494(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_505(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_505(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_517(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_517(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_528(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_528(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_538(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_538(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_545(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_545(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_552(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_552(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_560(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_560(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_569(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_569(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_578(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_578(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_587(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_587(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v932, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_596(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v5570, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_596(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v5570, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_606(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v5570, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: v5570 != 0
f_596(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v5570, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_607(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, 0, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: v5570 = 0
f_606(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v5570, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_617(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v5570, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_617(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v5570, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_628(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v5570, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_628(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v5570, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_624(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, v5570, v18, v62, v20, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_607(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, 0, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_618(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, 0, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_618(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, 0, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_629(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, 0, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_629(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, 0, v62, v20, v18, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_625(v1, v3, v5, v7, v9, v12, v15, v1059, 1, v65, v69, 0, v18, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_625(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_638(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_638(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_645(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: v6594 != 0
f_645(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_655(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_655(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_665(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_665(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_675(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_675(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_685(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_685(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_695(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v8523, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 1 + v8523 = v977 && 0 <= v8523
f_695(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v8523, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_704(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v8523, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_704(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v8523, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_713(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v8523, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_713(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v8523, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_722(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v8523, v8896, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_722(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v8523, v8896, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_732(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v8523, v8896, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_732(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v8523, v8896, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_744(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v8523, v8896, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_744(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v8523, v8896, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_756(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v8523, v8896, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_756(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v8523, v8896, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_431(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v6594, v8523, v8896, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_431(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, 0, v18, v423, v977, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_439(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, 0, v18, v423, v977, v1053, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_603(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_614(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_614(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_625(v1, v3, v5, v7, v9, v12, v15, v63, 1, v977, v1053, 0, v18, v423, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
Combined rules. Obtained 8 rulesP rules:
f_439(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v63:0, 1, v20:0, v22:0, 0, v18:0, v423:0, 1 + v8523:0, v1053:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8, 2) -> f_439(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v63:0, 1, 1 + v8523:0, v1053:0, 0, v18:0, v6594:0, v8523:0, v8896:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8, 2) :|: v6594:0 < 0 && v20:0 > 1 && v8523:0 > -1 && v1053:0 > 0
f_439(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v63:0, 1, v20:0, v22:0, 0, v18:0, v423:0, 1 + v8523:0, v1053:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8, 2) -> f_439(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v63:0, 1, 1 + v8523:0, v1053:0, 0, v18:0, v6594:0, v8523:0, v8896:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8, 2) :|: v6594:0 > 0 && v20:0 > 1 && v8523:0 > -1 && v1053:0 > 0
f_596(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, 1 + v6596:0, 1, v65:0, v69:0, v5570:0, v62:0, v20:0, v18:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8, 2) -> f_596(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v6596:0, 1, v65:0, v69:0, v5570:1, v62:0, v20:0, 1 + v6596:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8, 2) :|: v6596:0 > 0 && v5570:0 < 0
f_596(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, 1 + v6596:0, 1, v65:0, v69:0, v5570:0, v62:0, v20:0, v18:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8, 2) -> f_596(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v6596:0, 1, v65:0, v69:0, v5570:1, v62:0, v20:0, 1 + v6596:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8, 2) :|: v6596:0 > 0 && v5570:0 > 0
f_596(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v1059:0, 1, 1 + v8523:0, v69:0, 0, v62:0, v20:0, v18:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8, 2) -> f_439(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v1059:0, 1, 1 + v8523:0, v69:0, 0, v18:0, v6594:0, v8523:0, v8896:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8, 2) :|: v8523:0 > -1 && v6594:0 < 0
f_596(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v1059:0, 1, 1 + v8523:0, v69:0, 0, v62:0, v20:0, v18:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8, 2) -> f_439(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v1059:0, 1, 1 + v8523:0, v69:0, 0, v18:0, v6594:0, v8523:0, v8896:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8, 2) :|: v8523:0 > -1 && v6594:0 > 0
f_439(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, 1 + v6596:0, 1, v20:0, v22:0, 0, v18:0, v423:0, v977:0, v1053:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8, 2) -> f_596(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v6596:0, 1, v977:0, v1053:0, v5570:0, v423:0, v20:0, 1 + v6596:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8, 2) :|: v6596:0 > 0 && v20:0 > 1 && v977:0 > 0 && v1053:0 > 0 && v5568:0 < 0
f_439(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, 1 + v6596:0, 1, v20:0, v22:0, 0, v18:0, v423:0, v977:0, v1053:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8, 2) -> f_596(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v6596:0, 1, v977:0, v1053:0, v5570:0, v423:0, v20:0, 1 + v6596:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8, 2) :|: v6596:0 > 0 && v20:0 > 1 && v977:0 > 0 && v1053:0 > 0 && v5568:0 > 0
Filtered unneeded arguments:
   f_439(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_439(x8, x10, x15, x16)
   f_596(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_596(x8, x10, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_439(v63:0, v20:0, sum~cons_1~v8523:0, v1053:0) -> f_439(v63:0, 1 + v8523:0, v8523:0, v8896:0) :|: v8523:0 > -1 && v1053:0 > 0 && v20:0 > 1 && sum~cons_1~v8523:0 = 1 + v8523:0
f_596(sum~cons_1~v6596:0, v65:0, v5570:0) -> f_596(v6596:0, v65:0, v5570:1) :|: v6596:0 > 0 && v5570:0 < 0 && sum~cons_1~v6596:0 = 1 + v6596:0
f_596(sum~cons_1~v6596:0, v65:0, v5570:0) -> f_596(v6596:0, v65:0, v5570:1) :|: v6596:0 > 0 && v5570:0 > 0 && sum~cons_1~v6596:0 = 1 + v6596:0
f_596(v1059:0, sum~cons_1~v8523:0, cons_0) -> f_439(v1059:0, 1 + v8523:0, v8523:0, v8896:0) :|: v8523:0 > -1 && sum~cons_1~v8523:0 = 1 + v8523:0 && cons_0 = 0
f_439(sum~cons_1~v6596:0, v20:0, v977:0, v1053:0) -> f_596(v6596:0, v977:0, v5570:0) :|: v20:0 > 1 && v6596:0 > 0 && v1053:0 > 0 && v977:0 > 0 && sum~cons_1~v6596:0 = 1 + v6596:0

----------------------------------------

(106)
Obligation:
Rules:
f_439(v63:0, v20:0, sum~cons_1~v8523:0, v1053:0) -> f_439(v63:0, 1 + v8523:0, v8523:0, v8896:0) :|: v8523:0 > -1 && v1053:0 > 0 && v20:0 > 1 && sum~cons_1~v8523:0 = 1 + v8523:0
f_596(sum~cons_1~v6596:0, v65:0, v5570:0) -> f_596(v6596:0, v65:0, v5570:1) :|: v6596:0 > 0 && v5570:0 < 0 && sum~cons_1~v6596:0 = 1 + v6596:0
f_596(x, x1, x2) -> f_596(x3, x1, x4) :|: x3 > 0 && x2 > 0 && x = 1 + x3
f_596(x5, x6, x7) -> f_439(x5, 1 + x8, x8, x9) :|: x8 > -1 && x6 = 1 + x8 && x7 = 0
f_439(x10, x11, x12, x13) -> f_596(x14, x12, x15) :|: x11 > 1 && x14 > 0 && x13 > 0 && x12 > 0 && x10 = 1 + x14

----------------------------------------

(107) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(108)
Obligation:
Rules:
f_596(sum~cons_1~x3:0, x1:0, x2:0) -> f_596(x3:0, x1:0, x4:0) :|: x3:0 > 0 && x2:0 > 0 && sum~cons_1~x3:0 = 1 + x3:0
f_596(sum~cons_1~v6596:0:0, v65:0:0, v5570:0:0) -> f_596(v6596:0:0, v65:0:0, v5570:1:0) :|: v6596:0:0 > 0 && v5570:0:0 < 0 && sum~cons_1~v6596:0:0 = 1 + v6596:0:0
f_439(v63:0:0, v20:0:0, sum~cons_1~v8523:0:0, v1053:0:0) -> f_439(v63:0:0, 1 + v8523:0:0, v8523:0:0, v8896:0:0) :|: v8523:0:0 > -1 && v1053:0:0 > 0 && v20:0:0 > 1 && sum~cons_1~v8523:0:0 = 1 + v8523:0:0
f_439(sum~cons_1~x14:0, x11:0, x12:0, x13:0) -> f_596(x14:0, x12:0, x15:0) :|: x13:0 > 0 && x12:0 > 0 && x14:0 > 0 && x11:0 > 1 && sum~cons_1~x14:0 = 1 + x14:0
f_596(x5:0, sum~cons_1~x8:0, cons_0) -> f_439(x5:0, 1 + x8:0, x8:0, x9:0) :|: x8:0 > -1 && sum~cons_1~x8:0 = 1 + x8:0 && cons_0 = 0

----------------------------------------

(109) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_596 ] = 2*f_596_2
[ f_439 ] = 2*f_439_3 + 1

The following rules are decreasing:
f_439(v63:0:0, v20:0:0, sum~cons_1~v8523:0:0, v1053:0:0) -> f_439(v63:0:0, 1 + v8523:0:0, v8523:0:0, v8896:0:0) :|: v8523:0:0 > -1 && v1053:0:0 > 0 && v20:0:0 > 1 && sum~cons_1~v8523:0:0 = 1 + v8523:0:0
f_439(sum~cons_1~x14:0, x11:0, x12:0, x13:0) -> f_596(x14:0, x12:0, x15:0) :|: x13:0 > 0 && x12:0 > 0 && x14:0 > 0 && x11:0 > 1 && sum~cons_1~x14:0 = 1 + x14:0
f_596(x5:0, sum~cons_1~x8:0, cons_0) -> f_439(x5:0, 1 + x8:0, x8:0, x9:0) :|: x8:0 > -1 && sum~cons_1~x8:0 = 1 + x8:0 && cons_0 = 0

The following rules are bounded:
f_596(x5:0, sum~cons_1~x8:0, cons_0) -> f_439(x5:0, 1 + x8:0, x8:0, x9:0) :|: x8:0 > -1 && sum~cons_1~x8:0 = 1 + x8:0 && cons_0 = 0


----------------------------------------

(110)
Obligation:
Rules:
f_596(sum~cons_1~x3:0, x1:0, x2:0) -> f_596(x3:0, x1:0, x4:0) :|: x3:0 > 0 && x2:0 > 0 && sum~cons_1~x3:0 = 1 + x3:0
f_596(sum~cons_1~v6596:0:0, v65:0:0, v5570:0:0) -> f_596(v6596:0:0, v65:0:0, v5570:1:0) :|: v6596:0:0 > 0 && v5570:0:0 < 0 && sum~cons_1~v6596:0:0 = 1 + v6596:0:0
f_439(v63:0:0, v20:0:0, sum~cons_1~v8523:0:0, v1053:0:0) -> f_439(v63:0:0, 1 + v8523:0:0, v8523:0:0, v8896:0:0) :|: v8523:0:0 > -1 && v1053:0:0 > 0 && v20:0:0 > 1 && sum~cons_1~v8523:0:0 = 1 + v8523:0:0
f_439(sum~cons_1~x14:0, x11:0, x12:0, x13:0) -> f_596(x14:0, x12:0, x15:0) :|: x13:0 > 0 && x12:0 > 0 && x14:0 > 0 && x11:0 > 1 && sum~cons_1~x14:0 = 1 + x14:0

----------------------------------------

(111) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained 2 non-trivial SCCs.

----------------------------------------

(112)
Complex Obligation (AND)

----------------------------------------

(113)
Obligation:
Rules:
f_439(v63:0:0, v20:0:0, sum~cons_1~v8523:0:0, v1053:0:0) -> f_439(v63:0:0, 1 + v8523:0:0, v8523:0:0, v8896:0:0) :|: v8523:0:0 > -1 && v1053:0:0 > 0 && v20:0:0 > 1 && sum~cons_1~v8523:0:0 = 1 + v8523:0:0

----------------------------------------

(114) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(115)
Obligation:
Rules:
f_439(v63:0:0:0, v20:0:0:0, sum~cons_1~v8523:0:0:0, v1053:0:0:0) -> f_439(v63:0:0:0, 1 + v8523:0:0:0, v8523:0:0:0, v8896:0:0:0) :|: v8523:0:0:0 > -1 && v1053:0:0:0 > 0 && v20:0:0:0 > 1 && sum~cons_1~v8523:0:0:0 = 1 + v8523:0:0:0

----------------------------------------

(116) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_439(x1, x2, x3, x4) -> f_439(x2, x3, x4)

----------------------------------------

(117)
Obligation:
Rules:
f_439(v20:0:0:0, sum~cons_1~v8523:0:0:0, v1053:0:0:0) -> f_439(1 + v8523:0:0:0, v8523:0:0:0, v8896:0:0:0) :|: v8523:0:0:0 > -1 && v1053:0:0:0 > 0 && v20:0:0:0 > 1 && sum~cons_1~v8523:0:0:0 = 1 + v8523:0:0:0

----------------------------------------

(118) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_439(x, x1, x2)] = x1

The following rules are decreasing:
f_439(v20:0:0:0, sum~cons_1~v8523:0:0:0, v1053:0:0:0) -> f_439(1 + v8523:0:0:0, v8523:0:0:0, v8896:0:0:0) :|: v8523:0:0:0 > -1 && v1053:0:0:0 > 0 && v20:0:0:0 > 1 && sum~cons_1~v8523:0:0:0 = 1 + v8523:0:0:0
The following rules are bounded:
f_439(v20:0:0:0, sum~cons_1~v8523:0:0:0, v1053:0:0:0) -> f_439(1 + v8523:0:0:0, v8523:0:0:0, v8896:0:0:0) :|: v8523:0:0:0 > -1 && v1053:0:0:0 > 0 && v20:0:0:0 > 1 && sum~cons_1~v8523:0:0:0 = 1 + v8523:0:0:0

----------------------------------------

(119)
YES

----------------------------------------

(120)
Obligation:
Rules:
f_596(sum~cons_1~x3:0, x1:0, x2:0) -> f_596(x3:0, x1:0, x4:0) :|: x3:0 > 0 && x2:0 > 0 && sum~cons_1~x3:0 = 1 + x3:0
f_596(sum~cons_1~v6596:0:0, v65:0:0, v5570:0:0) -> f_596(v6596:0:0, v65:0:0, v5570:1:0) :|: v6596:0:0 > 0 && v5570:0:0 < 0 && sum~cons_1~v6596:0:0 = 1 + v6596:0:0

----------------------------------------

(121) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(122)
Obligation:
Rules:
f_596(sum~cons_1~x3:0:0, x1:0:0, x2:0:0) -> f_596(x3:0:0, x1:0:0, x4:0:0) :|: x3:0:0 > 0 && x2:0:0 > 0 && sum~cons_1~x3:0:0 = 1 + x3:0:0
f_596(sum~cons_1~v6596:0:0:0, v65:0:0:0, v5570:0:0:0) -> f_596(v6596:0:0:0, v65:0:0:0, v5570:1:0:0) :|: v6596:0:0:0 > 0 && v5570:0:0:0 < 0 && sum~cons_1~v6596:0:0:0 = 1 + v6596:0:0:0

----------------------------------------

(123) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_596(x1, x2, x3) -> f_596(x1, x3)

----------------------------------------

(124)
Obligation:
Rules:
f_596(sum~cons_1~x3:0:0, x2:0:0) -> f_596(x3:0:0, x4:0:0) :|: x3:0:0 > 0 && x2:0:0 > 0 && sum~cons_1~x3:0:0 = 1 + x3:0:0
f_596(sum~cons_1~v6596:0:0:0, v5570:0:0:0) -> f_596(v6596:0:0:0, v5570:1:0:0) :|: v6596:0:0:0 > 0 && v5570:0:0:0 < 0 && sum~cons_1~v6596:0:0:0 = 1 + v6596:0:0:0

----------------------------------------

(125) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_596 ] = f_596_1

The following rules are decreasing:
f_596(sum~cons_1~x3:0:0, x2:0:0) -> f_596(x3:0:0, x4:0:0) :|: x3:0:0 > 0 && x2:0:0 > 0 && sum~cons_1~x3:0:0 = 1 + x3:0:0
f_596(sum~cons_1~v6596:0:0:0, v5570:0:0:0) -> f_596(v6596:0:0:0, v5570:1:0:0) :|: v6596:0:0:0 > 0 && v5570:0:0:0 < 0 && sum~cons_1~v6596:0:0:0 = 1 + v6596:0:0:0

The following rules are bounded:
f_596(sum~cons_1~x3:0:0, x2:0:0) -> f_596(x3:0:0, x4:0:0) :|: x3:0:0 > 0 && x2:0:0 > 0 && sum~cons_1~x3:0:0 = 1 + x3:0:0
f_596(sum~cons_1~v6596:0:0:0, v5570:0:0:0) -> f_596(v6596:0:0:0, v5570:1:0:0) :|: v6596:0:0:0 > 0 && v5570:0:0:0 < 0 && sum~cons_1~v6596:0:0:0 = 1 + v6596:0:0:0


----------------------------------------

(126)
YES

----------------------------------------

(127)
Obligation:
SCC
----------------------------------------

(128) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 35 rulesP rules:
f_306(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v65, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_309(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v65, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_309(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v65, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_312(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v65, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_312(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v65, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_315(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v65, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_315(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v65, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_319(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v65, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_319(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v65, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_323(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v65, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_323(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v65, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_327(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v22, 0, v62, v20, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_327(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v22, 0, v62, v20, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_331(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v22, 0, v62, v20, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 < v65 && 2 <= v20
f_331(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v22, 0, v62, v20, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_337(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v22, 0, v62, v20, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_337(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v22, 0, v62, v20, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_342(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v22, 0, v62, v20, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_342(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v22, 0, v62, v20, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_347(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v22, 0, v62, v20, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_347(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v22, 0, v62, v20, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_352(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_352(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_358(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 < v69
f_358(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_365(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_365(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_372(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_372(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_379(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_379(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_386(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, v932, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_386(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, v932, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_394(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: v932 = 0
f_394(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_400(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_400(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_406(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_406(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v62, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_412(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_412(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_418(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: v1055 != 0
f_418(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_426(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_426(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_434(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_434(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_442(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_442(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v20, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_450(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_450(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_458(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 1 + v1557 = v65 && 0 <= v1557
f_458(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_466(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_466(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_475(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_475(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_485(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v1679, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_485(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v1679, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_496(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v1679, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_496(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v1679, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_507(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v1679, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_507(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v1679, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_519(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v1679, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_519(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v1679, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_530(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v1679, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_530(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v1679, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_303(v1, v3, v5, v7, v9, v12, v15, v18, 1, v65, v69, 0, v1055, v1557, v1679, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_303(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v65, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_306(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v65, v69, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_306(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v18:0, 1, v20:0, v22:0, 0, v62:0, 1 + v1557:0, v69:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8) -> f_306(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v18:0, 1, 1 + v1557:0, v69:0, 0, v1055:0, v1557:0, v1679:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8) :|: v20:0 > 1 && v1557:0 > -1 && v69:0 > 0 && v1055:0 < 0
f_306(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v18:0, 1, v20:0, v22:0, 0, v62:0, 1 + v1557:0, v69:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8) -> f_306(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v18:0, 1, 1 + v1557:0, v69:0, 0, v1055:0, v1557:0, v1679:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8) :|: v20:0 > 1 && v1557:0 > -1 && v69:0 > 0 && v1055:0 > 0
Filtered unneeded arguments:
   f_306(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26) -> f_306(x10, x14, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_306(v20:0, sum~cons_1~v1557:0, v69:0) -> f_306(1 + v1557:0, v1557:0, v1679:0) :|: v1557:0 > -1 && v69:0 > 0 && v20:0 > 1 && sum~cons_1~v1557:0 = 1 + v1557:0

----------------------------------------

(129)
Obligation:
Rules:
f_306(v20:0, sum~cons_1~v1557:0, v69:0) -> f_306(1 + v1557:0, v1557:0, v1679:0) :|: v1557:0 > -1 && v69:0 > 0 && v20:0 > 1 && sum~cons_1~v1557:0 = 1 + v1557:0

----------------------------------------

(130) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(131)
Obligation:
Rules:
f_306(v20:0:0, sum~cons_1~v1557:0:0, v69:0:0) -> f_306(1 + v1557:0:0, v1557:0:0, v1679:0:0) :|: v1557:0:0 > -1 && v69:0:0 > 0 && v20:0:0 > 1 && sum~cons_1~v1557:0:0 = 1 + v1557:0:0

----------------------------------------

(132) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_306(x, x1, x2)] = x1

The following rules are decreasing:
f_306(v20:0:0, sum~cons_1~v1557:0:0, v69:0:0) -> f_306(1 + v1557:0:0, v1557:0:0, v1679:0:0) :|: v1557:0:0 > -1 && v69:0:0 > 0 && v20:0:0 > 1 && sum~cons_1~v1557:0:0 = 1 + v1557:0:0
The following rules are bounded:
f_306(v20:0:0, sum~cons_1~v1557:0:0, v69:0:0) -> f_306(1 + v1557:0:0, v1557:0:0, v1679:0:0) :|: v1557:0:0 > -1 && v69:0:0 > 0 && v20:0:0 > 1 && sum~cons_1~v1557:0:0 = 1 + v1557:0:0

----------------------------------------

(133)
YES

----------------------------------------

(134)
Obligation:
SCC
----------------------------------------

(135) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 35 rulesP rules:
f_304(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v66, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_307(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v66, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_307(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v66, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_310(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v66, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_310(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v66, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_313(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_313(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_316(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 < v70
f_316(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_320(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_320(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_324(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_324(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_328(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_328(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_333(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_333(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_339(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_339(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_344(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_344(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_349(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_349(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v22, 0, v66, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_354(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_354(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_360(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 < v66 && 2 <= v22
f_360(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_367(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_367(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_374(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_374(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_381(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_381(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_388(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, v933, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_388(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, v933, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_396(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: v933 = 0
f_396(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_402(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_402(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_408(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_408(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_414(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1056, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_414(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1056, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_422(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: v1056 = 0
f_422(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_430(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_430(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_438(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_438(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_446(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_446(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_454(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_454(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_462(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1634, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 1 + v1634 = v66 && 0 <= v1634
f_462(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1634, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_470(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1634, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_470(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1634, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_479(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1634, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_479(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1634, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_490(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1634, v1682, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_490(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1634, v1682, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_501(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1634, v1682, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_501(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1634, v1682, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_512(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1634, v1682, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_512(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1634, v1682, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_524(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1634, v1682, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_524(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1634, v1682, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_300(v1, v3, v5, v7, v9, v12, v15, v70, 1, v20, v66, 0, v1634, v1682, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_300(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v66, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_304(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v66, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_304(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v18:0, 1, v20:0, v22:0, 0, 1 + v1634:0, v70:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8) -> f_304(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v70:0, 1, v20:0, 1 + v1634:0, 0, v1634:0, v1682:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8) :|: v70:0 > 0 && v22:0 > 1 && v1634:0 > -1
Filtered unneeded arguments:
   f_304(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_304(x11, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_304(v22:0, sum~cons_1~v1634:0, v70:0) -> f_304(1 + v1634:0, v1634:0, v1682:0) :|: v22:0 > 1 && v1634:0 > -1 && v70:0 > 0 && sum~cons_1~v1634:0 = 1 + v1634:0

----------------------------------------

(136)
Obligation:
Rules:
f_304(v22:0, sum~cons_1~v1634:0, v70:0) -> f_304(1 + v1634:0, v1634:0, v1682:0) :|: v22:0 > 1 && v1634:0 > -1 && v70:0 > 0 && sum~cons_1~v1634:0 = 1 + v1634:0

----------------------------------------

(137) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(138)
Obligation:
Rules:
f_304(v22:0:0, sum~cons_1~v1634:0:0, v70:0:0) -> f_304(1 + v1634:0:0, v1634:0:0, v1682:0:0) :|: v22:0:0 > 1 && v1634:0:0 > -1 && v70:0:0 > 0 && sum~cons_1~v1634:0:0 = 1 + v1634:0:0

----------------------------------------

(139) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_304(x, x1, x2)] = x1

The following rules are decreasing:
f_304(v22:0:0, sum~cons_1~v1634:0:0, v70:0:0) -> f_304(1 + v1634:0:0, v1634:0:0, v1682:0:0) :|: v22:0:0 > 1 && v1634:0:0 > -1 && v70:0:0 > 0 && sum~cons_1~v1634:0:0 = 1 + v1634:0:0
The following rules are bounded:
f_304(v22:0:0, sum~cons_1~v1634:0:0, v70:0:0) -> f_304(1 + v1634:0:0, v1634:0:0, v1682:0:0) :|: v22:0:0 > 1 && v1634:0:0 > -1 && v70:0:0 > 0 && sum~cons_1~v1634:0:0 = 1 + v1634:0:0

----------------------------------------

(140)
YES

----------------------------------------

(141)
Obligation:
SCC
----------------------------------------

(142) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_279(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, v61, v63, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_282(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: 0 = 0
f_282(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_285(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 < v63 && 2 <= v18
f_285(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_289(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_289(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_293(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_293(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_297(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_297(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_301(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_301(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_305(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_305(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_308(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_308(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_311(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_311(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_314(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_314(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_318(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_318(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_322(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_322(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_326(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_326(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_330(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_330(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_335(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: v297 != 0
f_335(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_340(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_340(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_345(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_345(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_350(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_350(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_355(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: 0 = 0
f_355(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_362(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v424, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: 1 + v424 = v63 && 0 <= v424
f_362(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v424, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_369(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v424, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: 0 = 0
f_369(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v424, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_376(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v424, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: TRUE
f_376(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v424, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_383(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v424, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: TRUE
f_383(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v424, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_390(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v424, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: TRUE
f_390(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v424, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_276(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v297, v424, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: TRUE
f_276(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, v61, v63, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_279(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, v61, v63, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_279(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v18:0, 1, v20:0, v22:0, v61:0, 1 + v424:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8) -> f_279(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, 1 + v424:0, 1, v20:0, v22:0, v297:0, v424:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8) :|: v18:0 > 1 && v424:0 > -1 && v297:0 < 0
f_279(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v18:0, 1, v20:0, v22:0, v61:0, 1 + v424:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8) -> f_279(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, 1 + v424:0, 1, v20:0, v22:0, v297:0, v424:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8) :|: v18:0 > 1 && v424:0 > -1 && v297:0 > 0
Filtered unneeded arguments:
   f_279(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_279(x8, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_279(v18:0, sum~cons_1~v424:0) -> f_279(1 + v424:0, v424:0) :|: v18:0 > 1 && v424:0 > -1 && sum~cons_1~v424:0 = 1 + v424:0

----------------------------------------

(143)
Obligation:
Rules:
f_279(v18:0, sum~cons_1~v424:0) -> f_279(1 + v424:0, v424:0) :|: v18:0 > 1 && v424:0 > -1 && sum~cons_1~v424:0 = 1 + v424:0

----------------------------------------

(144) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(145)
Obligation:
Rules:
f_279(v18:0:0, sum~cons_1~v424:0:0) -> f_279(1 + v424:0:0, v424:0:0) :|: v18:0:0 > 1 && v424:0:0 > -1 && sum~cons_1~v424:0:0 = 1 + v424:0:0

----------------------------------------

(146) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_279 ] = f_279_2

The following rules are decreasing:
f_279(v18:0:0, sum~cons_1~v424:0:0) -> f_279(1 + v424:0:0, v424:0:0) :|: v18:0:0 > 1 && v424:0:0 > -1 && sum~cons_1~v424:0:0 = 1 + v424:0:0

The following rules are bounded:
f_279(v18:0:0, sum~cons_1~v424:0:0) -> f_279(1 + v424:0:0, v424:0:0) :|: v18:0:0 > 1 && v424:0:0 > -1 && sum~cons_1~v424:0:0 = 1 + v424:0:0


----------------------------------------

(147)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
