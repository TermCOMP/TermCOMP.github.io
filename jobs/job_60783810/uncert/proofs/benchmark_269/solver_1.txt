YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/9taA1.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 63 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 914 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 151 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 9 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/9taA1.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/9taA1.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %2
		%8 = load %3
		%9 = icmp sge %8 0
		br %9, %10, %30
	10:
		%11 = load %2
		%12 = icmp sgt %11 0
		br %12, %13, %30
	13:
		%14 = load %3
		store %14, %4
		store 0, %5
		br %15
	15:
		%16 = load %4
		%17 = icmp sgt %16 0
		br %17, %18, %29
	18:
		%19 = load %5
		%20 = load %2
		%21 = icmp slt %19 %20
		br %21, %22, %27
	22:
		%23 = load %5
		%24 = add i32 %23, 1
		store %24, %5
		%25 = load %4
		%26 = sub i32 %25, 1
		store %26, %4
		br %28
	27:
		store 0, %5
		br %28
	28:
		br %15
	29:
		br %30
	30:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 33 rulesP rules:
f_346(v346, v347, v348, v349, v350, v351, v352, 1, v357, v355, v356, v354, v358, v359, v360, v361, v362, 0, 3, 4) -> f_347(v346, v347, v348, v349, v350, v351, v352, 1, v357, v355, v356, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) :|: 0 < v357 && 2 <= v354 && 2 <= v351
f_347(v346, v347, v348, v349, v350, v351, v352, 1, v357, v355, v356, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) -> f_349(v346, v347, v348, v349, v350, v351, v352, 1, v357, v355, v356, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) :|: 0 = 0
f_349(v346, v347, v348, v349, v350, v351, v352, 1, v357, v355, v356, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) -> f_351(v346, v347, v348, v349, v350, v351, v352, 1, v357, v355, v356, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) :|: TRUE
f_351(v346, v347, v348, v349, v350, v351, v352, 1, v357, v355, v356, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) -> f_353(v346, v347, v348, v349, v350, v351, v352, 1, v357, v356, v355, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) :|: 0 = 0
f_353(v346, v347, v348, v349, v350, v351, v352, 1, v357, v356, v355, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) -> f_355(v346, v347, v348, v349, v350, v351, v352, 1, v357, v356, v355, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) :|: 0 = 0
f_355(v346, v347, v348, v349, v350, v351, v352, 1, v357, v356, v355, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) -> f_356(v346, v347, v348, v349, v350, v351, v352, 1, v357, v356, v355, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) :|: v356 < v352 && 2 <= v352
f_355(v346, v347, v348, v349, v350, v351, v352, 1, v357, v356, v355, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) -> f_357(v346, v347, v348, v349, v350, v351, v356, 1, v357, v355, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) :|: v352 <= v356 && v352 = v356
f_356(v346, v347, v348, v349, v350, v351, v352, 1, v357, v356, v355, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) -> f_358(v346, v347, v348, v349, v350, v351, v352, 1, v357, v356, v355, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) :|: 0 = 0
f_358(v346, v347, v348, v349, v350, v351, v352, 1, v357, v356, v355, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) -> f_360(v346, v347, v348, v349, v350, v351, v352, 1, v357, v356, v355, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) :|: TRUE
f_360(v346, v347, v348, v349, v350, v351, v352, 1, v357, v356, v355, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) -> f_380(v346, v347, v348, v349, v350, v351, v352, 1, v357, v356, v355, v356, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) :|: TRUE
f_380(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v457, v458, v459, v460, v461, v462, v463, v464, 0, 3, 2, 4) -> f_381(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v458, v459, v460, v461, v462, v463, v464, 0, 3, 2, 4) :|: 0 = 0
f_381(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v458, v459, v460, v461, v462, v463, v464, 0, 3, 2, 4) -> f_382(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v466, v459, v460, v461, v462, v463, v464, 0, 3, 2, 4) :|: v466 = 1 + v456 && 1 <= v466
f_382(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v466, v459, v460, v461, v462, v463, v464, 0, 3, 2, 4) -> f_383(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v466, v459, v460, v461, v462, v463, v464, 0, 3, 2, 4) :|: TRUE
f_383(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v466, v459, v460, v461, v462, v463, v464, 0, 3, 2, 4) -> f_384(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v466, v460, v461, v462, v463, v464, 0, 3, 2, 4) :|: 0 = 0
f_384(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v466, v460, v461, v462, v463, v464, 0, 3, 2, 4) -> f_385(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v466, v468, v460, v461, v462, v463, v464, 0, 3, 2, 4) :|: 1 + v468 = v455 && 0 <= v468
f_385(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v466, v468, v460, v461, v462, v463, v464, 0, 3, 2, 4) -> f_386(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v466, v468, v460, v461, v462, v463, v464, 0, 3, 2, 4) :|: TRUE
f_386(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v466, v468, v460, v461, v462, v463, v464, 0, 3, 2, 4) -> f_387(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v466, v468, v460, v461, v462, v463, v464, 0, 3, 2, 4) :|: TRUE
f_387(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v466, v468, v460, v461, v462, v463, v464, 0, 3, 2, 4) -> f_388(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v466, v468, v460, v461, v462, v463, v464, 0, 3, 2, 4) :|: TRUE
f_388(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v466, v468, v460, v461, v462, v463, v464, 0, 3, 2, 4) -> f_345(v447, v448, v449, v450, v451, v452, v453, 1, v455, v456, v466, v468, v460, v461, v462, v463, v464, 0, 3, 4) :|: TRUE
f_345(v346, v347, v348, v349, v350, v351, v352, 1, v354, v355, v356, v357, v358, v359, v360, v361, v362, 0, 3, 4) -> f_346(v346, v347, v348, v349, v350, v351, v352, 1, v357, v355, v356, v354, v358, v359, v360, v361, v362, 0, 3, 4) :|: 0 = 0
f_357(v346, v347, v348, v349, v350, v351, v356, 1, v357, v355, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) -> f_359(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) :|: 0 = 0
f_359(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) -> f_361(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) :|: TRUE
f_361(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) -> f_363(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) :|: TRUE
f_363(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) -> f_365(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) :|: TRUE
f_365(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) -> f_367(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) :|: TRUE
f_367(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) -> f_369(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) :|: 0 = 0
f_369(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) -> f_371(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) :|: 0 = 0
f_371(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) -> f_373(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) :|: TRUE
f_373(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) -> f_375(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) :|: 0 = 0
f_375(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) -> f_377(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) :|: 0 = 0
f_377(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) -> f_378(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) :|: 0 = 0
f_378(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) -> f_379(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) :|: TRUE
f_379(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v354, v358, v359, v360, v361, v362, 3, 2, 4) -> f_380(v346, v347, v348, v349, v350, v351, v356, 1, v357, 0, v355, v356, v354, v358, v359, v360, v361, v362, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_346(v346:0, v347:0, v348:0, v349:0, v350:0, v351:0, v352:0, 1, 1 + v468:0, v355:0, v356:0, v354:0, v358:0, v359:0, v360:0, v361:0, v362:0, 0, 3, 4) -> f_346(v346:0, v347:0, v348:0, v349:0, v350:0, v351:0, v352:0, 1, v468:0, v356:0, 1 + v356:0, 1 + v468:0, v358:0, v359:0, v360:0, v361:0, v362:0, 0, 3, 4) :|: v354:0 > 1 && v468:0 > -1 && v351:0 > 1 && v352:0 > 1 && v356:0 < v352:0 && v356:0 > -1
f_346(v346:0, v347:0, v348:0, v349:0, v350:0, v351:0, v352:0, 1, 1 + v468:0, v355:0, v352:0, v354:0, v358:0, v359:0, v360:0, v361:0, v362:0, 0, 3, 4) -> f_346(v346:0, v347:0, v348:0, v349:0, v350:0, v351:0, v352:0, 1, v468:0, 0, 1, 1 + v468:0, v358:0, v359:0, v360:0, v361:0, v362:0, 0, 3, 4) :|: v354:0 > 1 && v468:0 > -1 && v351:0 > 1
Filtered unneeded arguments:
   f_346(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_346(x6, x7, x9, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_346(v351:0, v352:0, sum~cons_1~v468:0, v356:0, v354:0) -> f_346(v351:0, v352:0, v468:0, 1 + v356:0, 1 + v468:0) :|: v468:0 > -1 && v354:0 > 1 && v351:0 > 1 && v352:0 > 1 && v356:0 > -1 && v356:0 < v352:0 && sum~cons_1~v468:0 = 1 + v468:0
f_346(v351:0, v352:0, sum~cons_1~v468:0, v352:01, v354:0) -> f_346(v351:0, v352:0, v468:0, 1, 1 + v468:0) :|: v468:0 > -1 && v351:0 > 1 && v354:0 > 1 && sum~cons_1~v468:0 = 1 + v468:0 && v352:0 = v352:01

----------------------------------------

(8)
Obligation:
Rules:
f_346(v351:0, v352:0, sum~cons_1~v468:0, v356:0, v354:0) -> f_346(v351:0, v352:0, v468:0, 1 + v356:0, 1 + v468:0) :|: v468:0 > -1 && v354:0 > 1 && v351:0 > 1 && v352:0 > 1 && v356:0 > -1 && v356:0 < v352:0 && sum~cons_1~v468:0 = 1 + v468:0
f_346(x, x1, x2, x3, x4) -> f_346(x, x1, x5, 1, 1 + x5) :|: x5 > -1 && x > 1 && x4 > 1 && x2 = 1 + x5 && x1 = x3

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_346(x:0, x1:0, sum~cons_1~x5:0, x1:01, x4:0) -> f_346(x:0, x1:0, x5:0, 1, 1 + x5:0) :|: x5:0 > -1 && x:0 > 1 && x4:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0 && x1:0 = x1:01
f_346(v351:0:0, v352:0:0, sum~cons_1~v468:0:0, v356:0:0, v354:0:0) -> f_346(v351:0:0, v352:0:0, v468:0:0, 1 + v356:0:0, 1 + v468:0:0) :|: v356:0:0 > -1 && v356:0:0 < v352:0:0 && v352:0:0 > 1 && v351:0:0 > 1 && v354:0:0 > 1 && v468:0:0 > -1 && sum~cons_1~v468:0:0 = 1 + v468:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_346(x, x1, x2, x3, x4)] = x2

The following rules are decreasing:
f_346(x:0, x1:0, sum~cons_1~x5:0, x1:01, x4:0) -> f_346(x:0, x1:0, x5:0, 1, 1 + x5:0) :|: x5:0 > -1 && x:0 > 1 && x4:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0 && x1:0 = x1:01
f_346(v351:0:0, v352:0:0, sum~cons_1~v468:0:0, v356:0:0, v354:0:0) -> f_346(v351:0:0, v352:0:0, v468:0:0, 1 + v356:0:0, 1 + v468:0:0) :|: v356:0:0 > -1 && v356:0:0 < v352:0:0 && v352:0:0 > 1 && v351:0:0 > 1 && v354:0:0 > 1 && v468:0:0 > -1 && sum~cons_1~v468:0:0 = 1 + v468:0:0
The following rules are bounded:
f_346(x:0, x1:0, sum~cons_1~x5:0, x1:01, x4:0) -> f_346(x:0, x1:0, x5:0, 1, 1 + x5:0) :|: x5:0 > -1 && x:0 > 1 && x4:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0 && x1:0 = x1:01
f_346(v351:0:0, v352:0:0, sum~cons_1~v468:0:0, v356:0:0, v354:0:0) -> f_346(v351:0:0, v352:0:0, v468:0:0, 1 + v356:0:0, 1 + v468:0:0) :|: v356:0:0 > -1 && v356:0:0 < v352:0:0 && v352:0:0 > 1 && v351:0:0 > 1 && v354:0:0 > 1 && v468:0:0 > -1 && sum~cons_1~v468:0:0 = 1 + v468:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
