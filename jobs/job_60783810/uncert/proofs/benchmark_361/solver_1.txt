NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/TeOyc.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 406 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [EQUIVALENT, 76 ms]
(6) IntTRS
(7) IRSNoOverapproximation [EQUIVALENT, 0 ms]
(8) IntTRS
(9) IRSToKoat [EQUIVALENT, 0 ms]
(10) Koat Problem
(11) LoAT [COMPLETE, 3955 ms]
(12) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/TeOyc.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/TeOyc.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		br %9
	9:
		%10 = load %3
		%11 = load %4
		%12 = sub i32 %10, %11
		%13 = icmp sge %12 1
		br %13, %14, %18
	14:
		%15 = load %2
		%16 = load %4
		%17 = icmp eq %15 %16
		br %18
	18:
		%19 = phi [0, %9], [%17, %14]
		br %19, %20, %27
	20:
		%21 = call i32 @__VERIFIER_nondet_int()
		store %21, %5
		store 10, %3
		%22 = load %4
		%23 = add i32 %22, 1
		%24 = load %5
		%25 = add i32 %23, %24
		store %25, %4
		%26 = load %4
		store %26, %2
		br %9
	27:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 76 rulesP rules:
f_124 -> f_125(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_125(v1, v2, 3, 1, 4) -> f_126(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_126(v1, v3, v2, v4, 3, 1, 4) -> f_127(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_127(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_128(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_128(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_129(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) :|: 1 <= v9 && v10 = 3 + v9 && 4 <= v10
f_129(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) -> f_130(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_130(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_131(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_131(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_132(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_132(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_133(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_133(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_134(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_134(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_135(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_135(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_136(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_136(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_137(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_137(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_138(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_138(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_139(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_139(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_140(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_140(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_141(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_141(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_142(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: 0 = 0
f_142(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_143(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: 0 = 0
f_143(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_144(v1, v3, v5, v7, v9, v11, v13, v15, v17, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: v17 + v15 = v13
f_144(v1, v3, v5, v7, v9, v11, v13, v15, v17, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_145(v1, v3, v5, v7, v9, v11, v13, v15, v17, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: 1 <= v17
f_144(v1, v3, v5, v7, v9, v11, v13, v15, v17, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_146(v1, v3, v5, v7, v9, v11, v13, v15, v17, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: v17 < 1
f_145(v1, v3, v5, v7, v9, v11, v13, v15, v17, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_147(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_146(v1, v3, v5, v7, v9, v11, v13, v15, v17, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_148(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_147(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_149(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_148(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_150(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_149(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_151(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_150(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_152(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_151(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_153(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_153(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_154(v1, v3, v5, v7, v9, v15, v13, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: v11 = v15
f_153(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_155(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: v11 != v15
f_154(v1, v3, v5, v7, v9, v15, v13, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_156(v1, v3, v5, v7, v9, v15, v13, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_155(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_157(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, 0, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_156(v1, v3, v5, v7, v9, v15, v13, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_158(v1, v3, v5, v7, v9, v15, v13, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_157(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, 0, v2, v4, v6, v8, v10, 3, 4) -> f_159(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, 0, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_158(v1, v3, v5, v7, v9, v15, v13, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_160(v1, v3, v5, v7, v9, v15, v13, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_159(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, 0, v2, v4, v6, v8, v10, 3, 4) -> f_161(v1, v3, v5, v7, v9, v11, v13, v15, v17, 1, 0, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_160(v1, v3, v5, v7, v9, v15, v13, v17, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_162(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_162(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v2, v4, v6, v8, v10, 0, 3, 4) -> f_163(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_163(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v2, v4, v6, v8, v10, 0, 3, 4) -> f_164(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v2, v4, v6, v8, v10, 0, 10, 3, 4) :|: TRUE
f_164(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v2, v4, v6, v8, v10, 0, 10, 3, 4) -> f_165(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v2, v4, v6, v8, v10, 0, 10, 3, 4) :|: 0 = 0
f_165(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v2, v4, v6, v8, v10, 0, 10, 3, 4) -> f_166(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v28, v2, v4, v6, v8, v10, 0, 10, 3, 4) :|: v28 = 1 + v15
f_166(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v28, v2, v4, v6, v8, v10, 0, 10, 3, 4) -> f_167(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v28, v2, v4, v6, v8, v10, 0, 10, 3, 4) :|: 0 = 0
f_167(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v28, v2, v4, v6, v8, v10, 0, 10, 3, 4) -> f_168(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v28, v29, v2, v4, v6, v8, v10, 0, 10, 3, 4) :|: v29 = v28 + v26
f_168(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v28, v29, v2, v4, v6, v8, v10, 0, 10, 3, 4) -> f_169(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v28, v29, v2, v4, v6, v8, v10, 0, 10, 3, 4) :|: TRUE
f_169(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v28, v29, v2, v4, v6, v8, v10, 0, 10, 3, 4) -> f_170(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v28, v29, v2, v4, v6, v8, v10, 0, 10, 3, 4) :|: 0 = 0
f_170(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v28, v29, v2, v4, v6, v8, v10, 0, 10, 3, 4) -> f_171(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v28, v29, v2, v4, v6, v8, v10, 0, 10, 3, 4) :|: TRUE
f_171(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v28, v29, v2, v4, v6, v8, v10, 0, 10, 3, 4) -> f_172(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v28, v29, v2, v4, v6, v8, v10, 0, 10, 3, 4) :|: TRUE
f_172(v1, v3, v5, v7, v9, v15, v13, v17, 1, v26, v28, v29, v2, v4, v6, v8, v10, 0, 10, 3, 4) -> f_199(v1, v3, v5, v7, v9, v15, v13, v13, v15, v17, 1, v26, v28, v29, v2, v4, v6, v8, v10, 0, 10, 3, 4) :|: TRUE
f_199(v103, v104, v105, v106, v107, v108, v109, v110, v111, v112, 1, v114, v115, v116, v117, v118, v119, v120, v121, 0, 10, 3, 4) -> f_200(v103, v104, v105, v106, v107, v108, v109, 10, v111, v112, 1, v114, v115, v116, v117, v118, v119, v120, v121, 0, 3, 4) :|: 0 = 0
f_200(v103, v104, v105, v106, v107, v108, v109, 10, v111, v112, 1, v114, v115, v116, v117, v118, v119, v120, v121, 0, 3, 4) -> f_201(v103, v104, v105, v106, v107, v108, v109, 10, v116, v112, 1, v111, v114, v115, v117, v118, v119, v120, v121, 0, 3, 4) :|: 0 = 0
f_201(v103, v104, v105, v106, v107, v108, v109, 10, v116, v112, 1, v111, v114, v115, v117, v118, v119, v120, v121, 0, 3, 4) -> f_202(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v111, v114, v115, v117, v118, v119, v120, v121, 0, 3, 4) :|: v124 + v116 = 10
f_202(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v111, v114, v115, v117, v118, v119, v120, v121, 0, 3, 4) -> f_203(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v111, v114, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: 1 <= v124 && v116 <= 9
f_202(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v111, v114, v115, v117, v118, v119, v120, v121, 0, 3, 4) -> f_204(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v111, v114, v115, v117, v118, v119, v120, v121, 0, 3, 4) :|: v124 < 1 && 10 <= v116
f_203(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v111, v114, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_205(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v111, v114, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: 0 = 0
f_204(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v111, v114, v115, v117, v118, v119, v120, v121, 0, 3, 4) -> f_206(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 0, v111, 1, v114, v115, v117, v118, v119, v120, v121, 3, 4) :|: 0 = 0
f_205(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v111, v114, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_207(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v111, v114, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: TRUE
f_206(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 0, v111, 1, v114, v115, v117, v118, v119, v120, v121, 3, 4) -> f_208(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 0, v111, 1, v114, v115, v117, v118, v119, v120, v121, 3, 4) :|: 0 = 0
f_207(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v111, v114, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_209(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v111, v114, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: 0 = 0
f_208(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 0, v111, 1, v114, v115, v117, v118, v119, v120, v121, 3, 4) -> f_210(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 0, v111, 1, v114, v115, v117, v118, v119, v120, v121, 3, 4) :|: TRUE
f_209(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v111, v114, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_211(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v114, v111, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: 0 = 0
f_211(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v114, v111, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_212(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v114, v111, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: 0 = 0
f_212(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v114, v111, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_213(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v114, v111, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: 0 = 0
f_213(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v114, v111, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_214(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v114, v111, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: TRUE
f_214(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v114, v111, v115, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_215(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v111, v115, v114, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: TRUE
f_215(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v111, v115, v114, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_216(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v111, v115, v114, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: TRUE
f_216(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v111, v115, v114, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_217(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v111, v115, v114, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: TRUE
f_217(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v111, v115, v114, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_218(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v115, v114, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: 0 = 0
f_218(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v115, v114, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_219(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v178, v114, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: v178 = 1 + v116 && v178 <= 10
f_219(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v178, v114, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_220(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v178, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: 0 = 0
f_220(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v178, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_221(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v178, v179, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: v179 = v178 + v176
f_221(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v178, v179, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_222(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v178, v179, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: TRUE
f_222(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v178, v179, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_223(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v178, v179, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: 0 = 0
f_223(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v178, v179, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_224(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v178, v179, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: TRUE
f_224(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v178, v179, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_225(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v178, v179, v117, v118, v119, v120, v121, 0, 3, 9, 4) :|: TRUE
f_225(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v178, v179, v117, v118, v119, v120, v121, 0, 3, 9, 4) -> f_199(v103, v104, v105, v106, v107, v108, v109, 10, v116, v124, 1, v176, v178, v179, v117, v118, v119, v120, v121, 0, 10, 3, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_202(v103:0, v104:0, v105:0, v106:0, v107:0, v108:0, v109:0, 10, v116:0, v124:0, 1, v111:0, v114:0, v115:0, v117:0, v118:0, v119:0, v120:0, v121:0, 0, 3, 4) -> f_210(v103:0, v104:0, v105:0, v106:0, v107:0, v108:0, v109:0, 10, v116:0, v124:0, 0, v111:0, 1, v114:0, v115:0, v117:0, v118:0, v119:0, v120:0, v121:0, 3, 4) :|: v124:0 < 1 && v116:0 > 9
f_202(v103:0, v104:0, v105:0, v106:0, v107:0, v108:0, v109:0, 10, v116:0, v124:0, 1, v111:0, v114:0, v115:0, v117:0, v118:0, v119:0, v120:0, v121:0, 0, 3, 4) -> f_202(v103:0, v104:0, v105:0, v106:0, v107:0, v108:0, v109:0, 10, 1 + v116:0 + v176:0, v124:1, 1, v116:0, v176:0, 1 + v116:0, v117:0, v118:0, v119:0, v120:0, v121:0, 0, 3, 4) :|: v116:0 < 10 && v124:0 > 0 && v124:1 + (1 + v116:0 + v176:0) = 10
f_124 -> f_161(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v17:0 + v15:0, v15:0, v17:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v15:0 > v11:0 && v17:0 > 0
f_124 -> f_161(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v17:0 + v15:0, v15:0, v17:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v15:0 < v11:0 && v17:0 > 0
f_124 -> f_152(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v17:0 + v15:0, v15:0, v17:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v17:0 < 1
f_124 -> f_202(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v17:0 + v11:0, 10, 1 + v11:0 + v26:0, v124:0, 1, v11:0, v26:0, 1 + v11:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v124:0 + (1 + v11:0 + v26:0) = 10 && v17:0 > 0
Filtered unneeded arguments:
   f_202(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_202(x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 6 rules.P rules:
f_202(v116:0, v124:0) -> f_210(v103:0, v104:0, v105:0, v106:0, v107:0, v108:0, v109:0, 10, v116:0, v124:0, 0, v111:0, 1, v114:0, v115:0, v117:0, v118:0, v119:0, v120:0, v121:0, 3, 4) :|: v124:0 < 1 && v116:0 > 9
f_202(v116:0, v124:0) -> f_202(1 + v116:0 + v176:0, v124:1) :|: v124:0 > 0 && v124:1 + (1 + v116:0 + v176:0) = 10 && v116:0 < 10
f_124 -> f_161(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v17:0 + v15:0, v15:0, v17:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v17:0 > 0 && v15:0 > v11:0
f_124 -> f_161(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v17:0 + v15:0, v15:0, v17:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v17:0 > 0 && v15:0 < v11:0
f_124 -> f_152(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v17:0 + v15:0, v15:0, v17:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v7:0 > 0 && v17:0 < 1 && v9:0 > 0
f_124 -> f_202(1 + v11:0 + v26:0, v124:0) :|: v124:0 + (1 + v11:0 + v26:0) = 10

----------------------------------------

(6)
Obligation:
Rules:
f_202(v116:0, v124:0) -> f_210(v103:0, v104:0, v105:0, v106:0, v107:0, v108:0, v109:0, 10, v116:0, v124:0, 0, v111:0, 1, v114:0, v115:0, v117:0, v118:0, v119:0, v120:0, v121:0, 3, 4) :|: v124:0 < 1 && v116:0 > 9
f_202(x, x1) -> f_202(1 + x + x2, x3) :|: x1 > 0 && x3 + (1 + x + x2) = 10 && x < 10
f_124 -> f_161(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v17:0 + v15:0, v15:0, v17:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v17:0 > 0 && v15:0 > v11:0
f_124 -> f_161(x4, x5, x6, x7, x8, x9, x10 + x11, x11, x10, 1, 0, 3 + x4, 3 + x5, 3 + x6, 3 + x7, 3 + x8, 3, 4) :|: x4 > 0 && x5 > 0 && x6 > 0 && x7 > 0 && x8 > 0 && x10 > 0 && x11 < x9
f_124 -> f_152(x12, x13, x14, x15, x16, x17, x18 + x19, x19, x18, 0, 3 + x12, 3 + x13, 3 + x14, 3 + x15, 3 + x16, 3, 1, 4) :|: x12 > 0 && x13 > 0 && x14 > 0 && x15 > 0 && x18 < 1 && x16 > 0
f_124 -> f_202(1 + x20 + x21, x22) :|: x22 + (1 + x20 + x21) = 10
Start term: f_124

----------------------------------------

(7) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination can continue
----------------------------------------

(8)
Obligation:
Rules:
f_202(v116:0, v124:0) -> f_210(v103:0, v104:0, v105:0, v106:0, v107:0, v108:0, v109:0, 10, v116:0, v124:0, 0, v111:0, 1, v114:0, v115:0, v117:0, v118:0, v119:0, v120:0, v121:0, 3, 4) :|: v124:0 < 1 && v116:0 > 9
f_202(x, x1) -> f_202(1 + x + x2, x3) :|: x1 > 0 && x3 + (1 + x + x2) = 10 && x < 10
f_124 -> f_161(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v17:0 + v15:0, v15:0, v17:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v17:0 > 0 && v15:0 > v11:0
f_124 -> f_161(x4, x5, x6, x7, x8, x9, x10 + x11, x11, x10, 1, 0, 3 + x4, 3 + x5, 3 + x6, 3 + x7, 3 + x8, 3, 4) :|: x4 > 0 && x5 > 0 && x6 > 0 && x7 > 0 && x8 > 0 && x10 > 0 && x11 < x9
f_124 -> f_152(x12, x13, x14, x15, x16, x17, x18 + x19, x19, x18, 0, 3 + x12, 3 + x13, 3 + x14, 3 + x15, 3 + x16, 3, 1, 4) :|: x12 > 0 && x13 > 0 && x14 > 0 && x15 > 0 && x18 < 1 && x16 > 0
f_124 -> f_202(1 + x20 + x21, x22) :|: x22 + (1 + x20 + x21) = 10
Start term: f_124

----------------------------------------

(9) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(10)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_124))
(VAR x160 x162 x161 x46 x164 x47 x163 x48 x166 x49 x165 x42 x168 x43 x167 x44 x45 x169 x40 x41 x39 x151 x150 x35 x153 x36 x152 x37 x155 x38 x154 x31 x157 x32 x156 x33 x159 x34 x158 x30 x70 x140 x68 x142 x69 x141 x144 x143 x64 x146 x65 x145 x66 x148 x67 x147 x60 x61 x149 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x131 x58 x130 x59 x133 x132 x53 x135 x54 x134 x55 x137 x56 x136 x139 x50 x138 x51 x52 x90 x91 x92 x86 x87 x88 x89 x82 x83 x84 x85 x80 x81 x79 x75 x76 x'' x77 x78 x71 x72 x73 x74 k14 k15 k16 k17 k10 k11 k12 k13 x171 x170 x173 x172 x175 x174 x177 x176 x97 x98 x99 x93 x94 x95 x96 k36 k37 k38 k39 k32 k33 k34 k35 k30 k31 k29 k25 k26 k27 k28 k21 k22 k23 k24 k20 k18 k19 k47 k43 k44 k45 k46 k40 k41 k42 x120 x122 x121 x124 x123 x126 x125 x x128 x127 x129 x111 x110 x113 x112 x115 x114 x117 x116 x119 x118 x109 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x7 x27 x20 x102 x21 x101 x22 x104 x23 x103 x106 x1 x105 x108 x107 x' x17 x18 x19 x13 x14 x15 x16 x10 x11 x12)
(RULES
  f_124(x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x130, x131) -> f_202(1 + k15 + k17, k19, x132, x133, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x150, x151) :|: k19 + (1 + k15 + k17) = 10
  f_124(x152, x153, x154, x155, x156, x157, x158, x159, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x170, x171, x172, x173) -> f_161(k28, k3, k7, k9, k12, k26, k1 + k27, k27, k1, 1, 0, 3 + k28, 3 + k3, 3 + k7, 3 + k9, 3 + k12, 3, 4, x174, x175, x176, x177) :|: k28 > 0 && k3 > 0 && k7 > 0 && k9 > 0 && k12 > 0 && k1 > 0 && k27 > k26
  f_202(k20, k0, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82, x83) -> f_210(k45, k44, k42, k40, k38, k37, k35, 10, k20, k0, 0, k25, 1, k23, k21, k18, k16, k14, k46, k47, 3, 4) :|: k0 < 1 && k20 > 9
  f_202(k22, k24, x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_202(1 + k22 + k5, k6, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37) :|: k24 > 0 && k6 + (1 + k22 + k5) = 10 && k22 < 10
  f_124(x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59) -> f_161(k2, k4, k11, k13, k8, k10, k39 + k41, k41, k39, 1, 0, 3 + k2, 3 + k4, 3 + k11, 3 + k13, 3 + k8, 3, 4, x60, x61, x62, x63) :|: k2 > 0 && k4 > 0 && k11 > 0 && k13 > 0 && k8 > 0 && k39 > 0 && k41 < k10
  f_124(x84, x85, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99, x100, x101, x102, x103, x104, x105) -> f_152(k43, k32, k33, k34, k36, k29, k30 + k31, k31, k30, 0, 3 + k43, 3 + k32, 3 + k33, 3 + k34, 3 + k36, 3, 1, 4, x106, x107, x108, x109) :|: k43 > 0 && k32 > 0 && k33 > 0 && k34 > 0 && k30 < 1 && k36 > 0
)

----------------------------------------

(11) LoAT (COMPLETE)
LoAT was called with the following command:

/aprove/bin/loat --plain --nonterm --proof-level 3 /tmp/aprove.InputModules.Programs.loat4834340051018285099.koat 

LoAT's output was:


### Pre-processing the ITS problem ###

Initial linear ITS problem
   Start location: f_124
      0: f_124 -> f_202 : k0'=free_22, k20'=1+free_17+free_8, x64'=free_18, x65'=free_2, x66'=free_9, x67'=free_15, x68'=free, x69'=free_12, x70'=free_20, x71'=free_4, x72'=free_19, x73'=free_3, x74'=free_10, x75'=free_16, x76'=free_1, x77'=free_7, x78'=free_14, x79'=free_21, x80'=free_6, x81'=free_13, x82'=free_5, x83'=free_11, [ 1+free_17+free_8+free_22==10 ], cost: 1
      1: f_124 -> f_161 : k0'=free_23, k1'=free_28, k10'=free_29, k11'=free_25, k12'=free_32, k13'=free_26, k14'=free_30+free_34, k15'=free_30, k16'=free_34, k17'=1, k18'=0, k19'=3+free_23, k2'=3+free_28, k20'=3+free_29, k21'=3+free_25, k22'=3+free_32, k23'=3, k24'=4, k25'=free_33, k26'=free_24, k27'=free_27, k28'=free_31, [ free_23>0 && free_28>0 && free_29>0 && free_25>0 && free_32>0 && free_34>0 && free_30>free_26 ], cost: 1
      4: f_124 -> f_161 : k0'=free_76, k1'=free_77, k10'=free_79, k11'=free_73, k12'=free_72, k13'=free_75, k14'=free_82+free_83, k15'=free_82, k16'=free_83, k17'=1, k18'=0, k19'=3+free_76, k2'=3+free_77, k20'=3+free_79, k21'=3+free_73, k22'=3+free_72, k23'=3, k24'=4, k25'=free_81, k26'=free_74, k27'=free_78, k28'=free_80, [ free_76>0 && free_77>0 && free_79>0 && free_73>0 && free_72>0 && free_83>0 && free_82<free_75 ], cost: 1
      5: f_124 -> f_152 : k0'=free_91, k1'=free_92, k10'=free_94, k11'=free_86, k12'=free_85, k13'=free_89, k14'=free_87+free_95, k15'=free_87, k16'=free_95, k17'=0, k18'=3+free_91, k19'=3+free_92, k2'=3+free_94, k20'=3+free_86, k21'=3+free_85, k22'=3, k23'=1, k24'=4, k25'=free_84, k26'=free_88, k27'=free_90, k28'=free_93, [ free_91>0 && free_92>0 && free_94>0 && free_86>0 && free_95<1 && free_85>0 ], cost: 1
      2: f_202 -> f_210 : k0'=free_37, k1'=free_48, k10'=free_38, k11'=free_43, k12'=free_45, k13'=free_39, k14'=free_46, k15'=10, k16'=k20, k17'=k0, k18'=0, k19'=free_36, k2'=1, k20'=free_42, k21'=free_49, k22'=free_44, k23'=free_35, k24'=free_40, k25'=free_41, k26'=free_47, k27'=3, k28'=4, [ k0<1 && k20>9 ], cost: 1
      3: f_202 -> f_202 : k0'=free_59, k20'=1+free_52+k20, x64'=free_53, x65'=free_60, x66'=free_50, x67'=free_57, x68'=free_65, x69'=free_71, x70'=free_56, x71'=free_64, x72'=free_70, x73'=free_54, x74'=free_62, x75'=free_68, x76'=free_61, x77'=free_67, x78'=free_51, x79'=free_58, x80'=free_66, x81'=free_55, x82'=free_63, x83'=free_69, [ k0>0 && 1+free_52+free_59+k20==10 && k20<10 ], cost: 1

Checking for constant complexity:
   The following rule is satisfiable with cost >= 1, yielding constant complexity:
      0: f_124 -> f_202 : k0'=free_22, k20'=1+free_17+free_8, x64'=free_18, x65'=free_2, x66'=free_9, x67'=free_15, x68'=free, x69'=free_12, x70'=free_20, x71'=free_4, x72'=free_19, x73'=free_3, x74'=free_10, x75'=free_16, x76'=free_1, x77'=free_7, x78'=free_14, x79'=free_21, x80'=free_6, x81'=free_13, x82'=free_5, x83'=free_11, [ 1+free_17+free_8+free_22==10 ], cost: 1

Removed unreachable and leaf rules:
   Start location: f_124
      0: f_124 -> f_202 : k0'=free_22, k20'=1+free_17+free_8, x64'=free_18, x65'=free_2, x66'=free_9, x67'=free_15, x68'=free, x69'=free_12, x70'=free_20, x71'=free_4, x72'=free_19, x73'=free_3, x74'=free_10, x75'=free_16, x76'=free_1, x77'=free_7, x78'=free_14, x79'=free_21, x80'=free_6, x81'=free_13, x82'=free_5, x83'=free_11, [ 1+free_17+free_8+free_22==10 ], cost: 1
      3: f_202 -> f_202 : k0'=free_59, k20'=1+free_52+k20, x64'=free_53, x65'=free_60, x66'=free_50, x67'=free_57, x68'=free_65, x69'=free_71, x70'=free_56, x71'=free_64, x72'=free_70, x73'=free_54, x74'=free_62, x75'=free_68, x76'=free_61, x77'=free_67, x78'=free_51, x79'=free_58, x80'=free_66, x81'=free_55, x82'=free_63, x83'=free_69, [ k0>0 && 1+free_52+free_59+k20==10 && k20<10 ], cost: 1

Simplified all rules, resulting in:
   Start location: f_124
      0: f_124 -> f_202 : k0'=free_22, k20'=10-free_22, x64'=free_18, x65'=free_2, x66'=free_9, x67'=free_15, x68'=free, x69'=free_12, x70'=free_20, x71'=free_4, x72'=free_19, x73'=free_3, x74'=free_10, x75'=free_16, x76'=free_1, x77'=free_7, x78'=free_14, x79'=free_21, x80'=free_6, x81'=free_13, x82'=free_5, x83'=free_11, [], cost: 1
      3: f_202 -> f_202 : k0'=free_59, k20'=10-free_59, x64'=free_53, x65'=free_60, x66'=free_50, x67'=free_57, x68'=free_65, x69'=free_71, x70'=free_56, x71'=free_64, x72'=free_70, x73'=free_54, x74'=free_62, x75'=free_68, x76'=free_61, x77'=free_67, x78'=free_51, x79'=free_58, x80'=free_66, x81'=free_55, x82'=free_63, x83'=free_69, [ k0>0 && k20<10 ], cost: 1

### Simplification by acceleration and chaining ###

Accelerating simple loops of location 1.
   Accelerating the following rules:
      3: f_202 -> f_202 : k0'=free_59, k20'=10-free_59, x64'=free_53, x65'=free_60, x66'=free_50, x67'=free_57, x68'=free_65, x69'=free_71, x70'=free_56, x71'=free_64, x72'=free_70, x73'=free_54, x74'=free_62, x75'=free_68, x76'=free_61, x77'=free_67, x78'=free_51, x79'=free_58, x80'=free_66, x81'=free_55, x82'=free_63, x83'=free_69, [ k0>0 && k20<10 ], cost: 1

[0;36m[test] deduced pseudo-invariant 6-3*free_59<=0, also trying -6+3*free_59<=-1[0m
[0;36m[test] deduced pseudo-invariant -14+7*free_59<=0, also trying 14-7*free_59<=-1[0m
   Accelerated rule 3 with non-termination, yielding the new rule 6.
   Accelerated rule 3 with non-termination, yielding the new rule 7.
   Accelerated rule 3 with backward acceleration, yielding the new rule 8.
   Accelerated rule 3 with non-termination, yielding the new rule 9.
   Accelerated rule 3 with non-termination, yielding the new rule 10.
   Accelerated rule 3 with backward acceleration, yielding the new rule 11.
   Also removing duplicate rules: 7 10.

Accelerated all simple loops using metering functions (where possible):
   Start location: f_124
      0: f_124 -> f_202 : k0'=free_22, k20'=10-free_22, x64'=free_18, x65'=free_2, x66'=free_9, x67'=free_15, x68'=free, x69'=free_12, x70'=free_20, x71'=free_4, x72'=free_19, x73'=free_3, x74'=free_10, x75'=free_16, x76'=free_1, x77'=free_7, x78'=free_14, x79'=free_21, x80'=free_6, x81'=free_13, x82'=free_5, x83'=free_11, [], cost: 1
      3: f_202 -> f_202 : k0'=free_59, k20'=10-free_59, x64'=free_53, x65'=free_60, x66'=free_50, x67'=free_57, x68'=free_65, x69'=free_71, x70'=free_56, x71'=free_64, x72'=free_70, x73'=free_54, x74'=free_62, x75'=free_68, x76'=free_61, x77'=free_67, x78'=free_51, x79'=free_58, x80'=free_66, x81'=free_55, x82'=free_63, x83'=free_69, [ k0>0 && k20<10 ], cost: 1
      6: f_202 -> [5] : [ k0>0 && k20<10 && free_59>0 ], cost: NONTERM
      8: f_202 -> [5] : [ k0>0 && k20<10 && 6-3*free_59<=0 && -14+7*free_59<=0 ], cost: NONTERM
      9: f_202 -> [5] : [ k0>0 && k20<10 && -6+3*free_59<=-1 && free_59>0 ], cost: NONTERM
     11: f_202 -> [5] : [ k0>0 && k20<10 && 14-7*free_59<=-1 ], cost: NONTERM

Chaining 5 accelerated rules with incoming rules:
   Chained incoming rule 0 with accelerated rule 3 to new rule 12.
   Removing accelerated rule 3.
   Chained incoming rule 0 with accelerated rule 6 to new rule 13.
   Removing accelerated rule 6.
   Chained incoming rule 0 with accelerated rule 8 to new rule 14.
   Removing accelerated rule 8.
   Chained incoming rule 0 with accelerated rule 9 to new rule 15.
   Removing accelerated rule 9.
   Chained incoming rule 0 with accelerated rule 11 to new rule 16.
   Removing accelerated rule 11.

Chained accelerated rules (with incoming rules):
   Start location: f_124
      0: f_124 -> f_202 : k0'=free_22, k20'=10-free_22, x64'=free_18, x65'=free_2, x66'=free_9, x67'=free_15, x68'=free, x69'=free_12, x70'=free_20, x71'=free_4, x72'=free_19, x73'=free_3, x74'=free_10, x75'=free_16, x76'=free_1, x77'=free_7, x78'=free_14, x79'=free_21, x80'=free_6, x81'=free_13, x82'=free_5, x83'=free_11, [], cost: 1
     12: f_124 -> f_202 : k0'=free_59, k20'=10-free_59, x64'=free_53, x65'=free_60, x66'=free_50, x67'=free_57, x68'=free_65, x69'=free_71, x70'=free_56, x71'=free_64, x72'=free_70, x73'=free_54, x74'=free_62, x75'=free_68, x76'=free_61, x77'=free_67, x78'=free_51, x79'=free_58, x80'=free_66, x81'=free_55, x82'=free_63, x83'=free_69, [], cost: 2
     13: f_124 -> [5] : [], cost: NONTERM
     14: f_124 -> [5] : [ 6-3*free_59<=0 && -14+7*free_59<=0 ], cost: NONTERM
     15: f_124 -> [5] : [ -6+3*free_59<=-1 && free_59>0 ], cost: NONTERM
     16: f_124 -> [5] : [ 14-7*free_59<=-1 ], cost: NONTERM

Removed unreachable locations (and leaf rules with constant cost):
   Start location: f_124
     13: f_124 -> [5] : [], cost: NONTERM
     14: f_124 -> [5] : [ 6-3*free_59<=0 && -14+7*free_59<=0 ], cost: NONTERM
     15: f_124 -> [5] : [ -6+3*free_59<=-1 && free_59>0 ], cost: NONTERM
     16: f_124 -> [5] : [ 14-7*free_59<=-1 ], cost: NONTERM

### Computing asymptotic complexity ###

Fully simplified ITS problem
   Start location: f_124
     13: f_124 -> [5] : [], cost: NONTERM
     14: f_124 -> [5] : [ 6-3*free_59<=0 && -14+7*free_59<=0 ], cost: NONTERM
     15: f_124 -> [5] : [ -6+3*free_59<=-1 && free_59>0 ], cost: NONTERM
     16: f_124 -> [5] : [ 14-7*free_59<=-1 ], cost: NONTERM

Computing asymptotic complexity for rule 13
   Guard is satisfiable, yielding nontermination
   Resulting cost NONTERM has complexity: Nonterm

Found new complexity Nonterm.

Obtained the following overall complexity (w.r.t. the length of the input n):
   Complexity:  Nonterm
   Cpx degree:  Nonterm
   Solved cost: NONTERM
   Rule cost:   NONTERM
   Rule guard:  []

NO


The final guard is:


Z3 found a model for the final guard:
{}

Try to generate a witness via retracing LoAT's simplifications:
  AssertionError: null
No witness generated
----------------------------------------

(12)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
Truth value repropagation in proof tree changed value to NO
