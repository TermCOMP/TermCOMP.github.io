NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/JC5uC.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 116 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [EQUIVALENT, 19 ms]
(6) IntTRS
(7) IRSNoOverapproximation [EQUIVALENT, 0 ms]
(8) IntTRS
(9) IRSToKoat [EQUIVALENT, 0 ms]
(10) Koat Problem
(11) LoAT [COMPLETE, 413 ms]
(12) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/JC5uC.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/JC5uC.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 (...)* @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %3
		%8 = icmp sge %7 0
		br %8, %9, %13
	9:
		%10 = load %2
		%11 = load %3
		%12 = add i32 %11, %10
		store %12, %3
		br %6
	13:
		%14 = load %1
		ret %14


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 39 rulesP rules:
f_67 -> f_68(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_68(v1, v2, 3, 1, 4) -> f_69(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_69(v1, v3, v2, v4, 3, 1, 4) -> f_70(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_70(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_71(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_71(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_72(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_72(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_73(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_73(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_74(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_74(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_75(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_75(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_76(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_76(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) -> f_77(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_77(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) -> f_78(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_78(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) -> f_79(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) :|: 0 = 0
f_79(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) -> f_80(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) :|: 0 <= v9
f_79(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) -> f_81(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) :|: v9 < 0
f_80(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) -> f_82(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) :|: 0 = 0
f_81(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) -> f_83(v1, v3, v5, v7, v9, 0, v2, v4, v6, 3, 1, 4) :|: 0 = 0
f_82(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) -> f_84(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) :|: TRUE
f_83(v1, v3, v5, v7, v9, 0, v2, v4, v6, 3, 1, 4) -> f_85(v1, v3, v5, v7, v9, 0, v2, v4, v6, 3, 1, 4) :|: TRUE
f_84(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) -> f_86(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) :|: 0 = 0
f_85(v1, v3, v5, v7, v9, 0, v2, v4, v6, 3, 1, 4) -> f_87(v1, v3, v5, v7, v9, 0, v2, v4, v6, 3, 1, 4) :|: 0 = 0
f_86(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) -> f_88(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) :|: 0 = 0
f_88(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) -> f_89(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 4) :|: v11 = v9 + v7
f_89(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 4) -> f_90(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 4) :|: TRUE
f_90(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 4) -> f_91(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 4) :|: TRUE
f_91(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 4) -> f_105(v1, v3, v5, v7, v9, v9, 1, v11, v2, v4, v6, 0, 3, 4) :|: TRUE
f_105(v15, v16, v17, v18, v19, v20, 1, v22, v23, v24, v25, 0, 3, 4) -> f_106(v15, v16, v17, v18, v19, v22, 1, v20, v23, v24, v25, 0, 3, 4) :|: 0 = 0
f_106(v15, v16, v17, v18, v19, v22, 1, v20, v23, v24, v25, 0, 3, 4) -> f_107(v15, v16, v17, v18, v19, v22, 1, v20, v23, v24, v25, 0, 3, 4) :|: 0 <= v22
f_106(v15, v16, v17, v18, v19, v22, 1, v20, v23, v24, v25, 0, 3, 4) -> f_108(v15, v16, v17, v18, v19, v22, 1, v20, v23, v24, v25, 0, 3, 4) :|: v22 < 0 && 1 + v18 <= 0
f_107(v15, v16, v17, v18, v19, v22, 1, v20, v23, v24, v25, 0, 3, 4) -> f_109(v15, v16, v17, v18, v19, v22, 1, v20, v23, v24, v25, 0, 3, 4) :|: 0 = 0
f_108(v15, v16, v17, v18, v19, v22, 1, v20, v23, v24, v25, 0, 3, 4) -> f_110(v15, v16, v17, v18, v19, v22, 0, v20, v23, v24, v25, 3, 1, 4) :|: 0 = 0
f_109(v15, v16, v17, v18, v19, v22, 1, v20, v23, v24, v25, 0, 3, 4) -> f_111(v15, v16, v17, v18, v19, v22, 1, v20, v23, v24, v25, 0, 3, 4) :|: TRUE
f_110(v15, v16, v17, v18, v19, v22, 0, v20, v23, v24, v25, 3, 1, 4) -> f_112(v15, v16, v17, v18, v19, v22, 0, v20, v23, v24, v25, 3, 1, 4) :|: TRUE
f_111(v15, v16, v17, v18, v19, v22, 1, v20, v23, v24, v25, 0, 3, 4) -> f_113(v15, v16, v17, v18, v19, v22, 1, v20, v23, v24, v25, 0, 3, 4) :|: 0 = 0
f_112(v15, v16, v17, v18, v19, v22, 0, v20, v23, v24, v25, 3, 1, 4) -> f_114(v15, v16, v17, v18, v19, v22, 0, v20, v23, v24, v25, 3, 1, 4) :|: 0 = 0
f_113(v15, v16, v17, v18, v19, v22, 1, v20, v23, v24, v25, 0, 3, 4) -> f_115(v15, v16, v17, v18, v19, v22, 1, v23, v24, v25, 0, 3, 4) :|: 0 = 0
f_115(v15, v16, v17, v18, v19, v22, 1, v23, v24, v25, 0, 3, 4) -> f_116(v15, v16, v17, v18, v19, v22, 1, v27, v23, v24, v25, 0, 3, 4) :|: v27 = v22 + v18
f_116(v15, v16, v17, v18, v19, v22, 1, v27, v23, v24, v25, 0, 3, 4) -> f_117(v15, v16, v17, v18, v19, v22, 1, v27, v23, v24, v25, 0, 3, 4) :|: TRUE
f_117(v15, v16, v17, v18, v19, v22, 1, v27, v23, v24, v25, 0, 3, 4) -> f_118(v15, v16, v17, v18, v19, v22, 1, v27, v23, v24, v25, 0, 3, 4) :|: TRUE
f_118(v15, v16, v17, v18, v19, v22, 1, v27, v23, v24, v25, 0, 3, 4) -> f_105(v15, v16, v17, v18, v19, v22, 1, v27, v23, v24, v25, 0, 3, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_67 -> f_87(v1:0, v3:0, v5:0, v7:0, v9:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v9:0 < 0
f_106(v15:0, v16:0, v17:0, v18:0, v19:0, v22:0, 1, v20:0, v23:0, v24:0, v25:0, 0, 3, 4) -> f_114(v15:0, v16:0, v17:0, v18:0, v19:0, v22:0, 0, v20:0, v23:0, v24:0, v25:0, 3, 1, 4) :|: v22:0 < 0 && v18:0 < 0
f_67 -> f_106(v1:0, v3:0, v5:0, v7:0, v9:0, v9:0 + v7:0, 1, v9:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v9:0 > -1
f_106(v15:0, v16:0, v17:0, v18:0, v19:0, v22:0, 1, v20:0, v23:0, v24:0, v25:0, 0, 3, 4) -> f_106(v15:0, v16:0, v17:0, v18:0, v19:0, v22:0 + v18:0, 1, v22:0, v23:0, v24:0, v25:0, 0, 3, 4) :|: v22:0 > -1
Filtered unneeded arguments:
   f_106(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_106(x4, x6)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_67 -> f_87(v1:0, v3:0, v5:0, v7:0, v9:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0 && v9:0 < 0 && v5:0 > 0
f_106(v18:0, v22:0) -> f_114(v15:0, v16:0, v17:0, v18:0, v19:0, v22:0, 0, v20:0, v23:0, v24:0, v25:0, 3, 1, 4) :|: v22:0 < 0 && v18:0 < 0
f_67 -> f_106(v7:0, v9:0 + v7:0) :|: v9:0 > -1
f_106(v18:0, v22:0) -> f_106(v18:0, v22:0 + v18:0) :|: v22:0 > -1

----------------------------------------

(6)
Obligation:
Rules:
f_67 -> f_87(v1:0, v3:0, v5:0, v7:0, v9:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0 && v9:0 < 0 && v5:0 > 0
f_106(v18:0, v22:0) -> f_114(v15:0, v16:0, v17:0, v18:0, v19:0, v22:0, 0, v20:0, v23:0, v24:0, v25:0, 3, 1, 4) :|: v22:0 < 0 && v18:0 < 0
f_67 -> f_106(x, x1 + x) :|: x1 > -1
f_106(x2, x3) -> f_106(x2, x3 + x2) :|: x3 > -1
Start term: f_67

----------------------------------------

(7) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination can continue
----------------------------------------

(8)
Obligation:
Rules:
f_67 -> f_87(v1:0, v3:0, v5:0, v7:0, v9:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0 && v9:0 < 0 && v5:0 > 0
f_106(v18:0, v22:0) -> f_114(v15:0, v16:0, v17:0, v18:0, v19:0, v22:0, 0, v20:0, v23:0, v24:0, v25:0, 3, 1, 4) :|: v22:0 < 0 && v18:0 < 0
f_67 -> f_106(x, x1 + x) :|: x1 > -1
f_106(x2, x3) -> f_106(x2, x3 + x2) :|: x3 > -1
Start term: f_67

----------------------------------------

(9) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(10)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_67))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x40 x41 x39 x35 x36 x37 x38 x31 x32 x33 x34 k18 x30 x70 x68 x69 x64 x65 x66 x67 x60 x61 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x58 x59 x53 x54 x55 x56 x50 x51 x52 x x75 x'' x71 x72 x73 x74 k14 k15 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x7 x27 x20 x21 x22 x23 x1 x' x17 x18 x19 x13 x14 x15 x16 x10 x11 x12)
(RULES
  f_106(k12, k14, x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9) -> f_106(k12, k14 + k12, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) :|: k14 > -1
  f_67(x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47) -> f_106(k17, k18 + k17, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59) :|: k18 > -1
  f_106(k10, k1, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) -> f_114(k5, k7, k8, k10, k11, k1, 0, k0, k2, k3, k4, 3, 1, 4) :|: k1 < 0 && k10 < 0
  f_67(x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73) -> f_87(k6, k9, k13, k15, k16, 0, 3 + k6, 3 + k9, 3 + k13, 3, 1, 4, x74, x75) :|: k6 > 0 && k9 > 0 && k16 < 0 && k13 > 0
)

----------------------------------------

(11) LoAT (COMPLETE)
LoAT was called with the following command:

/aprove/bin/loat --plain --nonterm --proof-level 3 /tmp/aprove.InputModules.Programs.loat15545556396341305946.koat 

LoAT's output was:


### Pre-processing the ITS problem ###

Initial linear ITS problem
   Start location: f_67
      0: f_106 -> f_106 : k14'=k14+k12, x'=free_7, x_'=free_11, x__'=free_2, x1'=free_5, x2'=free_10, x3'=free_1, x4'=free_9, x5'=free, x6'=free_4, x7'=free_8, x8'=free_3, x9'=free_6, [ k14>-1 ], cost: 1
      2: f_106 -> f_114 : k0'=free_32, k1'=free_28, k10'=free_31, k11'=k12, k12'=free_27, k13'=k14, k14'=0, k15'=free_29, k16'=free_33, k17'=free_26, k18'=free_30, k2'=3, k3'=1, k4'=4, [ k14<0 && k12<0 ], cost: 1
      1: f_67 -> f_106 : k12'=free_17, k14'=free_17+free_22, x'=free_16, x_'=free_21, x__'=free_15, x1'=free_20, x2'=free_25, x3'=free_14, x4'=free_19, x5'=free_24, x6'=free_13, x7'=free_18, x8'=free_23, x9'=free_12, [ free_22>-1 ], cost: 1
      3: f_67 -> f_87 : k0'=free_37, k1'=free_36, k10'=free_35, k11'=free_39, k12'=free_34, k13'=0, k14'=3+free_37, k15'=3+free_36, k16'=3+free_35, k17'=3, k18'=1, k2'=4, k3'=free_38, k4'=free_40, [ free_37>0 && free_36>0 && free_34<0 && free_35>0 ], cost: 1

Checking for constant complexity:
   The following rule is satisfiable with cost >= 1, yielding constant complexity:
      1: f_67 -> f_106 : k12'=free_17, k14'=free_17+free_22, x'=free_16, x_'=free_21, x__'=free_15, x1'=free_20, x2'=free_25, x3'=free_14, x4'=free_19, x5'=free_24, x6'=free_13, x7'=free_18, x8'=free_23, x9'=free_12, [ free_22>-1 ], cost: 1

Removed unreachable and leaf rules:
   Start location: f_67
      0: f_106 -> f_106 : k14'=k14+k12, x'=free_7, x_'=free_11, x__'=free_2, x1'=free_5, x2'=free_10, x3'=free_1, x4'=free_9, x5'=free, x6'=free_4, x7'=free_8, x8'=free_3, x9'=free_6, [ k14>-1 ], cost: 1
      1: f_67 -> f_106 : k12'=free_17, k14'=free_17+free_22, x'=free_16, x_'=free_21, x__'=free_15, x1'=free_20, x2'=free_25, x3'=free_14, x4'=free_19, x5'=free_24, x6'=free_13, x7'=free_18, x8'=free_23, x9'=free_12, [ free_22>-1 ], cost: 1

### Simplification by acceleration and chaining ###

Accelerating simple loops of location 0.
   Accelerating the following rules:
      0: f_106 -> f_106 : k14'=k14+k12, x'=free_7, x_'=free_11, x__'=free_2, x1'=free_5, x2'=free_10, x3'=free_1, x4'=free_9, x5'=free, x6'=free_4, x7'=free_8, x8'=free_3, x9'=free_6, [ k14>-1 ], cost: 1

[0;36m[test] deduced pseudo-invariant -k12<=0, also trying k12<=-1[0m
   Accelerated rule 0 with non-termination, yielding the new rule 4.
   Accelerated rule 0 with non-termination, yielding the new rule 5.
   Accelerated rule 0 with backward acceleration, yielding the new rule 6.
   Accelerated rule 0 with backward acceleration, yielding the new rule 7.
   Also removing duplicate rules: 5.

Accelerated all simple loops using metering functions (where possible):
   Start location: f_67
      0: f_106 -> f_106 : k14'=k14+k12, x'=free_7, x_'=free_11, x__'=free_2, x1'=free_5, x2'=free_10, x3'=free_1, x4'=free_9, x5'=free, x6'=free_4, x7'=free_8, x8'=free_3, x9'=free_6, [ k14>-1 ], cost: 1
      4: f_106 -> [4] : [ k14>-1 && k14==k14+k12 ], cost: NONTERM
      6: f_106 -> [4] : [ k14>-1 && -k12<=0 ], cost: NONTERM
      7: f_106 -> f_106 : k14'=k*k12+k14, x'=free_7, x_'=free_11, x__'=free_2, x1'=free_5, x2'=free_10, x3'=free_1, x4'=free_9, x5'=free, x6'=free_4, x7'=free_8, x8'=free_3, x9'=free_6, [ k12<=-1 && k>=1 && k12*(-1+k)+k14>-1 ], cost: k
      1: f_67 -> f_106 : k12'=free_17, k14'=free_17+free_22, x'=free_16, x_'=free_21, x__'=free_15, x1'=free_20, x2'=free_25, x3'=free_14, x4'=free_19, x5'=free_24, x6'=free_13, x7'=free_18, x8'=free_23, x9'=free_12, [ free_22>-1 ], cost: 1

Chaining 4 accelerated rules with incoming rules:
   Chained incoming rule 1 with accelerated rule 0 to new rule 8.
   Removing accelerated rule 0.
   Chained incoming rule 1 with accelerated rule 4 to new rule 9.
   Removing accelerated rule 4.
   Chained incoming rule 1 with accelerated rule 6 to new rule 10.
   Removing accelerated rule 6.
   Chained incoming rule 1 with accelerated rule 7 to new rule 11.
   Removing accelerated rule 7.

Chained accelerated rules (with incoming rules):
   Start location: f_67
      1: f_67 -> f_106 : k12'=free_17, k14'=free_17+free_22, x'=free_16, x_'=free_21, x__'=free_15, x1'=free_20, x2'=free_25, x3'=free_14, x4'=free_19, x5'=free_24, x6'=free_13, x7'=free_18, x8'=free_23, x9'=free_12, [ free_22>-1 ], cost: 1
      8: f_67 -> f_106 : k12'=free_17, k14'=2*free_17+free_22, x'=free_7, x_'=free_11, x__'=free_2, x1'=free_5, x2'=free_10, x3'=free_1, x4'=free_9, x5'=free, x6'=free_4, x7'=free_8, x8'=free_3, x9'=free_6, [ free_22>-1 && free_17+free_22>-1 ], cost: 2
      9: f_67 -> [4] : [], cost: NONTERM
     10: f_67 -> [4] : [], cost: NONTERM
     11: f_67 -> f_106 : k12'=free_17, k14'=free_17+free_17*k+free_22, x'=free_7, x_'=free_11, x__'=free_2, x1'=free_5, x2'=free_10, x3'=free_1, x4'=free_9, x5'=free, x6'=free_4, x7'=free_8, x8'=free_3, x9'=free_6, [ free_22>-1 && free_17<=-1 && k>=1 && free_17+free_17*(-1+k)+free_22>-1 ], cost: 1+k

Removed unreachable locations (and leaf rules with constant cost):
   Start location: f_67
      9: f_67 -> [4] : [], cost: NONTERM
     10: f_67 -> [4] : [], cost: NONTERM
     11: f_67 -> f_106 : k12'=free_17, k14'=free_17+free_17*k+free_22, x'=free_7, x_'=free_11, x__'=free_2, x1'=free_5, x2'=free_10, x3'=free_1, x4'=free_9, x5'=free, x6'=free_4, x7'=free_8, x8'=free_3, x9'=free_6, [ free_22>-1 && free_17<=-1 && k>=1 && free_17+free_17*(-1+k)+free_22>-1 ], cost: 1+k

### Computing asymptotic complexity ###

Fully simplified ITS problem
   Start location: f_67
     10: f_67 -> [4] : [], cost: NONTERM
     11: f_67 -> f_106 : k12'=free_17, k14'=free_17+free_17*k+free_22, x'=free_7, x_'=free_11, x__'=free_2, x1'=free_5, x2'=free_10, x3'=free_1, x4'=free_9, x5'=free, x6'=free_4, x7'=free_8, x8'=free_3, x9'=free_6, [ free_22>-1 && free_17<=-1 && k>=1 && free_17+free_17*(-1+k)+free_22>-1 ], cost: 1+k

Computing asymptotic complexity for rule 10
   Guard is satisfiable, yielding nontermination
   Resulting cost NONTERM has complexity: Nonterm

Found new complexity Nonterm.

Obtained the following overall complexity (w.r.t. the length of the input n):
   Complexity:  Nonterm
   Cpx degree:  Nonterm
   Solved cost: NONTERM
   Rule cost:   NONTERM
   Rule guard:  []

NO


The final guard is:


Z3 found a model for the final guard:
{}

Try to generate a witness via retracing LoAT's simplifications:
  AssertionError: null
No witness generated
----------------------------------------

(12)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
Truth value repropagation in proof tree changed value to NO
