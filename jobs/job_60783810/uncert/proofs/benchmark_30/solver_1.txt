YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/MptcC.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2363 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 46 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/MptcC.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/MptcC.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca *i32, align 8
		%8 = alloca *i32, align 8
		%9 = alloca *i32, align 8
		%10 = alloca *i32, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%11 = alloca i8, numElementsLit: 4, align 16
		%12 = bitcast *i8 %11 to *i32
		store %12, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %8)
		%13 = alloca i8, numElementsLit: 4, align 16
		%14 = bitcast *i8 %13 to *i32
		store %14, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %9)
		%15 = alloca i8, numElementsLit: 4, align 16
		%16 = bitcast *i8 %15 to *i32
		store %16, %9
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %10)
		%17 = alloca i8, numElementsLit: 4, align 16
		%18 = bitcast *i8 %17 to *i32
		store %18, %10
		%19 = load %4
		%20 = load %7
		store %19, %20
		%21 = load %5
		%22 = load %8
		store %21, %22
		%23 = load %6
		%24 = load %9
		store %23, %24
		%25 = load %10
		store 0, %25
		br %26
	26:
		%27 = load %7
		%28 = load %27
		%29 = load %8
		%30 = load %29
		%31 = icmp eq %28 %30
		br %31, %32, %38
	32:
		%33 = load %7
		%34 = load %33
		%35 = load %9
		%36 = load %35
		%37 = icmp sgt %34 %36
		br %38
	38:
		%39 = phi [0, %26], [%37, %32]
		br %39, %40, %61
	40:
		br %41
	41:
		%42 = load %8
		%43 = load %42
		%44 = load %9
		%45 = load %44
		%46 = icmp sgt %43 %45
		br %46, %47, %60
	47:
		%48 = load %7
		%49 = load %48
		%50 = sub i32 %49, 1
		%51 = load %7
		store %50, %51
		%52 = load %8
		%53 = load %52
		%54 = sub i32 %53, 1
		%55 = load %8
		store %54, %55
		%56 = load %10
		%57 = load %56
		%58 = add i32 %57, 1
		%59 = load %10
		store %58, %59
		br %41
	60:
		br %26
	61:
		%62 = load %10
		%63 = load %62
		ret %63

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 85
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @test_fun(i32 %2, i32 %3, i32 %4)
		ret %5


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_624(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_625(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: 0 = 0
f_625(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_626(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: 0 = 0
f_626(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_627(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: 0 = 0
f_627(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_628(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: v499 < v513
f_628(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_630(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: 0 = 0
f_630(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_632(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: TRUE
f_632(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_634(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: 0 = 0
f_634(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_636(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: 0 = 0
f_636(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_638(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: 1 + v530 = v513
f_638(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_640(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: 0 = 0
f_640(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_642(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: TRUE
f_642(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_644(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: 0 = 0
f_644(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v512, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_646(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: 0 = 0
f_646(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_648(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: 1 + v530 = v513
f_648(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_650(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: 0 = 0
f_650(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_652(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: TRUE
f_652(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_654(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: 0 = 0
f_654(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_656(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: 0 = 0
f_656(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_658(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v515, v533, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8, 2) :|: v533 = 1 + v515 && 2 <= v533
f_658(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v515, v533, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8, 2) -> f_660(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v515, v533, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_660(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v515, v533, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8, 2) -> f_662(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v515, v533, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8, 2) :|: TRUE
f_662(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v515, v533, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8, 2) -> f_664(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v515, v533, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8, 2) :|: TRUE
f_664(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v515, v533, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8, 2) -> f_623(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v513, v530, v515, v533, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: TRUE
f_623(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) -> f_624(v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, 1, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_624(v498:0, v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v506:0, v507:0, v508:0, v509:0, v510:0, 1, v512:0, 1 + v530:0, v514:0, v515:0, v516:0, v517:0, v518:0, v519:0, v520:0, v521:0, v522:0, v523:0, v524:0, v525:0, v526:0, v527:0, v528:0, 0, 3, 7, 4, 8) -> f_624(v498:0, v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v506:0, v507:0, v508:0, v509:0, v510:0, 1, 1 + v530:0, v530:0, v515:0, 1 + v515:0, v516:0, v517:0, v518:0, v519:0, v520:0, v521:0, v522:0, v523:0, v524:0, v525:0, v526:0, v527:0, v528:0, 0, 3, 7, 4, 8) :|: v515:0 > 0 && v499:0 < 1 + v530:0
Filtered unneeded arguments:
   f_624(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36) -> f_624(x2, x16, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_624(v499:0, sum~cons_1~v530:0, v515:0) -> f_624(v499:0, v530:0, 1 + v515:0) :|: v515:0 > 0 && v499:0 < 1 + v530:0 && sum~cons_1~v530:0 = 1 + v530:0

----------------------------------------

(8)
Obligation:
Rules:
f_624(v499:0, sum~cons_1~v530:0, v515:0) -> f_624(v499:0, v530:0, 1 + v515:0) :|: v515:0 > 0 && v499:0 < 1 + v530:0 && sum~cons_1~v530:0 = 1 + v530:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_624(v499:0:0, sum~cons_1~v530:0:0, v515:0:0) -> f_624(v499:0:0, v530:0:0, 1 + v515:0:0) :|: v515:0:0 > 0 && v499:0:0 < 1 + v530:0:0 && sum~cons_1~v530:0:0 = 1 + v530:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_624 ] = -1*f_624_1 + f_624_2

The following rules are decreasing:
f_624(v499:0:0, sum~cons_1~v530:0:0, v515:0:0) -> f_624(v499:0:0, v530:0:0, 1 + v515:0:0) :|: v515:0:0 > 0 && v499:0:0 < 1 + v530:0:0 && sum~cons_1~v530:0:0 = 1 + v530:0:0

The following rules are bounded:
f_624(v499:0:0, sum~cons_1~v530:0:0, v515:0:0) -> f_624(v499:0:0, v530:0:0, 1 + v515:0:0) :|: v515:0:0 > 0 && v499:0:0 < 1 + v530:0:0 && sum~cons_1~v530:0:0 = 1 + v530:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
