YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/R29z0.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 885 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 44 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 5 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 41 ms]
        (16) IntTRS
        (17) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (18) YES
    (19) LLVM Symbolic Execution SCC
        (20) SCC2IRS [SOUND, 31 ms]
        (21) IntTRS
        (22) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (23) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/R29z0.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/R29z0.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		%9 = call i32 @__VERIFIER_nondet_int()
		store %9, %5
		br %10
	10:
		%11 = load %2
		%12 = load %3
		%13 = icmp slt %11 %12
		br %13, %14, %27
	14:
		%15 = load %5
		%16 = add i32 %15, 1
		store %16, %5
		%17 = load %4
		%18 = load %2
		%19 = icmp sgt %17 %18
		br %19, %20, %23
	20:
		%21 = load %2
		%22 = add i32 %21, 1
		store %22, %2
		br %26
	23:
		%24 = load %4
		%25 = add i32 %24, 1
		store %25, %4
		br %26
	26:
		br %10
	27:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 35 rulesP rules:
f_367(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v829, v830, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) -> f_368(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v829, v830, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) :|: 0 = 0
f_368(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v829, v830, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) -> f_369(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v829, v830, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) :|: 0 = 0
f_369(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v829, v830, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) -> f_370(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v829, v830, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) :|: 0 = 0
f_370(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v829, v830, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) -> f_371(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v829, v830, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) :|: TRUE
f_371(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v829, v830, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) -> f_372(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) :|: 0 = 0
f_372(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) -> f_373(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) :|: v928 = 1 + v830
f_373(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) -> f_374(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) :|: TRUE
f_374(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) -> f_375(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, 0, v832, v834, v835, v836, v837, v838, 3, 4) :|: 0 = 0
f_375(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, 0, v832, v834, v835, v836, v837, v838, 3, 4) -> f_376(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, 0, v832, v834, v835, v836, v837, v838, 3, 4) :|: 0 = 0
f_376(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, 0, v832, v834, v835, v836, v837, v838, 3, 4) -> f_377(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, v832, v834, v835, v836, v837, v838, 0, 3, 4) :|: 0 = 0
f_377(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, v832, v834, v835, v836, v837, v838, 0, 3, 4) -> f_378(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, v832, v834, v835, v836, v837, v838, 0, 3, 4) :|: TRUE
f_378(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, v832, v834, v835, v836, v837, v838, 0, 3, 4) -> f_379(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, v834, v835, v836, v837, v838, 0, 3, 4) :|: 0 = 0
f_379(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, v834, v835, v836, v837, v838, 0, 3, 4) -> f_380(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, v834, v835, v836, v837, v838, 0, 3, 4) :|: v833 = 1 + v827
f_380(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, v834, v835, v836, v837, v838, 0, 3, 4) -> f_381(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, v834, v835, v836, v837, v838, 0, 3, 4) :|: TRUE
f_381(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, v834, v835, v836, v837, v838, 0, 3, 4) -> f_382(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, v834, v835, v836, v837, v838, 0, 3, 4) :|: TRUE
f_382(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, v834, v835, v836, v837, v838, 0, 3, 4) -> f_383(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v830, v928, v833, v834, v835, v836, v837, v838, 0, 3, 4) :|: TRUE
f_383(v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, 1, v985, v986, v987, v988, v989, v990, v991, v992, 0, 3, 4) -> f_384(v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, 1, v985, v986, v987, v988, v989, v990, v991, v992, 0, 3, 4) :|: TRUE
f_384(v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, 1, v985, v986, v987, v988, v989, v990, v991, v992, 0, 3, 4) -> f_385(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v985, v986, v983, v988, v989, v990, v991, v992, 0, 3, 4) :|: 0 = 0
f_385(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v985, v986, v983, v988, v989, v990, v991, v992, 0, 3, 4) -> f_386(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v985, v986, v983, v988, v989, v990, v991, v992, 0, 3, 4) :|: 0 = 0
f_386(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v985, v986, v983, v988, v989, v990, v991, v992, 0, 3, 4) -> f_387(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v985, v986, v983, v988, v989, v990, v991, v992, 0, 3, 4) :|: v987 < v980
f_387(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v985, v986, v983, v988, v989, v990, v991, v992, 0, 3, 4) -> f_389(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v985, v986, v983, v988, v989, v990, v991, v992, 0, 3, 4) :|: 0 = 0
f_389(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v985, v986, v983, v988, v989, v990, v991, v992, 0, 3, 4) -> f_391(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v985, v986, v983, v988, v989, v990, v991, v992, 0, 3, 4) :|: TRUE
f_391(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v985, v986, v983, v988, v989, v990, v991, v992, 0, 3, 4) -> f_393(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v983, v988, v989, v990, v991, v992, 0, 3, 4) :|: 0 = 0
f_393(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v983, v988, v989, v990, v991, v992, 0, 3, 4) -> f_394(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, v983, v988, v989, v990, v991, v992, 0, 3, 4) :|: v1123 = 1 + v986
f_394(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, v983, v988, v989, v990, v991, v992, 0, 3, 4) -> f_395(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, v983, v988, v989, v990, v991, v992, 0, 3, 4) :|: TRUE
f_395(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, v983, v988, v989, v990, v991, v992, 0, 3, 4) -> f_396(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, v983, v988, v989, v990, v991, v992, 0, 3, 4) :|: 0 = 0
f_396(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, v983, v988, v989, v990, v991, v992, 0, 3, 4) -> f_397(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, v983, v988, v989, v990, v991, v992, 0, 3, 4) :|: 0 = 0
f_397(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, v983, v988, v989, v990, v991, v992, 0, 3, 4) -> f_398(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, 0, v983, v988, v989, v990, v991, v992, 3, 4) :|: 0 = 0
f_398(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, 0, v983, v988, v989, v990, v991, v992, 3, 4) -> f_399(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, 0, v983, v988, v989, v990, v991, v992, 3, 4) :|: TRUE
f_399(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, 0, v983, v988, v989, v990, v991, v992, 3, 4) -> f_400(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, 0, v983, v988, v989, v990, v991, v992, 3, 4) :|: 0 = 0
f_400(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, 0, v983, v988, v989, v990, v991, v992, 3, 4) -> f_401(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, 0, v1145, v983, v988, v989, v990, v991, v992, 3, 4) :|: v1145 = 1 + v987
f_401(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, 0, v1145, v983, v988, v989, v990, v991, v992, 3, 4) -> f_402(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, 0, v1145, v983, v988, v989, v990, v991, v992, 3, 4) :|: TRUE
f_402(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, 0, v1145, v983, v988, v989, v990, v991, v992, 3, 4) -> f_403(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, 0, v1145, v983, v988, v989, v990, v991, v992, 3, 4) :|: TRUE
f_403(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, 0, v1145, v983, v988, v989, v990, v991, v992, 3, 4) -> f_366(v974, v975, v976, v977, v978, v979, v980, v981, v982, v987, 1, v986, v1123, 0, v983, v1145, v988, v989, v990, v991, v992, 3, 4) :|: TRUE
f_366(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v829, v830, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) -> f_367(v818, v819, v820, v821, v822, v823, v824, v825, v826, v827, 1, v829, v830, 0, v832, v833, v834, v835, v836, v837, v838, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_367(v818:0, v819:0, v820:0, v821:0, v822:0, v823:0, v824:0, v825:0, v826:0, v827:0, 1, v829:0, v830:0, 0, v832:0, 1 + v827:0, v834:0, v835:0, v836:0, v837:0, v838:0, 3, 4) -> f_367(v818:0, v819:0, v820:0, v821:0, v822:0, v823:0, v824:0, v825:0, v826:0, 1 + v827:0, 1, 1 + v830:0, 1 + (1 + v830:0), 0, v827:0, 1 + (1 + v827:0), v834:0, v835:0, v836:0, v837:0, v838:0, 3, 4) :|: v824:0 > 1 + v827:0
Filtered unneeded arguments:
   f_367(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_367(x7, x10, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_367(v824:0, v827:0, sum~cons_1~v827:0) -> f_367(v824:0, 1 + v827:0, 1 + (1 + v827:0)) :|: v824:0 > 1 + v827:0 && sum~cons_1~v827:0 = 1 + v827:0

----------------------------------------

(9)
Obligation:
Rules:
f_367(v824:0, v827:0, sum~cons_1~v827:0) -> f_367(v824:0, 1 + v827:0, 1 + (1 + v827:0)) :|: v824:0 > 1 + v827:0 && sum~cons_1~v827:0 = 1 + v827:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_367(v824:0:0, v827:0:0, sum~cons_1~v827:0:0) -> f_367(v824:0:0, 1 + v827:0:0, 1 + (1 + v827:0:0)) :|: v824:0:0 > 1 + v827:0:0 && sum~cons_1~v827:0:0 = 1 + v827:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_367 ] = f_367_1 + -1*f_367_2

The following rules are decreasing:
f_367(v824:0:0, v827:0:0, sum~cons_1~v827:0:0) -> f_367(v824:0:0, 1 + v827:0:0, 1 + (1 + v827:0:0)) :|: v824:0:0 > 1 + v827:0:0 && sum~cons_1~v827:0:0 = 1 + v827:0:0

The following rules are bounded:
f_367(v824:0:0, v827:0:0, sum~cons_1~v827:0:0) -> f_367(v824:0:0, 1 + v827:0:0, 1 + (1 + v827:0:0)) :|: v824:0:0 > 1 + v827:0:0 && sum~cons_1~v827:0:0 = 1 + v827:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_283(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v344, v345, v342, v347, v348, v349, v350, v351, 0, 3, 4) -> f_285(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v344, v345, v342, v347, v348, v349, v350, v351, 0, 3, 4) :|: 0 = 0
f_285(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v344, v345, v342, v347, v348, v349, v350, v351, 0, 3, 4) -> f_287(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v344, v345, v342, v347, v348, v349, v350, v351, 0, 3, 4) :|: v346 < v339
f_287(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v344, v345, v342, v347, v348, v349, v350, v351, 0, 3, 4) -> f_290(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v344, v345, v342, v347, v348, v349, v350, v351, 0, 3, 4) :|: 0 = 0
f_290(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v344, v345, v342, v347, v348, v349, v350, v351, 0, 3, 4) -> f_293(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v344, v345, v342, v347, v348, v349, v350, v351, 0, 3, 4) :|: TRUE
f_293(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v344, v345, v342, v347, v348, v349, v350, v351, 0, 3, 4) -> f_296(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v342, v347, v348, v349, v350, v351, 0, 3, 4) :|: 0 = 0
f_296(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v342, v347, v348, v349, v350, v351, 0, 3, 4) -> f_298(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v342, v347, v348, v349, v350, v351, 0, 3, 4) :|: v379 = 1 + v345
f_298(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v342, v347, v348, v349, v350, v351, 0, 3, 4) -> f_300(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v342, v347, v348, v349, v350, v351, 0, 3, 4) :|: TRUE
f_300(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v342, v347, v348, v349, v350, v351, 0, 3, 4) -> f_303(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v342, v347, v348, v349, v350, v351, 0, 3, 4) :|: 0 = 0
f_303(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v342, v347, v348, v349, v350, v351, 0, 3, 4) -> f_306(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v342, v347, v348, v349, v350, v351, 0, 3, 4) :|: 0 = 0
f_306(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v342, v347, v348, v349, v350, v351, 0, 3, 4) -> f_309(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v342, v347, v348, v349, v350, v351, 0, 3, 4) :|: v346 < v340
f_309(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v342, v347, v348, v349, v350, v351, 0, 3, 4) -> f_313(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v342, v347, v348, v349, v350, v351, 0, 3, 4) :|: 0 = 0
f_313(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v342, v347, v348, v349, v350, v351, 0, 3, 4) -> f_317(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v342, v347, v348, v349, v350, v351, 0, 3, 4) :|: TRUE
f_317(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v342, v347, v348, v349, v350, v351, 0, 3, 4) -> f_321(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v347, v348, v349, v350, v351, 0, 3, 4) :|: 0 = 0
f_321(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v347, v348, v349, v350, v351, 0, 3, 4) -> f_325(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v450, v347, v348, v349, v350, v351, 0, 3, 4) :|: v450 = 1 + v346
f_325(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v450, v347, v348, v349, v350, v351, 0, 3, 4) -> f_328(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v450, v347, v348, v349, v350, v351, 0, 3, 4) :|: TRUE
f_328(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v450, v347, v348, v349, v350, v351, 0, 3, 4) -> f_331(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v450, v347, v348, v349, v350, v351, 0, 3, 4) :|: TRUE
f_331(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v450, v347, v348, v349, v350, v351, 0, 3, 4) -> f_334(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v450, v347, v348, v349, v350, v351, 0, 3, 4) :|: TRUE
f_334(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v450, v347, v348, v349, v350, v351, 0, 3, 4) -> f_281(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v345, v379, v450, v347, v348, v349, v350, v351, 0, 3, 4) :|: TRUE
f_281(v333, v334, v335, v336, v337, v338, v339, v340, v341, v342, 1, v344, v345, v346, v347, v348, v349, v350, v351, 0, 3, 4) -> f_283(v333, v334, v335, v336, v337, v338, v339, v340, v341, v346, 1, v344, v345, v342, v347, v348, v349, v350, v351, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_283(v333:0, v334:0, v335:0, v336:0, v337:0, v338:0, v339:0, v340:0, v341:0, v346:0, 1, v344:0, v345:0, v342:0, v347:0, v348:0, v349:0, v350:0, v351:0, 0, 3, 4) -> f_283(v333:0, v334:0, v335:0, v336:0, v337:0, v338:0, v339:0, v340:0, v341:0, 1 + v346:0, 1, v345:0, 1 + v345:0, v346:0, v347:0, v348:0, v349:0, v350:0, v351:0, 0, 3, 4) :|: v346:0 < v340:0 && v346:0 < v339:0
Filtered unneeded arguments:
   f_283(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_283(x7, x8, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_283(v339:0, v340:0, v346:0) -> f_283(v339:0, v340:0, 1 + v346:0) :|: v346:0 < v340:0 && v346:0 < v339:0

----------------------------------------

(16)
Obligation:
Rules:
f_283(v339:0, v340:0, v346:0) -> f_283(v339:0, v340:0, 1 + v346:0) :|: v346:0 < v340:0 && v346:0 < v339:0

----------------------------------------

(17) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_283 ] = -1*f_283_3 + f_283_1

The following rules are decreasing:
f_283(v339:0, v340:0, v346:0) -> f_283(v339:0, v340:0, 1 + v346:0) :|: v346:0 < v340:0 && v346:0 < v339:0

The following rules are bounded:
f_283(v339:0, v340:0, v346:0) -> f_283(v339:0, v340:0, 1 + v346:0) :|: v346:0 < v340:0 && v346:0 < v339:0


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
SCC
----------------------------------------

(20) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_276(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v261, v262, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) -> f_279(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v261, v262, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) :|: 0 = 0
f_279(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v261, v262, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) -> f_282(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v261, v262, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) :|: 0 = 0
f_282(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v261, v262, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) -> f_284(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v261, v262, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) :|: 0 = 0
f_284(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v261, v262, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) -> f_286(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v261, v262, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) :|: TRUE
f_286(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v261, v262, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) -> f_289(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) :|: 0 = 0
f_289(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) -> f_292(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) :|: v367 = 1 + v262
f_292(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) -> f_295(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) :|: TRUE
f_295(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) -> f_297(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v263, v266, v267, v268, v269, v270, 3, 4) :|: 0 = 0
f_297(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v263, v266, v267, v268, v269, v270, 3, 4) -> f_299(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v263, v266, v267, v268, v269, v270, 3, 4) :|: 0 = 0
f_299(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v263, v266, v267, v268, v269, v270, 3, 4) -> f_302(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v263, v266, v267, v268, v269, v270, 3, 4) :|: v265 <= v256
f_302(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v263, v266, v267, v268, v269, v270, 3, 4) -> f_305(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v263, v266, v267, v268, v269, v270, 3, 4) :|: 0 = 0
f_305(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v263, v266, v267, v268, v269, v270, 3, 4) -> f_308(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v263, v266, v267, v268, v269, v270, 3, 4) :|: TRUE
f_308(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v263, v266, v267, v268, v269, v270, 3, 4) -> f_312(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v266, v267, v268, v269, v270, 3, 4) :|: 0 = 0
f_312(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v266, v267, v268, v269, v270, 3, 4) -> f_316(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v381, v266, v267, v268, v269, v270, 3, 4) :|: v381 = 1 + v265
f_316(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v381, v266, v267, v268, v269, v270, 3, 4) -> f_320(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v381, v266, v267, v268, v269, v270, 3, 4) :|: TRUE
f_320(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v381, v266, v267, v268, v269, v270, 3, 4) -> f_324(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v381, v266, v267, v268, v269, v270, 3, 4) :|: TRUE
f_324(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v381, v266, v267, v268, v269, v270, 3, 4) -> f_273(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v262, v367, v265, 0, v381, v266, v267, v268, v269, v270, 3, 4) :|: TRUE
f_273(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v261, v262, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) -> f_276(v251, v252, v253, v254, v255, v256, v257, v258, v259, 1, v261, v262, v263, 0, v265, v266, v267, v268, v269, v270, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_276(v251:0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v258:0, v259:0, 1, v261:0, v262:0, v263:0, 0, v265:0, v266:0, v267:0, v268:0, v269:0, v270:0, 3, 4) -> f_276(v251:0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v258:0, v259:0, 1, v262:0, 1 + v262:0, v265:0, 0, 1 + v265:0, v266:0, v267:0, v268:0, v269:0, v270:0, 3, 4) :|: v265:0 <= v256:0
Filtered unneeded arguments:
   f_276(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_276(x6, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_276(v256:0, v265:0) -> f_276(v256:0, 1 + v265:0) :|: v265:0 <= v256:0

----------------------------------------

(21)
Obligation:
Rules:
f_276(v256:0, v265:0) -> f_276(v256:0, 1 + v265:0) :|: v265:0 <= v256:0

----------------------------------------

(22) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_276(x, x1)] = x - x1

The following rules are decreasing:
f_276(v256:0, v265:0) -> f_276(v256:0, 1 + v265:0) :|: v265:0 <= v256:0
The following rules are bounded:
f_276(v256:0, v265:0) -> f_276(v256:0, 1 + v265:0) :|: v265:0 <= v256:0

----------------------------------------

(23)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
