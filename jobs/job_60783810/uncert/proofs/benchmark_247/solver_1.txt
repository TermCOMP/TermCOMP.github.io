YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/PbVQv.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 53 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2034 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 14 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 11 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 12 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/PbVQv.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/PbVQv.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%5 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store null, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%6 = load %3
		store %6, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %7
	7:
		%8 = load %5
		%9 = load %2
		%10 = icmp slt %8 %9
		br %10, %11, %24
	11:
		%12 = call noalias *i8 @malloc(i64 16)
		%13 = bitcast *i8 %12 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %13, %3
		%14 = call i32 (...)* @__VERIFIER_nondet_int()
		%15 = load %3
		%16 = getelementptr %15, 0, 0
		store %14, %16
		%17 = load %4
		%18 = load %3
		%19 = getelementptr %18, 0, 1
		store %17, %19
		%20 = load %3
		store %20, %4
		br %21
	21:
		%22 = load %5
		%23 = add i32 %22, 1
		store %23, %5
		br %7
	24:
		%25 = load %3
		ret %25

*BasicFunctionTypename: "traverse" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 55
	0:
		%2 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		%4 = load %2
		store %4, %3
		br %5
	5:
		%6 = load %3
		%7 = getelementptr %6, 0, 1
		%8 = load %7
		%9 = icmp ne %8 null
		br %9, %10, %14
	10:
		%11 = load %3
		%12 = getelementptr %11, 0, 1
		%13 = load %12
		store %13, %3
		br %5
	14:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 74
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %7, %8
	7:
		store 0, %1
		br %12
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		%9 = load %2
		%10 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %9)
		store %10, %3
		%11 = load %3
		Unnamed Call-Instruction = call BasicVoidType @traverse(*BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %11)
		store 0, %1
		br %12
	12:
		%13 = load %1
		ret %13


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_731(v411, v412, v413, v416, v415, 1, v414, v418, v423, v419, v424, v420, v425, v426, v427, v429, v430, v431, v433, v434, v435, 0, v421, 3, 7, 4, 8, 9, 2, v428, v432) -> f_738(v411, v412, v413, v416, v436, 1, v414, v415, v418, v423, v419, v424, v420, v425, v426, v427, v429, v430, v431, v433, v434, v435, 0, v421, 3, 7, 4, 8, 9, 2, v428, v432) :|: v436 = 8 + v416 && 9 <= v436
f_738(v411, v412, v413, v416, v436, 1, v414, v415, v418, v423, v419, v424, v420, v425, v426, v427, v429, v430, v431, v433, v434, v435, 0, v421, 3, 7, 4, 8, 9, 2, v428, v432) -> f_739(v411, v412, v413, v416, v436, v435, 1, v414, v415, v418, v423, v419, v424, v420, v425, v426, v427, v429, v430, v431, v433, v434, 0, v421, 3, 7, 4, 8, 9, 2, v428, v432) :|: 0 = 0
f_739(v411, v412, v413, v416, v436, v435, 1, v414, v415, v418, v423, v419, v424, v420, v425, v426, v427, v429, v430, v431, v433, v434, 0, v421, 3, 7, 4, 8, 9, 2, v428, v432) -> f_740(v411, v412, v413, v416, v436, v435, 1, v414, v415, v418, v423, v419, v424, v420, v425, v426, v427, v429, v430, v431, v433, v434, 0, v421, 3, 7, 4, 8, 9, 2, v428, v432) :|: 0 < v435 && 2 <= v432
f_740(v411, v412, v413, v416, v436, v435, 1, v414, v415, v418, v423, v419, v424, v420, v425, v426, v427, v429, v430, v431, v433, v434, 0, v421, 3, 7, 4, 8, 9, 2, v428, v432) -> f_742(v411, v412, v413, v416, v436, v435, 1, v414, v415, v418, v423, v419, v424, v420, v425, v426, v427, v429, v430, v431, v433, v434, 0, v421, 3, 7, 4, 8, 9, 2, v428, v432) :|: 0 = 0
f_742(v411, v412, v413, v416, v436, v435, 1, v414, v415, v418, v423, v419, v424, v420, v425, v426, v427, v429, v430, v431, v433, v434, 0, v421, 3, 7, 4, 8, 9, 2, v428, v432) -> f_744(v411, v412, v413, v416, v436, v435, 1, v414, v415, v418, v423, v419, v424, v420, v425, v426, v427, v429, v430, v431, v433, v434, 0, v421, 3, 7, 4, 8, 9, 2, v428, v432) :|: TRUE
f_744(v411, v412, v413, v416, v436, v435, 1, v414, v415, v418, v423, v419, v424, v420, v425, v426, v427, v429, v430, v431, v433, v434, 0, v421, 3, 7, 4, 8, 9, 2, v428, v432) -> f_746(v411, v412, v413, v416, v436, v435, 1, v415, v418, v423, v419, v424, v420, v425, v426, v427, v429, v430, v431, v433, v434, 0, v421, 3, 7, 4, 8, 9, 2, v428, v432) :|: 0 = 0
f_746(v411, v412, v413, v416, v436, v435, 1, v415, v418, v423, v419, v424, v420, v425, v426, v427, v429, v430, v431, v433, v434, 0, v421, 3, 7, 4, 8, 9, 2, v428, v432) -> f_754(v411, v412, v413, v416, v436, v435, 1, v418, v423, v419, v424, v420, v425, v426, v427, v442, v415, 0, v421, v441, v434, v439, v429, v433, v431, 3, 7, 4, 8, 15, 9, 2, v440, 16, v443) :|: v436 = 8 + v416 && v442 = 15 + v416 && v443 = 1 + v428 && 1 + v440 = v432 && 16 <= v442 && 1 <= v440 && 0 <= v443
f_754(v411, v412, v413, v416, v436, v435, 1, v418, v423, v419, v424, v420, v425, v426, v427, v442, v415, 0, v421, v441, v434, v439, v429, v433, v431, 3, 7, 4, 8, 15, 9, 2, v440, 16, v443) -> f_756(v411, v412, v413, v416, v436, v435, 1, v418, v423, v419, v424, v420, v425, v426, v427, v442, v415, 0, v421, v441, v434, v439, v429, v433, v431, 3, 7, 4, 8, 15, 9, 2, v440, 16, v443) :|: 0 = 0
f_756(v411, v412, v413, v416, v436, v435, 1, v418, v423, v419, v424, v420, v425, v426, v427, v442, v415, 0, v421, v441, v434, v439, v429, v433, v431, 3, 7, 4, 8, 15, 9, 2, v440, 16, v443) -> f_758(v411, v412, v413, v416, v436, v435, 1, v418, v423, v419, v424, v420, v425, v426, v427, v442, 0, v421, v441, v434, v439, v429, v433, v431, 3, 7, 4, 8, 15, 2, 9, v440, 16, v443) :|: TRUE
f_758(v411, v412, v413, v416, v436, v435, 1, v418, v423, v419, v424, v420, v425, v426, v427, v442, 0, v421, v441, v434, v439, v429, v433, v431, 3, 7, 4, 8, 15, 2, 9, v440, 16, v443) -> f_760(v411, v412, v413, v416, v436, v435, 1, v418, v423, v419, v424, v420, v425, v426, v427, v442, 0, v421, v441, v434, v439, v429, v433, v431, 3, 7, 4, 8, 15, 2, 9, v440, 16, v443) :|: TRUE
f_760(v411, v412, v413, v416, v436, v435, 1, v418, v423, v419, v424, v420, v425, v426, v427, v442, 0, v421, v441, v434, v439, v429, v433, v431, 3, 7, 4, 8, 15, 2, 9, v440, 16, v443) -> f_730(v411, v412, v413, v416, v436, v435, 1, v418, v423, v419, v424, v420, v425, v426, v427, v429, v433, v431, v441, v434, v439, 0, v421, 3, 7, 4, 8, 9, 2, v443, v440) :|: TRUE
f_730(v411, v412, v413, v414, v415, v416, 1, v418, v423, v419, v424, v420, v425, v426, v427, v429, v430, v431, v433, v434, v435, 0, v421, 3, 7, 4, 8, 9, 2, v428, v432) -> f_731(v411, v412, v413, v416, v415, 1, v414, v418, v423, v419, v424, v420, v425, v426, v427, v429, v430, v431, v433, v434, v435, 0, v421, 3, 7, 4, 8, 9, 2, v428, v432) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_731(v411:0, v412:0, v413:0, v416:0, v415:0, 1, v414:0, v418:0, v423:0, v419:0, v424:0, v420:0, v425:0, v426:0, v427:0, v429:0, v430:0, v431:0, v433:0, v434:0, v435:0, 0, v421:0, 3, 7, 4, 8, 9, 2, v428:0, 1 + v440:0) -> f_731(v411:0, v412:0, v413:0, v435:0, 8 + v416:0, 1, v416:0, v418:0, v423:0, v419:0, v424:0, v420:0, v425:0, v426:0, v427:0, v429:0, v433:0, v431:0, v441:0, v434:0, v439:0, 0, v421:0, 3, 7, 4, 8, 9, 2, 1 + v428:0, v440:0) :|: v416:0 > 0 && v440:0 > 0 && v435:0 > 0 && v428:0 > -2
Filtered unneeded arguments:
   f_731(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_731(x4, x21, x30, x31)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_731(v416:0, v435:0, v428:0, sum~cons_1~v440:0) -> f_731(v435:0, v439:0, 1 + v428:0, v440:0) :|: v440:0 > 0 && v416:0 > 0 && v428:0 > -2 && v435:0 > 0 && sum~cons_1~v440:0 = 1 + v440:0

----------------------------------------

(9)
Obligation:
Rules:
f_731(v416:0, v435:0, v428:0, sum~cons_1~v440:0) -> f_731(v435:0, v439:0, 1 + v428:0, v440:0) :|: v440:0 > 0 && v416:0 > 0 && v428:0 > -2 && v435:0 > 0 && sum~cons_1~v440:0 = 1 + v440:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_731(v416:0:0, v435:0:0, v428:0:0, sum~cons_1~v440:0:0) -> f_731(v435:0:0, v439:0:0, 1 + v428:0:0, v440:0:0) :|: v428:0:0 > -2 && v435:0:0 > 0 && v416:0:0 > 0 && v440:0:0 > 0 && sum~cons_1~v440:0:0 = 1 + v440:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_731 ] = f_731_4

The following rules are decreasing:
f_731(v416:0:0, v435:0:0, v428:0:0, sum~cons_1~v440:0:0) -> f_731(v435:0:0, v439:0:0, 1 + v428:0:0, v440:0:0) :|: v428:0:0 > -2 && v435:0:0 > 0 && v416:0:0 > 0 && v440:0:0 > 0 && sum~cons_1~v440:0:0 = 1 + v440:0:0

The following rules are bounded:
f_731(v416:0:0, v435:0:0, v428:0:0, sum~cons_1~v440:0:0) -> f_731(v435:0:0, v439:0:0, 1 + v428:0:0, v440:0:0) :|: v428:0:0 > -2 && v435:0:0 > 0 && v416:0:0 > 0 && v440:0:0 > 0 && sum~cons_1~v440:0:0 = 1 + v440:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_600(v261, v262, v263, v264, v265, 0, v273, 1, v269, v270, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 9) -> f_601(v261, v262, v263, v264, v265, 0, v273, 1, v269, v270, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 9) :|: 0 = 0
f_601(v261, v262, v263, v264, v265, 0, v273, 1, v269, v270, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 9) -> f_602(v261, v262, v263, v264, v265, 0, v273, 1, v269, v270, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 2, 9) :|: v273 < v261 && 2 <= v261
f_602(v261, v262, v263, v264, v265, 0, v273, 1, v269, v270, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 2, 9) -> f_604(v261, v262, v263, v264, v265, 0, v273, 1, v269, v270, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 2, 9) :|: 0 = 0
f_604(v261, v262, v263, v264, v265, 0, v273, 1, v269, v270, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 2, 9) -> f_606(v261, v262, v263, v264, v265, 0, v273, 1, v269, v270, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 2, 9) :|: TRUE
f_606(v261, v262, v263, v264, v265, 0, v273, 1, v269, v270, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 2, 9) -> f_608(v261, v262, v263, v264, v265, 0, v273, 1, v285, v269, v270, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v284, 3, 7, 4, 8, 15, 2, 9, 16) :|: v286 = 15 + v285 && v285 % 4 = 0 && 16 <= v286
f_608(v261, v262, v263, v264, v265, 0, v273, 1, v285, v269, v270, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v284, 3, 7, 4, 8, 15, 2, 9, 16) -> f_610(v261, v262, v263, v264, v265, 0, v273, 1, v285, v270, v269, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v284, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_610(v261, v262, v263, v264, v265, 0, v273, 1, v285, v270, v269, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v284, 3, 7, 4, 8, 15, 2, 9, 16) -> f_612(v261, v262, v263, v264, v265, 0, v273, 1, v285, v270, v269, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v284, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_612(v261, v262, v263, v264, v265, 0, v273, 1, v285, v270, v269, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v284, 3, 7, 4, 8, 15, 2, 9, 16) -> f_614(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v270, v284, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_614(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v270, v284, 3, 7, 4, 8, 15, 2, 9, 16) -> f_616(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v270, v284, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_616(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v270, v284, 3, 7, 4, 8, 15, 2, 9, 16) -> f_618(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v271, v269, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v270, v284, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_618(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v271, v269, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v270, v284, 3, 7, 4, 8, 15, 2, 9, 16) -> f_620(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v271, v269, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v270, v284, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_620(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v271, v269, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v270, v284, 3, 7, 4, 8, 15, 2, 9, 16) -> f_622(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v270, v284, v271, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_622(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v270, v284, v271, 3, 7, 4, 8, 15, 2, 9, 16) -> f_624(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v270, v284, v271, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_624(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v270, v284, v271, 3, 7, 4, 8, 15, 2, 9, 16) -> f_626(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v270, v284, v271, 3, 7, 4, 15, 8, 2, 16, 9) :|: v296 = 8 + v285 && 9 <= v296
f_626(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v286, v270, v284, v271, 3, 7, 4, 15, 8, 2, 16, 9) -> f_628(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, v298, 2, 9) :|: v298 = 1 + v273 && 2 <= v298
f_628(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, v298, 2, 9) -> f_630(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, v298, 2, 9) :|: 0 = 0
f_630(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, v298, 2, 9) -> f_632(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, v298, 2, 9) :|: TRUE
f_632(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, v298, 2, 9) -> f_634(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, v298, 2, 9) :|: TRUE
f_634(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, v298, 2, 9) -> f_636(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, v298, 2, 9) :|: 0 = 0
f_636(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, v298, 2, 9) -> f_644(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v298, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 2, 9) :|: v298 = 1 + v273
f_644(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v298, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 2, 9) -> f_646(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v298, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 2, 9) :|: TRUE
f_646(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v298, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 2, 9) -> f_649(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v298, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 2, 9) :|: TRUE
f_649(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v298, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 2, 9) -> f_599(v261, v262, v263, v264, v265, 0, v273, 1, v285, v289, v269, v296, v298, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 9) :|: TRUE
f_599(v261, v262, v263, v264, v265, 0, v267, 1, v269, v270, v271, v272, v273, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 9) -> f_600(v261, v262, v263, v264, v265, 0, v273, 1, v269, v270, v271, v272, v267, v274, v277, v275, v278, v276, v279, v280, v281, v282, v283, v284, 3, 7, 4, 8, 9) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_600(v261:0, v262:0, v263:0, v264:0, v265:0, 0, v273:0, 1, v269:0, v270:0, v271:0, v272:0, v267:0, v274:0, v277:0, v275:0, v278:0, v276:0, v279:0, v280:0, v281:0, v282:0, v283:0, v284:0, 3, 7, 4, 8, 9) -> f_600(v261:0, v262:0, v263:0, v264:0, v265:0, 0, 1 + v273:0, 1, v285:0, v289:0, v269:0, 8 + v285:0, v273:0, v274:0, v277:0, v275:0, v278:0, v276:0, v279:0, v280:0, v281:0, v282:0, v283:0, v284:0, 3, 7, 4, 8, 9) :|: v261:0 > 1 && v273:0 < v261:0 && v285:0 % 4 = 0 && v285:0 > 0 && v273:0 > 0
Filtered unneeded arguments:
   f_600(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_600(x1, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_600(v261:0, v273:0) -> f_600(v261:0, 1 + v273:0) :|: v273:0 < v261:0 && v273:0 > 0 && v261:0 > 1

----------------------------------------

(16)
Obligation:
Rules:
f_600(v261:0, v273:0) -> f_600(v261:0, 1 + v273:0) :|: v273:0 < v261:0 && v273:0 > 0 && v261:0 > 1

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_600(v261:0:0, v273:0:0) -> f_600(v261:0:0, 1 + v273:0:0) :|: v273:0:0 < v261:0:0 && v273:0:0 > 0 && v261:0:0 > 1

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_600(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_600(v261:0:0, v273:0:0) -> f_600(v261:0:0, 1 + v273:0:0) :|: v273:0:0 < v261:0:0 && v273:0:0 > 0 && v261:0:0 > 1
The following rules are bounded:
f_600(v261:0:0, v273:0:0) -> f_600(v261:0:0, 1 + v273:0:0) :|: v273:0:0 < v261:0:0 && v273:0:0 > 0 && v261:0:0 > 1

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
