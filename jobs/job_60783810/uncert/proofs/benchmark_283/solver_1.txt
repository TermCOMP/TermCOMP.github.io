YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/CpUt9.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 884 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 21 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 14 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/CpUt9.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/CpUt9.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 73, %3
		store 74, %4
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		br %7
	7:
		%8 = load %2
		%9 = icmp sge %8 0
		br %9, %10, %19
	10:
		%11 = load %2
		%12 = load %3
		%13 = sub i32 %11, %12
		store %13, %2
		%14 = load %3
		store %14, %5
		%15 = load %4
		%16 = add i32 %15, 1
		store %16, %3
		%17 = load %5
		%18 = add i32 %17, 1
		store %18, %4
		br %7
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_262(v144, v145, v146, v147, v148, v149, v153, 1, v150, v152, v154, v155, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) -> f_263(v144, v145, v146, v147, v148, v149, v153, 1, v150, v152, v154, v155, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) :|: 0 <= v153 && 1 <= v150 && 1 <= v149
f_263(v144, v145, v146, v147, v148, v149, v153, 1, v150, v152, v154, v155, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) -> f_265(v144, v145, v146, v147, v148, v149, v153, 1, v150, v152, v154, v155, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) :|: 0 = 0
f_265(v144, v145, v146, v147, v148, v149, v153, 1, v150, v152, v154, v155, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) -> f_267(v144, v145, v146, v147, v148, v149, v153, 1, v150, v152, v154, v155, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) :|: TRUE
f_267(v144, v145, v146, v147, v148, v149, v153, 1, v150, v152, v154, v155, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) -> f_269(v144, v145, v146, v147, v148, v149, v153, 1, v152, v154, v155, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) :|: 0 = 0
f_269(v144, v145, v146, v147, v148, v149, v153, 1, v152, v154, v155, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) -> f_270(v144, v145, v146, v147, v148, v149, v153, 1, v155, v152, v154, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) :|: 0 = 0
f_270(v144, v145, v146, v147, v148, v149, v153, 1, v155, v152, v154, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) -> f_271(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v152, v154, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) :|: v163 + v155 = v153
f_271(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v152, v154, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) -> f_272(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v152, v154, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) :|: TRUE
f_272(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v152, v154, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) -> f_273(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v154, v152, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) :|: 0 = 0
f_273(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v154, v152, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) -> f_274(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v154, v152, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) :|: TRUE
f_274(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v154, v152, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) -> f_275(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v156, v152, v157, v158, v159, v160, v161, 0, 3, 73, 75, 74, 4) :|: 0 = 0
f_275(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v156, v152, v157, v158, v159, v160, v161, 0, 3, 73, 75, 74, 4) -> f_276(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v156, v166, v152, v157, v158, v159, v160, v161, 0, 3, 73, 75, 74, 4) :|: v166 = 1 + v156 && 75 <= v166
f_276(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v156, v166, v152, v157, v158, v159, v160, v161, 0, 3, 73, 75, 74, 4) -> f_277(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v156, v166, v152, v157, v158, v159, v160, v161, 0, 3, 73, 75, 74, 4) :|: TRUE
f_277(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v156, v166, v152, v157, v158, v159, v160, v161, 0, 3, 73, 75, 74, 4) -> f_278(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v156, v166, v157, v158, v159, v160, v161, 0, 3, 75, 74, 4) :|: 0 = 0
f_278(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v156, v166, v157, v158, v159, v160, v161, 0, 3, 75, 74, 4) -> f_279(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v156, v166, v168, v157, v158, v159, v160, v161, 0, 3, 75, 74, 4, 76) :|: v168 = 1 + v155 && 76 <= v168
f_279(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v156, v166, v168, v157, v158, v159, v160, v161, 0, 3, 75, 74, 4, 76) -> f_280(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v156, v166, v168, v157, v158, v159, v160, v161, 0, 3, 75, 74, 4, 76) :|: TRUE
f_280(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v156, v166, v168, v157, v158, v159, v160, v161, 0, 3, 75, 74, 4, 76) -> f_281(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v156, v166, v168, v157, v158, v159, v160, v161, 0, 3, 75, 74, 4, 76) :|: TRUE
f_281(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v156, v166, v168, v157, v158, v159, v160, v161, 0, 3, 75, 74, 4, 76) -> f_261(v144, v145, v146, v147, v148, v149, v153, 1, v155, v163, v156, v166, v168, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) :|: TRUE
f_261(v144, v145, v146, v147, v148, v149, v150, 1, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) -> f_262(v144, v145, v146, v147, v148, v149, v153, 1, v150, v152, v154, v155, v156, v157, v158, v159, v160, v161, 0, 3, 73, 74, 75, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_262(v144:0, v145:0, v146:0, v147:0, v148:0, v149:0, v163:0 + v155:0, 1, v150:0, v152:0, v154:0, v155:0, v156:0, v157:0, v158:0, v159:0, v160:0, v161:0, 0, 3, 73, 74, 75, 4) -> f_262(v144:0, v145:0, v146:0, v147:0, v148:0, v149:0, v163:0, 1, v163:0 + v155:0, v155:0, v156:0, 1 + v156:0, 1 + v155:0, v157:0, v158:0, v159:0, v160:0, v161:0, 0, 3, 73, 74, 75, 4) :|: v150:0 > 0 && v163:0 + v155:0 > -1 && v149:0 > 0 && v155:0 > 74 && v156:0 > 73
Filtered unneeded arguments:
   f_262(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_262(x6, x7, x9, x12, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_262(v149:0, sum~v163:0~v155:0, v150:0, v155:0, v156:0) -> f_262(v149:0, v163:0, v163:0 + v155:0, 1 + v156:0, 1 + v155:0) :|: v163:0 + v155:0 > -1 && v150:0 > 0 && v149:0 > 0 && v156:0 > 73 && v155:0 > 74 && sum~v163:0~v155:0 = v163:0 + v155:0

----------------------------------------

(8)
Obligation:
Rules:
f_262(v149:0, sum~v163:0~v155:0, v150:0, v155:0, v156:0) -> f_262(v149:0, v163:0, v163:0 + v155:0, 1 + v156:0, 1 + v155:0) :|: v163:0 + v155:0 > -1 && v150:0 > 0 && v149:0 > 0 && v156:0 > 73 && v155:0 > 74 && sum~v163:0~v155:0 = v163:0 + v155:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_262(v149:0:0, sum~v163:0:0~v155:0:0, v150:0:0, v155:0:0, v156:0:0) -> f_262(v149:0:0, v163:0:0, v163:0:0 + v155:0:0, 1 + v156:0:0, 1 + v155:0:0) :|: v156:0:0 > 73 && v155:0:0 > 74 && v149:0:0 > 0 && v150:0:0 > 0 && v163:0:0 + v155:0:0 > -1 && sum~v163:0:0~v155:0:0 = v163:0:0 + v155:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_262 ] = 1/75*f_262_2

The following rules are decreasing:
f_262(v149:0:0, sum~v163:0:0~v155:0:0, v150:0:0, v155:0:0, v156:0:0) -> f_262(v149:0:0, v163:0:0, v163:0:0 + v155:0:0, 1 + v156:0:0, 1 + v155:0:0) :|: v156:0:0 > 73 && v155:0:0 > 74 && v149:0:0 > 0 && v150:0:0 > 0 && v163:0:0 + v155:0:0 > -1 && sum~v163:0:0~v155:0:0 = v163:0:0 + v155:0:0

The following rules are bounded:
f_262(v149:0:0, sum~v163:0:0~v155:0:0, v150:0:0, v155:0:0, v156:0:0) -> f_262(v149:0:0, v163:0:0, v163:0:0 + v155:0:0, 1 + v156:0:0, 1 + v155:0:0) :|: v156:0:0 > 73 && v155:0:0 > 74 && v149:0:0 > 0 && v150:0:0 > 0 && v163:0:0 + v155:0:0 > -1 && sum~v163:0:0~v155:0:0 = v163:0:0 + v155:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
