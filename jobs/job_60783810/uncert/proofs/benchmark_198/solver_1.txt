YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/HJcLX.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 801 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 20 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 10 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (17) YES
    (18) LLVM Symbolic Execution SCC
        (19) SCC2IRS [SOUND, 17 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (24) YES
    (25) LLVM Symbolic Execution SCC
        (26) SCC2IRS [SOUND, 19 ms]
        (27) IntTRS
        (28) TerminationGraphProcessor [EQUIVALENT, 5 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/HJcLX.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/HJcLX.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		br %6
	6:
		%7 = load %4
		%8 = icmp sge %7 0
		br %8, %9, %25
	9:
		store 1, %5
		br %10
	10:
		%11 = load %4
		%12 = load %5
		%13 = icmp sgt %11 %12
		br %13, %14, %22
	14:
		%15 = load %5
		%16 = icmp sle %15 0
		br %16, %17, %19
	17:
		%18 = load %4
		store %18, %3
		br %27
	19:
		%20 = load %5
		%21 = mul i32 2, %20
		store %21, %5
		br %10
	22:
		%23 = load %4
		%24 = sub i32 %23, 1
		store %24, %4
		br %6
	25:
		%26 = load %5
		store %26, %3
		br %27
	27:
		%28 = load %3
		ret %28

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 46
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 38 rulesP rules:
f_423(v457, v458, v459, v460, v461, v462, 1, v464, 0, v465, v467, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_424(v457, v458, v459, v460, v461, v462, 1, v464, 0, v465, v467, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: 0 = 0
f_424(v457, v458, v459, v460, v461, v462, 1, v464, 0, v465, v467, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_425(v457, v458, v459, v460, v461, v462, 1, v464, 0, v465, v467, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: TRUE
f_425(v457, v458, v459, v460, v461, v462, 1, v464, 0, v465, v467, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_426(v457, v458, v459, v460, v461, v462, 1, v464, 0, v467, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: 0 = 0
f_426(v457, v458, v459, v460, v461, v462, 1, v464, 0, v467, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_427(v457, v458, v459, v460, v461, v462, 1, v464, 0, v479, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: v479 = 2 * v464 && 2 <= v479
f_427(v457, v458, v459, v460, v461, v462, 1, v464, 0, v479, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_428(v457, v458, v459, v460, v461, v462, 1, v464, 0, v479, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: TRUE
f_428(v457, v458, v459, v460, v461, v462, 1, v464, 0, v479, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_429(v457, v458, v459, v460, v461, v462, 1, v464, 0, v479, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: TRUE
f_429(v457, v458, v459, v460, v461, v462, 1, v464, 0, v479, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_430(v457, v458, v459, v460, v461, v462, 1, v464, 0, v479, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: 0 = 0
f_430(v457, v458, v459, v460, v461, v462, 1, v464, 0, v479, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_431(v457, v458, v459, v460, v461, v462, 1, v479, v464, 0, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: 0 = 0
f_431(v457, v458, v459, v460, v461, v462, 1, v479, v464, 0, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_432(v457, v458, v459, v460, v461, v462, 1, v479, v464, 0, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: v479 < v462 && 3 <= v462 && 4 <= v468 && 4 <= v457
f_431(v457, v458, v459, v460, v461, v462, 1, v479, v464, 0, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_433(v457, v458, v459, v460, v461, v462, 1, v479, v464, 0, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: v462 <= v479
f_432(v457, v458, v459, v460, v461, v462, 1, v479, v464, 0, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_434(v457, v458, v459, v460, v461, v462, 1, v479, v464, 0, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: 0 = 0
f_434(v457, v458, v459, v460, v461, v462, 1, v479, v464, 0, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_436(v457, v458, v459, v460, v461, v462, 1, v479, v464, 0, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: TRUE
f_436(v457, v458, v459, v460, v461, v462, 1, v479, v464, 0, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_422(v457, v458, v459, v460, v461, v462, 1, v479, v464, 0, v479, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: TRUE
f_422(v457, v458, v459, v460, v461, v462, 1, v464, v465, 0, v467, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_423(v457, v458, v459, v460, v461, v462, 1, v464, 0, v465, v467, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: 0 = 0
f_433(v457, v458, v459, v460, v461, v462, 1, v479, v464, 0, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_435(v457, v458, v459, v460, v461, v462, 1, v479, 0, v464, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: 0 = 0
f_435(v457, v458, v459, v460, v461, v462, 1, v479, 0, v464, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_437(v457, v458, v459, v460, v461, v462, 1, v479, 0, v464, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: TRUE
f_437(v457, v458, v459, v460, v461, v462, 1, v479, 0, v464, v468, v469, v470, v471, v472, v473, 3, 2, 4) -> f_456(v457, v458, v459, v460, v461, v462, 1, v479, 0, v464, v479, v468, v469, v470, v471, v472, v473, 3, 2, 4) :|: TRUE
f_456(v662, v663, v664, v665, v666, v667, 1, v669, 0, v671, v672, v673, v674, v675, v676, v677, v678, 3, 2, 4) -> f_457(v662, v663, v664, v665, v666, v667, 1, v669, 0, v671, v672, v674, v675, v676, v677, v678, 3, 2, 4) :|: 0 = 0
f_457(v662, v663, v664, v665, v666, v667, 1, v669, 0, v671, v672, v674, v675, v676, v677, v678, 3, 2, 4) -> f_458(v662, v663, v664, v665, v666, v667, 1, v669, 0, v671, v672, v679, v674, v675, v676, v677, v678, 3, 2, 4) :|: 1 + v679 = v667 && 0 <= 1 + v679
f_458(v662, v663, v664, v665, v666, v667, 1, v669, 0, v671, v672, v679, v674, v675, v676, v677, v678, 3, 2, 4) -> f_459(v662, v663, v664, v665, v666, v667, 1, v669, 0, v671, v672, v679, v674, v675, v676, v677, v678, 3, 2, 4) :|: TRUE
f_459(v662, v663, v664, v665, v666, v667, 1, v669, 0, v671, v672, v679, v674, v675, v676, v677, v678, 3, 2, 4) -> f_460(v662, v663, v664, v665, v666, v667, 1, v669, 0, v671, v672, v679, v674, v675, v676, v677, v678, 3, 2, 4) :|: TRUE
f_460(v662, v663, v664, v665, v666, v667, 1, v669, 0, v671, v672, v679, v674, v675, v676, v677, v678, 3, 2, 4) -> f_461(v662, v663, v664, v665, v666, v679, 1, v667, v669, 0, v671, v672, v674, v675, v676, v677, v678, 3, 2, 4) :|: 0 = 0
f_461(v662, v663, v664, v665, v666, v679, 1, v667, v669, 0, v671, v672, v674, v675, v676, v677, v678, 3, 2, 4) -> f_462(v662, v663, v664, v665, v666, v679, 1, v667, v669, 0, v671, v672, v674, v675, v676, v677, v678, 3, 2, 4) :|: 0 <= v679 && 1 <= v667
f_462(v662, v663, v664, v665, v666, v679, 1, v667, v669, 0, v671, v672, v674, v675, v676, v677, v678, 3, 2, 4) -> f_464(v662, v663, v664, v665, v666, v679, 1, v667, v669, 0, v671, v672, v674, v675, v676, v677, v678, 3, 2, 4) :|: 0 = 0
f_464(v662, v663, v664, v665, v666, v679, 1, v667, v669, 0, v671, v672, v674, v675, v676, v677, v678, 3, 2, 4) -> f_466(v662, v663, v664, v665, v666, v679, 1, v667, v669, 0, v671, v672, v674, v675, v676, v677, v678, 3, 2, 4) :|: TRUE
f_466(v662, v663, v664, v665, v666, v679, 1, v667, v669, 0, v671, v672, v674, v675, v676, v677, v678, 3, 2, 4) -> f_468(v662, v663, v664, v665, v666, v679, 1, v667, v669, 0, v671, v672, v674, v675, v676, v677, v678, 3, 2, 4) :|: TRUE
f_468(v662, v663, v664, v665, v666, v679, 1, v667, v669, 0, v671, v672, v674, v675, v676, v677, v678, 3, 2, 4) -> f_470(v662, v663, v664, v665, v666, v679, 1, v667, v669, 0, v671, v672, v674, v675, v676, v677, v678, 3, 2, 4) :|: TRUE
f_470(v662, v663, v664, v665, v666, v679, 1, v667, v669, 0, v671, v672, v674, v675, v676, v677, v678, 3, 2, 4) -> f_447(v662, v663, v664, v665, v666, v679, 1, v667, v669, 0, v671, v672, v674, v675, v676, v677, v678, 3, 2, 4) :|: TRUE
f_447(v589, v590, v591, v592, v593, v594, 1, v596, v597, 0, v599, v600, v601, v602, v603, v604, v605, 3, 2, 4) -> f_448(v589, v590, v591, v592, v593, v594, 1, v597, 0, v599, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) :|: 0 = 0
f_448(v589, v590, v591, v592, v593, v594, 1, v597, 0, v599, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) -> f_449(v589, v590, v591, v592, v593, v594, 1, 0, v599, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) :|: 0 = 0
f_449(v589, v590, v591, v592, v593, v594, 1, 0, v599, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) -> f_450(v589, v590, v591, v592, v593, v594, 1, 0, v599, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) :|: 1 < v594 && 3 <= v596 && 3 <= v589 && 4 <= v600 && 2 <= v599
f_449(v589, v590, v591, v592, v593, v594, 1, 0, v599, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) -> f_451(v589, v590, v591, v592, v593, v594, 1, 0, v599, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) :|: v594 <= 1 && v596 <= 2
f_450(v589, v590, v591, v592, v593, v594, 1, 0, v599, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) -> f_452(v589, v590, v591, v592, v593, v594, 1, v599, 0, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) :|: 0 = 0
f_452(v589, v590, v591, v592, v593, v594, 1, v599, 0, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) -> f_454(v589, v590, v591, v592, v593, v594, 1, v599, 0, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) :|: TRUE
f_454(v589, v590, v591, v592, v593, v594, 1, v599, 0, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) -> f_422(v589, v590, v591, v592, v593, v594, 1, 1, v599, 0, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) :|: TRUE
f_451(v589, v590, v591, v592, v593, v594, 1, 0, v599, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) -> f_453(v589, v590, v591, v592, v593, v594, 1, 0, v599, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) :|: 0 = 0
f_453(v589, v590, v591, v592, v593, v594, 1, 0, v599, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) -> f_455(v589, v590, v591, v592, v593, v594, 1, 0, v599, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) :|: TRUE
f_455(v589, v590, v591, v592, v593, v594, 1, 0, v599, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) -> f_456(v589, v590, v591, v592, v593, v594, 1, 1, 0, v599, v600, v596, v601, v602, v603, v604, v605, 3, 2, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_449(v589:0, v590:0, v591:0, v592:0, v593:0, v594:0, 1, 0, v599:0, v600:0, v596:0, v601:0, v602:0, v603:0, v604:0, v605:0, 3, 2, 4) -> f_423(v589:0, v590:0, v591:0, v592:0, v593:0, v594:0, 1, 1, 0, v599:0, v600:0, v596:0, v601:0, v602:0, v603:0, v604:0, v605:0, 3, 2, 4) :|: v596:0 > 2 && v594:0 > 1 && v589:0 > 2 && v599:0 > 1 && v600:0 > 3
f_449(v589:0, v590:0, v591:0, v592:0, v593:0, 1 + v679:0, 1, 0, v599:0, v600:0, v596:0, v601:0, v602:0, v603:0, v604:0, v605:0, 3, 2, 4) -> f_449(v589:0, v590:0, v591:0, v592:0, v593:0, v679:0, 1, 0, v599:0, v600:0, 1 + v679:0, v601:0, v602:0, v603:0, v604:0, v605:0, 3, 2, 4) :|: v679:0 > -1 && v679:0 < 1 && v596:0 < 3
f_423(v457:0, v458:0, v459:0, v460:0, v461:0, v462:0, 1, v464:0, 0, v465:0, v467:0, v468:0, v469:0, v470:0, v471:0, v472:0, v473:0, 3, 2, 4) -> f_423(v457:0, v458:0, v459:0, v460:0, v461:0, v462:0, 1, 2 * v464:0, 0, v464:0, 2 * v464:0, v468:0, v469:0, v470:0, v471:0, v472:0, v473:0, 3, 2, 4) :|: 2 * v464:0 > 1 && v462:0 > 2 && v462:0 > 2 * v464:0 && v457:0 > 3 && v468:0 > 3
f_423(v457:0, v458:0, v459:0, v460:0, v461:0, 1 + v679:0, 1, v464:0, 0, v465:0, v467:0, v468:0, v469:0, v470:0, v471:0, v472:0, v473:0, 3, 2, 4) -> f_449(v457:0, v458:0, v459:0, v460:0, v461:0, v679:0, 1, 0, v464:0, 2 * v464:0, 1 + v679:0, v469:0, v470:0, v471:0, v472:0, v473:0, 3, 2, 4) :|: v679:0 > -1 && 2 * v464:0 > 1 && 2 * v464:0 >= 1 + v679:0
Filtered unneeded arguments:
   f_449(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_449(x1, x6, x9, x10, x11)
   f_423(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_423(x1, x6, x8, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_449(v589:0, v594:0, v599:0, v600:0, v596:0) -> f_423(v589:0, v594:0, 1, v596:0) :|: v594:0 > 1 && v596:0 > 2 && v589:0 > 2 && v600:0 > 3 && v599:0 > 1
f_449(v589:0, sum~cons_1~v679:0, v599:0, v600:0, v596:0) -> f_449(v589:0, v679:0, v599:0, v600:0, 1 + v679:0) :|: v679:0 < 1 && v596:0 < 3 && v679:0 > -1 && sum~cons_1~v679:0 = 1 + v679:0
f_423(v457:0, v462:0, v464:0, v468:0) -> f_423(v457:0, v462:0, 2 * v464:0, v468:0) :|: v462:0 > 2 && 2 * v464:0 > 1 && v462:0 > 2 * v464:0 && v468:0 > 3 && v457:0 > 3
f_423(v457:0, sum~cons_1~v679:0, v464:0, v468:0) -> f_449(v457:0, v679:0, v464:0, 2 * v464:0, 1 + v679:0) :|: 2 * v464:0 > 1 && 2 * v464:0 >= 1 + v679:0 && v679:0 > -1 && sum~cons_1~v679:0 = 1 + v679:0

----------------------------------------

(9)
Obligation:
Rules:
f_449(v589:0, v594:0, v599:0, v600:0, v596:0) -> f_423(v589:0, v594:0, 1, v596:0) :|: v594:0 > 1 && v596:0 > 2 && v589:0 > 2 && v600:0 > 3 && v599:0 > 1
f_449(x, x1, x2, x3, x4) -> f_449(x, x5, x2, x3, 1 + x5) :|: x5 < 1 && x4 < 3 && x5 > -1 && x1 = 1 + x5
f_423(v457:0, v462:0, v464:0, v468:0) -> f_423(v457:0, v462:0, 2 * v464:0, v468:0) :|: v462:0 > 2 && 2 * v464:0 > 1 && v462:0 > 2 * v464:0 && v468:0 > 3 && v457:0 > 3
f_423(x6, x7, x8, x9) -> f_449(x6, x10, x8, 2 * x8, 1 + x10) :|: 2 * x8 > 1 && 2 * x8 >= 1 + x10 && x10 > -1 && x7 = 1 + x10

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_423(x6:0, sum~cons_1~x10:0, x8:0, x9:0) -> f_449(x6:0, x10:0, x8:0, 2 * x8:0, 1 + x10:0) :|: 2 * x8:0 > 1 && 2 * x8:0 >= 1 + x10:0 && x10:0 > -1 && sum~cons_1~x10:0 = 1 + x10:0
f_449(v589:0:0, v594:0:0, v599:0:0, v600:0:0, v596:0:0) -> f_423(v589:0:0, v594:0:0, 1, v596:0:0) :|: v600:0:0 > 3 && v599:0:0 > 1 && v589:0:0 > 2 && v596:0:0 > 2 && v594:0:0 > 1
f_423(v457:0:0, v462:0:0, v464:0:0, v468:0:0) -> f_423(v457:0:0, v462:0:0, 2 * v464:0:0, v468:0:0) :|: v468:0:0 > 3 && v457:0:0 > 3 && v462:0:0 > 2 * v464:0:0 && 2 * v464:0:0 > 1 && v462:0:0 > 2
f_449(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_449(x:0, x5:0, x2:0, x3:0, 1 + x5:0) :|: x5:0 < 1 && x4:0 < 3 && x5:0 > -1 && sum~cons_1~x5:0 = 1 + x5:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_423 ] = 2*f_423_2 + -1
[ f_449 ] = 2*f_449_2

The following rules are decreasing:
f_423(x6:0, sum~cons_1~x10:0, x8:0, x9:0) -> f_449(x6:0, x10:0, x8:0, 2 * x8:0, 1 + x10:0) :|: 2 * x8:0 > 1 && 2 * x8:0 >= 1 + x10:0 && x10:0 > -1 && sum~cons_1~x10:0 = 1 + x10:0
f_449(v589:0:0, v594:0:0, v599:0:0, v600:0:0, v596:0:0) -> f_423(v589:0:0, v594:0:0, 1, v596:0:0) :|: v600:0:0 > 3 && v599:0:0 > 1 && v589:0:0 > 2 && v596:0:0 > 2 && v594:0:0 > 1
f_449(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_449(x:0, x5:0, x2:0, x3:0, 1 + x5:0) :|: x5:0 < 1 && x4:0 < 3 && x5:0 > -1 && sum~cons_1~x5:0 = 1 + x5:0

The following rules are bounded:
f_423(x6:0, sum~cons_1~x10:0, x8:0, x9:0) -> f_449(x6:0, x10:0, x8:0, 2 * x8:0, 1 + x10:0) :|: 2 * x8:0 > 1 && 2 * x8:0 >= 1 + x10:0 && x10:0 > -1 && sum~cons_1~x10:0 = 1 + x10:0
f_449(v589:0:0, v594:0:0, v599:0:0, v600:0:0, v596:0:0) -> f_423(v589:0:0, v594:0:0, 1, v596:0:0) :|: v600:0:0 > 3 && v599:0:0 > 1 && v589:0:0 > 2 && v596:0:0 > 2 && v594:0:0 > 1
f_423(v457:0:0, v462:0:0, v464:0:0, v468:0:0) -> f_423(v457:0:0, v462:0:0, 2 * v464:0:0, v468:0:0) :|: v468:0:0 > 3 && v457:0:0 > 3 && v462:0:0 > 2 * v464:0:0 && 2 * v464:0:0 > 1 && v462:0:0 > 2
f_449(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_449(x:0, x5:0, x2:0, x3:0, 1 + x5:0) :|: x5:0 < 1 && x4:0 < 3 && x5:0 > -1 && sum~cons_1~x5:0 = 1 + x5:0


----------------------------------------

(13)
Obligation:
Rules:
f_423(v457:0:0, v462:0:0, v464:0:0, v468:0:0) -> f_423(v457:0:0, v462:0:0, 2 * v464:0:0, v468:0:0) :|: v468:0:0 > 3 && v457:0:0 > 3 && v462:0:0 > 2 * v464:0:0 && 2 * v464:0:0 > 1 && v462:0:0 > 2

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_423(v457:0:0:0, v462:0:0:0, v464:0:0:0, v468:0:0:0) -> f_423(v457:0:0:0, v462:0:0:0, 2 * v464:0:0:0, v468:0:0:0) :|: 2 * v464:0:0:0 > 1 && v462:0:0:0 > 2 && v462:0:0:0 > 2 * v464:0:0:0 && v457:0:0:0 > 3 && v468:0:0:0 > 3

----------------------------------------

(16) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_423(x, x1, x2, x3)] = -1 + x1 - 2*x2

The following rules are decreasing:
f_423(v457:0:0:0, v462:0:0:0, v464:0:0:0, v468:0:0:0) -> f_423(v457:0:0:0, v462:0:0:0, 2 * v464:0:0:0, v468:0:0:0) :|: 2 * v464:0:0:0 > 1 && v462:0:0:0 > 2 && v462:0:0:0 > 2 * v464:0:0:0 && v457:0:0:0 > 3 && v468:0:0:0 > 3
The following rules are bounded:
f_423(v457:0:0:0, v462:0:0:0, v464:0:0:0, v468:0:0:0) -> f_423(v457:0:0:0, v462:0:0:0, 2 * v464:0:0:0, v468:0:0:0) :|: 2 * v464:0:0:0 > 1 && v462:0:0:0 > 2 && v462:0:0:0 > 2 * v464:0:0:0 && v457:0:0:0 > 3 && v468:0:0:0 > 3

----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
SCC
----------------------------------------

(19) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_289(v101, v102, v103, v104, v105, 1, v107, 0, v109, v110, v111, v112, v113, v114, 3, 2, 4) -> f_290(v101, v102, v103, v104, v105, 1, v109, v107, 0, v110, v111, v112, v113, v114, 3, 2, 4) :|: 0 = 0
f_290(v101, v102, v103, v104, v105, 1, v109, v107, 0, v110, v111, v112, v113, v114, 3, 2, 4) -> f_291(v101, v102, v103, v104, v105, 1, v109, v107, 0, v110, v111, v112, v113, v114, 3, 2, 4) :|: v109 < v101 && 3 <= v101
f_291(v101, v102, v103, v104, v105, 1, v109, v107, 0, v110, v111, v112, v113, v114, 3, 2, 4) -> f_293(v101, v102, v103, v104, v105, 1, v109, v107, 0, v110, v111, v112, v113, v114, 3, 2, 4) :|: 0 = 0
f_293(v101, v102, v103, v104, v105, 1, v109, v107, 0, v110, v111, v112, v113, v114, 3, 2, 4) -> f_295(v101, v102, v103, v104, v105, 1, v109, v107, 0, v110, v111, v112, v113, v114, 3, 2, 4) :|: TRUE
f_295(v101, v102, v103, v104, v105, 1, v109, v107, 0, v110, v111, v112, v113, v114, 3, 2, 4) -> f_297(v101, v102, v103, v104, v105, 1, v109, 0, v107, v110, v111, v112, v113, v114, 3, 2, 4) :|: 0 = 0
f_297(v101, v102, v103, v104, v105, 1, v109, 0, v107, v110, v111, v112, v113, v114, 3, 2, 4) -> f_299(v101, v102, v103, v104, v105, 1, v109, 0, v107, v110, v111, v112, v113, v114, 3, 2, 4) :|: 0 = 0
f_299(v101, v102, v103, v104, v105, 1, v109, 0, v107, v110, v111, v112, v113, v114, 3, 2, 4) -> f_301(v101, v102, v103, v104, v105, 1, v109, 0, v107, v110, v111, v112, v113, v114, 3, 2, 4) :|: TRUE
f_301(v101, v102, v103, v104, v105, 1, v109, 0, v107, v110, v111, v112, v113, v114, 3, 2, 4) -> f_303(v101, v102, v103, v104, v105, 1, v109, 0, v110, v111, v112, v113, v114, 3, 2, 4) :|: 0 = 0
f_303(v101, v102, v103, v104, v105, 1, v109, 0, v110, v111, v112, v113, v114, 3, 2, 4) -> f_305(v101, v102, v103, v104, v105, 1, v109, 0, v117, v110, v111, v112, v113, v114, 3, 2, 4) :|: v117 = 2 * v109 && 4 <= v117
f_305(v101, v102, v103, v104, v105, 1, v109, 0, v117, v110, v111, v112, v113, v114, 3, 2, 4) -> f_307(v101, v102, v103, v104, v105, 1, v109, 0, v117, v110, v111, v112, v113, v114, 3, 2, 4) :|: TRUE
f_307(v101, v102, v103, v104, v105, 1, v109, 0, v117, v110, v111, v112, v113, v114, 3, 2, 4) -> f_309(v101, v102, v103, v104, v105, 1, v109, 0, v117, v110, v111, v112, v113, v114, 3, 2, 4) :|: TRUE
f_309(v101, v102, v103, v104, v105, 1, v109, 0, v117, v110, v111, v112, v113, v114, 3, 2, 4) -> f_288(v101, v102, v103, v104, v105, 1, v109, 0, v117, v110, v111, v112, v113, v114, 3, 2, 4) :|: TRUE
f_288(v101, v102, v103, v104, v105, 1, v107, 0, v109, v110, v111, v112, v113, v114, 3, 2, 4) -> f_289(v101, v102, v103, v104, v105, 1, v107, 0, v109, v110, v111, v112, v113, v114, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_289(v101:0, v102:0, v103:0, v104:0, v105:0, 1, v107:0, 0, v109:0, v110:0, v111:0, v112:0, v113:0, v114:0, 3, 2, 4) -> f_289(v101:0, v102:0, v103:0, v104:0, v105:0, 1, v109:0, 0, 2 * v109:0, v110:0, v111:0, v112:0, v113:0, v114:0, 3, 2, 4) :|: v101:0 > 2 && 3 < 2 * v109:0 && v109:0 < v101:0
Filtered unneeded arguments:
   f_289(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_289(x1, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_289(v101:0, v109:0) -> f_289(v101:0, 2 * v109:0) :|: 3 < 2 * v109:0 && v109:0 < v101:0 && v101:0 > 2

----------------------------------------

(20)
Obligation:
Rules:
f_289(v101:0, v109:0) -> f_289(v101:0, 2 * v109:0) :|: 3 < 2 * v109:0 && v109:0 < v101:0 && v101:0 > 2

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_289(v101:0:0, v109:0:0) -> f_289(v101:0:0, 2 * v109:0:0) :|: 3 < 2 * v109:0:0 && v109:0:0 < v101:0:0 && v101:0:0 > 2

----------------------------------------

(23) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_289(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_289(v101:0:0, v109:0:0) -> f_289(v101:0:0, 2 * v109:0:0) :|: 3 < 2 * v109:0:0 && v109:0:0 < v101:0:0 && v101:0:0 > 2
The following rules are bounded:
f_289(v101:0:0, v109:0:0) -> f_289(v101:0:0, 2 * v109:0:0) :|: 3 < 2 * v109:0:0 && v109:0:0 < v101:0:0 && v101:0:0 > 2

----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
SCC
----------------------------------------

(26) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_223(v16, v17, v18, v19, v20, v24, 1, v21, 0, v25, v26, v27, v28, v29, 3, 4) -> f_225(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) :|: 0 <= v24 && v21 = 1 && v24 = 0 && 0 = 0
f_225(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) -> f_228(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) :|: 0 = 0
f_228(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) -> f_232(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) :|: TRUE
f_232(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) -> f_236(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) :|: TRUE
f_236(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) -> f_240(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) :|: TRUE
f_240(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) -> f_244(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) :|: 0 = 0
f_244(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) -> f_248(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) :|: 0 = 0
f_248(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) -> f_252(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) :|: 0 = 0
f_252(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) -> f_256(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) :|: TRUE
f_256(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) -> f_259(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) :|: 0 = 0
f_259(1, v17, v18, v19, v20, 0, v25, v26, v27, v28, v29, 3, 4) -> f_262(1, v17, v18, v19, v20, 0, -1, v25, v26, v27, v28, v29, 3, 4) :|: 0 = 0
f_262(1, v17, v18, v19, v20, 0, -1, v25, v26, v27, v28, v29, 3, 4) -> f_265(1, v17, v18, v19, v20, 0, -1, v25, v26, v27, v28, v29, 3, 4) :|: TRUE
f_265(1, v17, v18, v19, v20, 0, -1, v25, v26, v27, v28, v29, 3, 4) -> f_267(1, v17, v18, v19, v20, 0, -1, v25, v26, v27, v28, v29, 3, 4) :|: TRUE
f_267(1, v17, v18, v19, v20, 0, -1, v25, v26, v27, v28, v29, 3, 4) -> f_220(1, v17, v18, v19, v20, 0, 1, 0, -1, v25, v26, v27, v28, v29, 3, 4) :|: TRUE
f_220(v16, v17, v18, v19, v20, v21, 1, 0, v24, v25, v26, v27, v28, v29, 3, 4) -> f_223(v16, v17, v18, v19, v20, v24, 1, v21, 0, v25, v26, v27, v28, v29, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_223(v16:0, v17:0, v18:0, v19:0, v20:0, 0, 1, 1, 0, v25:0, v26:0, v27:0, v28:0, v29:0, 3, 4) -> f_223(1, v17:0, v18:0, v19:0, v20:0, -1, 1, 0, 0, v25:0, v26:0, v27:0, v28:0, v29:0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_223(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_223(x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_223(cons_0, cons_1) -> f_223(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(27)
Obligation:
Rules:
f_223(cons_0, cons_1) -> f_223(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(28) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(29)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
