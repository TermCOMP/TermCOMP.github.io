NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/ttMDu.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 200 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [EQUIVALENT, 112 ms]
(6) IntTRS
(7) IRSNoOverapproximation [EQUIVALENT, 0 ms]
(8) IntTRS
(9) IRSToKoat [EQUIVALENT, 0 ms]
(10) Koat Problem
(11) LoAT [COMPLETE, 1523 ms]
(12) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/ttMDu.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/ttMDu.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %2
		br %4
	4:
		%5 = load %2
		%6 = icmp sgt %5 10
		br %6, %7, %19
	7:
		%8 = load %2
		%9 = icmp eq %8 25
		br %9, %10, %11
	10:
		store 30, %2
		br %11
	11:
		%12 = load %2
		%13 = icmp sle %12 30
		br %13, %14, %17
	14:
		%15 = load %2
		%16 = sub i32 %15, 1
		store %16, %2
		br %18
	17:
		store 20, %2
		br %18
	18:
		br %4
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 107 rulesP rules:
f_82 -> f_83(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_83(v1, v2, 3, 1, 4) -> f_84(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_84(v1, v3, v2, v4, 3, 1, 4) -> f_85(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_85(v1, v3, v2, v4, 0, 3, 1, 4) -> f_86(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_86(v1, v3, v2, v4, 0, 3, 1, 4) -> f_87(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_87(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_88(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_88(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_89(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_89(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_90(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: 0 = 0
f_90(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_91(v1, v3, v5, v2, v4, 0, 3, 1, 4, 11) :|: 10 < v5
f_90(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_92(v1, v3, v5, v2, v4, 0, 3, 1, 4, 10) :|: v5 <= 10
f_91(v1, v3, v5, v2, v4, 0, 3, 1, 4, 11) -> f_93(v1, v3, v5, 1, v2, v4, 0, 3, 4, 11) :|: 0 = 0
f_92(v1, v3, v5, v2, v4, 0, 3, 1, 4, 10) -> f_94(v1, v3, v5, 0, v2, v4, 3, 1, 4, 10) :|: 0 = 0
f_93(v1, v3, v5, 1, v2, v4, 0, 3, 4, 11) -> f_95(v1, v3, v5, 1, v2, v4, 0, 3, 4, 11) :|: TRUE
f_94(v1, v3, v5, 0, v2, v4, 3, 1, 4, 10) -> f_96(v1, v3, v5, 0, v2, v4, 3, 1, 4, 10) :|: TRUE
f_95(v1, v3, v5, 1, v2, v4, 0, 3, 4, 11) -> f_97(v1, v3, v5, 1, v2, v4, 0, 3, 4, 11) :|: 0 = 0
f_97(v1, v3, v5, 1, v2, v4, 0, 3, 4, 11) -> f_98(v1, v3, 25, 1, v2, v4, 0, 3, 4) :|: v5 = 25
f_97(v1, v3, v5, 1, v2, v4, 0, 3, 4, 11) -> f_99(v1, v3, v5, 1, v2, v4, 0, 3, 25, 4, 11) :|: v5 != 25
f_98(v1, v3, 25, 1, v2, v4, 0, 3, 4) -> f_100(v1, v3, 25, 1, v2, v4, 0, 3, 4) :|: 0 = 0
f_99(v1, v3, v5, 1, v2, v4, 0, 3, 25, 4, 11) -> f_101(v1, v3, v5, 1, 0, v2, v4, 3, 25, 4, 11) :|: 0 = 0
f_100(v1, v3, 25, 1, v2, v4, 0, 3, 4) -> f_102(v1, v3, 25, 1, v2, v4, 0, 3, 4) :|: TRUE
f_101(v1, v3, v5, 1, 0, v2, v4, 3, 25, 4, 11) -> f_103(v1, v3, v5, 1, 0, v2, v4, 3, 25, 4, 11) :|: TRUE
f_102(v1, v3, 25, 1, v2, v4, 0, 3, 4) -> f_104(v1, v3, 25, 1, v2, v4, 0, 30, 3, 4) :|: TRUE
f_103(v1, v3, v5, 1, 0, v2, v4, 3, 25, 4, 11) -> f_105(v1, v3, v5, 1, 0, v2, v4, 3, 25, 4, 11) :|: 0 = 0
f_104(v1, v3, 25, 1, v2, v4, 0, 30, 3, 4) -> f_106(v1, v3, 25, 1, v2, v4, 0, 30, 3, 4) :|: TRUE
f_105(v1, v3, v5, 1, 0, v2, v4, 3, 25, 4, 11) -> f_107(v1, v3, v5, 1, 0, v2, v4, 3, 25, 4, 11, 30) :|: v5 <= 30
f_105(v1, v3, v5, 1, 0, v2, v4, 3, 25, 4, 11) -> f_108(v1, v3, v5, 1, 0, v2, v4, 3, 4, 31) :|: 30 < v5
f_106(v1, v3, 25, 1, v2, v4, 0, 30, 3, 4) -> f_109(v1, v3, 25, 1, 30, v2, v4, 0, 3, 4) :|: 0 = 0
f_107(v1, v3, v5, 1, 0, v2, v4, 3, 25, 4, 11, 30) -> f_110(v1, v3, v5, 1, 0, v2, v4, 3, 25, 4, 11, 30) :|: 0 = 0
f_108(v1, v3, v5, 1, 0, v2, v4, 3, 4, 31) -> f_111(v1, v3, v5, 1, 0, v2, v4, 3, 4, 31) :|: 0 = 0
f_109(v1, v3, 25, 1, 30, v2, v4, 0, 3, 4) -> f_112(v1, v3, 25, 1, 30, v2, v4, 0, 3, 4) :|: 0 = 0
f_110(v1, v3, v5, 1, 0, v2, v4, 3, 25, 4, 11, 30) -> f_113(v1, v3, v5, 1, 0, v2, v4, 3, 25, 4, 11, 30) :|: TRUE
f_111(v1, v3, v5, 1, 0, v2, v4, 3, 4, 31) -> f_114(v1, v3, v5, 1, 0, v2, v4, 3, 4, 31) :|: TRUE
f_112(v1, v3, 25, 1, 30, v2, v4, 0, 3, 4) -> f_115(v1, v3, 25, 1, 30, v2, v4, 0, 3, 4) :|: TRUE
f_113(v1, v3, v5, 1, 0, v2, v4, 3, 25, 4, 11, 30) -> f_116(v1, v3, v5, 1, 0, v2, v4, 3, 25, 4, 11, 30) :|: 0 = 0
f_114(v1, v3, v5, 1, 0, v2, v4, 3, 4, 31) -> f_117(v1, v3, v5, 1, 0, v2, v4, 20, 3, 4, 31) :|: TRUE
f_115(v1, v3, 25, 1, 30, v2, v4, 0, 3, 4) -> f_118(v1, v3, 25, 1, 30, v2, v4, 0, 3, 4) :|: 0 = 0
f_116(v1, v3, v5, 1, 0, v2, v4, 3, 25, 4, 11, 30) -> f_119(v1, v3, v5, 1, 0, v7, v2, v4, 3, 25, 4, 11, 30, 10, 29) :|: 1 + v7 = v5 && 10 <= v7 && v7 <= 29
f_117(v1, v3, v5, 1, 0, v2, v4, 20, 3, 4, 31) -> f_120(v1, v3, v5, 1, 0, v2, v4, 20, 3, 4, 31) :|: TRUE
f_118(v1, v3, 25, 1, 30, v2, v4, 0, 3, 4) -> f_121(v1, v3, 25, 1, 30, 29, v2, v4, 0, 3, 4) :|: 0 = 0
f_119(v1, v3, v5, 1, 0, v7, v2, v4, 3, 25, 4, 11, 30, 10, 29) -> f_122(v1, v3, v5, 1, 0, v7, v2, v4, 3, 25, 4, 11, 30, 10, 29) :|: TRUE
f_120(v1, v3, v5, 1, 0, v2, v4, 20, 3, 4, 31) -> f_123(v1, v3, v5, 1, 0, v2, v4, 20, 3, 4, 31) :|: TRUE
f_121(v1, v3, 25, 1, 30, 29, v2, v4, 0, 3, 4) -> f_124(v1, v3, 25, 1, 30, 29, v2, v4, 0, 3, 4) :|: TRUE
f_122(v1, v3, v5, 1, 0, v7, v2, v4, 3, 25, 4, 11, 30, 10, 29) -> f_125(v1, v3, v5, 1, 0, v7, v2, v4, 3, 25, 4, 11, 30, 10, 29) :|: TRUE
f_123(v1, v3, v5, 1, 0, v2, v4, 20, 3, 4, 31) -> f_126(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) :|: 0 = 0
f_124(v1, v3, 25, 1, 30, 29, v2, v4, 0, 3, 4) -> f_127(v1, v3, 25, 1, 30, 29, v2, v4, 0, 3, 4) :|: TRUE
f_125(v1, v3, v5, 1, 0, v7, v2, v4, 3, 25, 4, 11, 30, 10, 29) -> f_128(v1, v3, v5, 1, 0, v7, v2, v4, 3, 25, 4, 11, 30, 10, 29) :|: TRUE
f_126(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) -> f_129(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) :|: 0 = 0
f_127(v1, v3, 25, 1, 30, 29, v2, v4, 0, 3, 4) -> f_249(v1, v3, 25, 25, 1, 30, 29, v2, v4, 0, 3, 4) :|: TRUE
f_128(v1, v3, v5, 1, 0, v7, v2, v4, 3, 25, 4, 11, 30, 10, 29) -> f_176(v1, v3, v5, v5, 1, 0, v7, v2, v4, 3, 25, 11, 30, 10, 29, 4) :|: TRUE
f_129(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) -> f_132(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) :|: TRUE
f_132(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) -> f_136(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) :|: 0 = 0
f_136(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) -> f_140(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) :|: 0 = 0
f_140(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) -> f_144(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) :|: TRUE
f_144(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) -> f_147(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) :|: 0 = 0
f_147(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) -> f_151(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) :|: 0 = 0
f_151(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) -> f_155(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) :|: TRUE
f_155(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) -> f_159(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) :|: 0 = 0
f_159(v1, v3, v5, 20, 1, 0, v2, v4, 3, 4, 31) -> f_163(v1, v3, v5, 20, 1, 0, 19, v2, v4, 3, 4, 31) :|: 0 = 0
f_163(v1, v3, v5, 20, 1, 0, 19, v2, v4, 3, 4, 31) -> f_167(v1, v3, v5, 20, 1, 0, 19, v2, v4, 3, 4, 31) :|: TRUE
f_167(v1, v3, v5, 20, 1, 0, 19, v2, v4, 3, 4, 31) -> f_171(v1, v3, v5, 20, 1, 0, 19, v2, v4, 3, 4, 31) :|: TRUE
f_171(v1, v3, v5, 20, 1, 0, 19, v2, v4, 3, 4, 31) -> f_180(v1, v3, v5, 20, 1, 0, 19, v2, v4, 3, 25, 20, 29, 19, 28, 4) :|: TRUE
f_176(v87, v88, v89, v90, 1, 0, v93, v94, v95, 3, 25, 11, 30, 10, 29, 4) -> f_184(v87, v88, v89, v90, 1, 0, v93, v94, v95, 3, 11, 30, 10, 29, 4) :|: TRUE
f_180(v115, v116, v117, v118, 1, 0, v121, v122, v123, 3, 25, 20, 29, 19, 28, 4) -> f_214(v115, v116, v117, v118, 1, 0, v121, v122, v123, 3, 11, 29, 10, 28, 4) :|: TRUE
f_184(v135, v136, v137, v138, 1, 0, v141, v142, v143, 3, 11, 30, 10, 29, 4) -> f_217(v135, v136, v137, v138, 1, 0, v141, v142, v143, 3, 11, 30, 10, 29, 4) :|: TRUE
f_214(v216, v217, v218, v219, 1, 0, v222, v223, v224, 3, 11, 29, 10, 28, 4) -> f_216(v216, v217, v218, v219, 1, 0, v222, v223, v224, 3, 11, 29, 10, 28, 4) :|: TRUE
f_216(v216, v217, v218, v219, 1, 0, v222, v223, v224, 3, 11, 29, 10, 28, 4) -> f_217(v216, v217, v218, v219, 1, 0, v222, v223, v224, 3, 11, 30, 10, 29, 4) :|: TRUE
f_217(v236, v237, v238, v239, 1, 0, v242, v243, v244, 3, 11, 30, 10, 29, 4) -> f_218(v236, v237, v238, v242, 1, v239, 0, v243, v244, 3, 11, 30, 10, 29, 4) :|: 0 = 0
f_218(v236, v237, v238, v242, 1, v239, 0, v243, v244, 3, 11, 30, 10, 29, 4) -> f_219(v236, v237, v238, v242, 1, v239, 0, v243, v244, 3, 12, 30, 11, 29, 4) :|: 10 < v242 && 12 <= v239
f_218(v236, v237, v238, v242, 1, v239, 0, v243, v244, 3, 11, 30, 10, 29, 4) -> f_220(v236, v237, v238, 10, 1, 11, 0, v243, v244, 3, 4) :|: v242 <= 10 && v239 = 11 && v242 = 10 && 0 = 0
f_219(v236, v237, v238, v242, 1, v239, 0, v243, v244, 3, 12, 30, 11, 29, 4) -> f_221(v236, v237, v238, v242, 1, v239, 0, v243, v244, 3, 12, 30, 11, 29, 4) :|: 0 = 0
f_220(v236, v237, v238, 10, 1, 11, 0, v243, v244, 3, 4) -> f_222(v236, v237, v238, 10, 0, 11, 1, v243, v244, 3, 4) :|: 0 = 0
f_221(v236, v237, v238, v242, 1, v239, 0, v243, v244, 3, 12, 30, 11, 29, 4) -> f_223(v236, v237, v238, v242, 1, v239, 0, v243, v244, 3, 12, 30, 11, 29, 4) :|: TRUE
f_222(v236, v237, v238, 10, 0, 11, 1, v243, v244, 3, 4) -> f_224(v236, v237, v238, 10, 0, 11, 1, v243, v244, 3, 4) :|: TRUE
f_223(v236, v237, v238, v242, 1, v239, 0, v243, v244, 3, 12, 30, 11, 29, 4) -> f_225(v236, v237, v238, v242, 1, 0, v239, v243, v244, 3, 12, 30, 11, 29, 4) :|: 0 = 0
f_225(v236, v237, v238, v242, 1, 0, v239, v243, v244, 3, 12, 30, 11, 29, 4) -> f_226(v236, v237, v238, 25, 1, 0, 26, v243, v244, 3, 4) :|: v242 = 25
f_225(v236, v237, v238, v242, 1, 0, v239, v243, v244, 3, 12, 30, 11, 29, 4) -> f_227(v236, v237, v238, v242, 1, 0, v239, v243, v244, 3, 25, 12, 30, 11, 29, 4) :|: v242 != 25
f_226(v236, v237, v238, 25, 1, 0, 26, v243, v244, 3, 4) -> f_228(v236, v237, v238, 25, 1, 26, v243, v244, 0, 3, 4) :|: 0 = 0
f_227(v236, v237, v238, v242, 1, 0, v239, v243, v244, 3, 25, 12, 30, 11, 29, 4) -> f_229(v236, v237, v238, v242, 1, 0, v239, v243, v244, 3, 25, 12, 30, 11, 29, 4) :|: 0 = 0
f_228(v236, v237, v238, 25, 1, 26, v243, v244, 0, 3, 4) -> f_230(v236, v237, v238, 25, 1, 26, v243, v244, 0, 3, 4) :|: TRUE
f_229(v236, v237, v238, v242, 1, 0, v239, v243, v244, 3, 25, 12, 30, 11, 29, 4) -> f_231(v236, v237, v238, v242, 1, 0, v239, v243, v244, 3, 25, 12, 30, 11, 29, 4) :|: TRUE
f_230(v236, v237, v238, 25, 1, 26, v243, v244, 0, 3, 4) -> f_233(v236, v237, v238, 25, 1, 26, v243, v244, 0, 30, 3, 4) :|: TRUE
f_231(v236, v237, v238, v242, 1, 0, v239, v243, v244, 3, 25, 12, 30, 11, 29, 4) -> f_232(v236, v237, v238, v242, 1, 0, v239, v243, v244, 3, 25, 11, 29, 12, 30, 4) :|: TRUE
f_232(v261, v262, v263, v264, 1, 0, v267, v268, v269, 3, 25, 11, 29, 12, 30, 4) -> f_234(v261, v262, v263, v264, 1, 0, v267, v268, v269, 3, 25, 11, 29, 12, 30, 4) :|: 0 = 0
f_233(v236, v237, v238, 25, 1, 26, v243, v244, 0, 30, 3, 4) -> f_235(v236, v237, v238, 25, 1, 26, v243, v244, 0, 30, 3, 4) :|: TRUE
f_234(v261, v262, v263, v264, 1, 0, v267, v268, v269, 3, 25, 11, 29, 12, 30, 4) -> f_236(v261, v262, v263, v264, 1, 0, v267, v268, v269, 3, 25, 11, 29, 12, 30, 4) :|: 0 = 0
f_235(v236, v237, v238, 25, 1, 26, v243, v244, 0, 30, 3, 4) -> f_237(v236, v237, v238, 25, 1, 30, 26, v243, v244, 0, 3, 4) :|: 0 = 0
f_236(v261, v262, v263, v264, 1, 0, v267, v268, v269, 3, 25, 11, 29, 12, 30, 4) -> f_238(v261, v262, v263, v264, 1, 0, v267, v268, v269, 3, 25, 11, 29, 12, 30, 4) :|: TRUE
f_237(v236, v237, v238, 25, 1, 30, 26, v243, v244, 0, 3, 4) -> f_239(v236, v237, v238, 25, 1, 30, 26, v243, v244, 0, 3, 4) :|: 0 = 0
f_238(v261, v262, v263, v264, 1, 0, v267, v268, v269, 3, 25, 11, 29, 12, 30, 4) -> f_240(v261, v262, v263, v264, 1, 0, v268, v269, 3, 25, 11, 29, 4) :|: 0 = 0
f_239(v236, v237, v238, 25, 1, 30, 26, v243, v244, 0, 3, 4) -> f_241(v236, v237, v238, 25, 1, 30, 26, v243, v244, 0, 3, 4) :|: TRUE
f_240(v261, v262, v263, v264, 1, 0, v268, v269, 3, 25, 11, 29, 4) -> f_242(v261, v262, v263, v264, 1, 0, v292, v268, v269, 3, 25, 11, 29, 4, 10, 28) :|: 1 + v292 = v264 && 10 <= v292 && v292 <= 28
f_241(v236, v237, v238, 25, 1, 30, 26, v243, v244, 0, 3, 4) -> f_243(v236, v237, v238, 25, 1, 30, v243, v244, 0, 3, 4) :|: 0 = 0
f_242(v261, v262, v263, v264, 1, 0, v292, v268, v269, 3, 25, 11, 29, 4, 10, 28) -> f_244(v261, v262, v263, v264, 1, 0, v292, v268, v269, 3, 25, 11, 29, 4, 10, 28) :|: TRUE
f_243(v236, v237, v238, 25, 1, 30, v243, v244, 0, 3, 4) -> f_245(v236, v237, v238, 25, 1, 30, 29, v243, v244, 0, 3, 4) :|: 0 = 0
f_244(v261, v262, v263, v264, 1, 0, v292, v268, v269, 3, 25, 11, 29, 4, 10, 28) -> f_246(v261, v262, v263, v264, 1, 0, v292, v268, v269, 3, 25, 11, 29, 4, 10, 28) :|: TRUE
f_245(v236, v237, v238, 25, 1, 30, 29, v243, v244, 0, 3, 4) -> f_247(v236, v237, v238, 25, 1, 30, 29, v243, v244, 0, 3, 4) :|: TRUE
f_246(v261, v262, v263, v264, 1, 0, v292, v268, v269, 3, 25, 11, 29, 4, 10, 28) -> f_214(v261, v262, v263, v264, 1, 0, v292, v268, v269, 3, 11, 29, 10, 28, 4) :|: TRUE
f_247(v236, v237, v238, 25, 1, 30, 29, v243, v244, 0, 3, 4) -> f_248(v236, v237, v238, 25, 1, 30, 29, v243, v244, 0, 3, 4) :|: TRUE
f_248(v236, v237, v238, 25, 1, 30, 29, v243, v244, 0, 3, 4) -> f_249(v236, v237, v238, 25, 1, 30, 29, v243, v244, 0, 3, 4) :|: TRUE
f_249(v322, v323, v324, 25, 1, 30, 29, v329, v330, 0, 3, 4) -> f_250(v322, v323, v324, 25, 1, 30, 29, v329, v330, 0, 3, 4) :|: TRUE
f_250(v322, v323, v324, 25, 1, 30, 29, v329, v330, 0, 3, 4) -> f_251(v322, v323, v324, 29, 1, 25, 30, v329, v330, 0, 3, 4) :|: 0 = 0
f_251(v322, v323, v324, 29, 1, 25, 30, v329, v330, 0, 3, 4) -> f_252(v322, v323, v324, 29, 1, 25, 30, v329, v330, 0, 3, 4) :|: 0 = 0
f_252(v322, v323, v324, 29, 1, 25, 30, v329, v330, 0, 3, 4) -> f_253(v322, v323, v324, 29, 1, 25, 30, v329, v330, 0, 3, 4) :|: TRUE
f_253(v322, v323, v324, 29, 1, 25, 30, v329, v330, 0, 3, 4) -> f_254(v322, v323, v324, 29, 1, 30, v329, v330, 0, 3, 4) :|: 0 = 0
f_254(v322, v323, v324, 29, 1, 30, v329, v330, 0, 3, 4) -> f_255(v322, v323, v324, 29, 1, 0, 30, v329, v330, 3, 4) :|: 0 = 0
f_255(v322, v323, v324, 29, 1, 0, 30, v329, v330, 3, 4) -> f_256(v322, v323, v324, 29, 1, 0, 30, v329, v330, 3, 4) :|: TRUE
f_256(v322, v323, v324, 29, 1, 0, 30, v329, v330, 3, 4) -> f_232(v322, v323, v324, 29, 1, 0, 30, v329, v330, 3, 25, 11, 29, 12, 30, 4) :|: TRUE
Combined rules. Obtained 10 rulesP rules:
f_82 -> f_218(v1:0, v3:0, v5:0, 19, 1, 20, 0, 3 + v1:0, 3 + v3:0, 3, 11, 30, 10, 29, 4) :|: v5:0 > 30 && v3:0 > 0 && v1:0 > 0 && v5:0 < 25
f_82 -> f_218(v1:0, v3:0, v5:0, 19, 1, 20, 0, 3 + v1:0, 3 + v3:0, 3, 11, 30, 10, 29, 4) :|: v5:0 > 30 && v3:0 > 0 && v1:0 > 0
f_218(v236:0, v237:0, v238:0, 1 + v292:0, 1, v239:0, 0, v243:0, v244:0, 3, 11, 30, 10, 29, 4) -> f_218(v236:0, v237:0, v238:0, v292:0, 1, 1 + v292:0, 0, v243:0, v244:0, 3, 11, 30, 10, 29, 4) :|: v239:0 > 11 && v292:0 > 9 && v292:0 < 24 && v292:0 < 29
f_218(v236:0, v237:0, v238:0, 1 + v292:0, 1, v239:0, 0, v243:0, v244:0, 3, 11, 30, 10, 29, 4) -> f_218(v236:0, v237:0, v238:0, v292:0, 1, 1 + v292:0, 0, v243:0, v244:0, 3, 11, 30, 10, 29, 4) :|: v292:0 > 24 && v292:0 < 29 && v239:0 > 11
f_82 -> f_96(v1:0, v3:0, v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4, 10) :|: v3:0 > 0 && v1:0 > 0 && v5:0 < 11
f_82 -> f_218(v1:0, v3:0, 25, 28, 1, 29, 0, 3 + v1:0, 3 + v3:0, 3, 11, 30, 10, 29, 4) :|: v3:0 > 0 && v1:0 > 0
f_82 -> f_218(v1:0, v3:0, 1 + v7:0, v7:0, 1, 1 + v7:0, 0, 3 + v1:0, 3 + v3:0, 3, 11, 30, 10, 29, 4) :|: v3:0 > 0 && v1:0 > 0 && v7:0 > 9 && v7:0 < 24 && v7:0 < 30
f_82 -> f_218(v1:0, v3:0, 1 + v7:0, v7:0, 1, 1 + v7:0, 0, 3 + v1:0, 3 + v3:0, 3, 11, 30, 10, 29, 4) :|: v7:0 > 24 && v3:0 > 0 && v1:0 > 0 && v7:0 < 30
f_218(v236:0, v237:0, v238:0, 10, 1, 11, 0, v243:0, v244:0, 3, 11, 30, 10, 29, 4) -> f_224(v236:0, v237:0, v238:0, 10, 0, 11, 1, v243:0, v244:0, 3, 4) :|: TRUE
f_218(v236:0, v237:0, v238:0, 25, 1, v239:0, 0, v243:0, v244:0, 3, 11, 30, 10, 29, 4) -> f_218(v236:0, v237:0, v238:0, 28, 1, 29, 0, v243:0, v244:0, 3, 11, 30, 10, 29, 4) :|: v239:0 > 11
Filtered unneeded arguments:
   f_218(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_218(x4, x6)
Removed division, modulo operations, cleaned up constraints. Obtained 9 rules.P rules:
f_82 -> f_218(19, 20) :|: TRUE
f_218(sum~cons_1~v292:0, v239:0) -> f_218(v292:0, 1 + v292:0) :|: v292:0 > 9 && v239:0 > 11 && v292:0 < 29 && v292:0 < 24 && sum~cons_1~v292:0 = 1 + v292:0
f_218(sum~cons_1~v292:0, v239:0) -> f_218(v292:0, 1 + v292:0) :|: v292:0 < 29 && v239:0 > 11 && v292:0 > 24 && sum~cons_1~v292:0 = 1 + v292:0
f_82 -> f_96(v1:0, v3:0, v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4, 10) :|: v1:0 > 0 && v5:0 < 11 && v3:0 > 0
f_82 -> f_218(28, 29) :|: TRUE
f_82 -> f_218(v7:0, 1 + v7:0) :|: v7:0 < 24 && v7:0 < 30 && v7:0 > 9
f_82 -> f_218(v7:0, 1 + v7:0) :|: v7:0 > 24 && v7:0 < 30
f_218(cons_10, cons_11) -> f_224(v236:0, v237:0, v238:0, 10, 0, 11, 1, v243:0, v244:0, 3, 4) :|: TRUE && cons_10 = 10 && cons_11 = 11
f_218(cons_25, v239:0) -> f_218(28, 29) :|: v239:0 > 11 && cons_25 = 25

----------------------------------------

(6)
Obligation:
Rules:
f_82 -> f_218(19, 20) :|: TRUE
f_218(sum~cons_1~v292:0, v239:0) -> f_218(v292:0, 1 + v292:0) :|: v292:0 > 9 && v239:0 > 11 && v292:0 < 29 && v292:0 < 24 && sum~cons_1~v292:0 = 1 + v292:0
f_218(x, x1) -> f_218(x2, 1 + x2) :|: x2 < 29 && x1 > 11 && x2 > 24 && x = 1 + x2
f_82 -> f_96(v1:0, v3:0, v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4, 10) :|: v1:0 > 0 && v5:0 < 11 && v3:0 > 0
f_82 -> f_218(28, 29) :|: TRUE
f_82 -> f_218(v7:0, 1 + v7:0) :|: v7:0 < 24 && v7:0 < 30 && v7:0 > 9
f_82 -> f_218(x3, 1 + x3) :|: x3 > 24 && x3 < 30
f_218(cons_10, cons_11) -> f_224(v236:0, v237:0, v238:0, 10, 0, 11, 1, v243:0, v244:0, 3, 4) :|: TRUE && cons_10 = 10 && cons_11 = 11
f_218(x4, x5) -> f_218(28, 29) :|: x5 > 11 && x4 = 25
Start term: f_82

----------------------------------------

(7) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination can continue
----------------------------------------

(8)
Obligation:
Rules:
f_82 -> f_218(19, 20) :|: TRUE
f_218(sum~cons_1~v292:0, v239:0) -> f_218(v292:0, 1 + v292:0) :|: v292:0 > 9 && v239:0 > 11 && v292:0 < 29 && v292:0 < 24 && sum~cons_1~v292:0 = 1 + v292:0
f_218(x, x1) -> f_218(x2, 1 + x2) :|: x2 < 29 && x1 > 11 && x2 > 24 && x = 1 + x2
f_82 -> f_96(v1:0, v3:0, v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4, 10) :|: v1:0 > 0 && v5:0 < 11 && v3:0 > 0
f_82 -> f_218(28, 29) :|: TRUE
f_82 -> f_218(v7:0, 1 + v7:0) :|: v7:0 < 24 && v7:0 < 30 && v7:0 > 9
f_82 -> f_218(x3, 1 + x3) :|: x3 > 24 && x3 < 30
f_218(cons_10, cons_11) -> f_224(v236:0, v237:0, v238:0, 10, 0, 11, 1, v243:0, v244:0, 3, 4) :|: TRUE && cons_10 = 10 && cons_11 = 11
f_218(x4, x5) -> f_218(28, 29) :|: x5 > 11 && x4 = 25
Start term: f_82

----------------------------------------

(9) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(10)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_82))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x40 x41 x39 x151 x150 x35 x36 x152 x37 x38 x31 x32 x33 x34 k18 k19 x30 x70 x140 x68 x142 x69 x141 x144 x143 x64 x146 x65 x145 x66 x148 x67 x147 x60 x61 x149 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x131 x58 x130 x59 x133 x132 x53 x135 x54 x134 x55 x137 x56 x136 x139 x50 x138 x51 x52 x90 x91 x92 x120 x122 x121 x86 x124 x87 x123 x88 x126 x89 x125 x x82 x128 x83 x127 x84 x85 x129 x80 x81 x79 x111 x110 x75 x113 x76 x112 x'' x77 x115 x78 x114 x71 x117 x72 x116 x73 x119 x74 x118 k14 k15 x109 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x7 x27 x20 x102 x21 x101 x22 x104 x23 x103 x106 x1 x105 x108 x107 x' x17 x18 x19 x13 x14 x15 x16 x97 x10 x98 x11 x99 x12 x93 x94 x95 x96)
(RULES
  f_218(k3, k6, x86, x87, x88, x89, x90, x91, x92, x93, x94) -> f_224(k7, k4, k5, 10, 0, 11, 1, k10, k9, 3, 4) :|: 0 = 0 && k3 = 10 && k6 = 11
  f_82(x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58) -> f_218(k16, 1 + k16, x59, x60, x61, x62, x63, x64, x65, x66, x67) :|: k16 > 24 && k16 < 30
  f_218(k11, k13, x95, x96, x97, x98, x99, x100, x101, x102, x103) -> f_218(28, 29, x104, x105, x106, x107, x108, x109, x110, x111, x112) :|: k13 > 11 && k11 = 25
  f_82(x113, x114, x115, x116, x117, x118, x119, x120, x121, x122, x123) -> f_218(k17, 1 + k17, x124, x125, x126, x127, x128, x129, x130, x131, x132) :|: k17 < 24 && k17 < 30 && k17 > 9
  f_218(k0, k1, x68, x69, x70, x71, x72, x73, x74, x75, x76) -> f_218(k2, 1 + k2, x77, x78, x79, x80, x81, x82, x83, x84, x85) :|: k2 > 9 && k1 > 11 && k2 < 29 && k2 < 24 && k0 = 1 + k2
  f_82(x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_218(19, 20, x21, x22, x23, x24, x25, x26, x27, x28, x29) :|: 0 = 0
  f_218(k18, k19, x30, x31, x32, x33, x34, x35, x36, x37, x38) -> f_218(k14, 1 + k14, x39, x40, x41, x42, x43, x44, x45, x46, x47) :|: k14 < 29 && k19 > 11 && k14 > 24 && k18 = 1 + k14
  f_82(x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8) -> f_96(k8, k12, k15, 0, 3 + k8, 3 + k12, 3, 1, 4, 10, x9) :|: k8 > 0 && k15 < 11 && k12 > 0
  f_82(x133, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143) -> f_218(28, 29, x144, x145, x146, x147, x148, x149, x150, x151, x152) :|: 0 = 0
)

----------------------------------------

(11) LoAT (COMPLETE)
LoAT was called with the following command:

/aprove/bin/loat --plain --nonterm --proof-level 3 /tmp/aprove.InputModules.Programs.loat15501585334349653974.koat 

LoAT's output was:


### Pre-processing the ITS problem ###

Initial linear ITS problem
   Start location: f_82
      0: f_218 -> f_224 : k0'=free_3, k1'=free_4, k10'=free_1, k11'=10, k12'=0, k13'=11, k14'=1, k15'=free, k16'=free_2, k17'=3, k18'=4, [ 0==0 && k3==10 && k6==11 ], cost: 1
      2: f_218 -> f_218 : k3'=28, k6'=29, x86'=free_21, x87'=free_15, x88'=free_18, x89'=free_20, x90'=free_23, x91'=free_17, x92'=free_22, x93'=free_16, x94'=free_19, [ k6>11 && k3==25 ], cost: 1
      4: f_218 -> f_218 : k3'=free_37, k6'=1+free_37, x86'=free_42, x87'=free_35, x88'=free_39, x89'=free_34, x90'=free_38, x91'=free_41, x92'=free_36, x93'=free_40, x94'=free_43, [ free_37>9 && k6>11 && free_37<29 && free_37<24 && k3==1+free_37 ], cost: 1
      6: f_218 -> f_218 : k3'=free_58, k6'=1+free_58, x86'=free_55, x87'=free_61, x88'=free_54, x89'=free_57, x90'=free_60, x91'=free_53, x92'=free_56, x93'=free_59, x94'=free_62, [ free_58<29 && k6>11 && free_58>24 && k3==1+free_58 ], cost: 1
      1: f_82 -> f_218 : k3'=free_5, k6'=1+free_5, x86'=free_12, x87'=free_8, x88'=free_11, x89'=free_14, x90'=free_7, x91'=free_10, x92'=free_13, x93'=free_6, x94'=free_9, [ free_5>24 && free_5<30 ], cost: 1
      3: f_82 -> f_218 : k3'=free_28, k6'=1+free_28, x86'=free_30, x87'=free_33, x88'=free_26, x89'=free_29, x90'=free_32, x91'=free_25, x92'=free_31, x93'=free_24, x94'=free_27, [ free_28<24 && free_28<30 && free_28>9 ], cost: 1
      5: f_82 -> f_218 : k3'=19, k6'=20, x86'=free_45, x87'=free_47, x88'=free_50, x89'=free_44, x90'=free_49, x91'=free_52, x92'=free_46, x93'=free_48, x94'=free_51, [ 0==0 ], cost: 1
      7: f_82 -> f_96 : k0'=free_63, k1'=free_66, k10'=free_65, k11'=0, k12'=3+free_63, k13'=3+free_66, k14'=3, k15'=1, k16'=4, k17'=10, k18'=free_64, [ free_63>0 && free_65<11 && free_66>0 ], cost: 1
      8: f_82 -> f_218 : k3'=28, k6'=29, x86'=free_68, x87'=free_71, x88'=free_74, x89'=free_67, x90'=free_70, x91'=free_73, x92'=free_69, x93'=free_72, x94'=free_75, [ 0==0 ], cost: 1

Checking for constant complexity:
   The following rule is satisfiable with cost >= 1, yielding constant complexity:
      1: f_82 -> f_218 : k3'=free_5, k6'=1+free_5, x86'=free_12, x87'=free_8, x88'=free_11, x89'=free_14, x90'=free_7, x91'=free_10, x92'=free_13, x93'=free_6, x94'=free_9, [ free_5>24 && free_5<30 ], cost: 1

Removed unreachable and leaf rules:
   Start location: f_82
      2: f_218 -> f_218 : k3'=28, k6'=29, x86'=free_21, x87'=free_15, x88'=free_18, x89'=free_20, x90'=free_23, x91'=free_17, x92'=free_22, x93'=free_16, x94'=free_19, [ k6>11 && k3==25 ], cost: 1
      4: f_218 -> f_218 : k3'=free_37, k6'=1+free_37, x86'=free_42, x87'=free_35, x88'=free_39, x89'=free_34, x90'=free_38, x91'=free_41, x92'=free_36, x93'=free_40, x94'=free_43, [ free_37>9 && k6>11 && free_37<29 && free_37<24 && k3==1+free_37 ], cost: 1
      6: f_218 -> f_218 : k3'=free_58, k6'=1+free_58, x86'=free_55, x87'=free_61, x88'=free_54, x89'=free_57, x90'=free_60, x91'=free_53, x92'=free_56, x93'=free_59, x94'=free_62, [ free_58<29 && k6>11 && free_58>24 && k3==1+free_58 ], cost: 1
      1: f_82 -> f_218 : k3'=free_5, k6'=1+free_5, x86'=free_12, x87'=free_8, x88'=free_11, x89'=free_14, x90'=free_7, x91'=free_10, x92'=free_13, x93'=free_6, x94'=free_9, [ free_5>24 && free_5<30 ], cost: 1
      3: f_82 -> f_218 : k3'=free_28, k6'=1+free_28, x86'=free_30, x87'=free_33, x88'=free_26, x89'=free_29, x90'=free_32, x91'=free_25, x92'=free_31, x93'=free_24, x94'=free_27, [ free_28<24 && free_28<30 && free_28>9 ], cost: 1
      5: f_82 -> f_218 : k3'=19, k6'=20, x86'=free_45, x87'=free_47, x88'=free_50, x89'=free_44, x90'=free_49, x91'=free_52, x92'=free_46, x93'=free_48, x94'=free_51, [ 0==0 ], cost: 1
      8: f_82 -> f_218 : k3'=28, k6'=29, x86'=free_68, x87'=free_71, x88'=free_74, x89'=free_67, x90'=free_70, x91'=free_73, x92'=free_69, x93'=free_72, x94'=free_75, [ 0==0 ], cost: 1

Simplified all rules, resulting in:
   Start location: f_82
      2: f_218 -> f_218 : k3'=28, k6'=29, x86'=free_21, x87'=free_15, x88'=free_18, x89'=free_20, x90'=free_23, x91'=free_17, x92'=free_22, x93'=free_16, x94'=free_19, [ k6>11 && k3==25 ], cost: 1
      4: f_218 -> f_218 : k3'=-1+k3, k6'=k3, x86'=free_42, x87'=free_35, x88'=free_39, x89'=free_34, x90'=free_38, x91'=free_41, x92'=free_36, x93'=free_40, x94'=free_43, [ -1+k3>9 && k6>11 && -1+k3<24 ], cost: 1
      6: f_218 -> f_218 : k3'=-1+k3, k6'=k3, x86'=free_55, x87'=free_61, x88'=free_54, x89'=free_57, x90'=free_60, x91'=free_53, x92'=free_56, x93'=free_59, x94'=free_62, [ -1+k3<29 && k6>11 && -1+k3>24 ], cost: 1
      1: f_82 -> f_218 : k3'=free_5, k6'=1+free_5, x86'=free_12, x87'=free_8, x88'=free_11, x89'=free_14, x90'=free_7, x91'=free_10, x92'=free_13, x93'=free_6, x94'=free_9, [ free_5>24 && free_5<30 ], cost: 1
      3: f_82 -> f_218 : k3'=free_28, k6'=1+free_28, x86'=free_30, x87'=free_33, x88'=free_26, x89'=free_29, x90'=free_32, x91'=free_25, x92'=free_31, x93'=free_24, x94'=free_27, [ free_28<24 && free_28>9 ], cost: 1
      5: f_82 -> f_218 : k3'=19, k6'=20, x86'=free_45, x87'=free_47, x88'=free_50, x89'=free_44, x90'=free_49, x91'=free_52, x92'=free_46, x93'=free_48, x94'=free_51, [], cost: 1
      8: f_82 -> f_218 : k3'=28, k6'=29, x86'=free_68, x87'=free_71, x88'=free_74, x89'=free_67, x90'=free_70, x91'=free_73, x92'=free_69, x93'=free_72, x94'=free_75, [], cost: 1

### Simplification by acceleration and chaining ###

Accelerating simple loops of location 0.
   Accelerating the following rules:
      2: f_218 -> f_218 : k3'=28, k6'=29, x86'=free_21, x87'=free_15, x88'=free_18, x89'=free_20, x90'=free_23, x91'=free_17, x92'=free_22, x93'=free_16, x94'=free_19, [ k6>11 && k3==25 ], cost: 1
      4: f_218 -> f_218 : k3'=-1+k3, k6'=k3, x86'=free_42, x87'=free_35, x88'=free_39, x89'=free_34, x90'=free_38, x91'=free_41, x92'=free_36, x93'=free_40, x94'=free_43, [ -1+k3>9 && k6>11 && -1+k3<24 ], cost: 1
      6: f_218 -> f_218 : k3'=-1+k3, k6'=k3, x86'=free_55, x87'=free_61, x88'=free_54, x89'=free_57, x90'=free_60, x91'=free_53, x92'=free_56, x93'=free_59, x94'=free_62, [ -1+k3<29 && k6>11 && -1+k3>24 ], cost: 1

   Failed to prove monotonicity of the guard of rule 2.
   Failed to prove monotonicity of the guard of rule 4.
   Accelerated rule 6 with backward acceleration, yielding the new rule 9.
   Nested simple loops 2 (outer loop) and 9 (inner loop) with Rule(0 | -1+k3<29, k6>11, -25+k3>=1, | NONTERM || 4 | ), resulting in the new rules: 10, 11.
   Removing the simple loops: 2 6.

Accelerated all simple loops using metering functions (where possible):
   Start location: f_82
      4: f_218 -> f_218 : k3'=-1+k3, k6'=k3, x86'=free_42, x87'=free_35, x88'=free_39, x89'=free_34, x90'=free_38, x91'=free_41, x92'=free_36, x93'=free_40, x94'=free_43, [ -1+k3>9 && k6>11 && -1+k3<24 ], cost: 1
      9: f_218 -> f_218 : k3'=25, k6'=26, x86'=free_55, x87'=free_61, x88'=free_54, x89'=free_57, x90'=free_60, x91'=free_53, x92'=free_56, x93'=free_59, x94'=free_62, [ -1+k3<29 && k6>11 && -25+k3>=1 ], cost: -25+k3
     10: f_218 -> [4] : [ -1+k3<29 && k6>11 && -25+k3>=1 ], cost: NONTERM
     11: f_218 -> [4] : [ k6>11 && k3==25 ], cost: NONTERM
      1: f_82 -> f_218 : k3'=free_5, k6'=1+free_5, x86'=free_12, x87'=free_8, x88'=free_11, x89'=free_14, x90'=free_7, x91'=free_10, x92'=free_13, x93'=free_6, x94'=free_9, [ free_5>24 && free_5<30 ], cost: 1
      3: f_82 -> f_218 : k3'=free_28, k6'=1+free_28, x86'=free_30, x87'=free_33, x88'=free_26, x89'=free_29, x90'=free_32, x91'=free_25, x92'=free_31, x93'=free_24, x94'=free_27, [ free_28<24 && free_28>9 ], cost: 1
      5: f_82 -> f_218 : k3'=19, k6'=20, x86'=free_45, x87'=free_47, x88'=free_50, x89'=free_44, x90'=free_49, x91'=free_52, x92'=free_46, x93'=free_48, x94'=free_51, [], cost: 1
      8: f_82 -> f_218 : k3'=28, k6'=29, x86'=free_68, x87'=free_71, x88'=free_74, x89'=free_67, x90'=free_70, x91'=free_73, x92'=free_69, x93'=free_72, x94'=free_75, [], cost: 1

Chaining 4 accelerated rules with incoming rules:
   Chained incoming rule 3 with accelerated rule 4 to new rule 12.
   Chained incoming rule 5 with accelerated rule 4 to new rule 13.
   Removing accelerated rule 4.
   Chained incoming rule 1 with accelerated rule 9 to new rule 14.
   Chained incoming rule 8 with accelerated rule 9 to new rule 15.
   Removing accelerated rule 9.
   Chained incoming rule 1 with accelerated rule 10 to new rule 16.
   Chained incoming rule 8 with accelerated rule 10 to new rule 17.
   Removing accelerated rule 10.
   Chained incoming rule 1 with accelerated rule 11 to new rule 18.
   Removing accelerated rule 11.

Chained accelerated rules (with incoming rules):
   Start location: f_82
      1: f_82 -> f_218 : k3'=free_5, k6'=1+free_5, x86'=free_12, x87'=free_8, x88'=free_11, x89'=free_14, x90'=free_7, x91'=free_10, x92'=free_13, x93'=free_6, x94'=free_9, [ free_5>24 && free_5<30 ], cost: 1
      3: f_82 -> f_218 : k3'=free_28, k6'=1+free_28, x86'=free_30, x87'=free_33, x88'=free_26, x89'=free_29, x90'=free_32, x91'=free_25, x92'=free_31, x93'=free_24, x94'=free_27, [ free_28<24 && free_28>9 ], cost: 1
      5: f_82 -> f_218 : k3'=19, k6'=20, x86'=free_45, x87'=free_47, x88'=free_50, x89'=free_44, x90'=free_49, x91'=free_52, x92'=free_46, x93'=free_48, x94'=free_51, [], cost: 1
      8: f_82 -> f_218 : k3'=28, k6'=29, x86'=free_68, x87'=free_71, x88'=free_74, x89'=free_67, x90'=free_70, x91'=free_73, x92'=free_69, x93'=free_72, x94'=free_75, [], cost: 1
     12: f_82 -> f_218 : k3'=-1+free_28, k6'=free_28, x86'=free_42, x87'=free_35, x88'=free_39, x89'=free_34, x90'=free_38, x91'=free_41, x92'=free_36, x93'=free_40, x94'=free_43, [ free_28<24 && -1+free_28>9 ], cost: 2
     13: f_82 -> f_218 : k3'=18, k6'=19, x86'=free_42, x87'=free_35, x88'=free_39, x89'=free_34, x90'=free_38, x91'=free_41, x92'=free_36, x93'=free_40, x94'=free_43, [], cost: 2
     14: f_82 -> f_218 : k3'=25, k6'=26, x86'=free_55, x87'=free_61, x88'=free_54, x89'=free_57, x90'=free_60, x91'=free_53, x92'=free_56, x93'=free_59, x94'=free_62, [ free_5<30 && -25+free_5>=1 ], cost: -24+free_5
     15: f_82 -> f_218 : k3'=25, k6'=26, x86'=free_55, x87'=free_61, x88'=free_54, x89'=free_57, x90'=free_60, x91'=free_53, x92'=free_56, x93'=free_59, x94'=free_62, [], cost: 4
     16: f_82 -> [4] : [], cost: NONTERM
     17: f_82 -> [4] : [], cost: NONTERM
     18: f_82 -> [4] : [], cost: NONTERM

Removed unreachable locations (and leaf rules with constant cost):
   Start location: f_82
     14: f_82 -> f_218 : k3'=25, k6'=26, x86'=free_55, x87'=free_61, x88'=free_54, x89'=free_57, x90'=free_60, x91'=free_53, x92'=free_56, x93'=free_59, x94'=free_62, [ free_5<30 && -25+free_5>=1 ], cost: -24+free_5
     16: f_82 -> [4] : [], cost: NONTERM
     17: f_82 -> [4] : [], cost: NONTERM
     18: f_82 -> [4] : [], cost: NONTERM

### Computing asymptotic complexity ###

Fully simplified ITS problem
   Start location: f_82
     14: f_82 -> f_218 : k3'=25, k6'=26, x86'=free_55, x87'=free_61, x88'=free_54, x89'=free_57, x90'=free_60, x91'=free_53, x92'=free_56, x93'=free_59, x94'=free_62, [ free_5<30 && -25+free_5>=1 ], cost: -24+free_5
     18: f_82 -> [4] : [], cost: NONTERM

Computing asymptotic complexity for rule 18
   Guard is satisfiable, yielding nontermination
   Resulting cost NONTERM has complexity: Nonterm

Found new complexity Nonterm.

Obtained the following overall complexity (w.r.t. the length of the input n):
   Complexity:  Nonterm
   Cpx degree:  Nonterm
   Solved cost: NONTERM
   Rule cost:   NONTERM
   Rule guard:  []

NO


The final guard is:


Z3 found a model for the final guard:
{}

Try to generate a witness via retracing LoAT's simplifications:
No witness generated
----------------------------------------

(12)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
The simplification tree is not complete. Thus, the witness cannot be generated.
Truth value repropagation in proof tree changed value to NO
