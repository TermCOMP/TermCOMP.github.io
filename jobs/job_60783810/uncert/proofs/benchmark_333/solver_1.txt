YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/qO1db.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 492 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 56 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/qO1db.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/qO1db.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = icmp sge %9 0
		br %10, %11, %16
	11:
		%12 = load %2
		%13 = load %3
		%14 = add i32 %12, %13
		%15 = icmp sge %14 0
		br %16
	16:
		%17 = phi [0, %8], [%15, %11]
		br %17, %18, %27
	18:
		%19 = load %2
		%20 = load %3
		%21 = add i32 %19, %20
		%22 = load %4
		%23 = add i32 %21, %22
		store %23, %2
		%24 = load %4
		%25 = sub i32 0, %24
		%26 = sub i32 %25, 1
		store %26, %3
		br %8
	27:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 23 rulesP rules:
f_192(v139, v140, v141, v142, v143, v144, v145, v150, 1, v146, v148, v149, v151, v152, v153, v154, v155, v156, 0, 3, 4) -> f_193(v139, v140, v141, v142, v143, v144, v145, v150, 1, v146, v148, v149, v151, v152, v153, v154, v155, v156, 0, 3, 4) :|: 0 <= v150
f_193(v139, v140, v141, v142, v143, v144, v145, v150, 1, v146, v148, v149, v151, v152, v153, v154, v155, v156, 0, 3, 4) -> f_195(v139, v140, v141, v142, v143, v144, v145, v150, 1, v146, v148, v149, v151, v152, v153, v154, v155, v156, 0, 3, 4) :|: 0 = 0
f_195(v139, v140, v141, v142, v143, v144, v145, v150, 1, v146, v148, v149, v151, v152, v153, v154, v155, v156, 0, 3, 4) -> f_197(v139, v140, v141, v142, v143, v144, v145, v150, 1, v146, v148, v149, v151, v152, v153, v154, v155, v156, 0, 3, 4) :|: TRUE
f_197(v139, v140, v141, v142, v143, v144, v145, v150, 1, v146, v148, v149, v151, v152, v153, v154, v155, v156, 0, 3, 4) -> f_199(v139, v140, v141, v142, v143, v144, v145, v150, 1, v148, v149, v146, v151, v152, v153, v154, v155, v156, 0, 3, 4) :|: 0 = 0
f_199(v139, v140, v141, v142, v143, v144, v145, v150, 1, v148, v149, v146, v151, v152, v153, v154, v155, v156, 0, 3, 4) -> f_201(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v149, v146, v148, v151, v153, v154, v155, v156, 0, 3, 4) :|: 0 = 0
f_201(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v149, v146, v148, v151, v153, v154, v155, v156, 0, 3, 4) -> f_202(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v146, v148, v149, v151, v153, v154, v155, v156, 0, 3, 4) :|: v175 = v150 + v152
f_202(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v146, v148, v149, v151, v153, v154, v155, v156, 0, 3, 4) -> f_203(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v146, v148, v149, v151, v153, v154, v155, v156, 0, 3, 4) :|: 0 <= v175
f_203(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v146, v148, v149, v151, v153, v154, v155, v156, 0, 3, 4) -> f_205(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v146, v148, v149, v151, v153, v154, v155, v156, 0, 3, 4) :|: 0 = 0
f_205(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v146, v148, v149, v151, v153, v154, v155, v156, 0, 3, 4) -> f_207(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v146, v148, v149, v151, v153, v154, v155, v156, 0, 3, 4) :|: 0 = 0
f_207(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v146, v148, v149, v151, v153, v154, v155, v156, 0, 3, 4) -> f_209(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v146, v148, v149, v151, v153, v154, v155, v156, 0, 3, 4) :|: TRUE
f_209(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v146, v148, v149, v151, v153, v154, v155, v156, 0, 3, 4) -> f_211(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v148, v149, v151, v153, v154, v155, v156, 0, 3, 4) :|: 0 = 0
f_211(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v148, v149, v151, v153, v154, v155, v156, 0, 3, 4) -> f_212(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v149, v151, v153, v154, v155, v156, 0, 3, 4) :|: 0 = 0
f_212(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v149, v151, v153, v154, v155, v156, 0, 3, 4) -> f_213(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v151, v153, v154, v155, v156, 0, 3, 4) :|: v175 = v150 + v152
f_213(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v151, v153, v154, v155, v156, 0, 3, 4) -> f_214(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v151, v153, v154, v155, v156, 0, 3, 4) :|: 0 = 0
f_214(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v151, v153, v154, v155, v156, 0, 3, 4) -> f_215(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v235, v151, v153, v154, v155, v156, 0, 3, 4) :|: v235 = v175 + v145
f_215(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v235, v151, v153, v154, v155, v156, 0, 3, 4) -> f_216(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v235, v151, v153, v154, v155, v156, 0, 3, 4) :|: TRUE
f_216(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v235, v151, v153, v154, v155, v156, 0, 3, 4) -> f_217(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v235, v151, v153, v154, v155, v156, 0, 3, 4) :|: 0 = 0
f_217(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v235, v151, v153, v154, v155, v156, 0, 3, 4) -> f_218(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v235, v237, v153, v154, v155, v156, 0, 3, 4) :|: v237 + v145 = 0
f_218(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v235, v237, v153, v154, v155, v156, 0, 3, 4) -> f_219(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v235, v237, v238, v153, v154, v155, v156, 0, 3, 4) :|: 1 + v238 = v237
f_219(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v235, v237, v238, v153, v154, v155, v156, 0, 3, 4) -> f_220(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v235, v237, v238, v153, v154, v155, v156, 0, 3, 4) :|: TRUE
f_220(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v235, v237, v238, v153, v154, v155, v156, 0, 3, 4) -> f_221(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v235, v237, v238, v153, v154, v155, v156, 0, 3, 4) :|: TRUE
f_221(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v235, v237, v238, v153, v154, v155, v156, 0, 3, 4) -> f_191(v139, v140, v141, v142, v143, v144, v145, v150, 1, v152, v175, v235, v237, v238, v153, v154, v155, v156, 0, 3, 4) :|: TRUE
f_191(v139, v140, v141, v142, v143, v144, v145, v146, 1, v148, v149, v150, v151, v152, v153, v154, v155, v156, 0, 3, 4) -> f_192(v139, v140, v141, v142, v143, v144, v145, v150, 1, v146, v148, v149, v151, v152, v153, v154, v155, v156, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_192(v139:0, v140:0, v141:0, v142:0, v143:0, v144:0, v145:0, v150:0, 1, v146:0, v148:0, v149:0, v151:0, v152:0, v153:0, v154:0, v155:0, v156:0, 0, 3, 4) -> f_192(v139:0, v140:0, v141:0, v142:0, v143:0, v144:0, v145:0, v150:0 + v152:0 + v145:0, 1, v150:0, v152:0, v150:0 + v152:0, 1 + v238:0, v238:0, v153:0, v154:0, v155:0, v156:0, 0, 3, 4) :|: v150:0 > -1 && 1 + v238:0 + v145:0 = 0 && v150:0 + v152:0 > -1
Filtered unneeded arguments:
   f_192(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_192(x7, x8, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_192(v145:0, v150:0, v152:0) -> f_192(v145:0, v150:0 + v152:0 + v145:0, v238:0) :|: 1 + v238:0 + v145:0 = 0 && v150:0 + v152:0 > -1 && v150:0 > -1

----------------------------------------

(8)
Obligation:
Rules:
f_192(v145:0, v150:0, v152:0) -> f_192(v145:0, v150:0 + v152:0 + v145:0, v238:0) :|: 1 + v238:0 + v145:0 = 0 && v150:0 + v152:0 > -1 && v150:0 > -1

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_192(v145:0:0, v150:0:0, v152:0:0) -> f_192(v145:0:0, v150:0:0 + v152:0:0 + v145:0:0, v238:0:0) :|: 1 + v238:0:0 + v145:0:0 = 0 && v150:0:0 + v152:0:0 > -1 && v150:0:0 > -1

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_192(x, x1, x2)] = x1 + x2

The following rules are decreasing:
f_192(v145:0:0, v150:0:0, v152:0:0) -> f_192(v145:0:0, v150:0:0 + v152:0:0 + v145:0:0, v238:0:0) :|: 1 + v238:0:0 + v145:0:0 = 0 && v150:0:0 + v152:0:0 > -1 && v150:0:0 > -1
The following rules are bounded:
f_192(v145:0:0, v150:0:0, v152:0:0) -> f_192(v145:0:0, v150:0:0 + v152:0:0 + v145:0:0, v238:0:0) :|: 1 + v238:0:0 + v145:0:0 = 0 && v150:0:0 + v152:0:0 > -1 && v150:0:0 > -1

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
