YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/38NW3.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 72 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1244 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 35 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (17) YES
    (18) LLVM Symbolic Execution SCC
        (19) SCC2IRS [SOUND, 31 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/38NW3.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/38NW3.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %6
	6:
		%7 = load %3
		%8 = icmp sgt %7 0
		br %8, %9, %22
	9:
		store 0, %4
		br %10
	10:
		%11 = load %4
		%12 = load %3
		%13 = icmp slt %11 %12
		br %13, %14, %19
	14:
		%15 = load %4
		%16 = add i32 %15, 1
		store %16, %4
		%17 = load %5
		%18 = add i32 %17, 1
		store %18, %5
		br %10
	19:
		%20 = load %3
		%21 = sub i32 %20, 1
		store %21, %3
		br %6
	22:
		%23 = load %5
		ret %23

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 43
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 32 rulesP rules:
f_416(v483, v484, v485, v486, v487, v488, 1, v490, v492, v493, v494, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_417(v483, v484, v485, v486, v487, v488, 1, v490, v502, v493, v494, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) :|: v502 = 1 + v490 && 1 <= v502
f_417(v483, v484, v485, v486, v487, v488, 1, v490, v502, v493, v494, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_418(v483, v484, v485, v486, v487, v488, 1, v490, v502, v493, v494, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) :|: TRUE
f_418(v483, v484, v485, v486, v487, v488, 1, v490, v502, v493, v494, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_419(v483, v484, v485, v486, v487, v488, 1, v490, v502, v494, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) :|: 0 = 0
f_419(v483, v484, v485, v486, v487, v488, 1, v490, v502, v494, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_420(v483, v484, v485, v486, v487, v488, 1, v490, v502, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) :|: v504 = 1 + v494 && 3 <= v504
f_420(v483, v484, v485, v486, v487, v488, 1, v490, v502, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_421(v483, v484, v485, v486, v487, v488, 1, v490, v502, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) :|: TRUE
f_421(v483, v484, v485, v486, v487, v488, 1, v490, v502, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_422(v483, v484, v485, v486, v487, v488, 1, v490, v502, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) :|: TRUE
f_422(v483, v484, v485, v486, v487, v488, 1, v490, v502, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_423(v483, v484, v485, v486, v487, v488, 1, v502, v490, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) :|: 0 = 0
f_423(v483, v484, v485, v486, v487, v488, 1, v502, v490, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_424(v483, v484, v485, v486, v487, v488, 1, v502, v490, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) :|: 0 = 0
f_424(v483, v484, v485, v486, v487, v488, 1, v502, v490, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_425(v483, v484, v485, v486, v487, v488, 1, v502, v490, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) :|: v502 < v488 && 2 <= v488 && 3 <= v495 && 3 <= v483
f_424(v483, v484, v485, v486, v487, v488, 1, v502, v490, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_426(v483, v484, v485, v486, v487, v502, 1, v490, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) :|: v488 <= v502 && v488 = v502
f_425(v483, v484, v485, v486, v487, v488, 1, v502, v490, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_427(v483, v484, v485, v486, v487, v488, 1, v502, v490, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) :|: 0 = 0
f_427(v483, v484, v485, v486, v487, v488, 1, v502, v490, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_429(v483, v484, v485, v486, v487, v488, 1, v502, v490, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) :|: TRUE
f_429(v483, v484, v485, v486, v487, v488, 1, v502, v490, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_415(v483, v484, v485, v486, v487, v488, 1, v502, v490, v502, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) :|: TRUE
f_415(v483, v484, v485, v486, v487, v488, 1, v490, v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_416(v483, v484, v485, v486, v487, v488, 1, v490, v492, v493, v494, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) :|: 0 = 0
f_426(v483, v484, v485, v486, v487, v502, 1, v490, v494, v504, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_428(v483, v484, v485, v486, v487, v502, 1, 0, v490, v494, v504, v495, v496, v497, v498, v499, v500, 3, 2, 4) :|: 0 = 0
f_428(v483, v484, v485, v486, v487, v502, 1, 0, v490, v494, v504, v495, v496, v497, v498, v499, v500, 3, 2, 4) -> f_430(v483, v484, v485, v486, v487, v502, 1, 0, v490, v494, v504, v495, v496, v497, v498, v499, v500, 3, 2, 4) :|: TRUE
f_430(v483, v484, v485, v486, v487, v502, 1, 0, v490, v494, v504, v495, v496, v497, v498, v499, v500, 3, 2, 4) -> f_431(v483, v484, v485, v486, v487, v502, 1, 0, v490, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) :|: 0 = 0
f_431(v483, v484, v485, v486, v487, v502, 1, 0, v490, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) -> f_432(v483, v484, v485, v486, v487, v502, 1, 0, v490, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) :|: 1 + v490 = v502
f_432(v483, v484, v485, v486, v487, v502, 1, 0, v490, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) -> f_433(v483, v484, v485, v486, v487, v502, 1, 0, v490, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) :|: TRUE
f_433(v483, v484, v485, v486, v487, v502, 1, 0, v490, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) -> f_434(v483, v484, v485, v486, v487, v502, 1, 0, v490, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) :|: TRUE
f_434(v483, v484, v485, v486, v487, v502, 1, 0, v490, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) -> f_435(v483, v484, v485, v486, v487, v490, 1, v502, 0, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) :|: 0 = 0
f_435(v483, v484, v485, v486, v487, v490, 1, v502, 0, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) -> f_436(v483, v484, v485, v486, v487, v490, 1, v502, 0, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) :|: 0 < v490 && 2 <= v502 && 3 <= v483
f_436(v483, v484, v485, v486, v487, v490, 1, v502, 0, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) -> f_438(v483, v484, v485, v486, v487, v490, 1, v502, 0, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) :|: 0 = 0
f_438(v483, v484, v485, v486, v487, v490, 1, v502, 0, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) -> f_440(v483, v484, v485, v486, v487, v490, 1, v502, 0, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) :|: TRUE
f_440(v483, v484, v485, v486, v487, v490, 1, v502, 0, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) -> f_442(v483, v484, v485, v486, v487, v490, 1, v502, 0, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) :|: TRUE
f_442(v483, v484, v485, v486, v487, v490, 1, v502, 0, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) -> f_444(v483, v484, v485, v486, v487, v490, 1, v502, 0, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) :|: TRUE
f_444(v483, v484, v485, v486, v487, v490, 1, v502, 0, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) -> f_445(v483, v484, v485, v486, v487, v490, 1, v502, 0, v494, v504, v496, v497, v498, v499, v500, 3, 2, 4) :|: TRUE
f_445(v586, v587, v588, v589, v590, v591, 1, v593, 0, v595, v596, v597, v598, v599, v600, v601, 3, 2, 4) -> f_447(v586, v587, v588, v589, v590, v591, 1, 0, v593, v595, v596, v597, v598, v599, v600, v601, 3, 2, 4) :|: 0 = 0
f_447(v586, v587, v588, v589, v590, v591, 1, 0, v593, v595, v596, v597, v598, v599, v600, v601, 3, 2, 4) -> f_448(v586, v587, v588, v589, v590, v591, 1, 0, v593, v595, v596, v597, v598, v599, v600, v601, 3, 2, 4) :|: 0 = 0
f_448(v586, v587, v588, v589, v590, v591, 1, 0, v593, v595, v596, v597, v598, v599, v600, v601, 3, 2, 4) -> f_449(v586, v587, v588, v589, v590, v591, 1, 0, v593, v595, v596, v597, v598, v599, v600, v601, 3, 2, 4) :|: 0 = 0
f_449(v586, v587, v588, v589, v590, v591, 1, 0, v593, v595, v596, v597, v598, v599, v600, v601, 3, 2, 4) -> f_450(v586, v587, v588, v589, v590, v591, 1, 0, v593, v595, v596, v597, v598, v599, v600, v601, 3, 2, 4) :|: TRUE
f_450(v586, v587, v588, v589, v590, v591, 1, 0, v593, v595, v596, v597, v598, v599, v600, v601, 3, 2, 4) -> f_415(v586, v587, v588, v589, v590, v591, 1, 0, v591, v593, v595, v596, v593, v597, v598, v599, v600, v601, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_416(v483:0, v484:0, v485:0, v486:0, v487:0, v488:0, 1, v490:0, v492:0, v493:0, v494:0, v495:0, v496:0, v497:0, v498:0, v499:0, v500:0, 0, 3, 2, 4) -> f_416(v483:0, v484:0, v485:0, v486:0, v487:0, v488:0, 1, 1 + v490:0, 1 + v490:0, v494:0, 1 + v494:0, v495:0, v496:0, v497:0, v498:0, v499:0, v500:0, 0, 3, 2, 4) :|: v490:0 > -1 && v494:0 > 1 && v488:0 > 1 && v488:0 > 1 + v490:0 && v483:0 > 2 && v495:0 > 2
f_416(v483:0, v484:0, v485:0, v486:0, v487:0, 1 + v490:0, 1, v490:0, v492:0, v493:0, v494:0, v495:0, v496:0, v497:0, v498:0, v499:0, v500:0, 0, 3, 2, 4) -> f_416(v483:0, v484:0, v485:0, v486:0, v487:0, v490:0, 1, 0, 1 + v490:0, v494:0, 1 + v494:0, 1 + v490:0, v496:0, v497:0, v498:0, v499:0, v500:0, 0, 3, 2, 4) :|: v490:0 > 0 && v494:0 > 1 && v483:0 > 2
Filtered unneeded arguments:
   f_416(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_416(x1, x6, x8, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_416(v483:0, v488:0, v490:0, v494:0, v495:0) -> f_416(v483:0, v488:0, 1 + v490:0, 1 + v494:0, v495:0) :|: v494:0 > 1 && v490:0 > -1 && v488:0 > 1 && v488:0 > 1 + v490:0 && v495:0 > 2 && v483:0 > 2
f_416(v483:0, sum~cons_1~v490:0, v490:0, v494:0, v495:0) -> f_416(v483:0, v490:0, 0, 1 + v494:0, 1 + v490:0) :|: v494:0 > 1 && v483:0 > 2 && v490:0 > 0 && sum~cons_1~v490:0 = 1 + v490:0

----------------------------------------

(9)
Obligation:
Rules:
f_416(v483:0, v488:0, v490:0, v494:0, v495:0) -> f_416(v483:0, v488:0, 1 + v490:0, 1 + v494:0, v495:0) :|: v494:0 > 1 && v490:0 > -1 && v488:0 > 1 && v488:0 > 1 + v490:0 && v495:0 > 2 && v483:0 > 2
f_416(x, x1, x2, x3, x4) -> f_416(x, x2, 0, 1 + x3, 1 + x2) :|: x3 > 1 && x > 2 && x2 > 0 && x1 = 1 + x2

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_416(v483:0:0, v488:0:0, v490:0:0, v494:0:0, v495:0:0) -> f_416(v483:0:0, v488:0:0, 1 + v490:0:0, 1 + v494:0:0, v495:0:0) :|: v495:0:0 > 2 && v483:0:0 > 2 && v488:0:0 > 1 + v490:0:0 && v488:0:0 > 1 && v490:0:0 > -1 && v494:0:0 > 1
f_416(x:0, sum~cons_1~x2:0, x2:0, x3:0, x4:0) -> f_416(x:0, x2:0, 0, 1 + x3:0, 1 + x2:0) :|: x3:0 > 1 && x:0 > 2 && x2:0 > 0 && sum~cons_1~x2:0 = 1 + x2:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_416 ] = f_416_2

The following rules are decreasing:
f_416(x:0, sum~cons_1~x2:0, x2:0, x3:0, x4:0) -> f_416(x:0, x2:0, 0, 1 + x3:0, 1 + x2:0) :|: x3:0 > 1 && x:0 > 2 && x2:0 > 0 && sum~cons_1~x2:0 = 1 + x2:0

The following rules are bounded:
f_416(v483:0:0, v488:0:0, v490:0:0, v494:0:0, v495:0:0) -> f_416(v483:0:0, v488:0:0, 1 + v490:0:0, 1 + v494:0:0, v495:0:0) :|: v495:0:0 > 2 && v483:0:0 > 2 && v488:0:0 > 1 + v490:0:0 && v488:0:0 > 1 && v490:0:0 > -1 && v494:0:0 > 1
f_416(x:0, sum~cons_1~x2:0, x2:0, x3:0, x4:0) -> f_416(x:0, x2:0, 0, 1 + x3:0, 1 + x2:0) :|: x3:0 > 1 && x:0 > 2 && x2:0 > 0 && sum~cons_1~x2:0 = 1 + x2:0


----------------------------------------

(13)
Obligation:
Rules:
f_416(v483:0:0, v488:0:0, v490:0:0, v494:0:0, v495:0:0) -> f_416(v483:0:0, v488:0:0, 1 + v490:0:0, 1 + v494:0:0, v495:0:0) :|: v495:0:0 > 2 && v483:0:0 > 2 && v488:0:0 > 1 + v490:0:0 && v488:0:0 > 1 && v490:0:0 > -1 && v494:0:0 > 1

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_416(v483:0:0:0, v488:0:0:0, v490:0:0:0, v494:0:0:0, v495:0:0:0) -> f_416(v483:0:0:0, v488:0:0:0, 1 + v490:0:0:0, 1 + v494:0:0:0, v495:0:0:0) :|: v490:0:0:0 > -1 && v494:0:0:0 > 1 && v488:0:0:0 > 1 && v488:0:0:0 > 1 + v490:0:0:0 && v483:0:0:0 > 2 && v495:0:0:0 > 2

----------------------------------------

(16) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_416(x, x1, x2, x3, x4)] = x1 - x2

The following rules are decreasing:
f_416(v483:0:0:0, v488:0:0:0, v490:0:0:0, v494:0:0:0, v495:0:0:0) -> f_416(v483:0:0:0, v488:0:0:0, 1 + v490:0:0:0, 1 + v494:0:0:0, v495:0:0:0) :|: v490:0:0:0 > -1 && v494:0:0:0 > 1 && v488:0:0:0 > 1 && v488:0:0:0 > 1 + v490:0:0:0 && v483:0:0:0 > 2 && v495:0:0:0 > 2
The following rules are bounded:
f_416(v483:0:0:0, v488:0:0:0, v490:0:0:0, v494:0:0:0, v495:0:0:0) -> f_416(v483:0:0:0, v488:0:0:0, 1 + v490:0:0:0, 1 + v494:0:0:0, v495:0:0:0) :|: v490:0:0:0 > -1 && v494:0:0:0 > 1 && v488:0:0:0 > 1 && v488:0:0:0 > 1 + v490:0:0:0 && v483:0:0:0 > 2 && v495:0:0:0 > 2

----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
SCC
----------------------------------------

(19) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_271(v85, v86, v87, v88, v89, 1, v92, v91, v93, v94, v95, v96, v97, 0, 3, 4) -> f_272(v85, v86, v87, v88, v89, 1, v92, v91, v93, v94, v95, v96, v97, 0, 3, 4) :|: 0 = 0
f_272(v85, v86, v87, v88, v89, 1, v92, v91, v93, v94, v95, v96, v97, 0, 3, 4) -> f_273(v85, v86, v87, v88, v89, 1, v92, v91, v93, v94, v95, v96, v97, 0, 3, 2, 4) :|: v92 < v85 && 2 <= v85
f_273(v85, v86, v87, v88, v89, 1, v92, v91, v93, v94, v95, v96, v97, 0, 3, 2, 4) -> f_275(v85, v86, v87, v88, v89, 1, v92, v91, v93, v94, v95, v96, v97, 0, 3, 2, 4) :|: 0 = 0
f_275(v85, v86, v87, v88, v89, 1, v92, v91, v93, v94, v95, v96, v97, 0, 3, 2, 4) -> f_277(v85, v86, v87, v88, v89, 1, v92, v91, v93, v94, v95, v96, v97, 0, 3, 2, 4) :|: TRUE
f_277(v85, v86, v87, v88, v89, 1, v92, v91, v93, v94, v95, v96, v97, 0, 3, 2, 4) -> f_279(v85, v86, v87, v88, v89, 1, v92, v91, v93, v94, v95, v96, v97, 0, 3, 2, 4) :|: 0 = 0
f_279(v85, v86, v87, v88, v89, 1, v92, v91, v93, v94, v95, v96, v97, 0, 3, 2, 4) -> f_281(v85, v86, v87, v88, v89, 1, v92, v99, v91, v93, v94, v95, v96, v97, 0, 3, 2, 4) :|: v99 = 1 + v92 && 2 <= v99
f_281(v85, v86, v87, v88, v89, 1, v92, v99, v91, v93, v94, v95, v96, v97, 0, 3, 2, 4) -> f_283(v85, v86, v87, v88, v89, 1, v92, v99, v91, v93, v94, v95, v96, v97, 0, 3, 2, 4) :|: TRUE
f_283(v85, v86, v87, v88, v89, 1, v92, v99, v91, v93, v94, v95, v96, v97, 0, 3, 2, 4) -> f_285(v85, v86, v87, v88, v89, 1, v92, v99, v93, v94, v95, v96, v97, 0, 3, 2, 4) :|: 0 = 0
f_285(v85, v86, v87, v88, v89, 1, v92, v99, v93, v94, v95, v96, v97, 0, 3, 2, 4) -> f_287(v85, v86, v87, v88, v89, 1, v92, v99, v93, v94, v95, v96, v97, 0, 3, 2, 4) :|: v99 = 1 + v92
f_287(v85, v86, v87, v88, v89, 1, v92, v99, v93, v94, v95, v96, v97, 0, 3, 2, 4) -> f_289(v85, v86, v87, v88, v89, 1, v92, v99, v93, v94, v95, v96, v97, 0, 3, 2, 4) :|: TRUE
f_289(v85, v86, v87, v88, v89, 1, v92, v99, v93, v94, v95, v96, v97, 0, 3, 2, 4) -> f_292(v85, v86, v87, v88, v89, 1, v92, v99, v93, v94, v95, v96, v97, 0, 3, 2, 4) :|: TRUE
f_292(v85, v86, v87, v88, v89, 1, v92, v99, v93, v94, v95, v96, v97, 0, 3, 2, 4) -> f_270(v85, v86, v87, v88, v89, 1, v92, v99, v93, v94, v95, v96, v97, 0, 3, 4) :|: TRUE
f_270(v85, v86, v87, v88, v89, 1, v91, v92, v93, v94, v95, v96, v97, 0, 3, 4) -> f_271(v85, v86, v87, v88, v89, 1, v92, v91, v93, v94, v95, v96, v97, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_271(v85:0, v86:0, v87:0, v88:0, v89:0, 1, v92:0, v91:0, v93:0, v94:0, v95:0, v96:0, v97:0, 0, 3, 4) -> f_271(v85:0, v86:0, v87:0, v88:0, v89:0, 1, 1 + v92:0, v92:0, v93:0, v94:0, v95:0, v96:0, v97:0, 0, 3, 4) :|: v85:0 > 1 && v92:0 > 0 && v92:0 < v85:0
Filtered unneeded arguments:
   f_271(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_271(x1, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_271(v85:0, v92:0) -> f_271(v85:0, 1 + v92:0) :|: v92:0 > 0 && v92:0 < v85:0 && v85:0 > 1

----------------------------------------

(20)
Obligation:
Rules:
f_271(v85:0, v92:0) -> f_271(v85:0, 1 + v92:0) :|: v92:0 > 0 && v92:0 < v85:0 && v85:0 > 1

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_271(v85:0:0, v92:0:0) -> f_271(v85:0:0, 1 + v92:0:0) :|: v92:0:0 > 0 && v92:0:0 < v85:0:0 && v85:0:0 > 1

----------------------------------------

(23) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_271 ] = -1*f_271_2 + f_271_1

The following rules are decreasing:
f_271(v85:0:0, v92:0:0) -> f_271(v85:0:0, 1 + v92:0:0) :|: v92:0:0 > 0 && v92:0:0 < v85:0:0 && v85:0:0 > 1

The following rules are bounded:
f_271(v85:0:0, v92:0:0) -> f_271(v85:0:0, 1 + v92:0:0) :|: v92:0:0 > 0 && v92:0:0 < v85:0:0 && v85:0:0 > 1


----------------------------------------

(24)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
