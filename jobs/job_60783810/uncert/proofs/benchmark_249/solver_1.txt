YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/QK51E.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 45 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1326 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 24 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 40 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/QK51E.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/QK51E.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%2 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%3 = alloca i32, align 4
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = load %3
		%6 = icmp eq %5 0
		br %6, %7, %8
	7:
		store null, %2
		br %20
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%9 = call noalias *i8 @malloc(i64 16)
		%10 = bitcast *i8 %9 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %10, %4
		%11 = call i32 (...)* @__VERIFIER_nondet_int()
		%12 = load %4
		%13 = getelementptr %12, 0, 0
		store %11, %13
		%14 = load %3
		%15 = sub i32 %14, 1
		%16 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %15)
		%17 = load %4
		%18 = getelementptr %17, 0, 1
		store %16, %18
		%19 = load %4
		store %19, %2
		br %20
	20:
		%21 = load %2
		ret %21

*BasicFunctionTypename: "traverse" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 42
	0:
		%2 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %2)
		%3 = load %2
		%4 = getelementptr %3, 0, 1
		%5 = load %4
		%6 = icmp ne %5 null
		br %6, %7, %11
	7:
		%8 = load %2
		%9 = getelementptr %8, 0, 1
		%10 = load %9
		Unnamed Call-Instruction = call BasicVoidType @traverse(*BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %10)
		br %11
	11:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 58
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %7, %8
	7:
		store 0, %1
		br %12
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		%9 = load %2
		%10 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %9)
		store %10, %3
		%11 = load %3
		Unnamed Call-Instruction = call BasicVoidType @traverse(*BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %11)
		store 0, %1
		br %12
	12:
		%13 = load %1
		ret %13


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_474(v527, v541, v528, v529, v530, v531, v532, v533, v542, v535, v536, v537, 0, v539, v540, 3, 7, 4, 1, 8, v534) -> f_475(v527, v541, v528, v529, v530, v531, v532, v533, v542, v535, v536, v537, 0, v539, v540, 3, 7, 4, 1, 8, v534) :|: TRUE
f_475(v527, v541, v528, v529, v530, v531, v532, v533, v542, v535, v536, v537, 0, v539, v540, 3, 7, 4, 1, 8, v534) -> f_476(v527, v541, v528, v529, v530, v531, v532, v533, v542, v535, v536, v537, 0, v539, v540, 3, 7, 4, 1, 8, v534) :|: TRUE
f_476(v527, v541, v528, v529, v530, v531, v532, v533, v542, v535, v536, v537, 0, v539, v540, 3, 7, 4, 1, 8, v534) -> f_477(v527, v541, v528, v529, v530, v531, v532, v533, v542, v535, v536, v537, 0, v539, v540, 3, 7, 4, 1, 8, v534) :|: 0 = 0
f_477(v527, v541, v528, v529, v530, v531, v532, v533, v542, v535, v536, v537, 0, v539, v540, 3, 7, 4, 1, 8, v534) -> f_484(v527, v541, v544, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v537, v547, v536, v545, v535, 3, 7, 4, 8, 15, 1, 9, v546, 16) :|: v544 = 8 + v527 && 1 + v546 = v534 && v548 = 15 + v527 && v549 = 1 + v546 && 9 <= v544 && 16 <= v548 && 0 <= v546
f_484(v527, v541, v544, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v537, v547, v536, v545, v535, 3, 7, 4, 8, 15, 1, 9, v546, 16) -> f_485(v527, v541, v544, v537, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v547, v536, v545, v535, 3, 7, 4, 8, 15, 1, 9, v546, 16) :|: 0 = 0
f_485(v527, v541, v544, v537, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v547, v536, v545, v535, 3, 7, 4, 8, 15, 1, 9, v546, 16) -> f_486(v527, v541, v544, v537, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v547, v536, v545, v535, 3, 7, 4, 8, 15, 1, 9, v546, 16) :|: 0 < v537 && 1 <= v546
f_486(v527, v541, v544, v537, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v547, v536, v545, v535, 3, 7, 4, 8, 15, 1, 9, v546, 16) -> f_488(v527, v541, v544, v537, 1, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v547, v536, v545, v535, 3, 7, 4, 8, 15, 9, v546, 16) :|: 0 = 0
f_488(v527, v541, v544, v537, 1, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v547, v536, v545, v535, 3, 7, 4, 8, 15, 9, v546, 16) -> f_490(v527, v541, v544, v537, 1, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v547, v536, v545, v535, 3, 7, 4, 8, 15, 9, v546, 16) :|: TRUE
f_490(v527, v541, v544, v537, 1, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v547, v536, v545, v535, 3, 7, 4, 8, 15, 9, v546, 16) -> f_492(v527, v541, v544, v537, 1, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v547, v536, v545, v535, 3, 7, 4, 8, 15, 9, v546, 16) :|: 0 = 0
f_492(v527, v541, v544, v537, 1, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v547, v536, v545, v535, 3, 7, 4, 8, 15, 9, v546, 16) -> f_495(v527, v541, v544, v537, 1, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v547, v536, v545, v535, 3, 7, 4, 8, 15, 9, v546, 16) :|: v544 = 8 + v527
f_495(v527, v541, v544, v537, 1, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v547, v536, v545, v535, 3, 7, 4, 8, 15, 9, v546, 16) -> f_498(v527, v541, v544, v537, 1, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v547, v536, v545, v535, 3, 7, 4, 8, 15, 9, v546, 16) :|: 0 = 0
f_498(v527, v541, v544, v537, 1, v528, v529, v530, v531, v532, v533, v542, v548, 0, v539, v540, v547, v536, v545, v535, 3, 7, 4, 8, 15, 9, v546, 16) -> f_501(v537, v528, v529, v530, v531, v532, v533, v541, v542, v527, v548, 0, v539, v540, v547, v536, v545, v544, v535, 1, 3, 7, 4, 8, 15, 9, v546, 16) :|: 0 = 0
f_501(v537, v528, v529, v530, v531, v532, v533, v541, v542, v527, v548, 0, v539, v540, v547, v536, v545, v544, v535, 1, 3, 7, 4, 8, 15, 9, v546, 16) -> f_504(v537, v528, v529, v530, v531, v532, v533, v541, v542, v527, v548, 0, v539, v540, v547, v536, v545, v544, v535, 3, 7, 4, 8, 15, 1, 9, v546, 16) :|: TRUE
f_504(v537, v528, v529, v530, v531, v532, v533, v541, v542, v527, v548, 0, v539, v540, v547, v536, v545, v544, v535, 3, 7, 4, 8, 15, 1, 9, v546, 16) -> f_473(v537, v528, v529, v530, v531, v532, v533, v547, v536, v545, 0, v539, v540, 3, 7, 4, 1, 8, v546) :|: TRUE
f_473(v527, v528, v529, v530, v531, v532, v533, v535, v536, v537, 0, v539, v540, 3, 7, 4, 1, 8, v534) -> f_474(v527, v541, v528, v529, v530, v531, v532, v533, v542, v535, v536, v537, 0, v539, v540, 3, 7, 4, 1, 8, v534) :|: 1 <= v541 && v542 = 7 + v541 && 8 <= v542
Combined rules. Obtained 1 rulesP rules:
f_474(v527:0, v541:0, v528:0, v529:0, v530:0, v531:0, v532:0, v533:0, v542:0, v535:0, v536:0, v537:0, 0, v539:0, v540:0, 3, 7, 4, 1, 8, 1 + v546:0) -> f_474(v537:0, v541:1, v528:0, v529:0, v530:0, v531:0, v532:0, v533:0, 7 + v541:1, v547:0, v536:0, v545:0, 0, v539:0, v540:0, 3, 7, 4, 1, 8, v546:0) :|: v546:0 > 0 && v527:0 > 0 && v537:0 > 0 && v541:1 > 0
Filtered unneeded arguments:
   f_474(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_474(x1, x12, x21)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_474(v527:0, v537:0, sum~cons_1~v546:0) -> f_474(v537:0, v545:0, v546:0) :|: v527:0 > 0 && v537:0 > 0 && v546:0 > 0 && sum~cons_1~v546:0 = 1 + v546:0

----------------------------------------

(9)
Obligation:
Rules:
f_474(v527:0, v537:0, sum~cons_1~v546:0) -> f_474(v537:0, v545:0, v546:0) :|: v527:0 > 0 && v537:0 > 0 && v546:0 > 0 && sum~cons_1~v546:0 = 1 + v546:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_474(v527:0:0, v537:0:0, sum~cons_1~v546:0:0) -> f_474(v537:0:0, v545:0:0, v546:0:0) :|: v527:0:0 > 0 && v537:0:0 > 0 && v546:0:0 > 0 && sum~cons_1~v546:0:0 = 1 + v546:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_474(x, x1, x2)] = x2

The following rules are decreasing:
f_474(v527:0:0, v537:0:0, sum~cons_1~v546:0:0) -> f_474(v537:0:0, v545:0:0, v546:0:0) :|: v527:0:0 > 0 && v537:0:0 > 0 && v546:0:0 > 0 && sum~cons_1~v546:0:0 = 1 + v546:0:0
The following rules are bounded:
f_474(v527:0:0, v537:0:0, sum~cons_1~v546:0:0) -> f_474(v537:0:0, v545:0:0, v546:0:0) :|: v527:0:0 > 0 && v537:0:0 > 0 && v546:0:0 > 0 && sum~cons_1~v546:0:0 = 1 + v546:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_274(v56, v65, v57, v58, v59, v60, v61, v62, v66, 0, v64, 3, 7, 1, 4, 8) -> f_275(v56, v65, v67, v57, v58, v59, v60, v61, v62, v66, v68, 0, v64, 3, 7, 1, 4, 8) :|: 1 <= v67 && v68 = 3 + v67 && 4 <= v68
f_275(v56, v65, v67, v57, v58, v59, v60, v61, v62, v66, v68, 0, v64, 3, 7, 1, 4, 8) -> f_276(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) :|: 1 <= v69 && v70 = 7 + v69 && 8 <= v70
f_276(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) -> f_277(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) :|: TRUE
f_277(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) -> f_278(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) :|: TRUE
f_278(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) -> f_279(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) :|: 0 = 0
f_279(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) -> f_281(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) :|: v56 != 0
f_281(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) -> f_283(v56, v65, v67, v69, 0, v57, v58, v59, v60, v61, v62, v66, v68, v70, v64, 3, 7, 1, 4, 8) :|: 0 = 0
f_283(v56, v65, v67, v69, 0, v57, v58, v59, v60, v61, v62, v66, v68, v70, v64, 3, 7, 1, 4, 8) -> f_285(v56, v65, v67, v69, 0, v57, v58, v59, v60, v61, v62, v66, v68, v70, v64, 3, 7, 1, 4, 8) :|: TRUE
f_285(v56, v65, v67, v69, 0, v57, v58, v59, v60, v61, v62, v66, v68, v70, v64, 3, 7, 1, 4, 8) -> f_287(v56, v65, v67, v69, 0, v57, v58, v59, v60, v61, v62, v66, v68, v70, v64, 3, 7, 1, 4, 8) :|: TRUE
f_287(v56, v65, v67, v69, 0, v57, v58, v59, v60, v61, v62, v66, v68, v70, v64, 3, 7, 1, 4, 8) -> f_289(v56, v65, v67, v69, 0, v72, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: v73 = 15 + v72 && v72 % 4 = 0 && 16 <= v73
f_289(v56, v65, v67, v69, 0, v72, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_291(v56, v65, v67, v69, 0, v72, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: 0 = 0
f_291(v56, v65, v67, v69, 0, v72, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_293(v56, v65, v67, v69, 0, v72, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: TRUE
f_293(v56, v65, v67, v69, 0, v72, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_294(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: TRUE
f_294(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_295(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: 0 = 0
f_295(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_296(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: 0 = 0
f_296(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_297(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: TRUE
f_297(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_298(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: 0 = 0
f_298(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_299(v56, v65, v67, v69, 0, v72, v88, v90, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: 1 + v90 = v56 && 0 <= v90
f_299(v56, v65, v67, v69, 0, v72, v88, v90, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_300(v90, v57, v58, v59, v60, v61, v62, v65, v66, v67, v68, v69, v70, v72, v73, 0, v64, v56, v88, 3, 7, 15, 4, 1, 8, 16) :|: 0 = 0
f_300(v90, v57, v58, v59, v60, v61, v62, v65, v66, v67, v68, v69, v70, v72, v73, 0, v64, v56, v88, 3, 7, 15, 4, 1, 8, 16) -> f_301(v90, v57, v58, v59, v60, v61, v62, v65, v66, v67, v68, v69, v70, v72, v73, 0, v64, v56, v88, 3, 7, 15, 4, 1, 8, 16) :|: TRUE
f_301(v90, v57, v58, v59, v60, v61, v62, v65, v66, v67, v68, v69, v70, v72, v73, 0, v64, v56, v88, 3, 7, 15, 4, 1, 8, 16) -> f_273(v90, v57, v58, v59, v60, v61, v62, 0, v64, 3, 7, 1, 4, 8) :|: TRUE
f_273(v56, v57, v58, v59, v60, v61, v62, 0, v64, 3, 7, 1, 4, 8) -> f_274(v56, v65, v57, v58, v59, v60, v61, v62, v66, 0, v64, 3, 7, 1, 4, 8) :|: 1 <= v65 && v66 = 7 + v65 && 8 <= v66
Combined rules. Obtained 1 rulesP rules:
f_274(1 + v90:0, v65:0, v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, v66:0, 0, v64:0, 3, 7, 1, 4, 8) -> f_274(v90:0, v65:1, v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, 7 + v65:1, 0, v64:0, 3, 7, 1, 4, 8) :|: v69:0 > 0 && v67:0 > 0 && v90:0 > -1 && v72:0 % 4 = 0 && v72:0 > 0 && v65:1 > 0
Filtered unneeded arguments:
   f_274(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_274(x1)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_274(sum~cons_1~v90:0) -> f_274(v90:0) :|: v90:0 > -1 && sum~cons_1~v90:0 = 1 + v90:0

----------------------------------------

(16)
Obligation:
Rules:
f_274(sum~cons_1~v90:0) -> f_274(v90:0) :|: v90:0 > -1 && sum~cons_1~v90:0 = 1 + v90:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_274(sum~cons_1~v90:0:0) -> f_274(v90:0:0) :|: v90:0:0 > -1 && sum~cons_1~v90:0:0 = 1 + v90:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_274 ] = f_274_1

The following rules are decreasing:
f_274(sum~cons_1~v90:0:0) -> f_274(v90:0:0) :|: v90:0:0 > -1 && sum~cons_1~v90:0:0 = 1 + v90:0:0

The following rules are bounded:
f_274(sum~cons_1~v90:0:0) -> f_274(v90:0:0) :|: v90:0:0 > -1 && sum~cons_1~v90:0:0 = 1 + v90:0:0


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
