YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/uxDzu.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 31 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 5560 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 132 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (13) IntTRS
        (14) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (15) IntTRS
        (16) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (19) IntTRS
        (20) RankingReductionPairProof [EQUIVALENT, 1 ms]
        (21) IntTRS
        (22) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (23) IntTRS
        (24) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 11 ms]
        (27) IntTRS
        (28) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (29) IntTRS
        (30) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (31) IntTRS
        (32) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (33) YES
    (34) LLVM Symbolic Execution SCC
        (35) SCC2IRS [SOUND, 90 ms]
        (36) IntTRS
        (37) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (38) IntTRS
        (39) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (40) YES
    (41) LLVM Symbolic Execution SCC
        (42) SCC2IRS [SOUND, 99 ms]
        (43) IntTRS
        (44) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (45) IntTRS
        (46) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (47) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/uxDzu.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/uxDzu.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cstrpbrk" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		%6 = alloca *i8, align 8
		%7 = alloca i32, align 4
		%8 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		br %9
	9:
		%10 = load %4
		%11 = getelementptr %10, 1
		store %11, %4
		%12 = load %10
		%13 = sext i8 %12 to i32
		store %13, %7
		%14 = icmp ne %13 0
		br %14, %15, %32
	15:
		%16 = load %5
		store %16, %6
		br %17
	17:
		%18 = load %6
		%19 = getelementptr %18, 1
		store %19, %6
		%20 = load %18
		%21 = sext i8 %20 to i32
		store %21, %8
		%22 = icmp ne %21 0
		br %22, %23, %31
	23:
		%24 = load %8
		%25 = load %7
		%26 = icmp eq %24 %25
		br %26, %27, %30
	27:
		%28 = load %4
		%29 = getelementptr %28, -1
		store %29, %3
		br %33
	30:
		br %17
	31:
		br %9
	32:
		store null, %3
		br %33
	33:
		%34 = load %3
		ret %34

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 58
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = load %2
		%9 = icmp slt %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %11
	11:
		%12 = load %3
		%13 = icmp slt %12 1
		br %13, %14, %15
	14:
		store 1, %3
		br %15
	15:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%16 = load %2
		%17 = sext i32 %16 to i64
		%18 = mul i64 %17, 1
		%19 = alloca i8, numElementsLit: %18, align 16
		store %19, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%20 = load %3
		%21 = sext i32 %20 to i64
		%22 = mul i64 %21, 1
		%23 = alloca i8, numElementsLit: %22, align 16
		store %23, %5
		%24 = load %4
		%25 = load %2
		%26 = sub i32 %25, 1
		%27 = sext i32 %26 to i64
		%28 = getelementptr %24, %27
		store 0, %28
		%29 = load %5
		%30 = load %3
		%31 = sub i32 %30, 1
		%32 = sext i32 %31 to i64
		%33 = getelementptr %29, %32
		store 0, %33
		%34 = load %4
		%35 = load %5
		%36 = call *i8 @cstrpbrk(*i8 %34, *i8 %35)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 42 rulesP rules:
f_1026(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1027(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: v4889 = 1 + v4832 && 3 <= v4889
f_1027(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1028(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1028(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1029(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4891, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1029(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4891, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1030(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4891, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: 0 = 0
f_1030(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4891, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1031(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4891, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1031(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4891, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1032(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4891, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: v4891 != 0 && v4832 < v4845 && 3 <= v4845
f_1031(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4891, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1033(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: v4891 = 0
f_1032(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4891, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1034(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4891, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: 0 = 0
f_1034(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4891, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1036(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4891, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1036(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4891, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1081(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, v4891, v4833, v4829, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4840, v4841, v5425, v5427, 3, 7, 2, 4, 8) :|: TRUE
f_1081(v5400, v5401, v5402, v5403, v5404, v5405, v5406, v5407, v5408, v5409, v5410, 1, v5412, v5413, v5414, v5415, v5416, 0, v5418, v5429, v5419, v5430, v5420, v5431, v5421, v5432, v5422, v5433, v5426, v5428, v5434, v5435, v5436, v5437, v5438, v5439, v5440, v5441, v5423, v5424, v5425, v5427, 3, 7, 2, 4, 8) -> f_1082(v5400, v5401, v5402, v5403, v5404, v5405, v5406, v5407, v5408, v5409, v5410, 1, v5412, v5413, v5414, v5416, 0, v5418, v5429, v5419, v5430, v5420, v5431, v5421, v5432, v5422, v5433, v5426, v5428, v5434, v5435, v5436, v5437, v5438, v5439, v5440, v5441, v5423, v5424, v5425, v5427, 3, 7, 2, 4, 8) :|: 0 = 0
f_1082(v5400, v5401, v5402, v5403, v5404, v5405, v5406, v5407, v5408, v5409, v5410, 1, v5412, v5413, v5414, v5416, 0, v5418, v5429, v5419, v5430, v5420, v5431, v5421, v5432, v5422, v5433, v5426, v5428, v5434, v5435, v5436, v5437, v5438, v5439, v5440, v5441, v5423, v5424, v5425, v5427, 3, 7, 2, 4, 8) -> f_1083(v5400, v5401, v5402, v5403, v5404, v5405, v5406, v5407, v5408, v5409, v5410, 1, v5412, v5413, v5414, 0, v5418, v5429, v5419, v5430, v5420, v5431, v5421, v5432, v5422, v5433, v5426, v5428, v5434, v5435, v5436, v5437, v5438, v5439, v5440, v5441, v5423, v5424, v5425, v5427, 3, 7, 2, 4, 8) :|: 0 = 0
f_1083(v5400, v5401, v5402, v5403, v5404, v5405, v5406, v5407, v5408, v5409, v5410, 1, v5412, v5413, v5414, 0, v5418, v5429, v5419, v5430, v5420, v5431, v5421, v5432, v5422, v5433, v5426, v5428, v5434, v5435, v5436, v5437, v5438, v5439, v5440, v5441, v5423, v5424, v5425, v5427, 3, 7, 2, 4, 8) -> f_1085(v5400, v5401, v5402, v5403, v5404, v5405, v5406, v5407, v5408, v5409, v5410, 1, v5412, v5413, v5414, 0, v5418, v5429, v5419, v5430, v5420, v5431, v5421, v5432, v5422, v5433, v5426, v5428, v5434, v5435, v5436, v5437, v5438, v5439, v5440, v5441, v5423, v5424, v5425, v5427, 3, 7, 2, 4, 8) :|: v5414 != v5410
f_1085(v5400, v5401, v5402, v5403, v5404, v5405, v5406, v5407, v5408, v5409, v5410, 1, v5412, v5413, v5414, 0, v5418, v5429, v5419, v5430, v5420, v5431, v5421, v5432, v5422, v5433, v5426, v5428, v5434, v5435, v5436, v5437, v5438, v5439, v5440, v5441, v5423, v5424, v5425, v5427, 3, 7, 2, 4, 8) -> f_1087(v5400, v5401, v5402, v5403, v5404, v5405, v5406, v5407, v5408, v5409, v5410, 1, v5412, v5413, v5414, 0, v5418, v5429, v5419, v5430, v5420, v5431, v5421, v5432, v5422, v5433, v5426, v5428, v5434, v5435, v5436, v5437, v5438, v5439, v5440, v5441, v5423, v5424, v5425, v5427, 3, 7, 2, 4, 8) :|: 0 = 0
f_1087(v5400, v5401, v5402, v5403, v5404, v5405, v5406, v5407, v5408, v5409, v5410, 1, v5412, v5413, v5414, 0, v5418, v5429, v5419, v5430, v5420, v5431, v5421, v5432, v5422, v5433, v5426, v5428, v5434, v5435, v5436, v5437, v5438, v5439, v5440, v5441, v5423, v5424, v5425, v5427, 3, 7, 2, 4, 8) -> f_1089(v5400, v5401, v5402, v5403, v5404, v5405, v5406, v5407, v5408, v5409, v5410, 1, v5412, v5413, v5414, 0, v5418, v5429, v5419, v5430, v5420, v5431, v5421, v5432, v5422, v5433, v5426, v5428, v5434, v5435, v5436, v5437, v5438, v5439, v5440, v5441, v5423, v5424, v5425, v5427, 3, 7, 2, 4, 8) :|: TRUE
f_1089(v5400, v5401, v5402, v5403, v5404, v5405, v5406, v5407, v5408, v5409, v5410, 1, v5412, v5413, v5414, 0, v5418, v5429, v5419, v5430, v5420, v5431, v5421, v5432, v5422, v5433, v5426, v5428, v5434, v5435, v5436, v5437, v5438, v5439, v5440, v5441, v5423, v5424, v5425, v5427, 3, 7, 2, 4, 8) -> f_1091(v5400, v5401, v5402, v5403, v5404, v5405, v5406, v5407, v5408, v5409, v5410, 1, v5412, v5413, v5414, 0, v5418, v5429, v5419, v5430, v5420, v5431, v5421, v5432, v5422, v5433, v5426, v5428, v5434, v5435, v5436, v5437, v5438, v5439, v5440, v5441, v5423, v5424, v5425, v5427, 3, 7, 2, 4, 8) :|: TRUE
f_1091(v5400, v5401, v5402, v5403, v5404, v5405, v5406, v5407, v5408, v5409, v5410, 1, v5412, v5413, v5414, 0, v5418, v5429, v5419, v5430, v5420, v5431, v5421, v5432, v5422, v5433, v5426, v5428, v5434, v5435, v5436, v5437, v5438, v5439, v5440, v5441, v5423, v5424, v5425, v5427, 3, 7, 2, 4, 8) -> f_1025(v5400, v5401, v5402, v5403, v5404, v5405, v5406, v5407, v5408, v5409, v5410, 1, v5412, v5413, v5414, 0, v5418, v5429, v5419, v5430, v5420, v5431, v5421, v5432, v5422, v5433, v5426, v5428, v5434, v5435, v5436, v5437, v5438, v5439, v5440, v5441, v5423, v5424, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1025(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4831, v4832, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1026(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4833, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: 0 = 0
f_1033(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1035(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: 0 = 0
f_1035(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1037(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1037(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1039(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1039(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4827, v4828, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1041(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: 0 = 0
f_1041(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1044(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: v4981 = 1 + v4828 && 3 <= v4981
f_1044(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1047(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1047(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1050(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1050(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, v4829, 1, v4832, v4889, 0, v4833, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1053(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: 0 = 0
f_1053(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1055(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1055(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1057(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: v4983 != 0 && v4828 < v4843 && 3 <= v4843
f_1057(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1060(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: 0 = 0
f_1060(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1063(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1063(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1066(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: 0 = 0
f_1066(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1068(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1068(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1070(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1070(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4832, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4842, v4844, 3, 7, 2, 4, 8) -> f_1072(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) :|: 0 = 0
f_1072(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4889, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) -> f_1074(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v5397, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) :|: v5397 = 1 + v4820 && 2 <= v5397
f_1074(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v5397, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) -> f_1075(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v5397, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1075(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v5397, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) -> f_1076(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v5397, v4858, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) :|: 0 = 0
f_1076(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v5397, v4858, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) -> f_1077(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v5397, v4858, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) :|: 0 = 0
f_1077(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v5397, v4858, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) -> f_1078(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v5397, v4858, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1078(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v5397, v4858, 0, v4833, v4829, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) -> f_1079(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v5397, v4858, v4833, v4829, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) :|: 0 = 0
f_1079(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v5397, v4858, v4833, v4829, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) -> f_1080(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v5397, v4858, v4833, v4829, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) :|: TRUE
f_1080(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v5397, v4858, v4833, v4829, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4827, v4831, v4840, v4841, v4832, v4842, v4844, 3, 7, 2, 4, 8) -> f_1081(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826, v4828, v4981, v4983, 1, v4820, v5397, v4858, v4833, v4829, 0, v4835, v4846, v4836, v4847, v4837, v4848, v4838, v4849, v4839, v4850, v4843, v4845, v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858, v4840, v4841, v5425, v5427, 3, 7, 2, 4, 8) :|: TRUE
Combined rules. Obtained 8 rulesP rules:
f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4827:0, v4828:0, v4829:0, 1, v4832:0, v4833:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4831:0, v4840:0, v4841:0, v4842:0, v4844:0, 3, 7, 2, 4, 8) -> f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4827:0, v4828:0, v4829:0, 1, 1 + v4832:0, v4891:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4832:0, v4840:0, v4841:0, v4842:1, v4844:1, 3, 7, 2, 4, 8) :|: v4832:0 > 1 && v4845:0 > v4832:0 && v4891:0 < 0 && v4891:0 < v4829:0 && v4845:0 > 2
f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4827:0, v4828:0, v4829:0, 1, v4832:0, v4833:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4831:0, v4840:0, v4841:0, v4842:0, v4844:0, 3, 7, 2, 4, 8) -> f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4827:0, v4828:0, v4829:0, 1, 1 + v4832:0, v4891:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4832:0, v4840:0, v4841:0, v4842:1, v4844:1, 3, 7, 2, 4, 8) :|: v4832:0 > 1 && v4845:0 > v4832:0 && v4891:0 < 0 && v4891:0 > v4829:0 && v4845:0 > 2
f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4827:0, v4828:0, v4829:0, 1, v4832:0, v4833:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4831:0, v4840:0, v4841:0, v4842:0, v4844:0, 3, 7, 2, 4, 8) -> f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4827:0, v4828:0, v4829:0, 1, 1 + v4832:0, v4891:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4832:0, v4840:0, v4841:0, v4842:1, v4844:1, 3, 7, 2, 4, 8) :|: v4832:0 > 1 && v4845:0 > v4832:0 && v4891:0 > 0 && v4891:0 < v4829:0 && v4845:0 > 2
f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4827:0, v4828:0, v4829:0, 1, v4832:0, v4833:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4831:0, v4840:0, v4841:0, v4842:0, v4844:0, 3, 7, 2, 4, 8) -> f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4827:0, v4828:0, v4829:0, 1, 1 + v4832:0, v4891:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4832:0, v4840:0, v4841:0, v4842:1, v4844:1, 3, 7, 2, 4, 8) :|: v4832:0 > 1 && v4845:0 > v4832:0 && v4891:0 > 0 && v4891:0 > v4829:0 && v4845:0 > 2
f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4827:0, v4828:0, v4829:0, 1, v4832:0, v4833:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4831:0, v4840:0, v4841:0, v4842:0, v4844:0, 3, 7, 2, 4, 8) -> f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4828:0, 1 + v4828:0, v4983:0, 1, 1 + v4820:0, v4858:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4820:0, v4840:0, v4841:0, v4842:1, v4844:1, 3, 7, 2, 4, 8) :|: v4832:0 > 1 && v4828:0 > 1 && v4843:0 > v4828:0 && v4983:0 < 0 && v4843:0 > 2 && v4983:0 > v4858:0 && v4820:0 > 0
f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4827:0, v4828:0, v4829:0, 1, v4832:0, v4833:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4831:0, v4840:0, v4841:0, v4842:0, v4844:0, 3, 7, 2, 4, 8) -> f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4828:0, 1 + v4828:0, v4983:0, 1, 1 + v4820:0, v4858:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4820:0, v4840:0, v4841:0, v4842:1, v4844:1, 3, 7, 2, 4, 8) :|: v4832:0 > 1 && v4828:0 > 1 && v4843:0 > v4828:0 && v4983:0 < 0 && v4843:0 > 2 && v4983:0 < v4858:0 && v4820:0 > 0
f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4827:0, v4828:0, v4829:0, 1, v4832:0, v4833:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4831:0, v4840:0, v4841:0, v4842:0, v4844:0, 3, 7, 2, 4, 8) -> f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4828:0, 1 + v4828:0, v4983:0, 1, 1 + v4820:0, v4858:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4820:0, v4840:0, v4841:0, v4842:1, v4844:1, 3, 7, 2, 4, 8) :|: v4832:0 > 1 && v4828:0 > 1 && v4843:0 > v4828:0 && v4983:0 > 0 && v4843:0 > 2 && v4983:0 > v4858:0 && v4820:0 > 0
f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4827:0, v4828:0, v4829:0, 1, v4832:0, v4833:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4831:0, v4840:0, v4841:0, v4842:0, v4844:0, 3, 7, 2, 4, 8) -> f_1026(v4819:0, v4820:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4826:0, v4828:0, 1 + v4828:0, v4983:0, 1, 1 + v4820:0, v4858:0, 0, v4835:0, v4846:0, v4836:0, v4847:0, v4837:0, v4848:0, v4838:0, v4849:0, v4839:0, v4850:0, v4843:0, v4845:0, v4851:0, v4852:0, v4853:0, v4854:0, v4855:0, v4856:0, v4857:0, v4858:0, v4820:0, v4840:0, v4841:0, v4842:1, v4844:1, 3, 7, 2, 4, 8) :|: v4832:0 > 1 && v4828:0 > 1 && v4843:0 > v4828:0 && v4983:0 > 0 && v4843:0 > 2 && v4983:0 < v4858:0 && v4820:0 > 0
Filtered unneeded arguments:
   f_1026(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45) -> f_1026(x2, x10, x11, x13, x26, x27, x35)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_1026(v4820:0, v4828:0, v4829:0, v4832:0, v4843:0, v4845:0, v4858:0) -> f_1026(v4820:0, v4828:0, v4829:0, 1 + v4832:0, v4843:0, v4845:0, v4858:0) :|: v4845:0 > v4832:0 && v4845:0 > 2 && v4832:0 > 1
f_1026(v4820:0, v4828:0, v4829:0, v4832:0, v4843:0, v4845:0, v4858:0) -> f_1026(v4820:0, 1 + v4828:0, v4983:0, 1 + v4820:0, v4843:0, v4845:0, v4858:0) :|: v4828:0 > 1 && v4832:0 > 1 && v4843:0 > v4828:0 && v4983:0 < 0 && v4843:0 > 2 && v4820:0 > 0 && v4983:0 > v4858:0
f_1026(v4820:0, v4828:0, v4829:0, v4832:0, v4843:0, v4845:0, v4858:0) -> f_1026(v4820:0, 1 + v4828:0, v4983:0, 1 + v4820:0, v4843:0, v4845:0, v4858:0) :|: v4828:0 > 1 && v4832:0 > 1 && v4843:0 > v4828:0 && v4983:0 < 0 && v4843:0 > 2 && v4820:0 > 0 && v4983:0 < v4858:0
f_1026(v4820:0, v4828:0, v4829:0, v4832:0, v4843:0, v4845:0, v4858:0) -> f_1026(v4820:0, 1 + v4828:0, v4983:0, 1 + v4820:0, v4843:0, v4845:0, v4858:0) :|: v4828:0 > 1 && v4832:0 > 1 && v4843:0 > v4828:0 && v4983:0 > 0 && v4843:0 > 2 && v4820:0 > 0 && v4983:0 > v4858:0
f_1026(v4820:0, v4828:0, v4829:0, v4832:0, v4843:0, v4845:0, v4858:0) -> f_1026(v4820:0, 1 + v4828:0, v4983:0, 1 + v4820:0, v4843:0, v4845:0, v4858:0) :|: v4828:0 > 1 && v4832:0 > 1 && v4843:0 > v4828:0 && v4983:0 > 0 && v4843:0 > 2 && v4820:0 > 0 && v4983:0 < v4858:0

----------------------------------------

(9)
Obligation:
Rules:
f_1026(v4820:0, v4828:0, v4829:0, v4832:0, v4843:0, v4845:0, v4858:0) -> f_1026(v4820:0, v4828:0, v4829:0, 1 + v4832:0, v4843:0, v4845:0, v4858:0) :|: v4845:0 > v4832:0 && v4845:0 > 2 && v4832:0 > 1
f_1026(x, x1, x2, x3, x4, x5, x6) -> f_1026(x, 1 + x1, x7, 1 + x, x4, x5, x6) :|: x1 > 1 && x3 > 1 && x4 > x1 && x7 < 0 && x4 > 2 && x > 0 && x7 > x6
f_1026(x8, x9, x10, x11, x12, x13, x14) -> f_1026(x8, 1 + x9, x15, 1 + x8, x12, x13, x14) :|: x9 > 1 && x11 > 1 && x12 > x9 && x15 < 0 && x12 > 2 && x8 > 0 && x15 < x14
f_1026(x16, x17, x18, x19, x20, x21, x22) -> f_1026(x16, 1 + x17, x23, 1 + x16, x20, x21, x22) :|: x17 > 1 && x19 > 1 && x20 > x17 && x23 > 0 && x20 > 2 && x16 > 0 && x23 > x22
f_1026(x24, x25, x26, x27, x28, x29, x30) -> f_1026(x24, 1 + x25, x31, 1 + x24, x28, x29, x30) :|: x25 > 1 && x27 > 1 && x28 > x25 && x31 > 0 && x28 > 2 && x24 > 0 && x31 < x30

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_1026(x16:0, x17:0, x18:0, x19:0, x20:0, x21:0, x22:0) -> f_1026(x16:0, 1 + x17:0, x23:0, 1 + x16:0, x20:0, x21:0, x22:0) :|: x16:0 > 0 && x23:0 > x22:0 && x20:0 > 2 && x23:0 > 0 && x20:0 > x17:0 && x19:0 > 1 && x17:0 > 1
f_1026(x8:0, x9:0, x10:0, x11:0, x12:0, x13:0, x14:0) -> f_1026(x8:0, 1 + x9:0, x15:0, 1 + x8:0, x12:0, x13:0, x14:0) :|: x8:0 > 0 && x15:0 < x14:0 && x12:0 > 2 && x15:0 < 0 && x9:0 < x12:0 && x11:0 > 1 && x9:0 > 1
f_1026(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_1026(x:0, 1 + x1:0, x7:0, 1 + x:0, x4:0, x5:0, x6:0) :|: x:0 > 0 && x7:0 > x6:0 && x4:0 > 2 && x7:0 < 0 && x4:0 > x1:0 && x3:0 > 1 && x1:0 > 1
f_1026(v4820:0:0, v4828:0:0, v4829:0:0, v4832:0:0, v4843:0:0, v4845:0:0, v4858:0:0) -> f_1026(v4820:0:0, v4828:0:0, v4829:0:0, 1 + v4832:0:0, v4843:0:0, v4845:0:0, v4858:0:0) :|: v4845:0:0 > v4832:0:0 && v4845:0:0 > 2 && v4832:0:0 > 1
f_1026(x24:0, x25:0, x26:0, x27:0, x28:0, x29:0, x30:0) -> f_1026(x24:0, 1 + x25:0, x31:0, 1 + x24:0, x28:0, x29:0, x30:0) :|: x24:0 > 0 && x31:0 < x30:0 && x28:0 > 2 && x31:0 > 0 && x28:0 > x25:0 && x27:0 > 1 && x25:0 > 1

----------------------------------------

(12) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:
none

----------------------------------------

(13)
Obligation:
Rules:
f_1026(x16:0, x17:0, x18:0, x19:0, x20:0, x21:0, x22:0) -> f_1026(x16:0, 1 + x17:0, x23:0, 1 + x16:0, x20:0, x21:0, x22:0) :|: x16:0 > 0 && x23:0 > x22:0 && x20:0 > 2 && x23:0 > 0 && x20:0 > x17:0 && x19:0 > 1 && x17:0 > 1
f_1026(x8:0, x9:0, x10:0, x11:0, x12:0, x13:0, x14:0) -> f_1026(x8:0, 1 + x9:0, x15:0, 1 + x8:0, x12:0, x13:0, x14:0) :|: x8:0 > 0 && x15:0 < x14:0 && x12:0 > 2 && x15:0 < 0 && x9:0 < x12:0 && x11:0 > 1 && x9:0 > 1
f_1026(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_1026(x:0, 1 + x1:0, x7:0, 1 + x:0, x4:0, x5:0, x6:0) :|: x:0 > 0 && x7:0 > x6:0 && x4:0 > 2 && x7:0 < 0 && x4:0 > x1:0 && x3:0 > 1 && x1:0 > 1
f_1026(v4820:0:0, v4828:0:0, v4829:0:0, v4832:0:0, v4843:0:0, v4845:0:0, v4858:0:0) -> f_1026(v4820:0:0, v4828:0:0, v4829:0:0, 1 + v4832:0:0, v4843:0:0, v4845:0:0, v4858:0:0) :|: v4845:0:0 > v4832:0:0 && v4845:0:0 > 2 && v4832:0:0 > 1
f_1026(x24:0, x25:0, x26:0, x27:0, x28:0, x29:0, x30:0) -> f_1026(x24:0, 1 + x25:0, x31:0, 1 + x24:0, x28:0, x29:0, x30:0) :|: x24:0 > 0 && x31:0 < x30:0 && x28:0 > 2 && x31:0 > 0 && x28:0 > x25:0 && x27:0 > 1 && x25:0 > 1

----------------------------------------

(14) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1026(x, x1, x2, x3, x4, x5, x6)] = -3 + x - x1 + x4 - x6

The following rules are decreasing:
f_1026(x16:0, x17:0, x18:0, x19:0, x20:0, x21:0, x22:0) -> f_1026(x16:0, 1 + x17:0, x23:0, 1 + x16:0, x20:0, x21:0, x22:0) :|: x16:0 > 0 && x23:0 > x22:0 && x20:0 > 2 && x23:0 > 0 && x20:0 > x17:0 && x19:0 > 1 && x17:0 > 1
f_1026(x8:0, x9:0, x10:0, x11:0, x12:0, x13:0, x14:0) -> f_1026(x8:0, 1 + x9:0, x15:0, 1 + x8:0, x12:0, x13:0, x14:0) :|: x8:0 > 0 && x15:0 < x14:0 && x12:0 > 2 && x15:0 < 0 && x9:0 < x12:0 && x11:0 > 1 && x9:0 > 1
f_1026(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_1026(x:0, 1 + x1:0, x7:0, 1 + x:0, x4:0, x5:0, x6:0) :|: x:0 > 0 && x7:0 > x6:0 && x4:0 > 2 && x7:0 < 0 && x4:0 > x1:0 && x3:0 > 1 && x1:0 > 1
f_1026(x24:0, x25:0, x26:0, x27:0, x28:0, x29:0, x30:0) -> f_1026(x24:0, 1 + x25:0, x31:0, 1 + x24:0, x28:0, x29:0, x30:0) :|: x24:0 > 0 && x31:0 < x30:0 && x28:0 > 2 && x31:0 > 0 && x28:0 > x25:0 && x27:0 > 1 && x25:0 > 1
The following rules are bounded:
f_1026(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_1026(x:0, 1 + x1:0, x7:0, 1 + x:0, x4:0, x5:0, x6:0) :|: x:0 > 0 && x7:0 > x6:0 && x4:0 > 2 && x7:0 < 0 && x4:0 > x1:0 && x3:0 > 1 && x1:0 > 1

----------------------------------------

(15)
Obligation:
Rules:
f_1026(x16:0, x17:0, x18:0, x19:0, x20:0, x21:0, x22:0) -> f_1026(x16:0, 1 + x17:0, x23:0, 1 + x16:0, x20:0, x21:0, x22:0) :|: x16:0 > 0 && x23:0 > x22:0 && x20:0 > 2 && x23:0 > 0 && x20:0 > x17:0 && x19:0 > 1 && x17:0 > 1
f_1026(x8:0, x9:0, x10:0, x11:0, x12:0, x13:0, x14:0) -> f_1026(x8:0, 1 + x9:0, x15:0, 1 + x8:0, x12:0, x13:0, x14:0) :|: x8:0 > 0 && x15:0 < x14:0 && x12:0 > 2 && x15:0 < 0 && x9:0 < x12:0 && x11:0 > 1 && x9:0 > 1
f_1026(v4820:0:0, v4828:0:0, v4829:0:0, v4832:0:0, v4843:0:0, v4845:0:0, v4858:0:0) -> f_1026(v4820:0:0, v4828:0:0, v4829:0:0, 1 + v4832:0:0, v4843:0:0, v4845:0:0, v4858:0:0) :|: v4845:0:0 > v4832:0:0 && v4845:0:0 > 2 && v4832:0:0 > 1
f_1026(x24:0, x25:0, x26:0, x27:0, x28:0, x29:0, x30:0) -> f_1026(x24:0, 1 + x25:0, x31:0, 1 + x24:0, x28:0, x29:0, x30:0) :|: x24:0 > 0 && x31:0 < x30:0 && x28:0 > 2 && x31:0 > 0 && x28:0 > x25:0 && x27:0 > 1 && x25:0 > 1

----------------------------------------

(16) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(17)
Obligation:
Rules:
f_1026(x8:0:0, x9:0:0, x10:0:0, x11:0:0, x12:0:0, x13:0:0, x14:0:0) -> f_1026(x8:0:0, 1 + x9:0:0, x15:0:0, 1 + x8:0:0, x12:0:0, x13:0:0, x14:0:0) :|: x11:0:0 > 1 && x9:0:0 > 1 && x9:0:0 < x12:0:0 && x15:0:0 < 0 && x12:0:0 > 2 && x15:0:0 < x14:0:0 && x8:0:0 > 0
f_1026(x16:0:0, x17:0:0, x18:0:0, x19:0:0, x20:0:0, x21:0:0, x22:0:0) -> f_1026(x16:0:0, 1 + x17:0:0, x23:0:0, 1 + x16:0:0, x20:0:0, x21:0:0, x22:0:0) :|: x19:0:0 > 1 && x17:0:0 > 1 && x20:0:0 > x17:0:0 && x23:0:0 > 0 && x20:0:0 > 2 && x23:0:0 > x22:0:0 && x16:0:0 > 0
f_1026(x24:0:0, x25:0:0, x26:0:0, x27:0:0, x28:0:0, x29:0:0, x30:0:0) -> f_1026(x24:0:0, 1 + x25:0:0, x31:0:0, 1 + x24:0:0, x28:0:0, x29:0:0, x30:0:0) :|: x27:0:0 > 1 && x25:0:0 > 1 && x28:0:0 > x25:0:0 && x31:0:0 > 0 && x28:0:0 > 2 && x31:0:0 < x30:0:0 && x24:0:0 > 0
f_1026(v4820:0:0:0, v4828:0:0:0, v4829:0:0:0, v4832:0:0:0, v4843:0:0:0, v4845:0:0:0, v4858:0:0:0) -> f_1026(v4820:0:0:0, v4828:0:0:0, v4829:0:0:0, 1 + v4832:0:0:0, v4843:0:0:0, v4845:0:0:0, v4858:0:0:0) :|: v4845:0:0:0 > v4832:0:0:0 && v4845:0:0:0 > 2 && v4832:0:0:0 > 1

----------------------------------------

(18) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:
none

----------------------------------------

(19)
Obligation:
Rules:
f_1026(x8:0:0, x9:0:0, x10:0:0, x11:0:0, x12:0:0, x13:0:0, x14:0:0) -> f_1026(x8:0:0, 1 + x9:0:0, x15:0:0, 1 + x8:0:0, x12:0:0, x13:0:0, x14:0:0) :|: x11:0:0 > 1 && x9:0:0 > 1 && x9:0:0 < x12:0:0 && x15:0:0 < 0 && x12:0:0 > 2 && x15:0:0 < x14:0:0 && x8:0:0 > 0
f_1026(x16:0:0, x17:0:0, x18:0:0, x19:0:0, x20:0:0, x21:0:0, x22:0:0) -> f_1026(x16:0:0, 1 + x17:0:0, x23:0:0, 1 + x16:0:0, x20:0:0, x21:0:0, x22:0:0) :|: x19:0:0 > 1 && x17:0:0 > 1 && x20:0:0 > x17:0:0 && x23:0:0 > 0 && x20:0:0 > 2 && x23:0:0 > x22:0:0 && x16:0:0 > 0
f_1026(x24:0:0, x25:0:0, x26:0:0, x27:0:0, x28:0:0, x29:0:0, x30:0:0) -> f_1026(x24:0:0, 1 + x25:0:0, x31:0:0, 1 + x24:0:0, x28:0:0, x29:0:0, x30:0:0) :|: x27:0:0 > 1 && x25:0:0 > 1 && x28:0:0 > x25:0:0 && x31:0:0 > 0 && x28:0:0 > 2 && x31:0:0 < x30:0:0 && x24:0:0 > 0
f_1026(v4820:0:0:0, v4828:0:0:0, v4829:0:0:0, v4832:0:0:0, v4843:0:0:0, v4845:0:0:0, v4858:0:0:0) -> f_1026(v4820:0:0:0, v4828:0:0:0, v4829:0:0:0, 1 + v4832:0:0:0, v4843:0:0:0, v4845:0:0:0, v4858:0:0:0) :|: v4845:0:0:0 > v4832:0:0:0 && v4845:0:0:0 > 2 && v4832:0:0:0 > 1

----------------------------------------

(20) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1026 ] = -1*f_1026_2 + f_1026_5 + 2*f_1026_1 + 4*f_1026_7

The following rules are decreasing:
f_1026(x8:0:0, x9:0:0, x10:0:0, x11:0:0, x12:0:0, x13:0:0, x14:0:0) -> f_1026(x8:0:0, 1 + x9:0:0, x15:0:0, 1 + x8:0:0, x12:0:0, x13:0:0, x14:0:0) :|: x11:0:0 > 1 && x9:0:0 > 1 && x9:0:0 < x12:0:0 && x15:0:0 < 0 && x12:0:0 > 2 && x15:0:0 < x14:0:0 && x8:0:0 > 0
f_1026(x16:0:0, x17:0:0, x18:0:0, x19:0:0, x20:0:0, x21:0:0, x22:0:0) -> f_1026(x16:0:0, 1 + x17:0:0, x23:0:0, 1 + x16:0:0, x20:0:0, x21:0:0, x22:0:0) :|: x19:0:0 > 1 && x17:0:0 > 1 && x20:0:0 > x17:0:0 && x23:0:0 > 0 && x20:0:0 > 2 && x23:0:0 > x22:0:0 && x16:0:0 > 0
f_1026(x24:0:0, x25:0:0, x26:0:0, x27:0:0, x28:0:0, x29:0:0, x30:0:0) -> f_1026(x24:0:0, 1 + x25:0:0, x31:0:0, 1 + x24:0:0, x28:0:0, x29:0:0, x30:0:0) :|: x27:0:0 > 1 && x25:0:0 > 1 && x28:0:0 > x25:0:0 && x31:0:0 > 0 && x28:0:0 > 2 && x31:0:0 < x30:0:0 && x24:0:0 > 0

The following rules are bounded:
f_1026(x24:0:0, x25:0:0, x26:0:0, x27:0:0, x28:0:0, x29:0:0, x30:0:0) -> f_1026(x24:0:0, 1 + x25:0:0, x31:0:0, 1 + x24:0:0, x28:0:0, x29:0:0, x30:0:0) :|: x27:0:0 > 1 && x25:0:0 > 1 && x28:0:0 > x25:0:0 && x31:0:0 > 0 && x28:0:0 > 2 && x31:0:0 < x30:0:0 && x24:0:0 > 0


----------------------------------------

(21)
Obligation:
Rules:
f_1026(x8:0:0, x9:0:0, x10:0:0, x11:0:0, x12:0:0, x13:0:0, x14:0:0) -> f_1026(x8:0:0, 1 + x9:0:0, x15:0:0, 1 + x8:0:0, x12:0:0, x13:0:0, x14:0:0) :|: x11:0:0 > 1 && x9:0:0 > 1 && x9:0:0 < x12:0:0 && x15:0:0 < 0 && x12:0:0 > 2 && x15:0:0 < x14:0:0 && x8:0:0 > 0
f_1026(x16:0:0, x17:0:0, x18:0:0, x19:0:0, x20:0:0, x21:0:0, x22:0:0) -> f_1026(x16:0:0, 1 + x17:0:0, x23:0:0, 1 + x16:0:0, x20:0:0, x21:0:0, x22:0:0) :|: x19:0:0 > 1 && x17:0:0 > 1 && x20:0:0 > x17:0:0 && x23:0:0 > 0 && x20:0:0 > 2 && x23:0:0 > x22:0:0 && x16:0:0 > 0
f_1026(v4820:0:0:0, v4828:0:0:0, v4829:0:0:0, v4832:0:0:0, v4843:0:0:0, v4845:0:0:0, v4858:0:0:0) -> f_1026(v4820:0:0:0, v4828:0:0:0, v4829:0:0:0, 1 + v4832:0:0:0, v4843:0:0:0, v4845:0:0:0, v4858:0:0:0) :|: v4845:0:0:0 > v4832:0:0:0 && v4845:0:0:0 > 2 && v4832:0:0:0 > 1

----------------------------------------

(22) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(23)
Obligation:
Rules:
f_1026(x16:0:0:0, x17:0:0:0, x18:0:0:0, x19:0:0:0, x20:0:0:0, x21:0:0:0, x22:0:0:0) -> f_1026(x16:0:0:0, 1 + x17:0:0:0, x23:0:0:0, 1 + x16:0:0:0, x20:0:0:0, x21:0:0:0, x22:0:0:0) :|: x23:0:0:0 > x22:0:0:0 && x16:0:0:0 > 0 && x20:0:0:0 > 2 && x23:0:0:0 > 0 && x20:0:0:0 > x17:0:0:0 && x17:0:0:0 > 1 && x19:0:0:0 > 1
f_1026(x8:0:0:0, x9:0:0:0, x10:0:0:0, x11:0:0:0, x12:0:0:0, x13:0:0:0, x14:0:0:0) -> f_1026(x8:0:0:0, 1 + x9:0:0:0, x15:0:0:0, 1 + x8:0:0:0, x12:0:0:0, x13:0:0:0, x14:0:0:0) :|: x15:0:0:0 < x14:0:0:0 && x8:0:0:0 > 0 && x12:0:0:0 > 2 && x15:0:0:0 < 0 && x9:0:0:0 < x12:0:0:0 && x9:0:0:0 > 1 && x11:0:0:0 > 1
f_1026(v4820:0:0:0:0, v4828:0:0:0:0, v4829:0:0:0:0, v4832:0:0:0:0, v4843:0:0:0:0, v4845:0:0:0:0, v4858:0:0:0:0) -> f_1026(v4820:0:0:0:0, v4828:0:0:0:0, v4829:0:0:0:0, 1 + v4832:0:0:0:0, v4843:0:0:0:0, v4845:0:0:0:0, v4858:0:0:0:0) :|: v4845:0:0:0:0 > v4832:0:0:0:0 && v4845:0:0:0:0 > 2 && v4832:0:0:0:0 > 1

----------------------------------------

(24) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:
none

----------------------------------------

(25)
Obligation:
Rules:
f_1026(x16:0:0:0, x17:0:0:0, x18:0:0:0, x19:0:0:0, x20:0:0:0, x21:0:0:0, x22:0:0:0) -> f_1026(x16:0:0:0, 1 + x17:0:0:0, x23:0:0:0, 1 + x16:0:0:0, x20:0:0:0, x21:0:0:0, x22:0:0:0) :|: x23:0:0:0 > x22:0:0:0 && x16:0:0:0 > 0 && x20:0:0:0 > 2 && x23:0:0:0 > 0 && x20:0:0:0 > x17:0:0:0 && x17:0:0:0 > 1 && x19:0:0:0 > 1
f_1026(x8:0:0:0, x9:0:0:0, x10:0:0:0, x11:0:0:0, x12:0:0:0, x13:0:0:0, x14:0:0:0) -> f_1026(x8:0:0:0, 1 + x9:0:0:0, x15:0:0:0, 1 + x8:0:0:0, x12:0:0:0, x13:0:0:0, x14:0:0:0) :|: x15:0:0:0 < x14:0:0:0 && x8:0:0:0 > 0 && x12:0:0:0 > 2 && x15:0:0:0 < 0 && x9:0:0:0 < x12:0:0:0 && x9:0:0:0 > 1 && x11:0:0:0 > 1
f_1026(v4820:0:0:0:0, v4828:0:0:0:0, v4829:0:0:0:0, v4832:0:0:0:0, v4843:0:0:0:0, v4845:0:0:0:0, v4858:0:0:0:0) -> f_1026(v4820:0:0:0:0, v4828:0:0:0:0, v4829:0:0:0:0, 1 + v4832:0:0:0:0, v4843:0:0:0:0, v4845:0:0:0:0, v4858:0:0:0:0) :|: v4845:0:0:0:0 > v4832:0:0:0:0 && v4845:0:0:0:0 > 2 && v4832:0:0:0:0 > 1

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1026(x, x1, x2, x3, x4, x5, x6)] = -11 - x - 2*x*x1 + 2*x*x4 + x1 + x4 + x4^2

The following rules are decreasing:
f_1026(x16:0:0:0, x17:0:0:0, x18:0:0:0, x19:0:0:0, x20:0:0:0, x21:0:0:0, x22:0:0:0) -> f_1026(x16:0:0:0, 1 + x17:0:0:0, x23:0:0:0, 1 + x16:0:0:0, x20:0:0:0, x21:0:0:0, x22:0:0:0) :|: x23:0:0:0 > x22:0:0:0 && x16:0:0:0 > 0 && x20:0:0:0 > 2 && x23:0:0:0 > 0 && x20:0:0:0 > x17:0:0:0 && x17:0:0:0 > 1 && x19:0:0:0 > 1
f_1026(x8:0:0:0, x9:0:0:0, x10:0:0:0, x11:0:0:0, x12:0:0:0, x13:0:0:0, x14:0:0:0) -> f_1026(x8:0:0:0, 1 + x9:0:0:0, x15:0:0:0, 1 + x8:0:0:0, x12:0:0:0, x13:0:0:0, x14:0:0:0) :|: x15:0:0:0 < x14:0:0:0 && x8:0:0:0 > 0 && x12:0:0:0 > 2 && x15:0:0:0 < 0 && x9:0:0:0 < x12:0:0:0 && x9:0:0:0 > 1 && x11:0:0:0 > 1
The following rules are bounded:
f_1026(x16:0:0:0, x17:0:0:0, x18:0:0:0, x19:0:0:0, x20:0:0:0, x21:0:0:0, x22:0:0:0) -> f_1026(x16:0:0:0, 1 + x17:0:0:0, x23:0:0:0, 1 + x16:0:0:0, x20:0:0:0, x21:0:0:0, x22:0:0:0) :|: x23:0:0:0 > x22:0:0:0 && x16:0:0:0 > 0 && x20:0:0:0 > 2 && x23:0:0:0 > 0 && x20:0:0:0 > x17:0:0:0 && x17:0:0:0 > 1 && x19:0:0:0 > 1
f_1026(x8:0:0:0, x9:0:0:0, x10:0:0:0, x11:0:0:0, x12:0:0:0, x13:0:0:0, x14:0:0:0) -> f_1026(x8:0:0:0, 1 + x9:0:0:0, x15:0:0:0, 1 + x8:0:0:0, x12:0:0:0, x13:0:0:0, x14:0:0:0) :|: x15:0:0:0 < x14:0:0:0 && x8:0:0:0 > 0 && x12:0:0:0 > 2 && x15:0:0:0 < 0 && x9:0:0:0 < x12:0:0:0 && x9:0:0:0 > 1 && x11:0:0:0 > 1

----------------------------------------

(27)
Obligation:
Rules:
f_1026(v4820:0:0:0:0, v4828:0:0:0:0, v4829:0:0:0:0, v4832:0:0:0:0, v4843:0:0:0:0, v4845:0:0:0:0, v4858:0:0:0:0) -> f_1026(v4820:0:0:0:0, v4828:0:0:0:0, v4829:0:0:0:0, 1 + v4832:0:0:0:0, v4843:0:0:0:0, v4845:0:0:0:0, v4858:0:0:0:0) :|: v4845:0:0:0:0 > v4832:0:0:0:0 && v4845:0:0:0:0 > 2 && v4832:0:0:0:0 > 1

----------------------------------------

(28) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(29)
Obligation:
Rules:
f_1026(v4820:0:0:0:0:0, v4828:0:0:0:0:0, v4829:0:0:0:0:0, v4832:0:0:0:0:0, v4843:0:0:0:0:0, v4845:0:0:0:0:0, v4858:0:0:0:0:0) -> f_1026(v4820:0:0:0:0:0, v4828:0:0:0:0:0, v4829:0:0:0:0:0, 1 + v4832:0:0:0:0:0, v4843:0:0:0:0:0, v4845:0:0:0:0:0, v4858:0:0:0:0:0) :|: v4845:0:0:0:0:0 > v4832:0:0:0:0:0 && v4845:0:0:0:0:0 > 2 && v4832:0:0:0:0:0 > 1

----------------------------------------

(30) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1026(x1, x2, x3, x4, x5, x6, x7) -> f_1026(x4, x6)

----------------------------------------

(31)
Obligation:
Rules:
f_1026(v4832:0:0:0:0:0, v4845:0:0:0:0:0) -> f_1026(1 + v4832:0:0:0:0:0, v4845:0:0:0:0:0) :|: v4845:0:0:0:0:0 > v4832:0:0:0:0:0 && v4845:0:0:0:0:0 > 2 && v4832:0:0:0:0:0 > 1

----------------------------------------

(32) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1026(x, x1)] = -x + x1

The following rules are decreasing:
f_1026(v4832:0:0:0:0:0, v4845:0:0:0:0:0) -> f_1026(1 + v4832:0:0:0:0:0, v4845:0:0:0:0:0) :|: v4845:0:0:0:0:0 > v4832:0:0:0:0:0 && v4845:0:0:0:0:0 > 2 && v4832:0:0:0:0:0 > 1
The following rules are bounded:
f_1026(v4832:0:0:0:0:0, v4845:0:0:0:0:0) -> f_1026(1 + v4832:0:0:0:0:0, v4845:0:0:0:0:0) :|: v4845:0:0:0:0:0 > v4832:0:0:0:0:0 && v4845:0:0:0:0:0 > 2 && v4832:0:0:0:0:0 > 1

----------------------------------------

(33)
YES

----------------------------------------

(34)
Obligation:
SCC
----------------------------------------

(35) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_913(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3353, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_916(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3353, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: v3547 = 1 + v3352 && 4 <= v3547
f_916(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3353, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_919(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3353, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: TRUE
f_919(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3353, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_922(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, v3353, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: TRUE
f_922(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, v3353, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_926(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3353, v3351, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: 0 = 0
f_926(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3353, v3351, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_930(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: TRUE
f_930(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_934(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: v3603 != 0 && v3352 < v3365 && 4 <= v3365
f_934(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_939(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: 0 = 0
f_939(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_942(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: TRUE
f_942(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_945(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: 0 = 0
f_945(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_948(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: TRUE
f_948(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_951(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: TRUE
f_951(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_954(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: 0 = 0
f_954(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_957(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: v3355 = 1 + v3344
f_957(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_960(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: TRUE
f_960(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_963(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: 0 = 0
f_963(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_966(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: 0 = 0
f_966(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_969(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: TRUE
f_969(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_972(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: 0 = 0
f_972(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_976(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: TRUE
f_976(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_980(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: TRUE
f_980(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3353, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_909(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3547, v3603, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: TRUE
f_909(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3351, v3352, v3353, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) -> f_913(v3343, v3344, v3345, v3346, v3347, v3348, v3349, v3350, v3352, v3353, 1, v3355, 0, v3357, v3368, v3358, v3369, v3359, v3370, v3360, v3371, v3361, v3372, v3365, v3367, v3373, v3374, v3375, v3376, v3377, v3378, v3380, v3351, v3362, v3363, v3379, v3381, v3364, v3366, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_913(v3343:0, v3344:0, v3345:0, v3346:0, v3347:0, v3348:0, v3349:0, v3350:0, v3352:0, v3353:0, 1, 1 + v3344:0, 0, v3357:0, v3368:0, v3358:0, v3369:0, v3359:0, v3370:0, v3360:0, v3371:0, v3361:0, v3372:0, v3365:0, v3367:0, v3373:0, v3374:0, v3375:0, v3376:0, v3377:0, v3378:0, v3380:0, v3351:0, v3362:0, v3363:0, v3379:0, v3381:0, v3364:0, v3366:0, 3, 7, 2, 4, 8) -> f_913(v3343:0, v3344:0, v3345:0, v3346:0, v3347:0, v3348:0, v3349:0, v3350:0, 1 + v3352:0, v3603:0, 1, 1 + v3344:0, 0, v3357:0, v3368:0, v3358:0, v3369:0, v3359:0, v3370:0, v3360:0, v3371:0, v3361:0, v3372:0, v3365:0, v3367:0, v3373:0, v3374:0, v3375:0, v3376:0, v3377:0, v3378:0, v3380:0, v3352:0, v3362:0, v3363:0, v3379:0, v3381:0, v3364:0, v3366:0, 3, 7, 2, 4, 8) :|: v3352:0 > 2 && v3365:0 > v3352:0 && v3365:0 > 3 && v3603:0 < 0
f_913(v3343:0, v3344:0, v3345:0, v3346:0, v3347:0, v3348:0, v3349:0, v3350:0, v3352:0, v3353:0, 1, 1 + v3344:0, 0, v3357:0, v3368:0, v3358:0, v3369:0, v3359:0, v3370:0, v3360:0, v3371:0, v3361:0, v3372:0, v3365:0, v3367:0, v3373:0, v3374:0, v3375:0, v3376:0, v3377:0, v3378:0, v3380:0, v3351:0, v3362:0, v3363:0, v3379:0, v3381:0, v3364:0, v3366:0, 3, 7, 2, 4, 8) -> f_913(v3343:0, v3344:0, v3345:0, v3346:0, v3347:0, v3348:0, v3349:0, v3350:0, 1 + v3352:0, v3603:0, 1, 1 + v3344:0, 0, v3357:0, v3368:0, v3358:0, v3369:0, v3359:0, v3370:0, v3360:0, v3371:0, v3361:0, v3372:0, v3365:0, v3367:0, v3373:0, v3374:0, v3375:0, v3376:0, v3377:0, v3378:0, v3380:0, v3352:0, v3362:0, v3363:0, v3379:0, v3381:0, v3364:0, v3366:0, 3, 7, 2, 4, 8) :|: v3352:0 > 2 && v3365:0 > v3352:0 && v3365:0 > 3 && v3603:0 > 0
Filtered unneeded arguments:
   f_913(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44) -> f_913(x2, x9, x12, x24)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_913(v3344:0, v3352:0, sum~cons_1~v3344:0, v3365:0) -> f_913(v3344:0, 1 + v3352:0, 1 + v3344:0, v3365:0) :|: v3365:0 > v3352:0 && v3365:0 > 3 && v3352:0 > 2 && sum~cons_1~v3344:0 = 1 + v3344:0

----------------------------------------

(36)
Obligation:
Rules:
f_913(v3344:0, v3352:0, sum~cons_1~v3344:0, v3365:0) -> f_913(v3344:0, 1 + v3352:0, 1 + v3344:0, v3365:0) :|: v3365:0 > v3352:0 && v3365:0 > 3 && v3352:0 > 2 && sum~cons_1~v3344:0 = 1 + v3344:0

----------------------------------------

(37) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(38)
Obligation:
Rules:
f_913(v3344:0:0, v3352:0:0, sum~cons_1~v3344:0:0, v3365:0:0) -> f_913(v3344:0:0, 1 + v3352:0:0, 1 + v3344:0:0, v3365:0:0) :|: v3365:0:0 > v3352:0:0 && v3365:0:0 > 3 && v3352:0:0 > 2 && sum~cons_1~v3344:0:0 = 1 + v3344:0:0

----------------------------------------

(39) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_913(x, x1, x2, x3)] = -x1 + x3

The following rules are decreasing:
f_913(v3344:0:0, v3352:0:0, sum~cons_1~v3344:0:0, v3365:0:0) -> f_913(v3344:0:0, 1 + v3352:0:0, 1 + v3344:0:0, v3365:0:0) :|: v3365:0:0 > v3352:0:0 && v3365:0:0 > 3 && v3352:0:0 > 2 && sum~cons_1~v3344:0:0 = 1 + v3344:0:0
The following rules are bounded:
f_913(v3344:0:0, v3352:0:0, sum~cons_1~v3344:0:0, v3365:0:0) -> f_913(v3344:0:0, 1 + v3352:0:0, 1 + v3344:0:0, v3365:0:0) :|: v3365:0:0 > v3352:0:0 && v3365:0:0 > 3 && v3352:0:0 > 2 && sum~cons_1~v3344:0:0 = 1 + v3344:0:0

----------------------------------------

(40)
YES

----------------------------------------

(41)
Obligation:
SCC
----------------------------------------

(42) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_821(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2515, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_824(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2515, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: v2565 = 1 + v2514 && 3 <= v2565
f_824(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2515, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_827(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2515, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: TRUE
f_827(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2515, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_830(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, v2515, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: TRUE
f_830(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, v2515, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_833(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2515, v2513, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: 0 = 0
f_833(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2515, v2513, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_837(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: TRUE
f_837(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_842(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: v2572 != 0 && v2514 < v2527 && 3 <= v2527
f_842(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_848(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: 0 = 0
f_848(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_854(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: TRUE
f_854(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_860(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: 0 = 0
f_860(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_867(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: TRUE
f_867(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_874(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: TRUE
f_874(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_881(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: 0 = 0
f_881(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_887(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: v2517 = 1 + v2506
f_887(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_890(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: TRUE
f_890(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_893(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: 0 = 0
f_893(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_896(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: 0 = 0
f_896(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_899(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: TRUE
f_899(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_902(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: 0 = 0
f_902(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_905(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: TRUE
f_905(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_910(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: TRUE
f_910(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2515, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_818(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2565, v2572, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: TRUE
f_818(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2513, v2514, v2515, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2524, v2525, v2526, 3, 7, 2, 4, 8) -> f_821(v2505, v2506, v2507, v2508, v2509, v2510, v2511, v2512, v2514, v2515, 1, v2517, 0, v2519, v2528, v2520, v2529, v2521, v2530, v2522, v2531, v2523, v2532, v2527, v2533, v2534, v2535, v2536, v2537, v2538, v2539, v2513, v2524, v2525, v2526, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_821(v2505:0, v2506:0, v2507:0, v2508:0, v2509:0, v2510:0, v2511:0, v2512:0, v2514:0, v2515:0, 1, 1 + v2506:0, 0, v2519:0, v2528:0, v2520:0, v2529:0, v2521:0, v2530:0, v2522:0, v2531:0, v2523:0, v2532:0, v2527:0, v2533:0, v2534:0, v2535:0, v2536:0, v2537:0, v2538:0, v2539:0, v2513:0, v2524:0, v2525:0, v2526:0, 3, 7, 2, 4, 8) -> f_821(v2505:0, v2506:0, v2507:0, v2508:0, v2509:0, v2510:0, v2511:0, v2512:0, 1 + v2514:0, v2572:0, 1, 1 + v2506:0, 0, v2519:0, v2528:0, v2520:0, v2529:0, v2521:0, v2530:0, v2522:0, v2531:0, v2523:0, v2532:0, v2527:0, v2533:0, v2534:0, v2535:0, v2536:0, v2537:0, v2538:0, v2539:0, v2514:0, v2524:0, v2525:0, v2526:0, 3, 7, 2, 4, 8) :|: v2514:0 > 1 && v2527:0 > v2514:0 && v2527:0 > 2 && v2572:0 < 0
f_821(v2505:0, v2506:0, v2507:0, v2508:0, v2509:0, v2510:0, v2511:0, v2512:0, v2514:0, v2515:0, 1, 1 + v2506:0, 0, v2519:0, v2528:0, v2520:0, v2529:0, v2521:0, v2530:0, v2522:0, v2531:0, v2523:0, v2532:0, v2527:0, v2533:0, v2534:0, v2535:0, v2536:0, v2537:0, v2538:0, v2539:0, v2513:0, v2524:0, v2525:0, v2526:0, 3, 7, 2, 4, 8) -> f_821(v2505:0, v2506:0, v2507:0, v2508:0, v2509:0, v2510:0, v2511:0, v2512:0, 1 + v2514:0, v2572:0, 1, 1 + v2506:0, 0, v2519:0, v2528:0, v2520:0, v2529:0, v2521:0, v2530:0, v2522:0, v2531:0, v2523:0, v2532:0, v2527:0, v2533:0, v2534:0, v2535:0, v2536:0, v2537:0, v2538:0, v2539:0, v2514:0, v2524:0, v2525:0, v2526:0, 3, 7, 2, 4, 8) :|: v2514:0 > 1 && v2527:0 > v2514:0 && v2527:0 > 2 && v2572:0 > 0
Filtered unneeded arguments:
   f_821(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40) -> f_821(x2, x9, x12, x24)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_821(v2506:0, v2514:0, sum~cons_1~v2506:0, v2527:0) -> f_821(v2506:0, 1 + v2514:0, 1 + v2506:0, v2527:0) :|: v2527:0 > v2514:0 && v2527:0 > 2 && v2514:0 > 1 && sum~cons_1~v2506:0 = 1 + v2506:0

----------------------------------------

(43)
Obligation:
Rules:
f_821(v2506:0, v2514:0, sum~cons_1~v2506:0, v2527:0) -> f_821(v2506:0, 1 + v2514:0, 1 + v2506:0, v2527:0) :|: v2527:0 > v2514:0 && v2527:0 > 2 && v2514:0 > 1 && sum~cons_1~v2506:0 = 1 + v2506:0

----------------------------------------

(44) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(45)
Obligation:
Rules:
f_821(v2506:0:0, v2514:0:0, sum~cons_1~v2506:0:0, v2527:0:0) -> f_821(v2506:0:0, 1 + v2514:0:0, 1 + v2506:0:0, v2527:0:0) :|: v2527:0:0 > v2514:0:0 && v2527:0:0 > 2 && v2514:0:0 > 1 && sum~cons_1~v2506:0:0 = 1 + v2506:0:0

----------------------------------------

(46) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_821 ] = f_821_4 + -1*f_821_2

The following rules are decreasing:
f_821(v2506:0:0, v2514:0:0, sum~cons_1~v2506:0:0, v2527:0:0) -> f_821(v2506:0:0, 1 + v2514:0:0, 1 + v2506:0:0, v2527:0:0) :|: v2527:0:0 > v2514:0:0 && v2527:0:0 > 2 && v2514:0:0 > 1 && sum~cons_1~v2506:0:0 = 1 + v2506:0:0

The following rules are bounded:
f_821(v2506:0:0, v2514:0:0, sum~cons_1~v2506:0:0, v2527:0:0) -> f_821(v2506:0:0, 1 + v2514:0:0, 1 + v2506:0:0, v2527:0:0) :|: v2527:0:0 > v2514:0:0 && v2527:0:0 > 2 && v2514:0:0 > 1 && sum~cons_1~v2506:0:0 = 1 + v2506:0:0


----------------------------------------

(47)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
