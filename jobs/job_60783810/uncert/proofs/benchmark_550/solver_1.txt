YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/gEd8W.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 62 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2734 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 57 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
        (13) IntTRS
        (14) TerminationGraphProcessor [EQUIVALENT, 4 ms]
        (15) IntTRS
        (16) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (21) YES
    (22) LLVM Symbolic Execution SCC
        (23) SCC2IRS [SOUND, 33 ms]
        (24) IntTRS
        (25) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (26) IntTRS
        (27) RankingReductionPairProof [EQUIVALENT, 16 ms]
        (28) YES
    (29) LLVM Symbolic Execution SCC
        (30) SCC2IRS [SOUND, 19 ms]
        (31) IntTRS
        (32) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (33) IntTRS
        (34) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (35) YES
    (36) LLVM Symbolic Execution SCC
        (37) SCC2IRS [SOUND, 29 ms]
        (38) IntTRS
        (39) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (40) IntTRS
        (41) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (42) YES
    (43) LLVM Symbolic Execution SCC
        (44) SCC2IRS [SOUND, 43 ms]
        (45) IntTRS
        (46) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (47) IntTRS
        (48) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (49) IntTRS
        (50) TerminationGraphProcessor [EQUIVALENT, 8 ms]
        (51) AND
            (52) IntTRS
                (53) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (54) IntTRS
                (55) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (56) IntTRS
                (57) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
                (58) YES
            (59) IntTRS
                (60) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (61) IntTRS
                (62) RankingReductionPairProof [EQUIVALENT, 7 ms]
                (63) YES
    (64) LLVM Symbolic Execution SCC
        (65) SCC2IRS [SOUND, 30 ms]
        (66) IntTRS
        (67) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (68) IntTRS
        (69) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (70) YES
    (71) LLVM Symbolic Execution SCC
        (72) SCC2IRS [SOUND, 72 ms]
        (73) IntTRS
        (74) TerminationGraphProcessor [EQUIVALENT, 66 ms]
        (75) IntTRS
        (76) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (77) IntTRS
        (78) PolynomialOrderProcessor [EQUIVALENT, 10 ms]
        (79) IntTRS
        (80) TerminationGraphProcessor [EQUIVALENT, 4 ms]
        (81) IntTRS
        (82) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (83) IntTRS
        (84) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (85) IntTRS
        (86) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (87) YES
    (88) LLVM Symbolic Execution SCC
        (89) SCC2IRS [SOUND, 30 ms]
        (90) IntTRS
        (91) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (92) IntTRS
        (93) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (94) YES
    (95) LLVM Symbolic Execution SCC
        (96) SCC2IRS [SOUND, 21 ms]
        (97) IntTRS
        (98) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (99) IntTRS
        (100) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (101) YES
    (102) LLVM Symbolic Execution SCC
        (103) SCC2IRS [SOUND, 44 ms]
        (104) IntTRS
        (105) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (106) IntTRS
        (107) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (108) IntTRS
        (109) TerminationGraphProcessor [EQUIVALENT, 3 ms]
        (110) IntTRS
        (111) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (112) IntTRS
        (113) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (114) IntTRS
        (115) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (116) YES
    (117) LLVM Symbolic Execution SCC
        (118) SCC2IRS [SOUND, 34 ms]
        (119) IntTRS
        (120) TerminationGraphProcessor [EQUIVALENT, 5 ms]
        (121) IntTRS
        (122) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (123) IntTRS
        (124) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
        (125) YES
    (126) LLVM Symbolic Execution SCC
        (127) SCC2IRS [SOUND, 30 ms]
        (128) IntTRS
        (129) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (130) IntTRS
        (131) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (132) YES
    (133) LLVM Symbolic Execution SCC
        (134) SCC2IRS [SOUND, 34 ms]
        (135) IntTRS
        (136) TerminationGraphProcessor [EQUIVALENT, 7 ms]
        (137) IntTRS
        (138) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (139) IntTRS
        (140) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (141) YES
    (142) LLVM Symbolic Execution SCC
        (143) SCC2IRS [SOUND, 39 ms]
        (144) IntTRS
        (145) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (146) IntTRS
        (147) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (148) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/gEd8W.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/gEd8W.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp ne %7 0
		br %8, %9, %12
	9:
		%10 = load %3
		%11 = icmp sgt %10 0
		br %12
	12:
		%13 = phi [0, %6], [%11, %9]
		br %13, %14, %40
	14:
		%15 = load %2
		%16 = icmp sgt %15 0
		br %16, %17, %28
	17:
		%18 = call i32 @__VERIFIER_nondet_int()
		%19 = icmp ne %18 0
		br %19, %20, %24
	20:
		%21 = load %2
		%22 = sub i32 %21, 1
		store %22, %2
		%23 = call i32 @__VERIFIER_nondet_int()
		store %23, %3
		br %27
	24:
		%25 = load %3
		%26 = sub i32 %25, 1
		store %26, %3
		br %27
	27:
		br %39
	28:
		%29 = call i32 @__VERIFIER_nondet_int()
		%30 = icmp ne %29 0
		br %30, %31, %34
	31:
		%32 = load %2
		%33 = add i32 %32, 1
		store %33, %2
		br %38
	34:
		%35 = load %3
		%36 = sub i32 %35, 1
		store %36, %3
		%37 = call i32 @__VERIFIER_nondet_int()
		store %37, %2
		br %38
	38:
		br %39
	39:
		br %6
	40:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 14 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 56 rulesP rules:
f_2205(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55635, v55636, v55637, v55638, 3, 2, 4) -> f_2207(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55830, v55635, v55636, v55637, v55638, 3, 2, 4) :|: 1 + v55830 = v55622 && 0 <= v55830
f_2207(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55830, v55635, v55636, v55637, v55638, 3, 2, 4) -> f_2209(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55830, v55635, v55636, v55637, v55638, 3, 2, 4) :|: TRUE
f_2209(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55830, v55635, v55636, v55637, v55638, 3, 2, 4) -> f_2211(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55830, v55834, v55636, v55637, v55638, 3, 2, 4) :|: TRUE
f_2211(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55830, v55834, v55636, v55637, v55638, 3, 2, 4) -> f_2214(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55830, v55834, v55636, v55637, v55638, 3, 2, 4) :|: TRUE
f_2214(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55830, v55834, v55636, v55637, v55638, 3, 2, 4) -> f_2216(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55830, v55834, v55636, v55637, v55638, 3, 2, 4) :|: TRUE
f_2216(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55830, v55834, v55636, v55637, v55638, 3, 2, 4) -> f_2218(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55830, v55834, v55636, v55637, v55638, 3, 2, 4) :|: TRUE
f_2218(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55830, v55834, v55636, v55637, v55638, 3, 2, 4) -> f_2220(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55830, v55834, v55636, v55637, v55638, 3, 2, 4) :|: TRUE
f_2220(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55830, v55834, v55636, v55637, v55638, 3, 2, 4) -> f_2222(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55624, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55834, v55636, v55637, v55638, 3, 2, 4) :|: 0 = 0
f_2222(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55624, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55834, v55636, v55637, v55638, 3, 2, 4) -> f_2224(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55624, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55834, v55636, v55637, v55638, 3, 2, 4) :|: 0 < v55830 && 2 <= v55622 && 3 <= v55630
f_2224(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55624, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55834, v55636, v55637, v55638, 3, 2, 4) -> f_2227(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55624, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55834, v55636, v55637, v55638, 3, 2, 4) :|: 0 = 0
f_2227(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55624, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55834, v55636, v55637, v55638, 3, 2, 4) -> f_2231(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55624, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55834, v55636, v55637, v55638, 3, 2, 4) :|: TRUE
f_2231(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55624, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55834, v55636, v55637, v55638, 3, 2, 4) -> f_2235(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55636, v55637, v55638, 3, 2, 4) :|: 0 = 0
f_2235(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55636, v55637, v55638, 3, 2, 4) -> f_2239(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55636, v55637, v55638, 3, 2, 4) :|: 0 < v55834
f_2239(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55636, v55637, v55638, 3, 2, 4) -> f_2243(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55636, v55637, v55638, 3, 2, 4) :|: 0 = 0
f_2243(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55636, v55637, v55638, 3, 2, 4) -> f_2246(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55636, v55637, v55638, 3, 2, 4) :|: 0 = 0
f_2246(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55636, v55637, v55638, 3, 2, 4) -> f_2249(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55636, v55637, v55638, 3, 2, 4) :|: TRUE
f_2249(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, v55622, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55636, v55637, v55638, 3, 2, 4) -> f_2252(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) :|: 0 = 0
f_2252(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) -> f_2254(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) :|: 0 = 0
f_2254(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) -> f_2257(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) :|: TRUE
f_2257(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) -> f_2260(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v59678, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) :|: TRUE
f_2260(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v59678, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) -> f_2263(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v59678, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) :|: v59678 != 0
f_2260(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v59678, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) -> f_2264(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) :|: v59678 = 0
f_2263(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v59678, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) -> f_2265(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v59678, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) :|: 0 = 0
f_2265(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v59678, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) -> f_2267(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v59678, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) :|: TRUE
f_2267(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v59678, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) -> f_2202(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v59678, v55632, v55633, v55622, v55834, v55636, v55637, v55638, 3, 2, 4) :|: TRUE
f_2202(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55634, v55635, v55636, v55637, v55638, 3, 2, 4) -> f_2205(v55617, v55618, v55619, v55620, v55621, v55622, 1, v55624, 0, v55626, v55627, v55628, v55629, v55630, v55631, v55632, v55633, v55635, v55636, v55637, v55638, 3, 2, 4) :|: 0 = 0
f_2264(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) -> f_2266(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) :|: 0 = 0
f_2266(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) -> f_2268(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) :|: TRUE
f_2268(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v55632, v55633, v55622, v55636, v55637, v55638, 3, 2, 4) -> f_2204(v55617, v55618, v55619, v55620, v55621, v55830, 1, v55834, 0, v55626, v55627, v55628, v55629, v55630, v55632, v55633, v55622, v55834, v55636, v55637, v55638, 3, 2, 4) :|: TRUE
f_2204(v55809, v55810, v55811, v55812, v55813, v55814, 1, v55816, 0, v55818, v55819, v55820, v55821, v55822, v55823, v55824, v55825, v55826, v55827, v55828, v55829, 3, 2, 4) -> f_2206(v55809, v55810, v55811, v55812, v55813, v55814, 1, v55816, 0, v55818, v55819, v55820, v55821, v55822, v55824, v55825, v55826, v55827, v55828, v55829, 3, 2, 4) :|: 0 = 0
f_2206(v55809, v55810, v55811, v55812, v55813, v55814, 1, v55816, 0, v55818, v55819, v55820, v55821, v55822, v55824, v55825, v55826, v55827, v55828, v55829, 3, 2, 4) -> f_2208(v55809, v55810, v55811, v55812, v55813, v55814, 1, v55816, 0, v55818, v55819, v55820, v55821, v55822, v55831, v55825, v55826, v55827, v55828, v55829, 3, 2, 4) :|: 1 + v55831 = v55816 && 0 <= v55831
f_2208(v55809, v55810, v55811, v55812, v55813, v55814, 1, v55816, 0, v55818, v55819, v55820, v55821, v55822, v55831, v55825, v55826, v55827, v55828, v55829, 3, 2, 4) -> f_2210(v55809, v55810, v55811, v55812, v55813, v55814, 1, v55816, 0, v55818, v55819, v55820, v55821, v55822, v55831, v55825, v55826, v55827, v55828, v55829, 3, 2, 4) :|: TRUE
f_2210(v55809, v55810, v55811, v55812, v55813, v55814, 1, v55816, 0, v55818, v55819, v55820, v55821, v55822, v55831, v55825, v55826, v55827, v55828, v55829, 3, 2, 4) -> f_2212(v55809, v55810, v55811, v55812, v55813, v55814, 1, v55816, 0, v55818, v55819, v55820, v55821, v55822, v55831, v55825, v55826, v55827, v55828, v55829, 3, 2, 4) :|: TRUE
f_2212(v55809, v55810, v55811, v55812, v55813, v55814, 1, v55816, 0, v55818, v55819, v55820, v55821, v55822, v55831, v55825, v55826, v55827, v55828, v55829, 3, 2, 4) -> f_2213(v55809, v55810, v55811, v55812, v55813, v55814, 1, v55816, 0, v55818, v55819, v55820, v55821, v55822, v55825, v55826, v55831, v55827, v55828, v55829, 3, 2, 4) :|: TRUE
f_2213(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56057, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56066, v56067, v56068, v56069, 3, 2, 4) -> f_2215(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56057, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56066, v56067, v56068, v56069, 3, 2, 4) :|: TRUE
f_2215(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56057, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56066, v56067, v56068, v56069, 3, 2, 4) -> f_2217(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56057, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56066, v56067, v56068, v56069, 3, 2, 4) :|: TRUE
f_2217(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56057, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56066, v56067, v56068, v56069, 3, 2, 4) -> f_2219(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56057, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56066, v56067, v56068, v56069, 3, 2, 4) :|: 0 = 0
f_2219(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56057, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56066, v56067, v56068, v56069, 3, 2, 4) -> f_2221(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56057, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56066, v56067, v56068, v56069, 3, 2, 4) :|: 0 = 0
f_2221(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56057, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56066, v56067, v56068, v56069, 3, 2, 4) -> f_2223(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56057, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56066, v56067, v56068, v56069, 3, 2, 4) :|: TRUE
f_2223(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56057, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56066, v56067, v56068, v56069, 3, 2, 4) -> f_2226(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) :|: 0 = 0
f_2226(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2229(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) :|: 0 < v56066 && 2 <= v56057 && 2 <= v56065
f_2229(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2233(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) :|: 0 = 0
f_2233(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2237(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) :|: 0 = 0
f_2237(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2241(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) :|: TRUE
f_2241(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2245(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) :|: 0 = 0
f_2245(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2248(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) :|: 0 = 0
f_2248(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2251(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) :|: TRUE
f_2251(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2253(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v59531, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) :|: TRUE
f_2253(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v59531, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2255(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v59531, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) :|: v59531 != 0
f_2253(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v59531, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2256(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) :|: v59531 = 0
f_2255(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v59531, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2258(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v59531, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) :|: 0 = 0
f_2258(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v59531, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2261(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v59531, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) :|: TRUE
f_2261(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v59531, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2202(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v59531, v56057, v56066, v56064, v56065, v56067, v56068, v56069, 3, 2, 4) :|: TRUE
f_2256(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2259(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) :|: 0 = 0
f_2259(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2262(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) :|: TRUE
f_2262(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56064, v56065, v56057, v56067, v56068, v56069, 3, 2, 4) -> f_2204(v56050, v56051, v56052, v56053, v56054, v56055, 1, v56066, 0, v56059, v56060, v56061, v56062, v56063, v56057, v56066, v56064, v56065, v56067, v56068, v56069, 3, 2, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_2253(v56050:0, v56051:0, v56052:0, v56053:0, v56054:0, v56055:0, 1, v56066:0, 0, v56059:0, v56060:0, v56061:0, v56062:0, v56063:0, v59531:0, v56064:0, v56065:0, v56057:0, v56067:0, v56068:0, v56069:0, 3, 2, 4) -> f_2205(v56050:0, v56051:0, v56052:0, v56053:0, v56054:0, v56055:0, 1, v56066:0, 0, v56059:0, v56060:0, v56061:0, v56062:0, v56063:0, v59531:0, v56057:0, v56066:0, v56065:0, v56067:0, v56068:0, v56069:0, 3, 2, 4) :|: v59531:0 < 0
f_2253(v56050:0, v56051:0, v56052:0, v56053:0, v56054:0, v56055:0, 1, v56066:0, 0, v56059:0, v56060:0, v56061:0, v56062:0, v56063:0, v59531:0, v56064:0, v56065:0, v56057:0, v56067:0, v56068:0, v56069:0, 3, 2, 4) -> f_2205(v56050:0, v56051:0, v56052:0, v56053:0, v56054:0, v56055:0, 1, v56066:0, 0, v56059:0, v56060:0, v56061:0, v56062:0, v56063:0, v59531:0, v56057:0, v56066:0, v56065:0, v56067:0, v56068:0, v56069:0, 3, 2, 4) :|: v59531:0 > 0
f_2205(v55617:0, v55618:0, v55619:0, v55620:0, v55621:0, 1 + v55830:0, 1, v55624:0, 0, v55626:0, v55627:0, v55628:0, v55629:0, v55630:0, v55631:0, v55632:0, v55633:0, v55635:0, v55636:0, v55637:0, v55638:0, 3, 2, 4) -> f_2205(v55617:0, v55618:0, v55619:0, v55620:0, v55621:0, v55830:0, 1, v55834:0, 0, v55626:0, v55627:0, v55628:0, v55629:0, v55630:0, v59678:0, v55632:0, v55633:0, v55834:0, v55636:0, v55637:0, v55638:0, 3, 2, 4) :|: v55830:0 > 0 && v55630:0 > 2 && v59678:0 < 0 && v55834:0 > 0
f_2205(v55617:0, v55618:0, v55619:0, v55620:0, v55621:0, 1 + v55830:0, 1, v55624:0, 0, v55626:0, v55627:0, v55628:0, v55629:0, v55630:0, v55631:0, v55632:0, v55633:0, v55635:0, v55636:0, v55637:0, v55638:0, 3, 2, 4) -> f_2205(v55617:0, v55618:0, v55619:0, v55620:0, v55621:0, v55830:0, 1, v55834:0, 0, v55626:0, v55627:0, v55628:0, v55629:0, v55630:0, v59678:0, v55632:0, v55633:0, v55834:0, v55636:0, v55637:0, v55638:0, 3, 2, 4) :|: v55830:0 > 0 && v55630:0 > 2 && v59678:0 > 0 && v55834:0 > 0
f_2253(v56050:0, v56051:0, v56052:0, v56053:0, v56054:0, v56055:0, 1, 1 + v55831:0, 0, v56059:0, v56060:0, v56061:0, v56062:0, v56063:0, 0, v56064:0, v56065:0, v56057:0, v56067:0, v56068:0, v56069:0, 3, 2, 4) -> f_2253(v56050:0, v56051:0, v56052:0, v56053:0, v56054:0, v56055:0, 1, v55831:0, 0, v56059:0, v56060:0, v56061:0, v56062:0, v56063:0, v59531:1, v56064:0, v56065:0, 1 + v55831:0, v56067:0, v56068:0, v56069:0, 3, 2, 4) :|: v55831:0 > 0 && v56065:0 > 1
f_2205(v55617:0, v55618:0, v55619:0, v55620:0, v55621:0, 1 + v55830:0, 1, v55624:0, 0, v55626:0, v55627:0, v55628:0, v55629:0, v55630:0, v55631:0, v55632:0, v55633:0, v55635:0, v55636:0, v55637:0, v55638:0, 3, 2, 4) -> f_2253(v55617:0, v55618:0, v55619:0, v55620:0, v55621:0, v55830:0, 1, v55831:0, 0, v55626:0, v55627:0, v55628:0, v55629:0, v55630:0, v59531:0, 1 + v55830:0, 1 + v55831:0, 1 + v55831:0, v55636:0, v55637:0, v55638:0, 3, 2, 4) :|: v55830:0 > 0 && v55831:0 > 0 && v55630:0 > 2
Filtered unneeded arguments:
   f_2253(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_2253(x6, x8, x14, x15, x17)
   f_2205(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_2205(x6, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_2253(v56055:0, v56066:0, v56063:0, v59531:0, v56065:0) -> f_2205(v56055:0, v56063:0) :|: v59531:0 < 0
f_2253(v56055:0, v56066:0, v56063:0, v59531:0, v56065:0) -> f_2205(v56055:0, v56063:0) :|: v59531:0 > 0
f_2205(sum~cons_1~v55830:0, v55630:0) -> f_2205(v55830:0, v55630:0) :|: v55830:0 > 0 && v55630:0 > 2 && sum~cons_1~v55830:0 = 1 + v55830:0
f_2253(v56055:0, sum~cons_1~v55831:0, v56063:0, cons_0, v56065:0) -> f_2253(v56055:0, v55831:0, v56063:0, v59531:1, v56065:0) :|: v55831:0 > 0 && v56065:0 > 1 && sum~cons_1~v55831:0 = 1 + v55831:0 && cons_0 = 0
f_2205(sum~cons_1~v55830:0, v55630:0) -> f_2253(v55830:0, v55831:0, v55630:0, v59531:0, 1 + v55831:0) :|: v55831:0 > 0 && v55630:0 > 2 && v55830:0 > 0 && sum~cons_1~v55830:0 = 1 + v55830:0

----------------------------------------

(9)
Obligation:
Rules:
f_2253(v56055:0, v56066:0, v56063:0, v59531:0, v56065:0) -> f_2205(v56055:0, v56063:0) :|: v59531:0 < 0
f_2253(x, x1, x2, x3, x4) -> f_2205(x, x2) :|: x3 > 0
f_2205(sum~cons_1~v55830:0, v55630:0) -> f_2205(v55830:0, v55630:0) :|: v55830:0 > 0 && v55630:0 > 2 && sum~cons_1~v55830:0 = 1 + v55830:0
f_2253(x5, x6, x7, x8, x9) -> f_2253(x5, x10, x7, x11, x9) :|: x10 > 0 && x9 > 1 && x6 = 1 + x10 && x8 = 0
f_2205(x12, x13) -> f_2253(x14, x15, x13, x16, 1 + x15) :|: x15 > 0 && x13 > 2 && x14 > 0 && x12 = 1 + x14

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_2253(v56055:0:0, v56066:0:0, v56063:0:0, v59531:0:0, v56065:0:0) -> f_2205(v56055:0:0, v56063:0:0) :|: v59531:0:0 < 0
f_2205(sum~cons_1~x14:0, x13:0) -> f_2253(x14:0, x15:0, x13:0, x16:0, 1 + x15:0) :|: x15:0 > 0 && x13:0 > 2 && x14:0 > 0 && sum~cons_1~x14:0 = 1 + x14:0
f_2253(x:0, x1:0, x2:0, x3:0, x4:0) -> f_2205(x:0, x2:0) :|: x3:0 > 0
f_2253(x5:0, sum~cons_1~x10:0, x7:0, cons_0, x9:0) -> f_2253(x5:0, x10:0, x7:0, x11:0, x9:0) :|: x10:0 > 0 && x9:0 > 1 && sum~cons_1~x10:0 = 1 + x10:0 && cons_0 = 0
f_2205(sum~cons_1~v55830:0:0, v55630:0:0) -> f_2205(v55830:0:0, v55630:0:0) :|: v55830:0:0 > 0 && v55630:0:0 > 2 && sum~cons_1~v55830:0:0 = 1 + v55830:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_2253(x, x1, x2, x3, x4)] = -20 + x + x*x2 + x2 + x2^2
[f_2205(x5, x6)] = -20 + x5 + x5*x6 + x6 + x6^2

The following rules are decreasing:
f_2205(sum~cons_1~x14:0, x13:0) -> f_2253(x14:0, x15:0, x13:0, x16:0, 1 + x15:0) :|: x15:0 > 0 && x13:0 > 2 && x14:0 > 0 && sum~cons_1~x14:0 = 1 + x14:0
f_2205(sum~cons_1~v55830:0:0, v55630:0:0) -> f_2205(v55830:0:0, v55630:0:0) :|: v55830:0:0 > 0 && v55630:0:0 > 2 && sum~cons_1~v55830:0:0 = 1 + v55830:0:0
The following rules are bounded:
f_2205(sum~cons_1~x14:0, x13:0) -> f_2253(x14:0, x15:0, x13:0, x16:0, 1 + x15:0) :|: x15:0 > 0 && x13:0 > 2 && x14:0 > 0 && sum~cons_1~x14:0 = 1 + x14:0
f_2205(sum~cons_1~v55830:0:0, v55630:0:0) -> f_2205(v55830:0:0, v55630:0:0) :|: v55830:0:0 > 0 && v55630:0:0 > 2 && sum~cons_1~v55830:0:0 = 1 + v55830:0:0

----------------------------------------

(13)
Obligation:
Rules:
f_2253(v56055:0:0, v56066:0:0, v56063:0:0, v59531:0:0, v56065:0:0) -> f_2205(v56055:0:0, v56063:0:0) :|: v59531:0:0 < 0
f_2253(x:0, x1:0, x2:0, x3:0, x4:0) -> f_2205(x:0, x2:0) :|: x3:0 > 0
f_2253(x5:0, sum~cons_1~x10:0, x7:0, cons_0, x9:0) -> f_2253(x5:0, x10:0, x7:0, x11:0, x9:0) :|: x10:0 > 0 && x9:0 > 1 && sum~cons_1~x10:0 = 1 + x10:0 && cons_0 = 0

----------------------------------------

(14) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(15)
Obligation:
Rules:
f_2253(x5:0, sum~cons_1~x10:0, x7:0, cons_0, x9:0) -> f_2253(x5:0, x10:0, x7:0, x11:0, x9:0) :|: x10:0 > 0 && x9:0 > 1 && sum~cons_1~x10:0 = 1 + x10:0 && cons_0 = 0

----------------------------------------

(16) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(17)
Obligation:
Rules:
f_2253(x5:0:0, sum~cons_1~x10:0:0, x7:0:0, cons_0, x9:0:0) -> f_2253(x5:0:0, x10:0:0, x7:0:0, x11:0:0, x9:0:0) :|: x10:0:0 > 0 && x9:0:0 > 1 && sum~cons_1~x10:0:0 = 1 + x10:0:0 && cons_0 = 0

----------------------------------------

(18) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_2253(x1, x2, x3, x4, x5) -> f_2253(x2, x4, x5)

----------------------------------------

(19)
Obligation:
Rules:
f_2253(sum~cons_1~x10:0:0, cons_0, x9:0:0) -> f_2253(x10:0:0, x11:0:0, x9:0:0) :|: x10:0:0 > 0 && x9:0:0 > 1 && sum~cons_1~x10:0:0 = 1 + x10:0:0 && cons_0 = 0

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_2253(x, x1, x2)] = x

The following rules are decreasing:
f_2253(sum~cons_1~x10:0:0, cons_0, x9:0:0) -> f_2253(x10:0:0, x11:0:0, x9:0:0) :|: x10:0:0 > 0 && x9:0:0 > 1 && sum~cons_1~x10:0:0 = 1 + x10:0:0 && cons_0 = 0
The following rules are bounded:
f_2253(sum~cons_1~x10:0:0, cons_0, x9:0:0) -> f_2253(x10:0:0, x11:0:0, x9:0:0) :|: x10:0:0 > 0 && x9:0:0 > 1 && sum~cons_1~x10:0:0 = 1 + x10:0:0 && cons_0 = 0

----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
SCC
----------------------------------------

(23) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 25 rulesP rules:
f_2078(v46044, v46045, v46046, v46047, v46048, v46049, 1, v46051, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46059, v46060, v46061, v46062, v46063, 3, 2, 4) -> f_2081(v46044, v46045, v46046, v46047, v46048, v46049, 1, v46051, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46059, v46060, v46061, v46062, v46063, 3, 2, 4) :|: TRUE
f_2081(v46044, v46045, v46046, v46047, v46048, v46049, 1, v46051, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46059, v46060, v46061, v46062, v46063, 3, 2, 4) -> f_2084(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46051, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46060, v46061, v46062, v46063, 3, 2, 4) :|: 0 = 0
f_2084(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46051, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46060, v46061, v46062, v46063, 3, 2, 4) -> f_2086(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46051, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46060, v46061, v46062, v46063, 3, 2, 4) :|: 0 < v46059 && 2 <= v46049 && 2 <= v46057
f_2086(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46051, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46060, v46061, v46062, v46063, 3, 2, 4) -> f_2089(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46051, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46060, v46061, v46062, v46063, 3, 2, 4) :|: 0 = 0
f_2089(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46051, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46060, v46061, v46062, v46063, 3, 2, 4) -> f_2092(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46051, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46060, v46061, v46062, v46063, 3, 2, 4) :|: TRUE
f_2092(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46051, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46060, v46061, v46062, v46063, 3, 2, 4) -> f_2095(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46061, v46062, v46063, 3, 2, 4) :|: 0 = 0
f_2095(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46061, v46062, v46063, 3, 2, 4) -> f_2099(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46061, v46062, v46063, 3, 2, 4) :|: 0 < v46060
f_2099(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46061, v46062, v46063, 3, 2, 4) -> f_2103(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46061, v46062, v46063, 3, 2, 4) :|: 0 = 0
f_2103(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46061, v46062, v46063, 3, 2, 4) -> f_2107(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46061, v46062, v46063, 3, 2, 4) :|: 0 = 0
f_2107(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46061, v46062, v46063, 3, 2, 4) -> f_2111(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46061, v46062, v46063, 3, 2, 4) :|: TRUE
f_2111(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, v46049, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46061, v46062, v46063, 3, 2, 4) -> f_2115(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46049, v46061, v46062, v46063, 3, 2, 4) :|: 0 = 0
f_2115(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46049, v46061, v46062, v46063, 3, 2, 4) -> f_2118(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46049, v46061, v46062, v46063, 3, 2, 4) :|: 0 = 0
f_2118(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46049, v46061, v46062, v46063, 3, 2, 4) -> f_2121(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46049, v46061, v46062, v46063, 3, 2, 4) :|: TRUE
f_2121(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46049, v46061, v46062, v46063, 3, 2, 4) -> f_2123(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v46049, v46061, v46062, v46063, 3, 2, 4) :|: TRUE
f_2123(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v46049, v46061, v46062, v46063, 3, 2, 4) -> f_2125(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v46049, v46061, v46062, v46063, 3, 2, 4) :|: v48920 != 0
f_2125(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v46049, v46061, v46062, v46063, 3, 2, 4) -> f_2128(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v46049, v46061, v46062, v46063, 3, 2, 4) :|: 0 = 0
f_2128(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v46049, v46061, v46062, v46063, 3, 2, 4) -> f_2131(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v46049, v46061, v46062, v46063, 3, 2, 4) :|: TRUE
f_2131(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v46049, v46061, v46062, v46063, 3, 2, 4) -> f_2134(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v46061, v46062, v46063, 3, 2, 4) :|: 0 = 0
f_2134(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v46061, v46062, v46063, 3, 2, 4) -> f_2138(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v49790, v46061, v46062, v46063, 3, 2, 4) :|: 1 + v49790 = v46059 && 0 <= v49790
f_2138(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v49790, v46061, v46062, v46063, 3, 2, 4) -> f_2142(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v49790, v46061, v46062, v46063, 3, 2, 4) :|: TRUE
f_2142(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v49790, v46061, v46062, v46063, 3, 2, 4) -> f_2146(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v49790, v50389, v46061, v46062, v46063, 3, 2, 4) :|: TRUE
f_2146(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v49790, v50389, v46061, v46062, v46063, 3, 2, 4) -> f_2150(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v49790, v50389, v46061, v46062, v46063, 3, 2, 4) :|: TRUE
f_2150(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v49790, v50389, v46061, v46062, v46063, 3, 2, 4) -> f_2154(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v49790, v50389, v46061, v46062, v46063, 3, 2, 4) :|: TRUE
f_2154(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v49790, v50389, v46061, v46062, v46063, 3, 2, 4) -> f_2075(v46044, v46045, v46046, v46047, v46048, v46059, 1, v46060, 0, v46053, v46054, v46055, v46056, v46057, v48920, v49790, v50389, v46061, v46062, v46063, 3, 2, 4) :|: TRUE
f_2075(v46044, v46045, v46046, v46047, v46048, v46049, 1, v46051, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46059, v46060, v46061, v46062, v46063, 3, 2, 4) -> f_2078(v46044, v46045, v46046, v46047, v46048, v46049, 1, v46051, 0, v46053, v46054, v46055, v46056, v46057, v46058, v46059, v46060, v46061, v46062, v46063, 3, 2, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_2078(v46044:0, v46045:0, v46046:0, v46047:0, v46048:0, v46049:0, 1, v46051:0, 0, v46053:0, v46054:0, v46055:0, v46056:0, v46057:0, v46058:0, 1 + v49790:0, v46060:0, v46061:0, v46062:0, v46063:0, 3, 2, 4) -> f_2078(v46044:0, v46045:0, v46046:0, v46047:0, v46048:0, 1 + v49790:0, 1, v46060:0, 0, v46053:0, v46054:0, v46055:0, v46056:0, v46057:0, v48920:0, v49790:0, v50389:0, v46061:0, v46062:0, v46063:0, 3, 2, 4) :|: v46049:0 > 1 && v49790:0 > -1 && v46057:0 > 1 && v46060:0 > 0 && v48920:0 < 0
f_2078(v46044:0, v46045:0, v46046:0, v46047:0, v46048:0, v46049:0, 1, v46051:0, 0, v46053:0, v46054:0, v46055:0, v46056:0, v46057:0, v46058:0, 1 + v49790:0, v46060:0, v46061:0, v46062:0, v46063:0, 3, 2, 4) -> f_2078(v46044:0, v46045:0, v46046:0, v46047:0, v46048:0, 1 + v49790:0, 1, v46060:0, 0, v46053:0, v46054:0, v46055:0, v46056:0, v46057:0, v48920:0, v49790:0, v50389:0, v46061:0, v46062:0, v46063:0, 3, 2, 4) :|: v46049:0 > 1 && v49790:0 > -1 && v46057:0 > 1 && v46060:0 > 0 && v48920:0 > 0
Filtered unneeded arguments:
   f_2078(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_2078(x6, x14, x16, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_2078(v46049:0, v46057:0, sum~cons_1~v49790:0, v46060:0) -> f_2078(1 + v49790:0, v46057:0, v49790:0, v50389:0) :|: v49790:0 > -1 && v46049:0 > 1 && v46060:0 > 0 && v46057:0 > 1 && sum~cons_1~v49790:0 = 1 + v49790:0

----------------------------------------

(24)
Obligation:
Rules:
f_2078(v46049:0, v46057:0, sum~cons_1~v49790:0, v46060:0) -> f_2078(1 + v49790:0, v46057:0, v49790:0, v50389:0) :|: v49790:0 > -1 && v46049:0 > 1 && v46060:0 > 0 && v46057:0 > 1 && sum~cons_1~v49790:0 = 1 + v49790:0

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f_2078(v46049:0:0, v46057:0:0, sum~cons_1~v49790:0:0, v46060:0:0) -> f_2078(1 + v49790:0:0, v46057:0:0, v49790:0:0, v50389:0:0) :|: v46060:0:0 > 0 && v46057:0:0 > 1 && v46049:0:0 > 1 && v49790:0:0 > -1 && sum~cons_1~v49790:0:0 = 1 + v49790:0:0

----------------------------------------

(27) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_2078 ] = f_2078_3

The following rules are decreasing:
f_2078(v46049:0:0, v46057:0:0, sum~cons_1~v49790:0:0, v46060:0:0) -> f_2078(1 + v49790:0:0, v46057:0:0, v49790:0:0, v50389:0:0) :|: v46060:0:0 > 0 && v46057:0:0 > 1 && v46049:0:0 > 1 && v49790:0:0 > -1 && sum~cons_1~v49790:0:0 = 1 + v49790:0:0

The following rules are bounded:
f_2078(v46049:0:0, v46057:0:0, sum~cons_1~v49790:0:0, v46060:0:0) -> f_2078(1 + v49790:0:0, v46057:0:0, v49790:0:0, v50389:0:0) :|: v46060:0:0 > 0 && v46057:0:0 > 1 && v46049:0:0 > 1 && v49790:0:0 > -1 && sum~cons_1~v49790:0:0 = 1 + v49790:0:0


----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
SCC
----------------------------------------

(30) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_2051(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44381, 0, v44383, v44384, v44385, v44386, v44387, v44388, v44389, v44390, 3, 2, 4) -> f_2055(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44381, 0, v44383, v44384, v44385, v44386, v44387, v44388, v44389, v44390, 3, 2, 4) :|: TRUE
f_2055(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44381, 0, v44383, v44384, v44385, v44386, v44387, v44388, v44389, v44390, 3, 2, 4) -> f_2059(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44381, 0, v44383, v44384, v44385, v44386, v44387, v44388, v44389, v44390, 3, 2, 4) :|: 0 = 0
f_2059(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44381, 0, v44383, v44384, v44385, v44386, v44387, v44388, v44389, v44390, 3, 2, 4) -> f_2063(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44381, 0, v44383, v44384, v44385, v44386, v44387, v44388, v44389, v44390, 3, 2, 4) :|: 0 = 0
f_2063(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44381, 0, v44383, v44384, v44385, v44386, v44387, v44388, v44389, v44390, 3, 2, 4) -> f_2066(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44381, 0, v44383, v44384, v44385, v44386, v44387, v44388, v44389, v44390, 3, 2, 4) :|: TRUE
f_2066(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44381, 0, v44383, v44384, v44385, v44386, v44387, v44388, v44389, v44390, 3, 2, 4) -> f_2069(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) :|: 0 = 0
f_2069(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) -> f_2072(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) :|: 0 < v44387 && 2 <= v44381 && 2 <= v44386 && 3 <= v44385 && 3 <= v44378
f_2072(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) -> f_2076(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) :|: 0 = 0
f_2076(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) -> f_2079(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) :|: 0 = 0
f_2079(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) -> f_2082(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) :|: TRUE
f_2082(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) -> f_2085(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) :|: 0 = 0
f_2085(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) -> f_2088(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) :|: 0 = 0
f_2088(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) -> f_2091(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) :|: TRUE
f_2091(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) -> f_2094(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v47531, v44381, v44388, v44389, v44390, 3, 2, 4) :|: TRUE
f_2094(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v47531, v44381, v44388, v44389, v44390, 3, 2, 4) -> f_2098(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) :|: v47531 = 0
f_2098(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) -> f_2102(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) :|: 0 = 0
f_2102(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) -> f_2106(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) :|: TRUE
f_2106(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44381, v44388, v44389, v44390, 3, 2, 4) -> f_2110(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44388, v44389, v44390, 3, 2, 4) :|: 0 = 0
f_2110(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v44388, v44389, v44390, 3, 2, 4) -> f_2114(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v48615, v44388, v44389, v44390, 3, 2, 4) :|: 1 + v48615 = v44387 && 0 <= v48615
f_2114(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v48615, v44388, v44389, v44390, 3, 2, 4) -> f_2117(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v48615, v44388, v44389, v44390, 3, 2, 4) :|: TRUE
f_2117(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v48615, v44388, v44389, v44390, 3, 2, 4) -> f_2120(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v48615, v44388, v44389, v44390, 3, 2, 4) :|: TRUE
f_2120(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v48615, v44388, v44389, v44390, 3, 2, 4) -> f_2047(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44387, 0, v44383, v44384, v44385, v44386, v48615, v44388, v44389, v44390, 3, 2, 4) :|: TRUE
f_2047(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44381, 0, v44383, v44384, v44385, v44386, v44387, v44388, v44389, v44390, 3, 2, 4) -> f_2051(v44374, v44375, v44376, v44377, v44378, v44379, 1, v44381, 0, v44383, v44384, v44385, v44386, v44387, v44388, v44389, v44390, 3, 2, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_2051(v44374:0, v44375:0, v44376:0, v44377:0, v44378:0, v44379:0, 1, v44381:0, 0, v44383:0, v44384:0, v44385:0, v44386:0, 1 + v48615:0, v44388:0, v44389:0, v44390:0, 3, 2, 4) -> f_2051(v44374:0, v44375:0, v44376:0, v44377:0, v44378:0, v44379:0, 1, 1 + v48615:0, 0, v44383:0, v44384:0, v44385:0, v44386:0, v48615:0, v44388:0, v44389:0, v44390:0, 3, 2, 4) :|: v44381:0 > 1 && v48615:0 > -1 && v44386:0 > 1 && v44385:0 > 2 && v44378:0 > 2
Filtered unneeded arguments:
   f_2051(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_2051(x5, x8, x12, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_2051(v44378:0, v44381:0, v44385:0, v44386:0, sum~cons_1~v48615:0) -> f_2051(v44378:0, 1 + v48615:0, v44385:0, v44386:0, v48615:0) :|: v48615:0 > -1 && v44381:0 > 1 && v44386:0 > 1 && v44378:0 > 2 && v44385:0 > 2 && sum~cons_1~v48615:0 = 1 + v48615:0

----------------------------------------

(31)
Obligation:
Rules:
f_2051(v44378:0, v44381:0, v44385:0, v44386:0, sum~cons_1~v48615:0) -> f_2051(v44378:0, 1 + v48615:0, v44385:0, v44386:0, v48615:0) :|: v48615:0 > -1 && v44381:0 > 1 && v44386:0 > 1 && v44378:0 > 2 && v44385:0 > 2 && sum~cons_1~v48615:0 = 1 + v48615:0

----------------------------------------

(32) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(33)
Obligation:
Rules:
f_2051(v44378:0:0, v44381:0:0, v44385:0:0, v44386:0:0, sum~cons_1~v48615:0:0) -> f_2051(v44378:0:0, 1 + v48615:0:0, v44385:0:0, v44386:0:0, v48615:0:0) :|: v44378:0:0 > 2 && v44385:0:0 > 2 && v44386:0:0 > 1 && v44381:0:0 > 1 && v48615:0:0 > -1 && sum~cons_1~v48615:0:0 = 1 + v48615:0:0

----------------------------------------

(34) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_2051(x, x1, x2, x3, x4)] = x4

The following rules are decreasing:
f_2051(v44378:0:0, v44381:0:0, v44385:0:0, v44386:0:0, sum~cons_1~v48615:0:0) -> f_2051(v44378:0:0, 1 + v48615:0:0, v44385:0:0, v44386:0:0, v48615:0:0) :|: v44378:0:0 > 2 && v44385:0:0 > 2 && v44386:0:0 > 1 && v44381:0:0 > 1 && v48615:0:0 > -1 && sum~cons_1~v48615:0:0 = 1 + v48615:0:0
The following rules are bounded:
f_2051(v44378:0:0, v44381:0:0, v44385:0:0, v44386:0:0, sum~cons_1~v48615:0:0) -> f_2051(v44378:0:0, 1 + v48615:0:0, v44385:0:0, v44386:0:0, v48615:0:0) :|: v44378:0:0 > 2 && v44385:0:0 > 2 && v44386:0:0 > 1 && v44381:0:0 > 1 && v48615:0:0 > -1 && sum~cons_1~v48615:0:0 = 1 + v48615:0:0

----------------------------------------

(35)
YES

----------------------------------------

(36)
Obligation:
SCC
----------------------------------------

(37) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_1918(v37319, v37320, v37321, v37322, v37323, 1, v37325, v37326, v37327, v37328, v37329, 0, v37331, v37332, v37333, v37334, 3, 2, 4) -> f_1926(v37319, v37320, v37321, v37322, v37323, 1, v37325, v37326, v37327, v37328, v37329, 0, v37331, v37332, v37333, v37334, 3, 2, 4) :|: TRUE
f_1926(v37319, v37320, v37321, v37322, v37323, 1, v37325, v37326, v37327, v37328, v37329, 0, v37331, v37332, v37333, v37334, 3, 2, 4) -> f_1933(v37319, v37320, v37321, v37322, v37323, 1, v37325, v37326, v37327, v37328, v37329, 0, v37331, v37332, v37333, v37334, 3, 2, 4) :|: 0 = 0
f_1933(v37319, v37320, v37321, v37322, v37323, 1, v37325, v37326, v37327, v37328, v37329, 0, v37331, v37332, v37333, v37334, 3, 2, 4) -> f_1940(v37319, v37320, v37321, v37322, v37323, 1, v37325, v37326, v37327, v37328, v37329, 0, v37331, v37332, v37333, v37334, 3, 2, 4) :|: 0 = 0
f_1940(v37319, v37320, v37321, v37322, v37323, 1, v37325, v37326, v37327, v37328, v37329, 0, v37331, v37332, v37333, v37334, 3, 2, 4) -> f_1948(v37319, v37320, v37321, v37322, v37323, 1, v37325, v37326, v37327, v37328, v37329, 0, v37331, v37332, v37333, v37334, 3, 2, 4) :|: TRUE
f_1948(v37319, v37320, v37321, v37322, v37323, 1, v37325, v37326, v37327, v37328, v37329, 0, v37331, v37332, v37333, v37334, 3, 2, 4) -> f_1952(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) :|: 0 = 0
f_1952(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) -> f_1956(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) :|: 0 < v37331 && 2 <= v37325 && 2 <= v37328 && 3 <= v37327 && 3 <= v37323
f_1956(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) -> f_1961(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) :|: 0 = 0
f_1961(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) -> f_1966(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) :|: 0 = 0
f_1966(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) -> f_1971(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) :|: TRUE
f_1971(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) -> f_1975(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) :|: 0 = 0
f_1975(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) -> f_1979(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) :|: 0 = 0
f_1979(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) -> f_1983(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) :|: TRUE
f_1983(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) -> f_1988(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v41431, v37325, v37332, v37333, v37334, 3, 2, 4) :|: TRUE
f_1988(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v41431, v37325, v37332, v37333, v37334, 3, 2, 4) -> f_1994(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) :|: v41431 = 0
f_1994(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) -> f_1999(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) :|: 0 = 0
f_1999(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) -> f_2004(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) :|: TRUE
f_2004(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37325, v37332, v37333, v37334, 3, 2, 4) -> f_2009(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37332, v37333, v37334, 3, 2, 4) :|: 0 = 0
f_2009(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v37332, v37333, v37334, 3, 2, 4) -> f_2014(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v42430, v37332, v37333, v37334, 3, 2, 4) :|: 1 + v42430 = v37331 && 0 <= v42430
f_2014(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v42430, v37332, v37333, v37334, 3, 2, 4) -> f_2020(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v42430, v37332, v37333, v37334, 3, 2, 4) :|: TRUE
f_2020(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v42430, v37332, v37333, v37334, 3, 2, 4) -> f_2026(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v42430, v37332, v37333, v37334, 3, 2, 4) :|: TRUE
f_2026(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v42430, v37332, v37333, v37334, 3, 2, 4) -> f_1911(v37319, v37320, v37321, v37322, v37323, 1, v37331, v37326, v37327, v37328, v37329, 0, v42430, v37332, v37333, v37334, 3, 2, 4) :|: TRUE
f_1911(v37319, v37320, v37321, v37322, v37323, 1, v37325, v37326, v37327, v37328, v37329, 0, v37331, v37332, v37333, v37334, 3, 2, 4) -> f_1918(v37319, v37320, v37321, v37322, v37323, 1, v37325, v37326, v37327, v37328, v37329, 0, v37331, v37332, v37333, v37334, 3, 2, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_1918(v37319:0, v37320:0, v37321:0, v37322:0, v37323:0, 1, v37325:0, v37326:0, v37327:0, v37328:0, v37329:0, 0, 1 + v42430:0, v37332:0, v37333:0, v37334:0, 3, 2, 4) -> f_1918(v37319:0, v37320:0, v37321:0, v37322:0, v37323:0, 1, 1 + v42430:0, v37326:0, v37327:0, v37328:0, v37329:0, 0, v42430:0, v37332:0, v37333:0, v37334:0, 3, 2, 4) :|: v37325:0 > 1 && v42430:0 > -1 && v37328:0 > 1 && v37327:0 > 2 && v37323:0 > 2
Filtered unneeded arguments:
   f_1918(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_1918(x5, x7, x9, x10, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1918(v37323:0, v37325:0, v37327:0, v37328:0, sum~cons_1~v42430:0) -> f_1918(v37323:0, 1 + v42430:0, v37327:0, v37328:0, v42430:0) :|: v42430:0 > -1 && v37325:0 > 1 && v37328:0 > 1 && v37323:0 > 2 && v37327:0 > 2 && sum~cons_1~v42430:0 = 1 + v42430:0

----------------------------------------

(38)
Obligation:
Rules:
f_1918(v37323:0, v37325:0, v37327:0, v37328:0, sum~cons_1~v42430:0) -> f_1918(v37323:0, 1 + v42430:0, v37327:0, v37328:0, v42430:0) :|: v42430:0 > -1 && v37325:0 > 1 && v37328:0 > 1 && v37323:0 > 2 && v37327:0 > 2 && sum~cons_1~v42430:0 = 1 + v42430:0

----------------------------------------

(39) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(40)
Obligation:
Rules:
f_1918(v37323:0:0, v37325:0:0, v37327:0:0, v37328:0:0, sum~cons_1~v42430:0:0) -> f_1918(v37323:0:0, 1 + v42430:0:0, v37327:0:0, v37328:0:0, v42430:0:0) :|: v37323:0:0 > 2 && v37327:0:0 > 2 && v37328:0:0 > 1 && v37325:0:0 > 1 && v42430:0:0 > -1 && sum~cons_1~v42430:0:0 = 1 + v42430:0:0

----------------------------------------

(41) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1918(x, x1, x2, x3, x4)] = x4

The following rules are decreasing:
f_1918(v37323:0:0, v37325:0:0, v37327:0:0, v37328:0:0, sum~cons_1~v42430:0:0) -> f_1918(v37323:0:0, 1 + v42430:0:0, v37327:0:0, v37328:0:0, v42430:0:0) :|: v37323:0:0 > 2 && v37327:0:0 > 2 && v37328:0:0 > 1 && v37325:0:0 > 1 && v42430:0:0 > -1 && sum~cons_1~v42430:0:0 = 1 + v42430:0:0
The following rules are bounded:
f_1918(v37323:0:0, v37325:0:0, v37327:0:0, v37328:0:0, sum~cons_1~v42430:0:0) -> f_1918(v37323:0:0, 1 + v42430:0:0, v37327:0:0, v37328:0:0, v42430:0:0) :|: v37323:0:0 > 2 && v37327:0:0 > 2 && v37328:0:0 > 1 && v37325:0:0 > 1 && v42430:0:0 > -1 && sum~cons_1~v42430:0:0 = 1 + v42430:0:0

----------------------------------------

(42)
YES

----------------------------------------

(43)
Obligation:
SCC
----------------------------------------

(44) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 56 rulesP rules:
f_1773(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29320, v29321, v29322, v29323, 3, 2, 4) -> f_1780(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29568, v29320, v29321, v29322, v29323, 3, 2, 4) :|: 1 + v29568 = v29309 && 0 <= v29568
f_1780(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29568, v29320, v29321, v29322, v29323, 3, 2, 4) -> f_1787(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29568, v29320, v29321, v29322, v29323, 3, 2, 4) :|: TRUE
f_1787(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29568, v29320, v29321, v29322, v29323, 3, 2, 4) -> f_1793(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29568, v29953, v29321, v29322, v29323, 3, 2, 4) :|: TRUE
f_1793(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29568, v29953, v29321, v29322, v29323, 3, 2, 4) -> f_1800(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29568, v29953, v29321, v29322, v29323, 3, 2, 4) :|: TRUE
f_1800(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29568, v29953, v29321, v29322, v29323, 3, 2, 4) -> f_1806(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29568, v29953, v29321, v29322, v29323, 3, 2, 4) :|: TRUE
f_1806(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29568, v29953, v29321, v29322, v29323, 3, 2, 4) -> f_1812(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29568, v29953, v29321, v29322, v29323, 3, 2, 4) :|: TRUE
f_1812(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29568, v29953, v29321, v29322, v29323, 3, 2, 4) -> f_1818(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29568, v29953, v29321, v29322, v29323, 3, 2, 4) :|: TRUE
f_1818(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29568, v29953, v29321, v29322, v29323, 3, 2, 4) -> f_1825(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29311, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29953, v29321, v29322, v29323, 3, 2, 4) :|: 0 = 0
f_1825(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29311, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29953, v29321, v29322, v29323, 3, 2, 4) -> f_1832(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29311, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29953, v29321, v29322, v29323, 3, 2, 4) :|: 0 < v29568 && 2 <= v29309 && 3 <= v29315
f_1832(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29311, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29953, v29321, v29322, v29323, 3, 2, 4) -> f_1840(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29311, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29953, v29321, v29322, v29323, 3, 2, 4) :|: 0 = 0
f_1840(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29311, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29953, v29321, v29322, v29323, 3, 2, 4) -> f_1849(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29311, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29953, v29321, v29322, v29323, 3, 2, 4) :|: TRUE
f_1849(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29311, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29953, v29321, v29322, v29323, 3, 2, 4) -> f_1858(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29321, v29322, v29323, 3, 2, 4) :|: 0 = 0
f_1858(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29321, v29322, v29323, 3, 2, 4) -> f_1867(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29321, v29322, v29323, 3, 2, 4) :|: 0 < v29953
f_1867(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29321, v29322, v29323, 3, 2, 4) -> f_1876(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29321, v29322, v29323, 3, 2, 4) :|: 0 = 0
f_1876(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29321, v29322, v29323, 3, 2, 4) -> f_1884(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29321, v29322, v29323, 3, 2, 4) :|: 0 = 0
f_1884(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29321, v29322, v29323, 3, 2, 4) -> f_1891(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29321, v29322, v29323, 3, 2, 4) :|: TRUE
f_1891(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, v29309, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29321, v29322, v29323, 3, 2, 4) -> f_1899(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) :|: 0 = 0
f_1899(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) -> f_1906(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) :|: 0 = 0
f_1906(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) -> f_1915(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) :|: TRUE
f_1915(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) -> f_1923(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v37794, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) :|: TRUE
f_1923(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v37794, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) -> f_1931(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v37794, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) :|: v37794 != 0
f_1923(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v37794, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) -> f_1932(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) :|: v37794 = 0
f_1931(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v37794, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) -> f_1938(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v37794, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) :|: 0 = 0
f_1938(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v37794, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) -> f_1946(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v37794, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) :|: TRUE
f_1946(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v37794, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) -> f_1765(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v37794, v29317, v29318, v29309, v29953, v29321, v29322, v29323, 3, 2, 4) :|: TRUE
f_1765(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29319, v29320, v29321, v29322, v29323, 3, 2, 4) -> f_1773(v29304, v29305, v29306, v29307, v29308, v29309, 1, v29311, 0, v29313, v29314, v29315, v29316, v29317, v29318, v29320, v29321, v29322, v29323, 3, 2, 4) :|: 0 = 0
f_1932(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) -> f_1939(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) :|: 0 = 0
f_1939(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) -> f_1947(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) :|: TRUE
f_1947(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v29317, v29318, v29309, v29321, v29322, v29323, 3, 2, 4) -> f_1767(v29304, v29305, v29306, v29307, v29308, v29568, 1, v29953, 0, v29313, v29314, v29315, v29317, v29318, v29309, v29953, v29321, v29322, v29323, 3, 2, 4) :|: TRUE
f_1767(v29433, v29434, v29435, v29436, v29437, v29438, 1, v29440, 0, v29442, v29443, v29444, v29445, v29446, v29447, v29448, v29449, v29450, v29451, 3, 2, 4) -> f_1774(v29433, v29434, v29435, v29436, v29437, v29438, 1, v29440, 0, v29442, v29443, v29444, v29446, v29447, v29448, v29449, v29450, v29451, 3, 2, 4) :|: 0 = 0
f_1774(v29433, v29434, v29435, v29436, v29437, v29438, 1, v29440, 0, v29442, v29443, v29444, v29446, v29447, v29448, v29449, v29450, v29451, 3, 2, 4) -> f_1781(v29433, v29434, v29435, v29436, v29437, v29438, 1, v29440, 0, v29442, v29443, v29444, v29569, v29447, v29448, v29449, v29450, v29451, 3, 2, 4) :|: 1 + v29569 = v29440 && 0 <= v29569
f_1781(v29433, v29434, v29435, v29436, v29437, v29438, 1, v29440, 0, v29442, v29443, v29444, v29569, v29447, v29448, v29449, v29450, v29451, 3, 2, 4) -> f_1788(v29433, v29434, v29435, v29436, v29437, v29438, 1, v29440, 0, v29442, v29443, v29444, v29569, v29447, v29448, v29449, v29450, v29451, 3, 2, 4) :|: TRUE
f_1788(v29433, v29434, v29435, v29436, v29437, v29438, 1, v29440, 0, v29442, v29443, v29444, v29569, v29447, v29448, v29449, v29450, v29451, 3, 2, 4) -> f_1794(v29433, v29434, v29435, v29436, v29437, v29438, 1, v29440, 0, v29442, v29443, v29444, v29569, v29447, v29448, v29449, v29450, v29451, 3, 2, 4) :|: TRUE
f_1794(v29433, v29434, v29435, v29436, v29437, v29438, 1, v29440, 0, v29442, v29443, v29444, v29569, v29447, v29448, v29449, v29450, v29451, 3, 2, 4) -> f_1795(v29433, v29434, v29435, v29436, v29437, v29438, 1, v29440, 0, v29442, v29443, v29444, v29447, v29448, v29569, v29449, v29450, v29451, 3, 2, 4) :|: TRUE
f_1795(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30085, 0, v30087, v30088, v30089, v30090, v30091, v30092, v30093, v30094, v30095, 3, 2, 4) -> f_1801(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30085, 0, v30087, v30088, v30089, v30090, v30091, v30092, v30093, v30094, v30095, 3, 2, 4) :|: TRUE
f_1801(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30085, 0, v30087, v30088, v30089, v30090, v30091, v30092, v30093, v30094, v30095, 3, 2, 4) -> f_1807(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30085, 0, v30087, v30088, v30089, v30090, v30091, v30092, v30093, v30094, v30095, 3, 2, 4) :|: TRUE
f_1807(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30085, 0, v30087, v30088, v30089, v30090, v30091, v30092, v30093, v30094, v30095, 3, 2, 4) -> f_1813(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30085, 0, v30087, v30088, v30089, v30090, v30091, v30092, v30093, v30094, v30095, 3, 2, 4) :|: 0 = 0
f_1813(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30085, 0, v30087, v30088, v30089, v30090, v30091, v30092, v30093, v30094, v30095, 3, 2, 4) -> f_1819(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30085, 0, v30087, v30088, v30089, v30090, v30091, v30092, v30093, v30094, v30095, 3, 2, 4) :|: 0 = 0
f_1819(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30085, 0, v30087, v30088, v30089, v30090, v30091, v30092, v30093, v30094, v30095, 3, 2, 4) -> f_1826(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30085, 0, v30087, v30088, v30089, v30090, v30091, v30092, v30093, v30094, v30095, 3, 2, 4) :|: TRUE
f_1826(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30085, 0, v30087, v30088, v30089, v30090, v30091, v30092, v30093, v30094, v30095, 3, 2, 4) -> f_1834(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) :|: 0 = 0
f_1834(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1842(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) :|: 0 < v30092 && 2 <= v30085 && 2 <= v30091
f_1842(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1851(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) :|: 0 = 0
f_1851(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1860(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) :|: 0 = 0
f_1860(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1869(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) :|: TRUE
f_1869(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1878(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) :|: 0 = 0
f_1878(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1886(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) :|: 0 = 0
f_1886(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1893(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) :|: TRUE
f_1893(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1900(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v37024, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) :|: TRUE
f_1900(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v37024, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1907(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v37024, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) :|: v37024 != 0
f_1900(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v37024, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1908(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) :|: v37024 = 0
f_1907(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v37024, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1916(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v37024, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) :|: 0 = 0
f_1916(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v37024, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1924(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v37024, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) :|: TRUE
f_1924(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v37024, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1765(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v37024, v30085, v30092, v30090, v30091, v30093, v30094, v30095, 3, 2, 4) :|: TRUE
f_1908(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1917(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) :|: 0 = 0
f_1917(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1925(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) :|: TRUE
f_1925(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30090, v30091, v30085, v30093, v30094, v30095, 3, 2, 4) -> f_1767(v30078, v30079, v30080, v30081, v30082, v30083, 1, v30092, 0, v30087, v30088, v30089, v30085, v30092, v30090, v30091, v30093, v30094, v30095, 3, 2, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_1773(v29304:0, v29305:0, v29306:0, v29307:0, v29308:0, 1 + v29568:0, 1, v29311:0, 0, v29313:0, v29314:0, v29315:0, v29316:0, v29317:0, v29318:0, v29320:0, v29321:0, v29322:0, v29323:0, 3, 2, 4) -> f_1900(v29304:0, v29305:0, v29306:0, v29307:0, v29308:0, v29568:0, 1, v29569:0, 0, v29313:0, v29314:0, v29315:0, v37024:0, 1 + v29568:0, 1 + v29569:0, 1 + v29569:0, v29321:0, v29322:0, v29323:0, 3, 2, 4) :|: v29568:0 > 0 && v29569:0 > 0 && v29315:0 > 2
f_1900(v30078:0, v30079:0, v30080:0, v30081:0, v30082:0, v30083:0, 1, v30092:0, 0, v30087:0, v30088:0, v30089:0, v37024:0, v30090:0, v30091:0, v30085:0, v30093:0, v30094:0, v30095:0, 3, 2, 4) -> f_1773(v30078:0, v30079:0, v30080:0, v30081:0, v30082:0, v30083:0, 1, v30092:0, 0, v30087:0, v30088:0, v30089:0, v37024:0, v30085:0, v30092:0, v30091:0, v30093:0, v30094:0, v30095:0, 3, 2, 4) :|: v37024:0 < 0
f_1900(v30078:0, v30079:0, v30080:0, v30081:0, v30082:0, v30083:0, 1, v30092:0, 0, v30087:0, v30088:0, v30089:0, v37024:0, v30090:0, v30091:0, v30085:0, v30093:0, v30094:0, v30095:0, 3, 2, 4) -> f_1773(v30078:0, v30079:0, v30080:0, v30081:0, v30082:0, v30083:0, 1, v30092:0, 0, v30087:0, v30088:0, v30089:0, v37024:0, v30085:0, v30092:0, v30091:0, v30093:0, v30094:0, v30095:0, 3, 2, 4) :|: v37024:0 > 0
f_1773(v29304:0, v29305:0, v29306:0, v29307:0, v29308:0, 1 + v29568:0, 1, v29311:0, 0, v29313:0, v29314:0, v29315:0, v29316:0, v29317:0, v29318:0, v29320:0, v29321:0, v29322:0, v29323:0, 3, 2, 4) -> f_1773(v29304:0, v29305:0, v29306:0, v29307:0, v29308:0, v29568:0, 1, v29953:0, 0, v29313:0, v29314:0, v29315:0, v37794:0, v29317:0, v29318:0, v29953:0, v29321:0, v29322:0, v29323:0, 3, 2, 4) :|: v29568:0 > 0 && v29315:0 > 2 && v37794:0 < 0 && v29953:0 > 0
f_1773(v29304:0, v29305:0, v29306:0, v29307:0, v29308:0, 1 + v29568:0, 1, v29311:0, 0, v29313:0, v29314:0, v29315:0, v29316:0, v29317:0, v29318:0, v29320:0, v29321:0, v29322:0, v29323:0, 3, 2, 4) -> f_1773(v29304:0, v29305:0, v29306:0, v29307:0, v29308:0, v29568:0, 1, v29953:0, 0, v29313:0, v29314:0, v29315:0, v37794:0, v29317:0, v29318:0, v29953:0, v29321:0, v29322:0, v29323:0, 3, 2, 4) :|: v29568:0 > 0 && v29315:0 > 2 && v37794:0 > 0 && v29953:0 > 0
f_1900(v30078:0, v30079:0, v30080:0, v30081:0, v30082:0, v30083:0, 1, 1 + v29569:0, 0, v30087:0, v30088:0, v30089:0, 0, v30090:0, v30091:0, v30085:0, v30093:0, v30094:0, v30095:0, 3, 2, 4) -> f_1900(v30078:0, v30079:0, v30080:0, v30081:0, v30082:0, v30083:0, 1, v29569:0, 0, v30087:0, v30088:0, v30089:0, v37024:1, v30090:0, v30091:0, 1 + v29569:0, v30093:0, v30094:0, v30095:0, 3, 2, 4) :|: v29569:0 > 0 && v30091:0 > 1
Filtered unneeded arguments:
   f_1773(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_1773(x6, x12)
   f_1900(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_1900(x6, x8, x12, x13, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_1773(sum~cons_1~v29568:0, v29315:0) -> f_1900(v29568:0, v29569:0, v29315:0, v37024:0, 1 + v29569:0) :|: v29569:0 > 0 && v29315:0 > 2 && v29568:0 > 0 && sum~cons_1~v29568:0 = 1 + v29568:0
f_1900(v30083:0, v30092:0, v30089:0, v37024:0, v30091:0) -> f_1773(v30083:0, v30089:0) :|: v37024:0 < 0
f_1900(v30083:0, v30092:0, v30089:0, v37024:0, v30091:0) -> f_1773(v30083:0, v30089:0) :|: v37024:0 > 0
f_1773(sum~cons_1~v29568:0, v29315:0) -> f_1773(v29568:0, v29315:0) :|: v29568:0 > 0 && v29315:0 > 2 && sum~cons_1~v29568:0 = 1 + v29568:0
f_1900(v30083:0, sum~cons_1~v29569:0, v30089:0, cons_0, v30091:0) -> f_1900(v30083:0, v29569:0, v30089:0, v37024:1, v30091:0) :|: v29569:0 > 0 && v30091:0 > 1 && sum~cons_1~v29569:0 = 1 + v29569:0 && cons_0 = 0

----------------------------------------

(45)
Obligation:
Rules:
f_1773(sum~cons_1~v29568:0, v29315:0) -> f_1900(v29568:0, v29569:0, v29315:0, v37024:0, 1 + v29569:0) :|: v29569:0 > 0 && v29315:0 > 2 && v29568:0 > 0 && sum~cons_1~v29568:0 = 1 + v29568:0
f_1900(x, x1, x2, x3, x4) -> f_1773(x, x2) :|: x3 < 0
f_1900(x5, x6, x7, x8, x9) -> f_1773(x5, x7) :|: x8 > 0
f_1773(x10, x11) -> f_1773(x12, x11) :|: x12 > 0 && x11 > 2 && x10 = 1 + x12
f_1900(x13, x14, x15, x16, x17) -> f_1900(x13, x18, x15, x19, x17) :|: x18 > 0 && x17 > 1 && x14 = 1 + x18 && x16 = 0

----------------------------------------

(46) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(47)
Obligation:
Rules:
f_1900(x13:0, sum~cons_1~x18:0, x15:0, cons_0, x17:0) -> f_1900(x13:0, x18:0, x15:0, x19:0, x17:0) :|: x18:0 > 0 && x17:0 > 1 && sum~cons_1~x18:0 = 1 + x18:0 && cons_0 = 0
f_1900(x:0, x1:0, x2:0, x3:0, x4:0) -> f_1773(x:0, x2:0) :|: x3:0 < 0
f_1900(x5:0, x6:0, x7:0, x8:0, x9:0) -> f_1773(x5:0, x7:0) :|: x8:0 > 0
f_1773(sum~cons_1~v29568:0:0, v29315:0:0) -> f_1900(v29568:0:0, v29569:0:0, v29315:0:0, v37024:0:0, 1 + v29569:0:0) :|: v29569:0:0 > 0 && v29315:0:0 > 2 && v29568:0:0 > 0 && sum~cons_1~v29568:0:0 = 1 + v29568:0:0
f_1773(sum~cons_1~x12:0, x11:0) -> f_1773(x12:0, x11:0) :|: x12:0 > 0 && x11:0 > 2 && sum~cons_1~x12:0 = 1 + x12:0

----------------------------------------

(48) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1900 ] = 2*f_1900_1 + 2*f_1900_3 + 1
[ f_1773 ] = 2*f_1773_1 + 2*f_1773_2

The following rules are decreasing:
f_1900(x:0, x1:0, x2:0, x3:0, x4:0) -> f_1773(x:0, x2:0) :|: x3:0 < 0
f_1900(x5:0, x6:0, x7:0, x8:0, x9:0) -> f_1773(x5:0, x7:0) :|: x8:0 > 0
f_1773(sum~cons_1~v29568:0:0, v29315:0:0) -> f_1900(v29568:0:0, v29569:0:0, v29315:0:0, v37024:0:0, 1 + v29569:0:0) :|: v29569:0:0 > 0 && v29315:0:0 > 2 && v29568:0:0 > 0 && sum~cons_1~v29568:0:0 = 1 + v29568:0:0
f_1773(sum~cons_1~x12:0, x11:0) -> f_1773(x12:0, x11:0) :|: x12:0 > 0 && x11:0 > 2 && sum~cons_1~x12:0 = 1 + x12:0

The following rules are bounded:
f_1773(sum~cons_1~v29568:0:0, v29315:0:0) -> f_1900(v29568:0:0, v29569:0:0, v29315:0:0, v37024:0:0, 1 + v29569:0:0) :|: v29569:0:0 > 0 && v29315:0:0 > 2 && v29568:0:0 > 0 && sum~cons_1~v29568:0:0 = 1 + v29568:0:0


----------------------------------------

(49)
Obligation:
Rules:
f_1900(x13:0, sum~cons_1~x18:0, x15:0, cons_0, x17:0) -> f_1900(x13:0, x18:0, x15:0, x19:0, x17:0) :|: x18:0 > 0 && x17:0 > 1 && sum~cons_1~x18:0 = 1 + x18:0 && cons_0 = 0
f_1900(x:0, x1:0, x2:0, x3:0, x4:0) -> f_1773(x:0, x2:0) :|: x3:0 < 0
f_1900(x5:0, x6:0, x7:0, x8:0, x9:0) -> f_1773(x5:0, x7:0) :|: x8:0 > 0
f_1773(sum~cons_1~x12:0, x11:0) -> f_1773(x12:0, x11:0) :|: x12:0 > 0 && x11:0 > 2 && sum~cons_1~x12:0 = 1 + x12:0

----------------------------------------

(50) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained 2 non-trivial SCCs.

----------------------------------------

(51)
Complex Obligation (AND)

----------------------------------------

(52)
Obligation:
Rules:
f_1900(x13:0, sum~cons_1~x18:0, x15:0, cons_0, x17:0) -> f_1900(x13:0, x18:0, x15:0, x19:0, x17:0) :|: x18:0 > 0 && x17:0 > 1 && sum~cons_1~x18:0 = 1 + x18:0 && cons_0 = 0

----------------------------------------

(53) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(54)
Obligation:
Rules:
f_1900(x13:0:0, sum~cons_1~x18:0:0, x15:0:0, cons_0, x17:0:0) -> f_1900(x13:0:0, x18:0:0, x15:0:0, x19:0:0, x17:0:0) :|: x18:0:0 > 0 && x17:0:0 > 1 && sum~cons_1~x18:0:0 = 1 + x18:0:0 && cons_0 = 0

----------------------------------------

(55) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1900(x1, x2, x3, x4, x5) -> f_1900(x2, x4, x5)

----------------------------------------

(56)
Obligation:
Rules:
f_1900(sum~cons_1~x18:0:0, cons_0, x17:0:0) -> f_1900(x18:0:0, x19:0:0, x17:0:0) :|: x18:0:0 > 0 && x17:0:0 > 1 && sum~cons_1~x18:0:0 = 1 + x18:0:0 && cons_0 = 0

----------------------------------------

(57) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1900(x, x1, x2)] = x

The following rules are decreasing:
f_1900(sum~cons_1~x18:0:0, cons_0, x17:0:0) -> f_1900(x18:0:0, x19:0:0, x17:0:0) :|: x18:0:0 > 0 && x17:0:0 > 1 && sum~cons_1~x18:0:0 = 1 + x18:0:0 && cons_0 = 0
The following rules are bounded:
f_1900(sum~cons_1~x18:0:0, cons_0, x17:0:0) -> f_1900(x18:0:0, x19:0:0, x17:0:0) :|: x18:0:0 > 0 && x17:0:0 > 1 && sum~cons_1~x18:0:0 = 1 + x18:0:0 && cons_0 = 0

----------------------------------------

(58)
YES

----------------------------------------

(59)
Obligation:
Rules:
f_1773(sum~cons_1~x12:0, x11:0) -> f_1773(x12:0, x11:0) :|: x12:0 > 0 && x11:0 > 2 && sum~cons_1~x12:0 = 1 + x12:0

----------------------------------------

(60) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(61)
Obligation:
Rules:
f_1773(sum~cons_1~x12:0:0, x11:0:0) -> f_1773(x12:0:0, x11:0:0) :|: x12:0:0 > 0 && x11:0:0 > 2 && sum~cons_1~x12:0:0 = 1 + x12:0:0

----------------------------------------

(62) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1773 ] = f_1773_1

The following rules are decreasing:
f_1773(sum~cons_1~x12:0:0, x11:0:0) -> f_1773(x12:0:0, x11:0:0) :|: x12:0:0 > 0 && x11:0:0 > 2 && sum~cons_1~x12:0:0 = 1 + x12:0:0

The following rules are bounded:
f_1773(sum~cons_1~x12:0:0, x11:0:0) -> f_1773(x12:0:0, x11:0:0) :|: x12:0:0 > 0 && x11:0:0 > 2 && sum~cons_1~x12:0:0 = 1 + x12:0:0


----------------------------------------

(63)
YES

----------------------------------------

(64)
Obligation:
SCC
----------------------------------------

(65) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 25 rulesP rules:
f_1445(v17197, v17198, v17199, v17200, v17201, v17202, 1, v17204, 0, v17206, v17207, v17208, v17209, v17210, v17211, v17212, v17213, v17214, 3, 2, 4) -> f_1454(v17197, v17198, v17199, v17200, v17201, v17202, 1, v17204, 0, v17206, v17207, v17208, v17209, v17210, v17211, v17212, v17213, v17214, 3, 2, 4) :|: TRUE
f_1454(v17197, v17198, v17199, v17200, v17201, v17202, 1, v17204, 0, v17206, v17207, v17208, v17209, v17210, v17211, v17212, v17213, v17214, 3, 2, 4) -> f_1462(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17204, v17202, 0, v17206, v17207, v17208, v17209, v17211, v17212, v17213, v17214, 3, 2, 4) :|: 0 = 0
f_1462(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17204, v17202, 0, v17206, v17207, v17208, v17209, v17211, v17212, v17213, v17214, 3, 2, 4) -> f_1469(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17204, v17202, 0, v17206, v17207, v17208, v17209, v17211, v17212, v17213, v17214, 3, 2, 4) :|: 0 < v17210 && 2 <= v17202 && 2 <= v17208
f_1469(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17204, v17202, 0, v17206, v17207, v17208, v17209, v17211, v17212, v17213, v17214, 3, 2, 4) -> f_1475(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17204, v17202, 0, v17206, v17207, v17208, v17209, v17211, v17212, v17213, v17214, 3, 2, 4) :|: 0 = 0
f_1475(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17204, v17202, 0, v17206, v17207, v17208, v17209, v17211, v17212, v17213, v17214, 3, 2, 4) -> f_1482(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17204, v17202, 0, v17206, v17207, v17208, v17209, v17211, v17212, v17213, v17214, 3, 2, 4) :|: TRUE
f_1482(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17204, v17202, 0, v17206, v17207, v17208, v17209, v17211, v17212, v17213, v17214, 3, 2, 4) -> f_1490(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, v17202, 0, v17206, v17207, v17208, v17209, v17212, v17213, v17214, 3, 2, 4) :|: 0 = 0
f_1490(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, v17202, 0, v17206, v17207, v17208, v17209, v17212, v17213, v17214, 3, 2, 4) -> f_1499(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, v17202, 0, v17206, v17207, v17208, v17209, v17212, v17213, v17214, 3, 2, 4) :|: 0 < v17211
f_1499(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, v17202, 0, v17206, v17207, v17208, v17209, v17212, v17213, v17214, 3, 2, 4) -> f_1508(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, v17202, 0, v17206, v17207, v17208, v17209, v17212, v17213, v17214, 3, 2, 4) :|: 0 = 0
f_1508(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, v17202, 0, v17206, v17207, v17208, v17209, v17212, v17213, v17214, 3, 2, 4) -> f_1519(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, v17202, 0, v17206, v17207, v17208, v17209, v17212, v17213, v17214, 3, 2, 4) :|: 0 = 0
f_1519(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, v17202, 0, v17206, v17207, v17208, v17209, v17212, v17213, v17214, 3, 2, 4) -> f_1532(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, v17202, 0, v17206, v17207, v17208, v17209, v17212, v17213, v17214, 3, 2, 4) :|: TRUE
f_1532(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, v17202, 0, v17206, v17207, v17208, v17209, v17212, v17213, v17214, 3, 2, 4) -> f_1545(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v17209, v17202, v17212, v17213, v17214, 3, 2, 4) :|: 0 = 0
f_1545(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v17209, v17202, v17212, v17213, v17214, 3, 2, 4) -> f_1556(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v17209, v17202, v17212, v17213, v17214, 3, 2, 4) :|: 0 = 0
f_1556(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v17209, v17202, v17212, v17213, v17214, 3, 2, 4) -> f_1567(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v17209, v17202, v17212, v17213, v17214, 3, 2, 4) :|: TRUE
f_1567(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v17209, v17202, v17212, v17213, v17214, 3, 2, 4) -> f_1577(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v17202, v17212, v17213, v17214, 3, 2, 4) :|: TRUE
f_1577(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v17202, v17212, v17213, v17214, 3, 2, 4) -> f_1587(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v17202, v17212, v17213, v17214, 3, 2, 4) :|: v20308 != 0
f_1587(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v17202, v17212, v17213, v17214, 3, 2, 4) -> f_1597(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v17202, v17212, v17213, v17214, 3, 2, 4) :|: 0 = 0
f_1597(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v17202, v17212, v17213, v17214, 3, 2, 4) -> f_1606(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v17202, v17212, v17213, v17214, 3, 2, 4) :|: TRUE
f_1606(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v17202, v17212, v17213, v17214, 3, 2, 4) -> f_1613(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v17212, v17213, v17214, 3, 2, 4) :|: 0 = 0
f_1613(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v17212, v17213, v17214, 3, 2, 4) -> f_1620(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v22104, v17212, v17213, v17214, 3, 2, 4) :|: 1 + v22104 = v17210 && 0 <= v22104
f_1620(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v22104, v17212, v17213, v17214, 3, 2, 4) -> f_1627(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v22104, v17212, v17213, v17214, 3, 2, 4) :|: TRUE
f_1627(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v22104, v17212, v17213, v17214, 3, 2, 4) -> f_1634(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v22104, v22843, v17212, v17213, v17214, 3, 2, 4) :|: TRUE
f_1634(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v22104, v22843, v17212, v17213, v17214, 3, 2, 4) -> f_1642(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v22104, v22843, v17212, v17213, v17214, 3, 2, 4) :|: TRUE
f_1642(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v22104, v22843, v17212, v17213, v17214, 3, 2, 4) -> f_1651(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v22104, v22843, v17212, v17213, v17214, 3, 2, 4) :|: TRUE
f_1651(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v22104, v22843, v17212, v17213, v17214, 3, 2, 4) -> f_1436(v17197, v17198, v17199, v17200, v17201, v17210, 1, v17211, 0, v17206, v17207, v17208, v20308, v22104, v22843, v17212, v17213, v17214, 3, 2, 4) :|: TRUE
f_1436(v17197, v17198, v17199, v17200, v17201, v17202, 1, v17204, 0, v17206, v17207, v17208, v17209, v17210, v17211, v17212, v17213, v17214, 3, 2, 4) -> f_1445(v17197, v17198, v17199, v17200, v17201, v17202, 1, v17204, 0, v17206, v17207, v17208, v17209, v17210, v17211, v17212, v17213, v17214, 3, 2, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_1445(v17197:0, v17198:0, v17199:0, v17200:0, v17201:0, v17202:0, 1, v17204:0, 0, v17206:0, v17207:0, v17208:0, v17209:0, 1 + v22104:0, v17211:0, v17212:0, v17213:0, v17214:0, 3, 2, 4) -> f_1445(v17197:0, v17198:0, v17199:0, v17200:0, v17201:0, 1 + v22104:0, 1, v17211:0, 0, v17206:0, v17207:0, v17208:0, v20308:0, v22104:0, v22843:0, v17212:0, v17213:0, v17214:0, 3, 2, 4) :|: v17202:0 > 1 && v22104:0 > -1 && v17208:0 > 1 && v17211:0 > 0 && v20308:0 < 0
f_1445(v17197:0, v17198:0, v17199:0, v17200:0, v17201:0, v17202:0, 1, v17204:0, 0, v17206:0, v17207:0, v17208:0, v17209:0, 1 + v22104:0, v17211:0, v17212:0, v17213:0, v17214:0, 3, 2, 4) -> f_1445(v17197:0, v17198:0, v17199:0, v17200:0, v17201:0, 1 + v22104:0, 1, v17211:0, 0, v17206:0, v17207:0, v17208:0, v20308:0, v22104:0, v22843:0, v17212:0, v17213:0, v17214:0, 3, 2, 4) :|: v17202:0 > 1 && v22104:0 > -1 && v17208:0 > 1 && v17211:0 > 0 && v20308:0 > 0
Filtered unneeded arguments:
   f_1445(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_1445(x6, x12, x14, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1445(v17202:0, v17208:0, sum~cons_1~v22104:0, v17211:0) -> f_1445(1 + v22104:0, v17208:0, v22104:0, v22843:0) :|: v22104:0 > -1 && v17202:0 > 1 && v17211:0 > 0 && v17208:0 > 1 && sum~cons_1~v22104:0 = 1 + v22104:0

----------------------------------------

(66)
Obligation:
Rules:
f_1445(v17202:0, v17208:0, sum~cons_1~v22104:0, v17211:0) -> f_1445(1 + v22104:0, v17208:0, v22104:0, v22843:0) :|: v22104:0 > -1 && v17202:0 > 1 && v17211:0 > 0 && v17208:0 > 1 && sum~cons_1~v22104:0 = 1 + v22104:0

----------------------------------------

(67) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(68)
Obligation:
Rules:
f_1445(v17202:0:0, v17208:0:0, sum~cons_1~v22104:0:0, v17211:0:0) -> f_1445(1 + v22104:0:0, v17208:0:0, v22104:0:0, v22843:0:0) :|: v17211:0:0 > 0 && v17208:0:0 > 1 && v17202:0:0 > 1 && v22104:0:0 > -1 && sum~cons_1~v22104:0:0 = 1 + v22104:0:0

----------------------------------------

(69) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1445(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_1445(v17202:0:0, v17208:0:0, sum~cons_1~v22104:0:0, v17211:0:0) -> f_1445(1 + v22104:0:0, v17208:0:0, v22104:0:0, v22843:0:0) :|: v17211:0:0 > 0 && v17208:0:0 > 1 && v17202:0:0 > 1 && v22104:0:0 > -1 && sum~cons_1~v22104:0:0 = 1 + v22104:0:0
The following rules are bounded:
f_1445(v17202:0:0, v17208:0:0, sum~cons_1~v22104:0:0, v17211:0:0) -> f_1445(1 + v22104:0:0, v17208:0:0, v22104:0:0, v22843:0:0) :|: v17211:0:0 > 0 && v17208:0:0 > 1 && v17202:0:0 > 1 && v22104:0:0 > -1 && sum~cons_1~v22104:0:0 = 1 + v22104:0:0

----------------------------------------

(70)
YES

----------------------------------------

(71)
Obligation:
SCC
----------------------------------------

(72) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 59 rulesP rules:
f_1398(v16364, v16365, v16366, v16367, v16368, v16369, 1, v16371, 0, v16373, v16374, v16375, v16376, v16377, v16378, v16379, 3, 2, 4) -> f_1404(v16364, v16365, v16366, v16367, v16368, v16369, 1, v16371, 0, v16373, v16374, v16375, v16376, v16377, v16378, v16379, 3, 2, 4) :|: TRUE
f_1404(v16364, v16365, v16366, v16367, v16368, v16369, 1, v16371, 0, v16373, v16374, v16375, v16376, v16377, v16378, v16379, 3, 2, 4) -> f_1411(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) :|: 0 = 0
f_1411(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) -> f_1419(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) :|: v16376 != 0
f_1419(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) -> f_1429(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) :|: 0 = 0
f_1429(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) -> f_1439(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) :|: TRUE
f_1439(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) -> f_1448(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) :|: 0 = 0
f_1448(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) -> f_1457(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) :|: 0 = 0
f_1457(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) -> f_1464(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) :|: 0 = 0
f_1464(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) -> f_1472(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) :|: TRUE
f_1472(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, v16369, 0, v16373, v16374, v16375, v16377, v16378, v16379, 3, 2, 4) -> f_1478(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v16373, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) :|: 0 = 0
f_1478(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v16373, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) -> f_1486(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v16373, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) :|: v16376 <= 0 && 1 + v16369 <= 0 && 1 + v16375 <= 0
f_1486(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v16373, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) -> f_1495(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v16373, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) :|: 0 = 0
f_1495(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v16373, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) -> f_1504(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v16373, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) :|: TRUE
f_1504(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v16373, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) -> f_1513(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v19234, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) :|: TRUE
f_1513(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v19234, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) -> f_1525(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v19234, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) :|: v19234 != 0
f_1513(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v19234, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) -> f_1526(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) :|: v19234 = 0
f_1525(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v19234, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) -> f_1538(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v19234, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) :|: 0 = 0
f_1538(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v19234, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) -> f_1550(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v19234, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) :|: TRUE
f_1550(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v19234, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) -> f_1753(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v19234, v16374, v16375, v16369, v16376, v16377, v16378, v16379, 3, 2, 4) :|: TRUE
f_1753(v29047, v29048, v29049, v29050, v29051, v29052, 1, v29054, 0, v29056, v29057, v29058, v29059, v29060, v29061, v29062, v29063, 3, 2, 4) -> f_1762(v29047, v29048, v29049, v29050, v29051, v29052, 1, v29054, 0, v29056, v29057, v29058, v29060, v29061, v29062, v29063, 3, 2, 4) :|: 0 = 0
f_1762(v29047, v29048, v29049, v29050, v29051, v29052, 1, v29054, 0, v29056, v29057, v29058, v29060, v29061, v29062, v29063, 3, 2, 4) -> f_1771(v29047, v29048, v29049, v29050, v29051, v29052, 1, v29054, 0, v29056, v29057, v29058, v29562, v29061, v29062, v29063, 3, 2, 4) :|: v29562 = 1 + v29052 && v29562 <= 1
f_1771(v29047, v29048, v29049, v29050, v29051, v29052, 1, v29054, 0, v29056, v29057, v29058, v29562, v29061, v29062, v29063, 3, 2, 4) -> f_1778(v29047, v29048, v29049, v29050, v29051, v29052, 1, v29054, 0, v29056, v29057, v29058, v29562, v29061, v29062, v29063, 3, 2, 4) :|: TRUE
f_1778(v29047, v29048, v29049, v29050, v29051, v29052, 1, v29054, 0, v29056, v29057, v29058, v29562, v29061, v29062, v29063, 3, 2, 4) -> f_1785(v29047, v29048, v29049, v29050, v29051, v29052, 1, v29054, 0, v29056, v29057, v29058, v29562, v29061, v29062, v29063, 3, 2, 4) :|: TRUE
f_1785(v29047, v29048, v29049, v29050, v29051, v29052, 1, v29054, 0, v29056, v29057, v29058, v29562, v29061, v29062, v29063, 3, 2, 4) -> f_1392(v29047, v29048, v29049, v29050, v29051, v29052, 1, v29054, 0, v29056, v29057, v29058, v29562, v29061, v29062, v29063, 3, 2, 4) :|: TRUE
f_1392(v16364, v16365, v16366, v16367, v16368, v16369, 1, v16371, 0, v16373, v16374, v16375, v16376, v16377, v16378, v16379, 3, 2, 4) -> f_1398(v16364, v16365, v16366, v16367, v16368, v16369, 1, v16371, 0, v16373, v16374, v16375, v16376, v16377, v16378, v16379, 3, 2, 4) :|: TRUE
f_1526(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) -> f_1539(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) :|: 0 = 0
f_1539(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) -> f_1551(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) :|: TRUE
f_1551(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v16374, v16375, v16369, v16377, v16378, v16379, 3, 2, 4) -> f_1755(v16364, v16365, v16366, v16367, v16368, v16376, 1, v16371, 0, v16374, v16375, v16369, v16376, v16377, v16378, v16379, 3, 2, 4) :|: TRUE
f_1755(v29085, v29086, v29087, v29088, v29089, v29090, 1, v29092, 0, v29094, v29095, v29096, v29097, v29098, v29099, v29100, 3, 2, 4) -> f_1763(v29085, v29086, v29087, v29088, v29089, v29090, 1, v29092, 0, v29095, v29096, v29097, v29098, v29099, v29100, 3, 2, 4) :|: 0 = 0
f_1763(v29085, v29086, v29087, v29088, v29089, v29090, 1, v29092, 0, v29095, v29096, v29097, v29098, v29099, v29100, 3, 2, 4) -> f_1772(v29085, v29086, v29087, v29088, v29089, v29090, 1, v29092, 0, v29563, v29095, v29096, v29097, v29098, v29099, v29100, 3, 2, 4) :|: 1 + v29563 = v29092 && 0 <= v29563
f_1772(v29085, v29086, v29087, v29088, v29089, v29090, 1, v29092, 0, v29563, v29095, v29096, v29097, v29098, v29099, v29100, 3, 2, 4) -> f_1779(v29085, v29086, v29087, v29088, v29089, v29090, 1, v29092, 0, v29563, v29095, v29096, v29097, v29098, v29099, v29100, 3, 2, 4) :|: TRUE
f_1779(v29085, v29086, v29087, v29088, v29089, v29090, 1, v29092, 0, v29563, v29095, v29096, v29097, v29098, v29099, v29100, 3, 2, 4) -> f_1786(v29085, v29086, v29087, v29088, v29089, v29090, 1, v29092, 0, v29563, v29691, v29096, v29097, v29098, v29099, v29100, 3, 2, 4) :|: TRUE
f_1786(v29085, v29086, v29087, v29088, v29089, v29090, 1, v29092, 0, v29563, v29691, v29096, v29097, v29098, v29099, v29100, 3, 2, 4) -> f_1792(v29085, v29086, v29087, v29088, v29089, v29090, 1, v29092, 0, v29563, v29691, v29096, v29097, v29098, v29099, v29100, 3, 2, 4) :|: TRUE
f_1792(v29085, v29086, v29087, v29088, v29089, v29090, 1, v29092, 0, v29563, v29691, v29096, v29097, v29098, v29099, v29100, 3, 2, 4) -> f_1799(v29085, v29086, v29087, v29088, v29089, v29090, 1, v29092, 0, v29563, v29691, v29096, v29097, v29098, v29099, v29100, 3, 2, 4) :|: TRUE
f_1799(v29085, v29086, v29087, v29088, v29089, v29090, 1, v29092, 0, v29563, v29691, v29096, v29097, v29098, v29099, v29100, 3, 2, 4) -> f_1612(v29085, v29086, v29087, v29088, v29089, v29090, 1, v29092, 0, v29096, v29097, v29563, v29691, v29098, v29099, v29100, 3, 4) :|: TRUE
f_1612(v21802, v21803, v21804, v21805, v21806, v21807, 1, v21809, 0, v21811, v21812, v21813, v21814, v21815, v21816, v21817, 3, 4) -> f_1619(v21802, v21803, v21804, v21805, v21806, v21807, 1, v21809, 0, v21811, v21812, v21813, v21814, v21815, v21816, v21817, 3, 4) :|: TRUE
f_1619(v21802, v21803, v21804, v21805, v21806, v21807, 1, v21809, 0, v21811, v21812, v21813, v21814, v21815, v21816, v21817, 3, 4) -> f_1626(v21802, v21803, v21804, v21805, v21806, v21807, 1, v21809, 0, v21811, v21812, v21813, v21814, v21815, v21816, v21817, 3, 4) :|: TRUE
f_1626(v21802, v21803, v21804, v21805, v21806, v21807, 1, v21809, 0, v21811, v21812, v21813, v21814, v21815, v21816, v21817, 3, 4) -> f_1633(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21809, v21807, 0, v21811, v21812, v21813, v21815, v21816, v21817, 3, 4) :|: 0 = 0
f_1633(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21809, v21807, 0, v21811, v21812, v21813, v21815, v21816, v21817, 3, 4) -> f_1640(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21809, v21807, 0, v21811, v21812, v21813, v21815, v21816, v21817, 3, 4) :|: v21814 != 0
f_1640(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21809, v21807, 0, v21811, v21812, v21813, v21815, v21816, v21817, 3, 4) -> f_1649(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21809, v21807, 0, v21811, v21812, v21813, v21815, v21816, v21817, 3, 4) :|: 0 = 0
f_1649(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21809, v21807, 0, v21811, v21812, v21813, v21815, v21816, v21817, 3, 4) -> f_1658(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21809, v21807, 0, v21811, v21812, v21813, v21815, v21816, v21817, 3, 4) :|: TRUE
f_1658(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21809, v21807, 0, v21811, v21812, v21813, v21815, v21816, v21817, 3, 4) -> f_1665(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, v21807, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 4) :|: 0 = 0
f_1665(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, v21807, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 4) -> f_1672(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, v21807, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) :|: 0 < v21813 && 2 <= v21809 && 2 <= v21806
f_1672(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, v21807, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1677(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, v21807, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) :|: 0 = 0
f_1677(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, v21807, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1682(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, v21807, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) :|: 0 = 0
f_1682(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, v21807, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1688(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, v21807, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) :|: TRUE
f_1688(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, v21807, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1694(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) :|: 0 = 0
f_1694(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1702(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) :|: v21814 <= 0
f_1702(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1710(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) :|: 0 = 0
f_1710(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1717(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) :|: TRUE
f_1717(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1724(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v28471, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) :|: TRUE
f_1724(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v28471, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1732(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v28471, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) :|: v28471 != 0
f_1724(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v28471, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1733(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) :|: v28471 = 0
f_1732(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v28471, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1741(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v28471, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) :|: 0 = 0
f_1741(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v28471, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1752(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v28471, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) :|: TRUE
f_1752(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v28471, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1753(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v28471, v21809, v21814, v21811, v21812, v21815, v21816, v21817, 3, 2, 4) :|: TRUE
f_1733(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1742(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) :|: 0 = 0
f_1742(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1754(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) :|: TRUE
f_1754(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v21811, v21812, v21809, v21815, v21816, v21817, 3, 2, 4) -> f_1755(v21802, v21803, v21804, v21805, v21806, v21814, 1, v21813, 0, v21809, v21814, v21811, v21812, v21815, v21816, v21817, 3, 2, 4) :|: TRUE
Combined rules. Obtained 12 rulesP rules:
f_1398(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v16369:0, 1, v16371:0, 0, v16373:0, v16374:0, v16375:0, v16376:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) -> f_1398(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v16376:0, 1, v16371:0, 0, v19234:0, v16374:0, v16375:0, 1 + v16376:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) :|: v16376:0 < 0 && v16369:0 < 0 && v16376:0 < 1 && v16375:0 < 0 && v19234:0 < 0
f_1398(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v16369:0, 1, v16371:0, 0, v16373:0, v16374:0, v16375:0, v16376:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) -> f_1398(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v16376:0, 1, v16371:0, 0, v19234:0, v16374:0, v16375:0, 1 + v16376:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) :|: v16376:0 < 0 && v16369:0 < 0 && v16376:0 < 1 && v16375:0 < 0 && v19234:0 > 0
f_1398(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v16369:0, 1, v16371:0, 0, v16373:0, v16374:0, v16375:0, v16376:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) -> f_1398(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v16376:0, 1, v16371:0, 0, v19234:0, v16374:0, v16375:0, 1 + v16376:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) :|: v16376:0 > 0 && v16369:0 < 0 && v16376:0 < 1 && v16375:0 < 0 && v19234:0 < 0
f_1398(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v16369:0, 1, v16371:0, 0, v16373:0, v16374:0, v16375:0, v16376:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) -> f_1398(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v16376:0, 1, v16371:0, 0, v19234:0, v16374:0, v16375:0, 1 + v16376:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) :|: v16376:0 > 0 && v16369:0 < 0 && v16376:0 < 1 && v16375:0 < 0 && v19234:0 > 0
f_1724(v21802:0, v21803:0, v21804:0, v21805:0, v21806:0, v21814:0, 1, v21813:0, 0, v28471:0, v21811:0, v21812:0, v21809:0, v21815:0, v21816:0, v21817:0, 3, 2, 4) -> f_1398(v21802:0, v21803:0, v21804:0, v21805:0, v21806:0, v21814:0, 1, v21813:0, 0, v28471:0, v21809:0, v21814:0, 1 + v21814:0, v21815:0, v21816:0, v21817:0, 3, 2, 4) :|: v28471:0 < 0 && v21814:0 < 1
f_1724(v21802:0, v21803:0, v21804:0, v21805:0, v21806:0, v21814:0, 1, v21813:0, 0, v28471:0, v21811:0, v21812:0, v21809:0, v21815:0, v21816:0, v21817:0, 3, 2, 4) -> f_1398(v21802:0, v21803:0, v21804:0, v21805:0, v21806:0, v21814:0, 1, v21813:0, 0, v28471:0, v21809:0, v21814:0, 1 + v21814:0, v21815:0, v21816:0, v21817:0, 3, 2, 4) :|: v28471:0 > 0 && v21814:0 < 1
f_1724(v21802:0, v21803:0, v21804:0, v21805:0, v21806:0, v21814:0, 1, 1 + v29563:0, 0, 0, v21811:0, v21812:0, v21809:0, v21815:0, v21816:0, v21817:0, 3, 2, 4) -> f_1724(v21802:0, v21803:0, v21804:0, v21805:0, v21806:0, v29691:0, 1, v29563:0, 0, v28471:1, v21811:0, v21812:0, 1 + v29563:0, v21815:0, v21816:0, v21817:0, 3, 2, 4) :|: v29563:0 > 0 && v29691:0 < 0 && v29691:0 < 1 && v21806:0 > 1
f_1724(v21802:0, v21803:0, v21804:0, v21805:0, v21806:0, v21814:0, 1, 1 + v29563:0, 0, 0, v21811:0, v21812:0, v21809:0, v21815:0, v21816:0, v21817:0, 3, 2, 4) -> f_1724(v21802:0, v21803:0, v21804:0, v21805:0, v21806:0, v29691:0, 1, v29563:0, 0, v28471:1, v21811:0, v21812:0, 1 + v29563:0, v21815:0, v21816:0, v21817:0, 3, 2, 4) :|: v29563:0 > 0 && v29691:0 > 0 && v29691:0 < 1 && v21806:0 > 1
f_1398(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v16369:0, 1, 1 + v29563:0, 0, v16373:0, v16374:0, v16375:0, v16376:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) -> f_1724(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v29691:0, 1, v29563:0, 0, v28471:0, v16369:0, v16376:0, 1 + v29563:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) :|: v29563:0 > 0 && v16376:0 < 0 && v16369:0 < 0 && v16376:0 < 1 && v16375:0 < 0 && v29691:0 < 0 && v29691:0 < 1 && v16368:0 > 1
f_1398(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v16369:0, 1, 1 + v29563:0, 0, v16373:0, v16374:0, v16375:0, v16376:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) -> f_1724(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v29691:0, 1, v29563:0, 0, v28471:0, v16369:0, v16376:0, 1 + v29563:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) :|: v29563:0 > 0 && v16376:0 < 0 && v16369:0 < 0 && v16376:0 < 1 && v16375:0 < 0 && v29691:0 > 0 && v29691:0 < 1 && v16368:0 > 1
f_1398(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v16369:0, 1, 1 + v29563:0, 0, v16373:0, v16374:0, v16375:0, v16376:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) -> f_1724(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v29691:0, 1, v29563:0, 0, v28471:0, v16369:0, v16376:0, 1 + v29563:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) :|: v29563:0 > 0 && v16376:0 > 0 && v16369:0 < 0 && v16376:0 < 1 && v16375:0 < 0 && v29691:0 < 0 && v29691:0 < 1 && v16368:0 > 1
f_1398(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v16369:0, 1, 1 + v29563:0, 0, v16373:0, v16374:0, v16375:0, v16376:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) -> f_1724(v16364:0, v16365:0, v16366:0, v16367:0, v16368:0, v29691:0, 1, v29563:0, 0, v28471:0, v16369:0, v16376:0, 1 + v29563:0, v16377:0, v16378:0, v16379:0, 3, 2, 4) :|: v29563:0 > 0 && v16376:0 > 0 && v16369:0 < 0 && v16376:0 < 1 && v16375:0 < 0 && v29691:0 > 0 && v29691:0 < 1 && v16368:0 > 1
Filtered unneeded arguments:
   f_1398(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_1398(x5, x6, x8, x12, x13)
   f_1724(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_1724(x5, x6, x8, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 10 rules.P rules:
f_1398(v16368:0, v16369:0, v16371:0, v16375:0, v16376:0) -> f_1398(v16368:0, v16376:0, v16371:0, v16375:0, 1 + v16376:0) :|: v16369:0 < 0 && v16376:0 < 0 && v16375:0 < 0 && v16376:0 < 1
f_1398(v16368:0, v16369:0, v16371:0, v16375:0, v16376:0) -> f_1398(v16368:0, v16376:0, v16371:0, v16375:0, 1 + v16376:0) :|: v16369:0 < 0 && v16376:0 > 0 && v16375:0 < 0 && v16376:0 < 1
f_1724(v21806:0, v21814:0, v21813:0, v28471:0) -> f_1398(v21806:0, v21814:0, v21813:0, v21814:0, 1 + v21814:0) :|: v28471:0 < 0 && v21814:0 < 1
f_1724(v21806:0, v21814:0, v21813:0, v28471:0) -> f_1398(v21806:0, v21814:0, v21813:0, v21814:0, 1 + v21814:0) :|: v28471:0 > 0 && v21814:0 < 1
f_1724(v21806:0, v21814:0, sum~cons_1~v29563:0, cons_0) -> f_1724(v21806:0, v29691:0, v29563:0, v28471:1) :|: v29691:0 < 0 && v29563:0 > 0 && v21806:0 > 1 && v29691:0 < 1 && sum~cons_1~v29563:0 = 1 + v29563:0 && cons_0 = 0
f_1724(v21806:0, v21814:0, sum~cons_1~v29563:0, cons_0) -> f_1724(v21806:0, v29691:0, v29563:0, v28471:1) :|: v29691:0 > 0 && v29563:0 > 0 && v21806:0 > 1 && v29691:0 < 1 && sum~cons_1~v29563:0 = 1 + v29563:0 && cons_0 = 0
f_1398(v16368:0, v16369:0, sum~cons_1~v29563:0, v16375:0, v16376:0) -> f_1724(v16368:0, v29691:0, v29563:0, v28471:0) :|: v16376:0 < 0 && v29563:0 > 0 && v16369:0 < 0 && v16376:0 < 1 && v16375:0 < 0 && v29691:0 < 0 && v16368:0 > 1 && v29691:0 < 1 && sum~cons_1~v29563:0 = 1 + v29563:0
f_1398(v16368:0, v16369:0, sum~cons_1~v29563:0, v16375:0, v16376:0) -> f_1724(v16368:0, v29691:0, v29563:0, v28471:0) :|: v16376:0 < 0 && v29563:0 > 0 && v16369:0 < 0 && v16376:0 < 1 && v16375:0 < 0 && v29691:0 > 0 && v16368:0 > 1 && v29691:0 < 1 && sum~cons_1~v29563:0 = 1 + v29563:0
f_1398(v16368:0, v16369:0, sum~cons_1~v29563:0, v16375:0, v16376:0) -> f_1724(v16368:0, v29691:0, v29563:0, v28471:0) :|: v16376:0 > 0 && v29563:0 > 0 && v16369:0 < 0 && v16376:0 < 1 && v16375:0 < 0 && v29691:0 < 0 && v16368:0 > 1 && v29691:0 < 1 && sum~cons_1~v29563:0 = 1 + v29563:0
f_1398(v16368:0, v16369:0, sum~cons_1~v29563:0, v16375:0, v16376:0) -> f_1724(v16368:0, v29691:0, v29563:0, v28471:0) :|: v16376:0 > 0 && v29563:0 > 0 && v16369:0 < 0 && v16376:0 < 1 && v16375:0 < 0 && v29691:0 > 0 && v16368:0 > 1 && v29691:0 < 1 && sum~cons_1~v29563:0 = 1 + v29563:0

----------------------------------------

(73)
Obligation:
Rules:
f_1398(v16368:0, v16369:0, v16371:0, v16375:0, v16376:0) -> f_1398(v16368:0, v16376:0, v16371:0, v16375:0, 1 + v16376:0) :|: v16369:0 < 0 && v16376:0 < 0 && v16375:0 < 0 && v16376:0 < 1
f_1398(x, x1, x2, x3, x4) -> f_1398(x, x4, x2, x3, 1 + x4) :|: x1 < 0 && x4 > 0 && x3 < 0 && x4 < 1
f_1724(v21806:0, v21814:0, v21813:0, v28471:0) -> f_1398(v21806:0, v21814:0, v21813:0, v21814:0, 1 + v21814:0) :|: v28471:0 < 0 && v21814:0 < 1
f_1724(x5, x6, x7, x8) -> f_1398(x5, x6, x7, x6, 1 + x6) :|: x8 > 0 && x6 < 1
f_1724(x9, x10, x11, x12) -> f_1724(x9, x13, x14, x15) :|: x13 < 0 && x14 > 0 && x9 > 1 && x13 < 1 && x11 = 1 + x14 && x12 = 0
f_1724(x16, x17, x18, x19) -> f_1724(x16, x20, x21, x22) :|: x20 > 0 && x21 > 0 && x16 > 1 && x20 < 1 && x18 = 1 + x21 && x19 = 0
f_1398(x23, x24, x25, x26, x27) -> f_1724(x23, x28, x29, x30) :|: x27 < 0 && x29 > 0 && x24 < 0 && x27 < 1 && x26 < 0 && x28 < 0 && x23 > 1 && x28 < 1 && x25 = 1 + x29
f_1398(x31, x32, x33, x34, x35) -> f_1724(x31, x36, x37, x38) :|: x35 < 0 && x37 > 0 && x32 < 0 && x35 < 1 && x34 < 0 && x36 > 0 && x31 > 1 && x36 < 1 && x33 = 1 + x37
f_1398(x39, x40, x41, x42, x43) -> f_1724(x39, x44, x45, x46) :|: x43 > 0 && x45 > 0 && x40 < 0 && x43 < 1 && x42 < 0 && x44 < 0 && x39 > 1 && x44 < 1 && x41 = 1 + x45
f_1398(x47, x48, x49, x50, x51) -> f_1724(x47, x52, x53, x54) :|: x51 > 0 && x53 > 0 && x48 < 0 && x51 < 1 && x50 < 0 && x52 > 0 && x47 > 1 && x52 < 1 && x49 = 1 + x53

----------------------------------------

(74) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(75)
Obligation:
Rules:
f_1398(v16368:0, v16369:0, v16371:0, v16375:0, v16376:0) -> f_1398(v16368:0, v16376:0, v16371:0, v16375:0, 1 + v16376:0) :|: v16369:0 < 0 && v16376:0 < 0 && v16375:0 < 0 && v16376:0 < 1
f_1724(v21806:0, v21814:0, v21813:0, v28471:0) -> f_1398(v21806:0, v21814:0, v21813:0, v21814:0, 1 + v21814:0) :|: v28471:0 < 0 && v21814:0 < 1
f_1724(x9, x10, x11, x12) -> f_1724(x9, x13, x14, x15) :|: x13 < 0 && x14 > 0 && x9 > 1 && x13 < 1 && x11 = 1 + x14 && x12 = 0
f_1398(x23, x24, x25, x26, x27) -> f_1724(x23, x28, x29, x30) :|: x27 < 0 && x29 > 0 && x24 < 0 && x27 < 1 && x26 < 0 && x28 < 0 && x23 > 1 && x28 < 1 && x25 = 1 + x29
f_1724(x5, x6, x7, x8) -> f_1398(x5, x6, x7, x6, 1 + x6) :|: x8 > 0 && x6 < 1

----------------------------------------

(76) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(77)
Obligation:
Rules:
f_1398(x23:0, x24:0, sum~cons_1~x29:0, x26:0, x27:0) -> f_1724(x23:0, x28:0, x29:0, x30:0) :|: x23:0 > 1 && x28:0 < 1 && x28:0 < 0 && x26:0 < 0 && x27:0 < 1 && x24:0 < 0 && x29:0 > 0 && x27:0 < 0 && sum~cons_1~x29:0 = 1 + x29:0
f_1724(x9:0, x10:0, sum~cons_1~x14:0, cons_0) -> f_1724(x9:0, x13:0, x14:0, x15:0) :|: x9:0 > 1 && x13:0 < 1 && x14:0 > 0 && x13:0 < 0 && sum~cons_1~x14:0 = 1 + x14:0 && cons_0 = 0
f_1724(v21806:0:0, v21814:0:0, v21813:0:0, v28471:0:0) -> f_1398(v21806:0:0, v21814:0:0, v21813:0:0, v21814:0:0, 1 + v21814:0:0) :|: v28471:0:0 < 0 && v21814:0:0 < 1
f_1724(x5:0, x6:0, x7:0, x8:0) -> f_1398(x5:0, x6:0, x7:0, x6:0, 1 + x6:0) :|: x8:0 > 0 && x6:0 < 1
f_1398(v16368:0:0, v16369:0:0, v16371:0:0, v16375:0:0, v16376:0:0) -> f_1398(v16368:0:0, v16376:0:0, v16371:0:0, v16375:0:0, 1 + v16376:0:0) :|: v16375:0:0 < 0 && v16376:0:0 < 1 && v16376:0:0 < 0 && v16369:0:0 < 0

----------------------------------------

(78) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1398(x, x1, x2, x3, x4)] = -1 - x + x*x2 + x2 + x2^2
[f_1724(x5, x6, x7, x8)] = -1 - x5 + x5*x7 + x7 + x7^2

The following rules are decreasing:
f_1398(x23:0, x24:0, sum~cons_1~x29:0, x26:0, x27:0) -> f_1724(x23:0, x28:0, x29:0, x30:0) :|: x23:0 > 1 && x28:0 < 1 && x28:0 < 0 && x26:0 < 0 && x27:0 < 1 && x24:0 < 0 && x29:0 > 0 && x27:0 < 0 && sum~cons_1~x29:0 = 1 + x29:0
f_1724(x9:0, x10:0, sum~cons_1~x14:0, cons_0) -> f_1724(x9:0, x13:0, x14:0, x15:0) :|: x9:0 > 1 && x13:0 < 1 && x14:0 > 0 && x13:0 < 0 && sum~cons_1~x14:0 = 1 + x14:0 && cons_0 = 0
The following rules are bounded:
f_1398(x23:0, x24:0, sum~cons_1~x29:0, x26:0, x27:0) -> f_1724(x23:0, x28:0, x29:0, x30:0) :|: x23:0 > 1 && x28:0 < 1 && x28:0 < 0 && x26:0 < 0 && x27:0 < 1 && x24:0 < 0 && x29:0 > 0 && x27:0 < 0 && sum~cons_1~x29:0 = 1 + x29:0
f_1724(x9:0, x10:0, sum~cons_1~x14:0, cons_0) -> f_1724(x9:0, x13:0, x14:0, x15:0) :|: x9:0 > 1 && x13:0 < 1 && x14:0 > 0 && x13:0 < 0 && sum~cons_1~x14:0 = 1 + x14:0 && cons_0 = 0

----------------------------------------

(79)
Obligation:
Rules:
f_1724(v21806:0:0, v21814:0:0, v21813:0:0, v28471:0:0) -> f_1398(v21806:0:0, v21814:0:0, v21813:0:0, v21814:0:0, 1 + v21814:0:0) :|: v28471:0:0 < 0 && v21814:0:0 < 1
f_1724(x5:0, x6:0, x7:0, x8:0) -> f_1398(x5:0, x6:0, x7:0, x6:0, 1 + x6:0) :|: x8:0 > 0 && x6:0 < 1
f_1398(v16368:0:0, v16369:0:0, v16371:0:0, v16375:0:0, v16376:0:0) -> f_1398(v16368:0:0, v16376:0:0, v16371:0:0, v16375:0:0, 1 + v16376:0:0) :|: v16375:0:0 < 0 && v16376:0:0 < 1 && v16376:0:0 < 0 && v16369:0:0 < 0

----------------------------------------

(80) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(81)
Obligation:
Rules:
f_1398(v16368:0:0, v16369:0:0, v16371:0:0, v16375:0:0, v16376:0:0) -> f_1398(v16368:0:0, v16376:0:0, v16371:0:0, v16375:0:0, 1 + v16376:0:0) :|: v16375:0:0 < 0 && v16376:0:0 < 1 && v16376:0:0 < 0 && v16369:0:0 < 0

----------------------------------------

(82) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(83)
Obligation:
Rules:
f_1398(v16368:0:0:0, v16369:0:0:0, v16371:0:0:0, v16375:0:0:0, v16376:0:0:0) -> f_1398(v16368:0:0:0, v16376:0:0:0, v16371:0:0:0, v16375:0:0:0, 1 + v16376:0:0:0) :|: v16376:0:0:0 < 0 && v16369:0:0:0 < 0 && v16376:0:0:0 < 1 && v16375:0:0:0 < 0

----------------------------------------

(84) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1398(x1, x2, x3, x4, x5) -> f_1398(x2, x4, x5)

----------------------------------------

(85)
Obligation:
Rules:
f_1398(v16369:0:0:0, v16375:0:0:0, v16376:0:0:0) -> f_1398(v16376:0:0:0, v16375:0:0:0, 1 + v16376:0:0:0) :|: v16376:0:0:0 < 0 && v16369:0:0:0 < 0 && v16376:0:0:0 < 1 && v16375:0:0:0 < 0

----------------------------------------

(86) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1398(x, x1, x2)] = -x2

The following rules are decreasing:
f_1398(v16369:0:0:0, v16375:0:0:0, v16376:0:0:0) -> f_1398(v16376:0:0:0, v16375:0:0:0, 1 + v16376:0:0:0) :|: v16376:0:0:0 < 0 && v16369:0:0:0 < 0 && v16376:0:0:0 < 1 && v16375:0:0:0 < 0
The following rules are bounded:
f_1398(v16369:0:0:0, v16375:0:0:0, v16376:0:0:0) -> f_1398(v16376:0:0:0, v16375:0:0:0, 1 + v16376:0:0:0) :|: v16376:0:0:0 < 0 && v16369:0:0:0 < 0 && v16376:0:0:0 < 1 && v16375:0:0:0 < 0

----------------------------------------

(87)
YES

----------------------------------------

(88)
Obligation:
SCC
----------------------------------------

(89) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_1379(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15696, 0, v15698, v15699, v15700, v15701, v15702, v15703, 3, 2, 4) -> f_1388(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15696, 0, v15698, v15699, v15700, v15701, v15702, v15703, 3, 2, 4) :|: TRUE
f_1388(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15696, 0, v15698, v15699, v15700, v15701, v15702, v15703, 3, 2, 4) -> f_1397(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15696, 0, v15698, v15699, v15700, v15701, v15702, v15703, 3, 2, 4) :|: 0 = 0
f_1397(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15696, 0, v15698, v15699, v15700, v15701, v15702, v15703, 3, 2, 4) -> f_1403(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15696, 0, v15698, v15699, v15700, v15701, v15702, v15703, 3, 2, 4) :|: 0 = 0
f_1403(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15696, 0, v15698, v15699, v15700, v15701, v15702, v15703, 3, 2, 4) -> f_1410(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15696, 0, v15698, v15699, v15700, v15701, v15702, v15703, 3, 2, 4) :|: TRUE
f_1410(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15696, 0, v15698, v15699, v15700, v15701, v15702, v15703, 3, 2, 4) -> f_1418(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) :|: 0 = 0
f_1418(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) -> f_1427(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) :|: 0 < v15700 && 2 <= v15696 && 2 <= v15699 && 3 <= v15698 && 3 <= v15693
f_1427(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) -> f_1437(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) :|: 0 = 0
f_1437(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) -> f_1446(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) :|: 0 = 0
f_1446(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) -> f_1455(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) :|: TRUE
f_1455(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) -> f_1463(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) :|: 0 = 0
f_1463(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) -> f_1471(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) :|: 0 = 0
f_1471(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) -> f_1477(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) :|: TRUE
f_1477(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) -> f_1484(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v18728, v15696, v15701, v15702, v15703, 3, 2, 4) :|: TRUE
f_1484(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v18728, v15696, v15701, v15702, v15703, 3, 2, 4) -> f_1493(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) :|: v18728 = 0
f_1493(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) -> f_1502(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) :|: 0 = 0
f_1502(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) -> f_1511(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) :|: TRUE
f_1511(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15696, v15701, v15702, v15703, 3, 2, 4) -> f_1522(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15701, v15702, v15703, 3, 2, 4) :|: 0 = 0
f_1522(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v15701, v15702, v15703, 3, 2, 4) -> f_1535(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v19841, v15701, v15702, v15703, 3, 2, 4) :|: 1 + v19841 = v15700 && 0 <= v19841
f_1535(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v19841, v15701, v15702, v15703, 3, 2, 4) -> f_1547(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v19841, v15701, v15702, v15703, 3, 2, 4) :|: TRUE
f_1547(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v19841, v15701, v15702, v15703, 3, 2, 4) -> f_1558(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v19841, v15701, v15702, v15703, 3, 2, 4) :|: TRUE
f_1558(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v19841, v15701, v15702, v15703, 3, 2, 4) -> f_1366(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15700, 0, v15698, v15699, v19841, v15701, v15702, v15703, 3, 2, 4) :|: TRUE
f_1366(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15696, 0, v15698, v15699, v15700, v15701, v15702, v15703, 3, 2, 4) -> f_1379(v15689, v15690, v15691, v15692, v15693, v15694, 1, v15696, 0, v15698, v15699, v15700, v15701, v15702, v15703, 3, 2, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_1379(v15689:0, v15690:0, v15691:0, v15692:0, v15693:0, v15694:0, 1, v15696:0, 0, v15698:0, v15699:0, 1 + v19841:0, v15701:0, v15702:0, v15703:0, 3, 2, 4) -> f_1379(v15689:0, v15690:0, v15691:0, v15692:0, v15693:0, v15694:0, 1, 1 + v19841:0, 0, v15698:0, v15699:0, v19841:0, v15701:0, v15702:0, v15703:0, 3, 2, 4) :|: v15696:0 > 1 && v19841:0 > -1 && v15699:0 > 1 && v15698:0 > 2 && v15693:0 > 2
Filtered unneeded arguments:
   f_1379(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_1379(x5, x8, x10, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1379(v15693:0, v15696:0, v15698:0, v15699:0, sum~cons_1~v19841:0) -> f_1379(v15693:0, 1 + v19841:0, v15698:0, v15699:0, v19841:0) :|: v19841:0 > -1 && v15696:0 > 1 && v15699:0 > 1 && v15693:0 > 2 && v15698:0 > 2 && sum~cons_1~v19841:0 = 1 + v19841:0

----------------------------------------

(90)
Obligation:
Rules:
f_1379(v15693:0, v15696:0, v15698:0, v15699:0, sum~cons_1~v19841:0) -> f_1379(v15693:0, 1 + v19841:0, v15698:0, v15699:0, v19841:0) :|: v19841:0 > -1 && v15696:0 > 1 && v15699:0 > 1 && v15693:0 > 2 && v15698:0 > 2 && sum~cons_1~v19841:0 = 1 + v19841:0

----------------------------------------

(91) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(92)
Obligation:
Rules:
f_1379(v15693:0:0, v15696:0:0, v15698:0:0, v15699:0:0, sum~cons_1~v19841:0:0) -> f_1379(v15693:0:0, 1 + v19841:0:0, v15698:0:0, v15699:0:0, v19841:0:0) :|: v15693:0:0 > 2 && v15698:0:0 > 2 && v15699:0:0 > 1 && v15696:0:0 > 1 && v19841:0:0 > -1 && sum~cons_1~v19841:0:0 = 1 + v19841:0:0

----------------------------------------

(93) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1379(x, x1, x2, x3, x4)] = x4

The following rules are decreasing:
f_1379(v15693:0:0, v15696:0:0, v15698:0:0, v15699:0:0, sum~cons_1~v19841:0:0) -> f_1379(v15693:0:0, 1 + v19841:0:0, v15698:0:0, v15699:0:0, v19841:0:0) :|: v15693:0:0 > 2 && v15698:0:0 > 2 && v15699:0:0 > 1 && v15696:0:0 > 1 && v19841:0:0 > -1 && sum~cons_1~v19841:0:0 = 1 + v19841:0:0
The following rules are bounded:
f_1379(v15693:0:0, v15696:0:0, v15698:0:0, v15699:0:0, sum~cons_1~v19841:0:0) -> f_1379(v15693:0:0, 1 + v19841:0:0, v15698:0:0, v15699:0:0, v19841:0:0) :|: v15693:0:0 > 2 && v15698:0:0 > 2 && v15699:0:0 > 1 && v15696:0:0 > 1 && v19841:0:0 > -1 && sum~cons_1~v19841:0:0 = 1 + v19841:0:0

----------------------------------------

(94)
YES

----------------------------------------

(95)
Obligation:
SCC
----------------------------------------

(96) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_1258(v13890, v13891, v13892, v13893, v13894, 1, v13896, v13897, 0, v13899, v13900, v13901, v13902, 3, 4) -> f_1269(v13890, v13891, v13892, v13893, v13894, 1, v13896, v13897, 0, v13899, v13900, v13901, v13902, 3, 4) :|: TRUE
f_1269(v13890, v13891, v13892, v13893, v13894, 1, v13896, v13897, 0, v13899, v13900, v13901, v13902, 3, 4) -> f_1281(v13890, v13891, v13892, v13893, v13894, 1, v13896, v13897, 0, v13899, v13900, v13901, v13902, 3, 4) :|: 0 = 0
f_1281(v13890, v13891, v13892, v13893, v13894, 1, v13896, v13897, 0, v13899, v13900, v13901, v13902, 3, 4) -> f_1294(v13890, v13891, v13892, v13893, v13894, 1, v13896, v13897, 0, v13899, v13900, v13901, v13902, 3, 4) :|: 0 = 0
f_1294(v13890, v13891, v13892, v13893, v13894, 1, v13896, v13897, 0, v13899, v13900, v13901, v13902, 3, 4) -> f_1307(v13890, v13891, v13892, v13893, v13894, 1, v13896, v13897, 0, v13899, v13900, v13901, v13902, 3, 4) :|: TRUE
f_1307(v13890, v13891, v13892, v13893, v13894, 1, v13896, v13897, 0, v13899, v13900, v13901, v13902, 3, 4) -> f_1319(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 4) :|: 0 = 0
f_1319(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 4) -> f_1331(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) :|: 0 < v13899 && 2 <= v13896 && 2 <= v13894
f_1331(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) -> f_1344(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) :|: 0 = 0
f_1344(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) -> f_1357(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) :|: 0 = 0
f_1357(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) -> f_1371(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) :|: TRUE
f_1371(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) -> f_1384(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) :|: 0 = 0
f_1384(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) -> f_1393(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) :|: 0 = 0
f_1393(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) -> f_1399(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) :|: TRUE
f_1399(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) -> f_1405(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v16592, v13896, v13900, v13901, v13902, 3, 2, 4) :|: TRUE
f_1405(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v16592, v13896, v13900, v13901, v13902, 3, 2, 4) -> f_1413(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) :|: v16592 = 0
f_1413(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) -> f_1422(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) :|: 0 = 0
f_1422(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) -> f_1432(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) :|: TRUE
f_1432(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13896, v13900, v13901, v13902, 3, 2, 4) -> f_1442(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13900, v13901, v13902, 3, 2, 4) :|: 0 = 0
f_1442(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v13900, v13901, v13902, 3, 2, 4) -> f_1451(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v17695, v13900, v13901, v13902, 3, 2, 4) :|: 1 + v17695 = v13899 && 0 <= v17695
f_1451(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v17695, v13900, v13901, v13902, 3, 2, 4) -> f_1459(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v17695, v13900, v13901, v13902, 3, 2, 4) :|: TRUE
f_1459(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v17695, v13900, v13901, v13902, 3, 2, 4) -> f_1466(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v17695, v13900, v13901, v13902, 3, 2, 4) :|: TRUE
f_1466(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v17695, v13900, v13901, v13902, 3, 2, 4) -> f_1248(v13890, v13891, v13892, v13893, v13894, 1, v13899, v13897, 0, v17695, v13900, v13901, v13902, 3, 4) :|: TRUE
f_1248(v13890, v13891, v13892, v13893, v13894, 1, v13896, v13897, 0, v13899, v13900, v13901, v13902, 3, 4) -> f_1258(v13890, v13891, v13892, v13893, v13894, 1, v13896, v13897, 0, v13899, v13900, v13901, v13902, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_1258(v13890:0, v13891:0, v13892:0, v13893:0, v13894:0, 1, v13896:0, v13897:0, 0, 1 + v17695:0, v13900:0, v13901:0, v13902:0, 3, 4) -> f_1258(v13890:0, v13891:0, v13892:0, v13893:0, v13894:0, 1, 1 + v17695:0, v13897:0, 0, v17695:0, v13900:0, v13901:0, v13902:0, 3, 4) :|: v13896:0 > 1 && v17695:0 > -1 && v13894:0 > 1
Filtered unneeded arguments:
   f_1258(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_1258(x5, x7, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1258(v13894:0, v13896:0, sum~cons_1~v17695:0) -> f_1258(v13894:0, 1 + v17695:0, v17695:0) :|: v17695:0 > -1 && v13894:0 > 1 && v13896:0 > 1 && sum~cons_1~v17695:0 = 1 + v17695:0

----------------------------------------

(97)
Obligation:
Rules:
f_1258(v13894:0, v13896:0, sum~cons_1~v17695:0) -> f_1258(v13894:0, 1 + v17695:0, v17695:0) :|: v17695:0 > -1 && v13894:0 > 1 && v13896:0 > 1 && sum~cons_1~v17695:0 = 1 + v17695:0

----------------------------------------

(98) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(99)
Obligation:
Rules:
f_1258(v13894:0:0, v13896:0:0, sum~cons_1~v17695:0:0) -> f_1258(v13894:0:0, 1 + v17695:0:0, v17695:0:0) :|: v17695:0:0 > -1 && v13894:0:0 > 1 && v13896:0:0 > 1 && sum~cons_1~v17695:0:0 = 1 + v17695:0:0

----------------------------------------

(100) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1258(x, x1, x2)] = x2

The following rules are decreasing:
f_1258(v13894:0:0, v13896:0:0, sum~cons_1~v17695:0:0) -> f_1258(v13894:0:0, 1 + v17695:0:0, v17695:0:0) :|: v17695:0:0 > -1 && v13894:0:0 > 1 && v13896:0:0 > 1 && sum~cons_1~v17695:0:0 = 1 + v17695:0:0
The following rules are bounded:
f_1258(v13894:0:0, v13896:0:0, sum~cons_1~v17695:0:0) -> f_1258(v13894:0:0, 1 + v17695:0:0, v17695:0:0) :|: v17695:0:0 > -1 && v13894:0:0 > 1 && v13896:0:0 > 1 && sum~cons_1~v17695:0:0 = 1 + v17695:0:0

----------------------------------------

(101)
YES

----------------------------------------

(102)
Obligation:
SCC
----------------------------------------

(103) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 56 rulesP rules:
f_1023(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9027, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1035(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9221, v9027, v9028, v9029, v9030, 0, 3, 2, 4) :|: 1 + v9221 = v9020 && 0 <= v9221
f_1035(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9221, v9027, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1049(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9221, v9027, v9028, v9029, v9030, 0, 3, 2, 4) :|: TRUE
f_1049(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9221, v9027, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1062(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9221, v9647, v9028, v9029, v9030, 0, 3, 2, 4) :|: TRUE
f_1062(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9221, v9647, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1078(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9221, v9647, v9028, v9029, v9030, 0, 3, 2, 4) :|: TRUE
f_1078(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9221, v9647, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1091(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9221, v9647, v9028, v9029, v9030, 0, 3, 2, 4) :|: TRUE
f_1091(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9221, v9647, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1104(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9221, v9647, v9028, v9029, v9030, 0, 3, 2, 4) :|: TRUE
f_1104(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9221, v9647, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1118(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9221, v9647, v9028, v9029, v9030, 0, 3, 2, 4) :|: TRUE
f_1118(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9221, v9647, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1131(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9022, v9020, v9023, v9024, v9025, v9647, v9028, v9029, v9030, 0, 3, 2, 4) :|: 0 = 0
f_1131(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9022, v9020, v9023, v9024, v9025, v9647, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1140(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9022, v9020, v9023, v9024, v9025, v9647, v9028, v9029, v9030, 0, 3, 2, 4) :|: 0 < v9221 && 2 <= v9020 && 3 <= v9018
f_1140(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9022, v9020, v9023, v9024, v9025, v9647, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1150(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9022, v9020, v9023, v9024, v9025, v9647, v9028, v9029, v9030, 0, 3, 2, 4) :|: 0 = 0
f_1150(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9022, v9020, v9023, v9024, v9025, v9647, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1161(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9022, v9020, v9023, v9024, v9025, v9647, v9028, v9029, v9030, 0, 3, 2, 4) :|: TRUE
f_1161(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9022, v9020, v9023, v9024, v9025, v9647, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1173(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9020, v9023, v9024, v9025, v9028, v9029, v9030, 0, 3, 2, 4) :|: 0 = 0
f_1173(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9020, v9023, v9024, v9025, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1185(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9020, v9023, v9024, v9025, v9028, v9029, v9030, 0, 3, 2, 4) :|: 0 < v9647
f_1185(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9020, v9023, v9024, v9025, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1198(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9020, v9023, v9024, v9025, v9028, v9029, v9030, 0, 3, 2, 4) :|: 0 = 0
f_1198(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9020, v9023, v9024, v9025, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1210(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9020, v9023, v9024, v9025, v9028, v9029, v9030, 0, 3, 2, 4) :|: 0 = 0
f_1210(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9020, v9023, v9024, v9025, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1221(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9020, v9023, v9024, v9025, v9028, v9029, v9030, 0, 3, 2, 4) :|: TRUE
f_1221(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9020, v9023, v9024, v9025, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1233(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9023, v9024, v9025, v9020, v9028, v9029, v9030, 0, 3, 2, 4) :|: 0 = 0
f_1233(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9023, v9024, v9025, v9020, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1243(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9023, v9024, v9025, v9020, v9028, v9029, v9030, 0, 3, 2, 4) :|: 0 = 0
f_1243(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9023, v9024, v9025, v9020, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1255(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9023, v9024, v9025, v9020, v9028, v9029, v9030, 0, 3, 2, 4) :|: TRUE
f_1255(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v9023, v9024, v9025, v9020, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1266(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v14170, v9024, v9025, v9020, v9028, v9029, v9030, 0, 3, 2, 4) :|: TRUE
f_1266(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v14170, v9024, v9025, v9020, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1279(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v14170, v9024, v9025, v9020, v9028, v9029, v9030, 0, 3, 2, 4) :|: v14170 != 0
f_1266(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v14170, v9024, v9025, v9020, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1280(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, 0, v9024, v9025, v9020, v9028, v9029, v9030, 3, 2, 4) :|: v14170 = 0
f_1279(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v14170, v9024, v9025, v9020, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1292(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v14170, v9024, v9025, v9020, v9028, v9029, v9030, 0, 3, 2, 4) :|: 0 = 0
f_1292(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v14170, v9024, v9025, v9020, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1305(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v14170, v9024, v9025, v9020, v9028, v9029, v9030, 0, 3, 2, 4) :|: TRUE
f_1305(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v14170, v9024, v9025, v9020, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1011(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, v14170, v9024, v9025, v9020, v9647, v9028, v9029, v9030, 0, 3, 2, 4) :|: TRUE
f_1011(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9026, v9027, v9028, v9029, v9030, 0, 3, 2, 4) -> f_1023(v9015, v9016, v9017, v9018, v9019, v9020, 1, v9022, v9023, v9024, v9025, v9027, v9028, v9029, v9030, 0, 3, 2, 4) :|: 0 = 0
f_1280(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, 0, v9024, v9025, v9020, v9028, v9029, v9030, 3, 2, 4) -> f_1293(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, 0, v9024, v9025, v9020, v9028, v9029, v9030, 3, 2, 4) :|: 0 = 0
f_1293(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, 0, v9024, v9025, v9020, v9028, v9029, v9030, 3, 2, 4) -> f_1306(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, 0, v9024, v9025, v9020, v9028, v9029, v9030, 3, 2, 4) :|: TRUE
f_1306(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, 0, v9024, v9025, v9020, v9028, v9029, v9030, 3, 2, 4) -> f_1013(v9015, v9016, v9017, v9018, v9019, v9221, 1, v9647, 0, v9024, v9025, v9020, v9647, v9028, v9029, v9030, 3, 2, 4) :|: TRUE
f_1013(v9077, v9078, v9079, v9080, v9081, v9082, 1, v9084, 0, v9086, v9087, v9088, v9089, v9090, v9091, v9092, 3, 2, 4) -> f_1024(v9077, v9078, v9079, v9080, v9081, v9082, 1, v9084, 0, v9087, v9088, v9089, v9090, v9091, v9092, 3, 2, 4) :|: 0 = 0
f_1024(v9077, v9078, v9079, v9080, v9081, v9082, 1, v9084, 0, v9087, v9088, v9089, v9090, v9091, v9092, 3, 2, 4) -> f_1036(v9077, v9078, v9079, v9080, v9081, v9082, 1, v9084, 0, v9222, v9088, v9089, v9090, v9091, v9092, 3, 2, 4) :|: 1 + v9222 = v9084 && 0 <= v9222
f_1036(v9077, v9078, v9079, v9080, v9081, v9082, 1, v9084, 0, v9222, v9088, v9089, v9090, v9091, v9092, 3, 2, 4) -> f_1050(v9077, v9078, v9079, v9080, v9081, v9082, 1, v9084, 0, v9222, v9088, v9089, v9090, v9091, v9092, 3, 2, 4) :|: TRUE
f_1050(v9077, v9078, v9079, v9080, v9081, v9082, 1, v9084, 0, v9222, v9088, v9089, v9090, v9091, v9092, 3, 2, 4) -> f_1063(v9077, v9078, v9079, v9080, v9081, v9082, 1, v9084, 0, v9222, v9088, v9089, v9090, v9091, v9092, 3, 2, 4) :|: TRUE
f_1063(v9077, v9078, v9079, v9080, v9081, v9082, 1, v9084, 0, v9222, v9088, v9089, v9090, v9091, v9092, 3, 2, 4) -> f_1064(v9077, v9078, v9079, v9080, v9081, v9082, 1, v9084, 0, v9088, v9089, v9222, v9090, v9091, v9092, 3, 2, 4) :|: TRUE
f_1064(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9691, 0, v9693, v9694, v9695, v9696, v9697, v9698, 3, 2, 4) -> f_1079(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9691, 0, v9693, v9694, v9695, v9696, v9697, v9698, 3, 2, 4) :|: TRUE
f_1079(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9691, 0, v9693, v9694, v9695, v9696, v9697, v9698, 3, 2, 4) -> f_1092(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9691, 0, v9693, v9694, v9695, v9696, v9697, v9698, 3, 2, 4) :|: TRUE
f_1092(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9691, 0, v9693, v9694, v9695, v9696, v9697, v9698, 3, 2, 4) -> f_1105(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9691, 0, v9693, v9694, v9695, v9696, v9697, v9698, 3, 2, 4) :|: 0 = 0
f_1105(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9691, 0, v9693, v9694, v9695, v9696, v9697, v9698, 3, 2, 4) -> f_1119(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9691, 0, v9693, v9694, v9695, v9696, v9697, v9698, 3, 2, 4) :|: 0 = 0
f_1119(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9691, 0, v9693, v9694, v9695, v9696, v9697, v9698, 3, 2, 4) -> f_1132(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9691, 0, v9693, v9694, v9695, v9696, v9697, v9698, 3, 2, 4) :|: TRUE
f_1132(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9691, 0, v9693, v9694, v9695, v9696, v9697, v9698, 3, 2, 4) -> f_1142(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) :|: 0 = 0
f_1142(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) -> f_1152(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) :|: 0 < v9695 && 2 <= v9691 && 2 <= v9694
f_1152(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) -> f_1163(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) :|: 0 = 0
f_1163(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) -> f_1175(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) :|: 0 = 0
f_1175(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) -> f_1187(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) :|: TRUE
f_1187(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) -> f_1200(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) :|: 0 = 0
f_1200(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) -> f_1212(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) :|: 0 = 0
f_1212(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) -> f_1223(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) :|: TRUE
f_1223(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) -> f_1234(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, v13636, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) :|: TRUE
f_1234(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, v13636, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) -> f_1244(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, v13636, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) :|: v13636 != 0
f_1234(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, v13636, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) -> f_1245(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) :|: v13636 = 0
f_1244(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, v13636, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) -> f_1256(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, v13636, v9693, v9694, v9691, v9696, v9697, v9698, 0, 3, 2, 4) :|: 0 = 0
f_1256(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, v13636, v9693, v9694, v9691, v9696, v9697, v9698, 0, 3, 2, 4) -> f_1267(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, v13636, v9693, v9694, v9691, v9696, v9697, v9698, 0, 3, 2, 4) :|: TRUE
f_1267(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, v13636, v9693, v9694, v9691, v9696, v9697, v9698, 0, 3, 2, 4) -> f_1011(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, v13636, v9691, v9695, v9693, v9694, v9696, v9697, v9698, 0, 3, 2, 4) :|: TRUE
f_1245(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) -> f_1257(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) :|: 0 = 0
f_1257(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) -> f_1268(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) :|: TRUE
f_1268(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9693, v9694, v9691, v9696, v9697, v9698, 3, 2, 4) -> f_1013(v9684, v9685, v9686, v9687, v9688, v9689, 1, v9695, 0, v9691, v9695, v9693, v9694, v9696, v9697, v9698, 3, 2, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_1023(v9015:0, v9016:0, v9017:0, v9018:0, v9019:0, 1 + v9221:0, 1, v9022:0, v9023:0, v9024:0, v9025:0, v9027:0, v9028:0, v9029:0, v9030:0, 0, 3, 2, 4) -> f_1234(v9015:0, v9016:0, v9017:0, v9018:0, v9019:0, v9221:0, 1, v9222:0, v13636:0, 0, 1 + v9221:0, 1 + v9222:0, 1 + v9222:0, v9028:0, v9029:0, v9030:0, 3, 2, 4) :|: v9221:0 > 0 && v9222:0 > 0 && v9018:0 > 2
f_1234(v9684:0, v9685:0, v9686:0, v9687:0, v9688:0, v9689:0, 1, 1 + v9222:0, 0, 0, v9693:0, v9694:0, v9691:0, v9696:0, v9697:0, v9698:0, 3, 2, 4) -> f_1234(v9684:0, v9685:0, v9686:0, v9687:0, v9688:0, v9689:0, 1, v9222:0, v13636:1, 0, v9693:0, v9694:0, 1 + v9222:0, v9696:0, v9697:0, v9698:0, 3, 2, 4) :|: v9222:0 > 0 && v9694:0 > 1
f_1234(v9684:0, v9685:0, v9686:0, v9687:0, v9688:0, v9689:0, 1, v9695:0, v13636:0, 0, v9693:0, v9694:0, v9691:0, v9696:0, v9697:0, v9698:0, 3, 2, 4) -> f_1023(v9684:0, v9685:0, v9686:0, v9687:0, v9688:0, v9689:0, 1, v9695:0, v13636:0, v9691:0, v9695:0, v9694:0, v9696:0, v9697:0, v9698:0, 0, 3, 2, 4) :|: v13636:0 < 0
f_1234(v9684:0, v9685:0, v9686:0, v9687:0, v9688:0, v9689:0, 1, v9695:0, v13636:0, 0, v9693:0, v9694:0, v9691:0, v9696:0, v9697:0, v9698:0, 3, 2, 4) -> f_1023(v9684:0, v9685:0, v9686:0, v9687:0, v9688:0, v9689:0, 1, v9695:0, v13636:0, v9691:0, v9695:0, v9694:0, v9696:0, v9697:0, v9698:0, 0, 3, 2, 4) :|: v13636:0 > 0
f_1023(v9015:0, v9016:0, v9017:0, v9018:0, v9019:0, 1 + v9221:0, 1, v9022:0, v9023:0, v9024:0, v9025:0, v9027:0, v9028:0, v9029:0, v9030:0, 0, 3, 2, 4) -> f_1023(v9015:0, v9016:0, v9017:0, v9018:0, v9019:0, v9221:0, 1, v9647:0, v14170:0, v9024:0, v9025:0, v9647:0, v9028:0, v9029:0, v9030:0, 0, 3, 2, 4) :|: v9221:0 > 0 && v9018:0 > 2 && v14170:0 < 0 && v9647:0 > 0
f_1023(v9015:0, v9016:0, v9017:0, v9018:0, v9019:0, 1 + v9221:0, 1, v9022:0, v9023:0, v9024:0, v9025:0, v9027:0, v9028:0, v9029:0, v9030:0, 0, 3, 2, 4) -> f_1023(v9015:0, v9016:0, v9017:0, v9018:0, v9019:0, v9221:0, 1, v9647:0, v14170:0, v9024:0, v9025:0, v9647:0, v9028:0, v9029:0, v9030:0, 0, 3, 2, 4) :|: v9221:0 > 0 && v9018:0 > 2 && v14170:0 > 0 && v9647:0 > 0
Filtered unneeded arguments:
   f_1023(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_1023(x4, x6)
   f_1234(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_1234(x4, x6, x8, x9, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_1023(v9018:0, sum~cons_1~v9221:0) -> f_1234(v9018:0, v9221:0, v9222:0, v13636:0, 1 + v9222:0) :|: v9222:0 > 0 && v9018:0 > 2 && v9221:0 > 0 && sum~cons_1~v9221:0 = 1 + v9221:0
f_1234(v9687:0, v9689:0, sum~cons_1~v9222:0, cons_0, v9694:0) -> f_1234(v9687:0, v9689:0, v9222:0, v13636:1, v9694:0) :|: v9222:0 > 0 && v9694:0 > 1 && sum~cons_1~v9222:0 = 1 + v9222:0 && cons_0 = 0
f_1234(v9687:0, v9689:0, v9695:0, v13636:0, v9694:0) -> f_1023(v9687:0, v9689:0) :|: v13636:0 < 0
f_1234(v9687:0, v9689:0, v9695:0, v13636:0, v9694:0) -> f_1023(v9687:0, v9689:0) :|: v13636:0 > 0
f_1023(v9018:0, sum~cons_1~v9221:0) -> f_1023(v9018:0, v9221:0) :|: v9221:0 > 0 && v9018:0 > 2 && sum~cons_1~v9221:0 = 1 + v9221:0

----------------------------------------

(104)
Obligation:
Rules:
f_1023(v9018:0, sum~cons_1~v9221:0) -> f_1234(v9018:0, v9221:0, v9222:0, v13636:0, 1 + v9222:0) :|: v9222:0 > 0 && v9018:0 > 2 && v9221:0 > 0 && sum~cons_1~v9221:0 = 1 + v9221:0
f_1234(x, x1, x2, x3, x4) -> f_1234(x, x1, x5, x6, x4) :|: x5 > 0 && x4 > 1 && x2 = 1 + x5 && x3 = 0
f_1234(x7, x8, x9, x10, x11) -> f_1023(x7, x8) :|: x10 < 0
f_1234(x12, x13, x14, x15, x16) -> f_1023(x12, x13) :|: x15 > 0
f_1023(x17, x18) -> f_1023(x17, x19) :|: x19 > 0 && x17 > 2 && x18 = 1 + x19

----------------------------------------

(105) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(106)
Obligation:
Rules:
f_1234(x:0, x1:0, sum~cons_1~x5:0, cons_0, x4:0) -> f_1234(x:0, x1:0, x5:0, x6:0, x4:0) :|: x5:0 > 0 && x4:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0 && cons_0 = 0
f_1023(v9018:0:0, sum~cons_1~v9221:0:0) -> f_1234(v9018:0:0, v9221:0:0, v9222:0:0, v13636:0:0, 1 + v9222:0:0) :|: v9222:0:0 > 0 && v9018:0:0 > 2 && v9221:0:0 > 0 && sum~cons_1~v9221:0:0 = 1 + v9221:0:0
f_1234(x7:0, x8:0, x9:0, x10:0, x11:0) -> f_1023(x7:0, x8:0) :|: x10:0 < 0
f_1023(x17:0, sum~cons_1~x19:0) -> f_1023(x17:0, x19:0) :|: x19:0 > 0 && x17:0 > 2 && sum~cons_1~x19:0 = 1 + x19:0
f_1234(x12:0, x13:0, x14:0, x15:0, x16:0) -> f_1023(x12:0, x13:0) :|: x15:0 > 0

----------------------------------------

(107) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1234(x, x1, x2, x3, x4)] = -1 + x + x1
[f_1023(x5, x6)] = -1 + x5 + x6

The following rules are decreasing:
f_1023(v9018:0:0, sum~cons_1~v9221:0:0) -> f_1234(v9018:0:0, v9221:0:0, v9222:0:0, v13636:0:0, 1 + v9222:0:0) :|: v9222:0:0 > 0 && v9018:0:0 > 2 && v9221:0:0 > 0 && sum~cons_1~v9221:0:0 = 1 + v9221:0:0
f_1023(x17:0, sum~cons_1~x19:0) -> f_1023(x17:0, x19:0) :|: x19:0 > 0 && x17:0 > 2 && sum~cons_1~x19:0 = 1 + x19:0
The following rules are bounded:
f_1023(v9018:0:0, sum~cons_1~v9221:0:0) -> f_1234(v9018:0:0, v9221:0:0, v9222:0:0, v13636:0:0, 1 + v9222:0:0) :|: v9222:0:0 > 0 && v9018:0:0 > 2 && v9221:0:0 > 0 && sum~cons_1~v9221:0:0 = 1 + v9221:0:0
f_1023(x17:0, sum~cons_1~x19:0) -> f_1023(x17:0, x19:0) :|: x19:0 > 0 && x17:0 > 2 && sum~cons_1~x19:0 = 1 + x19:0

----------------------------------------

(108)
Obligation:
Rules:
f_1234(x:0, x1:0, sum~cons_1~x5:0, cons_0, x4:0) -> f_1234(x:0, x1:0, x5:0, x6:0, x4:0) :|: x5:0 > 0 && x4:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0 && cons_0 = 0
f_1234(x7:0, x8:0, x9:0, x10:0, x11:0) -> f_1023(x7:0, x8:0) :|: x10:0 < 0
f_1234(x12:0, x13:0, x14:0, x15:0, x16:0) -> f_1023(x12:0, x13:0) :|: x15:0 > 0

----------------------------------------

(109) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(110)
Obligation:
Rules:
f_1234(x:0, x1:0, sum~cons_1~x5:0, cons_0, x4:0) -> f_1234(x:0, x1:0, x5:0, x6:0, x4:0) :|: x5:0 > 0 && x4:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0 && cons_0 = 0

----------------------------------------

(111) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(112)
Obligation:
Rules:
f_1234(x:0:0, x1:0:0, sum~cons_1~x5:0:0, cons_0, x4:0:0) -> f_1234(x:0:0, x1:0:0, x5:0:0, x6:0:0, x4:0:0) :|: x5:0:0 > 0 && x4:0:0 > 1 && sum~cons_1~x5:0:0 = 1 + x5:0:0 && cons_0 = 0

----------------------------------------

(113) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1234(x1, x2, x3, x4, x5) -> f_1234(x3, x4, x5)

----------------------------------------

(114)
Obligation:
Rules:
f_1234(sum~cons_1~x5:0:0, cons_0, x4:0:0) -> f_1234(x5:0:0, x6:0:0, x4:0:0) :|: x5:0:0 > 0 && x4:0:0 > 1 && sum~cons_1~x5:0:0 = 1 + x5:0:0 && cons_0 = 0

----------------------------------------

(115) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1234(x, x1, x2)] = x

The following rules are decreasing:
f_1234(sum~cons_1~x5:0:0, cons_0, x4:0:0) -> f_1234(x5:0:0, x6:0:0, x4:0:0) :|: x5:0:0 > 0 && x4:0:0 > 1 && sum~cons_1~x5:0:0 = 1 + x5:0:0 && cons_0 = 0
The following rules are bounded:
f_1234(sum~cons_1~x5:0:0, cons_0, x4:0:0) -> f_1234(x5:0:0, x6:0:0, x4:0:0) :|: x5:0:0 > 0 && x4:0:0 > 1 && sum~cons_1~x5:0:0 = 1 + x5:0:0 && cons_0 = 0

----------------------------------------

(116)
YES

----------------------------------------

(117)
Obligation:
SCC
----------------------------------------

(118) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_651(v2154, v2155, v2156, v2157, v2158, v2159, 1, v2161, 0, v2163, v2164, v2165, v2166, v2167, 3, 4) -> f_656(v2154, v2155, v2156, v2157, v2158, v2159, 1, v2161, 0, v2163, v2164, v2165, v2166, v2167, 3, 4) :|: TRUE
f_656(v2154, v2155, v2156, v2157, v2158, v2159, 1, v2161, 0, v2163, v2164, v2165, v2166, v2167, 3, 4) -> f_661(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2161, v2159, 0, v2163, v2165, v2166, v2167, 3, 4) :|: 0 = 0
f_661(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2161, v2159, 0, v2163, v2165, v2166, v2167, 3, 4) -> f_667(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2161, v2159, 0, v2163, v2165, v2166, v2167, 3, 4) :|: v2164 != 0
f_667(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2161, v2159, 0, v2163, v2165, v2166, v2167, 3, 4) -> f_675(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2161, v2159, 0, v2163, v2165, v2166, v2167, 3, 4) :|: 0 = 0
f_675(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2161, v2159, 0, v2163, v2165, v2166, v2167, 3, 4) -> f_683(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2161, v2159, 0, v2163, v2165, v2166, v2167, 3, 4) :|: TRUE
f_683(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2161, v2159, 0, v2163, v2165, v2166, v2167, 3, 4) -> f_691(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, v2159, 0, v2161, v2165, v2166, v2167, 3, 4) :|: 0 = 0
f_691(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, v2159, 0, v2161, v2165, v2166, v2167, 3, 4) -> f_701(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, v2159, 0, v2161, v2165, v2166, v2167, 3, 2, 4) :|: 0 < v2163 && 2 <= v2161 && 2 <= v2158
f_701(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, v2159, 0, v2161, v2165, v2166, v2167, 3, 2, 4) -> f_711(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, v2159, 0, v2161, v2165, v2166, v2167, 3, 2, 4) :|: 0 = 0
f_711(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, v2159, 0, v2161, v2165, v2166, v2167, 3, 2, 4) -> f_720(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, v2159, 0, v2161, v2165, v2166, v2167, 3, 2, 4) :|: 0 = 0
f_720(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, v2159, 0, v2161, v2165, v2166, v2167, 3, 2, 4) -> f_729(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, v2159, 0, v2161, v2165, v2166, v2167, 3, 2, 4) :|: TRUE
f_729(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, v2159, 0, v2161, v2165, v2166, v2167, 3, 2, 4) -> f_738(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2161, v2165, v2166, v2167, 3, 2, 4) :|: 0 = 0
f_738(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2161, v2165, v2166, v2167, 3, 2, 4) -> f_747(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2161, v2165, v2166, v2167, 3, 2, 4) :|: v2164 <= 0
f_747(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2161, v2165, v2166, v2167, 3, 2, 4) -> f_756(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2161, v2165, v2166, v2167, 3, 2, 4) :|: 0 = 0
f_756(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2161, v2165, v2166, v2167, 3, 2, 4) -> f_765(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2161, v2165, v2166, v2167, 3, 2, 4) :|: TRUE
f_765(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2161, v2165, v2166, v2167, 3, 2, 4) -> f_773(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2896, v2161, v2165, v2166, v2167, 3, 2, 4) :|: TRUE
f_773(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2896, v2161, v2165, v2166, v2167, 3, 2, 4) -> f_784(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2161, v2165, v2166, v2167, 3, 2, 4) :|: v2896 = 0
f_784(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2161, v2165, v2166, v2167, 3, 2, 4) -> f_795(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2161, v2165, v2166, v2167, 3, 2, 4) :|: 0 = 0
f_795(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2161, v2165, v2166, v2167, 3, 2, 4) -> f_806(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2161, v2165, v2166, v2167, 3, 2, 4) :|: TRUE
f_806(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2161, v2165, v2166, v2167, 3, 2, 4) -> f_818(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2165, v2166, v2167, 3, 2, 4) :|: 0 = 0
f_818(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v2165, v2166, v2167, 3, 2, 4) -> f_831(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v3556, v2165, v2166, v2167, 3, 2, 4) :|: 1 + v3556 = v2163 && 0 <= v3556
f_831(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v3556, v2165, v2166, v2167, 3, 2, 4) -> f_844(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v3556, v2165, v2166, v2167, 3, 2, 4) :|: TRUE
f_844(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v3556, v2165, v2166, v2167, 3, 2, 4) -> f_855(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v3556, v4459, v2165, v2166, v2167, 3, 2, 4) :|: TRUE
f_855(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v3556, v4459, v2165, v2166, v2167, 3, 2, 4) -> f_866(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v3556, v4459, v2165, v2166, v2167, 3, 2, 4) :|: TRUE
f_866(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v3556, v4459, v2165, v2166, v2167, 3, 2, 4) -> f_875(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v3556, v4459, v2165, v2166, v2167, 3, 2, 4) :|: TRUE
f_875(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v3556, v4459, v2165, v2166, v2167, 3, 2, 4) -> f_647(v2154, v2155, v2156, v2157, v2158, v2164, 1, v2163, 0, v3556, v4459, v2165, v2166, v2167, 3, 4) :|: TRUE
f_647(v2154, v2155, v2156, v2157, v2158, v2159, 1, v2161, 0, v2163, v2164, v2165, v2166, v2167, 3, 4) -> f_651(v2154, v2155, v2156, v2157, v2158, v2159, 1, v2161, 0, v2163, v2164, v2165, v2166, v2167, 3, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_651(v2154:0, v2155:0, v2156:0, v2157:0, v2158:0, v2159:0, 1, v2161:0, 0, 1 + v3556:0, v2164:0, v2165:0, v2166:0, v2167:0, 3, 4) -> f_651(v2154:0, v2155:0, v2156:0, v2157:0, v2158:0, v2164:0, 1, 1 + v3556:0, 0, v3556:0, v4459:0, v2165:0, v2166:0, v2167:0, 3, 4) :|: v2164:0 < 0 && v2161:0 > 1 && v3556:0 > -1 && v2158:0 > 1 && v2164:0 < 1
f_651(v2154:0, v2155:0, v2156:0, v2157:0, v2158:0, v2159:0, 1, v2161:0, 0, 1 + v3556:0, v2164:0, v2165:0, v2166:0, v2167:0, 3, 4) -> f_651(v2154:0, v2155:0, v2156:0, v2157:0, v2158:0, v2164:0, 1, 1 + v3556:0, 0, v3556:0, v4459:0, v2165:0, v2166:0, v2167:0, 3, 4) :|: v2164:0 > 0 && v2161:0 > 1 && v3556:0 > -1 && v2158:0 > 1 && v2164:0 < 1
Filtered unneeded arguments:
   f_651(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_651(x5, x8, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_651(v2158:0, v2161:0, sum~cons_1~v3556:0, v2164:0) -> f_651(v2158:0, 1 + v3556:0, v3556:0, v4459:0) :|: v2161:0 > 1 && v2164:0 < 0 && v3556:0 > -1 && v2164:0 < 1 && v2158:0 > 1 && sum~cons_1~v3556:0 = 1 + v3556:0
f_651(v2158:0, v2161:0, sum~cons_1~v3556:0, v2164:0) -> f_651(v2158:0, 1 + v3556:0, v3556:0, v4459:0) :|: v2161:0 > 1 && v2164:0 > 0 && v3556:0 > -1 && v2164:0 < 1 && v2158:0 > 1 && sum~cons_1~v3556:0 = 1 + v3556:0

----------------------------------------

(119)
Obligation:
Rules:
f_651(v2158:0, v2161:0, sum~cons_1~v3556:0, v2164:0) -> f_651(v2158:0, 1 + v3556:0, v3556:0, v4459:0) :|: v2161:0 > 1 && v2164:0 < 0 && v3556:0 > -1 && v2164:0 < 1 && v2158:0 > 1 && sum~cons_1~v3556:0 = 1 + v3556:0
f_651(x, x1, x2, x3) -> f_651(x, 1 + x4, x4, x5) :|: x1 > 1 && x3 > 0 && x4 > -1 && x3 < 1 && x > 1 && x2 = 1 + x4

----------------------------------------

(120) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(121)
Obligation:
Rules:
f_651(v2158:0, v2161:0, sum~cons_1~v3556:0, v2164:0) -> f_651(v2158:0, 1 + v3556:0, v3556:0, v4459:0) :|: v2161:0 > 1 && v2164:0 < 0 && v3556:0 > -1 && v2164:0 < 1 && v2158:0 > 1 && sum~cons_1~v3556:0 = 1 + v3556:0

----------------------------------------

(122) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(123)
Obligation:
Rules:
f_651(v2158:0:0, v2161:0:0, sum~cons_1~v3556:0:0, v2164:0:0) -> f_651(v2158:0:0, 1 + v3556:0:0, v3556:0:0, v4459:0:0) :|: v2164:0:0 < 1 && v2158:0:0 > 1 && v3556:0:0 > -1 && v2164:0:0 < 0 && v2161:0:0 > 1 && sum~cons_1~v3556:0:0 = 1 + v3556:0:0

----------------------------------------

(124) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_651(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_651(v2158:0:0, v2161:0:0, sum~cons_1~v3556:0:0, v2164:0:0) -> f_651(v2158:0:0, 1 + v3556:0:0, v3556:0:0, v4459:0:0) :|: v2164:0:0 < 1 && v2158:0:0 > 1 && v3556:0:0 > -1 && v2164:0:0 < 0 && v2161:0:0 > 1 && sum~cons_1~v3556:0:0 = 1 + v3556:0:0
The following rules are bounded:
f_651(v2158:0:0, v2161:0:0, sum~cons_1~v3556:0:0, v2164:0:0) -> f_651(v2158:0:0, 1 + v3556:0:0, v3556:0:0, v4459:0:0) :|: v2164:0:0 < 1 && v2158:0:0 > 1 && v3556:0:0 > -1 && v2164:0:0 < 0 && v2161:0:0 > 1 && sum~cons_1~v3556:0:0 = 1 + v3556:0:0

----------------------------------------

(125)
YES

----------------------------------------

(126)
Obligation:
SCC
----------------------------------------

(127) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 25 rulesP rules:
f_630(v1819, v1820, v1821, v1822, v1823, v1824, 1, v1826, v1827, v1828, v1829, v1830, v1831, v1832, 0, 3, 4) -> f_639(v1819, v1820, v1821, v1822, v1823, v1824, 1, v1826, v1827, v1828, v1829, v1830, v1831, v1832, 0, 3, 4) :|: TRUE
f_639(v1819, v1820, v1821, v1822, v1823, v1824, 1, v1826, v1827, v1828, v1829, v1830, v1831, v1832, 0, 3, 4) -> f_648(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1826, v1824, v1827, v1829, v1830, v1831, v1832, 0, 3, 4) :|: 0 = 0
f_648(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1826, v1824, v1827, v1829, v1830, v1831, v1832, 0, 3, 4) -> f_652(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1826, v1824, v1827, v1829, v1830, v1831, v1832, 0, 3, 2, 4) :|: 0 < v1828 && 2 <= v1824 && 2 <= v1822
f_652(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1826, v1824, v1827, v1829, v1830, v1831, v1832, 0, 3, 2, 4) -> f_657(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1826, v1824, v1827, v1829, v1830, v1831, v1832, 0, 3, 2, 4) :|: 0 = 0
f_657(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1826, v1824, v1827, v1829, v1830, v1831, v1832, 0, 3, 2, 4) -> f_662(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1826, v1824, v1827, v1829, v1830, v1831, v1832, 0, 3, 2, 4) :|: TRUE
f_662(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1826, v1824, v1827, v1829, v1830, v1831, v1832, 0, 3, 2, 4) -> f_669(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1824, v1827, v1830, v1831, v1832, 0, 3, 2, 4) :|: 0 = 0
f_669(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1824, v1827, v1830, v1831, v1832, 0, 3, 2, 4) -> f_677(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1824, v1827, v1830, v1831, v1832, 0, 3, 2, 4) :|: 0 < v1829
f_677(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1824, v1827, v1830, v1831, v1832, 0, 3, 2, 4) -> f_685(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1824, v1827, v1830, v1831, v1832, 0, 3, 2, 4) :|: 0 = 0
f_685(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1824, v1827, v1830, v1831, v1832, 0, 3, 2, 4) -> f_693(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1824, v1827, v1830, v1831, v1832, 0, 3, 2, 4) :|: 0 = 0
f_693(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1824, v1827, v1830, v1831, v1832, 0, 3, 2, 4) -> f_703(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1824, v1827, v1830, v1831, v1832, 0, 3, 2, 4) :|: TRUE
f_703(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1824, v1827, v1830, v1831, v1832, 0, 3, 2, 4) -> f_713(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1827, v1824, v1830, v1831, v1832, 0, 3, 2, 4) :|: 0 = 0
f_713(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1827, v1824, v1830, v1831, v1832, 0, 3, 2, 4) -> f_722(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1827, v1824, v1830, v1831, v1832, 0, 3, 2, 4) :|: 0 = 0
f_722(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1827, v1824, v1830, v1831, v1832, 0, 3, 2, 4) -> f_731(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1827, v1824, v1830, v1831, v1832, 0, 3, 2, 4) :|: TRUE
f_731(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v1827, v1824, v1830, v1831, v1832, 0, 3, 2, 4) -> f_739(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v1824, v1830, v1831, v1832, 0, 3, 2, 4) :|: TRUE
f_739(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v1824, v1830, v1831, v1832, 0, 3, 2, 4) -> f_748(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v1824, v1830, v1831, v1832, 0, 3, 2, 4) :|: v2568 != 0
f_748(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v1824, v1830, v1831, v1832, 0, 3, 2, 4) -> f_757(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v1824, v1830, v1831, v1832, 0, 3, 2, 4) :|: 0 = 0
f_757(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v1824, v1830, v1831, v1832, 0, 3, 2, 4) -> f_766(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v1824, v1830, v1831, v1832, 0, 3, 2, 4) :|: TRUE
f_766(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v1824, v1830, v1831, v1832, 0, 3, 2, 4) -> f_774(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v1830, v1831, v1832, 0, 3, 2, 4) :|: 0 = 0
f_774(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v1830, v1831, v1832, 0, 3, 2, 4) -> f_785(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v3008, v1830, v1831, v1832, 0, 3, 2, 4) :|: 1 + v3008 = v1828 && 0 <= v3008
f_785(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v3008, v1830, v1831, v1832, 0, 3, 2, 4) -> f_796(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v3008, v1830, v1831, v1832, 0, 3, 2, 4) :|: TRUE
f_796(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v3008, v1830, v1831, v1832, 0, 3, 2, 4) -> f_807(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v3008, v3318, v1830, v1831, v1832, 0, 3, 2, 4) :|: TRUE
f_807(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v3008, v3318, v1830, v1831, v1832, 0, 3, 2, 4) -> f_819(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v3008, v3318, v1830, v1831, v1832, 0, 3, 2, 4) :|: TRUE
f_819(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v3008, v3318, v1830, v1831, v1832, 0, 3, 2, 4) -> f_832(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v3008, v3318, v1830, v1831, v1832, 0, 3, 2, 4) :|: TRUE
f_832(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v3008, v3318, v1830, v1831, v1832, 0, 3, 2, 4) -> f_621(v1819, v1820, v1821, v1822, v1823, v1828, 1, v1829, v2568, v3008, v3318, v1830, v1831, v1832, 0, 3, 4) :|: TRUE
f_621(v1819, v1820, v1821, v1822, v1823, v1824, 1, v1826, v1827, v1828, v1829, v1830, v1831, v1832, 0, 3, 4) -> f_630(v1819, v1820, v1821, v1822, v1823, v1824, 1, v1826, v1827, v1828, v1829, v1830, v1831, v1832, 0, 3, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_630(v1819:0, v1820:0, v1821:0, v1822:0, v1823:0, v1824:0, 1, v1826:0, v1827:0, 1 + v3008:0, v1829:0, v1830:0, v1831:0, v1832:0, 0, 3, 4) -> f_630(v1819:0, v1820:0, v1821:0, v1822:0, v1823:0, 1 + v3008:0, 1, v1829:0, v2568:0, v3008:0, v3318:0, v1830:0, v1831:0, v1832:0, 0, 3, 4) :|: v1824:0 > 1 && v3008:0 > -1 && v1822:0 > 1 && v1829:0 > 0 && v2568:0 < 0
f_630(v1819:0, v1820:0, v1821:0, v1822:0, v1823:0, v1824:0, 1, v1826:0, v1827:0, 1 + v3008:0, v1829:0, v1830:0, v1831:0, v1832:0, 0, 3, 4) -> f_630(v1819:0, v1820:0, v1821:0, v1822:0, v1823:0, 1 + v3008:0, 1, v1829:0, v2568:0, v3008:0, v3318:0, v1830:0, v1831:0, v1832:0, 0, 3, 4) :|: v1824:0 > 1 && v3008:0 > -1 && v1822:0 > 1 && v1829:0 > 0 && v2568:0 > 0
Filtered unneeded arguments:
   f_630(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_630(x4, x6, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_630(v1822:0, v1824:0, sum~cons_1~v3008:0, v1829:0) -> f_630(v1822:0, 1 + v3008:0, v3008:0, v3318:0) :|: v3008:0 > -1 && v1824:0 > 1 && v1829:0 > 0 && v1822:0 > 1 && sum~cons_1~v3008:0 = 1 + v3008:0

----------------------------------------

(128)
Obligation:
Rules:
f_630(v1822:0, v1824:0, sum~cons_1~v3008:0, v1829:0) -> f_630(v1822:0, 1 + v3008:0, v3008:0, v3318:0) :|: v3008:0 > -1 && v1824:0 > 1 && v1829:0 > 0 && v1822:0 > 1 && sum~cons_1~v3008:0 = 1 + v3008:0

----------------------------------------

(129) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(130)
Obligation:
Rules:
f_630(v1822:0:0, v1824:0:0, sum~cons_1~v3008:0:0, v1829:0:0) -> f_630(v1822:0:0, 1 + v3008:0:0, v3008:0:0, v3318:0:0) :|: v1829:0:0 > 0 && v1822:0:0 > 1 && v1824:0:0 > 1 && v3008:0:0 > -1 && sum~cons_1~v3008:0:0 = 1 + v3008:0:0

----------------------------------------

(131) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_630(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_630(v1822:0:0, v1824:0:0, sum~cons_1~v3008:0:0, v1829:0:0) -> f_630(v1822:0:0, 1 + v3008:0:0, v3008:0:0, v3318:0:0) :|: v1829:0:0 > 0 && v1822:0:0 > 1 && v1824:0:0 > 1 && v3008:0:0 > -1 && sum~cons_1~v3008:0:0 = 1 + v3008:0:0
The following rules are bounded:
f_630(v1822:0:0, v1824:0:0, sum~cons_1~v3008:0:0, v1829:0:0) -> f_630(v1822:0:0, 1 + v3008:0:0, v3008:0:0, v3318:0:0) :|: v1829:0:0 > 0 && v1822:0:0 > 1 && v1824:0:0 > 1 && v3008:0:0 > -1 && sum~cons_1~v3008:0:0 = 1 + v3008:0:0

----------------------------------------

(132)
YES

----------------------------------------

(133)
Obligation:
SCC
----------------------------------------

(134) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 23 rulesP rules:
f_588(v1706, v1707, v1708, v1709, v1710, v1711, 1, 0, v1714, v1715, v1716, v1717, v1718, 3, 4) -> f_596(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) :|: 0 = 0
f_596(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) -> f_604(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) :|: v1715 != 0
f_604(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) -> f_614(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) :|: 0 = 0
f_614(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) -> f_624(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) :|: TRUE
f_624(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) -> f_633(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) :|: 0 = 0
f_633(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) -> f_642(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) :|: 0 = 0
f_642(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) -> f_650(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) :|: 0 = 0
f_650(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) -> f_655(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) :|: TRUE
f_655(v1706, v1707, v1708, v1709, v1710, v1715, 1, v1711, 0, v1714, v1716, v1717, v1718, 3, 4) -> f_660(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v1714, v1711, v1716, v1717, v1718, 3, 4) :|: 0 = 0
f_660(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v1714, v1711, v1716, v1717, v1718, 3, 4) -> f_666(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v1714, v1711, v1716, v1717, v1718, 3, 4) :|: v1715 <= 0 && 1 + v1711 <= 0 && 1 + v1709 <= 0
f_666(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v1714, v1711, v1716, v1717, v1718, 3, 4) -> f_674(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v1714, v1711, v1716, v1717, v1718, 3, 4) :|: 0 = 0
f_674(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v1714, v1711, v1716, v1717, v1718, 3, 4) -> f_682(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v1714, v1711, v1716, v1717, v1718, 3, 4) :|: TRUE
f_682(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v1714, v1711, v1716, v1717, v1718, 3, 4) -> f_690(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v1711, v1716, v1717, v1718, 3, 4) :|: TRUE
f_690(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v1711, v1716, v1717, v1718, 3, 4) -> f_699(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v1711, v1716, v1717, v1718, 3, 4) :|: v2305 != 0
f_699(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v1711, v1716, v1717, v1718, 3, 4) -> f_709(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v1711, v1716, v1717, v1718, 3, 4) :|: 0 = 0
f_709(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v1711, v1716, v1717, v1718, 3, 4) -> f_718(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v1711, v1716, v1717, v1718, 3, 4) :|: TRUE
f_718(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v1711, v1716, v1717, v1718, 3, 4) -> f_727(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v1716, v1717, v1718, 3, 4) :|: 0 = 0
f_727(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v1716, v1717, v1718, 3, 4) -> f_736(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v2566, v1716, v1717, v1718, 3, 4) :|: v2566 = 1 + v1715 && v2566 <= 1
f_736(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v2566, v1716, v1717, v1718, 3, 4) -> f_744(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v2566, v1716, v1717, v1718, 3, 4) :|: TRUE
f_744(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v2566, v1716, v1717, v1718, 3, 4) -> f_753(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v2566, v1716, v1717, v1718, 3, 4) :|: TRUE
f_753(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v2566, v1716, v1717, v1718, 3, 4) -> f_762(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v2566, v1716, v1717, v1718, 3, 4) :|: TRUE
f_762(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v2566, v1716, v1717, v1718, 3, 4) -> f_580(v1706, v1707, v1708, v1709, v1710, v1715, 1, 0, v2305, v2566, v1716, v1717, v1718, 3, 4) :|: TRUE
f_580(v1706, v1707, v1708, v1709, v1710, v1711, 1, 0, v1714, v1715, v1716, v1717, v1718, 3, 4) -> f_588(v1706, v1707, v1708, v1709, v1710, v1711, 1, 0, v1714, v1715, v1716, v1717, v1718, 3, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_588(v1706:0, v1707:0, v1708:0, v1709:0, v1710:0, v1711:0, 1, 0, v1714:0, v1715:0, v1716:0, v1717:0, v1718:0, 3, 4) -> f_588(v1706:0, v1707:0, v1708:0, v1709:0, v1710:0, v1715:0, 1, 0, v2305:0, 1 + v1715:0, v1716:0, v1717:0, v1718:0, 3, 4) :|: v1715:0 < 0 && v1711:0 < 0 && v1715:0 < 1 && v1709:0 < 0 && v2305:0 < 0
f_588(v1706:0, v1707:0, v1708:0, v1709:0, v1710:0, v1711:0, 1, 0, v1714:0, v1715:0, v1716:0, v1717:0, v1718:0, 3, 4) -> f_588(v1706:0, v1707:0, v1708:0, v1709:0, v1710:0, v1715:0, 1, 0, v2305:0, 1 + v1715:0, v1716:0, v1717:0, v1718:0, 3, 4) :|: v1715:0 < 0 && v1711:0 < 0 && v1715:0 < 1 && v1709:0 < 0 && v2305:0 > 0
f_588(v1706:0, v1707:0, v1708:0, v1709:0, v1710:0, v1711:0, 1, 0, v1714:0, v1715:0, v1716:0, v1717:0, v1718:0, 3, 4) -> f_588(v1706:0, v1707:0, v1708:0, v1709:0, v1710:0, v1715:0, 1, 0, v2305:0, 1 + v1715:0, v1716:0, v1717:0, v1718:0, 3, 4) :|: v1715:0 > 0 && v1711:0 < 0 && v1715:0 < 1 && v1709:0 < 0 && v2305:0 < 0
f_588(v1706:0, v1707:0, v1708:0, v1709:0, v1710:0, v1711:0, 1, 0, v1714:0, v1715:0, v1716:0, v1717:0, v1718:0, 3, 4) -> f_588(v1706:0, v1707:0, v1708:0, v1709:0, v1710:0, v1715:0, 1, 0, v2305:0, 1 + v1715:0, v1716:0, v1717:0, v1718:0, 3, 4) :|: v1715:0 > 0 && v1711:0 < 0 && v1715:0 < 1 && v1709:0 < 0 && v2305:0 > 0
Filtered unneeded arguments:
   f_588(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_588(x4, x6, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_588(v1709:0, v1711:0, v1715:0) -> f_588(v1709:0, v1715:0, 1 + v1715:0) :|: v1711:0 < 0 && v1715:0 < 0 && v1709:0 < 0 && v1715:0 < 1
f_588(v1709:0, v1711:0, v1715:0) -> f_588(v1709:0, v1715:0, 1 + v1715:0) :|: v1711:0 < 0 && v1715:0 > 0 && v1709:0 < 0 && v1715:0 < 1

----------------------------------------

(135)
Obligation:
Rules:
f_588(v1709:0, v1711:0, v1715:0) -> f_588(v1709:0, v1715:0, 1 + v1715:0) :|: v1711:0 < 0 && v1715:0 < 0 && v1709:0 < 0 && v1715:0 < 1
f_588(x, x1, x2) -> f_588(x, x2, 1 + x2) :|: x1 < 0 && x2 > 0 && x < 0 && x2 < 1

----------------------------------------

(136) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(137)
Obligation:
Rules:
f_588(v1709:0, v1711:0, v1715:0) -> f_588(v1709:0, v1715:0, 1 + v1715:0) :|: v1711:0 < 0 && v1715:0 < 0 && v1709:0 < 0 && v1715:0 < 1

----------------------------------------

(138) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(139)
Obligation:
Rules:
f_588(v1709:0:0, v1711:0:0, v1715:0:0) -> f_588(v1709:0:0, v1715:0:0, 1 + v1715:0:0) :|: v1709:0:0 < 0 && v1715:0:0 < 1 && v1715:0:0 < 0 && v1711:0:0 < 0

----------------------------------------

(140) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_588 ] = -1*f_588_3

The following rules are decreasing:
f_588(v1709:0:0, v1711:0:0, v1715:0:0) -> f_588(v1709:0:0, v1715:0:0, 1 + v1715:0:0) :|: v1709:0:0 < 0 && v1715:0:0 < 1 && v1715:0:0 < 0 && v1711:0:0 < 0

The following rules are bounded:
f_588(v1709:0:0, v1711:0:0, v1715:0:0) -> f_588(v1709:0:0, v1715:0:0, 1 + v1715:0:0) :|: v1709:0:0 < 0 && v1715:0:0 < 1 && v1715:0:0 < 0 && v1711:0:0 < 0


----------------------------------------

(141)
YES

----------------------------------------

(142)
Obligation:
SCC
----------------------------------------

(143) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_576(v1634, v1635, v1636, v1637, v1638, 1, v1640, 0, v1642, v1643, v1644, v1645, 3, 4) -> f_587(v1634, v1635, v1636, v1637, v1638, 1, v1640, 0, v1642, v1643, v1644, v1645, 3, 4) :|: 0 = 0
f_587(v1634, v1635, v1636, v1637, v1638, 1, v1640, 0, v1642, v1643, v1644, v1645, 3, 4) -> f_595(v1634, v1635, v1636, v1637, v1638, 1, v1640, 0, v1642, v1643, v1644, v1645, 3, 4) :|: TRUE
f_595(v1634, v1635, v1636, v1637, v1638, 1, v1640, 0, v1642, v1643, v1644, v1645, 3, 4) -> f_603(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 4) :|: 0 = 0
f_603(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 4) -> f_612(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) :|: 0 < v1642 && 2 <= v1640 && 2 <= v1638
f_612(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) -> f_622(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) :|: 0 = 0
f_622(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) -> f_631(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) :|: 0 = 0
f_631(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) -> f_640(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) :|: TRUE
f_640(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) -> f_649(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) :|: 0 = 0
f_649(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) -> f_654(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) :|: 0 = 0
f_654(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) -> f_659(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) :|: TRUE
f_659(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) -> f_664(v1634, v1635, v1636, v1637, v1638, 1, v1642, v2254, 0, v1640, v1643, v1644, v1645, 3, 2, 4) :|: TRUE
f_664(v1634, v1635, v1636, v1637, v1638, 1, v1642, v2254, 0, v1640, v1643, v1644, v1645, 3, 2, 4) -> f_672(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) :|: v2254 = 0
f_672(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) -> f_680(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) :|: 0 = 0
f_680(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) -> f_688(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) :|: TRUE
f_688(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1640, v1643, v1644, v1645, 3, 2, 4) -> f_696(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1643, v1644, v1645, 3, 2, 4) :|: 0 = 0
f_696(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v1643, v1644, v1645, 3, 2, 4) -> f_706(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v2422, v1643, v1644, v1645, 3, 2, 4) :|: 1 + v2422 = v1642 && 0 <= v2422
f_706(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v2422, v1643, v1644, v1645, 3, 2, 4) -> f_715(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v2422, v1643, v1644, v1645, 3, 2, 4) :|: TRUE
f_715(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v2422, v1643, v1644, v1645, 3, 2, 4) -> f_724(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v2422, v1643, v1644, v1645, 3, 2, 4) :|: TRUE
f_724(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v2422, v1643, v1644, v1645, 3, 2, 4) -> f_733(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v2422, v1643, v1644, v1645, 3, 2, 4) :|: TRUE
f_733(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v2422, v1643, v1644, v1645, 3, 2, 4) -> f_741(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v2422, v1643, v1644, v1645, 3, 2, 4) :|: TRUE
f_741(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v2422, v1643, v1644, v1645, 3, 2, 4) -> f_565(v1634, v1635, v1636, v1637, v1638, 1, v1642, 0, v2422, v1643, v1644, v1645, 3, 4) :|: TRUE
f_565(v1634, v1635, v1636, v1637, v1638, 1, v1640, 0, v1642, v1643, v1644, v1645, 3, 4) -> f_576(v1634, v1635, v1636, v1637, v1638, 1, v1640, 0, v1642, v1643, v1644, v1645, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_576(v1634:0, v1635:0, v1636:0, v1637:0, v1638:0, 1, v1640:0, 0, 1 + v2422:0, v1643:0, v1644:0, v1645:0, 3, 4) -> f_576(v1634:0, v1635:0, v1636:0, v1637:0, v1638:0, 1, 1 + v2422:0, 0, v2422:0, v1643:0, v1644:0, v1645:0, 3, 4) :|: v1640:0 > 1 && v2422:0 > -1 && v1638:0 > 1
Filtered unneeded arguments:
   f_576(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_576(x5, x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_576(v1638:0, v1640:0, sum~cons_1~v2422:0) -> f_576(v1638:0, 1 + v2422:0, v2422:0) :|: v2422:0 > -1 && v1638:0 > 1 && v1640:0 > 1 && sum~cons_1~v2422:0 = 1 + v2422:0

----------------------------------------

(144)
Obligation:
Rules:
f_576(v1638:0, v1640:0, sum~cons_1~v2422:0) -> f_576(v1638:0, 1 + v2422:0, v2422:0) :|: v2422:0 > -1 && v1638:0 > 1 && v1640:0 > 1 && sum~cons_1~v2422:0 = 1 + v2422:0

----------------------------------------

(145) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(146)
Obligation:
Rules:
f_576(v1638:0:0, v1640:0:0, sum~cons_1~v2422:0:0) -> f_576(v1638:0:0, 1 + v2422:0:0, v2422:0:0) :|: v2422:0:0 > -1 && v1638:0:0 > 1 && v1640:0:0 > 1 && sum~cons_1~v2422:0:0 = 1 + v2422:0:0

----------------------------------------

(147) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_576 ] = f_576_3

The following rules are decreasing:
f_576(v1638:0:0, v1640:0:0, sum~cons_1~v2422:0:0) -> f_576(v1638:0:0, 1 + v2422:0:0, v2422:0:0) :|: v2422:0:0 > -1 && v1638:0:0 > 1 && v1640:0:0 > 1 && sum~cons_1~v2422:0:0 = 1 + v2422:0:0

The following rules are bounded:
f_576(v1638:0:0, v1640:0:0, sum~cons_1~v2422:0:0) -> f_576(v1638:0:0, 1 + v2422:0:0, v2422:0:0) :|: v2422:0:0 > -1 && v1638:0:0 > 1 && v1640:0:0 > 1 && sum~cons_1~v2422:0:0 = 1 + v2422:0:0


----------------------------------------

(148)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
