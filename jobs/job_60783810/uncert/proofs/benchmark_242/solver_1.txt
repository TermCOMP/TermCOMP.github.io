YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/TUpqP.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 50 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3109 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 25 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (13) IntTRS
        (14) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (15) YES
    (16) LLVM Symbolic Execution SCC
        (17) SCC2IRS [SOUND, 37 ms]
        (18) IntTRS
        (19) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (20) IntTRS
        (21) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/TUpqP.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/TUpqP.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%5 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store null, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%6 = load %3
		store %6, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %7
	7:
		%8 = load %5
		%9 = load %2
		%10 = icmp slt %8 %9
		br %10, %11, %24
	11:
		%12 = call noalias *i8 @malloc(i64 16)
		%13 = bitcast *i8 %12 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %13, %3
		%14 = call i32 (...)* @__VERIFIER_nondet_int()
		%15 = load %3
		%16 = getelementptr %15, 0, 0
		store %14, %16
		%17 = load %4
		%18 = load %3
		%19 = getelementptr %18, 0, 1
		store %17, %19
		%20 = load %3
		store %20, %4
		br %21
	21:
		%22 = load %5
		%23 = add i32 %22, 1
		store %23, %5
		br %7
	24:
		%25 = load %3
		ret %25

*BasicFunctionTypename: "insert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 **BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 55
	0:
		%3 = alloca **BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca i32, align 4
		%5 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%6 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%7 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(***BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %5)
		%8 = load %3
		%9 = load %8
		store %9, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %6)
		%10 = call noalias *i8 @malloc(i64 16)
		%11 = bitcast *i8 %10 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %11, %6
		%12 = load %4
		%13 = load %6
		%14 = getelementptr %13, 0, 0
		store %12, %14
		%15 = load %5
		%16 = icmp eq %15 null
		br %16, %23, %17
	17:
		%18 = load %5
		%19 = getelementptr %18, 0, 0
		%20 = load %19
		%21 = load %4
		%22 = icmp sge %20 %21
		br %22, %23, %29
	23:
		%24 = load %5
		%25 = load %6
		%26 = getelementptr %25, 0, 1
		store %24, %26
		%27 = load %6
		%28 = load %3
		store %27, %28
		br %61
	29:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %7)
		%30 = load %5
		store %30, %7
		br %31
	31:
		%32 = load %7
		%33 = getelementptr %32, 0, 1
		%34 = load %33
		%35 = icmp ne %34 null
		br %35, %36, %44
	36:
		%37 = load %7
		%38 = getelementptr %37, 0, 1
		%39 = load %38
		%40 = getelementptr %39, 0, 0
		%41 = load %40
		%42 = load %4
		%43 = icmp slt %41 %42
		br %44
	44:
		%45 = phi [0, %31], [%43, %36]
		br %45, %46, %50
	46:
		%47 = load %7
		%48 = getelementptr %47, 0, 1
		%49 = load %48
		store %49, %7
		br %31
	50:
		%51 = load %7
		%52 = getelementptr %51, 0, 1
		%53 = load %52
		%54 = load %6
		%55 = getelementptr %54, 0, 1
		store %53, %55
		%56 = load %6
		%57 = load %7
		%58 = getelementptr %57, 0, 1
		store %56, %58
		%59 = load %5
		%60 = load %3
		store %59, %60
		br %61
	61:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 125
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 (...)* @__VERIFIER_nondet_int()
		store %5, %2
		%6 = load %2
		%7 = icmp slt %6 1
		br %7, %8, %9
	8:
		store 0, %1
		br %14
	9:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%10 = call i32 (...)* @__VERIFIER_nondet_int()
		store %10, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%11 = load %2
		%12 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %11)
		store %12, %4
		%13 = load %3
		Unnamed Call-Instruction = call BasicVoidType @insert(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4, i32 %13)
		store 0, %1
		br %14
	14:
		%15 = load %1
		ret %15


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_1031(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v817, 1, v816, v820, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v836, v837, v839, v840, v824, 3, 7, 4, 15, 8, 9, 2, 16, v835, v838) -> f_1038(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, 1, v816, v817, v820, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v836, v837, v839, v840, v824, 3, 7, 4, 15, 8, 9, 2, 16, v835, v838) :|: v841 = 8 + v818 && 9 <= v841
f_1038(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, 1, v816, v817, v820, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v836, v837, v839, v840, v824, 3, 7, 4, 15, 8, 9, 2, 16, v835, v838) -> f_1039(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v816, v817, v820, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v836, v837, v839, v824, 3, 7, 4, 15, 8, 9, 2, 16, v835, v838) :|: 0 = 0
f_1039(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v816, v817, v820, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v836, v837, v839, v824, 3, 7, 4, 15, 8, 9, 2, 16, v835, v838) -> f_1040(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v816, v817, v820, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v836, v837, v839, v824, 3, 7, 4, 15, 8, 9, 2, 16, v835, v838) :|: 0 < v840 && 2 <= v838
f_1040(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v816, v817, v820, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v836, v837, v839, v824, 3, 7, 4, 15, 8, 9, 2, 16, v835, v838) -> f_1042(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v816, v817, v820, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v836, v837, v839, v824, 3, 7, 4, 15, 8, 9, 2, 16, v835, v838) :|: 0 = 0
f_1042(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v816, v817, v820, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v836, v837, v839, v824, 3, 7, 4, 15, 8, 9, 2, 16, v835, v838) -> f_1044(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v816, v817, v820, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v836, v837, v839, v824, 3, 7, 4, 15, 8, 9, 2, 16, v835, v838) :|: TRUE
f_1044(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v816, v817, v820, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v836, v837, v839, v824, 3, 7, 4, 15, 8, 9, 2, 16, v835, v838) -> f_1046(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v817, v820, v816, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v836, v837, v839, v824, 3, 7, 4, 15, 8, 9, 2, 16, v835, v838) :|: 0 = 0
f_1046(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v817, v820, v816, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v836, v837, v839, v824, 3, 7, 4, 15, 8, 9, 2, 16, v835, v838) -> f_1054(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v820, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v867, v839, v865, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) :|: v841 = 8 + v818 && v868 = 15 + v818 && v869 = 1 + v835 && 1 + v866 = v838 && 16 <= v868 && 1 <= v866 && 0 <= v869
f_1054(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v820, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v867, v839, v865, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) -> f_1056(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v820, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v867, v839, v865, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) :|: 0 = 0
f_1056(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v820, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v867, v839, v865, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) -> f_1058(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v820, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v867, v839, v865, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) :|: 0 = 0
f_1058(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v820, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v867, v839, v865, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) -> f_1060(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) :|: 0 = 0
f_1060(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) -> f_1062(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) :|: 0 = 0
f_1062(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) -> f_1064(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) :|: v867 < v806
f_1064(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) -> f_1067(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) :|: 0 = 0
f_1067(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) -> f_1070(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) :|: 0 = 0
f_1070(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) -> f_1073(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) :|: TRUE
f_1073(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v816, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) -> f_1076(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) :|: 0 = 0
f_1076(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v817, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) -> f_1079(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v817, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) :|: v841 = 8 + v818
f_1079(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v817, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) -> f_1082(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v817, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) :|: 0 = 0
f_1082(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v817, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 9, 2, 16, v866, v869) -> f_1085(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 2, 16, 9, v866, v869) :|: TRUE
f_1085(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 2, 16, 9, v866, v869) -> f_1088(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 2, 16, 9, v866, v869) :|: TRUE
f_1088(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v868, v824, v839, v865, v820, v837, 3, 7, 4, 15, 8, 2, 16, 9, v866, v869) -> f_1030(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v841, v840, 1, v867, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v820, v837, v839, v865, v824, 3, 7, 4, 15, 8, 9, 2, 16, v869, v866) :|: TRUE
f_1030(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v816, v817, v818, 1, v820, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v836, v837, v839, v840, v824, 3, 7, 4, 15, 8, 9, 2, 16, v835, v838) -> f_1031(v805, v806, v807, v808, v809, v810, v811, v812, v813, 0, v815, v818, v817, 1, v816, v820, v821, v825, v822, v826, v823, v827, v828, v829, v830, v831, v832, v833, v834, v836, v837, v839, v840, v824, 3, 7, 4, 15, 8, 9, 2, 16, v835, v838) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_1031(v805:0, v806:0, v807:0, v808:0, v809:0, v810:0, v811:0, v812:0, v813:0, 0, v815:0, v818:0, v817:0, 1, v816:0, v820:0, v821:0, v825:0, v822:0, v826:0, v823:0, v827:0, v828:0, v829:0, v830:0, v831:0, v832:0, v833:0, v834:0, v836:0, v837:0, v839:0, v840:0, v824:0, 3, 7, 4, 15, 8, 9, 2, 16, v835:0, 1 + v866:0) -> f_1031(v805:0, v806:0, v807:0, v808:0, v809:0, v810:0, v811:0, v812:0, v813:0, 0, v815:0, v840:0, 8 + v818:0, 1, v818:0, v867:0, v821:0, v825:0, v822:0, v826:0, v823:0, v827:0, v828:0, v829:0, v830:0, v831:0, v832:0, v833:0, v834:0, v820:0, v837:0, v839:0, v865:0, v824:0, 3, 7, 4, 15, 8, 9, 2, 16, 1 + v835:0, v866:0) :|: v818:0 > 0 && v866:0 > 0 && v840:0 > 0 && v867:0 < v806:0 && v835:0 > -2
Filtered unneeded arguments:
   f_1031(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44) -> f_1031(x2, x12, x33, x43, x44)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1031(v806:0, v818:0, v840:0, v835:0, sum~cons_1~v866:0) -> f_1031(v806:0, v840:0, v865:0, 1 + v835:0, v866:0) :|: v866:0 > 0 && v818:0 > 0 && v835:0 > -2 && v840:0 > 0 && sum~cons_1~v866:0 = 1 + v866:0

----------------------------------------

(9)
Obligation:
Rules:
f_1031(v806:0, v818:0, v840:0, v835:0, sum~cons_1~v866:0) -> f_1031(v806:0, v840:0, v865:0, 1 + v835:0, v866:0) :|: v866:0 > 0 && v818:0 > 0 && v835:0 > -2 && v840:0 > 0 && sum~cons_1~v866:0 = 1 + v866:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_1031(v806:0:0, v818:0:0, v840:0:0, v835:0:0, sum~cons_1~v866:0:0) -> f_1031(v806:0:0, v840:0:0, v865:0:0, 1 + v835:0:0, v866:0:0) :|: v835:0:0 > -2 && v840:0:0 > 0 && v818:0:0 > 0 && v866:0:0 > 0 && sum~cons_1~v866:0:0 = 1 + v866:0:0

----------------------------------------

(12) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1031(x1, x2, x3, x4, x5) -> f_1031(x2, x3, x4, x5)

----------------------------------------

(13)
Obligation:
Rules:
f_1031(v818:0:0, v840:0:0, v835:0:0, sum~cons_1~v866:0:0) -> f_1031(v840:0:0, v865:0:0, 1 + v835:0:0, v866:0:0) :|: v835:0:0 > -2 && v840:0:0 > 0 && v818:0:0 > 0 && v866:0:0 > 0 && sum~cons_1~v866:0:0 = 1 + v866:0:0

----------------------------------------

(14) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1031 ] = f_1031_4

The following rules are decreasing:
f_1031(v818:0:0, v840:0:0, v835:0:0, sum~cons_1~v866:0:0) -> f_1031(v840:0:0, v865:0:0, 1 + v835:0:0, v866:0:0) :|: v835:0:0 > -2 && v840:0:0 > 0 && v818:0:0 > 0 && v866:0:0 > 0 && sum~cons_1~v866:0:0 = 1 + v866:0:0

The following rules are bounded:
f_1031(v818:0:0, v840:0:0, v835:0:0, sum~cons_1~v866:0:0) -> f_1031(v840:0:0, v865:0:0, 1 + v835:0:0, v866:0:0) :|: v835:0:0 > -2 && v840:0:0 > 0 && v818:0:0 > 0 && v866:0:0 > 0 && sum~cons_1~v866:0:0 = 1 + v866:0:0


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
SCC
----------------------------------------

(17) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_755(v301, v302, v303, v304, v305, 0, v313, 1, v309, v310, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v327, v318, 3, 7, 4, 8, 9) -> f_756(v301, v302, v303, v304, v305, 0, v313, 1, v309, v310, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v327, v318, 3, 7, 4, 8, 9) :|: 0 = 0
f_756(v301, v302, v303, v304, v305, 0, v313, 1, v309, v310, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v327, v318, 3, 7, 4, 8, 9) -> f_757(v301, v302, v303, v304, v305, 0, v313, 1, v309, v310, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v327, v318, 3, 7, 4, 8, 2, 9) :|: v313 < v301 && 2 <= v301
f_757(v301, v302, v303, v304, v305, 0, v313, 1, v309, v310, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v327, v318, 3, 7, 4, 8, 2, 9) -> f_759(v301, v302, v303, v304, v305, 0, v313, 1, v309, v310, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v327, v318, 3, 7, 4, 8, 2, 9) :|: 0 = 0
f_759(v301, v302, v303, v304, v305, 0, v313, 1, v309, v310, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v327, v318, 3, 7, 4, 8, 2, 9) -> f_761(v301, v302, v303, v304, v305, 0, v313, 1, v309, v310, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v327, v318, 3, 7, 4, 8, 2, 9) :|: TRUE
f_761(v301, v302, v303, v304, v305, 0, v313, 1, v309, v310, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v327, v318, 3, 7, 4, 8, 2, 9) -> f_763(v301, v302, v303, v304, v305, 0, v313, 1, v328, v309, v310, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v327, v318, 3, 7, 4, 8, 15, 2, 9, 16) :|: v329 = 15 + v328 && v328 % 4 = 0 && 16 <= v329
f_763(v301, v302, v303, v304, v305, 0, v313, 1, v328, v309, v310, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v327, v318, 3, 7, 4, 8, 15, 2, 9, 16) -> f_765(v301, v302, v303, v304, v305, 0, v313, 1, v328, v310, v309, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v327, v318, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_765(v301, v302, v303, v304, v305, 0, v313, 1, v328, v310, v309, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v327, v318, 3, 7, 4, 8, 15, 2, 9, 16) -> f_767(v301, v302, v303, v304, v305, 0, v313, 1, v328, v310, v309, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v327, v318, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_767(v301, v302, v303, v304, v305, 0, v313, 1, v328, v310, v309, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v327, v318, 3, 7, 4, 8, 15, 2, 9, 16) -> f_769(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v310, v327, v318, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_769(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v310, v327, v318, 3, 7, 4, 8, 15, 2, 9, 16) -> f_771(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v310, v327, v318, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_771(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v310, v327, v318, 3, 7, 4, 8, 15, 2, 9, 16) -> f_773(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v311, v309, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v310, v327, v318, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_773(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v311, v309, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v310, v327, v318, 3, 7, 4, 8, 15, 2, 9, 16) -> f_775(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v311, v309, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v310, v327, v318, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_775(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v311, v309, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v310, v327, v318, 3, 7, 4, 8, 15, 2, 9, 16) -> f_777(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v310, v327, v311, v318, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_777(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v310, v327, v311, v318, 3, 7, 4, 8, 15, 2, 9, 16) -> f_779(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v310, v327, v311, v318, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_779(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v310, v327, v311, v318, 3, 7, 4, 8, 15, 2, 9, 16) -> f_781(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v310, v327, v311, v318, 3, 7, 4, 15, 8, 2, 16, 9) :|: v342 = 8 + v328 && 9 <= v342
f_781(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v329, v310, v327, v311, v318, 3, 7, 4, 15, 8, 2, 16, 9) -> f_783(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, v346, 2, 9) :|: v346 = 1 + v313 && 2 <= v346
f_783(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, v346, 2, 9) -> f_785(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, v346, 2, 9) :|: 0 = 0
f_785(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, v346, 2, 9) -> f_787(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, v346, 2, 9) :|: TRUE
f_787(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, v346, 2, 9) -> f_789(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, v346, 2, 9) :|: TRUE
f_789(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, v346, 2, 9) -> f_791(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, v346, 2, 9) :|: 0 = 0
f_791(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, v346, 2, 9) -> f_793(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v346, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, 2, 9) :|: v346 = 1 + v313
f_793(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v346, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, 2, 9) -> f_795(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v346, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, 2, 9) :|: TRUE
f_795(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v346, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, 2, 9) -> f_797(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v346, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, 2, 9) :|: TRUE
f_797(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v346, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v318, v327, 3, 7, 4, 8, 2, 9) -> f_754(v301, v302, v303, v304, v305, 0, v313, 1, v328, v332, v309, v342, v346, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v327, v318, 3, 7, 4, 8, 9) :|: TRUE
f_754(v301, v302, v303, v304, v305, 0, v307, 1, v309, v310, v311, v312, v313, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v327, v318, 3, 7, 4, 8, 9) -> f_755(v301, v302, v303, v304, v305, 0, v313, 1, v309, v310, v311, v312, v307, v314, v319, v315, v320, v316, v321, v317, v322, v323, v324, v325, v326, v327, v318, 3, 7, 4, 8, 9) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_755(v301:0, v302:0, v303:0, v304:0, v305:0, 0, v313:0, 1, v309:0, v310:0, v311:0, v312:0, v307:0, v314:0, v319:0, v315:0, v320:0, v316:0, v321:0, v317:0, v322:0, v323:0, v324:0, v325:0, v326:0, v327:0, v318:0, 3, 7, 4, 8, 9) -> f_755(v301:0, v302:0, v303:0, v304:0, v305:0, 0, 1 + v313:0, 1, v328:0, v332:0, v309:0, 8 + v328:0, v313:0, v314:0, v319:0, v315:0, v320:0, v316:0, v321:0, v317:0, v322:0, v323:0, v324:0, v325:0, v326:0, v327:0, v318:0, 3, 7, 4, 8, 9) :|: v301:0 > 1 && v313:0 < v301:0 && v328:0 % 4 = 0 && v328:0 > 0 && v313:0 > 0
Filtered unneeded arguments:
   f_755(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32) -> f_755(x1, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_755(v301:0, v313:0) -> f_755(v301:0, 1 + v313:0) :|: v313:0 < v301:0 && v313:0 > 0 && v301:0 > 1

----------------------------------------

(18)
Obligation:
Rules:
f_755(v301:0, v313:0) -> f_755(v301:0, 1 + v313:0) :|: v313:0 < v301:0 && v313:0 > 0 && v301:0 > 1

----------------------------------------

(19) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(20)
Obligation:
Rules:
f_755(v301:0:0, v313:0:0) -> f_755(v301:0:0, 1 + v313:0:0) :|: v313:0:0 < v301:0:0 && v313:0:0 > 0 && v301:0:0 > 1

----------------------------------------

(21) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_755(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_755(v301:0:0, v313:0:0) -> f_755(v301:0:0, 1 + v313:0:0) :|: v313:0:0 < v301:0:0 && v313:0:0 > 0 && v301:0:0 > 1
The following rules are bounded:
f_755(v301:0:0, v313:0:0) -> f_755(v301:0:0, 1 + v313:0:0) :|: v313:0:0 < v301:0:0 && v313:0:0 > 0 && v301:0:0 > 1

----------------------------------------

(22)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
