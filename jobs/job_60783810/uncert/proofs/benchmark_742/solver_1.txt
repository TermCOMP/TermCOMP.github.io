YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/BEWPp.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1861 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 75 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
(12) IntTRS
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IntTRS
(15) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
(18) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/BEWPp.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/BEWPp.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "p" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		%8 = load %7
		%9 = icmp sgt %8 0
		br %9, %10, %16
	10:
		%11 = load %5
		%12 = load %7
		%13 = sub i32 %12, 1
		%14 = load %6
		%15 = call i32 @p(i32 %11, i32 %13, i32 %14)
		store %15, %4
		br %27
	16:
		%17 = load %6
		%18 = icmp sgt %17 0
		br %18, %19, %25
	19:
		%20 = load %7
		%21 = load %6
		%22 = sub i32 %21, 1
		%23 = load %5
		%24 = call i32 @p(i32 %20, i32 %22, i32 %23)
		store %24, %4
		br %27
	25:
		%26 = load %5
		store %26, %4
		br %27
	27:
		%28 = load %4
		ret %28

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 45
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		%8 = load %2
		%9 = icmp sge %8 0
		br %9, %10, %21
	10:
		%11 = load %3
		%12 = icmp sge %11 0
		br %12, %13, %21
	13:
		%14 = load %4
		%15 = icmp sge %14 0
		br %15, %16, %21
	16:
		%17 = load %2
		%18 = load %3
		%19 = load %4
		%20 = call i32 @p(i32 %17, i32 %18, i32 %19)
		br %21
	21:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 35 rulesP rules:
f_322(v114, v115, v116, v141, v117, v118, v119, v120, v121, v122, v123, v124, v142, 0, v126, v127, v128, 3, 1, 4) -> f_323(v114, v115, v116, v141, v143, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, 0, v126, v127, v128, 3, 1, 4) :|: 1 <= v143 && v144 = 3 + v143 && 4 <= v144
f_323(v114, v115, v116, v141, v143, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, 0, v126, v127, v128, 3, 1, 4) -> f_324(v114, v115, v116, v141, v143, v145, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, 0, v126, v127, v128, 3, 1, 4) :|: 1 <= v145 && v146 = 3 + v145 && 4 <= v146
f_324(v114, v115, v116, v141, v143, v145, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, 0, v126, v127, v128, 3, 1, 4) -> f_325(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) :|: 1 <= v147 && v148 = 3 + v147 && 4 <= v148
f_325(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) -> f_326(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) :|: TRUE
f_326(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) -> f_327(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) :|: TRUE
f_327(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) -> f_328(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) :|: TRUE
f_328(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) -> f_329(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) :|: TRUE
f_329(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) -> f_330(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) :|: TRUE
f_330(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) -> f_331(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) :|: TRUE
f_331(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) -> f_332(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) :|: 0 = 0
f_332(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) -> f_333(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) :|: 0 < v116
f_332(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) -> f_334(v114, v115, 0, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 1, 4) :|: v116 <= 0
f_333(v114, v115, v116, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 1, 4) -> f_335(v114, v115, v116, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 4) :|: 0 = 0
f_335(v114, v115, v116, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 4) -> f_337(v114, v115, v116, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 4) :|: TRUE
f_337(v114, v115, v116, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 4) -> f_339(v114, v115, v116, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 4) :|: 0 = 0
f_339(v114, v115, v116, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 4) -> f_341(v114, v115, v116, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 4) :|: 0 = 0
f_341(v114, v115, v116, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 4) -> f_344(v114, v115, v116, v141, v143, v145, v147, 1, v152, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 4) :|: 1 + v152 = v116 && 0 <= v152
f_344(v114, v115, v116, v141, v143, v145, v147, 1, v152, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 4) -> f_347(v114, v115, v116, v141, v143, v145, v147, 1, v152, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 4) :|: 0 = 0
f_347(v114, v115, v116, v141, v143, v145, v147, 1, v152, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, 0, v126, v127, v128, 3, 4) -> f_350(v114, v152, v115, v117, v118, v119, v120, v121, v122, v123, v124, v141, v142, v143, v144, v145, v146, v147, v148, 0, v126, v127, v128, v116, 1, 3, 4) :|: 0 = 0
f_350(v114, v152, v115, v117, v118, v119, v120, v121, v122, v123, v124, v141, v142, v143, v144, v145, v146, v147, v148, 0, v126, v127, v128, v116, 1, 3, 4) -> f_353(v114, v152, v115, v117, v118, v119, v120, v121, v122, v123, v124, v141, v142, v143, v144, v145, v146, v147, v148, 0, v126, v127, v128, v116, 3, 1, 4) :|: TRUE
f_353(v114, v152, v115, v117, v118, v119, v120, v121, v122, v123, v124, v141, v142, v143, v144, v145, v146, v147, v148, 0, v126, v127, v128, v116, 3, 1, 4) -> f_319(v114, v152, v115, v117, v118, v119, v120, v121, v122, v123, v124, 0, v126, v127, v128, 3, 1, 4) :|: TRUE
f_319(v114, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, 0, v126, v127, v128, 3, 1, 4) -> f_322(v114, v115, v116, v141, v117, v118, v119, v120, v121, v122, v123, v124, v142, 0, v126, v127, v128, 3, 1, 4) :|: 1 <= v141 && v142 = 3 + v141 && 4 <= v142
f_334(v114, v115, 0, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 1, 4) -> f_336(v114, v115, 0, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 1, 4) :|: 0 = 0
f_336(v114, v115, 0, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 1, 4) -> f_338(v114, v115, 0, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 1, 4) :|: TRUE
f_338(v114, v115, 0, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 1, 4) -> f_340(v114, v115, 0, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 1, 4) :|: 0 = 0
f_340(v114, v115, 0, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 1, 4) -> f_342(v114, v115, 0, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 1, 4) :|: 0 < v115
f_342(v114, v115, 0, v141, v143, v145, v147, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 1, 4) -> f_345(v114, v115, 0, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 4) :|: 0 = 0
f_345(v114, v115, 0, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 4) -> f_348(v114, v115, 0, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 4) :|: TRUE
f_348(v114, v115, 0, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 4) -> f_351(v114, v115, 0, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 4) :|: 0 = 0
f_351(v114, v115, 0, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 4) -> f_354(v114, v115, 0, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 4) :|: 0 = 0
f_354(v114, v115, 0, v141, v143, v145, v147, 1, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 4) -> f_356(v114, v115, 0, v141, v143, v145, v147, 1, v169, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 4) :|: 1 + v169 = v115 && 0 <= v169
f_356(v114, v115, 0, v141, v143, v145, v147, 1, v169, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 4) -> f_358(v114, v115, 0, v141, v143, v145, v147, 1, v169, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 4) :|: 0 = 0
f_358(v114, v115, 0, v141, v143, v145, v147, 1, v169, v117, v118, v119, v120, v121, v122, v123, v124, v142, v144, v146, v148, v126, v127, v128, 3, 4) -> f_360(0, v169, v114, v117, v118, v119, v120, v121, v122, v123, v124, v141, v142, v143, v144, v145, v146, v147, v148, v126, v127, v128, v115, 1, 3, 4) :|: 0 = 0
f_360(0, v169, v114, v117, v118, v119, v120, v121, v122, v123, v124, v141, v142, v143, v144, v145, v146, v147, v148, v126, v127, v128, v115, 1, 3, 4) -> f_363(0, v169, v114, v117, v118, v119, v120, v121, v122, v123, v124, v141, v142, v143, v144, v145, v146, v147, v148, v126, v127, v128, v115, 3, 1, 4) :|: TRUE
f_363(0, v169, v114, v117, v118, v119, v120, v121, v122, v123, v124, v141, v142, v143, v144, v145, v146, v147, v148, v126, v127, v128, v115, 3, 1, 4) -> f_319(0, v169, v114, v117, v118, v119, v120, v121, v122, v123, v124, 0, v126, v127, v128, 3, 1, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_322(v114:0, 1 + v169:0, v116:0, v141:0, v117:0, v118:0, v119:0, v120:0, v121:0, v122:0, v123:0, v124:0, v142:0, 0, v126:0, v127:0, v128:0, 3, 1, 4) -> f_322(0, v169:0, v114:0, v141:1, v117:0, v118:0, v119:0, v120:0, v121:0, v122:0, v123:0, v124:0, 3 + v141:1, 0, v126:0, v127:0, v128:0, 3, 1, 4) :|: v145:0 > 0 && v143:0 > 0 && v147:0 > 0 && v116:0 < 1 && v169:0 > -1 && v141:1 > 0
f_322(v114:0, v115:0, 1 + v152:0, v141:0, v117:0, v118:0, v119:0, v120:0, v121:0, v122:0, v123:0, v124:0, v142:0, 0, v126:0, v127:0, v128:0, 3, 1, 4) -> f_322(v114:0, v152:0, v115:0, v141:1, v117:0, v118:0, v119:0, v120:0, v121:0, v122:0, v123:0, v124:0, 3 + v141:1, 0, v126:0, v127:0, v128:0, 3, 1, 4) :|: v145:0 > 0 && v143:0 > 0 && v147:0 > 0 && v152:0 > -1 && v141:1 > 0
Filtered unneeded arguments:
   f_322(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_322(x1, x2, x3)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_322(v114:0, sum~cons_1~v169:0, v116:0) -> f_322(0, v169:0, v114:0) :|: v116:0 < 1 && v169:0 > -1 && sum~cons_1~v169:0 = 1 + v169:0
f_322(v114:0, v115:0, sum~cons_1~v152:0) -> f_322(v114:0, v152:0, v115:0) :|: v152:0 > -1 && sum~cons_1~v152:0 = 1 + v152:0

----------------------------------------

(8)
Obligation:
Rules:
f_322(v114:0, sum~cons_1~v169:0, v116:0) -> f_322(0, v169:0, v114:0) :|: v116:0 < 1 && v169:0 > -1 && sum~cons_1~v169:0 = 1 + v169:0
f_322(x, x1, x2) -> f_322(x, x3, x1) :|: x3 > -1 && x2 = 1 + x3

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_322(v114:0:0, sum~cons_1~v169:0:0, v116:0:0) -> f_322(0, v169:0:0, v114:0:0) :|: v116:0:0 < 1 && v169:0:0 > -1 && sum~cons_1~v169:0:0 = 1 + v169:0:0
f_322(x:0, x1:0, sum~cons_1~x3:0) -> f_322(x:0, x3:0, x1:0) :|: x3:0 > -1 && sum~cons_1~x3:0 = 1 + x3:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_322(x, x1, x2)] = x^2 + x1^2 + x2^2

The following rules are decreasing:
f_322(v114:0:0, sum~cons_1~v169:0:0, v116:0:0) -> f_322(0, v169:0:0, v114:0:0) :|: v116:0:0 < 1 && v169:0:0 > -1 && sum~cons_1~v169:0:0 = 1 + v169:0:0
f_322(x:0, x1:0, sum~cons_1~x3:0) -> f_322(x:0, x3:0, x1:0) :|: x3:0 > -1 && sum~cons_1~x3:0 = 1 + x3:0
The following rules are bounded:
f_322(v114:0:0, sum~cons_1~v169:0:0, v116:0:0) -> f_322(0, v169:0:0, v114:0:0) :|: v116:0:0 < 1 && v169:0:0 > -1 && sum~cons_1~v169:0:0 = 1 + v169:0:0

----------------------------------------

(12)
Obligation:
Rules:
f_322(x:0, x1:0, sum~cons_1~x3:0) -> f_322(x:0, x3:0, x1:0) :|: x3:0 > -1 && sum~cons_1~x3:0 = 1 + x3:0

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f_322(x:0:0, x1:0:0, sum~cons_1~x3:0:0) -> f_322(x:0:0, x3:0:0, x1:0:0) :|: x3:0:0 > -1 && sum~cons_1~x3:0:0 = 1 + x3:0:0

----------------------------------------

(15) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_322(x1, x2, x3) -> f_322(x2, x3)

----------------------------------------

(16)
Obligation:
Rules:
f_322(x1:0:0, sum~cons_1~x3:0:0) -> f_322(x3:0:0, x1:0:0) :|: x3:0:0 > -1 && sum~cons_1~x3:0:0 = 1 + x3:0:0

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_322(x, x1)] = x^2 + x1^2

The following rules are decreasing:
f_322(x1:0:0, sum~cons_1~x3:0:0) -> f_322(x3:0:0, x1:0:0) :|: x3:0:0 > -1 && sum~cons_1~x3:0:0 = 1 + x3:0:0
The following rules are bounded:
f_322(x1:0:0, sum~cons_1~x3:0:0) -> f_322(x3:0:0, x1:0:0) :|: x3:0:0 > -1 && sum~cons_1~x3:0:0 = 1 + x3:0:0

----------------------------------------

(18)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
