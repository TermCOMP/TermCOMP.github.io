YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/f4A4N.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 486 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 36 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (13) IntTRS
        (14) TerminationGraphProcessor [EQUIVALENT, 0 ms]
        (15) YES
    (16) LLVM Symbolic Execution SCC
        (17) SCC2IRS [SOUND, 21 ms]
        (18) IntTRS
        (19) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (20) IntTRS
        (21) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (22) YES
    (23) LLVM Symbolic Execution SCC
        (24) SCC2IRS [SOUND, 20 ms]
        (25) IntTRS
        (26) RankingReductionPairProof [EQUIVALENT, 8 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/f4A4N.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/f4A4N.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %2
		br %4
	4:
		%5 = load %2
		%6 = icmp slt %5 255
		br %6, %7, %17
	7:
		%8 = call i32 @__VERIFIER_nondet_int()
		%9 = icmp ne %8 0
		br %9, %10, %13
	10:
		%11 = load %2
		%12 = add i32 %11, 1
		store %12, %2
		br %16
	13:
		%14 = load %2
		%15 = add i32 %14, 2
		store %15, %2
		br %16
	16:
		br %4
	17:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 43 rulesP rules:
f_279(v477, v478, v479, v480, 1, 0, v483, v484, v486, v487, v488, 3, 254, 253, 4) -> f_281(v477, v478, v479, v480, 1, 0, v483, v484, v490, v487, v488, 3, 2, 254, 253, 4, 256) :|: v490 = 2 + v480 && v490 <= 256
f_281(v477, v478, v479, v480, 1, 0, v483, v484, v490, v487, v488, 3, 2, 254, 253, 4, 256) -> f_283(v477, v478, v479, v480, 1, 0, v483, v484, v490, v487, v488, 3, 2, 254, 253, 4, 256) :|: TRUE
f_283(v477, v478, v479, v480, 1, 0, v483, v484, v490, v487, v488, 3, 2, 254, 253, 4, 256) -> f_286(v477, v478, v479, v480, 1, 0, v483, v484, v490, v487, v488, 3, 2, 254, 253, 4, 256) :|: TRUE
f_286(v477, v478, v479, v480, 1, 0, v483, v484, v490, v487, v488, 3, 2, 254, 253, 4, 256) -> f_288(v477, v478, v479, v480, 1, 0, v483, v484, v490, v487, v488, 3, 2, 254, 253, 4, 256) :|: TRUE
f_288(v477, v478, v479, v480, 1, 0, v483, v484, v490, v487, v488, 3, 2, 254, 253, 4, 256) -> f_290(v477, v478, v479, v490, 1, 0, v483, v484, v480, v487, v488, 3, 2, 254, 253, 4, 256) :|: 0 = 0
f_290(v477, v478, v479, v490, 1, 0, v483, v484, v480, v487, v488, 3, 2, 254, 253, 4, 256) -> f_293(v477, v478, v479, v490, 1, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) :|: v490 < 255 && v480 <= 252 && v483 <= 251 && v484 <= 252
f_293(v477, v478, v479, v490, 1, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) -> f_297(v477, v478, v479, v490, 1, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) :|: 0 = 0
f_297(v477, v478, v479, v490, 1, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) -> f_301(v477, v478, v479, v490, 1, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) :|: TRUE
f_301(v477, v478, v479, v490, 1, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) -> f_304(v477, v478, v479, v490, 1, v628, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) :|: TRUE
f_304(v477, v478, v479, v490, 1, v628, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) -> f_307(v477, v478, v479, v490, 1, v628, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) :|: v628 != 0
f_304(v477, v478, v479, v490, 1, v628, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) -> f_308(v477, v478, v479, v490, 1, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) :|: v628 = 0
f_307(v477, v478, v479, v490, 1, v628, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) -> f_311(v477, v478, v479, v490, 1, v628, v483, v484, v480, v487, v488, 0, 3, 2, 254, 252, 251, 4) :|: 0 = 0
f_311(v477, v478, v479, v490, 1, v628, v483, v484, v480, v487, v488, 0, 3, 2, 254, 252, 251, 4) -> f_316(v477, v478, v479, v490, 1, v628, v483, v484, v480, v487, v488, 0, 3, 2, 254, 252, 251, 4) :|: TRUE
f_316(v477, v478, v479, v490, 1, v628, v483, v484, v480, v487, v488, 0, 3, 2, 254, 252, 251, 4) -> f_314(v477, v478, v479, v490, 1, v628, v483, v484, v480, v490, v487, v488, 0, 3, 2, 254, 253, 252, 4) :|: TRUE
f_314(v644, v645, v646, v647, 1, v649, v650, v651, v652, v653, v654, v655, 0, 3, 2, 254, 253, 252, 4) -> f_318(v644, v645, v646, v647, 1, v649, v651, v652, v653, v654, v655, 0, 3, 2, 254, 252, 4) :|: 0 = 0
f_318(v644, v645, v646, v647, 1, v649, v651, v652, v653, v654, v655, 0, 3, 2, 254, 252, 4) -> f_320(v644, v645, v646, v647, 1, v649, v734, v652, v653, v654, v655, 0, 3, 2, 254, 252, 4, 255) :|: v734 = 1 + v647 && v734 <= 255
f_320(v644, v645, v646, v647, 1, v649, v734, v652, v653, v654, v655, 0, 3, 2, 254, 252, 4, 255) -> f_322(v644, v645, v646, v647, 1, v649, v734, v652, v653, v654, v655, 0, 3, 2, 254, 252, 4, 255) :|: TRUE
f_322(v644, v645, v646, v647, 1, v649, v734, v652, v653, v654, v655, 0, 3, 2, 254, 252, 4, 255) -> f_324(v644, v645, v646, v647, 1, v649, v734, v652, v653, v654, v655, 0, 3, 2, 254, 252, 4, 255) :|: TRUE
f_324(v644, v645, v646, v647, 1, v649, v734, v652, v653, v654, v655, 0, 3, 2, 254, 252, 4, 255) -> f_285(v644, v645, v646, v647, 1, v649, v652, v653, v734, v654, v655, 0, 3, 2, 254, 252, 255, 4) :|: TRUE
f_285(v512, v513, v514, v515, 1, v517, v518, v519, v520, v521, v522, 0, 3, 2, 254, 252, 255, 4) -> f_287(v512, v513, v514, v515, 1, v517, v518, v519, v520, v521, v522, 0, 3, 2, 254, 252, 255, 4) :|: TRUE
f_287(v512, v513, v514, v515, 1, v517, v518, v519, v520, v521, v522, 0, 3, 2, 254, 252, 255, 4) -> f_289(v512, v513, v514, v520, 1, v517, v518, v519, v515, v521, v522, 0, 3, 2, 254, 252, 255, 4) :|: 0 = 0
f_289(v512, v513, v514, v520, 1, v517, v518, v519, v515, v521, v522, 0, 3, 2, 254, 252, 255, 4) -> f_291(v512, v513, v514, v520, 1, v517, v518, v519, v515, v521, v522, 0, 3, 2, 254, 253, 251, 4) :|: v520 < 255 && v515 <= 253 && v519 <= 253 && v518 <= 251
f_291(v512, v513, v514, v520, 1, v517, v518, v519, v515, v521, v522, 0, 3, 2, 254, 253, 251, 4) -> f_295(v512, v513, v514, v520, 1, v517, v518, v519, v515, v521, v522, 0, 3, 2, 254, 253, 251, 4) :|: 0 = 0
f_295(v512, v513, v514, v520, 1, v517, v518, v519, v515, v521, v522, 0, 3, 2, 254, 253, 251, 4) -> f_299(v512, v513, v514, v520, 1, v517, v518, v519, v515, v521, v522, 0, 3, 2, 254, 253, 251, 4) :|: TRUE
f_299(v512, v513, v514, v520, 1, v517, v518, v519, v515, v521, v522, 0, 3, 2, 254, 253, 251, 4) -> f_303(v512, v513, v514, v520, 1, v627, v518, v519, v515, v521, v522, 0, 3, 2, 254, 253, 251, 4) :|: TRUE
f_303(v512, v513, v514, v520, 1, v627, v518, v519, v515, v521, v522, 0, 3, 2, 254, 253, 251, 4) -> f_305(v512, v513, v514, v520, 1, v627, v518, v519, v515, v521, v522, 0, 3, 2, 254, 253, 251, 4) :|: v627 != 0
f_303(v512, v513, v514, v520, 1, v627, v518, v519, v515, v521, v522, 0, 3, 2, 254, 253, 251, 4) -> f_306(v512, v513, v514, v520, 1, 0, v518, v519, v515, v521, v522, 3, 2, 254, 253, 251, 4) :|: v627 = 0
f_305(v512, v513, v514, v520, 1, v627, v518, v519, v515, v521, v522, 0, 3, 2, 254, 253, 251, 4) -> f_309(v512, v513, v514, v520, 1, v627, v518, v519, v515, v521, v522, 0, 3, 2, 254, 253, 251, 4) :|: 0 = 0
f_309(v512, v513, v514, v520, 1, v627, v518, v519, v515, v521, v522, 0, 3, 2, 254, 253, 251, 4) -> f_313(v512, v513, v514, v520, 1, v627, v518, v519, v515, v521, v522, 0, 3, 2, 254, 253, 251, 4) :|: TRUE
f_313(v512, v513, v514, v520, 1, v627, v518, v519, v515, v521, v522, 0, 3, 2, 254, 253, 251, 4) -> f_314(v512, v513, v514, v520, 1, v627, v515, v520, v518, v519, v521, v522, 0, 3, 2, 254, 253, 252, 4) :|: TRUE
f_306(v512, v513, v514, v520, 1, 0, v518, v519, v515, v521, v522, 3, 2, 254, 253, 251, 4) -> f_310(v512, v513, v514, v520, 1, 0, v518, v519, v515, v521, v522, 3, 2, 254, 253, 251, 4) :|: 0 = 0
f_310(v512, v513, v514, v520, 1, 0, v518, v519, v515, v521, v522, 3, 2, 254, 253, 251, 4) -> f_315(v512, v513, v514, v520, 1, 0, v518, v519, v515, v521, v522, 3, 2, 254, 253, 251, 4) :|: TRUE
f_315(v512, v513, v514, v520, 1, 0, v518, v519, v515, v521, v522, 3, 2, 254, 253, 251, 4) -> f_319(v512, v513, v514, v520, 1, 0, v519, v515, v521, v522, 3, 254, 253, 4) :|: 0 = 0
f_319(v512, v513, v514, v520, 1, 0, v519, v515, v521, v522, 3, 254, 253, 4) -> f_321(v512, v513, v514, v520, 1, 0, v735, v515, v521, v522, 3, 2, 254, 253, 4, 256) :|: v735 = 2 + v520 && v735 <= 256
f_321(v512, v513, v514, v520, 1, 0, v735, v515, v521, v522, 3, 2, 254, 253, 4, 256) -> f_323(v512, v513, v514, v520, 1, 0, v735, v515, v521, v522, 3, 2, 254, 253, 4, 256) :|: TRUE
f_323(v512, v513, v514, v520, 1, 0, v735, v515, v521, v522, 3, 2, 254, 253, 4, 256) -> f_325(v512, v513, v514, v520, 1, 0, v735, v515, v521, v522, 3, 2, 254, 253, 4, 256) :|: TRUE
f_325(v512, v513, v514, v520, 1, 0, v735, v515, v521, v522, 3, 2, 254, 253, 4, 256) -> f_326(v512, v513, v514, v520, 1, 0, v515, v735, v521, v522, 3, 2, 254, 253, 256, 4) :|: TRUE
f_326(v787, v788, v789, v790, 1, 0, v793, v794, v795, v796, 3, 2, 254, 253, 256, 4) -> f_327(v787, v788, v789, v790, 1, 0, v793, v794, v795, v796, 3, 2, 254, 253, 256, 4) :|: TRUE
f_327(v787, v788, v789, v790, 1, 0, v793, v794, v795, v796, 3, 2, 254, 253, 256, 4) -> f_288(v787, v788, v789, v790, 1, 0, v793, v790, v794, v795, v796, 3, 2, 254, 253, 4, 256) :|: TRUE
f_308(v477, v478, v479, v490, 1, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) -> f_312(v477, v478, v479, v490, 1, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) :|: 0 = 0
f_312(v477, v478, v479, v490, 1, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) -> f_317(v477, v478, v479, v490, 1, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) :|: TRUE
f_317(v477, v478, v479, v490, 1, 0, v483, v484, v480, v487, v488, 3, 2, 254, 252, 251, 4) -> f_277(v477, v478, v479, v490, 1, 0, v483, v484, v480, v490, v487, v488, 3, 2, 254, 253, 252, 4) :|: TRUE
f_277(v477, v478, v479, v480, 1, 0, v483, v484, v485, v486, v487, v488, 3, 2, 254, 253, 252, 4) -> f_279(v477, v478, v479, v480, 1, 0, v483, v484, v486, v487, v488, 3, 254, 253, 4) :|: 0 = 0
Combined rules. Obtained 6 rulesP rules:
f_303(v512:0, v513:0, v514:0, v520:0, 1, v627:0, v518:0, v519:0, v515:0, v521:0, v522:0, 0, 3, 2, 254, 253, 251, 4) -> f_303(v512:0, v513:0, v514:0, 1 + v520:0, 1, v627:1, v518:0, v519:0, v520:0, v521:0, v522:0, 0, 3, 2, 254, 253, 251, 4) :|: v520:0 < 255 && v520:0 < 254 && v519:0 < 254 && v627:0 < 0 && v518:0 < 252
f_303(v512:0, v513:0, v514:0, v520:0, 1, v627:0, v518:0, v519:0, v515:0, v521:0, v522:0, 0, 3, 2, 254, 253, 251, 4) -> f_303(v512:0, v513:0, v514:0, 1 + v520:0, 1, v627:1, v518:0, v519:0, v520:0, v521:0, v522:0, 0, 3, 2, 254, 253, 251, 4) :|: v520:0 < 255 && v520:0 < 254 && v519:0 < 254 && v627:0 > 0 && v518:0 < 252
f_304(v477:0, v478:0, v479:0, v490:0, 1, 0, 0, v483:0, v484:0, v480:0, v487:0, v488:0, 3, 2, 254, 252, 251, 4) -> f_304(v477:0, v478:0, v479:0, 2 + v490:0, 1, v628:1, 0, v483:0, v484:0, v490:0, v487:0, v488:0, 3, 2, 254, 252, 251, 4) :|: v490:0 < 255 && v490:0 < 253 && v484:0 < 253 && v483:0 < 252
f_304(v477:0, v478:0, v479:0, v490:0, 1, v628:0, 0, v483:0, v484:0, v480:0, v487:0, v488:0, 3, 2, 254, 252, 251, 4) -> f_303(v477:0, v478:0, v479:0, 1 + v490:0, 1, v627:0, v480:0, v490:0, v490:0, v487:0, v488:0, 0, 3, 2, 254, 253, 251, 4) :|: v628:0 < 0 && v490:0 < 255 && v490:0 < 254 && v480:0 < 252
f_304(v477:0, v478:0, v479:0, v490:0, 1, v628:0, 0, v483:0, v484:0, v480:0, v487:0, v488:0, 3, 2, 254, 252, 251, 4) -> f_303(v477:0, v478:0, v479:0, 1 + v490:0, 1, v627:0, v480:0, v490:0, v490:0, v487:0, v488:0, 0, 3, 2, 254, 253, 251, 4) :|: v628:0 > 0 && v490:0 < 255 && v490:0 < 254 && v480:0 < 252
f_303(v512:0, v513:0, v514:0, v520:0, 1, 0, v518:0, v519:0, v515:0, v521:0, v522:0, 0, 3, 2, 254, 253, 251, 4) -> f_304(v512:0, v513:0, v514:0, 2 + v520:0, 1, v628:0, 0, v515:0, v520:0, v520:0, v521:0, v522:0, 3, 2, 254, 252, 251, 4) :|: v520:0 < 253 && v515:0 < 252 && v520:0 < 255
Filtered unneeded arguments:
   f_303(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_303(x4, x6, x7, x8, x9)
   f_304(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_304(x4, x6, x8, x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 6 rules.P rules:
f_303(v520:0, v627:0, v518:0, v519:0, v515:0) -> f_303(1 + v520:0, v627:1, v518:0, v519:0, v520:0) :|: v520:0 < 254 && v520:0 < 255 && v519:0 < 254 && v518:0 < 252 && v627:0 < 0
f_303(v520:0, v627:0, v518:0, v519:0, v515:0) -> f_303(1 + v520:0, v627:1, v518:0, v519:0, v520:0) :|: v520:0 < 254 && v520:0 < 255 && v519:0 < 254 && v518:0 < 252 && v627:0 > 0
f_304(v490:0, cons_0, v483:0, v484:0, v480:0) -> f_304(2 + v490:0, v628:1, v483:0, v484:0, v490:0) :|: v490:0 < 253 && v490:0 < 255 && v483:0 < 252 && v484:0 < 253 && cons_0 = 0
f_304(v490:0, v628:0, v483:0, v484:0, v480:0) -> f_303(1 + v490:0, v627:0, v480:0, v490:0, v490:0) :|: v490:0 < 255 && v628:0 < 0 && v480:0 < 252 && v490:0 < 254
f_304(v490:0, v628:0, v483:0, v484:0, v480:0) -> f_303(1 + v490:0, v627:0, v480:0, v490:0, v490:0) :|: v490:0 < 255 && v628:0 > 0 && v480:0 < 252 && v490:0 < 254
f_303(v520:0, cons_0, v518:0, v519:0, v515:0) -> f_304(2 + v520:0, v628:0, v515:0, v520:0, v520:0) :|: v515:0 < 252 && v520:0 < 255 && v520:0 < 253 && cons_0 = 0

----------------------------------------

(9)
Obligation:
Rules:
f_303(v520:0, v627:0, v518:0, v519:0, v515:0) -> f_303(1 + v520:0, v627:1, v518:0, v519:0, v520:0) :|: v520:0 < 254 && v520:0 < 255 && v519:0 < 254 && v518:0 < 252 && v627:0 < 0
f_303(x, x1, x2, x3, x4) -> f_303(1 + x, x5, x2, x3, x) :|: x < 254 && x < 255 && x3 < 254 && x2 < 252 && x1 > 0
f_304(v490:0, cons_0, v483:0, v484:0, v480:0) -> f_304(2 + v490:0, v628:1, v483:0, v484:0, v490:0) :|: v490:0 < 253 && v490:0 < 255 && v483:0 < 252 && v484:0 < 253 && cons_0 = 0
f_304(x6, x7, x8, x9, x10) -> f_303(1 + x6, x11, x10, x6, x6) :|: x6 < 255 && x7 < 0 && x10 < 252 && x6 < 254
f_304(x12, x13, x14, x15, x16) -> f_303(1 + x12, x17, x16, x12, x12) :|: x12 < 255 && x13 > 0 && x16 < 252 && x12 < 254
f_303(x18, x19, x20, x21, x22) -> f_304(2 + x18, x23, x22, x18, x18) :|: x22 < 252 && x18 < 255 && x18 < 253 && x19 = 0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_303(x:0, x1:0, x2:0, x3:0, x4:0) -> f_303(1 + x:0, x5:0, x2:0, x3:0, x:0) :|: x2:0 < 252 && x1:0 > 0 && x3:0 < 254 && x:0 < 255 && x:0 < 254
f_304(v490:0:0, cons_0, v483:0:0, v484:0:0, v480:0:0) -> f_304(2 + v490:0:0, v628:1:0, v483:0:0, v484:0:0, v490:0:0) :|: v483:0:0 < 252 && v484:0:0 < 253 && v490:0:0 < 255 && v490:0:0 < 253 && cons_0 = 0
f_303(v520:0:0, v627:0:0, v518:0:0, v519:0:0, v515:0:0) -> f_303(1 + v520:0:0, v627:1:0, v518:0:0, v519:0:0, v520:0:0) :|: v518:0:0 < 252 && v627:0:0 < 0 && v519:0:0 < 254 && v520:0:0 < 255 && v520:0:0 < 254
f_304(x6:0, x7:0, x8:0, x9:0, x10:0) -> f_303(1 + x6:0, x11:0, x10:0, x6:0, x6:0) :|: x10:0 < 252 && x6:0 < 254 && x7:0 < 0 && x6:0 < 255
f_304(x12:0, x13:0, x14:0, x15:0, x16:0) -> f_303(1 + x12:0, x17:0, x16:0, x12:0, x12:0) :|: x16:0 < 252 && x12:0 < 254 && x13:0 > 0 && x12:0 < 255
f_303(x, x1, x2, x3, x4) -> f_304(2 + x, x5, x4, x, x) :|: x4 < 252 && x < 255 && x < 253 && x1 = 0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_303(x, x1, x2, x3, x4)] = 253 - x
[f_304(x5, x6, x7, x8, x9)] = 255 - x5

The following rules are decreasing:
f_303(x:0, x1:0, x2:0, x3:0, x4:0) -> f_303(1 + x:0, x5:0, x2:0, x3:0, x:0) :|: x2:0 < 252 && x1:0 > 0 && x3:0 < 254 && x:0 < 255 && x:0 < 254
f_304(v490:0:0, cons_0, v483:0:0, v484:0:0, v480:0:0) -> f_304(2 + v490:0:0, v628:1:0, v483:0:0, v484:0:0, v490:0:0) :|: v483:0:0 < 252 && v484:0:0 < 253 && v490:0:0 < 255 && v490:0:0 < 253 && cons_0 = 0
f_303(v520:0:0, v627:0:0, v518:0:0, v519:0:0, v515:0:0) -> f_303(1 + v520:0:0, v627:1:0, v518:0:0, v519:0:0, v520:0:0) :|: v518:0:0 < 252 && v627:0:0 < 0 && v519:0:0 < 254 && v520:0:0 < 255 && v520:0:0 < 254
f_304(x6:0, x7:0, x8:0, x9:0, x10:0) -> f_303(1 + x6:0, x11:0, x10:0, x6:0, x6:0) :|: x10:0 < 252 && x6:0 < 254 && x7:0 < 0 && x6:0 < 255
f_304(x12:0, x13:0, x14:0, x15:0, x16:0) -> f_303(1 + x12:0, x17:0, x16:0, x12:0, x12:0) :|: x16:0 < 252 && x12:0 < 254 && x13:0 > 0 && x12:0 < 255
The following rules are bounded:
f_303(x:0, x1:0, x2:0, x3:0, x4:0) -> f_303(1 + x:0, x5:0, x2:0, x3:0, x:0) :|: x2:0 < 252 && x1:0 > 0 && x3:0 < 254 && x:0 < 255 && x:0 < 254
f_304(v490:0:0, cons_0, v483:0:0, v484:0:0, v480:0:0) -> f_304(2 + v490:0:0, v628:1:0, v483:0:0, v484:0:0, v490:0:0) :|: v483:0:0 < 252 && v484:0:0 < 253 && v490:0:0 < 255 && v490:0:0 < 253 && cons_0 = 0
f_303(v520:0:0, v627:0:0, v518:0:0, v519:0:0, v515:0:0) -> f_303(1 + v520:0:0, v627:1:0, v518:0:0, v519:0:0, v520:0:0) :|: v518:0:0 < 252 && v627:0:0 < 0 && v519:0:0 < 254 && v520:0:0 < 255 && v520:0:0 < 254
f_304(x6:0, x7:0, x8:0, x9:0, x10:0) -> f_303(1 + x6:0, x11:0, x10:0, x6:0, x6:0) :|: x10:0 < 252 && x6:0 < 254 && x7:0 < 0 && x6:0 < 255
f_304(x12:0, x13:0, x14:0, x15:0, x16:0) -> f_303(1 + x12:0, x17:0, x16:0, x12:0, x12:0) :|: x16:0 < 252 && x12:0 < 254 && x13:0 > 0 && x12:0 < 255
f_303(x, x1, x2, x3, x4) -> f_304(2 + x, x5, x4, x, x) :|: x4 < 252 && x < 255 && x < 253 && x1 = 0

----------------------------------------

(13)
Obligation:
Rules:
f_303(x, x1, x2, x3, x4) -> f_304(2 + x, x5, x4, x, x) :|: x4 < 252 && x < 255 && x < 253 && x1 = 0

----------------------------------------

(14) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
SCC
----------------------------------------

(17) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_201(v211, v212, v213, v217, 1, v216, v214, v218, v219, 0, 3, 254, 255, 4) -> f_203(v211, v212, v213, v217, 1, v216, v214, v218, v219, 0, 3, 253, 254, 4) :|: v217 < 255 && v214 <= 253 && v213 <= 253
f_203(v211, v212, v213, v217, 1, v216, v214, v218, v219, 0, 3, 253, 254, 4) -> f_207(v211, v212, v213, v217, 1, v216, v214, v218, v219, 0, 3, 253, 254, 4) :|: 0 = 0
f_207(v211, v212, v213, v217, 1, v216, v214, v218, v219, 0, 3, 253, 254, 4) -> f_211(v211, v212, v213, v217, 1, v216, v214, v218, v219, 0, 3, 253, 254, 4) :|: TRUE
f_211(v211, v212, v213, v217, 1, v216, v214, v218, v219, 0, 3, 253, 254, 4) -> f_215(v211, v212, v213, v217, 1, v231, v214, v218, v219, 0, 3, 253, 254, 4) :|: TRUE
f_215(v211, v212, v213, v217, 1, v231, v214, v218, v219, 0, 3, 253, 254, 4) -> f_217(v211, v212, v213, v217, 1, v231, v214, v218, v219, 0, 3, 253, 254, 4) :|: v231 != 0
f_217(v211, v212, v213, v217, 1, v231, v214, v218, v219, 0, 3, 253, 254, 4) -> f_221(v211, v212, v213, v217, 1, v231, v214, v218, v219, 0, 3, 253, 254, 4) :|: 0 = 0
f_221(v211, v212, v213, v217, 1, v231, v214, v218, v219, 0, 3, 253, 254, 4) -> f_225(v211, v212, v213, v217, 1, v231, v214, v218, v219, 0, 3, 253, 254, 4) :|: TRUE
f_225(v211, v212, v213, v217, 1, v231, v214, v218, v219, 0, 3, 253, 254, 4) -> f_229(v211, v212, v213, v217, 1, v231, v218, v219, 0, 3, 253, 254, 4) :|: 0 = 0
f_229(v211, v212, v213, v217, 1, v231, v218, v219, 0, 3, 253, 254, 4) -> f_233(v211, v212, v213, v217, 1, v231, v237, v218, v219, 0, 3, 253, 254, 4, 255) :|: v237 = 1 + v217 && v237 <= 255
f_233(v211, v212, v213, v217, 1, v231, v237, v218, v219, 0, 3, 253, 254, 4, 255) -> f_237(v211, v212, v213, v217, 1, v231, v237, v218, v219, 0, 3, 253, 254, 4, 255) :|: TRUE
f_237(v211, v212, v213, v217, 1, v231, v237, v218, v219, 0, 3, 253, 254, 4, 255) -> f_241(v211, v212, v213, v217, 1, v231, v237, v218, v219, 0, 3, 253, 254, 4, 255) :|: TRUE
f_241(v211, v212, v213, v217, 1, v231, v237, v218, v219, 0, 3, 253, 254, 4, 255) -> f_245(v211, v212, v213, v217, 1, v231, v237, v218, v219, 0, 3, 253, 254, 4, 255) :|: TRUE
f_245(v211, v212, v213, v217, 1, v231, v237, v218, v219, 0, 3, 253, 254, 4, 255) -> f_199(v211, v212, v213, v217, 1, v231, v237, v218, v219, 0, 3, 254, 255, 4) :|: TRUE
f_199(v211, v212, v213, v214, 1, v216, v217, v218, v219, 0, 3, 254, 255, 4) -> f_201(v211, v212, v213, v217, 1, v216, v214, v218, v219, 0, 3, 254, 255, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_201(v211:0, v212:0, v213:0, v217:0, 1, v216:0, v214:0, v218:0, v219:0, 0, 3, 254, 255, 4) -> f_201(v211:0, v212:0, v213:0, 1 + v217:0, 1, v231:0, v217:0, v218:0, v219:0, 0, 3, 254, 255, 4) :|: v214:0 < 254 && v217:0 < 255 && v213:0 < 254 && v231:0 < 0
f_201(v211:0, v212:0, v213:0, v217:0, 1, v216:0, v214:0, v218:0, v219:0, 0, 3, 254, 255, 4) -> f_201(v211:0, v212:0, v213:0, 1 + v217:0, 1, v231:0, v217:0, v218:0, v219:0, 0, 3, 254, 255, 4) :|: v214:0 < 254 && v217:0 < 255 && v213:0 < 254 && v231:0 > 0
Filtered unneeded arguments:
   f_201(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_201(x3, x4, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_201(v213:0, v217:0, v214:0) -> f_201(v213:0, 1 + v217:0, v217:0) :|: v217:0 < 255 && v213:0 < 254 && v214:0 < 254

----------------------------------------

(18)
Obligation:
Rules:
f_201(v213:0, v217:0, v214:0) -> f_201(v213:0, 1 + v217:0, v217:0) :|: v217:0 < 255 && v213:0 < 254 && v214:0 < 254

----------------------------------------

(19) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(20)
Obligation:
Rules:
f_201(v213:0:0, v217:0:0, v214:0:0) -> f_201(v213:0:0, 1 + v217:0:0, v217:0:0) :|: v217:0:0 < 255 && v213:0:0 < 254 && v214:0:0 < 254

----------------------------------------

(21) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_201(x, x1, x2)] = 254 - x1

The following rules are decreasing:
f_201(v213:0:0, v217:0:0, v214:0:0) -> f_201(v213:0:0, 1 + v217:0:0, v217:0:0) :|: v217:0:0 < 255 && v213:0:0 < 254 && v214:0:0 < 254
The following rules are bounded:
f_201(v213:0:0, v217:0:0, v214:0:0) -> f_201(v213:0:0, 1 + v217:0:0, v217:0:0) :|: v217:0:0 < 255 && v213:0:0 < 254 && v214:0:0 < 254

----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
SCC
----------------------------------------

(24) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_200(v184, v185, v186, v187, 1, 0, v190, v191, v192, 3, 2, 254, 256, 4) -> f_202(v184, v185, v186, v190, 1, 0, v187, v191, v192, 3, 2, 254, 256, 4) :|: 0 = 0
f_202(v184, v185, v186, v190, 1, 0, v187, v191, v192, 3, 2, 254, 256, 4) -> f_205(v184, v185, v186, v190, 1, 0, v187, v191, v192, 3, 2, 254, 252, 4) :|: v190 < 255 && v187 <= 252
f_205(v184, v185, v186, v190, 1, 0, v187, v191, v192, 3, 2, 254, 252, 4) -> f_209(v184, v185, v186, v190, 1, 0, v187, v191, v192, 3, 2, 254, 252, 4) :|: 0 = 0
f_209(v184, v185, v186, v190, 1, 0, v187, v191, v192, 3, 2, 254, 252, 4) -> f_213(v184, v185, v186, v190, 1, 0, v187, v191, v192, 3, 2, 254, 252, 4) :|: TRUE
f_213(v184, v185, v186, v190, 1, 0, v187, v191, v192, 3, 2, 254, 252, 4) -> f_216(v184, v185, v186, v190, 1, v232, 0, v187, v191, v192, 3, 2, 254, 252, 4) :|: TRUE
f_216(v184, v185, v186, v190, 1, v232, 0, v187, v191, v192, 3, 2, 254, 252, 4) -> f_220(v184, v185, v186, v190, 1, 0, v187, v191, v192, 3, 2, 254, 252, 4) :|: v232 = 0
f_220(v184, v185, v186, v190, 1, 0, v187, v191, v192, 3, 2, 254, 252, 4) -> f_224(v184, v185, v186, v190, 1, 0, v187, v191, v192, 3, 2, 254, 252, 4) :|: 0 = 0
f_224(v184, v185, v186, v190, 1, 0, v187, v191, v192, 3, 2, 254, 252, 4) -> f_228(v184, v185, v186, v190, 1, 0, v187, v191, v192, 3, 2, 254, 252, 4) :|: TRUE
f_228(v184, v185, v186, v190, 1, 0, v187, v191, v192, 3, 2, 254, 252, 4) -> f_232(v184, v185, v186, v190, 1, 0, v191, v192, 3, 254, 4) :|: 0 = 0
f_232(v184, v185, v186, v190, 1, 0, v191, v192, 3, 254, 4) -> f_236(v184, v185, v186, v190, 1, 0, v240, v191, v192, 3, 2, 254, 4, 256) :|: v240 = 2 + v190 && v240 <= 256
f_236(v184, v185, v186, v190, 1, 0, v240, v191, v192, 3, 2, 254, 4, 256) -> f_240(v184, v185, v186, v190, 1, 0, v240, v191, v192, 3, 2, 254, 4, 256) :|: TRUE
f_240(v184, v185, v186, v190, 1, 0, v240, v191, v192, 3, 2, 254, 4, 256) -> f_244(v184, v185, v186, v190, 1, 0, v240, v191, v192, 3, 2, 254, 4, 256) :|: TRUE
f_244(v184, v185, v186, v190, 1, 0, v240, v191, v192, 3, 2, 254, 4, 256) -> f_197(v184, v185, v186, v190, 1, 0, v240, v191, v192, 3, 2, 254, 256, 4) :|: TRUE
f_197(v184, v185, v186, v187, 1, 0, v190, v191, v192, 3, 2, 254, 256, 4) -> f_200(v184, v185, v186, v187, 1, 0, v190, v191, v192, 3, 2, 254, 256, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_200(v184:0, v185:0, v186:0, v187:0, 1, 0, v190:0, v191:0, v192:0, 3, 2, 254, 256, 4) -> f_200(v184:0, v185:0, v186:0, v190:0, 1, 0, 2 + v190:0, v191:0, v192:0, 3, 2, 254, 256, 4) :|: v187:0 < 253 && v190:0 < 255
Filtered unneeded arguments:
   f_200(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_200(x4, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_200(v187:0, v190:0) -> f_200(v190:0, 2 + v190:0) :|: v187:0 < 253 && v190:0 < 255

----------------------------------------

(25)
Obligation:
Rules:
f_200(v187:0, v190:0) -> f_200(v190:0, 2 + v190:0) :|: v187:0 < 253 && v190:0 < 255

----------------------------------------

(26) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_200 ] = -1/2*f_200_2

The following rules are decreasing:
f_200(v187:0, v190:0) -> f_200(v190:0, 2 + v190:0) :|: v187:0 < 253 && v190:0 < 255

The following rules are bounded:
f_200(v187:0, v190:0) -> f_200(v190:0, 2 + v190:0) :|: v187:0 < 253 && v190:0 < 255


----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
