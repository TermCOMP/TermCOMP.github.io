YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/QXHL5.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 296 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 10 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/QXHL5.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/QXHL5.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca [1048 x i32], align 16
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[1048 x i32] %3)
		%6 = load %2
		%7 = icmp sge %6 0
		br %7, %8, %32
	8:
		%9 = load %2
		%10 = icmp slt %9 1048
		br %10, %11, %32
	11:
		%12 = getelementptr %3, 0, 0
		%13 = load %12
		%14 = icmp eq %13 23
		br %14, %15, %31
	15:
		%16 = load %2
		%17 = sext i32 %16 to i64
		%18 = getelementptr %3, 0, %17
		%19 = load %18
		%20 = icmp eq %19 42
		br %20, %21, %31
	21:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%22 = call i32 @__VERIFIER_nondet_int()
		store %22, %4
		br %23
	23:
		%24 = load %4
		%25 = icmp sge %24 0
		br %25, %26, %30
	26:
		%27 = load %4
		%28 = load %2
		%29 = sub i32 %27, %28
		store %29, %4
		br %23
	30:
		br %31
	31:
		br %32
	32:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_201(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v123, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) -> f_202(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v123, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) :|: 0 <= v124 && 1 <= v123
f_202(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v123, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) -> f_204(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v123, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) :|: 0 = 0
f_204(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v123, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) -> f_206(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v123, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) :|: TRUE
f_206(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v123, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) -> f_208(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) :|: 0 = 0
f_208(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) -> f_210(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) :|: 0 = 0
f_210(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) -> f_212(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v177, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) :|: v177 + v117 = v124 && 0 <= 1047 + v177
f_212(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v177, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) -> f_213(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v177, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) :|: TRUE
f_213(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v177, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) -> f_214(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v177, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) :|: TRUE
f_214(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v177, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) -> f_200(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v177, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) :|: 1 <= v113 && 1 <= v114 && 1 <= v115 && 1 <= v116 && 1 <= v117 && v117 <= 1047 && 5 <= v120 && 0 <= v122 && 0 <= v124 && 0 <= 1047 + v177 && 4 <= v125 && 4 <= v126 && 4192 <= v127 && 4 <= v128 && v113 <= v125 && v114 <= v126 && v115 <= v127 && v116 <= v128
f_200(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v123, v124, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) -> f_201(v113, v114, v115, v116, v117, 1, 23, v120, 42, v122, v124, v123, v125, v126, v127, v128, 0, 3, 4191, 4, 1047, 5, 4192) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_201(v113:0, v114:0, v115:0, v116:0, v117:0, 1, 23, v120:0, 42, v122:0, v177:0 + v117:0, v123:0, v125:0, v126:0, v127:0, v128:0, 0, 3, 4191, 4, 1047, 5, 4192) -> f_201(v113:0, v114:0, v115:0, v116:0, v117:0, 1, 23, v120:0, 42, v122:0, v177:0, v177:0 + v117:0, v125:0, v126:0, v127:0, v128:0, 0, 3, 4191, 4, 1047, 5, 4192) :|: v114:0 > 0 && v113:0 > 0 && v115:0 > 0 && v116:0 > 0 && v117:0 > 0 && v117:0 < 1048 && v120:0 > 4 && v122:0 > -1 && v177:0 + v117:0 > -1 && v177:0 > -1048 && v125:0 > 3 && v123:0 > 0 && v126:0 > 3 && v127:0 > 4191 && v128:0 > 3 && v125:0 >= v113:0 && v126:0 >= v114:0 && v128:0 >= v116:0 && v127:0 >= v115:0
Filtered unneeded arguments:
   f_201(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_201(x1, x2, x3, x4, x5, x8, x10, x11, x12, x13, x14, x15, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_201(v113:0, v114:0, v115:0, v116:0, v117:0, v120:0, v122:0, sum~v177:0~v117:0, v123:0, v125:0, v126:0, v127:0, v128:0) -> f_201(v113:0, v114:0, v115:0, v116:0, v117:0, v120:0, v122:0, v177:0, v177:0 + v117:0, v125:0, v126:0, v127:0, v128:0) :|: v113:0 > 0 && v114:0 > 0 && v115:0 > 0 && v116:0 > 0 && v117:0 > 0 && v117:0 < 1048 && v120:0 > 4 && v122:0 > -1 && v177:0 + v117:0 > -1 && v177:0 > -1048 && v125:0 > 3 && v123:0 > 0 && v126:0 > 3 && v127:0 > 4191 && v128:0 > 3 && v125:0 >= v113:0 && v126:0 >= v114:0 && v127:0 >= v115:0 && v128:0 >= v116:0 && sum~v177:0~v117:0 = v177:0 + v117:0

----------------------------------------

(8)
Obligation:
Rules:
f_201(v113:0, v114:0, v115:0, v116:0, v117:0, v120:0, v122:0, sum~v177:0~v117:0, v123:0, v125:0, v126:0, v127:0, v128:0) -> f_201(v113:0, v114:0, v115:0, v116:0, v117:0, v120:0, v122:0, v177:0, v177:0 + v117:0, v125:0, v126:0, v127:0, v128:0) :|: v113:0 > 0 && v114:0 > 0 && v115:0 > 0 && v116:0 > 0 && v117:0 > 0 && v117:0 < 1048 && v120:0 > 4 && v122:0 > -1 && v177:0 + v117:0 > -1 && v177:0 > -1048 && v125:0 > 3 && v123:0 > 0 && v126:0 > 3 && v127:0 > 4191 && v128:0 > 3 && v125:0 >= v113:0 && v126:0 >= v114:0 && v127:0 >= v115:0 && v128:0 >= v116:0 && sum~v177:0~v117:0 = v177:0 + v117:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_201(v113:0:0, v114:0:0, v115:0:0, v116:0:0, v117:0:0, v120:0:0, v122:0:0, sum~v177:0:0~v117:0:0, v123:0:0, v125:0:0, v126:0:0, v127:0:0, v128:0:0) -> f_201(v113:0:0, v114:0:0, v115:0:0, v116:0:0, v117:0:0, v120:0:0, v122:0:0, v177:0:0, v177:0:0 + v117:0:0, v125:0:0, v126:0:0, v127:0:0, v128:0:0) :|: v127:0:0 >= v115:0:0 && v128:0:0 >= v116:0:0 && v126:0:0 >= v114:0:0 && v125:0:0 >= v113:0:0 && v128:0:0 > 3 && v127:0:0 > 4191 && v126:0:0 > 3 && v123:0:0 > 0 && v125:0:0 > 3 && v177:0:0 > -1048 && v177:0:0 + v117:0:0 > -1 && v122:0:0 > -1 && v120:0:0 > 4 && v117:0:0 < 1048 && v117:0:0 > 0 && v116:0:0 > 0 && v115:0:0 > 0 && v114:0:0 > 0 && v113:0:0 > 0 && sum~v177:0:0~v117:0:0 = v177:0:0 + v117:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_201 ] = f_201_8

The following rules are decreasing:
f_201(v113:0:0, v114:0:0, v115:0:0, v116:0:0, v117:0:0, v120:0:0, v122:0:0, sum~v177:0:0~v117:0:0, v123:0:0, v125:0:0, v126:0:0, v127:0:0, v128:0:0) -> f_201(v113:0:0, v114:0:0, v115:0:0, v116:0:0, v117:0:0, v120:0:0, v122:0:0, v177:0:0, v177:0:0 + v117:0:0, v125:0:0, v126:0:0, v127:0:0, v128:0:0) :|: v127:0:0 >= v115:0:0 && v128:0:0 >= v116:0:0 && v126:0:0 >= v114:0:0 && v125:0:0 >= v113:0:0 && v128:0:0 > 3 && v127:0:0 > 4191 && v126:0:0 > 3 && v123:0:0 > 0 && v125:0:0 > 3 && v177:0:0 > -1048 && v177:0:0 + v117:0:0 > -1 && v122:0:0 > -1 && v120:0:0 > 4 && v117:0:0 < 1048 && v117:0:0 > 0 && v116:0:0 > 0 && v115:0:0 > 0 && v114:0:0 > 0 && v113:0:0 > 0 && sum~v177:0:0~v117:0:0 = v177:0:0 + v117:0:0

The following rules are bounded:
f_201(v113:0:0, v114:0:0, v115:0:0, v116:0:0, v117:0:0, v120:0:0, v122:0:0, sum~v177:0:0~v117:0:0, v123:0:0, v125:0:0, v126:0:0, v127:0:0, v128:0:0) -> f_201(v113:0:0, v114:0:0, v115:0:0, v116:0:0, v117:0:0, v120:0:0, v122:0:0, v177:0:0, v177:0:0 + v117:0:0, v125:0:0, v126:0:0, v127:0:0, v128:0:0) :|: v127:0:0 >= v115:0:0 && v128:0:0 >= v116:0:0 && v126:0:0 >= v114:0:0 && v125:0:0 >= v113:0:0 && v128:0:0 > 3 && v127:0:0 > 4191 && v126:0:0 > 3 && v123:0:0 > 0 && v125:0:0 > 3 && v177:0:0 > -1048 && v177:0:0 + v117:0:0 > -1 && v122:0:0 > -1 && v120:0:0 > 4 && v117:0:0 < 1048 && v117:0:0 > 0 && v116:0:0 > 0 && v115:0:0 > 0 && v114:0:0 > 0 && v113:0:0 > 0 && sum~v177:0:0~v117:0:0 = v177:0:0 + v117:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
