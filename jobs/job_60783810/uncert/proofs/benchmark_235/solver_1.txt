YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zbx2z.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 46 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2323 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 35 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 43 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/zbx2z.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/zbx2z.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%5 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store null, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%6 = load %3
		store %6, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %7
	7:
		%8 = load %5
		%9 = load %2
		%10 = icmp slt %8 %9
		br %10, %11, %24
	11:
		%12 = call noalias *i8 @malloc(i64 16)
		%13 = bitcast *i8 %12 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %13, %3
		%14 = load %5
		%15 = load %3
		%16 = getelementptr %15, 0, 0
		store %14, %16
		%17 = load %4
		%18 = load %3
		%19 = getelementptr %18, 0, 1
		store %17, %19
		%20 = load %3
		store %20, %4
		br %21
	21:
		%22 = load %5
		%23 = add i32 %22, 1
		store %23, %5
		br %7
	24:
		%25 = load %3
		ret %25

*BasicFunctionTypename: "search" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 53
	0:
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca i32, align 4
		%5 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %5)
		%6 = load %3
		store %6, %5
		br %7
	7:
		%8 = load %5
		%9 = getelementptr %8, 0, 0
		%10 = load %9
		%11 = load %4
		%12 = icmp ne %10 %11
		br %12, %13, %17
	13:
		%14 = load %5
		%15 = getelementptr %14, 0, 1
		%16 = load %15
		store %16, %5
		br %7
	17:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 75
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %7, %8
	7:
		store 0, %1
		br %12
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		%9 = load %2
		%10 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %9)
		store %10, %3
		%11 = load %3
		Unnamed Call-Instruction = call BasicVoidType @search(*BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %11, i32 0)
		store 0, %1
		br %12
	12:
		%13 = load %1
		ret %13


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_696(v381, 0, v383, v384, v385, v390, v386, v387, 1, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v404, v401, v405, v394, 3, 7, 4, 8, 9, 2, v403) -> f_697(v381, 0, v383, v384, v385, v390, v387, 1, v386, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v404, v401, v405, v394, 3, 7, 4, 8, 9, 2, v403) :|: 0 = 0
f_697(v381, 0, v383, v384, v385, v390, v387, 1, v386, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v404, v401, v405, v394, 3, 7, 4, 8, 9, 2, v403) -> f_698(v381, 0, v383, v384, v385, v390, v401, 1, v386, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v387, v404, v405, v394, 3, 7, 4, 8, 9, 2, v403) :|: 0 = 0
f_698(v381, 0, v383, v384, v385, v390, v401, 1, v386, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v387, v404, v405, v394, 3, 7, 4, 8, 9, 2, v403) -> f_699(v381, 0, v383, v384, v385, v390, v401, 1, v386, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v387, v404, v405, v394, 3, 7, 4, 8, 9, 2, v403) :|: 0 = 0
f_699(v381, 0, v383, v384, v385, v390, v401, 1, v386, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v387, v404, v405, v394, 3, 7, 4, 8, 9, 2, v403) -> f_700(v381, 0, v383, v384, v385, v390, v401, 1, v386, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v387, v404, v405, v394, 3, 7, 4, 8, 2, 9, v403) :|: 0 < v401 && 2 <= v387 && 2 <= v402 && 3 <= v394 && 1 <= v405
f_700(v381, 0, v383, v384, v385, v390, v401, 1, v386, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v387, v404, v405, v394, 3, 7, 4, 8, 2, 9, v403) -> f_702(v381, 0, v383, v384, v385, v390, v401, 1, v386, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v387, v404, v405, v394, 3, 7, 4, 8, 2, 9, v403) :|: 0 = 0
f_702(v381, 0, v383, v384, v385, v390, v401, 1, v386, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v387, v404, v405, v394, 3, 7, 4, 8, 2, 9, v403) -> f_704(v381, 0, v383, v384, v385, v390, v401, 1, v386, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v387, v404, v405, v394, 3, 7, 4, 8, 2, 9, v403) :|: TRUE
f_704(v381, 0, v383, v384, v385, v390, v401, 1, v386, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v387, v404, v405, v394, 3, 7, 4, 8, 2, 9, v403) -> f_706(v381, 0, v383, v384, v385, v390, v401, 1, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v387, v404, v405, v394, 3, 7, 4, 2, 9, 8, v403) :|: 0 = 0
f_706(v381, 0, v383, v384, v385, v390, v401, 1, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v387, v404, v405, v394, 3, 7, 4, 2, 9, 8, v403) -> f_714(v381, 0, v383, v384, v385, v390, v401, 1, v408, v391, v395, v392, v396, v393, v397, v398, v399, v400, v412, v389, v394, v405, v411, v409, v402, v404, 3, 7, 4, 8, 15, 9, 2, 16, v413) :|: v408 = 8 + v390 && 1 + v410 = v387 && v413 = 1 + v403 && v412 = 15 + v390 && 1 + v411 = v401 && 9 <= v408 && 0 <= v411 && 16 <= v412 && 2 <= v413 && v410 = v401
f_714(v381, 0, v383, v384, v385, v390, v401, 1, v408, v391, v395, v392, v396, v393, v397, v398, v399, v400, v412, v389, v394, v405, v411, v409, v402, v404, 3, 7, 4, 8, 15, 9, 2, 16, v413) -> f_716(v381, 0, v383, v384, v385, v390, v401, 1, v408, v405, v391, v395, v392, v396, v393, v397, v398, v399, v400, v412, v389, v394, v411, v409, v402, v404, 3, 7, 4, 8, 15, 9, 2, 16, v413) :|: 0 = 0
f_716(v381, 0, v383, v384, v385, v390, v401, 1, v408, v405, v391, v395, v392, v396, v393, v397, v398, v399, v400, v412, v389, v394, v411, v409, v402, v404, 3, 7, 4, 8, 15, 9, 2, 16, v413) -> f_718(v381, 0, v383, v384, v385, v390, v401, 1, v408, v405, v391, v395, v392, v396, v393, v397, v398, v399, v400, v412, v394, v411, v409, v402, v404, 3, 7, 4, 8, 15, 2, 9, 16, v413) :|: TRUE
f_718(v381, 0, v383, v384, v385, v390, v401, 1, v408, v405, v391, v395, v392, v396, v393, v397, v398, v399, v400, v412, v394, v411, v409, v402, v404, 3, 7, 4, 8, 15, 2, 9, 16, v413) -> f_720(v381, 0, v383, v384, v385, v390, v401, 1, v408, v405, v391, v395, v392, v396, v393, v397, v398, v399, v400, v412, v394, v411, v409, v402, v404, 3, 7, 4, 8, 15, 2, 9, 16, v413) :|: TRUE
f_720(v381, 0, v383, v384, v385, v390, v401, 1, v408, v405, v391, v395, v392, v396, v393, v397, v398, v399, v400, v412, v394, v411, v409, v402, v404, 3, 7, 4, 8, 15, 2, 9, 16, v413) -> f_695(v381, 0, v383, v384, v385, v390, v401, 1, v408, v405, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v404, v411, v409, v394, 3, 7, 4, 8, 9, 2, v413) :|: TRUE
f_695(v381, 0, v383, v384, v385, v386, v387, 1, v389, v390, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v404, v401, v405, v394, 3, 7, 4, 8, 9, 2, v403) -> f_696(v381, 0, v383, v384, v385, v390, v386, v387, 1, v389, v391, v395, v392, v396, v393, v397, v398, v399, v400, v402, v404, v401, v405, v394, 3, 7, 4, 8, 9, 2, v403) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_696(v381:0, 0, v383:0, v384:0, v385:0, v390:0, v386:0, 1 + (1 + v411:0), 1, v389:0, v391:0, v395:0, v392:0, v396:0, v393:0, v397:0, v398:0, v399:0, v400:0, v402:0, v404:0, 1 + v411:0, v405:0, v394:0, 3, 7, 4, 8, 9, 2, v403:0) -> f_696(v381:0, 0, v383:0, v384:0, v385:0, v405:0, v390:0, 1 + v411:0, 1, 8 + v390:0, v391:0, v395:0, v392:0, v396:0, v393:0, v397:0, v398:0, v399:0, v400:0, v402:0, v404:0, v411:0, v409:0, v394:0, 3, 7, 4, 8, 9, 2, 1 + v403:0) :|: v411:0 > -1 && v402:0 > 1 && v394:0 > 2 && v390:0 > 0 && v405:0 > 0 && v403:0 > 0
Filtered unneeded arguments:
   f_696(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_696(x6, x8, x20, x22, x23, x24, x31)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_696(v390:0, sum~cons_1~sum~cons_1~v411:0, v402:0, sum~cons_1~v411:0, v405:0, v394:0, v403:0) -> f_696(v405:0, 1 + v411:0, v402:0, v411:0, v409:0, v394:0, 1 + v403:0) :|: v402:0 > 1 && v411:0 > -1 && v394:0 > 2 && v390:0 > 0 && v403:0 > 0 && v405:0 > 0 && sum~cons_1~sum~cons_1~v411:0 = 1 + (1 + v411:0) && sum~cons_1~v411:0 = 1 + v411:0

----------------------------------------

(9)
Obligation:
Rules:
f_696(v390:0, sum~cons_1~sum~cons_1~v411:0, v402:0, sum~cons_1~v411:0, v405:0, v394:0, v403:0) -> f_696(v405:0, 1 + v411:0, v402:0, v411:0, v409:0, v394:0, 1 + v403:0) :|: v402:0 > 1 && v411:0 > -1 && v394:0 > 2 && v390:0 > 0 && v403:0 > 0 && v405:0 > 0 && sum~cons_1~sum~cons_1~v411:0 = 1 + (1 + v411:0) && sum~cons_1~v411:0 = 1 + v411:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_696(v390:0:0, sum~cons_1~sum~cons_1~v411:0:0, v402:0:0, sum~cons_1~v411:0:0, v405:0:0, v394:0:0, v403:0:0) -> f_696(v405:0:0, 1 + v411:0:0, v402:0:0, v411:0:0, v409:0:0, v394:0:0, 1 + v403:0:0) :|: v403:0:0 > 0 && v405:0:0 > 0 && v390:0:0 > 0 && v394:0:0 > 2 && v411:0:0 > -1 && v402:0:0 > 1 && sum~cons_1~sum~cons_1~v411:0:0 = 1 + (1 + v411:0:0) && sum~cons_1~v411:0:0 = 1 + v411:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_696(x, x1, x2, x3, x4, x5, x6)] = x1

The following rules are decreasing:
f_696(v390:0:0, sum~cons_1~sum~cons_1~v411:0:0, v402:0:0, sum~cons_1~v411:0:0, v405:0:0, v394:0:0, v403:0:0) -> f_696(v405:0:0, 1 + v411:0:0, v402:0:0, v411:0:0, v409:0:0, v394:0:0, 1 + v403:0:0) :|: v403:0:0 > 0 && v405:0:0 > 0 && v390:0:0 > 0 && v394:0:0 > 2 && v411:0:0 > -1 && v402:0:0 > 1 && sum~cons_1~sum~cons_1~v411:0:0 = 1 + (1 + v411:0:0) && sum~cons_1~v411:0:0 = 1 + v411:0:0
The following rules are bounded:
f_696(v390:0:0, sum~cons_1~sum~cons_1~v411:0:0, v402:0:0, sum~cons_1~v411:0:0, v405:0:0, v394:0:0, v403:0:0) -> f_696(v405:0:0, 1 + v411:0:0, v402:0:0, v411:0:0, v409:0:0, v394:0:0, 1 + v403:0:0) :|: v403:0:0 > 0 && v405:0:0 > 0 && v390:0:0 > 0 && v394:0:0 > 2 && v411:0:0 > -1 && v402:0:0 > 1 && sum~cons_1~sum~cons_1~v411:0:0 = 1 + (1 + v411:0:0) && sum~cons_1~v411:0:0 = 1 + v411:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_577(v239, v240, v241, v242, v243, 0, v250, 1, v247, v245, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 9) -> f_578(v239, v240, v241, v242, v243, 0, v250, 1, v247, v245, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 9) :|: 0 = 0
f_578(v239, v240, v241, v242, v243, 0, v250, 1, v247, v245, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 9) -> f_579(v239, v240, v241, v242, v243, 0, v250, 1, v247, v245, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 2, 9) :|: v250 < v239 && 2 <= v239
f_579(v239, v240, v241, v242, v243, 0, v250, 1, v247, v245, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 2, 9) -> f_581(v239, v240, v241, v242, v243, 0, v250, 1, v247, v245, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 2, 9) :|: 0 = 0
f_581(v239, v240, v241, v242, v243, 0, v250, 1, v247, v245, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 2, 9) -> f_583(v239, v240, v241, v242, v243, 0, v250, 1, v247, v245, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 2, 9) :|: TRUE
f_583(v239, v240, v241, v242, v243, 0, v250, 1, v247, v245, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 2, 9) -> f_585(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v245, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, 3, 7, 4, 8, 15, 2, 9, 16) :|: v262 = 15 + v261 && v261 % 4 = 0 && 16 <= v262
f_585(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v245, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, 3, 7, 4, 8, 15, 2, 9, 16) -> f_587(v239, v240, v241, v242, v243, 0, v250, 1, v261, v245, v247, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_587(v239, v240, v241, v242, v243, 0, v250, 1, v261, v245, v247, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, 3, 7, 4, 8, 15, 2, 9, 16) -> f_589(v239, v240, v241, v242, v243, 0, v250, 1, v261, v245, v247, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_589(v239, v240, v241, v242, v243, 0, v250, 1, v261, v245, v247, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, 3, 7, 4, 8, 15, 2, 9, 16) -> f_591(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v248, v249, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_591(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v248, v249, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, 3, 7, 4, 8, 15, 2, 9, 16) -> f_593(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v248, v249, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_593(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v248, v249, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, 3, 7, 4, 8, 15, 2, 9, 16) -> f_595(v239, v240, v241, v242, v243, 0, v250, 1, v261, v248, v247, v249, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_595(v239, v240, v241, v242, v243, 0, v250, 1, v261, v248, v247, v249, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, 3, 7, 4, 8, 15, 2, 9, 16) -> f_597(v239, v240, v241, v242, v243, 0, v250, 1, v261, v248, v247, v249, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_597(v239, v240, v241, v242, v243, 0, v250, 1, v261, v248, v247, v249, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, 3, 7, 4, 8, 15, 2, 9, 16) -> f_599(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v249, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, v248, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_599(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v249, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, v248, 3, 7, 4, 8, 15, 2, 9, 16) -> f_601(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v249, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, v248, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_601(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v249, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, v248, 3, 7, 4, 8, 15, 2, 9, 16) -> f_603(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, v248, 3, 7, 4, 15, 8, 2, 16, 9) :|: v273 = 8 + v261 && 9 <= v273
f_603(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, v262, v248, 3, 7, 4, 15, 8, 2, 16, 9) -> f_605(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, v275, 2, 9) :|: v275 = 1 + v250 && 2 <= v275
f_605(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, v275, 2, 9) -> f_607(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, v275, 2, 9) :|: 0 = 0
f_607(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, v275, 2, 9) -> f_609(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, v275, 2, 9) :|: TRUE
f_609(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, v275, 2, 9) -> f_611(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, v275, 2, 9) :|: TRUE
f_611(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v245, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, v275, 2, 9) -> f_613(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, v275, 2, 9) :|: 0 = 0
f_613(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, v275, 2, 9) -> f_615(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v275, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 2, 9) :|: v275 = 1 + v250
f_615(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v275, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 2, 9) -> f_617(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v275, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 2, 9) :|: TRUE
f_617(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v275, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 2, 9) -> f_619(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v275, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 2, 9) :|: TRUE
f_619(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v275, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 2, 9) -> f_576(v239, v240, v241, v242, v243, 0, v250, 1, v261, v247, v273, v275, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 9) :|: TRUE
f_576(v239, v240, v241, v242, v243, 0, v245, 1, v247, v248, v249, v250, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 9) -> f_577(v239, v240, v241, v242, v243, 0, v250, 1, v247, v245, v248, v249, v251, v254, v252, v255, v253, v256, v257, v258, v259, v260, 3, 7, 4, 8, 9) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_577(v239:0, v240:0, v241:0, v242:0, v243:0, 0, v250:0, 1, v247:0, v245:0, v248:0, v249:0, v251:0, v254:0, v252:0, v255:0, v253:0, v256:0, v257:0, v258:0, v259:0, v260:0, 3, 7, 4, 8, 9) -> f_577(v239:0, v240:0, v241:0, v242:0, v243:0, 0, 1 + v250:0, 1, v261:0, v250:0, v247:0, 8 + v261:0, v251:0, v254:0, v252:0, v255:0, v253:0, v256:0, v257:0, v258:0, v259:0, v260:0, 3, 7, 4, 8, 9) :|: v239:0 > 1 && v250:0 < v239:0 && v261:0 % 4 = 0 && v261:0 > 0 && v250:0 > 0
Filtered unneeded arguments:
   f_577(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_577(x1, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_577(v239:0, v250:0) -> f_577(v239:0, 1 + v250:0) :|: v250:0 < v239:0 && v250:0 > 0 && v239:0 > 1

----------------------------------------

(16)
Obligation:
Rules:
f_577(v239:0, v250:0) -> f_577(v239:0, 1 + v250:0) :|: v250:0 < v239:0 && v250:0 > 0 && v239:0 > 1

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_577(v239:0:0, v250:0:0) -> f_577(v239:0:0, 1 + v250:0:0) :|: v250:0:0 < v239:0:0 && v250:0:0 > 0 && v239:0:0 > 1

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_577(x, x1)] = x - x1

The following rules are decreasing:
f_577(v239:0:0, v250:0:0) -> f_577(v239:0:0, 1 + v250:0:0) :|: v250:0:0 < v239:0:0 && v250:0:0 > 0 && v239:0:0 > 1
The following rules are bounded:
f_577(v239:0:0, v250:0:0) -> f_577(v239:0:0, 1 + v250:0:0) :|: v250:0:0 < v239:0:0 && v250:0:0 > 0 && v239:0:0 > 1

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
