YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/PYXkC.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1189 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 36 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 6 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 16 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) RankingReductionPairProof [EQUIVALENT, 9 ms]
        (26) YES
    (27) LLVM Symbolic Execution SCC
        (28) SCC2IRS [SOUND, 13 ms]
        (29) IntTRS
        (30) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (31) IntTRS
        (32) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (33) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/PYXkC.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/PYXkC.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = load %4
		%11 = icmp slt %9 %10
		br %11, %12, %23
	12:
		store 0, %3
		br %13
	13:
		%14 = load %3
		%15 = load %2
		%16 = icmp sle %14 %15
		br %16, %17, %20
	17:
		%18 = load %3
		%19 = add i32 %18, 1
		store %19, %3
		br %13
	20:
		%21 = load %2
		%22 = add i32 %21, 1
		store %22, %2
		br %8
	23:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 35 rulesP rules:
f_335(v365, v366, v367, v368, v369, v370, v371, v374, 1, v372, 0, v376, v377, v378, v379, 3, 4) -> f_336(v365, v366, v367, v368, v369, v370, v371, v374, 1, v372, 0, v376, v377, v378, v379, 3, 4) :|: 0 = 0
f_336(v365, v366, v367, v368, v369, v370, v371, v374, 1, v372, 0, v376, v377, v378, v379, 3, 4) -> f_337(v365, v366, v367, v368, v369, v370, v371, v374, 1, v372, 0, v376, v377, v378, v379, 3, 2, 4) :|: v374 < v371 && 2 <= v371
f_337(v365, v366, v367, v368, v369, v370, v371, v374, 1, v372, 0, v376, v377, v378, v379, 3, 2, 4) -> f_339(v365, v366, v367, v368, v369, v370, v371, v374, 1, v372, 0, v376, v377, v378, v379, 3, 2, 4) :|: 0 = 0
f_339(v365, v366, v367, v368, v369, v370, v371, v374, 1, v372, 0, v376, v377, v378, v379, 3, 2, 4) -> f_341(v365, v366, v367, v368, v369, v370, v371, v374, 1, v372, 0, v376, v377, v378, v379, 3, 2, 4) :|: TRUE
f_341(v365, v366, v367, v368, v369, v370, v371, v374, 1, v372, 0, v376, v377, v378, v379, 3, 2, 4) -> f_343(v365, v366, v367, v368, v369, v370, v371, v374, 1, v372, 0, v376, v377, v378, v379, 3, 2, 4) :|: TRUE
f_343(v365, v366, v367, v368, v369, v370, v371, v374, 1, v372, 0, v376, v377, v378, v379, 3, 2, 4) -> f_344(v365, v366, v367, v368, v369, v370, v371, v374, 1, v372, 0, v376, v377, v378, v379, 3, 2, 4) :|: TRUE
f_344(v365, v366, v367, v368, v369, v370, v371, v374, 1, v372, 0, v376, v377, v378, v379, 3, 2, 4) -> f_345(v365, v366, v367, v368, v369, v370, v371, v374, 1, 0, v372, v376, v377, v378, v379, 3, 2, 4) :|: 0 = 0
f_345(v365, v366, v367, v368, v369, v370, v371, v374, 1, 0, v372, v376, v377, v378, v379, 3, 2, 4) -> f_346(v365, v366, v367, v368, v369, v370, v371, v374, 1, 0, v372, v376, v377, v378, v379, 3, 2, 4) :|: 0 = 0
f_346(v365, v366, v367, v368, v369, v370, v371, v374, 1, 0, v372, v376, v377, v378, v379, 3, 2, 4) -> f_347(v365, v366, v367, v368, v369, v370, v371, v374, 1, 0, v372, v376, v377, v378, v379, 3, 2, 4) :|: 0 = 0
f_347(v365, v366, v367, v368, v369, v370, v371, v374, 1, 0, v372, v376, v377, v378, v379, 3, 2, 4) -> f_348(v365, v366, v367, v368, v369, v370, v371, v374, 1, 0, v372, v376, v377, v378, v379, 3, 2, 4) :|: TRUE
f_348(v365, v366, v367, v368, v369, v370, v371, v374, 1, 0, v372, v376, v377, v378, v379, 3, 2, 4) -> f_361(v365, v366, v367, v368, v369, v370, v371, v374, 1, 0, v372, v374, v372, v376, v377, v378, v379, 0, 3, 2, 4) :|: TRUE
f_361(v522, v523, v524, v525, v526, v527, v528, v529, 1, v531, v532, v533, v534, v535, v536, v537, v538, 0, 3, 2, 4) -> f_378(v522, v523, v524, v525, v526, v527, v528, v529, 1, v531, v532, v533, v534, v535, v536, v537, v538, 0, 3, 2, 4) :|: TRUE
f_378(v622, v623, v624, v625, v626, v627, v628, v629, 1, v631, v632, v633, v634, v635, v636, v637, v638, 0, 3, 2, 4) -> f_395(v622, v623, v624, v625, v626, v627, v628, v629, 1, v631, v632, v633, v634, v635, v636, v637, v638, 0, 3, 2, 4) :|: TRUE
f_395(v723, v724, v725, v726, v727, v728, v729, v730, 1, v732, v733, v734, v735, v736, v737, v738, v739, 0, 3, 2, 4) -> f_412(v723, v724, v725, v726, v727, v728, v729, v730, 1, v732, v733, v734, v735, v736, v737, v738, v739, 0, 3, 2, 4) :|: TRUE
f_412(v824, v825, v826, v827, v828, v829, v830, v831, 1, v833, v834, v835, v836, v837, v838, v839, v840, 0, 3, 2, 4) -> f_429(v824, v825, v826, v827, v828, v829, v830, v831, 1, v833, v834, v835, v836, v837, v838, v839, v840, 0, 3, 2, 4) :|: TRUE
f_429(v925, v926, v927, v928, v929, v930, v931, v932, 1, v934, v935, v936, v937, v938, v939, v940, v941, 0, 3, 2, 4) -> f_431(v925, v926, v927, v928, v929, v930, v931, v932, 1, v934, v936, v937, v938, v939, v940, v941, 0, 3, 2, 4) :|: 0 = 0
f_431(v925, v926, v927, v928, v929, v930, v931, v932, 1, v934, v936, v937, v938, v939, v940, v941, 0, 3, 2, 4) -> f_433(v925, v926, v927, v928, v929, v930, v931, v932, 1, v934, v951, v937, v938, v939, v940, v941, 0, 3, 2, 4) :|: v951 = 1 + v934 && 1 <= v951
f_433(v925, v926, v927, v928, v929, v930, v931, v932, 1, v934, v951, v937, v938, v939, v940, v941, 0, 3, 2, 4) -> f_435(v925, v926, v927, v928, v929, v930, v931, v932, 1, v934, v951, v937, v938, v939, v940, v941, 0, 3, 2, 4) :|: TRUE
f_435(v925, v926, v927, v928, v929, v930, v931, v932, 1, v934, v951, v937, v938, v939, v940, v941, 0, 3, 2, 4) -> f_437(v925, v926, v927, v928, v929, v930, v931, v932, 1, v934, v951, v937, v938, v939, v940, v941, 0, 3, 2, 4) :|: TRUE
f_437(v925, v926, v927, v928, v929, v930, v931, v932, 1, v934, v951, v937, v938, v939, v940, v941, 0, 3, 2, 4) -> f_438(v925, v926, v927, v928, v929, v930, v931, v932, 1, v934, v937, v951, v938, v939, v940, v941, 0, 3, 4) :|: TRUE
f_438(v987, v988, v989, v990, v991, v992, v993, v994, 1, v996, v997, v998, v999, v1000, v1001, v1002, 0, 3, 4) -> f_439(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, v997, v996, v999, v1000, v1001, v1002, 0, 3, 4) :|: 0 = 0
f_439(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, v997, v996, v999, v1000, v1001, v1002, 0, 3, 4) -> f_440(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, v997, v996, v999, v1000, v1001, v1002, 0, 3, 4) :|: 0 = 0
f_440(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, v997, v996, v999, v1000, v1001, v1002, 0, 3, 4) -> f_441(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, v997, v996, v999, v1000, v1001, v1002, 0, 3, 2, 4) :|: v998 <= v994 && 1 <= v994 && 0 <= v997 && 2 <= v993
f_440(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, v997, v996, v999, v1000, v1001, v1002, 0, 3, 4) -> f_442(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, v997, v999, v1000, v1001, v1002, 0, 3, 4) :|: v994 < v998 && v996 = v994
f_441(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, v997, v996, v999, v1000, v1001, v1002, 0, 3, 2, 4) -> f_443(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, v997, v996, v999, v1000, v1001, v1002, 0, 3, 2, 4) :|: 0 = 0
f_443(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, v997, v996, v999, v1000, v1001, v1002, 0, 3, 2, 4) -> f_445(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, v997, v996, v999, v1000, v1001, v1002, 0, 3, 2, 4) :|: TRUE
f_445(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, v997, v996, v999, v1000, v1001, v1002, 0, 3, 2, 4) -> f_429(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, v996, v998, v997, v999, v1000, v1001, v1002, 0, 3, 2, 4) :|: TRUE
f_442(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, v997, v999, v1000, v1001, v1002, 0, 3, 4) -> f_444(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, 0, v997, v999, v1000, v1001, v1002, 3, 4) :|: 0 = 0
f_444(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, 0, v997, v999, v1000, v1001, v1002, 3, 4) -> f_446(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, 0, v997, v999, v1000, v1001, v1002, 3, 4) :|: TRUE
f_446(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, 0, v997, v999, v1000, v1001, v1002, 3, 4) -> f_447(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, 0, v999, v1000, v1001, v1002, 3, 4) :|: 0 = 0
f_447(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, 0, v999, v1000, v1001, v1002, 3, 4) -> f_448(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, 0, v999, v1000, v1001, v1002, 3, 4) :|: v998 = 1 + v994
f_448(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, 0, v999, v1000, v1001, v1002, 3, 4) -> f_449(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, 0, v999, v1000, v1001, v1002, 3, 4) :|: TRUE
f_449(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, 0, v999, v1000, v1001, v1002, 3, 4) -> f_450(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, 0, v999, v1000, v1001, v1002, 3, 4) :|: TRUE
f_450(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, 0, v999, v1000, v1001, v1002, 3, 4) -> f_334(v987, v988, v989, v990, v991, v992, v993, v994, 1, v998, 0, v999, v1000, v1001, v1002, 3, 4) :|: TRUE
f_334(v365, v366, v367, v368, v369, v370, v371, v372, 1, v374, 0, v376, v377, v378, v379, 3, 4) -> f_335(v365, v366, v367, v368, v369, v370, v371, v374, 1, v372, 0, v376, v377, v378, v379, 3, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_440(v987:0, v988:0, v989:0, v990:0, v991:0, v992:0, v993:0, v994:0, 1, 1 + v994:0, v997:0, v994:0, v999:0, v1000:0, v1001:0, v1002:0, 0, 3, 4) -> f_440(v987:0, v988:0, v989:0, v990:0, v991:0, v992:0, v993:0, 1 + v994:0, 1, 1, v994:0, 0, v999:0, v1000:0, v1001:0, v1002:0, 0, 3, 4) :|: v993:0 > 1 && v994:0 < 1 + v994:0 && v993:0 > 1 + v994:0
f_440(v987:0, v988:0, v989:0, v990:0, v991:0, v992:0, v993:0, v994:0, 1, v998:0, v997:0, v996:0, v999:0, v1000:0, v1001:0, v1002:0, 0, 3, 4) -> f_440(v987:0, v988:0, v989:0, v990:0, v991:0, v992:0, v993:0, v994:0, 1, 1 + v998:0, v997:0, v998:0, v999:0, v1000:0, v1001:0, v1002:0, 0, 3, 4) :|: v998:0 > -1 && v994:0 > 0 && v998:0 <= v994:0 && v993:0 > 1 && v997:0 > -1
Filtered unneeded arguments:
   f_440(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_440(x7, x8, x10, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_440(v993:0, v994:0, sum~cons_1~v994:0, v997:0, v994:01) -> f_440(v993:0, 1 + v994:0, 1, v994:0, 0) :|: v994:0 < 1 + v994:0 && v993:0 > 1 + v994:0 && v993:0 > 1 && sum~cons_1~v994:0 = 1 + v994:0 && v994:0 = v994:01
f_440(v993:0, v994:0, v998:0, v997:0, v996:0) -> f_440(v993:0, v994:0, 1 + v998:0, v997:0, v998:0) :|: v994:0 > 0 && v998:0 > -1 && v998:0 <= v994:0 && v997:0 > -1 && v993:0 > 1

----------------------------------------

(9)
Obligation:
Rules:
f_440(v993:0, v994:0, sum~cons_1~v994:0, v997:0, v994:01) -> f_440(v993:0, 1 + v994:0, 1, v994:0, 0) :|: v994:0 < 1 + v994:0 && v993:0 > 1 + v994:0 && v993:0 > 1 && sum~cons_1~v994:0 = 1 + v994:0 && v994:0 = v994:01
f_440(x, x1, x2, x3, x4) -> f_440(x, x1, 1 + x2, x3, x2) :|: x1 > 0 && x2 > -1 && x2 <= x1 && x3 > -1 && x > 1

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_440(x:0, x1:0, x2:0, x3:0, x4:0) -> f_440(x:0, x1:0, 1 + x2:0, x3:0, x2:0) :|: x3:0 > -1 && x:0 > 1 && x2:0 <= x1:0 && x2:0 > -1 && x1:0 > 0
f_440(v993:0:0, v994:01:0, sum~cons_1~v994:01:0, v997:0:0, v994:01:01) -> f_440(v993:0:0, 1 + v994:01:0, 1, v994:01:0, 0) :|: v994:01:0 < 1 + v994:01:0 && v993:0:0 > 1 + v994:01:0 && v993:0:0 > 1 && sum~cons_1~v994:01:0 = 1 + v994:01:0 && v994:01:0 = v994:01:01

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_440 ] = 4*f_440_1 + -4*f_440_2

The following rules are decreasing:
f_440(v993:0:0, v994:01:0, sum~cons_1~v994:01:0, v997:0:0, v994:01:01) -> f_440(v993:0:0, 1 + v994:01:0, 1, v994:01:0, 0) :|: v994:01:0 < 1 + v994:01:0 && v993:0:0 > 1 + v994:01:0 && v993:0:0 > 1 && sum~cons_1~v994:01:0 = 1 + v994:01:0 && v994:01:0 = v994:01:01

The following rules are bounded:
f_440(v993:0:0, v994:01:0, sum~cons_1~v994:01:0, v997:0:0, v994:01:01) -> f_440(v993:0:0, 1 + v994:01:0, 1, v994:01:0, 0) :|: v994:01:0 < 1 + v994:01:0 && v993:0:0 > 1 + v994:01:0 && v993:0:0 > 1 && sum~cons_1~v994:01:0 = 1 + v994:01:0 && v994:01:0 = v994:01:01


----------------------------------------

(13)
Obligation:
Rules:
f_440(x:0, x1:0, x2:0, x3:0, x4:0) -> f_440(x:0, x1:0, 1 + x2:0, x3:0, x2:0) :|: x3:0 > -1 && x:0 > 1 && x2:0 <= x1:0 && x2:0 > -1 && x1:0 > 0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_440(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_440(x:0:0, x1:0:0, 1 + x2:0:0, x3:0:0, x2:0:0) :|: x2:0:0 > -1 && x1:0:0 > 0 && x2:0:0 <= x1:0:0 && x:0:0 > 1 && x3:0:0 > -1

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_440(x1, x2, x3, x4, x5) -> f_440(x1, x2, x3, x4)

----------------------------------------

(17)
Obligation:
Rules:
f_440(x:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_440(x:0:0, x1:0:0, 1 + x2:0:0, x3:0:0) :|: x2:0:0 > -1 && x1:0:0 > 0 && x2:0:0 <= x1:0:0 && x:0:0 > 1 && x3:0:0 > -1

----------------------------------------

(18) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_440 ] = -1*f_440_3 + f_440_2

The following rules are decreasing:
f_440(x:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_440(x:0:0, x1:0:0, 1 + x2:0:0, x3:0:0) :|: x2:0:0 > -1 && x1:0:0 > 0 && x2:0:0 <= x1:0:0 && x:0:0 > 1 && x3:0:0 > -1

The following rules are bounded:
f_440(x:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_440(x:0:0, x1:0:0, 1 + x2:0:0, x3:0:0) :|: x2:0:0 > -1 && x1:0:0 > 0 && x2:0:0 <= x1:0:0 && x:0:0 > 1 && x3:0:0 > -1


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_302(v220, v221, v222, v223, v224, v225, v226, 1, v229, v228, v230, v231, v232, v233, 0, 3, 4) -> f_305(v220, v221, v222, v223, v224, v225, v226, 1, v229, v228, v230, v231, v232, v233, 0, 3, 4) :|: 0 = 0
f_305(v220, v221, v222, v223, v224, v225, v226, 1, v229, v228, v230, v231, v232, v233, 0, 3, 4) -> f_308(v220, v221, v222, v223, v224, v225, v226, 1, v229, v228, v230, v231, v232, v233, 0, 3, 2, 4) :|: v229 <= v224 && 1 <= v224 && 2 <= v226
f_308(v220, v221, v222, v223, v224, v225, v226, 1, v229, v228, v230, v231, v232, v233, 0, 3, 2, 4) -> f_312(v220, v221, v222, v223, v224, v225, v226, 1, v229, v228, v230, v231, v232, v233, 0, 3, 2, 4) :|: 0 = 0
f_312(v220, v221, v222, v223, v224, v225, v226, 1, v229, v228, v230, v231, v232, v233, 0, 3, 2, 4) -> f_315(v220, v221, v222, v223, v224, v225, v226, 1, v229, v228, v230, v231, v232, v233, 0, 3, 2, 4) :|: TRUE
f_315(v220, v221, v222, v223, v224, v225, v226, 1, v229, v228, v230, v231, v232, v233, 0, 3, 2, 4) -> f_318(v220, v221, v222, v223, v224, v225, v226, 1, v229, v230, v231, v232, v233, 0, 3, 2, 4) :|: 0 = 0
f_318(v220, v221, v222, v223, v224, v225, v226, 1, v229, v230, v231, v232, v233, 0, 3, 2, 4) -> f_321(v220, v221, v222, v223, v224, v225, v226, 1, v229, v293, v230, v231, v232, v233, 0, 3, 2, 4) :|: v293 = 1 + v229 && 2 <= v293
f_321(v220, v221, v222, v223, v224, v225, v226, 1, v229, v293, v230, v231, v232, v233, 0, 3, 2, 4) -> f_324(v220, v221, v222, v223, v224, v225, v226, 1, v229, v293, v230, v231, v232, v233, 0, 3, 2, 4) :|: TRUE
f_324(v220, v221, v222, v223, v224, v225, v226, 1, v229, v293, v230, v231, v232, v233, 0, 3, 2, 4) -> f_327(v220, v221, v222, v223, v224, v225, v226, 1, v229, v293, v230, v231, v232, v233, 0, 3, 2, 4) :|: TRUE
f_327(v220, v221, v222, v223, v224, v225, v226, 1, v229, v293, v230, v231, v232, v233, 0, 3, 2, 4) -> f_299(v220, v221, v222, v223, v224, v225, v226, 1, v229, v293, v230, v231, v232, v233, 0, 3, 4) :|: TRUE
f_299(v220, v221, v222, v223, v224, v225, v226, 1, v228, v229, v230, v231, v232, v233, 0, 3, 4) -> f_302(v220, v221, v222, v223, v224, v225, v226, 1, v229, v228, v230, v231, v232, v233, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_302(v220:0, v221:0, v222:0, v223:0, v224:0, v225:0, v226:0, 1, v229:0, v228:0, v230:0, v231:0, v232:0, v233:0, 0, 3, 4) -> f_302(v220:0, v221:0, v222:0, v223:0, v224:0, v225:0, v226:0, 1, 1 + v229:0, v229:0, v230:0, v231:0, v232:0, v233:0, 0, 3, 4) :|: v224:0 > 0 && v229:0 <= v224:0 && v229:0 > 0 && v226:0 > 1
Filtered unneeded arguments:
   f_302(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_302(x5, x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_302(v224:0, v226:0, v229:0) -> f_302(v224:0, v226:0, 1 + v229:0) :|: v229:0 <= v224:0 && v224:0 > 0 && v226:0 > 1 && v229:0 > 0

----------------------------------------

(22)
Obligation:
Rules:
f_302(v224:0, v226:0, v229:0) -> f_302(v224:0, v226:0, 1 + v229:0) :|: v229:0 <= v224:0 && v224:0 > 0 && v226:0 > 1 && v229:0 > 0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_302(v224:0:0, v226:0:0, v229:0:0) -> f_302(v224:0:0, v226:0:0, 1 + v229:0:0) :|: v226:0:0 > 1 && v229:0:0 > 0 && v224:0:0 > 0 && v229:0:0 <= v224:0:0

----------------------------------------

(25) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_302 ] = -1*f_302_3 + f_302_1

The following rules are decreasing:
f_302(v224:0:0, v226:0:0, v229:0:0) -> f_302(v224:0:0, v226:0:0, 1 + v229:0:0) :|: v226:0:0 > 1 && v229:0:0 > 0 && v224:0:0 > 0 && v229:0:0 <= v224:0:0

The following rules are bounded:
f_302(v224:0:0, v226:0:0, v229:0:0) -> f_302(v224:0:0, v226:0:0, 1 + v229:0:0) :|: v226:0:0 > 1 && v229:0:0 > 0 && v224:0:0 > 0 && v229:0:0 <= v224:0:0


----------------------------------------

(26)
YES

----------------------------------------

(27)
Obligation:
SCC
----------------------------------------

(28) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_260(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) -> f_263(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) :|: 0 = 0
f_263(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) -> f_266(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) :|: v182 < v178
f_266(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) -> f_270(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) :|: 0 = 0
f_270(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) -> f_273(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) :|: TRUE
f_273(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) -> f_276(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) :|: TRUE
f_276(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) -> f_279(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) :|: TRUE
f_279(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) -> f_282(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) :|: 0 = 0
f_282(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) -> f_285(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) :|: 0 = 0
f_285(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) -> f_289(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 2, 4) :|: v182 < 0 && 2 + v179 <= 0 && 2 + v176 <= 0
f_289(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 2, 4) -> f_293(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 2, 4) :|: 0 = 0
f_293(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 2, 4) -> f_297(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 2, 4) :|: TRUE
f_297(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 2, 4) -> f_301(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v183, v184, v185, v186, 3, 2, 4) :|: 0 = 0
f_301(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v183, v184, v185, v186, 3, 2, 4) -> f_304(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v246, v183, v184, v185, v186, 3, 2, 4) :|: v246 = 1 + v182 && v246 <= 0
f_304(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v246, v183, v184, v185, v186, 3, 2, 4) -> f_307(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v246, v183, v184, v185, v186, 3, 2, 4) :|: TRUE
f_307(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v246, v183, v184, v185, v186, 3, 2, 4) -> f_311(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v246, v183, v184, v185, v186, 3, 2, 4) :|: TRUE
f_311(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v246, v183, v184, v185, v186, 3, 2, 4) -> f_257(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v246, v183, v184, v185, v186, 3, 4) :|: TRUE
f_257(v172, v173, v174, v175, v176, v177, v178, v179, 1, 0, v182, v183, v184, v185, v186, 3, 4) -> f_260(v172, v173, v174, v175, v176, v177, v178, v182, 1, 0, v179, v183, v184, v185, v186, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_260(v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, v178:0, v182:0, 1, 0, v179:0, v183:0, v184:0, v185:0, v186:0, 3, 4) -> f_260(v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, v178:0, 1 + v182:0, 1, 0, v182:0, v183:0, v184:0, v185:0, v186:0, 3, 4) :|: v182:0 < v178:0 && v179:0 < -1 && v182:0 < 0 && v176:0 < -1
Filtered unneeded arguments:
   f_260(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_260(x5, x7, x8, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_260(v176:0, v178:0, v182:0, v179:0) -> f_260(v176:0, v178:0, 1 + v182:0, v182:0) :|: v179:0 < -1 && v182:0 < v178:0 && v176:0 < -1 && v182:0 < 0

----------------------------------------

(29)
Obligation:
Rules:
f_260(v176:0, v178:0, v182:0, v179:0) -> f_260(v176:0, v178:0, 1 + v182:0, v182:0) :|: v179:0 < -1 && v182:0 < v178:0 && v176:0 < -1 && v182:0 < 0

----------------------------------------

(30) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(31)
Obligation:
Rules:
f_260(v176:0:0, v178:0:0, v182:0:0, v179:0:0) -> f_260(v176:0:0, v178:0:0, 1 + v182:0:0, v182:0:0) :|: v176:0:0 < -1 && v182:0:0 < 0 && v182:0:0 < v178:0:0 && v179:0:0 < -1

----------------------------------------

(32) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_260(x, x1, x2, x3)] = -x2

The following rules are decreasing:
f_260(v176:0:0, v178:0:0, v182:0:0, v179:0:0) -> f_260(v176:0:0, v178:0:0, 1 + v182:0:0, v182:0:0) :|: v176:0:0 < -1 && v182:0:0 < 0 && v182:0:0 < v178:0:0 && v179:0:0 < -1
The following rules are bounded:
f_260(v176:0:0, v178:0:0, v182:0:0, v179:0:0) -> f_260(v176:0:0, v178:0:0, 1 + v182:0:0, v182:0:0) :|: v176:0:0 < -1 && v182:0:0 < 0 && v182:0:0 < v178:0:0 && v179:0:0 < -1

----------------------------------------

(33)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
