YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/SiPkV.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 783 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 47 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 15 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/SiPkV.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/SiPkV.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "isOdd" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp eq %4 0
		br %5, %6, %7
	6:
		store 0, %2
		br %15
	7:
		%8 = load %3
		%9 = icmp eq %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %15
	11:
		%12 = load %3
		%13 = sub i32 %12, 1
		%14 = call i32 @isEven(i32 %13)
		store %14, %2
		br %15
	15:
		%16 = load %2
		ret %16

*BasicFunctionTypename: "isEven" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 32
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp eq %4 0
		br %5, %6, %7
	6:
		store 1, %2
		br %15
	7:
		%8 = load %3
		%9 = icmp eq %8 1
		br %9, %10, %11
	10:
		store 0, %2
		br %15
	11:
		%12 = load %3
		%13 = sub i32 %12, 1
		%14 = call i32 @isOdd(i32 %13)
		store %14, %2
		br %15
	15:
		%16 = load %2
		ret %16

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 53
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 0
		br %6, %7, %8
	7:
		store 0, %1
		br %16
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%9 = load %2
		%10 = call i32 @isOdd(i32 %9)
		store %10, %3
		%11 = load %3
		%12 = icmp sge %11 0
		br %12, %13, %14
	13:
		store 0, %1
		br %16
	14:
		br %15
	15:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	16:
		%17 = load %1
		ret %17


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 32 rulesP rules:
f_308(v58, v67, v59, v60, v61, v62, v63, v64, v68, 0, v66, 3, 1, 4) -> f_309(v58, v67, v69, v59, v60, v61, v62, v63, v64, v68, v70, 0, v66, 3, 1, 4) :|: 1 <= v69 && v70 = 3 + v69 && 4 <= v70
f_309(v58, v67, v69, v59, v60, v61, v62, v63, v64, v68, v70, 0, v66, 3, 1, 4) -> f_310(v58, v67, v69, v59, v60, v61, v62, v63, v64, v68, v70, 0, v66, 3, 1, 4) :|: TRUE
f_310(v58, v67, v69, v59, v60, v61, v62, v63, v64, v68, v70, 0, v66, 3, 1, 4) -> f_311(v58, v67, v69, v59, v60, v61, v62, v63, v64, v68, v70, 0, v66, 3, 1, 4) :|: TRUE
f_311(v58, v67, v69, v59, v60, v61, v62, v63, v64, v68, v70, 0, v66, 3, 1, 4) -> f_312(v58, v67, v69, v59, v60, v61, v62, v63, v64, v68, v70, 0, v66, 3, 1, 4) :|: 0 = 0
f_312(v58, v67, v69, v59, v60, v61, v62, v63, v64, v68, v70, 0, v66, 3, 1, 4) -> f_314(v58, v67, v69, v59, v60, v61, v62, v63, v64, v68, v70, 0, v66, 3, 1, 4) :|: v58 != 0
f_314(v58, v67, v69, v59, v60, v61, v62, v63, v64, v68, v70, 0, v66, 3, 1, 4) -> f_316(v58, v67, v69, 0, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 1, 4) :|: 0 = 0
f_316(v58, v67, v69, 0, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 1, 4) -> f_318(v58, v67, v69, 0, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 1, 4) :|: TRUE
f_318(v58, v67, v69, 0, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 1, 4) -> f_320(v58, v67, v69, 0, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 1, 4) :|: 0 = 0
f_320(v58, v67, v69, 0, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 1, 4) -> f_323(v58, v67, v69, 0, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 2, 1, 4) :|: v58 != 1 && 2 <= v58
f_323(v58, v67, v69, 0, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 2, 1, 4) -> f_326(v58, v67, v69, 0, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 2, 1, 4) :|: 0 = 0
f_326(v58, v67, v69, 0, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 2, 1, 4) -> f_329(v58, v67, v69, 0, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 2, 1, 4) :|: TRUE
f_329(v58, v67, v69, 0, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 2, 1, 4) -> f_332(v58, v67, v69, 0, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 2, 1, 4) :|: 0 = 0
f_332(v58, v67, v69, 0, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 2, 1, 4) -> f_335(v58, v67, v69, 0, v83, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 1, 2, 4) :|: 1 + v83 = v58 && 1 <= v83
f_335(v58, v67, v69, 0, v83, v59, v60, v61, v62, v63, v64, v68, v70, v66, 3, 1, 2, 4) -> f_338(v83, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, 0, v66, v58, 3, 1, 2, 4) :|: 0 = 0
f_338(v83, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, 0, v66, v58, 3, 1, 2, 4) -> f_341(v83, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, 0, v66, v58, 3, 1, 2, 4) :|: TRUE
f_341(v83, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, 0, v66, v58, 3, 1, 2, 4) -> f_346(v83, v95, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, 0, v66, v58, 3, 1, 2, 4) :|: 1 <= v95 && v96 = 3 + v95 && 4 <= v96
f_346(v83, v95, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, 0, v66, v58, 3, 1, 2, 4) -> f_349(v83, v95, v97, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, 0, v66, v58, 3, 1, 2, 4) :|: 1 <= v97 && v98 = 3 + v97 && 4 <= v98
f_349(v83, v95, v97, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, 0, v66, v58, 3, 1, 2, 4) -> f_352(v83, v95, v97, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, 0, v66, v58, 3, 1, 2, 4) :|: TRUE
f_352(v83, v95, v97, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, 0, v66, v58, 3, 1, 2, 4) -> f_354(v83, v95, v97, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, 0, v66, v58, 3, 1, 2, 4) :|: TRUE
f_354(v83, v95, v97, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, 0, v66, v58, 3, 1, 2, 4) -> f_356(v83, v95, v97, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, 0, v66, v58, 3, 1, 2, 4) :|: 0 = 0
f_356(v83, v95, v97, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, 0, v66, v58, 3, 1, 2, 4) -> f_358(v83, v95, v97, 0, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 2, 4) :|: 0 = 0
f_358(v83, v95, v97, 0, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 2, 4) -> f_360(v83, v95, v97, 0, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 2, 4) :|: TRUE
f_360(v83, v95, v97, 0, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 2, 4) -> f_361(v83, v95, v97, 0, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 2, 4) :|: 0 = 0
f_361(v83, v95, v97, 0, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 2, 4) -> f_363(v83, v95, v97, 0, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 4, 2) :|: v83 != 1 && 2 <= v83 && 3 <= v58
f_363(v83, v95, v97, 0, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 4, 2) -> f_365(v83, v95, v97, 0, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 4, 2) :|: 0 = 0
f_365(v83, v95, v97, 0, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 4, 2) -> f_367(v83, v95, v97, 0, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 4, 2) :|: TRUE
f_367(v83, v95, v97, 0, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 4, 2) -> f_369(v83, v95, v97, 0, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 4, 2) :|: 0 = 0
f_369(v83, v95, v97, 0, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 4, 2) -> f_371(v83, v95, v97, 0, v106, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 4, 2) :|: 1 + v106 = v83 && 1 <= v106
f_371(v83, v95, v97, 0, v106, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v96, v98, v66, v58, 3, 1, 4, 2) -> f_373(v106, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v95, v96, v97, v98, 0, v66, v58, v83, 3, 1, 4, 2) :|: 0 = 0
f_373(v106, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v95, v96, v97, v98, 0, v66, v58, v83, 3, 1, 4, 2) -> f_375(v106, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v95, v96, v97, v98, 0, v66, v58, v83, 3, 1, 4, 2) :|: TRUE
f_375(v106, v59, v60, v61, v62, v63, v64, v67, v68, v69, v70, v95, v96, v97, v98, 0, v66, v58, v83, 3, 1, 4, 2) -> f_306(v106, v59, v60, v61, v62, v63, v64, 0, v66, 3, 1, 4) :|: TRUE
f_306(v58, v59, v60, v61, v62, v63, v64, 0, v66, 3, 1, 4) -> f_308(v58, v67, v59, v60, v61, v62, v63, v64, v68, 0, v66, 3, 1, 4) :|: 1 <= v67 && v68 = 3 + v67 && 4 <= v68
Combined rules. Obtained 2 rulesP rules:
f_308(1 + (1 + v106:0), v67:0, v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v68:0, 0, v66:0, 3, 1, 4) -> f_308(v106:0, v67:1, v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3 + v67:1, 0, v66:0, 3, 1, 4) :|: v106:0 > 0 && v69:0 > 0 && v106:0 < -2 && v95:0 > 0 && v97:0 > 0 && v67:1 > 0
f_308(1 + (1 + v106:0), v67:0, v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v68:0, 0, v66:0, 3, 1, 4) -> f_308(v106:0, v67:1, v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3 + v67:1, 0, v66:0, 3, 1, 4) :|: v106:0 > 0 && v69:0 > 0 && v95:0 > 0 && v97:0 > 0 && v67:1 > 0
Filtered unneeded arguments:
   f_308(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_308(x1)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_308(sum~cons_1~sum~cons_1~v106:0) -> f_308(v106:0) :|: v106:0 > 0 && v106:0 < -2 && sum~cons_1~sum~cons_1~v106:0 = 1 + (1 + v106:0)
f_308(sum~cons_1~sum~cons_1~v106:0) -> f_308(v106:0) :|: v106:0 > 0 && sum~cons_1~sum~cons_1~v106:0 = 1 + (1 + v106:0)

----------------------------------------

(8)
Obligation:
Rules:
f_308(sum~cons_1~sum~cons_1~v106:0) -> f_308(v106:0) :|: v106:0 > 0 && v106:0 < -2 && sum~cons_1~sum~cons_1~v106:0 = 1 + (1 + v106:0)
f_308(x) -> f_308(x1) :|: x1 > 0 && x = 1 + (1 + x1)

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(10)
Obligation:
Rules:
f_308(x) -> f_308(x1) :|: x1 > 0 && x = 1 + (1 + x1)

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_308(sum~cons_1~sum~cons_1~x1:0) -> f_308(x1:0) :|: x1:0 > 0 && sum~cons_1~sum~cons_1~x1:0 = 1 + (1 + x1:0)

----------------------------------------

(13) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_308(x)] = x

The following rules are decreasing:
f_308(sum~cons_1~sum~cons_1~x1:0) -> f_308(x1:0) :|: x1:0 > 0 && sum~cons_1~sum~cons_1~x1:0 = 1 + (1 + x1:0)
The following rules are bounded:
f_308(sum~cons_1~sum~cons_1~x1:0) -> f_308(x1:0) :|: x1:0 > 0 && sum~cons_1~sum~cons_1~x1:0 = 1 + (1 + x1:0)

----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
