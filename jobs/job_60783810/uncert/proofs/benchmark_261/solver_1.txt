YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/gCXK7.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToIRSProof [EQUIVALENT, 0 ms]
(2) IntTRS
(3) TerminationGraphProcessor [SOUND, 38 ms]
(4) IntTRS
(5) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(6) IntTRS
(7) CaseAnalysis [EQUIVALENT, 11 ms]
(8) AND
    (9) IntTRS
        (10) TerminationGraphProcessor [EQUIVALENT, 21 ms]
        (11) AND
            (12) IntTRS
                (13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (14) IntTRS
                (15) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
                (16) IntTRS
                (17) TerminationGraphProcessor [EQUIVALENT, 0 ms]
                (18) YES
            (19) IntTRS
                (20) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (21) IntTRS
                (22) RankingReductionPairProof [EQUIVALENT, 3 ms]
                (23) YES
    (24) IntTRS
        (25) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (26) IntTRS
        (27) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (28) IntTRS
        (29) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (30) IntTRS
        (31) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (32) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/gCXK7.c
----------------------------------------

(1) CToIRSProof (EQUIVALENT)
Parsed C Integer Program as IRS.
----------------------------------------

(2)
Obligation:
Rules:
f1(x, y) -> f2(x_1, y) :|: TRUE
f2(x1, x2) -> f3(x1, x3) :|: TRUE
f4(x4, x5) -> f5(arith, x5) :|: TRUE && arith = x4 - 1
f5(x42, x43) -> f6(x42, x44) :|: TRUE && x44 = x43 + x42
f7(x45, x46) -> f8(x45, x47) :|: TRUE && x47 = x46 - 1
f9(x48, x49) -> f10(x50, x49) :|: TRUE && x50 = x48 + 1
f10(x51, x52) -> f11(x51, x53) :|: TRUE && x53 = x52 - 2
f8(x14, x15) -> f9(x14, x15) :|: x15 >= x14 + 3 && x16 < 0
f8(x54, x55) -> f9(x54, x55) :|: x55 >= x54 + 3 && x56 > 0
f11(x17, x18) -> f8(x17, x18) :|: TRUE
f8(x19, x20) -> f12(x19, x20) :|: x20 < x19 + 3
f8(x57, x58) -> f12(x57, x58) :|: x59 = 0
f12(x60, x61) -> f13(x60, x62) :|: TRUE && x62 = x61 - 1
f6(x24, x25) -> f7(x24, x25) :|: x25 >= x24 + 1 && x26 < 0
f6(x63, x64) -> f7(x63, x64) :|: x64 >= x63 + 1 && x65 > 0
f13(x27, x28) -> f6(x27, x28) :|: TRUE
f6(x29, x30) -> f14(x29, x30) :|: x30 < x29 + 1
f6(x66, x67) -> f14(x66, x67) :|: x68 = 0
f14(x69, x70) -> f15(x71, x70) :|: TRUE && x71 = x69 - 1
f15(x72, x73) -> f16(x72, x74) :|: TRUE && x74 = x73 - x72
f3(x36, x37) -> f4(x36, x37) :|: x36 >= 2
f16(x38, x39) -> f3(x38, x39) :|: TRUE
f3(x40, x41) -> f17(x40, x41) :|: x40 < 2
Start term: f1(x, y)

----------------------------------------

(3) TerminationGraphProcessor (SOUND)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(4)
Obligation:
Rules:
f3(x36, x37) -> f4(x36, x37) :|: x36 >= 2
f16(x38, x39) -> f3(x38, x39) :|: TRUE
f15(x72, x73) -> f16(x72, x74) :|: TRUE && x74 = x73 - x72
f14(x69, x70) -> f15(x71, x70) :|: TRUE && x71 = x69 - 1
f6(x29, x30) -> f14(x29, x30) :|: x30 < x29 + 1
f5(x42, x43) -> f6(x42, x44) :|: TRUE && x44 = x43 + x42
f4(x4, x5) -> f5(arith, x5) :|: TRUE && arith = x4 - 1
f13(x27, x28) -> f6(x27, x28) :|: TRUE
f12(x60, x61) -> f13(x60, x62) :|: TRUE && x62 = x61 - 1
f8(x19, x20) -> f12(x19, x20) :|: x20 < x19 + 3
f7(x45, x46) -> f8(x45, x47) :|: TRUE && x47 = x46 - 1
f6(x24, x25) -> f7(x24, x25) :|: x25 >= x24 + 1 && x26 < 0
f6(x63, x64) -> f7(x63, x64) :|: x64 >= x63 + 1 && x65 > 0
f11(x17, x18) -> f8(x17, x18) :|: TRUE
f10(x51, x52) -> f11(x51, x53) :|: TRUE && x53 = x52 - 2
f9(x48, x49) -> f10(x50, x49) :|: TRUE && x50 = x48 + 1
f8(x14, x15) -> f9(x14, x15) :|: x15 >= x14 + 3 && x16 < 0
f8(x54, x55) -> f9(x54, x55) :|: x55 >= x54 + 3 && x56 > 0
f8(x57, x58) -> f12(x57, x58) :|: x59 = 0
f6(x66, x67) -> f14(x66, x67) :|: x68 = 0

----------------------------------------

(5) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(6)
Obligation:
Rules:
f8(x57:0, x58:0) -> f6(x57:0, x58:0 - 1) :|: TRUE
f8(x54:0, x55:0) -> f8(x54:0 + 1, x55:0 - 2) :|: x55:0 >= x54:0 + 3 && x56:0 > 0
f8(x19:0, x20:0) -> f6(x19:0, x20:0 - 1) :|: x20:0 < x19:0 + 3
f6(x29:0, x30:0) -> f6(x29:0 - 2, x30:0 - (x29:0 - 1) + (x29:0 - 2)) :|: x30:0 < x29:0 + 1 && x29:0 > 2
f6(x66:0, x67:0) -> f6(x66:0 - 2, x67:0 - (x66:0 - 1) + (x66:0 - 2)) :|: x66:0 > 2
f8(x14:0, x15:0) -> f8(x14:0 + 1, x15:0 - 2) :|: x15:0 >= x14:0 + 3 && x16:0 < 0
f6(x63:0, x64:0) -> f8(x63:0, x64:0 - 1) :|: x64:0 >= x63:0 + 1 && x65:0 > 0
f6(x24:0, x25:0) -> f8(x24:0, x25:0 - 1) :|: x25:0 >= x24:0 + 1 && x26:0 < 0

----------------------------------------

(7) CaseAnalysis (EQUIVALENT)
Found the following inductive condition: 
f8(x, x1): -1 + 3*x - 8*x1>=0
f6(x2, x3): -1 + 3*x2 - 8*x3>=0

----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Rules:
f8(x57:0, x58:0) -> f6(x57:0, x58:0 - 1) :|: TRUE && -1 + 3 * x57:0 + -8 * x58:0 >= 0
f8(x54:0, x55:0) -> f8(x54:0 + 1, x55:0 - 2) :|: x55:0 >= x54:0 + 3 && x56:0 > 0 && -1 + 3 * x54:0 + -8 * x55:0 >= 0
f8(x19:0, x20:0) -> f6(x19:0, x20:0 - 1) :|: x20:0 < x19:0 + 3 && -1 + 3 * x19:0 + -8 * x20:0 >= 0
f6(x29:0, x30:0) -> f6(x29:0 - 2, x30:0 - (x29:0 - 1) + (x29:0 - 2)) :|: x30:0 < x29:0 + 1 && x29:0 > 2 && -1 + 3 * x29:0 + -8 * x30:0 >= 0
f6(x66:0, x67:0) -> f6(x66:0 - 2, x67:0 - (x66:0 - 1) + (x66:0 - 2)) :|: x66:0 > 2 && -1 + 3 * x66:0 + -8 * x67:0 >= 0
f8(x14:0, x15:0) -> f8(x14:0 + 1, x15:0 - 2) :|: x15:0 >= x14:0 + 3 && x16:0 < 0 && -1 + 3 * x14:0 + -8 * x15:0 >= 0
f6(x63:0, x64:0) -> f8(x63:0, x64:0 - 1) :|: x64:0 >= x63:0 + 1 && x65:0 > 0 && -1 + 3 * x63:0 + -8 * x64:0 >= 0
f6(x24:0, x25:0) -> f8(x24:0, x25:0 - 1) :|: x25:0 >= x24:0 + 1 && x26:0 < 0 && -1 + 3 * x24:0 + -8 * x25:0 >= 0

----------------------------------------

(10) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained 2 non-trivial SCCs.

----------------------------------------

(11)
Complex Obligation (AND)

----------------------------------------

(12)
Obligation:
Rules:
f8(x57:0, x58:0) -> f6(x57:0, x58:0 - 1) :|: TRUE && -1 + 3 * x57:0 + -8 * x58:0 >= 0
f8(x54:0, x55:0) -> f8(x54:0 + 1, x55:0 - 2) :|: x55:0 >= x54:0 + 3 && x56:0 > 0 && -1 + 3 * x54:0 + -8 * x55:0 >= 0
f8(x14:0, x15:0) -> f8(x14:0 + 1, x15:0 - 2) :|: x15:0 >= x14:0 + 3 && x16:0 < 0 && -1 + 3 * x14:0 + -8 * x15:0 >= 0
f6(x63:0, x64:0) -> f8(x63:0, x64:0 - 1) :|: x64:0 >= x63:0 + 1 && x65:0 > 0 && -1 + 3 * x63:0 + -8 * x64:0 >= 0
f8(x19:0, x20:0) -> f6(x19:0, x20:0 - 1) :|: x20:0 < x19:0 + 3 && -1 + 3 * x19:0 + -8 * x20:0 >= 0
f6(x24:0, x25:0) -> f8(x24:0, x25:0 - 1) :|: x25:0 >= x24:0 + 1 && x26:0 < 0 && -1 + 3 * x24:0 + -8 * x25:0 >= 0

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f8(x57:0:0, x58:0:0) -> f6(x57:0:0, x58:0:0 - 1) :|: 0 <= -1 + 3 * x57:0:0 + -8 * x58:0:0
f6(x63:0:0, x64:0:0) -> f8(x63:0:0, x64:0:0 - 1) :|: x64:0:0 >= x63:0:0 + 1 && x65:0:0 > 0 && 0 <= -1 + 3 * x63:0:0 + -8 * x64:0:0
f8(x19:0:0, x20:0:0) -> f6(x19:0:0, x20:0:0 - 1) :|: x20:0:0 < x19:0:0 + 3 && 0 <= -1 + 3 * x19:0:0 + -8 * x20:0:0
f6(x24:0:0, x25:0:0) -> f8(x24:0:0, x25:0:0 - 1) :|: x25:0:0 >= x24:0:0 + 1 && x26:0:0 < 0 && 0 <= -1 + 3 * x24:0:0 + -8 * x25:0:0
f8(x54:0:0, x55:0:0) -> f8(x54:0:0 + 1, x55:0:0 - 2) :|: x55:0:0 >= x54:0:0 + 3 && x56:0:0 > 0 && 0 <= -1 + 3 * x54:0:0 + -8 * x55:0:0
f8(x14:0:0, x15:0:0) -> f8(x14:0:0 + 1, x15:0:0 - 2) :|: x15:0:0 >= x14:0:0 + 3 && x16:0:0 < 0 && 0 <= -1 + 3 * x14:0:0 + -8 * x15:0:0

----------------------------------------

(15) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f8(x, x1)] = -1 - x + x1
[f6(x2, x3)] = -x2 + x3

The following rules are decreasing:
f6(x63:0:0, x64:0:0) -> f8(x63:0:0, x64:0:0 - 1) :|: x64:0:0 >= x63:0:0 + 1 && x65:0:0 > 0 && 0 <= -1 + 3 * x63:0:0 + -8 * x64:0:0
f6(x24:0:0, x25:0:0) -> f8(x24:0:0, x25:0:0 - 1) :|: x25:0:0 >= x24:0:0 + 1 && x26:0:0 < 0 && 0 <= -1 + 3 * x24:0:0 + -8 * x25:0:0
f8(x54:0:0, x55:0:0) -> f8(x54:0:0 + 1, x55:0:0 - 2) :|: x55:0:0 >= x54:0:0 + 3 && x56:0:0 > 0 && 0 <= -1 + 3 * x54:0:0 + -8 * x55:0:0
f8(x14:0:0, x15:0:0) -> f8(x14:0:0 + 1, x15:0:0 - 2) :|: x15:0:0 >= x14:0:0 + 3 && x16:0:0 < 0 && 0 <= -1 + 3 * x14:0:0 + -8 * x15:0:0
The following rules are bounded:
f6(x63:0:0, x64:0:0) -> f8(x63:0:0, x64:0:0 - 1) :|: x64:0:0 >= x63:0:0 + 1 && x65:0:0 > 0 && 0 <= -1 + 3 * x63:0:0 + -8 * x64:0:0
f6(x24:0:0, x25:0:0) -> f8(x24:0:0, x25:0:0 - 1) :|: x25:0:0 >= x24:0:0 + 1 && x26:0:0 < 0 && 0 <= -1 + 3 * x24:0:0 + -8 * x25:0:0
f8(x54:0:0, x55:0:0) -> f8(x54:0:0 + 1, x55:0:0 - 2) :|: x55:0:0 >= x54:0:0 + 3 && x56:0:0 > 0 && 0 <= -1 + 3 * x54:0:0 + -8 * x55:0:0
f8(x14:0:0, x15:0:0) -> f8(x14:0:0 + 1, x15:0:0 - 2) :|: x15:0:0 >= x14:0:0 + 3 && x16:0:0 < 0 && 0 <= -1 + 3 * x14:0:0 + -8 * x15:0:0

----------------------------------------

(16)
Obligation:
Rules:
f8(x57:0:0, x58:0:0) -> f6(x57:0:0, x58:0:0 - 1) :|: 0 <= -1 + 3 * x57:0:0 + -8 * x58:0:0
f8(x19:0:0, x20:0:0) -> f6(x19:0:0, x20:0:0 - 1) :|: x20:0:0 < x19:0:0 + 3 && 0 <= -1 + 3 * x19:0:0 + -8 * x20:0:0

----------------------------------------

(17) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Rules:
f6(x29:0, x30:0) -> f6(x29:0 - 2, x30:0 - (x29:0 - 1) + (x29:0 - 2)) :|: x30:0 < x29:0 + 1 && x29:0 > 2 && -1 + 3 * x29:0 + -8 * x30:0 >= 0
f6(x66:0, x67:0) -> f6(x66:0 - 2, x67:0 - (x66:0 - 1) + (x66:0 - 2)) :|: x66:0 > 2 && -1 + 3 * x66:0 + -8 * x67:0 >= 0

----------------------------------------

(20) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(21)
Obligation:
Rules:
f6(x66:0:0, x67:0:0) -> f6(x66:0:0 - 2, x67:0:0 - (x66:0:0 - 1) + (x66:0:0 - 2)) :|: x66:0:0 > 2 && 0 <= -1 + 3 * x66:0:0 + -8 * x67:0:0
f6(x29:0:0, x30:0:0) -> f6(x29:0:0 - 2, x30:0:0 - (x29:0:0 - 1) + (x29:0:0 - 2)) :|: x30:0:0 < x29:0:0 + 1 && x29:0:0 > 2 && 0 <= -1 + 3 * x29:0:0 + -8 * x30:0:0

----------------------------------------

(22) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f6 ] = 1/2*f6_1

The following rules are decreasing:
f6(x66:0:0, x67:0:0) -> f6(x66:0:0 - 2, x67:0:0 - (x66:0:0 - 1) + (x66:0:0 - 2)) :|: x66:0:0 > 2 && 0 <= -1 + 3 * x66:0:0 + -8 * x67:0:0
f6(x29:0:0, x30:0:0) -> f6(x29:0:0 - 2, x30:0:0 - (x29:0:0 - 1) + (x29:0:0 - 2)) :|: x30:0:0 < x29:0:0 + 1 && x29:0:0 > 2 && 0 <= -1 + 3 * x29:0:0 + -8 * x30:0:0

The following rules are bounded:
f6(x66:0:0, x67:0:0) -> f6(x66:0:0 - 2, x67:0:0 - (x66:0:0 - 1) + (x66:0:0 - 2)) :|: x66:0:0 > 2 && 0 <= -1 + 3 * x66:0:0 + -8 * x67:0:0
f6(x29:0:0, x30:0:0) -> f6(x29:0:0 - 2, x30:0:0 - (x29:0:0 - 1) + (x29:0:0 - 2)) :|: x30:0:0 < x29:0:0 + 1 && x29:0:0 > 2 && 0 <= -1 + 3 * x29:0:0 + -8 * x30:0:0


----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Rules:
f8(x57:0, x58:0) -> f6(x57:0, x58:0 - 1) :|: TRUE && -1 + 3 * x57:0 + -8 * x58:0 < 0
f8(x54:0, x55:0) -> f8(x54:0 + 1, x55:0 - 2) :|: x55:0 >= x54:0 + 3 && x56:0 > 0 && -1 + 3 * x54:0 + -8 * x55:0 < 0
f8(x19:0, x20:0) -> f6(x19:0, x20:0 - 1) :|: x20:0 < x19:0 + 3 && -1 + 3 * x19:0 + -8 * x20:0 < 0
f6(x29:0, x30:0) -> f6(x29:0 - 2, x30:0 - (x29:0 - 1) + (x29:0 - 2)) :|: x30:0 < x29:0 + 1 && x29:0 > 2 && -1 + 3 * x29:0 + -8 * x30:0 < 0
f6(x66:0, x67:0) -> f6(x66:0 - 2, x67:0 - (x66:0 - 1) + (x66:0 - 2)) :|: x66:0 > 2 && -1 + 3 * x66:0 + -8 * x67:0 < 0
f8(x14:0, x15:0) -> f8(x14:0 + 1, x15:0 - 2) :|: x15:0 >= x14:0 + 3 && x16:0 < 0 && -1 + 3 * x14:0 + -8 * x15:0 < 0
f6(x63:0, x64:0) -> f8(x63:0, x64:0 - 1) :|: x64:0 >= x63:0 + 1 && x65:0 > 0 && -1 + 3 * x63:0 + -8 * x64:0 < 0
f6(x24:0, x25:0) -> f8(x24:0, x25:0 - 1) :|: x25:0 >= x24:0 + 1 && x26:0 < 0 && -1 + 3 * x24:0 + -8 * x25:0 < 0

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f6(x63:0:0, x64:0:0) -> f8(x63:0:0, x64:0:0 - 1) :|: x64:0:0 >= x63:0:0 + 1 && x65:0:0 > 0 && 0 > -1 + 3 * x63:0:0 + -8 * x64:0:0
f8(x57:0:0, x58:0:0) -> f6(x57:0:0, x58:0:0 - 1) :|: 0 > -1 + 3 * x57:0:0 + -8 * x58:0:0
f8(x14:0:0, x15:0:0) -> f8(x14:0:0 + 1, x15:0:0 - 2) :|: x15:0:0 >= x14:0:0 + 3 && x16:0:0 < 0 && 0 > -1 + 3 * x14:0:0 + -8 * x15:0:0
f6(x66:0:0, x67:0:0) -> f6(x66:0:0 - 2, x67:0:0 - (x66:0:0 - 1) + (x66:0:0 - 2)) :|: x66:0:0 > 2 && 0 > -1 + 3 * x66:0:0 + -8 * x67:0:0
f8(x54:0:0, x55:0:0) -> f8(x54:0:0 + 1, x55:0:0 - 2) :|: x55:0:0 >= x54:0:0 + 3 && x56:0:0 > 0 && 0 > -1 + 3 * x54:0:0 + -8 * x55:0:0
f6(x29:0:0, x30:0:0) -> f6(x29:0:0 - 2, x30:0:0 - (x29:0:0 - 1) + (x29:0:0 - 2)) :|: x30:0:0 < x29:0:0 + 1 && x29:0:0 > 2 && 0 > -1 + 3 * x29:0:0 + -8 * x30:0:0
f8(x19:0:0, x20:0:0) -> f6(x19:0:0, x20:0:0 - 1) :|: x20:0:0 < x19:0:0 + 3 && 0 > -1 + 3 * x19:0:0 + -8 * x20:0:0
f6(x24:0:0, x25:0:0) -> f8(x24:0:0, x25:0:0 - 1) :|: x25:0:0 >= x24:0:0 + 1 && x26:0:0 < 0 && 0 > -1 + 3 * x24:0:0 + -8 * x25:0:0

----------------------------------------

(27) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f6(x, x1)] = -5 + 2*x + x1
[f8(x2, x3)] = -6 + 2*x2 + x3

The following rules are decreasing:
f6(x63:0:0, x64:0:0) -> f8(x63:0:0, x64:0:0 - 1) :|: x64:0:0 >= x63:0:0 + 1 && x65:0:0 > 0 && 0 > -1 + 3 * x63:0:0 + -8 * x64:0:0
f6(x66:0:0, x67:0:0) -> f6(x66:0:0 - 2, x67:0:0 - (x66:0:0 - 1) + (x66:0:0 - 2)) :|: x66:0:0 > 2 && 0 > -1 + 3 * x66:0:0 + -8 * x67:0:0
f6(x29:0:0, x30:0:0) -> f6(x29:0:0 - 2, x30:0:0 - (x29:0:0 - 1) + (x29:0:0 - 2)) :|: x30:0:0 < x29:0:0 + 1 && x29:0:0 > 2 && 0 > -1 + 3 * x29:0:0 + -8 * x30:0:0
f6(x24:0:0, x25:0:0) -> f8(x24:0:0, x25:0:0 - 1) :|: x25:0:0 >= x24:0:0 + 1 && x26:0:0 < 0 && 0 > -1 + 3 * x24:0:0 + -8 * x25:0:0
The following rules are bounded:
f6(x66:0:0, x67:0:0) -> f6(x66:0:0 - 2, x67:0:0 - (x66:0:0 - 1) + (x66:0:0 - 2)) :|: x66:0:0 > 2 && 0 > -1 + 3 * x66:0:0 + -8 * x67:0:0

----------------------------------------

(28)
Obligation:
Rules:
f6(x63:0:0, x64:0:0) -> f8(x63:0:0, x64:0:0 - 1) :|: x64:0:0 >= x63:0:0 + 1 && x65:0:0 > 0 && 0 > -1 + 3 * x63:0:0 + -8 * x64:0:0
f8(x57:0:0, x58:0:0) -> f6(x57:0:0, x58:0:0 - 1) :|: 0 > -1 + 3 * x57:0:0 + -8 * x58:0:0
f8(x14:0:0, x15:0:0) -> f8(x14:0:0 + 1, x15:0:0 - 2) :|: x15:0:0 >= x14:0:0 + 3 && x16:0:0 < 0 && 0 > -1 + 3 * x14:0:0 + -8 * x15:0:0
f8(x54:0:0, x55:0:0) -> f8(x54:0:0 + 1, x55:0:0 - 2) :|: x55:0:0 >= x54:0:0 + 3 && x56:0:0 > 0 && 0 > -1 + 3 * x54:0:0 + -8 * x55:0:0
f6(x29:0:0, x30:0:0) -> f6(x29:0:0 - 2, x30:0:0 - (x29:0:0 - 1) + (x29:0:0 - 2)) :|: x30:0:0 < x29:0:0 + 1 && x29:0:0 > 2 && 0 > -1 + 3 * x29:0:0 + -8 * x30:0:0
f8(x19:0:0, x20:0:0) -> f6(x19:0:0, x20:0:0 - 1) :|: x20:0:0 < x19:0:0 + 3 && 0 > -1 + 3 * x19:0:0 + -8 * x20:0:0
f6(x24:0:0, x25:0:0) -> f8(x24:0:0, x25:0:0 - 1) :|: x25:0:0 >= x24:0:0 + 1 && x26:0:0 < 0 && 0 > -1 + 3 * x24:0:0 + -8 * x25:0:0

----------------------------------------

(29) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(30)
Obligation:
Rules:
f8(x57:0:0:0, x58:0:0:0) -> f6(x57:0:0:0, x58:0:0:0 - 1) :|: 0 > -1 + 3 * x57:0:0:0 + -8 * x58:0:0:0
f8(x54:0:0:0, x55:0:0:0) -> f8(x54:0:0:0 + 1, x55:0:0:0 - 2) :|: x55:0:0:0 >= x54:0:0:0 + 3 && x56:0:0:0 > 0 && 0 > -1 + 3 * x54:0:0:0 + -8 * x55:0:0:0
f6(x29:0:0:0, x30:0:0:0) -> f6(x29:0:0:0 - 2, x30:0:0:0 - (x29:0:0:0 - 1) + (x29:0:0:0 - 2)) :|: x30:0:0:0 < x29:0:0:0 + 1 && x29:0:0:0 > 2 && 0 > -1 + 3 * x29:0:0:0 + -8 * x30:0:0:0
f8(x19:0:0:0, x20:0:0:0) -> f6(x19:0:0:0, x20:0:0:0 - 1) :|: x20:0:0:0 < x19:0:0:0 + 3 && 0 > -1 + 3 * x19:0:0:0 + -8 * x20:0:0:0
f6(x24:0:0:0, x25:0:0:0) -> f8(x24:0:0:0, x25:0:0:0 - 1) :|: x25:0:0:0 >= x24:0:0:0 + 1 && x26:0:0:0 < 0 && 0 > -1 + 3 * x24:0:0:0 + -8 * x25:0:0:0
f8(x14:0:0:0, x15:0:0:0) -> f8(x14:0:0:0 + 1, x15:0:0:0 - 2) :|: x15:0:0:0 >= x14:0:0:0 + 3 && x16:0:0:0 < 0 && 0 > -1 + 3 * x14:0:0:0 + -8 * x15:0:0:0
f6(x63:0:0:0, x64:0:0:0) -> f8(x63:0:0:0, x64:0:0:0 - 1) :|: x64:0:0:0 >= x63:0:0:0 + 1 && x65:0:0:0 > 0 && 0 > -1 + 3 * x63:0:0:0 + -8 * x64:0:0:0

----------------------------------------

(31) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f8 ] = -3/2*f8_1 + 4*f8_2 + 3
[ f6 ] = -3/2*f6_1 + 4*f6_2

The following rules are decreasing:
f8(x57:0:0:0, x58:0:0:0) -> f6(x57:0:0:0, x58:0:0:0 - 1) :|: 0 > -1 + 3 * x57:0:0:0 + -8 * x58:0:0:0
f8(x54:0:0:0, x55:0:0:0) -> f8(x54:0:0:0 + 1, x55:0:0:0 - 2) :|: x55:0:0:0 >= x54:0:0:0 + 3 && x56:0:0:0 > 0 && 0 > -1 + 3 * x54:0:0:0 + -8 * x55:0:0:0
f6(x29:0:0:0, x30:0:0:0) -> f6(x29:0:0:0 - 2, x30:0:0:0 - (x29:0:0:0 - 1) + (x29:0:0:0 - 2)) :|: x30:0:0:0 < x29:0:0:0 + 1 && x29:0:0:0 > 2 && 0 > -1 + 3 * x29:0:0:0 + -8 * x30:0:0:0
f8(x19:0:0:0, x20:0:0:0) -> f6(x19:0:0:0, x20:0:0:0 - 1) :|: x20:0:0:0 < x19:0:0:0 + 3 && 0 > -1 + 3 * x19:0:0:0 + -8 * x20:0:0:0
f6(x24:0:0:0, x25:0:0:0) -> f8(x24:0:0:0, x25:0:0:0 - 1) :|: x25:0:0:0 >= x24:0:0:0 + 1 && x26:0:0:0 < 0 && 0 > -1 + 3 * x24:0:0:0 + -8 * x25:0:0:0
f8(x14:0:0:0, x15:0:0:0) -> f8(x14:0:0:0 + 1, x15:0:0:0 - 2) :|: x15:0:0:0 >= x14:0:0:0 + 3 && x16:0:0:0 < 0 && 0 > -1 + 3 * x14:0:0:0 + -8 * x15:0:0:0
f6(x63:0:0:0, x64:0:0:0) -> f8(x63:0:0:0, x64:0:0:0 - 1) :|: x64:0:0:0 >= x63:0:0:0 + 1 && x65:0:0:0 > 0 && 0 > -1 + 3 * x63:0:0:0 + -8 * x64:0:0:0

The following rules are bounded:
f8(x57:0:0:0, x58:0:0:0) -> f6(x57:0:0:0, x58:0:0:0 - 1) :|: 0 > -1 + 3 * x57:0:0:0 + -8 * x58:0:0:0
f8(x54:0:0:0, x55:0:0:0) -> f8(x54:0:0:0 + 1, x55:0:0:0 - 2) :|: x55:0:0:0 >= x54:0:0:0 + 3 && x56:0:0:0 > 0 && 0 > -1 + 3 * x54:0:0:0 + -8 * x55:0:0:0
f6(x29:0:0:0, x30:0:0:0) -> f6(x29:0:0:0 - 2, x30:0:0:0 - (x29:0:0:0 - 1) + (x29:0:0:0 - 2)) :|: x30:0:0:0 < x29:0:0:0 + 1 && x29:0:0:0 > 2 && 0 > -1 + 3 * x29:0:0:0 + -8 * x30:0:0:0
f8(x19:0:0:0, x20:0:0:0) -> f6(x19:0:0:0, x20:0:0:0 - 1) :|: x20:0:0:0 < x19:0:0:0 + 3 && 0 > -1 + 3 * x19:0:0:0 + -8 * x20:0:0:0
f6(x24:0:0:0, x25:0:0:0) -> f8(x24:0:0:0, x25:0:0:0 - 1) :|: x25:0:0:0 >= x24:0:0:0 + 1 && x26:0:0:0 < 0 && 0 > -1 + 3 * x24:0:0:0 + -8 * x25:0:0:0
f8(x14:0:0:0, x15:0:0:0) -> f8(x14:0:0:0 + 1, x15:0:0:0 - 2) :|: x15:0:0:0 >= x14:0:0:0 + 3 && x16:0:0:0 < 0 && 0 > -1 + 3 * x14:0:0:0 + -8 * x15:0:0:0
f6(x63:0:0:0, x64:0:0:0) -> f8(x63:0:0:0, x64:0:0:0 - 1) :|: x64:0:0:0 >= x63:0:0:0 + 1 && x65:0:0:0 > 0 && 0 > -1 + 3 * x63:0:0:0 + -8 * x64:0:0:0


----------------------------------------

(32)
YES
