MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/b0ybJ.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
    (3) LLVMToTerminationGraphProof [EQUIVALENT, 501 ms]
    (4) LLVM Symbolic Execution Graph
    (5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
    (6) AND
        (7) LLVM Symbolic Execution SCC
            (8) SCC2IRS [SOUND, 32 ms]
            (9) IntTRS
                (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (11) IntTRS
                (12) IntTRSPeriodicNontermProof [COMPLETE, 3 ms]
                (13) NO
            (14) SCC2IRS [SOUND, 0 ms]
            (15) IntTRS
                (16) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (17) IntTRS
                (18) IntTRSPeriodicNontermProof [COMPLETE, 4 ms]
                (19) NO
        (20) LLVM Symbolic Execution SCC
            (21) SCC2IRS [SOUND, 29 ms]
            (22) IntTRS
            (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
            (24) IntTRS
            (25) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
            (26) YES
    (27) SEGraph to IRS [EQUIVALENT, 70 ms]
    (28) IntTRS
        (29) IRSToKoat [EQUIVALENT, 0 ms]
        (30) Koat Problem
        (31) KoAT2 [EQUIVALENT, 202 ms]
        (32) MAYBE
    (33) SEGraph to IRS [EQUIVALENT, 86 ms]
    (34) IntTRS
        (35) IRSNoOverapproximation [EQUIVALENT, 0 ms]
        (36) IntTRS
        (37) IRSToKoat [EQUIVALENT, 0 ms]
        (38) Koat Problem
        (39) LoAT [EQUIVALENT, 974 ms]
        (40) MAYBE
(41) CToIRSProof [EQUIVALENT, 0 ms]
(42) IntTRS
    (43) TerminationGraphProcessor [SOUND, 0 ms]
    (44) IntTRS
    (45) IntTRSCompressionProof [EQUIVALENT, 0 ms]
    (46) IntTRS
    (47) IntTRSPeriodicNontermProof [COMPLETE, 0 ms]
    (48) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/b0ybJ.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/b0ybJ.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 100, %3
		store 0, %2
		br %4
	4:
		%5 = load %2
		%6 = load %3
		%7 = icmp slt %5 %6
		br %7, %8, %22
	8:
		%9 = load %3
		%10 = icmp slt 51 %9
		br %10, %11, %16
	11:
		%12 = load %2
		%13 = add i32 %12, 1
		store %13, %2
		%14 = load %3
		%15 = sub i32 %14, 1
		store %15, %3
		br %21
	16:
		%17 = load %2
		%18 = sub i32 %17, 1
		store %18, %2
		%19 = load %3
		%20 = add i32 %19, 1
		store %20, %3
		br %21
	21:
		br %4
	22:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 31 rulesP rules:
f_260(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_261(v81, v82, v83, v84, 51, 1, 0, v87, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_261(v81, v82, v83, v84, 51, 1, 0, v87, 52, v89, v90, v91, 3, 49, 50, 4) -> f_262(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_262(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) -> f_263(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_263(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) -> f_264(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_264(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) -> f_265(v81, v82, v83, v84, 52, 1, 0, v87, 51, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_265(v81, v82, v83, v84, 52, 1, 0, v87, 51, v89, v90, v91, 3, 49, 50, 4) -> f_266(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_266(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_267(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_267(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_268(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_268(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_269(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: v87 = 1 + v84
f_269(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_270(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_270(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_271(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_271(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_272(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_272(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_273(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_273(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_274(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_274(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_275(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_275(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_276(v81, v82, v83, v87, 52, 1, v84, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_276(v81, v82, v83, v87, 52, 1, v84, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_277(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_277(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) -> f_278(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_278(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) -> f_279(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_279(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) -> f_280(v81, v82, v83, v87, 51, 1, v84, 52, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_280(v81, v82, v83, v87, 51, 1, v84, 52, v89, v90, v91, 0, 3, 49, 50, 4) -> f_281(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_281(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_282(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_282(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_283(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_283(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_284(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 1 + v84 = v87
f_284(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_285(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_285(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_286(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_286(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_287(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_287(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_288(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_288(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_289(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_289(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_258(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_258(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_260(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_260(v81:0, v82:0, v83:0, 1 + v84:0, 51, 1, 0, v84:0, 52, v89:0, v90:0, v91:0, 3, 49, 50, 4) -> f_260(v81:0, v82:0, v83:0, 1 + v84:0, 51, 1, 0, v84:0, 52, v89:0, v90:0, v91:0, 3, 49, 50, 4) :|: TRUE
Filtered unneeded arguments:
   f_260(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_260(x4, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_260(sum~cons_1~v84:0, v84:0) -> f_260(1 + v84:0, v84:0) :|: TRUE && sum~cons_1~v84:0 = 1 + v84:0

----------------------------------------

(9)
Obligation:
Rules:
f_260(sum~cons_1~v84:0, v84:0) -> f_260(1 + v84:0, v84:0) :|: TRUE && sum~cons_1~v84:0 = 1 + v84:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_260(sum~cons_1~v84:0:0, v84:0:0) -> f_260(1 + v84:0:0, v84:0:0) :|: TRUE && sum~cons_1~v84:0:0 = 1 + v84:0:0

----------------------------------------

(12) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, sum~cons_1~v84:0:0, v84:0:0) -> f(1, 1 + v84:0:0, v84:0:0) :|: pc = 1 && (TRUE && sum~cons_1~v84:0:0 = 1 + v84:0:0)
Witness term starting non-terminating reduction: f(1, -7, -8)
----------------------------------------

(13)
NO

----------------------------------------

(14) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 31 rulesP rules:
f_260(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_261(v81, v82, v83, v84, 51, 1, 0, v87, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_261(v81, v82, v83, v84, 51, 1, 0, v87, 52, v89, v90, v91, 3, 49, 50, 4) -> f_262(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_262(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) -> f_263(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_263(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) -> f_264(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_264(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) -> f_265(v81, v82, v83, v84, 52, 1, 0, v87, 51, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_265(v81, v82, v83, v84, 52, 1, 0, v87, 51, v89, v90, v91, 3, 49, 50, 4) -> f_266(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_266(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_267(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_267(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_268(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_268(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_269(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: v87 = 1 + v84
f_269(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_270(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_270(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_271(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_271(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_272(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_272(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_273(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_273(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_274(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_274(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_275(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_275(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_276(v81, v82, v83, v87, 52, 1, v84, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_276(v81, v82, v83, v87, 52, 1, v84, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_277(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_277(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) -> f_278(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_278(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) -> f_279(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_279(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) -> f_280(v81, v82, v83, v87, 51, 1, v84, 52, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_280(v81, v82, v83, v87, 51, 1, v84, 52, v89, v90, v91, 0, 3, 49, 50, 4) -> f_281(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_281(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_282(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_282(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_283(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_283(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_284(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 1 + v84 = v87
f_284(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_285(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_285(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_286(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_286(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_287(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_287(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_288(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_288(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_289(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_289(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_258(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 1 <= v81 && 1 <= v82 && 1 <= v83 && 0 <= v84 && v84 <= 49 && 1 <= v87 && v87 <= 50 && 4 <= v89 && 4 <= v90 && 4 <= v91 && v81 <= v89 && v82 <= v90 && v83 <= v91
f_258(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_260(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_260(v81:0, v82:0, v83:0, 1 + v84:0, 51, 1, 0, v84:0, 52, v89:0, v90:0, v91:0, 3, 49, 50, 4) -> f_260(v81:0, v82:0, v83:0, 1 + v84:0, 51, 1, 0, v84:0, 52, v89:0, v90:0, v91:0, 3, 49, 50, 4) :|: v82:0 > 0 && v81:0 > 0 && v83:0 > 0 && v84:0 > -1 && v84:0 < 50 && v89:0 > 3 && v90:0 > 3 && v91:0 > 3 && v89:0 >= v81:0 && v91:0 >= v83:0 && v90:0 >= v82:0
Filtered unneeded arguments:
   f_260(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_260(x1, x2, x3, x4, x8, x10, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_260(v81:0, v82:0, v83:0, sum~cons_1~v84:0, v84:0, v89:0, v90:0, v91:0) -> f_260(v81:0, v82:0, v83:0, 1 + v84:0, v84:0, v89:0, v90:0, v91:0) :|: v81:0 > 0 && v82:0 > 0 && v83:0 > 0 && v84:0 > -1 && v84:0 < 50 && v89:0 > 3 && v90:0 > 3 && v91:0 > 3 && v89:0 >= v81:0 && v90:0 >= v82:0 && v91:0 >= v83:0 && sum~cons_1~v84:0 = 1 + v84:0

----------------------------------------

(15)
Obligation:
Rules:
f_260(v81:0, v82:0, v83:0, sum~cons_1~v84:0, v84:0, v89:0, v90:0, v91:0) -> f_260(v81:0, v82:0, v83:0, 1 + v84:0, v84:0, v89:0, v90:0, v91:0) :|: v81:0 > 0 && v82:0 > 0 && v83:0 > 0 && v84:0 > -1 && v84:0 < 50 && v89:0 > 3 && v90:0 > 3 && v91:0 > 3 && v89:0 >= v81:0 && v90:0 >= v82:0 && v91:0 >= v83:0 && sum~cons_1~v84:0 = 1 + v84:0

----------------------------------------

(16) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(17)
Obligation:
Rules:
f_260(v81:0:0, v82:0:0, v83:0:0, sum~cons_1~v84:0:0, v84:0:0, v89:0:0, v90:0:0, v91:0:0) -> f_260(v81:0:0, v82:0:0, v83:0:0, 1 + v84:0:0, v84:0:0, v89:0:0, v90:0:0, v91:0:0) :|: v90:0:0 >= v82:0:0 && v91:0:0 >= v83:0:0 && v89:0:0 >= v81:0:0 && v91:0:0 > 3 && v90:0:0 > 3 && v89:0:0 > 3 && v84:0:0 < 50 && v84:0:0 > -1 && v83:0:0 > 0 && v82:0:0 > 0 && v81:0:0 > 0 && sum~cons_1~v84:0:0 = 1 + v84:0:0

----------------------------------------

(18) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v81:0:0, v82:0:0, v83:0:0, sum~cons_1~v84:0:0, v84:0:0, v89:0:0, v90:0:0, v91:0:0) -> f(1, v81:0:0, v82:0:0, v83:0:0, 1 + v84:0:0, v84:0:0, v89:0:0, v90:0:0, v91:0:0) :|: pc = 1 && (v90:0:0 >= v82:0:0 && v91:0:0 >= v83:0:0 && v89:0:0 >= v81:0:0 && v91:0:0 > 3 && v90:0:0 > 3 && v89:0:0 > 3 && v84:0:0 < 50 && v84:0:0 > -1 && v83:0:0 > 0 && v82:0:0 > 0 && v81:0:0 > 0 && sum~cons_1~v84:0:0 = 1 + v84:0:0)
Witness term starting non-terminating reduction: f(1, 128, 1, 16, 32, 31, 128, 128, 62)
----------------------------------------

(19)
NO

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_230(v81, v82, v83, v87, v85, 1, v84, v88, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) -> f_231(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) :|: 0 = 0
f_231(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) -> f_232(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) :|: v87 < v88 && v87 <= 98 && v84 <= 97
f_232(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_234(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) :|: 0 = 0
f_234(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_236(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) :|: TRUE
f_236(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_238(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) :|: 0 = 0
f_238(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_239(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) :|: 51 < v88 && 53 <= v85
f_239(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) -> f_241(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) :|: 0 = 0
f_241(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) -> f_243(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) :|: TRUE
f_243(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) -> f_245(v81, v82, v83, v87, v88, 1, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4) :|: 0 = 0
f_245(v81, v82, v83, v87, v88, 1, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4) -> f_247(v81, v82, v83, v87, v88, 1, v93, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4, 2) :|: v93 = 1 + v87 && 2 <= v93 && v93 <= 99
f_247(v81, v82, v83, v87, v88, 1, v93, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4, 2) -> f_249(v81, v82, v83, v87, v88, 1, v93, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4, 2) :|: TRUE
f_249(v81, v82, v83, v87, v88, 1, v93, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4, 2) -> f_251(v81, v82, v83, v87, v88, 1, v93, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2) :|: 0 = 0
f_251(v81, v82, v83, v87, v88, 1, v93, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2) -> f_253(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) :|: 1 + v96 = v88 && 51 <= v96 && v96 <= 98
f_253(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) -> f_255(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) :|: TRUE
f_255(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) -> f_257(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) :|: TRUE
f_257(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) -> f_259(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) :|: TRUE
f_259(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) -> f_229(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) :|: TRUE
f_229(v81, v82, v83, v84, v85, 1, v87, v88, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) -> f_230(v81, v82, v83, v87, v85, 1, v84, v88, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_230(v81:0, v82:0, v83:0, v87:0, v85:0, 1, v84:0, 1 + v96:0, v89:0, v90:0, v91:0, 0, 3, 99, 52, 100, 51, 4) -> f_230(v81:0, v82:0, v83:0, 1 + v87:0, 1 + v96:0, 1, v87:0, v96:0, v89:0, v90:0, v91:0, 0, 3, 99, 52, 100, 51, 4) :|: v87:0 < 99 && v87:0 < 1 + v96:0 && v84:0 < 98 && v85:0 > 52 && v96:0 > 50 && v87:0 > 0 && v96:0 < 99
Filtered unneeded arguments:
   f_230(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_230(x4, x5, x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_230(v87:0, v85:0, v84:0, sum~cons_1~v96:0) -> f_230(1 + v87:0, 1 + v96:0, v87:0, v96:0) :|: v87:0 < 1 + v96:0 && v87:0 < 99 && v84:0 < 98 && v85:0 > 52 && v96:0 > 50 && v96:0 < 99 && v87:0 > 0 && sum~cons_1~v96:0 = 1 + v96:0

----------------------------------------

(22)
Obligation:
Rules:
f_230(v87:0, v85:0, v84:0, sum~cons_1~v96:0) -> f_230(1 + v87:0, 1 + v96:0, v87:0, v96:0) :|: v87:0 < 1 + v96:0 && v87:0 < 99 && v84:0 < 98 && v85:0 > 52 && v96:0 > 50 && v96:0 < 99 && v87:0 > 0 && sum~cons_1~v96:0 = 1 + v96:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_230(v87:0:0, v85:0:0, v84:0:0, sum~cons_1~v96:0:0) -> f_230(1 + v87:0:0, 1 + v96:0:0, v87:0:0, v96:0:0) :|: v96:0:0 < 99 && v87:0:0 > 0 && v96:0:0 > 50 && v85:0:0 > 52 && v84:0:0 < 98 && v87:0:0 < 99 && v87:0:0 < 1 + v96:0:0 && sum~cons_1~v96:0:0 = 1 + v96:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_230(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_230(v87:0:0, v85:0:0, v84:0:0, sum~cons_1~v96:0:0) -> f_230(1 + v87:0:0, 1 + v96:0:0, v87:0:0, v96:0:0) :|: v96:0:0 < 99 && v87:0:0 > 0 && v96:0:0 > 50 && v85:0:0 > 52 && v84:0:0 < 98 && v87:0:0 < 99 && v87:0:0 < 1 + v96:0:0 && sum~cons_1~v96:0:0 = 1 + v96:0:0
The following rules are bounded:
f_230(v87:0:0, v85:0:0, v84:0:0, sum~cons_1~v96:0:0) -> f_230(1 + v87:0:0, 1 + v96:0:0, v87:0:0, v96:0:0) :|: v96:0:0 < 99 && v87:0:0 > 0 && v96:0:0 > 50 && v85:0:0 > 52 && v84:0:0 < 98 && v87:0:0 < 99 && v87:0:0 < 1 + v96:0:0 && sum~cons_1~v96:0:0 = 1 + v96:0:0

----------------------------------------

(26)
YES

----------------------------------------

(27) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 91 rulesP rules:
f_99 -> f_100(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_100(v1, v2, 3, 1, 4) -> f_101(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_101(v1, v3, v2, v4, 3, 1, 4) -> f_102(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_102(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_103(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_103(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_104(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_104(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_105(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_105(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_106(v1, v3, v5, v2, v4, v6, 0, 100, 3, 1, 4) :|: TRUE
f_106(v1, v3, v5, v2, v4, v6, 0, 100, 3, 1, 4) -> f_107(v1, v3, v5, v2, v4, v6, 0, 100, 3, 1, 4) :|: TRUE
f_107(v1, v3, v5, v2, v4, v6, 0, 100, 3, 1, 4) -> f_108(v1, v3, v5, v2, v4, v6, 0, 100, 3, 1, 4) :|: TRUE
f_108(v1, v3, v5, v2, v4, v6, 0, 100, 3, 1, 4) -> f_109(v1, v3, v5, 0, v2, v4, v6, 100, 3, 1, 4) :|: 0 = 0
f_109(v1, v3, v5, 0, v2, v4, v6, 100, 3, 1, 4) -> f_110(v1, v3, v5, 0, 100, v2, v4, v6, 3, 1, 4) :|: 0 = 0
f_110(v1, v3, v5, 0, 100, v2, v4, v6, 3, 1, 4) -> f_111(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: 0 = 0
f_111(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_112(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: TRUE
f_112(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_113(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: 0 = 0
f_113(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_114(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: 0 = 0
f_114(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_115(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: TRUE
f_115(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_116(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: 0 = 0
f_116(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_117(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: 0 = 0
f_117(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_118(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: TRUE
f_118(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_119(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: 0 = 0
f_119(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_120(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) :|: 0 = 0
f_120(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) -> f_121(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) :|: TRUE
f_121(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) -> f_122(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) :|: TRUE
f_122(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) -> f_123(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) :|: TRUE
f_123(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) -> f_139(v1, v3, v5, 0, 100, 1, 1, 99, v2, v4, v6, 0, 3, 99, 100, 2, 98, 4) :|: TRUE
f_139(v7, v8, v9, v10, v11, 1, v13, v14, v15, v16, v17, 0, 3, 99, 100, 2, 98, 4) -> f_155(v7, v8, v9, v10, v11, 1, v13, v14, v15, v16, v17, 0, 3, 2, 98, 100, 97, 99, 4) :|: TRUE
f_155(v23, v24, v25, v26, v27, 1, v29, v30, v31, v32, v33, 0, 3, 2, 98, 100, 97, 99, 4) -> f_171(v23, v24, v25, v26, v27, 1, v29, v30, v31, v32, v33, 0, 3, 97, 52, 100, 98, 51, 99, 4) :|: TRUE
f_171(v39, v40, v41, v42, v43, 1, v45, v46, v47, v48, v49, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_198(v39, v40, v41, v42, v43, 1, v45, v46, v47, v48, v49, 0, 3, 99, 52, 100, 51, 4) :|: TRUE
f_198(v60, v61, v62, v63, v64, 1, v66, v67, v68, v69, v70, 0, 3, 99, 52, 100, 51, 4) -> f_229(v60, v61, v62, v63, v64, 1, v66, v67, v68, v69, v70, 0, 3, 99, 52, 100, 51, 4) :|: TRUE
f_229(v81, v82, v83, v84, v85, 1, v87, v88, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) -> f_230(v81, v82, v83, v87, v85, 1, v84, v88, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) :|: 0 = 0
f_230(v81, v82, v83, v87, v85, 1, v84, v88, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) -> f_231(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) :|: 0 = 0
f_231(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) -> f_232(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) :|: v87 < v88 && v87 <= 98 && v84 <= 97
f_231(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) -> f_233(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 50, 99, 52, 100, 51, 4) :|: v88 <= v87 && 51 <= v87 && 50 <= v84
f_232(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_234(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) :|: 0 = 0
f_233(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 50, 99, 52, 100, 51, 4) -> f_235(v81, v82, v83, v87, v88, 0, v85, 1, v84, v89, v90, v91, 3, 50, 99, 52, 100, 51, 4) :|: 0 = 0
f_234(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_236(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) :|: TRUE
f_235(v81, v82, v83, v87, v88, 0, v85, 1, v84, v89, v90, v91, 3, 50, 99, 52, 100, 51, 4) -> f_237(v81, v82, v83, v87, v88, 0, v85, 1, v84, v89, v90, v91, 3, 50, 99, 52, 100, 51, 4) :|: TRUE
f_236(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_238(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) :|: 0 = 0
f_238(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_239(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) :|: 51 < v88 && 53 <= v85
f_238(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_240(v81, v82, v83, v87, 51, 1, v84, 52, v89, v90, v91, 0, 3, 49, 50, 4) :|: v88 <= 51 && v85 = 52 && v88 = 51 && 0 = 0
f_239(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) -> f_241(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) :|: 0 = 0
f_240(v81, v82, v83, v87, 51, 1, v84, 52, v89, v90, v91, 0, 3, 49, 50, 4) -> f_242(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_241(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) -> f_243(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) :|: TRUE
f_242(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_244(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_243(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) -> f_245(v81, v82, v83, v87, v88, 1, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4) :|: 0 = 0
f_244(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_246(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_245(v81, v82, v83, v87, v88, 1, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4) -> f_247(v81, v82, v83, v87, v88, 1, v93, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4, 2) :|: v93 = 1 + v87 && 2 <= v93 && v93 <= 99
f_246(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_248(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 1 + v84 = v87
f_247(v81, v82, v83, v87, v88, 1, v93, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4, 2) -> f_249(v81, v82, v83, v87, v88, 1, v93, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4, 2) :|: TRUE
f_248(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_250(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_249(v81, v82, v83, v87, v88, 1, v93, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4, 2) -> f_251(v81, v82, v83, v87, v88, 1, v93, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2) :|: 0 = 0
f_250(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_252(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_251(v81, v82, v83, v87, v88, 1, v93, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2) -> f_253(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) :|: 1 + v96 = v88 && 51 <= v96 && v96 <= 98
f_252(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_254(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_253(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) -> f_255(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) :|: TRUE
f_254(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_256(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_255(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) -> f_257(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) :|: TRUE
f_256(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_258(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_257(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) -> f_259(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) :|: TRUE
f_258(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_260(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_259(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) -> f_229(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) :|: TRUE
f_260(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_261(v81, v82, v83, v84, 51, 1, 0, v87, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_261(v81, v82, v83, v84, 51, 1, 0, v87, 52, v89, v90, v91, 3, 49, 50, 4) -> f_262(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_262(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) -> f_263(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_263(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) -> f_264(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_264(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) -> f_265(v81, v82, v83, v84, 52, 1, 0, v87, 51, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_265(v81, v82, v83, v84, 52, 1, 0, v87, 51, v89, v90, v91, 3, 49, 50, 4) -> f_266(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_266(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_267(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_267(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_268(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_268(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_269(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: v87 = 1 + v84
f_269(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_270(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_270(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_271(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_271(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_272(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_272(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_273(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_273(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_274(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_274(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_275(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_275(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_276(v81, v82, v83, v87, 52, 1, v84, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_276(v81, v82, v83, v87, 52, 1, v84, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_277(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_277(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) -> f_278(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_278(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) -> f_279(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_279(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) -> f_280(v81, v82, v83, v87, 51, 1, v84, 52, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_280(v81, v82, v83, v87, 51, 1, v84, 52, v89, v90, v91, 0, 3, 49, 50, 4) -> f_281(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_281(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_282(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_282(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_283(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_283(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_284(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 1 + v84 = v87
f_284(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_285(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_285(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_286(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_286(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_287(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_287(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_288(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_288(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_289(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_289(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_258(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
Combined rules. Obtained 5 rulesP rules:
f_231(v81:0, v82:0, v83:0, 1 + v84:0, 51, 1, 52, v84:0, v89:0, v90:0, v91:0, 0, 3, 99, 52, 100, 51, 4) -> f_289(v81:0, v82:0, v83:0, 1 + v84:0, 51, 1, 0, v84:0, 52, v89:0, v90:0, v91:0, 3, 49, 50, 4) :|: v84:0 < 98 && v84:0 < 50
f_99 -> f_231(v1:0, v3:0, v5:0, 1, 99, 1, 100, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 0, 3, 99, 52, 100, 51, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0
f_231(v81:0, v82:0, v83:0, v87:0, v88:0, 1, v85:0, v84:0, v89:0, v90:0, v91:0, 0, 3, 99, 52, 100, 51, 4) -> f_237(v81:0, v82:0, v83:0, v87:0, v88:0, 0, v85:0, 1, v84:0, v89:0, v90:0, v91:0, 3, 50, 99, 52, 100, 51, 4) :|: v87:0 > 50 && v84:0 > 49 && v88:0 <= v87:0
f_231(v81:0, v82:0, v83:0, v87:0, 1 + v96:0, 1, v85:0, v84:0, v89:0, v90:0, v91:0, 0, 3, 99, 52, 100, 51, 4) -> f_231(v81:0, v82:0, v83:0, 1 + v87:0, v96:0, 1, 1 + v96:0, v87:0, v89:0, v90:0, v91:0, 0, 3, 99, 52, 100, 51, 4) :|: v87:0 < 99 && v87:0 < 1 + v96:0 && v84:0 < 98 && v85:0 > 52 && v96:0 > 50 && v87:0 > 0 && v96:0 < 99
f_289(v81:0, v82:0, v83:0, 1 + v84:0, 51, 1, 0, v84:0, 52, v89:0, v90:0, v91:0, 3, 49, 50, 4) -> f_289(v81:0, v82:0, v83:0, 1 + v84:0, 51, 1, 0, v84:0, 52, v89:0, v90:0, v91:0, 3, 49, 50, 4) :|: TRUE
Filtered unneeded arguments:
   f_231(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_231(x4, x5, x7, x8)
   f_289(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_289(x4, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_231(sum~cons_1~v84:0, cons_51, cons_52, v84:0) -> f_289(1 + v84:0, v84:0) :|: v84:0 < 98 && v84:0 < 50 && sum~cons_1~v84:0 = 1 + v84:0 && cons_51 = 51 && cons_52 = 52
f_99 -> f_231(1, 99, 100, 0) :|: TRUE
f_231(v87:0, v88:0, v85:0, v84:0) -> f_237(v81:0, v82:0, v83:0, v87:0, v88:0, 0, v85:0, 1, v84:0, v89:0, v90:0, v91:0, 3, 50, 99, 52, 100, 51, 4) :|: v84:0 > 49 && v88:0 <= v87:0 && v87:0 > 50
f_231(v87:0, sum~cons_1~v96:0, v85:0, v84:0) -> f_231(1 + v87:0, v96:0, 1 + v96:0, v87:0) :|: v87:0 < 1 + v96:0 && v87:0 < 99 && v84:0 < 98 && v85:0 > 52 && v96:0 > 50 && v96:0 < 99 && v87:0 > 0 && sum~cons_1~v96:0 = 1 + v96:0
f_289(sum~cons_1~v84:0, v84:0) -> f_289(1 + v84:0, v84:0) :|: TRUE && sum~cons_1~v84:0 = 1 + v84:0

----------------------------------------

(28)
Obligation:
Rules:
f_231(sum~cons_1~v84:0, cons_51, cons_52, v84:0) -> f_289(1 + v84:0, v84:0) :|: v84:0 < 98 && v84:0 < 50 && sum~cons_1~v84:0 = 1 + v84:0 && cons_51 = 51 && cons_52 = 52
f_99 -> f_231(1, 99, 100, 0) :|: TRUE
f_231(x, x1, x2, x3) -> f_237(x4, x5, x6, x, x1, 0, x2, 1, x3, x7, x8, x9, 3, 50, 99, 52, 100, 51, 4) :|: x3 > 49 && x1 <= x && x > 50
f_231(x10, x11, x12, x13) -> f_231(1 + x10, x14, 1 + x14, x10) :|: x10 < 1 + x14 && x10 < 99 && x13 < 98 && x12 > 52 && x14 > 50 && x14 < 99 && x10 > 0 && x11 = 1 + x14
f_289(x15, x16) -> f_289(1 + x16, x16) :|: TRUE && x15 = 1 + x16
Start term: f_99

----------------------------------------

(29) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(30)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_99))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x40 x41 k20 x39 x35 x36 x37 x38 x31 x32 x33 x34 k18 k19 x30 x70 x140 x68 x142 x69 x141 x64 x65 x66 x67 x60 x61 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x131 x58 x130 x59 x133 x132 x53 x135 x54 x134 x55 x137 x56 x136 x139 x50 x138 x51 x52 x90 x91 x92 x120 x122 x121 x86 x124 x87 x123 x88 x126 x89 x125 x x82 x128 x83 x127 x84 x85 x129 x80 x81 x79 x111 x110 x75 x113 x76 x112 x'' x77 x115 x78 x114 x71 x117 x72 x116 x73 x119 x74 x118 k14 k15 x109 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x7 x27 x20 x102 x21 x101 x22 x104 x23 x103 x106 x1 x105 x108 x107 x' x17 x18 x19 x13 x14 x15 x16 x97 x10 x98 x11 x99 x12 x93 x94 x95 x96)
(RULES
  f_231(k7, k2, k1, k0, x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) -> f_289(1 + k0, k0, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) :|: k0 < 98 && k0 < 50 && k7 = 1 + k0 && k2 = 51 && k1 = 52
  f_99(x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48) -> f_231(1, 99, 100, 0, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63) :|: 0 = 0
  f_231(k16, k17, k18, k9, x79, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93) -> f_231(1 + k16, k11, 1 + k11, k16, x94, x95, x96, x97, x98, x99, x100, x101, x102, x103, x104, x105, x106, x107, x108) :|: k16 < 1 + k11 && k16 < 99 && k9 < 98 && k18 > 52 && k11 > 50 && k11 < 99 && k16 > 0 && k17 = 1 + k11
  f_289(k13, k15, x109, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122, x123, x124, x125) -> f_289(1 + k15, k15, x126, x127, x128, x129, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x140, x141, x142) :|: 0 = 0 && k13 = 1 + k15
  f_231(k19, k20, k5, k6, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78) -> f_237(k3, k4, k12, k19, k20, 0, k5, 1, k6, k14, k8, k10, 3, 50, 99, 52, 100, 51, 4) :|: k6 > 49 && k20 <= k19 && k19 > 50
)

----------------------------------------

(31) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_1551981083636496346.koat 

KoAT2's output was:

MAYBE

----------------------------------------

(32)
MAYBE

----------------------------------------

(33) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 91 rulesP rules:
f_99 -> f_100(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_100(v1, v2, 3, 1, 4) -> f_101(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_101(v1, v3, v2, v4, 3, 1, 4) -> f_102(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_102(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_103(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_103(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_104(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_104(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_105(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_105(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_106(v1, v3, v5, v2, v4, v6, 0, 100, 3, 1, 4) :|: TRUE
f_106(v1, v3, v5, v2, v4, v6, 0, 100, 3, 1, 4) -> f_107(v1, v3, v5, v2, v4, v6, 0, 100, 3, 1, 4) :|: TRUE
f_107(v1, v3, v5, v2, v4, v6, 0, 100, 3, 1, 4) -> f_108(v1, v3, v5, v2, v4, v6, 0, 100, 3, 1, 4) :|: TRUE
f_108(v1, v3, v5, v2, v4, v6, 0, 100, 3, 1, 4) -> f_109(v1, v3, v5, 0, v2, v4, v6, 100, 3, 1, 4) :|: 0 = 0
f_109(v1, v3, v5, 0, v2, v4, v6, 100, 3, 1, 4) -> f_110(v1, v3, v5, 0, 100, v2, v4, v6, 3, 1, 4) :|: 0 = 0
f_110(v1, v3, v5, 0, 100, v2, v4, v6, 3, 1, 4) -> f_111(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: 0 = 0
f_111(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_112(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: TRUE
f_112(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_113(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: 0 = 0
f_113(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_114(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: 0 = 0
f_114(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_115(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: TRUE
f_115(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_116(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: 0 = 0
f_116(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_117(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: 0 = 0
f_117(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_118(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: TRUE
f_118(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_119(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) :|: 0 = 0
f_119(v1, v3, v5, 0, 100, 1, v2, v4, v6, 3, 4) -> f_120(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) :|: 0 = 0
f_120(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) -> f_121(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) :|: TRUE
f_121(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) -> f_122(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) :|: TRUE
f_122(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) -> f_123(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) :|: TRUE
f_123(v1, v3, v5, 0, 100, 1, 99, v2, v4, v6, 3, 4) -> f_139(v1, v3, v5, 0, 100, 1, 1, 99, v2, v4, v6, 0, 3, 99, 100, 2, 98, 4) :|: TRUE
f_139(v7, v8, v9, v10, v11, 1, v13, v14, v15, v16, v17, 0, 3, 99, 100, 2, 98, 4) -> f_155(v7, v8, v9, v10, v11, 1, v13, v14, v15, v16, v17, 0, 3, 2, 98, 100, 97, 99, 4) :|: TRUE
f_155(v23, v24, v25, v26, v27, 1, v29, v30, v31, v32, v33, 0, 3, 2, 98, 100, 97, 99, 4) -> f_171(v23, v24, v25, v26, v27, 1, v29, v30, v31, v32, v33, 0, 3, 97, 52, 100, 98, 51, 99, 4) :|: TRUE
f_171(v39, v40, v41, v42, v43, 1, v45, v46, v47, v48, v49, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_198(v39, v40, v41, v42, v43, 1, v45, v46, v47, v48, v49, 0, 3, 99, 52, 100, 51, 4) :|: TRUE
f_198(v60, v61, v62, v63, v64, 1, v66, v67, v68, v69, v70, 0, 3, 99, 52, 100, 51, 4) -> f_229(v60, v61, v62, v63, v64, 1, v66, v67, v68, v69, v70, 0, 3, 99, 52, 100, 51, 4) :|: TRUE
f_229(v81, v82, v83, v84, v85, 1, v87, v88, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) -> f_230(v81, v82, v83, v87, v85, 1, v84, v88, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) :|: 0 = 0
f_230(v81, v82, v83, v87, v85, 1, v84, v88, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) -> f_231(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) :|: 0 = 0
f_231(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) -> f_232(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) :|: v87 < v88 && v87 <= 98 && v84 <= 97
f_231(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) -> f_233(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 50, 99, 52, 100, 51, 4) :|: v88 <= v87 && 51 <= v87 && 50 <= v84
f_232(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_234(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) :|: 0 = 0
f_233(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 50, 99, 52, 100, 51, 4) -> f_235(v81, v82, v83, v87, v88, 0, v85, 1, v84, v89, v90, v91, 3, 50, 99, 52, 100, 51, 4) :|: 0 = 0
f_234(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_236(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) :|: TRUE
f_235(v81, v82, v83, v87, v88, 0, v85, 1, v84, v89, v90, v91, 3, 50, 99, 52, 100, 51, 4) -> f_237(v81, v82, v83, v87, v88, 0, v85, 1, v84, v89, v90, v91, 3, 50, 99, 52, 100, 51, 4) :|: TRUE
f_236(v81, v82, v83, v87, v88, 1, v85, v84, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_238(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) :|: 0 = 0
f_238(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_239(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) :|: 51 < v88 && 53 <= v85
f_238(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 52, 100, 98, 51, 99, 4) -> f_240(v81, v82, v83, v87, 51, 1, v84, 52, v89, v90, v91, 0, 3, 49, 50, 4) :|: v88 <= 51 && v85 = 52 && v88 = 51 && 0 = 0
f_239(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) -> f_241(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) :|: 0 = 0
f_240(v81, v82, v83, v87, 51, 1, v84, 52, v89, v90, v91, 0, 3, 49, 50, 4) -> f_242(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_241(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) -> f_243(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) :|: TRUE
f_242(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_244(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_243(v81, v82, v83, v87, v88, 1, v84, v85, v89, v90, v91, 0, 3, 97, 53, 100, 98, 52, 99, 4) -> f_245(v81, v82, v83, v87, v88, 1, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4) :|: 0 = 0
f_244(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_246(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_245(v81, v82, v83, v87, v88, 1, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4) -> f_247(v81, v82, v83, v87, v88, 1, v93, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4, 2) :|: v93 = 1 + v87 && 2 <= v93 && v93 <= 99
f_246(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_248(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 1 + v84 = v87
f_247(v81, v82, v83, v87, v88, 1, v93, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4, 2) -> f_249(v81, v82, v83, v87, v88, 1, v93, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4, 2) :|: TRUE
f_248(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_250(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_249(v81, v82, v83, v87, v88, 1, v93, v85, v89, v90, v91, 0, 3, 53, 100, 98, 52, 99, 4, 2) -> f_251(v81, v82, v83, v87, v88, 1, v93, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2) :|: 0 = 0
f_250(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_252(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_251(v81, v82, v83, v87, v88, 1, v93, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2) -> f_253(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) :|: 1 + v96 = v88 && 51 <= v96 && v96 <= 98
f_252(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_254(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_253(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) -> f_255(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) :|: TRUE
f_254(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_256(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_255(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) -> f_257(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) :|: TRUE
f_256(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_258(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_257(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) -> f_259(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) :|: TRUE
f_258(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_260(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_259(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 98, 52, 99, 4, 2, 51) -> f_229(v81, v82, v83, v87, v88, 1, v93, v96, v89, v90, v91, 0, 3, 99, 52, 100, 51, 4) :|: TRUE
f_260(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_261(v81, v82, v83, v84, 51, 1, 0, v87, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_261(v81, v82, v83, v84, 51, 1, 0, v87, 52, v89, v90, v91, 3, 49, 50, 4) -> f_262(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_262(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) -> f_263(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_263(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) -> f_264(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_264(v81, v82, v83, v84, 52, 1, 51, 0, v87, v89, v90, v91, 3, 49, 50, 4) -> f_265(v81, v82, v83, v84, 52, 1, 0, v87, 51, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_265(v81, v82, v83, v84, 52, 1, 0, v87, 51, v89, v90, v91, 3, 49, 50, 4) -> f_266(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_266(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_267(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_267(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_268(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_268(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_269(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: v87 = 1 + v84
f_269(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_270(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_270(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_271(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_271(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_272(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_272(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_273(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_273(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_274(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_274(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_275(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_275(v81, v82, v83, v84, 52, 1, v87, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_276(v81, v82, v83, v87, 52, 1, v84, 51, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_276(v81, v82, v83, v87, 52, 1, v84, 51, v89, v90, v91, 0, 3, 49, 50, 4) -> f_277(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_277(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) -> f_278(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_278(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) -> f_279(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) :|: TRUE
f_279(v81, v82, v83, v87, 51, 1, 52, v84, v89, v90, v91, 0, 3, 49, 50, 4) -> f_280(v81, v82, v83, v87, 51, 1, v84, 52, v89, v90, v91, 0, 3, 49, 50, 4) :|: 0 = 0
f_280(v81, v82, v83, v87, 51, 1, v84, 52, v89, v90, v91, 0, 3, 49, 50, 4) -> f_281(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_281(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_282(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_282(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_283(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_283(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_284(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 1 + v84 = v87
f_284(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_285(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_285(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_286(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_286(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_287(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: 0 = 0
f_287(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_288(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_288(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_289(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
f_289(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) -> f_258(v81, v82, v83, v87, 51, 1, 0, v84, 52, v89, v90, v91, 3, 49, 50, 4) :|: TRUE
Combined rules. Obtained 5 rulesP rules:
f_231(v81:0, v82:0, v83:0, 1 + v84:0, 51, 1, 52, v84:0, v89:0, v90:0, v91:0, 0, 3, 99, 52, 100, 51, 4) -> f_289(v81:0, v82:0, v83:0, 1 + v84:0, 51, 1, 0, v84:0, 52, v89:0, v90:0, v91:0, 3, 49, 50, 4) :|: v84:0 < 98 && v84:0 < 50
f_99 -> f_231(v1:0, v3:0, v5:0, 1, 99, 1, 100, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 0, 3, 99, 52, 100, 51, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0
f_231(v81:0, v82:0, v83:0, v87:0, v88:0, 1, v85:0, v84:0, v89:0, v90:0, v91:0, 0, 3, 99, 52, 100, 51, 4) -> f_237(v81:0, v82:0, v83:0, v87:0, v88:0, 0, v85:0, 1, v84:0, v89:0, v90:0, v91:0, 3, 50, 99, 52, 100, 51, 4) :|: v87:0 > 50 && v84:0 > 49 && v88:0 <= v87:0
f_231(v81:0, v82:0, v83:0, v87:0, 1 + v96:0, 1, v85:0, v84:0, v89:0, v90:0, v91:0, 0, 3, 99, 52, 100, 51, 4) -> f_231(v81:0, v82:0, v83:0, 1 + v87:0, v96:0, 1, 1 + v96:0, v87:0, v89:0, v90:0, v91:0, 0, 3, 99, 52, 100, 51, 4) :|: v87:0 < 99 && v87:0 < 1 + v96:0 && v84:0 < 98 && v85:0 > 52 && v96:0 > 50 && v87:0 > 0 && v96:0 < 99
f_289(v81:0, v82:0, v83:0, 1 + v84:0, 51, 1, 0, v84:0, 52, v89:0, v90:0, v91:0, 3, 49, 50, 4) -> f_289(v81:0, v82:0, v83:0, 1 + v84:0, 51, 1, 0, v84:0, 52, v89:0, v90:0, v91:0, 3, 49, 50, 4) :|: TRUE
Filtered unneeded arguments:
   f_231(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_231(x4, x5, x7, x8)
   f_289(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_289(x4, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_231(sum~cons_1~v84:0, cons_51, cons_52, v84:0) -> f_289(1 + v84:0, v84:0) :|: v84:0 < 98 && v84:0 < 50 && sum~cons_1~v84:0 = 1 + v84:0 && cons_51 = 51 && cons_52 = 52
f_99 -> f_231(1, 99, 100, 0) :|: TRUE
f_231(v87:0, v88:0, v85:0, v84:0) -> f_237(v81:0, v82:0, v83:0, v87:0, v88:0, 0, v85:0, 1, v84:0, v89:0, v90:0, v91:0, 3, 50, 99, 52, 100, 51, 4) :|: v84:0 > 49 && v88:0 <= v87:0 && v87:0 > 50
f_231(v87:0, sum~cons_1~v96:0, v85:0, v84:0) -> f_231(1 + v87:0, v96:0, 1 + v96:0, v87:0) :|: v87:0 < 1 + v96:0 && v87:0 < 99 && v84:0 < 98 && v85:0 > 52 && v96:0 > 50 && v96:0 < 99 && v87:0 > 0 && sum~cons_1~v96:0 = 1 + v96:0
f_289(sum~cons_1~v84:0, v84:0) -> f_289(1 + v84:0, v84:0) :|: TRUE && sum~cons_1~v84:0 = 1 + v84:0

----------------------------------------

(34)
Obligation:
Rules:
f_231(sum~cons_1~v84:0, cons_51, cons_52, v84:0) -> f_289(1 + v84:0, v84:0) :|: v84:0 < 98 && v84:0 < 50 && sum~cons_1~v84:0 = 1 + v84:0 && cons_51 = 51 && cons_52 = 52
f_99 -> f_231(1, 99, 100, 0) :|: TRUE
f_231(x, x1, x2, x3) -> f_237(x4, x5, x6, x, x1, 0, x2, 1, x3, x7, x8, x9, 3, 50, 99, 52, 100, 51, 4) :|: x3 > 49 && x1 <= x && x > 50
f_231(x10, x11, x12, x13) -> f_231(1 + x10, x14, 1 + x14, x10) :|: x10 < 1 + x14 && x10 < 99 && x13 < 98 && x12 > 52 && x14 > 50 && x14 < 99 && x10 > 0 && x11 = 1 + x14
f_289(x15, x16) -> f_289(1 + x16, x16) :|: TRUE && x15 = 1 + x16
Start term: f_99

----------------------------------------

(35) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination can continue
----------------------------------------

(36)
Obligation:
Rules:
f_231(sum~cons_1~v84:0, cons_51, cons_52, v84:0) -> f_289(1 + v84:0, v84:0) :|: v84:0 < 98 && v84:0 < 50 && sum~cons_1~v84:0 = 1 + v84:0 && cons_51 = 51 && cons_52 = 52
f_99 -> f_231(1, 99, 100, 0) :|: TRUE
f_231(x, x1, x2, x3) -> f_237(x4, x5, x6, x, x1, 0, x2, 1, x3, x7, x8, x9, 3, 50, 99, 52, 100, 51, 4) :|: x3 > 49 && x1 <= x && x > 50
f_231(x10, x11, x12, x13) -> f_231(1 + x10, x14, 1 + x14, x10) :|: x10 < 1 + x14 && x10 < 99 && x13 < 98 && x12 > 52 && x14 > 50 && x14 < 99 && x10 > 0 && x11 = 1 + x14
f_289(x15, x16) -> f_289(1 + x16, x16) :|: TRUE && x15 = 1 + x16
Start term: f_99

----------------------------------------

(37) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(38)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_99))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x40 x41 k20 x39 x35 x36 x37 x38 x31 x32 x33 x34 k18 k19 x30 x70 x140 x68 x142 x69 x141 x64 x65 x66 x67 x60 x61 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x131 x58 x130 x59 x133 x132 x53 x135 x54 x134 x55 x137 x56 x136 x139 x50 x138 x51 x52 x90 x91 x92 x120 x122 x121 x86 x124 x87 x123 x88 x126 x89 x125 x x82 x128 x83 x127 x84 x85 x129 x80 x81 x79 x111 x110 x75 x113 x76 x112 x'' x77 x115 x78 x114 x71 x117 x72 x116 x73 x119 x74 x118 k14 k15 x109 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x7 x27 x20 x102 x21 x101 x22 x104 x23 x103 x106 x1 x105 x108 x107 x' x17 x18 x19 x13 x14 x15 x16 x97 x10 x98 x11 x99 x12 x93 x94 x95 x96)
(RULES
  f_231(k7, k2, k1, k0, x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) -> f_289(1 + k0, k0, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) :|: k0 < 98 && k0 < 50 && k7 = 1 + k0 && k2 = 51 && k1 = 52
  f_99(x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48) -> f_231(1, 99, 100, 0, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63) :|: 0 = 0
  f_231(k16, k17, k18, k9, x79, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93) -> f_231(1 + k16, k11, 1 + k11, k16, x94, x95, x96, x97, x98, x99, x100, x101, x102, x103, x104, x105, x106, x107, x108) :|: k16 < 1 + k11 && k16 < 99 && k9 < 98 && k18 > 52 && k11 > 50 && k11 < 99 && k16 > 0 && k17 = 1 + k11
  f_289(k13, k15, x109, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122, x123, x124, x125) -> f_289(1 + k15, k15, x126, x127, x128, x129, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x140, x141, x142) :|: 0 = 0 && k13 = 1 + k15
  f_231(k19, k20, k5, k6, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78) -> f_237(k3, k4, k12, k19, k20, 0, k5, 1, k6, k14, k8, k10, 3, 50, 99, 52, 100, 51, 4) :|: k6 > 49 && k20 <= k19 && k19 > 50
)

----------------------------------------

(39) LoAT (EQUIVALENT)
LoAT was called with the following command:

/aprove/bin/loat --plain --nonterm --proof-level 3 /tmp/aprove.InputModules.Programs.loat5537226220636750637.koat 

LoAT's output was:


### Pre-processing the ITS problem ###

Initial linear ITS problem
   Start location: f_99
      0: f_231 -> f_289 : k13'=1+k0, k15'=k0, x109'=free_10, x110'=free_14, x111'=free_1, x112'=free_6, x113'=free_11, x114'=free, x115'=free_5, x116'=free_16, x117'=free_4, x118'=free_9, x119'=free_15, x120'=free_3, x121'=free_8, x122'=free_13, x123'=free_2, x124'=free_7, x125'=free_12, [ k0<98 && k0<50 && k7==1+k0 && k2==51 && k1==52 ], cost: 1
      2: f_231 -> f_231 : k0'=k7, k1'=1+free_40, k2'=free_40, k7'=1+k7, x'=free_34, x_'=free_39, x__'=free_44, x1'=free_32, x10'=free_43, x11'=free_47, x12'=free_36, x2'=free_37, x3'=free_42, x4'=free_41, x5'=free_46, x6'=free_35, x7'=free_45, x8'=free_33, x9'=free_38, [ k7<1+free_40 && k7<99 && k0<98 && k1>52 && free_40>50 && free_40<99 && k7>0 && k2==1+free_40 ], cost: 1
      4: f_231 -> f_237 : k0'=free_70, k1'=free_66, k10'=free_69, k11'=k7, k12'=k2, k13'=0, k14'=k1, k15'=1, k16'=k0, k17'=free_67, k18'=free_68, k19'=free_65, k2'=3, k20'=50, k3'=99, k4'=52, k5'=100, k6'=51, k7'=4, [ k0>49 && k2<=k7 && k7>50 ], cost: 1
      1: f_99 -> f_231 : k0'=0, k1'=100, k2'=99, k7'=1, x'=free_28, x_'=free_24, x__'=free_27, x1'=free_17, x10'=free_19, x11'=free_18, x12'=free_23, x2'=free_22, x3'=free_26, x4'=free_31, x5'=free_21, x6'=free_25, x7'=free_30, x8'=free_20, x9'=free_29, [ 0==0 ], cost: 1
      3: f_289 -> f_289 : k13'=1+k15, x109'=free_57, x110'=free_62, x111'=free_50, x112'=free_55, x113'=free_48, x114'=free_53, x115'=free_56, x116'=free_61, x117'=free_49, x118'=free_54, x119'=free_60, x120'=free_64, x121'=free_52, x122'=free_59, x123'=free_51, x124'=free_58, x125'=free_63, [ 0==0 && k13==1+k15 ], cost: 1

Checking for constant complexity:
   The following rule is satisfiable with cost >= 1, yielding constant complexity:
      1: f_99 -> f_231 : k0'=0, k1'=100, k2'=99, k7'=1, x'=free_28, x_'=free_24, x__'=free_27, x1'=free_17, x10'=free_19, x11'=free_18, x12'=free_23, x2'=free_22, x3'=free_26, x4'=free_31, x5'=free_21, x6'=free_25, x7'=free_30, x8'=free_20, x9'=free_29, [ 0==0 ], cost: 1

Removed unreachable and leaf rules:
   Start location: f_99
      0: f_231 -> f_289 : k13'=1+k0, k15'=k0, x109'=free_10, x110'=free_14, x111'=free_1, x112'=free_6, x113'=free_11, x114'=free, x115'=free_5, x116'=free_16, x117'=free_4, x118'=free_9, x119'=free_15, x120'=free_3, x121'=free_8, x122'=free_13, x123'=free_2, x124'=free_7, x125'=free_12, [ k0<98 && k0<50 && k7==1+k0 && k2==51 && k1==52 ], cost: 1
      2: f_231 -> f_231 : k0'=k7, k1'=1+free_40, k2'=free_40, k7'=1+k7, x'=free_34, x_'=free_39, x__'=free_44, x1'=free_32, x10'=free_43, x11'=free_47, x12'=free_36, x2'=free_37, x3'=free_42, x4'=free_41, x5'=free_46, x6'=free_35, x7'=free_45, x8'=free_33, x9'=free_38, [ k7<1+free_40 && k7<99 && k0<98 && k1>52 && free_40>50 && free_40<99 && k7>0 && k2==1+free_40 ], cost: 1
      1: f_99 -> f_231 : k0'=0, k1'=100, k2'=99, k7'=1, x'=free_28, x_'=free_24, x__'=free_27, x1'=free_17, x10'=free_19, x11'=free_18, x12'=free_23, x2'=free_22, x3'=free_26, x4'=free_31, x5'=free_21, x6'=free_25, x7'=free_30, x8'=free_20, x9'=free_29, [ 0==0 ], cost: 1
      3: f_289 -> f_289 : k13'=1+k15, x109'=free_57, x110'=free_62, x111'=free_50, x112'=free_55, x113'=free_48, x114'=free_53, x115'=free_56, x116'=free_61, x117'=free_49, x118'=free_54, x119'=free_60, x120'=free_64, x121'=free_52, x122'=free_59, x123'=free_51, x124'=free_58, x125'=free_63, [ 0==0 && k13==1+k15 ], cost: 1

Simplified all rules, resulting in:
   Start location: f_99
      0: f_231 -> f_289 : k13'=1+k0, k15'=k0, x109'=free_10, x110'=free_14, x111'=free_1, x112'=free_6, x113'=free_11, x114'=free, x115'=free_5, x116'=free_16, x117'=free_4, x118'=free_9, x119'=free_15, x120'=free_3, x121'=free_8, x122'=free_13, x123'=free_2, x124'=free_7, x125'=free_12, [ k0<50 && k7==1+k0 && k2==51 && k1==52 ], cost: 1
      2: f_231 -> f_231 : k0'=k7, k1'=k2, k2'=-1+k2, k7'=1+k7, x'=free_34, x_'=free_39, x__'=free_44, x1'=free_32, x10'=free_43, x11'=free_47, x12'=free_36, x2'=free_37, x3'=free_42, x4'=free_41, x5'=free_46, x6'=free_35, x7'=free_45, x8'=free_33, x9'=free_38, [ k7<k2 && k7<99 && k0<98 && k1>52 && -1+k2>50 && -1+k2<99 && k7>0 ], cost: 1
      1: f_99 -> f_231 : k0'=0, k1'=100, k2'=99, k7'=1, x'=free_28, x_'=free_24, x__'=free_27, x1'=free_17, x10'=free_19, x11'=free_18, x12'=free_23, x2'=free_22, x3'=free_26, x4'=free_31, x5'=free_21, x6'=free_25, x7'=free_30, x8'=free_20, x9'=free_29, [], cost: 1
      3: f_289 -> f_289 : k13'=1+k15, x109'=free_57, x110'=free_62, x111'=free_50, x112'=free_55, x113'=free_48, x114'=free_53, x115'=free_56, x116'=free_61, x117'=free_49, x118'=free_54, x119'=free_60, x120'=free_64, x121'=free_52, x122'=free_59, x123'=free_51, x124'=free_58, x125'=free_63, [ k13==1+k15 ], cost: 1

### Simplification by acceleration and chaining ###

Accelerating simple loops of location 0.
   Accelerating the following rules:
      2: f_231 -> f_231 : k0'=k7, k1'=k2, k2'=-1+k2, k7'=1+k7, x'=free_34, x_'=free_39, x__'=free_44, x1'=free_32, x10'=free_43, x11'=free_47, x12'=free_36, x2'=free_37, x3'=free_42, x4'=free_41, x5'=free_46, x6'=free_35, x7'=free_45, x8'=free_33, x9'=free_38, [ k7<k2 && k7<99 && k0<98 && k1>52 && -1+k2>50 && -1+k2<99 && k7>0 ], cost: 1

   Failed to prove monotonicity of the guard of rule 2.

Accelerating simple loops of location 2.
   Accelerating the following rules:
      3: f_289 -> f_289 : k13'=1+k15, x109'=free_57, x110'=free_62, x111'=free_50, x112'=free_55, x113'=free_48, x114'=free_53, x115'=free_56, x116'=free_61, x117'=free_49, x118'=free_54, x119'=free_60, x120'=free_64, x121'=free_52, x122'=free_59, x123'=free_51, x124'=free_58, x125'=free_63, [ k13==1+k15 ], cost: 1

   Accelerated rule 3 with non-termination, yielding the new rule 5.
   Removing the simple loops: 3.

Accelerated all simple loops using metering functions (where possible):
   Start location: f_99
      0: f_231 -> f_289 : k13'=1+k0, k15'=k0, x109'=free_10, x110'=free_14, x111'=free_1, x112'=free_6, x113'=free_11, x114'=free, x115'=free_5, x116'=free_16, x117'=free_4, x118'=free_9, x119'=free_15, x120'=free_3, x121'=free_8, x122'=free_13, x123'=free_2, x124'=free_7, x125'=free_12, [ k0<50 && k7==1+k0 && k2==51 && k1==52 ], cost: 1
      2: f_231 -> f_231 : k0'=k7, k1'=k2, k2'=-1+k2, k7'=1+k7, x'=free_34, x_'=free_39, x__'=free_44, x1'=free_32, x10'=free_43, x11'=free_47, x12'=free_36, x2'=free_37, x3'=free_42, x4'=free_41, x5'=free_46, x6'=free_35, x7'=free_45, x8'=free_33, x9'=free_38, [ k7<k2 && k7<99 && k0<98 && k1>52 && -1+k2>50 && -1+k2<99 && k7>0 ], cost: 1
      1: f_99 -> f_231 : k0'=0, k1'=100, k2'=99, k7'=1, x'=free_28, x_'=free_24, x__'=free_27, x1'=free_17, x10'=free_19, x11'=free_18, x12'=free_23, x2'=free_22, x3'=free_26, x4'=free_31, x5'=free_21, x6'=free_25, x7'=free_30, x8'=free_20, x9'=free_29, [], cost: 1
      5: f_289 -> [5] : [ k13==1+k15 ], cost: NONTERM

Chaining 2 accelerated rules with incoming rules:
   Chained incoming rule 1 with accelerated rule 2 to new rule 6.
   Removing accelerated rule 2.
   Chained incoming rule 0 with accelerated rule 5 to new rule 7.
   Removing accelerated rule 5.

Chained accelerated rules (with incoming rules):
   Start location: f_99
      0: f_231 -> f_289 : k13'=1+k0, k15'=k0, x109'=free_10, x110'=free_14, x111'=free_1, x112'=free_6, x113'=free_11, x114'=free, x115'=free_5, x116'=free_16, x117'=free_4, x118'=free_9, x119'=free_15, x120'=free_3, x121'=free_8, x122'=free_13, x123'=free_2, x124'=free_7, x125'=free_12, [ k0<50 && k7==1+k0 && k2==51 && k1==52 ], cost: 1
      7: f_231 -> [5] : [ k0<50 && k7==1+k0 && k2==51 && k1==52 ], cost: NONTERM
      1: f_99 -> f_231 : k0'=0, k1'=100, k2'=99, k7'=1, x'=free_28, x_'=free_24, x__'=free_27, x1'=free_17, x10'=free_19, x11'=free_18, x12'=free_23, x2'=free_22, x3'=free_26, x4'=free_31, x5'=free_21, x6'=free_25, x7'=free_30, x8'=free_20, x9'=free_29, [], cost: 1
      6: f_99 -> f_231 : k0'=1, k1'=99, k2'=98, k7'=2, x'=free_34, x_'=free_39, x__'=free_44, x1'=free_32, x10'=free_43, x11'=free_47, x12'=free_36, x2'=free_37, x3'=free_42, x4'=free_41, x5'=free_46, x6'=free_35, x7'=free_45, x8'=free_33, x9'=free_38, [], cost: 2

Removed unreachable locations (and leaf rules with constant cost):
   Start location: f_99
      7: f_231 -> [5] : [ k0<50 && k7==1+k0 && k2==51 && k1==52 ], cost: NONTERM
      1: f_99 -> f_231 : k0'=0, k1'=100, k2'=99, k7'=1, x'=free_28, x_'=free_24, x__'=free_27, x1'=free_17, x10'=free_19, x11'=free_18, x12'=free_23, x2'=free_22, x3'=free_26, x4'=free_31, x5'=free_21, x6'=free_25, x7'=free_30, x8'=free_20, x9'=free_29, [], cost: 1
      6: f_99 -> f_231 : k0'=1, k1'=99, k2'=98, k7'=2, x'=free_34, x_'=free_39, x__'=free_44, x1'=free_32, x10'=free_43, x11'=free_47, x12'=free_36, x2'=free_37, x3'=free_42, x4'=free_41, x5'=free_46, x6'=free_35, x7'=free_45, x8'=free_33, x9'=free_38, [], cost: 2

Eliminating location f_231 by chaining:
   Failed to chain rules 1 and 7.
   Failed to chain rules 6 and 7.

Eliminated locations (on tree-shaped paths):
   Start location: f_99
     <empty>

### Computing asymptotic complexity ###

Fully simplified ITS problem
   Start location: f_99
     <empty>

Obtained the following overall complexity (w.r.t. the length of the input n):
   Complexity:  Constant
   Cpx degree:  0
   Solved cost: 1
   Rule cost:   1
   Rule guard:  [ 0==0 ]

WORST_CASE(Omega(1),?)

----------------------------------------

(40)
MAYBE

----------------------------------------

(41) CToIRSProof (EQUIVALENT)
Parsed C Integer Program as IRS.
----------------------------------------

(42)
Obligation:
Rules:
f1(i, j) -> f2(i, 100) :|: TRUE
f2(x, x1) -> f3(0, x1) :|: TRUE
f5(x2, x3) -> f8(arith, x3) :|: TRUE && arith = x2 + 1
f8(x24, x25) -> f9(x24, x26) :|: TRUE && x26 = x25 - 1
f6(x27, x28) -> f10(x29, x28) :|: TRUE && x29 = x27 - 1
f10(x30, x31) -> f11(x30, x32) :|: TRUE && x32 = x31 + 1
f4(x10, x11) -> f5(x10, x11) :|: 51 < x11
f4(x12, x13) -> f6(x12, x13) :|: 51 >= x13
f9(x14, x15) -> f7(x14, x15) :|: TRUE
f11(x16, x17) -> f7(x16, x17) :|: TRUE
f3(x18, x19) -> f4(x18, x19) :|: x18 < x19
f7(x20, x21) -> f3(x20, x21) :|: TRUE
f3(x22, x23) -> f12(x22, x23) :|: x22 >= x23
Start term: f1(i, j)

----------------------------------------

(43) TerminationGraphProcessor (SOUND)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(44)
Obligation:
Rules:
f3(x18, x19) -> f4(x18, x19) :|: x18 < x19
f7(x20, x21) -> f3(x20, x21) :|: TRUE
f9(x14, x15) -> f7(x14, x15) :|: TRUE
f8(x24, x25) -> f9(x24, x26) :|: TRUE && x26 = x25 - 1
f5(x2, x3) -> f8(arith, x3) :|: TRUE && arith = x2 + 1
f4(x10, x11) -> f5(x10, x11) :|: 51 < x11
f11(x16, x17) -> f7(x16, x17) :|: TRUE
f10(x30, x31) -> f11(x30, x32) :|: TRUE && x32 = x31 + 1
f6(x27, x28) -> f10(x29, x28) :|: TRUE && x29 = x27 - 1
f4(x12, x13) -> f6(x12, x13) :|: 51 >= x13

----------------------------------------

(45) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(46)
Obligation:
Rules:
f7(x20:0, x21:0) -> f7(x20:0 + 1, x21:0 - 1) :|: x21:0 > x20:0 && x21:0 > 51
f7(x, x1) -> f7(x - 1, x1 + 1) :|: x1 > x && x1 < 52

----------------------------------------

(47) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, x20:0, x21:0) -> f(1, x20:0 + 1, x21:0 - 1) :|: pc = 1 && (x21:0 > x20:0 && x21:0 > 51)
f(pc, x, x1) -> f(1, x - 1, x1 + 1) :|: pc = 1 && (x1 > x && x1 < 52)
Witness term starting non-terminating reduction: f(1, 0, 52)
----------------------------------------

(48)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
