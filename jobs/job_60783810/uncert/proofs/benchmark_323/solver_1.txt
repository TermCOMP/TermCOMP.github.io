YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ckvZm.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 61 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 177 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 53 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/ckvZm.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/ckvZm.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		br %7
	7:
		%8 = load %2
		%9 = icmp sgt %8 0
		br %9, %10, %15
	10:
		%11 = load %3
		%12 = load %4
		%13 = sub i32 0, %12
		%14 = icmp sle %11 %13
		br %15
	15:
		%16 = phi [0, %7], [%14, %10]
		br %16, %17, %21
	17:
		%18 = load %3
		store %18, %2
		%19 = load %3
		store %19, %4
		%20 = call i32 @__VERIFIER_nondet_int()
		store %20, %3
		br %7
	21:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_164(v132, v133, v134, v135, v136, v137, v140, 1, v141, v142, v143, v144, v145, v146, v147, 0, 3, 4) -> f_165(v132, v133, v134, v135, v136, v137, v140, 1, v141, v142, v143, v144, v145, v146, v147, 0, 3, 4) :|: 0 < v140 && 1 <= v142 && 1 + v141 <= 0
f_165(v132, v133, v134, v135, v136, v137, v140, 1, v141, v142, v143, v144, v145, v146, v147, 0, 3, 4) -> f_167(v132, v133, v134, v135, v136, v137, v140, 1, v141, v142, v143, v144, v145, v146, v147, 0, 3, 4) :|: 0 = 0
f_167(v132, v133, v134, v135, v136, v137, v140, 1, v141, v142, v143, v144, v145, v146, v147, 0, 3, 4) -> f_169(v132, v133, v134, v135, v136, v137, v140, 1, v141, v142, v143, v144, v145, v146, v147, 0, 3, 4) :|: TRUE
f_169(v132, v133, v134, v135, v136, v137, v140, 1, v141, v142, v143, v144, v145, v146, v147, 0, 3, 4) -> f_171(v132, v133, v134, v135, v136, v137, v140, 1, v143, v141, v142, v144, v145, v146, v147, 0, 3, 4) :|: 0 = 0
f_171(v132, v133, v134, v135, v136, v137, v140, 1, v143, v141, v142, v144, v145, v146, v147, 0, 3, 4) -> f_173(v132, v133, v134, v135, v136, v137, v140, 1, v143, v142, v144, v145, v146, v147, 0, 3, 4) :|: 0 = 0
f_173(v132, v133, v134, v135, v136, v137, v140, 1, v143, v142, v144, v145, v146, v147, 0, 3, 4) -> f_174(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) :|: v167 + v140 = 0 && 1 + v167 <= 0
f_174(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) -> f_175(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) :|: v143 <= v167 && 1 + v143 <= 0
f_175(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) -> f_177(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) :|: 0 = 0
f_177(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) -> f_179(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) :|: 0 = 0
f_179(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) -> f_181(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) :|: TRUE
f_181(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) -> f_183(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) :|: 0 = 0
f_183(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) -> f_184(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) :|: TRUE
f_184(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) -> f_185(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) :|: 0 = 0
f_185(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) -> f_186(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) :|: TRUE
f_186(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v144, v145, v146, v147, 0, 3, 4) -> f_187(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v231, v144, v145, v146, v147, 0, 3, 4) :|: TRUE
f_187(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v231, v144, v145, v146, v147, 0, 3, 4) -> f_188(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v231, v144, v145, v146, v147, 0, 3, 4) :|: TRUE
f_188(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v231, v144, v145, v146, v147, 0, 3, 4) -> f_189(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v231, v144, v145, v146, v147, 0, 3, 4) :|: TRUE
f_189(v132, v133, v134, v135, v136, v137, v140, 1, v143, v167, v231, v144, v145, v146, v147, 0, 3, 4) -> f_163(v132, v133, v134, v135, v136, v137, v140, 1, v143, v140, v167, v231, v144, v145, v146, v147, 0, 3, 4) :|: TRUE
f_163(v132, v133, v134, v135, v136, v137, v138, 1, v140, v141, v142, v143, v144, v145, v146, v147, 0, 3, 4) -> f_164(v132, v133, v134, v135, v136, v137, v140, 1, v141, v142, v143, v144, v145, v146, v147, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_164(v132:0, v133:0, v134:0, v135:0, v136:0, v137:0, v140:0, 1, v141:0, v142:0, v143:0, v144:0, v145:0, v146:0, v147:0, 0, 3, 4) -> f_164(v132:0, v133:0, v134:0, v135:0, v136:0, v137:0, v143:0, 1, v140:0, v167:0, v231:0, v144:0, v145:0, v146:0, v147:0, 0, 3, 4) :|: v142:0 > 0 && v140:0 > 0 && v141:0 < 0 && v167:0 < 0 && v167:0 + v140:0 = 0 && v167:0 >= v143:0 && v143:0 < 0
Filtered unneeded arguments:
   f_164(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_164(x7, x9, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_164(v140:0, v141:0, v142:0, v143:0) -> f_164(v143:0, v140:0, v167:0, v231:0) :|: v140:0 > 0 && v142:0 > 0 && v141:0 < 0 && v167:0 < 0 && v167:0 + v140:0 = 0 && v143:0 < 0 && v167:0 >= v143:0

----------------------------------------

(8)
Obligation:
Rules:
f_164(v140:0, v141:0, v142:0, v143:0) -> f_164(v143:0, v140:0, v167:0, v231:0) :|: v140:0 > 0 && v142:0 > 0 && v141:0 < 0 && v167:0 < 0 && v167:0 + v140:0 = 0 && v143:0 < 0 && v167:0 >= v143:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_164(v140:0:0, v141:0:0, v142:0:0, v143:0:0) -> f_164(v143:0:0, v140:0:0, v167:0:0, v231:0:0) :|: v143:0:0 < 0 && v167:0:0 >= v143:0:0 && v167:0:0 + v140:0:0 = 0 && v167:0:0 < 0 && v141:0:0 < 0 && v142:0:0 > 0 && v140:0:0 > 0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_164(x, x1, x2, x3)] = -1 - x1

The following rules are decreasing:
f_164(v140:0:0, v141:0:0, v142:0:0, v143:0:0) -> f_164(v143:0:0, v140:0:0, v167:0:0, v231:0:0) :|: v143:0:0 < 0 && v167:0:0 >= v143:0:0 && v167:0:0 + v140:0:0 = 0 && v167:0:0 < 0 && v141:0:0 < 0 && v142:0:0 > 0 && v140:0:0 > 0
The following rules are bounded:
f_164(v140:0:0, v141:0:0, v142:0:0, v143:0:0) -> f_164(v143:0:0, v140:0:0, v167:0:0, v231:0:0) :|: v143:0:0 < 0 && v167:0:0 >= v143:0:0 && v167:0:0 + v140:0:0 = 0 && v167:0:0 < 0 && v141:0:0 < 0 && v142:0:0 > 0 && v140:0:0 > 0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
