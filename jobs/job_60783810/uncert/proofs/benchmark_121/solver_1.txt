YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/kWyDE.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 36 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1024 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 51 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 44 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/kWyDE.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/kWyDE.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		%4 = alloca *i32, align 8
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%7 = alloca i8, numElementsLit: 4, align 16
		%8 = bitcast *i8 %7 to *i32
		store %8, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %4)
		%11 = alloca i8, numElementsLit: 4, align 16
		%12 = bitcast *i8 %11 to *i32
		store %12, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%13 = alloca i8, numElementsLit: 4, align 16
		%14 = bitcast *i8 %13 to *i32
		store %14, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%15 = alloca i8, numElementsLit: 4, align 16
		%16 = bitcast *i8 %15 to *i32
		store %16, %6
		%17 = call i32 @__VERIFIER_nondet_int()
		%18 = icmp ne %17 0
		br %18, %19, %21
	19:
		%20 = load %2
		store 1, %20
		br %23
	21:
		%22 = load %2
		store -1, %22
		br %23
	23:
		%24 = load %2
		%25 = load %24
		%26 = icmp sgt %25 0
		br %26, %27, %31
	27:
		%28 = load %2
		%29 = load %28
		%30 = add i32 %29, 1
		store %30, %28
		br %35
	31:
		%32 = load %2
		%33 = load %32
		%34 = add i32 %33, -1
		store %34, %32
		br %35
	35:
		%36 = load %2
		%37 = load %36
		%38 = icmp sgt %37 0
		br %38, %39, %43
	39:
		%40 = load %2
		%41 = load %40
		%42 = add i32 %41, 1
		store %42, %40
		br %47
	43:
		%44 = load %2
		%45 = load %44
		%46 = add i32 %45, -1
		store %46, %44
		br %47
	47:
		%48 = load %2
		%49 = load %48
		%50 = icmp sgt %49 0
		br %50, %51, %55
	51:
		%52 = load %2
		%53 = load %52
		%54 = add i32 %53, 1
		store %54, %52
		br %59
	55:
		%56 = load %2
		%57 = load %56
		%58 = add i32 %57, -1
		store %58, %56
		br %59
	59:
		%60 = load %2
		%61 = load %60
		%62 = icmp sgt %61 0
		br %62, %63, %67
	63:
		%64 = load %2
		%65 = load %64
		%66 = add i32 %65, 1
		store %66, %64
		br %71
	67:
		%68 = load %2
		%69 = load %68
		%70 = add i32 %69, -1
		store %70, %68
		br %71
	71:
		%72 = load %2
		%73 = load %72
		%74 = icmp sgt %73 0
		br %74, %75, %79
	75:
		%76 = load %2
		%77 = load %76
		%78 = add i32 %77, 1
		store %78, %76
		br %83
	79:
		%80 = load %2
		%81 = load %80
		%82 = add i32 %81, -1
		store %82, %80
		br %83
	83:
		%84 = load %2
		%85 = load %84
		%86 = icmp sgt %85 0
		br %86, %87, %91
	87:
		%88 = load %2
		%89 = load %88
		%90 = add i32 %89, 1
		store %90, %88
		br %95
	91:
		%92 = load %2
		%93 = load %92
		%94 = add i32 %93, -1
		store %94, %92
		br %95
	95:
		%96 = load %2
		%97 = load %96
		%98 = icmp sgt %97 0
		br %98, %99, %103
	99:
		%100 = load %2
		%101 = load %100
		%102 = add i32 %101, 1
		store %102, %100
		br %107
	103:
		%104 = load %2
		%105 = load %104
		%106 = add i32 %105, -1
		store %106, %104
		br %107
	107:
		%108 = load %2
		%109 = load %108
		%110 = icmp sgt %109 0
		br %110, %111, %115
	111:
		%112 = load %2
		%113 = load %112
		%114 = add i32 %113, 1
		store %114, %112
		br %119
	115:
		%116 = load %2
		%117 = load %116
		%118 = add i32 %117, -1
		store %118, %116
		br %119
	119:
		br %120
	120:
		%121 = load %3
		%122 = load %121
		%123 = icmp slt %122 100
		br %123, %124, %128
	124:
		%125 = load %4
		%126 = load %125
		%127 = icmp slt %126 100
		br %128
	128:
		%129 = phi [0, %120], [%127, %124]
		br %129, %130, %143
	130:
		%131 = load %3
		%132 = load %131
		%133 = load %2
		%134 = load %133
		%135 = add i32 %132, %134
		%136 = load %3
		store %135, %136
		%137 = load %4
		%138 = load %137
		%139 = load %2
		%140 = load %139
		%141 = sub i32 %138, %140
		%142 = load %4
		store %141, %142
		br %120
	143:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_785(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v31, 1, v35, v234, v238, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90, 108) -> f_787(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v35, v31, v238, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90, 108) :|: 0 = 0
f_787(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v35, v31, v238, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90, 108) -> f_790(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v35, v31, v238, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90, 108) :|: 0 = 0
f_790(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v35, v31, v238, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90, 108) -> f_793(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v35, v31, v238, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90, 108) :|: TRUE
f_793(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v35, v31, v238, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90, 108) -> f_796(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v35, v31, v238, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90, 108) :|: 0 = 0
f_796(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v35, v31, v238, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90, 108) -> f_799(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v31, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90, 108) :|: 0 = 0
f_799(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v31, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90, 108) -> f_801(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v31, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90) :|: v238 < 100 && v35 <= 90
f_801(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v31, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90) -> f_804(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v31, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90) :|: 0 = 0
f_804(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v31, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90) -> f_807(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v31, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90) :|: 0 = 0
f_807(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v31, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90) -> f_810(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v31, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90) :|: TRUE
f_810(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v31, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90) -> f_813(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v31, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90) :|: 0 = 0
f_813(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v31, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90) -> f_815(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99) :|: 0 = 0
f_815(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99) -> f_817(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99) :|: 0 = 0
f_817(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99) -> f_819(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99) :|: 0 = 0
f_819(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99) -> f_821(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81) :|: 9 + v932 = v234 && v932 <= 81
f_821(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81) -> f_823(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81) :|: 0 = 0
f_823(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81) -> f_825(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81) :|: TRUE
f_825(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81) -> f_827(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81) :|: 0 = 0
f_827(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81) -> f_829(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81) :|: 0 = 0
f_829(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81) -> f_831(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81) :|: 0 = 0
f_831(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81) -> f_833(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81) :|: 0 = 0
f_833(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81) -> f_835(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v936, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81, 108) :|: v936 = 9 + v238 && v936 <= 108
f_835(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v936, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81, 108) -> f_837(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v936, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81, 108) :|: 0 = 0
f_837(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v936, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81, 108) -> f_839(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v936, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81, 108) :|: TRUE
f_839(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v936, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81, 108) -> f_841(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v936, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81, 108) :|: TRUE
f_841(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v936, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 90, 99, 81, 108) -> f_783(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v234, 1, v238, v932, v936, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90, 108) :|: TRUE
f_783(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v31, 1, v35, v234, v238, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90, 108) -> f_785(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v31, 1, v35, v234, v238, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 9, 4, 8, 99, 90, 108) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_785(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v16:0, v19:0, v22:0, v25:0, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v31:0, 1, v35:0, 9 + v932:0, v238:0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0, v14:0, v17:0, v20:0, v23:0, v26:0, 3, 7, 9, 4, 8, 99, 90, 108) -> f_785(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v16:0, v19:0, v22:0, v25:0, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, 9 + v932:0, 1, v238:0, v932:0, 9 + v238:0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0, v14:0, v17:0, v20:0, v23:0, v26:0, 3, 7, 9, 4, 8, 99, 90, 108) :|: v35:0 < 91 && v238:0 < 100 && v932:0 < 82
Filtered unneeded arguments:
   f_785(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45) -> f_785(x24, x25, x26)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_785(v35:0, sum~cons_9~v932:0, v238:0) -> f_785(v238:0, v932:0, 9 + v238:0) :|: v238:0 < 100 && v932:0 < 82 && v35:0 < 91 && sum~cons_9~v932:0 = 9 + v932:0

----------------------------------------

(9)
Obligation:
Rules:
f_785(v35:0, sum~cons_9~v932:0, v238:0) -> f_785(v238:0, v932:0, 9 + v238:0) :|: v238:0 < 100 && v932:0 < 82 && v35:0 < 91 && sum~cons_9~v932:0 = 9 + v932:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_785(v35:0:0, sum~cons_9~v932:0:0, v238:0:0) -> f_785(v238:0:0, v932:0:0, 9 + v238:0:0) :|: v238:0:0 < 100 && v932:0:0 < 82 && v35:0:0 < 91 && sum~cons_9~v932:0:0 = 9 + v932:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_785(x, x1, x2)] = 288 - x1 - 2*x2

The following rules are decreasing:
f_785(v35:0:0, sum~cons_9~v932:0:0, v238:0:0) -> f_785(v238:0:0, v932:0:0, 9 + v238:0:0) :|: v238:0:0 < 100 && v932:0:0 < 82 && v35:0:0 < 91 && sum~cons_9~v932:0:0 = 9 + v932:0:0
The following rules are bounded:
f_785(v35:0:0, sum~cons_9~v932:0:0, v238:0:0) -> f_785(v238:0:0, v932:0:0, 9 + v238:0:0) :|: v238:0:0 < 100 && v932:0:0 < 82 && v35:0:0 < 91 && sum~cons_9~v932:0:0 = 9 + v932:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_784(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v29, v33, v233, v237, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 108, 90) -> f_786(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v33, v29, v237, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 108, 90) :|: 0 = 0
f_786(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v33, v29, v237, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 108, 90) -> f_788(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v33, v29, v237, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) :|: v233 < 100 && v29 <= 90
f_788(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v33, v29, v237, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) -> f_791(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v33, v29, v237, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) :|: 0 = 0
f_791(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v33, v29, v237, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) -> f_794(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v33, v29, v237, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) :|: TRUE
f_794(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v33, v29, v237, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) -> f_797(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v33, v29, v237, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) :|: 0 = 0
f_797(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v33, v29, v237, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) -> f_800(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) :|: 0 = 0
f_800(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) -> f_803(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) :|: 0 = 0
f_803(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) -> f_806(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) :|: 0 = 0
f_806(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) -> f_809(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) :|: TRUE
f_809(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) -> f_812(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) :|: 0 = 0
f_812(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 90, 99) -> f_814(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90) :|: 0 = 0
f_814(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90) -> f_816(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90) :|: 0 = 0
f_816(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90) -> f_818(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90) :|: 0 = 0
f_818(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90) -> f_820(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108) :|: v931 = 9 + v233 && v931 <= 108
f_820(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108) -> f_822(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108) :|: 0 = 0
f_822(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108) -> f_824(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108) :|: TRUE
f_824(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108) -> f_826(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108) :|: 0 = 0
f_826(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108) -> f_828(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108) :|: 0 = 0
f_828(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108) -> f_830(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108) :|: 0 = 0
f_830(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108) -> f_832(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108) :|: 0 = 0
f_832(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108) -> f_834(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v935, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108, 81) :|: 9 + v935 = v237 && v935 <= 81
f_834(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v935, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108, 81) -> f_836(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v935, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108, 81) :|: 0 = 0
f_836(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v935, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108, 81) -> f_838(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v935, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108, 81) :|: TRUE
f_838(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v935, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108, 81) -> f_840(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v935, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108, 81) :|: TRUE
f_840(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v935, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 90, 108, 81) -> f_782(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233, v237, v931, v935, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 108, 90) :|: TRUE
f_782(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v29, v33, v233, v237, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 108, 90) -> f_784(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, 2, 3, 4, 5, 6, 7, 8, 9, v29, v33, v233, v237, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 99, 108, 90) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_784(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v16:0, v19:0, v22:0, v25:0, v28:0, 1, 2, 3, 4, 5, 6, 7, 8, 9, v29:0, v33:0, v233:0, 9 + v935:0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0, v14:0, v17:0, v20:0, v23:0, v26:0, 0, 99, 108, 90) -> f_784(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v16:0, v19:0, v22:0, v25:0, v28:0, 1, 2, 3, 4, 5, 6, 7, 8, 9, v233:0, 9 + v935:0, 9 + v233:0, v935:0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0, v14:0, v17:0, v20:0, v23:0, v26:0, 0, 99, 108, 90) :|: v29:0 < 91 && v233:0 < 100 && v935:0 < 82
Filtered unneeded arguments:
   f_784(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40) -> f_784(x22, x24, x25)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_784(v29:0, v233:0, sum~cons_9~v935:0) -> f_784(v233:0, 9 + v233:0, v935:0) :|: v233:0 < 100 && v935:0 < 82 && v29:0 < 91 && sum~cons_9~v935:0 = 9 + v935:0

----------------------------------------

(16)
Obligation:
Rules:
f_784(v29:0, v233:0, sum~cons_9~v935:0) -> f_784(v233:0, 9 + v233:0, v935:0) :|: v233:0 < 100 && v935:0 < 82 && v29:0 < 91 && sum~cons_9~v935:0 = 9 + v935:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_784(v29:0:0, v233:0:0, sum~cons_9~v935:0:0) -> f_784(v233:0:0, 9 + v233:0:0, v935:0:0) :|: v233:0:0 < 100 && v935:0:0 < 82 && v29:0:0 < 91 && sum~cons_9~v935:0:0 = 9 + v935:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_784(x, x1, x2)] = 477 - 3*x1 - 2*x2

The following rules are decreasing:
f_784(v29:0:0, v233:0:0, sum~cons_9~v935:0:0) -> f_784(v233:0:0, 9 + v233:0:0, v935:0:0) :|: v233:0:0 < 100 && v935:0:0 < 82 && v29:0:0 < 91 && sum~cons_9~v935:0:0 = 9 + v935:0:0
The following rules are bounded:
f_784(v29:0:0, v233:0:0, sum~cons_9~v935:0:0) -> f_784(v233:0:0, 9 + v233:0:0, v935:0:0) :|: v233:0:0 < 100 && v935:0:0 < 82 && v29:0:0 < 91 && sum~cons_9~v935:0:0 = 9 + v935:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
