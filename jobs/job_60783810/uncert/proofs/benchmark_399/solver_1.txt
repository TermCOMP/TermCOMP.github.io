YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/rFuBj.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 401 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 4 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 44 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/rFuBj.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/rFuBj.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sgt %7 0
		br %8, %9, %20
	9:
		%10 = load %3
		%11 = icmp sgt %10 0
		br %11, %12, %14
	12:
		store 0, %3
		%13 = call i32 @__VERIFIER_nondet_int()
		store %13, %2
		br %19
	14:
		%15 = load %3
		%16 = sub i32 %15, 1
		store %16, %3
		%17 = load %2
		%18 = sub i32 %17, 1
		store %18, %2
		br %19
	19:
		br %6
	20:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_262(v368, v369, v370, v371, v372, v373, 1, v375, 0, v377, v378, v379, v380, v381, v382, 3, 4) -> f_263(v368, v369, v370, v371, v372, v379, 1, v375, 0, v377, v378, v373, v380, v381, v382, 3, 4) :|: 0 = 0
f_263(v368, v369, v370, v371, v372, v379, 1, v375, 0, v377, v378, v373, v380, v381, v382, 3, 4) -> f_264(v368, v369, v370, v371, v372, v379, 1, v375, 0, v377, v378, v373, v380, v381, v382, 3, 2, 4) :|: 0 < v379 && 2 <= v373 && 2 <= v377
f_264(v368, v369, v370, v371, v372, v379, 1, v375, 0, v377, v378, v373, v380, v381, v382, 3, 2, 4) -> f_266(v368, v369, v370, v371, v372, v379, 1, v375, 0, v377, v378, v373, v380, v381, v382, 3, 2, 4) :|: 0 = 0
f_266(v368, v369, v370, v371, v372, v379, 1, v375, 0, v377, v378, v373, v380, v381, v382, 3, 2, 4) -> f_268(v368, v369, v370, v371, v372, v379, 1, v375, 0, v377, v378, v373, v380, v381, v382, 3, 2, 4) :|: TRUE
f_268(v368, v369, v370, v371, v372, v379, 1, v375, 0, v377, v378, v373, v380, v381, v382, 3, 2, 4) -> f_270(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v375, v373, v380, v381, v382, 3, 2, 4) :|: 0 = 0
f_270(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v375, v373, v380, v381, v382, 3, 2, 4) -> f_271(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v375, v373, v380, v381, v382, 3, 2, 4) :|: 0 = 0
f_271(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v375, v373, v380, v381, v382, 3, 2, 4) -> f_272(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v375, v373, v380, v381, v382, 3, 2, 4) :|: TRUE
f_272(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v375, v373, v380, v381, v382, 3, 2, 4) -> f_273(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v373, v380, v381, v382, 3, 2, 4) :|: 0 = 0
f_273(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v373, v380, v381, v382, 3, 2, 4) -> f_274(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v424, v373, v380, v381, v382, 3, 2, 4) :|: 1 + v424 = v378 && 2 + v424 <= 0
f_274(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v424, v373, v380, v381, v382, 3, 2, 4) -> f_275(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v424, v373, v380, v381, v382, 3, 2, 4) :|: TRUE
f_275(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v424, v373, v380, v381, v382, 3, 2, 4) -> f_276(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v424, v380, v381, v382, 3, 2, 4) :|: 0 = 0
f_276(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v424, v380, v381, v382, 3, 2, 4) -> f_277(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v424, v426, v380, v381, v382, 3, 2, 4) :|: 1 + v426 = v379 && 0 <= v426
f_277(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v424, v426, v380, v381, v382, 3, 2, 4) -> f_278(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v424, v426, v380, v381, v382, 3, 2, 4) :|: TRUE
f_278(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v424, v426, v380, v381, v382, 3, 2, 4) -> f_279(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v424, v426, v380, v381, v382, 3, 2, 4) :|: TRUE
f_279(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v424, v426, v380, v381, v382, 3, 2, 4) -> f_261(v368, v369, v370, v371, v372, v379, 1, v378, 0, v377, v424, v426, v380, v381, v382, 3, 4) :|: TRUE
f_261(v368, v369, v370, v371, v372, v373, 1, v375, 0, v377, v378, v379, v380, v381, v382, 3, 4) -> f_262(v368, v369, v370, v371, v372, v373, 1, v375, 0, v377, v378, v379, v380, v381, v382, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_262(v368:0, v369:0, v370:0, v371:0, v372:0, v373:0, 1, v375:0, 0, v377:0, 1 + v424:0, 1 + v426:0, v380:0, v381:0, v382:0, 3, 4) -> f_262(v368:0, v369:0, v370:0, v371:0, v372:0, 1 + v426:0, 1, 1 + v424:0, 0, v377:0, v424:0, v426:0, v380:0, v381:0, v382:0, 3, 4) :|: v373:0 > 1 && v426:0 > -1 && v377:0 > 1 && v424:0 < -1
Filtered unneeded arguments:
   f_262(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_262(x6, x10, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_262(v373:0, v377:0, sum~cons_1~v424:0, sum~cons_1~v426:0) -> f_262(1 + v426:0, v377:0, v424:0, v426:0) :|: v426:0 > -1 && v373:0 > 1 && v424:0 < -1 && v377:0 > 1 && sum~cons_1~v424:0 = 1 + v424:0 && sum~cons_1~v426:0 = 1 + v426:0

----------------------------------------

(9)
Obligation:
Rules:
f_262(v373:0, v377:0, sum~cons_1~v424:0, sum~cons_1~v426:0) -> f_262(1 + v426:0, v377:0, v424:0, v426:0) :|: v426:0 > -1 && v373:0 > 1 && v424:0 < -1 && v377:0 > 1 && sum~cons_1~v424:0 = 1 + v424:0 && sum~cons_1~v426:0 = 1 + v426:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_262(v373:0:0, v377:0:0, sum~cons_1~v424:0:0, sum~cons_1~v426:0:0) -> f_262(1 + v426:0:0, v377:0:0, v424:0:0, v426:0:0) :|: v424:0:0 < -1 && v377:0:0 > 1 && v373:0:0 > 1 && v426:0:0 > -1 && sum~cons_1~v424:0:0 = 1 + v424:0:0 && sum~cons_1~v426:0:0 = 1 + v426:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_262(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_262(v373:0:0, v377:0:0, sum~cons_1~v424:0:0, sum~cons_1~v426:0:0) -> f_262(1 + v426:0:0, v377:0:0, v424:0:0, v426:0:0) :|: v424:0:0 < -1 && v377:0:0 > 1 && v373:0:0 > 1 && v426:0:0 > -1 && sum~cons_1~v424:0:0 = 1 + v424:0:0 && sum~cons_1~v426:0:0 = 1 + v426:0:0
The following rules are bounded:
f_262(v373:0:0, v377:0:0, sum~cons_1~v424:0:0, sum~cons_1~v426:0:0) -> f_262(1 + v426:0:0, v377:0:0, v424:0:0, v426:0:0) :|: v424:0:0 < -1 && v377:0:0 > 1 && v373:0:0 > 1 && v426:0:0 > -1 && sum~cons_1~v424:0:0 = 1 + v424:0:0 && sum~cons_1~v426:0:0 = 1 + v426:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_212(v184, v185, v186, v187, v188, v189, 1, v191, 0, v193, v194, v195, v196, v197, 3, 4) -> f_215(v184, v185, v186, v187, v188, v194, 1, v191, 0, v193, v189, v195, v196, v197, 3, 4) :|: 0 = 0
f_215(v184, v185, v186, v187, v188, v194, 1, v191, 0, v193, v189, v195, v196, v197, 3, 4) -> f_217(v184, v185, v186, v187, v188, v194, 1, v191, 0, v193, v189, v195, v196, v197, 3, 2, 4) :|: 0 < v194 && 2 <= v189 && 2 <= v187
f_217(v184, v185, v186, v187, v188, v194, 1, v191, 0, v193, v189, v195, v196, v197, 3, 2, 4) -> f_220(v184, v185, v186, v187, v188, v194, 1, v191, 0, v193, v189, v195, v196, v197, 3, 2, 4) :|: 0 = 0
f_220(v184, v185, v186, v187, v188, v194, 1, v191, 0, v193, v189, v195, v196, v197, 3, 2, 4) -> f_223(v184, v185, v186, v187, v188, v194, 1, v191, 0, v193, v189, v195, v196, v197, 3, 2, 4) :|: TRUE
f_223(v184, v185, v186, v187, v188, v194, 1, v191, 0, v193, v189, v195, v196, v197, 3, 2, 4) -> f_226(v184, v185, v186, v187, v188, v194, 1, v193, 0, v191, v189, v195, v196, v197, 3, 2, 4) :|: 0 = 0
f_226(v184, v185, v186, v187, v188, v194, 1, v193, 0, v191, v189, v195, v196, v197, 3, 2, 4) -> f_228(v184, v185, v186, v187, v188, v194, 1, v193, 0, v191, v189, v195, v196, v197, 3, 2, 4) :|: 0 = 0
f_228(v184, v185, v186, v187, v188, v194, 1, v193, 0, v191, v189, v195, v196, v197, 3, 2, 4) -> f_230(v184, v185, v186, v187, v188, v194, 1, v193, 0, v191, v189, v195, v196, v197, 3, 2, 4) :|: TRUE
f_230(v184, v185, v186, v187, v188, v194, 1, v193, 0, v191, v189, v195, v196, v197, 3, 2, 4) -> f_232(v184, v185, v186, v187, v188, v194, 1, v193, 0, v189, v195, v196, v197, 3, 2, 4) :|: 0 = 0
f_232(v184, v185, v186, v187, v188, v194, 1, v193, 0, v189, v195, v196, v197, 3, 2, 4) -> f_234(v184, v185, v186, v187, v188, v194, 1, v193, 0, v263, v189, v195, v196, v197, 3, 2, 4) :|: 1 + v263 = v193 && 2 + v263 <= 0
f_234(v184, v185, v186, v187, v188, v194, 1, v193, 0, v263, v189, v195, v196, v197, 3, 2, 4) -> f_236(v184, v185, v186, v187, v188, v194, 1, v193, 0, v263, v189, v195, v196, v197, 3, 2, 4) :|: TRUE
f_236(v184, v185, v186, v187, v188, v194, 1, v193, 0, v263, v189, v195, v196, v197, 3, 2, 4) -> f_239(v184, v185, v186, v187, v188, v194, 1, v193, 0, v263, v195, v196, v197, 3, 2, 4) :|: 0 = 0
f_239(v184, v185, v186, v187, v188, v194, 1, v193, 0, v263, v195, v196, v197, 3, 2, 4) -> f_241(v184, v185, v186, v187, v188, v194, 1, v193, 0, v263, v302, v195, v196, v197, 3, 2, 4) :|: 1 + v302 = v194 && 0 <= v302
f_241(v184, v185, v186, v187, v188, v194, 1, v193, 0, v263, v302, v195, v196, v197, 3, 2, 4) -> f_243(v184, v185, v186, v187, v188, v194, 1, v193, 0, v263, v302, v195, v196, v197, 3, 2, 4) :|: TRUE
f_243(v184, v185, v186, v187, v188, v194, 1, v193, 0, v263, v302, v195, v196, v197, 3, 2, 4) -> f_246(v184, v185, v186, v187, v188, v194, 1, v193, 0, v263, v302, v195, v196, v197, 3, 2, 4) :|: TRUE
f_246(v184, v185, v186, v187, v188, v194, 1, v193, 0, v263, v302, v195, v196, v197, 3, 2, 4) -> f_209(v184, v185, v186, v187, v188, v194, 1, v193, 0, v263, v302, v195, v196, v197, 3, 4) :|: TRUE
f_209(v184, v185, v186, v187, v188, v189, 1, v191, 0, v193, v194, v195, v196, v197, 3, 4) -> f_212(v184, v185, v186, v187, v188, v189, 1, v191, 0, v193, v194, v195, v196, v197, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_212(v184:0, v185:0, v186:0, v187:0, v188:0, v189:0, 1, v191:0, 0, 1 + v263:0, 1 + v302:0, v195:0, v196:0, v197:0, 3, 4) -> f_212(v184:0, v185:0, v186:0, v187:0, v188:0, 1 + v302:0, 1, 1 + v263:0, 0, v263:0, v302:0, v195:0, v196:0, v197:0, 3, 4) :|: v189:0 > 1 && v302:0 > -1 && v187:0 > 1 && v263:0 < -1
Filtered unneeded arguments:
   f_212(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_212(x4, x6, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_212(v187:0, v189:0, sum~cons_1~v263:0, sum~cons_1~v302:0) -> f_212(v187:0, 1 + v302:0, v263:0, v302:0) :|: v302:0 > -1 && v189:0 > 1 && v263:0 < -1 && v187:0 > 1 && sum~cons_1~v263:0 = 1 + v263:0 && sum~cons_1~v302:0 = 1 + v302:0

----------------------------------------

(16)
Obligation:
Rules:
f_212(v187:0, v189:0, sum~cons_1~v263:0, sum~cons_1~v302:0) -> f_212(v187:0, 1 + v302:0, v263:0, v302:0) :|: v302:0 > -1 && v189:0 > 1 && v263:0 < -1 && v187:0 > 1 && sum~cons_1~v263:0 = 1 + v263:0 && sum~cons_1~v302:0 = 1 + v302:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_212(v187:0:0, v189:0:0, sum~cons_1~v263:0:0, sum~cons_1~v302:0:0) -> f_212(v187:0:0, 1 + v302:0:0, v263:0:0, v302:0:0) :|: v263:0:0 < -1 && v187:0:0 > 1 && v189:0:0 > 1 && v302:0:0 > -1 && sum~cons_1~v263:0:0 = 1 + v263:0:0 && sum~cons_1~v302:0:0 = 1 + v302:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_212(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_212(v187:0:0, v189:0:0, sum~cons_1~v263:0:0, sum~cons_1~v302:0:0) -> f_212(v187:0:0, 1 + v302:0:0, v263:0:0, v302:0:0) :|: v263:0:0 < -1 && v187:0:0 > 1 && v189:0:0 > 1 && v302:0:0 > -1 && sum~cons_1~v263:0:0 = 1 + v263:0:0 && sum~cons_1~v302:0:0 = 1 + v302:0:0
The following rules are bounded:
f_212(v187:0:0, v189:0:0, sum~cons_1~v263:0:0, sum~cons_1~v302:0:0) -> f_212(v187:0:0, 1 + v302:0:0, v263:0:0, v302:0:0) :|: v263:0:0 < -1 && v187:0:0 > 1 && v189:0:0 > 1 && v302:0:0 > -1 && sum~cons_1~v263:0:0 = 1 + v263:0:0 && sum~cons_1~v302:0:0 = 1 + v302:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
