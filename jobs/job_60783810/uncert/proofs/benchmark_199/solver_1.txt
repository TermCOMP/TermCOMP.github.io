YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/a46c0.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1190 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 1 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 24 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 5 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (17) YES
    (18) LLVM Symbolic Execution SCC
        (19) SCC2IRS [SOUND, 21 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (24) YES
    (25) LLVM Symbolic Execution SCC
        (26) SCC2IRS [SOUND, 23 ms]
        (27) IntTRS
        (28) TerminationGraphProcessor [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/a46c0.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/a46c0.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %6
	6:
		%7 = load %3
		%8 = icmp sge %7 0
		br %8, %9, %22
	9:
		store 1, %4
		br %10
	10:
		%11 = load %3
		%12 = load %4
		%13 = icmp sgt %11 %12
		br %13, %14, %19
	14:
		%15 = load %4
		%16 = mul i32 2, %15
		store %16, %4
		%17 = load %5
		%18 = add i32 %17, 1
		store %18, %5
		br %10
	19:
		%20 = load %3
		%21 = sub i32 %20, 1
		store %21, %3
		br %6
	22:
		%23 = load %5
		ret %23

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 43
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 38 rulesP rules:
f_467(v553, v554, v555, v556, v557, v558, 1, v560, v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) -> f_468(v553, v554, v555, v556, v557, v558, 1, v560, v572, v563, v564, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) :|: v572 = 2 * v560 && 2 <= v572
f_468(v553, v554, v555, v556, v557, v558, 1, v560, v572, v563, v564, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) -> f_469(v553, v554, v555, v556, v557, v558, 1, v560, v572, v563, v564, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) :|: TRUE
f_469(v553, v554, v555, v556, v557, v558, 1, v560, v572, v563, v564, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) -> f_470(v553, v554, v555, v556, v557, v558, 1, v560, v572, v564, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) :|: 0 = 0
f_470(v553, v554, v555, v556, v557, v558, 1, v560, v572, v564, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) -> f_471(v553, v554, v555, v556, v557, v558, 1, v560, v572, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) :|: v574 = 1 + v564 && 2 <= v574
f_471(v553, v554, v555, v556, v557, v558, 1, v560, v572, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) -> f_472(v553, v554, v555, v556, v557, v558, 1, v560, v572, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) :|: TRUE
f_472(v553, v554, v555, v556, v557, v558, 1, v560, v572, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) -> f_473(v553, v554, v555, v556, v557, v558, 1, v560, v572, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) :|: TRUE
f_473(v553, v554, v555, v556, v557, v558, 1, v560, v572, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) -> f_474(v553, v554, v555, v556, v557, v558, 1, v560, v572, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) :|: 0 = 0
f_474(v553, v554, v555, v556, v557, v558, 1, v560, v572, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) -> f_475(v553, v554, v555, v556, v557, v558, 1, v572, v560, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) :|: 0 = 0
f_475(v553, v554, v555, v556, v557, v558, 1, v572, v560, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) -> f_476(v553, v554, v555, v556, v557, v558, 1, v572, v560, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) :|: v572 < v558 && 3 <= v558 && 4 <= v565 && 4 <= v553
f_475(v553, v554, v555, v556, v557, v558, 1, v572, v560, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) -> f_477(v553, v554, v555, v556, v557, v558, 1, v572, v560, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) :|: v558 <= v572
f_476(v553, v554, v555, v556, v557, v558, 1, v572, v560, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) -> f_478(v553, v554, v555, v556, v557, v558, 1, v572, v560, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) :|: 0 = 0
f_478(v553, v554, v555, v556, v557, v558, 1, v572, v560, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) -> f_480(v553, v554, v555, v556, v557, v558, 1, v572, v560, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) :|: TRUE
f_480(v553, v554, v555, v556, v557, v558, 1, v572, v560, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) -> f_466(v553, v554, v555, v556, v557, v558, 1, v572, v560, v572, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) :|: TRUE
f_466(v553, v554, v555, v556, v557, v558, 1, v560, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) -> f_467(v553, v554, v555, v556, v557, v558, 1, v560, v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) :|: 0 = 0
f_477(v553, v554, v555, v556, v557, v558, 1, v572, v560, v564, v574, v565, v566, v567, v568, v569, v570, 0, 3, 2, 4) -> f_479(v553, v554, v555, v556, v557, v558, 1, v572, 0, v560, v564, v574, v565, v566, v567, v568, v569, v570, 3, 2, 4) :|: 0 = 0
f_479(v553, v554, v555, v556, v557, v558, 1, v572, 0, v560, v564, v574, v565, v566, v567, v568, v569, v570, 3, 2, 4) -> f_481(v553, v554, v555, v556, v557, v558, 1, v572, 0, v560, v564, v574, v565, v566, v567, v568, v569, v570, 3, 2, 4) :|: TRUE
f_481(v553, v554, v555, v556, v557, v558, 1, v572, 0, v560, v564, v574, v565, v566, v567, v568, v569, v570, 3, 2, 4) -> f_500(v553, v554, v555, v556, v557, v558, 1, v572, 0, v560, v572, v564, v574, v565, v566, v567, v568, v569, v570, 3, 2, 4) :|: TRUE
f_500(v771, v772, v773, v774, v775, v776, 1, v778, 0, v780, v781, v782, v783, v784, v785, v786, v787, v788, v789, 3, 2, 4) -> f_501(v771, v772, v773, v774, v775, v776, 1, v778, 0, v780, v781, v782, v783, v785, v786, v787, v788, v789, 3, 2, 4) :|: 0 = 0
f_501(v771, v772, v773, v774, v775, v776, 1, v778, 0, v780, v781, v782, v783, v785, v786, v787, v788, v789, 3, 2, 4) -> f_502(v771, v772, v773, v774, v775, v776, 1, v778, 0, v780, v781, v782, v783, v790, v785, v786, v787, v788, v789, 3, 2, 4) :|: 1 + v790 = v776 && 0 <= 1 + v790
f_502(v771, v772, v773, v774, v775, v776, 1, v778, 0, v780, v781, v782, v783, v790, v785, v786, v787, v788, v789, 3, 2, 4) -> f_503(v771, v772, v773, v774, v775, v776, 1, v778, 0, v780, v781, v782, v783, v790, v785, v786, v787, v788, v789, 3, 2, 4) :|: TRUE
f_503(v771, v772, v773, v774, v775, v776, 1, v778, 0, v780, v781, v782, v783, v790, v785, v786, v787, v788, v789, 3, 2, 4) -> f_504(v771, v772, v773, v774, v775, v776, 1, v778, 0, v780, v781, v782, v783, v790, v785, v786, v787, v788, v789, 3, 2, 4) :|: TRUE
f_504(v771, v772, v773, v774, v775, v776, 1, v778, 0, v780, v781, v782, v783, v790, v785, v786, v787, v788, v789, 3, 2, 4) -> f_505(v771, v772, v773, v774, v775, v790, 1, v776, v778, 0, v780, v781, v782, v783, v785, v786, v787, v788, v789, 3, 2, 4) :|: 0 = 0
f_505(v771, v772, v773, v774, v775, v790, 1, v776, v778, 0, v780, v781, v782, v783, v785, v786, v787, v788, v789, 3, 2, 4) -> f_506(v771, v772, v773, v774, v775, v790, 1, v776, v778, 0, v780, v781, v782, v783, v785, v786, v787, v788, v789, 3, 2, 4) :|: 0 <= v790 && 1 <= v776
f_506(v771, v772, v773, v774, v775, v790, 1, v776, v778, 0, v780, v781, v782, v783, v785, v786, v787, v788, v789, 3, 2, 4) -> f_508(v771, v772, v773, v774, v775, v790, 1, v776, v778, 0, v780, v781, v782, v783, v785, v786, v787, v788, v789, 3, 2, 4) :|: 0 = 0
f_508(v771, v772, v773, v774, v775, v790, 1, v776, v778, 0, v780, v781, v782, v783, v785, v786, v787, v788, v789, 3, 2, 4) -> f_510(v771, v772, v773, v774, v775, v790, 1, v776, v778, 0, v780, v781, v782, v783, v785, v786, v787, v788, v789, 3, 2, 4) :|: TRUE
f_510(v771, v772, v773, v774, v775, v790, 1, v776, v778, 0, v780, v781, v782, v783, v785, v786, v787, v788, v789, 3, 2, 4) -> f_512(v771, v772, v773, v774, v775, v790, 1, v776, v778, 0, v780, v781, v782, v783, v785, v786, v787, v788, v789, 3, 2, 4) :|: TRUE
f_512(v771, v772, v773, v774, v775, v790, 1, v776, v778, 0, v780, v781, v782, v783, v785, v786, v787, v788, v789, 3, 2, 4) -> f_514(v771, v772, v773, v774, v775, v790, 1, v776, v778, 0, v780, v781, v782, v783, v785, v786, v787, v788, v789, 3, 2, 4) :|: TRUE
f_514(v771, v772, v773, v774, v775, v790, 1, v776, v778, 0, v780, v781, v782, v783, v785, v786, v787, v788, v789, 3, 2, 4) -> f_491(v771, v772, v773, v774, v775, v790, 1, v776, v778, 0, v780, v781, v782, v783, v785, v786, v787, v788, v789, 3, 2, 4) :|: TRUE
f_491(v691, v692, v693, v694, v695, v696, 1, v698, v699, 0, v701, v702, v703, v704, v705, v706, v707, v708, v709, 3, 2, 4) -> f_492(v691, v692, v693, v694, v695, v696, 1, v699, 0, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 3, 2, 4) :|: 0 = 0
f_492(v691, v692, v693, v694, v695, v696, 1, v699, 0, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 3, 2, 4) -> f_493(v691, v692, v693, v694, v695, v696, 1, 0, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 3, 2, 4) :|: 0 = 0
f_493(v691, v692, v693, v694, v695, v696, 1, 0, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 3, 2, 4) -> f_494(v691, v692, v693, v694, v695, v696, 1, 0, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 3, 2, 4) :|: 1 < v696 && 3 <= v698 && 3 <= v691 && 4 <= v702 && 2 <= v701
f_493(v691, v692, v693, v694, v695, v696, 1, 0, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 3, 2, 4) -> f_495(v691, v692, v693, v694, v695, v696, 1, 0, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 3, 2, 4) :|: v696 <= 1 && v698 <= 2
f_494(v691, v692, v693, v694, v695, v696, 1, 0, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 3, 2, 4) -> f_496(v691, v692, v693, v694, v695, v696, 1, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 0, 3, 2, 4) :|: 0 = 0
f_496(v691, v692, v693, v694, v695, v696, 1, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 0, 3, 2, 4) -> f_498(v691, v692, v693, v694, v695, v696, 1, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 0, 3, 2, 4) :|: TRUE
f_498(v691, v692, v693, v694, v695, v696, 1, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 0, 3, 2, 4) -> f_466(v691, v692, v693, v694, v695, v696, 1, 1, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 0, 3, 2, 4) :|: TRUE
f_495(v691, v692, v693, v694, v695, v696, 1, 0, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 3, 2, 4) -> f_497(v691, v692, v693, v694, v695, v696, 1, 0, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 3, 2, 4) :|: 0 = 0
f_497(v691, v692, v693, v694, v695, v696, 1, 0, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 3, 2, 4) -> f_499(v691, v692, v693, v694, v695, v696, 1, 0, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 3, 2, 4) :|: TRUE
f_499(v691, v692, v693, v694, v695, v696, 1, 0, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 3, 2, 4) -> f_500(v691, v692, v693, v694, v695, v696, 1, 1, 0, v701, v702, v703, v704, v698, v705, v706, v707, v708, v709, 3, 2, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_467(v553:0, v554:0, v555:0, v556:0, v557:0, v558:0, 1, v560:0, v562:0, v563:0, v564:0, v565:0, v566:0, v567:0, v568:0, v569:0, v570:0, 0, 3, 2, 4) -> f_467(v553:0, v554:0, v555:0, v556:0, v557:0, v558:0, 1, 2 * v560:0, 2 * v560:0, v564:0, 1 + v564:0, v565:0, v566:0, v567:0, v568:0, v569:0, v570:0, 0, 3, 2, 4) :|: 2 * v560:0 > 1 && v564:0 > 0 && v558:0 > 2 && v558:0 > 2 * v560:0 && v553:0 > 3 && v565:0 > 3
f_467(v553:0, v554:0, v555:0, v556:0, v557:0, 1 + v790:0, 1, v560:0, v562:0, v563:0, v564:0, v565:0, v566:0, v567:0, v568:0, v569:0, v570:0, 0, 3, 2, 4) -> f_493(v553:0, v554:0, v555:0, v556:0, v557:0, v790:0, 1, 0, v560:0, 2 * v560:0, v564:0, 1 + v564:0, 1 + v790:0, v566:0, v567:0, v568:0, v569:0, v570:0, 3, 2, 4) :|: v790:0 > -1 && 2 * v560:0 > 1 && v564:0 > 0 && 2 * v560:0 >= 1 + v790:0
f_493(v691:0, v692:0, v693:0, v694:0, v695:0, v696:0, 1, 0, v701:0, v702:0, v703:0, v704:0, v698:0, v705:0, v706:0, v707:0, v708:0, v709:0, 3, 2, 4) -> f_467(v691:0, v692:0, v693:0, v694:0, v695:0, v696:0, 1, 1, v702:0, v703:0, v704:0, v698:0, v705:0, v706:0, v707:0, v708:0, v709:0, 0, 3, 2, 4) :|: v698:0 > 2 && v696:0 > 1 && v691:0 > 2 && v701:0 > 1 && v702:0 > 3
f_493(v691:0, v692:0, v693:0, v694:0, v695:0, 1 + v790:0, 1, 0, v701:0, v702:0, v703:0, v704:0, v698:0, v705:0, v706:0, v707:0, v708:0, v709:0, 3, 2, 4) -> f_493(v691:0, v692:0, v693:0, v694:0, v695:0, v790:0, 1, 0, v701:0, v702:0, v703:0, v704:0, 1 + v790:0, v705:0, v706:0, v707:0, v708:0, v709:0, 3, 2, 4) :|: v790:0 > -1 && v790:0 < 1 && v698:0 < 3
Filtered unneeded arguments:
   f_467(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_467(x1, x6, x8, x11, x12)
   f_493(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_493(x1, x6, x9, x10, x12, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_467(v553:0, v558:0, v560:0, v564:0, v565:0) -> f_467(v553:0, v558:0, 2 * v560:0, 1 + v564:0, v565:0) :|: v564:0 > 0 && 2 * v560:0 > 1 && v558:0 > 2 && v558:0 > 2 * v560:0 && v565:0 > 3 && v553:0 > 3
f_467(v553:0, sum~cons_1~v790:0, v560:0, v564:0, v565:0) -> f_493(v553:0, v790:0, v560:0, 2 * v560:0, 1 + v564:0, 1 + v790:0) :|: 2 * v560:0 > 1 && v790:0 > -1 && 2 * v560:0 >= 1 + v790:0 && v564:0 > 0 && sum~cons_1~v790:0 = 1 + v790:0
f_493(v691:0, v696:0, v701:0, v702:0, v704:0, v698:0) -> f_467(v691:0, v696:0, 1, v704:0, v698:0) :|: v696:0 > 1 && v698:0 > 2 && v691:0 > 2 && v702:0 > 3 && v701:0 > 1
f_493(v691:0, sum~cons_1~v790:0, v701:0, v702:0, v704:0, v698:0) -> f_493(v691:0, v790:0, v701:0, v702:0, v704:0, 1 + v790:0) :|: v790:0 < 1 && v698:0 < 3 && v790:0 > -1 && sum~cons_1~v790:0 = 1 + v790:0

----------------------------------------

(9)
Obligation:
Rules:
f_467(v553:0, v558:0, v560:0, v564:0, v565:0) -> f_467(v553:0, v558:0, 2 * v560:0, 1 + v564:0, v565:0) :|: v564:0 > 0 && 2 * v560:0 > 1 && v558:0 > 2 && v558:0 > 2 * v560:0 && v565:0 > 3 && v553:0 > 3
f_467(x, x1, x2, x3, x4) -> f_493(x, x5, x2, 2 * x2, 1 + x3, 1 + x5) :|: 2 * x2 > 1 && x5 > -1 && 2 * x2 >= 1 + x5 && x3 > 0 && x1 = 1 + x5
f_493(v691:0, v696:0, v701:0, v702:0, v704:0, v698:0) -> f_467(v691:0, v696:0, 1, v704:0, v698:0) :|: v696:0 > 1 && v698:0 > 2 && v691:0 > 2 && v702:0 > 3 && v701:0 > 1
f_493(x6, x7, x8, x9, x10, x11) -> f_493(x6, x12, x8, x9, x10, 1 + x12) :|: x12 < 1 && x11 < 3 && x12 > -1 && x7 = 1 + x12

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_493(v691:0:0, v696:0:0, v701:0:0, v702:0:0, v704:0:0, v698:0:0) -> f_467(v691:0:0, v696:0:0, 1, v704:0:0, v698:0:0) :|: v702:0:0 > 3 && v701:0:0 > 1 && v691:0:0 > 2 && v698:0:0 > 2 && v696:0:0 > 1
f_467(v553:0:0, v558:0:0, v560:0:0, v564:0:0, v565:0:0) -> f_467(v553:0:0, v558:0:0, 2 * v560:0:0, 1 + v564:0:0, v565:0:0) :|: v565:0:0 > 3 && v553:0:0 > 3 && v558:0:0 > 2 * v560:0:0 && v558:0:0 > 2 && 2 * v560:0:0 > 1 && v564:0:0 > 0
f_493(x6:0, sum~cons_1~x12:0, x8:0, x9:0, x10:0, x11:0) -> f_493(x6:0, x12:0, x8:0, x9:0, x10:0, 1 + x12:0) :|: x12:0 < 1 && x11:0 < 3 && x12:0 > -1 && sum~cons_1~x12:0 = 1 + x12:0
f_467(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_493(x:0, x5:0, x2:0, 2 * x2:0, 1 + x3:0, 1 + x5:0) :|: 2 * x2:0 >= 1 + x5:0 && x3:0 > 0 && x5:0 > -1 && 2 * x2:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_493 ] = 2*f_493_2 + 1
[ f_467 ] = 2*f_467_2

The following rules are decreasing:
f_493(v691:0:0, v696:0:0, v701:0:0, v702:0:0, v704:0:0, v698:0:0) -> f_467(v691:0:0, v696:0:0, 1, v704:0:0, v698:0:0) :|: v702:0:0 > 3 && v701:0:0 > 1 && v691:0:0 > 2 && v698:0:0 > 2 && v696:0:0 > 1
f_493(x6:0, sum~cons_1~x12:0, x8:0, x9:0, x10:0, x11:0) -> f_493(x6:0, x12:0, x8:0, x9:0, x10:0, 1 + x12:0) :|: x12:0 < 1 && x11:0 < 3 && x12:0 > -1 && sum~cons_1~x12:0 = 1 + x12:0
f_467(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_493(x:0, x5:0, x2:0, 2 * x2:0, 1 + x3:0, 1 + x5:0) :|: 2 * x2:0 >= 1 + x5:0 && x3:0 > 0 && x5:0 > -1 && 2 * x2:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0

The following rules are bounded:
f_493(v691:0:0, v696:0:0, v701:0:0, v702:0:0, v704:0:0, v698:0:0) -> f_467(v691:0:0, v696:0:0, 1, v704:0:0, v698:0:0) :|: v702:0:0 > 3 && v701:0:0 > 1 && v691:0:0 > 2 && v698:0:0 > 2 && v696:0:0 > 1
f_467(v553:0:0, v558:0:0, v560:0:0, v564:0:0, v565:0:0) -> f_467(v553:0:0, v558:0:0, 2 * v560:0:0, 1 + v564:0:0, v565:0:0) :|: v565:0:0 > 3 && v553:0:0 > 3 && v558:0:0 > 2 * v560:0:0 && v558:0:0 > 2 && 2 * v560:0:0 > 1 && v564:0:0 > 0
f_493(x6:0, sum~cons_1~x12:0, x8:0, x9:0, x10:0, x11:0) -> f_493(x6:0, x12:0, x8:0, x9:0, x10:0, 1 + x12:0) :|: x12:0 < 1 && x11:0 < 3 && x12:0 > -1 && sum~cons_1~x12:0 = 1 + x12:0
f_467(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_493(x:0, x5:0, x2:0, 2 * x2:0, 1 + x3:0, 1 + x5:0) :|: 2 * x2:0 >= 1 + x5:0 && x3:0 > 0 && x5:0 > -1 && 2 * x2:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0


----------------------------------------

(13)
Obligation:
Rules:
f_467(v553:0:0, v558:0:0, v560:0:0, v564:0:0, v565:0:0) -> f_467(v553:0:0, v558:0:0, 2 * v560:0:0, 1 + v564:0:0, v565:0:0) :|: v565:0:0 > 3 && v553:0:0 > 3 && v558:0:0 > 2 * v560:0:0 && v558:0:0 > 2 && 2 * v560:0:0 > 1 && v564:0:0 > 0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_467(v553:0:0:0, v558:0:0:0, v560:0:0:0, v564:0:0:0, v565:0:0:0) -> f_467(v553:0:0:0, v558:0:0:0, 2 * v560:0:0:0, 1 + v564:0:0:0, v565:0:0:0) :|: 2 * v560:0:0:0 > 1 && v564:0:0:0 > 0 && v558:0:0:0 > 2 && v558:0:0:0 > 2 * v560:0:0:0 && v553:0:0:0 > 3 && v565:0:0:0 > 3

----------------------------------------

(16) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_467 ] = -1*f_467_3 + 1/2*f_467_2

The following rules are decreasing:
f_467(v553:0:0:0, v558:0:0:0, v560:0:0:0, v564:0:0:0, v565:0:0:0) -> f_467(v553:0:0:0, v558:0:0:0, 2 * v560:0:0:0, 1 + v564:0:0:0, v565:0:0:0) :|: 2 * v560:0:0:0 > 1 && v564:0:0:0 > 0 && v558:0:0:0 > 2 && v558:0:0:0 > 2 * v560:0:0:0 && v553:0:0:0 > 3 && v565:0:0:0 > 3

The following rules are bounded:
f_467(v553:0:0:0, v558:0:0:0, v560:0:0:0, v564:0:0:0, v565:0:0:0) -> f_467(v553:0:0:0, v558:0:0:0, 2 * v560:0:0:0, 1 + v564:0:0:0, v565:0:0:0) :|: 2 * v560:0:0:0 > 1 && v564:0:0:0 > 0 && v558:0:0:0 > 2 && v558:0:0:0 > 2 * v560:0:0:0 && v553:0:0:0 > 3 && v565:0:0:0 > 3


----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
SCC
----------------------------------------

(19) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_336(v200, v201, v202, v203, v204, 1, v206, v207, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) -> f_337(v200, v201, v202, v203, v204, 1, v207, v206, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) :|: 0 = 0
f_337(v200, v201, v202, v203, v204, 1, v207, v206, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) -> f_338(v200, v201, v202, v203, v204, 1, v207, v206, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) :|: v207 < v200 && 3 <= v200
f_338(v200, v201, v202, v203, v204, 1, v207, v206, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) -> f_340(v200, v201, v202, v203, v204, 1, v207, v206, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) :|: 0 = 0
f_340(v200, v201, v202, v203, v204, 1, v207, v206, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) -> f_342(v200, v201, v202, v203, v204, 1, v207, v206, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) :|: TRUE
f_342(v200, v201, v202, v203, v204, 1, v207, v206, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) -> f_344(v200, v201, v202, v203, v204, 1, v207, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) :|: 0 = 0
f_344(v200, v201, v202, v203, v204, 1, v207, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) -> f_346(v200, v201, v202, v203, v204, 1, v207, v216, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) :|: v216 = 2 * v207 && 4 <= v216
f_346(v200, v201, v202, v203, v204, 1, v207, v216, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) -> f_348(v200, v201, v202, v203, v204, 1, v207, v216, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) :|: TRUE
f_348(v200, v201, v202, v203, v204, 1, v207, v216, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) -> f_350(v200, v201, v202, v203, v204, 1, v207, v216, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) :|: 0 = 0
f_350(v200, v201, v202, v203, v204, 1, v207, v216, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) -> f_352(v200, v201, v202, v203, v204, 1, v207, v216, v209, v220, v210, v211, v212, v213, v214, 0, 3, 2, 4) :|: v220 = 1 + v209 && 2 <= v220
f_352(v200, v201, v202, v203, v204, 1, v207, v216, v209, v220, v210, v211, v212, v213, v214, 0, 3, 2, 4) -> f_354(v200, v201, v202, v203, v204, 1, v207, v216, v209, v220, v210, v211, v212, v213, v214, 0, 3, 2, 4) :|: TRUE
f_354(v200, v201, v202, v203, v204, 1, v207, v216, v209, v220, v210, v211, v212, v213, v214, 0, 3, 2, 4) -> f_356(v200, v201, v202, v203, v204, 1, v207, v216, v209, v220, v210, v211, v212, v213, v214, 0, 3, 2, 4) :|: TRUE
f_356(v200, v201, v202, v203, v204, 1, v207, v216, v209, v220, v210, v211, v212, v213, v214, 0, 3, 2, 4) -> f_335(v200, v201, v202, v203, v204, 1, v207, v216, v209, v220, v210, v211, v212, v213, v214, 0, 3, 2, 4) :|: TRUE
f_335(v200, v201, v202, v203, v204, 1, v206, v207, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) -> f_336(v200, v201, v202, v203, v204, 1, v206, v207, v208, v209, v210, v211, v212, v213, v214, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_336(v200:0, v201:0, v202:0, v203:0, v204:0, 1, v206:0, v207:0, v208:0, v209:0, v210:0, v211:0, v212:0, v213:0, v214:0, 0, 3, 2, 4) -> f_336(v200:0, v201:0, v202:0, v203:0, v204:0, 1, v207:0, 2 * v207:0, v209:0, 1 + v209:0, v210:0, v211:0, v212:0, v213:0, v214:0, 0, 3, 2, 4) :|: v200:0 > 2 && v207:0 < v200:0 && v209:0 > 0 && 3 < 2 * v207:0
Filtered unneeded arguments:
   f_336(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_336(x1, x8, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_336(v200:0, v207:0, v209:0) -> f_336(v200:0, 2 * v207:0, 1 + v209:0) :|: v207:0 < v200:0 && v200:0 > 2 && 3 < 2 * v207:0 && v209:0 > 0

----------------------------------------

(20)
Obligation:
Rules:
f_336(v200:0, v207:0, v209:0) -> f_336(v200:0, 2 * v207:0, 1 + v209:0) :|: v207:0 < v200:0 && v200:0 > 2 && 3 < 2 * v207:0 && v209:0 > 0

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_336(v200:0:0, v207:0:0, v209:0:0) -> f_336(v200:0:0, 2 * v207:0:0, 1 + v209:0:0) :|: 3 < 2 * v207:0:0 && v209:0:0 > 0 && v200:0:0 > 2 && v207:0:0 < v200:0:0

----------------------------------------

(23) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_336(x, x1, x2)] = -2 + x - x1 + x2

The following rules are decreasing:
f_336(v200:0:0, v207:0:0, v209:0:0) -> f_336(v200:0:0, 2 * v207:0:0, 1 + v209:0:0) :|: 3 < 2 * v207:0:0 && v209:0:0 > 0 && v200:0:0 > 2 && v207:0:0 < v200:0:0
The following rules are bounded:
f_336(v200:0:0, v207:0:0, v209:0:0) -> f_336(v200:0:0, 2 * v207:0:0, 1 + v209:0:0) :|: 3 < 2 * v207:0:0 && v209:0:0 > 0 && v200:0:0 > 2 && v207:0:0 < v200:0:0

----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
SCC
----------------------------------------

(26) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_207(v15, v16, v17, v18, v19, v23, 1, v20, 0, v24, v25, v26, v27, v28, 3, 4) -> f_209(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) :|: 0 <= v23 && v20 = 1 && v23 = 0 && 0 = 0
f_209(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) -> f_212(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) :|: 0 = 0
f_212(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) -> f_216(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) :|: TRUE
f_216(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) -> f_220(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) :|: TRUE
f_220(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) -> f_224(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) :|: TRUE
f_224(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) -> f_228(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) :|: 0 = 0
f_228(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) -> f_231(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) :|: 0 = 0
f_231(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) -> f_234(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) :|: 0 = 0
f_234(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) -> f_237(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) :|: TRUE
f_237(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) -> f_240(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) :|: 0 = 0
f_240(1, v16, v17, v18, v19, 0, v24, v25, v26, v27, v28, 3, 4) -> f_243(1, v16, v17, v18, v19, 0, -1, v24, v25, v26, v27, v28, 3, 4) :|: 0 = 0
f_243(1, v16, v17, v18, v19, 0, -1, v24, v25, v26, v27, v28, 3, 4) -> f_246(1, v16, v17, v18, v19, 0, -1, v24, v25, v26, v27, v28, 3, 4) :|: TRUE
f_246(1, v16, v17, v18, v19, 0, -1, v24, v25, v26, v27, v28, 3, 4) -> f_248(1, v16, v17, v18, v19, 0, -1, v24, v25, v26, v27, v28, 3, 4) :|: TRUE
f_248(1, v16, v17, v18, v19, 0, -1, v24, v25, v26, v27, v28, 3, 4) -> f_204(1, v16, v17, v18, v19, 0, 1, 0, -1, v24, v25, v26, v27, v28, 3, 4) :|: TRUE
f_204(v15, v16, v17, v18, v19, v20, 1, 0, v23, v24, v25, v26, v27, v28, 3, 4) -> f_207(v15, v16, v17, v18, v19, v23, 1, v20, 0, v24, v25, v26, v27, v28, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_207(v15:0, v16:0, v17:0, v18:0, v19:0, 0, 1, 1, 0, v24:0, v25:0, v26:0, v27:0, v28:0, 3, 4) -> f_207(1, v16:0, v17:0, v18:0, v19:0, -1, 1, 0, 0, v24:0, v25:0, v26:0, v27:0, v28:0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_207(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_207(x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_207(cons_0, cons_1) -> f_207(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(27)
Obligation:
Rules:
f_207(cons_0, cons_1) -> f_207(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(28) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(29)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
