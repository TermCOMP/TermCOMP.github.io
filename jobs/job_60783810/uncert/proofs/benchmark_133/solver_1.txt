MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/XZzzs.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 55 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/XZzzs.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/XZzzs.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_String" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i8, align 8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %1
		%4 = load %1
		%5 = icmp slt %4 1
		br %5, %6, %7
	6:
		store 1, %1
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		%8 = load %1
		%9 = sext i32 %8 to i64
		%10 = mul i64 %9, 1
		%11 = call noalias *i8 @malloc(i64 %10)
		store %11, %2
		%12 = load %2
		%13 = load %1
		%14 = sub i32 %13, 1
		%15 = sext i32 %14 to i64
		%16 = getelementptr %12, %15
		store 0, %16
		%17 = load %2
		ret %17

*BasicFunctionTypename: "cstrchr" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 36
	0:
		%3 = alloca *i8, align 8
		%4 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		br %5
	5:
		%6 = load %3
		%7 = load %6
		%8 = sext i8 %7 to i32
		%9 = icmp ne %8 0
		br %9, %10, %18
	10:
		%11 = load %3
		%12 = load %11
		%13 = sext i8 %12 to i32
		%14 = load %4
		%15 = trunc i32 %14 to i8
		%16 = sext i8 %15 to i32
		%17 = icmp ne %13 %16
		br %18
	18:
		%19 = phi [0, %5], [%17, %10]
		br %19, %20, %23
	20:
		%21 = load %3
		%22 = getelementptr %21, 1
		store %22, %3
		br %5
	23:
		%24 = load %3
		%25 = load %24
		%26 = sext i8 %25 to i32
		%27 = load %4
		%28 = icmp eq %26 %27
		br %28, %29, %31
	29:
		%30 = load %3
		br %32
	31:
		br %32
	32:
		%33 = phi [%30, %29], [null, %31]
		ret %33

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 65
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call *i8 @__VERIFIER_nondet_String()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call *i8 @cstrchr(*i8 %2, i32 %3)
		%5 = load %4
		%6 = sext i8 %5 to i32
		ret %6


Analyze Termination of all function calls matching the pattern:
main()Aborted 1756892236Exec. 4, LLVMToSEGraph with some error. Reason: java.lang.AssertionError: Tried to set a non-constant value for a constant reference!.
            aprove.InputModules.Programs.llvm.internalStructures.LLVMHeuristicIntegerState.setValue(LLVMHeuristicIntegerState.java:2201)
            aprove.InputModules.Programs.llvm.internalStructures.LLVMHeuristicIntegerState.initializeValue(LLVMHeuristicIntegerState.java:1748)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicState.initializeValue(LLVMHeuristicState.java:3207)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicState.setSimpleHeapEntry(LLVMHeuristicState.java:2824)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicState.setSimpleHeapEntry(LLVMHeuristicState.java:58)
            aprove.InputModules.Programs.llvm.internalStructures.instructions.LLVMLoadInstruction.evaluate(LLVMLoadInstruction.java:158)
            aprove.InputModules.Programs.llvm.states.LLVMAbstractState.evaluate(LLVMAbstractState.java:531)
            aprove.InputModules.Programs.llvm.segraph.graphConstructionSteps.LLVMStandardStep.perform(LLVMStandardStep.java:98)
            aprove.InputModules.Programs.llvm.segraph.LLVMSEGraph.executeStepAndPutSucessorStepsInQueue(LLVMSEGraph.java:1087)
