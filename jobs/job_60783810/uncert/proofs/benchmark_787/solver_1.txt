YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/bKjPe.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 672 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 32 ms]
        (9) IntTRS
        (10) TerminationGraphProcessor [EQUIVALENT, 15 ms]
        (11) IntTRS
        (12) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (13) IntTRS
        (14) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (15) YES
    (16) LLVM Symbolic Execution SCC
        (17) SCC2IRS [SOUND, 1 ms]
        (18) IntTRS
        (19) TerminationGraphProcessor [EQUIVALENT, 8 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/bKjPe.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/bKjPe.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "rec1" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp sle %4 0
		br %5, %6, %7
	6:
		store 0, %2
		br %15
	7:
		%8 = load %3
		%9 = sub i32 %8, 2
		%10 = call i32 @rec1(i32 %9)
		%11 = sub i32 %10, 1
		%12 = call i32 @rec1(i32 %11)
		%13 = call i32 @rec1(i32 %12)
		%14 = add i32 %13, 1
		store %14, %2
		br %15
	15:
		%16 = load %2
		ret %16

*BasicFunctionTypename: "rec2" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 28
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp sle %4 0
		br %5, %6, %7
	6:
		store 0, %2
		br %13
	7:
		%8 = load %3
		%9 = call i32 @rec1(i32 %8)
		%10 = sub i32 %9, 1
		%11 = call i32 @rec2(i32 %10)
		%12 = sub i32 %11, 1
		store %12, %2
		br %13
	13:
		%14 = load %2
		ret %14

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 43
	0:
		%1 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%2 = call i32 (...)* @__VERIFIER_nondet_int()
		store %2, %1
		%3 = load %1
		%4 = call i32 @rec2(i32 %3)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 37 rulesP rules:
f_280(v270, v288, v289, 3, 0, 1, 4) -> f_281(v270, v288, v290, v289, v291, 3, 0, 1, 4) :|: 1 <= v290 && v291 = 3 + v290 && 4 <= v291
f_281(v270, v288, v290, v289, v291, 3, 0, 1, 4) -> f_282(v270, v288, v290, v289, v291, 3, 0, 1, 4) :|: TRUE
f_282(v270, v288, v290, v289, v291, 3, 0, 1, 4) -> f_283(v270, v288, v290, v289, v291, 3, 0, 1, 4) :|: TRUE
f_283(v270, v288, v290, v289, v291, 3, 0, 1, 4) -> f_284(v270, v288, v290, v289, v291, 3, 0, 1, 4) :|: 0 = 0
f_284(v270, v288, v290, v289, v291, 3, 0, 1, 4) -> f_286(v270, v288, v290, v289, v291, 3, 1, 4) :|: 0 < v270
f_286(v270, v288, v290, v289, v291, 3, 1, 4) -> f_288(v270, v288, v290, 0, v289, v291, 3, 1, 4) :|: 0 = 0
f_288(v270, v288, v290, 0, v289, v291, 3, 1, 4) -> f_290(v270, v288, v290, 0, v289, v291, 3, 1, 4) :|: TRUE
f_290(v270, v288, v290, 0, v289, v291, 3, 1, 4) -> f_292(v270, v288, v290, 0, v289, v291, 3, 1, 4) :|: 0 = 0
f_292(v270, v288, v290, 0, v289, v291, 3, 1, 4) -> f_294(v270, v288, v290, 0, v293, v289, v291, 3, 2, 1, 4) :|: 2 + v293 = v270 && 0 <= 1 + v293
f_294(v270, v288, v290, 0, v293, v289, v291, 3, 2, 1, 4) -> f_296(v293, v288, v289, v290, v291, v270, 0, 3, 2, 1, 4) :|: 0 = 0
f_296(v293, v288, v289, v290, v291, v270, 0, 3, 2, 1, 4) -> f_298(v293, v288, v289, v290, v291, v270, 3, 2, 1, 4, 0) :|: TRUE
f_296(v293, v288, v289, v290, v291, v270, 0, 3, 2, 1, 4) -> f_299(v293, 0, v288, v289, v290, v291, v270, 3, 2, 1, 4) :|: TRUE
f_296(v293, v288, v289, v290, v291, v270, 0, 3, 2, 1, 4) -> f_417(v293, 1, v288, v289, v290, v291, v270, 0, 3, 2, 4) :|: TRUE
f_296(v293, v288, v289, v290, v291, v270, 0, 3, 2, 1, 4) -> f_450(v293, 1, v288, v289, v290, v291, v270, 0, 3, 2, 4) :|: TRUE
f_298(v293, v288, v289, v290, v291, v270, 3, 2, 1, 4, 0) -> f_277(v293, 0, 1) :|: TRUE
f_277(v270, 0, 1) -> f_280(v270, v288, v289, 3, 0, 1, 4) :|: 1 <= v288 && v289 = 3 + v288 && 4 <= v289
f_299(v293, 0, v288, v289, v290, v291, v270, 3, 2, 1, 4) -> f_300(v270, v288, v290, 0, v293, v289, v291, 3, 2, 1, 4) :|: 0 = 0
f_300(v270, v288, v290, 0, v293, v289, v291, 3, 2, 1, 4) -> f_301(v270, v288, v290, 0, v293, -1, v289, v291, 3, 2, 1, 4) :|: 0 = 0
f_301(v270, v288, v290, 0, v293, -1, v289, v291, 3, 2, 1, 4) -> f_302(-1, v288, v289, v290, v291, v270, 0, v293, 3, 2, 1, 4) :|: 0 = 0
f_302(-1, v288, v289, v290, v291, v270, 0, v293, 3, 2, 1, 4) -> f_303(-1, v288, v289, v290, v291, v270, 3, 1, 2, 4) :|: TRUE
f_302(-1, v288, v289, v290, v291, v270, 0, v293, 3, 2, 1, 4) -> f_304(-1, 0, v288, v289, v290, v291, v270, v293, 3, 2, 1, 4) :|: TRUE
f_303(-1, v288, v289, v290, v291, v270, 3, 1, 2, 4) -> f_277(-1, 0, 1) :|: TRUE
f_304(-1, 0, v288, v289, v290, v291, v270, v293, 3, 2, 1, 4) -> f_305(v270, v288, v290, 0, v293, -1, v289, v291, 3, 2, 1, 4) :|: 0 = 0
f_305(v270, v288, v290, 0, v293, -1, v289, v291, 3, 2, 1, 4) -> f_306(0, v288, v289, v290, v291, v270, v293, -1, 3, 2, 1, 4) :|: 0 = 0
f_306(0, v288, v289, v290, v291, v270, v293, -1, 3, 2, 1, 4) -> f_307(0, v288, v289, v290, v291, v270, 3, 1, 2, 4) :|: TRUE
f_307(0, v288, v289, v290, v291, v270, 3, 1, 2, 4) -> f_277(0, 0, 1) :|: TRUE
f_417(v293, 1, v288, v289, v290, v291, v270, 0, 3, 2, 4) -> f_421(v270, v288, v290, 0, v293, 1, v289, v291, 3, 2, 4) :|: 0 = 0
f_421(v270, v288, v290, 0, v293, 1, v289, v291, 3, 2, 4) -> f_423(v270, v288, v290, 0, v293, 1, v289, v291, 3, 2, 4) :|: 0 = 0
f_423(v270, v288, v290, 0, v293, 1, v289, v291, 3, 2, 4) -> f_425(0, v288, v289, v290, v291, v270, v293, 1, 3, 2, 4) :|: 0 = 0
f_425(0, v288, v289, v290, v291, v270, v293, 1, 3, 2, 4) -> f_427(0, v288, v289, v290, v291, v270, 3, 1, 4) :|: TRUE
f_425(0, v288, v289, v290, v291, v270, v293, 1, 3, 2, 4) -> f_429(0, v288, v289, v290, v291, v270, v293, 1, 3, 2, 4) :|: TRUE
f_427(0, v288, v289, v290, v291, v270, 3, 1, 4) -> f_277(0, 0, 1) :|: TRUE
f_429(0, v288, v289, v290, v291, v270, v293, 1, 3, 2, 4) -> f_432(v270, v288, v290, 0, v293, 1, v289, v291, 3, 2, 4) :|: 0 = 0
f_432(v270, v288, v290, 0, v293, 1, v289, v291, 3, 2, 4) -> f_434(0, v288, v289, v290, v291, v270, v293, 1, 3, 2, 4) :|: 0 = 0
f_434(0, v288, v289, v290, v291, v270, v293, 1, 3, 2, 4) -> f_436(0, v288, v289, v290, v291, v270, 3, 1, 4) :|: TRUE
f_436(0, v288, v289, v290, v291, v270, 3, 1, 4) -> f_277(0, 0, 1) :|: TRUE
f_450(v293, 1, v288, v289, v290, v291, v270, 0, 3, 2, 4) -> f_417(v293, 1, v288, v289, v290, v291, v270, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 5 rulesP rules:
f_425(0, v288:0, v289:0, v290:0, v291:0, v270:0, v293:0, 1, 3, 2, 4) -> f_280(0, v288:1, 3 + v288:1, 3, 0, 1, 4) :|: v288:1 > 0
f_280(2 + v293:0, v288:0, v289:0, 3, 0, 1, 4) -> f_280(0, v288:1, 3 + v288:1, 3, 0, 1, 4) :|: v290:0 > 0 && v293:0 > -2 && v288:1 > 0
f_280(2 + v293:0, v288:0, v289:0, 3, 0, 1, 4) -> f_425(0, v288:0, v289:0, v290:0, 3 + v290:0, 2 + v293:0, v293:0, 1, 3, 2, 4) :|: v290:0 > 0 && v293:0 > -2
f_280(2 + v293:0, v288:0, v289:0, 3, 0, 1, 4) -> f_280(-1, v288:1, 3 + v288:1, 3, 0, 1, 4) :|: v290:0 > 0 && v293:0 > -2 && v288:1 > 0
f_280(2 + v293:0, v288:0, v289:0, 3, 0, 1, 4) -> f_280(v293:0, v288:1, 3 + v288:1, 3, 0, 1, 4) :|: v290:0 > 0 && v293:0 > -2 && v288:1 > 0
Filtered unneeded arguments:
   f_280(x1, x2, x3, x4, x5, x6, x7) -> f_280(x1)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_425(cons_0, v288:0, v289:0, v290:0, v291:0, v270:0, v293:0, cons_1, cons_3, cons_2, cons_4) -> f_280(0) :|: TRUE && cons_0 = 0 && cons_1 = 1 && cons_3 = 3 && cons_2 = 2 && cons_4 = 4
f_280(sum~cons_2~v293:0) -> f_280(0) :|: v293:0 > -2 && sum~cons_2~v293:0 = 2 + v293:0
f_280(sum~cons_2~v293:0) -> f_425(0, v288:0, v289:0, v290:0, 3 + v290:0, 2 + v293:0, v293:0, 1, 3, 2, 4) :|: v290:0 > 0 && v293:0 > -2 && sum~cons_2~v293:0 = 2 + v293:0
f_280(sum~cons_2~v293:0) -> f_280(-1) :|: v293:0 > -2 && sum~cons_2~v293:0 = 2 + v293:0
f_280(sum~cons_2~v293:0) -> f_280(v293:0) :|: v293:0 > -2 && sum~cons_2~v293:0 = 2 + v293:0

----------------------------------------

(9)
Obligation:
Rules:
f_425(cons_0, v288:0, v289:0, v290:0, v291:0, v270:0, v293:0, cons_1, cons_3, cons_2, cons_4) -> f_280(0) :|: TRUE && cons_0 = 0 && cons_1 = 1 && cons_3 = 3 && cons_2 = 2 && cons_4 = 4
f_280(x) -> f_280(0) :|: x1 > -2 && x = 2 + x1
f_280(x2) -> f_425(0, x3, x4, x5, 3 + x5, 2 + x6, x6, 1, 3, 2, 4) :|: x5 > 0 && x6 > -2 && x2 = 2 + x6
f_280(x7) -> f_280(-1) :|: x8 > -2 && x7 = 2 + x8
f_280(x9) -> f_280(x10) :|: x10 > -2 && x9 = 2 + x10

----------------------------------------

(10) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(11)
Obligation:
Rules:
f_280(x9) -> f_280(x10) :|: x10 > -2 && x9 = 2 + x10

----------------------------------------

(12) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(13)
Obligation:
Rules:
f_280(sum~cons_2~x10:0) -> f_280(x10:0) :|: x10:0 > -2 && sum~cons_2~x10:0 = 2 + x10:0

----------------------------------------

(14) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_280(x)] = x

The following rules are decreasing:
f_280(sum~cons_2~x10:0) -> f_280(x10:0) :|: x10:0 > -2 && sum~cons_2~x10:0 = 2 + x10:0
The following rules are bounded:
f_280(sum~cons_2~x10:0) -> f_280(x10:0) :|: x10:0 > -2 && sum~cons_2~x10:0 = 2 + x10:0

----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
SCC
----------------------------------------

(17) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_247(v187, v199, v188, v189, v200, v190, 3, 1, 4) -> f_250(v187, v199, v226, v188, v189, v200, v227, v190, 3, 1, 4) :|: 1 <= v226 && v227 = 3 + v226 && 4 <= v227
f_250(v187, v199, v226, v188, v189, v200, v227, v190, 3, 1, 4) -> f_252(v187, v199, v226, v188, v189, v200, v227, v190, 3, 1, 4) :|: TRUE
f_252(v187, v199, v226, v188, v189, v200, v227, v190, 3, 1, 4) -> f_254(v187, v199, v226, v188, v189, v200, v227, v190, 3, 1, 4) :|: TRUE
f_254(v187, v199, v226, v188, v189, v200, v227, v190, 3, 1, 4) -> f_256(v187, v199, v226, v188, v189, v200, v227, v190, 3, 1, 4) :|: 0 = 0
f_256(v187, v199, v226, v188, v189, v200, v227, v190, 3, 1, 4) -> f_258(v187, v199, v226, v188, v189, v200, v227, v190, 3, 1, 4) :|: 0 < v187
f_258(v187, v199, v226, v188, v189, v200, v227, v190, 3, 1, 4) -> f_262(v187, v199, v226, 0, v188, v189, v200, v227, v190, 3, 1, 4) :|: 0 = 0
f_262(v187, v199, v226, 0, v188, v189, v200, v227, v190, 3, 1, 4) -> f_265(v187, v199, v226, 0, v188, v189, v200, v227, v190, 3, 1, 4) :|: TRUE
f_265(v187, v199, v226, 0, v188, v189, v200, v227, v190, 3, 1, 4) -> f_268(v187, v199, v226, 0, v188, v189, v200, v227, v190, 3, 1, 4) :|: 0 = 0
f_268(v187, v199, v226, 0, v188, v189, v200, v227, v190, 3, 1, 4) -> f_271(v187, v188, v189, v199, v200, v226, v227, v190, 0, 3, 1, 4) :|: 0 = 0
f_271(v187, v188, v189, v199, v200, v226, v227, v190, 0, 3, 1, 4) -> f_416(v187, 1, v188, v189, v199, v200, v226, v227, v190, 0, 3, 4) :|: TRUE
f_271(v187, v188, v189, v199, v200, v226, v227, v190, 0, 3, 1, 4) -> f_449(v187, 1, v188, v189, v199, v200, v226, v227, v190, 0, 3, 4) :|: TRUE
f_416(v187, 1, v188, v189, v199, v200, v226, v227, v190, 0, 3, 4) -> f_420(v187, v199, v226, 0, 1, v188, v189, v200, v227, v190, 3, 4) :|: 0 = 0
f_420(v187, v199, v226, 0, 1, v188, v189, v200, v227, v190, 3, 4) -> f_422(v187, v199, v226, 0, 1, v188, v189, v200, v227, v190, 3, 4) :|: 0 = 0
f_422(v187, v199, v226, 0, 1, v188, v189, v200, v227, v190, 3, 4) -> f_424(0, v188, v189, v199, v200, v226, v227, v190, v187, 1, 3, 4) :|: 0 = 0
f_424(0, v188, v189, v199, v200, v226, v227, v190, v187, 1, 3, 4) -> f_426(0, v188, v189, v199, v200, v226, v227, v190, v187, 3, 1, 4) :|: TRUE
f_426(0, v188, v189, v199, v200, v226, v227, v190, v187, 3, 1, 4) -> f_246(0, v188, v189, v190, 3, 1, 4) :|: TRUE
f_246(v187, v188, v189, v190, 3, 1, 4) -> f_247(v187, v199, v188, v189, v200, v190, 3, 1, 4) :|: 1 <= v199 && v200 = 3 + v199 && 4 <= v200
f_449(v187, 1, v188, v189, v199, v200, v226, v227, v190, 0, 3, 4) -> f_416(v187, 1, v188, v189, v199, v200, v226, v227, v190, 0, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_247(v187:0, v199:0, v188:0, v189:0, v200:0, v190:0, 3, 1, 4) -> f_247(0, v199:1, v188:0, v189:0, 3 + v199:1, v190:0, 3, 1, 4) :|: v226:0 > 0 && v187:0 > 0 && v199:1 > 0
Filtered unneeded arguments:
   f_247(x1, x2, x3, x4, x5, x6, x7, x8, x9) -> f_247(x1)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_247(v187:0) -> f_247(0) :|: v187:0 > 0

----------------------------------------

(18)
Obligation:
Rules:
f_247(v187:0) -> f_247(0) :|: v187:0 > 0

----------------------------------------

(19) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
