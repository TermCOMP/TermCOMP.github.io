YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/TViKH.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 998 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [SOUND, 171 ms]
(6) IntTRS
(7) IRSToKoat [EQUIVALENT, 0 ms]
(8) Koat Problem
(9) KoAT2 [EQUIVALENT, 51 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/TViKH.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/TViKH.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @random()
		%8 = call i32 @random()
		Unnamed Call-Instruction = call BasicVoidType @loop(i32 %7, i32 %8)
		ret 0

*BasicFunctionTypename: "loop" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 25
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = load %3
		%6 = icmp sgt %5 0
		br %6, %7, %15
	7:
		%8 = load %3
		%9 = load %4
		%10 = add i32 %8, %9
		store %10, %3
		%11 = load %4
		%12 = sub i32 %11, 1
		store %12, %4
		%13 = load %3
		%14 = load %4
		Unnamed Call-Instruction = call BasicVoidType @loop(i32 %13, i32 %14)
		br %15
	15:
		ret void

*BasicFunctionTypename: "random" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 49
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %2
		%4 = load %2
		%5 = icmp slt %4 0
		br %5, %6, %9
	6:
		%7 = load %2
		%8 = sub i32 0, %7
		store %8, %1
		br %11
	9:
		%10 = load %2
		store %10, %1
		br %11
	11:
		%12 = load %1
		ret %12


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 124 rulesP rules:
f_168 -> f_169(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_169(v1, v2, 3, 1, 4) -> f_170(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_170(v1, v3, v2, v4, 3, 1, 4) -> f_171(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_171(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_172(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: TRUE
f_172(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_173(v1, v3, v5, v7, v2, v4, v6, 3, 1, 4) :|: TRUE
f_173(v1, v3, v5, v7, v2, v4, v6, 3, 1, 4) -> f_174(v1, v3, v5, v7, v2, v4, v6, 3, 1, 4) :|: TRUE
f_174(v1, v3, v5, v7, v2, v4, v6, 3, 1, 4) -> f_175(v1, v3, v5, v7, v2, v4, v6, 3, 1, 4) :|: TRUE
f_175(v1, v3, v5, v7, v2, v4, v6, 3, 1, 4) -> f_176(v1, v3, v5, v7, v9, v2, v4, v6, 3, 1, 4) :|: TRUE
f_176(v1, v3, v5, v7, v9, v2, v4, v6, 3, 1, 4) -> f_177(v1, v3, v5, v7, v9, v2, v4, v6, 3, 1, 4) :|: TRUE
f_177(v1, v3, v5, v7, v9, v2, v4, v6, 3, 1, 4) -> f_178(v1, v3, v5, v7, v9, v2, v4, v6, 3, 1, 4) :|: TRUE
f_178(v1, v3, v5, v7, v9, v2, v4, v6, 3, 1, 4) -> f_179(v1, v3, v5, v7, v9, v11, v2, v4, v6, 3, 1, 4) :|: TRUE
f_179(v1, v3, v5, v7, v9, v11, v2, v4, v6, 3, 1, 4) -> f_180(v1, v3, v5, v7, v9, v11, v2, v4, v6, 3, 1, 4) :|: TRUE
f_180(v1, v3, v5, v7, v9, v11, v2, v4, v6, 3, 1, 4) -> f_181(v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4) :|: TRUE
f_181(v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4) -> f_182(v13, v1, v2, v3, v4, v5, v6, v14, v7, v9, v11, 3, 1, 4) :|: 1 <= v13 && v14 = 3 + v13 && 4 <= v14
f_182(v13, v1, v2, v3, v4, v5, v6, v14, v7, v9, v11, 3, 1, 4) -> f_183(v13, v15, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) :|: 1 <= v15 && v16 = 3 + v15 && 4 <= v16
f_183(v13, v15, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) -> f_184(v13, v15, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) :|: TRUE
f_184(v13, v15, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) -> f_185(v13, v15, v17, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) :|: TRUE
f_185(v13, v15, v17, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) -> f_186(v13, v15, v17, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) :|: TRUE
f_186(v13, v15, v17, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) -> f_187(v13, v15, v17, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) :|: 0 = 0
f_187(v13, v15, v17, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) -> f_188(v13, v15, v17, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4, 0) :|: v17 < 0
f_187(v13, v15, v17, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) -> f_189(v13, v15, v17, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4, 0) :|: 0 <= v17
f_188(v13, v15, v17, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4, 0) -> f_190(v13, v15, v17, 1, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 4, 0) :|: 0 = 0
f_189(v13, v15, v17, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4, 0) -> f_191(v13, v15, v17, 0, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) :|: 0 = 0
f_190(v13, v15, v17, 1, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 4, 0) -> f_192(v13, v15, v17, 1, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 4, 0) :|: TRUE
f_191(v13, v15, v17, 0, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) -> f_193(v13, v15, v17, 0, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) :|: TRUE
f_192(v13, v15, v17, 1, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 4, 0) -> f_194(v13, v15, v17, 1, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 4, 0) :|: 0 = 0
f_193(v13, v15, v17, 0, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) -> f_195(v13, v15, v17, 0, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) :|: 0 = 0
f_194(v13, v15, v17, 1, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 4, 0) -> f_196(v13, v15, v17, 1, v19, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 0, 4) :|: v19 + v17 = 0 && 1 <= v19
f_195(v13, v15, v17, 0, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) -> f_197(v13, v15, v17, 0, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) :|: TRUE
f_196(v13, v15, v17, 1, v19, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 0, 4) -> f_198(v13, v15, v17, 1, v19, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 0, 4) :|: TRUE
f_197(v13, v15, v17, 0, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) -> f_199(v13, v15, v17, 0, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) :|: TRUE
f_198(v13, v15, v17, 1, v19, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 0, 4) -> f_200(v13, v15, v17, 1, v19, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 0, 4) :|: TRUE
f_199(v13, v15, v17, 0, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) -> f_201(v13, v15, v17, 0, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) :|: 0 = 0
f_200(v13, v15, v17, 1, v19, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 0, 4) -> f_202(v13, v15, v17, 1, v19, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 0, 4) :|: 0 = 0
f_201(v13, v15, v17, 0, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 1, 4) -> f_203(v1, v3, v5, v7, v9, v11, v17, v2, v4, v6, 3, 1, 4, 0) :|: 0 = 0
f_202(v13, v15, v17, 1, v19, v1, v2, v3, v4, v5, v6, v14, v16, v7, v9, v11, 3, 0, 4) -> f_204(v1, v3, v5, v7, v9, v11, v19, v2, v4, v6, 3, 1, 4) :|: 0 = 0
f_203(v1, v3, v5, v7, v9, v11, v17, v2, v4, v6, 3, 1, 4, 0) -> f_205(v1, v2, v3, v4, v5, v6, v7, v9, v11, v17, 3, 1, 4, 0) :|: TRUE
f_204(v1, v3, v5, v7, v9, v11, v19, v2, v4, v6, 3, 1, 4) -> f_206(v1, v2, v3, v4, v5, v6, v7, v9, v11, v19, 3, 1, 4) :|: TRUE
f_205(v1, v2, v3, v4, v5, v6, v7, v9, v11, v17, 3, 1, 4, 0) -> f_207(v32, v1, v2, v3, v4, v5, v6, v33, v7, v9, v11, v17, 3, 1, 4, 0) :|: 1 <= v32 && v33 = 3 + v32 && 4 <= v33
f_206(v1, v2, v3, v4, v5, v6, v7, v9, v11, v19, 3, 1, 4) -> f_205(v1, v2, v3, v4, v5, v6, v7, v9, v11, v17, 3, 1, 4, 0) :|: TRUE
f_207(v32, v1, v2, v3, v4, v5, v6, v33, v7, v9, v11, v17, 3, 1, 4, 0) -> f_208(v32, v34, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4, 0) :|: 1 <= v34 && v35 = 3 + v34 && 4 <= v35
f_208(v32, v34, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4, 0) -> f_209(v32, v34, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4, 0) :|: TRUE
f_209(v32, v34, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4, 0) -> f_210(v32, v34, v36, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4, 0) :|: TRUE
f_210(v32, v34, v36, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4, 0) -> f_211(v32, v34, v36, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4, 0) :|: TRUE
f_211(v32, v34, v36, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4, 0) -> f_212(v32, v34, v36, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4, 0) :|: 0 = 0
f_212(v32, v34, v36, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4, 0) -> f_213(v32, v34, v36, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4, 0) :|: v36 < 0
f_212(v32, v34, v36, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4, 0) -> f_214(v32, v34, v36, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4, 0) :|: 0 <= v36
f_213(v32, v34, v36, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4, 0) -> f_215(v32, v34, v36, 1, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 4, 0) :|: 0 = 0
f_214(v32, v34, v36, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4, 0) -> f_216(v32, v34, v36, 0, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4) :|: 0 = 0
f_215(v32, v34, v36, 1, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 4, 0) -> f_217(v32, v34, v36, 1, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 4, 0) :|: TRUE
f_216(v32, v34, v36, 0, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4) -> f_218(v32, v34, v36, 0, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4) :|: TRUE
f_217(v32, v34, v36, 1, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 4, 0) -> f_219(v32, v34, v36, 1, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 4, 0) :|: 0 = 0
f_218(v32, v34, v36, 0, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4) -> f_220(v32, v34, v36, 0, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4) :|: 0 = 0
f_219(v32, v34, v36, 1, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 4, 0) -> f_221(v32, v34, v36, 1, v38, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 0, 4) :|: v38 + v36 = 0 && 1 <= v38
f_220(v32, v34, v36, 0, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4) -> f_222(v32, v34, v36, 0, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4) :|: TRUE
f_221(v32, v34, v36, 1, v38, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 0, 4) -> f_223(v32, v34, v36, 1, v38, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 0, 4) :|: TRUE
f_222(v32, v34, v36, 0, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4) -> f_224(v32, v34, v36, 0, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4) :|: TRUE
f_223(v32, v34, v36, 1, v38, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 0, 4) -> f_225(v32, v34, v36, 1, v38, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 0, 4) :|: TRUE
f_224(v32, v34, v36, 0, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4) -> f_226(v32, v34, v36, 0, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4) :|: 0 = 0
f_225(v32, v34, v36, 1, v38, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 0, 4) -> f_227(v32, v34, v36, 1, v38, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 0, 4) :|: 0 = 0
f_226(v32, v34, v36, 0, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 1, 4) -> f_228(v1, v3, v5, v7, v9, v11, v17, v36, v2, v4, v6, 3, 1, 4, 0) :|: 0 = 0
f_227(v32, v34, v36, 1, v38, v1, v2, v3, v4, v5, v6, v33, v35, v7, v9, v11, v17, 3, 0, 4) -> f_229(v1, v3, v5, v7, v9, v11, v17, v38, v2, v4, v6, 3, 1, 4, 0) :|: 0 = 0
f_228(v1, v3, v5, v7, v9, v11, v17, v36, v2, v4, v6, 3, 1, 4, 0) -> f_230(v17, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) :|: 0 = 0
f_229(v1, v3, v5, v7, v9, v11, v17, v38, v2, v4, v6, 3, 1, 4, 0) -> f_231(v17, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) :|: 0 = 0
f_230(v17, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_232(v17, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) :|: TRUE
f_230(v17, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_364(0, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4) :|: TRUE
f_230(v17, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_381(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 0, 4, 2) :|: TRUE
f_230(v17, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_410(v17, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) :|: TRUE
f_230(v17, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_417(v17, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) :|: TRUE
f_231(v17, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_233(v17, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) :|: TRUE
f_231(v17, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_365(0, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4) :|: TRUE
f_231(v17, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_382(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 0, 4, 2) :|: TRUE
f_231(v17, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_388(v378, v379, v380, v381, 1, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, 3, 0, 4) :|: TRUE
f_231(v17, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_411(v17, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4) :|: TRUE
f_231(v17, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_418(v17, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4) :|: TRUE
f_232(v17, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_262(v17, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 0, 1, 4) :|: TRUE
f_233(v17, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_232(v17, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) :|: TRUE
f_262(v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, 3, 0, 1, 4) -> f_291(v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, 3, 0, 2, 1, 4) :|: TRUE
f_291(v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, 3, 0, 2, 1, 4) -> f_320(v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, 3, 0, 1, 4) :|: TRUE
f_320(v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, 3, 0, 1, 4) -> f_349(v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, 3, 1, 4) :|: TRUE
f_349(v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, 3, 1, 4) -> f_350(v250, v251, v261, v252, v253, v254, v255, v256, v257, v262, v258, v259, v260, 3, 1, 4) :|: 1 <= v261 && v262 = 3 + v261 && 4 <= v262
f_350(v250, v251, v261, v252, v253, v254, v255, v256, v257, v262, v258, v259, v260, 3, 1, 4) -> f_351(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) :|: 1 <= v263 && v264 = 3 + v263 && 4 <= v264
f_351(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) -> f_352(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) :|: TRUE
f_352(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) -> f_353(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) :|: TRUE
f_353(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) -> f_354(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) :|: TRUE
f_354(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) -> f_355(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) :|: TRUE
f_355(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) -> f_356(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) :|: 0 = 0
f_356(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) -> f_357(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) :|: 0 < v250
f_356(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) -> f_358(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 0, 1, 4) :|: v250 <= 0
f_357(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) -> f_359(v250, v251, v261, v263, 1, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) :|: 0 = 0
f_358(v250, v251, v261, v263, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 0, 1, 4) -> f_360(v250, v251, v261, v263, 0, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) :|: 0 = 0
f_359(v250, v251, v261, v263, 1, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) -> f_361(v250, v251, v261, v263, 1, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) :|: TRUE
f_360(v250, v251, v261, v263, 0, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) -> f_362(v250, v251, v261, v263, 0, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 1, 4) :|: TRUE
f_361(v250, v251, v261, v263, 1, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) -> f_363(v250, v251, v261, v263, 1, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) :|: 0 = 0
f_363(v250, v251, v261, v263, 1, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) -> f_366(v250, v251, v261, v263, 1, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) :|: 0 = 0
f_364(0, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4) -> f_367(v1, v3, v5, v7, v9, v11, 0, v36, v2, v4, v6, 3, 1, 4) :|: TRUE
f_365(0, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4) -> f_368(v1, v3, v5, v7, v9, v11, 0, v38, v2, v4, v6, 3, 1, 4) :|: TRUE
f_366(v250, v251, v261, v263, 1, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) -> f_369(v250, v251, v261, v263, 1, v297, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) :|: v297 = v250 + v251
f_369(v250, v251, v261, v263, 1, v297, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) -> f_370(v250, v251, v261, v263, 1, v297, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) :|: TRUE
f_370(v250, v251, v261, v263, 1, v297, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) -> f_371(v250, v251, v261, v263, 1, v297, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) :|: 0 = 0
f_371(v250, v251, v261, v263, 1, v297, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) -> f_372(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) :|: 1 + v299 = v251
f_372(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) -> f_373(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) :|: TRUE
f_373(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) -> f_374(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) :|: 0 = 0
f_374(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) -> f_375(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) :|: 0 = 0
f_375(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) -> f_376(v297, v299, v252, v253, v254, v255, v256, v257, v261, v262, v263, v264, v258, v259, v260, v250, v251, 1, 3, 4) :|: 0 = 0
f_376(v297, v299, v252, v253, v254, v255, v256, v257, v261, v262, v263, v264, v258, v259, v260, v250, v251, 1, 3, 4) -> f_377(v297, v299, v252, v253, v254, v255, v256, v257, v261, v262, v263, v264, v258, v259, v260, 3, 1, 4) :|: TRUE
f_376(v297, v299, v252, v253, v254, v255, v256, v257, v261, v262, v263, v264, v258, v259, v260, v250, v251, 1, 3, 4) -> f_378(v297, v299, v252, v253, v254, v255, v256, v257, v261, v262, v263, v264, v258, v259, v260, v250, v251, 1, 3, 0, 4, 2) :|: TRUE
f_376(v297, v299, v252, v253, v254, v255, v256, v257, v261, v262, v263, v264, v258, v259, v260, v250, v251, 1, 3, 4) -> f_412(v297, v299, v252, v253, v254, v255, v256, v257, v261, v262, v263, v264, v258, v259, v260, v250, v251, 1, 3, 4) :|: TRUE
f_376(v297, v299, v252, v253, v254, v255, v256, v257, v261, v262, v263, v264, v258, v259, v260, v250, v251, 1, 3, 4) -> f_419(v297, v299, v252, v253, v254, v255, v256, v257, v261, v262, v263, v264, v258, v259, v260, v250, v251, 1, 3, 4) :|: TRUE
f_377(v297, v299, v252, v253, v254, v255, v256, v257, v261, v262, v263, v264, v258, v259, v260, 3, 1, 4) -> f_349(v297, v299, v252, v253, v254, v255, v256, v257, v258, v259, v260, 3, 1, 4) :|: TRUE
f_378(v297, v299, v252, v253, v254, v255, v256, v257, v261, v262, v263, v264, v258, v259, v260, v250, v251, 1, 3, 0, 4, 2) -> f_379(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 0, 4, 2) :|: TRUE
f_379(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 0, 4, 2) -> f_380(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 0, 4, 2) :|: TRUE
f_380(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 0, 4, 2) -> f_386(v250, v251, v261, v263, 1, v297, v299, v262, v264, v252, v253, v254, v255, v256, v257, v258, v259, v260, 3, 0, 4) :|: TRUE
f_386(v378, v379, v380, v381, 1, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, 3, 0, 4) -> f_393(v378, v379, v380, v381, 1, v383, v384, v385, v386, 3, 0, 4) :|: TRUE
f_393(v447, v448, v449, v450, 1, v452, v453, v454, v455, 3, 0, 4) -> f_401(v447, v448, v449, v450, 1, v452, v453, v454, v455, 3, 4) :|: TRUE
f_401(v480, v481, v482, v483, 1, v485, v486, v487, v488, 3, 4) -> f_409(v480, v481, v482, v483, 1, v485, v486, v487, v488, 3, 4) :|: TRUE
f_410(v17, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_413(v1, v3, v5, v7, v9, v11, v17, v36, v2, v4, v6, 3, 1, 4, 0) :|: TRUE
f_411(v17, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4) -> f_414(v1, v3, v5, v7, v9, v11, v17, v38, v2, v4, v6, 3, 1, 4) :|: TRUE
f_412(v297, v299, v252, v253, v254, v255, v256, v257, v261, v262, v263, v264, v258, v259, v260, v250, v251, 1, 3, 4) -> f_415(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) :|: TRUE
f_415(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) -> f_416(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) :|: TRUE
f_416(v250, v251, v261, v263, 1, v297, v299, v252, v253, v254, v255, v256, v257, v262, v264, v258, v259, v260, 3, 4) -> f_409(v250, v251, v261, v263, 1, v297, v299, v262, v264, 3, 4) :|: TRUE
f_417(v17, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_410(v17, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) :|: TRUE
f_418(v17, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4) -> f_411(v17, v38, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4) :|: TRUE
f_419(v297, v299, v252, v253, v254, v255, v256, v257, v261, v262, v263, v264, v258, v259, v260, v250, v251, 1, 3, 4) -> f_412(v297, v299, v252, v253, v254, v255, v256, v257, v261, v262, v263, v264, v258, v259, v260, v250, v251, 1, 3, 4) :|: TRUE
Combined rules. Obtained 14 rulesP rules:
f_356(v250:0, v251:0, v261:0, v263:0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v262:0, v264:0, v258:0, v259:0, v260:0, 3, 1, 4) -> f_362(v250:0, v251:0, v261:0, v263:0, 0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v262:0, v264:0, v258:0, v259:0, v260:0, 3, 1, 4) :|: v250:0 < 1
f_212(v32:0, v34:0, v36:0, v1:0, v2:0, v3:0, v4:0, v5:0, v6:0, v33:0, v35:0, v7:0, v9:0, v11:0, v17:0, 3, 1, 4, 0) -> f_388(v378:0, v379:0, v380:0, v381:0, 1, v383:0, v384:0, v385:0, v386:0, v387:0, v388:0, v389:0, v390:0, v391:0, v392:0, v393:0, v394:0, v395:0, 3, 0, 4) :|: v36:0 < 0 && v38:0 + v36:0 = 0 && v38:0 > 0
f_356(v250:0, 1 + v299:0, v261:0, v263:0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v262:0, v264:0, v258:0, v259:0, v260:0, 3, 1, 4) -> f_409(v250:0, 1 + v299:0, v261:0, v263:0, 1, v250:0 + (1 + v299:0), v299:0, v262:0, v264:0, 3, 4) :|: v250:0 > 0
f_212(v32:0, v34:0, v36:0, v1:0, v2:0, v3:0, v4:0, v5:0, v6:0, v33:0, v35:0, v7:0, v9:0, v11:0, v17:0, 3, 1, 4, 0) -> f_414(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v17:0, v38:0, v2:0, v4:0, v6:0, 3, 1, 4) :|: v36:0 < 0 && v38:0 + v36:0 = 0 && v38:0 > 0
f_212(v32:0, v34:0, v36:0, v1:0, v2:0, v3:0, v4:0, v5:0, v6:0, v33:0, v35:0, v7:0, v9:0, v11:0, v17:0, 3, 1, 4, 0) -> f_413(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v17:0, v36:0, v2:0, v4:0, v6:0, 3, 1, 4, 0) :|: v36:0 > -1
f_212(v32:0, v34:0, v36:0, v1:0, v2:0, v3:0, v4:0, v5:0, v6:0, v33:0, v35:0, v7:0, v9:0, v11:0, v17:0, 3, 1, 4, 0) -> f_382(v250:0, v251:0, v261:0, v263:0, 1, v297:0, v299:0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v262:0, v264:0, v258:0, v259:0, v260:0, 3, 0, 4, 2) :|: v36:0 < 0 && v38:0 + v36:0 = 0 && v38:0 > 0
f_212(v32:0, v34:0, v36:0, v1:0, v2:0, v3:0, v4:0, v5:0, v6:0, v33:0, v35:0, v7:0, v9:0, v11:0, v17:0, 3, 1, 4, 0) -> f_367(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, 0, v36:0, v2:0, v4:0, v6:0, 3, 1, 4) :|: v36:0 > -1
f_212(v32:0, v34:0, v36:0, v1:0, v2:0, v3:0, v4:0, v5:0, v6:0, v33:0, v35:0, v7:0, v9:0, v11:0, v17:0, 3, 1, 4, 0) -> f_368(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, 0, v38:0, v2:0, v4:0, v6:0, 3, 1, 4) :|: v36:0 < 0 && v38:0 + v36:0 = 0 && v38:0 > 0
f_168 -> f_212(v32:0, v34:0, v36:0, v1:0, 3 + v1:0, v3:0, 3 + v3:0, v5:0, 3 + v5:0, 3 + v32:0, 3 + v34:0, v7:0, v9:0, v11:0, v17:0, 3, 1, 4, 0) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v13:0 > 0 && v15:0 > 0 && v17:1 < 0 && v19:0 > 0 && v19:0 + v17:1 = 0 && v32:0 > 0 && v34:0 > 0
f_356(v250:0, 1 + v299:0, v261:0, v263:0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v262:0, v264:0, v258:0, v259:0, v260:0, 3, 1, 4) -> f_356(v250:0 + (1 + v299:0), v299:0, v261:1, v263:1, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, 3 + v261:1, 3 + v263:1, v258:0, v259:0, v260:0, 3, 1, 4) :|: v250:0 > 0 && v261:1 > 0 && v263:1 > 0
f_212(v32:0, v34:0, v36:0, v1:0, v2:0, v3:0, v4:0, v5:0, v6:0, v33:0, v35:0, v7:0, v9:0, v11:0, v17:0, 3, 1, 4, 0) -> f_381(v250:0, v251:0, v261:0, v263:0, 1, v297:0, v299:0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v262:0, v264:0, v258:0, v259:0, v260:0, 3, 0, 4, 2) :|: v36:0 > -1
f_212(v32:0, v34:0, v36:0, v1:0, v2:0, v3:0, v4:0, v5:0, v6:0, v33:0, v35:0, v7:0, v9:0, v11:0, v17:0, 3, 1, 4, 0) -> f_356(v17:0, v38:0, v261:0, v263:0, v1:0, v2:0, v3:0, v4:0, v5:0, v6:0, 3 + v261:0, 3 + v263:0, v7:0, v9:0, v11:0, 3, 1, 4) :|: v36:0 < 0 && v38:0 > 0 && v38:0 + v36:0 = 0 && v261:0 > 0 && v263:0 > 0
f_168 -> f_212(v32:0, v34:0, v36:0, v1:0, 3 + v1:0, v3:0, 3 + v3:0, v5:0, 3 + v5:0, 3 + v32:0, 3 + v34:0, v7:0, v9:0, v11:0, v17:0, 3, 1, 4, 0) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v13:0 > 0 && v15:0 > 0 && v17:0 > -1 && v32:0 > 0 && v34:0 > 0
f_212(v32:0, v34:0, v36:0, v1:0, v2:0, v3:0, v4:0, v5:0, v6:0, v33:0, v35:0, v7:0, v9:0, v11:0, v17:0, 3, 1, 4, 0) -> f_356(v17:0, v36:0, v261:0, v263:0, v1:0, v2:0, v3:0, v4:0, v5:0, v6:0, 3 + v261:0, 3 + v263:0, v7:0, v9:0, v11:0, 3, 1, 4) :|: v36:0 > -1 && v261:0 > 0 && v263:0 > 0
Filtered unneeded arguments:
   f_356(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_356(x1, x2)
   f_212(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_212(x3, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 14 rules.P rules:
f_356(v250:0, v251:0) -> f_362(v250:0, v251:0, v261:0, v263:0, 0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v262:0, v264:0, v258:0, v259:0, v260:0, 3, 1, 4) :|: v250:0 < 1
f_212(v36:0, v17:0) -> f_388(v378:0, v379:0, v380:0, v381:0, 1, v383:0, v384:0, v385:0, v386:0, v387:0, v388:0, v389:0, v390:0, v391:0, v392:0, v393:0, v394:0, v395:0, 3, 0, 4) :|: v36:0 < 0
f_356(v250:0, sum~cons_1~v299:0) -> f_409(v250:0, 1 + v299:0, v261:0, v263:0, 1, v250:0 + (1 + v299:0), v299:0, v262:0, v264:0, 3, 4) :|: v250:0 > 0 && sum~cons_1~v299:0 = 1 + v299:0
f_212(v36:0, v17:0) -> f_414(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v17:0, v38:0, v2:0, v4:0, v6:0, 3, 1, 4) :|: v38:0 + v36:0 = 0 && v38:0 > 0 && v36:0 < 0
f_212(v36:0, v17:0) -> f_413(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v17:0, v36:0, v2:0, v4:0, v6:0, 3, 1, 4, 0) :|: v36:0 > -1
f_212(v36:0, v17:0) -> f_382(v250:0, v251:0, v261:0, v263:0, 1, v297:0, v299:0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v262:0, v264:0, v258:0, v259:0, v260:0, 3, 0, 4, 2) :|: v36:0 < 0
f_212(v36:0, v17:0) -> f_367(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, 0, v36:0, v2:0, v4:0, v6:0, 3, 1, 4) :|: v36:0 > -1
f_212(v36:0, v17:0) -> f_368(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, 0, v38:0, v2:0, v4:0, v6:0, 3, 1, 4) :|: v38:0 + v36:0 = 0 && v38:0 > 0 && v36:0 < 0
f_168 -> f_212(v36:0, v17:0) :|: TRUE
f_356(v250:0, sum~cons_1~v299:0) -> f_356(v250:0 + (1 + v299:0), v299:0) :|: v250:0 > 0 && sum~cons_1~v299:0 = 1 + v299:0
f_212(v36:0, v17:0) -> f_381(v250:0, v251:0, v261:0, v263:0, 1, v297:0, v299:0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v262:0, v264:0, v258:0, v259:0, v260:0, 3, 0, 4, 2) :|: v36:0 > -1
f_212(v36:0, v17:0) -> f_356(v17:0, v38:0) :|: v38:0 > 0 && v38:0 + v36:0 = 0 && v36:0 < 0
f_168 -> f_212(v36:0, v17:0) :|: v17:0 > -1
f_212(v36:0, v17:0) -> f_356(v17:0, v36:0) :|: v36:0 > -1

----------------------------------------

(6)
Obligation:
Rules:
f_356(v250:0, v251:0) -> f_362(v250:0, v251:0, v261:0, v263:0, 0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v262:0, v264:0, v258:0, v259:0, v260:0, 3, 1, 4) :|: v250:0 < 1
f_212(v36:0, v17:0) -> f_388(v378:0, v379:0, v380:0, v381:0, 1, v383:0, v384:0, v385:0, v386:0, v387:0, v388:0, v389:0, v390:0, v391:0, v392:0, v393:0, v394:0, v395:0, 3, 0, 4) :|: v36:0 < 0
f_356(x, x1) -> f_409(x, 1 + x2, x3, x4, 1, x + (1 + x2), x2, x5, x6, 3, 4) :|: x > 0 && x1 = 1 + x2
f_212(x7, x8) -> f_414(x9, x10, x11, x12, x13, x14, x8, x15, x16, x17, x18, 3, 1, 4) :|: x15 + x7 = 0 && x15 > 0 && x7 < 0
f_212(x19, x20) -> f_413(x21, x22, x23, x24, x25, x26, x20, x19, x27, x28, x29, 3, 1, 4, 0) :|: x19 > -1
f_212(x30, x31) -> f_382(x32, x33, x34, x35, 1, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, 3, 0, 4, 2) :|: x30 < 0
f_212(x49, x50) -> f_367(x51, x52, x53, x54, x55, x56, 0, x49, x57, x58, x59, 3, 1, 4) :|: x49 > -1
f_212(x60, x61) -> f_368(x62, x63, x64, x65, x66, x67, 0, x68, x69, x70, x71, 3, 1, 4) :|: x68 + x60 = 0 && x68 > 0 && x60 < 0
f_168 -> f_212(x72, x73) :|: TRUE
f_356(x74, x75) -> f_356(x74 + (1 + x76), x76) :|: x74 > 0 && x75 = 1 + x76
f_212(x77, x78) -> f_381(x79, x80, x81, x82, 1, x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95, 3, 0, 4, 2) :|: x77 > -1
f_212(x96, x97) -> f_356(x97, x98) :|: x98 > 0 && x98 + x96 = 0 && x96 < 0
f_168 -> f_212(x99, x100) :|: x100 > -1
f_212(x101, x102) -> f_356(x102, x101) :|: x101 > -1
Start term: f_168

----------------------------------------

(7) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(8)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_168))
(VAR x290 x160 x281 x280 x162 x283 x161 x282 x164 x285 x163 x284 x166 x287 x165 x286 x168 x289 x167 x288 x169 x270 x391 x390 x151 x272 x393 x150 x271 x392 x153 x274 x395 x152 x273 x394 x155 x276 x397 x154 x275 x396 x157 x278 x399 x156 x277 x398 x159 x158 x279 x380 x140 x261 x382 x260 x381 x142 x263 x384 x141 x262 x383 x144 x265 x386 x143 x264 x385 x146 x267 x388 x145 x266 x387 x148 x269 x147 x268 x389 x149 x250 x371 x370 x131 x252 x373 x130 x251 x372 x133 x254 x375 x132 x253 x374 x135 x256 x377 x134 x255 x376 x137 x258 x379 x136 x257 x378 x139 x138 x259 x193 x192 x195 x194 x197 x196 x199 x198 x'' k14 k15 k16 k17 k10 k11 k12 k13 x191 x190 x182 x181 x184 x183 x186 x185 x188 x187 x189 x180 x171 x292 x170 x291 x173 x294 x172 x293 x175 x296 x174 x295 x177 x298 x176 x297 x179 x178 x299 k36 k37 k38 k39 k32 k33 k34 k35 k30 k31 k29 k25 k26 k27 k28 k21 k22 k23 k24 k20 k18 k19 k58 k59 k54 k55 k56 k57 k50 k51 k52 k53 k47 k48 k49 k43 k44 k45 k46 k40 k41 k42 k76 k77 k78 k79 k72 k73 k74 k75 k70 k71 x k69 k65 k66 k67 k68 k61 k62 k63 k64 k60 k98 k99 k94 k95 k96 k97 k90 k91 k92 k93 x28 x29 x24 x25 x26 x27 x20 x21 x22 x23 k87 k88 k89 k83 k84 k85 k86 k80 k81 k82 x17 x18 x19 x13 x14 x15 x16 x10 x11 x12 x46 x47 x48 x49 x42 x43 x44 x45 x40 x41 x39 x35 x36 x37 x38 x31 x32 x33 x34 x30 x70 x68 x69 x64 x65 x66 x67 x60 x61 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x58 x59 x53 x54 x55 x56 x50 x51 x52 x407 x90 x406 x91 x409 x92 x408 k118 k117 k116 k115 k119 x86 k110 x87 x88 x401 x89 x400 x82 k114 x403 x83 k113 x402 x84 k112 x405 k111 x85 x404 x80 x81 k107 k106 k105 k104 x79 k109 k108 x75 x76 x77 x78 x71 k103 x72 k102 x73 k101 x74 k100 x97 x98 x99 x93 x94 x95 x96 x209 x208 x329 x320 x201 x322 x200 x321 x203 x324 x202 x323 x205 x326 x204 x325 x207 x328 x206 x327 x319 x318 x311 x310 x313 x312 x315 x314 x317 x316 x308 x307 x309 k132 x300 x421 k131 x420 k130 x302 x423 x301 x422 k136 x304 x425 x303 k135 x424 x306 k134 x427 x305 k133 x426 x418 x417 x419 k129 k128 k127 k126 k121 x410 k120 x412 x411 k125 x414 k124 x413 k123 x416 k122 x415 x360 x120 x241 x362 x240 x361 x122 x243 x364 x121 x242 x363 x124 x245 x366 x123 x244 x365 x126 x247 x368 x125 x246 x367 x128 x249 x127 x248 x369 x129 x230 x351 x350 x111 x232 x353 x110 x231 x352 x113 x234 x355 x112 x233 x354 x115 x236 x357 x114 x235 x356 x117 x238 x359 x116 x237 x358 x119 x118 x239 x109 x4 x5 x2 x3 x8 x340 x9 x6 x100 x221 x342 x7 x220 x341 x102 x223 x344 x101 x222 x343 x104 x225 x346 x103 x224 x345 x106 x227 x348 x1 x105 x226 x347 x108 x229 x107 x228 x349 x219 x' x210 x331 x330 x212 x333 x211 x332 x214 x335 x213 x334 x216 x337 x215 x336 x218 x339 x217 x338)
(RULES
  f_168(x318, x319, x320, x321, x322, x323, x324, x325, x326, x327, x328, x329, x330, x331, x332, x333, x334, x335, x336, x337, x338, x339) -> f_212(k131, k105, x340, x341, x342, x343, x344, x345, x346, x347, x348, x349, x350, x351, x352, x353, x354, x355, x356, x357, x358, x359) :|: k105 > -1
  f_212(k111, k109, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82, x83, x84, x85, x86, x87) -> f_356(k109, k111, x88, x89, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99, x100, x101, x102, x103, x104, x105, x106, x107) :|: k111 > -1
  f_212(k27, k23, x230, x231, x232, x233, x234, x235, x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, x246, x247, x248, x249) -> f_382(k24, k25, k26, k19, 1, k20, k21, k22, k18, k12, k13, k7, k8, k9, k10, k3, k4, k5, 3, 0, 4, 2) :|: k27 < 0
  f_212(k38, k40, x250, x251, x252, x253, x254, x255, x256, x257, x258, x259, x260, x261, x262, x263, x264, x265, x266, x267, x268, x269) -> f_368(k41, k42, k34, k35, k36, k37, 0, k32, k33, k28, k84, 3, 1, 4, x270, x271, x272, x273, x274, x275, x276, x277) :|: k32 + k38 = 0 && k32 > 0 && k38 < 0
  f_212(k106, k99, x108, x109, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122, x123, x124, x125, x126, x127) -> f_414(k101, k128, k130, k132, k123, k124, k99, k125, k126, k120, k121, 3, 1, 4, x128, x129, x130, x131, x132, x133, x134, x135) :|: k125 + k106 = 0 && k125 > 0 && k106 < 0
  f_356(k98, k2, x176, x177, x178, x179, x180, x181, x182, x183, x184, x185, x186, x187, x188, x189, x190, x191, x192, x193, x194, x195) -> f_362(k98, k2, k76, k16, 0, k31, k63, k91, k119, k17, k46, k118, k47, k77, k117, k45, 3, 1, 4, x196, x197, x198) :|: k98 < 1
  f_212(k122, k108, x360, x361, x362, x363, x364, x365, x366, x367, x368, x369, x370, x371, x372, x373, x374, x375, x376, x377, x378, x379) -> f_413(k110, k112, k113, k100, k102, k104, k108, k122, k107, k93, k95, 3, 1, 4, 0, x380, x381, x382, x383, x384, x385, x386) :|: k122 > -1
  f_356(k88, k80, x278, x279, x280, x281, x282, x283, x284, x285, x286, x287, x288, x289, x290, x291, x292, x293, x294, x295, x296, x297) -> f_356(k88 + (1 + k81), k81, x298, x299, x300, x301, x302, x303, x304, x305, x306, x307, x308, x309, x310, x311, x312, x313, x314, x315, x316, x317) :|: k88 > 0 && k80 = 1 + k81
  f_212(k136, k127, x136, x137, x138, x139, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, x154, x155) -> f_356(k127, k129, x156, x157, x158, x159, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x170, x171, x172, x173, x174, x175) :|: k129 > 0 && k129 + k136 = 0 && k136 < 0
  f_212(k6, k56, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59) -> f_367(k57, k58, k51, k52, k53, k54, 0, k6, k48, k49, k50, 3, 1, 4, x60, x61, x62, x63, x64, x65, x66, x67) :|: k6 > -1
  f_356(k68, k114, x199, x200, x201, x202, x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213, x214, x215, x216, x217, x218) -> f_409(k68, 1 + k96, k97, k92, 1, k68 + (1 + k96), k96, k94, k103, 3, 4, x219, x220, x221, x222, x223, x224, x225, x226, x227, x228, x229) :|: k68 > 0 && k114 = 1 + k96
  f_212(k82, k83, x387, x388, x389, x390, x391, x392, x393, x394, x395, x396, x397, x398, x399, x400, x401, x402, x403, x404, x405, x406) -> f_381(k79, k74, k75, k69, 1, k70, k71, k72, k64, k65, k66, k67, k59, k60, k61, k133, k134, k135, 3, 0, 4, 2) :|: k82 > -1
  f_212(k78, k30, x407, x408, x409, x410, x411, x412, x413, x414, x415, x416, x417, x418, x419, x420, x421, x422, x423, x424, x425, x426) -> f_388(k55, k85, k15, k44, 1, k116, k14, k43, k73, k115, k11, k39, k90, k1, k29, k62, k89, k0, 3, 0, 4, x427) :|: k78 < 0
  f_168(x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_212(k86, k87, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39) :|: 0 = 0
)

----------------------------------------

(9) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_6131243533523918893.koat 

KoAT2's output was:

YES

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
