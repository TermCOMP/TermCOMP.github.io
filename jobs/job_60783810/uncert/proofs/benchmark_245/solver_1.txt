YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/9hs8j.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 38 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2314 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 59 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 12 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 58 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/9hs8j.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/9hs8j.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%5 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store null, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%6 = load %3
		store %6, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %7
	7:
		%8 = load %5
		%9 = load %2
		%10 = icmp slt %8 %9
		br %10, %11, %24
	11:
		%12 = call noalias *i8 @malloc(i64 16)
		%13 = bitcast *i8 %12 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %13, %3
		%14 = call i32 (...)* @__VERIFIER_nondet_int()
		%15 = load %3
		%16 = getelementptr %15, 0, 0
		store %14, %16
		%17 = load %4
		%18 = load %3
		%19 = getelementptr %18, 0, 1
		store %17, %19
		%20 = load %3
		store %20, %4
		br %21
	21:
		%22 = load %5
		%23 = add i32 %22, 1
		store %23, %5
		br %7
	24:
		%25 = load %3
		ret %25

*BasicFunctionTypename: "search" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 55
	0:
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca i32, align 4
		%5 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %5)
		%6 = load %3
		store %6, %5
		br %7
	7:
		%8 = load %5
		%9 = getelementptr %8, 0, 1
		%10 = load %9
		%11 = icmp ne %10 null
		br %11, %12, %18
	12:
		%13 = load %5
		%14 = getelementptr %13, 0, 0
		%15 = load %14
		%16 = load %4
		%17 = icmp ne %15 %16
		br %18
	18:
		%19 = phi [0, %7], [%17, %12]
		br %19, %20, %24
	20:
		%21 = load %5
		%22 = getelementptr %21, 0, 1
		%23 = load %22
		store %23, %5
		br %7
	24:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 82
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %7, %8
	7:
		store 0, %1
		br %12
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		%9 = load %2
		%10 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %9)
		store %10, %3
		%11 = load %3
		Unnamed Call-Instruction = call BasicVoidType @search(*BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %11, i32 0)
		store 0, %1
		br %12
	12:
		%13 = load %1
		ret %13


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_783(v668, 0, v670, v671, v672, v675, v674, 1, v673, v677, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v696, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_790(v668, 0, v670, v671, v672, v675, v697, 1, v673, v677, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v696, v681, 3, 7, 4, 8, 9, 2, v688, v693) :|: v697 = 8 + v675 && 9 <= v697
f_790(v668, 0, v670, v671, v672, v675, v697, 1, v673, v677, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v696, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_791(v668, 0, v670, v671, v672, v675, v697, v696, 1, v673, v677, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) :|: 0 = 0
f_791(v668, 0, v670, v671, v672, v675, v697, v696, 1, v673, v677, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_792(v668, 0, v670, v671, v672, v675, v697, v696, 1, v673, v677, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) :|: 0 < v696 && 2 <= v693
f_792(v668, 0, v670, v671, v672, v675, v697, v696, 1, v673, v677, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_794(v668, 0, v670, v671, v672, v675, v697, v696, 1, v673, v677, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) :|: 0 = 0
f_794(v668, 0, v670, v671, v672, v675, v697, v696, 1, v673, v677, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_796(v668, 0, v670, v671, v672, v675, v697, v696, 1, v673, v677, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) :|: TRUE
f_796(v668, 0, v670, v671, v672, v675, v697, v696, 1, v673, v677, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_798(v668, 0, v670, v671, v672, v675, v697, v696, 1, v673, v677, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) :|: 0 = 0
f_798(v668, 0, v670, v671, v672, v675, v697, v696, 1, v673, v677, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_800(v668, 0, v670, v671, v672, v675, v697, v696, 1, v677, v673, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) :|: 0 = 0
f_800(v668, 0, v670, v671, v672, v675, v697, v696, 1, v677, v673, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_802(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v673, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) :|: TRUE
f_802(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v673, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_804(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v673, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) :|: 0 = 0
f_804(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v673, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_806(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v673, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) :|: v718 != 0
f_806(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v673, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_809(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v673, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) :|: 0 = 0
f_809(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v673, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_811(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v673, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) :|: 0 = 0
f_811(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v673, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_813(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v673, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) :|: TRUE
f_813(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v673, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_815(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v673, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) :|: 0 = 0
f_815(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v674, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v673, v692, v694, v695, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_823(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v678, v682, v679, v683, v680, v684, v685, v686, v687, v791, v673, v692, v674, v681, v790, v695, v788, v689, v694, v691, 3, 7, 4, 8, 15, 9, 2, v789, 16, v792) :|: v697 = 8 + v675 && 1 + v789 = v693 && v791 = 15 + v675 && v792 = 1 + v688 && 16 <= v791 && 1 <= v789 && 0 <= v792
f_823(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v678, v682, v679, v683, v680, v684, v685, v686, v687, v791, v673, v692, v674, v681, v790, v695, v788, v689, v694, v691, 3, 7, 4, 8, 15, 9, 2, v789, 16, v792) -> f_825(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v678, v682, v679, v683, v680, v684, v685, v686, v687, v791, v673, v692, v674, v681, v790, v695, v788, v689, v694, v691, 3, 7, 4, 8, 15, 9, 2, v789, 16, v792) :|: 0 = 0
f_825(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v678, v682, v679, v683, v680, v684, v685, v686, v687, v791, v673, v692, v674, v681, v790, v695, v788, v689, v694, v691, 3, 7, 4, 8, 15, 9, 2, v789, 16, v792) -> f_827(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v678, v682, v679, v683, v680, v684, v685, v686, v687, v791, v681, v790, v695, v788, v689, v694, v691, 3, 7, 4, 8, 15, 2, 9, v789, 16, v792) :|: TRUE
f_827(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v678, v682, v679, v683, v680, v684, v685, v686, v687, v791, v681, v790, v695, v788, v689, v694, v691, 3, 7, 4, 8, 15, 2, 9, v789, 16, v792) -> f_829(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v678, v682, v679, v683, v680, v684, v685, v686, v687, v791, v681, v790, v695, v788, v689, v694, v691, 3, 7, 4, 8, 15, 2, 9, v789, 16, v792) :|: TRUE
f_829(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v678, v682, v679, v683, v680, v684, v685, v686, v687, v791, v681, v790, v695, v788, v689, v694, v691, 3, 7, 4, 8, 15, 2, 9, v789, 16, v792) -> f_782(v668, 0, v670, v671, v672, v675, v697, v696, 1, v718, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v694, v691, v718, v790, v695, v788, v681, 3, 7, 4, 8, 9, 2, v792, v789) :|: TRUE
f_782(v668, 0, v670, v671, v672, v673, v674, v675, 1, v677, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v696, v681, 3, 7, 4, 8, 9, 2, v688, v693) -> f_783(v668, 0, v670, v671, v672, v675, v674, 1, v673, v677, v678, v682, v679, v683, v680, v684, v685, v686, v687, v689, v690, v691, v692, v694, v695, v696, v681, 3, 7, 4, 8, 9, 2, v688, v693) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_783(v668:0, 0, v670:0, v671:0, v672:0, v675:0, v674:0, 1, v673:0, v677:0, v678:0, v682:0, v679:0, v683:0, v680:0, v684:0, v685:0, v686:0, v687:0, v689:0, v690:0, v691:0, v692:0, v694:0, v695:0, v696:0, v681:0, 3, 7, 4, 8, 9, 2, v688:0, 1 + v789:0) -> f_783(v668:0, 0, v670:0, v671:0, v672:0, v696:0, 8 + v675:0, 1, v675:0, v718:0, v678:0, v682:0, v679:0, v683:0, v680:0, v684:0, v685:0, v686:0, v687:0, v689:0, v694:0, v691:0, v718:0, v790:0, v695:0, v788:0, v681:0, 3, 7, 4, 8, 9, 2, 1 + v688:0, v789:0) :|: v675:0 > 0 && v789:0 > 0 && v696:0 > 0 && v718:0 < 0 && v688:0 > -2
f_783(v668:0, 0, v670:0, v671:0, v672:0, v675:0, v674:0, 1, v673:0, v677:0, v678:0, v682:0, v679:0, v683:0, v680:0, v684:0, v685:0, v686:0, v687:0, v689:0, v690:0, v691:0, v692:0, v694:0, v695:0, v696:0, v681:0, 3, 7, 4, 8, 9, 2, v688:0, 1 + v789:0) -> f_783(v668:0, 0, v670:0, v671:0, v672:0, v696:0, 8 + v675:0, 1, v675:0, v718:0, v678:0, v682:0, v679:0, v683:0, v680:0, v684:0, v685:0, v686:0, v687:0, v689:0, v694:0, v691:0, v718:0, v790:0, v695:0, v788:0, v681:0, 3, 7, 4, 8, 9, 2, 1 + v688:0, v789:0) :|: v675:0 > 0 && v789:0 > 0 && v696:0 > 0 && v718:0 > 0 && v688:0 > -2
Filtered unneeded arguments:
   f_783(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35) -> f_783(x6, x26, x34, x35)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_783(v675:0, v696:0, v688:0, sum~cons_1~v789:0) -> f_783(v696:0, v788:0, 1 + v688:0, v789:0) :|: v789:0 > 0 && v675:0 > 0 && v688:0 > -2 && v696:0 > 0 && sum~cons_1~v789:0 = 1 + v789:0

----------------------------------------

(9)
Obligation:
Rules:
f_783(v675:0, v696:0, v688:0, sum~cons_1~v789:0) -> f_783(v696:0, v788:0, 1 + v688:0, v789:0) :|: v789:0 > 0 && v675:0 > 0 && v688:0 > -2 && v696:0 > 0 && sum~cons_1~v789:0 = 1 + v789:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_783(v675:0:0, v696:0:0, v688:0:0, sum~cons_1~v789:0:0) -> f_783(v696:0:0, v788:0:0, 1 + v688:0:0, v789:0:0) :|: v688:0:0 > -2 && v696:0:0 > 0 && v675:0:0 > 0 && v789:0:0 > 0 && sum~cons_1~v789:0:0 = 1 + v789:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_783 ] = f_783_4

The following rules are decreasing:
f_783(v675:0:0, v696:0:0, v688:0:0, sum~cons_1~v789:0:0) -> f_783(v696:0:0, v788:0:0, 1 + v688:0:0, v789:0:0) :|: v688:0:0 > -2 && v696:0:0 > 0 && v675:0:0 > 0 && v789:0:0 > 0 && sum~cons_1~v789:0:0 = 1 + v789:0:0

The following rules are bounded:
f_783(v675:0:0, v696:0:0, v688:0:0, sum~cons_1~v789:0:0) -> f_783(v696:0:0, v788:0:0, 1 + v688:0:0, v789:0:0) :|: v688:0:0 > -2 && v696:0:0 > 0 && v675:0:0 > 0 && v789:0:0 > 0 && sum~cons_1~v789:0:0 = 1 + v789:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_598(v258, v259, v260, v261, v262, 0, v270, 1, v266, v267, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 9) -> f_599(v258, v259, v260, v261, v262, 0, v270, 1, v266, v267, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 9) :|: 0 = 0
f_599(v258, v259, v260, v261, v262, 0, v270, 1, v266, v267, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 9) -> f_600(v258, v259, v260, v261, v262, 0, v270, 1, v266, v267, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 2, 9) :|: v270 < v258 && 2 <= v258
f_600(v258, v259, v260, v261, v262, 0, v270, 1, v266, v267, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 2, 9) -> f_602(v258, v259, v260, v261, v262, 0, v270, 1, v266, v267, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 2, 9) :|: 0 = 0
f_602(v258, v259, v260, v261, v262, 0, v270, 1, v266, v267, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 2, 9) -> f_604(v258, v259, v260, v261, v262, 0, v270, 1, v266, v267, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 2, 9) :|: TRUE
f_604(v258, v259, v260, v261, v262, 0, v270, 1, v266, v267, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 2, 9) -> f_606(v258, v259, v260, v261, v262, 0, v270, 1, v282, v266, v267, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v281, 3, 7, 4, 8, 15, 2, 9, 16) :|: v283 = 15 + v282 && v282 % 4 = 0 && 16 <= v283
f_606(v258, v259, v260, v261, v262, 0, v270, 1, v282, v266, v267, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v281, 3, 7, 4, 8, 15, 2, 9, 16) -> f_608(v258, v259, v260, v261, v262, 0, v270, 1, v282, v267, v266, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v281, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_608(v258, v259, v260, v261, v262, 0, v270, 1, v282, v267, v266, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v281, 3, 7, 4, 8, 15, 2, 9, 16) -> f_610(v258, v259, v260, v261, v262, 0, v270, 1, v282, v267, v266, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v281, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_610(v258, v259, v260, v261, v262, 0, v270, 1, v282, v267, v266, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v281, 3, 7, 4, 8, 15, 2, 9, 16) -> f_612(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v267, v281, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_612(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v267, v281, 3, 7, 4, 8, 15, 2, 9, 16) -> f_614(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v267, v281, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_614(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v267, v281, 3, 7, 4, 8, 15, 2, 9, 16) -> f_616(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v268, v266, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v267, v281, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_616(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v268, v266, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v267, v281, 3, 7, 4, 8, 15, 2, 9, 16) -> f_618(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v268, v266, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v267, v281, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_618(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v268, v266, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v267, v281, 3, 7, 4, 8, 15, 2, 9, 16) -> f_620(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v267, v281, v268, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_620(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v267, v281, v268, 3, 7, 4, 8, 15, 2, 9, 16) -> f_622(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v267, v281, v268, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_622(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v267, v281, v268, 3, 7, 4, 8, 15, 2, 9, 16) -> f_624(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v267, v281, v268, 3, 7, 4, 15, 8, 2, 16, 9) :|: v295 = 8 + v282 && 9 <= v295
f_624(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v283, v267, v281, v268, 3, 7, 4, 15, 8, 2, 16, 9) -> f_626(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, v297, 2, 9) :|: v297 = 1 + v270 && 2 <= v297
f_626(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, v297, 2, 9) -> f_628(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, v297, 2, 9) :|: 0 = 0
f_628(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, v297, 2, 9) -> f_630(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, v297, 2, 9) :|: TRUE
f_630(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, v297, 2, 9) -> f_632(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, v297, 2, 9) :|: TRUE
f_632(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, v297, 2, 9) -> f_634(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, v297, 2, 9) :|: 0 = 0
f_634(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, v297, 2, 9) -> f_636(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v297, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 2, 9) :|: v297 = 1 + v270
f_636(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v297, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 2, 9) -> f_638(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v297, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 2, 9) :|: TRUE
f_638(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v297, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 2, 9) -> f_640(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v297, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 2, 9) :|: TRUE
f_640(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v297, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 2, 9) -> f_597(v258, v259, v260, v261, v262, 0, v270, 1, v282, v286, v266, v295, v297, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 9) :|: TRUE
f_597(v258, v259, v260, v261, v262, 0, v264, 1, v266, v267, v268, v269, v270, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 9) -> f_598(v258, v259, v260, v261, v262, 0, v270, 1, v266, v267, v268, v269, v264, v271, v274, v272, v275, v273, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8, 9) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_598(v258:0, v259:0, v260:0, v261:0, v262:0, 0, v270:0, 1, v266:0, v267:0, v268:0, v269:0, v264:0, v271:0, v274:0, v272:0, v275:0, v273:0, v276:0, v277:0, v278:0, v279:0, v280:0, v281:0, 3, 7, 4, 8, 9) -> f_598(v258:0, v259:0, v260:0, v261:0, v262:0, 0, 1 + v270:0, 1, v282:0, v286:0, v266:0, 8 + v282:0, v270:0, v271:0, v274:0, v272:0, v275:0, v273:0, v276:0, v277:0, v278:0, v279:0, v280:0, v281:0, 3, 7, 4, 8, 9) :|: v258:0 > 1 && v270:0 < v258:0 && v282:0 % 4 = 0 && v282:0 > 0 && v270:0 > 0
Filtered unneeded arguments:
   f_598(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_598(x1, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_598(v258:0, v270:0) -> f_598(v258:0, 1 + v270:0) :|: v270:0 < v258:0 && v270:0 > 0 && v258:0 > 1

----------------------------------------

(16)
Obligation:
Rules:
f_598(v258:0, v270:0) -> f_598(v258:0, 1 + v270:0) :|: v270:0 < v258:0 && v270:0 > 0 && v258:0 > 1

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_598(v258:0:0, v270:0:0) -> f_598(v258:0:0, 1 + v270:0:0) :|: v270:0:0 < v258:0:0 && v270:0:0 > 0 && v258:0:0 > 1

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_598(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_598(v258:0:0, v270:0:0) -> f_598(v258:0:0, 1 + v270:0:0) :|: v270:0:0 < v258:0:0 && v270:0:0 > 0 && v258:0:0 > 1
The following rules are bounded:
f_598(v258:0:0, v270:0:0) -> f_598(v258:0:0, 1 + v270:0:0) :|: v270:0:0 < v258:0:0 && v270:0:0 > 0 && v258:0:0 > 1

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
