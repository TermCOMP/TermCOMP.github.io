YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/RRnDb.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 687 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 31 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/RRnDb.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/RRnDb.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		store 0, %4
		br %7
	7:
		%8 = load %2
		%9 = icmp sgt %8 1
		br %9, %10, %24
	10:
		%11 = load %2
		store %11, %3
		store 0, %5
		br %12
	12:
		%13 = load %3
		%14 = icmp sgt %13 1
		br %14, %15, %20
	15:
		%16 = load %3
		%17 = sub i32 %16, 2
		store %17, %3
		%18 = load %5
		%19 = add i32 %18, 1
		store %19, %5
		br %12
	20:
		%21 = load %3
		store %21, %2
		%22 = load %4
		%23 = add i32 %22, 1
		store %23, %4
		br %7
	24:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_259(v107, v108, v109, v110, v111, v112, 1, v115, v114, v116, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) -> f_260(v107, v108, v109, v110, v111, v112, 1, v115, v114, v116, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) :|: 1 < v115 && 4 <= v114
f_260(v107, v108, v109, v110, v111, v112, 1, v115, v114, v116, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) -> f_262(v107, v108, v109, v110, v111, v112, 1, v115, v114, v116, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) :|: 0 = 0
f_262(v107, v108, v109, v110, v111, v112, 1, v115, v114, v116, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) -> f_264(v107, v108, v109, v110, v111, v112, 1, v115, v114, v116, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) :|: TRUE
f_264(v107, v108, v109, v110, v111, v112, 1, v115, v114, v116, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) -> f_266(v107, v108, v109, v110, v111, v112, 1, v115, v116, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) :|: 0 = 0
f_266(v107, v108, v109, v110, v111, v112, 1, v115, v116, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) -> f_268(v107, v108, v109, v110, v111, v112, 1, v115, v124, v116, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) :|: 2 + v124 = v115 && 0 <= v124
f_268(v107, v108, v109, v110, v111, v112, 1, v115, v124, v116, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) -> f_270(v107, v108, v109, v110, v111, v112, 1, v115, v124, v116, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) :|: TRUE
f_270(v107, v108, v109, v110, v111, v112, 1, v115, v124, v116, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) -> f_272(v107, v108, v109, v110, v111, v112, 1, v115, v124, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) :|: 0 = 0
f_272(v107, v108, v109, v110, v111, v112, 1, v115, v124, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) -> f_274(v107, v108, v109, v110, v111, v112, 1, v115, v124, v117, v127, v118, v119, v120, v121, v122, 0, 3, 2, 4) :|: v127 = 1 + v117 && 2 <= v127
f_274(v107, v108, v109, v110, v111, v112, 1, v115, v124, v117, v127, v118, v119, v120, v121, v122, 0, 3, 2, 4) -> f_276(v107, v108, v109, v110, v111, v112, 1, v115, v124, v117, v127, v118, v119, v120, v121, v122, 0, 3, 2, 4) :|: TRUE
f_276(v107, v108, v109, v110, v111, v112, 1, v115, v124, v117, v127, v118, v119, v120, v121, v122, 0, 3, 2, 4) -> f_278(v107, v108, v109, v110, v111, v112, 1, v115, v124, v117, v127, v118, v119, v120, v121, v122, 0, 3, 2, 4) :|: TRUE
f_278(v107, v108, v109, v110, v111, v112, 1, v115, v124, v117, v127, v118, v119, v120, v121, v122, 0, 3, 2, 4) -> f_258(v107, v108, v109, v110, v111, v112, 1, v115, v124, v117, v127, v118, v119, v120, v121, v122, 0, 3, 2, 4) :|: TRUE
f_258(v107, v108, v109, v110, v111, v112, 1, v114, v115, v116, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) -> f_259(v107, v108, v109, v110, v111, v112, 1, v115, v114, v116, v117, v118, v119, v120, v121, v122, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_259(v107:0, v108:0, v109:0, v110:0, v111:0, v112:0, 1, 2 + v124:0, v114:0, v116:0, v117:0, v118:0, v119:0, v120:0, v121:0, v122:0, 0, 3, 2, 4) -> f_259(v107:0, v108:0, v109:0, v110:0, v111:0, v112:0, 1, v124:0, 2 + v124:0, v117:0, 1 + v117:0, v118:0, v119:0, v120:0, v121:0, v122:0, 0, 3, 2, 4) :|: v114:0 > 3 && v124:0 > -1 && v117:0 > 0
Filtered unneeded arguments:
   f_259(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_259(x8, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_259(sum~cons_2~v124:0, v114:0, v117:0) -> f_259(v124:0, 2 + v124:0, 1 + v117:0) :|: v124:0 > -1 && v117:0 > 0 && v114:0 > 3 && sum~cons_2~v124:0 = 2 + v124:0

----------------------------------------

(8)
Obligation:
Rules:
f_259(sum~cons_2~v124:0, v114:0, v117:0) -> f_259(v124:0, 2 + v124:0, 1 + v117:0) :|: v124:0 > -1 && v117:0 > 0 && v114:0 > 3 && sum~cons_2~v124:0 = 2 + v124:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_259(sum~cons_2~v124:0:0, v114:0:0, v117:0:0) -> f_259(v124:0:0, 2 + v124:0:0, 1 + v117:0:0) :|: v124:0:0 > -1 && v117:0:0 > 0 && v114:0:0 > 3 && sum~cons_2~v124:0:0 = 2 + v124:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_259(x, x1, x2)] = -2 + x + x2

The following rules are decreasing:
f_259(sum~cons_2~v124:0:0, v114:0:0, v117:0:0) -> f_259(v124:0:0, 2 + v124:0:0, 1 + v117:0:0) :|: v124:0:0 > -1 && v117:0:0 > 0 && v114:0:0 > 3 && sum~cons_2~v124:0:0 = 2 + v124:0:0
The following rules are bounded:
f_259(sum~cons_2~v124:0:0, v114:0:0, v117:0:0) -> f_259(v124:0:0, 2 + v124:0:0, 1 + v117:0:0) :|: v124:0:0 > -1 && v117:0:0 > 0 && v114:0:0 > 3 && sum~cons_2~v124:0:0 = 2 + v124:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
