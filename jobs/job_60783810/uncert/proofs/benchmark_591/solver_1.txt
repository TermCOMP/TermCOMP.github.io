YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/8MVrp.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 16 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 901 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 8 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 4 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/8MVrp.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/8MVrp.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "gcd" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = icmp sle %6 0
		br %7, %11, %8
	8:
		%9 = load %5
		%10 = icmp sle %9 0
		br %10, %11, %12
	11:
		store 0, %3
		br %34
	12:
		%13 = load %4
		%14 = load %5
		%15 = icmp eq %13 %14
		br %15, %16, %18
	16:
		%17 = load %4
		store %17, %3
		br %34
	18:
		%19 = load %4
		%20 = load %5
		%21 = icmp sgt %19 %20
		br %21, %22, %28
	22:
		%23 = load %4
		%24 = load %5
		%25 = sub i32 %23, %24
		%26 = load %5
		%27 = call i32 @gcd(i32 %25, i32 %26)
		store %27, %3
		br %34
	28:
		%29 = load %4
		%30 = load %5
		%31 = load %4
		%32 = sub i32 %30, %31
		%33 = call i32 @gcd(i32 %29, i32 %32)
		store %33, %3
		br %34
	34:
		%35 = load %3
		ret %35

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 52
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = load %2
		%7 = icmp sle %6 0
		br %7, %11, %8
	8:
		%9 = load %2
		%10 = icmp sgt %9 2147483647
		br %10, %11, %12
	11:
		store 0, %1
		br %35
	12:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%13 = call i32 @__VERIFIER_nondet_int()
		store %13, %3
		%14 = load %3
		%15 = icmp sle %14 0
		br %15, %19, %16
	16:
		%17 = load %3
		%18 = icmp sgt %17 2147483647
		br %18, %19, %20
	19:
		store 0, %1
		br %35
	20:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%21 = load %2
		%22 = load %3
		%23 = call i32 @gcd(i32 %21, i32 %22)
		store %23, %4
		%24 = load %4
		%25 = icmp slt %24 1
		br %25, %26, %34
	26:
		%27 = load %2
		%28 = icmp sgt %27 0
		br %28, %29, %34
	29:
		%30 = load %3
		%31 = icmp sgt %30 0
		br %31, %32, %34
	32:
		br %33
	33:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	34:
		store 0, %1
		br %35
	35:
		%36 = load %1
		ret %36


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 40 rulesP rules:
f_389(v89, v90, v91, v92, 3, 1, 4) -> f_390(v89, v90, v91, v93, v92, v94, 3, 1, 4) :|: 1 <= v93 && v94 = 3 + v93 && 4 <= v94
f_390(v89, v90, v91, v93, v92, v94, 3, 1, 4) -> f_391(v89, v90, v91, v93, v95, v92, v94, v96, 3, 1, 4) :|: 1 <= v95 && v96 = 3 + v95 && 4 <= v96
f_391(v89, v90, v91, v93, v95, v92, v94, v96, 3, 1, 4) -> f_392(v89, v90, v91, v93, v95, v92, v94, v96, 3, 1, 4) :|: TRUE
f_392(v89, v90, v91, v93, v95, v92, v94, v96, 3, 1, 4) -> f_393(v89, v90, v91, v93, v95, v92, v94, v96, 3, 1, 4) :|: TRUE
f_393(v89, v90, v91, v93, v95, v92, v94, v96, 3, 1, 4) -> f_394(v89, v90, v91, v93, v95, v92, v94, v96, 3, 1, 4) :|: TRUE
f_394(v89, v90, v91, v93, v95, v92, v94, v96, 3, 1, 4) -> f_395(v89, v90, v91, v93, v95, v92, v94, v96, 3, 1, 4) :|: TRUE
f_395(v89, v90, v91, v93, v95, v92, v94, v96, 3, 1, 4) -> f_396(v89, v90, v91, v93, v95, v92, v94, v96, 3, 1, 4) :|: 0 = 0
f_396(v89, v90, v91, v93, v95, v92, v94, v96, 3, 1, 4) -> f_397(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) :|: 0 = 0
f_397(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) -> f_398(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) :|: TRUE
f_398(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) -> f_399(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) :|: 0 = 0
f_399(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) -> f_400(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) :|: 0 = 0
f_400(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) -> f_401(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) :|: TRUE
f_401(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) -> f_402(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) :|: 0 = 0
f_402(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) -> f_403(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) :|: 0 = 0
f_403(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) -> f_405(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) :|: v89 != v90
f_405(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) -> f_407(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) :|: 0 = 0
f_407(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) -> f_409(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) :|: TRUE
f_409(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) -> f_411(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) :|: 0 = 0
f_411(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) -> f_413(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) :|: 0 = 0
f_413(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) -> f_415(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 2, 1, 4) :|: v90 < v89 && 2 <= v89
f_413(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 4) -> f_416(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 2, 4) :|: v89 <= v90 && 2 <= v90
f_415(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 2, 1, 4) -> f_418(v89, v90, v91, v93, v95, 0, 1, v92, v94, v96, 3, 2, 4) :|: 0 = 0
f_418(v89, v90, v91, v93, v95, 0, 1, v92, v94, v96, 3, 2, 4) -> f_421(v89, v90, v91, v93, v95, 0, 1, v92, v94, v96, 3, 2, 4) :|: TRUE
f_421(v89, v90, v91, v93, v95, 0, 1, v92, v94, v96, 3, 2, 4) -> f_424(v89, v90, v91, v93, v95, 0, 1, v92, v94, v96, 3, 2, 4) :|: 0 = 0
f_424(v89, v90, v91, v93, v95, 0, 1, v92, v94, v96, 3, 2, 4) -> f_427(v89, v90, v91, v93, v95, 0, 1, v92, v94, v96, 3, 2, 4) :|: 0 = 0
f_427(v89, v90, v91, v93, v95, 0, 1, v92, v94, v96, 3, 2, 4) -> f_430(v89, v90, v91, v93, v95, 0, 1, v108, v92, v94, v96, 3, 2, 4) :|: v108 + v90 = v89 && 1 <= v108
f_430(v89, v90, v91, v93, v95, 0, 1, v108, v92, v94, v96, 3, 2, 4) -> f_433(v89, v90, v91, v93, v95, 0, 1, v108, v92, v94, v96, 3, 2, 4) :|: 0 = 0
f_433(v89, v90, v91, v93, v95, 0, 1, v108, v92, v94, v96, 3, 2, 4) -> f_436(v108, v90, v91, v92, v93, v94, v95, v96, v89, 0, 1, 3, 2, 4) :|: 0 = 0
f_436(v108, v90, v91, v92, v93, v94, v95, v96, v89, 0, 1, 3, 2, 4) -> f_439(v108, v90, v91, v92, v93, v94, v95, v96, v89, 3, 2, 1, 4) :|: TRUE
f_439(v108, v90, v91, v92, v93, v94, v95, v96, v89, 3, 2, 1, 4) -> f_387(v108, v90, 1) :|: 1 <= v108 && 1 <= v90
f_387(v89, v90, 1) -> f_389(v89, v90, v91, v92, 3, 1, 4) :|: 1 <= v91 && v92 = 3 + v91 && 4 <= v92
f_416(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 2, 4) -> f_419(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 2, 4) :|: 0 = 0
f_419(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 2, 4) -> f_422(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 2, 4) :|: TRUE
f_422(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 2, 4) -> f_425(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 2, 4) :|: 0 = 0
f_425(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 2, 4) -> f_428(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 2, 4) :|: 0 = 0
f_428(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 2, 4) -> f_431(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 2, 4) :|: 0 = 0
f_431(v89, v90, v91, v93, v95, 0, v92, v94, v96, 3, 1, 2, 4) -> f_434(v89, v90, v91, v93, v95, 0, v109, v92, v94, v96, 3, 1, 2, 4) :|: v109 + v89 = v90 && 1 <= v109
f_434(v89, v90, v91, v93, v95, 0, v109, v92, v94, v96, 3, 1, 2, 4) -> f_437(v89, v109, v91, v92, v93, v94, v95, v96, v90, 0, 3, 1, 2, 4) :|: 0 = 0
f_437(v89, v109, v91, v92, v93, v94, v95, v96, v90, 0, 3, 1, 2, 4) -> f_440(v89, v109, v91, v92, v93, v94, v95, v96, v90, 3, 1, 2, 4) :|: TRUE
f_440(v89, v109, v91, v92, v93, v94, v95, v96, v90, 3, 1, 2, 4) -> f_387(v89, v109, 1) :|: 1 <= v89 && 1 <= v109
Combined rules. Obtained 2 rulesP rules:
f_389(v89:0, v109:0 + v89:0, v91:0, v92:0, 3, 1, 4) -> f_389(v89:0, v109:0, v91:1, 3 + v91:1, 3, 1, 4) :|: v89:0 < v109:0 + v89:0 && v95:0 > 0 && v93:0 > 0 && v109:0 + v89:0 > 1 && v109:0 > 0 && v91:1 > 0 && v89:0 > 0
f_389(v108:0 + v90:0, v90:0, v91:0, v92:0, 3, 1, 4) -> f_389(v108:0, v90:0, v91:1, 3 + v91:1, 3, 1, 4) :|: v95:0 > 0 && v93:0 > 0 && v90:0 < v108:0 + v90:0 && v108:0 + v90:0 > 1 && v108:0 > 0 && v91:1 > 0 && v90:0 > 0
Filtered unneeded arguments:
   f_389(x1, x2, x3, x4, x5, x6, x7) -> f_389(x1, x2)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_389(v89:0, sum~v109:0~v89:0) -> f_389(v89:0, v109:0) :|: v109:0 + v89:0 > 1 && v89:0 < v109:0 + v89:0 && v89:0 > 0 && v109:0 > 0 && sum~v109:0~v89:0 = v109:0 + v89:0
f_389(sum~v108:0~v90:0, v90:0) -> f_389(v108:0, v90:0) :|: v108:0 + v90:0 > 1 && v90:0 < v108:0 + v90:0 && v90:0 > 0 && v108:0 > 0 && sum~v108:0~v90:0 = v108:0 + v90:0

----------------------------------------

(8)
Obligation:
Rules:
f_389(v89:0, sum~v109:0~v89:0) -> f_389(v89:0, v109:0) :|: v109:0 + v89:0 > 1 && v89:0 < v109:0 + v89:0 && v89:0 > 0 && v109:0 > 0 && sum~v109:0~v89:0 = v109:0 + v89:0
f_389(sum~v108:0~v90:0, v90:0) -> f_389(v108:0, v90:0) :|: v108:0 + v90:0 > 1 && v90:0 < v108:0 + v90:0 && v90:0 > 0 && v108:0 > 0 && sum~v108:0~v90:0 = v108:0 + v90:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_389(v89:0:0, sum~v109:0:0~v89:0:0) -> f_389(v89:0:0, v109:0:0) :|: v89:0:0 > 0 && v109:0:0 > 0 && v89:0:0 < v109:0:0 + v89:0:0 && v109:0:0 + v89:0:0 > 1 && sum~v109:0:0~v89:0:0 = v109:0:0 + v89:0:0
f_389(sum~v108:0:0~v90:0:0, v90:0:0) -> f_389(v108:0:0, v90:0:0) :|: v90:0:0 > 0 && v108:0:0 > 0 && v90:0:0 < v108:0:0 + v90:0:0 && v108:0:0 + v90:0:0 > 1 && sum~v108:0:0~v90:0:0 = v108:0:0 + v90:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_389 ] = f_389_1 + f_389_2

The following rules are decreasing:
f_389(v89:0:0, sum~v109:0:0~v89:0:0) -> f_389(v89:0:0, v109:0:0) :|: v89:0:0 > 0 && v109:0:0 > 0 && v89:0:0 < v109:0:0 + v89:0:0 && v109:0:0 + v89:0:0 > 1 && sum~v109:0:0~v89:0:0 = v109:0:0 + v89:0:0
f_389(sum~v108:0:0~v90:0:0, v90:0:0) -> f_389(v108:0:0, v90:0:0) :|: v90:0:0 > 0 && v108:0:0 > 0 && v90:0:0 < v108:0:0 + v90:0:0 && v108:0:0 + v90:0:0 > 1 && sum~v108:0:0~v90:0:0 = v108:0:0 + v90:0:0

The following rules are bounded:
f_389(v89:0:0, sum~v109:0:0~v89:0:0) -> f_389(v89:0:0, v109:0:0) :|: v89:0:0 > 0 && v109:0:0 > 0 && v89:0:0 < v109:0:0 + v89:0:0 && v109:0:0 + v89:0:0 > 1 && sum~v109:0:0~v89:0:0 = v109:0:0 + v89:0:0
f_389(sum~v108:0:0~v90:0:0, v90:0:0) -> f_389(v108:0:0, v90:0:0) :|: v90:0:0 > 0 && v108:0:0 > 0 && v90:0:0 < v108:0:0 + v90:0:0 && v108:0:0 + v90:0:0 > 1 && sum~v108:0:0~v90:0:0 = v108:0:0 + v90:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
