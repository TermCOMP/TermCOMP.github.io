YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/AgIHU.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 46 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 361 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 0 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 8 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 0 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/AgIHU.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/AgIHU.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store 0, %4
		store 0, %2
		br %5
	5:
		%6 = load %2
		%7 = icmp slt %6 100
		br %7, %8, %14
	8:
		%9 = load %4
		%10 = add i32 %9, 1
		store %10, %4
		br %11
	11:
		%12 = load %2
		%13 = add i32 %12, 1
		store %13, %2
		br %5
	14:
		store 5, %3
		br %15
	15:
		%16 = load %3
		%17 = icmp slt %16 21
		br %17, %18, %24
	18:
		%19 = load %4
		%20 = add i32 %19, 1
		store %20, %4
		br %21
	21:
		%22 = load %3
		%23 = add i32 %22, 3
		store %23, %3
		br %15
	24:
		%25 = load %4
		ret %25


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_283(v187, v188, v189, v190, 100, 0, 99, v198, 1, v196, v197, v194, v199, v200, v201, v202, 3, 5, 20, 101, 8, 23, 4) -> f_284(v187, v188, v189, v190, 100, 0, 99, v198, 1, v196, v197, v194, v199, v200, v201, v202, 3, 5, 17, 101, 8, 20, 4) :|: v198 < 21 && v194 <= 17
f_284(v187, v188, v189, v190, 100, 0, 99, v198, 1, v196, v197, v194, v199, v200, v201, v202, 3, 5, 17, 101, 8, 20, 4) -> f_286(v187, v188, v189, v190, 100, 0, 99, v198, 1, v196, v197, v194, v199, v200, v201, v202, 3, 5, 17, 101, 8, 20, 4) :|: 0 = 0
f_286(v187, v188, v189, v190, 100, 0, 99, v198, 1, v196, v197, v194, v199, v200, v201, v202, 3, 5, 17, 101, 8, 20, 4) -> f_288(v187, v188, v189, v190, 100, 0, 99, v198, 1, v196, v197, v194, v199, v200, v201, v202, 3, 5, 17, 101, 8, 20, 4) :|: TRUE
f_288(v187, v188, v189, v190, 100, 0, 99, v198, 1, v196, v197, v194, v199, v200, v201, v202, 3, 5, 17, 101, 8, 20, 4) -> f_290(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v194, v199, v200, v201, v202, 3, 5, 17, 101, 8, 20, 4) :|: 0 = 0
f_290(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v194, v199, v200, v201, v202, 3, 5, 17, 101, 8, 20, 4) -> f_292(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v210, v194, v199, v200, v201, v202, 3, 5, 17, 101, 8, 20, 4, 102) :|: v210 = 1 + v197 && 102 <= v210
f_292(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v210, v194, v199, v200, v201, v202, 3, 5, 17, 101, 8, 20, 4, 102) -> f_293(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v210, v194, v199, v200, v201, v202, 3, 5, 17, 101, 8, 20, 4, 102) :|: TRUE
f_293(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v210, v194, v199, v200, v201, v202, 3, 5, 17, 101, 8, 20, 4, 102) -> f_294(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v210, v194, v199, v200, v201, v202, 3, 5, 17, 101, 8, 20, 4, 102) :|: TRUE
f_294(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v210, v194, v199, v200, v201, v202, 3, 5, 17, 101, 8, 20, 4, 102) -> f_295(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v210, v199, v200, v201, v202, 3, 101, 8, 20, 4, 102) :|: 0 = 0
f_295(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v210, v199, v200, v201, v202, 3, 101, 8, 20, 4, 102) -> f_296(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v210, v212, v199, v200, v201, v202, 3, 101, 8, 20, 4, 102, 11, 23) :|: v212 = 3 + v198 && 11 <= v212 && v212 <= 23
f_296(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v210, v212, v199, v200, v201, v202, 3, 101, 8, 20, 4, 102, 11, 23) -> f_297(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v210, v212, v199, v200, v201, v202, 3, 101, 8, 20, 4, 102, 11, 23) :|: TRUE
f_297(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v210, v212, v199, v200, v201, v202, 3, 101, 8, 20, 4, 102, 11, 23) -> f_298(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v210, v212, v199, v200, v201, v202, 3, 101, 8, 20, 4, 102, 11, 23) :|: TRUE
f_298(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v210, v212, v199, v200, v201, v202, 3, 101, 8, 20, 4, 102, 11, 23) -> f_282(v187, v188, v189, v190, 100, 0, 99, v198, 1, v197, v210, v212, v199, v200, v201, v202, 3, 5, 20, 101, 8, 23, 4) :|: TRUE
f_282(v187, v188, v189, v190, 100, 0, 99, v194, 1, v196, v197, v198, v199, v200, v201, v202, 3, 5, 20, 101, 8, 23, 4) -> f_283(v187, v188, v189, v190, 100, 0, 99, v198, 1, v196, v197, v194, v199, v200, v201, v202, 3, 5, 20, 101, 8, 23, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_283(v187:0, v188:0, v189:0, v190:0, 100, 0, 99, v198:0, 1, v196:0, v197:0, v194:0, v199:0, v200:0, v201:0, v202:0, 3, 5, 20, 101, 8, 23, 4) -> f_283(v187:0, v188:0, v189:0, v190:0, 100, 0, 99, 3 + v198:0, 1, v197:0, 1 + v197:0, v198:0, v199:0, v200:0, v201:0, v202:0, 3, 5, 20, 101, 8, 23, 4) :|: v194:0 < 18 && v198:0 < 21 && v197:0 > 100 && v198:0 > 7
Filtered unneeded arguments:
   f_283(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_283(x8, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_283(v198:0, v197:0, v194:0) -> f_283(3 + v198:0, 1 + v197:0, v198:0) :|: v198:0 < 21 && v194:0 < 18 && v198:0 > 7 && v197:0 > 100

----------------------------------------

(9)
Obligation:
Rules:
f_283(v198:0, v197:0, v194:0) -> f_283(3 + v198:0, 1 + v197:0, v198:0) :|: v198:0 < 21 && v194:0 < 18 && v198:0 > 7 && v197:0 > 100

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_283(v198:0:0, v197:0:0, v194:0:0) -> f_283(3 + v198:0:0, 1 + v197:0:0, v198:0:0) :|: v198:0:0 > 7 && v197:0:0 > 100 && v194:0:0 < 18 && v198:0:0 < 21

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_283 ] = -1/3*f_283_1

The following rules are decreasing:
f_283(v198:0:0, v197:0:0, v194:0:0) -> f_283(3 + v198:0:0, 1 + v197:0:0, v198:0:0) :|: v198:0:0 > 7 && v197:0:0 > 100 && v194:0:0 < 18 && v198:0:0 < 21

The following rules are bounded:
f_283(v198:0:0, v197:0:0, v194:0:0) -> f_283(3 + v198:0:0, 1 + v197:0:0, v198:0:0) :|: v198:0:0 > 7 && v197:0:0 > 100 && v194:0:0 < 18 && v198:0:0 < 21


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_219(v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, v79, 0, 3, 99, 100, 4) -> f_220(v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, v79, 0, 3, 98, 99, 4) :|: v75 < 100 && v73 <= 98
f_220(v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, v79, 0, 3, 98, 99, 4) -> f_222(v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, v79, 0, 3, 98, 99, 4) :|: 0 = 0
f_222(v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, v79, 0, 3, 98, 99, 4) -> f_224(v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, v79, 0, 3, 98, 99, 4) :|: TRUE
f_224(v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, v79, 0, 3, 98, 99, 4) -> f_226(v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, v79, 0, 3, 98, 99, 4) :|: 0 = 0
f_226(v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, v79, 0, 3, 98, 99, 4) -> f_228(v69, v70, v71, v72, v75, 1, v81, v73, v76, v77, v78, v79, 0, 3, 98, 99, 4, 2, 100) :|: v81 = 1 + v75 && 2 <= v81 && v81 <= 100
f_228(v69, v70, v71, v72, v75, 1, v81, v73, v76, v77, v78, v79, 0, 3, 98, 99, 4, 2, 100) -> f_230(v69, v70, v71, v72, v75, 1, v81, v73, v76, v77, v78, v79, 0, 3, 98, 99, 4, 2, 100) :|: TRUE
f_230(v69, v70, v71, v72, v75, 1, v81, v73, v76, v77, v78, v79, 0, 3, 98, 99, 4, 2, 100) -> f_232(v69, v70, v71, v72, v75, 1, v81, v73, v76, v77, v78, v79, 0, 3, 98, 99, 4, 2, 100) :|: TRUE
f_232(v69, v70, v71, v72, v75, 1, v81, v73, v76, v77, v78, v79, 0, 3, 98, 99, 4, 2, 100) -> f_234(v69, v70, v71, v72, v75, 1, v81, v76, v77, v78, v79, 0, 3, 99, 4, 2, 100) :|: 0 = 0
f_234(v69, v70, v71, v72, v75, 1, v81, v76, v77, v78, v79, 0, 3, 99, 4, 2, 100) -> f_236(v69, v70, v71, v72, v75, 1, v81, v76, v77, v78, v79, 0, 3, 99, 4, 2, 100) :|: v81 = 1 + v75
f_236(v69, v70, v71, v72, v75, 1, v81, v76, v77, v78, v79, 0, 3, 99, 4, 2, 100) -> f_238(v69, v70, v71, v72, v75, 1, v81, v76, v77, v78, v79, 0, 3, 99, 4, 2, 100) :|: TRUE
f_238(v69, v70, v71, v72, v75, 1, v81, v76, v77, v78, v79, 0, 3, 99, 4, 2, 100) -> f_240(v69, v70, v71, v72, v75, 1, v81, v76, v77, v78, v79, 0, 3, 99, 4, 2, 100) :|: TRUE
f_240(v69, v70, v71, v72, v75, 1, v81, v76, v77, v78, v79, 0, 3, 99, 4, 2, 100) -> f_218(v69, v70, v71, v72, v75, 1, v81, v76, v77, v78, v79, 0, 3, 99, 100, 4) :|: TRUE
f_218(v69, v70, v71, v72, v73, 1, v75, v76, v77, v78, v79, 0, 3, 99, 100, 4) -> f_219(v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, v79, 0, 3, 99, 100, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_219(v69:0, v70:0, v71:0, v72:0, v75:0, 1, v73:0, v76:0, v77:0, v78:0, v79:0, 0, 3, 99, 100, 4) -> f_219(v69:0, v70:0, v71:0, v72:0, 1 + v75:0, 1, v75:0, v76:0, v77:0, v78:0, v79:0, 0, 3, 99, 100, 4) :|: v73:0 < 99 && v75:0 < 100 && v75:0 > 0
Filtered unneeded arguments:
   f_219(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_219(x5, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_219(v75:0, v73:0) -> f_219(1 + v75:0, v75:0) :|: v75:0 < 100 && v75:0 > 0 && v73:0 < 99

----------------------------------------

(16)
Obligation:
Rules:
f_219(v75:0, v73:0) -> f_219(1 + v75:0, v75:0) :|: v75:0 < 100 && v75:0 > 0 && v73:0 < 99

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_219(v75:0:0, v73:0:0) -> f_219(1 + v75:0:0, v75:0:0) :|: v75:0:0 < 100 && v75:0:0 > 0 && v73:0:0 < 99

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_219 ] = -1*f_219_1

The following rules are decreasing:
f_219(v75:0:0, v73:0:0) -> f_219(1 + v75:0:0, v75:0:0) :|: v75:0:0 < 100 && v75:0:0 > 0 && v73:0:0 < 99

The following rules are bounded:
f_219(v75:0:0, v73:0:0) -> f_219(1 + v75:0:0, v75:0:0) :|: v75:0:0 < 100 && v75:0:0 > 0 && v73:0:0 < 99


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
