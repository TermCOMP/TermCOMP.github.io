YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Pqb13.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 21 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 877 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 7 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Pqb13.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Pqb13.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "gcd" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = icmp sle %6 0
		br %7, %11, %8
	8:
		%9 = load %5
		%10 = icmp sle %9 0
		br %10, %11, %12
	11:
		store 0, %3
		br %34
	12:
		%13 = load %4
		%14 = load %5
		%15 = icmp eq %13 %14
		br %15, %16, %18
	16:
		%17 = load %4
		store %17, %3
		br %34
	18:
		%19 = load %4
		%20 = load %5
		%21 = icmp sgt %19 %20
		br %21, %22, %28
	22:
		%23 = load %4
		%24 = load %5
		%25 = sub i32 %23, %24
		%26 = load %5
		%27 = call i32 @gcd(i32 %25, i32 %26)
		store %27, %3
		br %34
	28:
		%29 = load %4
		%30 = load %5
		%31 = load %4
		%32 = sub i32 %30, %31
		%33 = call i32 @gcd(i32 %29, i32 %32)
		store %33, %3
		br %34
	34:
		%35 = load %3
		ret %35

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 52
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = load %2
		%7 = icmp sle %6 0
		br %7, %8, %9
	8:
		store 0, %1
		br %29
	9:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%10 = call i32 @__VERIFIER_nondet_int()
		store %10, %3
		%11 = load %3
		%12 = icmp sle %11 0
		br %12, %13, %14
	13:
		store 0, %1
		br %29
	14:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%15 = load %2
		%16 = load %3
		%17 = call i32 @gcd(i32 %15, i32 %16)
		store %17, %4
		%18 = load %4
		%19 = icmp slt %18 1
		br %19, %20, %28
	20:
		%21 = load %2
		%22 = icmp sgt %21 0
		br %22, %23, %28
	23:
		%24 = load %3
		%25 = icmp sgt %24 0
		br %25, %26, %28
	26:
		br %27
	27:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	28:
		store 0, %1
		br %29
	29:
		%30 = load %1
		ret %30


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 40 rulesP rules:
f_355(v58, v59, v60, v61, 3, 1, 4) -> f_356(v58, v59, v60, v62, v61, v63, 3, 1, 4) :|: 1 <= v62 && v63 = 3 + v62 && 4 <= v63
f_356(v58, v59, v60, v62, v61, v63, 3, 1, 4) -> f_357(v58, v59, v60, v62, v64, v61, v63, v65, 3, 1, 4) :|: 1 <= v64 && v65 = 3 + v64 && 4 <= v65
f_357(v58, v59, v60, v62, v64, v61, v63, v65, 3, 1, 4) -> f_358(v58, v59, v60, v62, v64, v61, v63, v65, 3, 1, 4) :|: TRUE
f_358(v58, v59, v60, v62, v64, v61, v63, v65, 3, 1, 4) -> f_359(v58, v59, v60, v62, v64, v61, v63, v65, 3, 1, 4) :|: TRUE
f_359(v58, v59, v60, v62, v64, v61, v63, v65, 3, 1, 4) -> f_360(v58, v59, v60, v62, v64, v61, v63, v65, 3, 1, 4) :|: TRUE
f_360(v58, v59, v60, v62, v64, v61, v63, v65, 3, 1, 4) -> f_361(v58, v59, v60, v62, v64, v61, v63, v65, 3, 1, 4) :|: TRUE
f_361(v58, v59, v60, v62, v64, v61, v63, v65, 3, 1, 4) -> f_362(v58, v59, v60, v62, v64, v61, v63, v65, 3, 1, 4) :|: 0 = 0
f_362(v58, v59, v60, v62, v64, v61, v63, v65, 3, 1, 4) -> f_363(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) :|: 0 = 0
f_363(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) -> f_364(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) :|: TRUE
f_364(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) -> f_365(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) :|: 0 = 0
f_365(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) -> f_366(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) :|: 0 = 0
f_366(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) -> f_367(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) :|: TRUE
f_367(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) -> f_368(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) :|: 0 = 0
f_368(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) -> f_369(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) :|: 0 = 0
f_369(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) -> f_371(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) :|: v58 != v59
f_371(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) -> f_373(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) :|: 0 = 0
f_373(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) -> f_375(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) :|: TRUE
f_375(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) -> f_377(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) :|: 0 = 0
f_377(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) -> f_379(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) :|: 0 = 0
f_379(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) -> f_381(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 2, 1, 4) :|: v59 < v58 && 2 <= v58
f_379(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 4) -> f_382(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 2, 4) :|: v58 <= v59 && 2 <= v59
f_381(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 2, 1, 4) -> f_384(v58, v59, v60, v62, v64, 0, 1, v61, v63, v65, 3, 2, 4) :|: 0 = 0
f_384(v58, v59, v60, v62, v64, 0, 1, v61, v63, v65, 3, 2, 4) -> f_387(v58, v59, v60, v62, v64, 0, 1, v61, v63, v65, 3, 2, 4) :|: TRUE
f_387(v58, v59, v60, v62, v64, 0, 1, v61, v63, v65, 3, 2, 4) -> f_390(v58, v59, v60, v62, v64, 0, 1, v61, v63, v65, 3, 2, 4) :|: 0 = 0
f_390(v58, v59, v60, v62, v64, 0, 1, v61, v63, v65, 3, 2, 4) -> f_393(v58, v59, v60, v62, v64, 0, 1, v61, v63, v65, 3, 2, 4) :|: 0 = 0
f_393(v58, v59, v60, v62, v64, 0, 1, v61, v63, v65, 3, 2, 4) -> f_396(v58, v59, v60, v62, v64, 0, 1, v77, v61, v63, v65, 3, 2, 4) :|: v77 + v59 = v58 && 1 <= v77
f_396(v58, v59, v60, v62, v64, 0, 1, v77, v61, v63, v65, 3, 2, 4) -> f_399(v58, v59, v60, v62, v64, 0, 1, v77, v61, v63, v65, 3, 2, 4) :|: 0 = 0
f_399(v58, v59, v60, v62, v64, 0, 1, v77, v61, v63, v65, 3, 2, 4) -> f_402(v77, v59, v60, v61, v62, v63, v64, v65, v58, 0, 1, 3, 2, 4) :|: 0 = 0
f_402(v77, v59, v60, v61, v62, v63, v64, v65, v58, 0, 1, 3, 2, 4) -> f_405(v77, v59, v60, v61, v62, v63, v64, v65, v58, 3, 2, 1, 4) :|: TRUE
f_405(v77, v59, v60, v61, v62, v63, v64, v65, v58, 3, 2, 1, 4) -> f_353(v77, v59, 1) :|: 1 <= v77 && 1 <= v59
f_353(v58, v59, 1) -> f_355(v58, v59, v60, v61, 3, 1, 4) :|: 1 <= v60 && v61 = 3 + v60 && 4 <= v61
f_382(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 2, 4) -> f_385(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 2, 4) :|: 0 = 0
f_385(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 2, 4) -> f_388(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 2, 4) :|: TRUE
f_388(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 2, 4) -> f_391(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 2, 4) :|: 0 = 0
f_391(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 2, 4) -> f_394(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 2, 4) :|: 0 = 0
f_394(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 2, 4) -> f_397(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 2, 4) :|: 0 = 0
f_397(v58, v59, v60, v62, v64, 0, v61, v63, v65, 3, 1, 2, 4) -> f_400(v58, v59, v60, v62, v64, 0, v78, v61, v63, v65, 3, 1, 2, 4) :|: v78 + v58 = v59 && 1 <= v78
f_400(v58, v59, v60, v62, v64, 0, v78, v61, v63, v65, 3, 1, 2, 4) -> f_403(v58, v78, v60, v61, v62, v63, v64, v65, v59, 0, 3, 1, 2, 4) :|: 0 = 0
f_403(v58, v78, v60, v61, v62, v63, v64, v65, v59, 0, 3, 1, 2, 4) -> f_406(v58, v78, v60, v61, v62, v63, v64, v65, v59, 3, 1, 2, 4) :|: TRUE
f_406(v58, v78, v60, v61, v62, v63, v64, v65, v59, 3, 1, 2, 4) -> f_353(v58, v78, 1) :|: 1 <= v58 && 1 <= v78
Combined rules. Obtained 2 rulesP rules:
f_355(v58:0, v78:0 + v58:0, v60:0, v61:0, 3, 1, 4) -> f_355(v58:0, v78:0, v60:1, 3 + v60:1, 3, 1, 4) :|: v78:0 + v58:0 > v58:0 && v64:0 > 0 && v62:0 > 0 && v78:0 + v58:0 > 1 && v78:0 > 0 && v60:1 > 0 && v58:0 > 0
f_355(v77:0 + v59:0, v59:0, v60:0, v61:0, 3, 1, 4) -> f_355(v77:0, v59:0, v60:1, 3 + v60:1, 3, 1, 4) :|: v64:0 > 0 && v62:0 > 0 && v77:0 + v59:0 > v59:0 && v77:0 + v59:0 > 1 && v77:0 > 0 && v60:1 > 0 && v59:0 > 0
Filtered unneeded arguments:
   f_355(x1, x2, x3, x4, x5, x6, x7) -> f_355(x1, x2)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_355(v58:0, sum~v78:0~v58:0) -> f_355(v58:0, v78:0) :|: v78:0 + v58:0 > 1 && v78:0 + v58:0 > v58:0 && v58:0 > 0 && v78:0 > 0 && sum~v78:0~v58:0 = v78:0 + v58:0
f_355(sum~v77:0~v59:0, v59:0) -> f_355(v77:0, v59:0) :|: v77:0 + v59:0 > 1 && v77:0 + v59:0 > v59:0 && v59:0 > 0 && v77:0 > 0 && sum~v77:0~v59:0 = v77:0 + v59:0

----------------------------------------

(8)
Obligation:
Rules:
f_355(v58:0, sum~v78:0~v58:0) -> f_355(v58:0, v78:0) :|: v78:0 + v58:0 > 1 && v78:0 + v58:0 > v58:0 && v58:0 > 0 && v78:0 > 0 && sum~v78:0~v58:0 = v78:0 + v58:0
f_355(sum~v77:0~v59:0, v59:0) -> f_355(v77:0, v59:0) :|: v77:0 + v59:0 > 1 && v77:0 + v59:0 > v59:0 && v59:0 > 0 && v77:0 > 0 && sum~v77:0~v59:0 = v77:0 + v59:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_355(sum~v77:0:0~v59:0:0, v59:0:0) -> f_355(v77:0:0, v59:0:0) :|: v59:0:0 > 0 && v77:0:0 > 0 && v77:0:0 + v59:0:0 > v59:0:0 && v77:0:0 + v59:0:0 > 1 && sum~v77:0:0~v59:0:0 = v77:0:0 + v59:0:0
f_355(v58:0:0, sum~v78:0:0~v58:0:0) -> f_355(v58:0:0, v78:0:0) :|: v58:0:0 > 0 && v78:0:0 > 0 && v78:0:0 + v58:0:0 > v58:0:0 && v78:0:0 + v58:0:0 > 1 && sum~v78:0:0~v58:0:0 = v78:0:0 + v58:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_355 ] = f_355_2 + f_355_1

The following rules are decreasing:
f_355(sum~v77:0:0~v59:0:0, v59:0:0) -> f_355(v77:0:0, v59:0:0) :|: v59:0:0 > 0 && v77:0:0 > 0 && v77:0:0 + v59:0:0 > v59:0:0 && v77:0:0 + v59:0:0 > 1 && sum~v77:0:0~v59:0:0 = v77:0:0 + v59:0:0
f_355(v58:0:0, sum~v78:0:0~v58:0:0) -> f_355(v58:0:0, v78:0:0) :|: v58:0:0 > 0 && v78:0:0 > 0 && v78:0:0 + v58:0:0 > v58:0:0 && v78:0:0 + v58:0:0 > 1 && sum~v78:0:0~v58:0:0 = v78:0:0 + v58:0:0

The following rules are bounded:
f_355(sum~v77:0:0~v59:0:0, v59:0:0) -> f_355(v77:0:0, v59:0:0) :|: v59:0:0 > 0 && v77:0:0 > 0 && v77:0:0 + v59:0:0 > v59:0:0 && v77:0:0 + v59:0:0 > 1 && sum~v77:0:0~v59:0:0 = v77:0:0 + v59:0:0
f_355(v58:0:0, sum~v78:0:0~v58:0:0) -> f_355(v58:0:0, v78:0:0) :|: v58:0:0 > 0 && v78:0:0 > 0 && v78:0:0 + v58:0:0 > v58:0:0 && v78:0:0 + v58:0:0 > 1 && sum~v78:0:0~v58:0:0 = v78:0:0 + v58:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
