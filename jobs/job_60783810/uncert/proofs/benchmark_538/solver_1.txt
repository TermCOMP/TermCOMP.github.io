YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zYOiH.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 489 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 7 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 14 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/zYOiH.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/zYOiH.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %2
		store 0, %3
		br %4
	4:
		%5 = load %2
		%6 = icmp slt %5 20
		br %6, %7, %17
	7:
		%8 = load %2
		%9 = add i32 %8, 1
		store %9, %2
		%10 = load %2
		%11 = icmp sle %10 10
		br %11, %12, %13
	12:
		br %16
	13:
		%14 = load %3
		%15 = add i32 %14, 1
		store %15, %3
		br %16
	16:
		br %4
	17:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_271(v232, v233, v234, v235, 1, v237, 0, v239, v240, v241, v242, v243, 3, 10, 19, 11, 20, 9, 4) -> f_272(v232, v233, v234, v237, 1, v235, 0, v239, v240, v241, v242, v243, 3, 10, 19, 11, 20, 9, 4) :|: 0 = 0
f_272(v232, v233, v234, v237, 1, v235, 0, v239, v240, v241, v242, v243, 3, 10, 19, 11, 20, 9, 4) -> f_273(v232, v233, v234, v237, 1, v235, 0, v239, v240, v241, v242, v243, 3, 10, 18, 11, 19, 8, 9, 4) :|: v237 < 20 && v235 <= 18 && v239 <= 8 && v240 <= 9
f_273(v232, v233, v234, v237, 1, v235, 0, v239, v240, v241, v242, v243, 3, 10, 18, 11, 19, 8, 9, 4) -> f_275(v232, v233, v234, v237, 1, v235, 0, v239, v240, v241, v242, v243, 3, 10, 18, 11, 19, 8, 9, 4) :|: 0 = 0
f_275(v232, v233, v234, v237, 1, v235, 0, v239, v240, v241, v242, v243, 3, 10, 18, 11, 19, 8, 9, 4) -> f_277(v232, v233, v234, v237, 1, v235, 0, v239, v240, v241, v242, v243, 3, 10, 18, 11, 19, 8, 9, 4) :|: TRUE
f_277(v232, v233, v234, v237, 1, v235, 0, v239, v240, v241, v242, v243, 3, 10, 18, 11, 19, 8, 9, 4) -> f_279(v232, v233, v234, v237, 1, 0, v239, v240, v241, v242, v243, 3, 11, 19, 8, 9, 4) :|: 0 = 0
f_279(v232, v233, v234, v237, 1, 0, v239, v240, v241, v242, v243, 3, 11, 19, 8, 9, 4) -> f_280(v232, v233, v234, v237, 1, v250, 0, v239, v240, v241, v242, v243, 3, 11, 19, 8, 9, 4, 12, 20) :|: v250 = 1 + v237 && 12 <= v250 && v250 <= 20
f_280(v232, v233, v234, v237, 1, v250, 0, v239, v240, v241, v242, v243, 3, 11, 19, 8, 9, 4, 12, 20) -> f_281(v232, v233, v234, v237, 1, v250, 0, v239, v240, v241, v242, v243, 3, 11, 19, 8, 9, 4, 12, 20) :|: TRUE
f_281(v232, v233, v234, v237, 1, v250, 0, v239, v240, v241, v242, v243, 3, 11, 19, 8, 9, 4, 12, 20) -> f_282(v232, v233, v234, v237, 1, v250, 0, v239, v240, v241, v242, v243, 3, 11, 19, 8, 9, 4, 12, 20) :|: 0 = 0
f_282(v232, v233, v234, v237, 1, v250, 0, v239, v240, v241, v242, v243, 3, 11, 19, 8, 9, 4, 12, 20) -> f_283(v232, v233, v234, v237, 1, v250, 0, v239, v240, v241, v242, v243, 3, 11, 19, 8, 9, 4, 12, 20) :|: 0 = 0
f_283(v232, v233, v234, v237, 1, v250, 0, v239, v240, v241, v242, v243, 3, 11, 19, 8, 9, 4, 12, 20) -> f_284(v232, v233, v234, v237, 1, v250, 0, v239, v240, v241, v242, v243, 3, 11, 19, 8, 9, 4, 12, 20) :|: TRUE
f_284(v232, v233, v234, v237, 1, v250, 0, v239, v240, v241, v242, v243, 3, 11, 19, 8, 9, 4, 12, 20) -> f_285(v232, v233, v234, v237, 1, v250, 0, v240, v241, v242, v243, 3, 10, 11, 19, 9, 4, 12, 20) :|: 0 = 0
f_285(v232, v233, v234, v237, 1, v250, 0, v240, v241, v242, v243, 3, 10, 11, 19, 9, 4, 12, 20) -> f_286(v232, v233, v234, v237, 1, v250, 0, v240, v255, v241, v242, v243, 3, 10, 11, 19, 9, 4, 12, 20, 2) :|: v255 = 1 + v240 && 2 <= v255 && v255 <= 10
f_286(v232, v233, v234, v237, 1, v250, 0, v240, v255, v241, v242, v243, 3, 10, 11, 19, 9, 4, 12, 20, 2) -> f_287(v232, v233, v234, v237, 1, v250, 0, v240, v255, v241, v242, v243, 3, 10, 11, 19, 9, 4, 12, 20, 2) :|: TRUE
f_287(v232, v233, v234, v237, 1, v250, 0, v240, v255, v241, v242, v243, 3, 10, 11, 19, 9, 4, 12, 20, 2) -> f_288(v232, v233, v234, v237, 1, v250, 0, v240, v255, v241, v242, v243, 3, 10, 11, 19, 9, 4, 12, 20, 2) :|: TRUE
f_288(v232, v233, v234, v237, 1, v250, 0, v240, v255, v241, v242, v243, 3, 10, 11, 19, 9, 4, 12, 20, 2) -> f_270(v232, v233, v234, v237, 1, v250, 0, v240, v255, v241, v242, v243, 3, 10, 19, 11, 20, 9, 4) :|: TRUE
f_270(v232, v233, v234, v235, 1, v237, 0, v239, v240, v241, v242, v243, 3, 10, 19, 11, 20, 9, 4) -> f_271(v232, v233, v234, v235, 1, v237, 0, v239, v240, v241, v242, v243, 3, 10, 19, 11, 20, 9, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_271(v232:0, v233:0, v234:0, v235:0, 1, v237:0, 0, v239:0, v240:0, v241:0, v242:0, v243:0, 3, 10, 19, 11, 20, 9, 4) -> f_271(v232:0, v233:0, v234:0, v237:0, 1, 1 + v237:0, 0, v240:0, 1 + v240:0, v241:0, v242:0, v243:0, 3, 10, 19, 11, 20, 9, 4) :|: v235:0 < 19 && v237:0 < 20 && v239:0 < 9 && v240:0 < 10 && v237:0 > 10 && v240:0 > 0
Filtered unneeded arguments:
   f_271(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_271(x4, x6, x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_271(v235:0, v237:0, v239:0, v240:0) -> f_271(v237:0, 1 + v237:0, v240:0, 1 + v240:0) :|: v237:0 < 20 && v235:0 < 19 && v239:0 < 9 && v240:0 < 10 && v240:0 > 0 && v237:0 > 10

----------------------------------------

(9)
Obligation:
Rules:
f_271(v235:0, v237:0, v239:0, v240:0) -> f_271(v237:0, 1 + v237:0, v240:0, 1 + v240:0) :|: v237:0 < 20 && v235:0 < 19 && v239:0 < 9 && v240:0 < 10 && v240:0 > 0 && v237:0 > 10

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_271(v235:0:0, v237:0:0, v239:0:0, v240:0:0) -> f_271(v237:0:0, 1 + v237:0:0, v240:0:0, 1 + v240:0:0) :|: v240:0:0 > 0 && v237:0:0 > 10 && v240:0:0 < 10 && v239:0:0 < 9 && v235:0:0 < 19 && v237:0:0 < 20

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_271 ] = -1*f_271_2

The following rules are decreasing:
f_271(v235:0:0, v237:0:0, v239:0:0, v240:0:0) -> f_271(v237:0:0, 1 + v237:0:0, v240:0:0, 1 + v240:0:0) :|: v240:0:0 > 0 && v237:0:0 > 10 && v240:0:0 < 10 && v239:0:0 < 9 && v235:0:0 < 19 && v237:0:0 < 20

The following rules are bounded:
f_271(v235:0:0, v237:0:0, v239:0:0, v240:0:0) -> f_271(v237:0:0, 1 + v237:0:0, v240:0:0, 1 + v240:0:0) :|: v240:0:0 > 0 && v237:0:0 > 10 && v240:0:0 < 10 && v239:0:0 < 9 && v235:0:0 < 19 && v237:0:0 < 20


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_169(v55, v56, v57, v60, 1, v58, v61, v62, v63, 0, 3, 9, 10, 4) -> f_170(v55, v56, v57, v60, 1, v58, v61, v62, v63, 0, 3, 9, 10, 4) :|: 0 = 0
f_170(v55, v56, v57, v60, 1, v58, v61, v62, v63, 0, 3, 9, 10, 4) -> f_171(v55, v56, v57, v60, 1, v58, v61, v62, v63, 0, 3, 9, 10, 4) :|: TRUE
f_171(v55, v56, v57, v60, 1, v58, v61, v62, v63, 0, 3, 9, 10, 4) -> f_172(v55, v56, v57, v60, 1, v61, v62, v63, 0, 3, 10, 4) :|: 0 = 0
f_172(v55, v56, v57, v60, 1, v61, v62, v63, 0, 3, 10, 4) -> f_173(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 10, 4, 2, 11) :|: v65 = 1 + v60 && 2 <= v65 && v65 <= 11
f_173(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 10, 4, 2, 11) -> f_174(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 10, 4, 2, 11) :|: TRUE
f_174(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 10, 4, 2, 11) -> f_175(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 10, 4, 2, 11) :|: 0 = 0
f_175(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 10, 4, 2, 11) -> f_176(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) :|: v65 <= 10 && v60 <= 9
f_176(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) -> f_178(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) :|: 0 = 0
f_178(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) -> f_180(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) :|: TRUE
f_180(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) -> f_182(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) :|: TRUE
f_182(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) -> f_184(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) :|: TRUE
f_184(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) -> f_168(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 10, 4) :|: TRUE
f_168(v55, v56, v57, v58, 1, v60, v61, v62, v63, 0, 3, 9, 10, 4) -> f_169(v55, v56, v57, v60, 1, v58, v61, v62, v63, 0, 3, 9, 10, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_169(v55:0, v56:0, v57:0, v60:0, 1, v58:0, v61:0, v62:0, v63:0, 0, 3, 9, 10, 4) -> f_169(v55:0, v56:0, v57:0, 1 + v60:0, 1, v60:0, v61:0, v62:0, v63:0, 0, 3, 9, 10, 4) :|: v60:0 > 0 && v60:0 < 11 && v60:0 < 10
Filtered unneeded arguments:
   f_169(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_169(x4)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_169(v60:0) -> f_169(1 + v60:0) :|: v60:0 < 11 && v60:0 < 10 && v60:0 > 0

----------------------------------------

(16)
Obligation:
Rules:
f_169(v60:0) -> f_169(1 + v60:0) :|: v60:0 < 11 && v60:0 < 10 && v60:0 > 0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_169(v60:0:0) -> f_169(1 + v60:0:0) :|: v60:0:0 < 11 && v60:0:0 < 10 && v60:0:0 > 0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_169(x)] = 9 - x

The following rules are decreasing:
f_169(v60:0:0) -> f_169(1 + v60:0:0) :|: v60:0:0 < 11 && v60:0:0 < 10 && v60:0:0 > 0
The following rules are bounded:
f_169(v60:0:0) -> f_169(1 + v60:0:0) :|: v60:0:0 < 11 && v60:0:0 < 10 && v60:0:0 > 0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
