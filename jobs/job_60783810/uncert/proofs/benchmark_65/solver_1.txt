YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/BDASk.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 53 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 763 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 62 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 13 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/BDASk.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/BDASk.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca *i32, align 8
		%8 = alloca *i32, align 8
		%9 = alloca *i32, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %8)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %9)
		%14 = alloca i8, numElementsLit: 4, align 16
		%15 = bitcast *i8 %14 to *i32
		store %15, %9
		store 1, %6
		%16 = load %4
		%17 = load %7
		store %16, %17
		%18 = load %5
		%19 = load %8
		store %18, %19
		%20 = load %6
		%21 = load %9
		store %20, %21
		br %22
	22:
		%23 = load %8
		%24 = load %23
		%25 = icmp sgt %24 0
		br %25, %26, %37
	26:
		%27 = load %9
		%28 = load %27
		%29 = load %7
		%30 = load %29
		%31 = mul i32 %28, %30
		%32 = load %9
		store %31, %32
		%33 = load %8
		%34 = load %33
		%35 = sub i32 %34, 1
		%36 = load %8
		store %35, %36
		br %22
	37:
		%38 = load %9
		%39 = load %38
		ret %39

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 60
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @test_fun(i32 %2, i32 %3, i32 %4)
		ret %5


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_307(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 4, 8) -> f_308(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v86, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 4, 8) :|: 0 = 0
f_308(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v86, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 4, 8) -> f_309(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v86, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: 0 < v88 && 2 <= v85 && 2 <= v73
f_309(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v86, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_311(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v86, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_311(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v86, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_313(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v86, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: TRUE
f_313(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v86, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_315(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v86, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_315(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v86, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_317(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_317(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_319(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_319(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_321(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_321(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_322(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: v101 = v87 * v72
f_322(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_323(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_323(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_324(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: TRUE
f_324(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_325(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_325(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v85, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_326(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_326(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_327(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v103, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: 1 + v103 = v88 && 0 <= v103
f_327(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v103, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_328(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v103, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_328(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v103, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_329(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v103, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: TRUE
f_329(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v103, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_330(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v103, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) :|: TRUE
f_330(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v103, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 2, 4, 8) -> f_306(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v88, v87, v101, v103, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 4, 8) :|: TRUE
f_306(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 4, 8) -> f_307(v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, 1, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_307(v72:0, v73:0, v74:0, v75:0, v76:0, v77:0, v78:0, v79:0, v80:0, v81:0, v82:0, v83:0, 1, v85:0, v86:0, v87:0, 1 + v103:0, v89:0, v90:0, v91:0, v92:0, v93:0, v94:0, v95:0, v96:0, v97:0, v98:0, v99:0, 0, 3, 7, 4, 8) -> f_307(v72:0, v73:0, v74:0, v75:0, v76:0, v77:0, v78:0, v79:0, v80:0, v81:0, v82:0, v83:0, 1, 1 + v103:0, v87:0, v87:0 * v72:0, v103:0, v89:0, v90:0, v91:0, v92:0, v93:0, v94:0, v95:0, v96:0, v97:0, v98:0, v99:0, 0, 3, 7, 4, 8) :|: v85:0 > 1 && v103:0 > -1 && v73:0 > 1
Filtered unneeded arguments:
   f_307(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) -> f_307(x2, x14, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_307(v73:0, v85:0, sum~cons_1~v103:0) -> f_307(v73:0, 1 + v103:0, v103:0) :|: v103:0 > -1 && v73:0 > 1 && v85:0 > 1 && sum~cons_1~v103:0 = 1 + v103:0

----------------------------------------

(8)
Obligation:
Rules:
f_307(v73:0, v85:0, sum~cons_1~v103:0) -> f_307(v73:0, 1 + v103:0, v103:0) :|: v103:0 > -1 && v73:0 > 1 && v85:0 > 1 && sum~cons_1~v103:0 = 1 + v103:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_307(v73:0:0, v85:0:0, sum~cons_1~v103:0:0) -> f_307(v73:0:0, 1 + v103:0:0, v103:0:0) :|: v103:0:0 > -1 && v73:0:0 > 1 && v85:0:0 > 1 && sum~cons_1~v103:0:0 = 1 + v103:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_307 ] = f_307_3

The following rules are decreasing:
f_307(v73:0:0, v85:0:0, sum~cons_1~v103:0:0) -> f_307(v73:0:0, 1 + v103:0:0, v103:0:0) :|: v103:0:0 > -1 && v73:0:0 > 1 && v85:0:0 > 1 && sum~cons_1~v103:0:0 = 1 + v103:0:0

The following rules are bounded:
f_307(v73:0:0, v85:0:0, sum~cons_1~v103:0:0) -> f_307(v73:0:0, 1 + v103:0:0, v103:0:0) :|: v103:0:0 > -1 && v73:0:0 > 1 && v85:0:0 > 1 && sum~cons_1~v103:0:0 = 1 + v103:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
