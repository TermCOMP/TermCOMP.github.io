YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/JSBwa.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 579 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 41 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/JSBwa.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/JSBwa.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		store 0, %2
		br %7
	7:
		%8 = load %3
		%9 = icmp sgt %8 1
		br %9, %10, %14
	10:
		%11 = load %3
		%12 = load %4
		%13 = icmp slt %11 %12
		br %14
	14:
		%15 = phi [0, %7], [%13, %10]
		br %15, %16, %22
	16:
		%17 = load %3
		%18 = load %3
		%19 = mul i32 %17, %18
		store %19, %3
		%20 = load %2
		%21 = add i32 %20, 1
		store %21, %2
		br %7
	22:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_276(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_277(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) :|: 1 < v514
f_277(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_279(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) :|: 0 = 0
f_279(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_281(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) :|: TRUE
f_281(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_283(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) :|: 0 = 0
f_283(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_285(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) :|: 0 = 0
f_285(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_286(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) :|: v514 < v511
f_286(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_288(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) :|: 0 = 0
f_288(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_290(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) :|: 0 = 0
f_290(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_292(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) :|: TRUE
f_292(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_294(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) :|: 0 = 0
f_294(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_295(v506, v507, v508, v509, v510, v511, v514, 1, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) :|: 0 = 0
f_295(v506, v507, v508, v509, v510, v511, v514, 1, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_296(v506, v507, v508, v509, v510, v511, v514, 1, v601, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) :|: v601 = v514 * v514
f_296(v506, v507, v508, v509, v510, v511, v514, 1, v601, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_297(v506, v507, v508, v509, v510, v511, v514, 1, v601, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) :|: TRUE
f_297(v506, v507, v508, v509, v510, v511, v514, 1, v601, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_298(v506, v507, v508, v509, v510, v511, v514, 1, v601, v516, v517, v518, v519, v520, 0, 3, 2, 4) :|: 0 = 0
f_298(v506, v507, v508, v509, v510, v511, v514, 1, v601, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_299(v506, v507, v508, v509, v510, v511, v514, 1, v601, v516, v603, v517, v518, v519, v520, 0, 3, 2, 4) :|: v603 = 1 + v516 && 2 <= v603
f_299(v506, v507, v508, v509, v510, v511, v514, 1, v601, v516, v603, v517, v518, v519, v520, 0, 3, 2, 4) -> f_300(v506, v507, v508, v509, v510, v511, v514, 1, v601, v516, v603, v517, v518, v519, v520, 0, 3, 2, 4) :|: TRUE
f_300(v506, v507, v508, v509, v510, v511, v514, 1, v601, v516, v603, v517, v518, v519, v520, 0, 3, 2, 4) -> f_301(v506, v507, v508, v509, v510, v511, v514, 1, v601, v516, v603, v517, v518, v519, v520, 0, 3, 2, 4) :|: TRUE
f_301(v506, v507, v508, v509, v510, v511, v514, 1, v601, v516, v603, v517, v518, v519, v520, 0, 3, 2, 4) -> f_275(v506, v507, v508, v509, v510, v511, v514, 1, v601, v516, v603, v517, v518, v519, v520, 0, 3, 2, 4) :|: TRUE
f_275(v506, v507, v508, v509, v510, v511, v512, 1, v514, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) -> f_276(v506, v507, v508, v509, v510, v511, v514, 1, v512, v515, v516, v517, v518, v519, v520, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_276(v506:0, v507:0, v508:0, v509:0, v510:0, v511:0, v514:0, 1, v512:0, v515:0, v516:0, v517:0, v518:0, v519:0, v520:0, 0, 3, 2, 4) -> f_276(v506:0, v507:0, v508:0, v509:0, v510:0, v511:0, v514:0 * v514:0, 1, v514:0, v516:0, 1 + v516:0, v517:0, v518:0, v519:0, v520:0, 0, 3, 2, 4) :|: v514:0 > 1 && v516:0 > 0 && v514:0 < v511:0
Filtered unneeded arguments:
   f_276(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_276(x6, x7, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_276(v511:0, v514:0, v516:0) -> f_276(v511:0, v514:0 * v514:0, 1 + v516:0) :|: v516:0 > 0 && v514:0 < v511:0 && v514:0 > 1

----------------------------------------

(8)
Obligation:
Rules:
f_276(v511:0, v514:0, v516:0) -> f_276(v511:0, v514:0 * v514:0, 1 + v516:0) :|: v516:0 > 0 && v514:0 < v511:0 && v514:0 > 1

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_276(v511:0:0, v514:0:0, v516:0:0) -> f_276(v511:0:0, v514:0:0 * v514:0:0, 1 + v516:0:0) :|: v516:0:0 > 0 && v514:0:0 < v511:0:0 && v514:0:0 > 1

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_276(x, x1, x2)] = -2 + x - x1 + x2

The following rules are decreasing:
f_276(v511:0:0, v514:0:0, v516:0:0) -> f_276(v511:0:0, v514:0:0 * v514:0:0, 1 + v516:0:0) :|: v516:0:0 > 0 && v514:0:0 < v511:0:0 && v514:0:0 > 1
The following rules are bounded:
f_276(v511:0:0, v514:0:0, v516:0:0) -> f_276(v511:0:0, v514:0:0 * v514:0:0, 1 + v516:0:0) :|: v516:0:0 > 0 && v514:0:0 < v511:0:0 && v514:0:0 > 1

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
