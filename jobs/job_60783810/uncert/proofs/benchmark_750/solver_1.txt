YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/FMLTt.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 59 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 656 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 24 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) IntTRS
        (14) TerminationGraphProcessor [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (21) YES
    (22) LLVM Symbolic Execution SCC
        (23) SCC2IRS [SOUND, 20 ms]
        (24) IntTRS
        (25) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (26) IntTRS
        (27) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (28) YES
    (29) LLVM Symbolic Execution SCC
        (30) SCC2IRS [SOUND, 20 ms]
        (31) IntTRS
        (32) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (33) IntTRS
        (34) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (35) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/FMLTt.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/FMLTt.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sgt %7 0
		br %8, %9, %12
	9:
		%10 = load %3
		%11 = icmp sgt %10 0
		br %12
	12:
		%13 = phi [0, %6], [%11, %9]
		br %13, %14, %25
	14:
		%15 = call i32 @__VERIFIER_nondet_int()
		%16 = icmp ne %15 0
		br %16, %17, %21
	17:
		%18 = load %2
		%19 = sub i32 %18, 1
		store %19, %2
		%20 = call i32 @__VERIFIER_nondet_int()
		store %20, %3
		br %24
	21:
		%22 = load %3
		%23 = sub i32 %22, 1
		store %23, %3
		br %24
	24:
		br %6
	25:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 48 rulesP rules:
f_408(v1501, v1502, v1503, v1504, v1505, v1506, 1, v1508, v1509, v1510, v1511, v1513, v1514, v1515, v1516, 0, 3, 2, 4) -> f_410(v1501, v1502, v1503, v1504, v1505, v1506, 1, v1508, v1509, v1510, v1511, v1555, v1513, v1514, v1515, v1516, 0, 3, 2, 4) :|: 1 + v1555 = v1506 && 0 <= v1555
f_410(v1501, v1502, v1503, v1504, v1505, v1506, 1, v1508, v1509, v1510, v1511, v1555, v1513, v1514, v1515, v1516, 0, 3, 2, 4) -> f_412(v1501, v1502, v1503, v1504, v1505, v1506, 1, v1508, v1509, v1510, v1511, v1555, v1513, v1514, v1515, v1516, 0, 3, 2, 4) :|: TRUE
f_412(v1501, v1502, v1503, v1504, v1505, v1506, 1, v1508, v1509, v1510, v1511, v1555, v1513, v1514, v1515, v1516, 0, 3, 2, 4) -> f_414(v1501, v1502, v1503, v1504, v1505, v1506, 1, v1508, v1509, v1510, v1511, v1555, v1559, v1514, v1515, v1516, 0, 3, 2, 4) :|: TRUE
f_414(v1501, v1502, v1503, v1504, v1505, v1506, 1, v1508, v1509, v1510, v1511, v1555, v1559, v1514, v1515, v1516, 0, 3, 2, 4) -> f_417(v1501, v1502, v1503, v1504, v1505, v1506, 1, v1508, v1509, v1510, v1511, v1555, v1559, v1514, v1515, v1516, 0, 3, 2, 4) :|: TRUE
f_417(v1501, v1502, v1503, v1504, v1505, v1506, 1, v1508, v1509, v1510, v1511, v1555, v1559, v1514, v1515, v1516, 0, 3, 2, 4) -> f_419(v1501, v1502, v1503, v1504, v1505, v1506, 1, v1508, v1509, v1510, v1511, v1555, v1559, v1514, v1515, v1516, 0, 3, 2, 4) :|: TRUE
f_419(v1501, v1502, v1503, v1504, v1505, v1506, 1, v1508, v1509, v1510, v1511, v1555, v1559, v1514, v1515, v1516, 0, 3, 2, 4) -> f_421(v1501, v1502, v1503, v1504, v1505, v1506, 1, v1508, v1509, v1510, v1511, v1555, v1559, v1514, v1515, v1516, 0, 3, 2, 4) :|: TRUE
f_421(v1501, v1502, v1503, v1504, v1505, v1506, 1, v1508, v1509, v1510, v1511, v1555, v1559, v1514, v1515, v1516, 0, 3, 2, 4) -> f_423(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1508, v1509, v1510, v1511, v1506, v1559, v1514, v1515, v1516, 0, 3, 2, 4) :|: 0 = 0
f_423(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1508, v1509, v1510, v1511, v1506, v1559, v1514, v1515, v1516, 0, 3, 2, 4) -> f_425(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1508, v1509, v1510, v1511, v1506, v1559, v1514, v1515, v1516, 0, 3, 2, 4) :|: 0 < v1555 && 2 <= v1506 && 3 <= v1504
f_425(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1508, v1509, v1510, v1511, v1506, v1559, v1514, v1515, v1516, 0, 3, 2, 4) -> f_428(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1508, v1509, v1510, v1511, v1506, v1559, v1514, v1515, v1516, 0, 3, 2, 4) :|: 0 = 0
f_428(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1508, v1509, v1510, v1511, v1506, v1559, v1514, v1515, v1516, 0, 3, 2, 4) -> f_432(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1508, v1509, v1510, v1511, v1506, v1559, v1514, v1515, v1516, 0, 3, 2, 4) :|: TRUE
f_432(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1508, v1509, v1510, v1511, v1506, v1559, v1514, v1515, v1516, 0, 3, 2, 4) -> f_436(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v1509, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) :|: 0 = 0
f_436(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v1509, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) -> f_440(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v1509, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) :|: 0 < v1559
f_440(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v1509, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) -> f_444(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v1509, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) :|: 0 = 0
f_444(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v1509, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) -> f_447(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v1509, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) :|: 0 = 0
f_447(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v1509, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) -> f_451(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v1509, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) :|: TRUE
f_451(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v1509, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) -> f_455(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v2202, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) :|: TRUE
f_455(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v2202, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) -> f_458(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v2202, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) :|: v2202 != 0
f_455(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v2202, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) -> f_459(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, 0, v1510, v1511, v1506, v1514, v1515, v1516, 3, 2, 4) :|: v2202 = 0
f_458(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v2202, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) -> f_460(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v2202, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) :|: 0 = 0
f_460(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v2202, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) -> f_462(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v2202, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) :|: TRUE
f_462(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v2202, v1510, v1511, v1506, v1514, v1515, v1516, 0, 3, 2, 4) -> f_405(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, v2202, v1510, v1511, v1506, v1559, v1514, v1515, v1516, 0, 3, 2, 4) :|: TRUE
f_405(v1501, v1502, v1503, v1504, v1505, v1506, 1, v1508, v1509, v1510, v1511, v1512, v1513, v1514, v1515, v1516, 0, 3, 2, 4) -> f_408(v1501, v1502, v1503, v1504, v1505, v1506, 1, v1508, v1509, v1510, v1511, v1513, v1514, v1515, v1516, 0, 3, 2, 4) :|: 0 = 0
f_459(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, 0, v1510, v1511, v1506, v1514, v1515, v1516, 3, 2, 4) -> f_461(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, 0, v1510, v1511, v1506, v1514, v1515, v1516, 3, 2, 4) :|: 0 = 0
f_461(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, 0, v1510, v1511, v1506, v1514, v1515, v1516, 3, 2, 4) -> f_463(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, 0, v1510, v1511, v1506, v1514, v1515, v1516, 3, 2, 4) :|: TRUE
f_463(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, 0, v1510, v1511, v1506, v1514, v1515, v1516, 3, 2, 4) -> f_407(v1501, v1502, v1503, v1504, v1505, v1555, 1, v1559, 0, v1510, v1511, v1506, v1559, v1514, v1515, v1516, 3, 2, 4) :|: TRUE
f_407(v1539, v1540, v1541, v1542, v1543, v1544, 1, v1546, 0, v1548, v1549, v1550, v1551, v1552, v1553, v1554, 3, 2, 4) -> f_409(v1539, v1540, v1541, v1542, v1543, v1544, 1, v1546, 0, v1549, v1550, v1551, v1552, v1553, v1554, 3, 2, 4) :|: 0 = 0
f_409(v1539, v1540, v1541, v1542, v1543, v1544, 1, v1546, 0, v1549, v1550, v1551, v1552, v1553, v1554, 3, 2, 4) -> f_411(v1539, v1540, v1541, v1542, v1543, v1544, 1, v1546, 0, v1556, v1550, v1551, v1552, v1553, v1554, 3, 2, 4) :|: 1 + v1556 = v1546 && 0 <= v1556
f_411(v1539, v1540, v1541, v1542, v1543, v1544, 1, v1546, 0, v1556, v1550, v1551, v1552, v1553, v1554, 3, 2, 4) -> f_413(v1539, v1540, v1541, v1542, v1543, v1544, 1, v1546, 0, v1556, v1550, v1551, v1552, v1553, v1554, 3, 2, 4) :|: TRUE
f_413(v1539, v1540, v1541, v1542, v1543, v1544, 1, v1546, 0, v1556, v1550, v1551, v1552, v1553, v1554, 3, 2, 4) -> f_415(v1539, v1540, v1541, v1542, v1543, v1544, 1, v1546, 0, v1556, v1550, v1551, v1552, v1553, v1554, 3, 2, 4) :|: TRUE
f_415(v1539, v1540, v1541, v1542, v1543, v1544, 1, v1546, 0, v1556, v1550, v1551, v1552, v1553, v1554, 3, 2, 4) -> f_416(v1539, v1540, v1541, v1542, v1543, v1544, 1, v1546, 0, v1550, v1551, v1556, v1552, v1553, v1554, 3, 2, 4) :|: TRUE
f_416(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1595, 0, v1597, v1598, v1599, v1600, v1601, v1602, 3, 2, 4) -> f_418(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1595, 0, v1597, v1598, v1599, v1600, v1601, v1602, 3, 2, 4) :|: TRUE
f_418(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1595, 0, v1597, v1598, v1599, v1600, v1601, v1602, 3, 2, 4) -> f_420(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1595, 0, v1597, v1598, v1599, v1600, v1601, v1602, 3, 2, 4) :|: 0 = 0
f_420(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1595, 0, v1597, v1598, v1599, v1600, v1601, v1602, 3, 2, 4) -> f_422(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1595, 0, v1597, v1598, v1599, v1600, v1601, v1602, 3, 2, 4) :|: 0 = 0
f_422(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1595, 0, v1597, v1598, v1599, v1600, v1601, v1602, 3, 2, 4) -> f_424(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1595, 0, v1597, v1598, v1599, v1600, v1601, v1602, 3, 2, 4) :|: TRUE
f_424(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1595, 0, v1597, v1598, v1599, v1600, v1601, v1602, 3, 2, 4) -> f_427(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) :|: 0 = 0
f_427(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) -> f_430(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) :|: 0 < v1599 && 2 <= v1595 && 2 <= v1598
f_430(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) -> f_434(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) :|: 0 = 0
f_434(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) -> f_438(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) :|: 0 = 0
f_438(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) -> f_442(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) :|: TRUE
f_442(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) -> f_446(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, v1977, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) :|: TRUE
f_446(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, v1977, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) -> f_449(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, v1977, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) :|: v1977 != 0
f_446(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, v1977, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) -> f_450(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) :|: v1977 = 0
f_449(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, v1977, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) -> f_453(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, v1977, v1597, v1598, v1595, v1600, v1601, v1602, 0, 3, 2, 4) :|: 0 = 0
f_453(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, v1977, v1597, v1598, v1595, v1600, v1601, v1602, 0, 3, 2, 4) -> f_456(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, v1977, v1597, v1598, v1595, v1600, v1601, v1602, 0, 3, 2, 4) :|: TRUE
f_456(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, v1977, v1597, v1598, v1595, v1600, v1601, v1602, 0, 3, 2, 4) -> f_405(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, v1977, v1595, v1599, v1597, v1598, v1600, v1601, v1602, 0, 3, 2, 4) :|: TRUE
f_450(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) -> f_454(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) :|: 0 = 0
f_454(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) -> f_457(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) :|: TRUE
f_457(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1597, v1598, v1595, v1600, v1601, v1602, 3, 2, 4) -> f_407(v1588, v1589, v1590, v1591, v1592, v1593, 1, v1599, 0, v1595, v1599, v1597, v1598, v1600, v1601, v1602, 3, 2, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_446(v1588:0, v1589:0, v1590:0, v1591:0, v1592:0, v1593:0, 1, 1 + v1556:0, 0, 0, v1597:0, v1598:0, v1595:0, v1600:0, v1601:0, v1602:0, 3, 2, 4) -> f_446(v1588:0, v1589:0, v1590:0, v1591:0, v1592:0, v1593:0, 1, v1556:0, v1977:1, 0, v1597:0, v1598:0, 1 + v1556:0, v1600:0, v1601:0, v1602:0, 3, 2, 4) :|: v1556:0 > 0 && v1598:0 > 1
f_408(v1501:0, v1502:0, v1503:0, v1504:0, v1505:0, 1 + v1555:0, 1, v1508:0, v1509:0, v1510:0, v1511:0, v1513:0, v1514:0, v1515:0, v1516:0, 0, 3, 2, 4) -> f_408(v1501:0, v1502:0, v1503:0, v1504:0, v1505:0, v1555:0, 1, v1559:0, v2202:0, v1510:0, v1511:0, v1559:0, v1514:0, v1515:0, v1516:0, 0, 3, 2, 4) :|: v1555:0 > 0 && v1504:0 > 2 && v2202:0 < 0 && v1559:0 > 0
f_408(v1501:0, v1502:0, v1503:0, v1504:0, v1505:0, 1 + v1555:0, 1, v1508:0, v1509:0, v1510:0, v1511:0, v1513:0, v1514:0, v1515:0, v1516:0, 0, 3, 2, 4) -> f_408(v1501:0, v1502:0, v1503:0, v1504:0, v1505:0, v1555:0, 1, v1559:0, v2202:0, v1510:0, v1511:0, v1559:0, v1514:0, v1515:0, v1516:0, 0, 3, 2, 4) :|: v1555:0 > 0 && v1504:0 > 2 && v2202:0 > 0 && v1559:0 > 0
f_408(v1501:0, v1502:0, v1503:0, v1504:0, v1505:0, 1 + v1555:0, 1, v1508:0, v1509:0, v1510:0, v1511:0, v1513:0, v1514:0, v1515:0, v1516:0, 0, 3, 2, 4) -> f_446(v1501:0, v1502:0, v1503:0, v1504:0, v1505:0, v1555:0, 1, v1556:0, v1977:0, 0, 1 + v1555:0, 1 + v1556:0, 1 + v1556:0, v1514:0, v1515:0, v1516:0, 3, 2, 4) :|: v1555:0 > 0 && v1556:0 > 0 && v1504:0 > 2
f_446(v1588:0, v1589:0, v1590:0, v1591:0, v1592:0, v1593:0, 1, v1599:0, v1977:0, 0, v1597:0, v1598:0, v1595:0, v1600:0, v1601:0, v1602:0, 3, 2, 4) -> f_408(v1588:0, v1589:0, v1590:0, v1591:0, v1592:0, v1593:0, 1, v1599:0, v1977:0, v1595:0, v1599:0, v1598:0, v1600:0, v1601:0, v1602:0, 0, 3, 2, 4) :|: v1977:0 < 0
f_446(v1588:0, v1589:0, v1590:0, v1591:0, v1592:0, v1593:0, 1, v1599:0, v1977:0, 0, v1597:0, v1598:0, v1595:0, v1600:0, v1601:0, v1602:0, 3, 2, 4) -> f_408(v1588:0, v1589:0, v1590:0, v1591:0, v1592:0, v1593:0, 1, v1599:0, v1977:0, v1595:0, v1599:0, v1598:0, v1600:0, v1601:0, v1602:0, 0, 3, 2, 4) :|: v1977:0 > 0
Filtered unneeded arguments:
   f_446(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_446(x4, x6, x8, x9, x12)
   f_408(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_408(x4, x6)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_446(v1591:0, v1593:0, sum~cons_1~v1556:0, cons_0, v1598:0) -> f_446(v1591:0, v1593:0, v1556:0, v1977:1, v1598:0) :|: v1556:0 > 0 && v1598:0 > 1 && sum~cons_1~v1556:0 = 1 + v1556:0 && cons_0 = 0
f_408(v1504:0, sum~cons_1~v1555:0) -> f_408(v1504:0, v1555:0) :|: v1555:0 > 0 && v1504:0 > 2 && sum~cons_1~v1555:0 = 1 + v1555:0
f_408(v1504:0, sum~cons_1~v1555:0) -> f_446(v1504:0, v1555:0, v1556:0, v1977:0, 1 + v1556:0) :|: v1556:0 > 0 && v1504:0 > 2 && v1555:0 > 0 && sum~cons_1~v1555:0 = 1 + v1555:0
f_446(v1591:0, v1593:0, v1599:0, v1977:0, v1598:0) -> f_408(v1591:0, v1593:0) :|: v1977:0 < 0
f_446(v1591:0, v1593:0, v1599:0, v1977:0, v1598:0) -> f_408(v1591:0, v1593:0) :|: v1977:0 > 0

----------------------------------------

(9)
Obligation:
Rules:
f_446(v1591:0, v1593:0, sum~cons_1~v1556:0, cons_0, v1598:0) -> f_446(v1591:0, v1593:0, v1556:0, v1977:1, v1598:0) :|: v1556:0 > 0 && v1598:0 > 1 && sum~cons_1~v1556:0 = 1 + v1556:0 && cons_0 = 0
f_408(v1504:0, sum~cons_1~v1555:0) -> f_408(v1504:0, v1555:0) :|: v1555:0 > 0 && v1504:0 > 2 && sum~cons_1~v1555:0 = 1 + v1555:0
f_408(x, x1) -> f_446(x, x2, x3, x4, 1 + x3) :|: x3 > 0 && x > 2 && x2 > 0 && x1 = 1 + x2
f_446(x5, x6, x7, x8, x9) -> f_408(x5, x6) :|: x8 < 0
f_446(x10, x11, x12, x13, x14) -> f_408(x10, x11) :|: x13 > 0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_446(v1591:0:0, v1593:0:0, sum~cons_1~v1556:0:0, cons_0, v1598:0:0) -> f_446(v1591:0:0, v1593:0:0, v1556:0:0, v1977:1:0, v1598:0:0) :|: v1556:0:0 > 0 && v1598:0:0 > 1 && sum~cons_1~v1556:0:0 = 1 + v1556:0:0 && cons_0 = 0
f_408(x:0, sum~cons_1~x2:0) -> f_446(x:0, x2:0, x3:0, x4:0, 1 + x3:0) :|: x3:0 > 0 && x:0 > 2 && x2:0 > 0 && sum~cons_1~x2:0 = 1 + x2:0
f_446(x5:0, x6:0, x7:0, x8:0, x9:0) -> f_408(x5:0, x6:0) :|: x8:0 < 0
f_446(x10:0, x11:0, x12:0, x13:0, x14:0) -> f_408(x10:0, x11:0) :|: x13:0 > 0
f_408(v1504:0:0, sum~cons_1~v1555:0:0) -> f_408(v1504:0:0, v1555:0:0) :|: v1555:0:0 > 0 && v1504:0:0 > 2 && sum~cons_1~v1555:0:0 = 1 + v1555:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_446(x, x1, x2, x3, x4)] = -1 + x + x1
[f_408(x5, x6)] = -1 + x5 + x6

The following rules are decreasing:
f_408(x:0, sum~cons_1~x2:0) -> f_446(x:0, x2:0, x3:0, x4:0, 1 + x3:0) :|: x3:0 > 0 && x:0 > 2 && x2:0 > 0 && sum~cons_1~x2:0 = 1 + x2:0
f_408(v1504:0:0, sum~cons_1~v1555:0:0) -> f_408(v1504:0:0, v1555:0:0) :|: v1555:0:0 > 0 && v1504:0:0 > 2 && sum~cons_1~v1555:0:0 = 1 + v1555:0:0
The following rules are bounded:
f_408(x:0, sum~cons_1~x2:0) -> f_446(x:0, x2:0, x3:0, x4:0, 1 + x3:0) :|: x3:0 > 0 && x:0 > 2 && x2:0 > 0 && sum~cons_1~x2:0 = 1 + x2:0
f_408(v1504:0:0, sum~cons_1~v1555:0:0) -> f_408(v1504:0:0, v1555:0:0) :|: v1555:0:0 > 0 && v1504:0:0 > 2 && sum~cons_1~v1555:0:0 = 1 + v1555:0:0

----------------------------------------

(13)
Obligation:
Rules:
f_446(v1591:0:0, v1593:0:0, sum~cons_1~v1556:0:0, cons_0, v1598:0:0) -> f_446(v1591:0:0, v1593:0:0, v1556:0:0, v1977:1:0, v1598:0:0) :|: v1556:0:0 > 0 && v1598:0:0 > 1 && sum~cons_1~v1556:0:0 = 1 + v1556:0:0 && cons_0 = 0
f_446(x5:0, x6:0, x7:0, x8:0, x9:0) -> f_408(x5:0, x6:0) :|: x8:0 < 0
f_446(x10:0, x11:0, x12:0, x13:0, x14:0) -> f_408(x10:0, x11:0) :|: x13:0 > 0

----------------------------------------

(14) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(15)
Obligation:
Rules:
f_446(v1591:0:0, v1593:0:0, sum~cons_1~v1556:0:0, cons_0, v1598:0:0) -> f_446(v1591:0:0, v1593:0:0, v1556:0:0, v1977:1:0, v1598:0:0) :|: v1556:0:0 > 0 && v1598:0:0 > 1 && sum~cons_1~v1556:0:0 = 1 + v1556:0:0 && cons_0 = 0

----------------------------------------

(16) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(17)
Obligation:
Rules:
f_446(v1591:0:0:0, v1593:0:0:0, sum~cons_1~v1556:0:0:0, cons_0, v1598:0:0:0) -> f_446(v1591:0:0:0, v1593:0:0:0, v1556:0:0:0, v1977:1:0:0, v1598:0:0:0) :|: v1556:0:0:0 > 0 && v1598:0:0:0 > 1 && sum~cons_1~v1556:0:0:0 = 1 + v1556:0:0:0 && cons_0 = 0

----------------------------------------

(18) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_446(x1, x2, x3, x4, x5) -> f_446(x3, x4, x5)

----------------------------------------

(19)
Obligation:
Rules:
f_446(sum~cons_1~v1556:0:0:0, cons_0, v1598:0:0:0) -> f_446(v1556:0:0:0, v1977:1:0:0, v1598:0:0:0) :|: v1556:0:0:0 > 0 && v1598:0:0:0 > 1 && sum~cons_1~v1556:0:0:0 = 1 + v1556:0:0:0 && cons_0 = 0

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_446(x, x1, x2)] = x

The following rules are decreasing:
f_446(sum~cons_1~v1556:0:0:0, cons_0, v1598:0:0:0) -> f_446(v1556:0:0:0, v1977:1:0:0, v1598:0:0:0) :|: v1556:0:0:0 > 0 && v1598:0:0:0 > 1 && sum~cons_1~v1556:0:0:0 = 1 + v1556:0:0:0 && cons_0 = 0
The following rules are bounded:
f_446(sum~cons_1~v1556:0:0:0, cons_0, v1598:0:0:0) -> f_446(v1556:0:0:0, v1977:1:0:0, v1598:0:0:0) :|: v1556:0:0:0 > 0 && v1598:0:0:0 > 1 && sum~cons_1~v1556:0:0:0 = 1 + v1556:0:0:0 && cons_0 = 0

----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
SCC
----------------------------------------

(23) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_297(v516, v517, v518, v519, v520, v521, 1, v523, v524, v525, v526, v527, v528, v529, 0, 3, 4) -> f_300(v516, v517, v518, v519, v520, v525, 1, v523, v524, v521, v526, v527, v528, v529, 0, 3, 4) :|: 0 = 0
f_300(v516, v517, v518, v519, v520, v525, 1, v523, v524, v521, v526, v527, v528, v529, 0, 3, 4) -> f_302(v516, v517, v518, v519, v520, v525, 1, v523, v524, v521, v526, v527, v528, v529, 0, 3, 2, 4) :|: 0 < v525 && 2 <= v521 && 2 <= v519
f_302(v516, v517, v518, v519, v520, v525, 1, v523, v524, v521, v526, v527, v528, v529, 0, 3, 2, 4) -> f_306(v516, v517, v518, v519, v520, v525, 1, v523, v524, v521, v526, v527, v528, v529, 0, 3, 2, 4) :|: 0 = 0
f_306(v516, v517, v518, v519, v520, v525, 1, v523, v524, v521, v526, v527, v528, v529, 0, 3, 2, 4) -> f_310(v516, v517, v518, v519, v520, v525, 1, v523, v524, v521, v526, v527, v528, v529, 0, 3, 2, 4) :|: TRUE
f_310(v516, v517, v518, v519, v520, v525, 1, v523, v524, v521, v526, v527, v528, v529, 0, 3, 2, 4) -> f_314(v516, v517, v518, v519, v520, v525, 1, v526, v524, v521, v527, v528, v529, 0, 3, 2, 4) :|: 0 = 0
f_314(v516, v517, v518, v519, v520, v525, 1, v526, v524, v521, v527, v528, v529, 0, 3, 2, 4) -> f_318(v516, v517, v518, v519, v520, v525, 1, v526, v524, v521, v527, v528, v529, 0, 3, 2, 4) :|: 0 < v526
f_318(v516, v517, v518, v519, v520, v525, 1, v526, v524, v521, v527, v528, v529, 0, 3, 2, 4) -> f_322(v516, v517, v518, v519, v520, v525, 1, v526, v524, v521, v527, v528, v529, 0, 3, 2, 4) :|: 0 = 0
f_322(v516, v517, v518, v519, v520, v525, 1, v526, v524, v521, v527, v528, v529, 0, 3, 2, 4) -> f_326(v516, v517, v518, v519, v520, v525, 1, v526, v524, v521, v527, v528, v529, 0, 3, 2, 4) :|: 0 = 0
f_326(v516, v517, v518, v519, v520, v525, 1, v526, v524, v521, v527, v528, v529, 0, 3, 2, 4) -> f_330(v516, v517, v518, v519, v520, v525, 1, v526, v524, v521, v527, v528, v529, 0, 3, 2, 4) :|: TRUE
f_330(v516, v517, v518, v519, v520, v525, 1, v526, v524, v521, v527, v528, v529, 0, 3, 2, 4) -> f_334(v516, v517, v518, v519, v520, v525, 1, v526, v719, v521, v527, v528, v529, 0, 3, 2, 4) :|: TRUE
f_334(v516, v517, v518, v519, v520, v525, 1, v526, v719, v521, v527, v528, v529, 0, 3, 2, 4) -> f_336(v516, v517, v518, v519, v520, v525, 1, v526, v719, v521, v527, v528, v529, 0, 3, 2, 4) :|: v719 != 0
f_336(v516, v517, v518, v519, v520, v525, 1, v526, v719, v521, v527, v528, v529, 0, 3, 2, 4) -> f_339(v516, v517, v518, v519, v520, v525, 1, v526, v719, v521, v527, v528, v529, 0, 3, 2, 4) :|: 0 = 0
f_339(v516, v517, v518, v519, v520, v525, 1, v526, v719, v521, v527, v528, v529, 0, 3, 2, 4) -> f_342(v516, v517, v518, v519, v520, v525, 1, v526, v719, v521, v527, v528, v529, 0, 3, 2, 4) :|: TRUE
f_342(v516, v517, v518, v519, v520, v525, 1, v526, v719, v521, v527, v528, v529, 0, 3, 2, 4) -> f_346(v516, v517, v518, v519, v520, v525, 1, v526, v719, v527, v528, v529, 0, 3, 2, 4) :|: 0 = 0
f_346(v516, v517, v518, v519, v520, v525, 1, v526, v719, v527, v528, v529, 0, 3, 2, 4) -> f_350(v516, v517, v518, v519, v520, v525, 1, v526, v719, v766, v527, v528, v529, 0, 3, 2, 4) :|: 1 + v766 = v525 && 0 <= v766
f_350(v516, v517, v518, v519, v520, v525, 1, v526, v719, v766, v527, v528, v529, 0, 3, 2, 4) -> f_354(v516, v517, v518, v519, v520, v525, 1, v526, v719, v766, v527, v528, v529, 0, 3, 2, 4) :|: TRUE
f_354(v516, v517, v518, v519, v520, v525, 1, v526, v719, v766, v527, v528, v529, 0, 3, 2, 4) -> f_358(v516, v517, v518, v519, v520, v525, 1, v526, v719, v766, v858, v527, v528, v529, 0, 3, 2, 4) :|: TRUE
f_358(v516, v517, v518, v519, v520, v525, 1, v526, v719, v766, v858, v527, v528, v529, 0, 3, 2, 4) -> f_362(v516, v517, v518, v519, v520, v525, 1, v526, v719, v766, v858, v527, v528, v529, 0, 3, 2, 4) :|: TRUE
f_362(v516, v517, v518, v519, v520, v525, 1, v526, v719, v766, v858, v527, v528, v529, 0, 3, 2, 4) -> f_366(v516, v517, v518, v519, v520, v525, 1, v526, v719, v766, v858, v527, v528, v529, 0, 3, 2, 4) :|: TRUE
f_366(v516, v517, v518, v519, v520, v525, 1, v526, v719, v766, v858, v527, v528, v529, 0, 3, 2, 4) -> f_294(v516, v517, v518, v519, v520, v525, 1, v526, v719, v766, v858, v527, v528, v529, 0, 3, 4) :|: TRUE
f_294(v516, v517, v518, v519, v520, v521, 1, v523, v524, v525, v526, v527, v528, v529, 0, 3, 4) -> f_297(v516, v517, v518, v519, v520, v521, 1, v523, v524, v525, v526, v527, v528, v529, 0, 3, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_297(v516:0, v517:0, v518:0, v519:0, v520:0, v521:0, 1, v523:0, v524:0, 1 + v766:0, v526:0, v527:0, v528:0, v529:0, 0, 3, 4) -> f_297(v516:0, v517:0, v518:0, v519:0, v520:0, 1 + v766:0, 1, v526:0, v719:0, v766:0, v858:0, v527:0, v528:0, v529:0, 0, 3, 4) :|: v521:0 > 1 && v766:0 > -1 && v519:0 > 1 && v526:0 > 0 && v719:0 < 0
f_297(v516:0, v517:0, v518:0, v519:0, v520:0, v521:0, 1, v523:0, v524:0, 1 + v766:0, v526:0, v527:0, v528:0, v529:0, 0, 3, 4) -> f_297(v516:0, v517:0, v518:0, v519:0, v520:0, 1 + v766:0, 1, v526:0, v719:0, v766:0, v858:0, v527:0, v528:0, v529:0, 0, 3, 4) :|: v521:0 > 1 && v766:0 > -1 && v519:0 > 1 && v526:0 > 0 && v719:0 > 0
Filtered unneeded arguments:
   f_297(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_297(x4, x6, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_297(v519:0, v521:0, sum~cons_1~v766:0, v526:0) -> f_297(v519:0, 1 + v766:0, v766:0, v858:0) :|: v766:0 > -1 && v521:0 > 1 && v526:0 > 0 && v519:0 > 1 && sum~cons_1~v766:0 = 1 + v766:0

----------------------------------------

(24)
Obligation:
Rules:
f_297(v519:0, v521:0, sum~cons_1~v766:0, v526:0) -> f_297(v519:0, 1 + v766:0, v766:0, v858:0) :|: v766:0 > -1 && v521:0 > 1 && v526:0 > 0 && v519:0 > 1 && sum~cons_1~v766:0 = 1 + v766:0

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f_297(v519:0:0, v521:0:0, sum~cons_1~v766:0:0, v526:0:0) -> f_297(v519:0:0, 1 + v766:0:0, v766:0:0, v858:0:0) :|: v526:0:0 > 0 && v519:0:0 > 1 && v521:0:0 > 1 && v766:0:0 > -1 && sum~cons_1~v766:0:0 = 1 + v766:0:0

----------------------------------------

(27) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_297(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_297(v519:0:0, v521:0:0, sum~cons_1~v766:0:0, v526:0:0) -> f_297(v519:0:0, 1 + v766:0:0, v766:0:0, v858:0:0) :|: v526:0:0 > 0 && v519:0:0 > 1 && v521:0:0 > 1 && v766:0:0 > -1 && sum~cons_1~v766:0:0 = 1 + v766:0:0
The following rules are bounded:
f_297(v519:0:0, v521:0:0, sum~cons_1~v766:0:0, v526:0:0) -> f_297(v519:0:0, 1 + v766:0:0, v766:0:0, v858:0:0) :|: v526:0:0 > 0 && v519:0:0 > 1 && v521:0:0 > 1 && v766:0:0 > -1 && sum~cons_1~v766:0:0 = 1 + v766:0:0

----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
SCC
----------------------------------------

(30) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_275(v458, v459, v460, v461, v462, 1, v464, 0, v466, v467, v468, v469, 3, 4) -> f_278(v458, v459, v460, v461, v462, 1, v464, 0, v466, v467, v468, v469, 3, 4) :|: 0 = 0
f_278(v458, v459, v460, v461, v462, 1, v464, 0, v466, v467, v468, v469, 3, 4) -> f_281(v458, v459, v460, v461, v462, 1, v464, 0, v466, v467, v468, v469, 3, 4) :|: TRUE
f_281(v458, v459, v460, v461, v462, 1, v464, 0, v466, v467, v468, v469, 3, 4) -> f_284(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 4) :|: 0 = 0
f_284(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 4) -> f_287(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 2, 4) :|: 0 < v466 && 2 <= v464 && 2 <= v462
f_287(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 2, 4) -> f_291(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 2, 4) :|: 0 = 0
f_291(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 2, 4) -> f_295(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 2, 4) :|: 0 = 0
f_295(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 2, 4) -> f_298(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 2, 4) :|: TRUE
f_298(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 2, 4) -> f_301(v458, v459, v460, v461, v462, 1, v466, v575, 0, v464, v467, v468, v469, 3, 2, 4) :|: TRUE
f_301(v458, v459, v460, v461, v462, 1, v466, v575, 0, v464, v467, v468, v469, 3, 2, 4) -> f_305(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 2, 4) :|: v575 = 0
f_305(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 2, 4) -> f_309(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 2, 4) :|: 0 = 0
f_309(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 2, 4) -> f_313(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 2, 4) :|: TRUE
f_313(v458, v459, v460, v461, v462, 1, v466, 0, v464, v467, v468, v469, 3, 2, 4) -> f_317(v458, v459, v460, v461, v462, 1, v466, 0, v467, v468, v469, 3, 2, 4) :|: 0 = 0
f_317(v458, v459, v460, v461, v462, 1, v466, 0, v467, v468, v469, 3, 2, 4) -> f_321(v458, v459, v460, v461, v462, 1, v466, 0, v610, v467, v468, v469, 3, 2, 4) :|: 1 + v610 = v466 && 0 <= v610
f_321(v458, v459, v460, v461, v462, 1, v466, 0, v610, v467, v468, v469, 3, 2, 4) -> f_325(v458, v459, v460, v461, v462, 1, v466, 0, v610, v467, v468, v469, 3, 2, 4) :|: TRUE
f_325(v458, v459, v460, v461, v462, 1, v466, 0, v610, v467, v468, v469, 3, 2, 4) -> f_329(v458, v459, v460, v461, v462, 1, v466, 0, v610, v467, v468, v469, 3, 2, 4) :|: TRUE
f_329(v458, v459, v460, v461, v462, 1, v466, 0, v610, v467, v468, v469, 3, 2, 4) -> f_333(v458, v459, v460, v461, v462, 1, v466, 0, v610, v467, v468, v469, 3, 2, 4) :|: TRUE
f_333(v458, v459, v460, v461, v462, 1, v466, 0, v610, v467, v468, v469, 3, 2, 4) -> f_272(v458, v459, v460, v461, v462, 1, v466, 0, v610, v467, v468, v469, 3, 4) :|: TRUE
f_272(v458, v459, v460, v461, v462, 1, v464, 0, v466, v467, v468, v469, 3, 4) -> f_275(v458, v459, v460, v461, v462, 1, v464, 0, v466, v467, v468, v469, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_275(v458:0, v459:0, v460:0, v461:0, v462:0, 1, v464:0, 0, 1 + v610:0, v467:0, v468:0, v469:0, 3, 4) -> f_275(v458:0, v459:0, v460:0, v461:0, v462:0, 1, 1 + v610:0, 0, v610:0, v467:0, v468:0, v469:0, 3, 4) :|: v464:0 > 1 && v610:0 > -1 && v462:0 > 1
Filtered unneeded arguments:
   f_275(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_275(x5, x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_275(v462:0, v464:0, sum~cons_1~v610:0) -> f_275(v462:0, 1 + v610:0, v610:0) :|: v610:0 > -1 && v462:0 > 1 && v464:0 > 1 && sum~cons_1~v610:0 = 1 + v610:0

----------------------------------------

(31)
Obligation:
Rules:
f_275(v462:0, v464:0, sum~cons_1~v610:0) -> f_275(v462:0, 1 + v610:0, v610:0) :|: v610:0 > -1 && v462:0 > 1 && v464:0 > 1 && sum~cons_1~v610:0 = 1 + v610:0

----------------------------------------

(32) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(33)
Obligation:
Rules:
f_275(v462:0:0, v464:0:0, sum~cons_1~v610:0:0) -> f_275(v462:0:0, 1 + v610:0:0, v610:0:0) :|: v610:0:0 > -1 && v462:0:0 > 1 && v464:0:0 > 1 && sum~cons_1~v610:0:0 = 1 + v610:0:0

----------------------------------------

(34) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_275(x, x1, x2)] = x2

The following rules are decreasing:
f_275(v462:0:0, v464:0:0, sum~cons_1~v610:0:0) -> f_275(v462:0:0, 1 + v610:0:0, v610:0:0) :|: v610:0:0 > -1 && v462:0:0 > 1 && v464:0:0 > 1 && sum~cons_1~v610:0:0 = 1 + v610:0:0
The following rules are bounded:
f_275(v462:0:0, v464:0:0, sum~cons_1~v610:0:0) -> f_275(v462:0:0, 1 + v610:0:0, v610:0:0) :|: v610:0:0 > -1 && v462:0:0 > 1 && v464:0:0 > 1 && sum~cons_1~v610:0:0 = 1 + v610:0:0

----------------------------------------

(35)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
