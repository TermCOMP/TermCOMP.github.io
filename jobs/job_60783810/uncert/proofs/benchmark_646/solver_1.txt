YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/xCDip.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3554 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 89 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 10 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 105 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/xCDip.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/xCDip.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_assert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %7, %5
	5:
		br %6
	6:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	7:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 24
	0:
		%1 = alloca i32, align 4
		%2 = alloca [100000 x i32], align 16
		%3 = alloca [100000 x i32], align 16
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[100000 x i32] %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[100000 x i32] %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store 0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 1, %5
		br %7
	7:
		%8 = load %4
		%9 = icmp slt %8 100000
		br %9, %10, %24
	10:
		%11 = load %4
		%12 = sext i32 %11 to i64
		%13 = getelementptr %2, 0, %12
		%14 = load %13
		%15 = load %4
		%16 = sext i32 %15 to i64
		%17 = getelementptr %3, 0, %16
		%18 = load %17
		%19 = icmp ne %14 %18
		br %19, %20, %21
	20:
		store 0, %5
		br %21
	21:
		%22 = load %4
		%23 = add i32 %22, 1
		store %23, %4
		br %7
	24:
		%25 = load %5
		%26 = icmp ne %25 0
		br %26, %27, %46
	27:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store 0, %6
		br %28
	28:
		%29 = load %6
		%30 = icmp slt %29 100000
		br %30, %31, %45
	31:
		%32 = load %6
		%33 = sext i32 %32 to i64
		%34 = getelementptr %2, 0, %33
		%35 = load %34
		%36 = load %6
		%37 = sext i32 %36 to i64
		%38 = getelementptr %3, 0, %37
		%39 = load %38
		%40 = icmp eq %35 %39
		%41 = zext i1 %40 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assert(i32 %41)
		br %42
	42:
		%43 = load %6
		%44 = add i32 %43, 1
		store %44, %6
		br %28
	45:
		br %46
	46:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 29 rulesP rules:
f_916(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1923, v1924, v1925, v1926, v1928, v1929, v1930, v1931, v1932, v1933, v1934, 3, 399999, 4, 400000) -> f_917(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1923, v1924, v1925, v1926, v1928, v1929, v1930, v1931, v1932, v1933, v1934, 3, 399999, 99998, 4, 400000) :|: v1927 < 100000 && v1923 <= 99998
f_917(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1923, v1924, v1925, v1926, v1928, v1929, v1930, v1931, v1932, v1933, v1934, 3, 399999, 99998, 4, 400000) -> f_919(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1923, v1924, v1925, v1926, v1928, v1929, v1930, v1931, v1932, v1933, v1934, 3, 399999, 99998, 4, 400000) :|: 0 = 0
f_919(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1923, v1924, v1925, v1926, v1928, v1929, v1930, v1931, v1932, v1933, v1934, 3, 399999, 99998, 4, 400000) -> f_921(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1923, v1924, v1925, v1926, v1928, v1929, v1930, v1931, v1932, v1933, v1934, 3, 399999, 99998, 4, 400000) :|: TRUE
f_921(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1923, v1924, v1925, v1926, v1928, v1929, v1930, v1931, v1932, v1933, v1934, 3, 399999, 99998, 4, 400000) -> f_923(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1923, v1924, v1925, v1926, v1928, v1929, v1930, v1931, v1932, v1933, v1934, 3, 399999, 99998, 4, 400000) :|: 0 = 0
f_923(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1923, v1924, v1925, v1926, v1928, v1929, v1930, v1931, v1932, v1933, v1934, 3, 399999, 99998, 4, 400000) -> f_925(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1924, v1925, v1923, v1926, v1928, v1929, v1930, v1931, v1932, v1933, v1934, 3, 399999, 99998, 4, 400000) :|: 0 = 0
f_925(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1924, v1925, v1923, v1926, v1928, v1929, v1930, v1931, v1932, v1933, v1934, 3, 399999, 99998, 4, 400000) -> f_926(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1925, v1923, v1926, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, 3, 399999, 4, 99998, 400000, 5) :|: v1973 = v1911 + 4 * v1927 && 5 <= v1973
f_926(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1925, v1923, v1926, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, 3, 399999, 4, 99998, 400000, 5) -> f_927(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1974, v1923, v1926, v1925, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, 3, 399999, 4, 99998, 400000, 5) :|: TRUE
f_927(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1974, v1923, v1926, v1925, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, 3, 399999, 4, 99998, 400000, 5) -> f_928(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1974, v1923, v1926, v1925, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, 3, 399999, 4, 99998, 400000, 5) :|: 0 = 0
f_928(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1974, v1923, v1926, v1925, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, 3, 399999, 4, 99998, 400000, 5) -> f_929(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1974, v1926, v1925, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, 3, 399999, 4, 99998, 400000, 5) :|: 0 = 0
f_929(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1974, v1926, v1925, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, 3, 399999, 4, 99998, 400000, 5) -> f_930(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1974, v1976, v1925, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1926, 3, 399999, 4, 99998, 400000, 5) :|: v1976 = v1912 + 4 * v1927 && 5 <= v1976
f_930(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1974, v1976, v1925, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1926, 3, 399999, 4, 99998, 400000, 5) -> f_931(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1974, v1976, v1977, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 99998, 400000, 5) :|: TRUE
f_931(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1974, v1976, v1977, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 99998, 400000, 5) -> f_932(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 99998, 400000, 5) :|: v1974 = v1977
f_932(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 99998, 400000, 5) -> f_934(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 99998, 400000, 5) :|: 0 = 0
f_934(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 99998, 400000, 5) -> f_936(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 99998, 400000, 5) :|: 0 = 0
f_936(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 99998, 400000, 5) -> f_938(1, v1910, v1928, v1911, v1929, v1912, v1930, v1913, v1931, v1914, v1932, v1915, v1933, 0, v1934, 100000, v1927, v1919, v1920, v1921, v1924, v1925, v1926, v1973, v1977, v1976, 99999, v1923, 3, 399999, 4, 99998, 400000, 5) :|: 0 = 0
f_938(1, v1910, v1928, v1911, v1929, v1912, v1930, v1913, v1931, v1914, v1932, v1915, v1933, 0, v1934, 100000, v1927, v1919, v1920, v1921, v1924, v1925, v1926, v1973, v1977, v1976, 99999, v1923, 3, 399999, 4, 99998, 400000, 5) -> f_940(1, v1992, v1910, v1928, v1911, v1929, v1912, v1930, v1913, v1931, v1914, v1932, v1915, v1933, v1993, 0, v1934, 100000, v1927, v1919, v1920, v1921, v1924, v1925, v1926, v1973, v1977, v1976, 99999, v1923, 3, 399999, 4, 99998, 400000, 5) :|: 1 <= v1992 && v1993 = 3 + v1992 && 4 <= v1993
f_940(1, v1992, v1910, v1928, v1911, v1929, v1912, v1930, v1913, v1931, v1914, v1932, v1915, v1933, v1993, 0, v1934, 100000, v1927, v1919, v1920, v1921, v1924, v1925, v1926, v1973, v1977, v1976, 99999, v1923, 3, 399999, 4, 99998, 400000, 5) -> f_942(1, v1992, v1910, v1928, v1911, v1929, v1912, v1930, v1913, v1931, v1914, v1932, v1915, v1933, v1993, 0, v1934, 100000, v1927, v1919, v1920, v1921, v1924, v1925, v1926, v1973, v1977, v1976, 99999, v1923, 3, 399999, 4, 99998, 400000, 5) :|: TRUE
f_942(1, v1992, v1910, v1928, v1911, v1929, v1912, v1930, v1913, v1931, v1914, v1932, v1915, v1933, v1993, 0, v1934, 100000, v1927, v1919, v1920, v1921, v1924, v1925, v1926, v1973, v1977, v1976, 99999, v1923, 3, 399999, 4, 99998, 400000, 5) -> f_944(1, v1992, v1910, v1928, v1911, v1929, v1912, v1930, v1913, v1931, v1914, v1932, v1915, v1933, v1993, 0, v1934, 100000, v1927, v1919, v1920, v1921, v1924, v1925, v1926, v1973, v1977, v1976, 99999, v1923, 3, 399999, 4, 99998, 400000, 5) :|: TRUE
f_944(1, v1992, v1910, v1928, v1911, v1929, v1912, v1930, v1913, v1931, v1914, v1932, v1915, v1933, v1993, 0, v1934, 100000, v1927, v1919, v1920, v1921, v1924, v1925, v1926, v1973, v1977, v1976, 99999, v1923, 3, 399999, 4, 99998, 400000, 5) -> f_946(1, v1992, v1910, v1928, v1911, v1929, v1912, v1930, v1913, v1931, v1914, v1932, v1915, v1933, v1993, 0, v1934, 100000, v1927, v1919, v1920, v1921, v1924, v1925, v1926, v1973, v1977, v1976, 99999, v1923, 3, 399999, 4, 99998, 400000, 5) :|: 0 = 0
f_946(1, v1992, v1910, v1928, v1911, v1929, v1912, v1930, v1913, v1931, v1914, v1932, v1915, v1933, v1993, 0, v1934, 100000, v1927, v1919, v1920, v1921, v1924, v1925, v1926, v1973, v1977, v1976, 99999, v1923, 3, 399999, 4, 99998, 400000, 5) -> f_948(1, v1992, v1910, v1928, v1911, v1929, v1912, v1930, v1913, v1931, v1914, v1932, v1915, v1933, v1993, 0, v1934, 100000, v1927, v1919, v1920, v1921, v1924, v1925, v1926, v1973, v1977, v1976, 99999, v1923, 3, 399999, 4, 99998, 400000, 5) :|: 0 = 0
f_948(1, v1992, v1910, v1928, v1911, v1929, v1912, v1930, v1913, v1931, v1914, v1932, v1915, v1933, v1993, 0, v1934, 100000, v1927, v1919, v1920, v1921, v1924, v1925, v1926, v1973, v1977, v1976, 99999, v1923, 3, 399999, 4, 99998, 400000, 5) -> f_950(1, v1992, v1910, v1928, v1911, v1929, v1912, v1930, v1913, v1931, v1914, v1932, v1915, v1933, v1993, 0, v1934, 100000, v1927, v1919, v1920, v1921, v1924, v1925, v1926, v1973, v1977, v1976, 99999, v1923, 3, 399999, 4, 99998, 400000, 5) :|: TRUE
f_950(1, v1992, v1910, v1928, v1911, v1929, v1912, v1930, v1913, v1931, v1914, v1932, v1915, v1933, v1993, 0, v1934, 100000, v1927, v1919, v1920, v1921, v1924, v1925, v1926, v1973, v1977, v1976, 99999, v1923, 3, 399999, 4, 99998, 400000, 5) -> f_952(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 99998, 400000, 5) :|: TRUE
f_952(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 99998, 400000, 5) -> f_954(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 99998, 400000, 5) :|: TRUE
f_954(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1923, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 99998, 400000, 5) -> f_956(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 400000, 5) :|: 0 = 0
f_956(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 400000, 5) -> f_958(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1996, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 400000, 5, 2) :|: v1996 = 1 + v1927 && 2 <= v1996 && v1996 <= 100000
f_958(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1996, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 400000, 5, 2) -> f_959(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1996, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 400000, 5, 2) :|: TRUE
f_959(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1996, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 400000, 5, 2) -> f_960(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1996, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 400000, 5, 2) :|: TRUE
f_960(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1996, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1924, v1925, v1926, 3, 399999, 4, 400000, 5, 2) -> f_915(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1973, v1977, v1976, v1996, v1928, v1929, v1930, v1931, v1932, v1933, v1934, 3, 399999, 4, 400000) :|: TRUE
f_915(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1923, v1924, v1925, v1926, v1927, v1928, v1929, v1930, v1931, v1932, v1933, v1934, 3, 399999, 4, 400000) -> f_916(v1910, v1911, v1912, v1913, v1914, v1915, 100000, 0, 99999, v1919, v1920, v1921, 1, v1927, v1923, v1924, v1925, v1926, v1928, v1929, v1930, v1931, v1932, v1933, v1934, 3, 399999, 4, 400000) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_916(v1910:0, v1911:0, v1912:0, v1913:0, v1914:0, v1915:0, 100000, 0, 99999, v1919:0, v1920:0, v1921:0, 1, v1927:0, v1923:0, v1924:0, v1925:0, v1926:0, v1928:0, v1929:0, v1930:0, v1931:0, v1932:0, v1933:0, v1934:0, 3, 399999, 4, 400000) -> f_916(v1910:0, v1911:0, v1912:0, v1913:0, v1914:0, v1915:0, 100000, 0, 99999, v1919:0, v1920:0, v1921:0, 1, 1 + v1927:0, v1927:0, v1911:0 + 4 * v1927:0, v1974:0, v1912:0 + 4 * v1927:0, v1928:0, v1929:0, v1930:0, v1931:0, v1932:0, v1933:0, v1934:0, 3, 399999, 4, 400000) :|: v1923:0 < 99999 && v1927:0 < 100000 && v1911:0 + 4 * v1927:0 > 4 && v1912:0 + 4 * v1927:0 > 4 && v1992:0 > 0 && v1927:0 > 0
Filtered unneeded arguments:
   f_916(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_916(x2, x3, x14, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_916(v1911:0, v1912:0, v1927:0, v1923:0) -> f_916(v1911:0, v1912:0, 1 + v1927:0, v1927:0) :|: v1927:0 < 100000 && v1923:0 < 99999 && v1911:0 + 4 * v1927:0 > 4 && v1927:0 > 0 && v1912:0 + 4 * v1927:0 > 4

----------------------------------------

(9)
Obligation:
Rules:
f_916(v1911:0, v1912:0, v1927:0, v1923:0) -> f_916(v1911:0, v1912:0, 1 + v1927:0, v1927:0) :|: v1927:0 < 100000 && v1923:0 < 99999 && v1911:0 + 4 * v1927:0 > 4 && v1927:0 > 0 && v1912:0 + 4 * v1927:0 > 4

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_916(v1911:0:0, v1912:0:0, v1927:0:0, v1923:0:0) -> f_916(v1911:0:0, v1912:0:0, 1 + v1927:0:0, v1927:0:0) :|: v1927:0:0 > 0 && v1912:0:0 + 4 * v1927:0:0 > 4 && v1911:0:0 + 4 * v1927:0:0 > 4 && v1923:0:0 < 99999 && v1927:0:0 < 100000

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_916 ] = -1*f_916_3

The following rules are decreasing:
f_916(v1911:0:0, v1912:0:0, v1927:0:0, v1923:0:0) -> f_916(v1911:0:0, v1912:0:0, 1 + v1927:0:0, v1927:0:0) :|: v1927:0:0 > 0 && v1912:0:0 + 4 * v1927:0:0 > 4 && v1911:0:0 + 4 * v1927:0:0 > 4 && v1923:0:0 < 99999 && v1927:0:0 < 100000

The following rules are bounded:
f_916(v1911:0:0, v1912:0:0, v1927:0:0, v1923:0:0) -> f_916(v1911:0:0, v1912:0:0, 1 + v1927:0:0, v1927:0:0) :|: v1927:0:0 > 0 && v1912:0:0 + 4 * v1927:0:0 > 4 && v1911:0:0 + 4 * v1927:0:0 > 4 && v1923:0:0 < 99999 && v1927:0:0 < 100000


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 55 rulesP rules:
f_568(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1050, v1052, v1053, v1054, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, 3, 399999, 99999, 100000, 4, 400000) -> f_571(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1050, v1052, v1053, v1054, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, 3, 399999, 99998, 99999, 4, 400000) :|: v1056 < 100000 && v1050 <= 99998
f_571(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1050, v1052, v1053, v1054, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, 3, 399999, 99998, 99999, 4, 400000) -> f_575(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1050, v1052, v1053, v1054, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, 3, 399999, 99998, 99999, 4, 400000) :|: 0 = 0
f_575(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1050, v1052, v1053, v1054, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, 3, 399999, 99998, 99999, 4, 400000) -> f_579(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1050, v1052, v1053, v1054, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, 3, 399999, 99998, 99999, 4, 400000) :|: TRUE
f_579(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1050, v1052, v1053, v1054, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, 3, 399999, 99998, 99999, 4, 400000) -> f_583(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1050, v1052, v1053, v1054, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, 3, 399999, 99998, 99999, 4, 400000) :|: 0 = 0
f_583(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1050, v1052, v1053, v1054, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, 3, 399999, 99998, 99999, 4, 400000) -> f_587(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1052, v1053, v1050, v1054, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, 3, 399999, 99998, 99999, 4, 400000) :|: 0 = 0
f_587(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1052, v1053, v1050, v1054, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, 3, 399999, 99998, 99999, 4, 400000) -> f_592(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1053, v1050, v1054, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, 3, 399999, 4, 99998, 99999, 400000, 5) :|: v1119 = v1045 + 4 * v1056 && 5 <= v1119
f_592(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1053, v1050, v1054, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_597(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1050, v1054, v1053, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, 3, 399999, 4, 99998, 99999, 400000, 5) :|: TRUE
f_597(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1050, v1054, v1053, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_601(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1050, v1054, v1053, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, 3, 399999, 4, 99998, 99999, 400000, 5) :|: 0 = 0
f_601(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1050, v1054, v1053, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_605(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1054, v1053, 0, v1050, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, 3, 399999, 4, 99998, 99999, 400000, 5) :|: 0 = 0
f_605(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1054, v1053, 0, v1050, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_608(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1192, v1053, 0, v1050, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) :|: v1192 = v1046 + 4 * v1056 && 5 <= v1192
f_608(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1192, v1053, 0, v1050, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_612(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1192, v1193, 0, v1050, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) :|: TRUE
f_612(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1192, v1193, 0, v1050, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_616(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1192, v1193, 0, v1050, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) :|: v1155 != v1193
f_612(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1192, v1193, 0, v1050, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_617(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1193, v1192, 0, v1050, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) :|: v1155 = v1193
f_616(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1192, v1193, 0, v1050, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_621(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1192, v1193, v1050, v1057, v1058, v1059, v1060, v1061, v1062, 0, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) :|: 0 = 0
f_621(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1192, v1193, v1050, v1057, v1058, v1059, v1060, v1061, v1062, 0, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_626(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1192, v1193, v1050, v1057, v1058, v1059, v1060, v1061, v1062, 0, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) :|: TRUE
f_626(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1192, v1193, v1050, v1057, v1058, v1059, v1060, v1061, v1062, 0, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_664(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1155, v1192, v1193, v1050, v1057, v1058, v1059, v1060, v1061, v1062, 0, v1063, v1064, v1065, 3, 399999, 4, 99999, 5, 99998, 400000) :|: TRUE
f_664(v1336, v1337, v1338, v1339, v1340, v1341, v1342, 1, v1344, v1345, v1346, v1347, v1348, v1349, v1350, v1351, v1352, v1353, v1354, 0, v1356, v1357, v1358, 3, 399999, 4, 99999, 5, 99998, 400000) -> f_668(v1336, v1337, v1338, v1339, v1340, v1341, v1342, 1, v1344, v1345, v1346, v1347, v1348, v1349, v1350, v1351, v1352, v1353, v1354, 0, v1356, v1357, 3, 399999, 4, 99999, 5, 99998, 400000) :|: TRUE
f_668(v1336, v1337, v1338, v1339, v1340, v1341, v1342, 1, v1344, v1345, v1346, v1347, v1348, v1349, v1350, v1351, v1352, v1353, v1354, 0, v1356, v1357, 3, 399999, 4, 99999, 5, 99998, 400000) -> f_672(v1336, v1337, v1338, v1339, v1340, v1341, v1342, 1, v1344, v1345, v1346, v1347, v1348, v1349, v1350, v1351, v1352, v1353, v1354, 0, v1356, v1357, 3, 399999, 4, 99999, 5, 99998, 400000) :|: TRUE
f_672(v1336, v1337, v1338, v1339, v1340, v1341, v1342, 1, v1344, v1345, v1346, v1347, v1348, v1349, v1350, v1351, v1352, v1353, v1354, 0, v1356, v1357, 3, 399999, 4, 99999, 5, 99998, 400000) -> f_676(v1336, v1337, v1338, v1339, v1340, v1341, v1342, 1, v1344, v1345, v1346, v1347, v1349, v1350, v1351, v1352, v1353, v1354, 0, v1356, v1357, 3, 399999, 4, 99999, 5, 400000) :|: 0 = 0
f_676(v1336, v1337, v1338, v1339, v1340, v1341, v1342, 1, v1344, v1345, v1346, v1347, v1349, v1350, v1351, v1352, v1353, v1354, 0, v1356, v1357, 3, 399999, 4, 99999, 5, 400000) -> f_680(v1336, v1337, v1338, v1339, v1340, v1341, v1342, 1, v1344, v1345, v1346, v1347, v1423, v1349, v1350, v1351, v1352, v1353, v1354, 0, v1356, v1357, 3, 399999, 4, 99999, 5, 400000, 2, 100000) :|: v1423 = 1 + v1342 && 2 <= v1423 && v1423 <= 100000
f_680(v1336, v1337, v1338, v1339, v1340, v1341, v1342, 1, v1344, v1345, v1346, v1347, v1423, v1349, v1350, v1351, v1352, v1353, v1354, 0, v1356, v1357, 3, 399999, 4, 99999, 5, 400000, 2, 100000) -> f_684(v1336, v1337, v1338, v1339, v1340, v1341, v1342, 1, v1344, v1345, v1346, v1347, v1423, v1349, v1350, v1351, v1352, v1353, v1354, 0, v1356, v1357, 3, 399999, 4, 99999, 5, 400000, 2, 100000) :|: TRUE
f_684(v1336, v1337, v1338, v1339, v1340, v1341, v1342, 1, v1344, v1345, v1346, v1347, v1423, v1349, v1350, v1351, v1352, v1353, v1354, 0, v1356, v1357, 3, 399999, 4, 99999, 5, 400000, 2, 100000) -> f_687(v1336, v1337, v1338, v1339, v1340, v1341, v1342, 1, v1344, v1345, v1346, v1347, v1423, v1349, v1350, v1351, v1352, v1353, v1354, 0, v1356, v1357, 3, 399999, 4, 99999, 5, 400000, 2, 100000) :|: TRUE
f_687(v1336, v1337, v1338, v1339, v1340, v1341, v1342, 1, v1344, v1345, v1346, v1347, v1423, v1349, v1350, v1351, v1352, v1353, v1354, 0, v1356, v1357, 3, 399999, 4, 99999, 5, 400000, 2, 100000) -> f_604(v1336, v1337, v1338, v1339, v1340, v1341, v1342, 1, v1344, v1345, v1346, v1347, v1423, v1349, v1350, v1351, v1352, v1353, v1354, 0, v1356, v1357, 3, 399999, 99999, 100000, 4, 400000) :|: TRUE
f_604(v1158, v1159, v1160, v1161, v1162, v1163, v1164, 1, v1166, v1167, v1168, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, 3, 399999, 99999, 100000, 4, 400000) -> f_607(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1164, v1166, v1167, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, 3, 399999, 99999, 100000, 4, 400000) :|: 0 = 0
f_607(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1164, v1166, v1167, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, 3, 399999, 99999, 100000, 4, 400000) -> f_610(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1164, v1166, v1167, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, 3, 399999, 99998, 99999, 4, 400000) :|: v1170 < 100000 && v1164 <= 99998
f_610(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1164, v1166, v1167, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, 3, 399999, 99998, 99999, 4, 400000) -> f_614(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1164, v1166, v1167, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, 3, 399999, 99998, 99999, 4, 400000) :|: 0 = 0
f_614(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1164, v1166, v1167, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, 3, 399999, 99998, 99999, 4, 400000) -> f_619(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1164, v1166, v1167, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, 3, 399999, 99998, 99999, 4, 400000) :|: TRUE
f_619(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1164, v1166, v1167, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, 3, 399999, 99998, 99999, 4, 400000) -> f_624(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1164, v1166, v1167, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, 3, 399999, 99998, 99999, 4, 400000) :|: 0 = 0
f_624(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1164, v1166, v1167, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, 3, 399999, 99998, 99999, 4, 400000) -> f_629(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1166, v1167, v1164, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, 3, 399999, 99998, 99999, 4, 400000) :|: 0 = 0
f_629(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1166, v1167, v1164, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, 3, 399999, 99998, 99999, 4, 400000) -> f_634(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1167, v1164, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, 3, 399999, 4, 99998, 99999, 400000, 5) :|: v1227 = v1159 + 4 * v1170 && 5 <= v1227
f_634(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1167, v1164, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_639(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1164, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, 3, 399999, 4, 99998, 99999, 400000, 5) :|: TRUE
f_639(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1164, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_643(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1164, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, 3, 399999, 4, 99998, 99999, 400000, 5) :|: 0 = 0
f_643(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1164, v1168, v1169, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_647(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1168, v1169, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, 3, 399999, 4, 99998, 99999, 400000, 5) :|: 0 = 0
f_647(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1168, v1169, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_650(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1299, v1169, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, v1168, 3, 399999, 4, 99998, 99999, 400000, 5) :|: v1299 = v1160 + 4 * v1170 && 5 <= v1299
f_650(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1299, v1169, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, v1168, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_653(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1299, v1334, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99998, 99999, 400000, 5) :|: TRUE
f_653(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1299, v1334, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_655(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1299, v1334, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99998, 99999, 400000, 5) :|: v1260 != v1334
f_653(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1299, v1334, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_656(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1334, v1299, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99998, 99999, 400000, 5) :|: v1260 = v1334
f_655(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1299, v1334, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_659(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1299, v1334, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99998, 99999, 400000, 5) :|: 0 = 0
f_659(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1299, v1334, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_663(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1299, v1334, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99998, 99999, 400000, 5) :|: TRUE
f_663(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1299, v1334, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_664(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1260, v1299, v1334, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, 0, 3, 399999, 4, 99999, 5, 99998, 400000) :|: TRUE
f_656(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1334, v1299, v1164, v1171, v1172, v1173, v1174, v1175, v1176, 0, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_660(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1334, v1299, 0, v1164, v1171, v1172, v1173, v1174, v1175, v1176, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99998, 99999, 400000, 5) :|: 0 = 0
f_660(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1334, v1299, 0, v1164, v1171, v1172, v1173, v1174, v1175, v1176, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_665(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1334, v1299, 0, v1164, v1171, v1172, v1173, v1174, v1175, v1176, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99998, 99999, 400000, 5) :|: TRUE
f_665(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1334, v1299, 0, v1164, v1171, v1172, v1173, v1174, v1175, v1176, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_669(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1334, v1299, 0, v1171, v1172, v1173, v1174, v1175, v1176, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99999, 400000, 5) :|: 0 = 0
f_669(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1334, v1299, 0, v1171, v1172, v1173, v1174, v1175, v1176, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99999, 400000, 5) -> f_673(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1334, v1299, 0, v1417, v1171, v1172, v1173, v1174, v1175, v1176, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99999, 400000, 5, 2, 100000) :|: v1417 = 1 + v1170 && 2 <= v1417 && v1417 <= 100000
f_673(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1334, v1299, 0, v1417, v1171, v1172, v1173, v1174, v1175, v1176, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99999, 400000, 5, 2, 100000) -> f_677(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1334, v1299, 0, v1417, v1171, v1172, v1173, v1174, v1175, v1176, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99999, 400000, 5, 2, 100000) :|: TRUE
f_677(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1334, v1299, 0, v1417, v1171, v1172, v1173, v1174, v1175, v1176, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99999, 400000, 5, 2, 100000) -> f_681(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1334, v1299, 0, v1417, v1171, v1172, v1173, v1174, v1175, v1176, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99999, 400000, 5, 2, 100000) :|: TRUE
f_681(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1334, v1299, 0, v1417, v1171, v1172, v1173, v1174, v1175, v1176, v1178, v1179, v1166, v1167, v1168, v1169, 3, 399999, 4, 99999, 400000, 5, 2, 100000) -> f_566(v1158, v1159, v1160, v1161, v1162, v1163, v1170, 1, v1227, v1334, v1299, 0, v1417, v1171, v1172, v1173, v1174, v1175, v1176, v1178, v1179, 0, 3, 399999, 99999, 100000, 4, 400000) :|: TRUE
f_566(v1044, v1045, v1046, v1047, v1048, v1049, v1050, 1, v1052, v1053, v1054, 0, v1056, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, 3, 399999, 99999, 100000, 4, 400000) -> f_568(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1050, v1052, v1053, v1054, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, 3, 399999, 99999, 100000, 4, 400000) :|: 0 = 0
f_617(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1193, v1192, 0, v1050, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_622(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1193, v1192, 0, v1050, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) :|: 0 = 0
f_622(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1193, v1192, 0, v1050, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_627(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1193, v1192, 0, v1050, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) :|: TRUE
f_627(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1193, v1192, 0, v1050, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_632(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1193, v1192, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99999, 400000, 5) :|: 0 = 0
f_632(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1193, v1192, 0, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99999, 400000, 5) -> f_637(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1193, v1192, 0, v1259, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99999, 400000, 5, 2, 100000) :|: v1259 = 1 + v1056 && 2 <= v1259 && v1259 <= 100000
f_637(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1193, v1192, 0, v1259, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99999, 400000, 5, 2, 100000) -> f_641(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1193, v1192, 0, v1259, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99999, 400000, 5, 2, 100000) :|: TRUE
f_641(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1193, v1192, 0, v1259, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99999, 400000, 5, 2, 100000) -> f_645(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1193, v1192, 0, v1259, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99999, 400000, 5, 2, 100000) :|: TRUE
f_645(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1193, v1192, 0, v1259, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1052, v1053, v1054, 3, 399999, 4, 99999, 400000, 5, 2, 100000) -> f_566(v1044, v1045, v1046, v1047, v1048, v1049, v1056, 1, v1119, v1193, v1192, 0, v1259, v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065, 3, 399999, 99999, 100000, 4, 400000) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_653(v1158:0, v1159:0, v1160:0, v1161:0, v1162:0, v1163:0, v1170:0, 1, v1227:0, v1260:0, v1299:0, v1334:0, v1164:0, v1171:0, v1172:0, v1173:0, v1174:0, v1175:0, v1176:0, 0, v1178:0, v1179:0, v1166:0, v1167:0, v1168:0, v1169:0, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_653(v1158:0, v1159:0, v1160:0, v1161:0, v1162:0, v1163:0, 1 + v1170:0, 1, v1159:0 + 4 * (1 + v1170:0), v1260:1, v1160:0 + 4 * (1 + v1170:0), v1334:1, v1170:0, v1171:0, v1172:0, v1173:0, v1174:0, v1175:0, v1176:0, 0, v1178:0, v1179:0, v1227:0, v1260:0, v1299:0, v1334:0, 3, 399999, 4, 99998, 99999, 400000, 5) :|: v1170:0 > 0 && v1170:0 < 100000 && v1170:0 < 99999 && v1159:0 + 4 * (1 + v1170:0) > 4 && v1334:0 > v1260:0 && v1160:0 + 4 * (1 + v1170:0) > 4
f_653(v1158:0, v1159:0, v1160:0, v1161:0, v1162:0, v1163:0, v1170:0, 1, v1227:0, v1260:0, v1299:0, v1334:0, v1164:0, v1171:0, v1172:0, v1173:0, v1174:0, v1175:0, v1176:0, 0, v1178:0, v1179:0, v1166:0, v1167:0, v1168:0, v1169:0, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_653(v1158:0, v1159:0, v1160:0, v1161:0, v1162:0, v1163:0, 1 + v1170:0, 1, v1159:0 + 4 * (1 + v1170:0), v1260:1, v1160:0 + 4 * (1 + v1170:0), v1334:1, v1170:0, v1171:0, v1172:0, v1173:0, v1174:0, v1175:0, v1176:0, 0, v1178:0, v1179:0, v1227:0, v1260:0, v1299:0, v1334:0, 3, 399999, 4, 99998, 99999, 400000, 5) :|: v1170:0 > 0 && v1170:0 < 100000 && v1170:0 < 99999 && v1159:0 + 4 * (1 + v1170:0) > 4 && v1334:0 < v1260:0 && v1160:0 + 4 * (1 + v1170:0) > 4
f_568(v1044:0, v1045:0, v1046:0, v1047:0, v1048:0, v1049:0, v1056:0, 1, v1050:0, v1052:0, v1053:0, v1054:0, 0, v1057:0, v1058:0, v1059:0, v1060:0, v1061:0, v1062:0, v1063:0, v1064:0, v1065:0, 3, 399999, 99999, 100000, 4, 400000) -> f_653(v1044:0, v1045:0, v1046:0, v1047:0, v1048:0, v1049:0, 1 + v1056:0, 1, v1045:0 + 4 * (1 + v1056:0), v1260:0, v1046:0 + 4 * (1 + v1056:0), v1334:0, v1056:0, v1057:0, v1058:0, v1059:0, v1060:0, v1061:0, v1062:0, 0, v1063:0, v1064:0, v1045:0 + 4 * v1056:0, v1155:0, v1046:0 + 4 * v1056:0, v1193:0, 3, 399999, 4, 99998, 99999, 400000, 5) :|: v1050:0 < 99999 && v1056:0 < 100000 && v1045:0 + 4 * v1056:0 > 4 && v1046:0 + 4 * v1056:0 > 4 && v1193:0 > v1155:0 && v1056:0 > 0 && v1056:0 < 99999 && v1046:0 + 4 * (1 + v1056:0) > 4 && v1045:0 + 4 * (1 + v1056:0) > 4
f_568(v1044:0, v1045:0, v1046:0, v1047:0, v1048:0, v1049:0, v1056:0, 1, v1050:0, v1052:0, v1053:0, v1054:0, 0, v1057:0, v1058:0, v1059:0, v1060:0, v1061:0, v1062:0, v1063:0, v1064:0, v1065:0, 3, 399999, 99999, 100000, 4, 400000) -> f_653(v1044:0, v1045:0, v1046:0, v1047:0, v1048:0, v1049:0, 1 + v1056:0, 1, v1045:0 + 4 * (1 + v1056:0), v1260:0, v1046:0 + 4 * (1 + v1056:0), v1334:0, v1056:0, v1057:0, v1058:0, v1059:0, v1060:0, v1061:0, v1062:0, 0, v1063:0, v1064:0, v1045:0 + 4 * v1056:0, v1155:0, v1046:0 + 4 * v1056:0, v1193:0, 3, 399999, 4, 99998, 99999, 400000, 5) :|: v1050:0 < 99999 && v1056:0 < 100000 && v1045:0 + 4 * v1056:0 > 4 && v1046:0 + 4 * v1056:0 > 4 && v1193:0 < v1155:0 && v1056:0 > 0 && v1056:0 < 99999 && v1046:0 + 4 * (1 + v1056:0) > 4 && v1045:0 + 4 * (1 + v1056:0) > 4
f_568(v1044:0, v1045:0, v1046:0, v1047:0, v1048:0, v1049:0, v1056:0, 1, v1050:0, v1052:0, v1053:0, v1054:0, 0, v1057:0, v1058:0, v1059:0, v1060:0, v1061:0, v1062:0, v1063:0, v1064:0, v1065:0, 3, 399999, 99999, 100000, 4, 400000) -> f_568(v1044:0, v1045:0, v1046:0, v1047:0, v1048:0, v1049:0, 1 + v1056:0, 1, v1056:0, v1045:0 + 4 * v1056:0, v1155:0, v1046:0 + 4 * v1056:0, 0, v1057:0, v1058:0, v1059:0, v1060:0, v1061:0, v1062:0, v1063:0, v1064:0, v1065:0, 3, 399999, 99999, 100000, 4, 400000) :|: v1050:0 < 99999 && v1056:0 < 100000 && v1045:0 + 4 * v1056:0 > 4 && v1046:0 + 4 * v1056:0 > 4 && v1056:0 > 0
f_653(v1158:0, v1159:0, v1160:0, v1161:0, v1162:0, v1163:0, v1170:0, 1, v1227:0, v1260:0, v1299:0, v1260:0, v1164:0, v1171:0, v1172:0, v1173:0, v1174:0, v1175:0, v1176:0, 0, v1178:0, v1179:0, v1166:0, v1167:0, v1168:0, v1169:0, 3, 399999, 4, 99998, 99999, 400000, 5) -> f_568(v1158:0, v1159:0, v1160:0, v1161:0, v1162:0, v1163:0, 1 + v1170:0, 1, v1170:0, v1227:0, v1260:0, v1299:0, 0, v1171:0, v1172:0, v1173:0, v1174:0, v1175:0, v1176:0, v1178:0, v1179:0, 0, 3, 399999, 99999, 100000, 4, 400000) :|: v1170:0 < 100000 && v1170:0 > 0
Filtered unneeded arguments:
   f_653(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) -> f_653(x2, x3, x7, x10, x12)
   f_568(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_568(x2, x3, x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_653(v1159:0, v1160:0, v1170:0, v1260:0, v1334:0) -> f_653(v1159:0, v1160:0, 1 + v1170:0, v1260:1, v1334:1) :|: v1170:0 < 100000 && v1170:0 > 0 && v1170:0 < 99999 && v1159:0 + (4 + 4 * v1170:0) > 4 && v1160:0 + (4 + 4 * v1170:0) > 4 && v1334:0 > v1260:0
f_653(v1159:0, v1160:0, v1170:0, v1260:0, v1334:0) -> f_653(v1159:0, v1160:0, 1 + v1170:0, v1260:1, v1334:1) :|: v1170:0 < 100000 && v1170:0 > 0 && v1170:0 < 99999 && v1159:0 + (4 + 4 * v1170:0) > 4 && v1160:0 + (4 + 4 * v1170:0) > 4 && v1334:0 < v1260:0
f_568(v1045:0, v1046:0, v1056:0, v1050:0) -> f_653(v1045:0, v1046:0, 1 + v1056:0, v1260:0, v1334:0) :|: v1056:0 < 100000 && v1050:0 < 99999 && v1045:0 + 4 * v1056:0 > 4 && v1046:0 + 4 * v1056:0 > 4 && v1056:0 > 0 && v1056:0 < 99999 && v1045:0 + (4 + 4 * v1056:0) > 4 && v1046:0 + (4 + 4 * v1056:0) > 4
f_568(v1045:0, v1046:0, v1056:0, v1050:0) -> f_568(v1045:0, v1046:0, 1 + v1056:0, v1056:0) :|: v1056:0 < 100000 && v1050:0 < 99999 && v1045:0 + 4 * v1056:0 > 4 && v1056:0 > 0 && v1046:0 + 4 * v1056:0 > 4
f_653(v1159:0, v1160:0, v1170:0, v1260:0, v1260:01) -> f_568(v1159:0, v1160:0, 1 + v1170:0, v1170:0) :|: v1170:0 < 100000 && v1170:0 > 0 && v1260:0 = v1260:01

----------------------------------------

(16)
Obligation:
Rules:
f_653(v1159:0, v1160:0, v1170:0, v1260:0, v1334:0) -> f_653(v1159:0, v1160:0, 1 + v1170:0, v1260:1, v1334:1) :|: v1170:0 < 100000 && v1170:0 > 0 && v1170:0 < 99999 && v1159:0 + (4 + 4 * v1170:0) > 4 && v1160:0 + (4 + 4 * v1170:0) > 4 && v1334:0 > v1260:0
f_653(x, x1, x2, x3, x4) -> f_653(x, x1, 1 + x2, x5, x6) :|: x2 < 100000 && x2 > 0 && x2 < 99999 && x + (4 + 4 * x2) > 4 && x1 + (4 + 4 * x2) > 4 && x4 < x3
f_568(x7, x8, x9, x10) -> f_653(x7, x8, 1 + x9, x11, x12) :|: x9 < 100000 && x10 < 99999 && x7 + 4 * x9 > 4 && x8 + 4 * x9 > 4 && x9 > 0 && x9 < 99999 && x7 + (4 + 4 * x9) > 4 && x8 + (4 + 4 * x9) > 4
f_568(v1045:0, v1046:0, v1056:0, v1050:0) -> f_568(v1045:0, v1046:0, 1 + v1056:0, v1056:0) :|: v1056:0 < 100000 && v1050:0 < 99999 && v1045:0 + 4 * v1056:0 > 4 && v1056:0 > 0 && v1046:0 + 4 * v1056:0 > 4
f_653(x13, x14, x15, x16, x17) -> f_568(x13, x14, 1 + x15, x15) :|: x15 < 100000 && x15 > 0 && x16 = x17

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_653(v1159:0:0, v1160:0:0, v1170:0:0, v1260:0:0, v1334:0:0) -> f_653(v1159:0:0, v1160:0:0, 1 + v1170:0:0, v1260:1:0, v1334:1:0) :|: v1160:0:0 + (4 + 4 * v1170:0:0) > 4 && v1334:0:0 > v1260:0:0 && v1159:0:0 + (4 + 4 * v1170:0:0) > 4 && v1170:0:0 < 99999 && v1170:0:0 > 0 && v1170:0:0 < 100000
f_568(x7:0, x8:0, x9:0, x10:0) -> f_653(x7:0, x8:0, 1 + x9:0, x11:0, x12:0) :|: x7:0 + (4 + 4 * x9:0) > 4 && x8:0 + (4 + 4 * x9:0) > 4 && x9:0 < 99999 && x9:0 > 0 && x8:0 + 4 * x9:0 > 4 && x7:0 + 4 * x9:0 > 4 && x10:0 < 99999 && x9:0 < 100000
f_568(v1045:0:0, v1046:0:0, v1056:0:0, v1050:0:0) -> f_568(v1045:0:0, v1046:0:0, 1 + v1056:0:0, v1056:0:0) :|: v1056:0:0 > 0 && v1046:0:0 + 4 * v1056:0:0 > 4 && v1045:0:0 + 4 * v1056:0:0 > 4 && v1050:0:0 < 99999 && v1056:0:0 < 100000
f_653(x13:0, x14:0, x15:0, x16:0, x16:01) -> f_568(x13:0, x14:0, 1 + x15:0, x15:0) :|: x15:0 < 100000 && x15:0 > 0 && x16:0 = x16:01
f_653(x:0, x1:0, x2:0, x3:0, x4:0) -> f_653(x:0, x1:0, 1 + x2:0, x5:0, x6:0) :|: x1:0 + (4 + 4 * x2:0) > 4 && x4:0 < x3:0 && x:0 + (4 + 4 * x2:0) > 4 && x2:0 < 99999 && x2:0 > 0 && x2:0 < 100000

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_653(x, x1, x2, x3, x4)] = 1999822506337413 + x + 2499812505*x1 - 9999400009*x2
[f_568(x5, x6, x7, x8)] = 1999832506037414 + x5 + 2499812505*x6 - 9999500006*x7 - 99998*x8

The following rules are decreasing:
f_653(v1159:0:0, v1160:0:0, v1170:0:0, v1260:0:0, v1334:0:0) -> f_653(v1159:0:0, v1160:0:0, 1 + v1170:0:0, v1260:1:0, v1334:1:0) :|: v1160:0:0 + (4 + 4 * v1170:0:0) > 4 && v1334:0:0 > v1260:0:0 && v1159:0:0 + (4 + 4 * v1170:0:0) > 4 && v1170:0:0 < 99999 && v1170:0:0 > 0 && v1170:0:0 < 100000
f_653(x:0, x1:0, x2:0, x3:0, x4:0) -> f_653(x:0, x1:0, 1 + x2:0, x5:0, x6:0) :|: x1:0 + (4 + 4 * x2:0) > 4 && x4:0 < x3:0 && x:0 + (4 + 4 * x2:0) > 4 && x2:0 < 99999 && x2:0 > 0 && x2:0 < 100000
The following rules are bounded:
f_653(v1159:0:0, v1160:0:0, v1170:0:0, v1260:0:0, v1334:0:0) -> f_653(v1159:0:0, v1160:0:0, 1 + v1170:0:0, v1260:1:0, v1334:1:0) :|: v1160:0:0 + (4 + 4 * v1170:0:0) > 4 && v1334:0:0 > v1260:0:0 && v1159:0:0 + (4 + 4 * v1170:0:0) > 4 && v1170:0:0 < 99999 && v1170:0:0 > 0 && v1170:0:0 < 100000
f_568(x7:0, x8:0, x9:0, x10:0) -> f_653(x7:0, x8:0, 1 + x9:0, x11:0, x12:0) :|: x7:0 + (4 + 4 * x9:0) > 4 && x8:0 + (4 + 4 * x9:0) > 4 && x9:0 < 99999 && x9:0 > 0 && x8:0 + 4 * x9:0 > 4 && x7:0 + 4 * x9:0 > 4 && x10:0 < 99999 && x9:0 < 100000
f_653(x:0, x1:0, x2:0, x3:0, x4:0) -> f_653(x:0, x1:0, 1 + x2:0, x5:0, x6:0) :|: x1:0 + (4 + 4 * x2:0) > 4 && x4:0 < x3:0 && x:0 + (4 + 4 * x2:0) > 4 && x2:0 < 99999 && x2:0 > 0 && x2:0 < 100000

----------------------------------------

(20)
Obligation:
Rules:
f_568(x7:0, x8:0, x9:0, x10:0) -> f_653(x7:0, x8:0, 1 + x9:0, x11:0, x12:0) :|: x7:0 + (4 + 4 * x9:0) > 4 && x8:0 + (4 + 4 * x9:0) > 4 && x9:0 < 99999 && x9:0 > 0 && x8:0 + 4 * x9:0 > 4 && x7:0 + 4 * x9:0 > 4 && x10:0 < 99999 && x9:0 < 100000
f_568(v1045:0:0, v1046:0:0, v1056:0:0, v1050:0:0) -> f_568(v1045:0:0, v1046:0:0, 1 + v1056:0:0, v1056:0:0) :|: v1056:0:0 > 0 && v1046:0:0 + 4 * v1056:0:0 > 4 && v1045:0:0 + 4 * v1056:0:0 > 4 && v1050:0:0 < 99999 && v1056:0:0 < 100000
f_653(x13:0, x14:0, x15:0, x16:0, x16:01) -> f_568(x13:0, x14:0, 1 + x15:0, x15:0) :|: x15:0 < 100000 && x15:0 > 0 && x16:0 = x16:01

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_568(x7:0:0, x8:0:0, x9:0:0, x10:0:0) -> f_568(x7:0:0, x8:0:0, 1 + (1 + x9:0:0), 1 + x9:0:0) :|: x10:0:0 < 99999 && x9:0:0 < 100000 && x7:0:0 + 4 * x9:0:0 > 4 && x8:0:0 + 4 * x9:0:0 > 4 && x9:0:0 < 99999 && x7:0:0 + (4 + 4 * x9:0:0) > 4 && x9:0:0 > 0 && x8:0:0 + (4 + 4 * x9:0:0) > 4
f_568(v1045:0:0:0, v1046:0:0:0, v1056:0:0:0, v1050:0:0:0) -> f_568(v1045:0:0:0, v1046:0:0:0, 1 + v1056:0:0:0, v1056:0:0:0) :|: v1050:0:0:0 < 99999 && v1056:0:0:0 < 100000 && v1045:0:0:0 + 4 * v1056:0:0:0 > 4 && v1046:0:0:0 + 4 * v1056:0:0:0 > 4 && v1056:0:0:0 > 0

----------------------------------------

(23) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_568 ] = -1*f_568_3

The following rules are decreasing:
f_568(x7:0:0, x8:0:0, x9:0:0, x10:0:0) -> f_568(x7:0:0, x8:0:0, 1 + (1 + x9:0:0), 1 + x9:0:0) :|: x10:0:0 < 99999 && x9:0:0 < 100000 && x7:0:0 + 4 * x9:0:0 > 4 && x8:0:0 + 4 * x9:0:0 > 4 && x9:0:0 < 99999 && x7:0:0 + (4 + 4 * x9:0:0) > 4 && x9:0:0 > 0 && x8:0:0 + (4 + 4 * x9:0:0) > 4
f_568(v1045:0:0:0, v1046:0:0:0, v1056:0:0:0, v1050:0:0:0) -> f_568(v1045:0:0:0, v1046:0:0:0, 1 + v1056:0:0:0, v1056:0:0:0) :|: v1050:0:0:0 < 99999 && v1056:0:0:0 < 100000 && v1045:0:0:0 + 4 * v1056:0:0:0 > 4 && v1046:0:0:0 + 4 * v1056:0:0:0 > 4 && v1056:0:0:0 > 0

The following rules are bounded:
f_568(x7:0:0, x8:0:0, x9:0:0, x10:0:0) -> f_568(x7:0:0, x8:0:0, 1 + (1 + x9:0:0), 1 + x9:0:0) :|: x10:0:0 < 99999 && x9:0:0 < 100000 && x7:0:0 + 4 * x9:0:0 > 4 && x8:0:0 + 4 * x9:0:0 > 4 && x9:0:0 < 99999 && x7:0:0 + (4 + 4 * x9:0:0) > 4 && x9:0:0 > 0 && x8:0:0 + (4 + 4 * x9:0:0) > 4
f_568(v1045:0:0:0, v1046:0:0:0, v1056:0:0:0, v1050:0:0:0) -> f_568(v1045:0:0:0, v1046:0:0:0, 1 + v1056:0:0:0, v1056:0:0:0) :|: v1050:0:0:0 < 99999 && v1056:0:0:0 < 100000 && v1045:0:0:0 + 4 * v1056:0:0:0 > 4 && v1046:0:0:0 + 4 * v1056:0:0:0 > 4 && v1056:0:0:0 > 0


----------------------------------------

(24)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
