YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Bao3H.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 792 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [SOUND, 100 ms]
(6) IntTRS
(7) IRSToKoat [EQUIVALENT, 0 ms]
(8) Koat Problem
(9) KoAT2 [EQUIVALENT, 63 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Bao3H.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Bao3H.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "quot" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store 0, %6
		%7 = load %4
		%8 = icmp eq %7 0
		br %8, %9, %10
	9:
		store 0, %3
		br %29
	10:
		br %11
	11:
		%12 = load %4
		%13 = icmp sgt %12 0
		br %13, %14, %17
	14:
		%15 = load %5
		%16 = icmp sgt %15 0
		br %17
	17:
		%18 = phi [0, %11], [%16, %14]
		br %18, %19, %27
	19:
		%20 = load %6
		%21 = add i32 %20, 1
		store %21, %6
		%22 = load %4
		%23 = sub i32 %22, 1
		%24 = load %5
		%25 = sub i32 %24, 1
		%26 = sub i32 %23, %25
		store %26, %4
		br %11
	27:
		%28 = load %6
		store %28, %3
		br %29
	29:
		%30 = load %3
		ret %30

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 43
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @quot(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 97 rulesP rules:
f_140 -> f_141(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_141(v1, v2, 3, 1, 4) -> f_142(v1, v2, 0, 3, 1, 4) :|: TRUE
f_142(v1, v2, 0, 3, 1, 4) -> f_143(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_143(v1, v3, v2, 0, 3, 1, 4) -> f_144(v1, v3, v4, v2, 0, 3, 1, 4) :|: TRUE
f_144(v1, v3, v4, v2, 0, 3, 1, 4) -> f_145(v3, v4, v1, v2, 0, 3, 1, 4) :|: 0 = 0
f_145(v3, v4, v1, v2, 0, 3, 1, 4) -> f_146(v3, v4, v5, v1, v2, v6, 0, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_146(v3, v4, v5, v1, v2, v6, 0, 3, 1, 4) -> f_147(v3, v4, v5, v7, v1, v2, v6, v8, 0, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_147(v3, v4, v5, v7, v1, v2, v6, v8, 0, 3, 1, 4) -> f_148(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: 1 <= v9 && v10 = 3 + v9 && 4 <= v10
f_148(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_149(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) :|: 1 <= v11 && v12 = 3 + v11 && 4 <= v12
f_149(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) -> f_150(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_150(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) -> f_151(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_151(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) -> f_152(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_152(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) -> f_153(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_153(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) -> f_154(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_154(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) -> f_155(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_155(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) -> f_156(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) :|: 0 = 0
f_156(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) -> f_157(0, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 3, 1, 4) :|: v3 = 0
f_156(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) -> f_158(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) :|: v3 != 0
f_157(0, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 3, 1, 4) -> f_159(0, v4, v5, v7, v9, v11, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_158(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 1, 4) -> f_160(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_159(0, v4, v5, v7, v9, v11, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_161(0, v4, v5, v7, v9, v11, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: TRUE
f_160(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) -> f_162(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) :|: TRUE
f_161(0, v4, v5, v7, v9, v11, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_163(0, v4, v5, v7, v9, v11, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: TRUE
f_162(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) -> f_164(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) :|: TRUE
f_163(0, v4, v5, v7, v9, v11, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_165(0, v4, v5, v7, v9, v11, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: TRUE
f_164(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) -> f_166(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_165(0, v4, v5, v7, v9, v11, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_167(0, v4, v5, v7, v9, v11, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_166(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) -> f_168(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) :|: 0 < v3
f_166(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) -> f_169(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) :|: v3 <= 0
f_167(0, v4, v5, v7, v9, v11, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_170(v1, 0, v4, v2, 3, 1, 4) :|: 0 = 0
f_168(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) -> f_171(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_169(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) -> f_172(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_171(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_173(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: TRUE
f_172(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) -> f_174(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_173(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_175(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_174(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) -> f_176(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) :|: TRUE
f_175(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_177(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: 0 < v4
f_175(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_178(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: v4 <= 0
f_176(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) -> f_179(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_177(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_180(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_178(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_181(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_179(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) -> f_182(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) :|: TRUE
f_180(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_183(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_181(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_184(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_182(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) -> f_185(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) :|: TRUE
f_183(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_186(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: TRUE
f_184(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_187(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: TRUE
f_185(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) -> f_188(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_186(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_189(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_187(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_190(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_188(v3, v4, v5, v7, v9, v11, 0, v1, v2, v6, v8, v10, v12, 3, 1, 4) -> f_191(v1, v3, v4, 0, v2, 3, 1, 4) :|: 0 = 0
f_189(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_192(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_190(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_193(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: TRUE
f_192(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_194(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: TRUE
f_193(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_195(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: TRUE
f_194(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_196(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_195(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_197(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_196(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_198(v3, v4, v5, v7, v9, v11, 0, 1, v16, v1, v2, v6, v8, v10, v12, 3, 4) :|: 1 + v16 = v3 && 0 <= v16
f_197(v3, v4, v5, v7, v9, v11, 0, 1, v1, v2, v6, v8, v10, v12, 3, 4) -> f_199(v1, v3, v4, 0, v2, 3, 1, 4) :|: 0 = 0
f_198(v3, v4, v5, v7, v9, v11, 0, 1, v16, v1, v2, v6, v8, v10, v12, 3, 4) -> f_200(v3, v4, v5, v7, v9, v11, 0, 1, v16, v1, v2, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_200(v3, v4, v5, v7, v9, v11, 0, 1, v16, v1, v2, v6, v8, v10, v12, 3, 4) -> f_201(v3, v4, v5, v7, v9, v11, 0, 1, v16, v17, v1, v2, v6, v8, v10, v12, 3, 4) :|: 1 + v17 = v4 && 0 <= v17
f_201(v3, v4, v5, v7, v9, v11, 0, 1, v16, v17, v1, v2, v6, v8, v10, v12, 3, 4) -> f_202(v3, v4, v5, v7, v9, v11, 0, 1, v16, v17, v18, v1, v2, v6, v8, v10, v12, 3, 4) :|: v18 + v17 = v16
f_202(v3, v4, v5, v7, v9, v11, 0, 1, v16, v17, v18, v1, v2, v6, v8, v10, v12, 3, 4) -> f_203(v3, v4, v5, v7, v9, v11, 0, 1, v16, v17, v18, v1, v2, v6, v8, v10, v12, 3, 4) :|: TRUE
f_203(v3, v4, v5, v7, v9, v11, 0, 1, v16, v17, v18, v1, v2, v6, v8, v10, v12, 3, 4) -> f_204(v3, v4, v5, v7, v9, v11, 0, 1, v16, v17, v18, v1, v2, v6, v8, v10, v12, 3, 4) :|: TRUE
f_204(v3, v4, v5, v7, v9, v11, 0, 1, v16, v17, v18, v1, v2, v6, v8, v10, v12, 3, 4) -> f_232(v3, v4, v5, v7, v9, v11, 0, v3, 1, 0, 1, v16, v17, v18, v1, v2, v6, v8, v10, v12, 3, 2, 4) :|: TRUE
f_232(v67, v68, v69, v70, v71, v72, 0, v74, 1, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, 3, 2, 4) -> f_260(v67, v68, v69, v70, v71, v72, 0, v74, 1, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, 3, 2, 4) :|: TRUE
f_260(v119, v120, v121, v122, v123, v124, 0, v126, 1, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, 3, 2, 4) -> f_288(v119, v120, v121, v122, v123, v124, 0, v126, 1, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, 3, 4) :|: TRUE
f_288(v171, v172, v173, v174, v175, v176, 0, v178, 1, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 3, 4) -> f_316(v171, v172, v173, v174, v175, v176, 0, v178, 1, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, 3, 4) :|: TRUE
f_316(v223, v224, v225, v226, v227, v228, 0, v230, 1, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, 3, 4) -> f_344(v223, v224, v225, v226, v227, v228, 0, v230, 1, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, 3, 4) :|: TRUE
f_344(v275, v276, v277, v278, v279, v280, 0, v282, 1, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, 3, 4) -> f_345(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) :|: 0 = 0
f_345(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) -> f_346(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) :|: 0 < v288 && 1 <= v286 && 2 <= v282
f_345(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) -> f_347(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) :|: v288 <= 0
f_346(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) -> f_348(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) :|: 0 = 0
f_347(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) -> f_349(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) :|: 0 = 0
f_348(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) -> f_350(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) :|: TRUE
f_349(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) -> f_351(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) :|: 0 = 0
f_350(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) -> f_352(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) :|: 0 = 0
f_351(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) -> f_353(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) :|: TRUE
f_352(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) -> f_354(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) :|: 0 = 0
f_353(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) -> f_355(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) :|: 0 = 0
f_354(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) -> f_356(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) :|: 0 = 0
f_355(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) -> f_357(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) :|: TRUE
f_356(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) -> f_358(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) :|: TRUE
f_357(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) -> f_359(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) :|: TRUE
f_358(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) -> f_360(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) :|: 0 = 0
f_359(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) -> f_361(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) :|: 0 = 0
f_360(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) -> f_362(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) :|: v322 = 1 + v285 && 2 <= v322
f_361(v275, v276, v277, v278, v279, v280, 0, v288, 1, v284, v285, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4) -> f_363(v289, v275, v276, v285, v290, 0, 3, 1, 4) :|: 0 = 0
f_362(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) -> f_364(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) :|: TRUE
f_364(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v282, v286, v287, v289, v290, v291, v292, v293, v294, 3, 2, 4) -> f_365(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4, 2) :|: 0 = 0
f_365(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v286, v287, v289, v290, v291, v292, v293, v294, 3, 4, 2) -> f_366(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v324, v287, v289, v290, v291, v292, v293, v294, 3, 4, 2) :|: 1 + v324 = v288 && 0 <= v324
f_366(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v324, v287, v289, v290, v291, v292, v293, v294, 3, 4, 2) -> f_367(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v324, v287, v289, v290, v291, v292, v293, v294, 3, 4, 2) :|: 0 = 0
f_367(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v324, v287, v289, v290, v291, v292, v293, v294, 3, 4, 2) -> f_368(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v324, v287, v289, v290, v291, v292, v293, v294, 3, 4, 2) :|: 1 + v287 = v276
f_368(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v324, v287, v289, v290, v291, v292, v293, v294, 3, 4, 2) -> f_369(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v324, v287, v325, v289, v290, v291, v292, v293, v294, 3, 4, 2) :|: v325 + v287 = v324
f_369(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v324, v287, v325, v289, v290, v291, v292, v293, v294, 3, 4, 2) -> f_370(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v324, v287, v325, v289, v290, v291, v292, v293, v294, 3, 4, 2) :|: TRUE
f_370(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v324, v287, v325, v289, v290, v291, v292, v293, v294, 3, 4, 2) -> f_371(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v324, v287, v325, v289, v290, v291, v292, v293, v294, 3, 4, 2) :|: TRUE
f_371(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v324, v287, v325, v289, v290, v291, v292, v293, v294, 3, 4, 2) -> f_344(v275, v276, v277, v278, v279, v280, 0, v288, 1, v285, v322, v324, v287, v325, v289, v290, v291, v292, v293, v294, 3, 4) :|: TRUE
Combined rules. Obtained 9 rulesP rules:
f_140 -> f_345(v3:0, v4:0, v5:0, v7:0, v9:0, v11:0, 0, v18:0, 1, 0, 1, v3:0, v16:0, v17:0, v1:0, v2:0, v6:0, v8:0, v10:0, v12:0, 3, 4) :|: FALSE
f_140 -> f_345(1 + (v18:0 + v17:0), 1 + v17:0, v5:0, v7:0, v9:0, v11:0, 0, v18:0, 1, 0, 1, 1 + (v18:0 + v17:0), v18:0 + v17:0, v17:0, v1:0, 3 + v1:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3 + v11:0, 3, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0 && v18:0 + v17:0 > -1 && v17:0 > -1
f_140 -> f_170(v1:0, 0, v4:0, 3 + v1:0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0
f_345(v275:0, v276:0, v277:0, v278:0, v279:0, v280:0, 0, v288:0, 1, v284:0, v285:0, v282:0, v286:0, v287:0, v289:0, v290:0, v291:0, v292:0, v293:0, v294:0, 3, 4) -> f_363(v289:0, v275:0, v276:0, v285:0, v290:0, 0, 3, 1, 4) :|: v288:0 < 1
f_140 -> f_191(v1:0, v3:0, v4:0, 0, 3 + v1:0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0 && v3:0 < 1 && v3:0 < 0
f_140 -> f_191(v1:0, v3:0, v4:0, 0, 3 + v1:0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0 && v3:0 < 1 && v3:0 > 0
f_140 -> f_199(v1:0, v3:0, v4:0, 0, v2:0, 3, 1, 4) :|: FALSE
f_140 -> f_199(v1:0, v3:0, v4:0, 0, 3 + v1:0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0 && v3:0 > 0 && v4:0 < 1
f_345(v275:0, 1 + v287:0, v277:0, v278:0, v279:0, v280:0, 0, 1 + (v325:0 + v287:0), 1, v284:0, v285:0, v282:0, v286:0, v287:0, v289:0, v290:0, v291:0, v292:0, v293:0, v294:0, 3, 4) -> f_345(v275:0, 1 + v287:0, v277:0, v278:0, v279:0, v280:0, 0, v325:0, 1, v285:0, 1 + v285:0, 1 + (v325:0 + v287:0), v325:0 + v287:0, v287:0, v289:0, v290:0, v291:0, v292:0, v293:0, v294:0, 3, 4) :|: v286:0 > 0 && v325:0 + v287:0 > -1 && v282:0 > 1 && v285:0 > 0
Filtered unneeded arguments:
   f_345(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_345(x2, x8, x11, x12, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 9 rules.P rules:
f_140 -> f_345(v4:0, v18:0, 1, v3:0, v16:0, v17:0) :|: FALSE
f_140 -> f_345(1 + v17:0, v18:0, 1, 1 + (v18:0 + v17:0), v18:0 + v17:0, v17:0) :|: v18:0 + v17:0 > -1 && v17:0 > -1
f_140 -> f_170(v1:0, 0, v4:0, 3 + v1:0, 3, 1, 4) :|: v1:0 > 0
f_345(v276:0, v288:0, v285:0, v282:0, v286:0, v287:0) -> f_363(v289:0, v275:0, v276:0, v285:0, v290:0, 0, 3, 1, 4) :|: v288:0 < 1
f_140 -> f_191(v1:0, v3:0, v4:0, 0, 3 + v1:0, 3, 1, 4) :|: v3:0 < 1 && v3:0 < 0 && v1:0 > 0
f_140 -> f_191(v1:0, v3:0, v4:0, 0, 3 + v1:0, 3, 1, 4) :|: v3:0 < 1 && v3:0 > 0 && v1:0 > 0
f_140 -> f_199(v1:0, v3:0, v4:0, 0, v2:0, 3, 1, 4) :|: FALSE
f_140 -> f_199(v1:0, v3:0, v4:0, 0, 3 + v1:0, 3, 1, 4) :|: v3:0 > 0 && v4:0 < 1 && v1:0 > 0
f_345(sum~cons_1~v287:0, sum~cons_1~sum~v325:0~v287:0, v285:0, v282:0, v286:0, v287:0) -> f_345(1 + v287:0, v325:0, 1 + v285:0, 1 + (v325:0 + v287:0), v325:0 + v287:0, v287:0) :|: v325:0 + v287:0 > -1 && v286:0 > 0 && v285:0 > 0 && v282:0 > 1 && sum~cons_1~v287:0 = 1 + v287:0 && sum~cons_1~sum~v325:0~v287:0 = 1 + (v325:0 + v287:0)

----------------------------------------

(6)
Obligation:
Rules:
f_140 -> f_345(v4:0, v18:0, 1, v3:0, v16:0, v17:0) :|: FALSE
f_140 -> f_345(1 + x, x1, 1, 1 + (x1 + x), x1 + x, x) :|: x1 + x > -1 && x > -1
f_140 -> f_170(x2, 0, x3, 3 + x2, 3, 1, 4) :|: x2 > 0
f_345(v276:0, v288:0, v285:0, v282:0, v286:0, v287:0) -> f_363(v289:0, v275:0, v276:0, v285:0, v290:0, 0, 3, 1, 4) :|: v288:0 < 1
f_140 -> f_191(x4, x5, x6, 0, 3 + x4, 3, 1, 4) :|: x5 < 1 && x5 < 0 && x4 > 0
f_140 -> f_191(x7, x8, x9, 0, 3 + x7, 3, 1, 4) :|: x8 < 1 && x8 > 0 && x7 > 0
f_140 -> f_199(x10, x11, x12, 0, x13, 3, 1, 4) :|: FALSE
f_140 -> f_199(x14, x15, x16, 0, 3 + x14, 3, 1, 4) :|: x15 > 0 && x16 < 1 && x14 > 0
f_345(x17, x18, x19, x20, x21, x22) -> f_345(1 + x22, x23, 1 + x19, 1 + (x23 + x22), x23 + x22, x22) :|: x23 + x22 > -1 && x21 > 0 && x19 > 0 && x20 > 1 && x17 = 1 + x22 && x18 = 1 + (x23 + x22)
Start term: f_140

----------------------------------------

(7) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(8)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_140))
(VAR k36 k37 k32 k33 k34 k35 k30 k31 x46 x47 x48 x49 x42 x43 x44 x45 k29 x40 x41 k25 k26 k27 k28 k21 k22 k23 k24 k20 x39 x35 x36 x37 x38 x31 x32 x33 x34 k18 k19 x30 x70 x68 x69 x64 x65 x66 x67 x60 x61 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x58 x59 x53 x54 x55 x56 x50 x51 x52 x x80 x81 x79 x75 x76 x'' x77 x78 x71 x72 x73 x74 k14 k15 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x7 x27 x20 x21 x22 x23 x1 x' x17 x18 x19 x13 x14 x15 x16 x10 x11 x12)
(RULES
  f_140(x72, x73, x74, x75, x76, x77, x78, x79, x80) -> f_199(k32, k33, k34, 0, 3 + k32, 3, 1, 4, x81) :|: k33 > 0 && k34 < 1 && k32 > 0
  f_140(x, x', x'', x1, x2, x3, x4, x5, x6) -> f_170(k11, 0, k12, 3 + k11, 3, 1, 4, x7, x8) :|: k11 > 0
  f_140(x41, x42, x43, x44, x45, x46, x47, x48, x49) -> f_191(k5, k9, k15, 0, 3 + k5, 3, 1, 4, x50) :|: k9 < 1 && k9 < 0 && k5 > 0
  f_140(x31, x32, x33, x34, x35, x36, x37, x38, x39) -> f_199(k35, k36, k37, 0, k31, 3, 1, 4, x40) :|: 0 = 1
  f_345(k2, k8, k24, k23, k27, k25, x69, x70, x71) -> f_363(k4, k1, k2, k24, k0, 0, 3, 1, 4) :|: k8 < 1
  f_140(x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_345(k10, k6, 1, k7, k26, k3, x28, x29, x30) :|: 0 = 1
  f_140(x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_191(k16, k13, k14, 0, 3 + k16, 3, 1, 4, x18) :|: k13 < 1 && k13 > 0 && k16 > 0
  f_345(k28, k29, k30, k17, k18, k19, x51, x52, x53) -> f_345(1 + k19, k20, 1 + k30, 1 + (k20 + k19), k20 + k19, k19, x54, x55, x56) :|: k20 + k19 > -1 && k18 > 0 && k30 > 0 && k17 > 1 && k28 = 1 + k19 && k29 = 1 + (k20 + k19)
  f_140(x57, x58, x59, x60, x61, x62, x63, x64, x65) -> f_345(1 + k21, k22, 1, 1 + (k22 + k21), k22 + k21, k21, x66, x67, x68) :|: k22 + k21 > -1 && k21 > -1
)

----------------------------------------

(9) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_10090348232908026814.koat 

KoAT2's output was:

YES

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
