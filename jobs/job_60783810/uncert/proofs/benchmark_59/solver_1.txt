YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/t8boz.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 52 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3815 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 73 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/t8boz.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/t8boz.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cstrncmp" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 12
	0:
		%4 = alloca i32, align 4
		%5 = alloca *i8, align 8
		%6 = alloca *i8, align 8
		%7 = alloca i32, align 4
		%8 = alloca i8, align 1
		%9 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %9)
		%10 = load %7
		%11 = icmp eq %10 0
		br %11, %12, %13
	12:
		store 0, %4
		br %62
	13:
		br %14
	14:
		%15 = load %7
		%16 = add i32 %15, -1
		store %16, %7
		%17 = icmp sgt %15 0
		br %17, %18, %26
	18:
		%19 = load %5
		%20 = load %19
		%21 = sext i8 %20 to i32
		%22 = load %6
		%23 = load %22
		%24 = sext i8 %23 to i32
		%25 = icmp eq %21 %24
		br %26
	26:
		%27 = phi [0, %14], [%25, %18]
		br %27, %28, %42
	28:
		%29 = load %7
		%30 = icmp eq %29 0
		br %30, %36, %31
	31:
		%32 = load %5
		%33 = load %32
		%34 = sext i8 %33 to i32
		%35 = icmp eq %34 0
		br %35, %36, %37
	36:
		store 0, %4
		br %62
	37:
		%38 = load %5
		%39 = getelementptr %38, 1
		store %39, %5
		%40 = load %6
		%41 = getelementptr %40, 1
		store %41, %6
		br %14
	42:
		%43 = load %5
		%44 = load %43
		store %44, %8
		%45 = load %6
		%46 = load %45
		store %46, %9
		%47 = load %8
		%48 = zext i8 %47 to i32
		%49 = load %9
		%50 = zext i8 %49 to i32
		%51 = icmp slt %48 %50
		br %51, %52, %53
	52:
		br %60
	53:
		%54 = load %8
		%55 = zext i8 %54 to i32
		%56 = load %9
		%57 = zext i8 %56 to i32
		%58 = icmp sgt %55 %57
		%59 = zext i1 %58 to i32
		br %60
	60:
		%61 = phi [-1, %52], [%59, %53]
		store %61, %4
		br %62
	62:
		%63 = load %4
		ret %63

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 73
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = load %2
		%9 = icmp slt %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %11
	11:
		%12 = load %3
		%13 = icmp slt %12 1
		br %13, %14, %15
	14:
		store 1, %3
		br %15
	15:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%16 = load %2
		%17 = sext i32 %16 to i64
		%18 = mul i64 %17, 1
		%19 = alloca i8, numElementsLit: %18, align 16
		store %19, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%20 = load %3
		%21 = sext i32 %20 to i64
		%22 = mul i64 %21, 1
		%23 = alloca i8, numElementsLit: %22, align 16
		store %23, %5
		%24 = load %4
		%25 = load %2
		%26 = sub i32 %25, 1
		%27 = sext i32 %26 to i64
		%28 = getelementptr %24, %27
		store 0, %28
		%29 = load %5
		%30 = load %3
		%31 = sub i32 %30, 1
		%32 = sext i32 %31 to i64
		%33 = getelementptr %29, %32
		store 0, %33
		%34 = load %4
		%35 = load %5
		%36 = call i32 @__VERIFIER_nondet_int()
		%37 = call i32 @cstrncmp(*i8 %34, *i8 %35, i32 %36)
		ret %37


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 33 rulesP rules:
f_1255(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7664, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1256(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7664, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1256(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7664, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1258(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7664, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: v7658 != 0 && 2 <= v7657
f_1258(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7664, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1260(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7664, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1260(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7664, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1262(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7664, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: TRUE
f_1262(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7664, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1264(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7664, v7663, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1264(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7664, v7663, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1266(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7664, v7663, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1266(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7664, v7663, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1268(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7664, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1268(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7664, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1271(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7664, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: v7661 != 0 && v7660 < v7674 && v7662 < v7676 && 3 <= v7674 && 3 <= v7676
f_1271(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7664, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1273(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7664, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1273(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7664, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1275(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7664, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: TRUE
f_1275(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7664, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1277(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1277(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1279(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v8321, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: v8321 = 1 + v7660 && 3 <= v8321
f_1279(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v8321, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1281(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v8321, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: TRUE
f_1281(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v8321, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1283(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v8321, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1283(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v8321, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1284(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: v8323 = 1 + v7662 && 3 <= v8323
f_1284(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1285(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: TRUE
f_1285(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1286(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: TRUE
f_1286(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1287(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1287(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1288(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 1 + v8366 = v7658 && 0 <= v8366
f_1288(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1289(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: TRUE
f_1289(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1290(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1290(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1291(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: TRUE
f_1291(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v7660, v7661, v7662, v8321, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1292(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v7661, v7662, v7660, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1292(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v7661, v7662, v7660, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1293(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8415, v7661, v7662, v7660, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: TRUE
f_1293(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8415, v7661, v7662, v7660, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1294(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8415, v7662, v7661, v7660, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1294(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8415, v7662, v7661, v7660, v8323, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1295(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8415, v8323, v7661, v7660, v7662, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1295(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8415, v8323, v7661, v7660, v7662, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1296(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8415, v8323, v8417, v7661, v7660, v7662, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: TRUE
f_1296(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8415, v8323, v8417, v7661, v7660, v7662, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1297(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8415, v8323, v8417, v7660, v7661, v7662, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1297(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8415, v8323, v8417, v7660, v7661, v7662, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1298(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8417, v8323, v7660, v7661, v7662, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: v8415 = v8417
f_1298(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8417, v8323, v7660, v7661, v7662, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1300(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8417, v8323, v7660, v7661, v7662, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1300(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8417, v8323, v7660, v7661, v7662, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1302(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8417, v8323, v7660, v7661, v7662, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: 0 = 0
f_1302(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8417, v8323, v7660, v7661, v7662, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7663, v7664, v7665, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1254(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7658, v8366, 1, v8321, v8417, v8323, v7660, v7661, v7662, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: TRUE
f_1254(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7664, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) -> f_1255(v7647, v7648, v7649, v7650, v7651, v7652, v7653, v7654, v7655, 0, v7657, v7658, 1, v7660, v7661, v7662, v7663, v7664, v7665, v7666, v7677, v7667, v7678, v7668, v7679, v7669, v7680, v7670, v7681, v7674, v7676, v7682, v7683, v7684, v7685, v7686, v7671, v7672, v7673, v7675, 3, 7, 2, 4, 8) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_1255(v7647:0, v7648:0, v7649:0, v7650:0, v7651:0, v7652:0, v7653:0, v7654:0, v7655:0, 0, v7657:0, 1 + v8366:0, 1, v7660:0, v7661:0, v7662:0, v7663:0, v7664:0, v7665:0, v7666:0, v7677:0, v7667:0, v7678:0, v7668:0, v7679:0, v7669:0, v7680:0, v7670:0, v7681:0, v7674:0, v7676:0, v7682:0, v7683:0, v7684:0, v7685:0, v7686:0, v7671:0, v7672:0, v7673:0, v7675:0, 3, 7, 2, 4, 8) -> f_1255(v7647:0, v7648:0, v7649:0, v7650:0, v7651:0, v7652:0, v7653:0, v7654:0, v7655:0, 0, 1 + v8366:0, v8366:0, 1, 1 + v7660:0, v8415:0, 1 + v7662:0, v7660:0, v7661:0, v7662:0, v7666:0, v7677:0, v7667:0, v7678:0, v7668:0, v7679:0, v7669:0, v7680:0, v7670:0, v7681:0, v7674:0, v7676:0, v7682:0, v7683:0, v7684:0, v7685:0, v7686:0, v7671:0, v7672:0, v7673:0, v7675:0, 3, 7, 2, 4, 8) :|: v7657:0 > 1 && v8366:0 > -1 && v7674:0 > v7660:0 && v7661:0 < 0 && v7676:0 > v7662:0 && v7674:0 > 2 && v7676:0 > 2 && v7660:0 > 1 && v7662:0 > 1
f_1255(v7647:0, v7648:0, v7649:0, v7650:0, v7651:0, v7652:0, v7653:0, v7654:0, v7655:0, 0, v7657:0, 1 + v8366:0, 1, v7660:0, v7661:0, v7662:0, v7663:0, v7664:0, v7665:0, v7666:0, v7677:0, v7667:0, v7678:0, v7668:0, v7679:0, v7669:0, v7680:0, v7670:0, v7681:0, v7674:0, v7676:0, v7682:0, v7683:0, v7684:0, v7685:0, v7686:0, v7671:0, v7672:0, v7673:0, v7675:0, 3, 7, 2, 4, 8) -> f_1255(v7647:0, v7648:0, v7649:0, v7650:0, v7651:0, v7652:0, v7653:0, v7654:0, v7655:0, 0, 1 + v8366:0, v8366:0, 1, 1 + v7660:0, v8415:0, 1 + v7662:0, v7660:0, v7661:0, v7662:0, v7666:0, v7677:0, v7667:0, v7678:0, v7668:0, v7679:0, v7669:0, v7680:0, v7670:0, v7681:0, v7674:0, v7676:0, v7682:0, v7683:0, v7684:0, v7685:0, v7686:0, v7671:0, v7672:0, v7673:0, v7675:0, 3, 7, 2, 4, 8) :|: v7657:0 > 1 && v8366:0 > -1 && v7674:0 > v7660:0 && v7661:0 > 0 && v7676:0 > v7662:0 && v7674:0 > 2 && v7676:0 > 2 && v7660:0 > 1 && v7662:0 > 1
Filtered unneeded arguments:
   f_1255(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45) -> f_1255(x11, x12, x14, x15, x16, x30, x31)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_1255(v7657:0, sum~cons_1~v8366:0, v7660:0, v7661:0, v7662:0, v7674:0, v7676:0) -> f_1255(1 + v8366:0, v8366:0, 1 + v7660:0, v8415:0, 1 + v7662:0, v7674:0, v7676:0) :|: v8366:0 > -1 && v7657:0 > 1 && v7674:0 > v7660:0 && v7661:0 < 0 && v7676:0 > v7662:0 && v7674:0 > 2 && v7676:0 > 2 && v7662:0 > 1 && v7660:0 > 1 && sum~cons_1~v8366:0 = 1 + v8366:0
f_1255(v7657:0, sum~cons_1~v8366:0, v7660:0, v7661:0, v7662:0, v7674:0, v7676:0) -> f_1255(1 + v8366:0, v8366:0, 1 + v7660:0, v8415:0, 1 + v7662:0, v7674:0, v7676:0) :|: v8366:0 > -1 && v7657:0 > 1 && v7674:0 > v7660:0 && v7661:0 > 0 && v7676:0 > v7662:0 && v7674:0 > 2 && v7676:0 > 2 && v7662:0 > 1 && v7660:0 > 1 && sum~cons_1~v8366:0 = 1 + v8366:0

----------------------------------------

(8)
Obligation:
Rules:
f_1255(v7657:0, sum~cons_1~v8366:0, v7660:0, v7661:0, v7662:0, v7674:0, v7676:0) -> f_1255(1 + v8366:0, v8366:0, 1 + v7660:0, v8415:0, 1 + v7662:0, v7674:0, v7676:0) :|: v8366:0 > -1 && v7657:0 > 1 && v7674:0 > v7660:0 && v7661:0 < 0 && v7676:0 > v7662:0 && v7674:0 > 2 && v7676:0 > 2 && v7662:0 > 1 && v7660:0 > 1 && sum~cons_1~v8366:0 = 1 + v8366:0
f_1255(x, x1, x2, x3, x4, x5, x6) -> f_1255(1 + x7, x7, 1 + x2, x8, 1 + x4, x5, x6) :|: x7 > -1 && x > 1 && x5 > x2 && x3 > 0 && x6 > x4 && x5 > 2 && x6 > 2 && x4 > 1 && x2 > 1 && x1 = 1 + x7

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_1255(v7657:0:0, sum~cons_1~v8366:0:0, v7660:0:0, v7661:0:0, v7662:0:0, v7674:0:0, v7676:0:0) -> f_1255(1 + v8366:0:0, v8366:0:0, 1 + v7660:0:0, v8415:0:0, 1 + v7662:0:0, v7674:0:0, v7676:0:0) :|: v7662:0:0 > 1 && v7660:0:0 > 1 && v7676:0:0 > 2 && v7674:0:0 > 2 && v7676:0:0 > v7662:0:0 && v7661:0:0 < 0 && v7674:0:0 > v7660:0:0 && v7657:0:0 > 1 && v8366:0:0 > -1 && sum~cons_1~v8366:0:0 = 1 + v8366:0:0
f_1255(x:0, sum~cons_1~x7:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_1255(1 + x7:0, x7:0, 1 + x2:0, x8:0, 1 + x4:0, x5:0, x6:0) :|: x4:0 > 1 && x2:0 > 1 && x6:0 > 2 && x5:0 > 2 && x6:0 > x4:0 && x3:0 > 0 && x5:0 > x2:0 && x:0 > 1 && x7:0 > -1 && sum~cons_1~x7:0 = 1 + x7:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1255(x, x1, x2, x3, x4, x5, x6)] = -1 - x2 + x5

The following rules are decreasing:
f_1255(v7657:0:0, sum~cons_1~v8366:0:0, v7660:0:0, v7661:0:0, v7662:0:0, v7674:0:0, v7676:0:0) -> f_1255(1 + v8366:0:0, v8366:0:0, 1 + v7660:0:0, v8415:0:0, 1 + v7662:0:0, v7674:0:0, v7676:0:0) :|: v7662:0:0 > 1 && v7660:0:0 > 1 && v7676:0:0 > 2 && v7674:0:0 > 2 && v7676:0:0 > v7662:0:0 && v7661:0:0 < 0 && v7674:0:0 > v7660:0:0 && v7657:0:0 > 1 && v8366:0:0 > -1 && sum~cons_1~v8366:0:0 = 1 + v8366:0:0
f_1255(x:0, sum~cons_1~x7:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_1255(1 + x7:0, x7:0, 1 + x2:0, x8:0, 1 + x4:0, x5:0, x6:0) :|: x4:0 > 1 && x2:0 > 1 && x6:0 > 2 && x5:0 > 2 && x6:0 > x4:0 && x3:0 > 0 && x5:0 > x2:0 && x:0 > 1 && x7:0 > -1 && sum~cons_1~x7:0 = 1 + x7:0
The following rules are bounded:
f_1255(v7657:0:0, sum~cons_1~v8366:0:0, v7660:0:0, v7661:0:0, v7662:0:0, v7674:0:0, v7676:0:0) -> f_1255(1 + v8366:0:0, v8366:0:0, 1 + v7660:0:0, v8415:0:0, 1 + v7662:0:0, v7674:0:0, v7676:0:0) :|: v7662:0:0 > 1 && v7660:0:0 > 1 && v7676:0:0 > 2 && v7674:0:0 > 2 && v7676:0:0 > v7662:0:0 && v7661:0:0 < 0 && v7674:0:0 > v7660:0:0 && v7657:0:0 > 1 && v8366:0:0 > -1 && sum~cons_1~v8366:0:0 = 1 + v8366:0:0
f_1255(x:0, sum~cons_1~x7:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_1255(1 + x7:0, x7:0, 1 + x2:0, x8:0, 1 + x4:0, x5:0, x6:0) :|: x4:0 > 1 && x2:0 > 1 && x6:0 > 2 && x5:0 > 2 && x6:0 > x4:0 && x3:0 > 0 && x5:0 > x2:0 && x:0 > 1 && x7:0 > -1 && sum~cons_1~x7:0 = 1 + x7:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
