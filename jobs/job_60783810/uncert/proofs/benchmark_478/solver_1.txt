YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/afxpv.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 498 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 1 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 2 ms]
        (16) IntTRS
        (17) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (18) YES
    (19) LLVM Symbolic Execution SCC
        (20) SCC2IRS [SOUND, 3 ms]
        (21) IntTRS
        (22) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (23) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/afxpv.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/afxpv.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = load %3
		%11 = icmp slt %9 %10
		br %11, %12, %23
	12:
		%13 = load %2
		%14 = load %4
		%15 = icmp slt %13 %14
		br %15, %16, %19
	16:
		%17 = load %2
		%18 = add i32 %17, 1
		store %18, %2
		br %22
	19:
		%20 = load %4
		%21 = add i32 %20, 1
		store %21, %4
		br %22
	22:
		br %8
	23:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 29 rulesP rules:
f_315(v603, v604, v605, v606, v607, v608, v609, v610, 1, 0, v613, v614, v615, v616, v617, v618, 3, 4) -> f_316(v603, v604, v605, v606, v607, v608, v609, v610, 1, 0, v613, v614, v615, v616, v617, v618, 3, 4) :|: 0 = 0
f_316(v603, v604, v605, v606, v607, v608, v609, v610, 1, 0, v613, v614, v615, v616, v617, v618, 3, 4) -> f_317(v603, v604, v605, v606, v607, v608, v609, v610, 1, 0, v613, v614, v615, v616, v617, v618, 3, 4) :|: 0 = 0
f_317(v603, v604, v605, v606, v607, v608, v609, v610, 1, 0, v613, v614, v615, v616, v617, v618, 3, 4) -> f_318(v603, v604, v605, v606, v607, v608, v609, v610, 1, 0, v613, v614, v615, v616, v617, v618, 3, 4) :|: 0 = 0
f_318(v603, v604, v605, v606, v607, v608, v609, v610, 1, 0, v613, v614, v615, v616, v617, v618, 3, 4) -> f_319(v603, v604, v605, v606, v607, v608, v609, v610, 1, 0, v613, v614, v615, v616, v617, v618, 3, 4) :|: TRUE
f_319(v603, v604, v605, v606, v607, v608, v609, v610, 1, 0, v613, v614, v615, v616, v617, v618, 3, 4) -> f_320(v603, v604, v605, v606, v607, v608, v609, v610, 1, 0, v613, v614, v615, v616, v617, v618, 3, 4) :|: 0 = 0
f_320(v603, v604, v605, v606, v607, v608, v609, v610, 1, 0, v613, v614, v615, v616, v617, v618, 3, 4) -> f_321(v603, v604, v605, v606, v607, v608, v609, v610, 1, v614, 0, v613, v615, v616, v617, v618, 3, 4) :|: 0 = 0
f_321(v603, v604, v605, v606, v607, v608, v609, v610, 1, v614, 0, v613, v615, v616, v617, v618, 3, 4) -> f_322(v603, v604, v605, v606, v607, v608, v609, v610, 1, v614, v613, v615, v616, v617, v618, 0, 3, 4) :|: 0 = 0
f_322(v603, v604, v605, v606, v607, v608, v609, v610, 1, v614, v613, v615, v616, v617, v618, 0, 3, 4) -> f_323(v603, v604, v605, v606, v607, v608, v609, v610, 1, v614, v613, v615, v616, v617, v618, 0, 3, 4) :|: TRUE
f_323(v603, v604, v605, v606, v607, v608, v609, v610, 1, v614, v613, v615, v616, v617, v618, 0, 3, 4) -> f_324(v603, v604, v605, v606, v607, v608, v609, v610, 1, v614, v615, v616, v617, v618, 0, 3, 4) :|: 0 = 0
f_324(v603, v604, v605, v606, v607, v608, v609, v610, 1, v614, v615, v616, v617, v618, 0, 3, 4) -> f_325(v603, v604, v605, v606, v607, v608, v609, v610, 1, v614, v615, v616, v617, v618, 0, 3, 4) :|: v614 = 1 + v610
f_325(v603, v604, v605, v606, v607, v608, v609, v610, 1, v614, v615, v616, v617, v618, 0, 3, 4) -> f_326(v603, v604, v605, v606, v607, v608, v609, v610, 1, v614, v615, v616, v617, v618, 0, 3, 4) :|: TRUE
f_326(v603, v604, v605, v606, v607, v608, v609, v610, 1, v614, v615, v616, v617, v618, 0, 3, 4) -> f_327(v603, v604, v605, v606, v607, v608, v609, v610, 1, v614, v615, v616, v617, v618, 0, 3, 4) :|: TRUE
f_327(v603, v604, v605, v606, v607, v608, v609, v610, 1, v614, v615, v616, v617, v618, 0, 3, 4) -> f_328(v603, v604, v605, v606, v607, v608, v609, v610, 1, v614, v615, v616, v617, v618, 0, 3, 4) :|: TRUE
f_328(v716, v717, v718, v719, v720, v721, v722, v723, 1, v725, v726, v727, v728, v729, 0, 3, 4) -> f_329(v716, v717, v718, v719, v720, v721, v722, v723, 1, v725, v726, v727, v728, v729, 0, 3, 4) :|: TRUE
f_329(v716, v717, v718, v719, v720, v721, v722, v723, 1, v725, v726, v727, v728, v729, 0, 3, 4) -> f_330(v716, v717, v718, v719, v720, v721, v722, v725, 1, v723, v726, v727, v728, v729, 0, 3, 4) :|: 0 = 0
f_330(v716, v717, v718, v719, v720, v721, v722, v725, 1, v723, v726, v727, v728, v729, 0, 3, 4) -> f_331(v716, v717, v718, v719, v720, v721, v722, v725, 1, v723, v726, v727, v728, v729, 0, 3, 4) :|: 0 = 0
f_331(v716, v717, v718, v719, v720, v721, v722, v725, 1, v723, v726, v727, v728, v729, 0, 3, 4) -> f_332(v716, v717, v718, v719, v720, v721, v722, v725, 1, v723, v726, v727, v728, v729, 0, 3, 4) :|: v725 < v721
f_332(v716, v717, v718, v719, v720, v721, v722, v725, 1, v723, v726, v727, v728, v729, 0, 3, 4) -> f_334(v716, v717, v718, v719, v720, v721, v722, v725, 1, v723, v726, v727, v728, v729, 0, 3, 4) :|: 0 = 0
f_334(v716, v717, v718, v719, v720, v721, v722, v725, 1, v723, v726, v727, v728, v729, 0, 3, 4) -> f_336(v716, v717, v718, v719, v720, v721, v722, v725, 1, v723, v726, v727, v728, v729, 0, 3, 4) :|: TRUE
f_336(v716, v717, v718, v719, v720, v721, v722, v725, 1, v723, v726, v727, v728, v729, 0, 3, 4) -> f_338(v716, v717, v718, v719, v720, v721, v722, v725, 1, v723, v726, v727, v728, v729, 0, 3, 4) :|: 0 = 0
f_338(v716, v717, v718, v719, v720, v721, v722, v725, 1, v723, v726, v727, v728, v729, 0, 3, 4) -> f_339(v716, v717, v718, v719, v720, v721, v722, v725, 1, v723, v726, v727, v728, v729, 0, 3, 4) :|: 0 = 0
f_339(v716, v717, v718, v719, v720, v721, v722, v725, 1, v723, v726, v727, v728, v729, 0, 3, 4) -> f_340(v716, v717, v718, v719, v720, v721, v722, v725, 1, 0, v723, v726, v727, v728, v729, 3, 4) :|: 0 = 0
f_340(v716, v717, v718, v719, v720, v721, v722, v725, 1, 0, v723, v726, v727, v728, v729, 3, 4) -> f_341(v716, v717, v718, v719, v720, v721, v722, v725, 1, 0, v723, v726, v727, v728, v729, 3, 4) :|: TRUE
f_341(v716, v717, v718, v719, v720, v721, v722, v725, 1, 0, v723, v726, v727, v728, v729, 3, 4) -> f_342(v716, v717, v718, v719, v720, v721, v722, v725, 1, 0, v723, v726, v727, v728, v729, 3, 4) :|: 0 = 0
f_342(v716, v717, v718, v719, v720, v721, v722, v725, 1, 0, v723, v726, v727, v728, v729, 3, 4) -> f_343(v716, v717, v718, v719, v720, v721, v722, v725, 1, 0, v841, v723, v726, v727, v728, v729, 3, 4) :|: v841 = 1 + v725
f_343(v716, v717, v718, v719, v720, v721, v722, v725, 1, 0, v841, v723, v726, v727, v728, v729, 3, 4) -> f_344(v716, v717, v718, v719, v720, v721, v722, v725, 1, 0, v841, v723, v726, v727, v728, v729, 3, 4) :|: TRUE
f_344(v716, v717, v718, v719, v720, v721, v722, v725, 1, 0, v841, v723, v726, v727, v728, v729, 3, 4) -> f_345(v716, v717, v718, v719, v720, v721, v722, v725, 1, 0, v841, v723, v726, v727, v728, v729, 3, 4) :|: TRUE
f_345(v716, v717, v718, v719, v720, v721, v722, v725, 1, 0, v841, v723, v726, v727, v728, v729, 3, 4) -> f_314(v716, v717, v718, v719, v720, v721, v722, v725, 1, 0, v723, v841, v726, v727, v728, v729, 3, 4) :|: TRUE
f_314(v603, v604, v605, v606, v607, v608, v609, v610, 1, 0, v613, v614, v615, v616, v617, v618, 3, 4) -> f_315(v603, v604, v605, v606, v607, v608, v609, v610, 1, 0, v613, v614, v615, v616, v617, v618, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_315(v603:0, v604:0, v605:0, v606:0, v607:0, v608:0, v609:0, v610:0, 1, 0, v613:0, 1 + v610:0, v615:0, v616:0, v617:0, v618:0, 3, 4) -> f_315(v603:0, v604:0, v605:0, v606:0, v607:0, v608:0, v609:0, 1 + v610:0, 1, 0, v610:0, 1 + (1 + v610:0), v615:0, v616:0, v617:0, v618:0, 3, 4) :|: v608:0 > 1 + v610:0
Filtered unneeded arguments:
   f_315(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_315(x6, x8, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_315(v608:0, v610:0, sum~cons_1~v610:0) -> f_315(v608:0, 1 + v610:0, 1 + (1 + v610:0)) :|: v608:0 > 1 + v610:0 && sum~cons_1~v610:0 = 1 + v610:0

----------------------------------------

(9)
Obligation:
Rules:
f_315(v608:0, v610:0, sum~cons_1~v610:0) -> f_315(v608:0, 1 + v610:0, 1 + (1 + v610:0)) :|: v608:0 > 1 + v610:0 && sum~cons_1~v610:0 = 1 + v610:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_315(v608:0:0, v610:0:0, sum~cons_1~v610:0:0) -> f_315(v608:0:0, 1 + v610:0:0, 1 + (1 + v610:0:0)) :|: v608:0:0 > 1 + v610:0:0 && sum~cons_1~v610:0:0 = 1 + v610:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_315(x, x1, x2)] = x - x2

The following rules are decreasing:
f_315(v608:0:0, v610:0:0, sum~cons_1~v610:0:0) -> f_315(v608:0:0, 1 + v610:0:0, 1 + (1 + v610:0:0)) :|: v608:0:0 > 1 + v610:0:0 && sum~cons_1~v610:0:0 = 1 + v610:0:0
The following rules are bounded:
f_315(v608:0:0, v610:0:0, sum~cons_1~v610:0:0) -> f_315(v608:0:0, 1 + v610:0:0, 1 + (1 + v610:0:0)) :|: v608:0:0 > 1 + v610:0:0 && sum~cons_1~v610:0:0 = 1 + v610:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_243(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) -> f_245(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) :|: 0 = 0
f_245(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) -> f_247(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) :|: v257 < v253
f_247(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) -> f_250(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) :|: 0 = 0
f_250(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) -> f_253(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) :|: TRUE
f_253(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) -> f_257(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) :|: 0 = 0
f_257(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) -> f_260(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) :|: 0 = 0
f_260(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) -> f_263(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) :|: v257 < v254
f_263(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) -> f_267(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) :|: 0 = 0
f_267(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) -> f_271(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) :|: TRUE
f_271(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) -> f_275(v248, v249, v250, v251, v252, v253, v254, v257, 1, v258, v259, v260, v261, 0, 3, 4) :|: 0 = 0
f_275(v248, v249, v250, v251, v252, v253, v254, v257, 1, v258, v259, v260, v261, 0, 3, 4) -> f_279(v248, v249, v250, v251, v252, v253, v254, v257, 1, v333, v258, v259, v260, v261, 0, 3, 4) :|: v333 = 1 + v257
f_279(v248, v249, v250, v251, v252, v253, v254, v257, 1, v333, v258, v259, v260, v261, 0, 3, 4) -> f_282(v248, v249, v250, v251, v252, v253, v254, v257, 1, v333, v258, v259, v260, v261, 0, 3, 4) :|: TRUE
f_282(v248, v249, v250, v251, v252, v253, v254, v257, 1, v333, v258, v259, v260, v261, 0, 3, 4) -> f_285(v248, v249, v250, v251, v252, v253, v254, v257, 1, v333, v258, v259, v260, v261, 0, 3, 4) :|: TRUE
f_285(v248, v249, v250, v251, v252, v253, v254, v257, 1, v333, v258, v259, v260, v261, 0, 3, 4) -> f_288(v248, v249, v250, v251, v252, v253, v254, v257, 1, v333, v258, v259, v260, v261, 0, 3, 4) :|: TRUE
f_288(v248, v249, v250, v251, v252, v253, v254, v257, 1, v333, v258, v259, v260, v261, 0, 3, 4) -> f_241(v248, v249, v250, v251, v252, v253, v254, v257, 1, v333, v258, v259, v260, v261, 0, 3, 4) :|: TRUE
f_241(v248, v249, v250, v251, v252, v253, v254, v255, 1, v257, v258, v259, v260, v261, 0, 3, 4) -> f_243(v248, v249, v250, v251, v252, v253, v254, v257, 1, v255, v258, v259, v260, v261, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_243(v248:0, v249:0, v250:0, v251:0, v252:0, v253:0, v254:0, v257:0, 1, v255:0, v258:0, v259:0, v260:0, v261:0, 0, 3, 4) -> f_243(v248:0, v249:0, v250:0, v251:0, v252:0, v253:0, v254:0, 1 + v257:0, 1, v257:0, v258:0, v259:0, v260:0, v261:0, 0, 3, 4) :|: v257:0 < v254:0 && v257:0 < v253:0
Filtered unneeded arguments:
   f_243(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_243(x6, x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_243(v253:0, v254:0, v257:0) -> f_243(v253:0, v254:0, 1 + v257:0) :|: v257:0 < v254:0 && v257:0 < v253:0

----------------------------------------

(16)
Obligation:
Rules:
f_243(v253:0, v254:0, v257:0) -> f_243(v253:0, v254:0, 1 + v257:0) :|: v257:0 < v254:0 && v257:0 < v253:0

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_243(x, x1, x2)] = x - x2

The following rules are decreasing:
f_243(v253:0, v254:0, v257:0) -> f_243(v253:0, v254:0, 1 + v257:0) :|: v257:0 < v254:0 && v257:0 < v253:0
The following rules are bounded:
f_243(v253:0, v254:0, v257:0) -> f_243(v253:0, v254:0, 1 + v257:0) :|: v257:0 < v254:0 && v257:0 < v253:0

----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
SCC
----------------------------------------

(20) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_236(v187, v188, v189, v190, v191, v192, v193, 1, v195, 0, v197, v198, v199, v200, v201, 3, 4) -> f_239(v187, v188, v189, v190, v191, v192, v193, 1, v195, 0, v197, v198, v199, v200, v201, 3, 4) :|: 0 = 0
f_239(v187, v188, v189, v190, v191, v192, v193, 1, v195, 0, v197, v198, v199, v200, v201, 3, 4) -> f_242(v187, v188, v189, v190, v191, v192, v193, 1, v195, 0, v197, v198, v199, v200, v201, 3, 4) :|: 0 = 0
f_242(v187, v188, v189, v190, v191, v192, v193, 1, v195, 0, v197, v198, v199, v200, v201, 3, 4) -> f_244(v187, v188, v189, v190, v191, v192, v193, 1, v195, 0, v197, v198, v199, v200, v201, 3, 4) :|: 0 = 0
f_244(v187, v188, v189, v190, v191, v192, v193, 1, v195, 0, v197, v198, v199, v200, v201, 3, 4) -> f_246(v187, v188, v189, v190, v191, v192, v193, 1, v195, 0, v197, v198, v199, v200, v201, 3, 4) :|: TRUE
f_246(v187, v188, v189, v190, v191, v192, v193, 1, v195, 0, v197, v198, v199, v200, v201, 3, 4) -> f_249(v187, v188, v189, v190, v191, v192, v193, 1, v195, 0, v197, v198, v199, v200, v201, 3, 4) :|: 0 = 0
f_249(v187, v188, v189, v190, v191, v192, v193, 1, v195, 0, v197, v198, v199, v200, v201, 3, 4) -> f_252(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v195, v198, v199, v200, v201, 3, 4) :|: 0 = 0
f_252(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v195, v198, v199, v200, v201, 3, 4) -> f_256(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v195, v198, v199, v200, v201, 3, 4) :|: v197 <= v191
f_256(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v195, v198, v199, v200, v201, 3, 4) -> f_259(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v195, v198, v199, v200, v201, 3, 4) :|: 0 = 0
f_259(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v195, v198, v199, v200, v201, 3, 4) -> f_262(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v195, v198, v199, v200, v201, 3, 4) :|: TRUE
f_262(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v195, v198, v199, v200, v201, 3, 4) -> f_266(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v198, v199, v200, v201, 3, 4) :|: 0 = 0
f_266(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v198, v199, v200, v201, 3, 4) -> f_270(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v281, v198, v199, v200, v201, 3, 4) :|: v281 = 1 + v197
f_270(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v281, v198, v199, v200, v201, 3, 4) -> f_274(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v281, v198, v199, v200, v201, 3, 4) :|: TRUE
f_274(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v281, v198, v199, v200, v201, 3, 4) -> f_278(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v281, v198, v199, v200, v201, 3, 4) :|: TRUE
f_278(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v281, v198, v199, v200, v201, 3, 4) -> f_233(v187, v188, v189, v190, v191, v192, v193, 1, v197, 0, v281, v198, v199, v200, v201, 3, 4) :|: TRUE
f_233(v187, v188, v189, v190, v191, v192, v193, 1, v195, 0, v197, v198, v199, v200, v201, 3, 4) -> f_236(v187, v188, v189, v190, v191, v192, v193, 1, v195, 0, v197, v198, v199, v200, v201, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_236(v187:0, v188:0, v189:0, v190:0, v191:0, v192:0, v193:0, 1, v195:0, 0, v197:0, v198:0, v199:0, v200:0, v201:0, 3, 4) -> f_236(v187:0, v188:0, v189:0, v190:0, v191:0, v192:0, v193:0, 1, v197:0, 0, 1 + v197:0, v198:0, v199:0, v200:0, v201:0, 3, 4) :|: v197:0 <= v191:0
Filtered unneeded arguments:
   f_236(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_236(x5, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_236(v191:0, v197:0) -> f_236(v191:0, 1 + v197:0) :|: v197:0 <= v191:0

----------------------------------------

(21)
Obligation:
Rules:
f_236(v191:0, v197:0) -> f_236(v191:0, 1 + v197:0) :|: v197:0 <= v191:0

----------------------------------------

(22) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_236(x, x1)] = x - x1

The following rules are decreasing:
f_236(v191:0, v197:0) -> f_236(v191:0, 1 + v197:0) :|: v197:0 <= v191:0
The following rules are bounded:
f_236(v191:0, v197:0) -> f_236(v191:0, 1 + v197:0) :|: v197:0 <= v191:0

----------------------------------------

(23)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
