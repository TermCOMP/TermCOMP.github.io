YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/oa7dR.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 70 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2223 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 31 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 12 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 29 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 16 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/oa7dR.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/oa7dR.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		store 0, %5
		br %8
	8:
		%9 = load %2
		%10 = load %3
		%11 = icmp sge %9 %10
		br %11, %12, %15
	12:
		%13 = load %3
		%14 = icmp sgt %13 0
		br %15
	15:
		%16 = phi [0, %8], [%14, %12]
		br %16, %17, %39
	17:
		%18 = load %3
		store %18, %4
		br %19
	19:
		%20 = load %4
		%21 = icmp ne %20 0
		br %21, %22, %36
	22:
		%23 = load %4
		%24 = icmp sgt %23 0
		br %24, %25, %30
	25:
		%26 = load %4
		%27 = sub i32 %26, 1
		store %27, %4
		%28 = load %2
		%29 = sub i32 %28, 1
		store %29, %2
		br %35
	30:
		%31 = load %4
		%32 = add i32 %31, 1
		store %32, %4
		%33 = load %2
		%34 = add i32 %33, 1
		store %34, %2
		br %35
	35:
		br %19
	36:
		%37 = load %5
		%38 = add i32 %37, 1
		store %38, %5
		br %8
	39:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 40 rulesP rules:
f_590(v1735, v1736, v1737, v1738, v1739, v1740, v1741, v1742, 1, 0, v1745, v1746, v1747, v1748, v1749, v1750, v1751, v1752, 3, 2, 4) -> f_591(v1735, v1736, v1737, v1738, v1739, v1740, v1741, v1742, 1, 0, v1745, v1746, v1747, v1748, v1749, v1750, v1751, v1752, 3, 2, 4) :|: 0 = 0
f_591(v1735, v1736, v1737, v1738, v1739, v1740, v1741, v1742, 1, 0, v1745, v1746, v1747, v1748, v1749, v1750, v1751, v1752, 3, 2, 4) -> f_592(v1735, v1736, v1737, v1738, v1739, v1740, v1741, v1742, 1, 0, v1745, v1746, v1747, v1748, v1749, v1750, v1751, v1752, 3, 2, 4) :|: TRUE
f_592(v1735, v1736, v1737, v1738, v1739, v1740, v1741, v1742, 1, 0, v1745, v1746, v1747, v1748, v1749, v1750, v1751, v1752, 3, 2, 4) -> f_593(v1735, v1736, v1737, v1738, v1739, v1740, v1741, v1742, 1, v1741, 1, 0, v1745, v1742, v1746, v1747, v1748, v1749, v1750, v1751, v1752, 0, 3, 2, 4) :|: TRUE
f_593(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1787, v1788, v1789, v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_594(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1787, v1788, v1789, v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: 0 = 0
f_594(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1787, v1788, v1789, v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_595(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1787, v1788, v1789, v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: 0 = 0
f_595(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1787, v1788, v1789, v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_596(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1787, v1788, v1789, v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: TRUE
f_596(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1787, v1788, v1789, v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_597(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1788, v1789, v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: 0 = 0
f_597(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1788, v1789, v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_598(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1805, v1789, v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: 1 + v1805 = v1786 && 0 <= v1805
f_598(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1805, v1789, v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_599(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1805, v1789, v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: TRUE
f_599(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1805, v1789, v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_600(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1805, v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: 0 = 0
f_600(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1805, v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_601(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1805, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: 1 + v1807 = v1790 && 0 <= v1807
f_601(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1805, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_602(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1805, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: TRUE
f_602(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1805, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_603(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1805, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: TRUE
f_603(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1805, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_604(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1805, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: TRUE
f_604(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1786, v1805, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_605(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1805, v1786, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: 0 = 0
f_605(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1805, v1786, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_606(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1805, v1786, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: 0 < v1805 && 2 <= v1786 && 2 <= v1784 && 2 <= v1790 && 1 <= v1807 && 3 <= v1782
f_605(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1805, v1786, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_607(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, 0, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: v1805 = 0
f_606(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1805, v1786, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_608(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1805, v1786, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: 0 = 0
f_608(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1805, v1786, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_610(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1805, v1786, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: TRUE
f_610(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1805, v1786, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) -> f_593(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, v1805, v1786, v1805, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 0, 3, 2, 4) :|: TRUE
f_607(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, 0, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_609(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, 0, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: 0 = 0
f_609(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, 0, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_611(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, 0, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: TRUE
f_611(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, 0, v1790, v1807, v1791, v1792, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_612(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, 0, v1790, v1807, v1792, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: 0 = 0
f_612(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, 0, v1790, v1807, v1792, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_613(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, 0, v1790, v1807, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: v1881 = 1 + v1792 && 2 <= v1881
f_613(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, 0, v1790, v1807, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_614(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, 0, v1790, v1807, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: TRUE
f_614(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, 0, v1790, v1807, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_615(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, 0, v1790, v1807, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: TRUE
f_615(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1784, 1, 0, v1790, v1807, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_616(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: 0 = 0
f_616(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_617(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: 0 = 0
f_617(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_618(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: v1783 <= v1807 && 1 <= v1807 && 2 <= v1790 && 3 <= v1782
f_618(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_620(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: 0 = 0
f_620(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_622(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: TRUE
f_622(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_624(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: 0 = 0
f_624(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_626(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: 0 = 0
f_626(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_627(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: 0 = 0
f_627(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_628(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: TRUE
f_628(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_629(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: 0 = 0
f_629(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_630(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: TRUE
f_630(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_631(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: TRUE
f_631(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) -> f_589(v1777, v1778, v1779, v1780, v1781, v1782, v1783, v1807, 1, 0, v1790, v1792, v1881, v1793, v1794, v1795, v1796, v1797, 3, 2, 4) :|: TRUE
f_589(v1735, v1736, v1737, v1738, v1739, v1740, v1741, v1742, 1, 0, v1745, v1746, v1747, v1748, v1749, v1750, v1751, v1752, 3, 2, 4) -> f_590(v1735, v1736, v1737, v1738, v1739, v1740, v1741, v1742, 1, 0, v1745, v1746, v1747, v1748, v1749, v1750, v1751, v1752, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_605(v1777:0, v1778:0, v1779:0, v1780:0, v1781:0, v1782:0, v1783:0, v1784:0, 1, 1 + v1805:1, v1786:0, v1790:0, 1 + v1807:1, v1791:0, v1792:0, v1793:0, v1794:0, v1795:0, v1796:0, v1797:0, 0, 3, 2, 4) -> f_605(v1777:0, v1778:0, v1779:0, v1780:0, v1781:0, v1782:0, v1783:0, v1784:0, 1, v1805:1, 1 + v1805:1, 1 + v1807:1, v1807:1, v1791:0, v1792:0, v1793:0, v1794:0, v1795:0, v1796:0, v1797:0, 0, 3, 2, 4) :|: v1805:1 > -1 && v1786:0 > 1 && v1807:1 > -1 && v1784:0 > 1 && v1790:0 > 1 && v1782:0 > 2
f_605(v1777:0, v1778:0, v1779:0, v1780:0, v1781:0, v1782:0, 1 + v1805:1, v1784:0, 1, 0, v1786:0, v1790:0, 1 + v1807:1, v1791:0, v1792:0, v1793:0, v1794:0, v1795:0, v1796:0, v1797:0, 0, 3, 2, 4) -> f_605(v1777:0, v1778:0, v1779:0, v1780:0, v1781:0, v1782:0, 1 + v1805:1, 1 + v1807:1, 1, v1805:1, 1 + v1805:1, 1 + v1807:1, v1807:1, v1792:0, 1 + v1792:0, v1793:0, v1794:0, v1795:0, v1796:0, v1797:0, 0, 3, 2, 4) :|: v1792:0 > 0 && v1807:1 > -1 && 1 + v1807:1 >= 1 + v1805:1 && v1790:0 > 1 && v1782:0 > 2 && v1805:1 > -1
Filtered unneeded arguments:
   f_605(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_605(x6, x7, x8, x10, x11, x12, x13, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_605(v1782:0, v1783:0, v1784:0, sum~cons_1~v1805:1, v1786:0, v1790:0, sum~cons_1~v1807:1, v1792:0) -> f_605(v1782:0, v1783:0, v1784:0, v1805:1, 1 + v1805:1, 1 + v1807:1, v1807:1, v1792:0) :|: v1786:0 > 1 && v1805:1 > -1 && v1807:1 > -1 && v1784:0 > 1 && v1782:0 > 2 && v1790:0 > 1 && sum~cons_1~v1805:1 = 1 + v1805:1 && sum~cons_1~v1807:1 = 1 + v1807:1
f_605(v1782:0, sum~cons_1~v1805:1, v1784:0, cons_0, v1786:0, v1790:0, sum~cons_1~v1807:1, v1792:0) -> f_605(v1782:0, 1 + v1805:1, 1 + v1807:1, v1805:1, 1 + v1805:1, 1 + v1807:1, v1807:1, 1 + v1792:0) :|: v1807:1 > -1 && v1792:0 > 0 && 1 + v1807:1 >= 1 + v1805:1 && v1790:0 > 1 && v1805:1 > -1 && v1782:0 > 2 && sum~cons_1~v1805:1 = 1 + v1805:1 && cons_0 = 0 && sum~cons_1~v1807:1 = 1 + v1807:1

----------------------------------------

(9)
Obligation:
Rules:
f_605(v1782:0, v1783:0, v1784:0, sum~cons_1~v1805:1, v1786:0, v1790:0, sum~cons_1~v1807:1, v1792:0) -> f_605(v1782:0, v1783:0, v1784:0, v1805:1, 1 + v1805:1, 1 + v1807:1, v1807:1, v1792:0) :|: v1786:0 > 1 && v1805:1 > -1 && v1807:1 > -1 && v1784:0 > 1 && v1782:0 > 2 && v1790:0 > 1 && sum~cons_1~v1805:1 = 1 + v1805:1 && sum~cons_1~v1807:1 = 1 + v1807:1
f_605(x, x1, x2, x3, x4, x5, x6, x7) -> f_605(x, 1 + x8, 1 + x9, x8, 1 + x8, 1 + x9, x9, 1 + x7) :|: x9 > -1 && x7 > 0 && 1 + x9 >= 1 + x8 && x5 > 1 && x8 > -1 && x > 2 && x1 = 1 + x8 && x3 = 0 && x6 = 1 + x9

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_605(v1782:0:0, v1783:0:0, v1784:0:0, sum~cons_1~v1805:1:0, v1786:0:0, v1790:0:0, sum~cons_1~v1807:1:0, v1792:0:0) -> f_605(v1782:0:0, v1783:0:0, v1784:0:0, v1805:1:0, 1 + v1805:1:0, 1 + v1807:1:0, v1807:1:0, v1792:0:0) :|: v1782:0:0 > 2 && v1790:0:0 > 1 && v1784:0:0 > 1 && v1807:1:0 > -1 && v1805:1:0 > -1 && v1786:0:0 > 1 && sum~cons_1~v1805:1:0 = 1 + v1805:1:0 && sum~cons_1~v1807:1:0 = 1 + v1807:1:0
f_605(x:0, sum~cons_1~x8:0, x2:0, cons_0, x4:0, x5:0, sum~cons_1~x9:0, x7:0) -> f_605(x:0, 1 + x8:0, 1 + x9:0, x8:0, 1 + x8:0, 1 + x9:0, x9:0, 1 + x7:0) :|: x8:0 > -1 && x:0 > 2 && x5:0 > 1 && 1 + x9:0 >= 1 + x8:0 && x7:0 > 0 && x9:0 > -1 && sum~cons_1~x8:0 = 1 + x8:0 && cons_0 = 0 && sum~cons_1~x9:0 = 1 + x9:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_605 ] = f_605_7

The following rules are decreasing:
f_605(v1782:0:0, v1783:0:0, v1784:0:0, sum~cons_1~v1805:1:0, v1786:0:0, v1790:0:0, sum~cons_1~v1807:1:0, v1792:0:0) -> f_605(v1782:0:0, v1783:0:0, v1784:0:0, v1805:1:0, 1 + v1805:1:0, 1 + v1807:1:0, v1807:1:0, v1792:0:0) :|: v1782:0:0 > 2 && v1790:0:0 > 1 && v1784:0:0 > 1 && v1807:1:0 > -1 && v1805:1:0 > -1 && v1786:0:0 > 1 && sum~cons_1~v1805:1:0 = 1 + v1805:1:0 && sum~cons_1~v1807:1:0 = 1 + v1807:1:0
f_605(x:0, sum~cons_1~x8:0, x2:0, cons_0, x4:0, x5:0, sum~cons_1~x9:0, x7:0) -> f_605(x:0, 1 + x8:0, 1 + x9:0, x8:0, 1 + x8:0, 1 + x9:0, x9:0, 1 + x7:0) :|: x8:0 > -1 && x:0 > 2 && x5:0 > 1 && 1 + x9:0 >= 1 + x8:0 && x7:0 > 0 && x9:0 > -1 && sum~cons_1~x8:0 = 1 + x8:0 && cons_0 = 0 && sum~cons_1~x9:0 = 1 + x9:0

The following rules are bounded:
f_605(v1782:0:0, v1783:0:0, v1784:0:0, sum~cons_1~v1805:1:0, v1786:0:0, v1790:0:0, sum~cons_1~v1807:1:0, v1792:0:0) -> f_605(v1782:0:0, v1783:0:0, v1784:0:0, v1805:1:0, 1 + v1805:1:0, 1 + v1807:1:0, v1807:1:0, v1792:0:0) :|: v1782:0:0 > 2 && v1790:0:0 > 1 && v1784:0:0 > 1 && v1807:1:0 > -1 && v1805:1:0 > -1 && v1786:0:0 > 1 && sum~cons_1~v1805:1:0 = 1 + v1805:1:0 && sum~cons_1~v1807:1:0 = 1 + v1807:1:0
f_605(x:0, sum~cons_1~x8:0, x2:0, cons_0, x4:0, x5:0, sum~cons_1~x9:0, x7:0) -> f_605(x:0, 1 + x8:0, 1 + x9:0, x8:0, 1 + x8:0, 1 + x9:0, x9:0, 1 + x7:0) :|: x8:0 > -1 && x:0 > 2 && x5:0 > 1 && 1 + x9:0 >= 1 + x8:0 && x7:0 > 0 && x9:0 > -1 && sum~cons_1~x8:0 = 1 + x8:0 && cons_0 = 0 && sum~cons_1~x9:0 = 1 + x9:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_284(v92, v93, v94, v95, v96, v97, v98, 1, v101, v100, v102, v103, v104, v105, v106, v107, v108, 0, 3, 4) -> f_285(v92, v93, v94, v95, v96, v97, v98, 1, v101, v100, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) :|: 0 < v101 && 2 <= v100 && 2 <= v98 && 2 <= v97 && 2 <= v102 && 1 <= v103
f_285(v92, v93, v94, v95, v96, v97, v98, 1, v101, v100, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) -> f_287(v92, v93, v94, v95, v96, v97, v98, 1, v101, v100, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) :|: 0 = 0
f_287(v92, v93, v94, v95, v96, v97, v98, 1, v101, v100, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) -> f_289(v92, v93, v94, v95, v96, v97, v98, 1, v101, v100, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) :|: TRUE
f_289(v92, v93, v94, v95, v96, v97, v98, 1, v101, v100, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) -> f_291(v92, v93, v94, v95, v96, v97, v98, 1, v101, v100, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) :|: 0 = 0
f_291(v92, v93, v94, v95, v96, v97, v98, 1, v101, v100, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) -> f_293(v92, v93, v94, v95, v96, v97, v98, 1, v101, v100, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) :|: 0 = 0
f_293(v92, v93, v94, v95, v96, v97, v98, 1, v101, v100, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) -> f_295(v92, v93, v94, v95, v96, v97, v98, 1, v101, v100, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) :|: TRUE
f_295(v92, v93, v94, v95, v96, v97, v98, 1, v101, v100, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) -> f_297(v92, v93, v94, v95, v96, v97, v98, 1, v101, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) :|: 0 = 0
f_297(v92, v93, v94, v95, v96, v97, v98, 1, v101, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) -> f_299(v92, v93, v94, v95, v96, v97, v98, 1, v101, v110, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) :|: 1 + v110 = v101 && 0 <= v110
f_299(v92, v93, v94, v95, v96, v97, v98, 1, v101, v110, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) -> f_301(v92, v93, v94, v95, v96, v97, v98, 1, v101, v110, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) :|: TRUE
f_301(v92, v93, v94, v95, v96, v97, v98, 1, v101, v110, v102, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) -> f_303(v92, v93, v94, v95, v96, v97, v98, 1, v101, v110, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) :|: 0 = 0
f_303(v92, v93, v94, v95, v96, v97, v98, 1, v101, v110, v103, v104, v105, v106, v107, v108, 0, 3, 2, 4) -> f_306(v92, v93, v94, v95, v96, v97, v98, 1, v101, v110, v103, v112, v104, v105, v106, v107, v108, 0, 3, 2, 4) :|: 1 + v112 = v103 && 0 <= v112
f_306(v92, v93, v94, v95, v96, v97, v98, 1, v101, v110, v103, v112, v104, v105, v106, v107, v108, 0, 3, 2, 4) -> f_309(v92, v93, v94, v95, v96, v97, v98, 1, v101, v110, v103, v112, v104, v105, v106, v107, v108, 0, 3, 2, 4) :|: TRUE
f_309(v92, v93, v94, v95, v96, v97, v98, 1, v101, v110, v103, v112, v104, v105, v106, v107, v108, 0, 3, 2, 4) -> f_312(v92, v93, v94, v95, v96, v97, v98, 1, v101, v110, v103, v112, v104, v105, v106, v107, v108, 0, 3, 2, 4) :|: TRUE
f_312(v92, v93, v94, v95, v96, v97, v98, 1, v101, v110, v103, v112, v104, v105, v106, v107, v108, 0, 3, 2, 4) -> f_315(v92, v93, v94, v95, v96, v97, v98, 1, v101, v110, v103, v112, v104, v105, v106, v107, v108, 0, 3, 2, 4) :|: TRUE
f_315(v92, v93, v94, v95, v96, v97, v98, 1, v101, v110, v103, v112, v104, v105, v106, v107, v108, 0, 3, 2, 4) -> f_283(v92, v93, v94, v95, v96, v97, v98, 1, v101, v110, v103, v112, v104, v105, v106, v107, v108, 0, 3, 4) :|: TRUE
f_283(v92, v93, v94, v95, v96, v97, v98, 1, v100, v101, v102, v103, v104, v105, v106, v107, v108, 0, 3, 4) -> f_284(v92, v93, v94, v95, v96, v97, v98, 1, v101, v100, v102, v103, v104, v105, v106, v107, v108, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_284(v92:0, v93:0, v94:0, v95:0, v96:0, v97:0, v98:0, 1, 1 + v110:0, v100:0, v102:0, 1 + v112:0, v104:0, v105:0, v106:0, v107:0, v108:0, 0, 3, 4) -> f_284(v92:0, v93:0, v94:0, v95:0, v96:0, v97:0, v98:0, 1, v110:0, 1 + v110:0, 1 + v112:0, v112:0, v104:0, v105:0, v106:0, v107:0, v108:0, 0, 3, 4) :|: v100:0 > 1 && v110:0 > -1 && v98:0 > 1 && v97:0 > 1 && v102:0 > 1 && v112:0 > -1
Filtered unneeded arguments:
   f_284(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_284(x6, x7, x9, x10, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_284(v97:0, v98:0, sum~cons_1~v110:0, v100:0, v102:0, sum~cons_1~v112:0) -> f_284(v97:0, v98:0, v110:0, 1 + v110:0, 1 + v112:0, v112:0) :|: v110:0 > -1 && v100:0 > 1 && v98:0 > 1 && v97:0 > 1 && v112:0 > -1 && v102:0 > 1 && sum~cons_1~v110:0 = 1 + v110:0 && sum~cons_1~v112:0 = 1 + v112:0

----------------------------------------

(16)
Obligation:
Rules:
f_284(v97:0, v98:0, sum~cons_1~v110:0, v100:0, v102:0, sum~cons_1~v112:0) -> f_284(v97:0, v98:0, v110:0, 1 + v110:0, 1 + v112:0, v112:0) :|: v110:0 > -1 && v100:0 > 1 && v98:0 > 1 && v97:0 > 1 && v112:0 > -1 && v102:0 > 1 && sum~cons_1~v110:0 = 1 + v110:0 && sum~cons_1~v112:0 = 1 + v112:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_284(v97:0:0, v98:0:0, sum~cons_1~v110:0:0, v100:0:0, v102:0:0, sum~cons_1~v112:0:0) -> f_284(v97:0:0, v98:0:0, v110:0:0, 1 + v110:0:0, 1 + v112:0:0, v112:0:0) :|: v112:0:0 > -1 && v102:0:0 > 1 && v97:0:0 > 1 && v98:0:0 > 1 && v100:0:0 > 1 && v110:0:0 > -1 && sum~cons_1~v110:0:0 = 1 + v110:0:0 && sum~cons_1~v112:0:0 = 1 + v112:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_284 ] = f_284_3

The following rules are decreasing:
f_284(v97:0:0, v98:0:0, sum~cons_1~v110:0:0, v100:0:0, v102:0:0, sum~cons_1~v112:0:0) -> f_284(v97:0:0, v98:0:0, v110:0:0, 1 + v110:0:0, 1 + v112:0:0, v112:0:0) :|: v112:0:0 > -1 && v102:0:0 > 1 && v97:0:0 > 1 && v98:0:0 > 1 && v100:0:0 > 1 && v110:0:0 > -1 && sum~cons_1~v110:0:0 = 1 + v110:0:0 && sum~cons_1~v112:0:0 = 1 + v112:0:0

The following rules are bounded:
f_284(v97:0:0, v98:0:0, sum~cons_1~v110:0:0, v100:0:0, v102:0:0, sum~cons_1~v112:0:0) -> f_284(v97:0:0, v98:0:0, v110:0:0, 1 + v110:0:0, 1 + v112:0:0, v112:0:0) :|: v112:0:0 > -1 && v102:0:0 > 1 && v97:0:0 > 1 && v98:0:0 > 1 && v100:0:0 > 1 && v110:0:0 > -1 && sum~cons_1~v110:0:0 = 1 + v110:0:0 && sum~cons_1~v112:0:0 = 1 + v112:0:0


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
