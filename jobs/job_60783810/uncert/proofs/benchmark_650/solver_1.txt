YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/inSnp.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 858 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 38 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/inSnp.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/inSnp.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "sum" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = icmp sle %6 0
		br %7, %8, %12
	8:
		%9 = load %5
		%10 = load %4
		%11 = add i32 %9, %10
		store %11, %3
		br %18
	12:
		%13 = load %4
		%14 = sub i32 %13, 1
		%15 = load %5
		%16 = add i32 %15, 1
		%17 = call i32 @sum(i32 %14, i32 %16)
		store %17, %3
		br %18
	18:
		%19 = load %3
		ret %19

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 33
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		store 2, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 3, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = load %2
		%6 = load %3
		%7 = call i32 @sum(i32 %5, i32 %6)
		store %7, %4
		%8 = load %4
		%9 = load %2
		%10 = load %3
		%11 = add i32 %9, %10
		%12 = icmp eq %8 %11
		br %12, %13, %15
	13:
		br %14
	14:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		br %15
	15:
		%16 = load %1
		ret %16


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_233(v77, v78, v90, v79, v80, v81, v82, v83, v84, v85, v86, v91, 0, 2, 3, 1, 4) -> f_234(v77, v78, v90, v92, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, 0, 2, 3, 1, 4) :|: 1 <= v92 && v93 = 3 + v92 && 4 <= v93
f_234(v77, v78, v90, v92, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, 0, 2, 3, 1, 4) -> f_235(v77, v78, v90, v92, v94, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 0, 2, 3, 1, 4) :|: 1 <= v94 && v95 = 3 + v94 && 4 <= v95
f_235(v77, v78, v90, v92, v94, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 0, 2, 3, 1, 4) -> f_236(v77, v78, v90, v92, v94, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 0, 2, 3, 1, 4) :|: TRUE
f_236(v77, v78, v90, v92, v94, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 0, 2, 3, 1, 4) -> f_237(v77, v78, v90, v92, v94, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 0, 2, 3, 1, 4) :|: TRUE
f_237(v77, v78, v90, v92, v94, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 0, 2, 3, 1, 4) -> f_238(v77, v78, v90, v92, v94, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 0, 2, 3, 1, 4) :|: TRUE
f_238(v77, v78, v90, v92, v94, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 0, 2, 3, 1, 4) -> f_239(v77, v78, v90, v92, v94, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 0, 2, 3, 1, 4) :|: TRUE
f_239(v77, v78, v90, v92, v94, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 0, 2, 3, 1, 4) -> f_240(v77, v78, v90, v92, v94, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 0, 2, 3, 1, 4) :|: 0 = 0
f_240(v77, v78, v90, v92, v94, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 0, 2, 3, 1, 4) -> f_242(v77, v78, v90, v92, v94, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 0, 2, 3, 1, 4) :|: 0 < v77
f_242(v77, v78, v90, v92, v94, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 0, 2, 3, 1, 4) -> f_244(v77, v78, v90, v92, v94, 0, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 2, 3, 1, 4) :|: 0 = 0
f_244(v77, v78, v90, v92, v94, 0, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 2, 3, 1, 4) -> f_246(v77, v78, v90, v92, v94, 0, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 2, 3, 1, 4) :|: TRUE
f_246(v77, v78, v90, v92, v94, 0, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 2, 3, 1, 4) -> f_248(v77, v78, v90, v92, v94, 0, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 2, 3, 1, 4) :|: 0 = 0
f_248(v77, v78, v90, v92, v94, 0, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 2, 3, 1, 4) -> f_250(v77, v78, v90, v92, v94, 0, v98, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 2, 3, 1, 4) :|: 1 + v98 = v77 && 0 <= v98 && v98 <= 1
f_250(v77, v78, v90, v92, v94, 0, v98, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 2, 3, 1, 4) -> f_252(v77, v78, v90, v92, v94, 0, v98, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 2, 3, 1, 4) :|: 0 = 0
f_252(v77, v78, v90, v92, v94, 0, v98, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 2, 3, 1, 4) -> f_254(v77, v78, v90, v92, v94, 0, v98, v100, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 2, 3, 1, 4) :|: v100 = 1 + v78 && 4 <= v100
f_254(v77, v78, v90, v92, v94, 0, v98, v100, v79, v80, v81, v82, v83, v84, v85, v86, v91, v93, v95, 2, 3, 1, 4) -> f_256(v98, v100, v79, v80, v81, v82, v83, v84, v85, v86, v90, v91, v92, v93, v94, v95, 0, 2, 3, v77, v78, 1, 4) :|: 0 = 0
f_256(v98, v100, v79, v80, v81, v82, v83, v84, v85, v86, v90, v91, v92, v93, v94, v95, 0, 2, 3, v77, v78, 1, 4) -> f_258(v98, v100, v79, v80, v81, v82, v83, v84, v85, v86, v90, v91, v92, v93, v94, v95, 0, 2, 3, v77, v78, 1, 4) :|: TRUE
f_258(v98, v100, v79, v80, v81, v82, v83, v84, v85, v86, v90, v91, v92, v93, v94, v95, 0, 2, 3, v77, v78, 1, 4) -> f_232(v98, v100, v79, v80, v81, v82, v83, v84, v85, v86, 0, 2, 3, 1, 4) :|: TRUE
f_232(v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, 0, 2, 3, 1, 4) -> f_233(v77, v78, v90, v79, v80, v81, v82, v83, v84, v85, v86, v91, 0, 2, 3, 1, 4) :|: 1 <= v90 && v91 = 3 + v90 && 4 <= v91
Combined rules. Obtained 1 rulesP rules:
f_233(1 + v98:0, v78:0, v90:0, v79:0, v80:0, v81:0, v82:0, v83:0, v84:0, v85:0, v86:0, v91:0, 0, 2, 3, 1, 4) -> f_233(v98:0, 1 + v78:0, v90:1, v79:0, v80:0, v81:0, v82:0, v83:0, v84:0, v85:0, v86:0, 3 + v90:1, 0, 2, 3, 1, 4) :|: v94:0 > 0 && v92:0 > 0 && v98:0 > -1 && v98:0 < 2 && v78:0 > 2 && v90:1 > 0
Filtered unneeded arguments:
   f_233(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_233(x1, x2)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_233(sum~cons_1~v98:0, v78:0) -> f_233(v98:0, 1 + v78:0) :|: v98:0 < 2 && v78:0 > 2 && v98:0 > -1 && sum~cons_1~v98:0 = 1 + v98:0

----------------------------------------

(8)
Obligation:
Rules:
f_233(sum~cons_1~v98:0, v78:0) -> f_233(v98:0, 1 + v78:0) :|: v98:0 < 2 && v78:0 > 2 && v98:0 > -1 && sum~cons_1~v98:0 = 1 + v98:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_233(sum~cons_1~v98:0:0, v78:0:0) -> f_233(v98:0:0, 1 + v78:0:0) :|: v98:0:0 < 2 && v78:0:0 > 2 && v98:0:0 > -1 && sum~cons_1~v98:0:0 = 1 + v98:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_233(x, x1)] = x

The following rules are decreasing:
f_233(sum~cons_1~v98:0:0, v78:0:0) -> f_233(v98:0:0, 1 + v78:0:0) :|: v98:0:0 < 2 && v78:0:0 > 2 && v98:0:0 > -1 && sum~cons_1~v98:0:0 = 1 + v98:0:0
The following rules are bounded:
f_233(sum~cons_1~v98:0:0, v78:0:0) -> f_233(v98:0:0, 1 + v78:0:0) :|: v98:0:0 < 2 && v78:0:0 > 2 && v98:0:0 > -1 && sum~cons_1~v98:0:0 = 1 + v98:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
