YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/c4iHx.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 30 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 4182 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 115 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/c4iHx.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/c4iHx.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cstrncmp" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8, 2 i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 12
	0:
		%4 = alloca i32, align 4
		%5 = alloca *i8, align 8
		%6 = alloca *i8, align 8
		%7 = alloca i64, align 8
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %7)
		%8 = load %7
		%9 = icmp eq %8 0
		br %9, %10, %11
	10:
		store 0, %4
		br %43
	11:
		br %12
	12:
		%13 = load %5
		%14 = load %13
		%15 = sext i8 %14 to i32
		%16 = load %6
		%17 = getelementptr %16, 1
		store %17, %6
		%18 = load %16
		%19 = sext i8 %18 to i32
		%20 = icmp ne %15 %19
		br %20, %21, %30
	21:
		%22 = load %5
		%23 = load %22
		%24 = zext i8 %23 to i32
		%25 = load %6
		%26 = getelementptr %25, -1
		store %26, %6
		%27 = load %26
		%28 = zext i8 %27 to i32
		%29 = sub i32 %24, %28
		store %29, %4
		br %43
	30:
		%31 = load %5
		%32 = getelementptr %31, 1
		store %32, %5
		%33 = load %31
		%34 = sext i8 %33 to i32
		%35 = icmp eq %34 0
		br %35, %36, %37
	36:
		br %42
	37:
		br %38
	38:
		%39 = load %7
		%40 = add i64 %39, -1
		store %40, %7
		%41 = icmp ne %40 0
		br %41, %12, %42
	42:
		store 0, %4
		br %43
	43:
		%44 = load %4
		ret %44

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 61
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = load %2
		%9 = icmp slt %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %11
	11:
		%12 = load %3
		%13 = icmp slt %12 1
		br %13, %14, %15
	14:
		store 1, %3
		br %15
	15:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%16 = load %2
		%17 = sext i32 %16 to i64
		%18 = mul i64 %17, 1
		%19 = alloca i8, numElementsLit: %18, align 16
		store %19, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%20 = load %3
		%21 = sext i32 %20 to i64
		%22 = mul i64 %21, 1
		%23 = alloca i8, numElementsLit: %22, align 16
		store %23, %5
		%24 = load %4
		%25 = load %2
		%26 = sub i32 %25, 1
		%27 = sext i32 %26 to i64
		%28 = getelementptr %24, %27
		store 0, %28
		%29 = load %5
		%30 = load %3
		%31 = sub i32 %30, 1
		%32 = sext i32 %31 to i64
		%33 = getelementptr %29, %32
		store 0, %33
		%34 = load %4
		%35 = load %5
		%36 = call i32 @__VERIFIER_nondet_int()
		%37 = sext i32 %36 to i64
		%38 = call i32 @cstrncmp(*i8 %34, *i8 %35, i64 %37)
		ret %38


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 27 rulesP rules:
f_891(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2292, v2293, v2294, v2291, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_892(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2323, v2292, v2293, v2294, v2291, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: TRUE
f_892(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2323, v2292, v2293, v2294, v2291, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_893(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2323, v2293, v2294, v2292, v2291, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: 0 = 0
f_893(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2323, v2293, v2294, v2292, v2291, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_894(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2323, v2294, v2292, v2291, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: 0 = 0
f_894(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2323, v2294, v2292, v2291, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_895(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2323, v2294, v2325, v2292, v2291, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: v2325 = 1 + v2294 && 4 <= v2325
f_895(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2323, v2294, v2325, v2292, v2291, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_896(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2323, v2294, v2325, v2292, v2291, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: TRUE
f_896(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2323, v2294, v2325, v2292, v2291, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_897(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2323, v2294, v2325, v2327, v2292, v2291, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: TRUE
f_897(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2323, v2294, v2325, v2327, v2292, v2291, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_898(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2323, v2294, v2325, v2327, v2291, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: 0 = 0
f_898(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2323, v2294, v2325, v2327, v2291, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_900(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2291, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: v2323 = v2327
f_900(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2291, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_902(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2291, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: 0 = 0
f_902(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2291, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_904(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2291, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: TRUE
f_904(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2291, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_906(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: 0 = 0
f_906(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_908(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: v2402 = 1 + v2295 && 4 <= v2402
f_908(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_910(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: TRUE
f_910(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_912(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: 0 = 0
f_912(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2292, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_914(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: 0 = 0
f_914(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_917(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: v2327 != 0 && v2295 < v2307 && v2294 < v2309 && 4 <= v2307 && 4 <= v2309
f_917(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_920(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: 0 = 0
f_920(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_923(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: TRUE
f_923(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_926(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: TRUE
f_926(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_929(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: 0 = 0
f_929(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_932(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2297, v2733, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: 1 + v2733 = v2297
f_932(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2297, v2733, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_935(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2297, v2733, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: TRUE
f_935(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2297, v2733, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_938(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2297, v2733, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: v2733 != 0
f_938(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2297, v2733, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_940(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2297, v2733, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: 0 = 0
f_940(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2297, v2733, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_942(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2297, v2733, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: TRUE
f_942(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2297, v2733, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2291, v2292, v2293, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_890(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2327, v2294, v2325, v2402, v2297, v2733, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: TRUE
f_890(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2291, v2292, v2293, v2294, v2295, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) -> f_891(v2283, v2284, v2285, v2286, v2287, v2288, v2289, 0, v2295, v2292, v2293, v2294, v2291, v2296, v2297, 1, v2299, v2310, v2300, v2311, v2301, v2312, v2302, v2313, v2303, v2314, v2307, v2309, v2315, v2316, v2317, v2318, v2321, v2304, v2305, v2319, v2322, v2320, v2306, v2308, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 4 rulesP rules:
f_891(v2283:0, v2284:0, v2285:0, v2286:0, v2287:0, v2288:0, v2289:0, 0, v2295:0, v2292:0, v2293:0, v2294:0, v2291:0, v2296:0, 1 + v2733:0, 1, v2299:0, v2310:0, v2300:0, v2311:0, v2301:0, v2312:0, v2302:0, v2313:0, v2303:0, v2314:0, v2307:0, v2309:0, v2315:0, v2316:0, v2317:0, v2318:0, v2321:0, v2304:0, v2305:0, v2319:0, v2322:0, v2320:0, v2306:0, v2308:0, 3, 7, 2, 4, 8) -> f_891(v2283:0, v2284:0, v2285:0, v2286:0, v2287:0, v2288:0, v2289:0, 0, 1 + v2295:0, v2323:0, v2294:0, 1 + v2294:0, v2295:0, 1 + v2733:0, v2733:0, 1, v2299:0, v2310:0, v2300:0, v2311:0, v2301:0, v2312:0, v2302:0, v2313:0, v2303:0, v2314:0, v2307:0, v2309:0, v2315:0, v2316:0, v2317:0, v2318:0, v2321:0, v2304:0, v2305:0, v2319:0, v2322:0, v2320:0, v2306:0, v2308:0, 3, 7, 2, 4, 8) :|: v2294:0 > 2 && v2295:0 > 2 && v2307:0 > v2295:0 && v2323:0 < 0 && v2309:0 > v2294:0 && v2307:0 > 3 && v2733:0 < 0 && v2309:0 > 3
f_891(v2283:0, v2284:0, v2285:0, v2286:0, v2287:0, v2288:0, v2289:0, 0, v2295:0, v2292:0, v2293:0, v2294:0, v2291:0, v2296:0, 1 + v2733:0, 1, v2299:0, v2310:0, v2300:0, v2311:0, v2301:0, v2312:0, v2302:0, v2313:0, v2303:0, v2314:0, v2307:0, v2309:0, v2315:0, v2316:0, v2317:0, v2318:0, v2321:0, v2304:0, v2305:0, v2319:0, v2322:0, v2320:0, v2306:0, v2308:0, 3, 7, 2, 4, 8) -> f_891(v2283:0, v2284:0, v2285:0, v2286:0, v2287:0, v2288:0, v2289:0, 0, 1 + v2295:0, v2323:0, v2294:0, 1 + v2294:0, v2295:0, 1 + v2733:0, v2733:0, 1, v2299:0, v2310:0, v2300:0, v2311:0, v2301:0, v2312:0, v2302:0, v2313:0, v2303:0, v2314:0, v2307:0, v2309:0, v2315:0, v2316:0, v2317:0, v2318:0, v2321:0, v2304:0, v2305:0, v2319:0, v2322:0, v2320:0, v2306:0, v2308:0, 3, 7, 2, 4, 8) :|: v2294:0 > 2 && v2295:0 > 2 && v2307:0 > v2295:0 && v2323:0 < 0 && v2309:0 > v2294:0 && v2307:0 > 3 && v2733:0 > 0 && v2309:0 > 3
f_891(v2283:0, v2284:0, v2285:0, v2286:0, v2287:0, v2288:0, v2289:0, 0, v2295:0, v2292:0, v2293:0, v2294:0, v2291:0, v2296:0, 1 + v2733:0, 1, v2299:0, v2310:0, v2300:0, v2311:0, v2301:0, v2312:0, v2302:0, v2313:0, v2303:0, v2314:0, v2307:0, v2309:0, v2315:0, v2316:0, v2317:0, v2318:0, v2321:0, v2304:0, v2305:0, v2319:0, v2322:0, v2320:0, v2306:0, v2308:0, 3, 7, 2, 4, 8) -> f_891(v2283:0, v2284:0, v2285:0, v2286:0, v2287:0, v2288:0, v2289:0, 0, 1 + v2295:0, v2323:0, v2294:0, 1 + v2294:0, v2295:0, 1 + v2733:0, v2733:0, 1, v2299:0, v2310:0, v2300:0, v2311:0, v2301:0, v2312:0, v2302:0, v2313:0, v2303:0, v2314:0, v2307:0, v2309:0, v2315:0, v2316:0, v2317:0, v2318:0, v2321:0, v2304:0, v2305:0, v2319:0, v2322:0, v2320:0, v2306:0, v2308:0, 3, 7, 2, 4, 8) :|: v2294:0 > 2 && v2295:0 > 2 && v2307:0 > v2295:0 && v2323:0 > 0 && v2309:0 > v2294:0 && v2307:0 > 3 && v2733:0 < 0 && v2309:0 > 3
f_891(v2283:0, v2284:0, v2285:0, v2286:0, v2287:0, v2288:0, v2289:0, 0, v2295:0, v2292:0, v2293:0, v2294:0, v2291:0, v2296:0, 1 + v2733:0, 1, v2299:0, v2310:0, v2300:0, v2311:0, v2301:0, v2312:0, v2302:0, v2313:0, v2303:0, v2314:0, v2307:0, v2309:0, v2315:0, v2316:0, v2317:0, v2318:0, v2321:0, v2304:0, v2305:0, v2319:0, v2322:0, v2320:0, v2306:0, v2308:0, 3, 7, 2, 4, 8) -> f_891(v2283:0, v2284:0, v2285:0, v2286:0, v2287:0, v2288:0, v2289:0, 0, 1 + v2295:0, v2323:0, v2294:0, 1 + v2294:0, v2295:0, 1 + v2733:0, v2733:0, 1, v2299:0, v2310:0, v2300:0, v2311:0, v2301:0, v2312:0, v2302:0, v2313:0, v2303:0, v2314:0, v2307:0, v2309:0, v2315:0, v2316:0, v2317:0, v2318:0, v2321:0, v2304:0, v2305:0, v2319:0, v2322:0, v2320:0, v2306:0, v2308:0, 3, 7, 2, 4, 8) :|: v2294:0 > 2 && v2295:0 > 2 && v2307:0 > v2295:0 && v2323:0 > 0 && v2309:0 > v2294:0 && v2307:0 > 3 && v2733:0 > 0 && v2309:0 > 3
Filtered unneeded arguments:
   f_891(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45) -> f_891(x9, x12, x15, x27, x28)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_891(v2295:0, v2294:0, sum~cons_1~v2733:0, v2307:0, v2309:0) -> f_891(1 + v2295:0, 1 + v2294:0, v2733:0, v2307:0, v2309:0) :|: v2295:0 > 2 && v2294:0 > 2 && v2307:0 > v2295:0 && v2309:0 > v2294:0 && v2307:0 > 3 && v2309:0 > 3 && v2733:0 < 0 && sum~cons_1~v2733:0 = 1 + v2733:0
f_891(v2295:0, v2294:0, sum~cons_1~v2733:0, v2307:0, v2309:0) -> f_891(1 + v2295:0, 1 + v2294:0, v2733:0, v2307:0, v2309:0) :|: v2295:0 > 2 && v2294:0 > 2 && v2307:0 > v2295:0 && v2309:0 > v2294:0 && v2307:0 > 3 && v2309:0 > 3 && v2733:0 > 0 && sum~cons_1~v2733:0 = 1 + v2733:0

----------------------------------------

(8)
Obligation:
Rules:
f_891(v2295:0, v2294:0, sum~cons_1~v2733:0, v2307:0, v2309:0) -> f_891(1 + v2295:0, 1 + v2294:0, v2733:0, v2307:0, v2309:0) :|: v2295:0 > 2 && v2294:0 > 2 && v2307:0 > v2295:0 && v2309:0 > v2294:0 && v2307:0 > 3 && v2309:0 > 3 && v2733:0 < 0 && sum~cons_1~v2733:0 = 1 + v2733:0
f_891(x, x1, x2, x3, x4) -> f_891(1 + x, 1 + x1, x5, x3, x4) :|: x > 2 && x1 > 2 && x3 > x && x4 > x1 && x3 > 3 && x4 > 3 && x5 > 0 && x2 = 1 + x5

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_891(x:0, x1:0, sum~cons_1~x5:0, x3:0, x4:0) -> f_891(1 + x:0, 1 + x1:0, x5:0, x3:0, x4:0) :|: x4:0 > 3 && x5:0 > 0 && x3:0 > 3 && x4:0 > x1:0 && x:0 < x3:0 && x1:0 > 2 && x:0 > 2 && sum~cons_1~x5:0 = 1 + x5:0
f_891(v2295:0:0, v2294:0:0, sum~cons_1~v2733:0:0, v2307:0:0, v2309:0:0) -> f_891(1 + v2295:0:0, 1 + v2294:0:0, v2733:0:0, v2307:0:0, v2309:0:0) :|: v2309:0:0 > 3 && v2733:0:0 < 0 && v2307:0:0 > 3 && v2309:0:0 > v2294:0:0 && v2307:0:0 > v2295:0:0 && v2294:0:0 > 2 && v2295:0:0 > 2 && sum~cons_1~v2733:0:0 = 1 + v2733:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_891(x, x1, x2, x3, x4)] = -x + x3

The following rules are decreasing:
f_891(x:0, x1:0, sum~cons_1~x5:0, x3:0, x4:0) -> f_891(1 + x:0, 1 + x1:0, x5:0, x3:0, x4:0) :|: x4:0 > 3 && x5:0 > 0 && x3:0 > 3 && x4:0 > x1:0 && x:0 < x3:0 && x1:0 > 2 && x:0 > 2 && sum~cons_1~x5:0 = 1 + x5:0
f_891(v2295:0:0, v2294:0:0, sum~cons_1~v2733:0:0, v2307:0:0, v2309:0:0) -> f_891(1 + v2295:0:0, 1 + v2294:0:0, v2733:0:0, v2307:0:0, v2309:0:0) :|: v2309:0:0 > 3 && v2733:0:0 < 0 && v2307:0:0 > 3 && v2309:0:0 > v2294:0:0 && v2307:0:0 > v2295:0:0 && v2294:0:0 > 2 && v2295:0:0 > 2 && sum~cons_1~v2733:0:0 = 1 + v2733:0:0
The following rules are bounded:
f_891(x:0, x1:0, sum~cons_1~x5:0, x3:0, x4:0) -> f_891(1 + x:0, 1 + x1:0, x5:0, x3:0, x4:0) :|: x4:0 > 3 && x5:0 > 0 && x3:0 > 3 && x4:0 > x1:0 && x:0 < x3:0 && x1:0 > 2 && x:0 > 2 && sum~cons_1~x5:0 = 1 + x5:0
f_891(v2295:0:0, v2294:0:0, sum~cons_1~v2733:0:0, v2307:0:0, v2309:0:0) -> f_891(1 + v2295:0:0, 1 + v2294:0:0, v2733:0:0, v2307:0:0, v2309:0:0) :|: v2309:0:0 > 3 && v2733:0:0 < 0 && v2307:0:0 > 3 && v2309:0:0 > v2294:0:0 && v2307:0:0 > v2295:0:0 && v2294:0:0 > 2 && v2295:0:0 > 2 && sum~cons_1~v2733:0:0 = 1 + v2733:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
