YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/kuL7q.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 780 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 52 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 10 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/kuL7q.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/kuL7q.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "g" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp eq %4 0
		br %5, %6, %7
	6:
		store 1, %2
		br %13
	7:
		%8 = load %3
		%9 = sub i32 %8, 1
		%10 = call i32 @g(i32 %9)
		%11 = sub i32 %10, 1
		%12 = call i32 @g(i32 %11)
		store %12, %2
		br %13
	13:
		%14 = load %2
		ret %14

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 26
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 (...)* @__VERIFIER_nondet_int()
		store %3, %2
		%4 = load %2
		%5 = icmp slt %4 0
		br %5, %6, %7
	6:
		store 0, %1
		br %10
	7:
		%8 = load %2
		%9 = call i32 @g(i32 %8)
		br %10
	10:
		%11 = load %1
		ret %11


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 43 rulesP rules:
f_172(v43, v50, v44, v45, v46, v47, v51, 0, v49, 3, 1, 4) -> f_174(v43, v50, v52, v44, v45, v46, v47, v51, v53, 0, v49, 3, 1, 4) :|: 1 <= v52 && v53 = 3 + v52 && 4 <= v53
f_174(v43, v50, v52, v44, v45, v46, v47, v51, v53, 0, v49, 3, 1, 4) -> f_175(v43, v50, v52, v44, v45, v46, v47, v51, v53, 0, v49, 3, 1, 4) :|: TRUE
f_175(v43, v50, v52, v44, v45, v46, v47, v51, v53, 0, v49, 3, 1, 4) -> f_176(v43, v50, v52, v44, v45, v46, v47, v51, v53, 0, v49, 3, 1, 4) :|: TRUE
f_176(v43, v50, v52, v44, v45, v46, v47, v51, v53, 0, v49, 3, 1, 4) -> f_177(v43, v50, v52, v44, v45, v46, v47, v51, v53, 0, v49, 3, 1, 4) :|: 0 = 0
f_177(v43, v50, v52, v44, v45, v46, v47, v51, v53, 0, v49, 3, 1, 4) -> f_179(v43, v50, v52, v44, v45, v46, v47, v51, v53, 0, v49, 3, 1, 4) :|: v43 != 0 && 1 <= v49
f_179(v43, v50, v52, v44, v45, v46, v47, v51, v53, 0, v49, 3, 1, 4) -> f_181(v43, v50, v52, 0, v44, v45, v46, v47, v51, v53, v49, 3, 1, 4) :|: 0 = 0
f_181(v43, v50, v52, 0, v44, v45, v46, v47, v51, v53, v49, 3, 1, 4) -> f_183(v43, v50, v52, 0, v44, v45, v46, v47, v51, v53, v49, 3, 1, 4) :|: TRUE
f_183(v43, v50, v52, 0, v44, v45, v46, v47, v51, v53, v49, 3, 1, 4) -> f_185(v43, v50, v52, 0, v44, v45, v46, v47, v51, v53, v49, 3, 1, 4) :|: 0 = 0
f_185(v43, v50, v52, 0, v44, v45, v46, v47, v51, v53, v49, 3, 1, 4) -> f_187(v43, v50, v52, 0, v55, v44, v45, v46, v47, v51, v53, v49, 3, 1, 4) :|: 1 + v55 = v43 && 0 <= v55
f_187(v43, v50, v52, 0, v55, v44, v45, v46, v47, v51, v53, v49, 3, 1, 4) -> f_189(v55, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 1, 4) :|: 0 = 0
f_189(v55, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 1, 4) -> f_191(v55, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 1, 4) :|: TRUE
f_189(v55, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 1, 4) -> f_194(0, 1, v44, v45, v46, v47, v50, v51, v52, v53, v49, 3, 4) :|: TRUE
f_189(v55, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 1, 4) -> f_258(v55, 1, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 4) :|: TRUE
f_189(v55, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 1, 4) -> f_283(v55, 1, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 4) :|: TRUE
f_189(v55, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 1, 4) -> f_299(v55, 1, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 4) :|: TRUE
f_189(v55, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 1, 4) -> f_321(v55, 1, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 4) :|: TRUE
f_189(v55, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 1, 4) -> f_328(v55, 1, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 4) :|: TRUE
f_189(v55, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 1, 4) -> f_341(v55, 1, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 4) :|: TRUE
f_191(v55, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 1, 4) -> f_170(v55, v44, v45, v46, v47, 0, v49, 3, 1, 4) :|: TRUE
f_170(v43, v44, v45, v46, v47, 0, v49, 3, 1, 4) -> f_172(v43, v50, v44, v45, v46, v47, v51, 0, v49, 3, 1, 4) :|: 1 <= v50 && v51 = 3 + v50 && 4 <= v51
f_194(0, 1, v44, v45, v46, v47, v50, v51, v52, v53, v49, 3, 4) -> f_196(1, v50, v52, 0, v44, v45, v46, v47, v51, v53, v49, 3, 4) :|: 0 = 0
f_196(1, v50, v52, 0, v44, v45, v46, v47, v51, v53, v49, 3, 4) -> f_197(1, v50, v52, 0, v44, v45, v46, v47, v51, v53, v49, 3, 4) :|: 0 = 0
f_197(1, v50, v52, 0, v44, v45, v46, v47, v51, v53, v49, 3, 4) -> f_198(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, 1, 3, 4) :|: 0 = 0
f_198(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, 1, 3, 4) -> f_199(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, 1, 3, 4) :|: TRUE
f_199(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, 1, 3, 4) -> f_170(0, v44, v45, v46, v47, 0, v49, 3, 1, 4) :|: TRUE
f_258(v55, 1, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 4) -> f_261(v43, v50, v52, 0, v55, 1, v44, v45, v46, v47, v51, v53, v49, 3, 4) :|: 0 = 0
f_261(v43, v50, v52, 0, v55, 1, v44, v45, v46, v47, v51, v53, v49, 3, 4) -> f_264(v43, v50, v52, 0, v55, 1, v44, v45, v46, v47, v51, v53, v49, 3, 4) :|: 0 = 0
f_264(v43, v50, v52, 0, v55, 1, v44, v45, v46, v47, v51, v53, v49, 3, 4) -> f_267(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, v43, v55, 1, 3, 4) :|: 0 = 0
f_267(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, v43, v55, 1, 3, 4) -> f_269(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, v43, 3, 1, 4) :|: TRUE
f_269(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, v43, 3, 1, 4) -> f_170(0, v44, v45, v46, v47, 0, v49, 3, 1, 4) :|: TRUE
f_283(v55, 1, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 4) -> f_287(v43, v50, v52, 0, v55, 1, v44, v45, v46, v47, v51, v53, v49, 3, 4) :|: 0 = 0
f_287(v43, v50, v52, 0, v55, 1, v44, v45, v46, v47, v51, v53, v49, 3, 4) -> f_291(v43, v50, v52, 0, v55, 1, v44, v45, v46, v47, v51, v53, v49, 3, 4) :|: 0 = 0
f_291(v43, v50, v52, 0, v55, 1, v44, v45, v46, v47, v51, v53, v49, 3, 4) -> f_294(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, v43, v55, 1, 3, 4) :|: 0 = 0
f_294(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, v43, v55, 1, 3, 4) -> f_297(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, v43, 3, 1, 4) :|: TRUE
f_297(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, v43, 3, 1, 4) -> f_170(0, v44, v45, v46, v47, 0, v49, 3, 1, 4) :|: TRUE
f_299(v55, 1, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 4) -> f_303(v43, v50, v52, 0, v55, 1, v44, v45, v46, v47, v51, v53, v49, 3, 4) :|: 0 = 0
f_303(v43, v50, v52, 0, v55, 1, v44, v45, v46, v47, v51, v53, v49, 3, 4) -> f_309(v43, v50, v52, 0, v55, 1, v44, v45, v46, v47, v51, v53, v49, 3, 4) :|: 0 = 0
f_309(v43, v50, v52, 0, v55, 1, v44, v45, v46, v47, v51, v53, v49, 3, 4) -> f_314(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, v43, v55, 1, 3, 4) :|: 0 = 0
f_314(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, v43, v55, 1, 3, 4) -> f_319(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, v43, 3, 1, 4) :|: TRUE
f_319(0, v44, v45, v46, v47, v50, v51, v52, v53, v49, v43, 3, 1, 4) -> f_170(0, v44, v45, v46, v47, 0, v49, 3, 1, 4) :|: TRUE
f_321(v55, 1, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 4) -> f_299(v55, 1, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 4) :|: TRUE
f_328(v55, 1, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 4) -> f_321(v55, 1, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 4) :|: TRUE
f_341(v55, 1, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 4) -> f_328(v55, 1, v44, v45, v46, v47, v50, v51, v52, v53, 0, v49, v43, 3, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_172(1 + v55:0, v50:0, v44:0, v45:0, v46:0, v47:0, v51:0, 0, v49:0, 3, 1, 4) -> f_172(v55:0, v50:1, v44:0, v45:0, v46:0, v47:0, 3 + v50:1, 0, v49:0, 3, 1, 4) :|: v52:0 > 0 && v49:0 > 0 && v55:0 > -1 && v50:1 > 0
f_172(1 + v55:0, v50:0, v44:0, v45:0, v46:0, v47:0, v51:0, 0, v49:0, 3, 1, 4) -> f_172(0, v50:1, v44:0, v45:0, v46:0, v47:0, 3 + v50:1, 0, v49:0, 3, 1, 4) :|: v52:0 > 0 && v49:0 > 0 && v55:0 > -1 && v50:1 > 0
Filtered unneeded arguments:
   f_172(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) -> f_172(x1, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_172(sum~cons_1~v55:0, v49:0) -> f_172(v55:0, v49:0) :|: v49:0 > 0 && v55:0 > -1 && sum~cons_1~v55:0 = 1 + v55:0
f_172(sum~cons_1~v55:0, v49:0) -> f_172(0, v49:0) :|: v49:0 > 0 && v55:0 > -1 && sum~cons_1~v55:0 = 1 + v55:0

----------------------------------------

(8)
Obligation:
Rules:
f_172(sum~cons_1~v55:0, v49:0) -> f_172(v55:0, v49:0) :|: v49:0 > 0 && v55:0 > -1 && sum~cons_1~v55:0 = 1 + v55:0
f_172(x, x1) -> f_172(0, x1) :|: x1 > 0 && x2 > -1 && x = 1 + x2

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(10)
Obligation:
Rules:
f_172(sum~cons_1~v55:0, v49:0) -> f_172(v55:0, v49:0) :|: v49:0 > 0 && v55:0 > -1 && sum~cons_1~v55:0 = 1 + v55:0

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_172(sum~cons_1~v55:0:0, v49:0:0) -> f_172(v55:0:0, v49:0:0) :|: v49:0:0 > 0 && v55:0:0 > -1 && sum~cons_1~v55:0:0 = 1 + v55:0:0

----------------------------------------

(13) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_172(x, x1)] = x

The following rules are decreasing:
f_172(sum~cons_1~v55:0:0, v49:0:0) -> f_172(v55:0:0, v49:0:0) :|: v49:0:0 > 0 && v55:0:0 > -1 && sum~cons_1~v55:0:0 = 1 + v55:0:0
The following rules are bounded:
f_172(sum~cons_1~v55:0:0, v49:0:0) -> f_172(v55:0:0, v49:0:0) :|: v49:0:0 > 0 && v55:0:0 > -1 && sum~cons_1~v55:0:0 = 1 + v55:0:0

----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
