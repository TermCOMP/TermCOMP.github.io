YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/N53WV.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 22 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 235 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [SOUND, 16 ms]
(6) IntTRS
(7) IRSToKoat [EQUIVALENT, 0 ms]
(8) Koat Problem
(9) KoAT2 [EQUIVALENT, 12 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/N53WV.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/N53WV.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = icmp sle %6 0
		br %7, %8, %10
	8:
		%9 = load %5
		store %9, %3
		br %26
	10:
		br %11
	11:
		%12 = load %4
		%13 = load %5
		%14 = icmp sgt %12 %13
		br %14, %15, %24
	15:
		%16 = load %4
		%17 = icmp sle %16 0
		br %17, %18, %20
	18:
		%19 = load %5
		store %19, %3
		br %26
	20:
		%21 = load %5
		%22 = load %4
		%23 = add i32 %21, %22
		store %23, %5
		br %11
	24:
		%25 = load %5
		store %25, %3
		br %26
	26:
		%27 = load %3
		ret %27

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 44
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 70 rulesP rules:
f_125 -> f_126(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_126(v1, v2, 3, 1, 4) -> f_127(v1, v2, 0, 3, 1, 4) :|: TRUE
f_127(v1, v2, 0, 3, 1, 4) -> f_128(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_128(v1, v3, v2, 0, 3, 1, 4) -> f_129(v1, v3, v4, v2, 0, 3, 1, 4) :|: TRUE
f_129(v1, v3, v4, v2, 0, 3, 1, 4) -> f_130(v3, v4, v1, v2, 0, 3, 1, 4) :|: 0 = 0
f_130(v3, v4, v1, v2, 0, 3, 1, 4) -> f_131(v3, v4, v5, v1, v2, v6, 0, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_131(v3, v4, v5, v1, v2, v6, 0, 3, 1, 4) -> f_132(v3, v4, v5, v7, v1, v2, v6, v8, 0, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_132(v3, v4, v5, v7, v1, v2, v6, v8, 0, 3, 1, 4) -> f_133(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: 1 <= v9 && v10 = 3 + v9 && 4 <= v10
f_133(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_134(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_134(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_135(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_135(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_136(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_136(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_137(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_137(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_138(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: 0 = 0
f_138(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_139(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: v3 <= 0
f_138(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_140(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: 0 < v3
f_139(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_141(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_140(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_142(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_141(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) -> f_143(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) :|: TRUE
f_142(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_144(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: TRUE
f_143(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) -> f_145(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_144(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_146(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: TRUE
f_145(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) -> f_147(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) :|: TRUE
f_146(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_148(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_147(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) -> f_149(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) :|: TRUE
f_148(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_150(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_149(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) -> f_151(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_150(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_152(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: v4 < v3
f_150(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_153(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: v3 <= v4 && 1 <= v4
f_151(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) -> f_154(v1, v3, v4, v2, 0, 3, 1, 4) :|: 0 = 0
f_152(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_155(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) :|: 0 = 0
f_153(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_156(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_155(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) -> f_157(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) :|: TRUE
f_156(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_158(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: TRUE
f_157(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) -> f_159(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) :|: 0 = 0
f_158(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_160(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_159(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) -> f_161(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) :|: 0 = 0
f_160(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_162(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: TRUE
f_161(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) -> f_163(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) :|: TRUE
f_162(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_164(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: TRUE
f_163(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) -> f_165(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) :|: 0 = 0
f_164(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_166(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_165(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) -> f_167(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) :|: 0 = 0
f_166(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_168(v1, v3, v4, v2, 0, 3, 1, 4) :|: 0 = 0
f_167(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) -> f_169(v3, v4, v5, v7, v9, 0, 1, v15, v1, v2, v6, v8, v10, 3, 4) :|: v15 = v4 + v3
f_169(v3, v4, v5, v7, v9, 0, 1, v15, v1, v2, v6, v8, v10, 3, 4) -> f_170(v3, v4, v5, v7, v9, 0, 1, v15, v1, v2, v6, v8, v10, 3, 4) :|: TRUE
f_170(v3, v4, v5, v7, v9, 0, 1, v15, v1, v2, v6, v8, v10, 3, 4) -> f_171(v3, v4, v5, v7, v9, 0, 1, v15, v1, v2, v6, v8, v10, 3, 4) :|: TRUE
f_171(v3, v4, v5, v7, v9, 0, 1, v15, v1, v2, v6, v8, v10, 3, 4) -> f_193(v3, v4, v5, v7, v9, 0, v4, 1, v15, v1, v2, v6, v8, v10, 3, 4) :|: TRUE
f_193(v21, v22, v23, v24, v25, 0, v27, 1, v29, v30, v31, v32, v33, v34, 3, 4) -> f_215(v21, v22, v23, v24, v25, 0, v27, 1, v29, v30, v31, v32, v33, v34, 3, 4) :|: TRUE
f_215(v39, v40, v41, v42, v43, 0, v45, 1, v47, v48, v49, v50, v51, v52, 3, 4) -> f_216(v39, v40, v41, v42, v43, 0, v45, 1, v47, v48, v49, v50, v51, v52, 3, 4) :|: 0 = 0
f_216(v39, v40, v41, v42, v43, 0, v45, 1, v47, v48, v49, v50, v51, v52, 3, 4) -> f_217(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) :|: 0 = 0
f_217(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) -> f_218(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) :|: v47 < v39 && 1 + v45 <= 0
f_217(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) -> f_219(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) :|: v39 <= v47 && 0 <= v45 && 1 <= v47
f_218(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) -> f_220(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) :|: 0 = 0
f_219(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) -> f_221(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) :|: 0 = 0
f_220(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) -> f_222(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) :|: TRUE
f_221(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) -> f_223(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) :|: TRUE
f_222(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) -> f_224(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) :|: 0 = 0
f_223(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) -> f_225(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) :|: 0 = 0
f_224(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) -> f_226(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) :|: 0 = 0
f_225(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) -> f_227(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) :|: TRUE
f_226(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) -> f_228(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) :|: TRUE
f_227(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) -> f_229(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) :|: TRUE
f_228(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) -> f_230(v39, v40, v41, v42, v43, 0, v47, 1, v48, v49, v50, v51, v52, 3, 4) :|: 0 = 0
f_229(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) -> f_231(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) :|: 0 = 0
f_230(v39, v40, v41, v42, v43, 0, v47, 1, v48, v49, v50, v51, v52, 3, 4) -> f_232(v39, v40, v41, v42, v43, 0, v47, 1, v48, v49, v50, v51, v52, 3, 4) :|: 0 = 0
f_231(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) -> f_233(v48, v39, v40, v47, v49, 0, 3, 1, 4) :|: 0 = 0
f_232(v39, v40, v41, v42, v43, 0, v47, 1, v48, v49, v50, v51, v52, 3, 4) -> f_234(v39, v40, v41, v42, v43, 0, v47, 1, v55, v48, v49, v50, v51, v52, 3, 4) :|: v55 = v47 + v39
f_234(v39, v40, v41, v42, v43, 0, v47, 1, v55, v48, v49, v50, v51, v52, 3, 4) -> f_235(v39, v40, v41, v42, v43, 0, v47, 1, v55, v48, v49, v50, v51, v52, 3, 4) :|: TRUE
f_235(v39, v40, v41, v42, v43, 0, v47, 1, v55, v48, v49, v50, v51, v52, 3, 4) -> f_236(v39, v40, v41, v42, v43, 0, v47, 1, v55, v48, v49, v50, v51, v52, 3, 4) :|: TRUE
f_236(v39, v40, v41, v42, v43, 0, v47, 1, v55, v48, v49, v50, v51, v52, 3, 4) -> f_215(v39, v40, v41, v42, v43, 0, v47, 1, v55, v48, v49, v50, v51, v52, 3, 4) :|: TRUE
Combined rules. Obtained 5 rulesP rules:
f_217(v39:0, v40:0, v41:0, v42:0, v43:0, 0, v47:0, 1, v45:0, v48:0, v49:0, v50:0, v51:0, v52:0, 3, 4) -> f_233(v48:0, v39:0, v40:0, v47:0, v49:0, 0, 3, 1, 4) :|: v45:0 > -1 && v47:0 > 0 && v47:0 >= v39:0
f_217(v39:0, v40:0, v41:0, v42:0, v43:0, 0, v47:0, 1, v45:0, v48:0, v49:0, v50:0, v51:0, v52:0, 3, 4) -> f_217(v39:0, v40:0, v41:0, v42:0, v43:0, 0, v47:0 + v39:0, 1, v47:0, v48:0, v49:0, v50:0, v51:0, v52:0, 3, 4) :|: v47:0 < v39:0 && v45:0 < 0
f_125 -> f_168(v1:0, v3:0, v4:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v3:0 > 0 && v4:0 >= v3:0 && v4:0 > 0
f_125 -> f_154(v1:0, v3:0, v4:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v3:0 < 1
f_125 -> f_217(v3:0, v4:0, v5:0, v7:0, v9:0, 0, v4:0 + v3:0, 1, v4:0, v1:0, 3 + v1:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v4:0 < v3:0 && v3:0 > 0
Filtered unneeded arguments:
   f_217(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_217(x1, x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_217(v39:0, v47:0, v45:0) -> f_233(v48:0, v39:0, v40:0, v47:0, v49:0, 0, 3, 1, 4) :|: v47:0 > 0 && v47:0 >= v39:0 && v45:0 > -1
f_217(v39:0, v47:0, v45:0) -> f_217(v39:0, v47:0 + v39:0, v47:0) :|: v47:0 < v39:0 && v45:0 < 0
f_125 -> f_168(v1:0, v3:0, v4:0, 3 + v1:0, 0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v4:0 > 0 && v4:0 >= v3:0
f_125 -> f_154(v1:0, v3:0, v4:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v3:0 < 1
f_125 -> f_217(v3:0, v4:0 + v3:0, v4:0) :|: v4:0 < v3:0 && v3:0 > 0

----------------------------------------

(6)
Obligation:
Rules:
f_217(v39:0, v47:0, v45:0) -> f_233(v48:0, v39:0, v40:0, v47:0, v49:0, 0, 3, 1, 4) :|: v47:0 > 0 && v47:0 >= v39:0 && v45:0 > -1
f_217(x, x1, x2) -> f_217(x, x1 + x, x1) :|: x1 < x && x2 < 0
f_125 -> f_168(v1:0, v3:0, v4:0, 3 + v1:0, 0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v4:0 > 0 && v4:0 >= v3:0
f_125 -> f_154(x3, x4, x5, 3 + x3, 0, 3, 1, 4) :|: x3 > 0 && x4 < 1
f_125 -> f_217(x6, x7 + x6, x7) :|: x7 < x6 && x6 > 0
Start term: f_125

----------------------------------------

(7) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(8)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_125))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x x40 x41 x39 x35 x36 x37 x38 x31 x32 x'' x33 x34 x30 k14 k15 k16 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x7 x27 x20 x21 x22 x23 x1 k7 k8 k5 k6 k9 x' k0 k3 k4 k1 k2 x17 x18 x19 x13 x14 x15 x16 x10 x11 x12 x50)
(RULES
  f_125(x29, x30, x31, x32, x33, x34, x35, x36, x37) -> f_168(k5, k8, k11, 3 + k5, 0, 3, 1, 4, x38) :|: k8 > 0 && k5 > 0 && k11 > 0 && k11 >= k8
  f_125(x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_217(k13, k14 + k13, k14, x23, x24, x25, x26, x27, x28) :|: k14 < k13 && k13 > 0
  f_125(x4, x5, x6, x7, x8, x9, x10, x11, x12) -> f_154(k12, k6, k9, 3 + k12, 0, 3, 1, 4, x13) :|: k12 > 0 && k6 < 1
  f_217(k7, k2, k1, x, x', x'', x1, x2, x3) -> f_233(k4, k7, k0, k2, k3, 0, 3, 1, 4) :|: k2 > 0 && k2 >= k7 && k1 > -1
  f_217(k15, k16, k10, x39, x40, x41, x42, x43, x44) -> f_217(k15, k16 + k15, k16, x45, x46, x47, x48, x49, x50) :|: k16 < k15 && k10 < 0
)

----------------------------------------

(9) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_10424077219520214908.koat 

KoAT2's output was:

YES

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
