YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/px2W9.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1092 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 23 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 34 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/px2W9.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/px2W9.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%4 = alloca i8, numElementsLit: 4, align 16
		%5 = bitcast *i8 %4 to *i32
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%6 = alloca i8, numElementsLit: 4, align 16
		%7 = bitcast *i8 %6 to *i32
		store %7, %3
		%8 = load %2
		store 0, %8
		%9 = load %3
		store 0, %9
		br %10
	10:
		%11 = load %2
		%12 = load %11
		%13 = icmp slt %12 20
		br %13, %14, %26
	14:
		%15 = load %2
		%16 = load %15
		%17 = add i32 %16, 1
		store %17, %15
		%18 = load %2
		%19 = load %18
		%20 = icmp sle %19 10
		br %20, %21, %22
	21:
		br %10
	22:
		%23 = load %3
		%24 = load %23
		%25 = add i32 %24, 1
		store %25, %23
		br %10
	26:
		%27 = load %3
		%28 = load %27
		ret %28


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_392(v346, v347, v348, v349, v350, v351, 1, v353, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 10, 19, 11, 20, 9, 4, 8) -> f_393(v346, v347, v348, v349, v350, v353, 1, v351, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 10, 19, 11, 20, 9, 4, 8) :|: 0 = 0
f_393(v346, v347, v348, v349, v350, v353, 1, v351, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 10, 19, 11, 20, 9, 4, 8) -> f_394(v346, v347, v348, v349, v350, v353, 1, v351, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 10, 18, 11, 19, 8, 9, 4) :|: v353 < 20 && v351 <= 18 && v355 <= 8 && v356 <= 9
f_394(v346, v347, v348, v349, v350, v353, 1, v351, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 10, 18, 11, 19, 8, 9, 4) -> f_396(v346, v347, v348, v349, v350, v353, 1, v351, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 10, 18, 11, 19, 8, 9, 4) :|: 0 = 0
f_396(v346, v347, v348, v349, v350, v353, 1, v351, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 10, 18, 11, 19, 8, 9, 4) -> f_398(v346, v347, v348, v349, v350, v353, 1, v351, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 10, 18, 11, 19, 8, 9, 4) :|: TRUE
f_398(v346, v347, v348, v349, v350, v353, 1, v351, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 10, 18, 11, 19, 8, 9, 4) -> f_400(v346, v347, v348, v349, v350, v353, 1, v351, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 10, 18, 11, 19, 8, 9, 4) :|: 0 = 0
f_400(v346, v347, v348, v349, v350, v353, 1, v351, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 10, 18, 11, 19, 8, 9, 4) -> f_402(v346, v347, v348, v349, v350, v353, 1, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4) :|: 0 = 0
f_402(v346, v347, v348, v349, v350, v353, 1, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4) -> f_404(v346, v347, v348, v349, v350, v353, 1, v367, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4, 12, 20) :|: v367 = 1 + v353 && 12 <= v367 && v367 <= 20
f_404(v346, v347, v348, v349, v350, v353, 1, v367, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4, 12, 20) -> f_405(v346, v347, v348, v349, v350, v353, 1, v367, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4, 12, 20) :|: TRUE
f_405(v346, v347, v348, v349, v350, v353, 1, v367, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4, 12, 20) -> f_406(v346, v347, v348, v349, v350, v353, 1, v367, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4, 12, 20) :|: 0 = 0
f_406(v346, v347, v348, v349, v350, v353, 1, v367, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4, 12, 20) -> f_407(v346, v347, v348, v349, v350, v353, 1, v367, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4, 12, 20) :|: 0 = 0
f_407(v346, v347, v348, v349, v350, v353, 1, v367, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4, 12, 20) -> f_408(v346, v347, v348, v349, v350, v353, 1, v367, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4, 12, 20) :|: 0 = 0
f_408(v346, v347, v348, v349, v350, v353, 1, v367, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4, 12, 20) -> f_409(v346, v347, v348, v349, v350, v353, 1, v367, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4, 12, 20) :|: TRUE
f_409(v346, v347, v348, v349, v350, v353, 1, v367, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4, 12, 20) -> f_410(v346, v347, v348, v349, v350, v353, 1, v367, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4, 12, 20) :|: 0 = 0
f_410(v346, v347, v348, v349, v350, v353, 1, v367, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 11, 19, 8, 9, 4, 12, 20) -> f_411(v346, v347, v348, v349, v350, v353, 1, v367, 0, v356, v357, v358, v359, v360, v361, 3, 7, 10, 11, 19, 9, 4, 8, 12, 20) :|: 0 = 0
f_411(v346, v347, v348, v349, v350, v353, 1, v367, 0, v356, v357, v358, v359, v360, v361, 3, 7, 10, 11, 19, 9, 4, 8, 12, 20) -> f_412(v346, v347, v348, v349, v350, v353, 1, v367, 0, v356, v374, v357, v358, v359, v360, v361, 3, 7, 10, 11, 19, 9, 4, 8, 12, 20, 2) :|: v374 = 1 + v356 && 2 <= v374 && v374 <= 10
f_412(v346, v347, v348, v349, v350, v353, 1, v367, 0, v356, v374, v357, v358, v359, v360, v361, 3, 7, 10, 11, 19, 9, 4, 8, 12, 20, 2) -> f_413(v346, v347, v348, v349, v350, v353, 1, v367, 0, v356, v374, v357, v358, v359, v360, v361, 3, 7, 10, 11, 19, 9, 4, 8, 12, 20, 2) :|: TRUE
f_413(v346, v347, v348, v349, v350, v353, 1, v367, 0, v356, v374, v357, v358, v359, v360, v361, 3, 7, 10, 11, 19, 9, 4, 8, 12, 20, 2) -> f_414(v346, v347, v348, v349, v350, v353, 1, v367, 0, v356, v374, v357, v358, v359, v360, v361, 3, 7, 10, 11, 19, 9, 4, 8, 12, 20, 2) :|: TRUE
f_414(v346, v347, v348, v349, v350, v353, 1, v367, 0, v356, v374, v357, v358, v359, v360, v361, 3, 7, 10, 11, 19, 9, 4, 8, 12, 20, 2) -> f_391(v346, v347, v348, v349, v350, v353, 1, v367, 0, v356, v374, v357, v358, v359, v360, v361, 3, 7, 10, 19, 11, 20, 9, 4, 8) :|: TRUE
f_391(v346, v347, v348, v349, v350, v351, 1, v353, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 10, 19, 11, 20, 9, 4, 8) -> f_392(v346, v347, v348, v349, v350, v351, 1, v353, 0, v355, v356, v357, v358, v359, v360, v361, 3, 7, 10, 19, 11, 20, 9, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_392(v346:0, v347:0, v348:0, v349:0, v350:0, v351:0, 1, v353:0, 0, v355:0, v356:0, v357:0, v358:0, v359:0, v360:0, v361:0, 3, 7, 10, 19, 11, 20, 9, 4, 8) -> f_392(v346:0, v347:0, v348:0, v349:0, v350:0, v353:0, 1, 1 + v353:0, 0, v356:0, 1 + v356:0, v357:0, v358:0, v359:0, v360:0, v361:0, 3, 7, 10, 19, 11, 20, 9, 4, 8) :|: v351:0 < 19 && v353:0 < 20 && v355:0 < 9 && v356:0 < 10 && v353:0 > 10 && v356:0 > 0
Filtered unneeded arguments:
   f_392(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_392(x6, x8, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_392(v351:0, v353:0, v355:0, v356:0) -> f_392(v353:0, 1 + v353:0, v356:0, 1 + v356:0) :|: v353:0 < 20 && v351:0 < 19 && v355:0 < 9 && v356:0 < 10 && v356:0 > 0 && v353:0 > 10

----------------------------------------

(9)
Obligation:
Rules:
f_392(v351:0, v353:0, v355:0, v356:0) -> f_392(v353:0, 1 + v353:0, v356:0, 1 + v356:0) :|: v353:0 < 20 && v351:0 < 19 && v355:0 < 9 && v356:0 < 10 && v356:0 > 0 && v353:0 > 10

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_392(v351:0:0, v353:0:0, v355:0:0, v356:0:0) -> f_392(v353:0:0, 1 + v353:0:0, v356:0:0, 1 + v356:0:0) :|: v356:0:0 > 0 && v353:0:0 > 10 && v356:0:0 < 10 && v355:0:0 < 9 && v351:0:0 < 19 && v353:0:0 < 20

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_392 ] = -1*f_392_2

The following rules are decreasing:
f_392(v351:0:0, v353:0:0, v355:0:0, v356:0:0) -> f_392(v353:0:0, 1 + v353:0:0, v356:0:0, 1 + v356:0:0) :|: v356:0:0 > 0 && v353:0:0 > 10 && v356:0:0 < 10 && v355:0:0 < 9 && v351:0:0 < 19 && v353:0:0 < 20

The following rules are bounded:
f_392(v351:0:0, v353:0:0, v355:0:0, v356:0:0) -> f_392(v353:0:0, 1 + v353:0:0, v356:0:0, 1 + v356:0:0) :|: v356:0:0 > 0 && v353:0:0 > 10 && v356:0:0 < 10 && v355:0:0 < 9 && v351:0:0 < 19 && v353:0:0 < 20


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_244(v93, v94, v95, v96, v97, v98, 1, v100, v101, v102, v103, v104, v105, 0, 3, 7, 9, 10, 4, 8) -> f_245(v93, v94, v95, v96, v97, v100, 1, v98, v101, v102, v103, v104, v105, 0, 3, 7, 9, 10, 4, 8) :|: 0 = 0
f_245(v93, v94, v95, v96, v97, v100, 1, v98, v101, v102, v103, v104, v105, 0, 3, 7, 9, 10, 4, 8) -> f_246(v93, v94, v95, v96, v97, v100, 1, v98, v101, v102, v103, v104, v105, 0, 3, 7, 9, 10, 4, 8) :|: 0 = 0
f_246(v93, v94, v95, v96, v97, v100, 1, v98, v101, v102, v103, v104, v105, 0, 3, 7, 9, 10, 4, 8) -> f_247(v93, v94, v95, v96, v97, v100, 1, v98, v101, v102, v103, v104, v105, 0, 3, 7, 9, 10, 4, 8) :|: TRUE
f_247(v93, v94, v95, v96, v97, v100, 1, v98, v101, v102, v103, v104, v105, 0, 3, 7, 9, 10, 4, 8) -> f_248(v93, v94, v95, v96, v97, v100, 1, v98, v101, v102, v103, v104, v105, 0, 3, 7, 9, 10, 4, 8) :|: 0 = 0
f_248(v93, v94, v95, v96, v97, v100, 1, v98, v101, v102, v103, v104, v105, 0, 3, 7, 9, 10, 4, 8) -> f_249(v93, v94, v95, v96, v97, v100, 1, v101, v102, v103, v104, v105, 0, 3, 7, 10, 4, 8) :|: 0 = 0
f_249(v93, v94, v95, v96, v97, v100, 1, v101, v102, v103, v104, v105, 0, 3, 7, 10, 4, 8) -> f_250(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 10, 4, 8, 2, 11) :|: v107 = 1 + v100 && 2 <= v107 && v107 <= 11
f_250(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 10, 4, 8, 2, 11) -> f_251(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 10, 4, 8, 2, 11) :|: TRUE
f_251(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 10, 4, 8, 2, 11) -> f_252(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 10, 4, 8, 2, 11) :|: 0 = 0
f_252(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 10, 4, 8, 2, 11) -> f_253(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 10, 4, 8, 2, 11) :|: 0 = 0
f_253(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 10, 4, 8, 2, 11) -> f_254(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 9, 4, 8, 2, 10) :|: v107 <= 10 && v100 <= 9
f_254(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 9, 4, 8, 2, 10) -> f_256(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 9, 4, 8, 2, 10) :|: 0 = 0
f_256(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 9, 4, 8, 2, 10) -> f_258(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 9, 4, 8, 2, 10) :|: TRUE
f_258(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 9, 4, 8, 2, 10) -> f_260(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 9, 4, 8, 2, 10) :|: TRUE
f_260(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 9, 4, 8, 2, 10) -> f_243(v93, v94, v95, v96, v97, v100, 1, v107, v101, v102, v103, v104, v105, 0, 3, 7, 9, 10, 4, 8) :|: TRUE
f_243(v93, v94, v95, v96, v97, v98, 1, v100, v101, v102, v103, v104, v105, 0, 3, 7, 9, 10, 4, 8) -> f_244(v93, v94, v95, v96, v97, v98, 1, v100, v101, v102, v103, v104, v105, 0, 3, 7, 9, 10, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_244(v93:0, v94:0, v95:0, v96:0, v97:0, v98:0, 1, v100:0, v101:0, v102:0, v103:0, v104:0, v105:0, 0, 3, 7, 9, 10, 4, 8) -> f_244(v93:0, v94:0, v95:0, v96:0, v97:0, v100:0, 1, 1 + v100:0, v101:0, v102:0, v103:0, v104:0, v105:0, 0, 3, 7, 9, 10, 4, 8) :|: v100:0 > 0 && v100:0 < 11 && v100:0 < 10
Filtered unneeded arguments:
   f_244(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_244(x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_244(v100:0) -> f_244(1 + v100:0) :|: v100:0 < 11 && v100:0 < 10 && v100:0 > 0

----------------------------------------

(16)
Obligation:
Rules:
f_244(v100:0) -> f_244(1 + v100:0) :|: v100:0 < 11 && v100:0 < 10 && v100:0 > 0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_244(v100:0:0) -> f_244(1 + v100:0:0) :|: v100:0:0 < 11 && v100:0:0 < 10 && v100:0:0 > 0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_244(x)] = 9 - x

The following rules are decreasing:
f_244(v100:0:0) -> f_244(1 + v100:0:0) :|: v100:0:0 < 11 && v100:0:0 < 10 && v100:0:0 > 0
The following rules are bounded:
f_244(v100:0:0) -> f_244(1 + v100:0:0) :|: v100:0:0 < 11 && v100:0:0 < 10 && v100:0:0 > 0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
