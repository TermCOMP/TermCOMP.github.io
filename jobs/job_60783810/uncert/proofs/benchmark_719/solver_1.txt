YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/0XwHd.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1589 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 81 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 20 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (17) IntTRS
        (18) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (19) IntTRS
        (20) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (21) IntTRS
        (22) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (23) YES
    (24) LLVM Symbolic Execution SCC
        (25) SCC2IRS [SOUND, 50 ms]
        (26) IntTRS
        (27) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (28) IntTRS
        (29) RankingReductionPairProof [EQUIVALENT, 7 ms]
        (30) YES
    (31) LLVM Symbolic Execution SCC
        (32) SCC2IRS [SOUND, 35 ms]
        (33) IntTRS
        (34) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (35) IntTRS
        (36) RankingReductionPairProof [EQUIVALENT, 13 ms]
        (37) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/0XwHd.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/0XwHd.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = icmp sgt %9 0
		br %10, %11, %17
	11:
		%12 = load %3
		%13 = icmp sgt %12 0
		br %13, %14, %17
	14:
		%15 = load %4
		%16 = icmp sgt %15 0
		br %17
	17:
		%18 = phi [0, %11], [0, %8], [%16, %14]
		br %18, %19, %33
	19:
		%20 = call i32 @__VERIFIER_nondet_int()
		%21 = icmp ne %20 0
		br %21, %22, %26
	22:
		%23 = load %2
		%24 = sub i32 %23, 1
		store %24, %2
		%25 = call i32 @__VERIFIER_nondet_int()
		store %25, %4
		br %32
	26:
		%27 = call i32 @__VERIFIER_nondet_int()
		store %27, %2
		%28 = load %3
		%29 = sub i32 %28, 1
		store %29, %3
		%30 = load %4
		%31 = sub i32 %30, 1
		store %31, %4
		br %32
	32:
		br %8
	33:
		%34 = load %1
		ret %34


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 62 rulesP rules:
f_751(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6321, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6330, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_754(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_754(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_757(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 < v6330 && 2 <= v6321 && 2 <= v6326
f_757(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_761(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_761(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_765(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: TRUE
f_765(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_769(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_769(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_773(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_773(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_777(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: TRUE
f_777(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_780(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_780(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_782(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 < v6331
f_782(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_785(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_785(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_788(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_788(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_790(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: TRUE
f_790(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_792(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: TRUE
f_792(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_794(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: v7147 != 0
f_792(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_795(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, 0, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 3, 2, 4) :|: v7147 = 0
f_794(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_796(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_796(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_798(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: TRUE
f_798(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_799(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6321, v6330, v6331, v6326, v6327, v6328, v6329, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: TRUE
f_799(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7189, v7190, v7191, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) -> f_801(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7190, v7191, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) :|: 0 = 0
f_801(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7190, v7191, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) -> f_803(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7191, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) :|: 1 + v7216 = v7184 && 0 <= v7216
f_803(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7191, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) -> f_805(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7191, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) :|: TRUE
f_805(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7191, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) -> f_807(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7219, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) :|: TRUE
f_807(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7219, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) -> f_809(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7219, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) :|: TRUE
f_809(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7219, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) -> f_811(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7219, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) :|: TRUE
f_811(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7219, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) -> f_748(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7192, v7193, v7194, v7195, v7216, v7219, v7196, v7197, v7198, v7199, 0, 3, 2, 4) :|: TRUE
f_748(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6321, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6330, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_751(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6321, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6330, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: TRUE
f_795(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, 0, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 3, 2, 4) -> f_797(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, 0, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 3, 2, 4) :|: 0 = 0
f_797(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, 0, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 3, 2, 4) -> f_800(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, 0, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 3, 2, 4) :|: TRUE
f_800(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, 0, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 3, 2, 4) -> f_853(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, 0, v6326, v6327, v6328, v6329, v6321, v6330, v6331, v6332, v6333, v6334, v6335, 3, 2, 4) :|: TRUE
f_853(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8378, v8379, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_854(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8379, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: TRUE
f_854(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8379, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_855(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8379, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: TRUE
f_855(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8379, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_856(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: 0 = 0
f_856(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_857(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: 1 + v8391 = v8375 && 0 <= v8391
f_857(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_858(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: TRUE
f_858(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_859(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: 0 = 0
f_859(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_860(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8393, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: 1 + v8393 = v8376 && 0 <= v8393
f_860(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8393, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_861(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8393, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: TRUE
f_861(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8393, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_862(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8393, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: TRUE
f_862(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8393, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_816(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8382, v8383, v8384, v8389, v8391, v8393, v8385, v8386, v8387, v8388, 3, 2, 4) :|: TRUE
f_816(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7320, 1, v7322, v7323, 0, v7325, v7326, v7327, v7328, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_817(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7320, 1, v7322, v7323, 0, v7325, v7326, v7327, v7328, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: TRUE
f_817(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7320, 1, v7322, v7323, 0, v7325, v7326, v7327, v7328, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_818(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_818(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_819(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 < v7328
f_819(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_821(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_821(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_823(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: TRUE
f_823(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_825(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_825(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_827(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 < v7329 && 2 <= v7322 && 2 <= v7318
f_827(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_830(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_830(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_832(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: TRUE
f_832(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_834(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_834(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_836(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 < v7330 && 2 <= v7323 && 2 <= v7327
f_836(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_839(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_839(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_841(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_841(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_843(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: TRUE
f_843(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_845(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: TRUE
f_845(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_847(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: v8283 != 0
f_845(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_848(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: v8283 = 0
f_847(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_849(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 0, 3, 2, 4) :|: 0 = 0
f_849(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 0, 3, 2, 4) -> f_851(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 0, 3, 2, 4) :|: TRUE
f_851(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 0, 3, 2, 4) -> f_799(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, v7325, v7326, v7327, v7328, v7322, v7323, v7330, v7331, v7332, v7333, v7334, 0, 3, 2, 4) :|: TRUE
f_848(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_850(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_850(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_852(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: TRUE
f_852(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_853(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7328, v7322, v7323, v7330, v7325, v7326, v7327, v7331, v7332, v7333, v7334, 3, 2, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_751(v6314:0, v6315:0, v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, v6321:0, 1, 1 + v8391:0, v6324:0, v6325:0, v6326:0, v6327:0, v6328:0, v6329:0, v6330:0, 1 + v8393:0, v6332:0, v6333:0, v6334:0, v6335:0, 0, 3, 2, 4) -> f_845(v6314:0, v6315:0, v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, v8389:0, 1, v8391:0, v8393:0, v8283:0, 0, v6321:0, v6330:0, 1 + v8393:0, 1 + v8391:0, 1 + v8393:0, v6332:0, v6333:0, v6334:0, v6335:0, 3, 2, 4) :|: v8391:0 > 0 && v8393:0 > 0 && v6321:0 > 1 && v6330:0 > 0 && v6326:0 > 1 && v8389:0 > 0 && v6319:0 > 1
f_845(v7313:0, v7314:0, v7315:0, v7316:0, v7317:0, v7318:0, v7319:0, v7328:0, 1, 1 + v8391:0, 1 + v8393:0, 0, 0, v7325:0, v7326:0, v7327:0, v7322:0, v7323:0, v7331:0, v7332:0, v7333:0, v7334:0, 3, 2, 4) -> f_845(v7313:0, v7314:0, v7315:0, v7316:0, v7317:0, v7318:0, v7319:0, v8389:0, 1, v8391:0, v8393:0, v8283:1, 0, v7325:0, v7326:0, v7327:0, 1 + v8391:0, 1 + v8393:0, v7331:0, v7332:0, v7333:0, v7334:0, 3, 2, 4) :|: v8391:0 > 0 && v8393:0 > 0 && v8389:0 > 0 && v7318:0 > 1 && v7327:0 > 1
f_845(v7313:0, v7314:0, v7315:0, v7316:0, v7317:0, v7318:0, v7319:0, 1 + v7216:0, 1, v7329:0, v7330:0, v8283:0, 0, v7325:0, v7326:0, v7327:0, v7322:0, v7323:0, v7331:0, v7332:0, v7333:0, v7334:0, 3, 2, 4) -> f_751(v7313:0, v7314:0, v7315:0, v7316:0, v7317:0, v7318:0, v7319:0, 1 + v7216:0, 1, v7329:0, v7330:0, v8283:0, 1 + v7216:0, v7322:0, v7323:0, v7330:0, v7216:0, v7219:0, v7331:0, v7332:0, v7333:0, v7334:0, 0, 3, 2, 4) :|: v8283:0 < 0 && v7216:0 > -1
f_845(v7313:0, v7314:0, v7315:0, v7316:0, v7317:0, v7318:0, v7319:0, 1 + v7216:0, 1, v7329:0, v7330:0, v8283:0, 0, v7325:0, v7326:0, v7327:0, v7322:0, v7323:0, v7331:0, v7332:0, v7333:0, v7334:0, 3, 2, 4) -> f_751(v7313:0, v7314:0, v7315:0, v7316:0, v7317:0, v7318:0, v7319:0, 1 + v7216:0, 1, v7329:0, v7330:0, v8283:0, 1 + v7216:0, v7322:0, v7323:0, v7330:0, v7216:0, v7219:0, v7331:0, v7332:0, v7333:0, v7334:0, 0, 3, 2, 4) :|: v8283:0 > 0 && v7216:0 > -1
f_751(v6314:0, v6315:0, v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, v6321:0, 1, v6323:0, v6324:0, v6325:0, v6326:0, v6327:0, v6328:0, v6329:0, 1 + v7216:0, v6331:0, v6332:0, v6333:0, v6334:0, v6335:0, 0, 3, 2, 4) -> f_751(v6314:0, v6315:0, v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, 1 + v7216:0, 1, v6323:0, v6331:0, v7147:0, v6326:0, v6327:0, v6328:0, v6329:0, v7216:0, v7219:0, v6332:0, v6333:0, v6334:0, v6335:0, 0, 3, 2, 4) :|: v6321:0 > 1 && v7216:0 > -1 && v6326:0 > 1 && v6331:0 > 0 && v7147:0 < 0
f_751(v6314:0, v6315:0, v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, v6321:0, 1, v6323:0, v6324:0, v6325:0, v6326:0, v6327:0, v6328:0, v6329:0, 1 + v7216:0, v6331:0, v6332:0, v6333:0, v6334:0, v6335:0, 0, 3, 2, 4) -> f_751(v6314:0, v6315:0, v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, 1 + v7216:0, 1, v6323:0, v6331:0, v7147:0, v6326:0, v6327:0, v6328:0, v6329:0, v7216:0, v7219:0, v6332:0, v6333:0, v6334:0, v6335:0, 0, 3, 2, 4) :|: v6321:0 > 1 && v7216:0 > -1 && v6326:0 > 1 && v6331:0 > 0 && v7147:0 > 0
Filtered unneeded arguments:
   f_751(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26) -> f_751(x6, x8, x10, x13, x17, x18)
   f_845(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_845(x6, x8, x10, x11, x12, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_751(v6319:0, v6321:0, sum~cons_1~v8391:0, v6326:0, v6330:0, sum~cons_1~v8393:0) -> f_845(v6319:0, v8389:0, v8391:0, v8393:0, v8283:0, 1 + v8393:0) :|: v8393:0 > 0 && v8391:0 > 0 && v6321:0 > 1 && v6330:0 > 0 && v6326:0 > 1 && v6319:0 > 1 && v8389:0 > 0 && sum~cons_1~v8391:0 = 1 + v8391:0 && sum~cons_1~v8393:0 = 1 + v8393:0
f_845(v7318:0, v7328:0, sum~cons_1~v8391:0, sum~cons_1~v8393:0, cons_0, v7327:0) -> f_845(v7318:0, v8389:0, v8391:0, v8393:0, v8283:1, v7327:0) :|: v8393:0 > 0 && v8391:0 > 0 && v8389:0 > 0 && v7327:0 > 1 && v7318:0 > 1 && sum~cons_1~v8391:0 = 1 + v8391:0 && sum~cons_1~v8393:0 = 1 + v8393:0 && cons_0 = 0
f_845(v7318:0, sum~cons_1~v7216:0, v7329:0, v7330:0, v8283:0, v7327:0) -> f_751(v7318:0, 1 + v7216:0, v7329:0, 1 + v7216:0, v7216:0, v7219:0) :|: v8283:0 < 0 && v7216:0 > -1 && sum~cons_1~v7216:0 = 1 + v7216:0
f_845(v7318:0, sum~cons_1~v7216:0, v7329:0, v7330:0, v8283:0, v7327:0) -> f_751(v7318:0, 1 + v7216:0, v7329:0, 1 + v7216:0, v7216:0, v7219:0) :|: v8283:0 > 0 && v7216:0 > -1 && sum~cons_1~v7216:0 = 1 + v7216:0
f_751(v6319:0, v6321:0, v6323:0, v6326:0, sum~cons_1~v7216:0, v6331:0) -> f_751(v6319:0, 1 + v7216:0, v6323:0, v6326:0, v7216:0, v7219:0) :|: v7216:0 > -1 && v6321:0 > 1 && v6331:0 > 0 && v6326:0 > 1 && sum~cons_1~v7216:0 = 1 + v7216:0

----------------------------------------

(9)
Obligation:
Rules:
f_751(v6319:0, v6321:0, sum~cons_1~v8391:0, v6326:0, v6330:0, sum~cons_1~v8393:0) -> f_845(v6319:0, v8389:0, v8391:0, v8393:0, v8283:0, 1 + v8393:0) :|: v8393:0 > 0 && v8391:0 > 0 && v6321:0 > 1 && v6330:0 > 0 && v6326:0 > 1 && v6319:0 > 1 && v8389:0 > 0 && sum~cons_1~v8391:0 = 1 + v8391:0 && sum~cons_1~v8393:0 = 1 + v8393:0
f_845(x, x1, x2, x3, x4, x5) -> f_845(x, x6, x7, x8, x9, x5) :|: x8 > 0 && x7 > 0 && x6 > 0 && x5 > 1 && x > 1 && x2 = 1 + x7 && x3 = 1 + x8 && x4 = 0
f_845(x10, x11, x12, x13, x14, x15) -> f_751(x10, 1 + x16, x12, 1 + x16, x16, x17) :|: x14 < 0 && x16 > -1 && x11 = 1 + x16
f_845(x18, x19, x20, x21, x22, x23) -> f_751(x18, 1 + x24, x20, 1 + x24, x24, x25) :|: x22 > 0 && x24 > -1 && x19 = 1 + x24
f_751(x26, x27, x28, x29, x30, x31) -> f_751(x26, 1 + x32, x28, x29, x32, x33) :|: x32 > -1 && x27 > 1 && x31 > 0 && x29 > 1 && x30 = 1 + x32

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_845(x:0, x1:0, sum~cons_1~x7:0, sum~cons_1~x8:0, cons_0, x5:0) -> f_845(x:0, x6:0, x7:0, x8:0, x9:0, x5:0) :|: x5:0 > 1 && x:0 > 1 && x6:0 > 0 && x7:0 > 0 && x8:0 > 0 && sum~cons_1~x7:0 = 1 + x7:0 && sum~cons_1~x8:0 = 1 + x8:0 && cons_0 = 0
f_845(x18:0, sum~cons_1~x24:0, x20:0, x21:0, x22:0, x23:0) -> f_751(x18:0, 1 + x24:0, x20:0, 1 + x24:0, x24:0, x25:0) :|: x22:0 > 0 && x24:0 > -1 && sum~cons_1~x24:0 = 1 + x24:0
f_751(x26:0, x27:0, x28:0, x29:0, sum~cons_1~x32:0, x31:0) -> f_751(x26:0, 1 + x32:0, x28:0, x29:0, x32:0, x33:0) :|: x31:0 > 0 && x29:0 > 1 && x27:0 > 1 && x32:0 > -1 && sum~cons_1~x32:0 = 1 + x32:0
f_845(x10:0, sum~cons_1~x16:0, x12:0, x13:0, x14:0, x15:0) -> f_751(x10:0, 1 + x16:0, x12:0, 1 + x16:0, x16:0, x17:0) :|: x14:0 < 0 && x16:0 > -1 && sum~cons_1~x16:0 = 1 + x16:0
f_751(v6319:0:0, v6321:0:0, sum~cons_1~v8391:0:0, v6326:0:0, v6330:0:0, sum~cons_1~v8393:0:0) -> f_845(v6319:0:0, v8389:0:0, v8391:0:0, v8393:0:0, v8283:0:0, 1 + v8393:0:0) :|: v6319:0:0 > 1 && v8389:0:0 > 0 && v6326:0:0 > 1 && v6330:0:0 > 0 && v6321:0:0 > 1 && v8391:0:0 > 0 && v8393:0:0 > 0 && sum~cons_1~v8391:0:0 = 1 + v8391:0:0 && sum~cons_1~v8393:0:0 = 1 + v8393:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_845 ] = 2*f_845_1 + 2*f_845_3
[ f_751 ] = 2*f_751_1 + 2*f_751_3 + -1

The following rules are decreasing:
f_845(x:0, x1:0, sum~cons_1~x7:0, sum~cons_1~x8:0, cons_0, x5:0) -> f_845(x:0, x6:0, x7:0, x8:0, x9:0, x5:0) :|: x5:0 > 1 && x:0 > 1 && x6:0 > 0 && x7:0 > 0 && x8:0 > 0 && sum~cons_1~x7:0 = 1 + x7:0 && sum~cons_1~x8:0 = 1 + x8:0 && cons_0 = 0
f_845(x18:0, sum~cons_1~x24:0, x20:0, x21:0, x22:0, x23:0) -> f_751(x18:0, 1 + x24:0, x20:0, 1 + x24:0, x24:0, x25:0) :|: x22:0 > 0 && x24:0 > -1 && sum~cons_1~x24:0 = 1 + x24:0
f_845(x10:0, sum~cons_1~x16:0, x12:0, x13:0, x14:0, x15:0) -> f_751(x10:0, 1 + x16:0, x12:0, 1 + x16:0, x16:0, x17:0) :|: x14:0 < 0 && x16:0 > -1 && sum~cons_1~x16:0 = 1 + x16:0
f_751(v6319:0:0, v6321:0:0, sum~cons_1~v8391:0:0, v6326:0:0, v6330:0:0, sum~cons_1~v8393:0:0) -> f_845(v6319:0:0, v8389:0:0, v8391:0:0, v8393:0:0, v8283:0:0, 1 + v8393:0:0) :|: v6319:0:0 > 1 && v8389:0:0 > 0 && v6326:0:0 > 1 && v6330:0:0 > 0 && v6321:0:0 > 1 && v8391:0:0 > 0 && v8393:0:0 > 0 && sum~cons_1~v8391:0:0 = 1 + v8391:0:0 && sum~cons_1~v8393:0:0 = 1 + v8393:0:0

The following rules are bounded:
f_845(x:0, x1:0, sum~cons_1~x7:0, sum~cons_1~x8:0, cons_0, x5:0) -> f_845(x:0, x6:0, x7:0, x8:0, x9:0, x5:0) :|: x5:0 > 1 && x:0 > 1 && x6:0 > 0 && x7:0 > 0 && x8:0 > 0 && sum~cons_1~x7:0 = 1 + x7:0 && sum~cons_1~x8:0 = 1 + x8:0 && cons_0 = 0


----------------------------------------

(13)
Obligation:
Rules:
f_845(x18:0, sum~cons_1~x24:0, x20:0, x21:0, x22:0, x23:0) -> f_751(x18:0, 1 + x24:0, x20:0, 1 + x24:0, x24:0, x25:0) :|: x22:0 > 0 && x24:0 > -1 && sum~cons_1~x24:0 = 1 + x24:0
f_751(x26:0, x27:0, x28:0, x29:0, sum~cons_1~x32:0, x31:0) -> f_751(x26:0, 1 + x32:0, x28:0, x29:0, x32:0, x33:0) :|: x31:0 > 0 && x29:0 > 1 && x27:0 > 1 && x32:0 > -1 && sum~cons_1~x32:0 = 1 + x32:0
f_845(x10:0, sum~cons_1~x16:0, x12:0, x13:0, x14:0, x15:0) -> f_751(x10:0, 1 + x16:0, x12:0, 1 + x16:0, x16:0, x17:0) :|: x14:0 < 0 && x16:0 > -1 && sum~cons_1~x16:0 = 1 + x16:0
f_751(v6319:0:0, v6321:0:0, sum~cons_1~v8391:0:0, v6326:0:0, v6330:0:0, sum~cons_1~v8393:0:0) -> f_845(v6319:0:0, v8389:0:0, v8391:0:0, v8393:0:0, v8283:0:0, 1 + v8393:0:0) :|: v6319:0:0 > 1 && v8389:0:0 > 0 && v6326:0:0 > 1 && v6330:0:0 > 0 && v6321:0:0 > 1 && v8391:0:0 > 0 && v8393:0:0 > 0 && sum~cons_1~v8391:0:0 = 1 + v8391:0:0 && sum~cons_1~v8393:0:0 = 1 + v8393:0:0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_751(x26:0:0, x27:0:0, x28:0:0, x29:0:0, sum~cons_1~x32:0:0, x31:0:0) -> f_751(x26:0:0, 1 + x32:0:0, x28:0:0, x29:0:0, x32:0:0, x33:0:0) :|: x27:0:0 > 1 && x32:0:0 > -1 && x29:0:0 > 1 && x31:0:0 > 0 && sum~cons_1~x32:0:0 = 1 + x32:0:0
f_751(v6319:0:0:0, v6321:0:0:0, sum~cons_1~v8391:0:0:0, v6326:0:0:0, v6330:0:0:0, sum~cons_1~v8393:0:0:0) -> f_751(v6319:0:0:0, 1 + x24:0:0, v8391:0:0:0, 1 + x24:0:0, x24:0:0, x25:0:0) :|: v8283:0:0:0 > 0 && v8393:0:0:0 > 0 && v8391:0:0:0 > 0 && v6321:0:0:0 > 1 && v6330:0:0:0 > 0 && v6326:0:0:0 > 1 && x24:0:0 > -1 && v6319:0:0:0 > 1 && sum~cons_1~v8391:0:0:0 = 1 + v8391:0:0:0 && sum~cons_1~v8393:0:0:0 = 1 + v8393:0:0:0
f_751(x, x1, x2, x3, x4, x5) -> f_751(x, 1 + x6, x7, 1 + x6, x6, x8) :|: x9 < 0 && x10 > 0 && x7 > 0 && x1 > 1 && x4 > 0 && x3 > 1 && x6 > -1 && x > 1 && x2 = 1 + x7 && x5 = 1 + x10

----------------------------------------

(16) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_751(x, x1, x2, x3, x4, x5)] = -1 + x + x2

The following rules are decreasing:
f_751(v6319:0:0:0, v6321:0:0:0, sum~cons_1~v8391:0:0:0, v6326:0:0:0, v6330:0:0:0, sum~cons_1~v8393:0:0:0) -> f_751(v6319:0:0:0, 1 + x24:0:0, v8391:0:0:0, 1 + x24:0:0, x24:0:0, x25:0:0) :|: v8283:0:0:0 > 0 && v8393:0:0:0 > 0 && v8391:0:0:0 > 0 && v6321:0:0:0 > 1 && v6330:0:0:0 > 0 && v6326:0:0:0 > 1 && x24:0:0 > -1 && v6319:0:0:0 > 1 && sum~cons_1~v8391:0:0:0 = 1 + v8391:0:0:0 && sum~cons_1~v8393:0:0:0 = 1 + v8393:0:0:0
f_751(x, x1, x2, x3, x4, x5) -> f_751(x, 1 + x6, x7, 1 + x6, x6, x8) :|: x9 < 0 && x10 > 0 && x7 > 0 && x1 > 1 && x4 > 0 && x3 > 1 && x6 > -1 && x > 1 && x2 = 1 + x7 && x5 = 1 + x10
The following rules are bounded:
f_751(v6319:0:0:0, v6321:0:0:0, sum~cons_1~v8391:0:0:0, v6326:0:0:0, v6330:0:0:0, sum~cons_1~v8393:0:0:0) -> f_751(v6319:0:0:0, 1 + x24:0:0, v8391:0:0:0, 1 + x24:0:0, x24:0:0, x25:0:0) :|: v8283:0:0:0 > 0 && v8393:0:0:0 > 0 && v8391:0:0:0 > 0 && v6321:0:0:0 > 1 && v6330:0:0:0 > 0 && v6326:0:0:0 > 1 && x24:0:0 > -1 && v6319:0:0:0 > 1 && sum~cons_1~v8391:0:0:0 = 1 + v8391:0:0:0 && sum~cons_1~v8393:0:0:0 = 1 + v8393:0:0:0
f_751(x, x1, x2, x3, x4, x5) -> f_751(x, 1 + x6, x7, 1 + x6, x6, x8) :|: x9 < 0 && x10 > 0 && x7 > 0 && x1 > 1 && x4 > 0 && x3 > 1 && x6 > -1 && x > 1 && x2 = 1 + x7 && x5 = 1 + x10

----------------------------------------

(17)
Obligation:
Rules:
f_751(x26:0:0, x27:0:0, x28:0:0, x29:0:0, sum~cons_1~x32:0:0, x31:0:0) -> f_751(x26:0:0, 1 + x32:0:0, x28:0:0, x29:0:0, x32:0:0, x33:0:0) :|: x27:0:0 > 1 && x32:0:0 > -1 && x29:0:0 > 1 && x31:0:0 > 0 && sum~cons_1~x32:0:0 = 1 + x32:0:0

----------------------------------------

(18) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(19)
Obligation:
Rules:
f_751(x26:0:0:0, x27:0:0:0, x28:0:0:0, x29:0:0:0, sum~cons_1~x32:0:0:0, x31:0:0:0) -> f_751(x26:0:0:0, 1 + x32:0:0:0, x28:0:0:0, x29:0:0:0, x32:0:0:0, x33:0:0:0) :|: x29:0:0:0 > 1 && x31:0:0:0 > 0 && x32:0:0:0 > -1 && x27:0:0:0 > 1 && sum~cons_1~x32:0:0:0 = 1 + x32:0:0:0

----------------------------------------

(20) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_751(x1, x2, x3, x4, x5, x6) -> f_751(x2, x4, x5, x6)

----------------------------------------

(21)
Obligation:
Rules:
f_751(x27:0:0:0, x29:0:0:0, sum~cons_1~x32:0:0:0, x31:0:0:0) -> f_751(1 + x32:0:0:0, x29:0:0:0, x32:0:0:0, x33:0:0:0) :|: x29:0:0:0 > 1 && x31:0:0:0 > 0 && x32:0:0:0 > -1 && x27:0:0:0 > 1 && sum~cons_1~x32:0:0:0 = 1 + x32:0:0:0

----------------------------------------

(22) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_751(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_751(x27:0:0:0, x29:0:0:0, sum~cons_1~x32:0:0:0, x31:0:0:0) -> f_751(1 + x32:0:0:0, x29:0:0:0, x32:0:0:0, x33:0:0:0) :|: x29:0:0:0 > 1 && x31:0:0:0 > 0 && x32:0:0:0 > -1 && x27:0:0:0 > 1 && sum~cons_1~x32:0:0:0 = 1 + x32:0:0:0
The following rules are bounded:
f_751(x27:0:0:0, x29:0:0:0, sum~cons_1~x32:0:0:0, x31:0:0:0) -> f_751(1 + x32:0:0:0, x29:0:0:0, x32:0:0:0, x33:0:0:0) :|: x29:0:0:0 > 1 && x31:0:0:0 > 0 && x32:0:0:0 > -1 && x27:0:0:0 > 1 && sum~cons_1~x32:0:0:0 = 1 + x32:0:0:0

----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
SCC
----------------------------------------

(25) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 28 rulesP rules:
f_429(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1322, 1, v1324, v1325, 0, v1327, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) -> f_432(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) :|: 0 = 0
f_432(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) -> f_435(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) :|: 0 < v1327
f_435(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) -> f_439(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) :|: 0 = 0
f_439(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) -> f_443(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) :|: TRUE
f_443(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) -> f_447(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 4) :|: 0 = 0
f_447(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 4) -> f_451(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 < v1328 && 2 <= v1324 && 2 <= v1320
f_451(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_456(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 = 0
f_456(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_460(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_460(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_464(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 = 0
f_464(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_468(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 < v1329 && 2 <= v1325 && 2 <= v1321
f_468(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_473(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 = 0
f_473(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_477(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 = 0
f_477(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_480(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_480(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_483(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, v1793, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_483(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, v1793, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_487(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: v1793 = 0
f_487(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_490(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 = 0
f_490(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_494(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_494(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_498(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_498(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_502(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_502(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_506(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 = 0
f_506(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_511(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 1 + v1999 = v1328 && 0 <= v1999
f_511(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_515(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_515(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_519(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 = 0
f_519(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_523(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v2269, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 1 + v2269 = v1329 && 0 <= v2269
f_523(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v2269, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_528(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v2269, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_528(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v2269, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_533(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v2269, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_533(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v2269, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_426(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v2269, v1330, v1331, v1332, v1333, 3, 4) :|: TRUE
f_426(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1322, 1, v1324, v1325, 0, v1327, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) -> f_429(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1322, 1, v1324, v1325, 0, v1327, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_429(v1315:0, v1316:0, v1317:0, v1318:0, v1319:0, v1320:0, v1321:0, v1322:0, 1, v1324:0, v1325:0, 0, v1327:0, 1 + v1999:0, 1 + v2269:0, v1330:0, v1331:0, v1332:0, v1333:0, 3, 4) -> f_429(v1315:0, v1316:0, v1317:0, v1318:0, v1319:0, v1320:0, v1321:0, v1327:0, 1, 1 + v1999:0, 1 + v2269:0, 0, v1828:0, v1999:0, v2269:0, v1330:0, v1331:0, v1332:0, v1333:0, 3, 4) :|: v1327:0 > 0 && v1324:0 > 1 && v1999:0 > -1 && v1320:0 > 1 && v1325:0 > 1 && v2269:0 > -1 && v1321:0 > 1
Filtered unneeded arguments:
   f_429(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_429(x6, x7, x10, x11, x13, x14, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_429(v1320:0, v1321:0, v1324:0, v1325:0, v1327:0, sum~cons_1~v1999:0, sum~cons_1~v2269:0) -> f_429(v1320:0, v1321:0, 1 + v1999:0, 1 + v2269:0, v1828:0, v1999:0, v2269:0) :|: v1324:0 > 1 && v1327:0 > 0 && v1999:0 > -1 && v1320:0 > 1 && v1325:0 > 1 && v1321:0 > 1 && v2269:0 > -1 && sum~cons_1~v1999:0 = 1 + v1999:0 && sum~cons_1~v2269:0 = 1 + v2269:0

----------------------------------------

(26)
Obligation:
Rules:
f_429(v1320:0, v1321:0, v1324:0, v1325:0, v1327:0, sum~cons_1~v1999:0, sum~cons_1~v2269:0) -> f_429(v1320:0, v1321:0, 1 + v1999:0, 1 + v2269:0, v1828:0, v1999:0, v2269:0) :|: v1324:0 > 1 && v1327:0 > 0 && v1999:0 > -1 && v1320:0 > 1 && v1325:0 > 1 && v1321:0 > 1 && v2269:0 > -1 && sum~cons_1~v1999:0 = 1 + v1999:0 && sum~cons_1~v2269:0 = 1 + v2269:0

----------------------------------------

(27) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(28)
Obligation:
Rules:
f_429(v1320:0:0, v1321:0:0, v1324:0:0, v1325:0:0, v1327:0:0, sum~cons_1~v1999:0:0, sum~cons_1~v2269:0:0) -> f_429(v1320:0:0, v1321:0:0, 1 + v1999:0:0, 1 + v2269:0:0, v1828:0:0, v1999:0:0, v2269:0:0) :|: v1321:0:0 > 1 && v2269:0:0 > -1 && v1325:0:0 > 1 && v1320:0:0 > 1 && v1999:0:0 > -1 && v1327:0:0 > 0 && v1324:0:0 > 1 && sum~cons_1~v1999:0:0 = 1 + v1999:0:0 && sum~cons_1~v2269:0:0 = 1 + v2269:0:0

----------------------------------------

(29) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_429 ] = f_429_6

The following rules are decreasing:
f_429(v1320:0:0, v1321:0:0, v1324:0:0, v1325:0:0, v1327:0:0, sum~cons_1~v1999:0:0, sum~cons_1~v2269:0:0) -> f_429(v1320:0:0, v1321:0:0, 1 + v1999:0:0, 1 + v2269:0:0, v1828:0:0, v1999:0:0, v2269:0:0) :|: v1321:0:0 > 1 && v2269:0:0 > -1 && v1325:0:0 > 1 && v1320:0:0 > 1 && v1999:0:0 > -1 && v1327:0:0 > 0 && v1324:0:0 > 1 && sum~cons_1~v1999:0:0 = 1 + v1999:0:0 && sum~cons_1~v2269:0:0 = 1 + v2269:0:0

The following rules are bounded:
f_429(v1320:0:0, v1321:0:0, v1324:0:0, v1325:0:0, v1327:0:0, sum~cons_1~v1999:0:0, sum~cons_1~v2269:0:0) -> f_429(v1320:0:0, v1321:0:0, 1 + v1999:0:0, 1 + v2269:0:0, v1828:0:0, v1999:0:0, v2269:0:0) :|: v1321:0:0 > 1 && v2269:0:0 > -1 && v1325:0:0 > 1 && v1320:0:0 > 1 && v1999:0:0 > -1 && v1327:0:0 > 0 && v1324:0:0 > 1 && sum~cons_1~v1999:0:0 = 1 + v1999:0:0 && sum~cons_1~v2269:0:0 = 1 + v2269:0:0


----------------------------------------

(30)
YES

----------------------------------------

(31)
Obligation:
SCC
----------------------------------------

(32) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_388(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 4) -> f_391(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 < v1154 && 2 <= v1150 && 2 <= v1147
f_391(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_395(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_395(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_399(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_399(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_403(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_403(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_407(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_407(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_411(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_411(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_414(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_414(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_417(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 < v1155
f_417(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_421(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_421(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_427(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_427(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_430(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_430(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_433(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_433(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_437(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: v1435 != 0
f_437(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_441(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_441(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_445(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_445(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_449(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_449(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_454(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 1 + v1496 = v1154 && 0 <= v1496
f_454(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_458(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_458(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_462(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_462(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_466(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_466(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_471(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_471(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_475(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_475(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_385(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 4) :|: TRUE
f_385(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1150, 1, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, 0, 3, 4) -> f_388(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_388(v1143:0, v1144:0, v1145:0, v1146:0, v1147:0, v1148:0, v1149:0, 1 + v1496:0, 1, v1152:0, v1153:0, v1150:0, v1155:0, v1156:0, v1157:0, v1158:0, v1159:0, 0, 3, 4) -> f_388(v1143:0, v1144:0, v1145:0, v1146:0, v1147:0, v1148:0, v1149:0, v1496:0, 1, v1155:0, v1435:0, 1 + v1496:0, v1544:0, v1156:0, v1157:0, v1158:0, v1159:0, 0, 3, 4) :|: v1150:0 > 1 && v1496:0 > -1 && v1147:0 > 1 && v1155:0 > 0 && v1435:0 < 0
f_388(v1143:0, v1144:0, v1145:0, v1146:0, v1147:0, v1148:0, v1149:0, 1 + v1496:0, 1, v1152:0, v1153:0, v1150:0, v1155:0, v1156:0, v1157:0, v1158:0, v1159:0, 0, 3, 4) -> f_388(v1143:0, v1144:0, v1145:0, v1146:0, v1147:0, v1148:0, v1149:0, v1496:0, 1, v1155:0, v1435:0, 1 + v1496:0, v1544:0, v1156:0, v1157:0, v1158:0, v1159:0, 0, 3, 4) :|: v1150:0 > 1 && v1496:0 > -1 && v1147:0 > 1 && v1155:0 > 0 && v1435:0 > 0
Filtered unneeded arguments:
   f_388(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_388(x5, x8, x12, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_388(v1147:0, sum~cons_1~v1496:0, v1150:0, v1155:0) -> f_388(v1147:0, v1496:0, 1 + v1496:0, v1544:0) :|: v1496:0 > -1 && v1150:0 > 1 && v1155:0 > 0 && v1147:0 > 1 && sum~cons_1~v1496:0 = 1 + v1496:0

----------------------------------------

(33)
Obligation:
Rules:
f_388(v1147:0, sum~cons_1~v1496:0, v1150:0, v1155:0) -> f_388(v1147:0, v1496:0, 1 + v1496:0, v1544:0) :|: v1496:0 > -1 && v1150:0 > 1 && v1155:0 > 0 && v1147:0 > 1 && sum~cons_1~v1496:0 = 1 + v1496:0

----------------------------------------

(34) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(35)
Obligation:
Rules:
f_388(v1147:0:0, sum~cons_1~v1496:0:0, v1150:0:0, v1155:0:0) -> f_388(v1147:0:0, v1496:0:0, 1 + v1496:0:0, v1544:0:0) :|: v1155:0:0 > 0 && v1147:0:0 > 1 && v1150:0:0 > 1 && v1496:0:0 > -1 && sum~cons_1~v1496:0:0 = 1 + v1496:0:0

----------------------------------------

(36) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_388 ] = f_388_2

The following rules are decreasing:
f_388(v1147:0:0, sum~cons_1~v1496:0:0, v1150:0:0, v1155:0:0) -> f_388(v1147:0:0, v1496:0:0, 1 + v1496:0:0, v1544:0:0) :|: v1155:0:0 > 0 && v1147:0:0 > 1 && v1150:0:0 > 1 && v1496:0:0 > -1 && sum~cons_1~v1496:0:0 = 1 + v1496:0:0

The following rules are bounded:
f_388(v1147:0:0, sum~cons_1~v1496:0:0, v1150:0:0, v1155:0:0) -> f_388(v1147:0:0, v1496:0:0, 1 + v1496:0:0, v1544:0:0) :|: v1155:0:0 > 0 && v1147:0:0 > 1 && v1150:0:0 > 1 && v1496:0:0 > -1 && sum~cons_1~v1496:0:0 = 1 + v1496:0:0


----------------------------------------

(37)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
