MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/Oxxnj.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 66 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Oxxnj.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Oxxnj.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

union.__CS__u --> BasicStructureType(elementType: [3 x i32])

Global variables:

Name: __CS_round initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __CS_ret initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __CS_ret_PREEMPTED initVal: 1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __CS_ret_ERROR initVal: 2 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __CS_ret_FINISHED initVal: 4 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __CS_error initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __THREAD_UNUSED initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __THREAD_RUNNING initVal: 1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __THREAD_FINISHED initVal: 2 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __CS_thread_index initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_thread_lockedon initVal: ((null,null,null),(null,null,null),(null,null,null)) type: [3 x [3 x *i8]] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_thread_status initVal: ((0,0,0),(0,0,0),(0,0,0)) type: [3 x [3 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_thread_allocated initVal: (0,0,0) type: [3 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_thread_born_round initVal: (0,0,0) type: [3 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_thread initVal: (null,null,null) type: [3 x *BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8)] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: flag1 initVal: (0,0,0) type: [3 x i32] addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: flag2 initVal: (0,0,0) type: [3 x i32] addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: x initVal: (0,0,0) type: [3 x i32] addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_u initVal: {(0,0,0)} type: BasicTypeName typeName: union.__CS__uBasicStructureType(elementType: [3 x i32]) addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "exit" returnParam: BasicVoidType parameters: (i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 68
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		Unnamed Call-Instruction = call BasicVoidType @exit(i32 0)
		unreachable
	6:
		ret void

*BasicFunctionTypename: "__VERIFIER_assert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 78
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %7, %5
	5:
		br %6
	6:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	7:
		ret void

*BasicFunctionTypename: "__CS_cs" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 91
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @__CS_round
		%3 = zext i8 %2 to i32
		%4 = load %1
		%5 = zext i8 %4 to i32
		%6 = add i32 %3, %5
		%7 = icmp slt %6 3
		%8 = zext i1 %7 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %8)
		%9 = load %1
		%10 = zext i8 %9 to i32
		%11 = load @__CS_round
		%12 = zext i8 %11 to i32
		%13 = add i32 %12, %10
		%14 = trunc i32 %13 to i8
		store %14, @__CS_round
		%15 = call i32 (...)* @nondet_int()
		%16 = icmp ne %15 0
		br %16, %17, %22
	17:
		%18 = load @__CS_round
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 2
		br %20, %21, %22
	21:
		br %25
	22:
		%23 = load @__CS_ret
		%24 = zext i8 %23 to i32
		br %25
	25:
		%26 = phi [1, %21], [%24, %22]
		%27 = trunc i32 %26 to i8
		store %27, @__CS_ret
		ret void

*BasicFunctionTypename: "__CS_pthread_mutex_init" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 111
	0:
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		ret 0

*BasicFunctionTypename: "__CS_pthread_mutex_destroy" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 119
	0:
		%2 = alloca *i8, align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		%3 = load %2
		%4 = load %3
		%5 = zext i8 %4 to i32
		%6 = load @__CS_thread_index
		%7 = zext i8 %6 to i32
		%8 = icmp ne %5 %7
		br %8, %9, %15
	9:
		%10 = load %2
		%11 = load %10
		%12 = zext i8 %11 to i32
		%13 = icmp ne %12 0
		br %13, %14, %15
	14:
		store 1, @__CS_error
		store 2, @__CS_ret
		br %17
	15:
		%16 = load %2
		store 0, %16
		br %17
	17:
		ret 0

*BasicFunctionTypename: "__CS_pthread_mutex_lock" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 141
	0:
		%2 = alloca i32, align 4
		%3 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%4 = load %3
		%5 = load %4
		%6 = zext i8 %5 to i32
		%7 = icmp eq %6 0
		br %7, %8, %14
	8:
		%9 = load @__CS_thread_index
		%10 = zext i8 %9 to i32
		%11 = add i32 %10, 1
		%12 = trunc i32 %11 to i8
		%13 = load %3
		store %12, %13
		br %15
	14:
		store 1, @__CS_ret
		store 1, %2
		br %16
	15:
		store 0, %2
		br %16
	16:
		%17 = load %2
		ret %17

*BasicFunctionTypename: "__CS_pthread_mutex_unlock" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 160
	0:
		%2 = alloca i32, align 4
		%3 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%4 = load %3
		%5 = load %4
		%6 = zext i8 %5 to i32
		%7 = load @__CS_thread_index
		%8 = zext i8 %7 to i32
		%9 = add i32 %8, 1
		%10 = icmp ne %6 %9
		br %10, %11, %12
	11:
		store 1, @__CS_error
		store 2, @__CS_ret
		store 1, %2
		br %15
	12:
		%13 = load %3
		store 0, %13
		br %14
	14:
		store 0, %2
		br %15
	15:
		%16 = load %2
		ret %16

*BasicFunctionTypename: "__CS_pthread_cond_init" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 178
	0:
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		ret 0

*BasicFunctionTypename: "__CS_pthread_cond_signal" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 184
	0:
		%2 = alloca *i8, align 8
		%3 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %3
		br %4
	4:
		%5 = load %3
		%6 = icmp sle %5 2
		br %6, %7, %28
	7:
		%8 = load @__CS_round
		%9 = zext i8 %8 to i64
		%10 = getelementptr @__CS_thread_lockedon, 0, %9
		%11 = load %3
		%12 = sext i32 %11 to i64
		%13 = getelementptr %10, 0, %12
		%14 = load %13
		%15 = load %2
		%16 = icmp eq %14 %15
		br %16, %17, %24
	17:
		%18 = load @__CS_round
		%19 = zext i8 %18 to i64
		%20 = getelementptr @__CS_thread_lockedon, 0, %19
		%21 = load %3
		%22 = sext i32 %21 to i64
		%23 = getelementptr %20, 0, %22
		store null, %23
		br %24
	24:
		br %25
	25:
		%26 = load %3
		%27 = add i32 %26, 1
		store %27, %3
		br %4
	28:
		ret 0

*BasicFunctionTypename: "__CS_pthread_cond_broadcast" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 212
	0:
		%2 = alloca *i8, align 8
		%3 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %3
		br %4
	4:
		%5 = load %3
		%6 = icmp sle %5 2
		br %6, %7, %28
	7:
		%8 = load @__CS_round
		%9 = zext i8 %8 to i64
		%10 = getelementptr @__CS_thread_lockedon, 0, %9
		%11 = load %3
		%12 = sext i32 %11 to i64
		%13 = getelementptr %10, 0, %12
		%14 = load %13
		%15 = load %2
		%16 = icmp eq %14 %15
		br %16, %17, %24
	17:
		%18 = load @__CS_round
		%19 = zext i8 %18 to i64
		%20 = getelementptr @__CS_thread_lockedon, 0, %19
		%21 = load %3
		%22 = sext i32 %21 to i64
		%23 = getelementptr %20, 0, %22
		store null, %23
		br %24
	24:
		br %25
	25:
		%26 = load %3
		%27 = add i32 %26, 1
		store %27, %3
		br %4
	28:
		ret 0

*BasicFunctionTypename: "__CS_pthread_cond_wait" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 240
	0:
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%6 = load %5
		%7 = load %6
		%8 = zext i8 %7 to i32
		%9 = load @__CS_thread_index
		%10 = zext i8 %9 to i32
		%11 = add i32 %10, 1
		%12 = icmp ne %8 %11
		br %12, %13, %14
	13:
		store 1, @__CS_error
		store 2, @__CS_ret
		store 1, %3
		br %36
	14:
		%15 = load %5
		store 0, %15
		br %16
	16:
		%17 = load %4
		%18 = load @__CS_round
		%19 = zext i8 %18 to i64
		%20 = getelementptr @__CS_thread_lockedon, 0, %19
		%21 = load @__CS_thread_index
		%22 = zext i8 %21 to i64
		%23 = getelementptr %20, 0, %22
		store %17, %23
		store 1, @__CS_ret
		%24 = load %5
		%25 = load %24
		%26 = zext i8 %25 to i32
		%27 = icmp eq %26 0
		br %27, %28, %34
	28:
		%29 = load @__CS_thread_index
		%30 = zext i8 %29 to i32
		%31 = add i32 %30, 1
		%32 = trunc i32 %31 to i8
		%33 = load %5
		store %32, %33
		br %35
	34:
		store 1, @__CS_ret
		store 1, %3
		br %36
	35:
		store 0, %3
		br %36
	36:
		%37 = load %3
		ret %37

*BasicFunctionTypename: "__CS_assert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 281
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		store 1, @__CS_error
		store 2, @__CS_ret
		br %6
	6:
		ret void

*BasicFunctionTypename: "__CS_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 292
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		store 1, @__CS_ret
		br %6
	6:
		ret void

*BasicFunctionTypename: "__CS_pthread_join" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i8 zeroext, 1 **i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 301
	0:
		%3 = alloca i32, align 4
		%4 = alloca i8, align 1
		%5 = alloca **i8, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(***i8 %5)
		%6 = load %4
		%7 = zext i8 %6 to i32
		%8 = icmp ne %7 123
		br %8, %9, %14
	9:
		%10 = load %4
		%11 = zext i8 %10 to i32
		%12 = icmp sgt %11 3
		br %12, %13, %14
	13:
		store 1, @__CS_error
		store 2, @__CS_ret
		store 0, %3
		br %51
	14:
		%15 = load %4
		%16 = zext i8 %15 to i32
		%17 = icmp eq %16 123
		br %17, %28, %18
	18:
		%19 = load @__CS_round
		%20 = zext i8 %19 to i64
		%21 = getelementptr @__CS_thread_status, 0, %20
		%22 = load %4
		%23 = zext i8 %22 to i64
		%24 = getelementptr %21, 0, %23
		%25 = load %24
		%26 = zext i8 %25 to i32
		%27 = icmp eq %26 1
		br %27, %28, %29
	28:
		store 1, @__CS_ret
		store 0, %3
		br %51
	29:
		%30 = load @__CS_round
		%31 = zext i8 %30 to i64
		%32 = getelementptr @__CS_thread_status, 0, %31
		%33 = load %4
		%34 = zext i8 %33 to i64
		%35 = getelementptr %32, 0, %34
		%36 = load %35
		%37 = zext i8 %36 to i32
		%38 = icmp eq %37 0
		br %38, %39, %40
	39:
		store 1, @__CS_error
		store 2, @__CS_ret
		store 0, %3
		br %51
	40:
		%41 = load @__CS_round
		%42 = zext i8 %41 to i64
		%43 = getelementptr @__CS_thread_status, 0, %42
		%44 = load %4
		%45 = zext i8 %44 to i64
		%46 = getelementptr %43, 0, %45
		%47 = load %46
		%48 = zext i8 %47 to i32
		%49 = icmp eq %48 2
		%50 = zext i1 %49 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %50)
		store 0, %3
		br %51
	51:
		%52 = load %3
		ret %52

*BasicFunctionTypename: "__CS_pthread_create" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8, 2 *BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8), 3 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 349
	0:
		%5 = alloca i32, align 4
		%6 = alloca *i8, align 8
		%7 = alloca *i8, align 8
		%8 = alloca *BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8), align 8
		%9 = alloca *i8, align 8
		store %0, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %6)
		store %1, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %7)
		store %2, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8) %8)
		store %3, %9
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %9)
		%10 = load @__CS_thread_index
		%11 = zext i8 %10 to i32
		%12 = icmp eq %11 2
		br %12, %13, %15
	13:
		%14 = load %6
		store 123, %14
		store -1, %5
		br %39
	15:
		%16 = load @__CS_thread_index
		%17 = add i8 %16, 1
		store %17, @__CS_thread_index
		%18 = load @__CS_thread_index
		%19 = zext i8 %18 to i64
		%20 = getelementptr @__CS_thread_allocated, 0, %19
		store 1, %20
		%21 = load @__CS_round
		%22 = load @__CS_thread_index
		%23 = zext i8 %22 to i64
		%24 = getelementptr @__CS_thread_born_round, 0, %23
		store %21, %24
		%25 = load %8
		%26 = load @__CS_thread_index
		%27 = zext i8 %26 to i64
		%28 = getelementptr @__CS_thread, 0, %27
		store %25, %28
		%29 = load @__CS_round
		%30 = zext i8 %29 to i64
		%31 = getelementptr @__CS_thread_status, 0, %30
		%32 = load @__CS_thread_index
		%33 = zext i8 %32 to i64
		%34 = getelementptr %31, 0, %33
		store 1, %34
		%35 = load @__CS_thread_index
		%36 = load %6
		store %35, %36
		%37 = load @__CS_thread_index
		%38 = zext i8 %37 to i32
		store %38, %5
		br %39
	39:
		%40 = load %5
		ret %40

*BasicFunctionTypename: "thr1" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 390
	0:
		%1 = alloca *i8, align 8
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%2 = load @__CS_ret
		%3 = zext i8 %2 to i32
		%4 = icmp ne %3 0
		br %4, %5, %6
	5:
		store null, %1
		br %174
	6:
		%7 = load @__CS_round
		%8 = zext i8 %7 to i64
		%9 = getelementptr @flag1, 0, %8
		store 1, %9
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%10 = load @__CS_ret
		%11 = zext i8 %10 to i32
		%12 = icmp ne %11 0
		br %12, %13, %14
	13:
		store null, %1
		br %174
	14:
		br %15
	15:
		%16 = load @__CS_round
		%17 = zext i8 %16 to i64
		%18 = getelementptr @flag2, 0, %17
		%19 = load %18
		%20 = icmp sge %19 3
		br %20, %21, %27
	21:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%22 = load @__CS_ret
		%23 = zext i8 %22 to i32
		%24 = icmp ne %23 0
		br %24, %25, %26
	25:
		store null, %1
		br %174
	26:
		br %15
	27:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%28 = load @__CS_ret
		%29 = zext i8 %28 to i32
		%30 = icmp ne %29 0
		br %30, %31, %32
	31:
		store null, %1
		br %174
	32:
		%33 = load @__CS_round
		%34 = zext i8 %33 to i64
		%35 = getelementptr @flag1, 0, %34
		store 3, %35
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%36 = load @__CS_ret
		%37 = zext i8 %36 to i32
		%38 = icmp ne %37 0
		br %38, %39, %40
	39:
		store null, %1
		br %174
	40:
		%41 = load @__CS_round
		%42 = zext i8 %41 to i64
		%43 = getelementptr @flag2, 0, %42
		%44 = load %43
		%45 = icmp eq %44 1
		br %45, %46, %78
	46:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%47 = load @__CS_ret
		%48 = zext i8 %47 to i32
		%49 = icmp ne %48 0
		br %49, %50, %51
	50:
		store null, %1
		br %174
	51:
		%52 = load @__CS_round
		%53 = zext i8 %52 to i64
		%54 = getelementptr @flag1, 0, %53
		store 2, %54
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%55 = load @__CS_ret
		%56 = zext i8 %55 to i32
		%57 = icmp ne %56 0
		br %57, %58, %59
	58:
		store null, %1
		br %174
	59:
		br %60
	60:
		%61 = load @__CS_round
		%62 = zext i8 %61 to i64
		%63 = getelementptr @flag2, 0, %62
		%64 = load %63
		%65 = icmp ne %64 4
		br %65, %66, %72
	66:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%67 = load @__CS_ret
		%68 = zext i8 %67 to i32
		%69 = icmp ne %68 0
		br %69, %70, %71
	70:
		store null, %1
		br %174
	71:
		br %60
	72:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%73 = load @__CS_ret
		%74 = zext i8 %73 to i32
		%75 = icmp ne %74 0
		br %75, %76, %77
	76:
		store null, %1
		br %174
	77:
		br %78
	78:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%79 = load @__CS_ret
		%80 = zext i8 %79 to i32
		%81 = icmp ne %80 0
		br %81, %82, %83
	82:
		store null, %1
		br %174
	83:
		%84 = load @__CS_round
		%85 = zext i8 %84 to i64
		%86 = getelementptr @flag1, 0, %85
		store 4, %86
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%87 = load @__CS_ret
		%88 = zext i8 %87 to i32
		%89 = icmp ne %88 0
		br %89, %90, %91
	90:
		store null, %1
		br %174
	91:
		br %92
	92:
		%93 = load @__CS_round
		%94 = zext i8 %93 to i64
		%95 = getelementptr @flag2, 0, %94
		%96 = load %95
		%97 = icmp sge %96 2
		br %97, %98, %104
	98:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%99 = load @__CS_ret
		%100 = zext i8 %99 to i32
		%101 = icmp ne %100 0
		br %101, %102, %103
	102:
		store null, %1
		br %174
	103:
		br %92
	104:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%105 = load @__CS_ret
		%106 = zext i8 %105 to i32
		%107 = icmp ne %106 0
		br %107, %108, %109
	108:
		store null, %1
		br %174
	109:
		%110 = load @__CS_round
		%111 = zext i8 %110 to i64
		%112 = getelementptr @x, 0, %111
		store 0, %112
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%113 = load @__CS_ret
		%114 = zext i8 %113 to i32
		%115 = icmp ne %114 0
		br %115, %116, %117
	116:
		store null, %1
		br %174
	117:
		%118 = load @__CS_round
		%119 = zext i8 %118 to i64
		%120 = getelementptr @x, 0, %119
		%121 = load %120
		%122 = icmp sle %121 0
		br %122, %130, %123
	123:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%124 = load @__CS_ret
		%125 = zext i8 %124 to i32
		%126 = icmp ne %125 0
		br %126, %127, %128
	127:
		store null, %1
		br %174
	128:
		br %129
	129:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 1, @__CS_error
		store 2, @__CS_ret
		store null, %1
		br %174
	130:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%131 = load @__CS_ret
		%132 = zext i8 %131 to i32
		%133 = icmp ne %132 0
		br %133, %134, %135
	134:
		store null, %1
		br %174
	135:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%136 = load @__CS_ret
		%137 = zext i8 %136 to i32
		%138 = icmp ne %137 0
		br %138, %139, %140
	139:
		store null, %1
		br %174
	140:
		br %141
	141:
		%142 = load @__CS_round
		%143 = zext i8 %142 to i64
		%144 = getelementptr @flag2, 0, %143
		%145 = load %144
		%146 = icmp sle 2 %145
		br %146, %147, %153
	147:
		%148 = load @__CS_round
		%149 = zext i8 %148 to i64
		%150 = getelementptr @flag2, 0, %149
		%151 = load %150
		%152 = icmp sle %151 3
		br %153
	153:
		%154 = phi [0, %141], [%152, %147]
		br %154, %155, %161
	155:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%156 = load @__CS_ret
		%157 = zext i8 %156 to i32
		%158 = icmp ne %157 0
		br %158, %159, %160
	159:
		store null, %1
		br %174
	160:
		br %141
	161:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%162 = load @__CS_ret
		%163 = zext i8 %162 to i32
		%164 = icmp ne %163 0
		br %164, %165, %166
	165:
		store null, %1
		br %174
	166:
		%167 = load @__CS_round
		%168 = zext i8 %167 to i64
		%169 = getelementptr @flag1, 0, %168
		store 0, %169
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%170 = load @__CS_ret
		%171 = zext i8 %170 to i32
		%172 = icmp ne %171 0
		br %172, %173, %174
	173:
		store null, %1
		br %174
	174:
		%175 = load %1
		ret %175

*BasicFunctionTypename: "thr2" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 584
	0:
		%1 = alloca *i8, align 8
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%2 = load @__CS_ret
		%3 = zext i8 %2 to i32
		%4 = icmp ne %3 0
		br %4, %5, %6
	5:
		store null, %1
		br %174
	6:
		%7 = load @__CS_round
		%8 = zext i8 %7 to i64
		%9 = getelementptr @flag2, 0, %8
		store 1, %9
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%10 = load @__CS_ret
		%11 = zext i8 %10 to i32
		%12 = icmp ne %11 0
		br %12, %13, %14
	13:
		store null, %1
		br %174
	14:
		br %15
	15:
		%16 = load @__CS_round
		%17 = zext i8 %16 to i64
		%18 = getelementptr @flag1, 0, %17
		%19 = load %18
		%20 = icmp sge %19 3
		br %20, %21, %27
	21:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%22 = load @__CS_ret
		%23 = zext i8 %22 to i32
		%24 = icmp ne %23 0
		br %24, %25, %26
	25:
		store null, %1
		br %174
	26:
		br %15
	27:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%28 = load @__CS_ret
		%29 = zext i8 %28 to i32
		%30 = icmp ne %29 0
		br %30, %31, %32
	31:
		store null, %1
		br %174
	32:
		%33 = load @__CS_round
		%34 = zext i8 %33 to i64
		%35 = getelementptr @flag2, 0, %34
		store 3, %35
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%36 = load @__CS_ret
		%37 = zext i8 %36 to i32
		%38 = icmp ne %37 0
		br %38, %39, %40
	39:
		store null, %1
		br %174
	40:
		%41 = load @__CS_round
		%42 = zext i8 %41 to i64
		%43 = getelementptr @flag1, 0, %42
		%44 = load %43
		%45 = icmp eq %44 1
		br %45, %46, %78
	46:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%47 = load @__CS_ret
		%48 = zext i8 %47 to i32
		%49 = icmp ne %48 0
		br %49, %50, %51
	50:
		store null, %1
		br %174
	51:
		%52 = load @__CS_round
		%53 = zext i8 %52 to i64
		%54 = getelementptr @flag2, 0, %53
		store 2, %54
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%55 = load @__CS_ret
		%56 = zext i8 %55 to i32
		%57 = icmp ne %56 0
		br %57, %58, %59
	58:
		store null, %1
		br %174
	59:
		br %60
	60:
		%61 = load @__CS_round
		%62 = zext i8 %61 to i64
		%63 = getelementptr @flag1, 0, %62
		%64 = load %63
		%65 = icmp ne %64 4
		br %65, %66, %72
	66:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%67 = load @__CS_ret
		%68 = zext i8 %67 to i32
		%69 = icmp ne %68 0
		br %69, %70, %71
	70:
		store null, %1
		br %174
	71:
		br %60
	72:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%73 = load @__CS_ret
		%74 = zext i8 %73 to i32
		%75 = icmp ne %74 0
		br %75, %76, %77
	76:
		store null, %1
		br %174
	77:
		br %78
	78:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%79 = load @__CS_ret
		%80 = zext i8 %79 to i32
		%81 = icmp ne %80 0
		br %81, %82, %83
	82:
		store null, %1
		br %174
	83:
		%84 = load @__CS_round
		%85 = zext i8 %84 to i64
		%86 = getelementptr @flag2, 0, %85
		store 4, %86
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%87 = load @__CS_ret
		%88 = zext i8 %87 to i32
		%89 = icmp ne %88 0
		br %89, %90, %91
	90:
		store null, %1
		br %174
	91:
		br %92
	92:
		%93 = load @__CS_round
		%94 = zext i8 %93 to i64
		%95 = getelementptr @flag1, 0, %94
		%96 = load %95
		%97 = icmp sge %96 2
		br %97, %98, %104
	98:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%99 = load @__CS_ret
		%100 = zext i8 %99 to i32
		%101 = icmp ne %100 0
		br %101, %102, %103
	102:
		store null, %1
		br %174
	103:
		br %92
	104:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%105 = load @__CS_ret
		%106 = zext i8 %105 to i32
		%107 = icmp ne %106 0
		br %107, %108, %109
	108:
		store null, %1
		br %174
	109:
		%110 = load @__CS_round
		%111 = zext i8 %110 to i64
		%112 = getelementptr @x, 0, %111
		store 1, %112
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%113 = load @__CS_ret
		%114 = zext i8 %113 to i32
		%115 = icmp ne %114 0
		br %115, %116, %117
	116:
		store null, %1
		br %174
	117:
		%118 = load @__CS_round
		%119 = zext i8 %118 to i64
		%120 = getelementptr @x, 0, %119
		%121 = load %120
		%122 = icmp sge %121 1
		br %122, %130, %123
	123:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%124 = load @__CS_ret
		%125 = zext i8 %124 to i32
		%126 = icmp ne %125 0
		br %126, %127, %128
	127:
		store null, %1
		br %174
	128:
		br %129
	129:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 1, @__CS_error
		store 2, @__CS_ret
		store null, %1
		br %174
	130:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%131 = load @__CS_ret
		%132 = zext i8 %131 to i32
		%133 = icmp ne %132 0
		br %133, %134, %135
	134:
		store null, %1
		br %174
	135:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%136 = load @__CS_ret
		%137 = zext i8 %136 to i32
		%138 = icmp ne %137 0
		br %138, %139, %140
	139:
		store null, %1
		br %174
	140:
		br %141
	141:
		%142 = load @__CS_round
		%143 = zext i8 %142 to i64
		%144 = getelementptr @flag1, 0, %143
		%145 = load %144
		%146 = icmp sle 2 %145
		br %146, %147, %153
	147:
		%148 = load @__CS_round
		%149 = zext i8 %148 to i64
		%150 = getelementptr @flag1, 0, %149
		%151 = load %150
		%152 = icmp sle %151 3
		br %153
	153:
		%154 = phi [0, %141], [%152, %147]
		br %154, %155, %161
	155:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%156 = load @__CS_ret
		%157 = zext i8 %156 to i32
		%158 = icmp ne %157 0
		br %158, %159, %160
	159:
		store null, %1
		br %174
	160:
		br %141
	161:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%162 = load @__CS_ret
		%163 = zext i8 %162 to i32
		%164 = icmp ne %163 0
		br %164, %165, %166
	165:
		store null, %1
		br %174
	166:
		%167 = load @__CS_round
		%168 = zext i8 %167 to i64
		%169 = getelementptr @flag2, 0, %168
		store 0, %169
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%170 = load @__CS_ret
		%171 = zext i8 %170 to i32
		%172 = icmp ne %171 0
		br %172, %173, %174
	173:
		store null, %1
		br %174
	174:
		%175 = load %1
		ret %175

*BasicFunctionTypename: "main_thread" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 776
	0:
		%2 = alloca *i8, align 8
		%3 = alloca *i8, align 8
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%6 = load @__CS_ret
		%7 = zext i8 %6 to i32
		%8 = icmp ne %7 0
		br %8, %9, %10
	9:
		store null, %2
		br %36
	10:
		%11 = call i32 @__CS_pthread_create(*i8 %4, *i8 null, *BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8) aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMConversionConstExpr@28da6255, *i8 null)
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%12 = load @__CS_ret
		%13 = zext i8 %12 to i32
		%14 = icmp ne %13 0
		br %14, %15, %16
	15:
		store null, %2
		br %36
	16:
		%17 = call i32 @__CS_pthread_create(*i8 %5, *i8 null, *BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8) aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMConversionConstExpr@4134a9a5, *i8 null)
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%18 = load @__CS_ret
		%19 = zext i8 %18 to i32
		%20 = icmp ne %19 0
		br %20, %21, %22
	21:
		store null, %2
		br %36
	22:
		%23 = load %4
		%24 = call i32 @__CS_pthread_join(i8 zeroext %23, **i8 null)
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%25 = load @__CS_ret
		%26 = zext i8 %25 to i32
		%27 = icmp ne %26 0
		br %27, %28, %29
	28:
		store null, %2
		br %36
	29:
		%30 = load %5
		%31 = call i32 @__CS_pthread_join(i8 zeroext %30, **i8 null)
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%32 = load @__CS_ret
		%33 = zext i8 %32 to i32
		%34 = icmp ne %33 0
		br %34, %35, %36
	35:
		store null, %2
		br %36
	36:
		%37 = load %2
		ret %37

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 820
	0:
		%1 = alloca i32, align 4
		%2 = alloca [3 x [3 x i8]], align 1
		%3 = alloca [3 x [3 x *i8]], align 16
		%4 = alloca [3 x i32], align 4
		%5 = alloca [3 x i32], align 4
		%6 = alloca [3 x i32], align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [3 x i8]] %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [3 x *i8]] %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x i32] %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x i32] %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x i32] %6)
		%7 = getelementptr %2, 0, 1
		%8 = getelementptr %7, 0, 0
		%9 = load %8
		store %9, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@778f927f
		%10 = getelementptr %2, 0, 2
		%11 = getelementptr %10, 0, 0
		%12 = load %11
		store %12, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@77e82096
		%13 = getelementptr %2, 0, 1
		%14 = getelementptr %13, 0, 1
		%15 = load %14
		store %15, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@dfbe847
		%16 = getelementptr %2, 0, 2
		%17 = getelementptr %16, 0, 1
		%18 = load %17
		store %18, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6bbc67c9
		%19 = getelementptr %2, 0, 1
		%20 = getelementptr %19, 0, 2
		%21 = load %20
		store %21, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@60ab1cab
		%22 = getelementptr %2, 0, 2
		%23 = getelementptr %22, 0, 2
		%24 = load %23
		store %24, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@56716cb8
		%25 = getelementptr %3, 0, 1
		%26 = getelementptr %25, 0, 0
		%27 = load %26
		store %27, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@41a0fe1
		%28 = getelementptr %3, 0, 2
		%29 = getelementptr %28, 0, 0
		%30 = load %29
		store %30, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@c10b284
		%31 = getelementptr %3, 0, 1
		%32 = getelementptr %31, 0, 1
		%33 = load %32
		store %33, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3466b9e9
		%34 = getelementptr %3, 0, 2
		%35 = getelementptr %34, 0, 1
		%36 = load %35
		store %36, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@69af0771
		%37 = getelementptr %3, 0, 1
		%38 = getelementptr %37, 0, 2
		%39 = load %38
		store %39, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3d9e78a2
		%40 = getelementptr %3, 0, 2
		%41 = getelementptr %40, 0, 2
		%42 = load %41
		store %42, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@34937907
		%43 = getelementptr %4, 0, 1
		%44 = load %43
		store %44, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@353b278d
		%45 = getelementptr %4, 0, 2
		%46 = load %45
		store %46, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@243e3ad4
		%47 = getelementptr %5, 0, 1
		%48 = load %47
		store %48, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6a2b1d99
		%49 = getelementptr %5, 0, 2
		%50 = load %49
		store %50, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@45df1a9a
		%51 = getelementptr %6, 0, 1
		%52 = load %51
		store %52, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@29345ae3
		%53 = getelementptr %6, 0, 2
		%54 = load %53
		store %54, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7c893d8b
		store 0, @__CS_round
		store 0, @__CS_thread_index
		%55 = load @__CS_round
		store %55, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4efc3056
		store 1, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@734af8d9
		store @main_thread, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@78a24711
		store 1, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4d7258eb
		%56 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@62a3af93
		%57 = zext i8 %56 to i32
		%58 = icmp eq %57 1
		br %58, %59, %72
	59:
		%60 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@468b0f2e
		store %60, @__CS_round
		store 0, @__CS_ret
		%61 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2cfb5221
		%62 = call *i8 %61(*i8 null)
		%63 = load @__CS_ret
		%64 = zext i8 %63 to i32
		%65 = icmp ne %64 1
		br %65, %66, %71
	66:
		%67 = load @__CS_round
		%68 = zext i8 %67 to i64
		%69 = getelementptr @__CS_thread_status, 0, %68
		%70 = getelementptr %69, 0, 0
		store 2, %70
		br %71
	71:
		br %72
	72:
		%73 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7391f255
		%74 = zext i8 %73 to i32
		%75 = icmp eq %74 1
		br %75, %76, %89
	76:
		%77 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@cb11483
		store %77, @__CS_round
		store 0, @__CS_ret
		%78 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@125d8844
		%79 = call *i8 %78(*i8 null)
		%80 = load @__CS_ret
		%81 = zext i8 %80 to i32
		%82 = icmp ne %81 1
		br %82, %83, %88
	83:
		%84 = load @__CS_round
		%85 = zext i8 %84 to i64
		%86 = getelementptr @__CS_thread_status, 0, %85
		%87 = getelementptr %86, 0, 1
		store 2, %87
		br %88
	88:
		br %89
	89:
		%90 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6441aa74
		%91 = zext i8 %90 to i32
		%92 = icmp eq %91 1
		br %92, %93, %106
	93:
		%94 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@18beeff3
		store %94, @__CS_round
		store 0, @__CS_ret
		%95 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1caff56b
		%96 = call *i8 %95(*i8 null)
		%97 = load @__CS_ret
		%98 = zext i8 %97 to i32
		%99 = icmp ne %98 1
		br %99, %100, %105
	100:
		%101 = load @__CS_round
		%102 = zext i8 %101 to i64
		%103 = getelementptr @__CS_thread_status, 0, %102
		%104 = getelementptr %103, 0, 2
		store 2, %104
		br %105
	105:
		br %106
	106:
		%107 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@62ce4112
		%108 = zext i8 %107 to i32
		%109 = getelementptr %2, 0, 1
		%110 = getelementptr %109, 0, 0
		%111 = load %110
		%112 = zext i8 %111 to i32
		%113 = icmp eq %108 %112
		%114 = zext i1 %113 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %114)
		%115 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@b355535
		%116 = zext i8 %115 to i32
		%117 = getelementptr %2, 0, 2
		%118 = getelementptr %117, 0, 0
		%119 = load %118
		%120 = zext i8 %119 to i32
		%121 = icmp eq %116 %120
		%122 = zext i1 %121 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %122)
		%123 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@641bf2d7
		%124 = zext i8 %123 to i32
		%125 = getelementptr %2, 0, 1
		%126 = getelementptr %125, 0, 1
		%127 = load %126
		%128 = zext i8 %127 to i32
		%129 = icmp eq %124 %128
		%130 = zext i1 %129 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %130)
		%131 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@77c5792
		%132 = zext i8 %131 to i32
		%133 = getelementptr %2, 0, 2
		%134 = getelementptr %133, 0, 1
		%135 = load %134
		%136 = zext i8 %135 to i32
		%137 = icmp eq %132 %136
		%138 = zext i1 %137 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %138)
		%139 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@17aa40be
		%140 = zext i8 %139 to i32
		%141 = getelementptr %2, 0, 1
		%142 = getelementptr %141, 0, 2
		%143 = load %142
		%144 = zext i8 %143 to i32
		%145 = icmp eq %140 %144
		%146 = zext i1 %145 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %146)
		%147 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@36172383
		%148 = zext i8 %147 to i32
		%149 = getelementptr %2, 0, 2
		%150 = getelementptr %149, 0, 2
		%151 = load %150
		%152 = zext i8 %151 to i32
		%153 = icmp eq %148 %152
		%154 = zext i1 %153 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %154)
		%155 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@d21e2dc
		%156 = getelementptr %3, 0, 1
		%157 = getelementptr %156, 0, 0
		%158 = load %157
		%159 = icmp eq %155 %158
		%160 = zext i1 %159 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %160)
		%161 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6804f42d
		%162 = getelementptr %3, 0, 2
		%163 = getelementptr %162, 0, 0
		%164 = load %163
		%165 = icmp eq %161 %164
		%166 = zext i1 %165 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %166)
		%167 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2deee623
		%168 = getelementptr %3, 0, 1
		%169 = getelementptr %168, 0, 1
		%170 = load %169
		%171 = icmp eq %167 %170
		%172 = zext i1 %171 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %172)
		%173 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@226ad326
		%174 = getelementptr %3, 0, 2
		%175 = getelementptr %174, 0, 1
		%176 = load %175
		%177 = icmp eq %173 %176
		%178 = zext i1 %177 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %178)
		%179 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@20dff2b5
		%180 = getelementptr %3, 0, 1
		%181 = getelementptr %180, 0, 2
		%182 = load %181
		%183 = icmp eq %179 %182
		%184 = zext i1 %183 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %184)
		%185 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6f35cf1f
		%186 = getelementptr %3, 0, 2
		%187 = getelementptr %186, 0, 2
		%188 = load %187
		%189 = icmp eq %185 %188
		%190 = zext i1 %189 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %190)
		%191 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@35b0e324
		%192 = getelementptr %4, 0, 1
		%193 = load %192
		%194 = icmp eq %191 %193
		%195 = zext i1 %194 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %195)
		%196 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@41b7f557
		%197 = getelementptr %4, 0, 2
		%198 = load %197
		%199 = icmp eq %196 %198
		%200 = zext i1 %199 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %200)
		%201 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1e22fd8e
		%202 = getelementptr %5, 0, 1
		%203 = load %202
		%204 = icmp eq %201 %203
		%205 = zext i1 %204 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %205)
		%206 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5fae8462
		%207 = getelementptr %5, 0, 2
		%208 = load %207
		%209 = icmp eq %206 %208
		%210 = zext i1 %209 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %210)
		%211 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6db5f570
		%212 = getelementptr %6, 0, 1
		%213 = load %212
		%214 = icmp eq %211 %213
		%215 = zext i1 %214 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %215)
		%216 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@13d6a8dc
		%217 = getelementptr %6, 0, 2
		%218 = load %217
		%219 = icmp eq %216 %218
		%220 = zext i1 %219 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %220)
		%221 = load @__CS_error
		%222 = zext i8 %221 to i32
		%223 = icmp ne %222 1
		%224 = zext i1 %223 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assert(i32 %224)
		%225 = load %1
		ret %225


Analyze Termination of all function calls matching the pattern:
main()/hpcwork/ff862203/termcomp25/benchmarks/Oxxnj.c:3:63: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));
                                                              ^
/hpcwork/ff862203/termcomp25/benchmarks/Oxxnj.c:51:75: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;
                                                                          ^
/hpcwork/ff862203/termcomp25/benchmarks/Oxxnj.c:54:36: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
                                   ^
/hpcwork/ff862203/termcomp25/benchmarks/Oxxnj.c:56:36: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
