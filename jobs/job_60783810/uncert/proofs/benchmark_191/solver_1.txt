YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/B9WuH.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 977 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 19 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 11 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 12 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/B9WuH.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/B9WuH.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %6
	6:
		%7 = load %3
		%8 = icmp sgt %7 0
		br %8, %12, %9
	9:
		%10 = load %4
		%11 = icmp sgt %10 0
		br %12
	12:
		%13 = phi [1, %6], [%11, %9]
		br %13, %14, %31
	14:
		%15 = load %3
		%16 = icmp sgt %15 0
		br %16, %17, %20
	17:
		%18 = load %3
		%19 = sub i32 %18, 1
		store %19, %3
		br %28
	20:
		%21 = load %4
		%22 = icmp sgt %21 0
		br %22, %23, %26
	23:
		%24 = load %4
		%25 = sub i32 %24, 1
		store %25, %4
		br %27
	26:
		br %27
	27:
		br %28
	28:
		%29 = load %5
		%30 = add i32 %29, 1
		store %30, %5
		br %6
	31:
		%32 = load %5
		ret %32

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 51
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_667(v908, v909, v910, v911, v912, 0, 1, v915, v916, v917, v918, v919, v920, v921, v922, v923, 3, 4) -> f_669(v908, v909, v910, v911, v912, 0, 1, v916, v917, v918, v919, v920, v921, v922, v923, 3, 4) :|: 0 = 0
f_669(v908, v909, v910, v911, v912, 0, 1, v916, v917, v918, v919, v920, v921, v922, v923, 3, 4) -> f_670(v908, v909, v910, v911, v912, 0, 1, v916, v953, v917, v918, v919, v920, v921, v922, v923, 3, 4, 2) :|: v953 = 1 + v916 && 2 <= v953
f_670(v908, v909, v910, v911, v912, 0, 1, v916, v953, v917, v918, v919, v920, v921, v922, v923, 3, 4, 2) -> f_671(v908, v909, v910, v911, v912, 0, 1, v916, v953, v917, v918, v919, v920, v921, v922, v923, 3, 4, 2) :|: TRUE
f_671(v908, v909, v910, v911, v912, 0, 1, v916, v953, v917, v918, v919, v920, v921, v922, v923, 3, 4, 2) -> f_672(v908, v909, v910, v911, v912, 0, 1, v916, v953, v917, v918, v919, v920, v921, v922, v923, 3, 4, 2) :|: TRUE
f_672(v908, v909, v910, v911, v912, 0, 1, v916, v953, v917, v918, v919, v920, v921, v922, v923, 3, 4, 2) -> f_673(v908, v909, v910, v911, v912, 0, 1, v916, v953, v917, v918, v919, v920, v921, v922, v923, 3, 4, 2) :|: 0 = 0
f_673(v908, v909, v910, v911, v912, 0, 1, v916, v953, v917, v918, v919, v920, v921, v922, v923, 3, 4, 2) -> f_674(v908, v909, v910, v911, v912, 0, 1, v916, v953, v917, v918, v919, v920, v921, v922, v923, 3, 4, 2) :|: 0 = 0
f_674(v908, v909, v910, v911, v912, 0, 1, v916, v953, v917, v918, v919, v920, v921, v922, v923, 3, 4, 2) -> f_675(v908, v909, v910, v911, v912, 0, 1, v916, v953, v917, v918, v919, v920, v921, v922, v923, 3, 4, 2) :|: TRUE
f_675(v908, v909, v910, v911, v912, 0, 1, v916, v953, v917, v918, v919, v920, v921, v922, v923, 3, 4, 2) -> f_676(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 4, 2) :|: 0 = 0
f_676(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 4, 2) -> f_677(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) :|: 0 < v918 && 2 <= v917 && 2 <= v909
f_677(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) -> f_679(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) :|: 0 = 0
f_679(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) -> f_681(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) :|: 0 = 0
f_681(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) -> f_683(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) :|: TRUE
f_683(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) -> f_685(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) :|: 0 = 0
f_685(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) -> f_687(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) :|: 0 = 0
f_687(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) -> f_689(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) :|: TRUE
f_689(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) -> f_690(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) :|: 0 = 0
f_690(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) -> f_691(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) :|: 0 = 0
f_691(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) -> f_692(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) :|: TRUE
f_692(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v917, v919, v920, v921, v922, v923, 3, 2, 4) -> f_693(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v919, v920, v921, v922, v923, 3, 2, 4) :|: 0 = 0
f_693(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v919, v920, v921, v922, v923, 3, 2, 4) -> f_694(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v1011, v919, v920, v921, v922, v923, 3, 2, 4) :|: 1 + v1011 = v918 && 0 <= v1011
f_694(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v1011, v919, v920, v921, v922, v923, 3, 2, 4) -> f_695(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v1011, v919, v920, v921, v922, v923, 3, 2, 4) :|: TRUE
f_695(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v1011, v919, v920, v921, v922, v923, 3, 2, 4) -> f_696(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v1011, v919, v920, v921, v922, v923, 3, 2, 4) :|: TRUE
f_696(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v1011, v919, v920, v921, v922, v923, 3, 2, 4) -> f_665(v908, v909, v910, v911, v912, 0, 1, v916, v953, v918, v1011, v919, v920, v921, v922, v923, 3, 4) :|: TRUE
f_665(v908, v909, v910, v911, v912, 0, 1, v915, v916, v917, v918, v919, v920, v921, v922, v923, 3, 4) -> f_667(v908, v909, v910, v911, v912, 0, 1, v915, v916, v917, v918, v919, v920, v921, v922, v923, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_667(v908:0, v909:0, v910:0, v911:0, v912:0, 0, 1, v915:0, v916:0, v917:0, 1 + v1011:0, v919:0, v920:0, v921:0, v922:0, v923:0, 3, 4) -> f_667(v908:0, v909:0, v910:0, v911:0, v912:0, 0, 1, v916:0, 1 + v916:0, 1 + v1011:0, v1011:0, v919:0, v920:0, v921:0, v922:0, v923:0, 3, 4) :|: v916:0 > 0 && v917:0 > 1 && v1011:0 > -1 && v909:0 > 1
Filtered unneeded arguments:
   f_667(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_667(x2, x9, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_667(v909:0, v916:0, v917:0, sum~cons_1~v1011:0) -> f_667(v909:0, 1 + v916:0, 1 + v1011:0, v1011:0) :|: v917:0 > 1 && v916:0 > 0 && v909:0 > 1 && v1011:0 > -1 && sum~cons_1~v1011:0 = 1 + v1011:0

----------------------------------------

(9)
Obligation:
Rules:
f_667(v909:0, v916:0, v917:0, sum~cons_1~v1011:0) -> f_667(v909:0, 1 + v916:0, 1 + v1011:0, v1011:0) :|: v917:0 > 1 && v916:0 > 0 && v909:0 > 1 && v1011:0 > -1 && sum~cons_1~v1011:0 = 1 + v1011:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_667(v909:0:0, v916:0:0, v917:0:0, sum~cons_1~v1011:0:0) -> f_667(v909:0:0, 1 + v916:0:0, 1 + v1011:0:0, v1011:0:0) :|: v909:0:0 > 1 && v1011:0:0 > -1 && v916:0:0 > 0 && v917:0:0 > 1 && sum~cons_1~v1011:0:0 = 1 + v1011:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_667(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_667(v909:0:0, v916:0:0, v917:0:0, sum~cons_1~v1011:0:0) -> f_667(v909:0:0, 1 + v916:0:0, 1 + v1011:0:0, v1011:0:0) :|: v909:0:0 > 1 && v1011:0:0 > -1 && v916:0:0 > 0 && v917:0:0 > 1 && sum~cons_1~v1011:0:0 = 1 + v1011:0:0
The following rules are bounded:
f_667(v909:0:0, v916:0:0, v917:0:0, sum~cons_1~v1011:0:0) -> f_667(v909:0:0, 1 + v916:0:0, 1 + v1011:0:0, v1011:0:0) :|: v909:0:0 > 1 && v1011:0:0 > -1 && v916:0:0 > 0 && v917:0:0 > 1 && sum~cons_1~v1011:0:0 = 1 + v1011:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_611(v799, v800, v801, v802, v803, 0, v805, 1, v807, v808, v809, v810, v811, v812, v813, v814, 3, 4) -> f_613(v799, v800, v801, v802, v803, 0, v805, 1, v807, v808, v809, v810, v811, v812, v813, v814, 3, 4) :|: 0 = 0
f_613(v799, v800, v801, v802, v803, 0, v805, 1, v807, v808, v809, v810, v811, v812, v813, v814, 3, 4) -> f_615(v799, v800, v801, v802, v803, 0, v805, 1, v807, v808, v809, v810, v811, v812, v813, v814, 3, 4) :|: TRUE
f_615(v799, v800, v801, v802, v803, 0, v805, 1, v807, v808, v809, v810, v811, v812, v813, v814, 3, 4) -> f_617(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 4) :|: 0 = 0
f_617(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 4) -> f_619(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: 0 < v807 && 2 <= v805 && 2 <= v800
f_619(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_622(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: 0 = 0
f_622(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_625(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: 0 = 0
f_625(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_628(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: TRUE
f_628(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_632(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: 0 = 0
f_632(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_636(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: 0 = 0
f_636(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_640(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: TRUE
f_640(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_643(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: 0 = 0
f_643(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_646(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: 0 = 0
f_646(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_649(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: TRUE
f_649(v799, v800, v801, v802, v803, 0, v807, 1, v805, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_651(v799, v800, v801, v802, v803, 0, v807, 1, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: 0 = 0
f_651(v799, v800, v801, v802, v803, 0, v807, 1, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_653(v799, v800, v801, v802, v803, 0, v807, 1, v886, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: 1 + v886 = v807 && 0 <= v886
f_653(v799, v800, v801, v802, v803, 0, v807, 1, v886, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_655(v799, v800, v801, v802, v803, 0, v807, 1, v886, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: TRUE
f_655(v799, v800, v801, v802, v803, 0, v807, 1, v886, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_657(v799, v800, v801, v802, v803, 0, v807, 1, v886, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: TRUE
f_657(v799, v800, v801, v802, v803, 0, v807, 1, v886, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_659(v799, v800, v801, v802, v803, 0, v807, 1, v886, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: TRUE
f_659(v799, v800, v801, v802, v803, 0, v807, 1, v886, v808, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_661(v799, v800, v801, v802, v803, 0, v807, 1, v886, v809, v810, v811, v812, v813, v814, 3, 2, 4) :|: 0 = 0
f_661(v799, v800, v801, v802, v803, 0, v807, 1, v886, v809, v810, v811, v812, v813, v814, 3, 2, 4) -> f_663(v799, v800, v801, v802, v803, 0, v807, 1, v886, v809, v907, v810, v811, v812, v813, v814, 3, 2, 4) :|: v907 = 1 + v809 && 2 <= v907
f_663(v799, v800, v801, v802, v803, 0, v807, 1, v886, v809, v907, v810, v811, v812, v813, v814, 3, 2, 4) -> f_666(v799, v800, v801, v802, v803, 0, v807, 1, v886, v809, v907, v810, v811, v812, v813, v814, 3, 2, 4) :|: TRUE
f_666(v799, v800, v801, v802, v803, 0, v807, 1, v886, v809, v907, v810, v811, v812, v813, v814, 3, 2, 4) -> f_668(v799, v800, v801, v802, v803, 0, v807, 1, v886, v809, v907, v810, v811, v812, v813, v814, 3, 2, 4) :|: TRUE
f_668(v799, v800, v801, v802, v803, 0, v807, 1, v886, v809, v907, v810, v811, v812, v813, v814, 3, 2, 4) -> f_609(v799, v800, v801, v802, v803, 0, v807, 1, v886, v809, v907, v810, v811, v812, v813, v814, 3, 4) :|: TRUE
f_609(v799, v800, v801, v802, v803, 0, v805, 1, v807, v808, v809, v810, v811, v812, v813, v814, 3, 4) -> f_611(v799, v800, v801, v802, v803, 0, v805, 1, v807, v808, v809, v810, v811, v812, v813, v814, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_611(v799:0, v800:0, v801:0, v802:0, v803:0, 0, v805:0, 1, 1 + v886:0, v808:0, v809:0, v810:0, v811:0, v812:0, v813:0, v814:0, 3, 4) -> f_611(v799:0, v800:0, v801:0, v802:0, v803:0, 0, 1 + v886:0, 1, v886:0, v809:0, 1 + v809:0, v810:0, v811:0, v812:0, v813:0, v814:0, 3, 4) :|: v805:0 > 1 && v886:0 > -1 && v800:0 > 1 && v809:0 > 0
Filtered unneeded arguments:
   f_611(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_611(x2, x7, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_611(v800:0, v805:0, sum~cons_1~v886:0, v809:0) -> f_611(v800:0, 1 + v886:0, v886:0, 1 + v809:0) :|: v886:0 > -1 && v805:0 > 1 && v809:0 > 0 && v800:0 > 1 && sum~cons_1~v886:0 = 1 + v886:0

----------------------------------------

(16)
Obligation:
Rules:
f_611(v800:0, v805:0, sum~cons_1~v886:0, v809:0) -> f_611(v800:0, 1 + v886:0, v886:0, 1 + v809:0) :|: v886:0 > -1 && v805:0 > 1 && v809:0 > 0 && v800:0 > 1 && sum~cons_1~v886:0 = 1 + v886:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_611(v800:0:0, v805:0:0, sum~cons_1~v886:0:0, v809:0:0) -> f_611(v800:0:0, 1 + v886:0:0, v886:0:0, 1 + v809:0:0) :|: v809:0:0 > 0 && v800:0:0 > 1 && v805:0:0 > 1 && v886:0:0 > -1 && sum~cons_1~v886:0:0 = 1 + v886:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_611(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_611(v800:0:0, v805:0:0, sum~cons_1~v886:0:0, v809:0:0) -> f_611(v800:0:0, 1 + v886:0:0, v886:0:0, 1 + v809:0:0) :|: v809:0:0 > 0 && v800:0:0 > 1 && v805:0:0 > 1 && v886:0:0 > -1 && sum~cons_1~v886:0:0 = 1 + v886:0:0
The following rules are bounded:
f_611(v800:0:0, v805:0:0, sum~cons_1~v886:0:0, v809:0:0) -> f_611(v800:0:0, 1 + v886:0:0, v886:0:0, 1 + v809:0:0) :|: v809:0:0 > 0 && v800:0:0 > 1 && v805:0:0 > 1 && v886:0:0 > -1 && sum~cons_1~v886:0:0 = 1 + v886:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_482(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 4) -> f_484(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) :|: 0 < v366 && 2 <= v364 && 2 <= v359
f_484(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) -> f_488(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) :|: 0 = 0
f_488(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) -> f_492(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) :|: 0 = 0
f_492(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) -> f_496(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) :|: TRUE
f_496(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) -> f_500(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) :|: 0 = 0
f_500(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) -> f_505(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) :|: 0 = 0
f_505(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) -> f_510(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) :|: TRUE
f_510(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) -> f_514(v359, v360, v361, v362, v363, v366, 1, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) :|: 0 = 0
f_514(v359, v360, v361, v362, v363, v366, 1, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) -> f_518(v359, v360, v361, v362, v363, v366, 1, v405, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) :|: 1 + v405 = v366 && 0 <= v405
f_518(v359, v360, v361, v362, v363, v366, 1, v405, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) -> f_522(v359, v360, v361, v362, v363, v366, 1, v405, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) :|: TRUE
f_522(v359, v360, v361, v362, v363, v366, 1, v405, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) -> f_526(v359, v360, v361, v362, v363, v366, 1, v405, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) :|: TRUE
f_526(v359, v360, v361, v362, v363, v366, 1, v405, v367, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) -> f_529(v359, v360, v361, v362, v363, v366, 1, v405, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) :|: 0 = 0
f_529(v359, v360, v361, v362, v363, v366, 1, v405, v368, v369, v370, v371, v372, v373, 0, 3, 2, 4) -> f_532(v359, v360, v361, v362, v363, v366, 1, v405, v368, v408, v369, v370, v371, v372, v373, 0, 3, 2, 4) :|: v408 = 1 + v368 && 2 <= v408
f_532(v359, v360, v361, v362, v363, v366, 1, v405, v368, v408, v369, v370, v371, v372, v373, 0, 3, 2, 4) -> f_535(v359, v360, v361, v362, v363, v366, 1, v405, v368, v408, v369, v370, v371, v372, v373, 0, 3, 2, 4) :|: TRUE
f_535(v359, v360, v361, v362, v363, v366, 1, v405, v368, v408, v369, v370, v371, v372, v373, 0, 3, 2, 4) -> f_538(v359, v360, v361, v362, v363, v366, 1, v405, v368, v408, v369, v370, v371, v372, v373, 0, 3, 2, 4) :|: TRUE
f_538(v359, v360, v361, v362, v363, v366, 1, v405, v368, v408, v369, v370, v371, v372, v373, 0, 3, 2, 4) -> f_480(v359, v360, v361, v362, v363, v366, 1, v405, v368, v408, v369, v370, v371, v372, v373, 0, 3, 4) :|: TRUE
f_480(v359, v360, v361, v362, v363, v364, 1, v366, v367, v368, v369, v370, v371, v372, v373, 0, 3, 4) -> f_482(v359, v360, v361, v362, v363, v366, 1, v364, v367, v368, v369, v370, v371, v372, v373, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_482(v359:0, v360:0, v361:0, v362:0, v363:0, 1 + v405:0, 1, v364:0, v367:0, v368:0, v369:0, v370:0, v371:0, v372:0, v373:0, 0, 3, 4) -> f_482(v359:0, v360:0, v361:0, v362:0, v363:0, v405:0, 1, 1 + v405:0, v368:0, 1 + v368:0, v369:0, v370:0, v371:0, v372:0, v373:0, 0, 3, 4) :|: v364:0 > 1 && v405:0 > -1 && v359:0 > 1 && v368:0 > 0
Filtered unneeded arguments:
   f_482(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_482(x1, x6, x8, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_482(v359:0, sum~cons_1~v405:0, v364:0, v368:0) -> f_482(v359:0, v405:0, 1 + v405:0, 1 + v368:0) :|: v405:0 > -1 && v364:0 > 1 && v368:0 > 0 && v359:0 > 1 && sum~cons_1~v405:0 = 1 + v405:0

----------------------------------------

(23)
Obligation:
Rules:
f_482(v359:0, sum~cons_1~v405:0, v364:0, v368:0) -> f_482(v359:0, v405:0, 1 + v405:0, 1 + v368:0) :|: v405:0 > -1 && v364:0 > 1 && v368:0 > 0 && v359:0 > 1 && sum~cons_1~v405:0 = 1 + v405:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_482(v359:0:0, sum~cons_1~v405:0:0, v364:0:0, v368:0:0) -> f_482(v359:0:0, v405:0:0, 1 + v405:0:0, 1 + v368:0:0) :|: v368:0:0 > 0 && v359:0:0 > 1 && v364:0:0 > 1 && v405:0:0 > -1 && sum~cons_1~v405:0:0 = 1 + v405:0:0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_482(x, x1, x2, x3)] = -1 + x1

The following rules are decreasing:
f_482(v359:0:0, sum~cons_1~v405:0:0, v364:0:0, v368:0:0) -> f_482(v359:0:0, v405:0:0, 1 + v405:0:0, 1 + v368:0:0) :|: v368:0:0 > 0 && v359:0:0 > 1 && v364:0:0 > 1 && v405:0:0 > -1 && sum~cons_1~v405:0:0 = 1 + v405:0:0
The following rules are bounded:
f_482(v359:0:0, sum~cons_1~v405:0:0, v364:0:0, v368:0:0) -> f_482(v359:0:0, v405:0:0, 1 + v405:0:0, 1 + v368:0:0) :|: v368:0:0 > 0 && v359:0:0 > 1 && v364:0:0 > 1 && v405:0:0 > -1 && sum~cons_1~v405:0:0 = 1 + v405:0:0

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
