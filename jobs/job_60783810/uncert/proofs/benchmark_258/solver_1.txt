YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Ex6ez.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 21 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 576 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 23 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Ex6ez.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Ex6ez.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		%9 = call i32 @__VERIFIER_nondet_int()
		store %9, %5
		br %10
	10:
		%11 = load %2
		%12 = icmp sle %11 100
		br %12, %13, %17
	13:
		%14 = load %3
		%15 = load %4
		%16 = icmp sle %14 %15
		br %17
	17:
		%18 = phi [0, %10], [%16, %13]
		br %18, %19, %26
	19:
		%20 = load %2
		store %20, %5
		%21 = load %3
		store %21, %2
		%22 = load %5
		%23 = add i32 %22, 1
		store %23, %3
		%24 = load %4
		%25 = sub i32 %24, 1
		store %25, %4
		br %10
	26:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_233(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v319, v316, v320, v321, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_234(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v319, v316, v320, v321, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: v318 <= 100
f_234(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v319, v316, v320, v321, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_236(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v319, v316, v320, v321, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: 0 = 0
f_236(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v319, v316, v320, v321, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_238(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v319, v316, v320, v321, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: TRUE
f_238(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v319, v316, v320, v321, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_240(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v319, v316, v321, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: 0 = 0
f_240(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v319, v316, v321, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_242(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: 0 = 0
f_242(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_243(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: v320 <= v321
f_243(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_245(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: 0 = 0
f_245(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_247(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: 0 = 0
f_247(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_249(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: TRUE
f_249(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_251(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: 0 = 0
f_251(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_252(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: TRUE
f_252(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_253(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: 0 = 0
f_253(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_254(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: TRUE
f_254(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v316, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_255(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: 0 = 0
f_255(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_256(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v441, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: v441 = 1 + v318 && v441 <= 101
f_256(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v441, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_257(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v441, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: TRUE
f_257(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v441, v319, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_258(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v441, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: 0 = 0
f_258(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v441, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_259(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v441, v443, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: 1 + v443 = v321
f_259(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v441, v443, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_260(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v441, v443, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: TRUE
f_260(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v441, v443, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_261(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v441, v443, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: TRUE
f_261(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v441, v443, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_232(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v320, v321, v441, v443, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: TRUE
f_232(v307, v308, v309, v310, v311, v312, v313, v314, v315, v316, 1, v318, v319, v320, v321, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) -> f_233(v307, v308, v309, v310, v311, v312, v313, v314, v315, v318, 1, v319, v316, v320, v321, v322, v323, v324, v325, v326, 0, 3, 100, 101, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_233(v307:0, v308:0, v309:0, v310:0, v311:0, v312:0, v313:0, v314:0, v315:0, v318:0, 1, v319:0, v316:0, v320:0, 1 + v443:0, v322:0, v323:0, v324:0, v325:0, v326:0, 0, 3, 100, 101, 4) -> f_233(v307:0, v308:0, v309:0, v310:0, v311:0, v312:0, v313:0, v314:0, v315:0, v320:0, 1, 1 + v443:0, v318:0, 1 + v318:0, v443:0, v322:0, v323:0, v324:0, v325:0, v326:0, 0, 3, 100, 101, 4) :|: v318:0 < 101 && v320:0 <= 1 + v443:0
Filtered unneeded arguments:
   f_233(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_233(x10, x14, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_233(v318:0, v320:0, sum~cons_1~v443:0) -> f_233(v320:0, 1 + v318:0, v443:0) :|: v318:0 < 101 && v320:0 <= 1 + v443:0 && sum~cons_1~v443:0 = 1 + v443:0

----------------------------------------

(8)
Obligation:
Rules:
f_233(v318:0, v320:0, sum~cons_1~v443:0) -> f_233(v320:0, 1 + v318:0, v443:0) :|: v318:0 < 101 && v320:0 <= 1 + v443:0 && sum~cons_1~v443:0 = 1 + v443:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_233(v318:0:0, v320:0:0, sum~cons_1~v443:0:0) -> f_233(v320:0:0, 1 + v318:0:0, v443:0:0) :|: v318:0:0 < 101 && v320:0:0 <= 1 + v443:0:0 && sum~cons_1~v443:0:0 = 1 + v443:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_233(x, x1, x2)] = 100 - x - x1 + x2

The following rules are decreasing:
f_233(v318:0:0, v320:0:0, sum~cons_1~v443:0:0) -> f_233(v320:0:0, 1 + v318:0:0, v443:0:0) :|: v318:0:0 < 101 && v320:0:0 <= 1 + v443:0:0 && sum~cons_1~v443:0:0 = 1 + v443:0:0
The following rules are bounded:
f_233(v318:0:0, v320:0:0, sum~cons_1~v443:0:0) -> f_233(v320:0:0, 1 + v318:0:0, v443:0:0) :|: v318:0:0 < 101 && v320:0:0 <= 1 + v443:0:0 && sum~cons_1~v443:0:0 = 1 + v443:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
