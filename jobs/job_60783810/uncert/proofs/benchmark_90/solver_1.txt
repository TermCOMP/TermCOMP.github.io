MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/kZLtl.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/kZLtl.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/kZLtl.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		%9 = load %4
		%10 = icmp slt %9 1
		br %10, %11, %12
	11:
		store 1, %4
		br %12
	12:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%13 = call i32 @__VERIFIER_nondet_int()
		store %13, %5
		%14 = load %5
		%15 = icmp slt %14 1
		br %15, %16, %17
	16:
		store 1, %5
		br %17
	17:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%18 = load %4
		%19 = sext i32 %18 to i64
		%20 = mul i64 %19, 4
		%21 = alloca i8, numElementsLit: %20, align 16
		%22 = bitcast *i8 %21 to *i32
		store %22, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%23 = load %5
		%24 = load %4
		%25 = mul i32 %23, %24
		%26 = sext i32 %25 to i64
		%27 = mul i64 %26, 4
		%28 = alloca i8, numElementsLit: %27, align 16
		%29 = bitcast *i8 %28 to *i32
		store %29, %7
		%30 = load %6
		%31 = icmp ne %30 null
		br %31, %32, %35
	32:
		%33 = load %7
		%34 = icmp ne %33 null
		br %34, %36, %35
	35:
		store 0, %1
		br %73
	36:
		store 0, %2
		br %37
	37:
		%38 = load %2
		%39 = load %4
		%40 = icmp slt %38 %39
		br %40, %41, %50
	41:
		%42 = call i32 @__VERIFIER_nondet_int()
		%43 = load %6
		%44 = load %2
		%45 = sext i32 %44 to i64
		%46 = getelementptr %43, %45
		store %42, %46
		br %47
	47:
		%48 = load %2
		%49 = add i32 %48, 1
		store %49, %2
		br %37
	50:
		store 0, %3
		br %51
	51:
		%52 = load %3
		%53 = load %4
		%54 = load %5
		%55 = mul i32 %53, %54
		%56 = icmp slt %52 %55
		br %56, %57, %72
	57:
		%58 = load %6
		%59 = load %2
		%60 = load %4
		%61 = srem i32 %59, %60
		%62 = sext i32 %61 to i64
		%63 = getelementptr %58, %62
		%64 = load %63
		%65 = load %7
		%66 = load %3
		%67 = sext i32 %66 to i64
		%68 = getelementptr %65, %67
		store %64, %68
		br %69
	69:
		%70 = load %3
		%71 = add i32 %70, 1
		store %71, %3
		br %51
	72:
		store 0, %1
		br %73
	73:
		%74 = load %1
		ret %74


Analyze Termination of all function calls matching the pattern:
main()Aborted 1756892203Exec. 4, LLVMToSEGraph with some error. Reason: java.lang.AssertionError: Relation with only one reference has non-constant expressions on both sides..
            aprove.InputModules.Programs.llvm.internalStructures.expressions.relations.LLVMHeuristicRelation.checkValueRelation(LLVMHeuristicRelation.java:404)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicState.adjustValues(LLVMHeuristicState.java:3790)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicState.adjustValues(LLVMHeuristicState.java:508)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicState.postProcess(LLVMHeuristicState.java:3220)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicState.postProcessAfterRefinement(LLVMHeuristicState.java:2662)
            aprove.InputModules.Programs.llvm.states.LLVMAbstractState.evaluate(LLVMAbstractState.java:542)
            aprove.InputModules.Programs.llvm.segraph.graphConstructionSteps.LLVMStandardStep.perform(LLVMStandardStep.java:98)
            aprove.InputModules.Programs.llvm.segraph.LLVMSEGraph.executeStepAndPutSucessorStepsInQueue(LLVMSEGraph.java:1087)
            aprove.InputModules.Programs.llvm.segraph.LLVMSEGraph.buildFullGraph(LLVMSEGraph.java:243)
