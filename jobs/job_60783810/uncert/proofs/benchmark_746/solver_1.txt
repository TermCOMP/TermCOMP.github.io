YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/s6HHY.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 61 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 78 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 11 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 11 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/s6HHY.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/s6HHY.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %2
		br %4
	4:
		%5 = load %2
		%6 = icmp sgt %5 0
		br %6, %7, %10
	7:
		%8 = load %2
		%9 = sdiv i32 %8, 2
		store %9, %2
		br %4
	10:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 9 rulesP rules:
f_80(v11, v12, v13, v16, 1, v14, v17, v18, 0, 3, 2, 4) -> f_81(v11, v12, v13, v16, 1, v14, v17, v18, 0, 3, 2, 4) :|: 0 < v16
f_81(v11, v12, v13, v16, 1, v14, v17, v18, 0, 3, 2, 4) -> f_83(v11, v12, v13, v16, 1, v14, v17, v18, 0, 3, 2, 4) :|: 0 = 0
f_83(v11, v12, v13, v16, 1, v14, v17, v18, 0, 3, 2, 4) -> f_85(v11, v12, v13, v16, 1, v14, v17, v18, 0, 3, 2, 4) :|: TRUE
f_85(v11, v12, v13, v16, 1, v14, v17, v18, 0, 3, 2, 4) -> f_87(v11, v12, v13, v16, 1, v17, v18, 0, 3, 4) :|: 0 = 0
f_87(v11, v12, v13, v16, 1, v17, v18, 0, 3, 4) -> f_88(v11, v12, v13, v16, 1, v20, v17, v18, 0, 3, 2, 4) :|: v20 = v16 / 2
f_88(v11, v12, v13, v16, 1, v20, v17, v18, 0, 3, 2, 4) -> f_89(v11, v12, v13, v16, 1, v20, v17, v18, 0, 3, 2, 4) :|: TRUE
f_89(v11, v12, v13, v16, 1, v20, v17, v18, 0, 3, 2, 4) -> f_90(v11, v12, v13, v16, 1, v20, v17, v18, 0, 3, 2, 4) :|: TRUE
f_90(v11, v12, v13, v16, 1, v20, v17, v18, 0, 3, 2, 4) -> f_79(v11, v12, v13, v16, 1, v20, v17, v18, 0, 3, 2, 4) :|: TRUE
f_79(v11, v12, v13, v14, 1, v16, v17, v18, 0, 3, 2, 4) -> f_80(v11, v12, v13, v16, 1, v14, v17, v18, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_80(v11:0, v12:0, v13:0, v16:0, 1, v14:0, v17:0, v18:0, 0, 3, 2, 4) -> f_80(v11:0, v12:0, v13:0, v20:0, 1, v16:0, v17:0, v18:0, 0, 3, 2, 4) :|: v20:0 = v16:0 / 2 && v16:0 > 0
Filtered unneeded arguments:
   f_80(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) -> f_80(x4)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_80(v16:0) -> f_80'(v16:0) :|: v16:0 > 0
f_80'(v16:0) -> f_80(div) :|: v16:0 > 0 && v16:0 - 2 * div < 2 && v16:0 - 2 * div >= 0

----------------------------------------

(8)
Obligation:
Rules:
f_80(v16:0) -> f_80'(v16:0) :|: v16:0 > 0
f_80'(x) -> f_80(x1) :|: x > 0 && x - 2 * x1 < 2 && x - 2 * x1 >= 0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_80(v16:0:0) -> f_80(x1:0) :|: v16:0:0 - 2 * x1:0 >= 0 && v16:0:0 - 2 * x1:0 < 2 && v16:0:0 > 0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_80 ] = 2*f_80_1

The following rules are decreasing:
f_80(v16:0:0) -> f_80(x1:0) :|: v16:0:0 - 2 * x1:0 >= 0 && v16:0:0 - 2 * x1:0 < 2 && v16:0:0 > 0

The following rules are bounded:
f_80(v16:0:0) -> f_80(x1:0) :|: v16:0:0 - 2 * x1:0 >= 0 && v16:0:0 - 2 * x1:0 < 2 && v16:0:0 > 0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
