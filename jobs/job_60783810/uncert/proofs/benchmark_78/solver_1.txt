YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/AmFBj.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 55 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2437 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [SOUND, 254 ms]
(6) IntTRS
(7) IRSToKoat [EQUIVALENT, 0 ms]
(8) Koat Problem
(9) KoAT2 [EQUIVALENT, 32 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/AmFBj.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/AmFBj.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "quot" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		%8 = alloca *i32, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%11 = alloca i8, numElementsLit: 4, align 16
		%12 = bitcast *i8 %11 to *i32
		store %12, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %8)
		%13 = alloca i8, numElementsLit: 4, align 16
		%14 = bitcast *i8 %13 to *i32
		store %14, %8
		%15 = load %4
		%16 = load %6
		store %15, %16
		%17 = load %5
		%18 = load %7
		store %17, %18
		%19 = load %8
		store 0, %19
		%20 = load %6
		%21 = load %20
		%22 = icmp eq %21 0
		br %22, %23, %24
	23:
		store 0, %3
		br %50
	24:
		br %25
	25:
		%26 = load %6
		%27 = load %26
		%28 = icmp sgt %27 0
		br %28, %29, %33
	29:
		%30 = load %7
		%31 = load %30
		%32 = icmp sgt %31 0
		br %33
	33:
		%34 = phi [0, %25], [%32, %29]
		br %34, %35, %47
	35:
		%36 = load %8
		%37 = load %36
		%38 = add i32 %37, 1
		store %38, %36
		%39 = load %6
		%40 = load %39
		%41 = sub i32 %40, 1
		%42 = load %7
		%43 = load %42
		%44 = sub i32 %43, 1
		%45 = sub i32 %41, %44
		%46 = load %6
		store %45, %46
		br %25
	47:
		%48 = load %8
		%49 = load %48
		store %49, %3
		br %50
	50:
		%51 = load %3
		ret %51

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 67
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @quot(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 134 rulesP rules:
f_224 -> f_225(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_225(v1, v2, 3, 1, 4) -> f_226(v1, v2, 0, 3, 1, 4) :|: TRUE
f_226(v1, v2, 0, 3, 1, 4) -> f_227(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_227(v1, v3, v2, 0, 3, 1, 4) -> f_228(v1, v3, v4, v2, 0, 3, 1, 4) :|: TRUE
f_228(v1, v3, v4, v2, 0, 3, 1, 4) -> f_229(v3, v4, v1, v2, 0, 3, 1, 4) :|: 0 = 0
f_229(v3, v4, v1, v2, 0, 3, 1, 4) -> f_230(v3, v4, v5, v1, v2, v6, 0, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_230(v3, v4, v5, v1, v2, v6, 0, 3, 1, 4) -> f_231(v3, v4, v5, v7, v1, v2, v6, v8, 0, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_231(v3, v4, v5, v7, v1, v2, v6, v8, 0, 3, 1, 4) -> f_232(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: 1 <= v9 && v10 = 3 + v9 && 4 <= v10
f_232(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_233(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 7, 1, 4, 8) :|: 1 <= v11 && v12 = 7 + v11 && 8 <= v12
f_233(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 7, 1, 4, 8) -> f_234(v3, v4, v5, v7, v9, v11, v13, v1, v2, v6, v8, v10, v12, v14, 0, 3, 7, 1, 4, 8) :|: 1 <= v13 && v14 = 7 + v13 && 8 <= v14
f_234(v3, v4, v5, v7, v9, v11, v13, v1, v2, v6, v8, v10, v12, v14, 0, 3, 7, 1, 4, 8) -> f_235(v3, v4, v5, v7, v9, v11, v13, v15, v1, v2, v6, v8, v10, v12, v14, v16, 0, 3, 7, 1, 4, 8) :|: 1 <= v15 && v16 = 7 + v15 && 8 <= v16
f_235(v3, v4, v5, v7, v9, v11, v13, v15, v1, v2, v6, v8, v10, v12, v14, v16, 0, 3, 7, 1, 4, 8) -> f_236(v3, v4, v5, v7, v9, v11, v13, v15, v1, v2, v6, v8, v10, v12, v14, v16, 0, 3, 7, 1, 4, 8) :|: TRUE
f_236(v3, v4, v5, v7, v9, v11, v13, v15, v1, v2, v6, v8, v10, v12, v14, v16, 0, 3, 7, 1, 4, 8) -> f_237(v3, v4, v5, v7, v9, v11, v13, v15, v1, v2, v6, v8, v10, v12, v14, v16, 0, 3, 7, 1, 4, 8) :|: TRUE
f_237(v3, v4, v5, v7, v9, v11, v13, v15, v1, v2, v6, v8, v10, v12, v14, v16, 0, 3, 7, 1, 4, 8) -> f_238(v3, v4, v5, v7, v9, v11, v13, v15, v1, v2, v6, v8, v10, v12, v14, v16, 0, 3, 7, 1, 4, 8) :|: TRUE
f_238(v3, v4, v5, v7, v9, v11, v13, v15, v1, v2, v6, v8, v10, v12, v14, v16, 0, 3, 7, 1, 4, 8) -> f_239(v3, v4, v5, v7, v9, v11, v13, v15, v1, v2, v6, v8, v10, v12, v14, v16, 0, 3, 7, 1, 4, 8) :|: TRUE
f_239(v3, v4, v5, v7, v9, v11, v13, v15, v1, v2, v6, v8, v10, v12, v14, v16, 0, 3, 7, 1, 4, 8) -> f_240(v3, v4, v5, v7, v9, v11, v13, v15, v1, v2, v6, v8, v10, v12, v14, v16, 0, 3, 7, 1, 4, 8) :|: TRUE
f_240(v3, v4, v5, v7, v9, v11, v13, v15, v1, v2, v6, v8, v10, v12, v14, v16, 0, 3, 7, 1, 4, 8) -> f_241(v3, v4, v5, v7, v9, v11, v13, v15, v19, v1, v2, v6, v8, v10, v12, v14, v16, v20, 0, 3, 7, 1, 4, 8) :|: 1 <= v19 && v20 = 3 + v19 && 4 <= v20
f_241(v3, v4, v5, v7, v9, v11, v13, v15, v19, v1, v2, v6, v8, v10, v12, v14, v16, v20, 0, 3, 7, 1, 4, 8) -> f_242(v3, v4, v5, v7, v9, v11, v13, v15, v19, v1, v2, v6, v8, v10, v12, v14, v16, v20, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_242(v3, v4, v5, v7, v9, v11, v13, v15, v19, v1, v2, v6, v8, v10, v12, v14, v16, v20, 0, 3, 7, 1, 4, 8) -> f_243(v3, v4, v5, v7, v9, v11, v13, v15, v19, v1, v2, v6, v8, v10, v12, v14, v16, v20, 0, 3, 7, 1, 4, 8) :|: TRUE
f_243(v3, v4, v5, v7, v9, v11, v13, v15, v19, v1, v2, v6, v8, v10, v12, v14, v16, v20, 0, 3, 7, 1, 4, 8) -> f_244(v3, v4, v5, v7, v9, v11, v13, v15, v19, v1, v2, v6, v8, v10, v12, v14, v16, v20, 0, 3, 7, 1, 4, 8) :|: TRUE
f_244(v3, v4, v5, v7, v9, v11, v13, v15, v19, v1, v2, v6, v8, v10, v12, v14, v16, v20, 0, 3, 7, 1, 4, 8) -> f_245(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, 0, 3, 7, 1, 4, 8) :|: 1 <= v22 && v23 = 3 + v22 && 4 <= v23
f_245(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, 0, 3, 7, 1, 4, 8) -> f_246(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_246(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, 0, 3, 7, 1, 4, 8) -> f_247(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, 0, 3, 7, 1, 4, 8) :|: TRUE
f_247(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, 0, 3, 7, 1, 4, 8) -> f_248(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, 0, 3, 7, 1, 4, 8) :|: TRUE
f_248(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, 0, 3, 7, 1, 4, 8) -> f_249(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) :|: 1 <= v25 && v26 = 3 + v25 && 4 <= v26
f_249(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) -> f_250(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_250(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) -> f_251(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) :|: TRUE
f_251(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) -> f_252(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_252(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) -> f_253(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_253(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) -> f_254(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) :|: TRUE
f_254(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) -> f_255(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_255(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) -> f_256(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_256(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) -> f_257(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) :|: TRUE
f_257(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) -> f_258(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_258(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) -> f_259(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) :|: TRUE
f_259(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) -> f_260(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_260(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) -> f_261(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_261(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) -> f_262(0, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: v3 = 0
f_261(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) -> f_263(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) :|: v3 != 0
f_262(0, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_264(0, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_263(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 0, 3, 7, 1, 4, 8) -> f_265(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: 0 = 0
f_264(0, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_266(0, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: TRUE
f_265(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_267(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: TRUE
f_266(0, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_268(0, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: TRUE
f_267(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_269(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: TRUE
f_268(0, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_270(0, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: TRUE
f_269(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_271(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: 0 = 0
f_270(0, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_272(0, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_271(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_273(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: 0 = 0
f_272(0, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_274(v1, 0, v4, v2, 3, 1, 4) :|: 0 = 0
f_273(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_275(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: 0 < v3
f_273(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_276(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: v3 <= 0
f_275(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_277(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_276(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_278(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: 0 = 0
f_277(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_279(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: TRUE
f_278(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_280(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: 0 = 0
f_279(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_281(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_280(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_282(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: TRUE
f_281(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_283(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_282(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_284(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: 0 = 0
f_283(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_285(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 < v4
f_283(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_286(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: v4 <= 0
f_284(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_287(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: 0 = 0
f_285(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_288(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_286(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_289(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_287(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_290(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: TRUE
f_288(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_291(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_289(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_292(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_290(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_293(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: TRUE
f_291(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_294(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: TRUE
f_292(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_295(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: TRUE
f_293(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_296(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) :|: 0 = 0
f_294(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_297(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_295(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_298(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_296(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 1, 4, 8) -> f_299(v1, v3, v4, 0, v2, 3, 1, 4) :|: 0 = 0
f_297(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_300(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_298(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_301(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_300(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_302(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_301(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_303(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: TRUE
f_302(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_304(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: TRUE
f_303(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_305(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: TRUE
f_304(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_306(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_305(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_307(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_306(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_308(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_307(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_309(v1, v3, v4, 0, v2, 3, 1, 4) :|: 0 = 0
f_308(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_310(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 1 + v31 = v3 && 0 <= v31
f_310(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_311(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_311(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_312(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_312(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_313(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v32, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 1 + v32 = v4 && 0 <= v32
f_313(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v32, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_314(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v32, v33, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: v33 + v32 = v31
f_314(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v32, v33, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_315(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v32, v33, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: 0 = 0
f_315(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v32, v33, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_316(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v32, v33, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: TRUE
f_316(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v32, v33, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_317(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v32, v33, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) :|: TRUE
f_317(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, 1, v31, v32, v33, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 4, 8) -> f_352(v3, v4, v5, v7, v9, v11, v13, v15, v19, v22, v25, 0, v3, 1, 0, 1, v31, v32, v33, v1, v2, v6, v8, v10, v12, v14, v16, v20, v23, v26, 3, 7, 2, 4, 8) :|: TRUE
f_352(v107, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, 0, v119, 1, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, 3, 7, 2, 4, 8) -> f_387(v107, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, 0, v119, 1, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, 3, 7, 2, 4, 8) :|: TRUE
f_387(v184, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, 0, v196, 1, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 2, 4, 8) -> f_422(v184, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, 0, v196, 1, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 8) :|: TRUE
f_422(v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, 0, v273, 1, v275, v276, v277, v278, v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, 3, 7, 4, 8) -> f_457(v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, 0, v273, 1, v275, v276, v277, v278, v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, 3, 7, 4, 8) :|: TRUE
f_457(v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, 0, v350, 1, v352, v353, v354, v355, v356, v357, v358, v359, v360, v361, v362, v363, v364, v365, v366, v367, 3, 7, 4, 8) -> f_492(v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, 0, v350, 1, v352, v353, v354, v355, v356, v357, v358, v359, v360, v361, v362, v363, v364, v365, v366, v367, 3, 7, 4, 8) :|: TRUE
f_492(v415, v416, v417, v418, v419, v420, v421, v422, v423, v424, v425, 0, v427, 1, v429, v430, v431, v432, v433, v434, v435, v436, v437, v438, v439, v440, v441, v442, v443, v444, 3, 7, 4, 8) -> f_527(v415, v416, v417, v418, v419, v420, v421, v422, v423, v424, v425, 0, v427, 1, v429, v430, v431, v432, v433, v434, v435, v436, v437, v438, v439, v440, v441, v442, v443, v444, 3, 7, 4, 8) :|: TRUE
f_527(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v504, 1, v506, v507, v508, v509, v510, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) -> f_528(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v504, 1, v506, v507, v508, v509, v510, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) :|: 0 = 0
f_528(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v504, 1, v506, v507, v508, v509, v510, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) -> f_529(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) :|: 0 = 0
f_529(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) -> f_530(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) :|: 0 < v510 && 1 <= v508 && 2 <= v504
f_529(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) -> f_531(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) :|: v510 <= 0
f_530(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) -> f_532(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) :|: 0 = 0
f_531(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) -> f_533(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) :|: 0 = 0
f_532(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) -> f_534(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) :|: TRUE
f_533(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) -> f_535(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) :|: 0 = 0
f_534(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) -> f_536(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) :|: 0 = 0
f_535(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) -> f_537(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) :|: TRUE
f_536(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) -> f_538(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) :|: 0 = 0
f_537(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) -> f_539(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) :|: 0 = 0
f_538(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) -> f_540(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) :|: 0 = 0
f_539(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) -> f_541(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) :|: 0 = 0
f_540(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) -> f_542(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) :|: 0 = 0
f_541(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) -> f_543(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) :|: TRUE
f_542(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) -> f_544(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) :|: TRUE
f_543(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) -> f_545(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) :|: TRUE
f_544(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) -> f_546(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) :|: 0 = 0
f_545(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) -> f_547(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) :|: 0 = 0
f_546(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) -> f_548(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) :|: 0 = 0
f_547(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v506, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) -> f_549(v511, v492, v493, v507, v512, 0, 3, 1, 4) :|: 0 = 0
f_548(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) -> f_550(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) :|: v564 = 1 + v507 && 2 <= v564
f_550(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) -> f_551(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) :|: TRUE
f_551(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) -> f_552(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) :|: 0 = 0
f_552(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v504, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 2, 4, 8) -> f_553(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) :|: 0 = 0
f_553(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v508, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) -> f_554(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) :|: 1 + v566 = v510 && 0 <= v566
f_554(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) -> f_555(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) :|: 0 = 0
f_555(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) -> f_556(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) :|: 0 = 0
f_556(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) -> f_557(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) :|: 1 + v509 = v493
f_557(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) -> f_558(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v567, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) :|: v567 + v509 = v566
f_558(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v567, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) -> f_559(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v567, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) :|: 0 = 0
f_559(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v567, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) -> f_560(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v567, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) :|: TRUE
f_560(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v567, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) -> f_561(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v567, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) :|: TRUE
f_561(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v567, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8, 2) -> f_527(v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, 0, v510, 1, v507, v564, v566, v509, v567, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, 3, 7, 4, 8) :|: TRUE
Combined rules. Obtained 9 rulesP rules:
f_224 -> f_309(v1:0, v3:0, v4:0, 0, v2:0, 3, 1, 4) :|: FALSE
f_224 -> f_309(v1:0, v3:0, v4:0, 0, 3 + v1:0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0 && v13:0 > 0 && v15:0 > 0 && v19:0 > 0 && v22:0 > 0 && v25:0 > 0 && v3:0 > 0 && v4:0 < 1
f_529(v492:0, 1 + v509:0, v494:0, v495:0, v496:0, v497:0, v498:0, v499:0, v500:0, v501:0, v502:0, 0, 1 + (v567:0 + v509:0), 1, v506:0, v507:0, v504:0, v508:0, v509:0, v511:0, v512:0, v513:0, v514:0, v515:0, v516:0, v517:0, v518:0, v519:0, v520:0, v521:0, 3, 7, 4, 8) -> f_529(v492:0, 1 + v509:0, v494:0, v495:0, v496:0, v497:0, v498:0, v499:0, v500:0, v501:0, v502:0, 0, v567:0, 1, v507:0, 1 + v507:0, 1 + (v567:0 + v509:0), v567:0 + v509:0, v509:0, v511:0, v512:0, v513:0, v514:0, v515:0, v516:0, v517:0, v518:0, v519:0, v520:0, v521:0, 3, 7, 4, 8) :|: v508:0 > 0 && v567:0 + v509:0 > -1 && v504:0 > 1 && v507:0 > 0
f_224 -> f_299(v1:0, v3:0, v4:0, 0, 3 + v1:0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0 && v13:0 > 0 && v15:0 > 0 && v19:0 > 0 && v22:0 > 0 && v25:0 > 0 && v3:0 < 1 && v3:0 < 0
f_224 -> f_299(v1:0, v3:0, v4:0, 0, 3 + v1:0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0 && v13:0 > 0 && v15:0 > 0 && v19:0 > 0 && v22:0 > 0 && v25:0 > 0 && v3:0 < 1 && v3:0 > 0
f_529(v492:0, v493:0, v494:0, v495:0, v496:0, v497:0, v498:0, v499:0, v500:0, v501:0, v502:0, 0, v510:0, 1, v506:0, v507:0, v504:0, v508:0, v509:0, v511:0, v512:0, v513:0, v514:0, v515:0, v516:0, v517:0, v518:0, v519:0, v520:0, v521:0, 3, 7, 4, 8) -> f_549(v511:0, v492:0, v493:0, v507:0, v512:0, 0, 3, 1, 4) :|: v510:0 < 1
f_224 -> f_274(v1:0, 0, v4:0, 3 + v1:0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0 && v13:0 > 0 && v15:0 > 0 && v19:0 > 0 && v22:0 > 0 && v25:0 > 0
f_224 -> f_529(v3:0, v4:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, v19:0, v22:0, v25:0, 0, v33:0, 1, 0, 1, v3:0, v31:0, v32:0, v1:0, v2:0, v6:0, v8:0, v10:0, v12:0, v14:0, v16:0, v20:0, v23:0, v26:0, 3, 7, 4, 8) :|: FALSE
f_224 -> f_529(1 + (v33:0 + v32:0), 1 + v32:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, v19:0, v22:0, v25:0, 0, v33:0, 1, 0, 1, 1 + (v33:0 + v32:0), v33:0 + v32:0, v32:0, v1:0, 3 + v1:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 7 + v11:0, 7 + v13:0, 7 + v15:0, 3 + v19:0, 3 + v22:0, 3 + v25:0, 3, 7, 4, 8) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0 && v13:0 > 0 && v15:0 > 0 && v19:0 > 0 && v22:0 > 0 && v25:0 > 0 && v33:0 + v32:0 > -1 && v32:0 > -1
Filtered unneeded arguments:
   f_529(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34) -> f_529(x2, x13, x16, x17, x18, x19)
Removed division, modulo operations, cleaned up constraints. Obtained 9 rules.P rules:
f_224 -> f_309(v1:0, v3:0, v4:0, 0, v2:0, 3, 1, 4) :|: FALSE
f_224 -> f_309(v1:0, v3:0, v4:0, 0, 3 + v1:0, 3, 1, 4) :|: v3:0 > 0 && v4:0 < 1 && v1:0 > 0
f_529(sum~cons_1~v509:0, sum~cons_1~sum~v567:0~v509:0, v507:0, v504:0, v508:0, v509:0) -> f_529(1 + v509:0, v567:0, 1 + v507:0, 1 + (v567:0 + v509:0), v567:0 + v509:0, v509:0) :|: v567:0 + v509:0 > -1 && v508:0 > 0 && v507:0 > 0 && v504:0 > 1 && sum~cons_1~v509:0 = 1 + v509:0 && sum~cons_1~sum~v567:0~v509:0 = 1 + (v567:0 + v509:0)
f_224 -> f_299(v1:0, v3:0, v4:0, 0, 3 + v1:0, 3, 1, 4) :|: v3:0 < 1 && v3:0 < 0 && v1:0 > 0
f_224 -> f_299(v1:0, v3:0, v4:0, 0, 3 + v1:0, 3, 1, 4) :|: v3:0 < 1 && v3:0 > 0 && v1:0 > 0
f_529(v493:0, v510:0, v507:0, v504:0, v508:0, v509:0) -> f_549(v511:0, v492:0, v493:0, v507:0, v512:0, 0, 3, 1, 4) :|: v510:0 < 1
f_224 -> f_274(v1:0, 0, v4:0, 3 + v1:0, 3, 1, 4) :|: v1:0 > 0
f_224 -> f_529(v4:0, v33:0, 1, v3:0, v31:0, v32:0) :|: FALSE
f_224 -> f_529(1 + v32:0, v33:0, 1, 1 + (v33:0 + v32:0), v33:0 + v32:0, v32:0) :|: v33:0 + v32:0 > -1 && v32:0 > -1

----------------------------------------

(6)
Obligation:
Rules:
f_224 -> f_309(v1:0, v3:0, v4:0, 0, v2:0, 3, 1, 4) :|: FALSE
f_224 -> f_309(x, x1, x2, 0, 3 + x, 3, 1, 4) :|: x1 > 0 && x2 < 1 && x > 0
f_529(sum~cons_1~v509:0, sum~cons_1~sum~v567:0~v509:0, v507:0, v504:0, v508:0, v509:0) -> f_529(1 + v509:0, v567:0, 1 + v507:0, 1 + (v567:0 + v509:0), v567:0 + v509:0, v509:0) :|: v567:0 + v509:0 > -1 && v508:0 > 0 && v507:0 > 0 && v504:0 > 1 && sum~cons_1~v509:0 = 1 + v509:0 && sum~cons_1~sum~v567:0~v509:0 = 1 + (v567:0 + v509:0)
f_224 -> f_299(x3, x4, x5, 0, 3 + x3, 3, 1, 4) :|: x4 < 1 && x4 < 0 && x3 > 0
f_224 -> f_299(x6, x7, x8, 0, 3 + x6, 3, 1, 4) :|: x7 < 1 && x7 > 0 && x6 > 0
f_529(x9, x10, x11, x12, x13, x14) -> f_549(x15, x16, x9, x11, x17, 0, 3, 1, 4) :|: x10 < 1
f_224 -> f_274(x18, 0, x19, 3 + x18, 3, 1, 4) :|: x18 > 0
f_224 -> f_529(x20, x21, 1, x22, x23, x24) :|: FALSE
f_224 -> f_529(1 + v32:0, v33:0, 1, 1 + (v33:0 + v32:0), v33:0 + v32:0, v32:0) :|: v33:0 + v32:0 > -1 && v32:0 > -1
Start term: f_224

----------------------------------------

(7) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(8)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_224))
(VAR k36 k37 k32 k33 k34 k35 k30 k31 x46 x47 x48 x49 x42 x43 x44 x45 k29 x40 x41 k25 k26 k27 k28 k21 k22 k23 k24 k20 x39 x35 x36 x37 x38 x31 x32 x33 x34 k18 k19 x30 x70 x68 x69 x64 x65 x66 x67 x60 x61 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x58 x59 x53 x54 x55 x56 x50 x51 x52 x x80 x81 x79 x75 x76 x'' x77 x78 x71 x72 x73 x74 k14 k15 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x7 x27 x20 x21 x22 x23 x1 x' x17 x18 x19 x13 x14 x15 x16 x10 x11 x12)
(RULES
  f_224(x, x', x'', x1, x2, x3, x4, x5, x6) -> f_299(k10, k11, k7, 0, 3 + k10, 3, 1, 4, x7) :|: k11 < 1 && k11 > 0 && k10 > 0
  f_224(x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_309(k16, k17, k5, 0, 3 + k16, 3, 1, 4, x17) :|: k17 > 0 && k5 < 1 && k16 > 0
  f_224(x35, x36, x37, x38, x39, x40, x41, x42, x43) -> f_309(k22, k2, k4, 0, k0, 3, 1, 4, x44) :|: 0 = 1
  f_224(x24, x25, x26, x27, x28, x29, x30, x31, x32) -> f_274(k25, 0, k26, 3 + k25, 3, 1, 4, x33, x34) :|: k25 > 0
  f_529(k9, k31, k32, k34, k27, k28, x57, x58, x59) -> f_549(k29, k30, k9, k32, k24, 0, 3, 1, 4) :|: k31 < 1
  f_529(k19, k18, k36, k23, k35, k33, x18, x19, x20) -> f_529(1 + k33, k37, 1 + k36, 1 + (k37 + k33), k37 + k33, k33, x21, x22, x23) :|: k37 + k33 > -1 && k35 > 0 && k36 > 0 && k23 > 1 && k19 = 1 + k33 && k18 = 1 + (k37 + k33)
  f_224(x60, x61, x62, x63, x64, x65, x66, x67, x68) -> f_299(k6, k1, k3, 0, 3 + k6, 3, 1, 4, x69) :|: k1 < 1 && k1 < 0 && k6 > 0
  f_224(x45, x46, x47, x48, x49, x50, x51, x52, x53) -> f_529(k12, k13, 1, k14, k15, k8, x54, x55, x56) :|: 0 = 1
  f_224(x70, x71, x72, x73, x74, x75, x76, x77, x78) -> f_529(1 + k20, k21, 1, 1 + (k21 + k20), k21 + k20, k20, x79, x80, x81) :|: k21 + k20 > -1 && k20 > -1
)

----------------------------------------

(9) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_8937110676660462780.koat 

KoAT2's output was:

YES

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
