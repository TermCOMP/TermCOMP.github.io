NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/QEjdD.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 4035 ms]
(4) LLVM Symbolic Execution Graph
(5) LLVMNonterminationProof [COMPLETE, 508 ms]
(6) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/QEjdD.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/QEjdD.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: ldv_mutex initVal: 1 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: open_called initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__blast_assert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 14
	0:
		br %1
	1:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable

*BasicFunctionTypename: "mutex_lock" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 21
	0:
		%1 = load @ldv_mutex
		%2 = icmp eq %1 1
		br %2, %3, %4
	3:
		br %5
	4:
		Unnamed Call-Instruction = call BasicVoidType @__blast_assert()
		br %5
	5:
		store 2, @ldv_mutex
		ret void

*BasicFunctionTypename: "mutex_unlock" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 28
	0:
		%1 = load @ldv_mutex
		%2 = icmp eq %1 2
		br %2, %3, %4
	3:
		br %5
	4:
		Unnamed Call-Instruction = call BasicVoidType @__blast_assert()
		br %5
	5:
		store 1, @ldv_mutex
		ret void

*BasicFunctionTypename: "check_final_state" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 35
	0:
		%1 = load @ldv_mutex
		%2 = icmp eq %1 1
		br %2, %3, %4
	3:
		br %5
	4:
		Unnamed Call-Instruction = call BasicVoidType @__blast_assert()
		br %5
	5:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 41
	0:
		%1 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		store 0, %1
		%2 = call i32 @my_init()
		br %3
	3:
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = icmp ne %4 0
		br %5, %6, %40
	6:
		%7 = call i32 @__VERIFIER_nondet_int()
		switch %7, %38 [0, %8 1, %16 2, %24 3, %32]
	8:
		%9 = load %1
		%10 = icmp eq %9 0
		br %10, %11, %15
	11:
		%12 = call i32 @misc_open()
		%13 = load %1
		%14 = add i32 %13, 1
		store %14, %1
		br %15
	15:
		br %39
	16:
		%17 = load %1
		%18 = icmp eq %17 1
		br %18, %19, %23
	19:
		%20 = call i32 @misc_read()
		%21 = load %1
		%22 = add i32 %21, 1
		store %22, %1
		br %23
	23:
		br %39
	24:
		%25 = load %1
		%26 = icmp eq %25 2
		br %26, %27, %31
	27:
		%28 = call i32 @misc_llseek()
		%29 = load %1
		%30 = add i32 %29, 1
		store %30, %1
		br %31
	31:
		br %39
	32:
		%33 = load %1
		%34 = icmp eq %33 3
		br %34, %35, %37
	35:
		%36 = call i32 @misc_release()
		store 0, %1
		br %37
	37:
		br %39
	38:
		br %39
	39:
		br %3
	40:
		Unnamed Call-Instruction = call BasicVoidType @check_final_state()
		ret void

*BasicFunctionTypename: "my_init" linkageType: INTERNAL returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 96
	0:
		store 0, @open_called
		ret 0

*BasicFunctionTypename: "misc_open" linkageType: INTERNAL returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 101
	0:
		%1 = alloca i32, align 4
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = icmp ne %2 0
		br %3, %4, %5
	4:
		store 1, %1
		br %6
	5:
		store 1, @open_called
		store 0, %1
		br %6
	6:
		%7 = load %1
		ret %7

*BasicFunctionTypename: "misc_read" linkageType: INTERNAL returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 111
	0:
		ret 0

*BasicFunctionTypename: "misc_llseek" linkageType: INTERNAL returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 113
	0:
		ret 0

*BasicFunctionTypename: "misc_release" linkageType: INTERNAL returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 115
	0:
		%1 = load @open_called
		%2 = icmp ne %1 0
		br %2, %3, %4
	3:
		Unnamed Call-Instruction = call BasicVoidType @mutex_lock()
		Unnamed Call-Instruction = call BasicVoidType @mutex_unlock()
		store 0, @open_called
		br %5
	4:
		Unnamed Call-Instruction = call BasicVoidType @mutex_lock()
		Unnamed Call-Instruction = call BasicVoidType @mutex_lock()
		br %5
	5:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) LLVMNonterminationProof (COMPLETE)
Proved nontermination with the following witness:

State #318 with references set to {v1=16, v5=7, v2=19, v6=10}.
Nondeterministic instruction %4 = call i32 @__VERIFIER_nondet_int() in node #374 yields value (-8).
Nondeterministic instruction %7 = call i32 @__VERIFIER_nondet_int() in node #404 yields value (-8).
Nondeterministic instruction %4 = call i32 @__VERIFIER_nondet_int() in node #564 yields value (-8).
Nondeterministic instruction %1 = alloca i32, align 4 in node #318 yields value 1.
Nondeterministic instruction %4 = call i32 @__VERIFIER_nondet_int() in node #325 yields value (-8).
Nondeterministic instruction %7 = call i32 @__VERIFIER_nondet_int() in node #331 yields value (-8).

----------------------------------------

(6)
NO
/hpcwork/ff862203/termcomp25/benchmarks/QEjdD.c:73:1: warning: return type of 'main' is not 'int' [-Wmain-return-type]
void main(void) {
^
/hpcwork/ff862203/termcomp25/benchmarks/QEjdD.c:73:1: note: change return type to 'int'
void main(void) {
^~~~
int
1 warning generated.

Graph finished, checking  consistency
