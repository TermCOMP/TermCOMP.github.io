YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zcSa1.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 59 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 565 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 34 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 2 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/zcSa1.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/zcSa1.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		%4 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%5 = alloca i8, numElementsLit: 4, align 16
		%6 = bitcast *i8 %5 to *i32
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%7 = alloca i8, numElementsLit: 4, align 16
		%8 = bitcast *i8 %7 to *i32
		store %8, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %4)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %4
		%11 = call i32 @__VERIFIER_nondet_int()
		%12 = load %2
		store %11, %12
		%13 = call i32 @__VERIFIER_nondet_int()
		%14 = load %3
		store %13, %14
		%15 = call i32 @__VERIFIER_nondet_int()
		%16 = load %4
		store %15, %16
		br %17
	17:
		%18 = load %2
		%19 = load %18
		%20 = icmp sgt %19 0
		br %20, %21, %36
	21:
		%22 = load %2
		%23 = load %22
		%24 = load %3
		%25 = load %24
		%26 = add i32 %23, %25
		%27 = load %2
		store %26, %27
		%28 = load %4
		%29 = load %28
		%30 = load %3
		store %29, %30
		%31 = load %4
		%32 = load %31
		%33 = sub i32 0, %32
		%34 = sub i32 %33, 1
		%35 = load %4
		store %34, %35
		br %17
	36:
		%37 = load %1
		ret %37


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_240(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, 1, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_241(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v46, v48, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 0 = 0
f_241(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v46, v48, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_242(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v46, v48, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 0 < v49
f_242(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v46, v48, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_244(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v46, v48, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 0 = 0
f_244(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v46, v48, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_246(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v46, v48, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: TRUE
f_246(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v46, v48, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_248(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v46, v48, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 0 = 0
f_248(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v46, v48, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_250(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v48, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 0 = 0
f_250(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v48, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_251(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v48, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 0 = 0
f_251(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v48, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_252(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 0 = 0
f_252(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_253(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: v61 = v49 + v50
f_253(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_254(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 0 = 0
f_254(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_255(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: TRUE
f_255(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_256(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 0 = 0
f_256(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_257(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v51, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 0 = 0
f_257(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v51, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_258(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v51, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 0 = 0
f_258(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v51, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_259(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v51, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: TRUE
f_259(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v51, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_260(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v51, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 0 = 0
f_260(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v51, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_261(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v51, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 0 = 0
f_261(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v51, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_262(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v64, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: v64 + v52 = 0
f_262(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v64, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_263(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v64, v65, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 1 + v65 = v64
f_263(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v64, v65, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_264(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v64, v65, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 0 = 0
f_264(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v64, v65, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_265(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v64, v65, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: TRUE
f_265(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v64, v65, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_266(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v64, v65, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: TRUE
f_266(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v64, v65, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_239(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v49, 1, v50, v61, v52, v64, v65, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: TRUE
f_239(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, 1, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) -> f_240(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, 1, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_240(v36:0, v37:0, v38:0, v39:0, v40:0, v41:0, v42:0, v43:0, v44:0, v45:0, v46:0, 1, v48:0, v49:0, v50:0, v51:0, v52:0, v53:0, v54:0, v55:0, v56:0, v57:0, v58:0, v59:0, 0, 3, 7, 4, 8) -> f_240(v36:0, v37:0, v38:0, v39:0, v40:0, v41:0, v42:0, v43:0, v44:0, v45:0, v49:0, 1, v50:0, v49:0 + v50:0, v52:0, 1 + v65:0, v65:0, v53:0, v54:0, v55:0, v56:0, v57:0, v58:0, v59:0, 0, 3, 7, 4, 8) :|: 1 + v65:0 + v52:0 = 0 && v49:0 > 0
Filtered unneeded arguments:
   f_240(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_240(x14, x15, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_240(v49:0, v50:0, v52:0) -> f_240(v49:0 + v50:0, v52:0, v65:0) :|: 1 + v65:0 + v52:0 = 0 && v49:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f_240(v49:0, v50:0, v52:0) -> f_240(v49:0 + v50:0, v52:0, v65:0) :|: 1 + v65:0 + v52:0 = 0 && v49:0 > 0

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

f_240(v49:0, v50:0, v52:0) -> f_240(v49:0 + v50:0, v52:0, v65:0) :|: 1 + v65:0 + v52:0 = 0 && v49:0 > 0
has been transformed into
f_240(v49:0, v50:0, v52:0) -> f_240(v49:0 + v50:0, v52:0, v65:0) :|: v52:0 = x11 && (v50:0 = x10 && (1 + v65:0 + v52:0 = 0 && v49:0 > 0)) && 1 + x11 + x10 = 0 && x8 > 0.


f_240(v49:0, v50:0, v52:0) -> f_240(v49:0 + v50:0, v52:0, v65:0) :|: v52:0 = x11 && (v50:0 = x10 && (1 + v65:0 + v52:0 = 0 && v49:0 > 0)) && 1 + x11 + x10 = 0 && x8 > 0 and 
f_240(v49:0, v50:0, v52:0) -> f_240(v49:0 + v50:0, v52:0, v65:0) :|: v52:0 = x11 && (v50:0 = x10 && (1 + v65:0 + v52:0 = 0 && v49:0 > 0)) && 1 + x11 + x10 = 0 && x8 > 0
have been merged into the new rule
f_240(x26, x27, x28) -> f_240(x26 + x27 + x28, x29, x30) :|: x28 = x31 && (x27 = x32 && (1 + x29 + x28 = 0 && x26 > 0)) && 1 + x31 + x32 = 0 && x33 > 0 && (x29 = x34 && (x28 = x35 && (1 + x30 + x29 = 0 && x26 + x27 > 0)) && 1 + x34 + x35 = 0 && x36 > 0)


----------------------------------------

(10)
Obligation:
Rules:
f_240(x37, x38, x39) -> f_240(x37 + x38 + x39, x40, x41) :|: TRUE && x39 + -1 * x42 = 0 && x38 + -1 * x43 = 0 && x40 + x39 = -1 && x37 >= 1 && x42 + x43 = -1 && x44 >= 1 && x40 + -1 * x45 = 0 && x39 + -1 * x46 = 0 && x41 + x40 = -1 && x37 + x38 >= 1 && x45 + x46 = -1 && x47 >= 1

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_240(x37:0, x38:0, x39:0) -> f_240(x37:0 + x38:0 + x39:0, x40:0, x41:0) :|: x45:0 + x46:0 = -1 && x47:0 > 0 && x37:0 + x38:0 >= 1 && x41:0 + x40:0 = -1 && x39:0 + -1 * x46:0 = 0 && x40:0 + -1 * x45:0 = 0 && x44:0 > 0 && x42:0 + x43:0 = -1 && x37:0 > 0 && x40:0 + x39:0 = -1 && x39:0 + -1 * x42:0 = 0 && x38:0 + -1 * x43:0 = 0

----------------------------------------

(13) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_240(x, x1, x2)] = x + x1

The following rules are decreasing:
f_240(x37:0, x38:0, x39:0) -> f_240(x37:0 + x38:0 + x39:0, x40:0, x41:0) :|: x45:0 + x46:0 = -1 && x47:0 > 0 && x37:0 + x38:0 >= 1 && x41:0 + x40:0 = -1 && x39:0 + -1 * x46:0 = 0 && x40:0 + -1 * x45:0 = 0 && x44:0 > 0 && x42:0 + x43:0 = -1 && x37:0 > 0 && x40:0 + x39:0 = -1 && x39:0 + -1 * x42:0 = 0 && x38:0 + -1 * x43:0 = 0
The following rules are bounded:
f_240(x37:0, x38:0, x39:0) -> f_240(x37:0 + x38:0 + x39:0, x40:0, x41:0) :|: x45:0 + x46:0 = -1 && x47:0 > 0 && x37:0 + x38:0 >= 1 && x41:0 + x40:0 = -1 && x39:0 + -1 * x46:0 = 0 && x40:0 + -1 * x45:0 = 0 && x44:0 > 0 && x42:0 + x43:0 = -1 && x37:0 > 0 && x40:0 + x39:0 = -1 && x39:0 + -1 * x42:0 = 0 && x38:0 + -1 * x43:0 = 0

----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
