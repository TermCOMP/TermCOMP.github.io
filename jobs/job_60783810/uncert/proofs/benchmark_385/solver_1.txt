YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/FJZgJ.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 881 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 2 ms]
        (9) IntTRS
        (10) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (11) YES
    (12) LLVM Symbolic Execution SCC
        (13) SCC2IRS [SOUND, 2 ms]
        (14) IntTRS
        (15) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (16) YES
    (17) LLVM Symbolic Execution SCC
        (18) SCC2IRS [SOUND, 2 ms]
        (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (21) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/FJZgJ.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/FJZgJ.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		%9 = call i32 @__VERIFIER_nondet_int()
		store %9, %5
		br %10
	10:
		%11 = load %2
		%12 = load %4
		%13 = icmp slt %11 %12
		br %13, %14, %19
	14:
		%15 = load %3
		%16 = add i32 %15, 1
		store %16, %3
		%17 = load %2
		%18 = add i32 %17, 1
		store %18, %2
		br %10
	19:
		br %20
	20:
		%21 = load %2
		%22 = load %5
		%23 = icmp slt %21 %22
		br %23, %24, %29
	24:
		%25 = load %3
		%26 = add i32 %25, 1
		store %26, %3
		%27 = load %2
		%28 = add i32 %27, 1
		store %28, %2
		br %20
	29:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_344(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v544, v545, v542, v547, v548, v549, v550, v551, 3, 4) -> f_345(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v544, v545, v542, v547, v548, v549, v550, v551, 3, 4) :|: 0 = 0
f_345(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v544, v545, v542, v547, v548, v549, v550, v551, 3, 4) -> f_346(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v544, v545, v542, v547, v548, v549, v550, v551, 3, 4) :|: v546 < v537
f_346(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v544, v545, v542, v547, v548, v549, v550, v551, 3, 4) -> f_348(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v544, v545, v542, v547, v548, v549, v550, v551, 3, 4) :|: 0 = 0
f_348(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v544, v545, v542, v547, v548, v549, v550, v551, 3, 4) -> f_350(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v544, v545, v542, v547, v548, v549, v550, v551, 3, 4) :|: TRUE
f_350(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v544, v545, v542, v547, v548, v549, v550, v551, 3, 4) -> f_352(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v545, v542, v547, v548, v549, v550, v551, 3, 4) :|: 0 = 0
f_352(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v545, v542, v547, v548, v549, v550, v551, 3, 4) -> f_353(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v545, v600, v542, v547, v548, v549, v550, v551, 3, 4) :|: v600 = 1 + v545
f_353(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v545, v600, v542, v547, v548, v549, v550, v551, 3, 4) -> f_354(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v545, v600, v542, v547, v548, v549, v550, v551, 3, 4) :|: TRUE
f_354(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v545, v600, v542, v547, v548, v549, v550, v551, 3, 4) -> f_355(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v545, v600, v547, v548, v549, v550, v551, 3, 4) :|: 0 = 0
f_355(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v545, v600, v547, v548, v549, v550, v551, 3, 4) -> f_356(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v545, v600, v602, v547, v548, v549, v550, v551, 3, 4) :|: v602 = 1 + v546
f_356(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v545, v600, v602, v547, v548, v549, v550, v551, 3, 4) -> f_357(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v545, v600, v602, v547, v548, v549, v550, v551, 3, 4) :|: TRUE
f_357(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v545, v600, v602, v547, v548, v549, v550, v551, 3, 4) -> f_358(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v545, v600, v602, v547, v548, v549, v550, v551, 3, 4) :|: TRUE
f_358(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v545, v600, v602, v547, v548, v549, v550, v551, 3, 4) -> f_343(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v545, v600, v602, v547, v548, v549, v550, v551, 3, 4) :|: TRUE
f_343(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v542, 1, v544, v545, v546, v547, v548, v549, v550, v551, 3, 4) -> f_344(v529, v530, v531, v532, v533, v534, v535, v536, v537, 0, v539, v540, v541, v546, 1, v544, v545, v542, v547, v548, v549, v550, v551, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_344(v529:0, v530:0, v531:0, v532:0, v533:0, v534:0, v535:0, v536:0, v537:0, 0, v539:0, v540:0, v541:0, v546:0, 1, v544:0, v545:0, v542:0, v547:0, v548:0, v549:0, v550:0, v551:0, 3, 4) -> f_344(v529:0, v530:0, v531:0, v532:0, v533:0, v534:0, v535:0, v536:0, v537:0, 0, v539:0, v540:0, v541:0, 1 + v546:0, 1, v545:0, 1 + v545:0, v546:0, v547:0, v548:0, v549:0, v550:0, v551:0, 3, 4) :|: v546:0 < v537:0
Filtered unneeded arguments:
   f_344(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_344(x9, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_344(v537:0, v546:0) -> f_344(v537:0, 1 + v546:0) :|: v546:0 < v537:0

----------------------------------------

(9)
Obligation:
Rules:
f_344(v537:0, v546:0) -> f_344(v537:0, 1 + v546:0) :|: v546:0 < v537:0

----------------------------------------

(10) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_344(x, x1)] = x - x1

The following rules are decreasing:
f_344(v537:0, v546:0) -> f_344(v537:0, 1 + v546:0) :|: v546:0 < v537:0
The following rules are bounded:
f_344(v537:0, v546:0) -> f_344(v537:0, 1 + v546:0) :|: v546:0 < v537:0

----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
SCC
----------------------------------------

(13) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_278(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v196, v197, v194, v199, v200, v201, v202, v203, 3, 4) -> f_281(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v196, v197, v194, v199, v200, v201, v202, v203, 3, 4) :|: 0 = 0
f_281(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v196, v197, v194, v199, v200, v201, v202, v203, 3, 4) -> f_285(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v196, v197, v194, v199, v200, v201, v202, v203, 3, 4) :|: v198 < v192
f_285(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v196, v197, v194, v199, v200, v201, v202, v203, 3, 4) -> f_290(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v196, v197, v194, v199, v200, v201, v202, v203, 3, 4) :|: 0 = 0
f_290(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v196, v197, v194, v199, v200, v201, v202, v203, 3, 4) -> f_295(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v196, v197, v194, v199, v200, v201, v202, v203, 3, 4) :|: TRUE
f_295(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v196, v197, v194, v199, v200, v201, v202, v203, 3, 4) -> f_299(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v197, v194, v199, v200, v201, v202, v203, 3, 4) :|: 0 = 0
f_299(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v197, v194, v199, v200, v201, v202, v203, 3, 4) -> f_301(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v197, v260, v194, v199, v200, v201, v202, v203, 3, 4) :|: v260 = 1 + v197
f_301(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v197, v260, v194, v199, v200, v201, v202, v203, 3, 4) -> f_303(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v197, v260, v194, v199, v200, v201, v202, v203, 3, 4) :|: TRUE
f_303(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v197, v260, v194, v199, v200, v201, v202, v203, 3, 4) -> f_305(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v197, v260, v199, v200, v201, v202, v203, 3, 4) :|: 0 = 0
f_305(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v197, v260, v199, v200, v201, v202, v203, 3, 4) -> f_307(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v197, v260, v264, v199, v200, v201, v202, v203, 3, 4) :|: v264 = 1 + v198
f_307(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v197, v260, v264, v199, v200, v201, v202, v203, 3, 4) -> f_309(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v197, v260, v264, v199, v200, v201, v202, v203, 3, 4) :|: TRUE
f_309(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v197, v260, v264, v199, v200, v201, v202, v203, 3, 4) -> f_311(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v197, v260, v264, v199, v200, v201, v202, v203, 3, 4) :|: TRUE
f_311(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v197, v260, v264, v199, v200, v201, v202, v203, 3, 4) -> f_275(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v197, v260, v264, v199, v200, v201, v202, v203, 3, 4) :|: TRUE
f_275(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v194, 1, v196, v197, v198, v199, v200, v201, v202, v203, 3, 4) -> f_278(v184, v185, v186, v187, v188, v189, v190, v191, v192, 0, v198, 1, v196, v197, v194, v199, v200, v201, v202, v203, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_278(v184:0, v185:0, v186:0, v187:0, v188:0, v189:0, v190:0, v191:0, v192:0, 0, v198:0, 1, v196:0, v197:0, v194:0, v199:0, v200:0, v201:0, v202:0, v203:0, 3, 4) -> f_278(v184:0, v185:0, v186:0, v187:0, v188:0, v189:0, v190:0, v191:0, v192:0, 0, 1 + v198:0, 1, v197:0, 1 + v197:0, v198:0, v199:0, v200:0, v201:0, v202:0, v203:0, 3, 4) :|: v198:0 < v192:0
Filtered unneeded arguments:
   f_278(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_278(x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_278(v192:0, v198:0) -> f_278(v192:0, 1 + v198:0) :|: v198:0 < v192:0

----------------------------------------

(14)
Obligation:
Rules:
f_278(v192:0, v198:0) -> f_278(v192:0, 1 + v198:0) :|: v198:0 < v192:0

----------------------------------------

(15) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_278(x, x1)] = x - x1

The following rules are decreasing:
f_278(v192:0, v198:0) -> f_278(v192:0, 1 + v198:0) :|: v198:0 < v192:0
The following rules are bounded:
f_278(v192:0, v198:0) -> f_278(v192:0, 1 + v198:0) :|: v198:0 < v192:0

----------------------------------------

(16)
YES

----------------------------------------

(17)
Obligation:
SCC
----------------------------------------

(18) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_259(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v161, v162, v159, v164, v165, v166, v167, v168, 0, 3, 4) -> f_261(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v161, v162, v159, v164, v165, v166, v167, v168, 0, 3, 4) :|: 0 = 0
f_261(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v161, v162, v159, v164, v165, v166, v167, v168, 0, 3, 4) -> f_263(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v161, v162, v159, v164, v165, v166, v167, v168, 0, 3, 4) :|: v163 < v157
f_263(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v161, v162, v159, v164, v165, v166, v167, v168, 0, 3, 4) -> f_266(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v161, v162, v159, v164, v165, v166, v167, v168, 0, 3, 4) :|: 0 = 0
f_266(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v161, v162, v159, v164, v165, v166, v167, v168, 0, 3, 4) -> f_269(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v161, v162, v159, v164, v165, v166, v167, v168, 0, 3, 4) :|: TRUE
f_269(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v161, v162, v159, v164, v165, v166, v167, v168, 0, 3, 4) -> f_272(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v162, v159, v164, v165, v166, v167, v168, 0, 3, 4) :|: 0 = 0
f_272(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v162, v159, v164, v165, v166, v167, v168, 0, 3, 4) -> f_276(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v162, v215, v159, v164, v165, v166, v167, v168, 0, 3, 4) :|: v215 = 1 + v162
f_276(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v162, v215, v159, v164, v165, v166, v167, v168, 0, 3, 4) -> f_279(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v162, v215, v159, v164, v165, v166, v167, v168, 0, 3, 4) :|: TRUE
f_279(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v162, v215, v159, v164, v165, v166, v167, v168, 0, 3, 4) -> f_282(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v162, v215, v164, v165, v166, v167, v168, 0, 3, 4) :|: 0 = 0
f_282(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v162, v215, v164, v165, v166, v167, v168, 0, 3, 4) -> f_287(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v162, v215, v217, v164, v165, v166, v167, v168, 0, 3, 4) :|: v217 = 1 + v163
f_287(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v162, v215, v217, v164, v165, v166, v167, v168, 0, 3, 4) -> f_292(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v162, v215, v217, v164, v165, v166, v167, v168, 0, 3, 4) :|: TRUE
f_292(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v162, v215, v217, v164, v165, v166, v167, v168, 0, 3, 4) -> f_297(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v162, v215, v217, v164, v165, v166, v167, v168, 0, 3, 4) :|: TRUE
f_297(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v162, v215, v217, v164, v165, v166, v167, v168, 0, 3, 4) -> f_257(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v162, v215, v217, v164, v165, v166, v167, v168, 0, 3, 4) :|: TRUE
f_257(v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, 1, v161, v162, v163, v164, v165, v166, v167, v168, 0, 3, 4) -> f_259(v150, v151, v152, v153, v154, v155, v156, v157, v158, v163, 1, v161, v162, v159, v164, v165, v166, v167, v168, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_259(v150:0, v151:0, v152:0, v153:0, v154:0, v155:0, v156:0, v157:0, v158:0, v163:0, 1, v161:0, v162:0, v159:0, v164:0, v165:0, v166:0, v167:0, v168:0, 0, 3, 4) -> f_259(v150:0, v151:0, v152:0, v153:0, v154:0, v155:0, v156:0, v157:0, v158:0, 1 + v163:0, 1, v162:0, 1 + v162:0, v163:0, v164:0, v165:0, v166:0, v167:0, v168:0, 0, 3, 4) :|: v163:0 < v157:0
Filtered unneeded arguments:
   f_259(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_259(x8, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_259(v157:0, v163:0) -> f_259(v157:0, 1 + v163:0) :|: v163:0 < v157:0

----------------------------------------

(19)
Obligation:
Rules:
f_259(v157:0, v163:0) -> f_259(v157:0, 1 + v163:0) :|: v163:0 < v157:0

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_259(x, x1)] = x - x1

The following rules are decreasing:
f_259(v157:0, v163:0) -> f_259(v157:0, 1 + v163:0) :|: v163:0 < v157:0
The following rules are bounded:
f_259(v157:0, v163:0) -> f_259(v157:0, 1 + v163:0) :|: v163:0 < v157:0

----------------------------------------

(21)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
