YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/8jILw.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 225 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 53 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 12 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/8jILw.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/8jILw.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		br %5
	5:
		%6 = load %2
		%7 = icmp sgt %6 0
		br %7, %8, %17
	8:
		%9 = load %2
		%10 = icmp slt %9 100
		br %10, %11, %17
	11:
		%12 = load %2
		%13 = load %3
		%14 = mul i32 2, %13
		%15 = add i32 %14, 10
		%16 = icmp sge %12 %15
		br %17
	17:
		%18 = phi [0, %8], [0, %5], [%16, %11]
		br %18, %19, %22
	19:
		%20 = load %2
		store %20, %3
		%21 = call i32 @__VERIFIER_nondet_int()
		store %21, %2
		br %5
	22:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_168(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) -> f_169(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) :|: 0 < v196
f_169(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) -> f_171(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) :|: 0 = 0
f_171(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) -> f_173(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) :|: TRUE
f_173(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) -> f_175(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) :|: 0 = 0
f_175(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) -> f_177(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) :|: v196 < 100
f_177(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) -> f_179(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) :|: 0 = 0
f_179(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) -> f_181(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) :|: TRUE
f_181(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) -> f_183(v187, v188, v189, v190, v196, 1, v193, v194, v195, v191, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) :|: 0 = 0
f_183(v187, v188, v189, v190, v196, 1, v193, v194, v195, v191, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) -> f_185(v187, v188, v189, v190, v196, 1, v191, v194, v195, v197, v198, v199, 0, 3, 10, 99, 88, 98, 4) :|: 0 = 0
f_185(v187, v188, v189, v190, v196, 1, v191, v194, v195, v197, v198, v199, 0, 3, 10, 99, 88, 98, 4) -> f_186(v187, v188, v189, v190, v196, 1, v191, v245, v195, v197, v198, v199, 0, 3, 2, 99, 98, 4, 198) :|: v245 = 2 * v191 && 2 <= v245 && v245 <= 198
f_186(v187, v188, v189, v190, v196, 1, v191, v245, v195, v197, v198, v199, 0, 3, 2, 99, 98, 4, 198) -> f_187(v187, v188, v189, v190, v196, 1, v191, v245, v246, v197, v198, v199, 0, 3, 2, 10, 99, 4, 198, 12, 208) :|: v246 = 10 + v245 && 12 <= v246 && v246 <= 208
f_187(v187, v188, v189, v190, v196, 1, v191, v245, v246, v197, v198, v199, 0, 3, 2, 10, 99, 4, 198, 12, 208) -> f_188(v187, v188, v189, v190, v196, 1, v191, v245, v246, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) :|: v246 <= v196 && v246 <= 98 && 12 <= v196 && 2 <= v245 && v245 <= 88 && 1 <= v191 && v191 <= 44
f_188(v187, v188, v189, v190, v196, 1, v191, v245, v246, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) -> f_190(v187, v188, v189, v190, v196, 1, v191, v245, v246, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) :|: 0 = 0
f_190(v187, v188, v189, v190, v196, 1, v191, v245, v246, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) -> f_192(v187, v188, v189, v190, v196, 1, v191, v245, v246, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) :|: 0 = 0
f_192(v187, v188, v189, v190, v196, 1, v191, v245, v246, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) -> f_194(v187, v188, v189, v190, v196, 1, v191, v245, v246, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) :|: TRUE
f_194(v187, v188, v189, v190, v196, 1, v191, v245, v246, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) -> f_196(v187, v188, v189, v190, v196, 1, v191, v245, v246, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) :|: 0 = 0
f_196(v187, v188, v189, v190, v196, 1, v191, v245, v246, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) -> f_197(v187, v188, v189, v190, v196, 1, v191, v245, v246, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) :|: TRUE
f_197(v187, v188, v189, v190, v196, 1, v191, v245, v246, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) -> f_198(v187, v188, v189, v190, v196, 1, v191, v245, v246, v310, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) :|: TRUE
f_198(v187, v188, v189, v190, v196, 1, v191, v245, v246, v310, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) -> f_199(v187, v188, v189, v190, v196, 1, v191, v245, v246, v310, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) :|: TRUE
f_199(v187, v188, v189, v190, v196, 1, v191, v245, v246, v310, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) -> f_200(v187, v188, v189, v190, v196, 1, v191, v245, v246, v310, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) :|: TRUE
f_200(v187, v188, v189, v190, v196, 1, v191, v245, v246, v310, v197, v198, v199, 0, 3, 2, 10, 99, 44, 12, 4, 88, 98) -> f_167(v187, v188, v189, v190, v196, 1, v191, v245, v246, v310, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) :|: TRUE
f_167(v187, v188, v189, v190, v191, 1, v193, v194, v195, v196, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) -> f_168(v187, v188, v189, v190, v196, 1, v191, v193, v194, v195, v197, v198, v199, 0, 3, 2, 10, 99, 44, 88, 98, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_168(v187:0, v188:0, v189:0, v190:0, v196:0, 1, v191:0, v193:0, v194:0, v195:0, v197:0, v198:0, v199:0, 0, 3, 2, 10, 99, 44, 88, 98, 4) -> f_168(v187:0, v188:0, v189:0, v190:0, v310:0, 1, v196:0, v191:0, 2 * v191:0, 10 + 2 * v191:0, v197:0, v198:0, v199:0, 0, 3, 2, 10, 99, 44, 88, 98, 4) :|: v196:0 > 11 && v196:0 < 100 && 89 > 2 * v191:0 && v196:0 >= 10 + 2 * v191:0 && 2 * v191:0 > 1 && 2 * v191:0 < 199 && v191:0 > 0 && v191:0 < 45
Filtered unneeded arguments:
   f_168(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_168(x5, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_168(v196:0, v191:0) -> f_168(v310:0, v196:0) :|: v196:0 < 100 && v196:0 > 11 && 89 > 2 * v191:0 && v196:0 >= 10 + 2 * v191:0 && 2 * v191:0 > 1 && 2 * v191:0 < 199 && v191:0 < 45 && v191:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f_168(v196:0, v191:0) -> f_168(v310:0, v196:0) :|: v196:0 < 100 && v196:0 > 11 && 89 > 2 * v191:0 && v196:0 >= 10 + 2 * v191:0 && 2 * v191:0 > 1 && 2 * v191:0 < 199 && v191:0 < 45 && v191:0 > 0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_168(v196:0:0, v191:0:0) -> f_168(v310:0:0, v196:0:0) :|: v191:0:0 < 45 && v191:0:0 > 0 && 2 * v191:0:0 < 199 && 2 * v191:0:0 > 1 && v196:0:0 >= 10 + 2 * v191:0:0 && 89 > 2 * v191:0:0 && v196:0:0 > 11 && v196:0:0 < 100

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_168 ] = -1/11*f_168_2

The following rules are decreasing:
f_168(v196:0:0, v191:0:0) -> f_168(v310:0:0, v196:0:0) :|: v191:0:0 < 45 && v191:0:0 > 0 && 2 * v191:0:0 < 199 && 2 * v191:0:0 > 1 && v196:0:0 >= 10 + 2 * v191:0:0 && 89 > 2 * v191:0:0 && v196:0:0 > 11 && v196:0:0 < 100

The following rules are bounded:
f_168(v196:0:0, v191:0:0) -> f_168(v310:0:0, v196:0:0) :|: v191:0:0 < 45 && v191:0:0 > 0 && 2 * v191:0:0 < 199 && 2 * v191:0:0 > 1 && v196:0:0 >= 10 + 2 * v191:0:0 && 89 > 2 * v191:0:0 && v196:0:0 > 11 && v196:0:0 < 100


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
