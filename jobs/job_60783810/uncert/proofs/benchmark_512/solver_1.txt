YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/iOXXZ.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 893 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 34 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 33 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/iOXXZ.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/iOXXZ.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		store 0, %2
		%7 = load %4
		%8 = icmp sgt %7 0
		br %8, %9, %26
	9:
		br %10
	10:
		%11 = load %3
		%12 = icmp sgt %11 0
		br %12, %13, %25
	13:
		%14 = load %3
		%15 = load %4
		%16 = icmp sgt %14 %15
		br %16, %17, %19
	17:
		%18 = load %4
		store %18, %3
		br %22
	19:
		%20 = load %3
		%21 = sub i32 %20, 1
		store %21, %3
		br %22
	22:
		%23 = load %2
		%24 = add i32 %23, 1
		store %24, %2
		br %10
	25:
		br %26
	26:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_403(v828, v829, v830, v831, v832, v833, 1, v835, 0, v838, v839, v840, v841, v842, v843, 3, 2, 4) -> f_405(v828, v829, v830, v831, v832, v833, 1, v835, 0, v838, v846, v839, v840, v841, v842, v843, 3, 2, 4) :|: v846 = 1 + v838 && 2 <= v846
f_405(v828, v829, v830, v831, v832, v833, 1, v835, 0, v838, v846, v839, v840, v841, v842, v843, 3, 2, 4) -> f_407(v828, v829, v830, v831, v832, v833, 1, v835, 0, v838, v846, v839, v840, v841, v842, v843, 3, 2, 4) :|: TRUE
f_407(v828, v829, v830, v831, v832, v833, 1, v835, 0, v838, v846, v839, v840, v841, v842, v843, 3, 2, 4) -> f_409(v828, v829, v830, v831, v832, v833, 1, v835, 0, v838, v846, v839, v840, v841, v842, v843, 3, 2, 4) :|: TRUE
f_409(v828, v829, v830, v831, v832, v833, 1, v835, 0, v838, v846, v839, v840, v841, v842, v843, 3, 2, 4) -> f_411(v828, v829, v830, v831, v832, v833, 1, v839, v835, 0, v838, v846, v840, v841, v842, v843, 3, 2, 4) :|: 0 = 0
f_411(v828, v829, v830, v831, v832, v833, 1, v839, v835, 0, v838, v846, v840, v841, v842, v843, 3, 2, 4) -> f_413(v828, v829, v830, v831, v832, v833, 1, v839, v835, 0, v838, v846, v840, v841, v842, v843, 3, 2, 4) :|: 0 < v839 && 2 <= v835 && 3 <= v832 && 2 <= v833
f_413(v828, v829, v830, v831, v832, v833, 1, v839, v835, 0, v838, v846, v840, v841, v842, v843, 3, 2, 4) -> f_416(v828, v829, v830, v831, v832, v833, 1, v839, v835, 0, v838, v846, v840, v841, v842, v843, 3, 2, 4) :|: 0 = 0
f_416(v828, v829, v830, v831, v832, v833, 1, v839, v835, 0, v838, v846, v840, v841, v842, v843, 3, 2, 4) -> f_418(v828, v829, v830, v831, v832, v833, 1, v839, v835, 0, v838, v846, v840, v841, v842, v843, 3, 2, 4) :|: TRUE
f_418(v828, v829, v830, v831, v832, v833, 1, v839, v835, 0, v838, v846, v840, v841, v842, v843, 3, 2, 4) -> f_420(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v835, v840, v841, v842, v843, 3, 2, 4) :|: 0 = 0
f_420(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v835, v840, v841, v842, v843, 3, 2, 4) -> f_422(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v835, v840, v841, v842, v843, 3, 2, 4) :|: 0 = 0
f_422(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v835, v840, v841, v842, v843, 3, 2, 4) -> f_423(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v835, v840, v841, v842, v843, 3, 2, 4) :|: 0 = 0
f_423(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v835, v840, v841, v842, v843, 3, 2, 4) -> f_424(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v835, v840, v841, v842, v843, 3, 2, 4) :|: TRUE
f_424(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v835, v840, v841, v842, v843, 3, 2, 4) -> f_425(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v840, v841, v842, v843, 3, 2, 4) :|: 0 = 0
f_425(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v840, v841, v842, v843, 3, 2, 4) -> f_426(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v983, v840, v841, v842, v843, 3, 2, 4) :|: 1 + v983 = v839 && 0 <= v983
f_426(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v983, v840, v841, v842, v843, 3, 2, 4) -> f_427(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v983, v840, v841, v842, v843, 3, 2, 4) :|: TRUE
f_427(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v983, v840, v841, v842, v843, 3, 2, 4) -> f_428(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v983, v840, v841, v842, v843, 3, 2, 4) :|: TRUE
f_428(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v983, v840, v841, v842, v843, 3, 2, 4) -> f_401(v828, v829, v830, v831, v832, v833, 1, v839, 0, v838, v846, v983, v840, v841, v842, v843, 3, 2, 4) :|: TRUE
f_401(v828, v829, v830, v831, v832, v833, 1, v835, 0, v837, v838, v839, v840, v841, v842, v843, 3, 2, 4) -> f_403(v828, v829, v830, v831, v832, v833, 1, v835, 0, v838, v839, v840, v841, v842, v843, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_403(v828:0, v829:0, v830:0, v831:0, v832:0, v833:0, 1, v835:0, 0, v838:0, 1 + v983:0, v840:0, v841:0, v842:0, v843:0, 3, 2, 4) -> f_403(v828:0, v829:0, v830:0, v831:0, v832:0, v833:0, 1, 1 + v983:0, 0, 1 + v838:0, v983:0, v840:0, v841:0, v842:0, v843:0, 3, 2, 4) :|: v838:0 > 0 && v835:0 > 1 && v983:0 > -1 && v832:0 > 2 && v833:0 > 1
Filtered unneeded arguments:
   f_403(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_403(x5, x6, x8, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_403(v832:0, v833:0, v835:0, v838:0, sum~cons_1~v983:0) -> f_403(v832:0, v833:0, 1 + v983:0, 1 + v838:0, v983:0) :|: v835:0 > 1 && v838:0 > 0 && v983:0 > -1 && v833:0 > 1 && v832:0 > 2 && sum~cons_1~v983:0 = 1 + v983:0

----------------------------------------

(9)
Obligation:
Rules:
f_403(v832:0, v833:0, v835:0, v838:0, sum~cons_1~v983:0) -> f_403(v832:0, v833:0, 1 + v983:0, 1 + v838:0, v983:0) :|: v835:0 > 1 && v838:0 > 0 && v983:0 > -1 && v833:0 > 1 && v832:0 > 2 && sum~cons_1~v983:0 = 1 + v983:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_403(v832:0:0, v833:0:0, v835:0:0, v838:0:0, sum~cons_1~v983:0:0) -> f_403(v832:0:0, v833:0:0, 1 + v983:0:0, 1 + v838:0:0, v983:0:0) :|: v833:0:0 > 1 && v832:0:0 > 2 && v983:0:0 > -1 && v838:0:0 > 0 && v835:0:0 > 1 && sum~cons_1~v983:0:0 = 1 + v983:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_403(x, x1, x2, x3, x4)] = x4

The following rules are decreasing:
f_403(v832:0:0, v833:0:0, v835:0:0, v838:0:0, sum~cons_1~v983:0:0) -> f_403(v832:0:0, v833:0:0, 1 + v983:0:0, 1 + v838:0:0, v983:0:0) :|: v833:0:0 > 1 && v832:0:0 > 2 && v983:0:0 > -1 && v838:0:0 > 0 && v835:0:0 > 1 && sum~cons_1~v983:0:0 = 1 + v983:0:0
The following rules are bounded:
f_403(v832:0:0, v833:0:0, v835:0:0, v838:0:0, sum~cons_1~v983:0:0) -> f_403(v832:0:0, v833:0:0, 1 + v983:0:0, 1 + v838:0:0, v983:0:0) :|: v833:0:0 > 1 && v832:0:0 > 2 && v983:0:0 > -1 && v838:0:0 > 0 && v835:0:0 > 1 && sum~cons_1~v983:0:0 = 1 + v983:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_377(v735, v736, v737, v738, v739, v740, 1, v744, v742, 0, v745, v746, v747, v748, v749, v750, 3, 4) -> f_380(v735, v736, v737, v738, v739, v740, 1, v744, v742, 0, v745, v746, v747, v748, v749, v750, 3, 2, 4) :|: 0 < v744 && 2 <= v742 && 2 <= v739 && 2 <= v740
f_380(v735, v736, v737, v738, v739, v740, 1, v744, v742, 0, v745, v746, v747, v748, v749, v750, 3, 2, 4) -> f_384(v735, v736, v737, v738, v739, v740, 1, v744, v742, 0, v745, v746, v747, v748, v749, v750, 3, 2, 4) :|: 0 = 0
f_384(v735, v736, v737, v738, v739, v740, 1, v744, v742, 0, v745, v746, v747, v748, v749, v750, 3, 2, 4) -> f_387(v735, v736, v737, v738, v739, v740, 1, v744, v742, 0, v745, v746, v747, v748, v749, v750, 3, 2, 4) :|: TRUE
f_387(v735, v736, v737, v738, v739, v740, 1, v744, v742, 0, v745, v746, v747, v748, v749, v750, 3, 2, 4) -> f_390(v735, v736, v737, v738, v739, v740, 1, v744, 0, v742, v745, v746, v747, v748, v749, v750, 3, 2, 4) :|: 0 = 0
f_390(v735, v736, v737, v738, v739, v740, 1, v744, 0, v742, v745, v746, v747, v748, v749, v750, 3, 2, 4) -> f_393(v735, v736, v737, v738, v739, v740, 1, v744, 0, v742, v745, v746, v747, v748, v749, v750, 3, 2, 4) :|: 0 = 0
f_393(v735, v736, v737, v738, v739, v740, 1, v744, 0, v742, v745, v746, v747, v748, v749, v750, 3, 2, 4) -> f_395(v735, v736, v737, v738, v739, v740, 1, v744, 0, v742, v745, v746, v747, v748, v749, v750, 3, 2, 4) :|: 0 = 0
f_395(v735, v736, v737, v738, v739, v740, 1, v744, 0, v742, v745, v746, v747, v748, v749, v750, 3, 2, 4) -> f_397(v735, v736, v737, v738, v739, v740, 1, v744, 0, v742, v745, v746, v747, v748, v749, v750, 3, 2, 4) :|: TRUE
f_397(v735, v736, v737, v738, v739, v740, 1, v744, 0, v742, v745, v746, v747, v748, v749, v750, 3, 2, 4) -> f_399(v735, v736, v737, v738, v739, v740, 1, v744, 0, v745, v746, v747, v748, v749, v750, 3, 2, 4) :|: 0 = 0
f_399(v735, v736, v737, v738, v739, v740, 1, v744, 0, v745, v746, v747, v748, v749, v750, 3, 2, 4) -> f_402(v735, v736, v737, v738, v739, v740, 1, v744, 0, v844, v745, v746, v747, v748, v749, v750, 3, 2, 4) :|: 1 + v844 = v744 && 0 <= v844
f_402(v735, v736, v737, v738, v739, v740, 1, v744, 0, v844, v745, v746, v747, v748, v749, v750, 3, 2, 4) -> f_404(v735, v736, v737, v738, v739, v740, 1, v744, 0, v844, v745, v746, v747, v748, v749, v750, 3, 2, 4) :|: TRUE
f_404(v735, v736, v737, v738, v739, v740, 1, v744, 0, v844, v745, v746, v747, v748, v749, v750, 3, 2, 4) -> f_406(v735, v736, v737, v738, v739, v740, 1, v744, 0, v844, v745, v746, v747, v748, v749, v750, 3, 2, 4) :|: TRUE
f_406(v735, v736, v737, v738, v739, v740, 1, v744, 0, v844, v745, v746, v747, v748, v749, v750, 3, 2, 4) -> f_408(v735, v736, v737, v738, v739, v740, 1, v744, 0, v844, v746, v747, v748, v749, v750, 3, 2, 4) :|: 0 = 0
f_408(v735, v736, v737, v738, v739, v740, 1, v744, 0, v844, v746, v747, v748, v749, v750, 3, 2, 4) -> f_410(v735, v736, v737, v738, v739, v740, 1, v744, 0, v844, v746, v884, v747, v748, v749, v750, 3, 2, 4) :|: v884 = 1 + v746 && 2 <= v884
f_410(v735, v736, v737, v738, v739, v740, 1, v744, 0, v844, v746, v884, v747, v748, v749, v750, 3, 2, 4) -> f_412(v735, v736, v737, v738, v739, v740, 1, v744, 0, v844, v746, v884, v747, v748, v749, v750, 3, 2, 4) :|: TRUE
f_412(v735, v736, v737, v738, v739, v740, 1, v744, 0, v844, v746, v884, v747, v748, v749, v750, 3, 2, 4) -> f_415(v735, v736, v737, v738, v739, v740, 1, v744, 0, v844, v746, v884, v747, v748, v749, v750, 3, 2, 4) :|: TRUE
f_415(v735, v736, v737, v738, v739, v740, 1, v744, 0, v844, v746, v884, v747, v748, v749, v750, 3, 2, 4) -> f_374(v735, v736, v737, v738, v739, v740, 1, v744, 0, v844, v746, v884, v747, v748, v749, v750, 3, 4) :|: TRUE
f_374(v735, v736, v737, v738, v739, v740, 1, v742, 0, v744, v745, v746, v747, v748, v749, v750, 3, 4) -> f_377(v735, v736, v737, v738, v739, v740, 1, v744, v742, 0, v745, v746, v747, v748, v749, v750, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_377(v735:0, v736:0, v737:0, v738:0, v739:0, v740:0, 1, 1 + v844:0, v742:0, 0, v745:0, v746:0, v747:0, v748:0, v749:0, v750:0, 3, 4) -> f_377(v735:0, v736:0, v737:0, v738:0, v739:0, v740:0, 1, v844:0, 1 + v844:0, 0, v746:0, 1 + v746:0, v747:0, v748:0, v749:0, v750:0, 3, 4) :|: v742:0 > 1 && v844:0 > -1 && v739:0 > 1 && v740:0 > 1 && v746:0 > 0
Filtered unneeded arguments:
   f_377(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_377(x5, x6, x8, x9, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_377(v739:0, v740:0, sum~cons_1~v844:0, v742:0, v746:0) -> f_377(v739:0, v740:0, v844:0, 1 + v844:0, 1 + v746:0) :|: v844:0 > -1 && v742:0 > 1 && v739:0 > 1 && v746:0 > 0 && v740:0 > 1 && sum~cons_1~v844:0 = 1 + v844:0

----------------------------------------

(16)
Obligation:
Rules:
f_377(v739:0, v740:0, sum~cons_1~v844:0, v742:0, v746:0) -> f_377(v739:0, v740:0, v844:0, 1 + v844:0, 1 + v746:0) :|: v844:0 > -1 && v742:0 > 1 && v739:0 > 1 && v746:0 > 0 && v740:0 > 1 && sum~cons_1~v844:0 = 1 + v844:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_377(v739:0:0, v740:0:0, sum~cons_1~v844:0:0, v742:0:0, v746:0:0) -> f_377(v739:0:0, v740:0:0, v844:0:0, 1 + v844:0:0, 1 + v746:0:0) :|: v746:0:0 > 0 && v740:0:0 > 1 && v739:0:0 > 1 && v742:0:0 > 1 && v844:0:0 > -1 && sum~cons_1~v844:0:0 = 1 + v844:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_377(x, x1, x2, x3, x4)] = x2

The following rules are decreasing:
f_377(v739:0:0, v740:0:0, sum~cons_1~v844:0:0, v742:0:0, v746:0:0) -> f_377(v739:0:0, v740:0:0, v844:0:0, 1 + v844:0:0, 1 + v746:0:0) :|: v746:0:0 > 0 && v740:0:0 > 1 && v739:0:0 > 1 && v742:0:0 > 1 && v844:0:0 > -1 && sum~cons_1~v844:0:0 = 1 + v844:0:0
The following rules are bounded:
f_377(v739:0:0, v740:0:0, sum~cons_1~v844:0:0, v742:0:0, v746:0:0) -> f_377(v739:0:0, v740:0:0, v844:0:0, 1 + v844:0:0, 1 + v746:0:0) :|: v746:0:0 > 0 && v740:0:0 > 1 && v739:0:0 > 1 && v742:0:0 > 1 && v844:0:0 > -1 && sum~cons_1~v844:0:0 = 1 + v844:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
