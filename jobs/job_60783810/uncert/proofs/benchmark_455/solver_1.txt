YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/rPDAG.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 400 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 29 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 25 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 31 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/rPDAG.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/rPDAG.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sge %7 0
		br %8, %12, %9
	9:
		%10 = load %3
		%11 = icmp sge %10 0
		br %12
	12:
		%13 = phi [1, %6], [%11, %9]
		br %13, %14, %24
	14:
		%15 = load %2
		%16 = icmp sge %15 0
		br %16, %17, %20
	17:
		%18 = load %2
		%19 = sub i32 %18, 1
		store %19, %2
		br %23
	20:
		%21 = load %3
		%22 = sub i32 %21, 1
		store %22, %3
		br %23
	23:
		br %6
	24:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_338(v891, v892, v893, v894, v895, -1, 0, 1, v899, v900, v901, v902, v903, 3, 4) -> f_339(v891, v892, v893, v894, v895, -1, 0, 1, v899, v900, v901, v902, v903, 3, 4) :|: 0 = 0
f_339(v891, v892, v893, v894, v895, -1, 0, 1, v899, v900, v901, v902, v903, 3, 4) -> f_340(v891, v892, v893, v894, v895, -1, 0, 1, v899, v900, v901, v902, v903, 3, 4) :|: 0 = 0
f_340(v891, v892, v893, v894, v895, -1, 0, 1, v899, v900, v901, v902, v903, 3, 4) -> f_341(v891, v892, v893, v894, v895, -1, 0, 1, v899, v900, v901, v902, v903, 3, 4) :|: TRUE
f_341(v891, v892, v893, v894, v895, -1, 0, 1, v899, v900, v901, v902, v903, 3, 4) -> f_342(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) :|: 0 = 0
f_342(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) -> f_343(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) :|: 0 <= v900 && 1 <= v899 && 1 <= v895
f_343(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) -> f_345(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) :|: 0 = 0
f_345(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) -> f_347(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) :|: 0 = 0
f_347(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) -> f_349(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) :|: TRUE
f_349(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) -> f_351(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) :|: 0 = 0
f_351(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) -> f_352(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) :|: 0 = 0
f_352(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) -> f_353(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) :|: TRUE
f_353(v891, v892, v893, v894, v895, -1, 0, 1, v900, v899, v901, v902, v903, 3, 4) -> f_354(v891, v892, v893, v894, v895, -1, 0, 1, v900, v901, v902, v903, 3, 4) :|: 0 = 0
f_354(v891, v892, v893, v894, v895, -1, 0, 1, v900, v901, v902, v903, 3, 4) -> f_355(v891, v892, v893, v894, v895, -1, 0, 1, v900, v1016, v901, v902, v903, 3, 4) :|: 1 + v1016 = v900 && 0 <= 1 + v1016
f_355(v891, v892, v893, v894, v895, -1, 0, 1, v900, v1016, v901, v902, v903, 3, 4) -> f_356(v891, v892, v893, v894, v895, -1, 0, 1, v900, v1016, v901, v902, v903, 3, 4) :|: TRUE
f_356(v891, v892, v893, v894, v895, -1, 0, 1, v900, v1016, v901, v902, v903, 3, 4) -> f_357(v891, v892, v893, v894, v895, -1, 0, 1, v900, v1016, v901, v902, v903, 3, 4) :|: TRUE
f_357(v891, v892, v893, v894, v895, -1, 0, 1, v900, v1016, v901, v902, v903, 3, 4) -> f_337(v891, v892, v893, v894, v895, -1, 0, 1, v900, v1016, v901, v902, v903, 3, 4) :|: TRUE
f_337(v891, v892, v893, v894, v895, -1, 0, 1, v899, v900, v901, v902, v903, 3, 4) -> f_338(v891, v892, v893, v894, v895, -1, 0, 1, v899, v900, v901, v902, v903, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_338(v891:0, v892:0, v893:0, v894:0, v895:0, -1, 0, 1, v899:0, 1 + v1016:0, v901:0, v902:0, v903:0, 3, 4) -> f_338(v891:0, v892:0, v893:0, v894:0, v895:0, -1, 0, 1, 1 + v1016:0, v1016:0, v901:0, v902:0, v903:0, 3, 4) :|: v899:0 > 0 && v1016:0 > -2 && v895:0 > 0
Filtered unneeded arguments:
   f_338(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_338(x5, x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_338(v895:0, v899:0, sum~cons_1~v1016:0) -> f_338(v895:0, 1 + v1016:0, v1016:0) :|: v1016:0 > -2 && v895:0 > 0 && v899:0 > 0 && sum~cons_1~v1016:0 = 1 + v1016:0

----------------------------------------

(9)
Obligation:
Rules:
f_338(v895:0, v899:0, sum~cons_1~v1016:0) -> f_338(v895:0, 1 + v1016:0, v1016:0) :|: v1016:0 > -2 && v895:0 > 0 && v899:0 > 0 && sum~cons_1~v1016:0 = 1 + v1016:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_338(v895:0:0, v899:0:0, sum~cons_1~v1016:0:0) -> f_338(v895:0:0, 1 + v1016:0:0, v1016:0:0) :|: v1016:0:0 > -2 && v895:0:0 > 0 && v899:0:0 > 0 && sum~cons_1~v1016:0:0 = 1 + v1016:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_338(x, x1, x2)] = x2

The following rules are decreasing:
f_338(v895:0:0, v899:0:0, sum~cons_1~v1016:0:0) -> f_338(v895:0:0, 1 + v1016:0:0, v1016:0:0) :|: v1016:0:0 > -2 && v895:0:0 > 0 && v899:0:0 > 0 && sum~cons_1~v1016:0:0 = 1 + v1016:0:0
The following rules are bounded:
f_338(v895:0:0, v899:0:0, sum~cons_1~v1016:0:0) -> f_338(v895:0:0, 1 + v1016:0:0, v1016:0:0) :|: v1016:0:0 > -2 && v895:0:0 > 0 && v899:0:0 > 0 && sum~cons_1~v1016:0:0 = 1 + v1016:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_267(v380, v381, v382, v383, v384, 0, v386, 1, v388, v389, v390, v391, 3, 4) -> f_270(v380, v381, v382, v383, v384, 0, v386, 1, v388, v389, v390, v391, 3, 4) :|: 0 = 0
f_270(v380, v381, v382, v383, v384, 0, v386, 1, v388, v389, v390, v391, 3, 4) -> f_273(v380, v381, v382, v383, v384, 0, v386, 1, v388, v389, v390, v391, 3, 4) :|: 0 = 0
f_273(v380, v381, v382, v383, v384, 0, v386, 1, v388, v389, v390, v391, 3, 4) -> f_276(v380, v381, v382, v383, v384, 0, v386, 1, v388, v389, v390, v391, 3, 4) :|: TRUE
f_276(v380, v381, v382, v383, v384, 0, v386, 1, v388, v389, v390, v391, 3, 4) -> f_278(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) :|: 0 = 0
f_278(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) -> f_280(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) :|: 0 <= v388 && 1 <= v386 && 1 <= v384
f_280(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) -> f_283(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) :|: 0 = 0
f_283(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) -> f_286(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) :|: 0 = 0
f_286(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) -> f_289(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) :|: TRUE
f_289(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) -> f_292(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) :|: 0 = 0
f_292(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) -> f_294(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) :|: 0 = 0
f_294(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) -> f_296(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) :|: TRUE
f_296(v380, v381, v382, v383, v384, 0, v388, 1, v386, v389, v390, v391, 3, 4) -> f_299(v380, v381, v382, v383, v384, 0, v388, 1, v389, v390, v391, 3, 4) :|: 0 = 0
f_299(v380, v381, v382, v383, v384, 0, v388, 1, v389, v390, v391, 3, 4) -> f_302(v380, v381, v382, v383, v384, 0, v388, 1, v533, v389, v390, v391, 3, 4) :|: 1 + v533 = v388 && 0 <= 1 + v533
f_302(v380, v381, v382, v383, v384, 0, v388, 1, v533, v389, v390, v391, 3, 4) -> f_305(v380, v381, v382, v383, v384, 0, v388, 1, v533, v389, v390, v391, 3, 4) :|: TRUE
f_305(v380, v381, v382, v383, v384, 0, v388, 1, v533, v389, v390, v391, 3, 4) -> f_308(v380, v381, v382, v383, v384, 0, v388, 1, v533, v389, v390, v391, 3, 4) :|: TRUE
f_308(v380, v381, v382, v383, v384, 0, v388, 1, v533, v389, v390, v391, 3, 4) -> f_264(v380, v381, v382, v383, v384, 0, v388, 1, v533, v389, v390, v391, 3, 4) :|: TRUE
f_264(v380, v381, v382, v383, v384, 0, v386, 1, v388, v389, v390, v391, 3, 4) -> f_267(v380, v381, v382, v383, v384, 0, v386, 1, v388, v389, v390, v391, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_267(v380:0, v381:0, v382:0, v383:0, v384:0, 0, v386:0, 1, 1 + v533:0, v389:0, v390:0, v391:0, 3, 4) -> f_267(v380:0, v381:0, v382:0, v383:0, v384:0, 0, 1 + v533:0, 1, v533:0, v389:0, v390:0, v391:0, 3, 4) :|: v386:0 > 0 && v533:0 > -2 && v384:0 > 0
Filtered unneeded arguments:
   f_267(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_267(x5, x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_267(v384:0, v386:0, sum~cons_1~v533:0) -> f_267(v384:0, 1 + v533:0, v533:0) :|: v533:0 > -2 && v384:0 > 0 && v386:0 > 0 && sum~cons_1~v533:0 = 1 + v533:0

----------------------------------------

(16)
Obligation:
Rules:
f_267(v384:0, v386:0, sum~cons_1~v533:0) -> f_267(v384:0, 1 + v533:0, v533:0) :|: v533:0 > -2 && v384:0 > 0 && v386:0 > 0 && sum~cons_1~v533:0 = 1 + v533:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_267(v384:0:0, v386:0:0, sum~cons_1~v533:0:0) -> f_267(v384:0:0, 1 + v533:0:0, v533:0:0) :|: v533:0:0 > -2 && v384:0:0 > 0 && v386:0:0 > 0 && sum~cons_1~v533:0:0 = 1 + v533:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_267(x, x1, x2)] = x2

The following rules are decreasing:
f_267(v384:0:0, v386:0:0, sum~cons_1~v533:0:0) -> f_267(v384:0:0, 1 + v533:0:0, v533:0:0) :|: v533:0:0 > -2 && v384:0:0 > 0 && v386:0:0 > 0 && sum~cons_1~v533:0:0 = 1 + v533:0:0
The following rules are bounded:
f_267(v384:0:0, v386:0:0, sum~cons_1~v533:0:0) -> f_267(v384:0:0, 1 + v533:0:0, v533:0:0) :|: v533:0:0 > -2 && v384:0:0 > 0 && v386:0:0 > 0 && sum~cons_1~v533:0:0 = 1 + v533:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_232(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) -> f_235(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) :|: 0 <= v268 && 1 <= v266 && 1 <= v264
f_235(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) -> f_239(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) :|: 0 = 0
f_239(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) -> f_242(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) :|: 0 = 0
f_242(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) -> f_245(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) :|: TRUE
f_245(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) -> f_248(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) :|: 0 = 0
f_248(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) -> f_252(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) :|: 0 = 0
f_252(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) -> f_256(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) :|: TRUE
f_256(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) -> f_260(v261, v262, v263, v264, v265, v268, 1, v269, v270, v271, 0, 3, 4) :|: 0 = 0
f_260(v261, v262, v263, v264, v265, v268, 1, v269, v270, v271, 0, 3, 4) -> f_265(v261, v262, v263, v264, v265, v268, 1, v392, v269, v270, v271, 0, 3, 4) :|: 1 + v392 = v268 && 0 <= 1 + v392
f_265(v261, v262, v263, v264, v265, v268, 1, v392, v269, v270, v271, 0, 3, 4) -> f_268(v261, v262, v263, v264, v265, v268, 1, v392, v269, v270, v271, 0, 3, 4) :|: TRUE
f_268(v261, v262, v263, v264, v265, v268, 1, v392, v269, v270, v271, 0, 3, 4) -> f_271(v261, v262, v263, v264, v265, v268, 1, v392, v269, v270, v271, 0, 3, 4) :|: TRUE
f_271(v261, v262, v263, v264, v265, v268, 1, v392, v269, v270, v271, 0, 3, 4) -> f_274(v261, v262, v263, v264, v265, v268, 1, v392, v269, v270, v271, 0, 3, 4) :|: TRUE
f_274(v261, v262, v263, v264, v265, v268, 1, v392, v269, v270, v271, 0, 3, 4) -> f_229(v261, v262, v263, v264, v265, v268, 1, v392, v269, v270, v271, 0, 3, 4) :|: TRUE
f_229(v261, v262, v263, v264, v265, v266, 1, v268, v269, v270, v271, 0, 3, 4) -> f_232(v261, v262, v263, v264, v265, v268, 1, v266, v269, v270, v271, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_232(v261:0, v262:0, v263:0, v264:0, v265:0, 1 + v392:0, 1, v266:0, v269:0, v270:0, v271:0, 0, 3, 4) -> f_232(v261:0, v262:0, v263:0, v264:0, v265:0, v392:0, 1, 1 + v392:0, v269:0, v270:0, v271:0, 0, 3, 4) :|: v266:0 > 0 && v392:0 > -2 && v264:0 > 0
Filtered unneeded arguments:
   f_232(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_232(x4, x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_232(v264:0, sum~cons_1~v392:0, v266:0) -> f_232(v264:0, v392:0, 1 + v392:0) :|: v392:0 > -2 && v264:0 > 0 && v266:0 > 0 && sum~cons_1~v392:0 = 1 + v392:0

----------------------------------------

(23)
Obligation:
Rules:
f_232(v264:0, sum~cons_1~v392:0, v266:0) -> f_232(v264:0, v392:0, 1 + v392:0) :|: v392:0 > -2 && v264:0 > 0 && v266:0 > 0 && sum~cons_1~v392:0 = 1 + v392:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_232(v264:0:0, sum~cons_1~v392:0:0, v266:0:0) -> f_232(v264:0:0, v392:0:0, 1 + v392:0:0) :|: v392:0:0 > -2 && v264:0:0 > 0 && v266:0:0 > 0 && sum~cons_1~v392:0:0 = 1 + v392:0:0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_232(x, x1, x2)] = x1

The following rules are decreasing:
f_232(v264:0:0, sum~cons_1~v392:0:0, v266:0:0) -> f_232(v264:0:0, v392:0:0, 1 + v392:0:0) :|: v392:0:0 > -2 && v264:0:0 > 0 && v266:0:0 > 0 && sum~cons_1~v392:0:0 = 1 + v392:0:0
The following rules are bounded:
f_232(v264:0:0, sum~cons_1~v392:0:0, v266:0:0) -> f_232(v264:0:0, v392:0:0, 1 + v392:0:0) :|: v392:0:0 > -2 && v264:0:0 > 0 && v266:0:0 > 0 && sum~cons_1~v392:0:0 = 1 + v392:0:0

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
