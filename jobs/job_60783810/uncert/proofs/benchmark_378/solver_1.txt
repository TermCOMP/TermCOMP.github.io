YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/GyLAM.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 21 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 878 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 17 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 16 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 0 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 7 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/GyLAM.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/GyLAM.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		br %8
	8:
		%9 = load %3
		%10 = icmp sgt %9 0
		br %10, %11, %14
	11:
		%12 = load %2
		%13 = icmp sgt %12 0
		br %14
	14:
		%15 = phi [0, %8], [%13, %11]
		br %15, %16, %56
	16:
		%17 = load %3
		store %17, %4
		%18 = load %2
		store %18, %5
		%19 = load %3
		%20 = icmp eq %19 0
		br %20, %21, %23
	21:
		%22 = load %3
		store %22, %3
		br %30
	23:
		%24 = load %3
		%25 = icmp slt %24 0
		br %25, %26, %29
	26:
		%27 = load %5
		%28 = sub i32 0, %27
		store %28, %5
		br %29
	29:
		br %30
	30:
		%31 = load %5
		%32 = icmp sgt %31 0
		br %32, %33, %44
	33:
		br %34
	34:
		%35 = load %5
		%36 = load %3
		%37 = icmp sge %35 %36
		br %37, %38, %42
	38:
		%39 = load %5
		%40 = load %3
		%41 = sub i32 %39, %40
		store %41, %5
		br %34
	42:
		%43 = load %5
		store %43, %3
		br %54
	44:
		br %45
	45:
		%46 = load %5
		%47 = icmp slt %46 0
		br %47, %48, %52
	48:
		%49 = load %5
		%50 = load %3
		%51 = sub i32 %49, %50
		store %51, %5
		br %45
	52:
		%53 = load %5
		store %53, %3
		br %54
	54:
		%55 = load %4
		store %55, %2
		br %8
	56:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 50 rulesP rules:
f_442(v569, v570, v571, v572, v573, v574, v575, v580, 1, v578, v576, 0, v581, v582, v583, v584, v585, v586, 3, 4) -> f_443(v569, v570, v571, v572, v573, v574, v575, v580, 1, v578, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 < v580 && 3 <= v581 && 2 <= v576
f_443(v569, v570, v571, v572, v573, v574, v575, v580, 1, v578, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_445(v569, v570, v571, v572, v573, v574, v575, v580, 1, v578, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 = 0
f_445(v569, v570, v571, v572, v573, v574, v575, v580, 1, v578, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_447(v569, v570, v571, v572, v573, v574, v575, v580, 1, v578, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: TRUE
f_447(v569, v570, v571, v572, v573, v574, v575, v580, 1, v578, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_449(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, v578, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 = 0
f_449(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, v578, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_451(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, v578, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 = 0
f_451(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, v578, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_452(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, v578, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 = 0
f_452(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, v578, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_453(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, v578, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: TRUE
f_453(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, v578, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_454(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, v578, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 = 0
f_454(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, v578, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_455(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, v578, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: TRUE
f_455(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, v578, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_456(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 = 0
f_456(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_457(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: TRUE
f_457(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_458(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 = 0
f_458(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_459(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 = 0
f_459(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_460(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: TRUE
f_460(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_461(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 = 0
f_461(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_462(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 = 0
f_462(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_463(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: TRUE
f_463(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_464(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: TRUE
f_464(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v578, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_465(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 = 0
f_465(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_466(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 = 0
f_466(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_467(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: TRUE
f_467(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_468(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: TRUE
f_468(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_469(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 = 0
f_469(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_470(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 = 0
f_470(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_471(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: 0 = 0
f_471(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_472(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) :|: TRUE
f_472(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v581, v582, v583, v584, v585, v586, 3, 2, 4) -> f_473(v569, v570, v571, v572, v573, v574, v575, v580, 1, v576, 0, v576, v581, v576, v580, v582, v583, v584, v585, v586, 3, 2, 4) :|: v580 <= v576 && v580 <= v580 && v580 <= v576 && 1 <= v569 && 1 <= v570 && 1 <= v571 && 1 <= v572 && 1 <= v573 && 1 <= v574 && 1 <= v575 && 1 <= v580 && 2 <= v576 && 1 <= v576 && 2 <= v581 && 1 <= v576 && 1 <= v580 && 4 <= v582 && 4 <= v583 && 4 <= v584 && 4 <= v585 && 4 <= v586 && v569 <= v582 && v570 <= v583 && v571 <= v584 && v572 <= v585 && v573 <= v586
f_473(v737, v738, v739, v740, v741, v742, v743, v744, 1, v746, 0, v748, v749, v750, v751, v752, v753, v754, v755, v756, 3, 2, 4) -> f_474(v737, v738, v739, v740, v741, v742, v743, v744, 1, v746, 0, v748, v750, v751, v752, v753, v754, v755, v756, 3, 2, 4) :|: 0 = 0
f_474(v737, v738, v739, v740, v741, v742, v743, v744, 1, v746, 0, v748, v750, v751, v752, v753, v754, v755, v756, 3, 2, 4) -> f_475(v737, v738, v739, v740, v741, v742, v743, v744, 1, v746, 0, v748, v751, v752, v753, v754, v755, v756, 3, 2, 4) :|: 0 = 0
f_475(v737, v738, v739, v740, v741, v742, v743, v744, 1, v746, 0, v748, v751, v752, v753, v754, v755, v756, 3, 2, 4) -> f_476(v737, v738, v739, v740, v741, v742, v743, v744, 1, v746, 0, v748, v757, v752, v753, v754, v755, v756, 3, 2, 4) :|: v757 + v744 = v748 && 0 <= v757
f_476(v737, v738, v739, v740, v741, v742, v743, v744, 1, v746, 0, v748, v757, v752, v753, v754, v755, v756, 3, 2, 4) -> f_477(v737, v738, v739, v740, v741, v742, v743, v744, 1, v746, 0, v748, v757, v752, v753, v754, v755, v756, 3, 2, 4) :|: TRUE
f_477(v737, v738, v739, v740, v741, v742, v743, v744, 1, v746, 0, v748, v757, v752, v753, v754, v755, v756, 3, 2, 4) -> f_478(v737, v738, v739, v740, v741, v742, v743, v744, 1, v746, 0, v748, v757, v752, v753, v754, v755, v756, 3, 2, 4) :|: TRUE
f_478(v737, v738, v739, v740, v741, v742, v743, v744, 1, v746, 0, v748, v757, v752, v753, v754, v755, v756, 3, 2, 4) -> f_479(v737, v738, v739, v740, v741, v742, v743, v744, 1, v746, 0, v748, v757, v752, v753, v754, v755, v756, 3, 2, 4) :|: 1 <= v737 && 1 <= v738 && 1 <= v739 && 1 <= v740 && 1 <= v741 && 1 <= v742 && 1 <= v743 && 1 <= v744 && 2 <= v746 && 1 <= v748 && 0 <= v757 && 4 <= v752 && 4 <= v753 && 4 <= v754 && 4 <= v755 && 4 <= v756 && v737 <= v752 && v738 <= v753 && v739 <= v754 && v740 <= v755 && v741 <= v756
f_479(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v796, v797, v798, v799, v800, v801, v802, 3, 2, 4) -> f_480(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) :|: 0 = 0
f_480(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) -> f_481(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) :|: 0 = 0
f_481(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) -> f_482(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) :|: v792 <= v797 && 1 <= v797 && 2 <= v796
f_481(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) -> f_483(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) :|: v797 < v792
f_482(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) -> f_484(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) :|: 0 = 0
f_484(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) -> f_486(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) :|: TRUE
f_486(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) -> f_473(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v792, v797, v798, v799, v800, v801, v802, 3, 2, 4) :|: v792 <= v797 && v792 <= v797 && v792 <= v792 && 1 <= v785 && 1 <= v786 && 1 <= v787 && 1 <= v788 && 1 <= v789 && 1 <= v790 && 1 <= v791 && 1 <= v792 && 2 <= v794 && 1 <= v797 && 2 <= v796 && 1 <= v792 && 1 <= v797 && 4 <= v798 && 4 <= v799 && 4 <= v800 && 4 <= v801 && 4 <= v802 && v785 <= v798 && v786 <= v799 && v787 <= v800 && v788 <= v801 && v789 <= v802
f_483(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) -> f_485(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) :|: 0 = 0
f_485(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) -> f_487(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) :|: TRUE
f_487(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) -> f_488(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) :|: 0 = 0
f_488(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) -> f_489(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) :|: TRUE
f_489(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) -> f_490(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) :|: TRUE
f_490(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) -> f_491(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) :|: 0 = 0
f_491(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) -> f_492(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) :|: TRUE
f_492(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) -> f_493(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) :|: TRUE
f_493(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 2, 4) -> f_441(v785, v786, v787, v788, v789, v790, v791, v792, 1, v794, 0, v797, v796, v798, v799, v800, v801, v802, 3, 4) :|: v797 < v792 && 1 <= v785 && 1 <= v786 && 1 <= v787 && 1 <= v788 && 1 <= v789 && 1 <= v790 && 1 <= v791 && 1 <= v792 && 1 <= v794 && 0 <= v797 && 1 <= v796 && 4 <= v798 && 4 <= v799 && 4 <= v800 && 4 <= v801 && 4 <= v802 && v785 <= v798 && v786 <= v799 && v787 <= v800 && v788 <= v801 && v789 <= v802
f_441(v569, v570, v571, v572, v573, v574, v575, v576, 1, v578, 0, v580, v581, v582, v583, v584, v585, v586, 3, 4) -> f_442(v569, v570, v571, v572, v573, v574, v575, v580, 1, v578, v576, 0, v581, v582, v583, v584, v585, v586, 3, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_481(v785:0, v786:0, v787:0, v788:0, v789:0, v790:0, v791:0, v757:0 + v797:0, 1, v794:0, 0, v797:0, v796:0, v798:0, v799:0, v800:0, v801:0, v802:0, 3, 2, 4) -> f_481(v785:0, v786:0, v787:0, v788:0, v789:0, v790:0, v791:0, v797:0, 1, v757:0 + v797:0, 0, v757:0, v757:0 + v797:0, v798:0, v799:0, v800:0, v801:0, v802:0, 3, 2, 4) :|: v796:0 > 2 && v797:0 > 0 && v757:0 + v797:0 > 1 && v797:0 < v757:0 + v797:0 && v785:0 > 0 && v786:0 > 0 && v787:0 > 0 && v788:0 > 0 && v789:0 > 0 && v790:0 > 0 && v791:0 > 0 && v798:0 > 3 && v799:0 > 3 && v800:0 > 3 && v801:0 > 3 && v802:0 > 3 && v794:0 > 0 && v757:0 > -1 && v798:0 >= v785:0 && v799:0 >= v786:0 && v800:0 >= v787:0 && v801:0 >= v788:0 && v802:0 >= v789:0
f_481(v785:0, v786:0, v787:0, v788:0, v789:0, v790:0, v791:0, v792:0, 1, v794:0, 0, v757:0 + v792:0, v796:0, v798:0, v799:0, v800:0, v801:0, v802:0, 3, 2, 4) -> f_481(v785:0, v786:0, v787:0, v788:0, v789:0, v790:0, v791:0, v792:0, 1, v794:0, 0, v757:0, v757:0 + v792:0, v798:0, v799:0, v800:0, v801:0, v802:0, 3, 2, 4) :|: v792:0 <= v757:0 + v792:0 && v785:0 > 0 && v786:0 > 0 && v787:0 > 0 && v788:0 > 0 && v789:0 > 0 && v790:0 > 0 && v791:0 > 0 && v792:0 > 0 && v794:0 > 1 && v757:0 + v792:0 > 0 && v796:0 > 1 && v798:0 > 3 && v799:0 > 3 && v800:0 > 3 && v801:0 > 3 && v757:0 > -1 && v802:0 > 3 && v798:0 >= v785:0 && v799:0 >= v786:0 && v800:0 >= v787:0 && v801:0 >= v788:0 && v802:0 >= v789:0
Filtered unneeded arguments:
   f_481(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_481(x1, x2, x3, x4, x5, x6, x7, x8, x10, x12, x13, x14, x15, x16, x17, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_481(v785:0, v786:0, v787:0, v788:0, v789:0, v790:0, v791:0, sum~v757:0~v797:0, v794:0, v797:0, v796:0, v798:0, v799:0, v800:0, v801:0, v802:0) -> f_481(v785:0, v786:0, v787:0, v788:0, v789:0, v790:0, v791:0, v797:0, v757:0 + v797:0, v757:0, v757:0 + v797:0, v798:0, v799:0, v800:0, v801:0, v802:0) :|: v797:0 > 0 && v796:0 > 2 && v757:0 + v797:0 > 1 && v797:0 < v757:0 + v797:0 && v785:0 > 0 && v786:0 > 0 && v787:0 > 0 && v788:0 > 0 && v789:0 > 0 && v790:0 > 0 && v791:0 > 0 && v798:0 > 3 && v799:0 > 3 && v800:0 > 3 && v801:0 > 3 && v802:0 > 3 && v794:0 > 0 && v757:0 > -1 && v798:0 >= v785:0 && v799:0 >= v786:0 && v800:0 >= v787:0 && v802:0 >= v789:0 && v801:0 >= v788:0 && sum~v757:0~v797:0 = v757:0 + v797:0
f_481(v785:0, v786:0, v787:0, v788:0, v789:0, v790:0, v791:0, v792:0, v794:0, sum~v757:0~v792:0, v796:0, v798:0, v799:0, v800:0, v801:0, v802:0) -> f_481(v785:0, v786:0, v787:0, v788:0, v789:0, v790:0, v791:0, v792:0, v794:0, v757:0, v757:0 + v792:0, v798:0, v799:0, v800:0, v801:0, v802:0) :|: v785:0 > 0 && v792:0 <= v757:0 + v792:0 && v786:0 > 0 && v787:0 > 0 && v788:0 > 0 && v789:0 > 0 && v790:0 > 0 && v791:0 > 0 && v792:0 > 0 && v794:0 > 1 && v757:0 + v792:0 > 0 && v796:0 > 1 && v798:0 > 3 && v799:0 > 3 && v800:0 > 3 && v801:0 > 3 && v757:0 > -1 && v802:0 > 3 && v798:0 >= v785:0 && v799:0 >= v786:0 && v800:0 >= v787:0 && v802:0 >= v789:0 && v801:0 >= v788:0 && sum~v757:0~v792:0 = v757:0 + v792:0

----------------------------------------

(9)
Obligation:
Rules:
f_481(v785:0, v786:0, v787:0, v788:0, v789:0, v790:0, v791:0, sum~v757:0~v797:0, v794:0, v797:0, v796:0, v798:0, v799:0, v800:0, v801:0, v802:0) -> f_481(v785:0, v786:0, v787:0, v788:0, v789:0, v790:0, v791:0, v797:0, v757:0 + v797:0, v757:0, v757:0 + v797:0, v798:0, v799:0, v800:0, v801:0, v802:0) :|: v797:0 > 0 && v796:0 > 2 && v757:0 + v797:0 > 1 && v797:0 < v757:0 + v797:0 && v785:0 > 0 && v786:0 > 0 && v787:0 > 0 && v788:0 > 0 && v789:0 > 0 && v790:0 > 0 && v791:0 > 0 && v798:0 > 3 && v799:0 > 3 && v800:0 > 3 && v801:0 > 3 && v802:0 > 3 && v794:0 > 0 && v757:0 > -1 && v798:0 >= v785:0 && v799:0 >= v786:0 && v800:0 >= v787:0 && v802:0 >= v789:0 && v801:0 >= v788:0 && sum~v757:0~v797:0 = v757:0 + v797:0
f_481(x, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_481(x, x1, x2, x3, x4, x5, x6, x7, x8, x16, x16 + x7, x11, x12, x13, x14, x15) :|: x > 0 && x7 <= x16 + x7 && x1 > 0 && x2 > 0 && x3 > 0 && x4 > 0 && x5 > 0 && x6 > 0 && x7 > 0 && x8 > 1 && x16 + x7 > 0 && x10 > 1 && x11 > 3 && x12 > 3 && x13 > 3 && x14 > 3 && x16 > -1 && x15 > 3 && x11 >= x && x12 >= x1 && x13 >= x2 && x15 >= x4 && x14 >= x3 && x9 = x16 + x7

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_481(v785:0:0, v786:0:0, v787:0:0, v788:0:0, v789:0:0, v790:0:0, v791:0:0, sum~v757:0:0~v797:0:0, v794:0:0, v797:0:0, v796:0:0, v798:0:0, v799:0:0, v800:0:0, v801:0:0, v802:0:0) -> f_481(v785:0:0, v786:0:0, v787:0:0, v788:0:0, v789:0:0, v790:0:0, v791:0:0, v797:0:0, v757:0:0 + v797:0:0, v757:0:0, v757:0:0 + v797:0:0, v798:0:0, v799:0:0, v800:0:0, v801:0:0, v802:0:0) :|: v802:0:0 >= v789:0:0 && v801:0:0 >= v788:0:0 && v800:0:0 >= v787:0:0 && v799:0:0 >= v786:0:0 && v798:0:0 >= v785:0:0 && v757:0:0 > -1 && v794:0:0 > 0 && v802:0:0 > 3 && v801:0:0 > 3 && v800:0:0 > 3 && v799:0:0 > 3 && v798:0:0 > 3 && v791:0:0 > 0 && v790:0:0 > 0 && v789:0:0 > 0 && v788:0:0 > 0 && v787:0:0 > 0 && v786:0:0 > 0 && v785:0:0 > 0 && v797:0:0 < v757:0:0 + v797:0:0 && v757:0:0 + v797:0:0 > 1 && v796:0:0 > 2 && v797:0:0 > 0 && sum~v757:0:0~v797:0:0 = v757:0:0 + v797:0:0
f_481(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, sum~x16:0~x7:0, x10:0, x11:0, x12:0, x13:0, x14:0, x15:0) -> f_481(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, x16:0, x16:0 + x7:0, x11:0, x12:0, x13:0, x14:0, x15:0) :|: x4:0 <= x15:0 && x3:0 <= x14:0 && x2:0 <= x13:0 && x1:0 <= x12:0 && x:0 <= x11:0 && x15:0 > 3 && x16:0 > -1 && x14:0 > 3 && x13:0 > 3 && x12:0 > 3 && x11:0 > 3 && x10:0 > 1 && x16:0 + x7:0 > 0 && x8:0 > 1 && x7:0 > 0 && x6:0 > 0 && x5:0 > 0 && x4:0 > 0 && x3:0 > 0 && x2:0 > 0 && x1:0 > 0 && x7:0 <= x16:0 + x7:0 && x:0 > 0 && sum~x16:0~x7:0 = x16:0 + x7:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_481 ] = f_481_10 + f_481_8

The following rules are decreasing:
f_481(v785:0:0, v786:0:0, v787:0:0, v788:0:0, v789:0:0, v790:0:0, v791:0:0, sum~v757:0:0~v797:0:0, v794:0:0, v797:0:0, v796:0:0, v798:0:0, v799:0:0, v800:0:0, v801:0:0, v802:0:0) -> f_481(v785:0:0, v786:0:0, v787:0:0, v788:0:0, v789:0:0, v790:0:0, v791:0:0, v797:0:0, v757:0:0 + v797:0:0, v757:0:0, v757:0:0 + v797:0:0, v798:0:0, v799:0:0, v800:0:0, v801:0:0, v802:0:0) :|: v802:0:0 >= v789:0:0 && v801:0:0 >= v788:0:0 && v800:0:0 >= v787:0:0 && v799:0:0 >= v786:0:0 && v798:0:0 >= v785:0:0 && v757:0:0 > -1 && v794:0:0 > 0 && v802:0:0 > 3 && v801:0:0 > 3 && v800:0:0 > 3 && v799:0:0 > 3 && v798:0:0 > 3 && v791:0:0 > 0 && v790:0:0 > 0 && v789:0:0 > 0 && v788:0:0 > 0 && v787:0:0 > 0 && v786:0:0 > 0 && v785:0:0 > 0 && v797:0:0 < v757:0:0 + v797:0:0 && v757:0:0 + v797:0:0 > 1 && v796:0:0 > 2 && v797:0:0 > 0 && sum~v757:0:0~v797:0:0 = v757:0:0 + v797:0:0
f_481(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, sum~x16:0~x7:0, x10:0, x11:0, x12:0, x13:0, x14:0, x15:0) -> f_481(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, x16:0, x16:0 + x7:0, x11:0, x12:0, x13:0, x14:0, x15:0) :|: x4:0 <= x15:0 && x3:0 <= x14:0 && x2:0 <= x13:0 && x1:0 <= x12:0 && x:0 <= x11:0 && x15:0 > 3 && x16:0 > -1 && x14:0 > 3 && x13:0 > 3 && x12:0 > 3 && x11:0 > 3 && x10:0 > 1 && x16:0 + x7:0 > 0 && x8:0 > 1 && x7:0 > 0 && x6:0 > 0 && x5:0 > 0 && x4:0 > 0 && x3:0 > 0 && x2:0 > 0 && x1:0 > 0 && x7:0 <= x16:0 + x7:0 && x:0 > 0 && sum~x16:0~x7:0 = x16:0 + x7:0

The following rules are bounded:
f_481(v785:0:0, v786:0:0, v787:0:0, v788:0:0, v789:0:0, v790:0:0, v791:0:0, sum~v757:0:0~v797:0:0, v794:0:0, v797:0:0, v796:0:0, v798:0:0, v799:0:0, v800:0:0, v801:0:0, v802:0:0) -> f_481(v785:0:0, v786:0:0, v787:0:0, v788:0:0, v789:0:0, v790:0:0, v791:0:0, v797:0:0, v757:0:0 + v797:0:0, v757:0:0, v757:0:0 + v797:0:0, v798:0:0, v799:0:0, v800:0:0, v801:0:0, v802:0:0) :|: v802:0:0 >= v789:0:0 && v801:0:0 >= v788:0:0 && v800:0:0 >= v787:0:0 && v799:0:0 >= v786:0:0 && v798:0:0 >= v785:0:0 && v757:0:0 > -1 && v794:0:0 > 0 && v802:0:0 > 3 && v801:0:0 > 3 && v800:0:0 > 3 && v799:0:0 > 3 && v798:0:0 > 3 && v791:0:0 > 0 && v790:0:0 > 0 && v789:0:0 > 0 && v788:0:0 > 0 && v787:0:0 > 0 && v786:0:0 > 0 && v785:0:0 > 0 && v797:0:0 < v757:0:0 + v797:0:0 && v757:0:0 + v797:0:0 > 1 && v796:0:0 > 2 && v797:0:0 > 0 && sum~v757:0:0~v797:0:0 = v757:0:0 + v797:0:0
f_481(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, sum~x16:0~x7:0, x10:0, x11:0, x12:0, x13:0, x14:0, x15:0) -> f_481(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, x16:0, x16:0 + x7:0, x11:0, x12:0, x13:0, x14:0, x15:0) :|: x4:0 <= x15:0 && x3:0 <= x14:0 && x2:0 <= x13:0 && x1:0 <= x12:0 && x:0 <= x11:0 && x15:0 > 3 && x16:0 > -1 && x14:0 > 3 && x13:0 > 3 && x12:0 > 3 && x11:0 > 3 && x10:0 > 1 && x16:0 + x7:0 > 0 && x8:0 > 1 && x7:0 > 0 && x6:0 > 0 && x5:0 > 0 && x4:0 > 0 && x3:0 > 0 && x2:0 > 0 && x1:0 > 0 && x7:0 <= x16:0 + x7:0 && x:0 > 0 && sum~x16:0~x7:0 = x16:0 + x7:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 11 rulesP rules:
f_317(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v58, v60, v61, v62, v63, v64, 3, 4) -> f_319(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v58, v60, v61, v62, v63, v64, 3, 4) :|: 0 = 0
f_319(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v58, v60, v61, v62, v63, v64, 3, 4) -> f_321(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v58, v60, v61, v62, v63, v64, 3, 2, 4) :|: v55 <= v59 && 1 <= v59 && 2 <= v58
f_321(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v58, v60, v61, v62, v63, v64, 3, 2, 4) -> f_324(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v58, v60, v61, v62, v63, v64, 3, 2, 4) :|: 0 = 0
f_324(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v58, v60, v61, v62, v63, v64, 3, 2, 4) -> f_327(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v58, v60, v61, v62, v63, v64, 3, 2, 4) :|: TRUE
f_327(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v58, v60, v61, v62, v63, v64, 3, 2, 4) -> f_330(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v60, v61, v62, v63, v64, 3, 4) :|: 0 = 0
f_330(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v60, v61, v62, v63, v64, 3, 4) -> f_333(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v60, v61, v62, v63, v64, 3, 4) :|: 0 = 0
f_333(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v60, v61, v62, v63, v64, 3, 4) -> f_336(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v68, v60, v61, v62, v63, v64, 3, 4) :|: v68 + v55 = v59 && 0 <= v68
f_336(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v68, v60, v61, v62, v63, v64, 3, 4) -> f_339(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v68, v60, v61, v62, v63, v64, 3, 4) :|: TRUE
f_339(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v68, v60, v61, v62, v63, v64, 3, 4) -> f_342(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v68, v60, v61, v62, v63, v64, 3, 4) :|: TRUE
f_342(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v68, v60, v61, v62, v63, v64, 3, 4) -> f_315(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v68, v60, v61, v62, v63, v64, 3, 4) :|: 1 <= v49 && 1 <= v50 && 1 <= v51 && 1 <= v52 && 1 <= v53 && 1 <= v54 && 1 <= v55 && 1 <= v59 && 0 <= v68 && 4 <= v60 && 4 <= v61 && 4 <= v62 && 4 <= v63 && 4 <= v64 && v49 <= v60 && v50 <= v61 && v51 <= v62 && v52 <= v63 && v53 <= v64
f_315(v49, v50, v51, v52, v53, v54, v55, 1, 0, v58, v59, v60, v61, v62, v63, v64, 3, 4) -> f_317(v49, v50, v51, v52, v53, v54, v55, 1, 0, v59, v58, v60, v61, v62, v63, v64, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_317(v49:0, v50:0, v51:0, v52:0, v53:0, v54:0, v55:0, 1, 0, v68:0 + v55:0, v58:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 4) -> f_317(v49:0, v50:0, v51:0, v52:0, v53:0, v54:0, v55:0, 1, 0, v68:0, v68:0 + v55:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 4) :|: v50:0 > 0 && v49:0 > 0 && v51:0 > 0 && v52:0 > 0 && v53:0 > 0 && v54:0 > 0 && v55:0 > 0 && v68:0 + v55:0 > 0 && v68:0 > -1 && v60:0 > 3 && v68:0 + v55:0 >= v55:0 && v61:0 > 3 && v58:0 > 1 && v62:0 > 3 && v63:0 > 3 && v64:0 > 3 && v60:0 >= v49:0 && v61:0 >= v50:0 && v62:0 >= v51:0 && v64:0 >= v53:0 && v63:0 >= v52:0
Filtered unneeded arguments:
   f_317(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_317(x1, x2, x3, x4, x5, x6, x7, x10, x11, x12, x13, x14, x15, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_317(v49:0, v50:0, v51:0, v52:0, v53:0, v54:0, v55:0, sum~v68:0~v55:0, v58:0, v60:0, v61:0, v62:0, v63:0, v64:0) -> f_317(v49:0, v50:0, v51:0, v52:0, v53:0, v54:0, v55:0, v68:0, v68:0 + v55:0, v60:0, v61:0, v62:0, v63:0, v64:0) :|: v49:0 > 0 && v50:0 > 0 && v51:0 > 0 && v52:0 > 0 && v53:0 > 0 && v54:0 > 0 && v55:0 > 0 && v68:0 + v55:0 > 0 && v68:0 > -1 && v60:0 > 3 && v68:0 + v55:0 >= v55:0 && v61:0 > 3 && v58:0 > 1 && v62:0 > 3 && v63:0 > 3 && v64:0 > 3 && v60:0 >= v49:0 && v61:0 >= v50:0 && v62:0 >= v51:0 && v63:0 >= v52:0 && v64:0 >= v53:0 && sum~v68:0~v55:0 = v68:0 + v55:0

----------------------------------------

(16)
Obligation:
Rules:
f_317(v49:0, v50:0, v51:0, v52:0, v53:0, v54:0, v55:0, sum~v68:0~v55:0, v58:0, v60:0, v61:0, v62:0, v63:0, v64:0) -> f_317(v49:0, v50:0, v51:0, v52:0, v53:0, v54:0, v55:0, v68:0, v68:0 + v55:0, v60:0, v61:0, v62:0, v63:0, v64:0) :|: v49:0 > 0 && v50:0 > 0 && v51:0 > 0 && v52:0 > 0 && v53:0 > 0 && v54:0 > 0 && v55:0 > 0 && v68:0 + v55:0 > 0 && v68:0 > -1 && v60:0 > 3 && v68:0 + v55:0 >= v55:0 && v61:0 > 3 && v58:0 > 1 && v62:0 > 3 && v63:0 > 3 && v64:0 > 3 && v60:0 >= v49:0 && v61:0 >= v50:0 && v62:0 >= v51:0 && v63:0 >= v52:0 && v64:0 >= v53:0 && sum~v68:0~v55:0 = v68:0 + v55:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_317(v49:0:0, v50:0:0, v51:0:0, v52:0:0, v53:0:0, v54:0:0, v55:0:0, sum~v68:0:0~v55:0:0, v58:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0) -> f_317(v49:0:0, v50:0:0, v51:0:0, v52:0:0, v53:0:0, v54:0:0, v55:0:0, v68:0:0, v68:0:0 + v55:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0) :|: v63:0:0 >= v52:0:0 && v64:0:0 >= v53:0:0 && v62:0:0 >= v51:0:0 && v61:0:0 >= v50:0:0 && v60:0:0 >= v49:0:0 && v64:0:0 > 3 && v63:0:0 > 3 && v62:0:0 > 3 && v58:0:0 > 1 && v61:0:0 > 3 && v68:0:0 + v55:0:0 >= v55:0:0 && v60:0:0 > 3 && v68:0:0 > -1 && v68:0:0 + v55:0:0 > 0 && v55:0:0 > 0 && v54:0:0 > 0 && v53:0:0 > 0 && v52:0:0 > 0 && v51:0:0 > 0 && v50:0:0 > 0 && v49:0:0 > 0 && sum~v68:0:0~v55:0:0 = v68:0:0 + v55:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_317 ] = f_317_8

The following rules are decreasing:
f_317(v49:0:0, v50:0:0, v51:0:0, v52:0:0, v53:0:0, v54:0:0, v55:0:0, sum~v68:0:0~v55:0:0, v58:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0) -> f_317(v49:0:0, v50:0:0, v51:0:0, v52:0:0, v53:0:0, v54:0:0, v55:0:0, v68:0:0, v68:0:0 + v55:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0) :|: v63:0:0 >= v52:0:0 && v64:0:0 >= v53:0:0 && v62:0:0 >= v51:0:0 && v61:0:0 >= v50:0:0 && v60:0:0 >= v49:0:0 && v64:0:0 > 3 && v63:0:0 > 3 && v62:0:0 > 3 && v58:0:0 > 1 && v61:0:0 > 3 && v68:0:0 + v55:0:0 >= v55:0:0 && v60:0:0 > 3 && v68:0:0 > -1 && v68:0:0 + v55:0:0 > 0 && v55:0:0 > 0 && v54:0:0 > 0 && v53:0:0 > 0 && v52:0:0 > 0 && v51:0:0 > 0 && v50:0:0 > 0 && v49:0:0 > 0 && sum~v68:0:0~v55:0:0 = v68:0:0 + v55:0:0

The following rules are bounded:
f_317(v49:0:0, v50:0:0, v51:0:0, v52:0:0, v53:0:0, v54:0:0, v55:0:0, sum~v68:0:0~v55:0:0, v58:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0) -> f_317(v49:0:0, v50:0:0, v51:0:0, v52:0:0, v53:0:0, v54:0:0, v55:0:0, v68:0:0, v68:0:0 + v55:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0) :|: v63:0:0 >= v52:0:0 && v64:0:0 >= v53:0:0 && v62:0:0 >= v51:0:0 && v61:0:0 >= v50:0:0 && v60:0:0 >= v49:0:0 && v64:0:0 > 3 && v63:0:0 > 3 && v62:0:0 > 3 && v58:0:0 > 1 && v61:0:0 > 3 && v68:0:0 + v55:0:0 >= v55:0:0 && v60:0:0 > 3 && v68:0:0 > -1 && v68:0:0 + v55:0:0 > 0 && v55:0:0 > 0 && v54:0:0 > 0 && v53:0:0 > 0 && v52:0:0 > 0 && v51:0:0 > 0 && v50:0:0 > 0 && v49:0:0 > 0 && sum~v68:0:0~v55:0:0 = v68:0:0 + v55:0:0


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
