YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/pZR6T.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 611 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 28 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 28 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 12 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/pZR6T.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/pZR6T.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = icmp ne %7 0
		br %8, %9, %10
	9:
		store 1, %4
		br %11
	10:
		store -1, %4
		br %11
	11:
		%12 = load %4
		%13 = icmp sgt %12 0
		br %13, %14, %17
	14:
		%15 = load %4
		%16 = add i32 %15, 1
		store %16, %4
		br %20
	17:
		%18 = load %4
		%19 = add i32 %18, -1
		store %19, %4
		br %20
	20:
		%21 = load %4
		%22 = icmp sgt %21 0
		br %22, %23, %26
	23:
		%24 = load %4
		%25 = add i32 %24, 1
		store %25, %4
		br %29
	26:
		%27 = load %4
		%28 = add i32 %27, -1
		store %28, %4
		br %29
	29:
		%30 = load %4
		%31 = icmp sgt %30 0
		br %31, %32, %35
	32:
		%33 = load %4
		%34 = add i32 %33, 1
		store %34, %4
		br %38
	35:
		%36 = load %4
		%37 = add i32 %36, -1
		store %37, %4
		br %38
	38:
		%39 = load %4
		%40 = icmp sgt %39 0
		br %40, %41, %44
	41:
		%42 = load %4
		%43 = add i32 %42, 1
		store %43, %4
		br %47
	44:
		%45 = load %4
		%46 = add i32 %45, -1
		store %46, %4
		br %47
	47:
		%48 = load %4
		%49 = icmp sgt %48 0
		br %49, %50, %53
	50:
		%51 = load %4
		%52 = add i32 %51, 1
		store %52, %4
		br %56
	53:
		%54 = load %4
		%55 = add i32 %54, -1
		store %55, %4
		br %56
	56:
		%57 = load %4
		%58 = icmp sgt %57 0
		br %58, %59, %62
	59:
		%60 = load %4
		%61 = add i32 %60, 1
		store %61, %4
		br %65
	62:
		%63 = load %4
		%64 = add i32 %63, -1
		store %64, %4
		br %65
	65:
		%66 = load %4
		%67 = icmp sgt %66 0
		br %67, %68, %71
	68:
		%69 = load %4
		%70 = add i32 %69, 1
		store %70, %4
		br %74
	71:
		%72 = load %4
		%73 = add i32 %72, -1
		store %73, %4
		br %74
	74:
		%75 = load %4
		%76 = icmp sgt %75 0
		br %76, %77, %80
	77:
		%78 = load %4
		%79 = add i32 %78, 1
		store %79, %4
		br %83
	80:
		%81 = load %4
		%82 = add i32 %81, -1
		store %82, %4
		br %83
	83:
		br %84
	84:
		%85 = load %2
		%86 = icmp slt %85 100
		br %86, %87, %90
	87:
		%88 = load %3
		%89 = icmp slt %88 100
		br %90
	90:
		%91 = phi [0, %84], [%89, %87]
		br %91, %92, %99
	92:
		%93 = load %2
		%94 = load %4
		%95 = add i32 %93, %94
		store %95, %2
		%96 = load %3
		%97 = load %4
		%98 = sub i32 %96, %97
		store %98, %3
		br %84
	99:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_661(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v957, v955, v959, v960, v961, v962, v963, 3, 9, 99, 90, 108, 4) -> f_664(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v957, v955, v959, v960, v961, v962, v963, 3, 9, 99, 90, 108, 4) :|: 0 = 0
f_664(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v957, v955, v959, v960, v961, v962, v963, 3, 9, 99, 90, 108, 4) -> f_667(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v957, v955, v959, v960, v961, v962, v963, 3, 9, 99, 90, 108, 4) :|: TRUE
f_667(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v957, v955, v959, v960, v961, v962, v963, 3, 9, 99, 90, 108, 4) -> f_670(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v955, v957, v960, v961, v962, v963, 3, 9, 99, 90, 108, 4) :|: 0 = 0
f_670(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v955, v957, v960, v961, v962, v963, 3, 9, 99, 90, 108, 4) -> f_673(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v955, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4) :|: v959 < 100 && v957 <= 90
f_673(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v955, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4) -> f_676(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v955, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4) :|: 0 = 0
f_676(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v955, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4) -> f_679(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v955, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4) :|: 0 = 0
f_679(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v955, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4) -> f_682(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v955, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4) :|: TRUE
f_682(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v955, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4) -> f_685(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4) :|: 0 = 0
f_685(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4) -> f_687(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4) :|: 0 = 0
f_687(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4) -> f_689(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v1269, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4, 81) :|: 9 + v1269 = v958 && v1269 <= 81
f_689(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v1269, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4, 81) -> f_691(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v1269, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4, 81) :|: TRUE
f_691(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v1269, v957, v960, v961, v962, v963, 3, 9, 99, 90, 4, 81) -> f_693(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v1269, v960, v961, v962, v963, 3, 9, 99, 90, 4, 81) :|: 0 = 0
f_693(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v1269, v960, v961, v962, v963, 3, 9, 99, 90, 4, 81) -> f_695(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v1269, v960, v961, v962, v963, 3, 9, 99, 90, 4, 81) :|: 0 = 0
f_695(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v1269, v960, v961, v962, v963, 3, 9, 99, 90, 4, 81) -> f_697(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v1269, v1273, v960, v961, v962, v963, 3, 9, 99, 90, 4, 81, 108) :|: v1273 = 9 + v959 && v1273 <= 108
f_697(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v1269, v1273, v960, v961, v962, v963, 3, 9, 99, 90, 4, 81, 108) -> f_699(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v1269, v1273, v960, v961, v962, v963, 3, 9, 99, 90, 4, 81, 108) :|: TRUE
f_699(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v1269, v1273, v960, v961, v962, v963, 3, 9, 99, 90, 4, 81, 108) -> f_701(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v1269, v1273, v960, v961, v962, v963, 3, 9, 99, 90, 4, 81, 108) :|: TRUE
f_701(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v1269, v1273, v960, v961, v962, v963, 3, 9, 99, 90, 4, 81, 108) -> f_659(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v959, v1269, v1273, v960, v961, v962, v963, 3, 9, 99, 90, 108, 4) :|: TRUE
f_659(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v955, 1, v957, v958, v959, v960, v961, v962, v963, 3, 9, 99, 90, 108, 4) -> f_661(v939, v940, v941, v942, v943, v944, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v958, 1, v957, v955, v959, v960, v961, v962, v963, 3, 9, 99, 90, 108, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_661(v939:0, v940:0, v941:0, v942:0, v943:0, v944:0, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, 9 + v1269:0, 1, v957:0, v955:0, v959:0, v960:0, v961:0, v962:0, v963:0, 3, 9, 99, 90, 108, 4) -> f_661(v939:0, v940:0, v941:0, v942:0, v943:0, v944:0, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, v1269:0, 1, v959:0, 9 + v1269:0, 9 + v959:0, v960:0, v961:0, v962:0, v963:0, 3, 9, 99, 90, 108, 4) :|: v957:0 < 91 && v959:0 < 100 && v1269:0 < 82
Filtered unneeded arguments:
   f_661(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_661(x17, x19, x21)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_661(sum~cons_9~v1269:0, v957:0, v959:0) -> f_661(v1269:0, v959:0, 9 + v959:0) :|: v959:0 < 100 && v1269:0 < 82 && v957:0 < 91 && sum~cons_9~v1269:0 = 9 + v1269:0

----------------------------------------

(9)
Obligation:
Rules:
f_661(sum~cons_9~v1269:0, v957:0, v959:0) -> f_661(v1269:0, v959:0, 9 + v959:0) :|: v959:0 < 100 && v1269:0 < 82 && v957:0 < 91 && sum~cons_9~v1269:0 = 9 + v1269:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_661(sum~cons_9~v1269:0:0, v957:0:0, v959:0:0) -> f_661(v1269:0:0, v959:0:0, 9 + v959:0:0) :|: v959:0:0 < 100 && v1269:0:0 < 82 && v957:0:0 < 91 && sum~cons_9~v1269:0:0 = 9 + v1269:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_661 ] = -1/9*f_661_3

The following rules are decreasing:
f_661(sum~cons_9~v1269:0:0, v957:0:0, v959:0:0) -> f_661(v1269:0:0, v959:0:0, 9 + v959:0:0) :|: v959:0:0 < 100 && v1269:0:0 < 82 && v957:0:0 < 91 && sum~cons_9~v1269:0:0 = 9 + v1269:0:0

The following rules are bounded:
f_661(sum~cons_9~v1269:0:0, v957:0:0, v959:0:0) -> f_661(v1269:0:0, v959:0:0, 9 + v959:0:0) :|: v959:0:0 < 100 && v1269:0:0 < 82 && v957:0:0 < 91 && sum~cons_9~v1269:0:0 = 9 + v1269:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_660(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v908, v907, v910, v911, v912, v913, v914, 0, 99, 108, 90) -> f_662(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v908, v907, v910, v911, v912, v913, v914, 0, 99, 90) :|: v909 < 100 && v907 <= 90
f_662(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v908, v907, v910, v911, v912, v913, v914, 0, 99, 90) -> f_665(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v908, v907, v910, v911, v912, v913, v914, 0, 99, 90) :|: 0 = 0
f_665(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v908, v907, v910, v911, v912, v913, v914, 0, 99, 90) -> f_668(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v908, v907, v910, v911, v912, v913, v914, 0, 99, 90) :|: TRUE
f_668(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v908, v907, v910, v911, v912, v913, v914, 0, 99, 90) -> f_671(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v907, v908, v911, v912, v913, v914, 0, 99, 90) :|: 0 = 0
f_671(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v907, v908, v911, v912, v913, v914, 0, 99, 90) -> f_675(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v907, v908, v911, v912, v913, v914, 0, 99, 90) :|: 0 = 0
f_675(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v907, v908, v911, v912, v913, v914, 0, 99, 90) -> f_678(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v907, v908, v911, v912, v913, v914, 0, 99, 90) :|: 0 = 0
f_678(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v907, v908, v911, v912, v913, v914, 0, 99, 90) -> f_681(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v907, v908, v911, v912, v913, v914, 0, 99, 90) :|: TRUE
f_681(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v907, v908, v911, v912, v913, v914, 0, 99, 90) -> f_684(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v908, v911, v912, v913, v914, 0, 99, 90) :|: 0 = 0
f_684(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v908, v911, v912, v913, v914, 0, 99, 90) -> f_686(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v908, v911, v912, v913, v914, 0, 99, 90) :|: 0 = 0
f_686(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v908, v911, v912, v913, v914, 0, 99, 90) -> f_688(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v1268, v908, v911, v912, v913, v914, 0, 99, 90, 108) :|: v1268 = 9 + v909 && v1268 <= 108
f_688(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v1268, v908, v911, v912, v913, v914, 0, 99, 90, 108) -> f_690(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v1268, v908, v911, v912, v913, v914, 0, 99, 90, 108) :|: TRUE
f_690(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v1268, v908, v911, v912, v913, v914, 0, 99, 90, 108) -> f_692(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v1268, v911, v912, v913, v914, 0, 99, 90, 108) :|: 0 = 0
f_692(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v1268, v911, v912, v913, v914, 0, 99, 90, 108) -> f_694(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v1268, v911, v912, v913, v914, 0, 99, 90, 108) :|: 0 = 0
f_694(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v1268, v911, v912, v913, v914, 0, 99, 90, 108) -> f_696(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v1268, v1272, v911, v912, v913, v914, 0, 99, 90, 108, 81) :|: 9 + v1272 = v910 && v1272 <= 81
f_696(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v1268, v1272, v911, v912, v913, v914, 0, 99, 90, 108, 81) -> f_698(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v1268, v1272, v911, v912, v913, v914, 0, 99, 90, 108, 81) :|: TRUE
f_698(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v1268, v1272, v911, v912, v913, v914, 0, 99, 90, 108, 81) -> f_700(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v1268, v1272, v911, v912, v913, v914, 0, 99, 90, 108, 81) :|: TRUE
f_700(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v1268, v1272, v911, v912, v913, v914, 0, 99, 90, 108, 81) -> f_657(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v910, v1268, v1272, v911, v912, v913, v914, 0, 99, 108, 90) :|: TRUE
f_657(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v907, v908, v909, v910, v911, v912, v913, v914, 0, 99, 108, 90) -> f_660(v891, v892, v893, v894, v895, v896, v897, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909, v908, v907, v910, v911, v912, v913, v914, 0, 99, 108, 90) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_660(v891:0, v892:0, v893:0, v894:0, v895:0, v896:0, v897:0, 1, 2, 3, 4, 5, 6, 7, 8, 9, v909:0, v908:0, v907:0, 9 + v1272:0, v911:0, v912:0, v913:0, v914:0, 0, 99, 108, 90) -> f_660(v891:0, v892:0, v893:0, v894:0, v895:0, v896:0, v897:0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9 + v909:0, 9 + v1272:0, v909:0, v1272:0, v911:0, v912:0, v913:0, v914:0, 0, 99, 108, 90) :|: v907:0 < 91 && v909:0 < 100 && v1272:0 < 82
Filtered unneeded arguments:
   f_660(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_660(x17, x19, x20)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_660(v909:0, v907:0, sum~cons_9~v1272:0) -> f_660(9 + v909:0, v909:0, v1272:0) :|: v909:0 < 100 && v1272:0 < 82 && v907:0 < 91 && sum~cons_9~v1272:0 = 9 + v1272:0

----------------------------------------

(16)
Obligation:
Rules:
f_660(v909:0, v907:0, sum~cons_9~v1272:0) -> f_660(9 + v909:0, v909:0, v1272:0) :|: v909:0 < 100 && v1272:0 < 82 && v907:0 < 91 && sum~cons_9~v1272:0 = 9 + v1272:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_660(v909:0:0, v907:0:0, sum~cons_9~v1272:0:0) -> f_660(9 + v909:0:0, v909:0:0, v1272:0:0) :|: v909:0:0 < 100 && v1272:0:0 < 82 && v907:0:0 < 91 && sum~cons_9~v1272:0:0 = 9 + v1272:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_660 ] = -1/9*f_660_1

The following rules are decreasing:
f_660(v909:0:0, v907:0:0, sum~cons_9~v1272:0:0) -> f_660(9 + v909:0:0, v909:0:0, v1272:0:0) :|: v909:0:0 < 100 && v1272:0:0 < 82 && v907:0:0 < 91 && sum~cons_9~v1272:0:0 = 9 + v1272:0:0

The following rules are bounded:
f_660(v909:0:0, v907:0:0, sum~cons_9~v1272:0:0) -> f_660(9 + v909:0:0, v909:0:0, v1272:0:0) :|: v909:0:0 < 100 && v1272:0:0 < 82 && v907:0:0 < 91 && sum~cons_9~v1272:0:0 = 9 + v1272:0:0


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
