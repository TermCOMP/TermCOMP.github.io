YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ZH7Gs.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2958 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 62 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 11 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (17) YES
    (18) LLVM Symbolic Execution SCC
        (19) SCC2IRS [SOUND, 25 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (24) YES
    (25) LLVM Symbolic Execution SCC
        (26) SCC2IRS [SOUND, 34 ms]
        (27) IntTRS
        (28) TerminationGraphProcessor [EQUIVALENT, 3 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/ZH7Gs.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/ZH7Gs.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %7
		%14 = load %3
		%15 = load %5
		store %14, %15
		%16 = load %4
		%17 = load %6
		store %16, %17
		%18 = load %7
		store 0, %18
		br %19
	19:
		%20 = load %5
		%21 = load %20
		%22 = icmp sge %21 0
		br %22, %23, %45
	23:
		%24 = load %6
		store 1, %24
		br %25
	25:
		%26 = load %5
		%27 = load %26
		%28 = load %6
		%29 = load %28
		%30 = icmp sgt %27 %29
		br %30, %31, %40
	31:
		%32 = load %6
		%33 = load %32
		%34 = mul i32 2, %33
		%35 = load %6
		store %34, %35
		%36 = load %7
		%37 = load %36
		%38 = add i32 %37, 1
		%39 = load %7
		store %38, %39
		br %25
	40:
		%41 = load %5
		%42 = load %41
		%43 = sub i32 %42, 1
		%44 = load %5
		store %43, %44
		br %19
	45:
		%46 = load %7
		%47 = load %46
		ret %47

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 70
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 50 rulesP rules:
f_735(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v950, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_736(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_736(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_737(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: v966 = 2 * v949 && 2 <= v966
f_737(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_738(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_738(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_739(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: TRUE
f_739(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_740(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_740(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_741(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_741(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_742(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: v968 = 1 + v953 && 2 <= v968
f_742(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_743(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_743(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_744(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: TRUE
f_744(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_745(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: TRUE
f_745(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_746(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_746(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_747(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_747(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_748(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_748(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_749(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, v949, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_749(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, v949, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_750(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, v949, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: v966 < v947 && 3 <= v947 && 4 <= v954 && 4 <= v937
f_749(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, v949, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_751(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, v949, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: v947 <= v966
f_750(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, v949, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_752(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, v949, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_752(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, v949, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_754(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, v949, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: TRUE
f_754(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, v949, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_734(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: TRUE
f_734(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v950, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_735(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v949, v950, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_751(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, v949, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 0, 3, 7, 2, 4, 8) -> f_753(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, 0, v949, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 3, 7, 2, 4, 8) :|: 0 = 0
f_753(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, 0, v949, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 3, 7, 2, 4, 8) -> f_755(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, 0, v949, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 3, 7, 2, 4, 8) :|: TRUE
f_755(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, 0, v949, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 3, 7, 2, 4, 8) -> f_780(v937, v938, v939, v940, v941, v942, v943, v944, v945, v946, v947, 1, v966, 0, v949, v966, v953, v968, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 3, 7, 2, 4, 8) :|: TRUE
f_780(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 1, v1282, 0, v1284, v1285, v1286, v1287, v1288, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) -> f_781(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 1, v1282, 0, v1284, v1285, v1286, v1287, v1288, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) :|: 0 = 0
f_781(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 1, v1282, 0, v1284, v1285, v1286, v1287, v1288, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) -> f_782(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 1, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) :|: 0 = 0
f_782(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 1, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) -> f_783(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 1, v1282, 0, v1284, v1285, v1286, v1287, v1299, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) :|: 1 + v1299 = v1280 && 0 <= 1 + v1299
f_783(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 1, v1282, 0, v1284, v1285, v1286, v1287, v1299, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) -> f_784(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 1, v1282, 0, v1284, v1285, v1286, v1287, v1299, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) :|: 0 = 0
f_784(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 1, v1282, 0, v1284, v1285, v1286, v1287, v1299, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) -> f_785(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 1, v1282, 0, v1284, v1285, v1286, v1287, v1299, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) :|: TRUE
f_785(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 1, v1282, 0, v1284, v1285, v1286, v1287, v1299, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) -> f_786(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 1, v1282, 0, v1284, v1285, v1286, v1287, v1299, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) :|: TRUE
f_786(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 1, v1282, 0, v1284, v1285, v1286, v1287, v1299, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) -> f_787(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 1, v1282, 0, v1284, v1285, v1286, v1287, v1299, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) :|: 0 = 0
f_787(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 1, v1282, 0, v1284, v1285, v1286, v1287, v1299, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) -> f_788(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1299, 1, v1280, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) :|: 0 = 0
f_788(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1299, 1, v1280, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) -> f_789(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1299, 1, v1280, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) :|: 0 <= v1299 && 1 <= v1280
f_789(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1299, 1, v1280, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) -> f_791(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1299, 1, v1280, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) :|: 0 = 0
f_791(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1299, 1, v1280, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) -> f_793(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1299, 1, v1280, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) :|: TRUE
f_793(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1299, 1, v1280, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) -> f_795(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1299, 1, v1280, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) :|: 0 = 0
f_795(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1299, 1, v1280, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) -> f_797(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1299, 1, v1280, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) :|: TRUE
f_797(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1299, 1, v1280, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) -> f_799(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1299, 1, v1280, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) :|: TRUE
f_799(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1299, 1, v1280, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) -> f_769(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1299, 1, v1280, v1282, 0, v1284, v1285, v1286, v1287, v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, 3, 7, 2, 4, 8) :|: TRUE
f_769(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, v1162, v1163, 0, v1165, v1166, v1167, v1168, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) -> f_770(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, v1162, v1163, 0, v1165, v1166, v1167, v1168, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) :|: 0 = 0
f_770(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, v1162, v1163, 0, v1165, v1166, v1167, v1168, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) -> f_771(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, v1163, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) :|: 0 = 0
f_771(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, v1163, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) -> f_772(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, v1163, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) :|: 0 = 0
f_772(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, v1163, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) -> f_773(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) :|: 0 = 0
f_773(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) -> f_774(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) :|: 1 < v1160 && 3 <= v1162 && 3 <= v1150 && 4 <= v1166 && 2 <= v1165
f_773(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) -> f_775(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) :|: v1160 <= 1 && v1162 <= 2
f_774(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) -> f_776(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_776(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, 3, 7, 2, 4, 8) -> f_778(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, 3, 7, 2, 4, 8) :|: TRUE
f_778(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, 3, 7, 2, 4, 8) -> f_734(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, 1, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, 3, 7, 2, 4, 8) :|: TRUE
f_775(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) -> f_777(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) :|: 0 = 0
f_777(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) -> f_779(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) :|: TRUE
f_779(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) -> f_780(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, 1, 1, 0, v1165, v1166, v1167, v1168, v1162, v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 3, 7, 2, 4, 8) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_735(v937:0, v938:0, v939:0, v940:0, v941:0, v942:0, v943:0, v944:0, v945:0, v946:0, 1 + v1299:0, 1, v949:0, v950:0, v951:0, v952:0, v953:0, v954:0, v955:0, v956:0, v957:0, v958:0, v959:0, v960:0, v961:0, v962:0, v963:0, v964:0, 0, 3, 7, 2, 4, 8) -> f_773(v937:0, v938:0, v939:0, v940:0, v941:0, v942:0, v943:0, v944:0, v945:0, v946:0, v1299:0, 1, 0, v949:0, 2 * v949:0, v953:0, 1 + v953:0, 1 + v1299:0, v955:0, v956:0, v957:0, v958:0, v959:0, v960:0, v961:0, v962:0, v963:0, v964:0, 3, 7, 2, 4, 8) :|: v1299:0 > -1 && 2 * v949:0 > 1 && v953:0 > 0 && 2 * v949:0 >= 1 + v1299:0
f_735(v937:0, v938:0, v939:0, v940:0, v941:0, v942:0, v943:0, v944:0, v945:0, v946:0, v947:0, 1, v949:0, v950:0, v951:0, v952:0, v953:0, v954:0, v955:0, v956:0, v957:0, v958:0, v959:0, v960:0, v961:0, v962:0, v963:0, v964:0, 0, 3, 7, 2, 4, 8) -> f_735(v937:0, v938:0, v939:0, v940:0, v941:0, v942:0, v943:0, v944:0, v945:0, v946:0, v947:0, 1, 2 * v949:0, v949:0, 2 * v949:0, v953:0, 1 + v953:0, v954:0, v955:0, v956:0, v957:0, v958:0, v959:0, v960:0, v961:0, v962:0, v963:0, v964:0, 0, 3, 7, 2, 4, 8) :|: 2 * v949:0 > 1 && v953:0 > 0 && v947:0 > 2 && v947:0 > 2 * v949:0 && v937:0 > 3 && v954:0 > 3
f_773(v1150:0, v1151:0, v1152:0, v1153:0, v1154:0, v1155:0, v1156:0, v1157:0, v1158:0, v1159:0, v1160:0, 1, 0, v1165:0, v1166:0, v1167:0, v1168:0, v1162:0, v1169:0, v1170:0, v1171:0, v1172:0, v1173:0, v1174:0, v1175:0, v1176:0, v1177:0, v1178:0, 3, 7, 2, 4, 8) -> f_735(v1150:0, v1151:0, v1152:0, v1153:0, v1154:0, v1155:0, v1156:0, v1157:0, v1158:0, v1159:0, v1160:0, 1, 1, v1165:0, v1166:0, v1167:0, v1168:0, v1162:0, v1169:0, v1170:0, v1171:0, v1172:0, v1173:0, v1174:0, v1175:0, v1176:0, v1177:0, v1178:0, 0, 3, 7, 2, 4, 8) :|: v1162:0 > 2 && v1160:0 > 1 && v1150:0 > 2 && v1165:0 > 1 && v1166:0 > 3
f_773(v1150:0, v1151:0, v1152:0, v1153:0, v1154:0, v1155:0, v1156:0, v1157:0, v1158:0, v1159:0, 1 + v1299:0, 1, 0, v1165:0, v1166:0, v1167:0, v1168:0, v1162:0, v1169:0, v1170:0, v1171:0, v1172:0, v1173:0, v1174:0, v1175:0, v1176:0, v1177:0, v1178:0, 3, 7, 2, 4, 8) -> f_773(v1150:0, v1151:0, v1152:0, v1153:0, v1154:0, v1155:0, v1156:0, v1157:0, v1158:0, v1159:0, v1299:0, 1, 0, v1165:0, v1166:0, v1167:0, v1168:0, 1 + v1299:0, v1169:0, v1170:0, v1171:0, v1172:0, v1173:0, v1174:0, v1175:0, v1176:0, v1177:0, v1178:0, 3, 7, 2, 4, 8) :|: v1299:0 > -1 && v1299:0 < 1 && v1162:0 < 3
Filtered unneeded arguments:
   f_735(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34) -> f_735(x1, x11, x13, x17, x18)
   f_773(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) -> f_773(x1, x11, x14, x15, x17, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_735(v937:0, sum~cons_1~v1299:0, v949:0, v953:0, v954:0) -> f_773(v937:0, v1299:0, v949:0, 2 * v949:0, 1 + v953:0, 1 + v1299:0) :|: 2 * v949:0 > 1 && v1299:0 > -1 && 2 * v949:0 >= 1 + v1299:0 && v953:0 > 0 && sum~cons_1~v1299:0 = 1 + v1299:0
f_735(v937:0, v947:0, v949:0, v953:0, v954:0) -> f_735(v937:0, v947:0, 2 * v949:0, 1 + v953:0, v954:0) :|: v953:0 > 0 && 2 * v949:0 > 1 && v947:0 > 2 && v947:0 > 2 * v949:0 && v954:0 > 3 && v937:0 > 3
f_773(v1150:0, v1160:0, v1165:0, v1166:0, v1168:0, v1162:0) -> f_735(v1150:0, v1160:0, 1, v1168:0, v1162:0) :|: v1160:0 > 1 && v1162:0 > 2 && v1150:0 > 2 && v1166:0 > 3 && v1165:0 > 1
f_773(v1150:0, sum~cons_1~v1299:0, v1165:0, v1166:0, v1168:0, v1162:0) -> f_773(v1150:0, v1299:0, v1165:0, v1166:0, v1168:0, 1 + v1299:0) :|: v1299:0 < 1 && v1162:0 < 3 && v1299:0 > -1 && sum~cons_1~v1299:0 = 1 + v1299:0

----------------------------------------

(9)
Obligation:
Rules:
f_735(v937:0, sum~cons_1~v1299:0, v949:0, v953:0, v954:0) -> f_773(v937:0, v1299:0, v949:0, 2 * v949:0, 1 + v953:0, 1 + v1299:0) :|: 2 * v949:0 > 1 && v1299:0 > -1 && 2 * v949:0 >= 1 + v1299:0 && v953:0 > 0 && sum~cons_1~v1299:0 = 1 + v1299:0
f_735(x, x1, x2, x3, x4) -> f_735(x, x1, 2 * x2, 1 + x3, x4) :|: x3 > 0 && 2 * x2 > 1 && x1 > 2 && x1 > 2 * x2 && x4 > 3 && x > 3
f_773(v1150:0, v1160:0, v1165:0, v1166:0, v1168:0, v1162:0) -> f_735(v1150:0, v1160:0, 1, v1168:0, v1162:0) :|: v1160:0 > 1 && v1162:0 > 2 && v1150:0 > 2 && v1166:0 > 3 && v1165:0 > 1
f_773(x5, x6, x7, x8, x9, x10) -> f_773(x5, x11, x7, x8, x9, 1 + x11) :|: x11 < 1 && x10 < 3 && x11 > -1 && x6 = 1 + x11

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_773(x5:0, sum~cons_1~x11:0, x7:0, x8:0, x9:0, x10:0) -> f_773(x5:0, x11:0, x7:0, x8:0, x9:0, 1 + x11:0) :|: x11:0 < 1 && x10:0 < 3 && x11:0 > -1 && sum~cons_1~x11:0 = 1 + x11:0
f_735(v937:0:0, sum~cons_1~v1299:0:0, v949:0:0, v953:0:0, v954:0:0) -> f_773(v937:0:0, v1299:0:0, v949:0:0, 2 * v949:0:0, 1 + v953:0:0, 1 + v1299:0:0) :|: 2 * v949:0:0 >= 1 + v1299:0:0 && v953:0:0 > 0 && v1299:0:0 > -1 && 2 * v949:0:0 > 1 && sum~cons_1~v1299:0:0 = 1 + v1299:0:0
f_735(x:0, x1:0, x2:0, x3:0, x4:0) -> f_735(x:0, x1:0, 2 * x2:0, 1 + x3:0, x4:0) :|: x4:0 > 3 && x:0 > 3 && x1:0 > 2 * x2:0 && x1:0 > 2 && 2 * x2:0 > 1 && x3:0 > 0
f_773(v1150:0:0, v1160:0:0, v1165:0:0, v1166:0:0, v1168:0:0, v1162:0:0) -> f_735(v1150:0:0, v1160:0:0, 1, v1168:0:0, v1162:0:0) :|: v1166:0:0 > 3 && v1165:0:0 > 1 && v1150:0:0 > 2 && v1162:0:0 > 2 && v1160:0:0 > 1

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_773 ] = 2*f_773_2
[ f_735 ] = 2*f_735_2 + -1

The following rules are decreasing:
f_773(x5:0, sum~cons_1~x11:0, x7:0, x8:0, x9:0, x10:0) -> f_773(x5:0, x11:0, x7:0, x8:0, x9:0, 1 + x11:0) :|: x11:0 < 1 && x10:0 < 3 && x11:0 > -1 && sum~cons_1~x11:0 = 1 + x11:0
f_735(v937:0:0, sum~cons_1~v1299:0:0, v949:0:0, v953:0:0, v954:0:0) -> f_773(v937:0:0, v1299:0:0, v949:0:0, 2 * v949:0:0, 1 + v953:0:0, 1 + v1299:0:0) :|: 2 * v949:0:0 >= 1 + v1299:0:0 && v953:0:0 > 0 && v1299:0:0 > -1 && 2 * v949:0:0 > 1 && sum~cons_1~v1299:0:0 = 1 + v1299:0:0
f_773(v1150:0:0, v1160:0:0, v1165:0:0, v1166:0:0, v1168:0:0, v1162:0:0) -> f_735(v1150:0:0, v1160:0:0, 1, v1168:0:0, v1162:0:0) :|: v1166:0:0 > 3 && v1165:0:0 > 1 && v1150:0:0 > 2 && v1162:0:0 > 2 && v1160:0:0 > 1

The following rules are bounded:
f_773(x5:0, sum~cons_1~x11:0, x7:0, x8:0, x9:0, x10:0) -> f_773(x5:0, x11:0, x7:0, x8:0, x9:0, 1 + x11:0) :|: x11:0 < 1 && x10:0 < 3 && x11:0 > -1 && sum~cons_1~x11:0 = 1 + x11:0
f_735(v937:0:0, sum~cons_1~v1299:0:0, v949:0:0, v953:0:0, v954:0:0) -> f_773(v937:0:0, v1299:0:0, v949:0:0, 2 * v949:0:0, 1 + v953:0:0, 1 + v1299:0:0) :|: 2 * v949:0:0 >= 1 + v1299:0:0 && v953:0:0 > 0 && v1299:0:0 > -1 && 2 * v949:0:0 > 1 && sum~cons_1~v1299:0:0 = 1 + v1299:0:0
f_735(x:0, x1:0, x2:0, x3:0, x4:0) -> f_735(x:0, x1:0, 2 * x2:0, 1 + x3:0, x4:0) :|: x4:0 > 3 && x:0 > 3 && x1:0 > 2 * x2:0 && x1:0 > 2 && 2 * x2:0 > 1 && x3:0 > 0
f_773(v1150:0:0, v1160:0:0, v1165:0:0, v1166:0:0, v1168:0:0, v1162:0:0) -> f_735(v1150:0:0, v1160:0:0, 1, v1168:0:0, v1162:0:0) :|: v1166:0:0 > 3 && v1165:0:0 > 1 && v1150:0:0 > 2 && v1162:0:0 > 2 && v1160:0:0 > 1


----------------------------------------

(13)
Obligation:
Rules:
f_735(x:0, x1:0, x2:0, x3:0, x4:0) -> f_735(x:0, x1:0, 2 * x2:0, 1 + x3:0, x4:0) :|: x4:0 > 3 && x:0 > 3 && x1:0 > 2 * x2:0 && x1:0 > 2 && 2 * x2:0 > 1 && x3:0 > 0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_735(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_735(x:0:0, x1:0:0, 2 * x2:0:0, 1 + x3:0:0, x4:0:0) :|: 2 * x2:0:0 > 1 && x3:0:0 > 0 && x1:0:0 > 2 && x1:0:0 > 2 * x2:0:0 && x:0:0 > 3 && x4:0:0 > 3

----------------------------------------

(16) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_735(x, x1, x2, x3, x4)] = 13 - 7*x1 + x1^2 - 2*x2 + x3

The following rules are decreasing:
f_735(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_735(x:0:0, x1:0:0, 2 * x2:0:0, 1 + x3:0:0, x4:0:0) :|: 2 * x2:0:0 > 1 && x3:0:0 > 0 && x1:0:0 > 2 && x1:0:0 > 2 * x2:0:0 && x:0:0 > 3 && x4:0:0 > 3
The following rules are bounded:
f_735(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_735(x:0:0, x1:0:0, 2 * x2:0:0, 1 + x3:0:0, x4:0:0) :|: 2 * x2:0:0 > 1 && x3:0:0 > 0 && x1:0:0 > 2 && x1:0:0 > 2 * x2:0:0 && x:0:0 > 3 && x4:0:0 > 3

----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
SCC
----------------------------------------

(19) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_534(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_535(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_535(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_536(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_536(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_537(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v326, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_537(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v326, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_538(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v326, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: v327 < v315 && 3 <= v315
f_538(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v326, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_540(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v326, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_540(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v326, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_542(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v326, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: TRUE
f_542(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v326, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_544(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v326, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_544(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v326, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_546(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_546(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_548(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: v341 = 2 * v327 && 4 <= v341
f_548(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_550(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_550(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_552(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: TRUE
f_552(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_554(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_554(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_556(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_556(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_558(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v329, v345, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: v345 = 1 + v329 && 2 <= v345
f_558(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v329, v345, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_560(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v329, v345, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_560(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v329, v345, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_562(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v329, v345, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: TRUE
f_562(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v329, v345, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_564(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v329, v345, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: TRUE
f_564(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v329, v345, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_533(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v327, v341, v329, v345, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: TRUE
f_533(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) -> f_534(v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, 1, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_534(v315:0, v316:0, v317:0, v318:0, v319:0, v320:0, v321:0, v322:0, v323:0, v324:0, 1, v326:0, v327:0, v328:0, v329:0, v330:0, v331:0, v332:0, v333:0, v334:0, v335:0, v336:0, v337:0, v338:0, v339:0, 0, 3, 7, 2, 4, 8) -> f_534(v315:0, v316:0, v317:0, v318:0, v319:0, v320:0, v321:0, v322:0, v323:0, v324:0, 1, v327:0, 2 * v327:0, v329:0, 1 + v329:0, v330:0, v331:0, v332:0, v333:0, v334:0, v335:0, v336:0, v337:0, v338:0, v339:0, 0, 3, 7, 2, 4, 8) :|: v315:0 > 2 && v327:0 < v315:0 && v329:0 > 0 && 3 < 2 * v327:0
Filtered unneeded arguments:
   f_534(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_534(x1, x13, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_534(v315:0, v327:0, v329:0) -> f_534(v315:0, 2 * v327:0, 1 + v329:0) :|: v327:0 < v315:0 && v315:0 > 2 && 3 < 2 * v327:0 && v329:0 > 0

----------------------------------------

(20)
Obligation:
Rules:
f_534(v315:0, v327:0, v329:0) -> f_534(v315:0, 2 * v327:0, 1 + v329:0) :|: v327:0 < v315:0 && v315:0 > 2 && 3 < 2 * v327:0 && v329:0 > 0

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_534(v315:0:0, v327:0:0, v329:0:0) -> f_534(v315:0:0, 2 * v327:0:0, 1 + v329:0:0) :|: 3 < 2 * v327:0:0 && v329:0:0 > 0 && v315:0:0 > 2 && v327:0:0 < v315:0:0

----------------------------------------

(23) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_534(x, x1, x2)] = -2 + x - x1 + x2

The following rules are decreasing:
f_534(v315:0:0, v327:0:0, v329:0:0) -> f_534(v315:0:0, 2 * v327:0:0, 1 + v329:0:0) :|: 3 < 2 * v327:0:0 && v329:0:0 > 0 && v315:0:0 > 2 && v327:0:0 < v315:0:0
The following rules are bounded:
f_534(v315:0:0, v327:0:0, v329:0:0) -> f_534(v315:0:0, 2 * v327:0:0, 1 + v329:0:0) :|: 3 < 2 * v327:0:0 && v329:0:0 > 0 && v315:0:0 > 2 && v327:0:0 < v315:0:0

----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
SCC
----------------------------------------

(26) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_344(v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, 1, 0, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_347(v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v43, 1, v40, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: 0 = 0
f_347(v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v43, 1, v40, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_350(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: 0 <= v43 && v40 = 1 && v43 = 0 && 0 = 0
f_350(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_353(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: 0 = 0
f_353(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_356(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: TRUE
f_356(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_359(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: 0 = 0
f_359(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_362(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: TRUE
f_362(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_366(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: TRUE
f_366(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_370(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: 0 = 0
f_370(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_373(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: 0 = 0
f_373(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_376(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: 0 = 0
f_376(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_379(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: 0 = 0
f_379(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_382(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: 0 = 0
f_382(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_385(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: TRUE
f_385(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_388(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: 0 = 0
f_388(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_391(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: 0 = 0
f_391(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_394(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, -1, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: 0 = 0
f_394(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, -1, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_397(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, -1, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: 0 = 0
f_397(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, -1, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_400(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, -1, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: TRUE
f_400(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, -1, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_403(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, -1, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: TRUE
f_403(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, -1, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_341(1, v31, v32, v33, v34, v35, v36, v37, v38, v39, 0, 1, 0, -1, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: TRUE
f_341(v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, 1, 0, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) -> f_344(v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, 1, 0, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_344(v30:0, v31:0, v32:0, v33:0, v34:0, v35:0, v36:0, v37:0, v38:0, v39:0, 1, 1, 0, 0, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, v51:0, v52:0, v53:0, 3, 7, 4, 8) -> f_344(1, v31:0, v32:0, v33:0, v34:0, v35:0, v36:0, v37:0, v38:0, v39:0, 0, 1, 0, -1, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, v51:0, v52:0, v53:0, 3, 7, 4, 8) :|: TRUE
Filtered unneeded arguments:
   f_344(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_344(x11, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_344(cons_1, cons_0) -> f_344(0, -1) :|: TRUE && cons_1 = 1 && cons_0 = 0

----------------------------------------

(27)
Obligation:
Rules:
f_344(cons_1, cons_0) -> f_344(0, -1) :|: TRUE && cons_1 = 1 && cons_0 = 0

----------------------------------------

(28) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(29)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
