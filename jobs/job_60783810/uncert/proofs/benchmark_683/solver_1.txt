YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/6PeGh.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 526 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 20 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 16 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) RankingReductionPairProof [EQUIVALENT, 7 ms]
        (26) YES
    (27) LLVM Symbolic Execution SCC
        (28) SCC2IRS [SOUND, 18 ms]
        (29) IntTRS
        (30) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (31) IntTRS
        (32) RankingReductionPairProof [EQUIVALENT, 6 ms]
        (33) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/6PeGh.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/6PeGh.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp slt %7 5
		br %8, %9, %24
	9:
		store 0, %3
		br %10
	10:
		%11 = load %2
		%12 = icmp sgt %11 2
		br %12, %13, %16
	13:
		%14 = load %3
		%15 = icmp sle %14 9
		br %16
	16:
		%17 = phi [0, %10], [%15, %13]
		br %17, %18, %21
	18:
		%19 = load %3
		%20 = add i32 %19, 1
		store %20, %3
		br %10
	21:
		%22 = load %2
		%23 = add i32 %22, 1
		store %23, %2
		br %6
	24:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 36 rulesP rules:
f_406(v1063, v1064, v1065, v1066, v1067, v1068, 1, v1070, v1071, v1072, v1073, v1074, v1075, v1076, 0, 3, 4, 9, 10, 2) -> f_408(v1063, v1064, v1065, v1066, v1067, v1068, 1, v1070, v1072, v1073, v1074, v1075, v1076, 0, 3, 4, 9, 10, 2) :|: 0 = 0
f_408(v1063, v1064, v1065, v1066, v1067, v1068, 1, v1070, v1072, v1073, v1074, v1075, v1076, 0, 3, 4, 9, 10, 2) -> f_410(v1063, v1064, v1065, v1066, v1067, v1068, 1, v1070, v1112, v1073, v1074, v1075, v1076, 0, 3, 4, 9, 2, 10) :|: v1112 = 1 + v1070 && 1 <= v1112 && v1112 <= 10
f_410(v1063, v1064, v1065, v1066, v1067, v1068, 1, v1070, v1112, v1073, v1074, v1075, v1076, 0, 3, 4, 9, 2, 10) -> f_412(v1063, v1064, v1065, v1066, v1067, v1068, 1, v1070, v1112, v1073, v1074, v1075, v1076, 0, 3, 4, 9, 2, 10) :|: TRUE
f_412(v1063, v1064, v1065, v1066, v1067, v1068, 1, v1070, v1112, v1073, v1074, v1075, v1076, 0, 3, 4, 9, 2, 10) -> f_414(v1063, v1064, v1065, v1066, v1067, v1068, 1, v1070, v1112, v1073, v1074, v1075, v1076, 0, 3, 4, 9, 2, 10) :|: TRUE
f_414(v1063, v1064, v1065, v1066, v1067, v1068, 1, v1070, v1112, v1073, v1074, v1075, v1076, 0, 3, 4, 9, 2, 10) -> f_415(v1063, v1064, v1065, v1066, v1067, v1068, 1, v1073, v1070, v1112, v1074, v1075, v1076, 0, 3, 4, 2, 9, 10) :|: TRUE
f_415(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1150, v1151, v1152, v1153, v1154, 0, 3, 4, 2, 9, 10) -> f_416(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1150, v1151, v1152, v1153, v1154, 0, 3, 4, 2, 9, 10) :|: 0 = 0
f_416(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1150, v1151, v1152, v1153, v1154, 0, 3, 4, 2, 9, 10) -> f_417(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1150, v1151, v1152, v1153, v1154, 0, 3, 4, 2, 9, 10) :|: 0 = 0
f_417(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1150, v1151, v1152, v1153, v1154, 0, 3, 4, 2, 9, 10) -> f_418(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1150, v1151, v1152, v1153, v1154, 0, 3, 4, 2, 9, 10) :|: TRUE
f_418(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1150, v1151, v1152, v1153, v1154, 0, 3, 4, 2, 9, 10) -> f_419(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1151, v1150, v1152, v1153, v1154, 0, 3, 4, 2, 9, 10) :|: 0 = 0
f_419(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1151, v1150, v1152, v1153, v1154, 0, 3, 4, 2, 9, 10) -> f_420(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1151, v1150, v1152, v1153, v1154, 0, 3, 4, 2, 8, 9) :|: v1151 <= 9 && v1150 <= 8
f_419(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1151, v1150, v1152, v1153, v1154, 0, 3, 4, 2, 9, 10) -> f_421(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, 10, 9, v1152, v1153, v1154, 0, 3, 4, 2) :|: 9 < v1151 && v1150 = 9 && v1151 = 10 && 0 = 0
f_420(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1151, v1150, v1152, v1153, v1154, 0, 3, 4, 2, 8, 9) -> f_422(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1151, v1150, v1152, v1153, v1154, 0, 3, 4, 2, 8, 9) :|: 0 = 0
f_422(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1151, v1150, v1152, v1153, v1154, 0, 3, 4, 2, 8, 9) -> f_424(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1151, v1150, v1152, v1153, v1154, 0, 3, 4, 2, 8, 9) :|: 0 = 0
f_424(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, v1151, v1150, v1152, v1153, v1154, 0, 3, 4, 2, 8, 9) -> f_404(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1151, v1150, v1151, v1149, v1152, v1153, v1154, 0, 3, 4, 9, 10, 2) :|: TRUE
f_404(v1063, v1064, v1065, v1066, v1067, v1068, 1, v1070, v1071, v1072, v1073, v1074, v1075, v1076, 0, 3, 4, 9, 10, 2) -> f_406(v1063, v1064, v1065, v1066, v1067, v1068, 1, v1070, v1071, v1072, v1073, v1074, v1075, v1076, 0, 3, 4, 9, 10, 2) :|: TRUE
f_421(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, 10, 9, v1152, v1153, v1154, 0, 3, 4, 2) -> f_423(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, 10, 0, 9, v1152, v1153, v1154, 3, 4, 2) :|: 0 = 0
f_423(v1142, v1143, v1144, v1145, v1146, v1147, 1, v1149, 10, 0, 9, v1152, v1153, v1154, 3, 4, 2) -> f_425(v1142, v1143, v1144, v1145, v1146, v1147, 1, 0, v1149, 10, 9, v1152, v1153, v1154, 3, 4, 2) :|: 0 = 0
f_425(v1142, v1143, v1144, v1145, v1146, v1147, 1, 0, v1149, 10, 9, v1152, v1153, v1154, 3, 4, 2) -> f_426(v1142, v1143, v1144, v1145, v1146, v1147, 1, 0, v1149, 10, 9, v1152, v1153, v1154, 3, 4, 2) :|: TRUE
f_426(v1142, v1143, v1144, v1145, v1146, v1147, 1, 0, v1149, 10, 9, v1152, v1153, v1154, 3, 4, 2) -> f_427(v1142, v1143, v1144, v1145, v1146, v1147, 1, 0, 10, 9, v1152, v1153, v1154, 3, 4) :|: 0 = 0
f_427(v1142, v1143, v1144, v1145, v1146, v1147, 1, 0, 10, 9, v1152, v1153, v1154, 3, 4) -> f_428(v1142, v1143, v1144, v1145, v1146, v1147, 1, 0, v1275, 10, 9, v1152, v1153, v1154, 3, 4, 5) :|: v1275 = 1 + v1147 && 4 <= v1275 && v1275 <= 5
f_428(v1142, v1143, v1144, v1145, v1146, v1147, 1, 0, v1275, 10, 9, v1152, v1153, v1154, 3, 4, 5) -> f_429(v1142, v1143, v1144, v1145, v1146, v1147, 1, 0, v1275, 10, 9, v1152, v1153, v1154, 3, 4, 5) :|: TRUE
f_429(v1142, v1143, v1144, v1145, v1146, v1147, 1, 0, v1275, 10, 9, v1152, v1153, v1154, 3, 4, 5) -> f_430(v1142, v1143, v1144, v1145, v1146, v1147, 1, 0, v1275, 10, 9, v1152, v1153, v1154, 3, 4, 5) :|: TRUE
f_430(v1142, v1143, v1144, v1145, v1146, v1147, 1, 0, v1275, 10, 9, v1152, v1153, v1154, 3, 4, 5) -> f_431(v1142, v1143, v1144, v1145, v1146, v1275, 1, v1147, 0, 10, 9, v1152, v1153, v1154, 3, 4, 5) :|: 0 = 0
f_431(v1142, v1143, v1144, v1145, v1146, v1275, 1, v1147, 0, 10, 9, v1152, v1153, v1154, 3, 4, 5) -> f_432(v1142, v1143, v1144, v1145, v1146, 4, 1, 3, 0, 10, 9, v1152, v1153, v1154) :|: v1275 < 5 && v1147 = 3 && v1275 = 4 && 0 = 0
f_432(v1142, v1143, v1144, v1145, v1146, 4, 1, 3, 0, 10, 9, v1152, v1153, v1154) -> f_434(v1142, v1143, v1144, v1145, v1146, 4, 1, 3, 0, 10, 9, v1152, v1153, v1154) :|: 0 = 0
f_434(v1142, v1143, v1144, v1145, v1146, 4, 1, 3, 0, 10, 9, v1152, v1153, v1154) -> f_436(v1142, v1143, v1144, v1145, v1146, 4, 1, 3, 0, 10, 9, v1152, v1153, v1154) :|: TRUE
f_436(v1142, v1143, v1144, v1145, v1146, 4, 1, 3, 0, 10, 9, v1152, v1153, v1154) -> f_438(v1142, v1143, v1144, v1145, v1146, 4, 1, 3, 0, 10, 9, v1152, v1153, v1154) :|: TRUE
f_438(v1142, v1143, v1144, v1145, v1146, 4, 1, 3, 0, 10, 9, v1152, v1153, v1154) -> f_439(v1142, v1143, v1144, v1145, v1146, 4, 1, 3, 0, 10, 9, v1152, v1153, v1154) :|: TRUE
f_439(v1142, v1143, v1144, v1145, v1146, 4, 1, 3, 0, 10, 9, v1152, v1153, v1154) -> f_440(v1142, v1143, v1144, v1145, v1146, 4, 1, 3, 10, 0, 9, v1152, v1153, v1154) :|: TRUE
f_440(v1309, v1310, v1311, v1312, v1313, 4, 1, 3, 10, 0, 9, v1320, v1321, v1322) -> f_441(v1309, v1310, v1311, v1312, v1313, 4, 1, 10, 0, 9, 3, v1320, v1321, v1322) :|: 0 = 0
f_441(v1309, v1310, v1311, v1312, v1313, 4, 1, 10, 0, 9, 3, v1320, v1321, v1322) -> f_442(v1309, v1310, v1311, v1312, v1313, 4, 1, 10, 0, 9, 3, v1320, v1321, v1322) :|: 0 = 0
f_442(v1309, v1310, v1311, v1312, v1313, 4, 1, 10, 0, 9, 3, v1320, v1321, v1322) -> f_443(v1309, v1310, v1311, v1312, v1313, 4, 1, 10, 0, 9, 3, v1320, v1321, v1322) :|: TRUE
f_443(v1309, v1310, v1311, v1312, v1313, 4, 1, 10, 0, 9, 3, v1320, v1321, v1322) -> f_444(v1309, v1310, v1311, v1312, v1313, 4, 1, 0, 9, 10, 3, v1320, v1321, v1322) :|: 0 = 0
f_444(v1309, v1310, v1311, v1312, v1313, 4, 1, 0, 9, 10, 3, v1320, v1321, v1322) -> f_445(v1309, v1310, v1311, v1312, v1313, 4, 1, 0, 9, 10, 3, v1320, v1321, v1322) :|: 0 = 0
f_445(v1309, v1310, v1311, v1312, v1313, 4, 1, 0, 9, 10, 3, v1320, v1321, v1322) -> f_446(v1309, v1310, v1311, v1312, v1313, 4, 1, 0, 9, 10, 3, v1320, v1321, v1322) :|: 0 = 0
f_446(v1309, v1310, v1311, v1312, v1313, 4, 1, 0, 9, 10, 3, v1320, v1321, v1322) -> f_404(v1309, v1310, v1311, v1312, v1313, 4, 1, 0, 9, 10, 3, v1320, v1321, v1322, 0, 3, 4, 9, 10, 2) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_406(v1063:0, v1064:0, v1065:0, v1066:0, v1067:0, v1068:0, 1, v1070:0, v1071:0, v1072:0, v1073:0, v1074:0, v1075:0, v1076:0, 0, 3, 4, 9, 10, 2) -> f_406(v1063:0, v1064:0, v1065:0, v1066:0, v1067:0, v1068:0, 1, 1 + v1070:0, v1070:0, 1 + v1070:0, v1073:0, v1074:0, v1075:0, v1076:0, 0, 3, 4, 9, 10, 2) :|: v1070:0 > -1 && v1070:0 < 10 && v1070:0 < 9
f_406(v1063:0, v1064:0, v1065:0, v1066:0, v1067:0, 3, 1, 9, v1071:0, v1072:0, v1073:0, v1074:0, v1075:0, v1076:0, 0, 3, 4, 9, 10, 2) -> f_406(v1063:0, v1064:0, v1065:0, v1066:0, v1067:0, 4, 1, 0, 9, 10, 3, v1074:0, v1075:0, v1076:0, 0, 3, 4, 9, 10, 2) :|: TRUE
Filtered unneeded arguments:
   f_406(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_406(x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_406(v1068:0, v1070:0) -> f_406(v1068:0, 1 + v1070:0) :|: v1070:0 < 10 && v1070:0 < 9 && v1070:0 > -1
f_406(cons_3, cons_9) -> f_406(4, 0) :|: TRUE && cons_3 = 3 && cons_9 = 9

----------------------------------------

(9)
Obligation:
Rules:
f_406(v1068:0, v1070:0) -> f_406(v1068:0, 1 + v1070:0) :|: v1070:0 < 10 && v1070:0 < 9 && v1070:0 > -1
f_406(cons_3, cons_9) -> f_406(4, 0) :|: TRUE && cons_3 = 3 && cons_9 = 9

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_406(v1068:0:0, v1070:0:0) -> f_406(v1068:0:0, 1 + v1070:0:0) :|: v1070:0:0 < 10 && v1070:0:0 < 9 && v1070:0:0 > -1
f_406(cons_3, cons_9) -> f_406(4, 0) :|: TRUE && cons_3 = 3 && cons_9 = 9

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_406(x, x1)] = 3 - x

The following rules are decreasing:
f_406(cons_3, cons_9) -> f_406(4, 0) :|: TRUE && cons_3 = 3 && cons_9 = 9
The following rules are bounded:
f_406(cons_3, cons_9) -> f_406(4, 0) :|: TRUE && cons_3 = 3 && cons_9 = 9

----------------------------------------

(13)
Obligation:
Rules:
f_406(v1068:0:0, v1070:0:0) -> f_406(v1068:0:0, 1 + v1070:0:0) :|: v1070:0:0 < 10 && v1070:0:0 < 9 && v1070:0:0 > -1

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_406(v1068:0:0:0, v1070:0:0:0) -> f_406(v1068:0:0:0, 1 + v1070:0:0:0) :|: v1070:0:0:0 < 10 && v1070:0:0:0 < 9 && v1070:0:0:0 > -1

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_406(x1, x2) -> f_406(x2)

----------------------------------------

(17)
Obligation:
Rules:
f_406(v1070:0:0:0) -> f_406(1 + v1070:0:0:0) :|: v1070:0:0:0 < 10 && v1070:0:0:0 < 9 && v1070:0:0:0 > -1

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_406(x)] = 8 - x

The following rules are decreasing:
f_406(v1070:0:0:0) -> f_406(1 + v1070:0:0:0) :|: v1070:0:0:0 < 10 && v1070:0:0:0 < 9 && v1070:0:0:0 > -1
The following rules are bounded:
f_406(v1070:0:0:0) -> f_406(1 + v1070:0:0:0) :|: v1070:0:0:0 < 10 && v1070:0:0:0 < 9 && v1070:0:0:0 > -1

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_298(v387, v388, v389, v390, v391, 1, v393, v394, v395, v396, v397, 0, 3, 4, 9, 10) -> f_300(v387, v388, v389, v390, v391, 1, v393, v394, v395, v396, v397, 0, 3, 4, 9, 10) :|: 0 = 0
f_300(v387, v388, v389, v390, v391, 1, v393, v394, v395, v396, v397, 0, 3, 4, 9, 10) -> f_302(v387, v388, v389, v390, v391, 1, v393, v394, v395, v396, v397, 0, 3, 4, 9, 10) :|: TRUE
f_302(v387, v388, v389, v390, v391, 1, v393, v394, v395, v396, v397, 0, 3, 4, 9, 10) -> f_304(v387, v388, v389, v390, v391, 1, v394, v393, v395, v396, v397, 0, 3, 4, 9, 10) :|: 0 = 0
f_304(v387, v388, v389, v390, v391, 1, v394, v393, v395, v396, v397, 0, 3, 4, 9, 10) -> f_306(v387, v388, v389, v390, v391, 1, v394, v393, v395, v396, v397, 0, 3, 4, 8, 9) :|: v394 <= 9 && v393 <= 8
f_306(v387, v388, v389, v390, v391, 1, v394, v393, v395, v396, v397, 0, 3, 4, 8, 9) -> f_309(v387, v388, v389, v390, v391, 1, v394, v393, v395, v396, v397, 0, 3, 4, 8, 9) :|: 0 = 0
f_309(v387, v388, v389, v390, v391, 1, v394, v393, v395, v396, v397, 0, 3, 4, 8, 9) -> f_312(v387, v388, v389, v390, v391, 1, v394, v393, v395, v396, v397, 0, 3, 4, 8, 9) :|: 0 = 0
f_312(v387, v388, v389, v390, v391, 1, v394, v393, v395, v396, v397, 0, 3, 4, 8, 9) -> f_315(v387, v388, v389, v390, v391, 1, v394, v393, v395, v396, v397, 0, 3, 4, 8, 9) :|: TRUE
f_315(v387, v388, v389, v390, v391, 1, v394, v393, v395, v396, v397, 0, 3, 4, 8, 9) -> f_319(v387, v388, v389, v390, v391, 1, v394, v395, v396, v397, 0, 3, 4, 9) :|: 0 = 0
f_319(v387, v388, v389, v390, v391, 1, v394, v395, v396, v397, 0, 3, 4, 9) -> f_322(v387, v388, v389, v390, v391, 1, v394, v516, v395, v396, v397, 0, 3, 4, 9, 2, 10) :|: v516 = 1 + v394 && 2 <= v516 && v516 <= 10
f_322(v387, v388, v389, v390, v391, 1, v394, v516, v395, v396, v397, 0, 3, 4, 9, 2, 10) -> f_325(v387, v388, v389, v390, v391, 1, v394, v516, v395, v396, v397, 0, 3, 4, 9, 2, 10) :|: TRUE
f_325(v387, v388, v389, v390, v391, 1, v394, v516, v395, v396, v397, 0, 3, 4, 9, 2, 10) -> f_328(v387, v388, v389, v390, v391, 1, v394, v516, v395, v396, v397, 0, 3, 4, 9, 2, 10) :|: TRUE
f_328(v387, v388, v389, v390, v391, 1, v394, v516, v395, v396, v397, 0, 3, 4, 9, 2, 10) -> f_296(v387, v388, v389, v390, v391, 1, v394, v516, v395, v396, v397, 0, 3, 4, 9, 10) :|: TRUE
f_296(v387, v388, v389, v390, v391, 1, v393, v394, v395, v396, v397, 0, 3, 4, 9, 10) -> f_298(v387, v388, v389, v390, v391, 1, v393, v394, v395, v396, v397, 0, 3, 4, 9, 10) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_298(v387:0, v388:0, v389:0, v390:0, v391:0, 1, v393:0, v394:0, v395:0, v396:0, v397:0, 0, 3, 4, 9, 10) -> f_298(v387:0, v388:0, v389:0, v390:0, v391:0, 1, v394:0, 1 + v394:0, v395:0, v396:0, v397:0, 0, 3, 4, 9, 10) :|: v393:0 < 9 && v394:0 < 10 && v394:0 > 0
Filtered unneeded arguments:
   f_298(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_298(x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_298(v393:0, v394:0) -> f_298(v394:0, 1 + v394:0) :|: v394:0 < 10 && v394:0 > 0 && v393:0 < 9

----------------------------------------

(22)
Obligation:
Rules:
f_298(v393:0, v394:0) -> f_298(v394:0, 1 + v394:0) :|: v394:0 < 10 && v394:0 > 0 && v393:0 < 9

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_298(v393:0:0, v394:0:0) -> f_298(v394:0:0, 1 + v394:0:0) :|: v394:0:0 < 10 && v394:0:0 > 0 && v393:0:0 < 9

----------------------------------------

(25) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_298 ] = -1*f_298_2

The following rules are decreasing:
f_298(v393:0:0, v394:0:0) -> f_298(v394:0:0, 1 + v394:0:0) :|: v394:0:0 < 10 && v394:0:0 > 0 && v393:0:0 < 9

The following rules are bounded:
f_298(v393:0:0, v394:0:0) -> f_298(v394:0:0, 1 + v394:0:0) :|: v394:0:0 < 10 && v394:0:0 > 0 && v393:0:0 < 9


----------------------------------------

(26)
YES

----------------------------------------

(27)
Obligation:
SCC
----------------------------------------

(28) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_218(v125, v126, v127, v128, v129, v133, 1, v130, 0, v134, v135, v136, 3, 2, 4) -> f_220(v125, v126, v127, v128, v129, v133, 1, v130, 0, v134, v135, v136, 3, 2, 4) :|: 0 = 0
f_220(v125, v126, v127, v128, v129, v133, 1, v130, 0, v134, v135, v136, 3, 2, 4) -> f_222(v125, v126, v127, v128, v129, v133, 1, v130, 0, v134, v135, v136, 3, 2, 4) :|: TRUE
f_222(v125, v126, v127, v128, v129, v133, 1, v130, 0, v134, v135, v136, 3, 2, 4) -> f_224(v125, v126, v127, v128, v129, v133, 1, v130, 0, v134, v135, v136, 3, 2, 4) :|: TRUE
f_224(v125, v126, v127, v128, v129, v133, 1, v130, 0, v134, v135, v136, 3, 2, 4) -> f_226(v125, v126, v127, v128, v129, v133, 1, v130, 0, v134, v135, v136, 3, 2, 4) :|: TRUE
f_226(v125, v126, v127, v128, v129, v133, 1, v130, 0, v134, v135, v136, 3, 2, 4) -> f_228(v125, v126, v127, v128, v129, v133, 1, 0, v130, v134, v135, v136, 3, 2, 4) :|: 0 = 0
f_228(v125, v126, v127, v128, v129, v133, 1, 0, v130, v134, v135, v136, 3, 2, 4) -> f_231(v125, v126, v127, v128, v129, v133, 1, 0, v130, v134, v135, v136, 3, 2, 4) :|: v133 <= 2 && v130 <= 1 && v128 <= 1
f_231(v125, v126, v127, v128, v129, v133, 1, 0, v130, v134, v135, v136, 3, 2, 4) -> f_235(v125, v126, v127, v128, v129, v133, 1, 0, v130, v134, v135, v136, 3, 2, 4) :|: 0 = 0
f_235(v125, v126, v127, v128, v129, v133, 1, 0, v130, v134, v135, v136, 3, 2, 4) -> f_238(v125, v126, v127, v128, v129, v133, 1, 0, v130, v134, v135, v136, 3, 2, 4) :|: 0 = 0
f_238(v125, v126, v127, v128, v129, v133, 1, 0, v130, v134, v135, v136, 3, 2, 4) -> f_241(v125, v126, v127, v128, v129, v133, 1, 0, v130, v134, v135, v136, 3, 2, 4) :|: TRUE
f_241(v125, v126, v127, v128, v129, v133, 1, 0, v130, v134, v135, v136, 3, 2, 4) -> f_244(v125, v126, v127, v128, v129, v133, 1, 0, v134, v135, v136, 3, 2, 4) :|: 0 = 0
f_244(v125, v126, v127, v128, v129, v133, 1, 0, v134, v135, v136, 3, 2, 4) -> f_247(v125, v126, v127, v128, v129, v133, 1, 0, v178, v134, v135, v136, 3, 2, 4) :|: v178 = 1 + v133 && v178 <= 3
f_247(v125, v126, v127, v128, v129, v133, 1, 0, v178, v134, v135, v136, 3, 2, 4) -> f_250(v125, v126, v127, v128, v129, v133, 1, 0, v178, v134, v135, v136, 3, 2, 4) :|: TRUE
f_250(v125, v126, v127, v128, v129, v133, 1, 0, v178, v134, v135, v136, 3, 2, 4) -> f_253(v125, v126, v127, v128, v129, v133, 1, 0, v178, v134, v135, v136, 3, 2, 4) :|: TRUE
f_253(v125, v126, v127, v128, v129, v133, 1, 0, v178, v134, v135, v136, 3, 2, 4) -> f_216(v125, v126, v127, v128, v129, v133, 1, 0, v178, v134, v135, v136, 3, 2, 4) :|: TRUE
f_216(v125, v126, v127, v128, v129, v130, 1, 0, v133, v134, v135, v136, 3, 2, 4) -> f_218(v125, v126, v127, v128, v129, v133, 1, v130, 0, v134, v135, v136, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_218(v125:0, v126:0, v127:0, v128:0, v129:0, v133:0, 1, v130:0, 0, v134:0, v135:0, v136:0, 3, 2, 4) -> f_218(v125:0, v126:0, v127:0, v128:0, v129:0, 1 + v133:0, 1, v133:0, 0, v134:0, v135:0, v136:0, 3, 2, 4) :|: v130:0 < 2 && v133:0 < 3 && v128:0 < 2
Filtered unneeded arguments:
   f_218(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_218(x4, x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_218(v128:0, v133:0, v130:0) -> f_218(v128:0, 1 + v133:0, v133:0) :|: v133:0 < 3 && v128:0 < 2 && v130:0 < 2

----------------------------------------

(29)
Obligation:
Rules:
f_218(v128:0, v133:0, v130:0) -> f_218(v128:0, 1 + v133:0, v133:0) :|: v133:0 < 3 && v128:0 < 2 && v130:0 < 2

----------------------------------------

(30) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(31)
Obligation:
Rules:
f_218(v128:0:0, v133:0:0, v130:0:0) -> f_218(v128:0:0, 1 + v133:0:0, v133:0:0) :|: v133:0:0 < 3 && v128:0:0 < 2 && v130:0:0 < 2

----------------------------------------

(32) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_218 ] = -1*f_218_2

The following rules are decreasing:
f_218(v128:0:0, v133:0:0, v130:0:0) -> f_218(v128:0:0, 1 + v133:0:0, v133:0:0) :|: v133:0:0 < 3 && v128:0:0 < 2 && v130:0:0 < 2

The following rules are bounded:
f_218(v128:0:0, v133:0:0, v130:0:0) -> f_218(v128:0:0, 1 + v133:0:0, v133:0:0) :|: v133:0:0 < 3 && v128:0:0 < 2 && v130:0:0 < 2


----------------------------------------

(33)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
