YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/25or5.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 294 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 7 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 4 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/25or5.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/25or5.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sgt %7 0
		br %8, %9, %12
	9:
		%10 = load %3
		%11 = icmp sgt %10 0
		br %12
	12:
		%13 = phi [0, %6], [%11, %9]
		br %13, %14, %31
	14:
		%15 = load %2
		%16 = load %3
		%17 = icmp slt %15 %16
		br %17, %18, %21
	18:
		%19 = load %2
		%20 = sub i32 %19, 1
		store %20, %2
		br %30
	21:
		%22 = load %3
		%23 = load %2
		%24 = icmp slt %22 %23
		br %24, %25, %28
	25:
		%26 = load %3
		%27 = sub i32 %26, 1
		store %27, %3
		br %29
	28:
		br %31
	29:
		br %30
	30:
		br %6
	31:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 23 rulesP rules:
f_295(v374, v375, v376, v377, v378, 1, v380, 0, v382, v383, v384, v385, 3, 2, 4) -> f_297(v374, v375, v376, v377, v378, 1, v380, 0, v382, v383, v384, v385, 3, 2, 4) :|: 0 = 0
f_297(v374, v375, v376, v377, v378, 1, v380, 0, v382, v383, v384, v385, 3, 2, 4) -> f_298(v374, v375, v376, v377, v378, 1, v380, 0, v382, v383, v384, v385, 3, 2, 4) :|: 0 = 0
f_298(v374, v375, v376, v377, v378, 1, v380, 0, v382, v383, v384, v385, 3, 2, 4) -> f_299(v374, v375, v376, v377, v378, 1, v380, 0, v382, v383, v384, v385, 3, 2, 4) :|: TRUE
f_299(v374, v375, v376, v377, v378, 1, v380, 0, v382, v383, v384, v385, 3, 2, 4) -> f_300(v374, v375, v376, v377, v378, 1, v382, v380, 0, v383, v384, v385, 3, 2, 4) :|: 0 = 0
f_300(v374, v375, v376, v377, v378, 1, v382, v380, 0, v383, v384, v385, 3, 2, 4) -> f_301(v374, v375, v376, v377, v378, 1, v382, v380, 0, v383, v384, v385, 3, 2, 4) :|: 0 < v382 && 2 <= v380 && 3 <= v377 && 2 <= v378
f_301(v374, v375, v376, v377, v378, 1, v382, v380, 0, v383, v384, v385, 3, 2, 4) -> f_303(v374, v375, v376, v377, v378, 1, v382, v380, 0, v383, v384, v385, 3, 2, 4) :|: 0 = 0
f_303(v374, v375, v376, v377, v378, 1, v382, v380, 0, v383, v384, v385, 3, 2, 4) -> f_305(v374, v375, v376, v377, v378, 1, v382, v380, 0, v383, v384, v385, 3, 2, 4) :|: 0 = 0
f_305(v374, v375, v376, v377, v378, 1, v382, v380, 0, v383, v384, v385, 3, 2, 4) -> f_307(v374, v375, v376, v377, v378, 1, v382, v380, 0, v383, v384, v385, 3, 2, 4) :|: TRUE
f_307(v374, v375, v376, v377, v378, 1, v382, v380, 0, v383, v384, v385, 3, 2, 4) -> f_309(v374, v375, v376, v377, v378, 1, v382, v380, 0, v383, v384, v385, 3, 2, 4) :|: 0 = 0
f_309(v374, v375, v376, v377, v378, 1, v382, v380, 0, v383, v384, v385, 3, 2, 4) -> f_310(v374, v375, v376, v377, v378, 1, v382, 0, v380, v383, v384, v385, 3, 2, 4) :|: 0 = 0
f_310(v374, v375, v376, v377, v378, 1, v382, 0, v380, v383, v384, v385, 3, 2, 4) -> f_311(v374, v375, v376, v377, v378, 1, v382, 0, v380, v383, v384, v385, 3, 2, 4) :|: 0 = 0
f_311(v374, v375, v376, v377, v378, 1, v382, 0, v380, v383, v384, v385, 3, 2, 4) -> f_312(v374, v375, v376, v377, v378, 1, v382, 0, v380, v383, v384, v385, 3, 2, 4) :|: TRUE
f_312(v374, v375, v376, v377, v378, 1, v382, 0, v380, v383, v384, v385, 3, 2, 4) -> f_313(v374, v375, v376, v377, v378, 1, v382, 0, v380, v383, v384, v385, 3, 2, 4) :|: 0 = 0
f_313(v374, v375, v376, v377, v378, 1, v382, 0, v380, v383, v384, v385, 3, 2, 4) -> f_314(v374, v375, v376, v377, v378, 1, v382, 0, v380, v383, v384, v385, 3, 2, 4) :|: 0 = 0
f_314(v374, v375, v376, v377, v378, 1, v382, 0, v380, v383, v384, v385, 3, 2, 4) -> f_315(v374, v375, v376, v377, v378, 1, v382, 0, v380, v383, v384, v385, 3, 2, 4) :|: 0 = 0
f_315(v374, v375, v376, v377, v378, 1, v382, 0, v380, v383, v384, v385, 3, 2, 4) -> f_316(v374, v375, v376, v377, v378, 1, v382, 0, v380, v383, v384, v385, 3, 2, 4) :|: TRUE
f_316(v374, v375, v376, v377, v378, 1, v382, 0, v380, v383, v384, v385, 3, 2, 4) -> f_317(v374, v375, v376, v377, v378, 1, v382, 0, v383, v384, v385, 3, 2, 4) :|: 0 = 0
f_317(v374, v375, v376, v377, v378, 1, v382, 0, v383, v384, v385, 3, 2, 4) -> f_318(v374, v375, v376, v377, v378, 1, v382, 0, v474, v383, v384, v385, 3, 2, 4) :|: 1 + v474 = v382 && 0 <= v474
f_318(v374, v375, v376, v377, v378, 1, v382, 0, v474, v383, v384, v385, 3, 2, 4) -> f_319(v374, v375, v376, v377, v378, 1, v382, 0, v474, v383, v384, v385, 3, 2, 4) :|: TRUE
f_319(v374, v375, v376, v377, v378, 1, v382, 0, v474, v383, v384, v385, 3, 2, 4) -> f_320(v374, v375, v376, v377, v378, 1, v382, 0, v474, v383, v384, v385, 3, 2, 4) :|: TRUE
f_320(v374, v375, v376, v377, v378, 1, v382, 0, v474, v383, v384, v385, 3, 2, 4) -> f_321(v374, v375, v376, v377, v378, 1, v382, 0, v474, v383, v384, v385, 3, 2, 4) :|: TRUE
f_321(v374, v375, v376, v377, v378, 1, v382, 0, v474, v383, v384, v385, 3, 2, 4) -> f_293(v374, v375, v376, v377, v378, 1, v382, 0, v474, v383, v384, v385, 3, 2, 4) :|: TRUE
f_293(v374, v375, v376, v377, v378, 1, v380, 0, v382, v383, v384, v385, 3, 2, 4) -> f_295(v374, v375, v376, v377, v378, 1, v380, 0, v382, v383, v384, v385, 3, 2, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_295(v374:0, v375:0, v376:0, v377:0, v378:0, 1, v380:0, 0, 1 + v474:0, v383:0, v384:0, v385:0, 3, 2, 4) -> f_295(v374:0, v375:0, v376:0, v377:0, v378:0, 1, 1 + v474:0, 0, v474:0, v383:0, v384:0, v385:0, 3, 2, 4) :|: v380:0 > 1 && v474:0 > -1 && v377:0 > 2 && v378:0 > 1
Filtered unneeded arguments:
   f_295(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_295(x4, x5, x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_295(v377:0, v378:0, v380:0, sum~cons_1~v474:0) -> f_295(v377:0, v378:0, 1 + v474:0, v474:0) :|: v474:0 > -1 && v380:0 > 1 && v378:0 > 1 && v377:0 > 2 && sum~cons_1~v474:0 = 1 + v474:0

----------------------------------------

(9)
Obligation:
Rules:
f_295(v377:0, v378:0, v380:0, sum~cons_1~v474:0) -> f_295(v377:0, v378:0, 1 + v474:0, v474:0) :|: v474:0 > -1 && v380:0 > 1 && v378:0 > 1 && v377:0 > 2 && sum~cons_1~v474:0 = 1 + v474:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_295(v377:0:0, v378:0:0, v380:0:0, sum~cons_1~v474:0:0) -> f_295(v377:0:0, v378:0:0, 1 + v474:0:0, v474:0:0) :|: v378:0:0 > 1 && v377:0:0 > 2 && v380:0:0 > 1 && v474:0:0 > -1 && sum~cons_1~v474:0:0 = 1 + v474:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_295(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_295(v377:0:0, v378:0:0, v380:0:0, sum~cons_1~v474:0:0) -> f_295(v377:0:0, v378:0:0, 1 + v474:0:0, v474:0:0) :|: v378:0:0 > 1 && v377:0:0 > 2 && v380:0:0 > 1 && v474:0:0 > -1 && sum~cons_1~v474:0:0 = 1 + v474:0:0
The following rules are bounded:
f_295(v377:0:0, v378:0:0, v380:0:0, sum~cons_1~v474:0:0) -> f_295(v377:0:0, v378:0:0, 1 + v474:0:0, v474:0:0) :|: v378:0:0 > 1 && v377:0:0 > 2 && v380:0:0 > 1 && v474:0:0 > -1 && sum~cons_1~v474:0:0 = 1 + v474:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_257(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) -> f_260(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) :|: 0 < v269 && 2 <= v267 && 3 <= v266 && 2 <= v265
f_260(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) -> f_264(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) :|: 0 = 0
f_264(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) -> f_267(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) :|: TRUE
f_267(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) -> f_270(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) :|: 0 = 0
f_270(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) -> f_273(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) :|: 0 = 0
f_273(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) -> f_275(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) :|: 0 = 0
f_275(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) -> f_277(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) :|: TRUE
f_277(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) -> f_279(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) :|: 0 = 0
f_279(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) -> f_281(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) :|: 0 = 0
f_281(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) -> f_283(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) :|: 0 = 0
f_283(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) -> f_285(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) :|: TRUE
f_285(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) -> f_287(v262, v263, v264, v265, v266, v269, 1, v270, v271, v272, 0, 3, 2, 4) :|: 0 = 0
f_287(v262, v263, v264, v265, v266, v269, 1, v270, v271, v272, 0, 3, 2, 4) -> f_289(v262, v263, v264, v265, v266, v269, 1, v372, v270, v271, v272, 0, 3, 2, 4) :|: 1 + v372 = v269 && 0 <= v372
f_289(v262, v263, v264, v265, v266, v269, 1, v372, v270, v271, v272, 0, 3, 2, 4) -> f_291(v262, v263, v264, v265, v266, v269, 1, v372, v270, v271, v272, 0, 3, 2, 4) :|: TRUE
f_291(v262, v263, v264, v265, v266, v269, 1, v372, v270, v271, v272, 0, 3, 2, 4) -> f_294(v262, v263, v264, v265, v266, v269, 1, v372, v270, v271, v272, 0, 3, 2, 4) :|: TRUE
f_294(v262, v263, v264, v265, v266, v269, 1, v372, v270, v271, v272, 0, 3, 2, 4) -> f_296(v262, v263, v264, v265, v266, v269, 1, v372, v270, v271, v272, 0, 3, 2, 4) :|: TRUE
f_296(v262, v263, v264, v265, v266, v269, 1, v372, v270, v271, v272, 0, 3, 2, 4) -> f_254(v262, v263, v264, v265, v266, v269, 1, v372, v270, v271, v272, 0, 3, 2, 4) :|: TRUE
f_254(v262, v263, v264, v265, v266, v267, 1, v269, v270, v271, v272, 0, 3, 2, 4) -> f_257(v262, v263, v264, v265, v266, v269, 1, v267, v270, v271, v272, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_257(v262:0, v263:0, v264:0, v265:0, v266:0, 1 + v372:0, 1, v267:0, v270:0, v271:0, v272:0, 0, 3, 2, 4) -> f_257(v262:0, v263:0, v264:0, v265:0, v266:0, v372:0, 1, 1 + v372:0, v270:0, v271:0, v272:0, 0, 3, 2, 4) :|: v267:0 > 1 && v372:0 > -1 && v266:0 > 2 && v265:0 > 1
Filtered unneeded arguments:
   f_257(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_257(x4, x5, x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_257(v265:0, v266:0, sum~cons_1~v372:0, v267:0) -> f_257(v265:0, v266:0, v372:0, 1 + v372:0) :|: v372:0 > -1 && v267:0 > 1 && v265:0 > 1 && v266:0 > 2 && sum~cons_1~v372:0 = 1 + v372:0

----------------------------------------

(16)
Obligation:
Rules:
f_257(v265:0, v266:0, sum~cons_1~v372:0, v267:0) -> f_257(v265:0, v266:0, v372:0, 1 + v372:0) :|: v372:0 > -1 && v267:0 > 1 && v265:0 > 1 && v266:0 > 2 && sum~cons_1~v372:0 = 1 + v372:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_257(v265:0:0, v266:0:0, sum~cons_1~v372:0:0, v267:0:0) -> f_257(v265:0:0, v266:0:0, v372:0:0, 1 + v372:0:0) :|: v265:0:0 > 1 && v266:0:0 > 2 && v267:0:0 > 1 && v372:0:0 > -1 && sum~cons_1~v372:0:0 = 1 + v372:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_257(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_257(v265:0:0, v266:0:0, sum~cons_1~v372:0:0, v267:0:0) -> f_257(v265:0:0, v266:0:0, v372:0:0, 1 + v372:0:0) :|: v265:0:0 > 1 && v266:0:0 > 2 && v267:0:0 > 1 && v372:0:0 > -1 && sum~cons_1~v372:0:0 = 1 + v372:0:0
The following rules are bounded:
f_257(v265:0:0, v266:0:0, sum~cons_1~v372:0:0, v267:0:0) -> f_257(v265:0:0, v266:0:0, v372:0:0, 1 + v372:0:0) :|: v265:0:0 > 1 && v266:0:0 > 2 && v267:0:0 > 1 && v372:0:0 > -1 && sum~cons_1~v372:0:0 = 1 + v372:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
