YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/OrbEL.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 66 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1952 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 58 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 53 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/OrbEL.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/OrbEL.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%9 = call i32 @__VERIFIER_nondet_int()
		store %9, %5
		%10 = load %2
		%11 = load %3
		%12 = icmp ne %10 %11
		br %12, %13, %14
	13:
		store 0, %1
		br %37
	14:
		br %15
	15:
		%16 = load %4
		%17 = icmp sge %16 0
		br %17, %21, %18
	18:
		%19 = load %5
		%20 = icmp sge %19 0
		br %21
	21:
		%22 = phi [1, %15], [%20, %18]
		br %22, %23, %36
	23:
		%24 = load %4
		%25 = load %2
		%26 = add i32 %24, %25
		%27 = load %3
		%28 = sub i32 %26, %27
		%29 = sub i32 %28, 1
		store %29, %4
		%30 = load %5
		%31 = load %3
		%32 = add i32 %30, %31
		%33 = load %2
		%34 = sub i32 %32, %33
		%35 = sub i32 %34, 1
		store %35, %5
		br %15
	36:
		store 0, %1
		br %37
	37:
		%38 = load %1
		ret %38


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 25 rulesP rules:
f_459(v943, v944, v945, v946, v947, v948, v949, v950, 0, v956, v953, 1, v952, v955, v957, v958, v959, v960, v961, v962, v963, 3, 2, 4) -> f_460(v943, v944, v945, v946, v947, v948, v949, v950, 0, v956, v953, 1, v952, v955, v957, v958, v959, v960, v961, v962, v963, 3, 2, 4) :|: 0 = 0
f_460(v943, v944, v945, v946, v947, v948, v949, v950, 0, v956, v953, 1, v952, v955, v957, v958, v959, v960, v961, v962, v963, 3, 2, 4) -> f_461(v943, v944, v945, v946, v947, v948, v949, v950, 0, v956, v953, 1, v952, v955, v957, v958, v959, v960, v961, v962, v963, 3, 2, 4) :|: TRUE
f_461(v943, v944, v945, v946, v947, v948, v949, v950, 0, v956, v953, 1, v952, v955, v957, v958, v959, v960, v961, v962, v963, 3, 2, 4) -> f_462(v943, v944, v945, v946, v947, v948, v949, v950, 0, v956, v958, 1, v952, v955, v953, v957, v959, v960, v961, v962, v963, 3, 2, 4) :|: 0 = 0
f_462(v943, v944, v945, v946, v947, v948, v949, v950, 0, v956, v958, 1, v952, v955, v953, v957, v959, v960, v961, v962, v963, 3, 2, 4) -> f_463(v943, v944, v945, v946, v947, v948, v949, v950, 0, v956, v958, 1, v952, v955, v953, v957, v959, v960, v961, v962, v963, 3, 2, 4) :|: 0 <= v958 && 1 <= v953 && 1 <= v950
f_463(v943, v944, v945, v946, v947, v948, v949, v950, 0, v956, v958, 1, v952, v955, v953, v957, v959, v960, v961, v962, v963, 3, 2, 4) -> f_465(v943, v944, v945, v946, v947, v948, v949, v950, 0, v956, v958, 1, v952, v955, v953, v957, v959, v960, v961, v962, v963, 3, 2, 4) :|: 0 = 0
f_465(v943, v944, v945, v946, v947, v948, v949, v950, 0, v956, v958, 1, v952, v955, v953, v957, v959, v960, v961, v962, v963, 3, 2, 4) -> f_467(v943, v944, v945, v946, v947, v948, v949, v950, 0, v956, v958, 1, v952, v955, v953, v957, v959, v960, v961, v962, v963, 3, 2, 4) :|: 0 = 0
f_467(v943, v944, v945, v946, v947, v948, v949, v950, 0, v956, v958, 1, v952, v955, v953, v957, v959, v960, v961, v962, v963, 3, 2, 4) -> f_468(v943, v944, v945, v946, v947, v948, v949, v950, 0, v956, 1, v952, v955, v953, v957, v958, v959, v960, v961, v962, v963, 3, 4) :|: TRUE
f_468(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4) -> f_470(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4) :|: TRUE
f_470(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4) -> f_472(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1025, v1024, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4) :|: 0 = 0
f_472(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1025, v1024, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4) -> f_474(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1025, v1024, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4) :|: 0 = 0
f_474(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1025, v1024, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4) -> f_476(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1024, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4) :|: v1105 = v1022 + v1018
f_476(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1024, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4) -> f_478(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1024, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4) :|: 0 = 0
f_478(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1024, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4) -> f_479(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4) :|: v1022 + v1018 = v1105
f_479(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4) -> f_480(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) :|: 1 + v1106 = v1022 && 2 + v1106 <= 0
f_480(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) -> f_481(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) :|: TRUE
f_481(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) -> f_482(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1027, v1026, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) :|: 0 = 0
f_482(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1027, v1026, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) -> f_483(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1027, v1026, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) :|: 0 = 0
f_483(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1027, v1026, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) -> f_484(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1108, v1026, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) :|: v1108 = v1028 + v1018
f_484(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1108, v1026, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) -> f_485(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1108, v1026, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) :|: 0 = 0
f_485(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1108, v1026, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) -> f_486(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1108, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) :|: v1028 + v1018 = v1108
f_486(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1108, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) -> f_487(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1108, v1109, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) :|: 1 + v1109 = v1028 && 0 <= 1 + v1109
f_487(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1108, v1109, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) -> f_488(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1108, v1109, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) :|: TRUE
f_488(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1108, v1109, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) -> f_489(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1108, v1109, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) :|: TRUE
f_489(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, 1, v1105, v1106, v1028, v1108, v1109, v1029, v1030, v1031, v1032, v1033, 3, 4, 2) -> f_458(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 0, v1022, v1028, 1, v1105, v1106, v1108, v1109, v1029, v1030, v1031, v1032, v1033, 3, 2, 4) :|: TRUE
f_458(v943, v944, v945, v946, v947, v948, v949, v950, 0, v952, v953, 1, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 2, 4) -> f_459(v943, v944, v945, v946, v947, v948, v949, v950, 0, v956, v953, 1, v952, v955, v957, v958, v959, v960, v961, v962, v963, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_459(v943:0, v944:0, v945:0, v946:0, v947:0, v948:0, v949:0, v950:0, 0, 1 + v1106:0, v953:0, 1, v952:0, v955:0, v957:0, 1 + v1109:0, v959:0, v960:0, v961:0, v962:0, v963:0, 3, 2, 4) -> f_459(v943:0, v944:0, v945:0, v946:0, v947:0, v948:0, v949:0, v950:0, 0, v1106:0, 1 + v1109:0, 1, 1 + v1106:0, 1 + v1106:0 + v948:0, 1 + v1109:0 + v948:0, v1109:0, v959:0, v960:0, v961:0, v962:0, v963:0, 3, 2, 4) :|: v953:0 > 0 && v1109:0 > -2 && v950:0 > 0 && v1106:0 < -1
Filtered unneeded arguments:
   f_459(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_459(x8, x10, x11, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_459(v950:0, sum~cons_1~v1106:0, v953:0, sum~cons_1~v1109:0) -> f_459(v950:0, v1106:0, 1 + v1109:0, v1109:0) :|: v1109:0 > -2 && v953:0 > 0 && v1106:0 < -1 && v950:0 > 0 && sum~cons_1~v1106:0 = 1 + v1106:0 && sum~cons_1~v1109:0 = 1 + v1109:0

----------------------------------------

(9)
Obligation:
Rules:
f_459(v950:0, sum~cons_1~v1106:0, v953:0, sum~cons_1~v1109:0) -> f_459(v950:0, v1106:0, 1 + v1109:0, v1109:0) :|: v1109:0 > -2 && v953:0 > 0 && v1106:0 < -1 && v950:0 > 0 && sum~cons_1~v1106:0 = 1 + v1106:0 && sum~cons_1~v1109:0 = 1 + v1109:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_459(v950:0:0, sum~cons_1~v1106:0:0, v953:0:0, sum~cons_1~v1109:0:0) -> f_459(v950:0:0, v1106:0:0, 1 + v1109:0:0, v1109:0:0) :|: v1106:0:0 < -1 && v950:0:0 > 0 && v953:0:0 > 0 && v1109:0:0 > -2 && sum~cons_1~v1106:0:0 = 1 + v1106:0:0 && sum~cons_1~v1109:0:0 = 1 + v1109:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_459(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_459(v950:0:0, sum~cons_1~v1106:0:0, v953:0:0, sum~cons_1~v1109:0:0) -> f_459(v950:0:0, v1106:0:0, 1 + v1109:0:0, v1109:0:0) :|: v1106:0:0 < -1 && v950:0:0 > 0 && v953:0:0 > 0 && v1109:0:0 > -2 && sum~cons_1~v1106:0:0 = 1 + v1106:0:0 && sum~cons_1~v1109:0:0 = 1 + v1109:0:0
The following rules are bounded:
f_459(v950:0:0, sum~cons_1~v1106:0:0, v953:0:0, sum~cons_1~v1109:0:0) -> f_459(v950:0:0, v1106:0:0, 1 + v1109:0:0, v1109:0:0) :|: v1106:0:0 < -1 && v950:0:0 > 0 && v953:0:0 > 0 && v1109:0:0 > -2 && sum~cons_1~v1106:0:0 = 1 + v1106:0:0 && sum~cons_1~v1109:0:0 = 1 + v1109:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_377(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v588, v590, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) -> f_379(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v588, v590, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) :|: 0 <= v591 && 1 <= v588 && 1 <= v585
f_379(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v588, v590, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) -> f_382(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v588, v590, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) :|: 0 = 0
f_382(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v588, v590, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) -> f_385(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v588, v590, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) :|: 0 = 0
f_385(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v588, v590, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) -> f_388(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v588, v590, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) :|: TRUE
f_388(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v588, v590, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) -> f_391(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v590, v588, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) :|: 0 = 0
f_391(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v590, v588, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) -> f_395(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v590, v588, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) :|: 0 = 0
f_395(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v590, v588, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) -> f_399(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v588, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) :|: v655 = v591 + v584
f_399(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v588, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) -> f_403(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v588, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) :|: 0 = 0
f_403(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v588, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) -> f_407(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) :|: v591 + v584 = v655
f_407(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) -> f_412(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) :|: 1 + v780 = v591 && 0 <= 1 + v780
f_412(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) -> f_416(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) :|: TRUE
f_416(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) -> f_420(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v593, v592, v595, v596, v597, v598, v599, 3, 4) :|: 0 = 0
f_420(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v593, v592, v595, v596, v597, v598, v599, 3, 4) -> f_423(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v593, v592, v595, v596, v597, v598, v599, 3, 4) :|: 0 = 0
f_423(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v593, v592, v595, v596, v597, v598, v599, 3, 4) -> f_426(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v796, v592, v595, v596, v597, v598, v599, 3, 4) :|: v796 = v594 + v584
f_426(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v796, v592, v595, v596, v597, v598, v599, 3, 4) -> f_430(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v796, v592, v595, v596, v597, v598, v599, 3, 4) :|: 0 = 0
f_430(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v796, v592, v595, v596, v597, v598, v599, 3, 4) -> f_434(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v796, v595, v596, v597, v598, v599, 3, 4) :|: v594 + v584 = v796
f_434(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v796, v595, v596, v597, v598, v599, 3, 4) -> f_438(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v796, v864, v595, v596, v597, v598, v599, 3, 4) :|: 1 + v864 = v594
f_438(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v796, v864, v595, v596, v597, v598, v599, 3, 4) -> f_442(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v796, v864, v595, v596, v597, v598, v599, 3, 4) :|: TRUE
f_442(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v796, v864, v595, v596, v597, v598, v599, 3, 4) -> f_446(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v796, v864, v595, v596, v597, v598, v599, 3, 4) :|: TRUE
f_446(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v796, v864, v595, v596, v597, v598, v599, 3, 4) -> f_375(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v655, v780, v594, v796, v864, v595, v596, v597, v598, v599, 3, 4) :|: TRUE
f_375(v579, v580, v581, v582, v583, v584, v585, v586, 0, v588, 1, v590, v591, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) -> f_377(v579, v580, v581, v582, v583, v584, v585, v586, 0, v591, 1, v588, v590, v592, v593, v594, v595, v596, v597, v598, v599, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_377(v579:0, v580:0, v581:0, v582:0, v583:0, v584:0, v585:0, v586:0, 0, 1 + v780:0, 1, v588:0, v590:0, v592:0, v593:0, 1 + v864:0, v595:0, v596:0, v597:0, v598:0, v599:0, 3, 4) -> f_377(v579:0, v580:0, v581:0, v582:0, v583:0, v584:0, v585:0, v586:0, 0, v780:0, 1, 1 + v780:0, 1 + v780:0 + v584:0, 1 + v864:0, 1 + v864:0 + v584:0, v864:0, v595:0, v596:0, v597:0, v598:0, v599:0, 3, 4) :|: v588:0 > 0 && v780:0 > -2 && v585:0 > 0
Filtered unneeded arguments:
   f_377(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_377(x7, x10, x12, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_377(v585:0, sum~cons_1~v780:0, v588:0, sum~cons_1~v864:0) -> f_377(v585:0, v780:0, 1 + v780:0, v864:0) :|: v780:0 > -2 && v585:0 > 0 && v588:0 > 0 && sum~cons_1~v780:0 = 1 + v780:0 && sum~cons_1~v864:0 = 1 + v864:0

----------------------------------------

(16)
Obligation:
Rules:
f_377(v585:0, sum~cons_1~v780:0, v588:0, sum~cons_1~v864:0) -> f_377(v585:0, v780:0, 1 + v780:0, v864:0) :|: v780:0 > -2 && v585:0 > 0 && v588:0 > 0 && sum~cons_1~v780:0 = 1 + v780:0 && sum~cons_1~v864:0 = 1 + v864:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_377(v585:0:0, sum~cons_1~v780:0:0, v588:0:0, sum~cons_1~v864:0:0) -> f_377(v585:0:0, v780:0:0, 1 + v780:0:0, v864:0:0) :|: v780:0:0 > -2 && v585:0:0 > 0 && v588:0:0 > 0 && sum~cons_1~v780:0:0 = 1 + v780:0:0 && sum~cons_1~v864:0:0 = 1 + v864:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_377 ] = f_377_2

The following rules are decreasing:
f_377(v585:0:0, sum~cons_1~v780:0:0, v588:0:0, sum~cons_1~v864:0:0) -> f_377(v585:0:0, v780:0:0, 1 + v780:0:0, v864:0:0) :|: v780:0:0 > -2 && v585:0:0 > 0 && v588:0:0 > 0 && sum~cons_1~v780:0:0 = 1 + v780:0:0 && sum~cons_1~v864:0:0 = 1 + v864:0:0

The following rules are bounded:
f_377(v585:0:0, sum~cons_1~v780:0:0, v588:0:0, sum~cons_1~v864:0:0) -> f_377(v585:0:0, v780:0:0, 1 + v780:0:0, v864:0:0) :|: v780:0:0 > -2 && v585:0:0 > 0 && v588:0:0 > 0 && sum~cons_1~v780:0:0 = 1 + v780:0:0 && sum~cons_1~v864:0:0 = 1 + v864:0:0


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
