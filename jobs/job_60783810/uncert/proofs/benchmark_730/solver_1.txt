YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/hLnXY.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 203 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 28 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) TerminationGraphProcessor [EQUIVALENT, 1 ms]
(12) IntTRS
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IntTRS
(15) RankingReductionPairProof [EQUIVALENT, 4 ms]
(16) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/hLnXY.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/hLnXY.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = load %3
		%7 = icmp slt %6 1
		br %7, %8, %9
	8:
		store 0, %1
		br %23
	9:
		br %10
	10:
		%11 = load %2
		%12 = icmp sge %11 0
		br %12, %13, %22
	13:
		%14 = load %2
		%15 = load %3
		%16 = sub i32 %14, %15
		store %16, %2
		%17 = call i32 @__VERIFIER_nondet_int()
		store %17, %3
		%18 = load %3
		%19 = icmp slt %18 1
		br %19, %20, %21
	20:
		br %22
	21:
		br %10
	22:
		store 0, %1
		br %23
	23:
		%24 = load %1
		ret %24


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_182(v50, v51, v52, v53, v54, 0, v59, 1, v56, v58, v60, v61, v62, v63, 3, 4) -> f_183(v50, v51, v52, v53, v54, 0, v59, 1, v56, v58, v60, v61, v62, v63, 3, 4) :|: 0 <= v59 && 1 <= v56
f_183(v50, v51, v52, v53, v54, 0, v59, 1, v56, v58, v60, v61, v62, v63, 3, 4) -> f_185(v50, v51, v52, v53, v54, 0, v59, 1, v56, v58, v60, v61, v62, v63, 3, 4) :|: 0 = 0
f_185(v50, v51, v52, v53, v54, 0, v59, 1, v56, v58, v60, v61, v62, v63, 3, 4) -> f_187(v50, v51, v52, v53, v54, 0, v59, 1, v56, v58, v60, v61, v62, v63, 3, 4) :|: TRUE
f_187(v50, v51, v52, v53, v54, 0, v59, 1, v56, v58, v60, v61, v62, v63, 3, 4) -> f_189(v50, v51, v52, v53, v54, 0, v59, 1, v58, v60, v61, v62, v63, 3, 4) :|: 0 = 0
f_189(v50, v51, v52, v53, v54, 0, v59, 1, v58, v60, v61, v62, v63, 3, 4) -> f_191(v50, v51, v52, v53, v54, 0, v59, 1, v60, v61, v62, v63, 3, 4) :|: 0 = 0
f_191(v50, v51, v52, v53, v54, 0, v59, 1, v60, v61, v62, v63, 3, 4) -> f_193(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v61, v62, v63, 3, 4) :|: v79 + v60 = v59
f_193(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v61, v62, v63, 3, 4) -> f_195(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v61, v62, v63, 3, 4) :|: TRUE
f_195(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v61, v62, v63, 3, 4) -> f_196(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v81, v61, v62, v63, 3, 4) :|: TRUE
f_196(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v81, v61, v62, v63, 3, 4) -> f_197(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v81, v61, v62, v63, 3, 4) :|: TRUE
f_197(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v81, v61, v62, v63, 3, 4) -> f_198(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v81, v61, v62, v63, 3, 4) :|: 0 = 0
f_198(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v81, v61, v62, v63, 3, 4) -> f_200(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v81, v61, v62, v63, 3, 4) :|: 1 <= v81
f_200(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v81, v61, v62, v63, 3, 4) -> f_202(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v81, v61, v62, v63, 3, 4) :|: 0 = 0
f_202(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v81, v61, v62, v63, 3, 4) -> f_204(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v81, v61, v62, v63, 3, 4) :|: TRUE
f_204(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v81, v61, v62, v63, 3, 4) -> f_206(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v81, v61, v62, v63, 3, 4) :|: TRUE
f_206(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v81, v61, v62, v63, 3, 4) -> f_181(v50, v51, v52, v53, v54, 0, v59, 1, v60, v79, v81, v61, v62, v63, 3, 4) :|: TRUE
f_181(v50, v51, v52, v53, v54, 0, v56, 1, v58, v59, v60, v61, v62, v63, 3, 4) -> f_182(v50, v51, v52, v53, v54, 0, v59, 1, v56, v58, v60, v61, v62, v63, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_182(v50:0, v51:0, v52:0, v53:0, v54:0, 0, v79:0 + v60:0, 1, v56:0, v58:0, v60:0, v61:0, v62:0, v63:0, 3, 4) -> f_182(v50:0, v51:0, v52:0, v53:0, v54:0, 0, v79:0, 1, v79:0 + v60:0, v60:0, v81:0, v61:0, v62:0, v63:0, 3, 4) :|: v56:0 > 0 && v81:0 > 0 && v79:0 + v60:0 > -1
Filtered unneeded arguments:
   f_182(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_182(x7, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_182(sum~v79:0~v60:0, v56:0, v60:0) -> f_182(v79:0, v79:0 + v60:0, v81:0) :|: v81:0 > 0 && v79:0 + v60:0 > -1 && v56:0 > 0 && sum~v79:0~v60:0 = v79:0 + v60:0

----------------------------------------

(8)
Obligation:
Rules:
f_182(sum~v79:0~v60:0, v56:0, v60:0) -> f_182(v79:0, v79:0 + v60:0, v81:0) :|: v81:0 > 0 && v79:0 + v60:0 > -1 && v56:0 > 0 && sum~v79:0~v60:0 = v79:0 + v60:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_182(sum~v79:0:0~v60:0:0, v56:0:0, v60:0:0) -> f_182(v79:0:0, v79:0:0 + v60:0:0, v81:0:0) :|: v81:0:0 > 0 && v79:0:0 + v60:0:0 > -1 && v56:0:0 > 0 && sum~v79:0:0~v60:0:0 = v79:0:0 + v60:0:0

----------------------------------------

(11) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

f_182(sum~v79:0:0~v60:0:0, v56:0:0, v60:0:0) -> f_182(v79:0:0, v79:0:0 + v60:0:0, v81:0:0) :|: v81:0:0 > 0 && v79:0:0 + v60:0:0 > -1 && v56:0:0 > 0 && sum~v79:0:0~v60:0:0 = v79:0:0 + v60:0:0
has been transformed into
f_182(sum~v79:0:0~v60:0:0, v56:0:0, v60:0:0) -> f_182(v79:0:0, v79:0:0 + v60:0:0, v81:0:0) :|: v60:0:0 = x14 && (v56:0:0 = x13 + x12 && (sum~v79:0:0~v60:0:0 = x13 && (v81:0:0 > 0 && v79:0:0 + v60:0:0 > -1 && v56:0:0 > 0 && sum~v79:0:0~v60:0:0 = v79:0:0 + v60:0:0))) && x14 > 0 && x13 + x12 > -1.


f_182(sum~v79:0:0~v60:0:0, v56:0:0, v60:0:0) -> f_182(v79:0:0, v79:0:0 + v60:0:0, v81:0:0) :|: v60:0:0 = x14 && (v56:0:0 = x13 + x12 && (sum~v79:0:0~v60:0:0 = x13 && (v81:0:0 > 0 && v79:0:0 + v60:0:0 > -1 && v56:0:0 > 0 && sum~v79:0:0~v60:0:0 = v79:0:0 + v60:0:0))) && x14 > 0 && x13 + x12 > -1 and 
f_182(sum~v79:0:0~v60:0:0, v56:0:0, v60:0:0) -> f_182(v79:0:0, v79:0:0 + v60:0:0, v81:0:0) :|: v60:0:0 = x14 && (v56:0:0 = x13 + x12 && (sum~v79:0:0~v60:0:0 = x13 && (v81:0:0 > 0 && v79:0:0 + v60:0:0 > -1 && v56:0:0 > 0 && sum~v79:0:0~v60:0:0 = v79:0:0 + v60:0:0))) && x14 > 0 && x13 + x12 > -1
have been merged into the new rule
f_182(x31, x32, x33) -> f_182(x34, x34 + x35, x36) :|: x33 = x37 && (x32 = x38 + x39 && (x31 = x38 && (x35 > 0 && x40 + x33 > -1 && x32 > 0 && x31 = x40 + x33))) && x37 > 0 && x38 + x39 > -1 && (x35 = x41 && (x40 + x33 = x42 + x43 && (x40 = x42 && (x36 > 0 && x34 + x35 > -1 && x40 + x33 > 0 && x40 = x34 + x35))) && x41 > 0 && x42 + x43 > -1)


----------------------------------------

(12)
Obligation:
Rules:
f_182(x44, x45, x46) -> f_182(x47, x47 + x48, x49) :|: TRUE && x46 + -1 * x50 = 0 && x45 + -1 * x51 + -1 * x52 = 0 && x44 + -1 * x51 = 0 && x48 >= 1 && x45 >= 1 && x44 + -1 * x53 + -1 * x46 = 0 && x50 >= 1 && x51 + x52 >= 0 && x48 + -1 * x54 = 0 && x53 + x46 + -1 * x55 + -1 * x56 = 0 && x53 + -1 * x55 = 0 && x49 >= 1 && x47 + x48 >= 0 && x53 + x46 >= 1 && x53 + -1 * x47 + -1 * x48 = 0 && x54 >= 1 && x55 + x56 >= 0

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f_182(x44:0, x45:0, x46:0) -> f_182(x47:0, x47:0 + x48:0, x49:0) :|: x54:0 > 0 && x55:0 + x56:0 >= 0 && x53:0 + -1 * x47:0 + -1 * x48:0 = 0 && x53:0 + x46:0 >= 1 && x47:0 + x48:0 >= 0 && x49:0 > 0 && x53:0 + -1 * x55:0 = 0 && x53:0 + x46:0 + -1 * x55:0 + -1 * x56:0 = 0 && x48:0 + -1 * x54:0 = 0 && x51:0 + x52:0 >= 0 && x50:0 > 0 && x44:0 + -1 * x53:0 + -1 * x46:0 = 0 && x45:0 > 0 && x48:0 > 0 && x44:0 + -1 * x51:0 = 0 && x46:0 + -1 * x50:0 = 0 && x45:0 + -1 * x51:0 + -1 * x52:0 = 0

----------------------------------------

(15) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_182 ] = 1/2*f_182_1

The following rules are decreasing:
f_182(x44:0, x45:0, x46:0) -> f_182(x47:0, x47:0 + x48:0, x49:0) :|: x54:0 > 0 && x55:0 + x56:0 >= 0 && x53:0 + -1 * x47:0 + -1 * x48:0 = 0 && x53:0 + x46:0 >= 1 && x47:0 + x48:0 >= 0 && x49:0 > 0 && x53:0 + -1 * x55:0 = 0 && x53:0 + x46:0 + -1 * x55:0 + -1 * x56:0 = 0 && x48:0 + -1 * x54:0 = 0 && x51:0 + x52:0 >= 0 && x50:0 > 0 && x44:0 + -1 * x53:0 + -1 * x46:0 = 0 && x45:0 > 0 && x48:0 > 0 && x44:0 + -1 * x51:0 = 0 && x46:0 + -1 * x50:0 = 0 && x45:0 + -1 * x51:0 + -1 * x52:0 = 0

The following rules are bounded:
f_182(x44:0, x45:0, x46:0) -> f_182(x47:0, x47:0 + x48:0, x49:0) :|: x54:0 > 0 && x55:0 + x56:0 >= 0 && x53:0 + -1 * x47:0 + -1 * x48:0 = 0 && x53:0 + x46:0 >= 1 && x47:0 + x48:0 >= 0 && x49:0 > 0 && x53:0 + -1 * x55:0 = 0 && x53:0 + x46:0 + -1 * x55:0 + -1 * x56:0 = 0 && x48:0 + -1 * x54:0 = 0 && x51:0 + x52:0 >= 0 && x50:0 > 0 && x44:0 + -1 * x53:0 + -1 * x46:0 = 0 && x45:0 > 0 && x48:0 > 0 && x44:0 + -1 * x51:0 = 0 && x46:0 + -1 * x50:0 = 0 && x45:0 + -1 * x51:0 + -1 * x52:0 = 0


----------------------------------------

(16)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
