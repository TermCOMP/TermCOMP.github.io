YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/fif6v.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 56 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 960 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 52 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 43 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/fif6v.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/fif6v.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca *i32, align 8
		%4 = alloca *i32, align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%5 = alloca i8, numElementsLit: 4, align 16
		%6 = bitcast *i8 %5 to *i32
		store %6, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %4)
		%7 = alloca i8, numElementsLit: 4, align 16
		%8 = bitcast *i8 %7 to *i32
		store %8, %4
		%9 = load %2
		%10 = load %3
		store %9, %10
		%11 = load %4
		store 0, %11
		br %12
	12:
		%13 = load %3
		%14 = load %13
		%15 = icmp sgt %14 1
		br %15, %16, %20
	16:
		%17 = load %3
		%18 = load %17
		%19 = icmp slt %18 100
		br %20
	20:
		%21 = phi [0, %12], [%19, %16]
		br %21, %22, %33
	22:
		%23 = load %3
		%24 = load %23
		%25 = load %3
		%26 = load %25
		%27 = mul i32 %24, %26
		%28 = load %3
		store %27, %28
		%29 = load %4
		%30 = load %29
		%31 = add i32 %30, 1
		%32 = load %4
		store %31, %32
		br %12
	33:
		%34 = load %4
		%35 = load %34
		ret %35

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 53
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @test_fun(i32 %2)
		ret %3


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 25 rulesP rules:
f_451(v427, v428, v429, v430, v431, v432, v433, 1, v435, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_452(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 0 = 0
f_452(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_453(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 1 < v435
f_453(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_455(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 0 = 0
f_455(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_457(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: TRUE
f_457(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_459(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 0 = 0
f_459(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_461(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 0 = 0
f_461(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_463(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: v435 < 100
f_463(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_466(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 0 = 0
f_466(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_469(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 0 = 0
f_469(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_471(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: TRUE
f_471(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_473(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 0 = 0
f_473(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_475(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 0 = 0
f_475(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_477(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 0 = 0
f_477(v427, v428, v429, v430, v431, v432, v435, 1, v433, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_479(v427, v428, v429, v430, v431, v432, v435, 1, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 0 = 0
f_479(v427, v428, v429, v430, v431, v432, v435, 1, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_480(v427, v428, v429, v430, v431, v432, v435, 1, v489, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: v489 = v435 * v435
f_480(v427, v428, v429, v430, v431, v432, v435, 1, v489, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_481(v427, v428, v429, v430, v431, v432, v435, 1, v489, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 0 = 0
f_481(v427, v428, v429, v430, v431, v432, v435, 1, v489, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_482(v427, v428, v429, v430, v431, v432, v435, 1, v489, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: TRUE
f_482(v427, v428, v429, v430, v431, v432, v435, 1, v489, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_483(v427, v428, v429, v430, v431, v432, v435, 1, v489, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 0 = 0
f_483(v427, v428, v429, v430, v431, v432, v435, 1, v489, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_484(v427, v428, v429, v430, v431, v432, v435, 1, v489, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 0 = 0
f_484(v427, v428, v429, v430, v431, v432, v435, 1, v489, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_485(v427, v428, v429, v430, v431, v432, v435, 1, v489, v437, v491, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: v491 = 1 + v437 && 2 <= v491
f_485(v427, v428, v429, v430, v431, v432, v435, 1, v489, v437, v491, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_486(v427, v428, v429, v430, v431, v432, v435, 1, v489, v437, v491, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 0 = 0
f_486(v427, v428, v429, v430, v431, v432, v435, 1, v489, v437, v491, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_487(v427, v428, v429, v430, v431, v432, v435, 1, v489, v437, v491, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: TRUE
f_487(v427, v428, v429, v430, v431, v432, v435, 1, v489, v437, v491, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_488(v427, v428, v429, v430, v431, v432, v435, 1, v489, v437, v491, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: TRUE
f_488(v427, v428, v429, v430, v431, v432, v435, 1, v489, v437, v491, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_450(v427, v428, v429, v430, v431, v432, v435, 1, v489, v437, v491, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: TRUE
f_450(v427, v428, v429, v430, v431, v432, v433, 1, v435, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) -> f_451(v427, v428, v429, v430, v431, v432, v433, 1, v435, v436, v437, v438, v439, v440, v441, v442, v443, v444, 0, 3, 7, 2, 99, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_451(v427:0, v428:0, v429:0, v430:0, v431:0, v432:0, v433:0, 1, v435:0, v436:0, v437:0, v438:0, v439:0, v440:0, v441:0, v442:0, v443:0, v444:0, 0, 3, 7, 2, 99, 4, 8) -> f_451(v427:0, v428:0, v429:0, v430:0, v431:0, v432:0, v435:0, 1, v435:0 * v435:0, v437:0, 1 + v437:0, v438:0, v439:0, v440:0, v441:0, v442:0, v443:0, v444:0, 0, 3, 7, 2, 99, 4, 8) :|: v435:0 > 1 && v437:0 > 0 && v435:0 < 100
Filtered unneeded arguments:
   f_451(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_451(x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_451(v435:0, v437:0) -> f_451(v435:0 * v435:0, 1 + v437:0) :|: v437:0 > 0 && v435:0 < 100 && v435:0 > 1

----------------------------------------

(8)
Obligation:
Rules:
f_451(v435:0, v437:0) -> f_451(v435:0 * v435:0, 1 + v437:0) :|: v437:0 > 0 && v435:0 < 100 && v435:0 > 1

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_451(v435:0:0, v437:0:0) -> f_451(v435:0:0 * v435:0:0, 1 + v437:0:0) :|: v437:0:0 > 0 && v435:0:0 < 100 && v435:0:0 > 1

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_451 ] = -1/2*f_451_1

The following rules are decreasing:
f_451(v435:0:0, v437:0:0) -> f_451(v435:0:0 * v435:0:0, 1 + v437:0:0) :|: v437:0:0 > 0 && v435:0:0 < 100 && v435:0:0 > 1

The following rules are bounded:
f_451(v435:0:0, v437:0:0) -> f_451(v435:0:0 * v435:0:0, 1 + v437:0:0) :|: v437:0:0 > 0 && v435:0:0 < 100 && v435:0:0 > 1


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
