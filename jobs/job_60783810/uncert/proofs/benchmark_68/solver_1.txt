YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/nojBI.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 59 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1855 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 39 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/nojBI.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/nojBI.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %7
		%14 = load %3
		%15 = load %5
		store %14, %15
		%16 = load %4
		%17 = load %6
		store %16, %17
		%18 = load %7
		store 0, %18
		br %19
	19:
		%20 = load %5
		%21 = load %20
		%22 = icmp sgt %21 1
		br %22, %23, %29
	23:
		%24 = load %5
		%25 = load %24
		%26 = load %6
		%27 = load %26
		%28 = icmp slt %25 %27
		br %29
	29:
		%30 = phi [0, %19], [%28, %23]
		br %30, %31, %42
	31:
		%32 = load %5
		%33 = load %32
		%34 = load %5
		%35 = load %34
		%36 = mul i32 %33, %35
		%37 = load %5
		store %36, %37
		%38 = load %7
		%39 = load %38
		%40 = add i32 %39, 1
		%41 = load %7
		store %40, %41
		br %19
	42:
		%43 = load %7
		%44 = load %43
		ret %44

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 63
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 27 rulesP rules:
f_519(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 1, v966, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_520(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_520(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_521(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 1 < v966
f_521(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_523(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_523(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_525(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: TRUE
f_525(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_527(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_527(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_529(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_529(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_531(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_531(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_533(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_533(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_535(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: v966 < v955
f_535(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_537(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_537(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_539(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_539(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_541(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: TRUE
f_541(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_543(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_543(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_545(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_545(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_547(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_547(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v964, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_549(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_549(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_550(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: v1107 = v966 * v966
f_550(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_551(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_551(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_552(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: TRUE
f_552(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_553(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_553(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_554(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_554(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_555(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v968, v1109, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: v1109 = 1 + v968 && 2 <= v1109
f_555(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v968, v1109, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_556(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v968, v1109, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_556(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v968, v1109, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_557(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v968, v1109, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: TRUE
f_557(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v968, v1109, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_558(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v968, v1109, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: TRUE
f_558(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v968, v1109, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_518(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v966, 1, v1107, v968, v1109, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: TRUE
f_518(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 1, v966, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) -> f_519(v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, v964, 1, v966, v967, v968, v969, v970, v971, v972, v973, v974, v975, v976, v977, v978, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_519(v954:0, v955:0, v956:0, v957:0, v958:0, v959:0, v960:0, v961:0, v962:0, v963:0, v964:0, 1, v966:0, v967:0, v968:0, v969:0, v970:0, v971:0, v972:0, v973:0, v974:0, v975:0, v976:0, v977:0, v978:0, 0, 3, 7, 2, 4, 8) -> f_519(v954:0, v955:0, v956:0, v957:0, v958:0, v959:0, v960:0, v961:0, v962:0, v963:0, v966:0, 1, v966:0 * v966:0, v968:0, 1 + v968:0, v969:0, v970:0, v971:0, v972:0, v973:0, v974:0, v975:0, v976:0, v977:0, v978:0, 0, 3, 7, 2, 4, 8) :|: v966:0 > 1 && v968:0 > 0 && v966:0 < v955:0
Filtered unneeded arguments:
   f_519(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_519(x2, x13, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_519(v955:0, v966:0, v968:0) -> f_519(v955:0, v966:0 * v966:0, 1 + v968:0) :|: v968:0 > 0 && v966:0 < v955:0 && v966:0 > 1

----------------------------------------

(8)
Obligation:
Rules:
f_519(v955:0, v966:0, v968:0) -> f_519(v955:0, v966:0 * v966:0, 1 + v968:0) :|: v968:0 > 0 && v966:0 < v955:0 && v966:0 > 1

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_519(v955:0:0, v966:0:0, v968:0:0) -> f_519(v955:0:0, v966:0:0 * v966:0:0, 1 + v968:0:0) :|: v968:0:0 > 0 && v966:0:0 < v955:0:0 && v966:0:0 > 1

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_519(x, x1, x2)] = -2 + x - x1 + x2

The following rules are decreasing:
f_519(v955:0:0, v966:0:0, v968:0:0) -> f_519(v955:0:0, v966:0:0 * v966:0:0, 1 + v968:0:0) :|: v968:0:0 > 0 && v966:0:0 < v955:0:0 && v966:0:0 > 1
The following rules are bounded:
f_519(v955:0:0, v966:0:0, v968:0:0) -> f_519(v955:0:0, v966:0:0 * v966:0:0, 1 + v968:0:0) :|: v968:0:0 > 0 && v966:0:0 < v955:0:0 && v966:0:0 > 1

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
