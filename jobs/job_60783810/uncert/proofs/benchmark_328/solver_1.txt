YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/YkE68.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 788 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 26 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) TerminationGraphProcessor [EQUIVALENT, 1 ms]
(12) IntTRS
(13) IntTRSCompressionProof [EQUIVALENT, 1 ms]
(14) IntTRS
(15) RankingReductionPairProof [EQUIVALENT, 3 ms]
(16) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/YkE68.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/YkE68.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = icmp sge %9 0
		br %10, %11, %15
	11:
		%12 = load %2
		%13 = load %4
		%14 = icmp sle %12 %13
		br %15
	15:
		%16 = phi [0, %8], [%14, %11]
		br %16, %17, %24
	17:
		%18 = load %2
		%19 = mul i32 2, %18
		%20 = load %3
		%21 = add i32 %19, %20
		store %21, %2
		%22 = load %3
		%23 = add i32 %22, 1
		store %23, %3
		br %8
	24:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_205(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) -> f_206(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) :|: 0 <= v248
f_206(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) -> f_208(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) :|: 0 = 0
f_208(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) -> f_210(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) :|: TRUE
f_210(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) -> f_212(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) :|: 0 = 0
f_212(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) -> f_214(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) :|: 0 = 0
f_214(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) -> f_215(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) :|: v248 <= v243
f_215(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) -> f_217(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) :|: 0 = 0
f_217(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) -> f_219(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) :|: 0 = 0
f_219(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) -> f_221(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) :|: TRUE
f_221(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) -> f_223(v237, v238, v239, v240, v241, v242, v243, v248, 1, v246, v247, v249, v250, v251, v252, v253, 0, 3, 4) :|: 0 = 0
f_223(v237, v238, v239, v240, v241, v242, v243, v248, 1, v246, v247, v249, v250, v251, v252, v253, 0, 3, 4) -> f_224(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) :|: v340 = 2 * v248 && 0 <= v340
f_224(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) -> f_225(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v249, v247, v250, v251, v252, v253, 0, 3, 2, 4) :|: 0 = 0
f_225(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v249, v247, v250, v251, v252, v253, 0, 3, 2, 4) -> f_226(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v249, v341, v247, v250, v251, v252, v253, 0, 3, 2, 4) :|: v341 = v340 + v249
f_226(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v249, v341, v247, v250, v251, v252, v253, 0, 3, 2, 4) -> f_227(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v249, v341, v247, v250, v251, v252, v253, 0, 3, 2, 4) :|: TRUE
f_227(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v249, v341, v247, v250, v251, v252, v253, 0, 3, 2, 4) -> f_228(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v249, v341, v250, v251, v252, v253, 0, 3, 2, 4) :|: 0 = 0
f_228(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v249, v341, v250, v251, v252, v253, 0, 3, 2, 4) -> f_229(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v249, v341, v343, v250, v251, v252, v253, 0, 3, 2, 4) :|: v343 = 1 + v249
f_229(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v249, v341, v343, v250, v251, v252, v253, 0, 3, 2, 4) -> f_230(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v249, v341, v343, v250, v251, v252, v253, 0, 3, 2, 4) :|: TRUE
f_230(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v249, v341, v343, v250, v251, v252, v253, 0, 3, 2, 4) -> f_231(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v249, v341, v343, v250, v251, v252, v253, 0, 3, 2, 4) :|: TRUE
f_231(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v249, v341, v343, v250, v251, v252, v253, 0, 3, 2, 4) -> f_204(v237, v238, v239, v240, v241, v242, v243, v248, 1, v340, v249, v341, v343, v250, v251, v252, v253, 0, 3, 2, 4) :|: TRUE
f_204(v237, v238, v239, v240, v241, v242, v243, v244, 1, v246, v247, v248, v249, v250, v251, v252, v253, 0, 3, 2, 4) -> f_205(v237, v238, v239, v240, v241, v242, v243, v248, 1, v244, v246, v247, v249, v250, v251, v252, v253, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_205(v237:0, v238:0, v239:0, v240:0, v241:0, v242:0, v243:0, v248:0, 1, v244:0, v246:0, v247:0, v249:0, v250:0, v251:0, v252:0, v253:0, 0, 3, 2, 4) -> f_205(v237:0, v238:0, v239:0, v240:0, v241:0, v242:0, v243:0, 2 * v248:0 + v249:0, 1, v248:0, 2 * v248:0, v249:0, 1 + v249:0, v250:0, v251:0, v252:0, v253:0, 0, 3, 2, 4) :|: v248:0 > -1 && 2 * v248:0 > -1 && v248:0 <= v243:0
Filtered unneeded arguments:
   f_205(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_205(x7, x8, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_205(v243:0, v248:0, v249:0) -> f_205(v243:0, 2 * v248:0 + v249:0, 1 + v249:0) :|: 2 * v248:0 > -1 && v248:0 <= v243:0 && v248:0 > -1

----------------------------------------

(8)
Obligation:
Rules:
f_205(v243:0, v248:0, v249:0) -> f_205(v243:0, 2 * v248:0 + v249:0, 1 + v249:0) :|: 2 * v248:0 > -1 && v248:0 <= v243:0 && v248:0 > -1

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_205(v243:0:0, v248:0:0, v249:0:0) -> f_205(v243:0:0, 2 * v248:0:0 + v249:0:0, 1 + v249:0:0) :|: 2 * v248:0:0 > -1 && v248:0:0 <= v243:0:0 && v248:0:0 > -1

----------------------------------------

(11) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

f_205(v243:0:0, v248:0:0, v249:0:0) -> f_205(v243:0:0, 2 * v248:0:0 + v249:0:0, 1 + v249:0:0) :|: 2 * v248:0:0 > -1 && v248:0:0 <= v243:0:0 && v248:0:0 > -1
has been transformed into
f_205(v243:0:0, v248:0:0, v249:0:0) -> f_205(v243:0:0, 2 * v248:0:0 + v249:0:0, 1 + v249:0:0) :|: v243:0:0 = x6 && (2 * v248:0:0 > -1 && v248:0:0 <= v243:0:0 && v248:0:0 > -1) && 2 * x7 > -1 && x7 <= x6 && x7 > -1.


f_205(v243:0:0, v248:0:0, v249:0:0) -> f_205(v243:0:0, 2 * v248:0:0 + v249:0:0, 1 + v249:0:0) :|: v243:0:0 = x6 && (2 * v248:0:0 > -1 && v248:0:0 <= v243:0:0 && v248:0:0 > -1) && 2 * x7 > -1 && x7 <= x6 && x7 > -1 and 
f_205(v243:0:0, v248:0:0, v249:0:0) -> f_205(v243:0:0, 2 * v248:0:0 + v249:0:0, 1 + v249:0:0) :|: v243:0:0 = x6 && (2 * v248:0:0 > -1 && v248:0:0 <= v243:0:0 && v248:0:0 > -1) && 2 * x7 > -1 && x7 <= x6 && x7 > -1
have been merged into the new rule
f_205(x19, x20, x21) -> f_205(x19, 2 * (2 * x20 + x21) + (1 + x21), 1 + (1 + x21)) :|: x19 = x22 && (2 * x20 > -1 && x20 <= x19 && x20 > -1) && 2 * x23 > -1 && x23 <= x22 && x23 > -1 && (x19 = x24 && (2 * (2 * x20 + x21) > -1 && 2 * x20 + x21 <= x19 && 2 * x20 + x21 > -1) && 2 * x25 > -1 && x25 <= x24 && x25 > -1)


----------------------------------------

(12)
Obligation:
Rules:
f_205(x26, x27, x28) -> f_205(x26, 4 * x27 + 3 * x28 + 1, 2 + x28) :|: TRUE && x26 + -1 * x29 = 0 && x27 >= 0 && x27 + -1 * x26 <= 0 && x30 >= 0 && x30 + -1 * x29 <= 0 && x26 + -1 * x31 = 0 && 2 * x27 + x28 >= 0 && 2 * x27 + x28 + -1 * x26 <= 0 && x32 >= 0 && x32 + -1 * x31 <= 0

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f_205(x26:0, x27:0, x28:0) -> f_205(x26:0, 4 * x27:0 + 3 * x28:0 + 1, 2 + x28:0) :|: x32:0 > -1 && x32:0 + -1 * x31:0 <= 0 && 2 * x27:0 + x28:0 + -1 * x26:0 <= 0 && 2 * x27:0 + x28:0 >= 0 && x26:0 + -1 * x31:0 = 0 && x30:0 + -1 * x29:0 <= 0 && x30:0 > -1 && x27:0 + -1 * x26:0 <= 0 && x26:0 + -1 * x29:0 = 0 && x27:0 > -1

----------------------------------------

(15) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_205 ] = -1/2*f_205_3 + 1/2*f_205_1

The following rules are decreasing:
f_205(x26:0, x27:0, x28:0) -> f_205(x26:0, 4 * x27:0 + 3 * x28:0 + 1, 2 + x28:0) :|: x32:0 > -1 && x32:0 + -1 * x31:0 <= 0 && 2 * x27:0 + x28:0 + -1 * x26:0 <= 0 && 2 * x27:0 + x28:0 >= 0 && x26:0 + -1 * x31:0 = 0 && x30:0 + -1 * x29:0 <= 0 && x30:0 > -1 && x27:0 + -1 * x26:0 <= 0 && x26:0 + -1 * x29:0 = 0 && x27:0 > -1

The following rules are bounded:
f_205(x26:0, x27:0, x28:0) -> f_205(x26:0, 4 * x27:0 + 3 * x28:0 + 1, 2 + x28:0) :|: x32:0 > -1 && x32:0 + -1 * x31:0 <= 0 && 2 * x27:0 + x28:0 + -1 * x26:0 <= 0 && 2 * x27:0 + x28:0 >= 0 && x26:0 + -1 * x31:0 = 0 && x30:0 + -1 * x29:0 <= 0 && x30:0 > -1 && x27:0 + -1 * x26:0 <= 0 && x26:0 + -1 * x29:0 = 0 && x27:0 > -1


----------------------------------------

(16)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
