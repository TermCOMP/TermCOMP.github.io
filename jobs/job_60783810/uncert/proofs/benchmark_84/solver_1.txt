YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/K71Sv.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 58 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1152 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 51 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 5 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 10 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 9 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/K71Sv.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/K71Sv.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		%4 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%5 = alloca i8, numElementsLit: 4, align 16
		%6 = bitcast *i8 %5 to *i32
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%7 = alloca i8, numElementsLit: 4, align 16
		%8 = bitcast *i8 %7 to *i32
		store %8, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %4)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %4
		%11 = load %4
		store 0, %11
		%12 = load %2
		store 0, %12
		br %13
	13:
		%14 = load %2
		%15 = load %14
		%16 = icmp slt %15 100
		br %16, %17, %26
	17:
		%18 = load %4
		%19 = load %18
		%20 = add i32 %19, 1
		%21 = load %4
		store %20, %21
		br %22
	22:
		%23 = load %2
		%24 = load %23
		%25 = add i32 %24, 1
		store %25, %23
		br %13
	26:
		%27 = load %3
		store 5, %27
		br %28
	28:
		%29 = load %3
		%30 = load %29
		%31 = icmp slt %30 21
		br %31, %32, %41
	32:
		%33 = load %4
		%34 = load %33
		%35 = add i32 %34, 1
		%36 = load %4
		store %35, %36
		br %37
	37:
		%38 = load %3
		%39 = load %38
		%40 = add i32 %39, 3
		store %40, %38
		br %28
	41:
		%42 = load %4
		%43 = load %42
		ret %43


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_438(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v296, 1, v298, v299, v300, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 20, 101, 8, 23, 4) -> f_439(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v298, v299, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 20, 101, 8, 23, 4) :|: 0 = 0
f_439(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v298, v299, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 20, 101, 8, 23, 4) -> f_440(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v298, v299, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4) :|: v300 < 21 && v296 <= 17
f_440(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v298, v299, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4) -> f_442(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v298, v299, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4) :|: 0 = 0
f_442(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v298, v299, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4) -> f_444(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v298, v299, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4) :|: TRUE
f_444(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v298, v299, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4) -> f_446(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v298, v299, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4) :|: 0 = 0
f_446(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v298, v299, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4) -> f_448(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4) :|: 0 = 0
f_448(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4) -> f_450(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4, 102) :|: v318 = 1 + v299 && 102 <= v318
f_450(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4, 102) -> f_451(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4, 102) :|: 0 = 0
f_451(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4, 102) -> f_452(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4, 102) :|: TRUE
f_452(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4, 102) -> f_453(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4, 102) :|: TRUE
f_453(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4, 102) -> f_454(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4, 102) :|: 0 = 0
f_454(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v296, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 17, 101, 8, 20, 4, 102) -> f_455(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v301, v302, v303, v304, v305, v306, v307, 3, 7, 101, 8, 20, 4, 102) :|: 0 = 0
f_455(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v301, v302, v303, v304, v305, v306, v307, 3, 7, 101, 8, 20, 4, 102) -> f_456(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v320, v301, v302, v303, v304, v305, v306, v307, 3, 7, 101, 8, 20, 4, 102, 11, 23) :|: v320 = 3 + v300 && 11 <= v320 && v320 <= 23
f_456(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v320, v301, v302, v303, v304, v305, v306, v307, 3, 7, 101, 8, 20, 4, 102, 11, 23) -> f_457(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v320, v301, v302, v303, v304, v305, v306, v307, 3, 7, 101, 8, 20, 4, 102, 11, 23) :|: TRUE
f_457(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v320, v301, v302, v303, v304, v305, v306, v307, 3, 7, 101, 8, 20, 4, 102, 11, 23) -> f_458(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v320, v301, v302, v303, v304, v305, v306, v307, 3, 7, 101, 8, 20, 4, 102, 11, 23) :|: TRUE
f_458(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v320, v301, v302, v303, v304, v305, v306, v307, 3, 7, 101, 8, 20, 4, 102, 11, 23) -> f_437(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v300, 1, v299, v318, v320, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 20, 101, 8, 23, 4) :|: TRUE
f_437(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v296, 1, v298, v299, v300, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 20, 101, 8, 23, 4) -> f_438(v286, v287, v288, v289, v290, v291, v292, 100, 0, 99, v296, 1, v298, v299, v300, v301, v302, v303, v304, v305, v306, v307, 3, 7, 5, 20, 101, 8, 23, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_438(v286:0, v287:0, v288:0, v289:0, v290:0, v291:0, v292:0, 100, 0, 99, v296:0, 1, v298:0, v299:0, v300:0, v301:0, v302:0, v303:0, v304:0, v305:0, v306:0, v307:0, 3, 7, 5, 20, 101, 8, 23, 4) -> f_438(v286:0, v287:0, v288:0, v289:0, v290:0, v291:0, v292:0, 100, 0, 99, v300:0, 1, v299:0, 1 + v299:0, 3 + v300:0, v301:0, v302:0, v303:0, v304:0, v305:0, v306:0, v307:0, 3, 7, 5, 20, 101, 8, 23, 4) :|: v296:0 < 18 && v300:0 < 21 && v299:0 > 100 && v300:0 > 7
Filtered unneeded arguments:
   f_438(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_438(x11, x14, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_438(v296:0, v299:0, v300:0) -> f_438(v300:0, 1 + v299:0, 3 + v300:0) :|: v300:0 < 21 && v296:0 < 18 && v300:0 > 7 && v299:0 > 100

----------------------------------------

(9)
Obligation:
Rules:
f_438(v296:0, v299:0, v300:0) -> f_438(v300:0, 1 + v299:0, 3 + v300:0) :|: v300:0 < 21 && v296:0 < 18 && v300:0 > 7 && v299:0 > 100

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_438(v296:0:0, v299:0:0, v300:0:0) -> f_438(v300:0:0, 1 + v299:0:0, 3 + v300:0:0) :|: v300:0:0 > 7 && v299:0:0 > 100 && v296:0:0 < 18 && v300:0:0 < 21

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_438 ] = -1/3*f_438_3

The following rules are decreasing:
f_438(v296:0:0, v299:0:0, v300:0:0) -> f_438(v300:0:0, 1 + v299:0:0, 3 + v300:0:0) :|: v300:0:0 > 7 && v299:0:0 > 100 && v296:0:0 < 18 && v300:0:0 < 21

The following rules are bounded:
f_438(v296:0:0, v299:0:0, v300:0:0) -> f_438(v300:0:0, 1 + v299:0:0, 3 + v300:0:0) :|: v300:0:0 > 7 && v299:0:0 > 100 && v296:0:0 < 18 && v300:0:0 < 21


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_353(v123, v124, v125, v126, v127, v128, v129, v130, 1, v132, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 99, 100, 4, 8) -> f_354(v123, v124, v125, v126, v127, v128, v129, v132, 1, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 99, 100, 4, 8) :|: 0 = 0
f_354(v123, v124, v125, v126, v127, v128, v129, v132, 1, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 99, 100, 4, 8) -> f_355(v123, v124, v125, v126, v127, v128, v129, v132, 1, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8) :|: v132 < 100 && v130 <= 98
f_355(v123, v124, v125, v126, v127, v128, v129, v132, 1, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8) -> f_357(v123, v124, v125, v126, v127, v128, v129, v132, 1, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8) :|: 0 = 0
f_357(v123, v124, v125, v126, v127, v128, v129, v132, 1, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8) -> f_359(v123, v124, v125, v126, v127, v128, v129, v132, 1, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8) :|: TRUE
f_359(v123, v124, v125, v126, v127, v128, v129, v132, 1, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8) -> f_361(v123, v124, v125, v126, v127, v128, v129, v132, 1, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8) :|: 0 = 0
f_361(v123, v124, v125, v126, v127, v128, v129, v132, 1, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8) -> f_363(v123, v124, v125, v126, v127, v128, v129, v132, 1, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8) :|: 0 = 0
f_363(v123, v124, v125, v126, v127, v128, v129, v132, 1, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8) -> f_365(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8, 2, 100) :|: v141 = 1 + v132 && 2 <= v141 && v141 <= 100
f_365(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8, 2, 100) -> f_367(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8, 2, 100) :|: 0 = 0
f_367(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8, 2, 100) -> f_369(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8, 2, 100) :|: TRUE
f_369(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8, 2, 100) -> f_371(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8, 2, 100) :|: TRUE
f_371(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8, 2, 100) -> f_373(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8, 2, 100) :|: 0 = 0
f_373(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v130, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 98, 99, 4, 8, 2, 100) -> f_375(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 99, 4, 8, 2, 100) :|: 0 = 0
f_375(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 99, 4, 8, 2, 100) -> f_377(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 99, 4, 8, 2, 100) :|: v141 = 1 + v132
f_377(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 99, 4, 8, 2, 100) -> f_379(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 99, 4, 8, 2, 100) :|: TRUE
f_379(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 99, 4, 8, 2, 100) -> f_381(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 99, 4, 8, 2, 100) :|: TRUE
f_381(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 99, 4, 8, 2, 100) -> f_352(v123, v124, v125, v126, v127, v128, v129, v132, 1, v141, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 99, 100, 4, 8) :|: TRUE
f_352(v123, v124, v125, v126, v127, v128, v129, v130, 1, v132, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 99, 100, 4, 8) -> f_353(v123, v124, v125, v126, v127, v128, v129, v130, 1, v132, v133, v134, v135, v136, v137, v138, v139, 0, 3, 7, 99, 100, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_353(v123:0, v124:0, v125:0, v126:0, v127:0, v128:0, v129:0, v130:0, 1, v132:0, v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, 0, 3, 7, 99, 100, 4, 8) -> f_353(v123:0, v124:0, v125:0, v126:0, v127:0, v128:0, v129:0, v132:0, 1, 1 + v132:0, v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, 0, 3, 7, 99, 100, 4, 8) :|: v130:0 < 99 && v132:0 < 100 && v132:0 > 0
Filtered unneeded arguments:
   f_353(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_353(x8, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_353(v130:0, v132:0) -> f_353(v132:0, 1 + v132:0) :|: v132:0 < 100 && v132:0 > 0 && v130:0 < 99

----------------------------------------

(16)
Obligation:
Rules:
f_353(v130:0, v132:0) -> f_353(v132:0, 1 + v132:0) :|: v132:0 < 100 && v132:0 > 0 && v130:0 < 99

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_353(v130:0:0, v132:0:0) -> f_353(v132:0:0, 1 + v132:0:0) :|: v132:0:0 < 100 && v132:0:0 > 0 && v130:0:0 < 99

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_353 ] = -1*f_353_2

The following rules are decreasing:
f_353(v130:0:0, v132:0:0) -> f_353(v132:0:0, 1 + v132:0:0) :|: v132:0:0 < 100 && v132:0:0 > 0 && v130:0:0 < 99

The following rules are bounded:
f_353(v130:0:0, v132:0:0) -> f_353(v132:0:0, 1 + v132:0:0) :|: v132:0:0 < 100 && v132:0:0 > 0 && v130:0:0 < 99


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
