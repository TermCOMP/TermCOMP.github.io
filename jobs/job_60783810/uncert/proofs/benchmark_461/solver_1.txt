YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/YJdUo.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 404 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 26 ms]
(8) IntTRS
(9) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/YJdUo.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/YJdUo.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = load %3
		%11 = icmp sgt %9 %10
		br %11, %12, %16
	12:
		%13 = load %2
		%14 = load %4
		%15 = icmp sgt %13 %14
		br %16
	16:
		%17 = phi [0, %8], [%15, %12]
		br %17, %18, %23
	18:
		%19 = load %3
		%20 = add i32 %19, 1
		store %20, %3
		%21 = load %4
		%22 = add i32 %21, 1
		store %22, %4
		br %8
	23:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_199(v257, v258, v259, v260, v261, v262, v263, v264, 1, v266, v267, v268, v269, v270, v271, v272, 0, 3, 4) -> f_200(v257, v258, v259, v260, v261, v262, v263, v267, 1, v266, v264, v268, v269, v270, v271, v272, 0, 3, 4) :|: 0 = 0
f_200(v257, v258, v259, v260, v261, v262, v263, v267, 1, v266, v264, v268, v269, v270, v271, v272, 0, 3, 4) -> f_201(v257, v258, v259, v260, v261, v262, v263, v267, 1, v266, v264, v268, v269, v270, v271, v272, 0, 3, 4) :|: v267 < v261
f_201(v257, v258, v259, v260, v261, v262, v263, v267, 1, v266, v264, v268, v269, v270, v271, v272, 0, 3, 4) -> f_203(v257, v258, v259, v260, v261, v262, v263, v267, 1, v266, v264, v268, v269, v270, v271, v272, 0, 3, 4) :|: 0 = 0
f_203(v257, v258, v259, v260, v261, v262, v263, v267, 1, v266, v264, v268, v269, v270, v271, v272, 0, 3, 4) -> f_205(v257, v258, v259, v260, v261, v262, v263, v267, 1, v266, v264, v268, v269, v270, v271, v272, 0, 3, 4) :|: TRUE
f_205(v257, v258, v259, v260, v261, v262, v263, v267, 1, v266, v264, v268, v269, v270, v271, v272, 0, 3, 4) -> f_207(v257, v258, v259, v260, v261, v262, v263, v267, 1, v266, v264, v268, v269, v270, v271, v272, 0, 3, 4) :|: 0 = 0
f_207(v257, v258, v259, v260, v261, v262, v263, v267, 1, v266, v264, v268, v269, v270, v271, v272, 0, 3, 4) -> f_209(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v264, v266, v269, v270, v271, v272, 0, 3, 4) :|: 0 = 0
f_209(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v264, v266, v269, v270, v271, v272, 0, 3, 4) -> f_210(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v264, v266, v269, v270, v271, v272, 0, 3, 4) :|: v268 < v261
f_210(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v264, v266, v269, v270, v271, v272, 0, 3, 4) -> f_212(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v264, v266, v269, v270, v271, v272, 0, 3, 4) :|: 0 = 0
f_212(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v264, v266, v269, v270, v271, v272, 0, 3, 4) -> f_214(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v264, v266, v269, v270, v271, v272, 0, 3, 4) :|: 0 = 0
f_214(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v264, v266, v269, v270, v271, v272, 0, 3, 4) -> f_216(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v264, v266, v269, v270, v271, v272, 0, 3, 4) :|: TRUE
f_216(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v264, v266, v269, v270, v271, v272, 0, 3, 4) -> f_218(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v266, v269, v270, v271, v272, 0, 3, 4) :|: 0 = 0
f_218(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v266, v269, v270, v271, v272, 0, 3, 4) -> f_219(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v372, v266, v269, v270, v271, v272, 0, 3, 4) :|: v372 = 1 + v267
f_219(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v372, v266, v269, v270, v271, v272, 0, 3, 4) -> f_220(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v372, v266, v269, v270, v271, v272, 0, 3, 4) :|: TRUE
f_220(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v372, v266, v269, v270, v271, v272, 0, 3, 4) -> f_221(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v372, v269, v270, v271, v272, 0, 3, 4) :|: 0 = 0
f_221(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v372, v269, v270, v271, v272, 0, 3, 4) -> f_222(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v372, v374, v269, v270, v271, v272, 0, 3, 4) :|: v374 = 1 + v268
f_222(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v372, v374, v269, v270, v271, v272, 0, 3, 4) -> f_223(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v372, v374, v269, v270, v271, v272, 0, 3, 4) :|: TRUE
f_223(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v372, v374, v269, v270, v271, v272, 0, 3, 4) -> f_224(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v372, v374, v269, v270, v271, v272, 0, 3, 4) :|: TRUE
f_224(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v372, v374, v269, v270, v271, v272, 0, 3, 4) -> f_198(v257, v258, v259, v260, v261, v262, v263, v267, 1, v268, v372, v374, v269, v270, v271, v272, 0, 3, 4) :|: TRUE
f_198(v257, v258, v259, v260, v261, v262, v263, v264, 1, v266, v267, v268, v269, v270, v271, v272, 0, 3, 4) -> f_199(v257, v258, v259, v260, v261, v262, v263, v264, 1, v266, v267, v268, v269, v270, v271, v272, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_199(v257:0, v258:0, v259:0, v260:0, v261:0, v262:0, v263:0, v264:0, 1, v266:0, v267:0, v268:0, v269:0, v270:0, v271:0, v272:0, 0, 3, 4) -> f_199(v257:0, v258:0, v259:0, v260:0, v261:0, v262:0, v263:0, v267:0, 1, v268:0, 1 + v267:0, 1 + v268:0, v269:0, v270:0, v271:0, v272:0, 0, 3, 4) :|: v268:0 < v261:0 && v267:0 < v261:0
Filtered unneeded arguments:
   f_199(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_199(x5, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_199(v261:0, v267:0, v268:0) -> f_199(v261:0, 1 + v267:0, 1 + v268:0) :|: v268:0 < v261:0 && v267:0 < v261:0

----------------------------------------

(8)
Obligation:
Rules:
f_199(v261:0, v267:0, v268:0) -> f_199(v261:0, 1 + v267:0, 1 + v268:0) :|: v268:0 < v261:0 && v267:0 < v261:0

----------------------------------------

(9) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_199(x, x1, x2)] = x - x1

The following rules are decreasing:
f_199(v261:0, v267:0, v268:0) -> f_199(v261:0, 1 + v267:0, 1 + v268:0) :|: v268:0 < v261:0 && v267:0 < v261:0
The following rules are bounded:
f_199(v261:0, v267:0, v268:0) -> f_199(v261:0, 1 + v267:0, 1 + v268:0) :|: v268:0 < v261:0 && v267:0 < v261:0

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
