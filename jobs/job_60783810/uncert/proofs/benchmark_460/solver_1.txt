YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/M4b8s.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 21 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 397 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 42 ms]
(8) IntTRS
(9) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/M4b8s.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/M4b8s.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = load %3
		%11 = load %4
		%12 = add i32 %10, %11
		%13 = icmp sgt %9 %12
		br %13, %14, %19
	14:
		%15 = load %3
		%16 = add i32 %15, 1
		store %16, %3
		%17 = load %4
		%18 = add i32 %17, 1
		store %18, %4
		br %8
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_160(v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, 1, v59, v60, v61, v62, v63, v64, 0, 3, 4) -> f_161(v48, v49, v50, v51, v52, v53, v54, v59, v56, v57, 1, v55, v60, v61, v62, v63, v64, 0, 3, 4) :|: 0 = 0
f_161(v48, v49, v50, v51, v52, v53, v54, v59, v56, v57, 1, v55, v60, v61, v62, v63, v64, 0, 3, 4) -> f_162(v48, v49, v50, v51, v52, v53, v54, v59, v60, v57, 1, v55, v56, v61, v62, v63, v64, 0, 3, 4) :|: 0 = 0
f_162(v48, v49, v50, v51, v52, v53, v54, v59, v60, v57, 1, v55, v56, v61, v62, v63, v64, 0, 3, 4) -> f_163(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v55, v56, v61, v62, v63, v64, 0, 3, 4) :|: v66 = v59 + v60
f_163(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v55, v56, v61, v62, v63, v64, 0, 3, 4) -> f_164(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v55, v56, v61, v62, v63, v64, 0, 3, 4) :|: v66 < v52
f_164(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v55, v56, v61, v62, v63, v64, 0, 3, 4) -> f_166(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v55, v56, v61, v62, v63, v64, 0, 3, 4) :|: 0 = 0
f_166(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v55, v56, v61, v62, v63, v64, 0, 3, 4) -> f_168(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v55, v56, v61, v62, v63, v64, 0, 3, 4) :|: TRUE
f_168(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v55, v56, v61, v62, v63, v64, 0, 3, 4) -> f_170(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v56, v61, v62, v63, v64, 0, 3, 4) :|: 0 = 0
f_170(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v56, v61, v62, v63, v64, 0, 3, 4) -> f_171(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v67, v56, v61, v62, v63, v64, 0, 3, 4) :|: v67 = 1 + v59
f_171(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v67, v56, v61, v62, v63, v64, 0, 3, 4) -> f_172(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v67, v56, v61, v62, v63, v64, 0, 3, 4) :|: TRUE
f_172(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v67, v56, v61, v62, v63, v64, 0, 3, 4) -> f_173(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v67, v61, v62, v63, v64, 0, 3, 4) :|: 0 = 0
f_173(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v67, v61, v62, v63, v64, 0, 3, 4) -> f_174(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v67, v69, v61, v62, v63, v64, 0, 3, 4) :|: v69 = 1 + v60
f_174(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v67, v69, v61, v62, v63, v64, 0, 3, 4) -> f_175(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v67, v69, v61, v62, v63, v64, 0, 3, 4) :|: TRUE
f_175(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v67, v69, v61, v62, v63, v64, 0, 3, 4) -> f_176(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v67, v69, v61, v62, v63, v64, 0, 3, 4) :|: TRUE
f_176(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v67, v69, v61, v62, v63, v64, 0, 3, 4) -> f_159(v48, v49, v50, v51, v52, v53, v54, v59, v60, v66, 1, v67, v69, v61, v62, v63, v64, 0, 3, 4) :|: TRUE
f_159(v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, 1, v59, v60, v61, v62, v63, v64, 0, 3, 4) -> f_160(v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, 1, v59, v60, v61, v62, v63, v64, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_160(v48:0, v49:0, v50:0, v51:0, v52:0, v53:0, v54:0, v55:0, v56:0, v57:0, 1, v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, 0, 3, 4) -> f_160(v48:0, v49:0, v50:0, v51:0, v52:0, v53:0, v54:0, v59:0, v60:0, v59:0 + v60:0, 1, 1 + v59:0, 1 + v60:0, v61:0, v62:0, v63:0, v64:0, 0, 3, 4) :|: v59:0 + v60:0 < v52:0
Filtered unneeded arguments:
   f_160(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_160(x5, x12, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_160(v52:0, v59:0, v60:0) -> f_160(v52:0, 1 + v59:0, 1 + v60:0) :|: v59:0 + v60:0 < v52:0

----------------------------------------

(8)
Obligation:
Rules:
f_160(v52:0, v59:0, v60:0) -> f_160(v52:0, 1 + v59:0, 1 + v60:0) :|: v59:0 + v60:0 < v52:0

----------------------------------------

(9) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_160(x, x1, x2)] = -1 + x - x1 - x2

The following rules are decreasing:
f_160(v52:0, v59:0, v60:0) -> f_160(v52:0, 1 + v59:0, 1 + v60:0) :|: v59:0 + v60:0 < v52:0
The following rules are bounded:
f_160(v52:0, v59:0, v60:0) -> f_160(v52:0, 1 + v59:0, 1 + v60:0) :|: v59:0 + v60:0 < v52:0

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
