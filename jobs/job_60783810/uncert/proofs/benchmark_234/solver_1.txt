YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/yYqG4.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 49 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2633 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 38 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 7 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 34 ms]
        (16) IntTRS
        (17) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (18) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/yYqG4.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/yYqG4.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%5 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store null, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%6 = load %3
		store %6, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %7
	7:
		%8 = load %5
		%9 = load %2
		%10 = icmp slt %8 %9
		br %10, %11, %24
	11:
		%12 = call noalias *i8 @malloc(i64 16)
		%13 = bitcast *i8 %12 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %13, %3
		%14 = load %5
		%15 = load %3
		%16 = getelementptr %15, 0, 0
		store %14, %16
		%17 = load %4
		%18 = load %3
		%19 = getelementptr %18, 0, 1
		store %17, %19
		%20 = load %3
		store %20, %4
		br %21
	21:
		%22 = load %5
		%23 = add i32 %22, 1
		store %23, %5
		br %7
	24:
		%25 = load %3
		ret %25

*BasicFunctionTypename: "search" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 53
	0:
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca i32, align 4
		%5 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %5)
		%6 = load %3
		store %6, %5
		br %7
	7:
		%8 = load %5
		%9 = getelementptr %8, 0, 0
		%10 = load %9
		%11 = load %4
		%12 = icmp ne %10 %11
		br %12, %13, %17
	13:
		%14 = load %5
		%15 = getelementptr %14, 0, 1
		%16 = load %15
		store %16, %5
		br %7
	17:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 75
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 (...)* @__VERIFIER_nondet_int()
		store %5, %2
		%6 = load %2
		%7 = icmp slt %6 1
		br %7, %8, %9
	8:
		store 0, %1
		br %23
	9:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%10 = call i32 (...)* @__VERIFIER_nondet_int()
		store %10, %3
		%11 = load %3
		%12 = icmp slt %11 1
		br %12, %17, %13
	13:
		%14 = load %3
		%15 = load %2
		%16 = icmp sge %14 %15
		br %16, %17, %18
	17:
		store 0, %1
		br %23
	18:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%19 = load %2
		%20 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %19)
		store %20, %4
		%21 = load %4
		%22 = load %3
		Unnamed Call-Instruction = call BasicVoidType @search(*BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %21, i32 %22)
		store 0, %1
		br %23
	23:
		%24 = load %1
		ret %24


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_743(v458, v459, v460, v461, v462, v467, v463, v464, 1, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v484, v481, 0, v485, v472, 3, 7, 4, 8, 2, 9, v483) -> f_744(v458, v459, v460, v461, v462, v467, v464, 1, v463, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v484, v481, 0, v485, v472, 3, 7, 4, 8, 2, 9, v483) :|: 0 = 0
f_744(v458, v459, v460, v461, v462, v467, v464, 1, v463, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v484, v481, 0, v485, v472, 3, 7, 4, 8, 2, 9, v483) -> f_745(v458, v459, v460, v461, v462, v467, v481, 1, v463, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v464, v484, 0, v485, v472, 3, 7, 4, 8, 2, 9, v483) :|: 0 = 0
f_745(v458, v459, v460, v461, v462, v467, v481, 1, v463, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v464, v484, 0, v485, v472, 3, 7, 4, 8, 2, 9, v483) -> f_746(v458, v459, v460, v461, v462, v467, v481, 1, v463, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v464, v484, 0, v485, v472, 3, 7, 4, 8, 2, 9, v483) :|: 0 = 0
f_746(v458, v459, v460, v461, v462, v467, v481, 1, v463, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v464, v484, 0, v485, v472, 3, 7, 4, 8, 2, 9, v483) -> f_747(v458, v459, v460, v461, v462, v467, v481, 1, v463, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v464, v484, 0, v485, v472, 3, 7, 4, 8, 9, 2, v483) :|: v459 < v481 && 2 <= v481 && 3 <= v464 && 3 <= v482 && 4 <= v472
f_747(v458, v459, v460, v461, v462, v467, v481, 1, v463, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v464, v484, 0, v485, v472, 3, 7, 4, 8, 9, 2, v483) -> f_749(v458, v459, v460, v461, v462, v467, v481, 1, v463, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v464, v484, 0, v485, v472, 3, 7, 4, 8, 9, 2, v483) :|: 0 = 0
f_749(v458, v459, v460, v461, v462, v467, v481, 1, v463, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v464, v484, 0, v485, v472, 3, 7, 4, 8, 9, 2, v483) -> f_751(v458, v459, v460, v461, v462, v467, v481, 1, v463, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v464, v484, 0, v485, v472, 3, 7, 4, 8, 9, 2, v483) :|: TRUE
f_751(v458, v459, v460, v461, v462, v467, v481, 1, v463, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v464, v484, 0, v485, v472, 3, 7, 4, 8, 9, 2, v483) -> f_753(v458, v459, v460, v461, v462, v467, v481, 1, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v464, v484, 0, v485, v472, 3, 7, 4, 9, 8, 2, v483) :|: 0 = 0
f_753(v458, v459, v460, v461, v462, v467, v481, 1, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v464, v484, 0, v485, v472, 3, 7, 4, 9, 8, 2, v483) -> f_761(v458, v459, v460, v461, v462, v467, v481, 1, v486, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v490, v466, 0, v472, v485, v489, v487, v482, v484, 3, 7, 4, 8, 15, 9, 2, 16, v491) :|: v486 = 8 + v467 && 1 + v489 = v481 && 1 + v488 = v464 && v490 = 15 + v467 && v491 = 1 + v483 && 9 <= v486 && 1 <= v489 && 16 <= v490 && 1 <= v487 && 2 <= v491 && v488 = v481
f_761(v458, v459, v460, v461, v462, v467, v481, 1, v486, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v490, v466, 0, v472, v485, v489, v487, v482, v484, 3, 7, 4, 8, 15, 9, 2, 16, v491) -> f_763(v458, v459, v460, v461, v462, v467, v481, 1, v486, v485, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v490, v466, 0, v472, v489, v487, v482, v484, 3, 7, 4, 8, 15, 9, 2, 16, v491) :|: 0 = 0
f_763(v458, v459, v460, v461, v462, v467, v481, 1, v486, v485, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v490, v466, 0, v472, v489, v487, v482, v484, 3, 7, 4, 8, 15, 9, 2, 16, v491) -> f_765(v458, v459, v460, v461, v462, v467, v481, 1, v486, v485, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v490, 0, v472, v489, v487, v482, v484, 3, 7, 4, 8, 15, 2, 9, 16, v491) :|: TRUE
f_765(v458, v459, v460, v461, v462, v467, v481, 1, v486, v485, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v490, 0, v472, v489, v487, v482, v484, 3, 7, 4, 8, 15, 2, 9, 16, v491) -> f_767(v458, v459, v460, v461, v462, v467, v481, 1, v486, v485, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v490, 0, v472, v489, v487, v482, v484, 3, 7, 4, 8, 15, 2, 9, 16, v491) :|: TRUE
f_767(v458, v459, v460, v461, v462, v467, v481, 1, v486, v485, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v490, 0, v472, v489, v487, v482, v484, 3, 7, 4, 8, 15, 2, 9, 16, v491) -> f_742(v458, v459, v460, v461, v462, v467, v481, 1, v486, v485, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v484, v489, 0, v487, v472, 3, 7, 4, 8, 2, 9, v491) :|: TRUE
f_742(v458, v459, v460, v461, v462, v463, v464, 1, v466, v467, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v484, v481, 0, v485, v472, 3, 7, 4, 8, 2, 9, v483) -> f_743(v458, v459, v460, v461, v462, v467, v463, v464, 1, v466, v468, v474, v469, v475, v470, v476, v471, v477, v478, v479, v480, v482, v484, v481, 0, v485, v472, 3, 7, 4, 8, 2, 9, v483) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_743(v458:0, v459:0, v460:0, v461:0, v462:0, v467:0, v463:0, 1 + (1 + v489:0), 1, v466:0, v468:0, v474:0, v469:0, v475:0, v470:0, v476:0, v471:0, v477:0, v478:0, v479:0, v480:0, v482:0, v484:0, 1 + v489:0, 0, v485:0, v472:0, 3, 7, 4, 8, 2, 9, v483:0) -> f_743(v458:0, v459:0, v460:0, v461:0, v462:0, v485:0, v467:0, 1 + v489:0, 1, 8 + v467:0, v468:0, v474:0, v469:0, v475:0, v470:0, v476:0, v471:0, v477:0, v478:0, v479:0, v480:0, v482:0, v484:0, v489:0, 0, v487:0, v472:0, 3, 7, 4, 8, 2, 9, 1 + v483:0) :|: v489:0 > 0 && v459:0 < 1 + v489:0 && v467:0 > 0 && v482:0 > 2 && v472:0 > 3 && v483:0 > 0 && v487:0 > 0
Filtered unneeded arguments:
   f_743(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34) -> f_743(x2, x6, x8, x22, x24, x26, x27, x34)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_743(v459:0, v467:0, sum~cons_1~sum~cons_1~v489:0, v482:0, sum~cons_1~v489:0, v485:0, v472:0, v483:0) -> f_743(v459:0, v485:0, 1 + v489:0, v482:0, v489:0, v487:0, v472:0, 1 + v483:0) :|: v459:0 < 1 + v489:0 && v489:0 > 0 && v467:0 > 0 && v482:0 > 2 && v472:0 > 3 && v487:0 > 0 && v483:0 > 0 && sum~cons_1~sum~cons_1~v489:0 = 1 + (1 + v489:0) && sum~cons_1~v489:0 = 1 + v489:0

----------------------------------------

(9)
Obligation:
Rules:
f_743(v459:0, v467:0, sum~cons_1~sum~cons_1~v489:0, v482:0, sum~cons_1~v489:0, v485:0, v472:0, v483:0) -> f_743(v459:0, v485:0, 1 + v489:0, v482:0, v489:0, v487:0, v472:0, 1 + v483:0) :|: v459:0 < 1 + v489:0 && v489:0 > 0 && v467:0 > 0 && v482:0 > 2 && v472:0 > 3 && v487:0 > 0 && v483:0 > 0 && sum~cons_1~sum~cons_1~v489:0 = 1 + (1 + v489:0) && sum~cons_1~v489:0 = 1 + v489:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_743(v459:0:0, v467:0:0, sum~cons_1~sum~cons_1~v489:0:0, v482:0:0, sum~cons_1~v489:0:0, v485:0:0, v472:0:0, v483:0:0) -> f_743(v459:0:0, v485:0:0, 1 + v489:0:0, v482:0:0, v489:0:0, v487:0:0, v472:0:0, 1 + v483:0:0) :|: v487:0:0 > 0 && v483:0:0 > 0 && v472:0:0 > 3 && v482:0:0 > 2 && v467:0:0 > 0 && v489:0:0 > 0 && v459:0:0 < 1 + v489:0:0 && sum~cons_1~sum~cons_1~v489:0:0 = 1 + (1 + v489:0:0) && sum~cons_1~v489:0:0 = 1 + v489:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_743 ] = f_743_3

The following rules are decreasing:
f_743(v459:0:0, v467:0:0, sum~cons_1~sum~cons_1~v489:0:0, v482:0:0, sum~cons_1~v489:0:0, v485:0:0, v472:0:0, v483:0:0) -> f_743(v459:0:0, v485:0:0, 1 + v489:0:0, v482:0:0, v489:0:0, v487:0:0, v472:0:0, 1 + v483:0:0) :|: v487:0:0 > 0 && v483:0:0 > 0 && v472:0:0 > 3 && v482:0:0 > 2 && v467:0:0 > 0 && v489:0:0 > 0 && v459:0:0 < 1 + v489:0:0 && sum~cons_1~sum~cons_1~v489:0:0 = 1 + (1 + v489:0:0) && sum~cons_1~v489:0:0 = 1 + v489:0:0

The following rules are bounded:
f_743(v459:0:0, v467:0:0, sum~cons_1~sum~cons_1~v489:0:0, v482:0:0, sum~cons_1~v489:0:0, v485:0:0, v472:0:0, v483:0:0) -> f_743(v459:0:0, v485:0:0, 1 + v489:0:0, v482:0:0, v489:0:0, v487:0:0, v472:0:0, 1 + v483:0:0) :|: v487:0:0 > 0 && v483:0:0 > 0 && v472:0:0 > 3 && v482:0:0 > 2 && v467:0:0 > 0 && v489:0:0 > 0 && v459:0:0 < 1 + v489:0:0 && sum~cons_1~sum~cons_1~v489:0:0 = 1 + (1 + v489:0:0) && sum~cons_1~v489:0:0 = 1 + v489:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_623(v259, v260, v261, v262, v263, 0, v270, 1, v267, v265, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) -> f_624(v259, v260, v261, v262, v263, 0, v270, 1, v267, v265, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) :|: 0 = 0
f_624(v259, v260, v261, v262, v263, 0, v270, 1, v267, v265, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) -> f_625(v259, v260, v261, v262, v263, 0, v270, 1, v267, v265, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) :|: v270 < v259
f_625(v259, v260, v261, v262, v263, 0, v270, 1, v267, v265, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) -> f_627(v259, v260, v261, v262, v263, 0, v270, 1, v267, v265, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) :|: 0 = 0
f_627(v259, v260, v261, v262, v263, 0, v270, 1, v267, v265, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) -> f_629(v259, v260, v261, v262, v263, 0, v270, 1, v267, v265, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) :|: TRUE
f_629(v259, v260, v261, v262, v263, 0, v270, 1, v267, v265, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) -> f_631(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v265, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v275, 3, 7, 4, 8, 15, 2, 9, 16) :|: v285 = 15 + v284 && v284 % 4 = 0 && 16 <= v285
f_631(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v265, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v275, 3, 7, 4, 8, 15, 2, 9, 16) -> f_633(v259, v260, v261, v262, v263, 0, v270, 1, v284, v265, v267, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v275, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_633(v259, v260, v261, v262, v263, 0, v270, 1, v284, v265, v267, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v275, 3, 7, 4, 8, 15, 2, 9, 16) -> f_635(v259, v260, v261, v262, v263, 0, v270, 1, v284, v265, v267, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v275, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_635(v259, v260, v261, v262, v263, 0, v270, 1, v284, v265, v267, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v275, 3, 7, 4, 8, 15, 2, 9, 16) -> f_637(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v268, v269, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v275, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_637(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v268, v269, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v275, 3, 7, 4, 8, 15, 2, 9, 16) -> f_639(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v268, v269, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v275, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_639(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v268, v269, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v275, 3, 7, 4, 8, 15, 2, 9, 16) -> f_641(v259, v260, v261, v262, v263, 0, v270, 1, v284, v268, v267, v269, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v275, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_641(v259, v260, v261, v262, v263, 0, v270, 1, v284, v268, v267, v269, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v275, 3, 7, 4, 8, 15, 2, 9, 16) -> f_643(v259, v260, v261, v262, v263, 0, v270, 1, v284, v268, v267, v269, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v275, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_643(v259, v260, v261, v262, v263, 0, v270, 1, v284, v268, v267, v269, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v275, 3, 7, 4, 8, 15, 2, 9, 16) -> f_645(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v269, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v268, v275, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_645(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v269, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v268, v275, 3, 7, 4, 8, 15, 2, 9, 16) -> f_647(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v269, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v268, v275, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_647(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v269, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v268, v275, 3, 7, 4, 8, 15, 2, 9, 16) -> f_649(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v268, v275, 3, 7, 4, 15, 8, 2, 16, 9) :|: v295 = 8 + v284 && 9 <= v295
f_649(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v285, v268, v275, 3, 7, 4, 15, 8, 2, 16, 9) -> f_651(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, v298, 2, 9) :|: v298 = 1 + v270 && 2 <= v298
f_651(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, v298, 2, 9) -> f_653(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, v298, 2, 9) :|: 0 = 0
f_653(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, v298, 2, 9) -> f_655(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, v298, 2, 9) :|: TRUE
f_655(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, v298, 2, 9) -> f_657(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, v298, 2, 9) :|: TRUE
f_657(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v265, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, v298, 2, 9) -> f_659(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, v298, 2, 9) :|: 0 = 0
f_659(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, v298, 2, 9) -> f_661(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v298, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) :|: v298 = 1 + v270
f_661(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v298, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) -> f_663(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v298, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) :|: TRUE
f_663(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v298, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) -> f_665(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v298, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) :|: TRUE
f_665(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v298, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) -> f_622(v259, v260, v261, v262, v263, 0, v270, 1, v284, v267, v295, v298, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) :|: TRUE
f_622(v259, v260, v261, v262, v263, 0, v265, 1, v267, v268, v269, v270, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) -> f_623(v259, v260, v261, v262, v263, 0, v270, 1, v267, v265, v268, v269, v271, v276, v272, v277, v273, v278, v274, v279, v280, v281, v282, v283, v275, 3, 7, 4, 8, 2, 9) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_623(v259:0, v260:0, v261:0, v262:0, v263:0, 0, v270:0, 1, v267:0, v265:0, v268:0, v269:0, v271:0, v276:0, v272:0, v277:0, v273:0, v278:0, v274:0, v279:0, v280:0, v281:0, v282:0, v283:0, v275:0, 3, 7, 4, 8, 2, 9) -> f_623(v259:0, v260:0, v261:0, v262:0, v263:0, 0, 1 + v270:0, 1, v284:0, v270:0, v267:0, 8 + v284:0, v271:0, v276:0, v272:0, v277:0, v273:0, v278:0, v274:0, v279:0, v280:0, v281:0, v282:0, v283:0, v275:0, 3, 7, 4, 8, 2, 9) :|: v270:0 < v259:0 && v284:0 % 4 = 0 && v284:0 > 0 && v270:0 > 0
Filtered unneeded arguments:
   f_623(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_623(x1, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_623(v259:0, v270:0) -> f_623(v259:0, 1 + v270:0) :|: v270:0 < v259:0 && v270:0 > 0

----------------------------------------

(16)
Obligation:
Rules:
f_623(v259:0, v270:0) -> f_623(v259:0, 1 + v270:0) :|: v270:0 < v259:0 && v270:0 > 0

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_623(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_623(v259:0, v270:0) -> f_623(v259:0, 1 + v270:0) :|: v270:0 < v259:0 && v270:0 > 0
The following rules are bounded:
f_623(v259:0, v270:0) -> f_623(v259:0, 1 + v270:0) :|: v270:0 < v259:0 && v270:0 > 0

----------------------------------------

(18)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
