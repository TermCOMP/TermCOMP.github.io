NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/K41S7.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 105 ms]
(4) LLVM Symbolic Execution Graph
(5) LLVMNonterminationProof [COMPLETE, 69 ms]
(6) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/K41S7.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/K41S7.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 864, %2
		%4 = load %2
		%5 = icmp sle %4 10
		br %5, %6, %14
	6:
		store 0, %3
		br %7
	7:
		%8 = load %3
		%9 = icmp slt %8 100
		br %9, %10, %13
	10:
		%11 = load %3
		%12 = add i32 %11, 1
		store %12, %3
		br %7
	13:
		br %45
	14:
		%15 = load %2
		%16 = icmp sle %15 50
		br %16, %17, %25
	17:
		store 0, %3
		br %18
	18:
		%19 = load %3
		%20 = icmp slt %19 101
		br %20, %21, %24
	21:
		%22 = load %3
		%23 = add i32 %22, 1
		store %23, %3
		br %18
	24:
		br %25
	25:
		%26 = load %2
		%27 = icmp sle %26 100
		br %27, %28, %36
	28:
		store 0, %3
		br %29
	29:
		%30 = load %3
		%31 = icmp slt %30 102
		br %31, %32, %35
	32:
		%33 = load %3
		%34 = add i32 %33, 1
		store %34, %3
		br %29
	35:
		br %44
	36:
		store 0, %3
		br %37
	37:
		%38 = load %3
		%39 = icmp slt %38 103
		br %39, %40, %43
	40:
		%41 = load %3
		%42 = add i32 %41, 0
		store %42, %3
		br %37
	43:
		br %44
	44:
		br %45
	45:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) LLVMNonterminationProof (COMPLETE)
Proved nontermination with the following witness:

State #177 with references set to {}.
Nondeterministic instruction %1 = alloca i32, align 4 in node #177 yields value 11.
Nondeterministic instruction %2 = alloca i32, align 4 in node #178 yields value 5.
Nondeterministic instruction %3 = alloca i32, align 4 in node #179 yields value 1.

----------------------------------------

(6)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
