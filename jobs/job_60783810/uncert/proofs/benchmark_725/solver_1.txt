YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/1FACW.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 6619 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 125 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (13) IntTRS
        (14) TerminationGraphProcessor [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (21) YES
    (22) LLVM Symbolic Execution SCC
        (23) SCC2IRS [SOUND, 88 ms]
        (24) IntTRS
        (25) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (26) IntTRS
        (27) RankingReductionPairProof [EQUIVALENT, 5 ms]
        (28) IntTRS
        (29) TerminationGraphProcessor [EQUIVALENT, 2 ms]
        (30) AND
            (31) IntTRS
                (32) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (33) IntTRS
                (34) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (35) IntTRS
                (36) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
                (37) YES
            (38) IntTRS
                (39) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (40) IntTRS
                (41) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (42) IntTRS
                (43) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
                (44) YES
    (45) LLVM Symbolic Execution SCC
        (46) SCC2IRS [SOUND, 45 ms]
        (47) IntTRS
        (48) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (49) IntTRS
        (50) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (51) YES
    (52) LLVM Symbolic Execution SCC
        (53) SCC2IRS [SOUND, 34 ms]
        (54) IntTRS
        (55) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (56) IntTRS
        (57) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (58) YES
    (59) LLVM Symbolic Execution SCC
        (60) SCC2IRS [SOUND, 11 ms]
        (61) IntTRS
        (62) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (63) IntTRS
        (64) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (65) YES
    (66) LLVM Symbolic Execution SCC
        (67) SCC2IRS [SOUND, 29 ms]
        (68) IntTRS
        (69) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (70) IntTRS
        (71) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (72) YES
    (73) LLVM Symbolic Execution SCC
        (74) SCC2IRS [SOUND, 17 ms]
        (75) IntTRS
        (76) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (77) IntTRS
        (78) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (79) YES
    (80) LLVM Symbolic Execution SCC
        (81) SCC2IRS [SOUND, 101 ms]
        (82) IntTRS
        (83) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (84) IntTRS
        (85) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (86) AND
            (87) IntTRS
                (88) TerminationGraphProcessor [EQUIVALENT, 2 ms]
                (89) IntTRS
                (90) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (91) IntTRS
                (92) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (93) IntTRS
                (94) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
                (95) YES
            (96) IntTRS
                (97) TerminationGraphProcessor [EQUIVALENT, 1 ms]
                (98) IntTRS
                (99) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (100) IntTRS
                (101) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (102) IntTRS
                (103) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
                (104) YES
    (105) LLVM Symbolic Execution SCC
        (106) SCC2IRS [SOUND, 111 ms]
        (107) IntTRS
        (108) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (109) IntTRS
        (110) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (111) AND
            (112) IntTRS
                (113) TerminationGraphProcessor [EQUIVALENT, 10 ms]
                (114) IntTRS
                (115) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (116) IntTRS
                (117) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (118) IntTRS
                (119) RankingReductionPairProof [EQUIVALENT, 1 ms]
                (120) YES
            (121) IntTRS
                (122) TerminationGraphProcessor [EQUIVALENT, 1 ms]
                (123) IntTRS
                (124) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (125) IntTRS
                (126) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (127) IntTRS
                (128) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
                (129) YES
    (130) LLVM Symbolic Execution SCC
        (131) SCC2IRS [SOUND, 45 ms]
        (132) IntTRS
        (133) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (134) IntTRS
        (135) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (136) YES
    (137) LLVM Symbolic Execution SCC
        (138) SCC2IRS [SOUND, 32 ms]
        (139) IntTRS
        (140) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (141) IntTRS
        (142) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (143) YES
    (144) LLVM Symbolic Execution SCC
        (145) SCC2IRS [SOUND, 17 ms]
        (146) IntTRS
        (147) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (148) IntTRS
        (149) RankingReductionPairProof [EQUIVALENT, 31 ms]
        (150) YES
    (151) LLVM Symbolic Execution SCC
        (152) SCC2IRS [SOUND, 26 ms]
        (153) IntTRS
        (154) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (155) IntTRS
        (156) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (157) YES
    (158) LLVM Symbolic Execution SCC
        (159) SCC2IRS [SOUND, 25 ms]
        (160) IntTRS
        (161) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (162) IntTRS
        (163) RankingReductionPairProof [EQUIVALENT, 5 ms]
        (164) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/1FACW.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/1FACW.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "f" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%9 = call i32 @__VERIFIER_nondet_int()
		store %9, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store 1, %6
		%10 = load %5
		%11 = icmp sgt %10 1073741823
		br %11, %12, %13
	12:
		br %48
	13:
		br %14
	14:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %15
	15:
		%16 = load %6
		%17 = load %5
		%18 = icmp slt %16 %17
		br %18, %19, %22
	19:
		%20 = load %6
		%21 = mul i32 2, %20
		store %21, %6
		br %15
	22:
		br %23
	23:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %24
	24:
		%25 = load %3
		%26 = icmp sgt %25 0
		br %26, %27, %30
	27:
		%28 = load %4
		%29 = icmp sgt %28 0
		br %30
	30:
		%31 = phi [0, %24], [%29, %27]
		br %31, %32, %48
	32:
		%33 = call i32 @__VERIFIER_nondet_int()
		%34 = icmp ne %33 0
		br %34, %35, %43
	35:
		br %36
	36:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%37 = load %3
		%38 = load %2
		%39 = sub i32 %37, %38
		store %39, %3
		%40 = call i32 @__VERIFIER_nondet_int()
		store %40, %4
		%41 = load %6
		%42 = sub i32 %41, 1
		store %42, %6
		br %47
	43:
		%44 = load %4
		%45 = load %2
		%46 = sub i32 %44, %45
		store %46, %4
		br %47
	47:
		br %24
	48:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 79
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = icmp ne %2 0
		br %3, %4, %5
	4:
		Unnamed Call-Instruction = call BasicVoidType @f(i32 1)
		br %6
	5:
		Unnamed Call-Instruction = call BasicVoidType @f(i32 2)
		br %6
	6:
		%7 = load %1
		ret %7


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 14 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 60 rulesP rules:
f_2991(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3003(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: 0 = 0
f_3003(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3015(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: 0 = 0
f_3015(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3025(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: TRUE
f_3025(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3034(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v90588, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: TRUE
f_3034(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v90588, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3043(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v90588, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: v90588 != 0
f_3034(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v90588, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3044(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: v90588 = 0
f_3043(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v90588, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3056(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v90588, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: 0 = 0
f_3056(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v90588, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3065(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v90588, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: TRUE
f_3065(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v90588, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3172(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v90588, v85845, v85846, v85847, v85848, v85844, v85849, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v97177, 3, 2, 4) :|: TRUE
f_3172(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97170, v97171, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) -> f_3174(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97170, v97171, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) :|: TRUE
f_3174(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97170, v97171, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) -> f_3176(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97170, v97171, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) :|: TRUE
f_3176(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97170, v97171, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) -> f_3178(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97171, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) :|: 0 = 0
f_3178(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97171, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) -> f_3180(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97171, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) :|: 0 = 0
f_3180(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97171, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) -> f_3182(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97171, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) :|: 1 + v97372 = v97167 && 0 <= v97372
f_3182(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97171, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) -> f_3184(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97171, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) :|: TRUE
f_3184(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97171, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) -> f_3185(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97617, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) :|: TRUE
f_3185(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97617, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) -> f_3186(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97617, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) :|: TRUE
f_3186(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97617, v97172, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) -> f_3187(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97617, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) :|: 0 = 0
f_3187(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97617, v97173, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) -> f_3188(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97617, v97173, v97619, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) :|: 1 + v97619 = v97173
f_3188(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97617, v97173, v97619, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) -> f_3189(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97617, v97173, v97619, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) :|: TRUE
f_3189(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97617, v97173, v97619, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) -> f_3190(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97617, v97173, v97619, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) :|: TRUE
f_3190(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97372, v97617, v97173, v97619, v97174, v97175, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v97177, 3, 2, 4) -> f_3141(1, v97156, v97157, v97158, v97159, v97160, v97161, v97162, v97163, 0, v97165, v97166, v97167, v97168, v97169, v97174, v97175, v97372, v97617, v97173, v97619, v97176, v97178, v97179, v97180, v97181, v97182, v97183, v93101, 3, 2, 4) :|: TRUE
f_3141(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93091, v93092, v93093, v93094, v93095, v93096, v93097, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3144(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93091, v93092, v93093, v93094, v93095, v93096, v93097, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: TRUE
f_3144(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93091, v93092, v93093, v93094, v93095, v93096, v93097, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3145(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93092, v93093, v93094, v93095, v93091, v93097, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: 0 = 0
f_3145(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93092, v93093, v93094, v93095, v93091, v93097, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3146(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93092, v93093, v93094, v93095, v93091, v93097, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: 0 < v93096 && 2 <= v93091 && 2 <= v93085
f_3146(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93092, v93093, v93094, v93095, v93091, v93097, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3148(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93092, v93093, v93094, v93095, v93091, v93097, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: 0 = 0
f_3148(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93092, v93093, v93094, v93095, v93091, v93097, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3150(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93092, v93093, v93094, v93095, v93091, v93097, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: TRUE
f_3150(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93092, v93093, v93094, v93095, v93091, v93097, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3152(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93093, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: 0 = 0
f_3152(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93093, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3154(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93093, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: 0 < v93097
f_3154(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93093, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3157(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93093, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: 0 = 0
f_3157(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93093, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3160(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93093, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: 0 = 0
f_3160(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93093, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3162(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93093, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: TRUE
f_3162(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93093, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3164(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v96901, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: TRUE
f_3164(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v96901, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3166(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v96901, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: v96901 != 0
f_3164(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v96901, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3167(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: v96901 = 0
f_3166(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v96901, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3169(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v96901, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: 0 = 0
f_3169(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v96901, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3171(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v96901, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: TRUE
f_3171(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v96901, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3172(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v96901, v93091, v93097, v93098, v93099, v93094, v93095, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v97177, 3, 2, 4) :|: TRUE
f_3167(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3170(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: 0 = 0
f_3170(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3173(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: TRUE
f_3173(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93094, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3175(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: 0 = 0
f_3175(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3177(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: 0 = 0
f_3177(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93095, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3179(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v97370, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: 1 + v97370 = v93097 && 0 <= v97370
f_3179(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v97370, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3181(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v97370, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: TRUE
f_3181(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v97370, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_3183(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v97370, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) :|: TRUE
f_3183(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v97370, v93091, v93098, v93099, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v93101, 3, 2, 4) -> f_2943(1, v93080, v93081, v93082, v93083, v93084, v93085, v93086, v93087, 0, v93089, v93090, v93096, v93097, v93091, v93097, v93098, v93099, v97370, v93100, v93102, v93103, v93104, v93105, v93106, v93107, v85851, 3, 2, 4) :|: TRUE
f_2943(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85844, v85845, v85846, v85847, v85848, v85849, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_2951(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85844, v85845, v85846, v85847, v85848, v85849, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: TRUE
f_2951(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85844, v85845, v85846, v85847, v85848, v85849, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_2958(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85844, v85845, v85846, v85847, v85848, v85849, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: 0 = 0
f_2958(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85844, v85845, v85846, v85847, v85848, v85849, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_2966(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85844, v85845, v85846, v85847, v85848, v85849, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: 0 = 0
f_2966(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85844, v85845, v85846, v85847, v85848, v85849, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_2975(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85844, v85845, v85846, v85847, v85848, v85849, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: TRUE
f_2975(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85844, v85845, v85846, v85847, v85848, v85849, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_2983(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: 0 = 0
f_2983(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_2991(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: 0 < v85849 && 2 <= v85844 && 2 <= v85846
f_3044(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3057(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: 0 = 0
f_3057(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3066(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: TRUE
f_3066(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85844, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3075(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: 0 = 0
f_3075(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3084(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: 0 = 0
f_3084(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3093(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v91811, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: 1 + v91811 = v85849 && 0 <= v91811
f_3093(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v91811, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3101(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v91811, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: TRUE
f_3101(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v91811, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_3109(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v91811, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: TRUE
f_3109(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v91811, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) -> f_2943(1, v85832, v85833, v85834, v85835, v85836, v85837, v85838, v85839, 0, v85841, v85842, v85843, v85849, v85845, v85846, v85847, v85848, v91811, v85850, v85852, v85853, v85854, v85855, v85856, v85857, v85851, 3, 2, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_3164(1, v93080:0, v93081:0, v93082:0, v93083:0, v93084:0, v93085:0, v93086:0, v93087:0, 0, v93089:0, v93090:0, 1 + v97372:0, v93097:0, v96901:0, v93094:0, v93095:0, v93091:0, v93098:0, 1 + v97619:0, v93100:0, v93102:0, v93103:0, v93104:0, v93105:0, v93106:0, v93107:0, v93101:0, 3, 2, 4) -> f_3164(1, v93080:0, v93081:0, v93082:0, v93083:0, v93084:0, v93085:0, v93086:0, v93087:0, 0, v93089:0, v93090:0, v97372:0, v97617:0, v96901:1, v93094:0, v93095:0, 1 + v97372:0, 1 + v97619:0, v97619:0, v93100:0, v93102:0, v93103:0, v93104:0, v93105:0, v93106:0, v93107:0, v93101:1, 3, 2, 4) :|: v97372:0 > 0 && v93085:0 > 1 && v96901:0 < 0 && v97617:0 > 0
f_3164(1, v93080:0, v93081:0, v93082:0, v93083:0, v93084:0, v93085:0, v93086:0, v93087:0, 0, v93089:0, v93090:0, 1 + v97372:0, v93097:0, v96901:0, v93094:0, v93095:0, v93091:0, v93098:0, 1 + v97619:0, v93100:0, v93102:0, v93103:0, v93104:0, v93105:0, v93106:0, v93107:0, v93101:0, 3, 2, 4) -> f_3164(1, v93080:0, v93081:0, v93082:0, v93083:0, v93084:0, v93085:0, v93086:0, v93087:0, 0, v93089:0, v93090:0, v97372:0, v97617:0, v96901:1, v93094:0, v93095:0, 1 + v97372:0, 1 + v97619:0, v97619:0, v93100:0, v93102:0, v93103:0, v93104:0, v93105:0, v93106:0, v93107:0, v93101:1, 3, 2, 4) :|: v97372:0 > 0 && v93085:0 > 1 && v96901:0 > 0 && v97617:0 > 0
f_2991(1, v85832:0, v85833:0, v85834:0, v85835:0, v85836:0, v85837:0, v85838:0, v85839:0, 0, v85841:0, v85842:0, 1 + v97372:0, v85849:0, v85845:0, v85846:0, v85847:0, 1 + v97619:0, v85844:0, v85850:0, v85852:0, v85853:0, v85854:0, v85855:0, v85856:0, v85857:0, v85851:0, 3, 2, 4) -> f_3164(1, v85832:0, v85833:0, v85834:0, v85835:0, v85836:0, v85837:0, v85838:0, v85839:0, 0, v85841:0, v85842:0, v97372:0, v97617:0, v96901:0, v85844:0, v85849:0, 1 + v97372:0, 1 + v97619:0, v97619:0, v85850:0, v85852:0, v85853:0, v85854:0, v85855:0, v85856:0, v85857:0, v93101:0, 3, 2, 4) :|: v97372:0 > 0 && v90588:0 < 0 && v97617:0 > 0 && v85837:0 > 1
f_2991(1, v85832:0, v85833:0, v85834:0, v85835:0, v85836:0, v85837:0, v85838:0, v85839:0, 0, v85841:0, v85842:0, 1 + v97372:0, v85849:0, v85845:0, v85846:0, v85847:0, 1 + v97619:0, v85844:0, v85850:0, v85852:0, v85853:0, v85854:0, v85855:0, v85856:0, v85857:0, v85851:0, 3, 2, 4) -> f_3164(1, v85832:0, v85833:0, v85834:0, v85835:0, v85836:0, v85837:0, v85838:0, v85839:0, 0, v85841:0, v85842:0, v97372:0, v97617:0, v96901:0, v85844:0, v85849:0, 1 + v97372:0, 1 + v97619:0, v97619:0, v85850:0, v85852:0, v85853:0, v85854:0, v85855:0, v85856:0, v85857:0, v93101:0, 3, 2, 4) :|: v97372:0 > 0 && v90588:0 > 0 && v97617:0 > 0 && v85837:0 > 1
f_2991(1, v85832:0, v85833:0, v85834:0, v85835:0, v85836:0, v85837:0, v85838:0, v85839:0, 0, v85841:0, v85842:0, v85843:0, 1 + v91811:0, v85845:0, v85846:0, v85847:0, v85848:0, v85844:0, v85850:0, v85852:0, v85853:0, v85854:0, v85855:0, v85856:0, v85857:0, v85851:0, 3, 2, 4) -> f_2991(1, v85832:0, v85833:0, v85834:0, v85835:0, v85836:0, v85837:0, v85838:0, v85839:0, 0, v85841:0, v85842:0, v85843:0, v91811:0, v85845:0, v85846:0, v85847:0, v85848:0, 1 + v91811:0, v85850:0, v85852:0, v85853:0, v85854:0, v85855:0, v85856:0, v85857:0, v85851:0, 3, 2, 4) :|: v91811:0 > 0 && v85846:0 > 1
f_3164(1, v93080:0, v93081:0, v93082:0, v93083:0, v93084:0, v93085:0, v93086:0, v93087:0, 0, v93089:0, v93090:0, v93096:0, 1 + v97370:0, 0, v93094:0, v93095:0, v93091:0, v93098:0, v93099:0, v93100:0, v93102:0, v93103:0, v93104:0, v93105:0, v93106:0, v93107:0, v93101:0, 3, 2, 4) -> f_2991(1, v93080:0, v93081:0, v93082:0, v93083:0, v93084:0, v93085:0, v93086:0, v93087:0, 0, v93089:0, v93090:0, v93096:0, v97370:0, v93091:0, 1 + v97370:0, v93098:0, v93099:0, 1 + v97370:0, v93100:0, v93102:0, v93103:0, v93104:0, v93105:0, v93106:0, v93107:0, v85851:0, 3, 2, 4) :|: v97370:0 > 0
Filtered unneeded arguments:
   f_3164(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_3164(x7, x13, x14, x15, x20)
   f_2991(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_2991(x7, x13, x14, x16, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_3164(v93085:0, sum~cons_1~v97372:0, v93097:0, v96901:0, sum~cons_1~v97619:0) -> f_3164(v93085:0, v97372:0, v97617:0, v96901:1, v97619:0) :|: v93085:0 > 1 && v97372:0 > 0 && v97617:0 > 0 && v96901:0 < 0 && sum~cons_1~v97372:0 = 1 + v97372:0 && sum~cons_1~v97619:0 = 1 + v97619:0
f_3164(v93085:0, sum~cons_1~v97372:0, v93097:0, v96901:0, sum~cons_1~v97619:0) -> f_3164(v93085:0, v97372:0, v97617:0, v96901:1, v97619:0) :|: v93085:0 > 1 && v97372:0 > 0 && v97617:0 > 0 && v96901:0 > 0 && sum~cons_1~v97372:0 = 1 + v97372:0 && sum~cons_1~v97619:0 = 1 + v97619:0
f_2991(v85837:0, sum~cons_1~v97372:0, v85849:0, v85846:0, sum~cons_1~v97619:0) -> f_3164(v85837:0, v97372:0, v97617:0, v96901:0, v97619:0) :|: v97617:0 > 0 && v85837:0 > 1 && v97372:0 > 0 && sum~cons_1~v97372:0 = 1 + v97372:0 && sum~cons_1~v97619:0 = 1 + v97619:0
f_2991(v85837:0, v85843:0, sum~cons_1~v91811:0, v85846:0, v85848:0) -> f_2991(v85837:0, v85843:0, v91811:0, v85846:0, v85848:0) :|: v91811:0 > 0 && v85846:0 > 1 && sum~cons_1~v91811:0 = 1 + v91811:0
f_3164(v93085:0, v93096:0, sum~cons_1~v97370:0, cons_0, v93099:0) -> f_2991(v93085:0, v93096:0, v97370:0, 1 + v97370:0, v93099:0) :|: v97370:0 > 0 && sum~cons_1~v97370:0 = 1 + v97370:0 && cons_0 = 0

----------------------------------------

(9)
Obligation:
Rules:
f_3164(v93085:0, sum~cons_1~v97372:0, v93097:0, v96901:0, sum~cons_1~v97619:0) -> f_3164(v93085:0, v97372:0, v97617:0, v96901:1, v97619:0) :|: v93085:0 > 1 && v97372:0 > 0 && v97617:0 > 0 && v96901:0 < 0 && sum~cons_1~v97372:0 = 1 + v97372:0 && sum~cons_1~v97619:0 = 1 + v97619:0
f_3164(x, x1, x2, x3, x4) -> f_3164(x, x5, x6, x7, x8) :|: x > 1 && x5 > 0 && x6 > 0 && x3 > 0 && x1 = 1 + x5 && x4 = 1 + x8
f_2991(x9, x10, x11, x12, x13) -> f_3164(x9, x14, x15, x16, x17) :|: x15 > 0 && x9 > 1 && x14 > 0 && x10 = 1 + x14 && x13 = 1 + x17
f_2991(v85837:0, v85843:0, sum~cons_1~v91811:0, v85846:0, v85848:0) -> f_2991(v85837:0, v85843:0, v91811:0, v85846:0, v85848:0) :|: v91811:0 > 0 && v85846:0 > 1 && sum~cons_1~v91811:0 = 1 + v91811:0
f_3164(x18, x19, x20, x21, x22) -> f_2991(x18, x19, x23, 1 + x23, x22) :|: x23 > 0 && x20 = 1 + x23 && x21 = 0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_3164(x18:0, x19:0, sum~cons_1~x23:0, cons_0, x22:0) -> f_2991(x18:0, x19:0, x23:0, 1 + x23:0, x22:0) :|: x23:0 > 0 && sum~cons_1~x23:0 = 1 + x23:0 && cons_0 = 0
f_2991(x9:0, sum~cons_1~x14:0, x11:0, x12:0, sum~cons_1~x17:0) -> f_3164(x9:0, x14:0, x15:0, x16:0, x17:0) :|: x15:0 > 0 && x9:0 > 1 && x14:0 > 0 && sum~cons_1~x14:0 = 1 + x14:0 && sum~cons_1~x17:0 = 1 + x17:0
f_2991(v85837:0:0, v85843:0:0, sum~cons_1~v91811:0:0, v85846:0:0, v85848:0:0) -> f_2991(v85837:0:0, v85843:0:0, v91811:0:0, v85846:0:0, v85848:0:0) :|: v91811:0:0 > 0 && v85846:0:0 > 1 && sum~cons_1~v91811:0:0 = 1 + v91811:0:0
f_3164(v93085:0:0, sum~cons_1~v97372:0:0, v93097:0:0, v96901:0:0, sum~cons_1~v97619:0:0) -> f_3164(v93085:0:0, v97372:0:0, v97617:0:0, v96901:1:0, v97619:0:0) :|: v97617:0:0 > 0 && v96901:0:0 < 0 && v97372:0:0 > 0 && v93085:0:0 > 1 && sum~cons_1~v97372:0:0 = 1 + v97372:0:0 && sum~cons_1~v97619:0:0 = 1 + v97619:0:0
f_3164(x:0, sum~cons_1~x5:0, x2:0, x3:0, sum~cons_1~x8:0) -> f_3164(x:0, x5:0, x6:0, x7:0, x8:0) :|: x6:0 > 0 && x3:0 > 0 && x5:0 > 0 && x:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0 && sum~cons_1~x8:0 = 1 + x8:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_3164(x, x1, x2, x3, x4)] = -1 + x + x1
[f_2991(x5, x6, x7, x8, x9)] = -1 + x5 + x6

The following rules are decreasing:
f_2991(x9:0, sum~cons_1~x14:0, x11:0, x12:0, sum~cons_1~x17:0) -> f_3164(x9:0, x14:0, x15:0, x16:0, x17:0) :|: x15:0 > 0 && x9:0 > 1 && x14:0 > 0 && sum~cons_1~x14:0 = 1 + x14:0 && sum~cons_1~x17:0 = 1 + x17:0
f_3164(v93085:0:0, sum~cons_1~v97372:0:0, v93097:0:0, v96901:0:0, sum~cons_1~v97619:0:0) -> f_3164(v93085:0:0, v97372:0:0, v97617:0:0, v96901:1:0, v97619:0:0) :|: v97617:0:0 > 0 && v96901:0:0 < 0 && v97372:0:0 > 0 && v93085:0:0 > 1 && sum~cons_1~v97372:0:0 = 1 + v97372:0:0 && sum~cons_1~v97619:0:0 = 1 + v97619:0:0
f_3164(x:0, sum~cons_1~x5:0, x2:0, x3:0, sum~cons_1~x8:0) -> f_3164(x:0, x5:0, x6:0, x7:0, x8:0) :|: x6:0 > 0 && x3:0 > 0 && x5:0 > 0 && x:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0 && sum~cons_1~x8:0 = 1 + x8:0
The following rules are bounded:
f_2991(x9:0, sum~cons_1~x14:0, x11:0, x12:0, sum~cons_1~x17:0) -> f_3164(x9:0, x14:0, x15:0, x16:0, x17:0) :|: x15:0 > 0 && x9:0 > 1 && x14:0 > 0 && sum~cons_1~x14:0 = 1 + x14:0 && sum~cons_1~x17:0 = 1 + x17:0
f_3164(v93085:0:0, sum~cons_1~v97372:0:0, v93097:0:0, v96901:0:0, sum~cons_1~v97619:0:0) -> f_3164(v93085:0:0, v97372:0:0, v97617:0:0, v96901:1:0, v97619:0:0) :|: v97617:0:0 > 0 && v96901:0:0 < 0 && v97372:0:0 > 0 && v93085:0:0 > 1 && sum~cons_1~v97372:0:0 = 1 + v97372:0:0 && sum~cons_1~v97619:0:0 = 1 + v97619:0:0
f_3164(x:0, sum~cons_1~x5:0, x2:0, x3:0, sum~cons_1~x8:0) -> f_3164(x:0, x5:0, x6:0, x7:0, x8:0) :|: x6:0 > 0 && x3:0 > 0 && x5:0 > 0 && x:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0 && sum~cons_1~x8:0 = 1 + x8:0

----------------------------------------

(13)
Obligation:
Rules:
f_3164(x18:0, x19:0, sum~cons_1~x23:0, cons_0, x22:0) -> f_2991(x18:0, x19:0, x23:0, 1 + x23:0, x22:0) :|: x23:0 > 0 && sum~cons_1~x23:0 = 1 + x23:0 && cons_0 = 0
f_2991(v85837:0:0, v85843:0:0, sum~cons_1~v91811:0:0, v85846:0:0, v85848:0:0) -> f_2991(v85837:0:0, v85843:0:0, v91811:0:0, v85846:0:0, v85848:0:0) :|: v91811:0:0 > 0 && v85846:0:0 > 1 && sum~cons_1~v91811:0:0 = 1 + v91811:0:0

----------------------------------------

(14) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(15)
Obligation:
Rules:
f_2991(v85837:0:0, v85843:0:0, sum~cons_1~v91811:0:0, v85846:0:0, v85848:0:0) -> f_2991(v85837:0:0, v85843:0:0, v91811:0:0, v85846:0:0, v85848:0:0) :|: v91811:0:0 > 0 && v85846:0:0 > 1 && sum~cons_1~v91811:0:0 = 1 + v91811:0:0

----------------------------------------

(16) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(17)
Obligation:
Rules:
f_2991(v85837:0:0:0, v85843:0:0:0, sum~cons_1~v91811:0:0:0, v85846:0:0:0, v85848:0:0:0) -> f_2991(v85837:0:0:0, v85843:0:0:0, v91811:0:0:0, v85846:0:0:0, v85848:0:0:0) :|: v91811:0:0:0 > 0 && v85846:0:0:0 > 1 && sum~cons_1~v91811:0:0:0 = 1 + v91811:0:0:0

----------------------------------------

(18) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_2991(x1, x2, x3, x4, x5) -> f_2991(x3, x4)

----------------------------------------

(19)
Obligation:
Rules:
f_2991(sum~cons_1~v91811:0:0:0, v85846:0:0:0) -> f_2991(v91811:0:0:0, v85846:0:0:0) :|: v91811:0:0:0 > 0 && v85846:0:0:0 > 1 && sum~cons_1~v91811:0:0:0 = 1 + v91811:0:0:0

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_2991(x, x1)] = x

The following rules are decreasing:
f_2991(sum~cons_1~v91811:0:0:0, v85846:0:0:0) -> f_2991(v91811:0:0:0, v85846:0:0:0) :|: v91811:0:0:0 > 0 && v85846:0:0:0 > 1 && sum~cons_1~v91811:0:0:0 = 1 + v91811:0:0:0
The following rules are bounded:
f_2991(sum~cons_1~v91811:0:0:0, v85846:0:0:0) -> f_2991(v91811:0:0:0, v85846:0:0:0) :|: v91811:0:0:0 > 0 && v85846:0:0:0 > 1 && sum~cons_1~v91811:0:0:0 = 1 + v91811:0:0:0

----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
SCC
----------------------------------------

(23) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 60 rulesP rules:
f_2559(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2577(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: 0 = 0
f_2577(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2594(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: 0 = 0
f_2594(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2609(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: TRUE
f_2609(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2624(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v72697, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: TRUE
f_2624(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v72697, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2639(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v72697, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: v72697 != 0
f_2624(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v72697, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2640(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: v72697 = 0
f_2639(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v72697, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2659(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v72697, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: 0 = 0
f_2659(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v72697, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2675(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v72697, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: TRUE
f_2675(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v72697, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2970(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v72697, v63210, v63211, v63212, v63213, v63209, v63214, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v86673, 3, 2, 4) :|: TRUE
f_2970(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v86666, v86667, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) -> f_2978(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v86666, v86667, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) :|: TRUE
f_2978(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v86666, v86667, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) -> f_2986(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v86666, v86667, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) :|: TRUE
f_2986(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v86666, v86667, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) -> f_2996(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v86667, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) :|: 0 = 0
f_2996(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v86667, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) -> f_3008(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v86667, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) :|: 0 = 0
f_3008(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v86667, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) -> f_3019(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v86667, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) :|: 1 + v88619 = v86663 && 0 <= v88619
f_3019(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v86667, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) -> f_3029(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v86667, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) :|: TRUE
f_3029(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v86667, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) -> f_3038(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v90590, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) :|: TRUE
f_3038(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v90590, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) -> f_3049(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v90590, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) :|: TRUE
f_3049(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v90590, v86668, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) -> f_3060(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v90590, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) :|: 0 = 0
f_3060(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v90590, v86669, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) -> f_3069(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v90590, v86669, v90915, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) :|: 1 + v90915 = v86669 && 1 + v90915 <= 0
f_3069(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v90590, v86669, v90915, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) -> f_3078(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v90590, v86669, v90915, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) :|: TRUE
f_3078(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v90590, v86669, v90915, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) -> f_3087(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v90590, v86669, v90915, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) :|: TRUE
f_3087(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v88619, v90590, v86669, v90915, v86670, v86671, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v86673, 3, 2, 4) -> f_2842(1, v86654, v86655, v86656, v86657, v86658, v86659, v86660, v86661, 0, v86663, v86664, v86665, v86670, v86671, v88619, v90590, v86669, v90915, v86672, v86674, v86675, v86676, v86677, v86678, v86679, v79327, 3, 2, 4) :|: TRUE
f_2842(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79317, v79318, v79319, v79320, v79321, v79322, v79323, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2853(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79317, v79318, v79319, v79320, v79321, v79322, v79323, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: TRUE
f_2853(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79317, v79318, v79319, v79320, v79321, v79322, v79323, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2862(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79318, v79319, v79320, v79321, v79317, v79323, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: 0 = 0
f_2862(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79318, v79319, v79320, v79321, v79317, v79323, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2871(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79318, v79319, v79320, v79321, v79317, v79323, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: 0 < v79322 && 2 <= v79317 && 2 <= v79313
f_2871(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79318, v79319, v79320, v79321, v79317, v79323, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2881(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79318, v79319, v79320, v79321, v79317, v79323, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: 0 = 0
f_2881(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79318, v79319, v79320, v79321, v79317, v79323, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2890(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79318, v79319, v79320, v79321, v79317, v79323, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: TRUE
f_2890(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79318, v79319, v79320, v79321, v79317, v79323, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2899(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79319, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: 0 = 0
f_2899(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79319, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2908(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79319, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: 0 < v79323
f_2908(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79319, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2917(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79319, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: 0 = 0
f_2917(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79319, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2926(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79319, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: 0 = 0
f_2926(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79319, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2935(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79319, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: TRUE
f_2935(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79319, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2945(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v85985, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: TRUE
f_2945(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v85985, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2953(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v85985, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: v85985 != 0
f_2945(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v85985, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2954(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: v85985 = 0
f_2953(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v85985, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2961(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v85985, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: 0 = 0
f_2961(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v85985, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2969(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v85985, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: TRUE
f_2969(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v85985, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2970(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v85985, v79317, v79323, v79324, v79325, v79320, v79321, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v86673, 3, 2, 4) :|: TRUE
f_2954(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2962(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: 0 = 0
f_2962(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2971(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: TRUE
f_2971(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79320, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2979(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: 0 = 0
f_2979(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2987(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: 0 = 0
f_2987(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79321, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2997(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v87752, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: 1 + v87752 = v79323 && 0 <= v87752
f_2997(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v87752, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_3009(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v87752, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: TRUE
f_3009(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v87752, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_3020(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v87752, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) :|: TRUE
f_3020(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v87752, v79317, v79324, v79325, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v79327, 3, 2, 4) -> f_2483(1, v79308, v79309, v79310, v79311, v79312, v79313, v79314, v79315, 0, v79322, v79323, v79317, v79323, v79324, v79325, v87752, v79326, v79328, v79329, v79330, v79331, v79332, v79333, v63216, 3, 2, 4) :|: TRUE
f_2483(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63209, v63210, v63211, v63212, v63213, v63214, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2497(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63209, v63210, v63211, v63212, v63213, v63214, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: TRUE
f_2497(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63209, v63210, v63211, v63212, v63213, v63214, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2509(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63209, v63210, v63211, v63212, v63213, v63214, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: 0 = 0
f_2509(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63209, v63210, v63211, v63212, v63213, v63214, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2522(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63209, v63210, v63211, v63212, v63213, v63214, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: 0 = 0
f_2522(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63209, v63210, v63211, v63212, v63213, v63214, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2534(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63209, v63210, v63211, v63212, v63213, v63214, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: TRUE
f_2534(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63209, v63210, v63211, v63212, v63213, v63214, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2546(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: 0 = 0
f_2546(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2559(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: 0 < v63214 && 2 <= v63209 && 2 <= v63211
f_2640(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2660(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: 0 = 0
f_2660(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2676(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: TRUE
f_2676(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63209, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2692(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: 0 = 0
f_2692(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2708(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: 0 = 0
f_2708(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2725(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v75805, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: 1 + v75805 = v63214 && 0 <= v75805
f_2725(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v75805, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2743(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v75805, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: TRUE
f_2743(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v75805, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2761(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v75805, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: TRUE
f_2761(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v75805, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) -> f_2483(1, v63199, v63200, v63201, v63202, v63203, v63204, v63205, v63206, 0, v63208, v63214, v63210, v63211, v63212, v63213, v75805, v63215, v63217, v63218, v63219, v63220, v63221, v63222, v63216, 3, 2, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_2945(1, v79308:0, v79309:0, v79310:0, v79311:0, v79312:0, v79313:0, v79314:0, v79315:0, 0, 1 + v88619:0, v79323:0, v85985:0, v79320:0, v79321:0, v79317:0, v79324:0, 1 + v90915:0, v79326:0, v79328:0, v79329:0, v79330:0, v79331:0, v79332:0, v79333:0, v79327:0, 3, 2, 4) -> f_2945(1, v79308:0, v79309:0, v79310:0, v79311:0, v79312:0, v79313:0, v79314:0, v79315:0, 0, v88619:0, v90590:0, v85985:1, v79320:0, v79321:0, 1 + v88619:0, 1 + v90915:0, v90915:0, v79326:0, v79328:0, v79329:0, v79330:0, v79331:0, v79332:0, v79333:0, v79327:1, 3, 2, 4) :|: v88619:0 > 0 && v90915:0 < 0 && v79313:0 > 1 && v85985:0 < 0 && v90590:0 > 0
f_2945(1, v79308:0, v79309:0, v79310:0, v79311:0, v79312:0, v79313:0, v79314:0, v79315:0, 0, 1 + v88619:0, v79323:0, v85985:0, v79320:0, v79321:0, v79317:0, v79324:0, 1 + v90915:0, v79326:0, v79328:0, v79329:0, v79330:0, v79331:0, v79332:0, v79333:0, v79327:0, 3, 2, 4) -> f_2945(1, v79308:0, v79309:0, v79310:0, v79311:0, v79312:0, v79313:0, v79314:0, v79315:0, 0, v88619:0, v90590:0, v85985:1, v79320:0, v79321:0, 1 + v88619:0, 1 + v90915:0, v90915:0, v79326:0, v79328:0, v79329:0, v79330:0, v79331:0, v79332:0, v79333:0, v79327:1, 3, 2, 4) :|: v88619:0 > 0 && v90915:0 < 0 && v79313:0 > 1 && v85985:0 > 0 && v90590:0 > 0
f_2559(1, v63199:0, v63200:0, v63201:0, v63202:0, v63203:0, v63204:0, v63205:0, v63206:0, 0, v63208:0, 1 + v75805:0, v63210:0, v63211:0, v63212:0, v63213:0, v63209:0, v63215:0, v63217:0, v63218:0, v63219:0, v63220:0, v63221:0, v63222:0, v63216:0, 3, 2, 4) -> f_2559(1, v63199:0, v63200:0, v63201:0, v63202:0, v63203:0, v63204:0, v63205:0, v63206:0, 0, v63208:0, v75805:0, v63210:0, v63211:0, v63212:0, v63213:0, 1 + v75805:0, v63215:0, v63217:0, v63218:0, v63219:0, v63220:0, v63221:0, v63222:0, v63216:0, 3, 2, 4) :|: v75805:0 > 0 && v63211:0 > 1
f_2945(1, v79308:0, v79309:0, v79310:0, v79311:0, v79312:0, v79313:0, v79314:0, v79315:0, 0, v79322:0, 1 + v87752:0, 0, v79320:0, v79321:0, v79317:0, v79324:0, v79325:0, v79326:0, v79328:0, v79329:0, v79330:0, v79331:0, v79332:0, v79333:0, v79327:0, 3, 2, 4) -> f_2559(1, v79308:0, v79309:0, v79310:0, v79311:0, v79312:0, v79313:0, v79314:0, v79315:0, 0, v79322:0, v87752:0, v79317:0, 1 + v87752:0, v79324:0, v79325:0, 1 + v87752:0, v79326:0, v79328:0, v79329:0, v79330:0, v79331:0, v79332:0, v79333:0, v63216:0, 3, 2, 4) :|: v87752:0 > 0
f_2559(1, v63199:0, v63200:0, v63201:0, v63202:0, v63203:0, v63204:0, v63205:0, v63206:0, 0, 1 + v88619:0, v63214:0, v63210:0, v63211:0, v63212:0, 1 + v90915:0, v63209:0, v63215:0, v63217:0, v63218:0, v63219:0, v63220:0, v63221:0, v63222:0, v63216:0, 3, 2, 4) -> f_2945(1, v63199:0, v63200:0, v63201:0, v63202:0, v63203:0, v63204:0, v63205:0, v63206:0, 0, v88619:0, v90590:0, v85985:0, v63209:0, v63214:0, 1 + v88619:0, 1 + v90915:0, v90915:0, v63215:0, v63217:0, v63218:0, v63219:0, v63220:0, v63221:0, v63222:0, v79327:0, 3, 2, 4) :|: v88619:0 > 0 && v72697:0 < 0 && v90915:0 < 0 && v90590:0 > 0 && v63204:0 > 1
f_2559(1, v63199:0, v63200:0, v63201:0, v63202:0, v63203:0, v63204:0, v63205:0, v63206:0, 0, 1 + v88619:0, v63214:0, v63210:0, v63211:0, v63212:0, 1 + v90915:0, v63209:0, v63215:0, v63217:0, v63218:0, v63219:0, v63220:0, v63221:0, v63222:0, v63216:0, 3, 2, 4) -> f_2945(1, v63199:0, v63200:0, v63201:0, v63202:0, v63203:0, v63204:0, v63205:0, v63206:0, 0, v88619:0, v90590:0, v85985:0, v63209:0, v63214:0, 1 + v88619:0, 1 + v90915:0, v90915:0, v63215:0, v63217:0, v63218:0, v63219:0, v63220:0, v63221:0, v63222:0, v79327:0, 3, 2, 4) :|: v88619:0 > 0 && v72697:0 > 0 && v90915:0 < 0 && v90590:0 > 0 && v63204:0 > 1
Filtered unneeded arguments:
   f_2945(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_2945(x7, x11, x12, x13, x18)
   f_2559(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_2559(x7, x11, x12, x14, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_2945(v79313:0, sum~cons_1~v88619:0, v79323:0, v85985:0, sum~cons_1~v90915:0) -> f_2945(v79313:0, v88619:0, v90590:0, v85985:1, v90915:0) :|: v90915:0 < 0 && v88619:0 > 0 && v79313:0 > 1 && v90590:0 > 0 && v85985:0 < 0 && sum~cons_1~v88619:0 = 1 + v88619:0 && sum~cons_1~v90915:0 = 1 + v90915:0
f_2945(v79313:0, sum~cons_1~v88619:0, v79323:0, v85985:0, sum~cons_1~v90915:0) -> f_2945(v79313:0, v88619:0, v90590:0, v85985:1, v90915:0) :|: v90915:0 < 0 && v88619:0 > 0 && v79313:0 > 1 && v90590:0 > 0 && v85985:0 > 0 && sum~cons_1~v88619:0 = 1 + v88619:0 && sum~cons_1~v90915:0 = 1 + v90915:0
f_2559(v63204:0, v63208:0, sum~cons_1~v75805:0, v63211:0, v63213:0) -> f_2559(v63204:0, v63208:0, v75805:0, v63211:0, v63213:0) :|: v75805:0 > 0 && v63211:0 > 1 && sum~cons_1~v75805:0 = 1 + v75805:0
f_2945(v79313:0, v79322:0, sum~cons_1~v87752:0, cons_0, v79325:0) -> f_2559(v79313:0, v79322:0, v87752:0, 1 + v87752:0, v79325:0) :|: v87752:0 > 0 && sum~cons_1~v87752:0 = 1 + v87752:0 && cons_0 = 0
f_2559(v63204:0, sum~cons_1~v88619:0, v63214:0, v63211:0, sum~cons_1~v90915:0) -> f_2945(v63204:0, v88619:0, v90590:0, v85985:0, v90915:0) :|: v90915:0 < 0 && v88619:0 > 0 && v63204:0 > 1 && v90590:0 > 0 && sum~cons_1~v88619:0 = 1 + v88619:0 && sum~cons_1~v90915:0 = 1 + v90915:0

----------------------------------------

(24)
Obligation:
Rules:
f_2945(v79313:0, sum~cons_1~v88619:0, v79323:0, v85985:0, sum~cons_1~v90915:0) -> f_2945(v79313:0, v88619:0, v90590:0, v85985:1, v90915:0) :|: v90915:0 < 0 && v88619:0 > 0 && v79313:0 > 1 && v90590:0 > 0 && v85985:0 < 0 && sum~cons_1~v88619:0 = 1 + v88619:0 && sum~cons_1~v90915:0 = 1 + v90915:0
f_2945(x, x1, x2, x3, x4) -> f_2945(x, x5, x6, x7, x8) :|: x8 < 0 && x5 > 0 && x > 1 && x6 > 0 && x3 > 0 && x1 = 1 + x5 && x4 = 1 + x8
f_2559(v63204:0, v63208:0, sum~cons_1~v75805:0, v63211:0, v63213:0) -> f_2559(v63204:0, v63208:0, v75805:0, v63211:0, v63213:0) :|: v75805:0 > 0 && v63211:0 > 1 && sum~cons_1~v75805:0 = 1 + v75805:0
f_2945(x9, x10, x11, x12, x13) -> f_2559(x9, x10, x14, 1 + x14, x13) :|: x14 > 0 && x11 = 1 + x14 && x12 = 0
f_2559(x15, x16, x17, x18, x19) -> f_2945(x15, x20, x21, x22, x23) :|: x23 < 0 && x20 > 0 && x15 > 1 && x21 > 0 && x16 = 1 + x20 && x19 = 1 + x23

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f_2559(v63204:0:0, v63208:0:0, sum~cons_1~v75805:0:0, v63211:0:0, v63213:0:0) -> f_2559(v63204:0:0, v63208:0:0, v75805:0:0, v63211:0:0, v63213:0:0) :|: v75805:0:0 > 0 && v63211:0:0 > 1 && sum~cons_1~v75805:0:0 = 1 + v75805:0:0
f_2945(x:0, sum~cons_1~x5:0, x2:0, x3:0, sum~cons_1~x8:0) -> f_2945(x:0, x5:0, x6:0, x7:0, x8:0) :|: x6:0 > 0 && x3:0 > 0 && x:0 > 1 && x5:0 > 0 && x8:0 < 0 && sum~cons_1~x5:0 = 1 + x5:0 && sum~cons_1~x8:0 = 1 + x8:0
f_2945(v79313:0:0, sum~cons_1~v88619:0:0, v79323:0:0, v85985:0:0, sum~cons_1~v90915:0:0) -> f_2945(v79313:0:0, v88619:0:0, v90590:0:0, v85985:1:0, v90915:0:0) :|: v90590:0:0 > 0 && v85985:0:0 < 0 && v79313:0:0 > 1 && v88619:0:0 > 0 && v90915:0:0 < 0 && sum~cons_1~v88619:0:0 = 1 + v88619:0:0 && sum~cons_1~v90915:0:0 = 1 + v90915:0:0
f_2945(x9:0, x10:0, sum~cons_1~x14:0, cons_0, x13:0) -> f_2559(x9:0, x10:0, x14:0, 1 + x14:0, x13:0) :|: x14:0 > 0 && sum~cons_1~x14:0 = 1 + x14:0 && cons_0 = 0
f_2559(x15:0, sum~cons_1~x20:0, x17:0, x18:0, sum~cons_1~x23:0) -> f_2945(x15:0, x20:0, x21:0, x22:0, x23:0) :|: x15:0 > 1 && x21:0 > 0 && x20:0 > 0 && x23:0 < 0 && sum~cons_1~x20:0 = 1 + x20:0 && sum~cons_1~x23:0 = 1 + x23:0

----------------------------------------

(27) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_2559 ] = 2*f_2559_1 + 2*f_2559_2
[ f_2945 ] = 2*f_2945_1 + 2*f_2945_2 + 1

The following rules are decreasing:
f_2945(x:0, sum~cons_1~x5:0, x2:0, x3:0, sum~cons_1~x8:0) -> f_2945(x:0, x5:0, x6:0, x7:0, x8:0) :|: x6:0 > 0 && x3:0 > 0 && x:0 > 1 && x5:0 > 0 && x8:0 < 0 && sum~cons_1~x5:0 = 1 + x5:0 && sum~cons_1~x8:0 = 1 + x8:0
f_2945(v79313:0:0, sum~cons_1~v88619:0:0, v79323:0:0, v85985:0:0, sum~cons_1~v90915:0:0) -> f_2945(v79313:0:0, v88619:0:0, v90590:0:0, v85985:1:0, v90915:0:0) :|: v90590:0:0 > 0 && v85985:0:0 < 0 && v79313:0:0 > 1 && v88619:0:0 > 0 && v90915:0:0 < 0 && sum~cons_1~v88619:0:0 = 1 + v88619:0:0 && sum~cons_1~v90915:0:0 = 1 + v90915:0:0
f_2945(x9:0, x10:0, sum~cons_1~x14:0, cons_0, x13:0) -> f_2559(x9:0, x10:0, x14:0, 1 + x14:0, x13:0) :|: x14:0 > 0 && sum~cons_1~x14:0 = 1 + x14:0 && cons_0 = 0
f_2559(x15:0, sum~cons_1~x20:0, x17:0, x18:0, sum~cons_1~x23:0) -> f_2945(x15:0, x20:0, x21:0, x22:0, x23:0) :|: x15:0 > 1 && x21:0 > 0 && x20:0 > 0 && x23:0 < 0 && sum~cons_1~x20:0 = 1 + x20:0 && sum~cons_1~x23:0 = 1 + x23:0

The following rules are bounded:
f_2559(x15:0, sum~cons_1~x20:0, x17:0, x18:0, sum~cons_1~x23:0) -> f_2945(x15:0, x20:0, x21:0, x22:0, x23:0) :|: x15:0 > 1 && x21:0 > 0 && x20:0 > 0 && x23:0 < 0 && sum~cons_1~x20:0 = 1 + x20:0 && sum~cons_1~x23:0 = 1 + x23:0


----------------------------------------

(28)
Obligation:
Rules:
f_2559(v63204:0:0, v63208:0:0, sum~cons_1~v75805:0:0, v63211:0:0, v63213:0:0) -> f_2559(v63204:0:0, v63208:0:0, v75805:0:0, v63211:0:0, v63213:0:0) :|: v75805:0:0 > 0 && v63211:0:0 > 1 && sum~cons_1~v75805:0:0 = 1 + v75805:0:0
f_2945(x:0, sum~cons_1~x5:0, x2:0, x3:0, sum~cons_1~x8:0) -> f_2945(x:0, x5:0, x6:0, x7:0, x8:0) :|: x6:0 > 0 && x3:0 > 0 && x:0 > 1 && x5:0 > 0 && x8:0 < 0 && sum~cons_1~x5:0 = 1 + x5:0 && sum~cons_1~x8:0 = 1 + x8:0
f_2945(v79313:0:0, sum~cons_1~v88619:0:0, v79323:0:0, v85985:0:0, sum~cons_1~v90915:0:0) -> f_2945(v79313:0:0, v88619:0:0, v90590:0:0, v85985:1:0, v90915:0:0) :|: v90590:0:0 > 0 && v85985:0:0 < 0 && v79313:0:0 > 1 && v88619:0:0 > 0 && v90915:0:0 < 0 && sum~cons_1~v88619:0:0 = 1 + v88619:0:0 && sum~cons_1~v90915:0:0 = 1 + v90915:0:0
f_2945(x9:0, x10:0, sum~cons_1~x14:0, cons_0, x13:0) -> f_2559(x9:0, x10:0, x14:0, 1 + x14:0, x13:0) :|: x14:0 > 0 && sum~cons_1~x14:0 = 1 + x14:0 && cons_0 = 0

----------------------------------------

(29) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained 2 non-trivial SCCs.

----------------------------------------

(30)
Complex Obligation (AND)

----------------------------------------

(31)
Obligation:
Rules:
f_2945(x:0, sum~cons_1~x5:0, x2:0, x3:0, sum~cons_1~x8:0) -> f_2945(x:0, x5:0, x6:0, x7:0, x8:0) :|: x6:0 > 0 && x3:0 > 0 && x:0 > 1 && x5:0 > 0 && x8:0 < 0 && sum~cons_1~x5:0 = 1 + x5:0 && sum~cons_1~x8:0 = 1 + x8:0
f_2945(v79313:0:0, sum~cons_1~v88619:0:0, v79323:0:0, v85985:0:0, sum~cons_1~v90915:0:0) -> f_2945(v79313:0:0, v88619:0:0, v90590:0:0, v85985:1:0, v90915:0:0) :|: v90590:0:0 > 0 && v85985:0:0 < 0 && v79313:0:0 > 1 && v88619:0:0 > 0 && v90915:0:0 < 0 && sum~cons_1~v88619:0:0 = 1 + v88619:0:0 && sum~cons_1~v90915:0:0 = 1 + v90915:0:0

----------------------------------------

(32) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(33)
Obligation:
Rules:
f_2945(x:0:0, sum~cons_1~x5:0:0, x2:0:0, x3:0:0, sum~cons_1~x8:0:0) -> f_2945(x:0:0, x5:0:0, x6:0:0, x7:0:0, x8:0:0) :|: x5:0:0 > 0 && x8:0:0 < 0 && x:0:0 > 1 && x3:0:0 > 0 && x6:0:0 > 0 && sum~cons_1~x5:0:0 = 1 + x5:0:0 && sum~cons_1~x8:0:0 = 1 + x8:0:0
f_2945(v79313:0:0:0, sum~cons_1~v88619:0:0:0, v79323:0:0:0, v85985:0:0:0, sum~cons_1~v90915:0:0:0) -> f_2945(v79313:0:0:0, v88619:0:0:0, v90590:0:0:0, v85985:1:0:0, v90915:0:0:0) :|: v88619:0:0:0 > 0 && v90915:0:0:0 < 0 && v79313:0:0:0 > 1 && v85985:0:0:0 < 0 && v90590:0:0:0 > 0 && sum~cons_1~v88619:0:0:0 = 1 + v88619:0:0:0 && sum~cons_1~v90915:0:0:0 = 1 + v90915:0:0:0

----------------------------------------

(34) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_2945(x1, x2, x3, x4, x5) -> f_2945(x1, x2, x4, x5)

----------------------------------------

(35)
Obligation:
Rules:
f_2945(x:0:0, sum~cons_1~x5:0:0, x3:0:0, sum~cons_1~x8:0:0) -> f_2945(x:0:0, x5:0:0, x7:0:0, x8:0:0) :|: x5:0:0 > 0 && x8:0:0 < 0 && x:0:0 > 1 && x3:0:0 > 0 && x6:0:0 > 0 && sum~cons_1~x5:0:0 = 1 + x5:0:0 && sum~cons_1~x8:0:0 = 1 + x8:0:0
f_2945(v79313:0:0:0, sum~cons_1~v88619:0:0:0, v85985:0:0:0, sum~cons_1~v90915:0:0:0) -> f_2945(v79313:0:0:0, v88619:0:0:0, v85985:1:0:0, v90915:0:0:0) :|: v88619:0:0:0 > 0 && v90915:0:0:0 < 0 && v79313:0:0:0 > 1 && v85985:0:0:0 < 0 && v90590:0:0:0 > 0 && sum~cons_1~v88619:0:0:0 = 1 + v88619:0:0:0 && sum~cons_1~v90915:0:0:0 = 1 + v90915:0:0:0

----------------------------------------

(36) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_2945(x, x1, x2, x3)] = x1

The following rules are decreasing:
f_2945(x:0:0, sum~cons_1~x5:0:0, x3:0:0, sum~cons_1~x8:0:0) -> f_2945(x:0:0, x5:0:0, x7:0:0, x8:0:0) :|: x5:0:0 > 0 && x8:0:0 < 0 && x:0:0 > 1 && x3:0:0 > 0 && x6:0:0 > 0 && sum~cons_1~x5:0:0 = 1 + x5:0:0 && sum~cons_1~x8:0:0 = 1 + x8:0:0
f_2945(v79313:0:0:0, sum~cons_1~v88619:0:0:0, v85985:0:0:0, sum~cons_1~v90915:0:0:0) -> f_2945(v79313:0:0:0, v88619:0:0:0, v85985:1:0:0, v90915:0:0:0) :|: v88619:0:0:0 > 0 && v90915:0:0:0 < 0 && v79313:0:0:0 > 1 && v85985:0:0:0 < 0 && v90590:0:0:0 > 0 && sum~cons_1~v88619:0:0:0 = 1 + v88619:0:0:0 && sum~cons_1~v90915:0:0:0 = 1 + v90915:0:0:0
The following rules are bounded:
f_2945(x:0:0, sum~cons_1~x5:0:0, x3:0:0, sum~cons_1~x8:0:0) -> f_2945(x:0:0, x5:0:0, x7:0:0, x8:0:0) :|: x5:0:0 > 0 && x8:0:0 < 0 && x:0:0 > 1 && x3:0:0 > 0 && x6:0:0 > 0 && sum~cons_1~x5:0:0 = 1 + x5:0:0 && sum~cons_1~x8:0:0 = 1 + x8:0:0
f_2945(v79313:0:0:0, sum~cons_1~v88619:0:0:0, v85985:0:0:0, sum~cons_1~v90915:0:0:0) -> f_2945(v79313:0:0:0, v88619:0:0:0, v85985:1:0:0, v90915:0:0:0) :|: v88619:0:0:0 > 0 && v90915:0:0:0 < 0 && v79313:0:0:0 > 1 && v85985:0:0:0 < 0 && v90590:0:0:0 > 0 && sum~cons_1~v88619:0:0:0 = 1 + v88619:0:0:0 && sum~cons_1~v90915:0:0:0 = 1 + v90915:0:0:0

----------------------------------------

(37)
YES

----------------------------------------

(38)
Obligation:
Rules:
f_2559(v63204:0:0, v63208:0:0, sum~cons_1~v75805:0:0, v63211:0:0, v63213:0:0) -> f_2559(v63204:0:0, v63208:0:0, v75805:0:0, v63211:0:0, v63213:0:0) :|: v75805:0:0 > 0 && v63211:0:0 > 1 && sum~cons_1~v75805:0:0 = 1 + v75805:0:0

----------------------------------------

(39) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(40)
Obligation:
Rules:
f_2559(v63204:0:0:0, v63208:0:0:0, sum~cons_1~v75805:0:0:0, v63211:0:0:0, v63213:0:0:0) -> f_2559(v63204:0:0:0, v63208:0:0:0, v75805:0:0:0, v63211:0:0:0, v63213:0:0:0) :|: v75805:0:0:0 > 0 && v63211:0:0:0 > 1 && sum~cons_1~v75805:0:0:0 = 1 + v75805:0:0:0

----------------------------------------

(41) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_2559(x1, x2, x3, x4, x5) -> f_2559(x3, x4)

----------------------------------------

(42)
Obligation:
Rules:
f_2559(sum~cons_1~v75805:0:0:0, v63211:0:0:0) -> f_2559(v75805:0:0:0, v63211:0:0:0) :|: v75805:0:0:0 > 0 && v63211:0:0:0 > 1 && sum~cons_1~v75805:0:0:0 = 1 + v75805:0:0:0

----------------------------------------

(43) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_2559(x, x1)] = x

The following rules are decreasing:
f_2559(sum~cons_1~v75805:0:0:0, v63211:0:0:0) -> f_2559(v75805:0:0:0, v63211:0:0:0) :|: v75805:0:0:0 > 0 && v63211:0:0:0 > 1 && sum~cons_1~v75805:0:0:0 = 1 + v75805:0:0:0
The following rules are bounded:
f_2559(sum~cons_1~v75805:0:0:0, v63211:0:0:0) -> f_2559(v75805:0:0:0, v63211:0:0:0) :|: v75805:0:0:0 > 0 && v63211:0:0:0 > 1 && sum~cons_1~v75805:0:0:0 = 1 + v75805:0:0:0

----------------------------------------

(44)
YES

----------------------------------------

(45)
Obligation:
SCC
----------------------------------------

(46) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 27 rulesP rules:
f_2227(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50401, v50402, v50400, v50404, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2239(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50401, v50402, v50400, v50404, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: 0 = 0
f_2239(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50401, v50402, v50400, v50404, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2253(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50401, v50402, v50400, v50404, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: TRUE
f_2253(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50401, v50402, v50400, v50404, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2267(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v50402, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: 0 = 0
f_2267(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v50402, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2281(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v50402, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: 0 < v50404
f_2281(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v50402, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2299(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v50402, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: 0 = 0
f_2299(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v50402, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2317(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v50402, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: 0 = 0
f_2317(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v50402, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2335(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v50402, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: TRUE
f_2335(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v50402, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2353(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: TRUE
f_2353(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2369(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: v59475 != 0
f_2369(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2387(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: 0 = 0
f_2387(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2401(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: TRUE
f_2401(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2419(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: TRUE
f_2419(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2433(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: TRUE
f_2433(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50400, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2447(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: 0 = 0
f_2447(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2461(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: 0 = 0
f_2461(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2477(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: 1 + v62880 = v50403 && 0 <= v62880
f_2477(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2493(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: TRUE
f_2493(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2505(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v64498, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: TRUE
f_2505(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v64498, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2519(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v64498, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: TRUE
f_2519(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v64498, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2531(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v64498, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: 0 = 0
f_2531(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v64498, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2543(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v64498, v50406, v66035, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: 1 + v66035 = v50406
f_2543(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v64498, v50406, v66035, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2555(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v64498, v50406, v66035, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: TRUE
f_2555(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v64498, v50406, v66035, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2573(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v64498, v50406, v66035, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: TRUE
f_2573(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v64498, v50406, v66035, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2174(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50404, v59475, v62880, v64498, v50406, v66035, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: TRUE
f_2174(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50400, v50401, v50402, v50403, v50404, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2193(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50400, v50401, v50402, v50403, v50404, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: TRUE
f_2193(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50400, v50401, v50402, v50403, v50404, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2211(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50401, v50402, v50400, v50404, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: 0 = 0
f_2211(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50401, v50402, v50400, v50404, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) -> f_2227(1, v50389, v50390, v50391, v50392, v50393, v50394, v50395, v50396, 0, v50398, v50399, v50403, v50401, v50402, v50400, v50404, v50405, v50406, v50407, v50409, v50410, v50411, v50412, v50413, v50414, v50408, 3, 2, 4) :|: 0 < v50403 && 2 <= v50400 && 2 <= v50394
Combined rules. Obtained 2 rulesP rules:
f_2227(1, v50389:0, v50390:0, v50391:0, v50392:0, v50393:0, v50394:0, v50395:0, v50396:0, 0, v50398:0, v50399:0, 1 + v62880:0, v50401:0, v50402:0, v50400:0, v50404:0, v50405:0, 1 + v66035:0, v50407:0, v50409:0, v50410:0, v50411:0, v50412:0, v50413:0, v50414:0, v50408:0, 3, 2, 4) -> f_2227(1, v50389:0, v50390:0, v50391:0, v50392:0, v50393:0, v50394:0, v50395:0, v50396:0, 0, v50398:0, v50399:0, v62880:0, v50404:0, v59475:0, 1 + v62880:0, v64498:0, 1 + v66035:0, v66035:0, v50407:0, v50409:0, v50410:0, v50411:0, v50412:0, v50413:0, v50414:0, v50408:0, 3, 2, 4) :|: v62880:0 > 0 && v50404:0 > 0 && v59475:0 < 0 && v50394:0 > 1
f_2227(1, v50389:0, v50390:0, v50391:0, v50392:0, v50393:0, v50394:0, v50395:0, v50396:0, 0, v50398:0, v50399:0, 1 + v62880:0, v50401:0, v50402:0, v50400:0, v50404:0, v50405:0, 1 + v66035:0, v50407:0, v50409:0, v50410:0, v50411:0, v50412:0, v50413:0, v50414:0, v50408:0, 3, 2, 4) -> f_2227(1, v50389:0, v50390:0, v50391:0, v50392:0, v50393:0, v50394:0, v50395:0, v50396:0, 0, v50398:0, v50399:0, v62880:0, v50404:0, v59475:0, 1 + v62880:0, v64498:0, 1 + v66035:0, v66035:0, v50407:0, v50409:0, v50410:0, v50411:0, v50412:0, v50413:0, v50414:0, v50408:0, 3, 2, 4) :|: v62880:0 > 0 && v50404:0 > 0 && v59475:0 > 0 && v50394:0 > 1
Filtered unneeded arguments:
   f_2227(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_2227(x7, x13, x17, x19)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_2227(v50394:0, sum~cons_1~v62880:0, v50404:0, sum~cons_1~v66035:0) -> f_2227(v50394:0, v62880:0, v64498:0, v66035:0) :|: v50404:0 > 0 && v50394:0 > 1 && v62880:0 > 0 && sum~cons_1~v62880:0 = 1 + v62880:0 && sum~cons_1~v66035:0 = 1 + v66035:0

----------------------------------------

(47)
Obligation:
Rules:
f_2227(v50394:0, sum~cons_1~v62880:0, v50404:0, sum~cons_1~v66035:0) -> f_2227(v50394:0, v62880:0, v64498:0, v66035:0) :|: v50404:0 > 0 && v50394:0 > 1 && v62880:0 > 0 && sum~cons_1~v62880:0 = 1 + v62880:0 && sum~cons_1~v66035:0 = 1 + v66035:0

----------------------------------------

(48) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(49)
Obligation:
Rules:
f_2227(v50394:0:0, sum~cons_1~v62880:0:0, v50404:0:0, sum~cons_1~v66035:0:0) -> f_2227(v50394:0:0, v62880:0:0, v64498:0:0, v66035:0:0) :|: v50404:0:0 > 0 && v50394:0:0 > 1 && v62880:0:0 > 0 && sum~cons_1~v62880:0:0 = 1 + v62880:0:0 && sum~cons_1~v66035:0:0 = 1 + v66035:0:0

----------------------------------------

(50) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_2227(x, x1, x2, x3)] = x1

The following rules are decreasing:
f_2227(v50394:0:0, sum~cons_1~v62880:0:0, v50404:0:0, sum~cons_1~v66035:0:0) -> f_2227(v50394:0:0, v62880:0:0, v64498:0:0, v66035:0:0) :|: v50404:0:0 > 0 && v50394:0:0 > 1 && v62880:0:0 > 0 && sum~cons_1~v62880:0:0 = 1 + v62880:0:0 && sum~cons_1~v66035:0:0 = 1 + v66035:0:0
The following rules are bounded:
f_2227(v50394:0:0, sum~cons_1~v62880:0:0, v50404:0:0, sum~cons_1~v66035:0:0) -> f_2227(v50394:0:0, v62880:0:0, v64498:0:0, v66035:0:0) :|: v50404:0:0 > 0 && v50394:0:0 > 1 && v62880:0:0 > 0 && sum~cons_1~v62880:0:0 = 1 + v62880:0:0 && sum~cons_1~v66035:0:0 = 1 + v66035:0:0

----------------------------------------

(51)
YES

----------------------------------------

(52)
Obligation:
SCC
----------------------------------------

(53) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 27 rulesP rules:
f_1663(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25209, v25210, v25208, v25212, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1677(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25209, v25210, v25208, v25212, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: 0 = 0
f_1677(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25209, v25210, v25208, v25212, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1691(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25209, v25210, v25208, v25212, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: TRUE
f_1691(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25209, v25210, v25208, v25212, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1706(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v25210, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: 0 = 0
f_1706(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v25210, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1720(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v25210, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: 0 < v25212
f_1720(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v25210, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1736(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v25210, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: 0 = 0
f_1736(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v25210, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1753(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v25210, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: 0 = 0
f_1753(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v25210, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1770(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v25210, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: TRUE
f_1770(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v25210, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1785(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: TRUE
f_1785(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1797(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: v31571 != 0
f_1797(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1812(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: 0 = 0
f_1812(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1826(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: TRUE
f_1826(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1843(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: TRUE
f_1843(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1859(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: TRUE
f_1859(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25208, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1876(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: 0 = 0
f_1876(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1894(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: 0 = 0
f_1894(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1912(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: 1 + v36116 = v25211 && 0 <= v36116
f_1912(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1930(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: TRUE
f_1930(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1947(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v38569, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: TRUE
f_1947(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v38569, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1964(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v38569, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: TRUE
f_1964(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v38569, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1979(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v38569, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: 0 = 0
f_1979(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v38569, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1994(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v38569, v25214, v41346, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: 1 + v41346 = v25214 && 1 + v41346 <= 0
f_1994(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v38569, v25214, v41346, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_2009(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v38569, v25214, v41346, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: TRUE
f_2009(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v38569, v25214, v41346, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_2025(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v38569, v25214, v41346, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: TRUE
f_2025(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v38569, v25214, v41346, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) -> f_1612(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25212, v31571, v36116, v38569, v25214, v41346, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 4) :|: TRUE
f_1612(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 4) -> f_1629(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 4) :|: TRUE
f_1629(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25208, v25209, v25210, v25211, v25212, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 4) -> f_1645(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25209, v25210, v25208, v25212, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 4) :|: 0 = 0
f_1645(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25209, v25210, v25208, v25212, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 4) -> f_1663(1, v25199, v25200, v25201, v25202, v25203, v25204, v25205, v25206, 0, v25211, v25209, v25210, v25208, v25212, v25213, v25214, v25215, v25217, v25218, v25219, v25220, v25221, v25222, v25216, 3, 2, 4) :|: 0 < v25211 && 2 <= v25208 && 2 <= v25204
Combined rules. Obtained 2 rulesP rules:
f_1663(1, v25199:0, v25200:0, v25201:0, v25202:0, v25203:0, v25204:0, v25205:0, v25206:0, 0, 1 + v36116:0, v25209:0, v25210:0, v25208:0, v25212:0, v25213:0, 1 + v41346:0, v25215:0, v25217:0, v25218:0, v25219:0, v25220:0, v25221:0, v25222:0, v25216:0, 3, 2, 4) -> f_1663(1, v25199:0, v25200:0, v25201:0, v25202:0, v25203:0, v25204:0, v25205:0, v25206:0, 0, v36116:0, v25212:0, v31571:0, 1 + v36116:0, v38569:0, 1 + v41346:0, v41346:0, v25215:0, v25217:0, v25218:0, v25219:0, v25220:0, v25221:0, v25222:0, v25216:0, 3, 2, 4) :|: v36116:0 > 0 && v25212:0 > 0 && v31571:0 < 0 && v41346:0 < 0 && v25204:0 > 1
f_1663(1, v25199:0, v25200:0, v25201:0, v25202:0, v25203:0, v25204:0, v25205:0, v25206:0, 0, 1 + v36116:0, v25209:0, v25210:0, v25208:0, v25212:0, v25213:0, 1 + v41346:0, v25215:0, v25217:0, v25218:0, v25219:0, v25220:0, v25221:0, v25222:0, v25216:0, 3, 2, 4) -> f_1663(1, v25199:0, v25200:0, v25201:0, v25202:0, v25203:0, v25204:0, v25205:0, v25206:0, 0, v36116:0, v25212:0, v31571:0, 1 + v36116:0, v38569:0, 1 + v41346:0, v41346:0, v25215:0, v25217:0, v25218:0, v25219:0, v25220:0, v25221:0, v25222:0, v25216:0, 3, 2, 4) :|: v36116:0 > 0 && v25212:0 > 0 && v31571:0 > 0 && v41346:0 < 0 && v25204:0 > 1
Filtered unneeded arguments:
   f_1663(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_1663(x7, x11, x15, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1663(v25204:0, sum~cons_1~v36116:0, v25212:0, sum~cons_1~v41346:0) -> f_1663(v25204:0, v36116:0, v38569:0, v41346:0) :|: v25212:0 > 0 && v36116:0 > 0 && v25204:0 > 1 && v41346:0 < 0 && sum~cons_1~v36116:0 = 1 + v36116:0 && sum~cons_1~v41346:0 = 1 + v41346:0

----------------------------------------

(54)
Obligation:
Rules:
f_1663(v25204:0, sum~cons_1~v36116:0, v25212:0, sum~cons_1~v41346:0) -> f_1663(v25204:0, v36116:0, v38569:0, v41346:0) :|: v25212:0 > 0 && v36116:0 > 0 && v25204:0 > 1 && v41346:0 < 0 && sum~cons_1~v36116:0 = 1 + v36116:0 && sum~cons_1~v41346:0 = 1 + v41346:0

----------------------------------------

(55) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(56)
Obligation:
Rules:
f_1663(v25204:0:0, sum~cons_1~v36116:0:0, v25212:0:0, sum~cons_1~v41346:0:0) -> f_1663(v25204:0:0, v36116:0:0, v38569:0:0, v41346:0:0) :|: v25204:0:0 > 1 && v41346:0:0 < 0 && v36116:0:0 > 0 && v25212:0:0 > 0 && sum~cons_1~v36116:0:0 = 1 + v36116:0:0 && sum~cons_1~v41346:0:0 = 1 + v41346:0:0

----------------------------------------

(57) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1663 ] = f_1663_2

The following rules are decreasing:
f_1663(v25204:0:0, sum~cons_1~v36116:0:0, v25212:0:0, sum~cons_1~v41346:0:0) -> f_1663(v25204:0:0, v36116:0:0, v38569:0:0, v41346:0:0) :|: v25204:0:0 > 1 && v41346:0:0 < 0 && v36116:0:0 > 0 && v25212:0:0 > 0 && sum~cons_1~v36116:0:0 = 1 + v36116:0:0 && sum~cons_1~v41346:0:0 = 1 + v41346:0:0

The following rules are bounded:
f_1663(v25204:0:0, sum~cons_1~v36116:0:0, v25212:0:0, sum~cons_1~v41346:0:0) -> f_1663(v25204:0:0, v36116:0:0, v38569:0:0, v41346:0:0) :|: v25204:0:0 > 1 && v41346:0:0 < 0 && v36116:0:0 > 0 && v25212:0:0 > 0 && sum~cons_1~v36116:0:0 = 1 + v36116:0:0 && sum~cons_1~v41346:0:0 = 1 + v41346:0:0


----------------------------------------

(58)
YES

----------------------------------------

(59)
Obligation:
SCC
----------------------------------------

(60) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_1499(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1515(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: 0 = 0
f_1515(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1531(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: 0 = 0
f_1531(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1548(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: TRUE
f_1548(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1563(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v24495, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: TRUE
f_1563(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v24495, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1578(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: v24495 = 0
f_1578(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1594(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: 0 = 0
f_1594(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1610(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: TRUE
f_1610(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1628(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: 0 = 0
f_1628(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1644(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: 0 = 0
f_1644(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1662(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v28233, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: 1 + v28233 = v20447 && 0 <= v28233
f_1662(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v28233, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1676(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v28233, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: TRUE
f_1676(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v28233, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1690(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v28233, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: TRUE
f_1690(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v28233, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1407(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v28233, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: TRUE
f_1407(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20446, v20447, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1423(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20446, v20447, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: TRUE
f_1423(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20446, v20447, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1439(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20446, v20447, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: 0 = 0
f_1439(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20446, v20447, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1453(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20446, v20447, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: 0 = 0
f_1453(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20446, v20447, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1468(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20446, v20447, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: TRUE
f_1468(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20446, v20447, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1484(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: 0 = 0
f_1484(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) -> f_1499(1, v20435, v20436, v20437, v20438, v20439, v20440, v20441, v20442, 0, v20444, v20445, v20447, v20446, v20448, v20450, v20451, v20452, v20453, v20454, v20455, v20449, 3, 2, 4) :|: 0 < v20447 && 2 <= v20446 && 2 <= v20441
Combined rules. Obtained 1 rulesP rules:
f_1499(1, v20435:0, v20436:0, v20437:0, v20438:0, v20439:0, v20440:0, v20441:0, v20442:0, 0, v20444:0, v20445:0, 1 + v28233:0, v20446:0, v20448:0, v20450:0, v20451:0, v20452:0, v20453:0, v20454:0, v20455:0, v20449:0, 3, 2, 4) -> f_1499(1, v20435:0, v20436:0, v20437:0, v20438:0, v20439:0, v20440:0, v20441:0, v20442:0, 0, v20444:0, v20445:0, v28233:0, 1 + v28233:0, v20448:0, v20450:0, v20451:0, v20452:0, v20453:0, v20454:0, v20455:0, v20449:0, 3, 2, 4) :|: v28233:0 > 0 && v20441:0 > 1
Filtered unneeded arguments:
   f_1499(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_1499(x8, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1499(v20441:0, sum~cons_1~v28233:0) -> f_1499(v20441:0, v28233:0) :|: v28233:0 > 0 && v20441:0 > 1 && sum~cons_1~v28233:0 = 1 + v28233:0

----------------------------------------

(61)
Obligation:
Rules:
f_1499(v20441:0, sum~cons_1~v28233:0) -> f_1499(v20441:0, v28233:0) :|: v28233:0 > 0 && v20441:0 > 1 && sum~cons_1~v28233:0 = 1 + v28233:0

----------------------------------------

(62) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(63)
Obligation:
Rules:
f_1499(v20441:0:0, sum~cons_1~v28233:0:0) -> f_1499(v20441:0:0, v28233:0:0) :|: v28233:0:0 > 0 && v20441:0:0 > 1 && sum~cons_1~v28233:0:0 = 1 + v28233:0:0

----------------------------------------

(64) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1499(x, x1)] = x1

The following rules are decreasing:
f_1499(v20441:0:0, sum~cons_1~v28233:0:0) -> f_1499(v20441:0:0, v28233:0:0) :|: v28233:0:0 > 0 && v20441:0:0 > 1 && sum~cons_1~v28233:0:0 = 1 + v28233:0:0
The following rules are bounded:
f_1499(v20441:0:0, sum~cons_1~v28233:0:0) -> f_1499(v20441:0:0, v28233:0:0) :|: v28233:0:0 > 0 && v20441:0:0 > 1 && sum~cons_1~v28233:0:0 = 1 + v28233:0:0

----------------------------------------

(65)
YES

----------------------------------------

(66)
Obligation:
SCC
----------------------------------------

(67) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_941(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) -> f_955(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) :|: 0 = 0
f_955(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) -> f_969(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) :|: 0 = 0
f_969(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) -> f_984(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) :|: TRUE
f_984(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) -> f_1000(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v7585, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) :|: TRUE
f_1000(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v7585, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) -> f_1018(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) :|: v7585 = 0
f_1018(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) -> f_1037(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) :|: 0 = 0
f_1037(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) -> f_1053(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) :|: TRUE
f_1053(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) -> f_1070(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) :|: 0 = 0
f_1070(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) -> f_1088(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) :|: 0 = 0
f_1088(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) -> f_1105(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v10058, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) :|: 1 + v10058 = v4600 && 0 <= v10058
f_1105(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v10058, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) -> f_1121(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v10058, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) :|: TRUE
f_1121(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v10058, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) -> f_1138(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v10058, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) :|: TRUE
f_1138(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v10058, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) -> f_1155(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v10058, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) :|: TRUE
f_1155(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v10058, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) -> f_886(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v10058, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 4) :|: TRUE
f_886(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4599, v4600, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 4) -> f_896(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4599, v4600, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 4) :|: 0 = 0
f_896(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4599, v4600, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 4) -> f_906(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4599, v4600, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 4) :|: 0 = 0
f_906(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4599, v4600, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 4) -> f_917(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4599, v4600, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 4) :|: TRUE
f_917(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4599, v4600, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 4) -> f_929(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 4) :|: 0 = 0
f_929(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 4) -> f_941(1, v4590, v4591, v4592, v4593, v4594, v4595, v4596, v4597, 0, v4600, v4599, v4601, v4603, v4604, v4605, v4606, v4607, v4608, v4602, 3, 2, 4) :|: 0 < v4600 && 2 <= v4599 && 2 <= v4596
Combined rules. Obtained 1 rulesP rules:
f_941(1, v4590:0, v4591:0, v4592:0, v4593:0, v4594:0, v4595:0, v4596:0, v4597:0, 0, 1 + v10058:0, v4599:0, v4601:0, v4603:0, v4604:0, v4605:0, v4606:0, v4607:0, v4608:0, v4602:0, 3, 2, 4) -> f_941(1, v4590:0, v4591:0, v4592:0, v4593:0, v4594:0, v4595:0, v4596:0, v4597:0, 0, v10058:0, 1 + v10058:0, v4601:0, v4603:0, v4604:0, v4605:0, v4606:0, v4607:0, v4608:0, v4602:0, 3, 2, 4) :|: v10058:0 > 0 && v4596:0 > 1
Filtered unneeded arguments:
   f_941(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_941(x8, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_941(v4596:0, sum~cons_1~v10058:0) -> f_941(v4596:0, v10058:0) :|: v10058:0 > 0 && v4596:0 > 1 && sum~cons_1~v10058:0 = 1 + v10058:0

----------------------------------------

(68)
Obligation:
Rules:
f_941(v4596:0, sum~cons_1~v10058:0) -> f_941(v4596:0, v10058:0) :|: v10058:0 > 0 && v4596:0 > 1 && sum~cons_1~v10058:0 = 1 + v10058:0

----------------------------------------

(69) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(70)
Obligation:
Rules:
f_941(v4596:0:0, sum~cons_1~v10058:0:0) -> f_941(v4596:0:0, v10058:0:0) :|: v10058:0:0 > 0 && v4596:0:0 > 1 && sum~cons_1~v10058:0:0 = 1 + v10058:0:0

----------------------------------------

(71) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_941(x, x1)] = x1

The following rules are decreasing:
f_941(v4596:0:0, sum~cons_1~v10058:0:0) -> f_941(v4596:0:0, v10058:0:0) :|: v10058:0:0 > 0 && v4596:0:0 > 1 && sum~cons_1~v10058:0:0 = 1 + v10058:0:0
The following rules are bounded:
f_941(v4596:0:0, sum~cons_1~v10058:0:0) -> f_941(v4596:0:0, v10058:0:0) :|: v10058:0:0 > 0 && v4596:0:0 > 1 && sum~cons_1~v10058:0:0 = 1 + v10058:0:0

----------------------------------------

(72)
YES

----------------------------------------

(73)
Obligation:
SCC
----------------------------------------

(74) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_586(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v958, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) -> f_598(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v958, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) :|: 0 = 0
f_598(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v958, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) -> f_612(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v958, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) :|: TRUE
f_612(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v958, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) -> f_626(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) :|: 0 = 0
f_626(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) -> f_638(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v2096, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) :|: v2096 = 2 * v959 && 4 <= v2096
f_638(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v2096, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) -> f_650(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v2096, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) :|: TRUE
f_650(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v2096, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) -> f_663(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v2096, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) :|: TRUE
f_663(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v2096, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) -> f_553(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v2096, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) :|: TRUE
f_553(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v958, v959, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) -> f_564(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v958, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) :|: 0 = 0
f_564(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v958, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) -> f_576(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v958, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) :|: 0 = 0
f_576(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v958, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) -> f_586(1, v949, v950, v951, v952, v953, v954, v955, v956, 0, v959, v958, v960, v962, v963, v964, v965, v966, v967, v961, 3, 2, 4) :|: v959 < v956 && 3 <= v956
Combined rules. Obtained 1 rulesP rules:
f_586(1, v949:0, v950:0, v951:0, v952:0, v953:0, v954:0, v955:0, v956:0, 0, v959:0, v958:0, v960:0, v962:0, v963:0, v964:0, v965:0, v966:0, v967:0, v961:0, 3, 2, 4) -> f_586(1, v949:0, v950:0, v951:0, v952:0, v953:0, v954:0, v955:0, v956:0, 0, 2 * v959:0, v959:0, v960:0, v962:0, v963:0, v964:0, v965:0, v966:0, v967:0, v961:0, 3, 2, 4) :|: 3 < 2 * v959:0 && v956:0 > 2 * v959:0 && v956:0 > 2
Filtered unneeded arguments:
   f_586(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_586(x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_586(v956:0, v959:0) -> f_586(v956:0, 2 * v959:0) :|: v956:0 > 2 * v959:0 && v956:0 > 2 && 3 < 2 * v959:0

----------------------------------------

(75)
Obligation:
Rules:
f_586(v956:0, v959:0) -> f_586(v956:0, 2 * v959:0) :|: v956:0 > 2 * v959:0 && v956:0 > 2 && 3 < 2 * v959:0

----------------------------------------

(76) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(77)
Obligation:
Rules:
f_586(v956:0:0, v959:0:0) -> f_586(v956:0:0, 2 * v959:0:0) :|: v956:0:0 > 2 * v959:0:0 && v956:0:0 > 2 && 3 < 2 * v959:0:0

----------------------------------------

(78) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_586 ] = 1/4*f_586_1 + -1/2*f_586_2

The following rules are decreasing:
f_586(v956:0:0, v959:0:0) -> f_586(v956:0:0, 2 * v959:0:0) :|: v956:0:0 > 2 * v959:0:0 && v956:0:0 > 2 && 3 < 2 * v959:0:0

The following rules are bounded:
f_586(v956:0:0, v959:0:0) -> f_586(v956:0:0, 2 * v959:0:0) :|: v956:0:0 > 2 * v959:0:0 && v956:0:0 > 2 && 3 < 2 * v959:0:0


----------------------------------------

(79)
YES

----------------------------------------

(80)
Obligation:
SCC
----------------------------------------

(81) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 71 rulesP rules:
f_2964(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85591, v85592, v85593, v85594, v85589, v85596, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_2973(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85591, v85592, v85593, v85594, v85589, v85596, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 0 = 0
f_2973(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85591, v85592, v85593, v85594, v85589, v85596, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_2981(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85591, v85592, v85593, v85594, v85589, v85596, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_2981(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85591, v85592, v85593, v85594, v85589, v85596, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_2989(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 0 = 0
f_2989(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3000(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 0 < v85596
f_3000(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3012(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 0 = 0
f_3012(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3023(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 0 = 0
f_3023(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3032(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_3032(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3041(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_3041(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3053(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: v90592 != 0
f_3041(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3054(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: v90592 = 0
f_3053(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3063(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 0 = 0
f_3063(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3072(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_3072(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3081(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_3081(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3090(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_3090(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3098(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 0 = 0
f_3098(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3106(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 0 = 0
f_3106(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3114(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 2 + v92581 = v85595 && 0 <= 1 + v92581
f_3114(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3119(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_3119(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3123(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v92860, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_3123(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v92860, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3127(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v92860, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_3127(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v92860, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3131(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v92860, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 0 = 0
f_3131(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v92860, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3135(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v92860, v85598, v92868, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 1 + v92868 = v85598
f_3135(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v92860, v85598, v92868, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3139(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v92860, v85598, v92868, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_3139(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v92860, v85598, v92868, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3143(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v92860, v85598, v92868, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_3143(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v92860, v85598, v92868, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_2940(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v90592, v85593, v85594, v92581, v92860, v85598, v92868, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_2940(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85589, 1, v85591, v85592, v85593, v85594, v85595, v85596, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_2950(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85589, 1, v85591, v85592, v85593, v85594, v85595, v85596, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_2950(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85589, 1, v85591, v85592, v85593, v85594, v85595, v85596, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_2957(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85591, v85592, v85593, v85594, v85589, v85596, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 0 = 0
f_2957(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85591, v85592, v85593, v85594, v85589, v85596, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_2964(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85591, v85592, v85593, v85594, v85589, v85596, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 0 < v85595 && 3 <= v85589
f_3054(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3064(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 0 = 0
f_3064(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3073(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_3073(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85593, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3082(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 0 = 0
f_3082(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3091(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 0 = 0
f_3091(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85594, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3099(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v91814, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: 2 + v91814 = v85596 && 0 <= 1 + v91814
f_3099(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v91814, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3107(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v91814, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_3107(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v91814, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_3115(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v91814, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_3115(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v91814, v85589, v85597, v85598, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) -> f_2949(2, v85578, v85579, v85580, v85581, v85582, v85583, v85584, v85585, 0, v85587, v85588, v85595, 1, v85596, v85589, v85596, v85597, v85598, v91814, v85599, v85600, v85601, v85602, v85603, v85604, v85605, 3, 4) :|: TRUE
f_2949(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86178, v86179, v86180, v86181, v86182, v86183, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_2956(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86178, v86179, v86180, v86181, v86182, v86183, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_2956(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86178, v86179, v86180, v86181, v86182, v86183, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_2963(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86178, v86179, v86180, v86181, v86182, v86183, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 0 = 0
f_2963(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86178, v86179, v86180, v86181, v86182, v86183, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_2972(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86178, v86179, v86180, v86181, v86182, v86183, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 0 = 0
f_2972(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86178, v86179, v86180, v86181, v86182, v86183, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_2980(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86178, v86179, v86180, v86181, v86182, v86183, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_2980(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86178, v86179, v86180, v86181, v86182, v86183, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_2988(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 0 = 0
f_2988(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_2998(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 0 < v86183 && 3 <= v86178 && 3 <= v86180
f_2998(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3010(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 0 = 0
f_3010(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3021(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 0 = 0
f_3021(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3030(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_3030(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3039(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_3039(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3050(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: v90591 != 0
f_3039(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3051(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: v90591 = 0
f_3050(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3061(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 0 = 0
f_3061(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3070(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_3070(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3079(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_3079(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3088(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_3088(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3096(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 0 = 0
f_3096(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3104(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 0 = 0
f_3104(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3112(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 2 + v92309 = v86176 && 0 <= 1 + v92309
f_3112(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3118(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_3118(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3122(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v92859, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_3122(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v92859, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3126(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v92859, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_3126(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v92859, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3130(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v92859, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 0 = 0
f_3130(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v92859, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3134(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v92859, v86182, v92867, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 1 + v92867 = v86182
f_3134(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v92859, v86182, v92867, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3138(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v92859, v86182, v92867, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_3138(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v92859, v86182, v92867, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3142(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v92859, v86182, v92867, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_3142(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v92309, v92859, v86182, v92867, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_2940(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v90591, v86178, v86183, v92309, v92859, v86182, v92867, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_3051(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3062(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 0 = 0
f_3062(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3071(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_3071(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86178, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3080(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 0 = 0
f_3080(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3089(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 0 = 0
f_3089(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3097(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v91813, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: 2 + v91813 = v86183 && 0 <= 1 + v91813
f_3097(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v91813, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3105(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v91813, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_3105(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v91813, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_3113(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v91813, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
f_3113(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v91813, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) -> f_2949(2, v86165, v86166, v86167, v86168, v86169, v86170, v86171, v86172, 0, v86174, v86175, v86176, 1, v86183, v86179, v86180, v86181, v86182, v91813, v86184, v86185, v86186, v86187, v86188, v86189, v86190, 3, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_2964(2, v85578:0, v85579:0, v85580:0, v85581:0, v85582:0, v85583:0, v85584:0, v85585:0, 0, v85587:0, v85588:0, v85595:0, 1, v85591:0, v85592:0, v85593:0, v85594:0, v85589:0, 2 + v91814:0, v85597:0, v85598:0, v85599:0, v85600:0, v85601:0, v85602:0, v85603:0, v85604:0, v85605:0, 3, 4) -> f_3039(2, v85578:0, v85579:0, v85580:0, v85581:0, v85582:0, v85583:0, v85584:0, v85585:0, 0, v85587:0, v85588:0, v85595:0, 1, v91814:0, v90591:0, v85589:0, 2 + v91814:0, v85597:0, v85598:0, 2 + v91814:0, v85599:0, v85600:0, v85601:0, v85602:0, v85603:0, v85604:0, v85605:0, 3, 4) :|: v91814:0 > 0
f_3039(2, v86165:0, v86166:0, v86167:0, v86168:0, v86169:0, v86170:0, v86171:0, v86172:0, 0, v86174:0, v86175:0, v86176:0, 1, 2 + v91813:0, 0, v86179:0, v86180:0, v86181:0, v86182:0, v86178:0, v86184:0, v86185:0, v86186:0, v86187:0, v86188:0, v86189:0, v86190:0, 3, 4) -> f_3039(2, v86165:0, v86166:0, v86167:0, v86168:0, v86169:0, v86170:0, v86171:0, v86172:0, 0, v86174:0, v86175:0, v86176:0, 1, v91813:0, v90591:1, v86179:0, v86180:0, v86181:0, v86182:0, 2 + v91813:0, v86184:0, v86185:0, v86186:0, v86187:0, v86188:0, v86189:0, v86190:0, 3, 4) :|: v91813:0 > 0 && v86180:0 > 2
f_2964(2, v85578:0, v85579:0, v85580:0, v85581:0, v85582:0, v85583:0, v85584:0, v85585:0, 0, v85587:0, v85588:0, 2 + v92581:0, 1, v85591:0, v85592:0, v85593:0, v85594:0, v85589:0, v85596:0, v85597:0, 1 + v92868:0, v85599:0, v85600:0, v85601:0, v85602:0, v85603:0, v85604:0, v85605:0, 3, 4) -> f_2964(2, v85578:0, v85579:0, v85580:0, v85581:0, v85582:0, v85583:0, v85584:0, v85585:0, 0, v85587:0, v85588:0, v92581:0, 1, v85596:0, v90592:0, v85593:0, v85594:0, 2 + v92581:0, v92860:0, 1 + v92868:0, v92868:0, v85599:0, v85600:0, v85601:0, v85602:0, v85603:0, v85604:0, v85605:0, 3, 4) :|: v92581:0 > 0 && v85596:0 > 0 && v90592:0 < 0
f_2964(2, v85578:0, v85579:0, v85580:0, v85581:0, v85582:0, v85583:0, v85584:0, v85585:0, 0, v85587:0, v85588:0, 2 + v92581:0, 1, v85591:0, v85592:0, v85593:0, v85594:0, v85589:0, v85596:0, v85597:0, 1 + v92868:0, v85599:0, v85600:0, v85601:0, v85602:0, v85603:0, v85604:0, v85605:0, 3, 4) -> f_2964(2, v85578:0, v85579:0, v85580:0, v85581:0, v85582:0, v85583:0, v85584:0, v85585:0, 0, v85587:0, v85588:0, v92581:0, 1, v85596:0, v90592:0, v85593:0, v85594:0, 2 + v92581:0, v92860:0, 1 + v92868:0, v92868:0, v85599:0, v85600:0, v85601:0, v85602:0, v85603:0, v85604:0, v85605:0, 3, 4) :|: v92581:0 > 0 && v85596:0 > 0 && v90592:0 > 0
f_3039(2, v86165:0, v86166:0, v86167:0, v86168:0, v86169:0, v86170:0, v86171:0, v86172:0, 0, v86174:0, v86175:0, 2 + v92309:0, 1, v86183:0, v90591:0, v86179:0, v86180:0, v86181:0, 1 + v92867:0, v86178:0, v86184:0, v86185:0, v86186:0, v86187:0, v86188:0, v86189:0, v86190:0, 3, 4) -> f_2964(2, v86165:0, v86166:0, v86167:0, v86168:0, v86169:0, v86170:0, v86171:0, v86172:0, 0, v86174:0, v86175:0, v92309:0, 1, v86183:0, v90591:0, v86178:0, v86183:0, 2 + v92309:0, v92859:0, 1 + v92867:0, v92867:0, v86184:0, v86185:0, v86186:0, v86187:0, v86188:0, v86189:0, v86190:0, 3, 4) :|: v92309:0 > 0 && v90591:0 < 0
f_3039(2, v86165:0, v86166:0, v86167:0, v86168:0, v86169:0, v86170:0, v86171:0, v86172:0, 0, v86174:0, v86175:0, 2 + v92309:0, 1, v86183:0, v90591:0, v86179:0, v86180:0, v86181:0, 1 + v92867:0, v86178:0, v86184:0, v86185:0, v86186:0, v86187:0, v86188:0, v86189:0, v86190:0, 3, 4) -> f_2964(2, v86165:0, v86166:0, v86167:0, v86168:0, v86169:0, v86170:0, v86171:0, v86172:0, 0, v86174:0, v86175:0, v92309:0, 1, v86183:0, v90591:0, v86178:0, v86183:0, 2 + v92309:0, v92859:0, 1 + v92867:0, v92867:0, v86184:0, v86185:0, v86186:0, v86187:0, v86188:0, v86189:0, v86190:0, 3, 4) :|: v92309:0 > 0 && v90591:0 > 0
Filtered unneeded arguments:
   f_2964(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_2964(x13, x20, x22)
   f_3039(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_3039(x13, x15, x16, x18, x20)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_2964(v85595:0, sum~cons_2~v91814:0, v85598:0) -> f_3039(v85595:0, v91814:0, v90591:0, 2 + v91814:0, v85598:0) :|: v91814:0 > 0 && sum~cons_2~v91814:0 = 2 + v91814:0
f_3039(v86176:0, sum~cons_2~v91813:0, cons_0, v86180:0, v86182:0) -> f_3039(v86176:0, v91813:0, v90591:1, v86180:0, v86182:0) :|: v91813:0 > 0 && v86180:0 > 2 && sum~cons_2~v91813:0 = 2 + v91813:0 && cons_0 = 0
f_2964(sum~cons_2~v92581:0, v85596:0, sum~cons_1~v92868:0) -> f_2964(v92581:0, v92860:0, v92868:0) :|: v92581:0 > 0 && v85596:0 > 0 && sum~cons_2~v92581:0 = 2 + v92581:0 && sum~cons_1~v92868:0 = 1 + v92868:0
f_3039(sum~cons_2~v92309:0, v86183:0, v90591:0, v86180:0, sum~cons_1~v92867:0) -> f_2964(v92309:0, v92859:0, v92867:0) :|: v92309:0 > 0 && v90591:0 < 0 && sum~cons_2~v92309:0 = 2 + v92309:0 && sum~cons_1~v92867:0 = 1 + v92867:0
f_3039(sum~cons_2~v92309:0, v86183:0, v90591:0, v86180:0, sum~cons_1~v92867:0) -> f_2964(v92309:0, v92859:0, v92867:0) :|: v92309:0 > 0 && v90591:0 > 0 && sum~cons_2~v92309:0 = 2 + v92309:0 && sum~cons_1~v92867:0 = 1 + v92867:0

----------------------------------------

(82)
Obligation:
Rules:
f_2964(v85595:0, sum~cons_2~v91814:0, v85598:0) -> f_3039(v85595:0, v91814:0, v90591:0, 2 + v91814:0, v85598:0) :|: v91814:0 > 0 && sum~cons_2~v91814:0 = 2 + v91814:0
f_3039(v86176:0, sum~cons_2~v91813:0, cons_0, v86180:0, v86182:0) -> f_3039(v86176:0, v91813:0, v90591:1, v86180:0, v86182:0) :|: v91813:0 > 0 && v86180:0 > 2 && sum~cons_2~v91813:0 = 2 + v91813:0 && cons_0 = 0
f_2964(sum~cons_2~v92581:0, v85596:0, sum~cons_1~v92868:0) -> f_2964(v92581:0, v92860:0, v92868:0) :|: v92581:0 > 0 && v85596:0 > 0 && sum~cons_2~v92581:0 = 2 + v92581:0 && sum~cons_1~v92868:0 = 1 + v92868:0
f_3039(x, x1, x2, x3, x4) -> f_2964(x5, x6, x7) :|: x5 > 0 && x2 < 0 && x = 2 + x5 && x4 = 1 + x7
f_3039(x8, x9, x10, x11, x12) -> f_2964(x13, x14, x15) :|: x13 > 0 && x10 > 0 && x8 = 2 + x13 && x12 = 1 + x15

----------------------------------------

(83) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(84)
Obligation:
Rules:
f_2964(v85595:0:0, sum~cons_2~v91814:0:0, v85598:0:0) -> f_3039(v85595:0:0, v91814:0:0, v90591:0:0, 2 + v91814:0:0, v85598:0:0) :|: v91814:0:0 > 0 && sum~cons_2~v91814:0:0 = 2 + v91814:0:0
f_3039(v86176:0:0, sum~cons_2~v91813:0:0, cons_0, v86180:0:0, v86182:0:0) -> f_3039(v86176:0:0, v91813:0:0, v90591:1:0, v86180:0:0, v86182:0:0) :|: v91813:0:0 > 0 && v86180:0:0 > 2 && sum~cons_2~v91813:0:0 = 2 + v91813:0:0 && cons_0 = 0
f_2964(sum~cons_2~v92581:0:0, v85596:0:0, sum~cons_1~v92868:0:0) -> f_2964(v92581:0:0, v92860:0:0, v92868:0:0) :|: v92581:0:0 > 0 && v85596:0:0 > 0 && sum~cons_2~v92581:0:0 = 2 + v92581:0:0 && sum~cons_1~v92868:0:0 = 1 + v92868:0:0
f_3039(sum~cons_2~x13:0, x9:0, x10:0, x11:0, sum~cons_1~x15:0) -> f_2964(x13:0, x14:0, x15:0) :|: x13:0 > 0 && x10:0 > 0 && sum~cons_2~x13:0 = 2 + x13:0 && sum~cons_1~x15:0 = 1 + x15:0
f_3039(sum~cons_2~x5:0, x1:0, x2:0, x3:0, sum~cons_1~x7:0) -> f_2964(x5:0, x6:0, x7:0) :|: x5:0 > 0 && x2:0 < 0 && sum~cons_2~x5:0 = 2 + x5:0 && sum~cons_1~x7:0 = 1 + x7:0

----------------------------------------

(85) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_2964(x, x1, x2)] = -1 + x
[f_3039(x3, x4, x5, x6, x7)] = -3 + x3

The following rules are decreasing:
f_2964(v85595:0:0, sum~cons_2~v91814:0:0, v85598:0:0) -> f_3039(v85595:0:0, v91814:0:0, v90591:0:0, 2 + v91814:0:0, v85598:0:0) :|: v91814:0:0 > 0 && sum~cons_2~v91814:0:0 = 2 + v91814:0:0
f_2964(sum~cons_2~v92581:0:0, v85596:0:0, sum~cons_1~v92868:0:0) -> f_2964(v92581:0:0, v92860:0:0, v92868:0:0) :|: v92581:0:0 > 0 && v85596:0:0 > 0 && sum~cons_2~v92581:0:0 = 2 + v92581:0:0 && sum~cons_1~v92868:0:0 = 1 + v92868:0:0
The following rules are bounded:
f_2964(sum~cons_2~v92581:0:0, v85596:0:0, sum~cons_1~v92868:0:0) -> f_2964(v92581:0:0, v92860:0:0, v92868:0:0) :|: v92581:0:0 > 0 && v85596:0:0 > 0 && sum~cons_2~v92581:0:0 = 2 + v92581:0:0 && sum~cons_1~v92868:0:0 = 1 + v92868:0:0
f_3039(sum~cons_2~x13:0, x9:0, x10:0, x11:0, sum~cons_1~x15:0) -> f_2964(x13:0, x14:0, x15:0) :|: x13:0 > 0 && x10:0 > 0 && sum~cons_2~x13:0 = 2 + x13:0 && sum~cons_1~x15:0 = 1 + x15:0
f_3039(sum~cons_2~x5:0, x1:0, x2:0, x3:0, sum~cons_1~x7:0) -> f_2964(x5:0, x6:0, x7:0) :|: x5:0 > 0 && x2:0 < 0 && sum~cons_2~x5:0 = 2 + x5:0 && sum~cons_1~x7:0 = 1 + x7:0

----------------------------------------

(86)
Complex Obligation (AND)

----------------------------------------

(87)
Obligation:
Rules:
f_3039(v86176:0:0, sum~cons_2~v91813:0:0, cons_0, v86180:0:0, v86182:0:0) -> f_3039(v86176:0:0, v91813:0:0, v90591:1:0, v86180:0:0, v86182:0:0) :|: v91813:0:0 > 0 && v86180:0:0 > 2 && sum~cons_2~v91813:0:0 = 2 + v91813:0:0 && cons_0 = 0
f_3039(sum~cons_2~x13:0, x9:0, x10:0, x11:0, sum~cons_1~x15:0) -> f_2964(x13:0, x14:0, x15:0) :|: x13:0 > 0 && x10:0 > 0 && sum~cons_2~x13:0 = 2 + x13:0 && sum~cons_1~x15:0 = 1 + x15:0
f_3039(sum~cons_2~x5:0, x1:0, x2:0, x3:0, sum~cons_1~x7:0) -> f_2964(x5:0, x6:0, x7:0) :|: x5:0 > 0 && x2:0 < 0 && sum~cons_2~x5:0 = 2 + x5:0 && sum~cons_1~x7:0 = 1 + x7:0

----------------------------------------

(88) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(89)
Obligation:
Rules:
f_3039(v86176:0:0, sum~cons_2~v91813:0:0, cons_0, v86180:0:0, v86182:0:0) -> f_3039(v86176:0:0, v91813:0:0, v90591:1:0, v86180:0:0, v86182:0:0) :|: v91813:0:0 > 0 && v86180:0:0 > 2 && sum~cons_2~v91813:0:0 = 2 + v91813:0:0 && cons_0 = 0

----------------------------------------

(90) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(91)
Obligation:
Rules:
f_3039(v86176:0:0:0, sum~cons_2~v91813:0:0:0, cons_0, v86180:0:0:0, v86182:0:0:0) -> f_3039(v86176:0:0:0, v91813:0:0:0, v90591:1:0:0, v86180:0:0:0, v86182:0:0:0) :|: v91813:0:0:0 > 0 && v86180:0:0:0 > 2 && sum~cons_2~v91813:0:0:0 = 2 + v91813:0:0:0 && cons_0 = 0

----------------------------------------

(92) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_3039(x1, x2, x3, x4, x5) -> f_3039(x2, x3, x4)

----------------------------------------

(93)
Obligation:
Rules:
f_3039(sum~cons_2~v91813:0:0:0, cons_0, v86180:0:0:0) -> f_3039(v91813:0:0:0, v90591:1:0:0, v86180:0:0:0) :|: v91813:0:0:0 > 0 && v86180:0:0:0 > 2 && sum~cons_2~v91813:0:0:0 = 2 + v91813:0:0:0 && cons_0 = 0

----------------------------------------

(94) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_3039(x, x1, x2)] = -3*x + x^2

The following rules are decreasing:
f_3039(sum~cons_2~v91813:0:0:0, cons_0, v86180:0:0:0) -> f_3039(v91813:0:0:0, v90591:1:0:0, v86180:0:0:0) :|: v91813:0:0:0 > 0 && v86180:0:0:0 > 2 && sum~cons_2~v91813:0:0:0 = 2 + v91813:0:0:0 && cons_0 = 0
The following rules are bounded:
f_3039(sum~cons_2~v91813:0:0:0, cons_0, v86180:0:0:0) -> f_3039(v91813:0:0:0, v90591:1:0:0, v86180:0:0:0) :|: v91813:0:0:0 > 0 && v86180:0:0:0 > 2 && sum~cons_2~v91813:0:0:0 = 2 + v91813:0:0:0 && cons_0 = 0

----------------------------------------

(95)
YES

----------------------------------------

(96)
Obligation:
Rules:
f_2964(v85595:0:0, sum~cons_2~v91814:0:0, v85598:0:0) -> f_3039(v85595:0:0, v91814:0:0, v90591:0:0, 2 + v91814:0:0, v85598:0:0) :|: v91814:0:0 > 0 && sum~cons_2~v91814:0:0 = 2 + v91814:0:0
f_3039(v86176:0:0, sum~cons_2~v91813:0:0, cons_0, v86180:0:0, v86182:0:0) -> f_3039(v86176:0:0, v91813:0:0, v90591:1:0, v86180:0:0, v86182:0:0) :|: v91813:0:0 > 0 && v86180:0:0 > 2 && sum~cons_2~v91813:0:0 = 2 + v91813:0:0 && cons_0 = 0

----------------------------------------

(97) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(98)
Obligation:
Rules:
f_3039(v86176:0:0, sum~cons_2~v91813:0:0, cons_0, v86180:0:0, v86182:0:0) -> f_3039(v86176:0:0, v91813:0:0, v90591:1:0, v86180:0:0, v86182:0:0) :|: v91813:0:0 > 0 && v86180:0:0 > 2 && sum~cons_2~v91813:0:0 = 2 + v91813:0:0 && cons_0 = 0

----------------------------------------

(99) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(100)
Obligation:
Rules:
f_3039(v86176:0:0:0, sum~cons_2~v91813:0:0:0, cons_0, v86180:0:0:0, v86182:0:0:0) -> f_3039(v86176:0:0:0, v91813:0:0:0, v90591:1:0:0, v86180:0:0:0, v86182:0:0:0) :|: v91813:0:0:0 > 0 && v86180:0:0:0 > 2 && sum~cons_2~v91813:0:0:0 = 2 + v91813:0:0:0 && cons_0 = 0

----------------------------------------

(101) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_3039(x1, x2, x3, x4, x5) -> f_3039(x2, x3, x4)

----------------------------------------

(102)
Obligation:
Rules:
f_3039(sum~cons_2~v91813:0:0:0, cons_0, v86180:0:0:0) -> f_3039(v91813:0:0:0, v90591:1:0:0, v86180:0:0:0) :|: v91813:0:0:0 > 0 && v86180:0:0:0 > 2 && sum~cons_2~v91813:0:0:0 = 2 + v91813:0:0:0 && cons_0 = 0

----------------------------------------

(103) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_3039(x, x1, x2)] = x

The following rules are decreasing:
f_3039(sum~cons_2~v91813:0:0:0, cons_0, v86180:0:0:0) -> f_3039(v91813:0:0:0, v90591:1:0:0, v86180:0:0:0) :|: v91813:0:0:0 > 0 && v86180:0:0:0 > 2 && sum~cons_2~v91813:0:0:0 = 2 + v91813:0:0:0 && cons_0 = 0
The following rules are bounded:
f_3039(sum~cons_2~v91813:0:0:0, cons_0, v86180:0:0:0) -> f_3039(v91813:0:0:0, v90591:1:0:0, v86180:0:0:0) :|: v91813:0:0:0 > 0 && v86180:0:0:0 > 2 && sum~cons_2~v91813:0:0:0 = 2 + v91813:0:0:0 && cons_0 = 0

----------------------------------------

(104)
YES

----------------------------------------

(105)
Obligation:
SCC
----------------------------------------

(106) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 71 rulesP rules:
f_2517(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62793, v62794, v62795, v62796, v62792, v62798, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2529(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62793, v62794, v62795, v62796, v62792, v62798, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 0 = 0
f_2529(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62793, v62794, v62795, v62796, v62792, v62798, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2541(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62793, v62794, v62795, v62796, v62792, v62798, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2541(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62793, v62794, v62795, v62796, v62792, v62798, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2553(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62794, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 0 = 0
f_2553(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62794, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2570(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62794, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 0 < v62798
f_2570(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62794, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2588(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62794, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 0 = 0
f_2588(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62794, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2603(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62794, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 0 = 0
f_2603(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62794, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2619(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62794, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2619(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62794, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2633(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2633(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2652(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: v72801 != 0
f_2633(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2653(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: v72801 = 0
f_2652(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2669(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 0 = 0
f_2669(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2685(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2685(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2701(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2701(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2717(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2717(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2735(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 0 = 0
f_2735(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2753(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 0 = 0
f_2753(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2771(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 2 + v77725 = v62797 && 0 <= 1 + v77725
f_2771(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2782(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2782(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2792(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v78523, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2792(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v78523, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2804(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v78523, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2804(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v78523, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2814(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v78523, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 0 = 0
f_2814(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v78523, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2824(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v78523, v62800, v79035, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 1 + v79035 = v62800 && 1 + v79035 <= 0
f_2824(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v78523, v62800, v79035, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2836(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v78523, v62800, v79035, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2836(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v78523, v62800, v79035, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2848(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v78523, v62800, v79035, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2848(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v78523, v62800, v79035, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2476(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v72801, v62795, v62796, v77725, v78523, v62800, v79035, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2476(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62792, v62793, v62794, v62795, v62796, v62797, v62798, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2492(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62792, v62793, v62794, v62795, v62796, v62797, v62798, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2492(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62792, v62793, v62794, v62795, v62796, v62797, v62798, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2504(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62793, v62794, v62795, v62796, v62792, v62798, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 0 = 0
f_2504(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62793, v62794, v62795, v62796, v62792, v62798, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2517(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62793, v62794, v62795, v62796, v62792, v62798, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 0 < v62797 && 3 <= v62792
f_2653(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2670(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 0 = 0
f_2670(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2686(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2686(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62795, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2702(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 0 = 0
f_2702(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2718(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 0 = 0
f_2718(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62796, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2736(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v75809, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: 2 + v75809 = v62798 && 0 <= 1 + v75809
f_2736(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v75809, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2754(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v75809, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2754(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v75809, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2772(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v75809, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2772(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v75809, v62792, v62799, v62800, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) -> f_2491(2, v62782, v62783, v62784, v62785, v62786, v62787, v62788, v62789, 0, 1, v62797, v62798, v62792, v62798, v62799, v62800, v75809, v62801, v62802, v62803, v62804, v62805, v62806, v62807, 3, 4) :|: TRUE
f_2491(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63704, v63705, v63706, v63707, v63708, v63709, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2503(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63704, v63705, v63706, v63707, v63708, v63709, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2503(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63704, v63705, v63706, v63707, v63708, v63709, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2516(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63704, v63705, v63706, v63707, v63708, v63709, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 0 = 0
f_2516(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63704, v63705, v63706, v63707, v63708, v63709, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2528(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63704, v63705, v63706, v63707, v63708, v63709, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 0 = 0
f_2528(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63704, v63705, v63706, v63707, v63708, v63709, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2540(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63704, v63705, v63706, v63707, v63708, v63709, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2540(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63704, v63705, v63706, v63707, v63708, v63709, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2552(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 0 = 0
f_2552(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2568(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 0 < v63709 && 3 <= v63704 && 3 <= v63706
f_2568(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2586(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 0 = 0
f_2586(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2601(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 0 = 0
f_2601(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2617(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2617(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2631(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2631(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2649(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: v72800 != 0
f_2631(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2650(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: v72800 = 0
f_2649(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2667(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 0 = 0
f_2667(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2683(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2683(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2699(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2699(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2715(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2715(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2733(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 0 = 0
f_2733(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2751(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 0 = 0
f_2751(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2769(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 2 + v77537 = v63703 && 0 <= 1 + v77537
f_2769(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2781(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2781(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2791(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v78522, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2791(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v78522, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2803(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v78522, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2803(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v78522, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2813(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v78522, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 0 = 0
f_2813(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v78522, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2823(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v78522, v63708, v79034, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 1 + v79034 = v63708 && 1 + v79034 <= 0
f_2823(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v78522, v63708, v79034, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2835(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v78522, v63708, v79034, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2835(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v78522, v63708, v79034, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2847(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v78522, v63708, v79034, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2847(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v77537, v78522, v63708, v79034, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2476(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v72800, v63704, v63709, v77537, v78522, v63708, v79034, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2650(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2668(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 0 = 0
f_2668(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2684(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2684(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63704, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2700(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 0 = 0
f_2700(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2716(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 0 = 0
f_2716(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2734(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v75808, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: 2 + v75808 = v63709 && 0 <= 1 + v75808
f_2734(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v75808, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2752(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v75808, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2752(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v75808, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2770(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v75808, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
f_2770(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v75808, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) -> f_2491(2, v63693, v63694, v63695, v63696, v63697, v63698, v63699, v63700, 0, 1, v63703, v63709, v63705, v63706, v63707, v63708, v75808, v63710, v63711, v63712, v63713, v63714, v63715, v63716, 3, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_2631(2, v63693:0, v63694:0, v63695:0, v63696:0, v63697:0, v63698:0, v63699:0, v63700:0, 0, 1, 2 + v77537:0, v63709:0, v72800:0, v63705:0, v63706:0, v63707:0, 1 + v79034:0, v63704:0, v63710:0, v63711:0, v63712:0, v63713:0, v63714:0, v63715:0, v63716:0, 3, 4) -> f_2517(2, v63693:0, v63694:0, v63695:0, v63696:0, v63697:0, v63698:0, v63699:0, v63700:0, 0, 1, v77537:0, v63709:0, v72800:0, v63704:0, v63709:0, 2 + v77537:0, v78522:0, 1 + v79034:0, v79034:0, v63710:0, v63711:0, v63712:0, v63713:0, v63714:0, v63715:0, v63716:0, 3, 4) :|: v77537:0 > 0 && v72800:0 < 0 && v79034:0 < 0
f_2631(2, v63693:0, v63694:0, v63695:0, v63696:0, v63697:0, v63698:0, v63699:0, v63700:0, 0, 1, 2 + v77537:0, v63709:0, v72800:0, v63705:0, v63706:0, v63707:0, 1 + v79034:0, v63704:0, v63710:0, v63711:0, v63712:0, v63713:0, v63714:0, v63715:0, v63716:0, 3, 4) -> f_2517(2, v63693:0, v63694:0, v63695:0, v63696:0, v63697:0, v63698:0, v63699:0, v63700:0, 0, 1, v77537:0, v63709:0, v72800:0, v63704:0, v63709:0, 2 + v77537:0, v78522:0, 1 + v79034:0, v79034:0, v63710:0, v63711:0, v63712:0, v63713:0, v63714:0, v63715:0, v63716:0, 3, 4) :|: v77537:0 > 0 && v72800:0 > 0 && v79034:0 < 0
f_2517(2, v62782:0, v62783:0, v62784:0, v62785:0, v62786:0, v62787:0, v62788:0, v62789:0, 0, 1, v62797:0, v62793:0, v62794:0, v62795:0, v62796:0, v62792:0, 2 + v75809:0, v62799:0, v62800:0, v62801:0, v62802:0, v62803:0, v62804:0, v62805:0, v62806:0, v62807:0, 3, 4) -> f_2631(2, v62782:0, v62783:0, v62784:0, v62785:0, v62786:0, v62787:0, v62788:0, v62789:0, 0, 1, v62797:0, v75809:0, v72800:0, v62792:0, 2 + v75809:0, v62799:0, v62800:0, 2 + v75809:0, v62801:0, v62802:0, v62803:0, v62804:0, v62805:0, v62806:0, v62807:0, 3, 4) :|: v75809:0 > 0
f_2517(2, v62782:0, v62783:0, v62784:0, v62785:0, v62786:0, v62787:0, v62788:0, v62789:0, 0, 1, 2 + v77725:0, v62793:0, v62794:0, v62795:0, v62796:0, v62792:0, v62798:0, v62799:0, 1 + v79035:0, v62801:0, v62802:0, v62803:0, v62804:0, v62805:0, v62806:0, v62807:0, 3, 4) -> f_2517(2, v62782:0, v62783:0, v62784:0, v62785:0, v62786:0, v62787:0, v62788:0, v62789:0, 0, 1, v77725:0, v62798:0, v72801:0, v62795:0, v62796:0, 2 + v77725:0, v78523:0, 1 + v79035:0, v79035:0, v62801:0, v62802:0, v62803:0, v62804:0, v62805:0, v62806:0, v62807:0, 3, 4) :|: v77725:0 > 0 && v62798:0 > 0 && v72801:0 < 0 && v79035:0 < 0
f_2517(2, v62782:0, v62783:0, v62784:0, v62785:0, v62786:0, v62787:0, v62788:0, v62789:0, 0, 1, 2 + v77725:0, v62793:0, v62794:0, v62795:0, v62796:0, v62792:0, v62798:0, v62799:0, 1 + v79035:0, v62801:0, v62802:0, v62803:0, v62804:0, v62805:0, v62806:0, v62807:0, 3, 4) -> f_2517(2, v62782:0, v62783:0, v62784:0, v62785:0, v62786:0, v62787:0, v62788:0, v62789:0, 0, 1, v77725:0, v62798:0, v72801:0, v62795:0, v62796:0, 2 + v77725:0, v78523:0, 1 + v79035:0, v79035:0, v62801:0, v62802:0, v62803:0, v62804:0, v62805:0, v62806:0, v62807:0, 3, 4) :|: v77725:0 > 0 && v62798:0 > 0 && v72801:0 > 0 && v79035:0 < 0
f_2631(2, v63693:0, v63694:0, v63695:0, v63696:0, v63697:0, v63698:0, v63699:0, v63700:0, 0, 1, v63703:0, 2 + v75808:0, 0, v63705:0, v63706:0, v63707:0, v63708:0, v63704:0, v63710:0, v63711:0, v63712:0, v63713:0, v63714:0, v63715:0, v63716:0, 3, 4) -> f_2631(2, v63693:0, v63694:0, v63695:0, v63696:0, v63697:0, v63698:0, v63699:0, v63700:0, 0, 1, v63703:0, v75808:0, v72800:1, v63705:0, v63706:0, v63707:0, v63708:0, 2 + v75808:0, v63710:0, v63711:0, v63712:0, v63713:0, v63714:0, v63715:0, v63716:0, 3, 4) :|: v75808:0 > 0 && v63706:0 > 2
Filtered unneeded arguments:
   f_2631(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_2631(x12, x13, x14, x16, x18)
   f_2517(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_2517(x12, x18, x20)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_2631(sum~cons_2~v77537:0, v63709:0, v72800:0, v63706:0, sum~cons_1~v79034:0) -> f_2517(v77537:0, v78522:0, v79034:0) :|: v72800:0 < 0 && v79034:0 < 0 && v77537:0 > 0 && sum~cons_2~v77537:0 = 2 + v77537:0 && sum~cons_1~v79034:0 = 1 + v79034:0
f_2631(sum~cons_2~v77537:0, v63709:0, v72800:0, v63706:0, sum~cons_1~v79034:0) -> f_2517(v77537:0, v78522:0, v79034:0) :|: v72800:0 > 0 && v79034:0 < 0 && v77537:0 > 0 && sum~cons_2~v77537:0 = 2 + v77537:0 && sum~cons_1~v79034:0 = 1 + v79034:0
f_2517(v62797:0, sum~cons_2~v75809:0, v62800:0) -> f_2631(v62797:0, v75809:0, v72800:0, 2 + v75809:0, v62800:0) :|: v75809:0 > 0 && sum~cons_2~v75809:0 = 2 + v75809:0
f_2517(sum~cons_2~v77725:0, v62798:0, sum~cons_1~v79035:0) -> f_2517(v77725:0, v78523:0, v79035:0) :|: v62798:0 > 0 && v79035:0 < 0 && v77725:0 > 0 && sum~cons_2~v77725:0 = 2 + v77725:0 && sum~cons_1~v79035:0 = 1 + v79035:0
f_2631(v63703:0, sum~cons_2~v75808:0, cons_0, v63706:0, v63708:0) -> f_2631(v63703:0, v75808:0, v72800:1, v63706:0, v63708:0) :|: v75808:0 > 0 && v63706:0 > 2 && sum~cons_2~v75808:0 = 2 + v75808:0 && cons_0 = 0

----------------------------------------

(107)
Obligation:
Rules:
f_2631(sum~cons_2~v77537:0, v63709:0, v72800:0, v63706:0, sum~cons_1~v79034:0) -> f_2517(v77537:0, v78522:0, v79034:0) :|: v72800:0 < 0 && v79034:0 < 0 && v77537:0 > 0 && sum~cons_2~v77537:0 = 2 + v77537:0 && sum~cons_1~v79034:0 = 1 + v79034:0
f_2631(x, x1, x2, x3, x4) -> f_2517(x5, x6, x7) :|: x2 > 0 && x7 < 0 && x5 > 0 && x = 2 + x5 && x4 = 1 + x7
f_2517(x8, x9, x10) -> f_2631(x8, x11, x12, 2 + x11, x10) :|: x11 > 0 && x9 = 2 + x11
f_2517(sum~cons_2~v77725:0, v62798:0, sum~cons_1~v79035:0) -> f_2517(v77725:0, v78523:0, v79035:0) :|: v62798:0 > 0 && v79035:0 < 0 && v77725:0 > 0 && sum~cons_2~v77725:0 = 2 + v77725:0 && sum~cons_1~v79035:0 = 1 + v79035:0
f_2631(x13, x14, x15, x16, x17) -> f_2631(x13, x18, x19, x16, x17) :|: x18 > 0 && x16 > 2 && x14 = 2 + x18 && x15 = 0

----------------------------------------

(108) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(109)
Obligation:
Rules:
f_2631(sum~cons_2~x5:0, x1:0, x2:0, x3:0, sum~cons_1~x7:0) -> f_2517(x5:0, x6:0, x7:0) :|: x2:0 > 0 && x7:0 < 0 && x5:0 > 0 && sum~cons_2~x5:0 = 2 + x5:0 && sum~cons_1~x7:0 = 1 + x7:0
f_2631(sum~cons_2~v77537:0:0, v63709:0:0, v72800:0:0, v63706:0:0, sum~cons_1~v79034:0:0) -> f_2517(v77537:0:0, v78522:0:0, v79034:0:0) :|: v72800:0:0 < 0 && v79034:0:0 < 0 && v77537:0:0 > 0 && sum~cons_2~v77537:0:0 = 2 + v77537:0:0 && sum~cons_1~v79034:0:0 = 1 + v79034:0:0
f_2631(x13:0, sum~cons_2~x18:0, cons_0, x16:0, x17:0) -> f_2631(x13:0, x18:0, x19:0, x16:0, x17:0) :|: x18:0 > 0 && x16:0 > 2 && sum~cons_2~x18:0 = 2 + x18:0 && cons_0 = 0
f_2517(x8:0, sum~cons_2~x11:0, x10:0) -> f_2631(x8:0, x11:0, x12:0, 2 + x11:0, x10:0) :|: x11:0 > 0 && sum~cons_2~x11:0 = 2 + x11:0
f_2517(sum~cons_2~v77725:0:0, v62798:0:0, sum~cons_1~v79035:0:0) -> f_2517(v77725:0:0, v78523:0:0, v79035:0:0) :|: v62798:0:0 > 0 && v79035:0:0 < 0 && v77725:0:0 > 0 && sum~cons_2~v77725:0:0 = 2 + v77725:0:0 && sum~cons_1~v79035:0:0 = 1 + v79035:0:0

----------------------------------------

(110) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_2631(x, x1, x2, x3, x4)] = -2 + x - x4
[f_2517(x5, x6, x7)] = -1 + x5 - x7

The following rules are decreasing:
f_2517(x8:0, sum~cons_2~x11:0, x10:0) -> f_2631(x8:0, x11:0, x12:0, 2 + x11:0, x10:0) :|: x11:0 > 0 && sum~cons_2~x11:0 = 2 + x11:0
f_2517(sum~cons_2~v77725:0:0, v62798:0:0, sum~cons_1~v79035:0:0) -> f_2517(v77725:0:0, v78523:0:0, v79035:0:0) :|: v62798:0:0 > 0 && v79035:0:0 < 0 && v77725:0:0 > 0 && sum~cons_2~v77725:0:0 = 2 + v77725:0:0 && sum~cons_1~v79035:0:0 = 1 + v79035:0:0
The following rules are bounded:
f_2631(sum~cons_2~x5:0, x1:0, x2:0, x3:0, sum~cons_1~x7:0) -> f_2517(x5:0, x6:0, x7:0) :|: x2:0 > 0 && x7:0 < 0 && x5:0 > 0 && sum~cons_2~x5:0 = 2 + x5:0 && sum~cons_1~x7:0 = 1 + x7:0
f_2631(sum~cons_2~v77537:0:0, v63709:0:0, v72800:0:0, v63706:0:0, sum~cons_1~v79034:0:0) -> f_2517(v77537:0:0, v78522:0:0, v79034:0:0) :|: v72800:0:0 < 0 && v79034:0:0 < 0 && v77537:0:0 > 0 && sum~cons_2~v77537:0:0 = 2 + v77537:0:0 && sum~cons_1~v79034:0:0 = 1 + v79034:0:0
f_2517(sum~cons_2~v77725:0:0, v62798:0:0, sum~cons_1~v79035:0:0) -> f_2517(v77725:0:0, v78523:0:0, v79035:0:0) :|: v62798:0:0 > 0 && v79035:0:0 < 0 && v77725:0:0 > 0 && sum~cons_2~v77725:0:0 = 2 + v77725:0:0 && sum~cons_1~v79035:0:0 = 1 + v79035:0:0

----------------------------------------

(111)
Complex Obligation (AND)

----------------------------------------

(112)
Obligation:
Rules:
f_2631(sum~cons_2~x5:0, x1:0, x2:0, x3:0, sum~cons_1~x7:0) -> f_2517(x5:0, x6:0, x7:0) :|: x2:0 > 0 && x7:0 < 0 && x5:0 > 0 && sum~cons_2~x5:0 = 2 + x5:0 && sum~cons_1~x7:0 = 1 + x7:0
f_2631(sum~cons_2~v77537:0:0, v63709:0:0, v72800:0:0, v63706:0:0, sum~cons_1~v79034:0:0) -> f_2517(v77537:0:0, v78522:0:0, v79034:0:0) :|: v72800:0:0 < 0 && v79034:0:0 < 0 && v77537:0:0 > 0 && sum~cons_2~v77537:0:0 = 2 + v77537:0:0 && sum~cons_1~v79034:0:0 = 1 + v79034:0:0
f_2631(x13:0, sum~cons_2~x18:0, cons_0, x16:0, x17:0) -> f_2631(x13:0, x18:0, x19:0, x16:0, x17:0) :|: x18:0 > 0 && x16:0 > 2 && sum~cons_2~x18:0 = 2 + x18:0 && cons_0 = 0

----------------------------------------

(113) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(114)
Obligation:
Rules:
f_2631(x13:0, sum~cons_2~x18:0, cons_0, x16:0, x17:0) -> f_2631(x13:0, x18:0, x19:0, x16:0, x17:0) :|: x18:0 > 0 && x16:0 > 2 && sum~cons_2~x18:0 = 2 + x18:0 && cons_0 = 0

----------------------------------------

(115) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(116)
Obligation:
Rules:
f_2631(x13:0:0, sum~cons_2~x18:0:0, cons_0, x16:0:0, x17:0:0) -> f_2631(x13:0:0, x18:0:0, x19:0:0, x16:0:0, x17:0:0) :|: x18:0:0 > 0 && x16:0:0 > 2 && sum~cons_2~x18:0:0 = 2 + x18:0:0 && cons_0 = 0

----------------------------------------

(117) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_2631(x1, x2, x3, x4, x5) -> f_2631(x2, x3, x4)

----------------------------------------

(118)
Obligation:
Rules:
f_2631(sum~cons_2~x18:0:0, cons_0, x16:0:0) -> f_2631(x18:0:0, x19:0:0, x16:0:0) :|: x18:0:0 > 0 && x16:0:0 > 2 && sum~cons_2~x18:0:0 = 2 + x18:0:0 && cons_0 = 0

----------------------------------------

(119) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_2631 ] = 1/2*f_2631_1

The following rules are decreasing:
f_2631(sum~cons_2~x18:0:0, cons_0, x16:0:0) -> f_2631(x18:0:0, x19:0:0, x16:0:0) :|: x18:0:0 > 0 && x16:0:0 > 2 && sum~cons_2~x18:0:0 = 2 + x18:0:0 && cons_0 = 0

The following rules are bounded:
f_2631(sum~cons_2~x18:0:0, cons_0, x16:0:0) -> f_2631(x18:0:0, x19:0:0, x16:0:0) :|: x18:0:0 > 0 && x16:0:0 > 2 && sum~cons_2~x18:0:0 = 2 + x18:0:0 && cons_0 = 0


----------------------------------------

(120)
YES

----------------------------------------

(121)
Obligation:
Rules:
f_2631(x13:0, sum~cons_2~x18:0, cons_0, x16:0, x17:0) -> f_2631(x13:0, x18:0, x19:0, x16:0, x17:0) :|: x18:0 > 0 && x16:0 > 2 && sum~cons_2~x18:0 = 2 + x18:0 && cons_0 = 0
f_2517(x8:0, sum~cons_2~x11:0, x10:0) -> f_2631(x8:0, x11:0, x12:0, 2 + x11:0, x10:0) :|: x11:0 > 0 && sum~cons_2~x11:0 = 2 + x11:0

----------------------------------------

(122) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(123)
Obligation:
Rules:
f_2631(x13:0, sum~cons_2~x18:0, cons_0, x16:0, x17:0) -> f_2631(x13:0, x18:0, x19:0, x16:0, x17:0) :|: x18:0 > 0 && x16:0 > 2 && sum~cons_2~x18:0 = 2 + x18:0 && cons_0 = 0

----------------------------------------

(124) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(125)
Obligation:
Rules:
f_2631(x13:0:0, sum~cons_2~x18:0:0, cons_0, x16:0:0, x17:0:0) -> f_2631(x13:0:0, x18:0:0, x19:0:0, x16:0:0, x17:0:0) :|: x18:0:0 > 0 && x16:0:0 > 2 && sum~cons_2~x18:0:0 = 2 + x18:0:0 && cons_0 = 0

----------------------------------------

(126) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_2631(x1, x2, x3, x4, x5) -> f_2631(x2, x3, x4)

----------------------------------------

(127)
Obligation:
Rules:
f_2631(sum~cons_2~x18:0:0, cons_0, x16:0:0) -> f_2631(x18:0:0, x19:0:0, x16:0:0) :|: x18:0:0 > 0 && x16:0:0 > 2 && sum~cons_2~x18:0:0 = 2 + x18:0:0 && cons_0 = 0

----------------------------------------

(128) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_2631(x, x1, x2)] = -3*x + x^2

The following rules are decreasing:
f_2631(sum~cons_2~x18:0:0, cons_0, x16:0:0) -> f_2631(x18:0:0, x19:0:0, x16:0:0) :|: x18:0:0 > 0 && x16:0:0 > 2 && sum~cons_2~x18:0:0 = 2 + x18:0:0 && cons_0 = 0
The following rules are bounded:
f_2631(sum~cons_2~x18:0:0, cons_0, x16:0:0) -> f_2631(x18:0:0, x19:0:0, x16:0:0) :|: x18:0:0 > 0 && x16:0:0 > 2 && sum~cons_2~x18:0:0 = 2 + x18:0:0 && cons_0 = 0

----------------------------------------

(129)
YES

----------------------------------------

(130)
Obligation:
SCC
----------------------------------------

(131) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 27 rulesP rules:
f_2233(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50646, v50647, v50644, v50649, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2246(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50646, v50647, v50644, v50649, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: 0 = 0
f_2246(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50646, v50647, v50644, v50649, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2260(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50646, v50647, v50644, v50649, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: TRUE
f_2260(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50646, v50647, v50644, v50649, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2274(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v50647, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: 0 = 0
f_2274(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v50647, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2290(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v50647, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: 0 < v50649
f_2290(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v50647, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2308(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v50647, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: 0 = 0
f_2308(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v50647, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2326(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v50647, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: 0 = 0
f_2326(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v50647, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2344(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v50647, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: TRUE
f_2344(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v50647, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2361(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: TRUE
f_2361(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2378(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: v60041 != 0
f_2378(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2394(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: 0 = 0
f_2394(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2410(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: TRUE
f_2410(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2426(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: TRUE
f_2426(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2440(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: TRUE
f_2440(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50644, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2454(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: 0 = 0
f_2454(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2469(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: 0 = 0
f_2469(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2485(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: 2 + v63346 = v50648 && 0 <= 1 + v63346
f_2485(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2499(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: TRUE
f_2499(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2512(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v64714, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: TRUE
f_2512(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v64714, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2525(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v64714, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: TRUE
f_2525(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v64714, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2537(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v64714, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: 0 = 0
f_2537(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v64714, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2549(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v64714, v50651, v66128, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: 1 + v66128 = v50651
f_2549(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v64714, v50651, v66128, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2564(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v64714, v50651, v66128, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: TRUE
f_2564(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v64714, v50651, v66128, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2582(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v64714, v50651, v66128, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: TRUE
f_2582(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v64714, v50651, v66128, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2184(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50649, v60041, v63346, v64714, v50651, v66128, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: TRUE
f_2184(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50644, 1, v50646, v50647, v50648, v50649, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2202(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50644, 1, v50646, v50647, v50648, v50649, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: TRUE
f_2202(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50644, 1, v50646, v50647, v50648, v50649, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2219(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50646, v50647, v50644, v50649, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: 0 = 0
f_2219(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50646, v50647, v50644, v50649, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) -> f_2233(2, v50633, v50634, v50635, v50636, v50637, v50638, v50639, v50640, 0, v50642, v50643, v50648, 1, v50646, v50647, v50644, v50649, v50650, v50651, v50652, v50653, v50654, v50655, v50656, v50657, v50658, 3, 4) :|: 0 < v50648 && 3 <= v50644
Combined rules. Obtained 2 rulesP rules:
f_2233(2, v50633:0, v50634:0, v50635:0, v50636:0, v50637:0, v50638:0, v50639:0, v50640:0, 0, v50642:0, v50643:0, 2 + v63346:0, 1, v50646:0, v50647:0, v50644:0, v50649:0, v50650:0, 1 + v66128:0, v50652:0, v50653:0, v50654:0, v50655:0, v50656:0, v50657:0, v50658:0, 3, 4) -> f_2233(2, v50633:0, v50634:0, v50635:0, v50636:0, v50637:0, v50638:0, v50639:0, v50640:0, 0, v50642:0, v50643:0, v63346:0, 1, v50649:0, v60041:0, 2 + v63346:0, v64714:0, 1 + v66128:0, v66128:0, v50652:0, v50653:0, v50654:0, v50655:0, v50656:0, v50657:0, v50658:0, 3, 4) :|: v63346:0 > 0 && v50649:0 > 0 && v60041:0 < 0
f_2233(2, v50633:0, v50634:0, v50635:0, v50636:0, v50637:0, v50638:0, v50639:0, v50640:0, 0, v50642:0, v50643:0, 2 + v63346:0, 1, v50646:0, v50647:0, v50644:0, v50649:0, v50650:0, 1 + v66128:0, v50652:0, v50653:0, v50654:0, v50655:0, v50656:0, v50657:0, v50658:0, 3, 4) -> f_2233(2, v50633:0, v50634:0, v50635:0, v50636:0, v50637:0, v50638:0, v50639:0, v50640:0, 0, v50642:0, v50643:0, v63346:0, 1, v50649:0, v60041:0, 2 + v63346:0, v64714:0, 1 + v66128:0, v66128:0, v50652:0, v50653:0, v50654:0, v50655:0, v50656:0, v50657:0, v50658:0, 3, 4) :|: v63346:0 > 0 && v50649:0 > 0 && v60041:0 > 0
Filtered unneeded arguments:
   f_2233(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_2233(x13, x18, x20)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_2233(sum~cons_2~v63346:0, v50649:0, sum~cons_1~v66128:0) -> f_2233(v63346:0, v64714:0, v66128:0) :|: v63346:0 > 0 && v50649:0 > 0 && sum~cons_2~v63346:0 = 2 + v63346:0 && sum~cons_1~v66128:0 = 1 + v66128:0

----------------------------------------

(132)
Obligation:
Rules:
f_2233(sum~cons_2~v63346:0, v50649:0, sum~cons_1~v66128:0) -> f_2233(v63346:0, v64714:0, v66128:0) :|: v63346:0 > 0 && v50649:0 > 0 && sum~cons_2~v63346:0 = 2 + v63346:0 && sum~cons_1~v66128:0 = 1 + v66128:0

----------------------------------------

(133) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(134)
Obligation:
Rules:
f_2233(sum~cons_2~v63346:0:0, v50649:0:0, sum~cons_1~v66128:0:0) -> f_2233(v63346:0:0, v64714:0:0, v66128:0:0) :|: v63346:0:0 > 0 && v50649:0:0 > 0 && sum~cons_2~v63346:0:0 = 2 + v63346:0:0 && sum~cons_1~v66128:0:0 = 1 + v66128:0:0

----------------------------------------

(135) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_2233 ] = 1/2*f_2233_1

The following rules are decreasing:
f_2233(sum~cons_2~v63346:0:0, v50649:0:0, sum~cons_1~v66128:0:0) -> f_2233(v63346:0:0, v64714:0:0, v66128:0:0) :|: v63346:0:0 > 0 && v50649:0:0 > 0 && sum~cons_2~v63346:0:0 = 2 + v63346:0:0 && sum~cons_1~v66128:0:0 = 1 + v66128:0:0

The following rules are bounded:
f_2233(sum~cons_2~v63346:0:0, v50649:0:0, sum~cons_1~v66128:0:0) -> f_2233(v63346:0:0, v64714:0:0, v66128:0:0) :|: v63346:0:0 > 0 && v50649:0:0 > 0 && sum~cons_2~v63346:0:0 = 2 + v63346:0:0 && sum~cons_1~v66128:0:0 = 1 + v66128:0:0


----------------------------------------

(136)
YES

----------------------------------------

(137)
Obligation:
SCC
----------------------------------------

(138) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 27 rulesP rules:
f_1670(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25465, v25466, v25464, v25468, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1684(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25465, v25466, v25464, v25468, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: 0 = 0
f_1684(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25465, v25466, v25464, v25468, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1699(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25465, v25466, v25464, v25468, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: TRUE
f_1699(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25465, v25466, v25464, v25468, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1713(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v25466, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: 0 = 0
f_1713(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v25466, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1728(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v25466, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: 0 < v25468
f_1728(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v25466, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1744(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v25466, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: 0 = 0
f_1744(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v25466, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1762(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v25466, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: 0 = 0
f_1762(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v25466, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1778(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v25466, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: TRUE
f_1778(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v25466, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1791(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: TRUE
f_1791(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1804(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: v31881 != 0
f_1804(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1819(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: 0 = 0
f_1819(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1834(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: TRUE
f_1834(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1851(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: TRUE
f_1851(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1867(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: TRUE
f_1867(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25464, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1885(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: 0 = 0
f_1885(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1903(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: 0 = 0
f_1903(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1921(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: 2 + v36577 = v25467 && 0 <= 1 + v36577
f_1921(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1939(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: TRUE
f_1939(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1955(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v39974, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: TRUE
f_1955(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v39974, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1972(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v39974, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: TRUE
f_1972(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v39974, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1986(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v39974, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: 0 = 0
f_1986(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v39974, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_2002(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v39974, v25470, v41464, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: 1 + v41464 = v25470 && 1 + v41464 <= 0
f_2002(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v39974, v25470, v41464, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_2017(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v39974, v25470, v41464, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: TRUE
f_2017(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v39974, v25470, v41464, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_2033(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v39974, v25470, v41464, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: TRUE
f_2033(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v39974, v25470, v41464, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1621(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25468, v31881, v36577, v39974, v25470, v41464, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: TRUE
f_1621(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25464, v25465, v25466, v25467, v25468, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1637(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25464, v25465, v25466, v25467, v25468, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: TRUE
f_1637(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25464, v25465, v25466, v25467, v25468, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1654(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25465, v25466, v25464, v25468, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: 0 = 0
f_1654(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25465, v25466, v25464, v25468, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) -> f_1670(2, v25454, v25455, v25456, v25457, v25458, v25459, v25460, v25461, 0, 1, v25467, v25465, v25466, v25464, v25468, v25469, v25470, v25471, v25472, v25473, v25474, v25475, v25476, v25477, 3, 4) :|: 0 < v25467 && 3 <= v25464
Combined rules. Obtained 2 rulesP rules:
f_1670(2, v25454:0, v25455:0, v25456:0, v25457:0, v25458:0, v25459:0, v25460:0, v25461:0, 0, 1, 2 + v36577:0, v25465:0, v25466:0, v25464:0, v25468:0, v25469:0, 1 + v41464:0, v25471:0, v25472:0, v25473:0, v25474:0, v25475:0, v25476:0, v25477:0, 3, 4) -> f_1670(2, v25454:0, v25455:0, v25456:0, v25457:0, v25458:0, v25459:0, v25460:0, v25461:0, 0, 1, v36577:0, v25468:0, v31881:0, 2 + v36577:0, v39974:0, 1 + v41464:0, v41464:0, v25471:0, v25472:0, v25473:0, v25474:0, v25475:0, v25476:0, v25477:0, 3, 4) :|: v36577:0 > 0 && v25468:0 > 0 && v31881:0 < 0 && v41464:0 < 0
f_1670(2, v25454:0, v25455:0, v25456:0, v25457:0, v25458:0, v25459:0, v25460:0, v25461:0, 0, 1, 2 + v36577:0, v25465:0, v25466:0, v25464:0, v25468:0, v25469:0, 1 + v41464:0, v25471:0, v25472:0, v25473:0, v25474:0, v25475:0, v25476:0, v25477:0, 3, 4) -> f_1670(2, v25454:0, v25455:0, v25456:0, v25457:0, v25458:0, v25459:0, v25460:0, v25461:0, 0, 1, v36577:0, v25468:0, v31881:0, 2 + v36577:0, v39974:0, 1 + v41464:0, v41464:0, v25471:0, v25472:0, v25473:0, v25474:0, v25475:0, v25476:0, v25477:0, 3, 4) :|: v36577:0 > 0 && v25468:0 > 0 && v31881:0 > 0 && v41464:0 < 0
Filtered unneeded arguments:
   f_1670(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_1670(x12, x16, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1670(sum~cons_2~v36577:0, v25468:0, sum~cons_1~v41464:0) -> f_1670(v36577:0, v39974:0, v41464:0) :|: v25468:0 > 0 && v41464:0 < 0 && v36577:0 > 0 && sum~cons_2~v36577:0 = 2 + v36577:0 && sum~cons_1~v41464:0 = 1 + v41464:0

----------------------------------------

(139)
Obligation:
Rules:
f_1670(sum~cons_2~v36577:0, v25468:0, sum~cons_1~v41464:0) -> f_1670(v36577:0, v39974:0, v41464:0) :|: v25468:0 > 0 && v41464:0 < 0 && v36577:0 > 0 && sum~cons_2~v36577:0 = 2 + v36577:0 && sum~cons_1~v41464:0 = 1 + v41464:0

----------------------------------------

(140) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(141)
Obligation:
Rules:
f_1670(sum~cons_2~v36577:0:0, v25468:0:0, sum~cons_1~v41464:0:0) -> f_1670(v36577:0:0, v39974:0:0, v41464:0:0) :|: v25468:0:0 > 0 && v41464:0:0 < 0 && v36577:0:0 > 0 && sum~cons_2~v36577:0:0 = 2 + v36577:0:0 && sum~cons_1~v41464:0:0 = 1 + v41464:0:0

----------------------------------------

(142) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1670 ] = 1/2*f_1670_1

The following rules are decreasing:
f_1670(sum~cons_2~v36577:0:0, v25468:0:0, sum~cons_1~v41464:0:0) -> f_1670(v36577:0:0, v39974:0:0, v41464:0:0) :|: v25468:0:0 > 0 && v41464:0:0 < 0 && v36577:0:0 > 0 && sum~cons_2~v36577:0:0 = 2 + v36577:0:0 && sum~cons_1~v41464:0:0 = 1 + v41464:0:0

The following rules are bounded:
f_1670(sum~cons_2~v36577:0:0, v25468:0:0, sum~cons_1~v41464:0:0) -> f_1670(v36577:0:0, v39974:0:0, v41464:0:0) :|: v25468:0:0 > 0 && v41464:0:0 < 0 && v36577:0:0 > 0 && sum~cons_2~v36577:0:0 = 2 + v36577:0:0 && sum~cons_1~v41464:0:0 = 1 + v41464:0:0


----------------------------------------

(143)
YES

----------------------------------------

(144)
Obligation:
SCC
----------------------------------------

(145) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_1507(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1523(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: 0 = 0
f_1523(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1539(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: 0 = 0
f_1539(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1556(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: TRUE
f_1556(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1570(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v24656, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: TRUE
f_1570(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v24656, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1586(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: v24656 = 0
f_1586(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1602(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: 0 = 0
f_1602(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1619(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: TRUE
f_1619(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1636(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: 0 = 0
f_1636(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1653(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: 0 = 0
f_1653(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1669(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v28460, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: 2 + v28460 = v20601 && 0 <= 1 + v28460
f_1669(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v28460, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1683(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v28460, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: TRUE
f_1683(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v28460, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1698(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v28460, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: TRUE
f_1698(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v28460, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1416(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v28460, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: TRUE
f_1416(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20600, v20601, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1431(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20600, v20601, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: TRUE
f_1431(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20600, v20601, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1446(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20600, v20601, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: 0 = 0
f_1446(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20600, v20601, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1460(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20600, v20601, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: 0 = 0
f_1460(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20600, v20601, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1476(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20600, v20601, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: TRUE
f_1476(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20600, v20601, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1492(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: 0 = 0
f_1492(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) -> f_1507(2, v20588, v20589, v20590, v20591, v20592, v20593, v20594, v20595, 0, v20597, v20598, 1, v20601, v20600, v20602, v20603, v20604, v20605, v20606, v20607, v20608, 3, 4) :|: 0 < v20601 && 3 <= v20600
Combined rules. Obtained 1 rulesP rules:
f_1507(2, v20588:0, v20589:0, v20590:0, v20591:0, v20592:0, v20593:0, v20594:0, v20595:0, 0, v20597:0, v20598:0, 1, 2 + v28460:0, v20600:0, v20602:0, v20603:0, v20604:0, v20605:0, v20606:0, v20607:0, v20608:0, 3, 4) -> f_1507(2, v20588:0, v20589:0, v20590:0, v20591:0, v20592:0, v20593:0, v20594:0, v20595:0, 0, v20597:0, v20598:0, 1, v28460:0, 2 + v28460:0, v20602:0, v20603:0, v20604:0, v20605:0, v20606:0, v20607:0, v20608:0, 3, 4) :|: v28460:0 > 0
Filtered unneeded arguments:
   f_1507(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_1507(x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1507(sum~cons_2~v28460:0) -> f_1507(v28460:0) :|: v28460:0 > 0 && sum~cons_2~v28460:0 = 2 + v28460:0

----------------------------------------

(146)
Obligation:
Rules:
f_1507(sum~cons_2~v28460:0) -> f_1507(v28460:0) :|: v28460:0 > 0 && sum~cons_2~v28460:0 = 2 + v28460:0

----------------------------------------

(147) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(148)
Obligation:
Rules:
f_1507(sum~cons_2~v28460:0:0) -> f_1507(v28460:0:0) :|: v28460:0:0 > 0 && sum~cons_2~v28460:0:0 = 2 + v28460:0:0

----------------------------------------

(149) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1507 ] = -1/2*f_1507_1 + 1/4*f_1507_1^2

The following rules are decreasing:
f_1507(sum~cons_2~v28460:0:0) -> f_1507(v28460:0:0) :|: v28460:0:0 > 0 && sum~cons_2~v28460:0:0 = 2 + v28460:0:0

The following rules are bounded:
f_1507(sum~cons_2~v28460:0:0) -> f_1507(v28460:0:0) :|: v28460:0:0 > 0 && sum~cons_2~v28460:0:0 = 2 + v28460:0:0


----------------------------------------

(150)
YES

----------------------------------------

(151)
Obligation:
SCC
----------------------------------------

(152) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_948(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_962(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: 0 = 0
f_962(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_976(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: 0 = 0
f_976(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_992(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: TRUE
f_992(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_1008(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v7587, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: TRUE
f_1008(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v7587, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_1028(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: v7587 = 0
f_1028(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_1045(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: 0 = 0
f_1045(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_1061(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: TRUE
f_1061(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_1079(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: 0 = 0
f_1079(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_1097(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: 0 = 0
f_1097(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_1113(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v11019, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: 2 + v11019 = v4411 && 0 <= 1 + v11019
f_1113(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v11019, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_1129(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v11019, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: TRUE
f_1129(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v11019, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_1147(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v11019, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: TRUE
f_1147(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v11019, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_879(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v11019, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: TRUE
f_879(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_891(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: TRUE
f_891(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_901(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: 0 = 0
f_901(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_911(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: 0 = 0
f_911(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_923(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: TRUE
f_923(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_935(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: 0 = 0
f_935(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) -> f_948(2, v4400, v4401, v4402, v4403, v4404, v4405, v4406, v4407, 0, 1, v4411, v4410, v4412, v4413, v4414, v4415, v4416, v4417, v4418, 3, 4) :|: 0 < v4411 && 3 <= v4410
Combined rules. Obtained 1 rulesP rules:
f_948(2, v4400:0, v4401:0, v4402:0, v4403:0, v4404:0, v4405:0, v4406:0, v4407:0, 0, 1, 2 + v11019:0, v4410:0, v4412:0, v4413:0, v4414:0, v4415:0, v4416:0, v4417:0, v4418:0, 3, 4) -> f_948(2, v4400:0, v4401:0, v4402:0, v4403:0, v4404:0, v4405:0, v4406:0, v4407:0, 0, 1, v11019:0, 2 + v11019:0, v4412:0, v4413:0, v4414:0, v4415:0, v4416:0, v4417:0, v4418:0, 3, 4) :|: v11019:0 > 0
Filtered unneeded arguments:
   f_948(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_948(x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_948(sum~cons_2~v11019:0) -> f_948(v11019:0) :|: v11019:0 > 0 && sum~cons_2~v11019:0 = 2 + v11019:0

----------------------------------------

(153)
Obligation:
Rules:
f_948(sum~cons_2~v11019:0) -> f_948(v11019:0) :|: v11019:0 > 0 && sum~cons_2~v11019:0 = 2 + v11019:0

----------------------------------------

(154) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(155)
Obligation:
Rules:
f_948(sum~cons_2~v11019:0:0) -> f_948(v11019:0:0) :|: v11019:0:0 > 0 && sum~cons_2~v11019:0:0 = 2 + v11019:0:0

----------------------------------------

(156) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_948(x)] = x

The following rules are decreasing:
f_948(sum~cons_2~v11019:0:0) -> f_948(v11019:0:0) :|: v11019:0:0 > 0 && sum~cons_2~v11019:0:0 = 2 + v11019:0:0
The following rules are bounded:
f_948(sum~cons_2~v11019:0:0) -> f_948(v11019:0:0) :|: v11019:0:0 > 0 && sum~cons_2~v11019:0:0 = 2 + v11019:0:0

----------------------------------------

(157)
YES

----------------------------------------

(158)
Obligation:
SCC
----------------------------------------

(159) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_592(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v1001, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) -> f_605(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v1001, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) :|: 0 = 0
f_605(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v1001, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) -> f_619(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v1001, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) :|: TRUE
f_619(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v1001, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) -> f_632(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) :|: 0 = 0
f_632(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) -> f_644(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v2131, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) :|: v2131 = 2 * v1003 && 4 <= v2131
f_644(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v2131, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) -> f_656(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v2131, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) :|: TRUE
f_656(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v2131, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) -> f_671(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v2131, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) :|: TRUE
f_671(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v2131, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) -> f_559(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v2131, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) :|: TRUE
f_559(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1001, 1, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) -> f_570(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v1001, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) :|: 0 = 0
f_570(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v1001, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) -> f_581(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v1001, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) :|: 0 = 0
f_581(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v1001, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) -> f_592(2, v992, v993, v994, v995, v996, v997, v998, v999, 0, v1003, 1, v1001, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 3, 4) :|: v1003 < v999 && 3 <= v999
Combined rules. Obtained 1 rulesP rules:
f_592(2, v992:0, v993:0, v994:0, v995:0, v996:0, v997:0, v998:0, v999:0, 0, v1003:0, 1, v1001:0, v1004:0, v1005:0, v1006:0, v1007:0, v1008:0, v1009:0, v1010:0, 3, 4) -> f_592(2, v992:0, v993:0, v994:0, v995:0, v996:0, v997:0, v998:0, v999:0, 0, 2 * v1003:0, 1, v1003:0, v1004:0, v1005:0, v1006:0, v1007:0, v1008:0, v1009:0, v1010:0, 3, 4) :|: 3 < 2 * v1003:0 && v999:0 > 2 * v1003:0 && v999:0 > 2
Filtered unneeded arguments:
   f_592(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_592(x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_592(v999:0, v1003:0) -> f_592(v999:0, 2 * v1003:0) :|: v999:0 > 2 * v1003:0 && v999:0 > 2 && 3 < 2 * v1003:0

----------------------------------------

(160)
Obligation:
Rules:
f_592(v999:0, v1003:0) -> f_592(v999:0, 2 * v1003:0) :|: v999:0 > 2 * v1003:0 && v999:0 > 2 && 3 < 2 * v1003:0

----------------------------------------

(161) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(162)
Obligation:
Rules:
f_592(v999:0:0, v1003:0:0) -> f_592(v999:0:0, 2 * v1003:0:0) :|: v999:0:0 > 2 * v1003:0:0 && v999:0:0 > 2 && 3 < 2 * v1003:0:0

----------------------------------------

(163) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_592 ] = 1/4*f_592_1 + -1/2*f_592_2

The following rules are decreasing:
f_592(v999:0:0, v1003:0:0) -> f_592(v999:0:0, 2 * v1003:0:0) :|: v999:0:0 > 2 * v1003:0:0 && v999:0:0 > 2 && 3 < 2 * v1003:0:0

The following rules are bounded:
f_592(v999:0:0, v1003:0:0) -> f_592(v999:0:0, 2 * v1003:0:0) :|: v999:0:0 > 2 * v1003:0:0 && v999:0:0 > 2 && 3 < 2 * v1003:0:0


----------------------------------------

(164)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
