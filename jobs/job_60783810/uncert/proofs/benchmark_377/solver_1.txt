NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/p1dQj.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 980 ms]
(4) LLVM Symbolic Execution Graph
(5) LLVMNonterminationProof [COMPLETE, 234 ms]
(6) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/p1dQj.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/p1dQj.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		br %8
	8:
		%9 = load %3
		%10 = icmp ne %9 0
		br %10, %11, %17
	11:
		%12 = load %2
		%13 = icmp sge %12 0
		br %13, %14, %17
	14:
		%15 = load %3
		%16 = icmp sge %15 0
		br %17
	17:
		%18 = phi [0, %11], [0, %8], [%16, %14]
		br %18, %19, %39
	19:
		%20 = load %3
		store %20, %4
		%21 = load %2
		store %21, %5
		%22 = load %2
		%23 = load %3
		%24 = icmp eq %22 %23
		br %24, %25, %26
	25:
		store 0, %3
		br %36
	26:
		br %27
	27:
		%28 = load %5
		%29 = load %3
		%30 = icmp sgt %28 %29
		br %30, %31, %35
	31:
		%32 = load %5
		%33 = load %3
		%34 = sub i32 %32, %33
		store %34, %5
		br %27
	35:
		br %36
	36:
		%37 = load %5
		store %37, %3
		%38 = load %4
		store %38, %2
		br %8
	39:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) LLVMNonterminationProof (COMPLETE)
Proved nontermination with the following witness:

State #163 with references set to {}.
Nondeterministic instruction %1 = alloca i32, align 4 in node #163 yields value 17.
Nondeterministic instruction %2 = alloca i32, align 4 in node #164 yields value 13.
Nondeterministic instruction %3 = alloca i32, align 4 in node #165 yields value 1.
Nondeterministic instruction %4 = alloca i32, align 4 in node #166 yields value 9.
Nondeterministic instruction %5 = alloca i32, align 4 in node #167 yields value 5.
Nondeterministic instruction %6 = call i32 @__VERIFIER_nondet_int() in node #173 yields value 2.
Nondeterministic instruction %7 = call i32 @__VERIFIER_nondet_int() in node #175 yields value 1.

----------------------------------------

(6)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
