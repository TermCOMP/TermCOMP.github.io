YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/q3h1A.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1580 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 74 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 12 ms]
        (13) AND
            (14) IntTRS
                (15) TerminationGraphProcessor [EQUIVALENT, 0 ms]
                (16) YES
            (17) IntTRS
                (18) TerminationGraphProcessor [EQUIVALENT, 0 ms]
                (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 32 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (26) YES
    (27) LLVM Symbolic Execution SCC
        (28) SCC2IRS [SOUND, 29 ms]
        (29) IntTRS
        (30) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (31) IntTRS
        (32) PolynomialOrderProcessor [EQUIVALENT, 10 ms]
        (33) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/q3h1A.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/q3h1A.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		%8 = load %4
		%9 = icmp sgt %8 0
		br %9, %10, %28
	10:
		store 0, %2
		store 1, %3
		br %11
	11:
		%12 = load %3
		%13 = load %4
		%14 = icmp sle %12 %13
		br %14, %15, %27
	15:
		%16 = call i32 @__VERIFIER_nondet_int()
		%17 = icmp ne %16 0
		br %17, %18, %21
	18:
		%19 = load %2
		%20 = add i32 %19, 1
		store %20, %2
		br %24
	21:
		%22 = load %2
		%23 = sub i32 %22, 1
		store %23, %2
		br %24
	24:
		%25 = load %3
		%26 = add i32 %25, 1
		store %26, %3
		br %11
	27:
		br %28
	28:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 46 rulesP rules:
f_611(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1917, v1918, v1919, v1920, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) -> f_613(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1917, v1918, v1919, v1920, v1993, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) :|: v1993 = 1 + v1917 && 3 <= v1993
f_613(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1917, v1918, v1919, v1920, v1993, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) -> f_615(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1917, v1918, v1919, v1920, v1993, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) :|: TRUE
f_615(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1917, v1918, v1919, v1920, v1993, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) -> f_617(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1917, v1918, v1919, v1920, v1993, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) :|: TRUE
f_617(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1917, v1918, v1919, v1920, v1993, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) -> f_619(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v1918, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) :|: 0 = 0
f_619(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v1918, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) -> f_621(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v1918, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) :|: 0 = 0
f_621(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v1918, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) -> f_623(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v1918, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) :|: v1993 <= v1915 && 3 <= v1915
f_623(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v1918, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) -> f_627(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v1918, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) :|: 0 = 0
f_627(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v1918, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) -> f_631(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v1918, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) :|: TRUE
f_631(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v1918, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) -> f_635(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v2142, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) :|: TRUE
f_635(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v2142, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) -> f_639(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v2142, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) :|: v2142 != 0
f_635(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v2142, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) -> f_640(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, 0, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 3, 2, 4) :|: v2142 = 0
f_639(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v2142, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) -> f_643(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v2142, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) :|: 0 = 0
f_643(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v2142, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) -> f_647(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v2142, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) :|: TRUE
f_647(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v2142, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) -> f_685(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, v2142, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 0, v1923, 3, 2, 4) :|: TRUE
f_685(v2609, v2610, v2611, v2612, v2613, v2614, v2615, 1, v2617, v2618, v2619, v2620, v2621, v2622, v2623, v2624, v2625, v2626, v2627, 0, v2629, 3, 2, 4) -> f_688(v2609, v2610, v2611, v2612, v2613, v2614, v2615, 1, v2617, v2618, v2619, v2620, v2621, v2629, v2623, v2624, v2625, v2626, v2627, 0, 3, 2, 4) :|: 0 = 0
f_688(v2609, v2610, v2611, v2612, v2613, v2614, v2615, 1, v2617, v2618, v2619, v2620, v2621, v2629, v2623, v2624, v2625, v2626, v2627, 0, 3, 2, 4) -> f_690(v2609, v2610, v2611, v2612, v2613, v2614, v2615, 1, v2617, v2618, v2619, v2620, v2621, v2629, v2676, v2624, v2625, v2626, v2627, 0, 3, 2, 4) :|: v2676 = 1 + v2629
f_690(v2609, v2610, v2611, v2612, v2613, v2614, v2615, 1, v2617, v2618, v2619, v2620, v2621, v2629, v2676, v2624, v2625, v2626, v2627, 0, 3, 2, 4) -> f_692(v2609, v2610, v2611, v2612, v2613, v2614, v2615, 1, v2617, v2618, v2619, v2620, v2621, v2629, v2676, v2624, v2625, v2626, v2627, 0, 3, 2, 4) :|: TRUE
f_692(v2609, v2610, v2611, v2612, v2613, v2614, v2615, 1, v2617, v2618, v2619, v2620, v2621, v2629, v2676, v2624, v2625, v2626, v2627, 0, 3, 2, 4) -> f_694(v2609, v2610, v2611, v2612, v2613, v2614, v2615, 1, v2617, v2618, v2619, v2620, v2621, v2629, v2676, v2624, v2625, v2626, v2627, 0, 3, 2, 4) :|: TRUE
f_694(v2609, v2610, v2611, v2612, v2613, v2614, v2615, 1, v2617, v2618, v2619, v2620, v2621, v2629, v2676, v2624, v2625, v2626, v2627, 0, 3, 2, 4) -> f_608(v2609, v2610, v2611, v2612, v2613, v2614, v2615, 1, v2617, v2618, v2619, v2620, v2621, v2629, v2676, v2624, v2625, v2626, v2627, 0, 3, 2, 4) :|: TRUE
f_608(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1917, v1918, v1919, v1920, v1921, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) -> f_611(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1917, v1918, v1919, v1920, v1922, v1923, v1924, v1925, v1926, v1927, 0, 3, 2, 4) :|: 0 = 0
f_640(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, 0, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 3, 2, 4) -> f_644(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, 0, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 3, 2, 4) :|: 0 = 0
f_644(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, 0, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 3, 2, 4) -> f_648(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, 0, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 3, 2, 4) :|: TRUE
f_648(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, 0, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, 3, 2, 4) -> f_687(v1909, v1910, v1911, v1912, v1913, v1914, v1915, 1, v1993, 0, v1919, v1920, v1917, v1922, v1923, v1924, v1925, v1926, v1927, v1923, 3, 2, 4) :|: TRUE
f_687(v2656, v2657, v2658, v2659, v2660, v2661, v2662, 1, v2664, 0, v2666, v2667, v2668, v2669, v2670, v2671, v2672, v2673, v2674, v2675, 3, 2, 4) -> f_689(v2656, v2657, v2658, v2659, v2660, v2661, v2662, 1, v2664, 0, v2675, v2667, v2668, v2669, v2670, v2671, v2672, v2673, v2674, 3, 2, 4) :|: 0 = 0
f_689(v2656, v2657, v2658, v2659, v2660, v2661, v2662, 1, v2664, 0, v2675, v2667, v2668, v2669, v2670, v2671, v2672, v2673, v2674, 3, 2, 4) -> f_691(v2656, v2657, v2658, v2659, v2660, v2661, v2662, 1, v2664, 0, v2675, v2677, v2668, v2669, v2670, v2671, v2672, v2673, v2674, 3, 2, 4) :|: 1 + v2677 = v2675
f_691(v2656, v2657, v2658, v2659, v2660, v2661, v2662, 1, v2664, 0, v2675, v2677, v2668, v2669, v2670, v2671, v2672, v2673, v2674, 3, 2, 4) -> f_693(v2656, v2657, v2658, v2659, v2660, v2661, v2662, 1, v2664, 0, v2675, v2677, v2668, v2669, v2670, v2671, v2672, v2673, v2674, 3, 2, 4) :|: TRUE
f_693(v2656, v2657, v2658, v2659, v2660, v2661, v2662, 1, v2664, 0, v2675, v2677, v2668, v2669, v2670, v2671, v2672, v2673, v2674, 3, 2, 4) -> f_695(v2656, v2657, v2658, v2659, v2660, v2661, v2662, 1, v2664, 0, v2675, v2677, v2668, v2669, v2670, v2671, v2672, v2673, v2674, 3, 2, 4) :|: TRUE
f_695(v2656, v2657, v2658, v2659, v2660, v2661, v2662, 1, v2664, 0, v2675, v2677, v2668, v2669, v2670, v2671, v2672, v2673, v2674, 3, 2, 4) -> f_665(v2656, v2657, v2658, v2659, v2660, v2661, v2662, 1, v2664, 0, v2669, v2670, v2668, v2675, v2677, v2671, v2672, v2673, v2674, 3, 2, 4) :|: TRUE
f_665(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2443, 0, v2445, v2446, v2447, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_666(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2443, 0, v2445, v2446, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) :|: 0 = 0
f_666(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2443, 0, v2445, v2446, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_667(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2443, 0, v2445, v2446, v2454, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) :|: v2454 = 1 + v2443 && 3 <= v2454
f_667(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2443, 0, v2445, v2446, v2454, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_668(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2443, 0, v2445, v2446, v2454, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) :|: TRUE
f_668(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2443, 0, v2445, v2446, v2454, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_669(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2443, 0, v2445, v2446, v2454, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) :|: TRUE
f_669(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2443, 0, v2445, v2446, v2454, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_670(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) :|: 0 = 0
f_670(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_671(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) :|: 0 = 0
f_671(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_672(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) :|: v2454 <= v2441 && 3 <= v2441
f_672(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_674(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) :|: 0 = 0
f_674(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_676(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) :|: TRUE
f_676(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_678(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, v2552, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) :|: TRUE
f_678(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, v2552, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_680(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, v2552, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) :|: v2552 != 0
f_678(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, v2552, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_681(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) :|: v2552 = 0
f_680(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, v2552, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_682(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, v2552, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 0, 3, 2, 4) :|: 0 = 0
f_682(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, v2552, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 0, 3, 2, 4) -> f_684(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, v2552, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 0, 3, 2, 4) :|: TRUE
f_684(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, v2552, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 0, 3, 2, 4) -> f_685(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, v2552, v2448, v2449, v2443, v2445, v2446, v2450, v2451, v2452, v2453, 0, v2449, 3, 2, 4) :|: TRUE
f_681(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_683(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) :|: 0 = 0
f_683(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_686(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) :|: TRUE
f_686(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2445, v2446, v2443, v2448, v2449, v2450, v2451, v2452, v2453, 3, 2, 4) -> f_687(v2435, v2436, v2437, v2438, v2439, v2440, v2441, 1, v2454, 0, v2448, v2449, v2443, v2445, v2446, v2450, v2451, v2452, v2453, v2449, 3, 2, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_678(v2435:0, v2436:0, v2437:0, v2438:0, v2439:0, v2440:0, v2441:0, 1, v2454:0, v2552:0, 0, v2445:0, v2446:0, v2443:0, v2448:0, v2449:0, v2450:0, v2451:0, v2452:0, v2453:0, 3, 2, 4) -> f_611(v2435:0, v2436:0, v2437:0, v2438:0, v2439:0, v2440:0, v2441:0, 1, v2454:0, v2552:0, v2448:0, v2449:0, v2449:0, 1 + v2449:0, v2450:0, v2451:0, v2452:0, v2453:0, 0, 3, 2, 4) :|: v2552:0 < 0
f_678(v2435:0, v2436:0, v2437:0, v2438:0, v2439:0, v2440:0, v2441:0, 1, v2454:0, v2552:0, 0, v2445:0, v2446:0, v2443:0, v2448:0, v2449:0, v2450:0, v2451:0, v2452:0, v2453:0, 3, 2, 4) -> f_611(v2435:0, v2436:0, v2437:0, v2438:0, v2439:0, v2440:0, v2441:0, 1, v2454:0, v2552:0, v2448:0, v2449:0, v2449:0, 1 + v2449:0, v2450:0, v2451:0, v2452:0, v2453:0, 0, 3, 2, 4) :|: v2552:0 > 0
f_678(v2435:0, v2436:0, v2437:0, v2438:0, v2439:0, v2440:0, v2441:0, 1, v2454:0, 0, 0, v2445:0, v2446:0, v2443:0, v2448:0, 1 + v2677:0, v2450:0, v2451:0, v2452:0, v2453:0, 3, 2, 4) -> f_678(v2435:0, v2436:0, v2437:0, v2438:0, v2439:0, v2440:0, v2441:0, 1, 1 + v2454:0, v2552:1, 0, v2445:0, v2446:0, v2454:0, 1 + v2677:0, v2677:0, v2450:0, v2451:0, v2452:0, v2453:0, 3, 2, 4) :|: v2454:0 > 1 && v2441:0 >= 1 + v2454:0 && v2441:0 > 2
f_611(v1909:0, v1910:0, v1911:0, v1912:0, v1913:0, v1914:0, v1915:0, 1, v1917:0, v1918:0, v1919:0, v1920:0, v1922:0, 1 + v2677:0, v1924:0, v1925:0, v1926:0, v1927:0, 0, 3, 2, 4) -> f_678(v1909:0, v1910:0, v1911:0, v1912:0, v1913:0, v1914:0, v1915:0, 1, 1 + (1 + v1917:0), v2552:0, 0, v1922:0, 1 + v2677:0, 1 + v1917:0, 1 + v2677:0, v2677:0, v1924:0, v1925:0, v1926:0, v1927:0, 3, 2, 4) :|: v1917:0 > 1 && v1915:0 > 2 && v1915:0 >= 1 + v1917:0 && v1915:0 >= 1 + (1 + v1917:0)
f_611(v1909:0, v1910:0, v1911:0, v1912:0, v1913:0, v1914:0, v1915:0, 1, v1917:0, v1918:0, v1919:0, v1920:0, v1922:0, v1923:0, v1924:0, v1925:0, v1926:0, v1927:0, 0, 3, 2, 4) -> f_611(v1909:0, v1910:0, v1911:0, v1912:0, v1913:0, v1914:0, v1915:0, 1, 1 + v1917:0, v2142:0, v1919:0, v1920:0, v1923:0, 1 + v1923:0, v1924:0, v1925:0, v1926:0, v1927:0, 0, 3, 2, 4) :|: v1917:0 > 1 && v1915:0 > 2 && v2142:0 < 0 && v1915:0 >= 1 + v1917:0
f_611(v1909:0, v1910:0, v1911:0, v1912:0, v1913:0, v1914:0, v1915:0, 1, v1917:0, v1918:0, v1919:0, v1920:0, v1922:0, v1923:0, v1924:0, v1925:0, v1926:0, v1927:0, 0, 3, 2, 4) -> f_611(v1909:0, v1910:0, v1911:0, v1912:0, v1913:0, v1914:0, v1915:0, 1, 1 + v1917:0, v2142:0, v1919:0, v1920:0, v1923:0, 1 + v1923:0, v1924:0, v1925:0, v1926:0, v1927:0, 0, 3, 2, 4) :|: v1917:0 > 1 && v1915:0 > 2 && v2142:0 > 0 && v1915:0 >= 1 + v1917:0
Filtered unneeded arguments:
   f_678(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_678(x7, x9, x10, x16)
   f_611(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_611(x7, x9, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_678(v2441:0, v2454:0, v2552:0, v2449:0) -> f_611(v2441:0, v2454:0, 1 + v2449:0) :|: v2552:0 < 0
f_678(v2441:0, v2454:0, v2552:0, v2449:0) -> f_611(v2441:0, v2454:0, 1 + v2449:0) :|: v2552:0 > 0
f_678(v2441:0, v2454:0, cons_0, sum~cons_1~v2677:0) -> f_678(v2441:0, 1 + v2454:0, v2552:1, v2677:0) :|: v2441:0 >= 1 + v2454:0 && v2441:0 > 2 && v2454:0 > 1 && cons_0 = 0 && sum~cons_1~v2677:0 = 1 + v2677:0
f_611(v1915:0, v1917:0, sum~cons_1~v2677:0) -> f_678(v1915:0, 1 + (1 + v1917:0), v2552:0, v2677:0) :|: v1915:0 > 2 && v1917:0 > 1 && v1915:0 >= 1 + (1 + v1917:0) && v1915:0 >= 1 + v1917:0 && sum~cons_1~v2677:0 = 1 + v2677:0
f_611(v1915:0, v1917:0, v1923:0) -> f_611(v1915:0, 1 + v1917:0, 1 + v1923:0) :|: v1915:0 > 2 && v1915:0 >= 1 + v1917:0 && v1917:0 > 1

----------------------------------------

(9)
Obligation:
Rules:
f_678(v2441:0, v2454:0, v2552:0, v2449:0) -> f_611(v2441:0, v2454:0, 1 + v2449:0) :|: v2552:0 < 0
f_678(x, x1, x2, x3) -> f_611(x, x1, 1 + x3) :|: x2 > 0
f_678(x4, x5, x6, x7) -> f_678(x4, 1 + x5, x8, x9) :|: x4 >= 1 + x5 && x4 > 2 && x5 > 1 && x6 = 0 && x7 = 1 + x9
f_611(x10, x11, x12) -> f_678(x10, 1 + (1 + x11), x13, x14) :|: x10 > 2 && x11 > 1 && x10 >= 1 + (1 + x11) && x10 >= 1 + x11 && x12 = 1 + x14
f_611(v1915:0, v1917:0, v1923:0) -> f_611(v1915:0, 1 + v1917:0, 1 + v1923:0) :|: v1915:0 > 2 && v1915:0 >= 1 + v1917:0 && v1917:0 > 1

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_678(x:0, x1:0, x2:0, x3:0) -> f_611(x:0, x1:0, 1 + x3:0) :|: x2:0 > 0
f_678(v2441:0:0, v2454:0:0, v2552:0:0, v2449:0:0) -> f_611(v2441:0:0, v2454:0:0, 1 + v2449:0:0) :|: v2552:0:0 < 0
f_611(x10:0, x11:0, sum~cons_1~x14:0) -> f_678(x10:0, 1 + (1 + x11:0), x13:0, x14:0) :|: x10:0 >= 1 + (1 + x11:0) && x10:0 >= 1 + x11:0 && x11:0 > 1 && x10:0 > 2 && sum~cons_1~x14:0 = 1 + x14:0
f_678(x4:0, x5:0, cons_0, sum~cons_1~x9:0) -> f_678(x4:0, 1 + x5:0, x8:0, x9:0) :|: x4:0 >= 1 + x5:0 && x4:0 > 2 && x5:0 > 1 && cons_0 = 0 && sum~cons_1~x9:0 = 1 + x9:0
f_611(v1915:0:0, v1917:0:0, v1923:0:0) -> f_611(v1915:0:0, 1 + v1917:0:0, 1 + v1923:0:0) :|: v1915:0:0 > 2 && v1915:0:0 >= 1 + v1917:0:0 && v1917:0:0 > 1

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_678(x, x1, x2, x3)] = -2 + 2*x - x1
[f_611(x4, x5, x6)] = -4 + 2*x4 - x5

The following rules are decreasing:
f_678(x:0, x1:0, x2:0, x3:0) -> f_611(x:0, x1:0, 1 + x3:0) :|: x2:0 > 0
f_678(v2441:0:0, v2454:0:0, v2552:0:0, v2449:0:0) -> f_611(v2441:0:0, v2454:0:0, 1 + v2449:0:0) :|: v2552:0:0 < 0
f_678(x4:0, x5:0, cons_0, sum~cons_1~x9:0) -> f_678(x4:0, 1 + x5:0, x8:0, x9:0) :|: x4:0 >= 1 + x5:0 && x4:0 > 2 && x5:0 > 1 && cons_0 = 0 && sum~cons_1~x9:0 = 1 + x9:0
f_611(v1915:0:0, v1917:0:0, v1923:0:0) -> f_611(v1915:0:0, 1 + v1917:0:0, 1 + v1923:0:0) :|: v1915:0:0 > 2 && v1915:0:0 >= 1 + v1917:0:0 && v1917:0:0 > 1
The following rules are bounded:
f_611(x10:0, x11:0, sum~cons_1~x14:0) -> f_678(x10:0, 1 + (1 + x11:0), x13:0, x14:0) :|: x10:0 >= 1 + (1 + x11:0) && x10:0 >= 1 + x11:0 && x11:0 > 1 && x10:0 > 2 && sum~cons_1~x14:0 = 1 + x14:0
f_678(x4:0, x5:0, cons_0, sum~cons_1~x9:0) -> f_678(x4:0, 1 + x5:0, x8:0, x9:0) :|: x4:0 >= 1 + x5:0 && x4:0 > 2 && x5:0 > 1 && cons_0 = 0 && sum~cons_1~x9:0 = 1 + x9:0
f_611(v1915:0:0, v1917:0:0, v1923:0:0) -> f_611(v1915:0:0, 1 + v1917:0:0, 1 + v1923:0:0) :|: v1915:0:0 > 2 && v1915:0:0 >= 1 + v1917:0:0 && v1917:0:0 > 1

----------------------------------------

(13)
Complex Obligation (AND)

----------------------------------------

(14)
Obligation:
Rules:
f_611(x10:0, x11:0, sum~cons_1~x14:0) -> f_678(x10:0, 1 + (1 + x11:0), x13:0, x14:0) :|: x10:0 >= 1 + (1 + x11:0) && x10:0 >= 1 + x11:0 && x11:0 > 1 && x10:0 > 2 && sum~cons_1~x14:0 = 1 + x14:0

----------------------------------------

(15) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(16)
YES

----------------------------------------

(17)
Obligation:
Rules:
f_678(x:0, x1:0, x2:0, x3:0) -> f_611(x:0, x1:0, 1 + x3:0) :|: x2:0 > 0
f_678(v2441:0:0, v2454:0:0, v2552:0:0, v2449:0:0) -> f_611(v2441:0:0, v2454:0:0, 1 + v2449:0:0) :|: v2552:0:0 < 0

----------------------------------------

(18) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_503(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1128, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_505(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1128, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: 0 = 0
f_505(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1128, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_507(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1128, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: v1130 <= v1125 && 2 <= v1125
f_507(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1128, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_511(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1128, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: 0 = 0
f_511(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1128, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_515(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1128, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: TRUE
f_515(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1128, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_519(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: TRUE
f_519(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_523(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: v1267 != 0
f_523(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_527(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: 0 = 0
f_527(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_531(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: TRUE
f_531(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_535(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: 0 = 0
f_535(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_539(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: v1130 = 1 + v1127
f_539(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_543(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: TRUE
f_543(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_547(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: TRUE
f_547(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_551(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: 0 = 0
f_551(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_554(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1503, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: v1503 = 1 + v1130 && 3 <= v1503
f_554(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1503, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_557(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1503, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: TRUE
f_557(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1503, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_560(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1503, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: TRUE
f_560(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1503, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_500(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1267, v1127, v1503, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: TRUE
f_500(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1127, v1128, v1129, v1130, v1131, v1132, v1133, v1134, 0, 3, 2, 4) -> f_503(v1119, v1120, v1121, v1122, v1123, v1124, v1125, 1, v1130, v1128, v1129, v1127, v1131, v1132, v1133, v1134, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_503(v1119:0, v1120:0, v1121:0, v1122:0, v1123:0, v1124:0, v1125:0, 1, 1 + v1127:0, v1128:0, v1129:0, v1127:0, v1131:0, v1132:0, v1133:0, v1134:0, 0, 3, 2, 4) -> f_503(v1119:0, v1120:0, v1121:0, v1122:0, v1123:0, v1124:0, v1125:0, 1, 1 + (1 + v1127:0), v1267:0, v1127:0, 1 + v1127:0, v1131:0, v1132:0, v1133:0, v1134:0, 0, 3, 2, 4) :|: v1125:0 > 1 && v1125:0 >= 1 + v1127:0 && v1127:0 > 0 && v1267:0 < 0
f_503(v1119:0, v1120:0, v1121:0, v1122:0, v1123:0, v1124:0, v1125:0, 1, 1 + v1127:0, v1128:0, v1129:0, v1127:0, v1131:0, v1132:0, v1133:0, v1134:0, 0, 3, 2, 4) -> f_503(v1119:0, v1120:0, v1121:0, v1122:0, v1123:0, v1124:0, v1125:0, 1, 1 + (1 + v1127:0), v1267:0, v1127:0, 1 + v1127:0, v1131:0, v1132:0, v1133:0, v1134:0, 0, 3, 2, 4) :|: v1125:0 > 1 && v1125:0 >= 1 + v1127:0 && v1127:0 > 0 && v1267:0 > 0
Filtered unneeded arguments:
   f_503(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_503(x7, x9, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_503(v1125:0, sum~cons_1~v1127:0, v1127:0) -> f_503(v1125:0, 1 + (1 + v1127:0), 1 + v1127:0) :|: v1125:0 >= 1 + v1127:0 && v1127:0 > 0 && v1125:0 > 1 && sum~cons_1~v1127:0 = 1 + v1127:0

----------------------------------------

(22)
Obligation:
Rules:
f_503(v1125:0, sum~cons_1~v1127:0, v1127:0) -> f_503(v1125:0, 1 + (1 + v1127:0), 1 + v1127:0) :|: v1125:0 >= 1 + v1127:0 && v1127:0 > 0 && v1125:0 > 1 && sum~cons_1~v1127:0 = 1 + v1127:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_503(v1125:0:0, sum~cons_1~v1127:0:0, v1127:0:0) -> f_503(v1125:0:0, 1 + (1 + v1127:0:0), 1 + v1127:0:0) :|: v1125:0:0 >= 1 + v1127:0:0 && v1127:0:0 > 0 && v1125:0:0 > 1 && sum~cons_1~v1127:0:0 = 1 + v1127:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_503(x, x1, x2)] = x - x1

The following rules are decreasing:
f_503(v1125:0:0, sum~cons_1~v1127:0:0, v1127:0:0) -> f_503(v1125:0:0, 1 + (1 + v1127:0:0), 1 + v1127:0:0) :|: v1125:0:0 >= 1 + v1127:0:0 && v1127:0:0 > 0 && v1125:0:0 > 1 && sum~cons_1~v1127:0:0 = 1 + v1127:0:0
The following rules are bounded:
f_503(v1125:0:0, sum~cons_1~v1127:0:0, v1127:0:0) -> f_503(v1125:0:0, 1 + (1 + v1127:0:0), 1 + v1127:0:0) :|: v1125:0:0 >= 1 + v1127:0:0 && v1127:0:0 > 0 && v1125:0:0 > 1 && sum~cons_1~v1127:0:0 = 1 + v1127:0:0

----------------------------------------

(26)
YES

----------------------------------------

(27)
Obligation:
SCC
----------------------------------------

(28) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_440(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) -> f_442(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) :|: 0 = 0
f_442(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) -> f_445(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) :|: v942 <= v936 && 2 <= v936
f_445(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) -> f_449(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) :|: 0 = 0
f_449(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) -> f_453(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) :|: TRUE
f_453(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) -> f_457(v930, v931, v932, v933, v934, v935, v936, 1, v942, v987, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) :|: TRUE
f_457(v930, v931, v932, v933, v934, v935, v936, 1, v942, v987, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) -> f_462(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) :|: v987 = 0
f_462(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) -> f_466(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) :|: 0 = 0
f_466(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) -> f_470(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) :|: TRUE
f_470(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) -> f_474(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v938, v943, v944, v945, v946, 3, 2, 4) :|: 0 = 0
f_474(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v938, v943, v944, v945, v946, 3, 2, 4) -> f_478(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v1018, v938, v943, v944, v945, v946, 3, 2, 4) :|: 1 + v1018 = v941 && 2 + v1018 <= 0
f_478(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v1018, v938, v943, v944, v945, v946, 3, 2, 4) -> f_482(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v1018, v938, v943, v944, v945, v946, 3, 2, 4) :|: TRUE
f_482(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v1018, v938, v943, v944, v945, v946, 3, 2, 4) -> f_486(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v1018, v938, v943, v944, v945, v946, 3, 2, 4) :|: TRUE
f_486(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v1018, v938, v943, v944, v945, v946, 3, 2, 4) -> f_490(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v1018, v943, v944, v945, v946, 3, 2, 4) :|: 0 = 0
f_490(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v1018, v943, v944, v945, v946, 3, 2, 4) -> f_494(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v1018, v1114, v943, v944, v945, v946, 3, 2, 4) :|: v1114 = 1 + v942 && 3 <= v1114
f_494(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v1018, v1114, v943, v944, v945, v946, 3, 2, 4) -> f_498(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v1018, v1114, v943, v944, v945, v946, 3, 2, 4) :|: TRUE
f_498(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v1018, v1114, v943, v944, v945, v946, 3, 2, 4) -> f_502(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v1018, v1114, v943, v944, v945, v946, 3, 2, 4) :|: TRUE
f_502(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v1018, v1114, v943, v944, v945, v946, 3, 2, 4) -> f_438(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v941, v1018, v1114, v943, v944, v945, v946, 3, 2, 4) :|: TRUE
f_438(v930, v931, v932, v933, v934, v935, v936, 1, v938, 0, v940, v941, v942, v943, v944, v945, v946, 3, 2, 4) -> f_440(v930, v931, v932, v933, v934, v935, v936, 1, v942, 0, v940, v941, v938, v943, v944, v945, v946, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_440(v930:0, v931:0, v932:0, v933:0, v934:0, v935:0, v936:0, 1, v942:0, 0, v940:0, 1 + v1018:0, v938:0, v943:0, v944:0, v945:0, v946:0, 3, 2, 4) -> f_440(v930:0, v931:0, v932:0, v933:0, v934:0, v935:0, v936:0, 1, 1 + v942:0, 0, 1 + v1018:0, v1018:0, v942:0, v943:0, v944:0, v945:0, v946:0, 3, 2, 4) :|: v936:0 > 1 && v942:0 <= v936:0 && v942:0 > 1 && v1018:0 < -1
Filtered unneeded arguments:
   f_440(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_440(x7, x9, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_440(v936:0, v942:0, sum~cons_1~v1018:0) -> f_440(v936:0, 1 + v942:0, v1018:0) :|: v942:0 <= v936:0 && v936:0 > 1 && v1018:0 < -1 && v942:0 > 1 && sum~cons_1~v1018:0 = 1 + v1018:0

----------------------------------------

(29)
Obligation:
Rules:
f_440(v936:0, v942:0, sum~cons_1~v1018:0) -> f_440(v936:0, 1 + v942:0, v1018:0) :|: v942:0 <= v936:0 && v936:0 > 1 && v1018:0 < -1 && v942:0 > 1 && sum~cons_1~v1018:0 = 1 + v1018:0

----------------------------------------

(30) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(31)
Obligation:
Rules:
f_440(v936:0:0, v942:0:0, sum~cons_1~v1018:0:0) -> f_440(v936:0:0, 1 + v942:0:0, v1018:0:0) :|: v1018:0:0 < -1 && v942:0:0 > 1 && v936:0:0 > 1 && v942:0:0 <= v936:0:0 && sum~cons_1~v1018:0:0 = 1 + v1018:0:0

----------------------------------------

(32) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_440(x, x1, x2)] = x - x1

The following rules are decreasing:
f_440(v936:0:0, v942:0:0, sum~cons_1~v1018:0:0) -> f_440(v936:0:0, 1 + v942:0:0, v1018:0:0) :|: v1018:0:0 < -1 && v942:0:0 > 1 && v936:0:0 > 1 && v942:0:0 <= v936:0:0 && sum~cons_1~v1018:0:0 = 1 + v1018:0:0
The following rules are bounded:
f_440(v936:0:0, v942:0:0, sum~cons_1~v1018:0:0) -> f_440(v936:0:0, 1 + v942:0:0, v1018:0:0) :|: v1018:0:0 < -1 && v942:0:0 > 1 && v936:0:0 > 1 && v942:0:0 <= v936:0:0 && sum~cons_1~v1018:0:0 = 1 + v1018:0:0

----------------------------------------

(33)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
