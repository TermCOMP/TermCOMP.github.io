YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/OlbX3.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 4476 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 62 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 58 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (26) IntTRS
        (27) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (28) IntTRS
        (29) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (30) IntTRS
        (31) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (32) YES
    (33) LLVM Symbolic Execution SCC
        (34) SCC2IRS [SOUND, 12 ms]
        (35) IntTRS
        (36) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (37) IntTRS
        (38) PolynomialOrderProcessor [EQUIVALENT, 10 ms]
        (39) YES
    (40) LLVM Symbolic Execution SCC
        (41) SCC2IRS [SOUND, 19 ms]
        (42) IntTRS
        (43) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (44) IntTRS
        (45) RankingReductionPairProof [EQUIVALENT, 5 ms]
        (46) YES
    (47) LLVM Symbolic Execution SCC
        (48) SCC2IRS [SOUND, 27 ms]
        (49) IntTRS
        (50) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (51) IntTRS
        (52) RankingReductionPairProof [EQUIVALENT, 1 ms]
        (53) YES
    (54) LLVM Symbolic Execution SCC
        (55) SCC2IRS [SOUND, 14 ms]
        (56) IntTRS
        (57) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (58) IntTRS
        (59) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (60) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/OlbX3.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/OlbX3.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%9 = call i32 @__VERIFIER_nondet_int()
		store %9, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%10 = call i32 @__VERIFIER_nondet_int()
		store %10, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%11 = call i32 @__VERIFIER_nondet_int()
		store %11, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		%12 = call i32 @__VERIFIER_nondet_int()
		store %12, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		%13 = call i32 @__VERIFIER_nondet_int()
		store %13, %7
		%14 = load %5
		%15 = icmp sle 0 %14
		br %15, %16, %49
	16:
		%17 = load %6
		%18 = icmp sle 0 %17
		br %18, %19, %49
	19:
		%20 = load %7
		%21 = icmp sle 0 %20
		br %21, %22, %49
	22:
		store 0, %2
		br %23
	23:
		%24 = load %2
		%25 = load %5
		%26 = icmp slt %24 %25
		br %26, %27, %48
	27:
		store 0, %3
		br %28
	28:
		%29 = load %3
		%30 = load %6
		%31 = icmp slt %29 %30
		br %31, %32, %45
	32:
		%33 = load %3
		%34 = add i32 %33, 1
		store %34, %3
		%35 = load %2
		store %35, %4
		br %36
	36:
		%37 = load %4
		%38 = load %7
		%39 = icmp slt %37 %38
		br %39, %40, %43
	40:
		%41 = load %4
		%42 = add i32 %41, 1
		store %42, %4
		br %36
	43:
		%44 = load %4
		store %44, %2
		br %28
	45:
		%46 = load %2
		%47 = add i32 %46, 1
		store %47, %2
		br %23
	48:
		br %49
	49:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 6 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 39 rulesP rules:
f_1543(v12389, v12390, v12391, v12392, v12393, v12394, v12395, v12396, v12397, v12398, v12399, v12400, 0, 1, v12403, v12404, v12405, v12406, v12407, v12408, v12409, v12410, v12411, v12412, 3, 2, 4) -> f_1544(v12389, v12390, v12391, v12392, v12393, v12394, v12395, v12396, v12397, v12398, v12399, v12400, 0, 1, v12403, v12404, v12405, v12406, v12407, v12408, v12409, v12410, v12411, v12412, 3, 2, 4) :|: 0 = 0
f_1544(v12389, v12390, v12391, v12392, v12393, v12394, v12395, v12396, v12397, v12398, v12399, v12400, 0, 1, v12403, v12404, v12405, v12406, v12407, v12408, v12409, v12410, v12411, v12412, 3, 2, 4) -> f_1545(v12389, v12390, v12391, v12392, v12393, v12394, v12395, v12396, v12397, v12398, v12399, v12400, 0, 1, v12403, v12404, v12405, v12406, v12407, v12408, v12409, v12410, v12411, v12412, 3, 2, 4) :|: 0 = 0
f_1545(v12389, v12390, v12391, v12392, v12393, v12394, v12395, v12396, v12397, v12398, v12399, v12400, 0, 1, v12403, v12404, v12405, v12406, v12407, v12408, v12409, v12410, v12411, v12412, 3, 2, 4) -> f_1546(v12389, v12390, v12391, v12392, v12393, v12394, v12395, v12396, v12397, v12398, v12399, v12400, 0, 1, v12403, v12404, v12405, v12406, v12407, v12408, v12409, v12410, v12411, v12412, 3, 2, 4) :|: TRUE
f_1546(v12389, v12390, v12391, v12392, v12393, v12394, v12395, v12396, v12397, v12398, v12399, v12400, 0, 1, v12403, v12404, v12405, v12406, v12407, v12408, v12409, v12410, v12411, v12412, 3, 2, 4) -> f_1547(v12389, v12390, v12391, v12392, v12393, v12394, v12395, v12396, v12397, v12398, v12399, v12400, 0, 1, v12403, 0, v12404, v12400, v12405, v12405, v12406, v12407, v12408, v12409, v12410, v12411, v12412, 3, 2, 4) :|: TRUE
f_1547(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12506, v12507, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1548(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12507, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: 0 = 0
f_1548(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12507, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1549(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: v12517 = 1 + v12505 && 1 <= v12517
f_1549(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1550(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: TRUE
f_1550(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1551(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: 0 = 0
f_1551(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1552(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: TRUE
f_1552(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1553(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: TRUE
f_1553(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1554(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: 0 = 0
f_1554(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1555(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: 0 = 0
f_1555(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1556(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: 0 = 0
f_1556(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1557(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: TRUE
f_1557(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12508, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1558(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: 0 = 0
f_1558(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1559(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: TRUE
f_1559(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1560(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: TRUE
f_1560(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12505, v12517, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1561(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12517, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: 0 = 0
f_1561(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12517, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1562(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12517, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: 0 = 0
f_1562(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12517, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1563(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12517, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: v12517 < v12501 && 2 <= v12501
f_1562(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12517, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1564(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12504, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: v12501 <= v12517 && v12501 = v12517
f_1563(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12517, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1565(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12517, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: 0 = 0
f_1565(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12517, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1567(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12517, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: TRUE
f_1567(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12517, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1547(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12501, 0, 1, v12504, v12517, v12505, v12517, v12504, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: TRUE
f_1564(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12504, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1566(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12504, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: 0 = 0
f_1566(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12504, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1568(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12504, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: TRUE
f_1568(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12504, v12505, v12509, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1569(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12504, v12505, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: 0 = 0
f_1569(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12504, v12505, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1570(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12504, v12505, v12844, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: v12844 = 1 + v12504 && 2 <= v12844
f_1570(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12504, v12505, v12844, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1571(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12504, v12505, v12844, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: TRUE
f_1571(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12504, v12505, v12844, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1572(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12504, v12505, v12844, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: TRUE
f_1572(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12504, v12505, v12844, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1573(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12844, v12505, v12504, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: 0 = 0
f_1573(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12844, v12505, v12504, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1574(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12844, v12505, v12504, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: 0 = 0
f_1574(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12844, v12505, v12504, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) -> f_1575(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12844, v12505, v12504, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 4, 2) :|: v12844 < v12500 && 3 <= v12500
f_1575(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12844, v12505, v12504, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 4, 2) -> f_1577(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12844, v12505, v12504, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 4, 2) :|: 0 = 0
f_1577(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12844, v12505, v12504, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 4, 2) -> f_1579(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12844, v12505, v12504, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 4, 2) :|: TRUE
f_1579(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12844, v12505, v12504, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 4, 2) -> f_1581(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12844, v12505, v12504, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 4, 2) :|: TRUE
f_1581(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12844, v12505, v12504, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 4, 2) -> f_1583(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12844, v12505, v12504, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 4, 2) :|: TRUE
f_1583(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12844, v12505, v12504, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 4, 2) -> f_1542(v12490, v12491, v12492, v12493, v12494, v12495, v12496, v12497, v12498, v12499, v12500, v12517, 0, 1, v12844, v12505, v12504, v12510, v12511, v12512, v12513, v12514, v12515, v12516, 3, 2, 4) :|: TRUE
f_1542(v12389, v12390, v12391, v12392, v12393, v12394, v12395, v12396, v12397, v12398, v12399, v12400, 0, 1, v12403, v12404, v12405, v12406, v12407, v12408, v12409, v12410, v12411, v12412, 3, 2, 4) -> f_1543(v12389, v12390, v12391, v12392, v12393, v12394, v12395, v12396, v12397, v12398, v12399, v12400, 0, 1, v12403, v12404, v12405, v12406, v12407, v12408, v12409, v12410, v12411, v12412, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_1562(v12490:0, v12491:0, v12492:0, v12493:0, v12494:0, v12495:0, v12496:0, v12497:0, v12498:0, v12499:0, v12500:0, v12501:0, 0, 1, v12504:0, v12501:0, v12505:0, v12509:0, v12510:0, v12511:0, v12512:0, v12513:0, v12514:0, v12515:0, v12516:0, 3, 2, 4) -> f_1562(v12490:0, v12491:0, v12492:0, v12493:0, v12494:0, v12495:0, v12496:0, v12497:0, v12498:0, v12499:0, v12500:0, v12501:0, 0, 1, 1 + v12504:0, 1, 0, v12504:0, v12510:0, v12511:0, v12512:0, v12513:0, v12514:0, v12515:0, v12516:0, 3, 2, 4) :|: v12504:0 > 0 && v12500:0 > 1 + v12504:0 && v12500:0 > 2
f_1562(v12490:0, v12491:0, v12492:0, v12493:0, v12494:0, v12495:0, v12496:0, v12497:0, v12498:0, v12499:0, v12500:0, v12501:0, 0, 1, v12504:0, v12517:0, v12505:0, v12509:0, v12510:0, v12511:0, v12512:0, v12513:0, v12514:0, v12515:0, v12516:0, 3, 2, 4) -> f_1562(v12490:0, v12491:0, v12492:0, v12493:0, v12494:0, v12495:0, v12496:0, v12497:0, v12498:0, v12499:0, v12500:0, v12501:0, 0, 1, v12504:0, 1 + v12517:0, v12517:0, v12509:0, v12510:0, v12511:0, v12512:0, v12513:0, v12514:0, v12515:0, v12516:0, 3, 2, 4) :|: v12517:0 > -1 && v12517:0 < v12501:0 && v12501:0 > 1
Filtered unneeded arguments:
   f_1562(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_1562(x11, x12, x15, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_1562(v12500:0, v12501:0, v12504:0, v12501:01) -> f_1562(v12500:0, v12501:0, 1 + v12504:0, 1) :|: v12500:0 > 1 + v12504:0 && v12500:0 > 2 && v12504:0 > 0 && v12501:0 = v12501:01
f_1562(v12500:0, v12501:0, v12504:0, v12517:0) -> f_1562(v12500:0, v12501:0, v12504:0, 1 + v12517:0) :|: v12517:0 < v12501:0 && v12501:0 > 1 && v12517:0 > -1

----------------------------------------

(9)
Obligation:
Rules:
f_1562(v12500:0, v12501:0, v12504:0, v12501:01) -> f_1562(v12500:0, v12501:0, 1 + v12504:0, 1) :|: v12500:0 > 1 + v12504:0 && v12500:0 > 2 && v12504:0 > 0 && v12501:0 = v12501:01
f_1562(x, x1, x2, x3) -> f_1562(x, x1, x2, 1 + x3) :|: x3 < x1 && x1 > 1 && x3 > -1

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_1562(x:0, x1:0, x2:0, x3:0) -> f_1562(x:0, x1:0, x2:0, 1 + x3:0) :|: x3:0 < x1:0 && x1:0 > 1 && x3:0 > -1
f_1562(v12500:0:0, v12501:01:0, v12504:0:0, v12501:01:01) -> f_1562(v12500:0:0, v12501:01:0, 1 + v12504:0:0, 1) :|: v12500:0:0 > 1 + v12504:0:0 && v12500:0:0 > 2 && v12504:0:0 > 0 && v12501:01:0 = v12501:01:01

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1562(x, x1, x2, x3)] = -1 + x - x2

The following rules are decreasing:
f_1562(v12500:0:0, v12501:01:0, v12504:0:0, v12501:01:01) -> f_1562(v12500:0:0, v12501:01:0, 1 + v12504:0:0, 1) :|: v12500:0:0 > 1 + v12504:0:0 && v12500:0:0 > 2 && v12504:0:0 > 0 && v12501:01:0 = v12501:01:01
The following rules are bounded:
f_1562(v12500:0:0, v12501:01:0, v12504:0:0, v12501:01:01) -> f_1562(v12500:0:0, v12501:01:0, 1 + v12504:0:0, 1) :|: v12500:0:0 > 1 + v12504:0:0 && v12500:0:0 > 2 && v12504:0:0 > 0 && v12501:01:0 = v12501:01:01

----------------------------------------

(13)
Obligation:
Rules:
f_1562(x:0, x1:0, x2:0, x3:0) -> f_1562(x:0, x1:0, x2:0, 1 + x3:0) :|: x3:0 < x1:0 && x1:0 > 1 && x3:0 > -1

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_1562(x:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_1562(x:0:0, x1:0:0, x2:0:0, 1 + x3:0:0) :|: x3:0:0 < x1:0:0 && x1:0:0 > 1 && x3:0:0 > -1

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1562(x1, x2, x3, x4) -> f_1562(x2, x4)

----------------------------------------

(17)
Obligation:
Rules:
f_1562(x1:0:0, x3:0:0) -> f_1562(x1:0:0, 1 + x3:0:0) :|: x3:0:0 < x1:0:0 && x1:0:0 > 1 && x3:0:0 > -1

----------------------------------------

(18) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1562 ] = -1*f_1562_2 + f_1562_1

The following rules are decreasing:
f_1562(x1:0:0, x3:0:0) -> f_1562(x1:0:0, 1 + x3:0:0) :|: x3:0:0 < x1:0:0 && x1:0:0 > 1 && x3:0:0 > -1

The following rules are bounded:
f_1562(x1:0:0, x3:0:0) -> f_1562(x1:0:0, 1 + x3:0:0) :|: x3:0:0 < x1:0:0 && x1:0:0 > 1 && x3:0:0 > -1


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 39 rulesP rules:
f_1342(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9029, v9030, v9031, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1344(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, v9030, v9031, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: v9065 = 1 + v9027 && 1 <= v9065
f_1344(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, v9030, v9031, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1346(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, v9030, v9031, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: TRUE
f_1346(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, v9030, v9031, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1348(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, v9031, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: 0 = 0
f_1348(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, v9031, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1350(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, v9031, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: TRUE
f_1350(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, v9031, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1352(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, v9031, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: TRUE
f_1352(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, v9031, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1354(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, 0, v9033, v9031, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: 0 = 0
f_1354(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, 0, v9033, v9031, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1356(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, 0, v9033, v9031, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: 0 = 0
f_1356(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, 0, v9033, v9031, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1358(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, 0, v9033, v9031, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: 0 = 0
f_1358(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, 0, v9033, v9031, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1360(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, 0, v9033, v9031, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: TRUE
f_1360(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, 0, v9033, v9031, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1362(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: 0 = 0
f_1362(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1364(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: TRUE
f_1364(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1366(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: TRUE
f_1366(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9065, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1369(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9065, v9027, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: 0 = 0
f_1369(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9065, v9027, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1372(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9065, v9027, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: 0 = 0
f_1372(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9065, v9027, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1375(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9065, v9027, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: v9065 < v9023 && 2 <= v9023
f_1372(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9065, v9027, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1376(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9026, v9027, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: v9023 <= v9065 && v9023 = v9065
f_1375(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9065, v9027, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1378(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9065, v9027, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: 0 = 0
f_1378(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9065, v9027, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1381(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9065, v9027, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: TRUE
f_1381(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9065, v9027, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1340(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9065, v9027, v9065, v9026, v9026, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: TRUE
f_1340(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9028, v9029, v9030, v9031, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1342(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9023, v9024, 1, v9026, v9027, v9029, v9030, v9031, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: 0 = 0
f_1376(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9026, v9027, 0, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1379(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9026, 0, v9027, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: 0 = 0
f_1379(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9026, 0, v9027, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1382(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9026, 0, v9027, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: TRUE
f_1382(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9026, 0, v9027, v9033, v9034, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1384(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9026, 0, v9027, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: 0 = 0
f_1384(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9026, 0, v9027, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1386(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9026, 0, v9027, v9033, v9715, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: v9715 = 1 + v9026 && 3 <= v9715
f_1386(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9026, 0, v9027, v9033, v9715, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1388(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9026, 0, v9027, v9033, v9715, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: TRUE
f_1388(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9026, 0, v9027, v9033, v9715, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1390(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9026, 0, v9027, v9033, v9715, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: TRUE
f_1390(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9026, 0, v9027, v9033, v9715, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1393(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9715, 0, v9027, v9026, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: 0 = 0
f_1393(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9715, 0, v9027, v9026, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1396(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9715, 0, v9027, v9026, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: 0 = 0
f_1396(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9715, 0, v9027, v9026, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) -> f_1399(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9715, 0, v9027, v9026, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 4, 2) :|: v9715 < v9022 && 4 <= v9022
f_1399(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9715, 0, v9027, v9026, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 4, 2) -> f_1403(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9715, 0, v9027, v9026, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 4, 2) :|: 0 = 0
f_1403(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9715, 0, v9027, v9026, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 4, 2) -> f_1407(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9715, 0, v9027, v9026, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 4, 2) :|: TRUE
f_1407(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9715, 0, v9027, v9026, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 4, 2) -> f_1410(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9715, 0, v9027, v9026, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 4, 2) :|: TRUE
f_1410(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9715, 0, v9027, v9026, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 4, 2) -> f_1413(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9715, 0, v9027, v9026, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 4, 2) :|: TRUE
f_1413(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9715, 0, v9027, v9026, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 4, 2) -> f_1414(v9012, v9013, v9014, v9015, v9016, v9017, v9018, v9019, v9020, v9021, v9022, v9065, v9024, 1, v9715, 0, v9027, v9026, v9026, v9033, v9035, v9036, v9037, v9038, v9039, v9040, v9041, 3, 2, 4) :|: TRUE
f_1414(v10263, v10264, v10265, v10266, v10267, v10268, v10269, v10270, v10271, v10272, v10273, v10274, v10275, 1, v10277, 0, v10279, v10280, v10281, v10282, v10283, v10284, v10285, v10286, v10287, v10288, v10289, 3, 2, 4) -> f_1416(v10263, v10264, v10265, v10266, v10267, v10268, v10269, v10270, v10271, v10272, v10273, v10274, v10275, 1, v10277, 0, v10279, v10280, v10281, v10282, v10283, v10284, v10285, v10286, v10287, v10288, v10289, 3, 2, 4) :|: 0 = 0
f_1416(v10263, v10264, v10265, v10266, v10267, v10268, v10269, v10270, v10271, v10272, v10273, v10274, v10275, 1, v10277, 0, v10279, v10280, v10281, v10282, v10283, v10284, v10285, v10286, v10287, v10288, v10289, 3, 2, 4) -> f_1419(v10263, v10264, v10265, v10266, v10267, v10268, v10269, v10270, v10271, v10272, v10273, v10274, v10275, 1, v10277, 0, v10279, v10280, v10281, v10282, v10283, v10284, v10285, v10286, v10287, v10288, v10289, 3, 2, 4) :|: 0 = 0
f_1419(v10263, v10264, v10265, v10266, v10267, v10268, v10269, v10270, v10271, v10272, v10273, v10274, v10275, 1, v10277, 0, v10279, v10280, v10281, v10282, v10283, v10284, v10285, v10286, v10287, v10288, v10289, 3, 2, 4) -> f_1421(v10263, v10264, v10265, v10266, v10267, v10268, v10269, v10270, v10271, v10272, v10273, v10274, v10275, 1, v10277, 0, v10279, v10280, v10281, v10282, v10283, v10284, v10285, v10286, v10287, v10288, v10289, 3, 2, 4) :|: 0 = 0
f_1421(v10263, v10264, v10265, v10266, v10267, v10268, v10269, v10270, v10271, v10272, v10273, v10274, v10275, 1, v10277, 0, v10279, v10280, v10281, v10282, v10283, v10284, v10285, v10286, v10287, v10288, v10289, 3, 2, 4) -> f_1423(v10263, v10264, v10265, v10266, v10267, v10268, v10269, v10270, v10271, v10272, v10273, v10274, v10275, 1, v10277, 0, v10279, v10280, v10281, v10282, v10283, v10284, v10285, v10286, v10287, v10288, v10289, 3, 2, 4) :|: TRUE
f_1423(v10263, v10264, v10265, v10266, v10267, v10268, v10269, v10270, v10271, v10272, v10273, v10274, v10275, 1, v10277, 0, v10279, v10280, v10281, v10282, v10283, v10284, v10285, v10286, v10287, v10288, v10289, 3, 2, 4) -> f_1340(v10263, v10264, v10265, v10266, v10267, v10268, v10269, v10270, v10271, v10272, v10273, v10274, v10275, 1, v10277, 0, v10279, v10274, v10280, v10281, 0, v10282, v10281, v10283, v10284, v10285, v10286, v10287, v10288, v10289, 3, 2, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_1342(v9012:0, v9013:0, v9014:0, v9015:0, v9016:0, v9017:0, v9018:0, v9019:0, v9020:0, v9021:0, v9022:0, v9023:0, v9024:0, 1, v9026:0, v9027:0, v9029:0, v9030:0, v9031:0, 0, v9033:0, v9034:0, v9035:0, v9036:0, v9037:0, v9038:0, v9039:0, v9040:0, v9041:0, 3, 2, 4) -> f_1342(v9012:0, v9013:0, v9014:0, v9015:0, v9016:0, v9017:0, v9018:0, v9019:0, v9020:0, v9021:0, v9022:0, v9023:0, v9024:0, 1, v9026:0, 1 + v9027:0, 1 + v9027:0, v9026:0, v9026:0, 0, v9033:0, v9034:0, v9035:0, v9036:0, v9037:0, v9038:0, v9039:0, v9040:0, v9041:0, 3, 2, 4) :|: v9027:0 > -1 && v9023:0 > 1 + v9027:0 && v9023:0 > 1
f_1342(v9012:0, v9013:0, v9014:0, v9015:0, v9016:0, v9017:0, v9018:0, v9019:0, v9020:0, v9021:0, v9022:0, 1 + v9027:0, v9024:0, 1, v9026:0, v9027:0, v9029:0, v9030:0, v9031:0, 0, v9033:0, v9034:0, v9035:0, v9036:0, v9037:0, v9038:0, v9039:0, v9040:0, v9041:0, 3, 2, 4) -> f_1342(v9012:0, v9013:0, v9014:0, v9015:0, v9016:0, v9017:0, v9018:0, v9019:0, v9020:0, v9021:0, v9022:0, 1 + v9027:0, v9024:0, 1, 1 + v9026:0, 0, 1 + v9027:0, v9026:0, v9026:0, 0, v9033:0, v9026:0, v9035:0, v9036:0, v9037:0, v9038:0, v9039:0, v9040:0, v9041:0, 3, 2, 4) :|: v9027:0 > -1 && v9026:0 > 1 && v9022:0 > 1 + v9026:0 && v9022:0 > 3
Filtered unneeded arguments:
   f_1342(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32) -> f_1342(x11, x12, x15, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_1342(v9022:0, v9023:0, v9026:0, v9027:0) -> f_1342(v9022:0, v9023:0, v9026:0, 1 + v9027:0) :|: v9023:0 > 1 + v9027:0 && v9023:0 > 1 && v9027:0 > -1
f_1342(v9022:0, sum~cons_1~v9027:0, v9026:0, v9027:0) -> f_1342(v9022:0, 1 + v9027:0, 1 + v9026:0, 0) :|: v9026:0 > 1 && v9027:0 > -1 && v9022:0 > 3 && v9022:0 > 1 + v9026:0 && sum~cons_1~v9027:0 = 1 + v9027:0

----------------------------------------

(22)
Obligation:
Rules:
f_1342(v9022:0, v9023:0, v9026:0, v9027:0) -> f_1342(v9022:0, v9023:0, v9026:0, 1 + v9027:0) :|: v9023:0 > 1 + v9027:0 && v9023:0 > 1 && v9027:0 > -1
f_1342(x, x1, x2, x3) -> f_1342(x, 1 + x3, 1 + x2, 0) :|: x2 > 1 && x3 > -1 && x > 3 && x > 1 + x2 && x1 = 1 + x3

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_1342(v9022:0:0, v9023:0:0, v9026:0:0, v9027:0:0) -> f_1342(v9022:0:0, v9023:0:0, v9026:0:0, 1 + v9027:0:0) :|: v9023:0:0 > 1 + v9027:0:0 && v9023:0:0 > 1 && v9027:0:0 > -1
f_1342(x:0, sum~cons_1~x3:0, x2:0, x3:0) -> f_1342(x:0, 1 + x3:0, 1 + x2:0, 0) :|: x:0 > 3 && x:0 > 1 + x2:0 && x3:0 > -1 && x2:0 > 1 && sum~cons_1~x3:0 = 1 + x3:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1342(x, x1, x2, x3)] = -2 + x - x2

The following rules are decreasing:
f_1342(x:0, sum~cons_1~x3:0, x2:0, x3:0) -> f_1342(x:0, 1 + x3:0, 1 + x2:0, 0) :|: x:0 > 3 && x:0 > 1 + x2:0 && x3:0 > -1 && x2:0 > 1 && sum~cons_1~x3:0 = 1 + x3:0
The following rules are bounded:
f_1342(x:0, sum~cons_1~x3:0, x2:0, x3:0) -> f_1342(x:0, 1 + x3:0, 1 + x2:0, 0) :|: x:0 > 3 && x:0 > 1 + x2:0 && x3:0 > -1 && x2:0 > 1 && sum~cons_1~x3:0 = 1 + x3:0

----------------------------------------

(26)
Obligation:
Rules:
f_1342(v9022:0:0, v9023:0:0, v9026:0:0, v9027:0:0) -> f_1342(v9022:0:0, v9023:0:0, v9026:0:0, 1 + v9027:0:0) :|: v9023:0:0 > 1 + v9027:0:0 && v9023:0:0 > 1 && v9027:0:0 > -1

----------------------------------------

(27) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(28)
Obligation:
Rules:
f_1342(v9022:0:0:0, v9023:0:0:0, v9026:0:0:0, v9027:0:0:0) -> f_1342(v9022:0:0:0, v9023:0:0:0, v9026:0:0:0, 1 + v9027:0:0:0) :|: v9023:0:0:0 > 1 + v9027:0:0:0 && v9023:0:0:0 > 1 && v9027:0:0:0 > -1

----------------------------------------

(29) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1342(x1, x2, x3, x4) -> f_1342(x2, x4)

----------------------------------------

(30)
Obligation:
Rules:
f_1342(v9023:0:0:0, v9027:0:0:0) -> f_1342(v9023:0:0:0, 1 + v9027:0:0:0) :|: v9023:0:0:0 > 1 + v9027:0:0:0 && v9023:0:0:0 > 1 && v9027:0:0:0 > -1

----------------------------------------

(31) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1342 ] = f_1342_1 + -1*f_1342_2

The following rules are decreasing:
f_1342(v9023:0:0:0, v9027:0:0:0) -> f_1342(v9023:0:0:0, 1 + v9027:0:0:0) :|: v9023:0:0:0 > 1 + v9027:0:0:0 && v9023:0:0:0 > 1 && v9027:0:0:0 > -1

The following rules are bounded:
f_1342(v9023:0:0:0, v9027:0:0:0) -> f_1342(v9023:0:0:0, 1 + v9027:0:0:0) :|: v9023:0:0:0 > 1 + v9027:0:0:0 && v9023:0:0:0 > 1 && v9027:0:0:0 > -1


----------------------------------------

(32)
YES

----------------------------------------

(33)
Obligation:
SCC
----------------------------------------

(34) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_980(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4289, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 4) -> f_983(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4289, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 4) :|: 0 = 0
f_983(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4289, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 4) -> f_986(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4289, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: v4290 < v4285 && 2 <= v4285
f_986(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4289, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_989(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4289, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: 0 = 0
f_989(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4289, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_992(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4289, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: TRUE
f_992(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4289, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_995(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: 0 = 0
f_995(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_998(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: v4423 = 1 + v4290 && 2 <= v4423
f_998(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_1001(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: TRUE
f_1001(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_1004(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: 0 = 0
f_1004(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_1007(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: TRUE
f_1007(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_1010(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: TRUE
f_1010(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_1013(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: 0 = 0
f_1013(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_1017(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: 0 = 0
f_1017(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_1021(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: 0 = 0
f_1021(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_1025(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: TRUE
f_1025(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_1029(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: 0 = 0
f_1029(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_1032(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: TRUE
f_1032(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_1035(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) :|: TRUE
f_1035(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 2, 4) -> f_977(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4423, v4286, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 4) :|: TRUE
f_977(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4289, v4290, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 4) -> f_980(v4274, v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282, v4283, v4284, v4285, v4286, 1, 0, v4290, v4289, v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298, v4299, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_980(v4274:0, v4275:0, v4276:0, v4277:0, v4278:0, v4279:0, v4280:0, v4281:0, v4282:0, v4283:0, v4284:0, v4285:0, v4286:0, 1, 0, v4290:0, v4289:0, v4291:0, v4292:0, v4293:0, v4294:0, v4295:0, v4296:0, v4297:0, v4298:0, v4299:0, 3, 4) -> f_980(v4274:0, v4275:0, v4276:0, v4277:0, v4278:0, v4279:0, v4280:0, v4281:0, v4282:0, v4283:0, v4284:0, v4285:0, v4286:0, 1, 0, 1 + v4290:0, v4290:0, v4286:0, v4292:0, v4293:0, v4294:0, v4295:0, v4296:0, v4297:0, v4298:0, v4299:0, 3, 4) :|: v4285:0 > 1 && v4290:0 > 0 && v4290:0 < v4285:0
Filtered unneeded arguments:
   f_980(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_980(x12, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_980(v4285:0, v4290:0) -> f_980(v4285:0, 1 + v4290:0) :|: v4290:0 > 0 && v4290:0 < v4285:0 && v4285:0 > 1

----------------------------------------

(35)
Obligation:
Rules:
f_980(v4285:0, v4290:0) -> f_980(v4285:0, 1 + v4290:0) :|: v4290:0 > 0 && v4290:0 < v4285:0 && v4285:0 > 1

----------------------------------------

(36) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(37)
Obligation:
Rules:
f_980(v4285:0:0, v4290:0:0) -> f_980(v4285:0:0, 1 + v4290:0:0) :|: v4290:0:0 > 0 && v4290:0:0 < v4285:0:0 && v4285:0:0 > 1

----------------------------------------

(38) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_980(x, x1)] = x - x1

The following rules are decreasing:
f_980(v4285:0:0, v4290:0:0) -> f_980(v4285:0:0, 1 + v4290:0:0) :|: v4290:0:0 > 0 && v4290:0:0 < v4285:0:0 && v4285:0:0 > 1
The following rules are bounded:
f_980(v4285:0:0, v4290:0:0) -> f_980(v4285:0:0, 1 + v4290:0:0) :|: v4290:0:0 > 0 && v4290:0:0 < v4285:0:0 && v4285:0:0 > 1

----------------------------------------

(39)
YES

----------------------------------------

(40)
Obligation:
SCC
----------------------------------------

(41) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_789(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2523, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 4) -> f_791(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2523, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 4) :|: 0 = 0
f_791(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2523, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 4) -> f_794(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2523, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: v2524 < v2520 && 2 <= v2520
f_794(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2523, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_798(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2523, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: 0 = 0
f_798(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2523, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_802(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2523, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: TRUE
f_802(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2523, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_806(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: 0 = 0
f_806(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_810(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: v2627 = 1 + v2524 && 2 <= v2627
f_810(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_814(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: TRUE
f_814(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_818(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: 0 = 0
f_818(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_822(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: TRUE
f_822(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_826(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: TRUE
f_826(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_831(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: 0 = 0
f_831(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_837(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: 0 = 0
f_837(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_843(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: 0 = 0
f_843(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_849(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: TRUE
f_849(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_854(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: 0 = 0
f_854(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_858(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: TRUE
f_858(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_862(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) :|: TRUE
f_862(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 2, 4) -> f_787(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2627, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 4) :|: TRUE
f_787(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2523, v2524, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 4) -> f_789(v2509, v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519, v2520, 0, 1, v2524, v2523, v2525, v2526, v2527, v2528, v2529, v2530, v2531, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_789(v2509:0, v2510:0, v2511:0, v2512:0, v2513:0, v2514:0, v2515:0, v2516:0, v2517:0, v2518:0, v2519:0, v2520:0, 0, 1, v2524:0, v2523:0, v2525:0, v2526:0, v2527:0, v2528:0, v2529:0, v2530:0, v2531:0, 3, 4) -> f_789(v2509:0, v2510:0, v2511:0, v2512:0, v2513:0, v2514:0, v2515:0, v2516:0, v2517:0, v2518:0, v2519:0, v2520:0, 0, 1, 1 + v2524:0, v2524:0, v2525:0, v2526:0, v2527:0, v2528:0, v2529:0, v2530:0, v2531:0, 3, 4) :|: v2520:0 > 1 && v2524:0 > 0 && v2524:0 < v2520:0
Filtered unneeded arguments:
   f_789(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_789(x12, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_789(v2520:0, v2524:0) -> f_789(v2520:0, 1 + v2524:0) :|: v2524:0 > 0 && v2524:0 < v2520:0 && v2520:0 > 1

----------------------------------------

(42)
Obligation:
Rules:
f_789(v2520:0, v2524:0) -> f_789(v2520:0, 1 + v2524:0) :|: v2524:0 > 0 && v2524:0 < v2520:0 && v2520:0 > 1

----------------------------------------

(43) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(44)
Obligation:
Rules:
f_789(v2520:0:0, v2524:0:0) -> f_789(v2520:0:0, 1 + v2524:0:0) :|: v2524:0:0 > 0 && v2524:0:0 < v2520:0:0 && v2520:0:0 > 1

----------------------------------------

(45) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_789 ] = -1*f_789_2 + f_789_1

The following rules are decreasing:
f_789(v2520:0:0, v2524:0:0) -> f_789(v2520:0:0, 1 + v2524:0:0) :|: v2524:0:0 > 0 && v2524:0:0 < v2520:0:0 && v2520:0:0 > 1

The following rules are bounded:
f_789(v2520:0:0, v2524:0:0) -> f_789(v2520:0:0, 1 + v2524:0:0) :|: v2524:0:0 > 0 && v2524:0:0 < v2520:0:0 && v2520:0:0 > 1


----------------------------------------

(46)
YES

----------------------------------------

(47)
Obligation:
SCC
----------------------------------------

(48) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_663(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 4) -> f_670(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 4) :|: 0 = 0
f_670(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 4) -> f_677(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) :|: v1440 < v1435 && 2 <= v1435
f_677(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) -> f_685(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) :|: 0 = 0
f_685(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) -> f_691(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) :|: TRUE
f_691(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) -> f_697(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) :|: TRUE
f_697(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) -> f_703(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) :|: TRUE
f_703(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) -> f_706(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) :|: 0 = 0
f_706(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) -> f_709(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) :|: 0 = 0
f_709(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) -> f_714(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) :|: 0 = 0
f_714(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) -> f_719(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) :|: TRUE
f_719(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) -> f_724(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) :|: 0 = 0
f_724(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) -> f_729(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1995, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) :|: v1995 = 1 + v1440 && 2 <= v1995
f_729(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1995, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) -> f_734(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1995, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) :|: TRUE
f_734(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1995, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) -> f_739(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1995, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) :|: TRUE
f_739(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1995, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 2, 4) -> f_656(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1995, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 4) :|: TRUE
f_656(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 4) -> f_663(v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0, v1437, 1, v1440, v1439, v1441, v1442, v1443, v1444, v1445, v1446, v1447, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_663(v1425:0, v1426:0, v1427:0, v1428:0, v1429:0, v1430:0, v1431:0, v1432:0, v1433:0, v1434:0, v1435:0, 0, v1437:0, 1, v1440:0, v1439:0, v1441:0, v1442:0, v1443:0, v1444:0, v1445:0, v1446:0, v1447:0, 3, 4) -> f_663(v1425:0, v1426:0, v1427:0, v1428:0, v1429:0, v1430:0, v1431:0, v1432:0, v1433:0, v1434:0, v1435:0, 0, v1437:0, 1, 1 + v1440:0, v1440:0, v1441:0, v1442:0, v1443:0, v1444:0, v1445:0, v1446:0, v1447:0, 3, 4) :|: v1435:0 > 1 && v1440:0 > 0 && v1440:0 < v1435:0
Filtered unneeded arguments:
   f_663(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_663(x11, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_663(v1435:0, v1440:0) -> f_663(v1435:0, 1 + v1440:0) :|: v1440:0 > 0 && v1440:0 < v1435:0 && v1435:0 > 1

----------------------------------------

(49)
Obligation:
Rules:
f_663(v1435:0, v1440:0) -> f_663(v1435:0, 1 + v1440:0) :|: v1440:0 > 0 && v1440:0 < v1435:0 && v1435:0 > 1

----------------------------------------

(50) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(51)
Obligation:
Rules:
f_663(v1435:0:0, v1440:0:0) -> f_663(v1435:0:0, 1 + v1440:0:0) :|: v1440:0:0 > 0 && v1440:0:0 < v1435:0:0 && v1435:0:0 > 1

----------------------------------------

(52) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_663 ] = -1*f_663_2 + f_663_1

The following rules are decreasing:
f_663(v1435:0:0, v1440:0:0) -> f_663(v1435:0:0, 1 + v1440:0:0) :|: v1440:0:0 > 0 && v1440:0:0 < v1435:0:0 && v1435:0:0 > 1

The following rules are bounded:
f_663(v1435:0:0, v1440:0:0) -> f_663(v1435:0:0, 1 + v1440:0:0) :|: v1440:0:0 > 0 && v1440:0:0 < v1435:0:0 && v1435:0:0 > 1


----------------------------------------

(53)
YES

----------------------------------------

(54)
Obligation:
SCC
----------------------------------------

(55) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_557(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v988, v990, v991, v992, v993, v994, v995, v996, 3, 4) -> f_561(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v988, v990, v991, v992, v993, v994, v995, v996, 3, 4) :|: 0 = 0
f_561(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v988, v990, v991, v992, v993, v994, v995, v996, 3, 4) -> f_566(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v988, v990, v991, v992, v993, v994, v995, v996, 3, 2, 4) :|: v989 < v985 && 2 <= v985
f_566(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v988, v990, v991, v992, v993, v994, v995, v996, 3, 2, 4) -> f_572(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v988, v990, v991, v992, v993, v994, v995, v996, 3, 2, 4) :|: 0 = 0
f_572(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v988, v990, v991, v992, v993, v994, v995, v996, 3, 2, 4) -> f_579(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v988, v990, v991, v992, v993, v994, v995, v996, 3, 2, 4) :|: TRUE
f_579(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v988, v990, v991, v992, v993, v994, v995, v996, 3, 2, 4) -> f_585(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v990, v991, v992, v993, v994, v995, v996, 3, 2, 4) :|: 0 = 0
f_585(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v990, v991, v992, v993, v994, v995, v996, 3, 2, 4) -> f_590(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v1144, v990, v991, v992, v993, v994, v995, v996, 3, 2, 4) :|: v1144 = 1 + v989 && 2 <= v1144
f_590(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v1144, v990, v991, v992, v993, v994, v995, v996, 3, 2, 4) -> f_596(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v1144, v990, v991, v992, v993, v994, v995, v996, 3, 2, 4) :|: TRUE
f_596(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v1144, v990, v991, v992, v993, v994, v995, v996, 3, 2, 4) -> f_602(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v1144, v990, v991, v992, v993, v994, v995, v996, 3, 2, 4) :|: TRUE
f_602(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v1144, v990, v991, v992, v993, v994, v995, v996, 3, 2, 4) -> f_553(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v1144, v990, v991, v992, v993, v994, v995, v996, 3, 4) :|: TRUE
f_553(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v988, v989, v990, v991, v992, v993, v994, v995, v996, 3, 4) -> f_557(v973, v974, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, 1, 0, v989, v988, v990, v991, v992, v993, v994, v995, v996, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_557(v973:0, v974:0, v975:0, v976:0, v977:0, v978:0, v979:0, v980:0, v981:0, v982:0, v983:0, v984:0, v985:0, 1, 0, v989:0, v988:0, v990:0, v991:0, v992:0, v993:0, v994:0, v995:0, v996:0, 3, 4) -> f_557(v973:0, v974:0, v975:0, v976:0, v977:0, v978:0, v979:0, v980:0, v981:0, v982:0, v983:0, v984:0, v985:0, 1, 0, 1 + v989:0, v989:0, v990:0, v991:0, v992:0, v993:0, v994:0, v995:0, v996:0, 3, 4) :|: v985:0 > 1 && v989:0 > 0 && v989:0 < v985:0
Filtered unneeded arguments:
   f_557(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26) -> f_557(x13, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_557(v985:0, v989:0) -> f_557(v985:0, 1 + v989:0) :|: v989:0 > 0 && v989:0 < v985:0 && v985:0 > 1

----------------------------------------

(56)
Obligation:
Rules:
f_557(v985:0, v989:0) -> f_557(v985:0, 1 + v989:0) :|: v989:0 > 0 && v989:0 < v985:0 && v985:0 > 1

----------------------------------------

(57) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(58)
Obligation:
Rules:
f_557(v985:0:0, v989:0:0) -> f_557(v985:0:0, 1 + v989:0:0) :|: v989:0:0 > 0 && v989:0:0 < v985:0:0 && v985:0:0 > 1

----------------------------------------

(59) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_557(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_557(v985:0:0, v989:0:0) -> f_557(v985:0:0, 1 + v989:0:0) :|: v989:0:0 > 0 && v989:0:0 < v985:0:0 && v985:0:0 > 1
The following rules are bounded:
f_557(v985:0:0, v989:0:0) -> f_557(v985:0:0, 1 + v989:0:0) :|: v989:0:0 > 0 && v989:0:0 < v985:0:0 && v985:0:0 > 1

----------------------------------------

(60)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
