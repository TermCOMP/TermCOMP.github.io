MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/S28fI.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 67 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/S28fI.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/S28fI.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

union.__CS__u --> BasicStructureType(elementType: [3 x i32])

Global variables:

Name: __CS_round initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __CS_ret initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __CS_ret_PREEMPTED initVal: 1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __CS_ret_ERROR initVal: 2 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __CS_ret_FINISHED initVal: 4 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __CS_error initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __THREAD_UNUSED initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __THREAD_RUNNING initVal: 1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __THREAD_FINISHED initVal: 2 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __CS_thread_index initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_thread_lockedon initVal: ((null,null,null),(null,null,null),(null,null,null)) type: [3 x [3 x *i8]] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_thread_status initVal: ((0,0,0),(0,0,0),(0,0,0)) type: [3 x [3 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_thread_allocated initVal: (0,0,0) type: [3 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_thread_born_round initVal: (0,0,0) type: [3 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_thread initVal: (null,null,null) type: [3 x *BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8)] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: flag1 initVal: (0,0,0) type: [3 x i32] addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: flag2 initVal: (0,0,0) type: [3 x i32] addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: turn initVal: (0,0,0) type: [3 x i32] addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: x initVal: (0,0,0) type: [3 x i32] addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_u initVal: {(0,0,0)} type: BasicTypeName typeName: union.__CS__uBasicStructureType(elementType: [3 x i32]) addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "exit" returnParam: BasicVoidType parameters: (i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 71
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		Unnamed Call-Instruction = call BasicVoidType @exit(i32 0)
		unreachable
	6:
		ret void

*BasicFunctionTypename: "__VERIFIER_assert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 81
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %7, %5
	5:
		br %6
	6:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	7:
		ret void

*BasicFunctionTypename: "__CS_cs" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 94
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @__CS_round
		%3 = zext i8 %2 to i32
		%4 = load %1
		%5 = zext i8 %4 to i32
		%6 = add i32 %3, %5
		%7 = icmp slt %6 3
		%8 = zext i1 %7 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %8)
		%9 = load %1
		%10 = zext i8 %9 to i32
		%11 = load @__CS_round
		%12 = zext i8 %11 to i32
		%13 = add i32 %12, %10
		%14 = trunc i32 %13 to i8
		store %14, @__CS_round
		%15 = call i32 (...)* @nondet_int()
		%16 = icmp ne %15 0
		br %16, %17, %22
	17:
		%18 = load @__CS_round
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 2
		br %20, %21, %22
	21:
		br %25
	22:
		%23 = load @__CS_ret
		%24 = zext i8 %23 to i32
		br %25
	25:
		%26 = phi [1, %21], [%24, %22]
		%27 = trunc i32 %26 to i8
		store %27, @__CS_ret
		ret void

*BasicFunctionTypename: "__CS_pthread_mutex_init" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 114
	0:
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		ret 0

*BasicFunctionTypename: "__CS_pthread_mutex_destroy" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 122
	0:
		%2 = alloca *i8, align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		%3 = load %2
		%4 = load %3
		%5 = zext i8 %4 to i32
		%6 = load @__CS_thread_index
		%7 = zext i8 %6 to i32
		%8 = icmp ne %5 %7
		br %8, %9, %15
	9:
		%10 = load %2
		%11 = load %10
		%12 = zext i8 %11 to i32
		%13 = icmp ne %12 0
		br %13, %14, %15
	14:
		store 1, @__CS_error
		store 2, @__CS_ret
		br %17
	15:
		%16 = load %2
		store 0, %16
		br %17
	17:
		ret 0

*BasicFunctionTypename: "__CS_pthread_mutex_lock" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 144
	0:
		%2 = alloca i32, align 4
		%3 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%4 = load %3
		%5 = load %4
		%6 = zext i8 %5 to i32
		%7 = icmp eq %6 0
		br %7, %8, %14
	8:
		%9 = load @__CS_thread_index
		%10 = zext i8 %9 to i32
		%11 = add i32 %10, 1
		%12 = trunc i32 %11 to i8
		%13 = load %3
		store %12, %13
		br %15
	14:
		store 1, @__CS_ret
		store 1, %2
		br %16
	15:
		store 0, %2
		br %16
	16:
		%17 = load %2
		ret %17

*BasicFunctionTypename: "__CS_pthread_mutex_unlock" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 163
	0:
		%2 = alloca i32, align 4
		%3 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%4 = load %3
		%5 = load %4
		%6 = zext i8 %5 to i32
		%7 = load @__CS_thread_index
		%8 = zext i8 %7 to i32
		%9 = add i32 %8, 1
		%10 = icmp ne %6 %9
		br %10, %11, %12
	11:
		store 1, @__CS_error
		store 2, @__CS_ret
		store 1, %2
		br %15
	12:
		%13 = load %3
		store 0, %13
		br %14
	14:
		store 0, %2
		br %15
	15:
		%16 = load %2
		ret %16

*BasicFunctionTypename: "__CS_pthread_cond_init" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 181
	0:
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		ret 0

*BasicFunctionTypename: "__CS_pthread_cond_signal" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 187
	0:
		%2 = alloca *i8, align 8
		%3 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %3
		br %4
	4:
		%5 = load %3
		%6 = icmp sle %5 2
		br %6, %7, %28
	7:
		%8 = load @__CS_round
		%9 = zext i8 %8 to i64
		%10 = getelementptr @__CS_thread_lockedon, 0, %9
		%11 = load %3
		%12 = sext i32 %11 to i64
		%13 = getelementptr %10, 0, %12
		%14 = load %13
		%15 = load %2
		%16 = icmp eq %14 %15
		br %16, %17, %24
	17:
		%18 = load @__CS_round
		%19 = zext i8 %18 to i64
		%20 = getelementptr @__CS_thread_lockedon, 0, %19
		%21 = load %3
		%22 = sext i32 %21 to i64
		%23 = getelementptr %20, 0, %22
		store null, %23
		br %24
	24:
		br %25
	25:
		%26 = load %3
		%27 = add i32 %26, 1
		store %27, %3
		br %4
	28:
		ret 0

*BasicFunctionTypename: "__CS_pthread_cond_broadcast" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 215
	0:
		%2 = alloca *i8, align 8
		%3 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %3
		br %4
	4:
		%5 = load %3
		%6 = icmp sle %5 2
		br %6, %7, %28
	7:
		%8 = load @__CS_round
		%9 = zext i8 %8 to i64
		%10 = getelementptr @__CS_thread_lockedon, 0, %9
		%11 = load %3
		%12 = sext i32 %11 to i64
		%13 = getelementptr %10, 0, %12
		%14 = load %13
		%15 = load %2
		%16 = icmp eq %14 %15
		br %16, %17, %24
	17:
		%18 = load @__CS_round
		%19 = zext i8 %18 to i64
		%20 = getelementptr @__CS_thread_lockedon, 0, %19
		%21 = load %3
		%22 = sext i32 %21 to i64
		%23 = getelementptr %20, 0, %22
		store null, %23
		br %24
	24:
		br %25
	25:
		%26 = load %3
		%27 = add i32 %26, 1
		store %27, %3
		br %4
	28:
		ret 0

*BasicFunctionTypename: "__CS_pthread_cond_wait" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 243
	0:
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%6 = load %5
		%7 = load %6
		%8 = zext i8 %7 to i32
		%9 = load @__CS_thread_index
		%10 = zext i8 %9 to i32
		%11 = add i32 %10, 1
		%12 = icmp ne %8 %11
		br %12, %13, %14
	13:
		store 1, @__CS_error
		store 2, @__CS_ret
		store 1, %3
		br %36
	14:
		%15 = load %5
		store 0, %15
		br %16
	16:
		%17 = load %4
		%18 = load @__CS_round
		%19 = zext i8 %18 to i64
		%20 = getelementptr @__CS_thread_lockedon, 0, %19
		%21 = load @__CS_thread_index
		%22 = zext i8 %21 to i64
		%23 = getelementptr %20, 0, %22
		store %17, %23
		store 1, @__CS_ret
		%24 = load %5
		%25 = load %24
		%26 = zext i8 %25 to i32
		%27 = icmp eq %26 0
		br %27, %28, %34
	28:
		%29 = load @__CS_thread_index
		%30 = zext i8 %29 to i32
		%31 = add i32 %30, 1
		%32 = trunc i32 %31 to i8
		%33 = load %5
		store %32, %33
		br %35
	34:
		store 1, @__CS_ret
		store 1, %3
		br %36
	35:
		store 0, %3
		br %36
	36:
		%37 = load %3
		ret %37

*BasicFunctionTypename: "__CS_assert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 284
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		store 1, @__CS_error
		store 2, @__CS_ret
		br %6
	6:
		ret void

*BasicFunctionTypename: "__CS_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 295
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		store 1, @__CS_ret
		br %6
	6:
		ret void

*BasicFunctionTypename: "__CS_pthread_join" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i8 zeroext, 1 **i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 304
	0:
		%3 = alloca i32, align 4
		%4 = alloca i8, align 1
		%5 = alloca **i8, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(***i8 %5)
		%6 = load %4
		%7 = zext i8 %6 to i32
		%8 = icmp ne %7 123
		br %8, %9, %14
	9:
		%10 = load %4
		%11 = zext i8 %10 to i32
		%12 = icmp sgt %11 3
		br %12, %13, %14
	13:
		store 1, @__CS_error
		store 2, @__CS_ret
		store 0, %3
		br %51
	14:
		%15 = load %4
		%16 = zext i8 %15 to i32
		%17 = icmp eq %16 123
		br %17, %28, %18
	18:
		%19 = load @__CS_round
		%20 = zext i8 %19 to i64
		%21 = getelementptr @__CS_thread_status, 0, %20
		%22 = load %4
		%23 = zext i8 %22 to i64
		%24 = getelementptr %21, 0, %23
		%25 = load %24
		%26 = zext i8 %25 to i32
		%27 = icmp eq %26 1
		br %27, %28, %29
	28:
		store 1, @__CS_ret
		store 0, %3
		br %51
	29:
		%30 = load @__CS_round
		%31 = zext i8 %30 to i64
		%32 = getelementptr @__CS_thread_status, 0, %31
		%33 = load %4
		%34 = zext i8 %33 to i64
		%35 = getelementptr %32, 0, %34
		%36 = load %35
		%37 = zext i8 %36 to i32
		%38 = icmp eq %37 0
		br %38, %39, %40
	39:
		store 1, @__CS_error
		store 2, @__CS_ret
		store 0, %3
		br %51
	40:
		%41 = load @__CS_round
		%42 = zext i8 %41 to i64
		%43 = getelementptr @__CS_thread_status, 0, %42
		%44 = load %4
		%45 = zext i8 %44 to i64
		%46 = getelementptr %43, 0, %45
		%47 = load %46
		%48 = zext i8 %47 to i32
		%49 = icmp eq %48 2
		%50 = zext i1 %49 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %50)
		store 0, %3
		br %51
	51:
		%52 = load %3
		ret %52

*BasicFunctionTypename: "__CS_pthread_create" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8, 2 *BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8), 3 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 352
	0:
		%5 = alloca i32, align 4
		%6 = alloca *i8, align 8
		%7 = alloca *i8, align 8
		%8 = alloca *BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8), align 8
		%9 = alloca *i8, align 8
		store %0, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %6)
		store %1, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %7)
		store %2, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8) %8)
		store %3, %9
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %9)
		%10 = load @__CS_thread_index
		%11 = zext i8 %10 to i32
		%12 = icmp eq %11 2
		br %12, %13, %15
	13:
		%14 = load %6
		store 123, %14
		store -1, %5
		br %39
	15:
		%16 = load @__CS_thread_index
		%17 = add i8 %16, 1
		store %17, @__CS_thread_index
		%18 = load @__CS_thread_index
		%19 = zext i8 %18 to i64
		%20 = getelementptr @__CS_thread_allocated, 0, %19
		store 1, %20
		%21 = load @__CS_round
		%22 = load @__CS_thread_index
		%23 = zext i8 %22 to i64
		%24 = getelementptr @__CS_thread_born_round, 0, %23
		store %21, %24
		%25 = load %8
		%26 = load @__CS_thread_index
		%27 = zext i8 %26 to i64
		%28 = getelementptr @__CS_thread, 0, %27
		store %25, %28
		%29 = load @__CS_round
		%30 = zext i8 %29 to i64
		%31 = getelementptr @__CS_thread_status, 0, %30
		%32 = load @__CS_thread_index
		%33 = zext i8 %32 to i64
		%34 = getelementptr %31, 0, %33
		store 1, %34
		%35 = load @__CS_thread_index
		%36 = load %6
		store %35, %36
		%37 = load @__CS_thread_index
		%38 = zext i8 %37 to i32
		store %38, %5
		br %39
	39:
		%40 = load %5
		ret %40

*BasicFunctionTypename: "thr1" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 393
	0:
		%1 = alloca *i8, align 8
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%2 = load @__CS_ret
		%3 = zext i8 %2 to i32
		%4 = icmp ne %3 0
		br %4, %5, %6
	5:
		store null, %1
		br %92
	6:
		%7 = load @__CS_round
		%8 = zext i8 %7 to i64
		%9 = getelementptr @flag1, 0, %8
		store 1, %9
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%10 = load @__CS_ret
		%11 = zext i8 %10 to i32
		%12 = icmp ne %11 0
		br %12, %13, %14
	13:
		store null, %1
		br %92
	14:
		%15 = load @__CS_round
		%16 = zext i8 %15 to i64
		%17 = getelementptr @turn, 0, %16
		store 1, %17
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%18 = load @__CS_ret
		%19 = zext i8 %18 to i32
		%20 = icmp ne %19 0
		br %20, %21, %22
	21:
		store null, %1
		br %92
	22:
		br %23
	23:
		%24 = load @__CS_round
		%25 = zext i8 %24 to i64
		%26 = getelementptr @flag2, 0, %25
		%27 = load %26
		%28 = icmp eq %27 1
		br %28, %29, %35
	29:
		%30 = load @__CS_round
		%31 = zext i8 %30 to i64
		%32 = getelementptr @turn, 0, %31
		%33 = load %32
		%34 = icmp eq %33 1
		br %35
	35:
		%36 = phi [0, %23], [%34, %29]
		br %36, %37, %43
	37:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%38 = load @__CS_ret
		%39 = zext i8 %38 to i32
		%40 = icmp ne %39 0
		br %40, %41, %42
	41:
		store null, %1
		br %92
	42:
		br %23
	43:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%44 = load @__CS_ret
		%45 = zext i8 %44 to i32
		%46 = icmp ne %45 0
		br %46, %47, %48
	47:
		store null, %1
		br %92
	48:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%49 = load @__CS_ret
		%50 = zext i8 %49 to i32
		%51 = icmp ne %50 0
		br %51, %52, %53
	52:
		store null, %1
		br %92
	53:
		%54 = load @__CS_round
		%55 = zext i8 %54 to i64
		%56 = getelementptr @x, 0, %55
		store 0, %56
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%57 = load @__CS_ret
		%58 = zext i8 %57 to i32
		%59 = icmp ne %58 0
		br %59, %60, %61
	60:
		store null, %1
		br %92
	61:
		%62 = load @__CS_round
		%63 = zext i8 %62 to i64
		%64 = getelementptr @x, 0, %63
		%65 = load %64
		%66 = icmp sle %65 0
		br %66, %74, %67
	67:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%68 = load @__CS_ret
		%69 = zext i8 %68 to i32
		%70 = icmp ne %69 0
		br %70, %71, %72
	71:
		store null, %1
		br %92
	72:
		br %73
	73:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 1, @__CS_error
		store 2, @__CS_ret
		store null, %1
		br %92
	74:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%75 = load @__CS_ret
		%76 = zext i8 %75 to i32
		%77 = icmp ne %76 0
		br %77, %78, %79
	78:
		store null, %1
		br %92
	79:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%80 = load @__CS_ret
		%81 = zext i8 %80 to i32
		%82 = icmp ne %81 0
		br %82, %83, %84
	83:
		store null, %1
		br %92
	84:
		%85 = load @__CS_round
		%86 = zext i8 %85 to i64
		%87 = getelementptr @flag1, 0, %86
		store 0, %87
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%88 = load @__CS_ret
		%89 = zext i8 %88 to i32
		%90 = icmp ne %89 0
		br %90, %91, %92
	91:
		store null, %1
		br %92
	92:
		%93 = load %1
		ret %93

*BasicFunctionTypename: "thr2" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 499
	0:
		%1 = alloca *i8, align 8
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%2 = load @__CS_ret
		%3 = zext i8 %2 to i32
		%4 = icmp ne %3 0
		br %4, %5, %6
	5:
		store null, %1
		br %92
	6:
		%7 = load @__CS_round
		%8 = zext i8 %7 to i64
		%9 = getelementptr @flag2, 0, %8
		store 1, %9
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%10 = load @__CS_ret
		%11 = zext i8 %10 to i32
		%12 = icmp ne %11 0
		br %12, %13, %14
	13:
		store null, %1
		br %92
	14:
		%15 = load @__CS_round
		%16 = zext i8 %15 to i64
		%17 = getelementptr @turn, 0, %16
		store 0, %17
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%18 = load @__CS_ret
		%19 = zext i8 %18 to i32
		%20 = icmp ne %19 0
		br %20, %21, %22
	21:
		store null, %1
		br %92
	22:
		br %23
	23:
		%24 = load @__CS_round
		%25 = zext i8 %24 to i64
		%26 = getelementptr @flag1, 0, %25
		%27 = load %26
		%28 = icmp eq %27 1
		br %28, %29, %35
	29:
		%30 = load @__CS_round
		%31 = zext i8 %30 to i64
		%32 = getelementptr @turn, 0, %31
		%33 = load %32
		%34 = icmp eq %33 0
		br %35
	35:
		%36 = phi [0, %23], [%34, %29]
		br %36, %37, %43
	37:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%38 = load @__CS_ret
		%39 = zext i8 %38 to i32
		%40 = icmp ne %39 0
		br %40, %41, %42
	41:
		store null, %1
		br %92
	42:
		br %23
	43:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%44 = load @__CS_ret
		%45 = zext i8 %44 to i32
		%46 = icmp ne %45 0
		br %46, %47, %48
	47:
		store null, %1
		br %92
	48:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%49 = load @__CS_ret
		%50 = zext i8 %49 to i32
		%51 = icmp ne %50 0
		br %51, %52, %53
	52:
		store null, %1
		br %92
	53:
		%54 = load @__CS_round
		%55 = zext i8 %54 to i64
		%56 = getelementptr @x, 0, %55
		store 1, %56
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%57 = load @__CS_ret
		%58 = zext i8 %57 to i32
		%59 = icmp ne %58 0
		br %59, %60, %61
	60:
		store null, %1
		br %92
	61:
		%62 = load @__CS_round
		%63 = zext i8 %62 to i64
		%64 = getelementptr @x, 0, %63
		%65 = load %64
		%66 = icmp sge %65 1
		br %66, %74, %67
	67:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%68 = load @__CS_ret
		%69 = zext i8 %68 to i32
		%70 = icmp ne %69 0
		br %70, %71, %72
	71:
		store null, %1
		br %92
	72:
		br %73
	73:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 1, @__CS_error
		store 2, @__CS_ret
		store null, %1
		br %92
	74:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%75 = load @__CS_ret
		%76 = zext i8 %75 to i32
		%77 = icmp ne %76 0
		br %77, %78, %79
	78:
		store null, %1
		br %92
	79:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%80 = load @__CS_ret
		%81 = zext i8 %80 to i32
		%82 = icmp ne %81 0
		br %82, %83, %84
	83:
		store null, %1
		br %92
	84:
		%85 = load @__CS_round
		%86 = zext i8 %85 to i64
		%87 = getelementptr @flag2, 0, %86
		store 0, %87
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%88 = load @__CS_ret
		%89 = zext i8 %88 to i32
		%90 = icmp ne %89 0
		br %90, %91, %92
	91:
		store null, %1
		br %92
	92:
		%93 = load %1
		ret %93

*BasicFunctionTypename: "main_thread" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 603
	0:
		%2 = alloca *i8, align 8
		%3 = alloca *i8, align 8
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%6 = load @__CS_ret
		%7 = zext i8 %6 to i32
		%8 = icmp ne %7 0
		br %8, %9, %10
	9:
		store null, %2
		br %36
	10:
		%11 = call i32 @__CS_pthread_create(*i8 %4, *i8 null, *BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8) aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMConversionConstExpr@53b91ffc, *i8 null)
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%12 = load @__CS_ret
		%13 = zext i8 %12 to i32
		%14 = icmp ne %13 0
		br %14, %15, %16
	15:
		store null, %2
		br %36
	16:
		%17 = call i32 @__CS_pthread_create(*i8 %5, *i8 null, *BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8) aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMConversionConstExpr@15262810, *i8 null)
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%18 = load @__CS_ret
		%19 = zext i8 %18 to i32
		%20 = icmp ne %19 0
		br %20, %21, %22
	21:
		store null, %2
		br %36
	22:
		%23 = load %4
		%24 = call i32 @__CS_pthread_join(i8 zeroext %23, **i8 null)
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%25 = load @__CS_ret
		%26 = zext i8 %25 to i32
		%27 = icmp ne %26 0
		br %27, %28, %29
	28:
		store null, %2
		br %36
	29:
		%30 = load %5
		%31 = call i32 @__CS_pthread_join(i8 zeroext %30, **i8 null)
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%32 = load @__CS_ret
		%33 = zext i8 %32 to i32
		%34 = icmp ne %33 0
		br %34, %35, %36
	35:
		store null, %2
		br %36
	36:
		%37 = load %2
		ret %37

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 647
	0:
		%1 = alloca i32, align 4
		%2 = alloca [3 x [3 x i8]], align 1
		%3 = alloca [3 x [3 x *i8]], align 16
		%4 = alloca [3 x i32], align 4
		%5 = alloca [3 x i32], align 4
		%6 = alloca [3 x i32], align 4
		%7 = alloca [3 x i32], align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [3 x i8]] %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [3 x *i8]] %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x i32] %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x i32] %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x i32] %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x i32] %7)
		%8 = getelementptr %2, 0, 1
		%9 = getelementptr %8, 0, 0
		%10 = load %9
		store %10, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@778f927f
		%11 = getelementptr %2, 0, 2
		%12 = getelementptr %11, 0, 0
		%13 = load %12
		store %13, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@77e82096
		%14 = getelementptr %2, 0, 1
		%15 = getelementptr %14, 0, 1
		%16 = load %15
		store %16, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@dfbe847
		%17 = getelementptr %2, 0, 2
		%18 = getelementptr %17, 0, 1
		%19 = load %18
		store %19, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6bbc67c9
		%20 = getelementptr %2, 0, 1
		%21 = getelementptr %20, 0, 2
		%22 = load %21
		store %22, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@60ab1cab
		%23 = getelementptr %2, 0, 2
		%24 = getelementptr %23, 0, 2
		%25 = load %24
		store %25, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@56716cb8
		%26 = getelementptr %3, 0, 1
		%27 = getelementptr %26, 0, 0
		%28 = load %27
		store %28, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@41a0fe1
		%29 = getelementptr %3, 0, 2
		%30 = getelementptr %29, 0, 0
		%31 = load %30
		store %31, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@c10b284
		%32 = getelementptr %3, 0, 1
		%33 = getelementptr %32, 0, 1
		%34 = load %33
		store %34, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3466b9e9
		%35 = getelementptr %3, 0, 2
		%36 = getelementptr %35, 0, 1
		%37 = load %36
		store %37, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@69af0771
		%38 = getelementptr %3, 0, 1
		%39 = getelementptr %38, 0, 2
		%40 = load %39
		store %40, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3d9e78a2
		%41 = getelementptr %3, 0, 2
		%42 = getelementptr %41, 0, 2
		%43 = load %42
		store %43, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@34937907
		%44 = getelementptr %4, 0, 1
		%45 = load %44
		store %45, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@353b278d
		%46 = getelementptr %4, 0, 2
		%47 = load %46
		store %47, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@243e3ad4
		%48 = getelementptr %5, 0, 1
		%49 = load %48
		store %49, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6a2b1d99
		%50 = getelementptr %5, 0, 2
		%51 = load %50
		store %51, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@45df1a9a
		%52 = getelementptr %6, 0, 1
		%53 = load %52
		store %53, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@29345ae3
		%54 = getelementptr %6, 0, 2
		%55 = load %54
		store %55, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7c893d8b
		%56 = getelementptr %7, 0, 1
		%57 = load %56
		store %57, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4efc3056
		%58 = getelementptr %7, 0, 2
		%59 = load %58
		store %59, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@734af8d9
		store 0, @__CS_round
		store 0, @__CS_thread_index
		%60 = load @__CS_round
		store %60, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@78a24711
		store 1, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4d7258eb
		store @main_thread, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@62a3af93
		store 1, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@468b0f2e
		%61 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2cfb5221
		%62 = zext i8 %61 to i32
		%63 = icmp eq %62 1
		br %63, %64, %77
	64:
		%65 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7391f255
		store %65, @__CS_round
		store 0, @__CS_ret
		%66 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@cb11483
		%67 = call *i8 %66(*i8 null)
		%68 = load @__CS_ret
		%69 = zext i8 %68 to i32
		%70 = icmp ne %69 1
		br %70, %71, %76
	71:
		%72 = load @__CS_round
		%73 = zext i8 %72 to i64
		%74 = getelementptr @__CS_thread_status, 0, %73
		%75 = getelementptr %74, 0, 0
		store 2, %75
		br %76
	76:
		br %77
	77:
		%78 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@125d8844
		%79 = zext i8 %78 to i32
		%80 = icmp eq %79 1
		br %80, %81, %94
	81:
		%82 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6441aa74
		store %82, @__CS_round
		store 0, @__CS_ret
		%83 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@18beeff3
		%84 = call *i8 %83(*i8 null)
		%85 = load @__CS_ret
		%86 = zext i8 %85 to i32
		%87 = icmp ne %86 1
		br %87, %88, %93
	88:
		%89 = load @__CS_round
		%90 = zext i8 %89 to i64
		%91 = getelementptr @__CS_thread_status, 0, %90
		%92 = getelementptr %91, 0, 1
		store 2, %92
		br %93
	93:
		br %94
	94:
		%95 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1caff56b
		%96 = zext i8 %95 to i32
		%97 = icmp eq %96 1
		br %97, %98, %111
	98:
		%99 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@62ce4112
		store %99, @__CS_round
		store 0, @__CS_ret
		%100 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@b355535
		%101 = call *i8 %100(*i8 null)
		%102 = load @__CS_ret
		%103 = zext i8 %102 to i32
		%104 = icmp ne %103 1
		br %104, %105, %110
	105:
		%106 = load @__CS_round
		%107 = zext i8 %106 to i64
		%108 = getelementptr @__CS_thread_status, 0, %107
		%109 = getelementptr %108, 0, 2
		store 2, %109
		br %110
	110:
		br %111
	111:
		%112 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@641bf2d7
		%113 = zext i8 %112 to i32
		%114 = getelementptr %2, 0, 1
		%115 = getelementptr %114, 0, 0
		%116 = load %115
		%117 = zext i8 %116 to i32
		%118 = icmp eq %113 %117
		%119 = zext i1 %118 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %119)
		%120 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@77c5792
		%121 = zext i8 %120 to i32
		%122 = getelementptr %2, 0, 2
		%123 = getelementptr %122, 0, 0
		%124 = load %123
		%125 = zext i8 %124 to i32
		%126 = icmp eq %121 %125
		%127 = zext i1 %126 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %127)
		%128 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@17aa40be
		%129 = zext i8 %128 to i32
		%130 = getelementptr %2, 0, 1
		%131 = getelementptr %130, 0, 1
		%132 = load %131
		%133 = zext i8 %132 to i32
		%134 = icmp eq %129 %133
		%135 = zext i1 %134 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %135)
		%136 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@36172383
		%137 = zext i8 %136 to i32
		%138 = getelementptr %2, 0, 2
		%139 = getelementptr %138, 0, 1
		%140 = load %139
		%141 = zext i8 %140 to i32
		%142 = icmp eq %137 %141
		%143 = zext i1 %142 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %143)
		%144 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@d21e2dc
		%145 = zext i8 %144 to i32
		%146 = getelementptr %2, 0, 1
		%147 = getelementptr %146, 0, 2
		%148 = load %147
		%149 = zext i8 %148 to i32
		%150 = icmp eq %145 %149
		%151 = zext i1 %150 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %151)
		%152 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6804f42d
		%153 = zext i8 %152 to i32
		%154 = getelementptr %2, 0, 2
		%155 = getelementptr %154, 0, 2
		%156 = load %155
		%157 = zext i8 %156 to i32
		%158 = icmp eq %153 %157
		%159 = zext i1 %158 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %159)
		%160 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2deee623
		%161 = getelementptr %3, 0, 1
		%162 = getelementptr %161, 0, 0
		%163 = load %162
		%164 = icmp eq %160 %163
		%165 = zext i1 %164 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %165)
		%166 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@226ad326
		%167 = getelementptr %3, 0, 2
		%168 = getelementptr %167, 0, 0
		%169 = load %168
		%170 = icmp eq %166 %169
		%171 = zext i1 %170 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %171)
		%172 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@20dff2b5
		%173 = getelementptr %3, 0, 1
		%174 = getelementptr %173, 0, 1
		%175 = load %174
		%176 = icmp eq %172 %175
		%177 = zext i1 %176 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %177)
		%178 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6f35cf1f
		%179 = getelementptr %3, 0, 2
		%180 = getelementptr %179, 0, 1
		%181 = load %180
		%182 = icmp eq %178 %181
		%183 = zext i1 %182 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %183)
		%184 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@35b0e324
		%185 = getelementptr %3, 0, 1
		%186 = getelementptr %185, 0, 2
		%187 = load %186
		%188 = icmp eq %184 %187
		%189 = zext i1 %188 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %189)
		%190 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@41b7f557
		%191 = getelementptr %3, 0, 2
		%192 = getelementptr %191, 0, 2
		%193 = load %192
		%194 = icmp eq %190 %193
		%195 = zext i1 %194 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %195)
		%196 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1e22fd8e
		%197 = getelementptr %4, 0, 1
		%198 = load %197
		%199 = icmp eq %196 %198
		%200 = zext i1 %199 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %200)
		%201 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5fae8462
		%202 = getelementptr %4, 0, 2
		%203 = load %202
		%204 = icmp eq %201 %203
		%205 = zext i1 %204 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %205)
		%206 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6db5f570
		%207 = getelementptr %5, 0, 1
		%208 = load %207
		%209 = icmp eq %206 %208
		%210 = zext i1 %209 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %210)
		%211 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@13d6a8dc
		%212 = getelementptr %5, 0, 2
		%213 = load %212
		%214 = icmp eq %211 %213
		%215 = zext i1 %214 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %215)
		%216 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1a11e9a5
		%217 = getelementptr %6, 0, 1
		%218 = load %217
		%219 = icmp eq %216 %218
		%220 = zext i1 %219 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %220)
		%221 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3137f311
		%222 = getelementptr %6, 0, 2
		%223 = load %222
		%224 = icmp eq %221 %223
		%225 = zext i1 %224 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %225)
		%226 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@73eb8e32
		%227 = getelementptr %7, 0, 1
		%228 = load %227
		%229 = icmp eq %226 %228
		%230 = zext i1 %229 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %230)
		%231 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@55dd58db
		%232 = getelementptr %7, 0, 2
		%233 = load %232
		%234 = icmp eq %231 %233
		%235 = zext i1 %234 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %235)
		%236 = load @__CS_error
		%237 = zext i8 %236 to i32
		%238 = icmp ne %237 1
		%239 = zext i1 %238 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assert(i32 %239)
		%240 = load %1
		ret %240


Analyze Termination of all function calls matching the pattern:
main()/hpcwork/ff862203/termcomp25/benchmarks/S28fI.c:3:63: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));
                                                              ^
/hpcwork/ff862203/termcomp25/benchmarks/S28fI.c:51:75: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;
                                                                          ^
/hpcwork/ff862203/termcomp25/benchmarks/S28fI.c:54:36: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
                                   ^
/hpcwork/ff862203/termcomp25/benchmarks/S28fI.c:56:36: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
