NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/EIyTy.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 506 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [EQUIVALENT, 127 ms]
(6) IntTRS
(7) IRSNoOverapproximation [EQUIVALENT, 0 ms]
(8) IntTRS
(9) IRSToKoat [EQUIVALENT, 0 ms]
(10) Koat Problem
(11) LoAT [COMPLETE, 2131 ms]
(12) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/EIyTy.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/EIyTy.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		store 0, %3
		br %5
	5:
		%6 = load %2
		%7 = icmp sgt %6 0
		br %7, %8, %26
	8:
		%9 = load %2
		%10 = icmp eq %9 1
		br %10, %11, %12
	11:
		store 1, %3
		br %12
	12:
		%13 = load %2
		%14 = icmp eq %13 10
		br %14, %15, %16
	15:
		store 0, %3
		br %16
	16:
		%17 = load %3
		%18 = icmp eq %17 1
		br %18, %19, %22
	19:
		%20 = load %2
		%21 = add i32 %20, 1
		store %21, %2
		br %25
	22:
		%23 = load %2
		%24 = sub i32 %23, 1
		store %24, %2
		br %25
	25:
		br %5
	26:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 257 rulesP rules:
f_112 -> f_113(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_113(v1, v2, 3, 1, 4) -> f_114(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_114(v1, v3, v2, v4, 3, 1, 4) -> f_115(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_115(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_116(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_116(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_117(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_117(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_118(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_118(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_119(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_119(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_120(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_120(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_121(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_121(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_122(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_122(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_123(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: 0 = 0
f_123(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_124(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: 0 < v7
f_123(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_125(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: v7 <= 0
f_124(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_126(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4) :|: 0 = 0
f_125(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_127(v1, v3, v5, v7, 0, v2, v4, v6, 3, 1, 4) :|: 0 = 0
f_126(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4) -> f_128(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4) :|: TRUE
f_127(v1, v3, v5, v7, 0, v2, v4, v6, 3, 1, 4) -> f_129(v1, v3, v5, v7, 0, v2, v4, v6, 3, 1, 4) :|: TRUE
f_128(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4) -> f_130(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4) :|: 0 = 0
f_130(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4) -> f_131(v1, v3, v5, 1, v2, v4, v6, 0, 3, 4) :|: v7 = 1
f_130(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4) -> f_132(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4, 2) :|: v7 != 1 && 2 <= v7
f_131(v1, v3, v5, 1, v2, v4, v6, 0, 3, 4) -> f_133(v1, v3, v5, 1, v2, v4, v6, 0, 3, 4) :|: 0 = 0
f_132(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4, 2) -> f_134(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 2) :|: 0 = 0
f_133(v1, v3, v5, 1, v2, v4, v6, 0, 3, 4) -> f_135(v1, v3, v5, 1, v2, v4, v6, 0, 3, 4) :|: TRUE
f_134(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 2) -> f_136(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 2) :|: TRUE
f_135(v1, v3, v5, 1, v2, v4, v6, 0, 3, 4) -> f_137(v1, v3, v5, 1, v2, v4, v6, 0, 3, 4) :|: TRUE
f_136(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 2) -> f_138(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 2) :|: 0 = 0
f_137(v1, v3, v5, 1, v2, v4, v6, 0, 3, 4) -> f_139(v1, v3, v5, 1, v2, v4, v6, 0, 3, 4) :|: TRUE
f_138(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 2) -> f_140(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) :|: v7 = 10
f_138(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 2) -> f_141(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 10, 4, 2) :|: v7 != 10
f_139(v1, v3, v5, 1, v2, v4, v6, 0, 3, 4) -> f_142(v1, v3, v5, 1, v2, v4, v6, 0, 3, 4) :|: 0 = 0
f_140(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) -> f_143(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_141(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 10, 4, 2) -> f_144(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 10, 4, 2) :|: 0 = 0
f_142(v1, v3, v5, 1, v2, v4, v6, 0, 3, 4) -> f_145(v1, v3, v5, 1, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_143(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) -> f_146(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) :|: TRUE
f_144(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 10, 4, 2) -> f_147(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 10, 4, 2) :|: TRUE
f_145(v1, v3, v5, 1, 0, v2, v4, v6, 3, 4) -> f_148(v1, v3, v5, 1, 0, v2, v4, v6, 3, 4) :|: TRUE
f_146(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) -> f_149(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) :|: TRUE
f_147(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 10, 4, 2) -> f_150(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 10, 4, 2) :|: 0 = 0
f_148(v1, v3, v5, 1, 0, v2, v4, v6, 3, 4) -> f_151(v1, v3, v5, 1, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_149(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) -> f_152(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) :|: TRUE
f_150(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 10, 4, 2) -> f_153(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 10, 4, 2) :|: 0 = 0
f_151(v1, v3, v5, 1, 0, v2, v4, v6, 3, 4) -> f_154(v1, v3, v5, 1, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_152(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) -> f_155(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_153(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 10, 4, 2) -> f_156(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 10, 4, 2) :|: TRUE
f_154(v1, v3, v5, 1, 0, v2, v4, v6, 3, 4) -> f_157(v1, v3, v5, 1, 0, v2, v4, v6, 3, 4) :|: TRUE
f_155(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) -> f_158(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_156(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 10, 4, 2) -> f_159(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 10, 4, 2) :|: 0 = 0
f_157(v1, v3, v5, 1, 0, v2, v4, v6, 3, 4) -> f_160(v1, v3, v5, 1, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_158(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) -> f_161(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) :|: TRUE
f_159(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 10, 4, 2) -> f_162(v1, v3, v5, v7, 1, 0, v12, v2, v4, v6, 3, 10, 4, 2) :|: 1 + v12 = v7 && 1 <= v12
f_160(v1, v3, v5, 1, 0, v2, v4, v6, 3, 4) -> f_163(v1, v3, v5, 1, 0, 2, v2, v4, v6, 3, 4) :|: 0 = 0
f_161(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) -> f_164(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_162(v1, v3, v5, v7, 1, 0, v12, v2, v4, v6, 3, 10, 4, 2) -> f_165(v1, v3, v5, v7, 1, 0, v12, v2, v4, v6, 3, 10, 4, 2) :|: TRUE
f_163(v1, v3, v5, 1, 0, 2, v2, v4, v6, 3, 4) -> f_166(v1, v3, v5, 1, 0, 2, v2, v4, v6, 3, 4) :|: TRUE
f_164(v1, v3, v5, 10, 1, 0, v2, v4, v6, 3, 4) -> f_167(v1, v3, v5, 10, 1, 0, 9, v2, v4, v6, 3, 4) :|: 0 = 0
f_165(v1, v3, v5, v7, 1, 0, v12, v2, v4, v6, 3, 10, 4, 2) -> f_168(v1, v3, v5, v7, 1, 0, v12, v2, v4, v6, 3, 10, 4, 2) :|: TRUE
f_166(v1, v3, v5, 1, 0, 2, v2, v4, v6, 3, 4) -> f_169(v1, v3, v5, 1, 0, 2, v2, v4, v6, 3, 4) :|: TRUE
f_167(v1, v3, v5, 10, 1, 0, 9, v2, v4, v6, 3, 4) -> f_170(v1, v3, v5, 10, 1, 0, 9, v2, v4, v6, 3, 4) :|: TRUE
f_168(v1, v3, v5, v7, 1, 0, v12, v2, v4, v6, 3, 10, 4, 2) -> f_171(v1, v3, v5, v7, 1, 0, v12, v2, v4, v6, 3, 10, 4, 2) :|: TRUE
f_169(v1, v3, v5, 1, 0, 2, v2, v4, v6, 3, 4) -> f_172(v1, v3, v5, 1, 0, 2, v2, v4, v6, 3, 4) :|: TRUE
f_170(v1, v3, v5, 10, 1, 0, 9, v2, v4, v6, 3, 4) -> f_173(v1, v3, v5, 10, 1, 0, 9, v2, v4, v6, 3, 4) :|: TRUE
f_171(v1, v3, v5, v7, 1, 0, v12, v2, v4, v6, 3, 10, 4, 2) -> f_252(v1, v3, v5, v7, v7, 1, 0, v12, v2, v4, v6, 3, 10, 2, 4) :|: TRUE
f_172(v1, v3, v5, 1, 0, 2, v2, v4, v6, 3, 4) -> f_175(v1, v3, v5, 1, 2, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_173(v1, v3, v5, 10, 1, 0, 9, v2, v4, v6, 3, 4) -> f_322(v1, v3, v5, 10, 10, 1, 0, 9, v2, v4, v6, 3, 4) :|: TRUE
f_175(v1, v3, v5, 1, 2, 0, v2, v4, v6, 3, 4) -> f_178(v1, v3, v5, 1, 2, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_178(v1, v3, v5, 1, 2, 0, v2, v4, v6, 3, 4) -> f_181(v1, v3, v5, 1, 2, 0, v2, v4, v6, 3, 4) :|: TRUE
f_181(v1, v3, v5, 1, 2, 0, v2, v4, v6, 3, 4) -> f_184(v1, v3, v5, 1, 2, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_184(v1, v3, v5, 1, 2, 0, v2, v4, v6, 3, 4) -> f_188(v1, v3, v5, 1, 2, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_188(v1, v3, v5, 1, 2, 0, v2, v4, v6, 3, 4) -> f_192(v1, v3, v5, 1, 2, 0, v2, v4, v6, 3, 4) :|: TRUE
f_192(v1, v3, v5, 1, 2, 0, v2, v4, v6, 3, 4) -> f_262(v1, v3, v5, 1, 2, 0, 1, v2, v4, v6, 3, 2, 4) :|: TRUE
f_252(v256, v257, v258, v259, v260, 1, 0, v263, v264, v265, v266, 3, 10, 2, 4) -> f_254(v256, v257, v258, v259, v263, 1, v260, 0, v264, v265, v266, 3, 10, 2, 4) :|: 0 = 0
f_254(v256, v257, v258, v259, v263, 1, v260, 0, v264, v265, v266, 3, 10, 2, 4) -> f_256(v256, v257, v258, v259, v263, 1, v260, 0, v264, v265, v266, 3, 10, 2, 4) :|: 0 = 0
f_256(v256, v257, v258, v259, v263, 1, v260, 0, v264, v265, v266, 3, 10, 2, 4) -> f_258(v256, v257, v258, v259, v263, 1, v260, 0, v264, v265, v266, 3, 10, 2, 4) :|: TRUE
f_258(v256, v257, v258, v259, v263, 1, v260, 0, v264, v265, v266, 3, 10, 2, 4) -> f_260(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) :|: 0 = 0
f_260(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) -> f_263(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) :|: v263 = 1
f_260(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) -> f_264(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) :|: v263 != 1 && 2 <= v263 && 3 <= v260 && 3 <= v259
f_262(v331, v332, v333, 1, v335, 0, v337, v338, v339, v340, 3, 2, 4) -> f_327(v331, v332, v333, 1, v335, 0, v337, v338, v339, v340, 3, 2, 4) :|: TRUE
f_263(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) -> f_266(v256, v257, v258, v259, 1, 2, 0, v264, v265, v266, 3, 4) :|: 0 = 0
f_264(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) -> f_267(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) :|: 0 = 0
f_266(v256, v257, v258, v259, 1, 2, 0, v264, v265, v266, 3, 4) -> f_269(v256, v257, v258, v259, 1, 2, 0, v264, v265, v266, 3, 4) :|: TRUE
f_267(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) -> f_270(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) :|: TRUE
f_269(v256, v257, v258, v259, 1, 2, 0, v264, v265, v266, 3, 4) -> f_272(v256, v257, v258, v259, 1, 2, 0, v264, v265, v266, 3, 4) :|: TRUE
f_270(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) -> f_273(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) :|: 0 = 0
f_272(v256, v257, v258, v259, 1, 2, 0, v264, v265, v266, 3, 4) -> f_275(v256, v257, v258, v259, 1, 2, 0, v264, v265, v266, 3, 4) :|: TRUE
f_273(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) -> f_276(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) :|: v263 = 10
f_273(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) -> f_277(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) :|: v263 != 10
f_275(v256, v257, v258, v259, 1, 2, 0, v264, v265, v266, 3, 4) -> f_279(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) :|: 0 = 0
f_276(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) -> f_280(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) :|: 0 = 0
f_277(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) -> f_281(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) :|: 0 = 0
f_279(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) -> f_283(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) :|: 0 = 0
f_280(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) -> f_284(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) :|: TRUE
f_281(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) -> f_285(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) :|: TRUE
f_283(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) -> f_288(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) :|: TRUE
f_284(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) -> f_289(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) :|: TRUE
f_285(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) -> f_286(v256, v257, v258, v259, v263, 1, 0, v260, v264, v265, v266, 3, 10, 2, 4) :|: TRUE
f_286(v417, v418, v419, v420, v421, 1, 0, v424, v425, v426, v427, 3, 10, 2, 4) -> f_290(v417, v418, v419, v420, v421, 1, 0, v424, v425, v426, v427, 3, 10, 2, 4) :|: 0 = 0
f_288(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) -> f_292(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) :|: 0 = 0
f_289(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) -> f_293(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) :|: TRUE
f_290(v417, v418, v419, v420, v421, 1, 0, v424, v425, v426, v427, 3, 10, 2, 4) -> f_294(v417, v418, v419, v420, v421, 1, 0, v424, v425, v426, v427, 3, 10, 2, 4) :|: 0 = 0
f_292(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) -> f_296(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) :|: 0 = 0
f_293(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) -> f_297(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) :|: 0 = 0
f_294(v417, v418, v419, v420, v421, 1, 0, v424, v425, v426, v427, 3, 10, 2, 4) -> f_298(v417, v418, v419, v420, v421, 1, 0, v424, v425, v426, v427, 3, 10, 2, 4) :|: TRUE
f_296(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) -> f_300(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) :|: TRUE
f_297(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) -> f_301(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) :|: 0 = 0
f_298(v417, v418, v419, v420, v421, 1, 0, v424, v425, v426, v427, 3, 10, 2, 4) -> f_302(v417, v418, v419, v420, v421, 1, 0, v425, v426, v427, 3, 10, 2, 4) :|: 0 = 0
f_300(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) -> f_304(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) :|: 0 = 0
f_301(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) -> f_305(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) :|: TRUE
f_302(v417, v418, v419, v420, v421, 1, 0, v425, v426, v427, 3, 10, 2, 4) -> f_306(v417, v418, v419, v420, v421, 1, 0, v503, v425, v426, v427, 3, 10, 2, 4) :|: 1 + v503 = v421 && 1 <= v503
f_304(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) -> f_308(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) :|: 0 = 0
f_305(v256, v257, v258, v259, 10, 1, 0, 11, v264, v265, v266, 3, 4) -> f_309(v256, v257, v258, v259, 10, 1, 0, v264, v265, v266, 3, 11, 4) :|: 0 = 0
f_306(v417, v418, v419, v420, v421, 1, 0, v503, v425, v426, v427, 3, 10, 2, 4) -> f_310(v417, v418, v419, v420, v421, 1, 0, v503, v425, v426, v427, 3, 10, 2, 4) :|: TRUE
f_308(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) -> f_312(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) :|: TRUE
f_309(v256, v257, v258, v259, 10, 1, 0, v264, v265, v266, 3, 11, 4) -> f_313(v256, v257, v258, v259, 10, 1, 0, 9, v264, v265, v266, 3, 11, 4) :|: 0 = 0
f_310(v417, v418, v419, v420, v421, 1, 0, v503, v425, v426, v427, 3, 10, 2, 4) -> f_314(v417, v418, v419, v420, v421, 1, 0, v503, v425, v426, v427, 3, 10, 2, 4) :|: TRUE
f_312(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) -> f_316(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) :|: TRUE
f_313(v256, v257, v258, v259, 10, 1, 0, 9, v264, v265, v266, 3, 11, 4) -> f_317(v256, v257, v258, v259, 10, 1, 0, 9, v264, v265, v266, 3, 11, 4) :|: TRUE
f_314(v417, v418, v419, v420, v421, 1, 0, v503, v425, v426, v427, 3, 10, 2, 4) -> f_318(v417, v418, v419, v420, v421, 1, 0, v503, v425, v426, v427, 3, 10, 2, 4) :|: TRUE
f_316(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) -> f_695(v256, v257, v258, v259, 1, 0, 2, v264, v265, v266, 3, 4) :|: TRUE
f_317(v256, v257, v258, v259, 10, 1, 0, 9, v264, v265, v266, 3, 11, 4) -> f_321(v256, v257, v258, v259, 10, 1, 0, 9, v264, v265, v266, 3, 11, 4) :|: TRUE
f_318(v417, v418, v419, v420, v421, 1, 0, v503, v425, v426, v427, 3, 10, 2, 4) -> f_252(v417, v418, v419, v420, v421, 1, 0, v503, v425, v426, v427, 3, 10, 2, 4) :|: TRUE
f_321(v256, v257, v258, v259, 10, 1, 0, 9, v264, v265, v266, 3, 11, 4) -> f_322(v256, v257, v258, v259, 10, 1, 0, 9, v264, v265, v266, 3, 4) :|: TRUE
f_322(v594, v595, v596, v597, 10, 1, 0, 9, v602, v603, v604, 3, 4) -> f_325(v594, v595, v596, v597, 10, 1, 0, 9, v602, v603, v604, 3, 4) :|: TRUE
f_325(v594, v595, v596, v597, 10, 1, 0, 9, v602, v603, v604, 3, 4) -> f_329(v594, v595, v596, v597, 9, 1, 10, 0, v602, v603, v604, 3, 4) :|: 0 = 0
f_327(v655, v656, v657, 1, v659, 0, v661, v662, v663, v664, 3, 2, 4) -> f_371(v655, v656, v657, 1, v659, 0, v661, v662, v663, v664, 3, 2, 4) :|: TRUE
f_329(v594, v595, v596, v597, 9, 1, 10, 0, v602, v603, v604, 3, 4) -> f_332(v594, v595, v596, v597, 9, 1, 10, 0, v602, v603, v604, 3, 4) :|: 0 = 0
f_332(v594, v595, v596, v597, 9, 1, 10, 0, v602, v603, v604, 3, 4) -> f_335(v594, v595, v596, v597, 9, 1, 10, 0, v602, v603, v604, 3, 4) :|: TRUE
f_335(v594, v595, v596, v597, 9, 1, 10, 0, v602, v603, v604, 3, 4) -> f_338(v594, v595, v596, v597, 9, 1, 0, 10, v602, v603, v604, 3, 4) :|: 0 = 0
f_338(v594, v595, v596, v597, 9, 1, 0, 10, v602, v603, v604, 3, 4) -> f_341(v594, v595, v596, v597, 9, 1, 0, 10, v602, v603, v604, 3, 4) :|: 0 = 0
f_341(v594, v595, v596, v597, 9, 1, 0, 10, v602, v603, v604, 3, 4) -> f_344(v594, v595, v596, v597, 9, 1, 0, 10, v602, v603, v604, 3, 4) :|: TRUE
f_344(v594, v595, v596, v597, 9, 1, 0, 10, v602, v603, v604, 3, 4) -> f_347(v594, v595, v596, v597, 9, 1, 0, 10, v602, v603, v604, 3, 4) :|: 0 = 0
f_347(v594, v595, v596, v597, 9, 1, 0, 10, v602, v603, v604, 3, 4) -> f_350(v594, v595, v596, v597, 9, 1, 0, 10, v602, v603, v604, 3, 4) :|: 0 = 0
f_350(v594, v595, v596, v597, 9, 1, 0, 10, v602, v603, v604, 3, 4) -> f_353(v594, v595, v596, v597, 9, 1, 0, 10, v602, v603, v604, 3, 4) :|: TRUE
f_353(v594, v595, v596, v597, 9, 1, 0, 10, v602, v603, v604, 3, 4) -> f_286(v594, v595, v596, v597, 9, 1, 0, 10, v602, v603, v604, 3, 10, 2, 4) :|: TRUE
f_371(v1018, v1019, v1020, 1, v1022, 0, v1024, v1025, v1026, v1027, 3, 2, 4) -> f_426(v1018, v1019, v1020, 1, v1022, 0, v1024, v1025, v1026, v1027, 3, 2, 4) :|: TRUE
f_426(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 2, 4) -> f_428(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 2, 4) :|: 0 = 0
f_428(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 2, 4) -> f_430(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) :|: v1371 = 10
f_428(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 2, 4) -> f_431(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 10, 2, 4) :|: v1371 != 10
f_430(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) -> f_433(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) :|: 0 = 0
f_431(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 10, 2, 4) -> f_434(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 10, 2, 4) :|: 0 = 0
f_433(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) -> f_437(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) :|: TRUE
f_434(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 10, 2, 4) -> f_438(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 10, 2, 4) :|: TRUE
f_437(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) -> f_440(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) :|: TRUE
f_438(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 10, 2, 4) -> f_441(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 10, 2, 4) :|: 0 = 0
f_440(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) -> f_443(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) :|: TRUE
f_441(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 10, 2, 4) -> f_444(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 10, 2, 4) :|: 0 = 0
f_443(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) -> f_446(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) :|: 0 = 0
f_444(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 10, 2, 4) -> f_447(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 10, 2, 4) :|: TRUE
f_446(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) -> f_449(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) :|: 0 = 0
f_447(v1367, v1368, v1369, 1, v1371, 0, v1373, v1374, v1375, v1376, 3, 10, 2, 4) -> f_450(v1367, v1368, v1369, 1, v1371, 0, v1374, v1375, v1376, 3, 10, 2, 4) :|: 0 = 0
f_449(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) -> f_452(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) :|: TRUE
f_450(v1367, v1368, v1369, 1, v1371, 0, v1374, v1375, v1376, 3, 10, 2, 4) -> f_453(v1367, v1368, v1369, 1, v1371, 0, v1523, v1374, v1375, v1376, 3, 10, 2, 4) :|: v1523 = 1 + v1371 && 3 <= v1523
f_452(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) -> f_455(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) :|: 0 = 0
f_453(v1367, v1368, v1369, 1, v1371, 0, v1523, v1374, v1375, v1376, 3, 10, 2, 4) -> f_456(v1367, v1368, v1369, 1, v1371, 0, v1523, v1374, v1375, v1376, 3, 10, 2, 4) :|: TRUE
f_455(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) -> f_458(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) :|: 0 = 0
f_456(v1367, v1368, v1369, 1, v1371, 0, v1523, v1374, v1375, v1376, 3, 10, 2, 4) -> f_459(v1367, v1368, v1369, 1, v1371, 0, v1523, v1374, v1375, v1376, 3, 10, 2, 4) :|: TRUE
f_458(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) -> f_461(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) :|: TRUE
f_459(v1367, v1368, v1369, 1, v1371, 0, v1523, v1374, v1375, v1376, 3, 10, 2, 4) -> f_462(v1367, v1368, v1369, 1, v1371, 0, v1523, v1374, v1375, v1376, 3, 10, 2, 4) :|: TRUE
f_461(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) -> f_464(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) :|: TRUE
f_462(v1367, v1368, v1369, 1, v1371, 0, v1523, v1374, v1375, v1376, 3, 10, 2, 4) -> f_465(v1367, v1368, v1369, 1, v1523, v1371, 0, v1374, v1375, v1376, 3, 10, 2, 4) :|: 0 = 0
f_464(v1367, v1368, v1369, 1, 10, 0, 9, v1374, v1375, v1376, 3, 4) -> f_728(v1367, v1368, v1369, 1, 10, 1, 0, 9, v1374, v1375, v1376, 3, 4) :|: TRUE
f_465(v1367, v1368, v1369, 1, v1523, v1371, 0, v1374, v1375, v1376, 3, 10, 2, 4) -> f_468(v1367, v1368, v1369, 1, v1523, v1371, 0, v1374, v1375, v1376, 3, 10, 2, 4) :|: 0 = 0
f_468(v1367, v1368, v1369, 1, v1523, v1371, 0, v1374, v1375, v1376, 3, 10, 2, 4) -> f_471(v1367, v1368, v1369, 1, v1523, v1371, 0, v1374, v1375, v1376, 3, 10, 2, 4) :|: TRUE
f_471(v1367, v1368, v1369, 1, v1523, v1371, 0, v1374, v1375, v1376, 3, 10, 2, 4) -> f_474(v1367, v1368, v1369, 1, v1523, 0, v1371, v1374, v1375, v1376, 3, 10, 2, 4) :|: 0 = 0
f_474(v1367, v1368, v1369, 1, v1523, 0, v1371, v1374, v1375, v1376, 3, 10, 2, 4) -> f_477(v1367, v1368, v1369, 1, v1523, 0, v1371, v1374, v1375, v1376, 3, 10, 2, 4) :|: 0 = 0
f_477(v1367, v1368, v1369, 1, v1523, 0, v1371, v1374, v1375, v1376, 3, 10, 2, 4) -> f_480(v1367, v1368, v1369, 1, v1523, 0, v1371, v1374, v1375, v1376, 3, 10, 2, 4) :|: TRUE
f_480(v1367, v1368, v1369, 1, v1523, 0, v1371, v1374, v1375, v1376, 3, 10, 2, 4) -> f_426(v1367, v1368, v1369, 1, v1523, 0, v1371, v1374, v1375, v1376, 3, 2, 4) :|: TRUE
f_540(v2384, v2385, v2386, v2387, v2388, 1, 0, v2391, 2, v2393, v2394, v2395, 3, 4) -> f_703(v2384, v2385, v2386, v2387, v2388, 1, 0, v2391, 2, v2393, v2394, v2395, 3, 4) :|: TRUE
f_657(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3796, v3797, v3798, v3799, 3, 2, 4) -> f_658(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3796, v3797, v3798, v3799, 3, 2, 4) :|: 0 = 0
f_658(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3796, v3797, v3798, v3799, 3, 2, 4) -> f_659(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3796, v3797, v3798, v3799, 3, 2, 4) :|: 0 = 0
f_659(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3796, v3797, v3798, v3799, 3, 2, 4) -> f_660(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3796, v3797, v3798, v3799, 3, 2, 4) :|: TRUE
f_660(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3796, v3797, v3798, v3799, 3, 2, 4) -> f_661(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3797, v3798, v3799, 3, 4) :|: 0 = 0
f_661(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3797, v3798, v3799, 3, 4) -> f_662(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3815, v3797, v3798, v3799, 3, 4, 8) :|: 1 + v3815 = v3791 && 0 <= v3815 && v3815 <= 8
f_662(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3815, v3797, v3798, v3799, 3, 4, 8) -> f_663(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3815, v3797, v3798, v3799, 3, 4, 8) :|: TRUE
f_663(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3815, v3797, v3798, v3799, 3, 4, 8) -> f_664(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3815, v3797, v3798, v3799, 3, 4, 8) :|: TRUE
f_664(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3815, v3797, v3798, v3799, 3, 4, 8) -> f_665(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3815, v3797, v3798, v3799, 3, 4, 8) :|: TRUE
f_665(v3787, v3788, v3789, v3790, v3791, 1, 0, 9, 10, v3815, v3797, v3798, v3799, 3, 4, 8) -> f_666(v3787, v3788, v3789, v3790, v3815, 1, v3791, 0, 9, 10, v3797, v3798, v3799, 3, 4, 8) :|: 0 = 0
f_666(v3787, v3788, v3789, v3790, v3815, 1, v3791, 0, 9, 10, v3797, v3798, v3799, 3, 4, 8) -> f_667(v3787, v3788, v3789, v3790, v3815, 1, v3791, 0, 9, 10, v3797, v3798, v3799, 3, 2, 4, 8) :|: 0 < v3815 && 2 <= v3791
f_666(v3787, v3788, v3789, v3790, v3815, 1, v3791, 0, 9, 10, v3797, v3798, v3799, 3, 4, 8) -> f_668(v3787, v3788, v3789, v3790, 0, 1, 9, 10, v3797, v3798, v3799, 3, 4) :|: v3815 <= 0 && v3791 = 1 && v3815 = 0 && 0 = 0
f_667(v3787, v3788, v3789, v3790, v3815, 1, v3791, 0, 9, 10, v3797, v3798, v3799, 3, 2, 4, 8) -> f_669(v3787, v3788, v3789, v3790, v3815, 1, v3791, 0, 9, 10, v3797, v3798, v3799, 3, 2, 4, 8) :|: 0 = 0
f_668(v3787, v3788, v3789, v3790, 0, 1, 9, 10, v3797, v3798, v3799, 3, 4) -> f_670(v3787, v3788, v3789, v3790, 0, 1, 9, 10, v3797, v3798, v3799, 3, 4) :|: 0 = 0
f_669(v3787, v3788, v3789, v3790, v3815, 1, v3791, 0, 9, 10, v3797, v3798, v3799, 3, 2, 4, 8) -> f_671(v3787, v3788, v3789, v3790, v3815, 1, v3791, 0, 9, 10, v3797, v3798, v3799, 3, 2, 4, 8) :|: TRUE
f_670(v3787, v3788, v3789, v3790, 0, 1, 9, 10, v3797, v3798, v3799, 3, 4) -> f_672(v3787, v3788, v3789, v3790, 0, 1, 9, 10, v3797, v3798, v3799, 3, 4) :|: TRUE
f_671(v3787, v3788, v3789, v3790, v3815, 1, v3791, 0, 9, 10, v3797, v3798, v3799, 3, 2, 4, 8) -> f_673(v3787, v3788, v3789, v3790, v3815, 1, 0, v3791, 9, 10, v3797, v3798, v3799, 3, 2, 4, 8) :|: 0 = 0
f_673(v3787, v3788, v3789, v3790, v3815, 1, 0, v3791, 9, 10, v3797, v3798, v3799, 3, 2, 4, 8) -> f_674(v3787, v3788, v3789, v3790, 1, 0, 2, 9, 10, v3797, v3798, v3799, 3, 4) :|: v3815 = 1
f_673(v3787, v3788, v3789, v3790, v3815, 1, 0, v3791, 9, 10, v3797, v3798, v3799, 3, 2, 4, 8) -> f_675(v3787, v3788, v3789, v3790, v3815, 1, 0, v3791, 9, 10, v3797, v3798, v3799, 3, 4, 2, 8) :|: v3815 != 1 && 2 <= v3815 && v3815 <= 8 && 3 <= v3791
f_674(v3787, v3788, v3789, v3790, 1, 0, 2, 9, 10, v3797, v3798, v3799, 3, 4) -> f_676(v3787, v3788, v3789, v3790, 1, 2, 0, 9, 10, v3797, v3798, v3799, 3, 4) :|: 0 = 0
f_675(v3787, v3788, v3789, v3790, v3815, 1, 0, v3791, 9, 10, v3797, v3798, v3799, 3, 4, 2, 8) -> f_677(v3787, v3788, v3789, v3790, v3815, 1, 0, v3791, 9, 10, v3797, v3798, v3799, 3, 4, 2, 8) :|: 0 = 0
f_676(v3787, v3788, v3789, v3790, 1, 2, 0, 9, 10, v3797, v3798, v3799, 3, 4) -> f_678(v3787, v3788, v3789, v3790, 1, 2, 0, 9, 10, v3797, v3798, v3799, 3, 4) :|: TRUE
f_677(v3787, v3788, v3789, v3790, v3815, 1, 0, v3791, 9, 10, v3797, v3798, v3799, 3, 4, 2, 8) -> f_679(v3787, v3788, v3789, v3790, v3815, 1, 0, v3791, 9, 10, v3797, v3798, v3799, 3, 4, 2, 8) :|: TRUE
f_678(v3787, v3788, v3789, v3790, 1, 2, 0, 9, 10, v3797, v3798, v3799, 3, 4) -> f_680(v3787, v3788, v3789, v3790, 1, 2, 0, 9, 10, v3797, v3798, v3799, 3, 4) :|: TRUE
f_679(v3787, v3788, v3789, v3790, v3815, 1, 0, v3791, 9, 10, v3797, v3798, v3799, 3, 4, 2, 8) -> f_681(v3787, v3788, v3789, v3790, v3815, 1, 0, 9, 10, v3791, v3797, v3798, v3799, 3, 4, 2, 8) :|: 0 = 0
f_680(v3787, v3788, v3789, v3790, 1, 2, 0, 9, 10, v3797, v3798, v3799, 3, 4) -> f_682(v3787, v3788, v3789, v3790, 1, 2, 0, 9, 10, v3797, v3798, v3799, 3, 4) :|: TRUE
f_681(v3787, v3788, v3789, v3790, v3815, 1, 0, 9, 10, v3791, v3797, v3798, v3799, 3, 4, 2, 8) -> f_683(v3787, v3788, v3789, v3790, v3815, 1, 0, 9, 10, v3791, v3797, v3798, v3799, 3, 4, 2, 8) :|: 0 = 0
f_682(v3787, v3788, v3789, v3790, 1, 2, 0, 9, 10, v3797, v3798, v3799, 3, 4) -> f_684(v3787, v3788, v3789, v3790, 1, 0, 9, 10, 2, v3797, v3798, v3799, 3, 4) :|: 0 = 0
f_683(v3787, v3788, v3789, v3790, v3815, 1, 0, 9, 10, v3791, v3797, v3798, v3799, 3, 4, 2, 8) -> f_685(v3787, v3788, v3789, v3790, v3815, 1, 0, 9, 10, v3791, v3797, v3798, v3799, 3, 4, 2, 8) :|: TRUE
f_684(v3787, v3788, v3789, v3790, 1, 0, 9, 10, 2, v3797, v3798, v3799, 3, 4) -> f_686(v3787, v3788, v3789, v3790, 1, 0, 9, 10, 2, v3797, v3798, v3799, 3, 4) :|: 0 = 0
f_685(v3787, v3788, v3789, v3790, v3815, 1, 0, 9, 10, v3791, v3797, v3798, v3799, 3, 4, 2, 8) -> f_657(v3787, v3788, v3789, v3790, v3815, 1, 0, 9, 10, v3791, v3797, v3798, v3799, 3, 2, 4) :|: TRUE
f_686(v3787, v3788, v3789, v3790, 1, 0, 9, 10, 2, v3797, v3798, v3799, 3, 4) -> f_687(v3787, v3788, v3789, v3790, 1, 0, 9, 10, 2, v3797, v3798, v3799, 3, 4) :|: TRUE
f_687(v3787, v3788, v3789, v3790, 1, 0, 9, 10, 2, v3797, v3798, v3799, 3, 4) -> f_688(v3787, v3788, v3789, v3790, 1, 0, 9, 10, 2, v3797, v3798, v3799, 3, 4) :|: 0 = 0
f_688(v3787, v3788, v3789, v3790, 1, 0, 9, 10, 2, v3797, v3798, v3799, 3, 4) -> f_689(v3787, v3788, v3789, v3790, 1, 0, 9, 10, 2, v3797, v3798, v3799, 3, 4) :|: 0 = 0
f_689(v3787, v3788, v3789, v3790, 1, 0, 9, 10, 2, v3797, v3798, v3799, 3, 4) -> f_690(v3787, v3788, v3789, v3790, 1, 0, 9, 10, 2, v3797, v3798, v3799, 3, 4) :|: TRUE
f_690(v3787, v3788, v3789, v3790, 1, 0, 9, 10, 2, v3797, v3798, v3799, 3, 4) -> f_691(v3787, v3788, v3789, v3790, 1, 0, 10, 2, v3797, v3798, v3799, 3, 4) :|: 0 = 0
f_691(v3787, v3788, v3789, v3790, 1, 0, 10, 2, v3797, v3798, v3799, 3, 4) -> f_692(v3787, v3788, v3789, v3790, 1, 0, 2, v3797, v3798, v3799, 3, 4) :|: 0 = 0
f_692(v3787, v3788, v3789, v3790, 1, 0, 2, v3797, v3798, v3799, 3, 4) -> f_693(v3787, v3788, v3789, v3790, 1, 0, 2, v3797, v3798, v3799, 3, 4) :|: TRUE
f_693(v3787, v3788, v3789, v3790, 1, 0, 2, v3797, v3798, v3799, 3, 4) -> f_694(v3787, v3788, v3789, v3790, 1, 0, 2, v3797, v3798, v3799, 3, 4) :|: TRUE
f_694(v3787, v3788, v3789, v3790, 1, 0, 2, v3797, v3798, v3799, 3, 4) -> f_695(v3787, v3788, v3789, v3790, 1, 0, 2, v3797, v3798, v3799, 3, 4) :|: TRUE
f_695(v4100, v4101, v4102, v4103, 1, 0, 2, v4107, v4108, v4109, 3, 4) -> f_696(v4100, v4101, v4102, v4103, 1, 0, 2, v4107, v4108, v4109, 3, 4) :|: TRUE
f_696(v4100, v4101, v4102, v4103, 1, 0, 2, v4107, v4108, v4109, 3, 4) -> f_697(v4100, v4101, v4102, v4103, 2, 1, 0, v4107, v4108, v4109, 3, 4) :|: 0 = 0
f_697(v4100, v4101, v4102, v4103, 2, 1, 0, v4107, v4108, v4109, 3, 4) -> f_698(v4100, v4101, v4102, v4103, 2, 1, 0, v4107, v4108, v4109, 3, 4) :|: 0 = 0
f_698(v4100, v4101, v4102, v4103, 2, 1, 0, v4107, v4108, v4109, 3, 4) -> f_699(v4100, v4101, v4102, v4103, 2, 1, 0, v4107, v4108, v4109, 3, 4) :|: TRUE
f_699(v4100, v4101, v4102, v4103, 2, 1, 0, v4107, v4108, v4109, 3, 4) -> f_700(v4100, v4101, v4102, v4103, 2, 1, 0, v4107, v4108, v4109, 3, 4) :|: 0 = 0
f_700(v4100, v4101, v4102, v4103, 2, 1, 0, v4107, v4108, v4109, 3, 4) -> f_701(v4100, v4101, v4102, v4103, 2, 1, 0, v4107, v4108, v4109, 3, 4) :|: 0 = 0
f_701(v4100, v4101, v4102, v4103, 2, 1, 0, v4107, v4108, v4109, 3, 4) -> f_702(v4100, v4101, v4102, v4103, 2, 1, 0, v4107, v4108, v4109, 3, 4) :|: TRUE
f_702(v4100, v4101, v4102, v4103, 2, 1, 0, v4107, v4108, v4109, 3, 4) -> f_703(v4100, v4101, v4102, v4103, 2, 1, 0, 1, 2, v4107, v4108, v4109, 3, 4) :|: TRUE
f_703(v4276, v4277, v4278, v4279, v4280, 1, 0, v4283, 2, v4285, v4286, v4287, 3, 4) -> f_704(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4283, v4285, v4286, v4287, 3, 4) :|: 0 = 0
f_704(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4283, v4285, v4286, v4287, 3, 4) -> f_705(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) :|: v4280 = 10
f_704(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4283, v4285, v4286, v4287, 3, 4) -> f_706(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4283, v4285, v4286, v4287, 3, 10, 4) :|: v4280 != 10
f_705(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) -> f_707(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) :|: 0 = 0
f_706(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4283, v4285, v4286, v4287, 3, 10, 4) -> f_708(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4283, v4285, v4286, v4287, 3, 10, 4) :|: 0 = 0
f_707(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) -> f_709(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) :|: TRUE
f_708(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4283, v4285, v4286, v4287, 3, 10, 4) -> f_710(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4283, v4285, v4286, v4287, 3, 10, 4) :|: TRUE
f_709(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) -> f_711(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) :|: TRUE
f_710(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4283, v4285, v4286, v4287, 3, 10, 4) -> f_712(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4283, v4285, v4286, v4287, 3, 10, 4) :|: 0 = 0
f_711(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) -> f_713(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) :|: TRUE
f_712(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4283, v4285, v4286, v4287, 3, 10, 4) -> f_714(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4283, v4285, v4286, v4287, 3, 10, 4) :|: 0 = 0
f_713(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) -> f_715(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) :|: 0 = 0
f_714(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4283, v4285, v4286, v4287, 3, 10, 4) -> f_716(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4283, v4285, v4286, v4287, 3, 10, 4) :|: TRUE
f_715(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) -> f_717(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) :|: 0 = 0
f_716(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4283, v4285, v4286, v4287, 3, 10, 4) -> f_718(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4285, v4286, v4287, 3, 10, 4) :|: 0 = 0
f_717(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) -> f_719(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) :|: TRUE
f_718(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4285, v4286, v4287, 3, 10, 4) -> f_720(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4505, v4285, v4286, v4287, 3, 10, 4) :|: v4505 = 1 + v4280 && 3 <= v4505
f_719(v4276, v4277, v4278, v4279, 10, 1, 0, 2, 9, v4285, v4286, v4287, 3, 4) -> f_721(v4276, v4277, v4278, v4279, 10, 1, 0, 9, v4285, v4286, v4287, 3, 4) :|: 0 = 0
f_720(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4505, v4285, v4286, v4287, 3, 10, 4) -> f_722(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4505, v4285, v4286, v4287, 3, 10, 4) :|: TRUE
f_721(v4276, v4277, v4278, v4279, 10, 1, 0, 9, v4285, v4286, v4287, 3, 4) -> f_723(v4276, v4277, v4278, v4279, 10, 1, 0, 9, v4285, v4286, v4287, 3, 4) :|: 0 = 0
f_722(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4505, v4285, v4286, v4287, 3, 10, 4) -> f_724(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4505, v4285, v4286, v4287, 3, 10, 4) :|: TRUE
f_723(v4276, v4277, v4278, v4279, 10, 1, 0, 9, v4285, v4286, v4287, 3, 4) -> f_725(v4276, v4277, v4278, v4279, 10, 1, 0, 9, v4285, v4286, v4287, 3, 4) :|: TRUE
f_724(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4505, v4285, v4286, v4287, 3, 10, 4) -> f_726(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4505, v4285, v4286, v4287, 3, 10, 4) :|: TRUE
f_725(v4276, v4277, v4278, v4279, 10, 1, 0, 9, v4285, v4286, v4287, 3, 4) -> f_727(v4276, v4277, v4278, v4279, 10, 1, 0, 9, v4285, v4286, v4287, 3, 4) :|: TRUE
f_726(v4276, v4277, v4278, v4279, v4280, 1, 0, 2, v4505, v4285, v4286, v4287, 3, 10, 4) -> f_729(v4276, v4277, v4278, v4279, v4505, 1, v4280, 0, 2, v4285, v4286, v4287, 3, 10, 4) :|: 0 = 0
f_727(v4276, v4277, v4278, v4279, 10, 1, 0, 9, v4285, v4286, v4287, 3, 4) -> f_728(v4276, v4277, v4278, v4279, 10, 1, 0, 9, v4285, v4286, v4287, 3, 4) :|: TRUE
f_728(v4635, v4636, v4637, v4638, 10, 1, 0, 9, v4643, v4644, v4645, 3, 4) -> f_730(v4635, v4636, v4637, v4638, 10, 1, 0, 9, v4643, v4644, v4645, 3, 4) :|: TRUE
f_729(v4276, v4277, v4278, v4279, v4505, 1, v4280, 0, 2, v4285, v4286, v4287, 3, 10, 4) -> f_731(v4276, v4277, v4278, v4279, v4505, 1, v4280, 0, 2, v4285, v4286, v4287, 3, 10, 4) :|: 0 = 0
f_730(v4635, v4636, v4637, v4638, 10, 1, 0, 9, v4643, v4644, v4645, 3, 4) -> f_732(v4635, v4636, v4637, v4638, 9, 1, 10, 0, v4643, v4644, v4645, 3, 4) :|: 0 = 0
f_731(v4276, v4277, v4278, v4279, v4505, 1, v4280, 0, 2, v4285, v4286, v4287, 3, 10, 4) -> f_733(v4276, v4277, v4278, v4279, v4505, 1, v4280, 0, 2, v4285, v4286, v4287, 3, 10, 4) :|: TRUE
f_732(v4635, v4636, v4637, v4638, 9, 1, 10, 0, v4643, v4644, v4645, 3, 4) -> f_734(v4635, v4636, v4637, v4638, 9, 1, 10, 0, v4643, v4644, v4645, 3, 4) :|: 0 = 0
f_733(v4276, v4277, v4278, v4279, v4505, 1, v4280, 0, 2, v4285, v4286, v4287, 3, 10, 4) -> f_735(v4276, v4277, v4278, v4279, v4505, 1, 0, v4280, 2, v4285, v4286, v4287, 3, 10, 4) :|: 0 = 0
f_734(v4635, v4636, v4637, v4638, 9, 1, 10, 0, v4643, v4644, v4645, 3, 4) -> f_736(v4635, v4636, v4637, v4638, 9, 1, 10, 0, v4643, v4644, v4645, 3, 4) :|: TRUE
f_735(v4276, v4277, v4278, v4279, v4505, 1, 0, v4280, 2, v4285, v4286, v4287, 3, 10, 4) -> f_737(v4276, v4277, v4278, v4279, v4505, 1, 0, v4280, 2, v4285, v4286, v4287, 3, 10, 4) :|: 0 = 0
f_736(v4635, v4636, v4637, v4638, 9, 1, 10, 0, v4643, v4644, v4645, 3, 4) -> f_738(v4635, v4636, v4637, v4638, 9, 1, 0, 10, v4643, v4644, v4645, 3, 4) :|: 0 = 0
f_737(v4276, v4277, v4278, v4279, v4505, 1, 0, v4280, 2, v4285, v4286, v4287, 3, 10, 4) -> f_739(v4276, v4277, v4278, v4279, v4505, 1, 0, v4280, 2, v4285, v4286, v4287, 3, 10, 4) :|: TRUE
f_738(v4635, v4636, v4637, v4638, 9, 1, 0, 10, v4643, v4644, v4645, 3, 4) -> f_740(v4635, v4636, v4637, v4638, 9, 1, 0, 10, v4643, v4644, v4645, 3, 4) :|: 0 = 0
f_739(v4276, v4277, v4278, v4279, v4505, 1, 0, v4280, 2, v4285, v4286, v4287, 3, 10, 4) -> f_703(v4276, v4277, v4278, v4279, v4505, 1, 0, v4280, 2, v4285, v4286, v4287, 3, 4) :|: TRUE
f_740(v4635, v4636, v4637, v4638, 9, 1, 0, 10, v4643, v4644, v4645, 3, 4) -> f_741(v4635, v4636, v4637, v4638, 9, 1, 0, 10, v4643, v4644, v4645, 3, 4) :|: TRUE
f_741(v4635, v4636, v4637, v4638, 9, 1, 0, 10, v4643, v4644, v4645, 3, 4) -> f_742(v4635, v4636, v4637, v4638, 9, 1, 0, 10, v4643, v4644, v4645, 3, 4) :|: 0 = 0
f_742(v4635, v4636, v4637, v4638, 9, 1, 0, 10, v4643, v4644, v4645, 3, 4) -> f_743(v4635, v4636, v4637, v4638, 9, 1, 0, 10, v4643, v4644, v4645, 3, 4) :|: 0 = 0
f_743(v4635, v4636, v4637, v4638, 9, 1, 0, 10, v4643, v4644, v4645, 3, 4) -> f_744(v4635, v4636, v4637, v4638, 9, 1, 0, 10, v4643, v4644, v4645, 3, 4) :|: TRUE
f_744(v4635, v4636, v4637, v4638, 9, 1, 0, 10, v4643, v4644, v4645, 3, 4) -> f_657(v4635, v4636, v4637, v4638, 9, 1, 0, 9, 10, 10, v4643, v4644, v4645, 3, 2, 4) :|: TRUE
Combined rules. Obtained 21 rulesP rules:
f_540(v2384:0, v2385:0, v2386:0, v2387:0, v2388:0, 1, 0, v2391:0, 2, v2393:0, v2394:0, v2395:0, 3, 4) -> f_704(v2384:0, v2385:0, v2386:0, v2387:0, v2388:0, 1, 0, 2, v2391:0, v2393:0, v2394:0, v2395:0, 3, 4) :|: TRUE
f_112 -> f_129(v1:0, v3:0, v5:0, v7:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 < 1
f_260(v256:0, v257:0, v258:0, v259:0, 10, 1, 0, v260:0, v264:0, v265:0, v266:0, 3, 10, 2, 4) -> f_260(v256:0, v257:0, v258:0, v259:0, 8, 1, 0, 9, v264:0, v265:0, v266:0, 3, 10, 2, 4) :|: v259:0 > 2 && v260:0 > 2
f_260(v256:0, v257:0, v258:0, v259:0, 1 + v503:0, 1, 0, v260:0, v264:0, v265:0, v266:0, 3, 10, 2, 4) -> f_260(v256:0, v257:0, v258:0, v259:0, v503:0, 1, 0, 1 + v503:0, v264:0, v265:0, v266:0, 3, 10, 2, 4) :|: v503:0 > 0 && v260:0 > 2 && v259:0 > 2 && v503:0 < 9
f_260(v256:0, v257:0, v258:0, v259:0, 1 + v503:0, 1, 0, v260:0, v264:0, v265:0, v266:0, 3, 10, 2, 4) -> f_260(v256:0, v257:0, v258:0, v259:0, v503:0, 1, 0, 1 + v503:0, v264:0, v265:0, v266:0, 3, 10, 2, 4) :|: v503:0 > 9 && v259:0 > 2 && v260:0 > 2
f_112 -> f_260(v1:0, v3:0, v5:0, v7:0, v12:0, 1, 0, v7:0, v2:0, v4:0, v6:0, 3, 10, 2, 4) :|: FALSE
f_112 -> f_260(v1:0, v3:0, v5:0, 1 + v12:0, v12:0, 1, 0, 1 + v12:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 10, 2, 4) :|: v12:0 > 0 && v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v12:0 < 9
f_112 -> f_260(v1:0, v3:0, v5:0, 1 + v12:0, v12:0, 1, 0, 1 + v12:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 10, 2, 4) :|: v12:0 > 9 && v3:0 > 0 && v1:0 > 0 && v5:0 > 0
f_112 -> f_260(v1:0, v3:0, v5:0, 10, v503:0, 1, 0, 9, v2:0, v4:0, v6:0, 3, 10, 2, 4) :|: FALSE
f_112 -> f_260(v1:0, v3:0, v5:0, 10, 8, 1, 0, 9, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 10, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0
f_657(v3787:0, v3788:0, v3789:0, v3790:0, 1 + v3815:0, 1, 0, 9, 10, v3796:0, v3797:0, v3798:0, v3799:0, 3, 2, 4) -> f_657(v3787:0, v3788:0, v3789:0, v3790:0, v3815:0, 1, 0, 9, 10, 1 + v3815:0, v3797:0, v3798:0, v3799:0, 3, 2, 4) :|: v3815:0 > 1 && v3815:0 < 9
f_112 -> f_428(v1:0, v3:0, v5:0, 1, 2, 0, 1, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0
f_704(v4276:0, v4277:0, v4278:0, v4279:0, 10, 1, 0, 2, v4283:0, v4285:0, v4286:0, v4287:0, 3, 4) -> f_657(v4276:0, v4277:0, v4278:0, v4279:0, 9, 1, 0, 9, 10, 10, v4285:0, v4286:0, v4287:0, 3, 2, 4) :|: TRUE
f_260(v256:0, v257:0, v258:0, v259:0, 1, 1, 0, v260:0, v264:0, v265:0, v266:0, 3, 10, 2, 4) -> f_704(v256:0, v257:0, v258:0, v259:0, 2, 1, 0, 2, 1, v264:0, v265:0, v266:0, 3, 4) :|: TRUE
f_428(v1367:0, v1368:0, v1369:0, 1, 10, 0, v1373:0, v1374:0, v1375:0, v1376:0, 3, 2, 4) -> f_657(v1367:0, v1368:0, v1369:0, 1, 9, 1, 0, 9, 10, 10, v1374:0, v1375:0, v1376:0, 3, 2, 4) :|: TRUE
f_657(v3787:0, v3788:0, v3789:0, v3790:0, 1, 1, 0, 9, 10, v3796:0, v3797:0, v3798:0, v3799:0, 3, 2, 4) -> f_672(v3787:0, v3788:0, v3789:0, v3790:0, 0, 1, 9, 10, v3797:0, v3798:0, v3799:0, 3, 4) :|: TRUE
f_657(v3787:0, v3788:0, v3789:0, v3790:0, 2, 1, 0, 9, 10, v3796:0, v3797:0, v3798:0, v3799:0, 3, 2, 4) -> f_704(v3787:0, v3788:0, v3789:0, v3790:0, 2, 1, 0, 2, 1, v3797:0, v3798:0, v3799:0, 3, 4) :|: TRUE
f_704(v4276:0, v4277:0, v4278:0, v4279:0, v4280:0, 1, 0, 2, v4283:0, v4285:0, v4286:0, v4287:0, 3, 4) -> f_704(v4276:0, v4277:0, v4278:0, v4279:0, 1 + v4280:0, 1, 0, 2, v4280:0, v4285:0, v4286:0, v4287:0, 3, 4) :|: v4280:0 > 1 && v4280:0 < 10
f_704(v4276:0, v4277:0, v4278:0, v4279:0, v4280:0, 1, 0, 2, v4283:0, v4285:0, v4286:0, v4287:0, 3, 4) -> f_704(v4276:0, v4277:0, v4278:0, v4279:0, 1 + v4280:0, 1, 0, 2, v4280:0, v4285:0, v4286:0, v4287:0, 3, 4) :|: v4280:0 > 10
f_428(v1367:0, v1368:0, v1369:0, 1, v1371:0, 0, v1373:0, v1374:0, v1375:0, v1376:0, 3, 2, 4) -> f_428(v1367:0, v1368:0, v1369:0, 1, 1 + v1371:0, 0, v1371:0, v1374:0, v1375:0, v1376:0, 3, 2, 4) :|: v1371:0 > 1 && v1371:0 < 10
f_428(v1367:0, v1368:0, v1369:0, 1, v1371:0, 0, v1373:0, v1374:0, v1375:0, v1376:0, 3, 2, 4) -> f_428(v1367:0, v1368:0, v1369:0, 1, 1 + v1371:0, 0, v1371:0, v1374:0, v1375:0, v1376:0, 3, 2, 4) :|: v1371:0 > 10
Filtered unneeded arguments:
   f_260(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_260(x4, x5, x8)
   f_657(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_657(x5)
   f_704(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_704(x5)
   f_428(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) -> f_428(x5)
   f_540(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_540(x5)
Removed division, modulo operations, cleaned up constraints. Obtained 21 rules.P rules:
f_540(v2388:0) -> f_704(v2388:0) :|: TRUE
f_112 -> f_129(v1:0, v3:0, v5:0, v7:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0 && v7:0 < 1 && v5:0 > 0
f_260(v259:0, cons_10, v260:0) -> f_260(v259:0, 8, 9) :|: v259:0 > 2 && v260:0 > 2 && cons_10 = 10
f_260(v259:0, sum~cons_1~v503:0, v260:0) -> f_260(v259:0, v503:0, 1 + v503:0) :|: v260:0 > 2 && v503:0 > 0 && v503:0 < 9 && v259:0 > 2 && sum~cons_1~v503:0 = 1 + v503:0
f_260(v259:0, sum~cons_1~v503:0, v260:0) -> f_260(v259:0, v503:0, 1 + v503:0) :|: v259:0 > 2 && v260:0 > 2 && v503:0 > 9 && sum~cons_1~v503:0 = 1 + v503:0
f_112 -> f_260(v7:0, v12:0, v7:0) :|: FALSE
f_112 -> f_260(1 + v12:0, v12:0, 1 + v12:0) :|: v12:0 > 0 && v12:0 < 9
f_112 -> f_260(1 + v12:0, v12:0, 1 + v12:0) :|: v12:0 > 9
f_112 -> f_260(10, v503:0, 9) :|: FALSE
f_112 -> f_260(10, 8, 9) :|: TRUE
f_657(sum~cons_1~v3815:0) -> f_657(v3815:0) :|: v3815:0 > 1 && v3815:0 < 9 && sum~cons_1~v3815:0 = 1 + v3815:0
f_112 -> f_428(2) :|: TRUE
f_704(cons_10) -> f_657(9) :|: TRUE && cons_10 = 10
f_260(v259:0, cons_1, v260:0) -> f_704(2) :|: TRUE && cons_1 = 1
f_428(cons_10) -> f_657(9) :|: TRUE && cons_10 = 10
f_657(cons_1) -> f_672(v3787:0, v3788:0, v3789:0, v3790:0, 0, 1, 9, 10, v3797:0, v3798:0, v3799:0, 3, 4) :|: TRUE && cons_1 = 1
f_657(cons_2) -> f_704(2) :|: TRUE && cons_2 = 2
f_704(v4280:0) -> f_704(1 + v4280:0) :|: v4280:0 > 1 && v4280:0 < 10
f_704(v4280:0) -> f_704(1 + v4280:0) :|: v4280:0 > 10
f_428(v1371:0) -> f_428(1 + v1371:0) :|: v1371:0 > 1 && v1371:0 < 10
f_428(v1371:0) -> f_428(1 + v1371:0) :|: v1371:0 > 10

----------------------------------------

(6)
Obligation:
Rules:
f_540(v2388:0) -> f_704(v2388:0) :|: TRUE
f_112 -> f_129(v1:0, v3:0, v5:0, v7:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0 && v7:0 < 1 && v5:0 > 0
f_260(v259:0, cons_10, v260:0) -> f_260(v259:0, 8, 9) :|: v259:0 > 2 && v260:0 > 2 && cons_10 = 10
f_260(x, x1, x2) -> f_260(x, x3, 1 + x3) :|: x2 > 2 && x3 > 0 && x3 < 9 && x > 2 && x1 = 1 + x3
f_260(x4, x5, x6) -> f_260(x4, x7, 1 + x7) :|: x4 > 2 && x6 > 2 && x7 > 9 && x5 = 1 + x7
f_112 -> f_260(x8, x9, x8) :|: FALSE
f_112 -> f_260(1 + v12:0, v12:0, 1 + v12:0) :|: v12:0 > 0 && v12:0 < 9
f_112 -> f_260(1 + x10, x10, 1 + x10) :|: x10 > 9
f_112 -> f_260(10, v503:0, 9) :|: FALSE
f_112 -> f_260(10, 8, 9) :|: TRUE
f_657(sum~cons_1~v3815:0) -> f_657(v3815:0) :|: v3815:0 > 1 && v3815:0 < 9 && sum~cons_1~v3815:0 = 1 + v3815:0
f_112 -> f_428(2) :|: TRUE
f_704(x11) -> f_657(9) :|: TRUE && x11 = 10
f_260(x12, x13, x14) -> f_704(2) :|: TRUE && x13 = 1
f_428(x15) -> f_657(9) :|: TRUE && x15 = 10
f_657(cons_1) -> f_672(v3787:0, v3788:0, v3789:0, v3790:0, 0, 1, 9, 10, v3797:0, v3798:0, v3799:0, 3, 4) :|: TRUE && cons_1 = 1
f_657(cons_2) -> f_704(2) :|: TRUE && cons_2 = 2
f_704(v4280:0) -> f_704(1 + v4280:0) :|: v4280:0 > 1 && v4280:0 < 10
f_704(x16) -> f_704(1 + x16) :|: x16 > 10
f_428(v1371:0) -> f_428(1 + v1371:0) :|: v1371:0 > 1 && v1371:0 < 10
f_428(x17) -> f_428(1 + x17) :|: x17 > 10
Start term: f_112

----------------------------------------

(7) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination can continue
----------------------------------------

(8)
Obligation:
Rules:
f_540(v2388:0) -> f_704(v2388:0) :|: TRUE
f_112 -> f_129(v1:0, v3:0, v5:0, v7:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0 && v7:0 < 1 && v5:0 > 0
f_260(v259:0, cons_10, v260:0) -> f_260(v259:0, 8, 9) :|: v259:0 > 2 && v260:0 > 2 && cons_10 = 10
f_260(x, x1, x2) -> f_260(x, x3, 1 + x3) :|: x2 > 2 && x3 > 0 && x3 < 9 && x > 2 && x1 = 1 + x3
f_260(x4, x5, x6) -> f_260(x4, x7, 1 + x7) :|: x4 > 2 && x6 > 2 && x7 > 9 && x5 = 1 + x7
f_112 -> f_260(x8, x9, x8) :|: FALSE
f_112 -> f_260(1 + v12:0, v12:0, 1 + v12:0) :|: v12:0 > 0 && v12:0 < 9
f_112 -> f_260(1 + x10, x10, 1 + x10) :|: x10 > 9
f_112 -> f_260(10, v503:0, 9) :|: FALSE
f_112 -> f_260(10, 8, 9) :|: TRUE
f_657(sum~cons_1~v3815:0) -> f_657(v3815:0) :|: v3815:0 > 1 && v3815:0 < 9 && sum~cons_1~v3815:0 = 1 + v3815:0
f_112 -> f_428(2) :|: TRUE
f_704(x11) -> f_657(9) :|: TRUE && x11 = 10
f_260(x12, x13, x14) -> f_704(2) :|: TRUE && x13 = 1
f_428(x15) -> f_657(9) :|: TRUE && x15 = 10
f_657(cons_1) -> f_672(v3787:0, v3788:0, v3789:0, v3790:0, 0, 1, 9, 10, v3797:0, v3798:0, v3799:0, 3, 4) :|: TRUE && cons_1 = 1
f_657(cons_2) -> f_704(2) :|: TRUE && cons_2 = 2
f_704(v4280:0) -> f_704(1 + v4280:0) :|: v4280:0 > 1 && v4280:0 < 10
f_704(x16) -> f_704(1 + x16) :|: x16 > 10
f_428(v1371:0) -> f_428(1 + v1371:0) :|: v1371:0 > 1 && v1371:0 < 10
f_428(x17) -> f_428(1 + x17) :|: x17 > 10
Start term: f_112

----------------------------------------

(9) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(10)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_112))
(VAR x290 x160 x281 x280 x162 x283 x161 x282 x164 x285 x163 x284 x166 x287 x165 x286 x168 x289 x167 x288 x169 x270 x391 x390 x151 x272 x393 x150 x271 x392 x153 x274 x395 x152 x273 x394 x155 x276 x397 x154 x275 x396 x157 x278 x399 x156 x277 x398 x159 x158 x279 x380 x140 x261 x382 x260 x381 x142 x263 x384 x141 x262 x383 x144 x265 x386 x143 x264 x385 x146 x267 x388 x145 x266 x387 x148 x269 x147 x268 x389 x149 x250 x371 x370 x131 x252 x373 x130 x251 x372 x133 x254 x375 x132 x253 x374 x135 x256 x377 x134 x255 x376 x137 x258 x379 x136 x257 x378 x139 x138 x259 x193 x192 x195 x194 x197 x196 x199 x198 x'' k14 k15 k16 k17 k10 k11 k12 k13 x191 x190 x182 x181 x184 x183 x186 x185 x188 x187 x189 x180 x171 x292 x170 x291 x173 x294 x172 x293 x175 x296 x174 x295 x177 x298 x176 x297 x179 x178 x299 k36 k37 k38 k39 k32 k33 k34 k35 k30 k31 k29 k25 k26 k27 k28 k21 k22 k23 k24 k20 k18 k19 k40 x x28 x29 x24 x25 x26 x27 x20 x21 x22 x23 x17 x18 x19 x13 x14 x15 x16 x10 x11 x12 x46 x47 x48 x49 x42 x43 x44 x45 x40 x41 x39 x35 x36 x37 x38 x31 x32 x33 x34 x30 x70 x68 x69 x64 x65 x66 x67 x60 x61 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x58 x59 x53 x54 x55 x56 x50 x51 x52 x407 x90 x406 x91 x409 x92 x408 x86 x87 x88 x401 x89 x400 x82 x403 x83 x402 x84 x405 x85 x404 x80 x81 x79 x75 x76 x77 x78 x71 x72 x73 x74 x97 x98 x99 x93 x94 x95 x96 x209 x208 x329 x320 x441 x440 x201 x322 x443 x200 x321 x442 x203 x324 x445 x202 x323 x444 x205 x326 x447 x204 x325 x446 x207 x328 x449 x206 x327 x448 x319 x318 x439 x430 x311 x432 x310 x431 x313 x434 x312 x433 x315 x436 x314 x435 x317 x438 x316 x437 x308 x429 x307 x428 x309 x300 x421 x420 x302 x423 x301 x422 x304 x425 x303 x424 x306 x427 x305 x426 x418 x417 x419 x410 x412 x411 x414 x413 x416 x415 x360 x120 x241 x362 x240 x361 x122 x243 x364 x121 x242 x363 x124 x245 x366 x123 x244 x365 x126 x247 x368 x125 x246 x367 x128 x249 x127 x248 x369 x129 x230 x351 x350 x111 x232 x353 x110 x231 x352 x113 x234 x355 x112 x233 x354 x115 x236 x357 x114 x235 x356 x117 x238 x359 x116 x237 x358 x119 x118 x239 x109 x4 x5 x2 x3 x8 x340 x461 x9 x460 x6 x100 x221 x342 x7 x220 x341 x462 x102 x223 x344 x101 x222 x343 x104 x225 x346 x103 x224 x345 x106 x227 x348 x1 x105 x226 x347 x108 x229 x107 x228 x349 x219 x' x450 x210 x331 x452 x330 x451 x212 x333 x454 x211 x332 x453 x214 x335 x456 x213 x334 x455 x216 x337 x458 x215 x336 x457 x218 x339 x217 x338 x459)
(RULES
  f_657(k20, x178, x179, x180, x181, x182, x183, x184, x185, x186, x187, x188, x189) -> f_704(2, x190, x191, x192, x193, x194, x195, x196, x197, x198, x199, x200, x201) :|: 0 = 0 && k20 = 2
  f_428(k0, x439, x440, x441, x442, x443, x444, x445, x446, x447, x448, x449, x450) -> f_428(1 + k0, x451, x452, x453, x454, x455, x456, x457, x458, x459, x460, x461, x462) :|: k0 > 1 && k0 < 10
  f_428(k28, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x140, x141) -> f_428(1 + k28, x142, x143, x144, x145, x146, x147, x148, x149, x150, x151, x152, x153) :|: k28 > 10
  f_112(x260, x261, x262, x263, x264, x265, x266, x267, x268, x269, x270, x271, x272) -> f_428(2, x273, x274, x275, x276, x277, x278, x279, x280, x281, x282, x283, x284) :|: 0 = 0
  f_112(x107, x108, x109, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119) -> f_260(k8, k10, k8, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129) :|: 0 = 1
  f_704(k35, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32) -> f_657(9, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44) :|: 0 = 0 && k35 = 10
  f_704(k19, x356, x357, x358, x359, x360, x361, x362, x363, x364, x365, x366, x367) -> f_704(1 + k19, x368, x369, x370, x371, x372, x373, x374, x375, x376, x377, x378, x379) :|: k19 > 1 && k19 < 10
  f_657(k25, x202, x203, x204, x205, x206, x207, x208, x209, x210, x211, x212, x213) -> f_672(k40, k37, k39, k13, 0, 1, 9, 10, k17, k18, k15, 3, 4) :|: 0 = 0 && k25 = 1
  f_112(x214, x215, x216, x217, x218, x219, x220, x221, x222, x223, x224, x225, x226) -> f_260(1 + k34, k34, 1 + k34, x227, x228, x229, x230, x231, x232, x233, x234, x235, x236) :|: k34 > 9
  f_260(k14, k16, k5, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96) -> f_260(k14, k7, 1 + k7, x97, x98, x99, x100, x101, x102, x103, x104, x105, x106) :|: k5 > 2 && k7 > 0 && k7 < 9 && k14 > 2 && k16 = 1 + k7
  f_540(k1, x154, x155, x156, x157, x158, x159, x160, x161, x162, x163, x164, x165) -> f_704(k1, x166, x167, x168, x169, x170, x171, x172, x173, x174, x175, x176, x177) :|: 0 = 0
  f_260(k36, k30, k31, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74) -> f_704(2, x75, x76, x77, x78, x79, x80, x81, x82, x83, x84, x85, x86) :|: 0 = 0 && k30 = 1
  f_112(x400, x401, x402, x403, x404, x405, x406, x407, x408, x409, x410, x411, x412) -> f_129(k27, k3, k6, k9, 0, 3 + k27, 3 + k3, 3 + k6, 3, 1, 4, x413, x414) :|: k27 > 0 && k3 > 0 && k9 < 1 && k6 > 0
  f_112(x333, x334, x335, x336, x337, x338, x339, x340, x341, x342, x343, x344, x345) -> f_260(1 + k24, k24, 1 + k24, x346, x347, x348, x349, x350, x351, x352, x353, x354, x355) :|: k24 > 0 && k24 < 9
  f_428(k32, x285, x286, x287, x288, x289, x290, x291, x292, x293, x294, x295, x296) -> f_657(9, x297, x298, x299, x300, x301, x302, x303, x304, x305, x306, x307, x308) :|: 0 = 0 && k32 = 10
  f_704(k33, x309, x310, x311, x312, x313, x314, x315, x316, x317, x318, x319, x320) -> f_704(1 + k33, x321, x322, x323, x324, x325, x326, x327, x328, x329, x330, x331, x332) :|: k33 > 10
  f_260(k2, k4, k11, x380, x381, x382, x383, x384, x385, x386, x387, x388, x389) -> f_260(k2, k12, 1 + k12, x390, x391, x392, x393, x394, x395, x396, x397, x398, x399) :|: k2 > 2 && k11 > 2 && k12 > 9 && k4 = 1 + k12
  f_112(x237, x238, x239, x240, x241, x242, x243, x244, x245, x246, x247, x248, x249) -> f_260(10, 8, 9, x250, x251, x252, x253, x254, x255, x256, x257, x258, x259) :|: 0 = 0
  f_112(x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10) -> f_260(10, k29, 9, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) :|: 0 = 1
  f_260(k23, k21, k22, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54) -> f_260(k23, 8, 9, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64) :|: k23 > 2 && k22 > 2 && k21 = 10
  f_657(k38, x415, x416, x417, x418, x419, x420, x421, x422, x423, x424, x425, x426) -> f_657(k26, x427, x428, x429, x430, x431, x432, x433, x434, x435, x436, x437, x438) :|: k26 > 1 && k26 < 9 && k38 = 1 + k26
)

----------------------------------------

(11) LoAT (COMPLETE)
LoAT was called with the following command:

/aprove/bin/loat --plain --nonterm --proof-level 3 /tmp/aprove.InputModules.Programs.loat17883781133359132120.koat 

LoAT's output was:


### Pre-processing the ITS problem ###

Initial linear ITS problem
   Start location: f_112
      0: f_657 -> f_704 : k35'=2, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, [ 0==0 && k20==2 ], cost: 1
      7: f_657 -> f_672 : k0'=free_87, k1'=free_86, k10'=free_90, k11'=free_84, k12'=0, k13'=1, k14'=9, k15'=10, k16'=free_85, k17'=free_88, k18'=free_89, k19'=3, k2'=4, [ 0==0 && k20==1 ], cost: 1
     20: f_657 -> f_657 : k20'=free_224, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, [ free_224>1 && free_224<9 && k20==1+free_224 ], cost: 1
      1: f_428 -> f_428 : k0'=1+k0, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [ k0>1 && k0<10 ], cost: 1
      2: f_428 -> f_428 : k0'=1+k0, x439'=free_24, x440'=free_31, x441'=free_34, x442'=free_27, x443'=free_30, x444'=free_33, x445'=free_26, x446'=free_29, x447'=free_25, x448'=free_28, x449'=free_32, x450'=free_35, [ k0>10 ], cost: 1
     14: f_428 -> f_657 : k20'=9, x178'=free_163, x179'=free_155, x180'=free_159, x181'=free_158, x182'=free_162, x183'=free_154, x184'=free_157, x185'=free_161, x186'=free_165, x187'=free_156, x188'=free_160, x189'=free_164, [ 0==0 && k0==10 ], cost: 1
      3: f_112 -> f_428 : k0'=2, x439'=free_47, x440'=free_38, x441'=free_42, x442'=free_46, x443'=free_37, x444'=free_41, x445'=free_45, x446'=free_40, x447'=free_44, x448'=free_36, x449'=free_39, x450'=free_43, [ 0==0 ], cost: 1
      4: f_112 -> f_260 : k14'=free_58, k16'=free_50, k5'=free_58, x87'=free_55, x88'=free_59, x89'=free_51, x90'=free_54, x91'=free_57, x92'=free_49, x93'=free_53, x94'=free_56, x95'=free_48, x96'=free_52, [ 0==1 ], cost: 1
      8: f_112 -> f_260 : k14'=1+free_95, k16'=free_95, k5'=1+free_95, x87'=free_93, x88'=free_97, x89'=free_100, x90'=free_94, x91'=free_98, x92'=free_101, x93'=free_92, x94'=free_96, x95'=free_99, x96'=free_91, [ free_95>9 ], cost: 1
     12: f_112 -> f_129 : k0'=free_141, k1'=free_140, k10'=free_139, k11'=free_137, k12'=0, k13'=3+free_141, k14'=3+free_140, k15'=3+free_139, k16'=3, k17'=1, k18'=4, k19'=free_142, k2'=free_138, [ free_141>0 && free_140>0 && free_137<1 && free_139>0 ], cost: 1
     13: f_112 -> f_260 : k14'=1+free_151, k16'=free_151, k5'=1+free_151, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151>0 && free_151<9 ], cost: 1
     17: f_112 -> f_260 : k14'=10, k16'=8, k5'=9, x87'=free_197, x88'=free_191, x89'=free_194, x90'=free_196, x91'=free_190, x92'=free_193, x93'=free_195, x94'=free_189, x95'=free_192, x96'=free_198, [ 0==0 ], cost: 1
     18: f_112 -> f_260 : k14'=10, k16'=free_203, k5'=9, x87'=free_201, x88'=free_202, x89'=free_207, x90'=free_199, x91'=free_208, x92'=free_200, x93'=free_204, x94'=free_205, x95'=free_209, x96'=free_206, [ 0==1 ], cost: 1
      5: f_704 -> f_657 : k20'=9, x178'=free_66, x179'=free_71, x180'=free_61, x181'=free_64, x182'=free_69, x183'=free_65, x184'=free_70, x185'=free_67, x186'=free_68, x187'=free_60, x188'=free_63, x189'=free_62, [ 0==0 && k35==10 ], cost: 1
      6: f_704 -> f_704 : k35'=1+k35, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, [ k35>1 && k35<10 ], cost: 1
     15: f_704 -> f_704 : k35'=1+k35, x21'=free_174, x22'=free_166, x23'=free_170, x24'=free_173, x25'=free_177, x26'=free_169, x27'=free_172, x28'=free_176, x29'=free_168, x30'=free_175, x31'=free_167, x32'=free_171, [ k35>10 ], cost: 1
      9: f_260 -> f_260 : k16'=free_107, k5'=1+free_107, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ k5>2 && free_107>0 && free_107<9 && k14>2 && k16==1+free_107 ], cost: 1
     11: f_260 -> f_704 : k35'=2, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, [ 0==0 && k16==1 ], cost: 1
     16: f_260 -> f_260 : k16'=free_186, k5'=1+free_186, x87'=free_180, x88'=free_183, x89'=free_187, x90'=free_179, x91'=free_182, x92'=free_185, x93'=free_178, x94'=free_181, x95'=free_184, x96'=free_188, [ k14>2 && k5>2 && free_186>9 && k16==1+free_186 ], cost: 1
     19: f_260 -> f_260 : k16'=8, k5'=9, x87'=free_215, x88'=free_219, x89'=free_211, x90'=free_214, x91'=free_218, x92'=free_213, x93'=free_217, x94'=free_210, x95'=free_212, x96'=free_216, [ k14>2 && k5>2 && k16==10 ], cost: 1
     10: f_540 -> f_704 : k35'=k1, x21'=free_117, x22'=free_120, x23'=free_124, x24'=free_116, x25'=free_123, x26'=free_115, x27'=free_114, x28'=free_119, x29'=free_122, x30'=free_113, x31'=free_118, x32'=free_121, [ 0==0 ], cost: 1

Checking for constant complexity:
   The following rule is satisfiable with cost >= 1, yielding constant complexity:
      3: f_112 -> f_428 : k0'=2, x439'=free_47, x440'=free_38, x441'=free_42, x442'=free_46, x443'=free_37, x444'=free_41, x445'=free_45, x446'=free_40, x447'=free_44, x448'=free_36, x449'=free_39, x450'=free_43, [ 0==0 ], cost: 1

Removed unreachable and leaf rules:
   Start location: f_112
      0: f_657 -> f_704 : k35'=2, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, [ 0==0 && k20==2 ], cost: 1
     20: f_657 -> f_657 : k20'=free_224, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, [ free_224>1 && free_224<9 && k20==1+free_224 ], cost: 1
      1: f_428 -> f_428 : k0'=1+k0, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [ k0>1 && k0<10 ], cost: 1
      2: f_428 -> f_428 : k0'=1+k0, x439'=free_24, x440'=free_31, x441'=free_34, x442'=free_27, x443'=free_30, x444'=free_33, x445'=free_26, x446'=free_29, x447'=free_25, x448'=free_28, x449'=free_32, x450'=free_35, [ k0>10 ], cost: 1
     14: f_428 -> f_657 : k20'=9, x178'=free_163, x179'=free_155, x180'=free_159, x181'=free_158, x182'=free_162, x183'=free_154, x184'=free_157, x185'=free_161, x186'=free_165, x187'=free_156, x188'=free_160, x189'=free_164, [ 0==0 && k0==10 ], cost: 1
      3: f_112 -> f_428 : k0'=2, x439'=free_47, x440'=free_38, x441'=free_42, x442'=free_46, x443'=free_37, x444'=free_41, x445'=free_45, x446'=free_40, x447'=free_44, x448'=free_36, x449'=free_39, x450'=free_43, [ 0==0 ], cost: 1
      4: f_112 -> f_260 : k14'=free_58, k16'=free_50, k5'=free_58, x87'=free_55, x88'=free_59, x89'=free_51, x90'=free_54, x91'=free_57, x92'=free_49, x93'=free_53, x94'=free_56, x95'=free_48, x96'=free_52, [ 0==1 ], cost: 1
      8: f_112 -> f_260 : k14'=1+free_95, k16'=free_95, k5'=1+free_95, x87'=free_93, x88'=free_97, x89'=free_100, x90'=free_94, x91'=free_98, x92'=free_101, x93'=free_92, x94'=free_96, x95'=free_99, x96'=free_91, [ free_95>9 ], cost: 1
     13: f_112 -> f_260 : k14'=1+free_151, k16'=free_151, k5'=1+free_151, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151>0 && free_151<9 ], cost: 1
     17: f_112 -> f_260 : k14'=10, k16'=8, k5'=9, x87'=free_197, x88'=free_191, x89'=free_194, x90'=free_196, x91'=free_190, x92'=free_193, x93'=free_195, x94'=free_189, x95'=free_192, x96'=free_198, [ 0==0 ], cost: 1
     18: f_112 -> f_260 : k14'=10, k16'=free_203, k5'=9, x87'=free_201, x88'=free_202, x89'=free_207, x90'=free_199, x91'=free_208, x92'=free_200, x93'=free_204, x94'=free_205, x95'=free_209, x96'=free_206, [ 0==1 ], cost: 1
      5: f_704 -> f_657 : k20'=9, x178'=free_66, x179'=free_71, x180'=free_61, x181'=free_64, x182'=free_69, x183'=free_65, x184'=free_70, x185'=free_67, x186'=free_68, x187'=free_60, x188'=free_63, x189'=free_62, [ 0==0 && k35==10 ], cost: 1
      6: f_704 -> f_704 : k35'=1+k35, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, [ k35>1 && k35<10 ], cost: 1
     15: f_704 -> f_704 : k35'=1+k35, x21'=free_174, x22'=free_166, x23'=free_170, x24'=free_173, x25'=free_177, x26'=free_169, x27'=free_172, x28'=free_176, x29'=free_168, x30'=free_175, x31'=free_167, x32'=free_171, [ k35>10 ], cost: 1
      9: f_260 -> f_260 : k16'=free_107, k5'=1+free_107, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ k5>2 && free_107>0 && free_107<9 && k14>2 && k16==1+free_107 ], cost: 1
     11: f_260 -> f_704 : k35'=2, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, [ 0==0 && k16==1 ], cost: 1
     16: f_260 -> f_260 : k16'=free_186, k5'=1+free_186, x87'=free_180, x88'=free_183, x89'=free_187, x90'=free_179, x91'=free_182, x92'=free_185, x93'=free_178, x94'=free_181, x95'=free_184, x96'=free_188, [ k14>2 && k5>2 && free_186>9 && k16==1+free_186 ], cost: 1
     19: f_260 -> f_260 : k16'=8, k5'=9, x87'=free_215, x88'=free_219, x89'=free_211, x90'=free_214, x91'=free_218, x92'=free_213, x93'=free_217, x94'=free_210, x95'=free_212, x96'=free_216, [ k14>2 && k5>2 && k16==10 ], cost: 1

Removed rules with unsatisfiable guard:
   Start location: f_112
      0: f_657 -> f_704 : k35'=2, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, [ 0==0 && k20==2 ], cost: 1
     20: f_657 -> f_657 : k20'=free_224, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, [ free_224>1 && free_224<9 && k20==1+free_224 ], cost: 1
      1: f_428 -> f_428 : k0'=1+k0, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [ k0>1 && k0<10 ], cost: 1
      2: f_428 -> f_428 : k0'=1+k0, x439'=free_24, x440'=free_31, x441'=free_34, x442'=free_27, x443'=free_30, x444'=free_33, x445'=free_26, x446'=free_29, x447'=free_25, x448'=free_28, x449'=free_32, x450'=free_35, [ k0>10 ], cost: 1
     14: f_428 -> f_657 : k20'=9, x178'=free_163, x179'=free_155, x180'=free_159, x181'=free_158, x182'=free_162, x183'=free_154, x184'=free_157, x185'=free_161, x186'=free_165, x187'=free_156, x188'=free_160, x189'=free_164, [ 0==0 && k0==10 ], cost: 1
      3: f_112 -> f_428 : k0'=2, x439'=free_47, x440'=free_38, x441'=free_42, x442'=free_46, x443'=free_37, x444'=free_41, x445'=free_45, x446'=free_40, x447'=free_44, x448'=free_36, x449'=free_39, x450'=free_43, [ 0==0 ], cost: 1
      8: f_112 -> f_260 : k14'=1+free_95, k16'=free_95, k5'=1+free_95, x87'=free_93, x88'=free_97, x89'=free_100, x90'=free_94, x91'=free_98, x92'=free_101, x93'=free_92, x94'=free_96, x95'=free_99, x96'=free_91, [ free_95>9 ], cost: 1
     13: f_112 -> f_260 : k14'=1+free_151, k16'=free_151, k5'=1+free_151, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151>0 && free_151<9 ], cost: 1
     17: f_112 -> f_260 : k14'=10, k16'=8, k5'=9, x87'=free_197, x88'=free_191, x89'=free_194, x90'=free_196, x91'=free_190, x92'=free_193, x93'=free_195, x94'=free_189, x95'=free_192, x96'=free_198, [ 0==0 ], cost: 1
      5: f_704 -> f_657 : k20'=9, x178'=free_66, x179'=free_71, x180'=free_61, x181'=free_64, x182'=free_69, x183'=free_65, x184'=free_70, x185'=free_67, x186'=free_68, x187'=free_60, x188'=free_63, x189'=free_62, [ 0==0 && k35==10 ], cost: 1
      6: f_704 -> f_704 : k35'=1+k35, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, [ k35>1 && k35<10 ], cost: 1
     15: f_704 -> f_704 : k35'=1+k35, x21'=free_174, x22'=free_166, x23'=free_170, x24'=free_173, x25'=free_177, x26'=free_169, x27'=free_172, x28'=free_176, x29'=free_168, x30'=free_175, x31'=free_167, x32'=free_171, [ k35>10 ], cost: 1
      9: f_260 -> f_260 : k16'=free_107, k5'=1+free_107, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ k5>2 && free_107>0 && free_107<9 && k14>2 && k16==1+free_107 ], cost: 1
     11: f_260 -> f_704 : k35'=2, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, [ 0==0 && k16==1 ], cost: 1
     16: f_260 -> f_260 : k16'=free_186, k5'=1+free_186, x87'=free_180, x88'=free_183, x89'=free_187, x90'=free_179, x91'=free_182, x92'=free_185, x93'=free_178, x94'=free_181, x95'=free_184, x96'=free_188, [ k14>2 && k5>2 && free_186>9 && k16==1+free_186 ], cost: 1
     19: f_260 -> f_260 : k16'=8, k5'=9, x87'=free_215, x88'=free_219, x89'=free_211, x90'=free_214, x91'=free_218, x92'=free_213, x93'=free_217, x94'=free_210, x95'=free_212, x96'=free_216, [ k14>2 && k5>2 && k16==10 ], cost: 1

Simplified all rules, resulting in:
   Start location: f_112
      0: f_657 -> f_704 : k35'=2, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, [ k20==2 ], cost: 1
     20: f_657 -> f_657 : k20'=-1+k20, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, [ -1+k20>1 && -1+k20<9 ], cost: 1
      1: f_428 -> f_428 : k0'=1+k0, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [ k0>1 && k0<10 ], cost: 1
      2: f_428 -> f_428 : k0'=1+k0, x439'=free_24, x440'=free_31, x441'=free_34, x442'=free_27, x443'=free_30, x444'=free_33, x445'=free_26, x446'=free_29, x447'=free_25, x448'=free_28, x449'=free_32, x450'=free_35, [ k0>10 ], cost: 1
     14: f_428 -> f_657 : k20'=9, x178'=free_163, x179'=free_155, x180'=free_159, x181'=free_158, x182'=free_162, x183'=free_154, x184'=free_157, x185'=free_161, x186'=free_165, x187'=free_156, x188'=free_160, x189'=free_164, [ k0==10 ], cost: 1
      3: f_112 -> f_428 : k0'=2, x439'=free_47, x440'=free_38, x441'=free_42, x442'=free_46, x443'=free_37, x444'=free_41, x445'=free_45, x446'=free_40, x447'=free_44, x448'=free_36, x449'=free_39, x450'=free_43, [], cost: 1
      8: f_112 -> f_260 : k14'=1+free_95, k16'=free_95, k5'=1+free_95, x87'=free_93, x88'=free_97, x89'=free_100, x90'=free_94, x91'=free_98, x92'=free_101, x93'=free_92, x94'=free_96, x95'=free_99, x96'=free_91, [ free_95>9 ], cost: 1
     13: f_112 -> f_260 : k14'=1+free_151, k16'=free_151, k5'=1+free_151, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151>0 && free_151<9 ], cost: 1
     17: f_112 -> f_260 : k14'=10, k16'=8, k5'=9, x87'=free_197, x88'=free_191, x89'=free_194, x90'=free_196, x91'=free_190, x92'=free_193, x93'=free_195, x94'=free_189, x95'=free_192, x96'=free_198, [], cost: 1
      5: f_704 -> f_657 : k20'=9, x178'=free_66, x179'=free_71, x180'=free_61, x181'=free_64, x182'=free_69, x183'=free_65, x184'=free_70, x185'=free_67, x186'=free_68, x187'=free_60, x188'=free_63, x189'=free_62, [ k35==10 ], cost: 1
      6: f_704 -> f_704 : k35'=1+k35, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, [ k35>1 && k35<10 ], cost: 1
     15: f_704 -> f_704 : k35'=1+k35, x21'=free_174, x22'=free_166, x23'=free_170, x24'=free_173, x25'=free_177, x26'=free_169, x27'=free_172, x28'=free_176, x29'=free_168, x30'=free_175, x31'=free_167, x32'=free_171, [ k35>10 ], cost: 1
      9: f_260 -> f_260 : k16'=-1+k16, k5'=k16, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ k5>2 && -1+k16>0 && -1+k16<9 && k14>2 ], cost: 1
     11: f_260 -> f_704 : k35'=2, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, [ k16==1 ], cost: 1
     16: f_260 -> f_260 : k16'=-1+k16, k5'=k16, x87'=free_180, x88'=free_183, x89'=free_187, x90'=free_179, x91'=free_182, x92'=free_185, x93'=free_178, x94'=free_181, x95'=free_184, x96'=free_188, [ k14>2 && k5>2 && -1+k16>9 ], cost: 1
     19: f_260 -> f_260 : k16'=8, k5'=9, x87'=free_215, x88'=free_219, x89'=free_211, x90'=free_214, x91'=free_218, x92'=free_213, x93'=free_217, x94'=free_210, x95'=free_212, x96'=free_216, [ k14>2 && k5>2 && k16==10 ], cost: 1

### Simplification by acceleration and chaining ###

Accelerating simple loops of location 0.
   Accelerating the following rules:
     20: f_657 -> f_657 : k20'=-1+k20, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, [ -1+k20>1 && -1+k20<9 ], cost: 1

   Accelerated rule 20 with backward acceleration, yielding the new rule 21.
   Removing the simple loops: 20.

Accelerating simple loops of location 1.
   Accelerating the following rules:
      1: f_428 -> f_428 : k0'=1+k0, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [ k0>1 && k0<10 ], cost: 1
      2: f_428 -> f_428 : k0'=1+k0, x439'=free_24, x440'=free_31, x441'=free_34, x442'=free_27, x443'=free_30, x444'=free_33, x445'=free_26, x446'=free_29, x447'=free_25, x448'=free_28, x449'=free_32, x450'=free_35, [ k0>10 ], cost: 1

   Accelerated rule 1 with backward acceleration, yielding the new rule 22.
   Accelerated rule 2 with non-termination, yielding the new rule 23.
   Removing the simple loops: 1 2.

Accelerating simple loops of location 3.
   Accelerating the following rules:
      6: f_704 -> f_704 : k35'=1+k35, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, [ k35>1 && k35<10 ], cost: 1
     15: f_704 -> f_704 : k35'=1+k35, x21'=free_174, x22'=free_166, x23'=free_170, x24'=free_173, x25'=free_177, x26'=free_169, x27'=free_172, x28'=free_176, x29'=free_168, x30'=free_175, x31'=free_167, x32'=free_171, [ k35>10 ], cost: 1

   Accelerated rule 6 with backward acceleration, yielding the new rule 24.
   Accelerated rule 15 with non-termination, yielding the new rule 25.
   Removing the simple loops: 6 15.

Accelerating simple loops of location 4.
   Accelerating the following rules:
      9: f_260 -> f_260 : k16'=-1+k16, k5'=k16, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ k5>2 && -1+k16>0 && -1+k16<9 && k14>2 ], cost: 1
     16: f_260 -> f_260 : k16'=-1+k16, k5'=k16, x87'=free_180, x88'=free_183, x89'=free_187, x90'=free_179, x91'=free_182, x92'=free_185, x93'=free_178, x94'=free_181, x95'=free_184, x96'=free_188, [ k14>2 && k5>2 && -1+k16>9 ], cost: 1
     19: f_260 -> f_260 : k16'=8, k5'=9, x87'=free_215, x88'=free_219, x89'=free_211, x90'=free_214, x91'=free_218, x92'=free_213, x93'=free_217, x94'=free_210, x95'=free_212, x96'=free_216, [ k14>2 && k5>2 && k16==10 ], cost: 1

   Failed to prove monotonicity of the guard of rule 9.
   Accelerated rule 16 with backward acceleration, yielding the new rule 26.
   Failed to prove monotonicity of the guard of rule 19.
   Removing the simple loops: 16.

Accelerated all simple loops using metering functions (where possible):
   Start location: f_112
      0: f_657 -> f_704 : k35'=2, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, [ k20==2 ], cost: 1
     21: f_657 -> f_657 : k20'=2, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, [ -1+k20<9 && -2+k20>=1 ], cost: -2+k20
     14: f_428 -> f_657 : k20'=9, x178'=free_163, x179'=free_155, x180'=free_159, x181'=free_158, x182'=free_162, x183'=free_154, x184'=free_157, x185'=free_161, x186'=free_165, x187'=free_156, x188'=free_160, x189'=free_164, [ k0==10 ], cost: 1
     22: f_428 -> f_428 : k0'=10, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [ k0>1 && 10-k0>=1 ], cost: 10-k0
     23: f_428 -> [9] : [ k0>10 ], cost: NONTERM
      3: f_112 -> f_428 : k0'=2, x439'=free_47, x440'=free_38, x441'=free_42, x442'=free_46, x443'=free_37, x444'=free_41, x445'=free_45, x446'=free_40, x447'=free_44, x448'=free_36, x449'=free_39, x450'=free_43, [], cost: 1
      8: f_112 -> f_260 : k14'=1+free_95, k16'=free_95, k5'=1+free_95, x87'=free_93, x88'=free_97, x89'=free_100, x90'=free_94, x91'=free_98, x92'=free_101, x93'=free_92, x94'=free_96, x95'=free_99, x96'=free_91, [ free_95>9 ], cost: 1
     13: f_112 -> f_260 : k14'=1+free_151, k16'=free_151, k5'=1+free_151, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151>0 && free_151<9 ], cost: 1
     17: f_112 -> f_260 : k14'=10, k16'=8, k5'=9, x87'=free_197, x88'=free_191, x89'=free_194, x90'=free_196, x91'=free_190, x92'=free_193, x93'=free_195, x94'=free_189, x95'=free_192, x96'=free_198, [], cost: 1
      5: f_704 -> f_657 : k20'=9, x178'=free_66, x179'=free_71, x180'=free_61, x181'=free_64, x182'=free_69, x183'=free_65, x184'=free_70, x185'=free_67, x186'=free_68, x187'=free_60, x188'=free_63, x189'=free_62, [ k35==10 ], cost: 1
     24: f_704 -> f_704 : k35'=10, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, [ k35>1 && 10-k35>=1 ], cost: 10-k35
     25: f_704 -> [10] : [ k35>10 ], cost: NONTERM
      9: f_260 -> f_260 : k16'=-1+k16, k5'=k16, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ k5>2 && -1+k16>0 && -1+k16<9 && k14>2 ], cost: 1
     11: f_260 -> f_704 : k35'=2, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, [ k16==1 ], cost: 1
     19: f_260 -> f_260 : k16'=8, k5'=9, x87'=free_215, x88'=free_219, x89'=free_211, x90'=free_214, x91'=free_218, x92'=free_213, x93'=free_217, x94'=free_210, x95'=free_212, x96'=free_216, [ k14>2 && k5>2 && k16==10 ], cost: 1
     26: f_260 -> f_260 : k16'=10, k5'=11, x87'=free_180, x88'=free_183, x89'=free_187, x90'=free_179, x91'=free_182, x92'=free_185, x93'=free_178, x94'=free_181, x95'=free_184, x96'=free_188, [ k14>2 && k5>2 && -10+k16>=1 ], cost: -10+k16

Chaining 8 accelerated rules with incoming rules:
   Chained incoming rule 5 with accelerated rule 21 to new rule 27.
   Chained incoming rule 14 with accelerated rule 21 to new rule 28.
   Removing accelerated rule 21.
   Chained incoming rule 3 with accelerated rule 22 to new rule 29.
   Removing accelerated rule 22.
   Removing accelerated rule 23.
   Chained incoming rule 0 with accelerated rule 24 to new rule 30.
   Chained incoming rule 11 with accelerated rule 24 to new rule 31.
   Removing accelerated rule 24.
   Removing accelerated rule 25.
   Chained incoming rule 13 with accelerated rule 9 to new rule 32.
   Chained incoming rule 17 with accelerated rule 9 to new rule 33.
   Removing accelerated rule 9.
   Chained incoming rule 8 with accelerated rule 19 to new rule 34.
   Removing accelerated rule 19.
   Chained incoming rule 8 with accelerated rule 26 to new rule 35.
   Removing accelerated rule 26.

Chained accelerated rules (with incoming rules):
   Start location: f_112
      0: f_657 -> f_704 : k35'=2, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, [ k20==2 ], cost: 1
     30: f_657 -> f_704 : k35'=10, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, [ k20==2 ], cost: 9
     14: f_428 -> f_657 : k20'=9, x178'=free_163, x179'=free_155, x180'=free_159, x181'=free_158, x182'=free_162, x183'=free_154, x184'=free_157, x185'=free_161, x186'=free_165, x187'=free_156, x188'=free_160, x189'=free_164, [ k0==10 ], cost: 1
     28: f_428 -> f_657 : k20'=2, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, [ k0==10 ], cost: 8
      3: f_112 -> f_428 : k0'=2, x439'=free_47, x440'=free_38, x441'=free_42, x442'=free_46, x443'=free_37, x444'=free_41, x445'=free_45, x446'=free_40, x447'=free_44, x448'=free_36, x449'=free_39, x450'=free_43, [], cost: 1
      8: f_112 -> f_260 : k14'=1+free_95, k16'=free_95, k5'=1+free_95, x87'=free_93, x88'=free_97, x89'=free_100, x90'=free_94, x91'=free_98, x92'=free_101, x93'=free_92, x94'=free_96, x95'=free_99, x96'=free_91, [ free_95>9 ], cost: 1
     13: f_112 -> f_260 : k14'=1+free_151, k16'=free_151, k5'=1+free_151, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151>0 && free_151<9 ], cost: 1
     17: f_112 -> f_260 : k14'=10, k16'=8, k5'=9, x87'=free_197, x88'=free_191, x89'=free_194, x90'=free_196, x91'=free_190, x92'=free_193, x93'=free_195, x94'=free_189, x95'=free_192, x96'=free_198, [], cost: 1
     29: f_112 -> f_428 : k0'=10, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [], cost: 9
     32: f_112 -> f_260 : k14'=1+free_151, k16'=-1+free_151, k5'=free_151, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ free_151<9 && 1+free_151>2 ], cost: 2
     33: f_112 -> f_260 : k14'=10, k16'=7, k5'=8, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [], cost: 2
     34: f_112 -> f_260 : k14'=11, k16'=8, k5'=9, x87'=free_215, x88'=free_219, x89'=free_211, x90'=free_214, x91'=free_218, x92'=free_213, x93'=free_217, x94'=free_210, x95'=free_212, x96'=free_216, [], cost: 2
     35: f_112 -> f_260 : k14'=1+free_95, k16'=10, k5'=11, x87'=free_180, x88'=free_183, x89'=free_187, x90'=free_179, x91'=free_182, x92'=free_185, x93'=free_178, x94'=free_181, x95'=free_184, x96'=free_188, [ -10+free_95>=1 ], cost: -9+free_95
      5: f_704 -> f_657 : k20'=9, x178'=free_66, x179'=free_71, x180'=free_61, x181'=free_64, x182'=free_69, x183'=free_65, x184'=free_70, x185'=free_67, x186'=free_68, x187'=free_60, x188'=free_63, x189'=free_62, [ k35==10 ], cost: 1
     27: f_704 -> f_657 : k20'=2, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, [ k35==10 ], cost: 8
     11: f_260 -> f_704 : k35'=2, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, [ k16==1 ], cost: 1
     31: f_260 -> f_704 : k35'=10, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, [ k16==1 ], cost: 9

Removed unreachable locations (and leaf rules with constant cost):
   Start location: f_112
      0: f_657 -> f_704 : k35'=2, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, [ k20==2 ], cost: 1
     30: f_657 -> f_704 : k35'=10, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, [ k20==2 ], cost: 9
     14: f_428 -> f_657 : k20'=9, x178'=free_163, x179'=free_155, x180'=free_159, x181'=free_158, x182'=free_162, x183'=free_154, x184'=free_157, x185'=free_161, x186'=free_165, x187'=free_156, x188'=free_160, x189'=free_164, [ k0==10 ], cost: 1
     28: f_428 -> f_657 : k20'=2, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, [ k0==10 ], cost: 8
      3: f_112 -> f_428 : k0'=2, x439'=free_47, x440'=free_38, x441'=free_42, x442'=free_46, x443'=free_37, x444'=free_41, x445'=free_45, x446'=free_40, x447'=free_44, x448'=free_36, x449'=free_39, x450'=free_43, [], cost: 1
      8: f_112 -> f_260 : k14'=1+free_95, k16'=free_95, k5'=1+free_95, x87'=free_93, x88'=free_97, x89'=free_100, x90'=free_94, x91'=free_98, x92'=free_101, x93'=free_92, x94'=free_96, x95'=free_99, x96'=free_91, [ free_95>9 ], cost: 1
     13: f_112 -> f_260 : k14'=1+free_151, k16'=free_151, k5'=1+free_151, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151>0 && free_151<9 ], cost: 1
     17: f_112 -> f_260 : k14'=10, k16'=8, k5'=9, x87'=free_197, x88'=free_191, x89'=free_194, x90'=free_196, x91'=free_190, x92'=free_193, x93'=free_195, x94'=free_189, x95'=free_192, x96'=free_198, [], cost: 1
     29: f_112 -> f_428 : k0'=10, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [], cost: 9
     32: f_112 -> f_260 : k14'=1+free_151, k16'=-1+free_151, k5'=free_151, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ free_151<9 && 1+free_151>2 ], cost: 2
     33: f_112 -> f_260 : k14'=10, k16'=7, k5'=8, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [], cost: 2
     34: f_112 -> f_260 : k14'=11, k16'=8, k5'=9, x87'=free_215, x88'=free_219, x89'=free_211, x90'=free_214, x91'=free_218, x92'=free_213, x93'=free_217, x94'=free_210, x95'=free_212, x96'=free_216, [], cost: 2
     35: f_112 -> f_260 : k14'=1+free_95, k16'=10, k5'=11, x87'=free_180, x88'=free_183, x89'=free_187, x90'=free_179, x91'=free_182, x92'=free_185, x93'=free_178, x94'=free_181, x95'=free_184, x96'=free_188, [ -10+free_95>=1 ], cost: -9+free_95
      5: f_704 -> f_657 : k20'=9, x178'=free_66, x179'=free_71, x180'=free_61, x181'=free_64, x182'=free_69, x183'=free_65, x184'=free_70, x185'=free_67, x186'=free_68, x187'=free_60, x188'=free_63, x189'=free_62, [ k35==10 ], cost: 1
     27: f_704 -> f_657 : k20'=2, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, [ k35==10 ], cost: 8
     11: f_260 -> f_704 : k35'=2, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, [ k16==1 ], cost: 1
     31: f_260 -> f_704 : k35'=10, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, [ k16==1 ], cost: 9

Eliminating location f_428 by chaining:
   Failed to chain rules 3 and 14.
   Failed to chain rules 3 and 28.
   Chained rules 29 and 14 to new rule 36.
   Chained rules 29 and 28 to new rule 37.

Eliminating location f_260 by chaining:
   Failed to chain rules 8 and 11.
   Failed to chain rules 8 and 31.
   Chained rules 13 and 11 to new rule 38.
   Chained rules 13 and 31 to new rule 39.
   Failed to chain rules 17 and 11.
   Failed to chain rules 17 and 31.
   Chained rules 32 and 11 to new rule 40.
   Chained rules 32 and 31 to new rule 41.
   Failed to chain rules 33 and 11.
   Failed to chain rules 33 and 31.
   Failed to chain rules 34 and 11.
   Failed to chain rules 34 and 31.
   Failed to chain rules 35 and 11.
   Failed to chain rules 35 and 31.
   Keeping rule 35 by adding a dummy rule 42.

Eliminated locations (on tree-shaped paths):
   Start location: f_112
      0: f_657 -> f_704 : k35'=2, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, [ k20==2 ], cost: 1
     30: f_657 -> f_704 : k35'=10, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, [ k20==2 ], cost: 9
     36: f_112 -> f_657 : k0'=10, k20'=9, x178'=free_163, x179'=free_155, x180'=free_159, x181'=free_158, x182'=free_162, x183'=free_154, x184'=free_157, x185'=free_161, x186'=free_165, x187'=free_156, x188'=free_160, x189'=free_164, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [], cost: 10
     37: f_112 -> f_657 : k0'=10, k20'=2, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [], cost: 17
     38: f_112 -> f_704 : k14'=1+free_151, k16'=free_151, k35'=2, k5'=1+free_151, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151==1 ], cost: 2
     39: f_112 -> f_704 : k14'=1+free_151, k16'=free_151, k35'=10, k5'=1+free_151, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151==1 ], cost: 10
     40: f_112 -> f_704 : k14'=1+free_151, k16'=-1+free_151, k35'=2, k5'=free_151, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ -1+free_151==1 ], cost: 3
     41: f_112 -> f_704 : k14'=1+free_151, k16'=-1+free_151, k35'=10, k5'=free_151, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ -1+free_151==1 ], cost: 11
     42: f_112 -> [12] : [ -10+free_95>=1 ], cost: -9+free_95
      5: f_704 -> f_657 : k20'=9, x178'=free_66, x179'=free_71, x180'=free_61, x181'=free_64, x182'=free_69, x183'=free_65, x184'=free_70, x185'=free_67, x186'=free_68, x187'=free_60, x188'=free_63, x189'=free_62, [ k35==10 ], cost: 1
     27: f_704 -> f_657 : k20'=2, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, [ k35==10 ], cost: 8

Eliminating location f_657 by chaining:
   Failed to chain rules 5 and 0.
   Failed to chain rules 5 and 30.
   Chained rules 27 and 0 to new rule 43.
   Chained rules 27 and 30 to new rule 44.
   Failed to chain rules 36 and 0.
   Failed to chain rules 36 and 30.
   Chained rules 37 and 0 to new rule 45.
   Chained rules 37 and 30 to new rule 46.

Eliminated location f_657 (as a last resort):
   Start location: f_112
     38: f_112 -> f_704 : k14'=1+free_151, k16'=free_151, k35'=2, k5'=1+free_151, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151==1 ], cost: 2
     39: f_112 -> f_704 : k14'=1+free_151, k16'=free_151, k35'=10, k5'=1+free_151, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151==1 ], cost: 10
     40: f_112 -> f_704 : k14'=1+free_151, k16'=-1+free_151, k35'=2, k5'=free_151, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ -1+free_151==1 ], cost: 3
     41: f_112 -> f_704 : k14'=1+free_151, k16'=-1+free_151, k35'=10, k5'=free_151, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ -1+free_151==1 ], cost: 11
     42: f_112 -> [12] : [ -10+free_95>=1 ], cost: -9+free_95
     45: f_112 -> f_704 : k0'=10, k20'=2, k35'=2, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [], cost: 18
     46: f_112 -> f_704 : k0'=10, k20'=2, k35'=10, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [], cost: 26
     43: f_704 -> f_704 : k20'=2, k35'=2, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, [ k35==10 ], cost: 9
     44: f_704 -> f_704 : k20'=2, k35'=10, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, [ k35==10 ], cost: 17

Applied pruning (of leafs and parallel rules):
   Start location: f_112
     38: f_112 -> f_704 : k14'=1+free_151, k16'=free_151, k35'=2, k5'=1+free_151, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151==1 ], cost: 2
     39: f_112 -> f_704 : k14'=1+free_151, k16'=free_151, k35'=10, k5'=1+free_151, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151==1 ], cost: 10
     40: f_112 -> f_704 : k14'=1+free_151, k16'=-1+free_151, k35'=2, k5'=free_151, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ -1+free_151==1 ], cost: 3
     41: f_112 -> f_704 : k14'=1+free_151, k16'=-1+free_151, k35'=10, k5'=free_151, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ -1+free_151==1 ], cost: 11
     42: f_112 -> [12] : [ -10+free_95>=1 ], cost: -9+free_95
     46: f_112 -> f_704 : k0'=10, k20'=2, k35'=10, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [], cost: 26
     43: f_704 -> f_704 : k20'=2, k35'=2, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, [ k35==10 ], cost: 9
     44: f_704 -> f_704 : k20'=2, k35'=10, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, [ k35==10 ], cost: 17

Accelerating simple loops of location 3.
   Accelerating the following rules:
     43: f_704 -> f_704 : k20'=2, k35'=2, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, [ k35==10 ], cost: 9
     44: f_704 -> f_704 : k20'=2, k35'=10, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, [ k35==10 ], cost: 17

   Failed to prove monotonicity of the guard of rule 43.
   Accelerated rule 44 with non-termination, yielding the new rule 47.
   Removing the simple loops: 44.

Accelerated all simple loops using metering functions (where possible):
   Start location: f_112
     38: f_112 -> f_704 : k14'=1+free_151, k16'=free_151, k35'=2, k5'=1+free_151, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151==1 ], cost: 2
     39: f_112 -> f_704 : k14'=1+free_151, k16'=free_151, k35'=10, k5'=1+free_151, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151==1 ], cost: 10
     40: f_112 -> f_704 : k14'=1+free_151, k16'=-1+free_151, k35'=2, k5'=free_151, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ -1+free_151==1 ], cost: 3
     41: f_112 -> f_704 : k14'=1+free_151, k16'=-1+free_151, k35'=10, k5'=free_151, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ -1+free_151==1 ], cost: 11
     42: f_112 -> [12] : [ -10+free_95>=1 ], cost: -9+free_95
     46: f_112 -> f_704 : k0'=10, k20'=2, k35'=10, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [], cost: 26
     43: f_704 -> f_704 : k20'=2, k35'=2, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, [ k35==10 ], cost: 9
     47: f_704 -> [13] : [ k35==10 ], cost: NONTERM

Chaining 2 accelerated rules with incoming rules:
   Chained incoming rule 39 with accelerated rule 43 to new rule 48.
   Chained incoming rule 41 with accelerated rule 43 to new rule 49.
   Chained incoming rule 46 with accelerated rule 43 to new rule 50.
   Removing accelerated rule 43.
   Chained incoming rule 39 with accelerated rule 47 to new rule 51.
   Chained incoming rule 41 with accelerated rule 47 to new rule 52.
   Chained incoming rule 46 with accelerated rule 47 to new rule 53.
   Removing accelerated rule 47.

Chained accelerated rules (with incoming rules):
   Start location: f_112
     38: f_112 -> f_704 : k14'=1+free_151, k16'=free_151, k35'=2, k5'=1+free_151, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151==1 ], cost: 2
     39: f_112 -> f_704 : k14'=1+free_151, k16'=free_151, k35'=10, k5'=1+free_151, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [ free_151==1 ], cost: 10
     40: f_112 -> f_704 : k14'=1+free_151, k16'=-1+free_151, k35'=2, k5'=free_151, x21'=free_133, x22'=free_125, x23'=free_128, x24'=free_132, x25'=free_136, x26'=free_131, x27'=free_135, x28'=free_127, x29'=free_130, x30'=free_134, x31'=free_126, x32'=free_129, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ -1+free_151==1 ], cost: 3
     41: f_112 -> f_704 : k14'=1+free_151, k16'=-1+free_151, k35'=10, k5'=free_151, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [ -1+free_151==1 ], cost: 11
     42: f_112 -> [12] : [ -10+free_95>=1 ], cost: -9+free_95
     46: f_112 -> f_704 : k0'=10, k20'=2, k35'=10, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x21'=free_75, x22'=free_78, x23'=free_73, x24'=free_77, x25'=free_81, x26'=free_72, x27'=free_80, x28'=free_83, x29'=free_76, x30'=free_79, x31'=free_82, x32'=free_74, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [], cost: 26
     48: f_112 -> f_704 : k14'=2, k16'=1, k20'=2, k35'=2, k5'=2, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, x87'=free_152, x88'=free_144, x89'=free_147, x90'=free_150, x91'=free_146, x92'=free_149, x93'=free_143, x94'=free_145, x95'=free_148, x96'=free_153, [], cost: 19
     49: f_112 -> f_704 : k14'=3, k16'=1, k20'=2, k35'=2, k5'=2, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, x87'=free_103, x88'=free_106, x89'=free_110, x90'=free_102, x91'=free_105, x92'=free_109, x93'=free_112, x94'=free_104, x95'=free_108, x96'=free_111, [], cost: 20
     50: f_112 -> f_704 : k0'=10, k20'=2, k35'=2, x178'=free_226, x179'=free_230, x180'=free_220, x181'=free_229, x182'=free_223, x183'=free_228, x184'=free_232, x185'=free_222, x186'=free_227, x187'=free_231, x188'=free_221, x189'=free_225, x21'=free_4, x22'=free_8, x23'=free_11, x24'=free_2, x25'=free_6, x26'=free_10, x27'=free_1, x28'=free_5, x29'=free_9, x30'=free, x31'=free_3, x32'=free_7, x439'=free_13, x440'=free_17, x441'=free_21, x442'=free_12, x443'=free_16, x444'=free_20, x445'=free_22, x446'=free_14, x447'=free_18, x448'=free_23, x449'=free_15, x450'=free_19, [], cost: 35
     51: f_112 -> [13] : [], cost: NONTERM
     52: f_112 -> [13] : [], cost: NONTERM
     53: f_112 -> [13] : [], cost: NONTERM

Removed unreachable locations (and leaf rules with constant cost):
   Start location: f_112
     42: f_112 -> [12] : [ -10+free_95>=1 ], cost: -9+free_95
     51: f_112 -> [13] : [], cost: NONTERM
     52: f_112 -> [13] : [], cost: NONTERM
     53: f_112 -> [13] : [], cost: NONTERM

### Computing asymptotic complexity ###

Fully simplified ITS problem
   Start location: f_112
     42: f_112 -> [12] : [ -10+free_95>=1 ], cost: -9+free_95
     53: f_112 -> [13] : [], cost: NONTERM

Computing asymptotic complexity for rule 53
   Guard is satisfiable, yielding nontermination
   Resulting cost NONTERM has complexity: Nonterm

Found new complexity Nonterm.

Obtained the following overall complexity (w.r.t. the length of the input n):
   Complexity:  Nonterm
   Cpx degree:  Nonterm
   Solved cost: NONTERM
   Rule cost:   NONTERM
   Rule guard:  []

NO


The final guard is:


Z3 found a model for the final guard:
{}

Try to generate a witness via retracing LoAT's simplifications:
  AssertionError: A variable is not evaluable: k20
No witness generated
----------------------------------------

(12)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
Truth value repropagation in proof tree changed value to NO
