MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/IoMLF.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 77 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/IoMLF.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/IoMLF.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: I initVal: ((0),(0),(0)) type: [3 x [1 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: E initVal: (0,0,0,0) type: [4 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: pc initVal: ((0),(0),(0)) type: [3 x [1 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "exit" returnParam: BasicVoidType parameters: (i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 26
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		Unnamed Call-Instruction = call BasicVoidType @exit(i32 0)
		unreachable
	6:
		ret void

*BasicFunctionTypename: "attr" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext, 3 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 37
	0:
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%9 = zext i1 %3 to i8
		store %9, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		%10 = load %7
		%11 = load %5
		%12 = zext i8 %11 to i64
		%13 = getelementptr @I, 0, %12
		%14 = load %6
		%15 = zext i8 %14 to i64
		%16 = getelementptr %13, 0, %15
		store %10, %16
		ret void

*BasicFunctionTypename: "env" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext, 3 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 57
	0:
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%9 = zext i1 %3 to i8
		store %9, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		%10 = load %7
		%11 = load %6
		%12 = zext i8 %11 to i64
		%13 = getelementptr @E, 0, %12
		store %10, %13
		ret void

*BasicFunctionTypename: "init" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 74
	0:
		%1 = alloca [3 x [1 x i8]], align 1
		%2 = alloca [4 x i8], align 1
		%3 = alloca [3 x [1 x i8]], align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [1 x i8]] %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[4 x i8] %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [1 x i8]] %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%6 = call i32 @__VERIFIER_nondet_int()
		%7 = trunc i32 %6 to i8
		store %7, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%8 = call i32 @__VERIFIER_nondet_int()
		%9 = trunc i32 %8 to i8
		store %9, %5
		%10 = getelementptr %3, 0, 0
		%11 = getelementptr %10, 0, 0
		%12 = load %11
		%13 = zext i8 %12 to i32
		%14 = icmp eq %13 3
		br %14, %45, %15
	15:
		%16 = getelementptr %3, 0, 0
		%17 = getelementptr %16, 0, 0
		%18 = load %17
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 4
		br %20, %45, %21
	21:
		%22 = getelementptr %3, 0, 0
		%23 = getelementptr %22, 0, 0
		%24 = load %23
		%25 = zext i8 %24 to i32
		%26 = icmp eq %25 7
		br %26, %45, %27
	27:
		%28 = getelementptr %3, 0, 0
		%29 = getelementptr %28, 0, 0
		%30 = load %29
		%31 = zext i8 %30 to i32
		%32 = icmp eq %31 9
		br %32, %45, %33
	33:
		%34 = getelementptr %3, 0, 0
		%35 = getelementptr %34, 0, 0
		%36 = load %35
		%37 = zext i8 %36 to i32
		%38 = icmp eq %37 11
		br %38, %45, %39
	39:
		%40 = getelementptr %3, 0, 0
		%41 = getelementptr %40, 0, 0
		%42 = load %41
		%43 = zext i8 %42 to i32
		%44 = icmp eq %43 13
		br %45
	45:
		%46 = phi [1, %33], [1, %27], [1, %21], [1, %15], [1, %0], [%44, %39]
		%47 = zext i1 %46 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %47)
		%48 = getelementptr %3, 0, 1
		%49 = getelementptr %48, 0, 0
		%50 = load %49
		%51 = zext i8 %50 to i32
		%52 = icmp eq %51 3
		br %52, %83, %53
	53:
		%54 = getelementptr %3, 0, 1
		%55 = getelementptr %54, 0, 0
		%56 = load %55
		%57 = zext i8 %56 to i32
		%58 = icmp eq %57 4
		br %58, %83, %59
	59:
		%60 = getelementptr %3, 0, 1
		%61 = getelementptr %60, 0, 0
		%62 = load %61
		%63 = zext i8 %62 to i32
		%64 = icmp eq %63 7
		br %64, %83, %65
	65:
		%66 = getelementptr %3, 0, 1
		%67 = getelementptr %66, 0, 0
		%68 = load %67
		%69 = zext i8 %68 to i32
		%70 = icmp eq %69 9
		br %70, %83, %71
	71:
		%72 = getelementptr %3, 0, 1
		%73 = getelementptr %72, 0, 0
		%74 = load %73
		%75 = zext i8 %74 to i32
		%76 = icmp eq %75 11
		br %76, %83, %77
	77:
		%78 = getelementptr %3, 0, 1
		%79 = getelementptr %78, 0, 0
		%80 = load %79
		%81 = zext i8 %80 to i32
		%82 = icmp eq %81 13
		br %83
	83:
		%84 = phi [1, %71], [1, %65], [1, %59], [1, %53], [1, %45], [%82, %77]
		%85 = zext i1 %84 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %85)
		%86 = getelementptr %3, 0, 2
		%87 = getelementptr %86, 0, 0
		%88 = load %87
		%89 = zext i8 %88 to i32
		%90 = icmp eq %89 3
		br %90, %121, %91
	91:
		%92 = getelementptr %3, 0, 2
		%93 = getelementptr %92, 0, 0
		%94 = load %93
		%95 = zext i8 %94 to i32
		%96 = icmp eq %95 4
		br %96, %121, %97
	97:
		%98 = getelementptr %3, 0, 2
		%99 = getelementptr %98, 0, 0
		%100 = load %99
		%101 = zext i8 %100 to i32
		%102 = icmp eq %101 7
		br %102, %121, %103
	103:
		%104 = getelementptr %3, 0, 2
		%105 = getelementptr %104, 0, 0
		%106 = load %105
		%107 = zext i8 %106 to i32
		%108 = icmp eq %107 9
		br %108, %121, %109
	109:
		%110 = getelementptr %3, 0, 2
		%111 = getelementptr %110, 0, 0
		%112 = load %111
		%113 = zext i8 %112 to i32
		%114 = icmp eq %113 11
		br %114, %121, %115
	115:
		%116 = getelementptr %3, 0, 2
		%117 = getelementptr %116, 0, 0
		%118 = load %117
		%119 = zext i8 %118 to i32
		%120 = icmp eq %119 13
		br %121
	121:
		%122 = phi [1, %109], [1, %103], [1, %97], [1, %91], [1, %83], [%120, %115]
		%123 = zext i1 %122 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %123)
		%124 = getelementptr %2, 0, 0
		%125 = load %124
		%126 = sext i8 %125 to i32
		%127 = icmp eq %126 -1
		%128 = zext i1 %127 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %128)
		%129 = getelementptr %2, 0, 1
		%130 = load %129
		%131 = sext i8 %130 to i32
		%132 = icmp eq %131 0
		%133 = zext i1 %132 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %133)
		%134 = getelementptr %2, 0, 2
		%135 = load %134
		%136 = sext i8 %135 to i32
		%137 = icmp eq %136 -1
		%138 = zext i1 %137 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %138)
		%139 = getelementptr %2, 0, 3
		%140 = load %139
		%141 = sext i8 %140 to i32
		%142 = icmp eq %141 -1
		%143 = zext i1 %142 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %143)
		%144 = getelementptr %1, 0, 0
		%145 = getelementptr %144, 0, 0
		%146 = load %145
		%147 = sext i8 %146 to i32
		%148 = icmp eq %147 0
		%149 = zext i1 %148 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %149)
		%150 = getelementptr %1, 0, 1
		%151 = getelementptr %150, 0, 0
		%152 = load %151
		%153 = sext i8 %152 to i32
		%154 = icmp eq %153 0
		%155 = zext i1 %154 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %155)
		%156 = getelementptr %1, 0, 2
		%157 = getelementptr %156, 0, 0
		%158 = load %157
		%159 = sext i8 %158 to i32
		%160 = icmp eq %159 1
		%161 = zext i1 %160 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %161)
		store 0, %4
		br %162
	162:
		%163 = load %4
		%164 = zext i8 %163 to i32
		%165 = icmp slt %164 4
		br %165, %166, %177
	166:
		%167 = load %4
		%168 = zext i8 %167 to i64
		%169 = getelementptr %2, 0, %168
		%170 = load %169
		%171 = load %4
		%172 = zext i8 %171 to i64
		%173 = getelementptr @E, 0, %172
		store %170, %173
		br %174
	174:
		%175 = load %4
		%176 = add i8 %175, 1
		store %176, %4
		br %162
	177:
		store 0, %4
		br %178
	178:
		%179 = load %4
		%180 = zext i8 %179 to i32
		%181 = icmp slt %180 3
		br %181, %182, %230
	182:
		store 0, %5
		br %183
	183:
		%184 = load %5
		%185 = zext i8 %184 to i32
		%186 = icmp slt %185 1
		br %186, %187, %204
	187:
		%188 = load %4
		%189 = zext i8 %188 to i64
		%190 = getelementptr %3, 0, %189
		%191 = load %5
		%192 = zext i8 %191 to i64
		%193 = getelementptr %190, 0, %192
		%194 = load %193
		%195 = load %4
		%196 = zext i8 %195 to i64
		%197 = getelementptr @pc, 0, %196
		%198 = load %5
		%199 = zext i8 %198 to i64
		%200 = getelementptr %197, 0, %199
		store %194, %200
		br %201
	201:
		%202 = load %5
		%203 = add i8 %202, 1
		store %203, %5
		br %183
	204:
		store 0, %5
		br %205
	205:
		%206 = load %5
		%207 = zext i8 %206 to i32
		%208 = icmp slt %207 1
		br %208, %209, %226
	209:
		%210 = load %4
		%211 = zext i8 %210 to i64
		%212 = getelementptr %1, 0, %211
		%213 = load %5
		%214 = zext i8 %213 to i64
		%215 = getelementptr %212, 0, %214
		%216 = load %215
		%217 = load %4
		%218 = zext i8 %217 to i64
		%219 = getelementptr @I, 0, %218
		%220 = load %5
		%221 = zext i8 %220 to i64
		%222 = getelementptr %219, 0, %221
		store %216, %222
		br %223
	223:
		%224 = load %5
		%225 = add i8 %224, 1
		store %225, %5
		br %205
	226:
		br %227
	227:
		%228 = load %4
		%229 = add i8 %228, 1
		store %229, %4
		br %178
	230:
		ret void

*BasicFunctionTypename: "_0_2" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 238
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store 3, %3
		%5 = load %2
		%6 = trunc i32 %5 to i8
		%7 = load %3
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %6, i8 zeroext 1, i8 signext %7, i1 zeroext 1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%8 = call i32 @__VERIFIER_nondet_int()
		%9 = trunc i32 %8 to i8
		store %9, %4
		%10 = load %4
		%11 = zext i8 %10 to i32
		%12 = icmp eq %11 3
		br %12, %33, %13
	13:
		%14 = load %4
		%15 = zext i8 %14 to i32
		%16 = icmp eq %15 4
		br %16, %33, %17
	17:
		%18 = load %4
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 7
		br %20, %33, %21
	21:
		%22 = load %4
		%23 = zext i8 %22 to i32
		%24 = icmp eq %23 9
		br %24, %33, %25
	25:
		%26 = load %4
		%27 = zext i8 %26 to i32
		%28 = icmp eq %27 11
		br %28, %33, %29
	29:
		%30 = load %4
		%31 = zext i8 %30 to i32
		%32 = icmp eq %31 13
		br %33
	33:
		%34 = phi [1, %25], [1, %21], [1, %17], [1, %13], [1, %1], [%32, %29]
		%35 = zext i1 %34 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %35)
		%36 = load %4
		%37 = load %2
		%38 = sext i32 %37 to i64
		%39 = getelementptr @pc, 0, %38
		%40 = getelementptr %39, 0, 0
		store %36, %40
		ret void

*BasicFunctionTypename: "_0_3" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 272
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2e701762
		%5 = sext i8 %4 to i32
		%6 = icmp eq %5 2
		br %6, %7, %12
	7:
		%8 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1284d749
		%9 = sext i8 %8 to i32
		%10 = load %2
		%11 = icmp eq %9 %10
		br %12
	12:
		%13 = phi [0, %1], [%11, %7]
		%14 = zext i1 %13 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %14)
		%15 = load %2
		%16 = sext i32 %15 to i64
		%17 = getelementptr @I, 0, %16
		%18 = getelementptr %17, 0, 0
		%19 = load %18
		%20 = sext i8 %19 to i32
		%21 = icmp eq %20 1
		br %21, %22, %26
	22:
		%23 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6c1dd4ac
		%24 = sext i8 %23 to i32
		%25 = icmp eq %24 0
		br %26
	26:
		%27 = phi [0, %12], [%25, %22]
		%28 = zext i1 %27 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %28)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store 3, %3
		%29 = load %2
		%30 = trunc i32 %29 to i8
		%31 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %30, i8 zeroext 0, i8 signext %31, i1 zeroext 1)
		%32 = load %2
		%33 = sext i32 %32 to i64
		%34 = getelementptr @pc, 0, %33
		%35 = getelementptr %34, 0, 0
		store 2, %35
		ret void

*BasicFunctionTypename: "_0_4" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 299
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%7 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@70973eab
		%8 = sext i8 %7 to i32
		%9 = load %2
		%10 = icmp ne %8 %9
		%11 = zext i1 %10 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %11)
		%12 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5ef2fcdc
		%13 = sext i8 %12 to i32
		%14 = icmp eq %13 0
		%15 = zext i1 %14 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %15)
		%16 = load %2
		%17 = sext i32 %16 to i64
		%18 = getelementptr @I, 0, %17
		%19 = getelementptr %18, 0, 0
		%20 = load %19
		%21 = sext i8 %20 to i32
		%22 = icmp ne %21 2
		%23 = zext i1 %22 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %23)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%24 = load %2
		%25 = trunc i32 %24 to i8
		store %25, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%26 = load %2
		%27 = sext i32 %26 to i64
		%28 = getelementptr @I, 0, %27
		%29 = getelementptr %28, 0, 0
		%30 = load %29
		store %30, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store 1, %5
		%31 = load %2
		%32 = trunc i32 %31 to i8
		%33 = load %3
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %32, i8 zeroext 0, i8 signext %33, i1 zeroext 1)
		%34 = load %2
		%35 = trunc i32 %34 to i8
		%36 = load %4
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %35, i8 zeroext 2, i8 signext %36, i1 zeroext 0)
		%37 = load %2
		%38 = trunc i32 %37 to i8
		%39 = load %5
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %38, i8 zeroext 1, i8 signext %39, i1 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%40 = call i32 @__VERIFIER_nondet_int()
		%41 = trunc i32 %40 to i8
		store %41, %6
		%42 = load %6
		%43 = zext i8 %42 to i32
		%44 = icmp eq %43 3
		br %44, %65, %45
	45:
		%46 = load %6
		%47 = zext i8 %46 to i32
		%48 = icmp eq %47 4
		br %48, %65, %49
	49:
		%50 = load %6
		%51 = zext i8 %50 to i32
		%52 = icmp eq %51 7
		br %52, %65, %53
	53:
		%54 = load %6
		%55 = zext i8 %54 to i32
		%56 = icmp eq %55 9
		br %56, %65, %57
	57:
		%58 = load %6
		%59 = zext i8 %58 to i32
		%60 = icmp eq %59 11
		br %60, %65, %61
	61:
		%62 = load %6
		%63 = zext i8 %62 to i32
		%64 = icmp eq %63 13
		br %65
	65:
		%66 = phi [1, %57], [1, %53], [1, %49], [1, %45], [1, %1], [%64, %61]
		%67 = zext i1 %66 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %67)
		%68 = load %6
		%69 = load %2
		%70 = sext i32 %69 to i64
		%71 = getelementptr @pc, 0, %70
		%72 = getelementptr %71, 0, 0
		store %68, %72
		ret void

*BasicFunctionTypename: "_0_5" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 357
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%7 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6a7846d4
		%8 = sext i8 %7 to i32
		%9 = icmp eq %8 3
		%10 = zext i1 %9 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %10)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store -1, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store -1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store 0, %5
		%11 = load %2
		%12 = trunc i32 %11 to i8
		%13 = load %3
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %12, i8 zeroext 0, i8 signext %13, i1 zeroext 1)
		%14 = load %2
		%15 = trunc i32 %14 to i8
		%16 = load %4
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %15, i8 zeroext 3, i8 signext %16, i1 zeroext 0)
		%17 = load %2
		%18 = trunc i32 %17 to i8
		%19 = load %5
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %18, i8 zeroext 1, i8 signext %19, i1 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%20 = call i32 @__VERIFIER_nondet_int()
		%21 = trunc i32 %20 to i8
		store %21, %6
		%22 = load %6
		%23 = zext i8 %22 to i32
		%24 = icmp eq %23 3
		br %24, %45, %25
	25:
		%26 = load %6
		%27 = zext i8 %26 to i32
		%28 = icmp eq %27 4
		br %28, %45, %29
	29:
		%30 = load %6
		%31 = zext i8 %30 to i32
		%32 = icmp eq %31 7
		br %32, %45, %33
	33:
		%34 = load %6
		%35 = zext i8 %34 to i32
		%36 = icmp eq %35 9
		br %36, %45, %37
	37:
		%38 = load %6
		%39 = zext i8 %38 to i32
		%40 = icmp eq %39 11
		br %40, %45, %41
	41:
		%42 = load %6
		%43 = zext i8 %42 to i32
		%44 = icmp eq %43 13
		br %45
	45:
		%46 = phi [1, %37], [1, %33], [1, %29], [1, %25], [1, %1], [%44, %41]
		%47 = zext i1 %46 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %47)
		%48 = load %6
		%49 = load %2
		%50 = sext i32 %49 to i64
		%51 = getelementptr @pc, 0, %50
		%52 = getelementptr %51, 0, 0
		store %48, %52
		ret void

*BasicFunctionTypename: "_0_6" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 404
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store 2, %3
		%4 = load %2
		%5 = trunc i32 %4 to i8
		%6 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %5, i8 zeroext 0, i8 signext %6, i1 zeroext 1)
		%7 = load %2
		%8 = sext i32 %7 to i64
		%9 = getelementptr @pc, 0, %8
		%10 = getelementptr %9, 0, 0
		store 5, %10
		ret void

*BasicFunctionTypename: "_0_7" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 416
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@68c24783
		%6 = sext i8 %5 to i32
		%7 = load %2
		%8 = icmp ne %6 %7
		%9 = zext i1 %8 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %9)
		%10 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@21694e56
		%11 = sext i8 %10 to i32
		%12 = icmp eq %11 1
		%13 = zext i1 %12 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %13)
		%14 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@683452bb
		%15 = sext i8 %14 to i32
		%16 = icmp eq %15 1
		br %16, %17, %25
	17:
		%18 = load %2
		%19 = sext i32 %18 to i64
		%20 = getelementptr @I, 0, %19
		%21 = getelementptr %20, 0, 0
		%22 = load %21
		%23 = sext i8 %22 to i32
		%24 = icmp eq %23 0
		br %25
	25:
		%26 = phi [0, %1], [%24, %17]
		%27 = zext i1 %26 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %27)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store 2, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%28 = load %2
		%29 = sext i32 %28 to i64
		%30 = getelementptr @I, 0, %29
		%31 = getelementptr %30, 0, 0
		%32 = load %31
		store %32, %4
		%33 = load %2
		%34 = trunc i32 %33 to i8
		%35 = load %3
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %34, i8 zeroext 1, i8 signext %35, i1 zeroext 1)
		%36 = load %2
		%37 = trunc i32 %36 to i8
		%38 = load %4
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %37, i8 zeroext 3, i8 signext %38, i1 zeroext 0)
		%39 = load %2
		%40 = sext i32 %39 to i64
		%41 = getelementptr @pc, 0, %40
		%42 = getelementptr %41, 0, 0
		store 6, %42
		ret void

*BasicFunctionTypename: "_0_8" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 450
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store -1, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store 0, %4
		%6 = load %2
		%7 = trunc i32 %6 to i8
		%8 = load %3
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %7, i8 zeroext 0, i8 signext %8, i1 zeroext 1)
		%9 = load %2
		%10 = trunc i32 %9 to i8
		%11 = load %4
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %10, i8 zeroext 1, i8 signext %11, i1 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%12 = call i32 @__VERIFIER_nondet_int()
		%13 = trunc i32 %12 to i8
		store %13, %5
		%14 = load %5
		%15 = zext i8 %14 to i32
		%16 = icmp eq %15 3
		br %16, %37, %17
	17:
		%18 = load %5
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 4
		br %20, %37, %21
	21:
		%22 = load %5
		%23 = zext i8 %22 to i32
		%24 = icmp eq %23 7
		br %24, %37, %25
	25:
		%26 = load %5
		%27 = zext i8 %26 to i32
		%28 = icmp eq %27 9
		br %28, %37, %29
	29:
		%30 = load %5
		%31 = zext i8 %30 to i32
		%32 = icmp eq %31 11
		br %32, %37, %33
	33:
		%34 = load %5
		%35 = zext i8 %34 to i32
		%36 = icmp eq %35 13
		br %37
	37:
		%38 = phi [1, %29], [1, %25], [1, %21], [1, %17], [1, %1], [%36, %33]
		%39 = zext i1 %38 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %39)
		%40 = load %5
		%41 = load %2
		%42 = sext i32 %41 to i64
		%43 = getelementptr @pc, 0, %42
		%44 = getelementptr %43, 0, 0
		store %40, %44
		ret void

*BasicFunctionTypename: "_0_9" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 489
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@40d2e78f
		%5 = sext i8 %4 to i32
		%6 = load %2
		%7 = icmp ne %5 %6
		%8 = zext i1 %7 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %8)
		%9 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3a564e49
		%10 = sext i8 %9 to i32
		%11 = icmp eq %10 1
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@51a6acab
		%14 = sext i8 %13 to i32
		%15 = icmp eq %14 1
		br %15, %16, %24
	16:
		%17 = load %2
		%18 = sext i32 %17 to i64
		%19 = getelementptr @I, 0, %18
		%20 = getelementptr %19, 0, 0
		%21 = load %20
		%22 = sext i8 %21 to i32
		%23 = icmp eq %22 2
		br %24
	24:
		%25 = phi [0, %1], [%23, %16]
		%26 = zext i1 %25 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %26)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store 3, %3
		%27 = load %2
		%28 = trunc i32 %27 to i8
		%29 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %28, i8 zeroext 0, i8 signext %29, i1 zeroext 1)
		%30 = load %2
		%31 = sext i32 %30 to i64
		%32 = getelementptr @pc, 0, %31
		%33 = getelementptr %32, 0, 0
		store 8, %33
		ret void

*BasicFunctionTypename: "_0_10" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 516
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store -1, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store 0, %4
		%6 = load %2
		%7 = trunc i32 %6 to i8
		%8 = load %3
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %7, i8 zeroext 0, i8 signext %8, i1 zeroext 1)
		%9 = load %2
		%10 = trunc i32 %9 to i8
		%11 = load %4
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %10, i8 zeroext 1, i8 signext %11, i1 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%12 = call i32 @__VERIFIER_nondet_int()
		%13 = trunc i32 %12 to i8
		store %13, %5
		%14 = load %5
		%15 = zext i8 %14 to i32
		%16 = icmp eq %15 3
		br %16, %37, %17
	17:
		%18 = load %5
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 4
		br %20, %37, %21
	21:
		%22 = load %5
		%23 = zext i8 %22 to i32
		%24 = icmp eq %23 7
		br %24, %37, %25
	25:
		%26 = load %5
		%27 = zext i8 %26 to i32
		%28 = icmp eq %27 9
		br %28, %37, %29
	29:
		%30 = load %5
		%31 = zext i8 %30 to i32
		%32 = icmp eq %31 11
		br %32, %37, %33
	33:
		%34 = load %5
		%35 = zext i8 %34 to i32
		%36 = icmp eq %35 13
		br %37
	37:
		%38 = phi [1, %29], [1, %25], [1, %21], [1, %17], [1, %1], [%36, %33]
		%39 = zext i1 %38 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %39)
		%40 = load %5
		%41 = load %2
		%42 = sext i32 %41 to i64
		%43 = getelementptr @pc, 0, %42
		%44 = getelementptr %43, 0, 0
		store %40, %44
		ret void

*BasicFunctionTypename: "_0_11" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 555
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1b4d9dae
		%5 = sext i8 %4 to i32
		%6 = load %2
		%7 = icmp ne %5 %6
		%8 = zext i1 %7 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %8)
		%9 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4c74ffd7
		%10 = sext i8 %9 to i32
		%11 = icmp eq %10 1
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@44d8d416
		%14 = sext i8 %13 to i32
		%15 = icmp eq %14 0
		br %15, %16, %24
	16:
		%17 = load %2
		%18 = sext i32 %17 to i64
		%19 = getelementptr @I, 0, %18
		%20 = getelementptr %19, 0, 0
		%21 = load %20
		%22 = sext i8 %21 to i32
		%23 = icmp eq %22 3
		br %24
	24:
		%25 = phi [0, %1], [%23, %16]
		%26 = zext i1 %25 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %26)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store 2, %3
		%27 = load %2
		%28 = trunc i32 %27 to i8
		%29 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %28, i8 zeroext 0, i8 signext %29, i1 zeroext 1)
		%30 = load %2
		%31 = sext i32 %30 to i64
		%32 = getelementptr @pc, 0, %31
		%33 = getelementptr %32, 0, 0
		store 10, %33
		ret void

*BasicFunctionTypename: "_0_12" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 582
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store -1, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store 0, %4
		%6 = load %2
		%7 = trunc i32 %6 to i8
		%8 = load %3
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %7, i8 zeroext 0, i8 signext %8, i1 zeroext 1)
		%9 = load %2
		%10 = trunc i32 %9 to i8
		%11 = load %4
		Unnamed Call-Instruction = call BasicVoidType @env(i8 zeroext %10, i8 zeroext 1, i8 signext %11, i1 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%12 = call i32 @__VERIFIER_nondet_int()
		%13 = trunc i32 %12 to i8
		store %13, %5
		%14 = load %5
		%15 = zext i8 %14 to i32
		%16 = icmp eq %15 3
		br %16, %37, %17
	17:
		%18 = load %5
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 4
		br %20, %37, %21
	21:
		%22 = load %5
		%23 = zext i8 %22 to i32
		%24 = icmp eq %23 7
		br %24, %37, %25
	25:
		%26 = load %5
		%27 = zext i8 %26 to i32
		%28 = icmp eq %27 9
		br %28, %37, %29
	29:
		%30 = load %5
		%31 = zext i8 %30 to i32
		%32 = icmp eq %31 11
		br %32, %37, %33
	33:
		%34 = load %5
		%35 = zext i8 %34 to i32
		%36 = icmp eq %35 13
		br %37
	37:
		%38 = phi [1, %29], [1, %25], [1, %21], [1, %17], [1, %1], [%36, %33]
		%39 = zext i1 %38 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %39)
		%40 = load %5
		%41 = load %2
		%42 = sext i32 %41 to i64
		%43 = getelementptr @pc, 0, %42
		%44 = getelementptr %43, 0, 0
		store %40, %44
		ret void

*BasicFunctionTypename: "_0_13" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 621
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@20fffbd2
		%5 = sext i8 %4 to i32
		%6 = load %2
		%7 = icmp ne %5 %6
		%8 = zext i1 %7 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %8)
		%9 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@57a8b28e
		%10 = sext i8 %9 to i32
		%11 = icmp eq %10 1
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3cc965eb
		%14 = sext i8 %13 to i32
		%15 = icmp eq %14 3
		br %15, %16, %24
	16:
		%17 = load %2
		%18 = sext i32 %17 to i64
		%19 = getelementptr @I, 0, %18
		%20 = getelementptr %19, 0, 0
		%21 = load %20
		%22 = sext i8 %21 to i32
		%23 = icmp eq %22 2
		br %24
	24:
		%25 = phi [0, %1], [%23, %16]
		%26 = zext i1 %25 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %26)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store 3, %3
		%27 = load %2
		%28 = trunc i32 %27 to i8
		%29 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %28, i8 zeroext 0, i8 signext %29, i1 zeroext 1)
		%30 = load %2
		%31 = sext i32 %30 to i64
		%32 = getelementptr @pc, 0, %31
		%33 = getelementptr %32, 0, 0
		store 12, %33
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 648
	0:
		%1 = alloca i32, align 4
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @init()
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = trunc i32 %4 to i8
		store %5, %2
		br %6
	6:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = trunc i32 %7 to i8
		store %8, %3
		%9 = load %3
		%10 = zext i8 %9 to i32
		%11 = icmp slt %10 3
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = load %3
		store %13, %2
		%14 = load %2
		%15 = zext i8 %14 to i32
		%16 = icmp slt %15 3
		%17 = zext i1 %16 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %17)
		%18 = load %2
		%19 = zext i8 %18 to i64
		%20 = getelementptr @pc, 0, %19
		%21 = getelementptr %20, 0, 0
		%22 = load %21
		%23 = zext i8 %22 to i32
		switch %23, %60 [2, %24 3, %27 4, %30 5, %33 6, %36 7, %39 8, %42 9, %45 10, %48 11, %51 12, %54 13, %57]
	24:
		%25 = load %2
		%26 = zext i8 %25 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_2(i32 %26)
		br %61
	27:
		%28 = load %2
		%29 = zext i8 %28 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_3(i32 %29)
		br %61
	30:
		%31 = load %2
		%32 = zext i8 %31 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_4(i32 %32)
		br %61
	33:
		%34 = load %2
		%35 = zext i8 %34 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_5(i32 %35)
		br %61
	36:
		%37 = load %2
		%38 = zext i8 %37 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_6(i32 %38)
		br %61
	39:
		%40 = load %2
		%41 = zext i8 %40 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_7(i32 %41)
		br %61
	42:
		%43 = load %2
		%44 = zext i8 %43 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_8(i32 %44)
		br %61
	45:
		%46 = load %2
		%47 = zext i8 %46 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_9(i32 %47)
		br %61
	48:
		%49 = load %2
		%50 = zext i8 %49 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_10(i32 %50)
		br %61
	51:
		%52 = load %2
		%53 = zext i8 %52 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_11(i32 %53)
		br %61
	54:
		%55 = load %2
		%56 = zext i8 %55 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_12(i32 %56)
		br %61
	57:
		%58 = load %2
		%59 = zext i8 %58 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_13(i32 %59)
		br %61
	60:
		br %61
	61:
		%62 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3eb37e00
		%63 = sext i8 %62 to i32
		%64 = icmp eq %63 0
		br %64, %69, %65
	65:
		%66 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@614d336f
		%67 = sext i8 %66 to i32
		%68 = icmp eq %67 2
		br %68, %69, %86
	69:
		%70 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@73e3d10a
		%71 = sext i8 %70 to i32
		%72 = icmp eq %71 0
		br %72, %77, %73
	73:
		%74 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@47204a0
		%75 = sext i8 %74 to i32
		%76 = icmp eq %75 2
		br %76, %77, %86
	77:
		%78 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@21943950
		%79 = sext i8 %78 to i32
		%80 = icmp eq %79 0
		br %80, %85, %81
	81:
		%82 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@29cab046
		%83 = sext i8 %82 to i32
		%84 = icmp eq %83 2
		br %84, %85, %86
	85:
		ret 0
	86:
		br %6


Analyze Termination of all function calls matching the pattern:
main()Instruction count:1031
deleted entry node of __VERIFIER_assume
deleted entry node of __VERIFIER_assume
deleted entry node of __VERIFIER_assume
deleted entry node of __VERIFIER_assume
deleted entry node of __VERIFIER_assume
deleted entry node of __VERIFIER_assume
deleted entry node of __VERIFIER_assume
deleted entry node of __VERIFIER_assume
deleted entry node of __VERIFIER_assume
