YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/gDHpt.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 784 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 47 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (13) AND
            (14) IntTRS
                (15) TerminationGraphProcessor [EQUIVALENT, 2 ms]
                (16) IntTRS
                (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (18) IntTRS
                (19) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (20) IntTRS
                (21) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
                (22) YES
            (23) IntTRS
                (24) TerminationGraphProcessor [EQUIVALENT, 2 ms]
                (25) IntTRS
                (26) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (27) IntTRS
                (28) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (29) IntTRS
                (30) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
                (31) YES
    (32) LLVM Symbolic Execution SCC
        (33) SCC2IRS [SOUND, 21 ms]
        (34) IntTRS
        (35) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (36) IntTRS
        (37) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (38) YES
    (39) LLVM Symbolic Execution SCC
        (40) SCC2IRS [SOUND, 26 ms]
        (41) IntTRS
        (42) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (43) IntTRS
        (44) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (45) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/gDHpt.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/gDHpt.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sgt %7 0
		br %8, %9, %12
	9:
		%10 = load %3
		%11 = icmp sgt %10 0
		br %12
	12:
		%13 = phi [0, %6], [%11, %9]
		br %13, %14, %25
	14:
		%15 = call i32 @__VERIFIER_nondet_int()
		%16 = icmp ne %15 0
		br %16, %17, %20
	17:
		%18 = load %2
		%19 = sub i32 %18, 1
		store %19, %2
		br %24
	20:
		%21 = call i32 @__VERIFIER_nondet_int()
		store %21, %2
		%22 = load %3
		%23 = sub i32 %22, 1
		store %23, %3
		br %24
	24:
		br %6
	25:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 49 rulesP rules:
f_482(v2255, v2256, v2257, v2258, v2259, v2260, 1, v2262, v2263, v2264, v2265, v2266, v2267, v2268, v2269, 0, 3, 2, 4) -> f_485(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) :|: 0 = 0
f_485(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) -> f_488(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) :|: 0 < v2266 && 2 <= v2260 && 2 <= v2264
f_488(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) -> f_492(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) :|: 0 = 0
f_492(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) -> f_496(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) :|: TRUE
f_496(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) -> f_500(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) :|: 0 = 0
f_500(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) -> f_504(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) :|: 0 = 0
f_504(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) -> f_507(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) :|: 0 = 0
f_507(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) -> f_510(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) :|: TRUE
f_510(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2263, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) -> f_512(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2685, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) :|: TRUE
f_512(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2685, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) -> f_515(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2685, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) :|: v2685 != 0
f_512(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2685, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) -> f_516(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, 0, v2264, v2265, v2260, v2267, v2268, v2269, 3, 2, 4) :|: v2685 = 0
f_515(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2685, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) -> f_519(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2685, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) :|: 0 = 0
f_519(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2685, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) -> f_523(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2685, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) :|: TRUE
f_523(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2685, v2264, v2265, v2260, v2267, v2268, v2269, 0, 3, 2, 4) -> f_570(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, v2685, v2264, v2265, v2260, v2266, v2267, v2268, v2269, 0, 3, 2, 4) :|: TRUE
f_570(v3332, v3333, v3334, v3335, v3336, v3337, 1, v3339, v3340, v3341, v3342, v3343, v3344, v3345, v3346, v3347, 0, 3, 2, 4) -> f_573(v3332, v3333, v3334, v3335, v3336, v3337, 1, v3339, v3340, v3341, v3342, v3344, v3345, v3346, v3347, 0, 3, 2, 4) :|: 0 = 0
f_573(v3332, v3333, v3334, v3335, v3336, v3337, 1, v3339, v3340, v3341, v3342, v3344, v3345, v3346, v3347, 0, 3, 2, 4) -> f_575(v3332, v3333, v3334, v3335, v3336, v3337, 1, v3339, v3340, v3341, v3342, v3387, v3345, v3346, v3347, 0, 3, 2, 4) :|: 1 + v3387 = v3337 && 0 <= v3387
f_575(v3332, v3333, v3334, v3335, v3336, v3337, 1, v3339, v3340, v3341, v3342, v3387, v3345, v3346, v3347, 0, 3, 2, 4) -> f_577(v3332, v3333, v3334, v3335, v3336, v3337, 1, v3339, v3340, v3341, v3342, v3387, v3345, v3346, v3347, 0, 3, 2, 4) :|: TRUE
f_577(v3332, v3333, v3334, v3335, v3336, v3337, 1, v3339, v3340, v3341, v3342, v3387, v3345, v3346, v3347, 0, 3, 2, 4) -> f_579(v3332, v3333, v3334, v3335, v3336, v3337, 1, v3339, v3340, v3341, v3342, v3387, v3345, v3346, v3347, 0, 3, 2, 4) :|: TRUE
f_579(v3332, v3333, v3334, v3335, v3336, v3337, 1, v3339, v3340, v3341, v3342, v3387, v3345, v3346, v3347, 0, 3, 2, 4) -> f_480(v3332, v3333, v3334, v3335, v3336, v3337, 1, v3339, v3340, v3341, v3342, v3387, v3345, v3346, v3347, 0, 3, 2, 4) :|: TRUE
f_480(v2255, v2256, v2257, v2258, v2259, v2260, 1, v2262, v2263, v2264, v2265, v2266, v2267, v2268, v2269, 0, 3, 2, 4) -> f_482(v2255, v2256, v2257, v2258, v2259, v2260, 1, v2262, v2263, v2264, v2265, v2266, v2267, v2268, v2269, 0, 3, 2, 4) :|: TRUE
f_516(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, 0, v2264, v2265, v2260, v2267, v2268, v2269, 3, 2, 4) -> f_520(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, 0, v2264, v2265, v2260, v2267, v2268, v2269, 3, 2, 4) :|: 0 = 0
f_520(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, 0, v2264, v2265, v2260, v2267, v2268, v2269, 3, 2, 4) -> f_524(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, 0, v2264, v2265, v2260, v2267, v2268, v2269, 3, 2, 4) :|: TRUE
f_524(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, 0, v2264, v2265, v2260, v2267, v2268, v2269, 3, 2, 4) -> f_572(v2255, v2256, v2257, v2258, v2259, v2266, 1, v2262, 0, v2264, v2265, v2260, v2266, v2267, v2268, v2269, 3, 2, 4) :|: TRUE
f_572(v3370, v3371, v3372, v3373, v3374, v3375, 1, v3377, 0, v3379, v3380, v3381, v3382, v3383, v3384, v3385, 3, 2, 4) -> f_574(v3370, v3371, v3372, v3373, v3374, v3375, 1, v3377, 0, v3386, v3380, v3381, v3382, v3383, v3384, v3385, 3, 2, 4) :|: TRUE
f_574(v3370, v3371, v3372, v3373, v3374, v3375, 1, v3377, 0, v3386, v3380, v3381, v3382, v3383, v3384, v3385, 3, 2, 4) -> f_576(v3370, v3371, v3372, v3373, v3374, v3375, 1, v3377, 0, v3386, v3380, v3381, v3382, v3383, v3384, v3385, 3, 2, 4) :|: TRUE
f_576(v3370, v3371, v3372, v3373, v3374, v3375, 1, v3377, 0, v3386, v3380, v3381, v3382, v3383, v3384, v3385, 3, 2, 4) -> f_578(v3370, v3371, v3372, v3373, v3374, v3375, 1, v3377, 0, v3386, v3381, v3382, v3383, v3384, v3385, 3, 2, 4) :|: 0 = 0
f_578(v3370, v3371, v3372, v3373, v3374, v3375, 1, v3377, 0, v3386, v3381, v3382, v3383, v3384, v3385, 3, 2, 4) -> f_580(v3370, v3371, v3372, v3373, v3374, v3375, 1, v3377, 0, v3386, v3429, v3381, v3382, v3383, v3384, v3385, 3, 2, 4) :|: 1 + v3429 = v3377 && 0 <= v3429
f_580(v3370, v3371, v3372, v3373, v3374, v3375, 1, v3377, 0, v3386, v3429, v3381, v3382, v3383, v3384, v3385, 3, 2, 4) -> f_581(v3370, v3371, v3372, v3373, v3374, v3375, 1, v3377, 0, v3386, v3429, v3381, v3382, v3383, v3384, v3385, 3, 2, 4) :|: TRUE
f_581(v3370, v3371, v3372, v3373, v3374, v3375, 1, v3377, 0, v3386, v3429, v3381, v3382, v3383, v3384, v3385, 3, 2, 4) -> f_582(v3370, v3371, v3372, v3373, v3374, v3375, 1, v3377, 0, v3386, v3429, v3381, v3382, v3383, v3384, v3385, 3, 2, 4) :|: TRUE
f_582(v3370, v3371, v3372, v3373, v3374, v3375, 1, v3377, 0, v3386, v3429, v3381, v3382, v3383, v3384, v3385, 3, 2, 4) -> f_545(v3370, v3371, v3372, v3373, v3374, v3375, 1, v3377, 0, v3381, v3382, v3386, v3429, v3383, v3384, v3385, 3, 2, 4) :|: TRUE
f_545(v2918, v2919, v2920, v2921, v2922, v2923, 1, v2925, 0, v2927, v2928, v2929, v2930, v2931, v2932, v2933, 3, 2, 4) -> f_546(v2918, v2919, v2920, v2921, v2922, v2923, 1, v2925, 0, v2927, v2928, v2929, v2930, v2931, v2932, v2933, 3, 2, 4) :|: TRUE
f_546(v2918, v2919, v2920, v2921, v2922, v2923, 1, v2925, 0, v2927, v2928, v2929, v2930, v2931, v2932, v2933, 3, 2, 4) -> f_547(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2925, 0, v2927, v2928, v2930, v2931, v2932, v2933, 3, 2, 4) :|: 0 = 0
f_547(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2925, 0, v2927, v2928, v2930, v2931, v2932, v2933, 3, 2, 4) -> f_548(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2925, 0, v2927, v2928, v2930, v2931, v2932, v2933, 3, 2, 4) :|: 0 < v2929
f_548(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2925, 0, v2927, v2928, v2930, v2931, v2932, v2933, 3, 2, 4) -> f_550(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2925, 0, v2927, v2928, v2930, v2931, v2932, v2933, 3, 2, 4) :|: 0 = 0
f_550(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2925, 0, v2927, v2928, v2930, v2931, v2932, v2933, 3, 2, 4) -> f_552(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2925, 0, v2927, v2928, v2930, v2931, v2932, v2933, 3, 2, 4) :|: TRUE
f_552(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2925, 0, v2927, v2928, v2930, v2931, v2932, v2933, 3, 2, 4) -> f_554(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) :|: 0 = 0
f_554(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) -> f_556(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) :|: 0 < v2930 && 2 <= v2925 && 2 <= v2922
f_556(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) -> f_558(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) :|: 0 = 0
f_558(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) -> f_560(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) :|: 0 = 0
f_560(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) -> f_562(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) :|: TRUE
f_562(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) -> f_564(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, v3310, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) :|: TRUE
f_564(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, v3310, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) -> f_565(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, v3310, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) :|: v3310 != 0
f_564(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, v3310, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) -> f_566(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) :|: v3310 = 0
f_565(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, v3310, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) -> f_567(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, v3310, v2927, v2928, v2925, v2931, v2932, v2933, 0, 3, 2, 4) :|: 0 = 0
f_567(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, v3310, v2927, v2928, v2925, v2931, v2932, v2933, 0, 3, 2, 4) -> f_569(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, v3310, v2927, v2928, v2925, v2931, v2932, v2933, 0, 3, 2, 4) :|: TRUE
f_569(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, v3310, v2927, v2928, v2925, v2931, v2932, v2933, 0, 3, 2, 4) -> f_570(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, v3310, v2929, v2925, v2927, v2928, v2931, v2932, v2933, 0, 3, 2, 4) :|: TRUE
f_566(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) -> f_568(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) :|: 0 = 0
f_568(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) -> f_571(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) :|: TRUE
f_571(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2927, v2928, v2925, v2931, v2932, v2933, 3, 2, 4) -> f_572(v2918, v2919, v2920, v2921, v2922, v2929, 1, v2930, 0, v2929, v2925, v2927, v2928, v2931, v2932, v2933, 3, 2, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_482(v2255:0, v2256:0, v2257:0, v2258:0, v2259:0, v2260:0, 1, 1 + v3429:0, v2263:0, v2264:0, v2265:0, v2266:0, v2267:0, v2268:0, v2269:0, 0, 3, 2, 4) -> f_564(v2255:0, v2256:0, v2257:0, v2258:0, v2259:0, v3386:0, 1, v3429:0, v3310:0, 0, v2260:0, v2266:0, 1 + v3429:0, v2267:0, v2268:0, v2269:0, 3, 2, 4) :|: v3429:0 > 0 && v2260:0 > 1 && v2266:0 > 0 && v2264:0 > 1 && v3386:0 > 0 && v2259:0 > 1
f_564(v2918:0, v2919:0, v2920:0, v2921:0, v2922:0, 1 + v3387:0, 1, v2930:0, v3310:0, 0, v2927:0, v2928:0, v2925:0, v2931:0, v2932:0, v2933:0, 3, 2, 4) -> f_482(v2918:0, v2919:0, v2920:0, v2921:0, v2922:0, 1 + v3387:0, 1, v2930:0, v3310:0, 1 + v3387:0, v2925:0, v3387:0, v2931:0, v2932:0, v2933:0, 0, 3, 2, 4) :|: v3310:0 < 0 && v3387:0 > -1
f_564(v2918:0, v2919:0, v2920:0, v2921:0, v2922:0, 1 + v3387:0, 1, v2930:0, v3310:0, 0, v2927:0, v2928:0, v2925:0, v2931:0, v2932:0, v2933:0, 3, 2, 4) -> f_482(v2918:0, v2919:0, v2920:0, v2921:0, v2922:0, 1 + v3387:0, 1, v2930:0, v3310:0, 1 + v3387:0, v2925:0, v3387:0, v2931:0, v2932:0, v2933:0, 0, 3, 2, 4) :|: v3310:0 > 0 && v3387:0 > -1
f_564(v2918:0, v2919:0, v2920:0, v2921:0, v2922:0, v2929:0, 1, 1 + v3429:0, 0, 0, v2927:0, v2928:0, v2925:0, v2931:0, v2932:0, v2933:0, 3, 2, 4) -> f_564(v2918:0, v2919:0, v2920:0, v2921:0, v2922:0, v3386:0, 1, v3429:0, v3310:1, 0, v2927:0, v2928:0, 1 + v3429:0, v2931:0, v2932:0, v2933:0, 3, 2, 4) :|: v3429:0 > 0 && v3386:0 > 0 && v2922:0 > 1
f_482(v2255:0, v2256:0, v2257:0, v2258:0, v2259:0, v2260:0, 1, v2262:0, v2263:0, v2264:0, v2265:0, 1 + v3387:0, v2267:0, v2268:0, v2269:0, 0, 3, 2, 4) -> f_482(v2255:0, v2256:0, v2257:0, v2258:0, v2259:0, 1 + v3387:0, 1, v2262:0, v2685:0, v2264:0, v2265:0, v3387:0, v2267:0, v2268:0, v2269:0, 0, 3, 2, 4) :|: v2260:0 > 1 && v3387:0 > -1 && v2264:0 > 1 && v2685:0 < 0
f_482(v2255:0, v2256:0, v2257:0, v2258:0, v2259:0, v2260:0, 1, v2262:0, v2263:0, v2264:0, v2265:0, 1 + v3387:0, v2267:0, v2268:0, v2269:0, 0, 3, 2, 4) -> f_482(v2255:0, v2256:0, v2257:0, v2258:0, v2259:0, 1 + v3387:0, 1, v2262:0, v2685:0, v2264:0, v2265:0, v3387:0, v2267:0, v2268:0, v2269:0, 0, 3, 2, 4) :|: v2260:0 > 1 && v3387:0 > -1 && v2264:0 > 1 && v2685:0 > 0
Filtered unneeded arguments:
   f_482(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_482(x5, x6, x8, x10, x12)
   f_564(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_564(x5, x6, x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_482(v2259:0, v2260:0, sum~cons_1~v3429:0, v2264:0, v2266:0) -> f_564(v2259:0, v3386:0, v3429:0, v3310:0) :|: v2260:0 > 1 && v3429:0 > 0 && v2266:0 > 0 && v2264:0 > 1 && v2259:0 > 1 && v3386:0 > 0 && sum~cons_1~v3429:0 = 1 + v3429:0
f_564(v2922:0, sum~cons_1~v3387:0, v2930:0, v3310:0) -> f_482(v2922:0, 1 + v3387:0, v2930:0, 1 + v3387:0, v3387:0) :|: v3310:0 < 0 && v3387:0 > -1 && sum~cons_1~v3387:0 = 1 + v3387:0
f_564(v2922:0, sum~cons_1~v3387:0, v2930:0, v3310:0) -> f_482(v2922:0, 1 + v3387:0, v2930:0, 1 + v3387:0, v3387:0) :|: v3310:0 > 0 && v3387:0 > -1 && sum~cons_1~v3387:0 = 1 + v3387:0
f_564(v2922:0, v2929:0, sum~cons_1~v3429:0, cons_0) -> f_564(v2922:0, v3386:0, v3429:0, v3310:1) :|: v3386:0 > 0 && v2922:0 > 1 && v3429:0 > 0 && sum~cons_1~v3429:0 = 1 + v3429:0 && cons_0 = 0
f_482(v2259:0, v2260:0, v2262:0, v2264:0, sum~cons_1~v3387:0) -> f_482(v2259:0, 1 + v3387:0, v2262:0, v2264:0, v3387:0) :|: v3387:0 > -1 && v2264:0 > 1 && v2260:0 > 1 && sum~cons_1~v3387:0 = 1 + v3387:0

----------------------------------------

(9)
Obligation:
Rules:
f_482(v2259:0, v2260:0, sum~cons_1~v3429:0, v2264:0, v2266:0) -> f_564(v2259:0, v3386:0, v3429:0, v3310:0) :|: v2260:0 > 1 && v3429:0 > 0 && v2266:0 > 0 && v2264:0 > 1 && v2259:0 > 1 && v3386:0 > 0 && sum~cons_1~v3429:0 = 1 + v3429:0
f_564(x, x1, x2, x3) -> f_482(x, 1 + x4, x2, 1 + x4, x4) :|: x3 < 0 && x4 > -1 && x1 = 1 + x4
f_564(x5, x6, x7, x8) -> f_482(x5, 1 + x9, x7, 1 + x9, x9) :|: x8 > 0 && x9 > -1 && x6 = 1 + x9
f_564(x10, x11, x12, x13) -> f_564(x10, x14, x15, x16) :|: x14 > 0 && x10 > 1 && x15 > 0 && x12 = 1 + x15 && x13 = 0
f_482(x17, x18, x19, x20, x21) -> f_482(x17, 1 + x22, x19, x20, x22) :|: x22 > -1 && x20 > 1 && x18 > 1 && x21 = 1 + x22

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_564(x10:0, x11:0, sum~cons_1~x15:0, cons_0) -> f_564(x10:0, x14:0, x15:0, x16:0) :|: x14:0 > 0 && x10:0 > 1 && x15:0 > 0 && sum~cons_1~x15:0 = 1 + x15:0 && cons_0 = 0
f_564(x5:0, sum~cons_1~x9:0, x7:0, x8:0) -> f_482(x5:0, 1 + x9:0, x7:0, 1 + x9:0, x9:0) :|: x8:0 > 0 && x9:0 > -1 && sum~cons_1~x9:0 = 1 + x9:0
f_482(x17:0, x18:0, x19:0, x20:0, sum~cons_1~x22:0) -> f_482(x17:0, 1 + x22:0, x19:0, x20:0, x22:0) :|: x22:0 > -1 && x20:0 > 1 && x18:0 > 1 && sum~cons_1~x22:0 = 1 + x22:0
f_482(v2259:0:0, v2260:0:0, sum~cons_1~v3429:0:0, v2264:0:0, v2266:0:0) -> f_564(v2259:0:0, v3386:0:0, v3429:0:0, v3310:0:0) :|: v2259:0:0 > 1 && v3386:0:0 > 0 && v2264:0:0 > 1 && v2266:0:0 > 0 && v3429:0:0 > 0 && v2260:0:0 > 1 && sum~cons_1~v3429:0:0 = 1 + v3429:0:0
f_564(x:0, sum~cons_1~x4:0, x2:0, x3:0) -> f_482(x:0, 1 + x4:0, x2:0, 1 + x4:0, x4:0) :|: x3:0 < 0 && x4:0 > -1 && sum~cons_1~x4:0 = 1 + x4:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_564(x, x1, x2, x3)] = -1 + x + x2
[f_482(x4, x5, x6, x7, x8)] = -2 + x4 + x6

The following rules are decreasing:
f_564(x10:0, x11:0, sum~cons_1~x15:0, cons_0) -> f_564(x10:0, x14:0, x15:0, x16:0) :|: x14:0 > 0 && x10:0 > 1 && x15:0 > 0 && sum~cons_1~x15:0 = 1 + x15:0 && cons_0 = 0
f_564(x5:0, sum~cons_1~x9:0, x7:0, x8:0) -> f_482(x5:0, 1 + x9:0, x7:0, 1 + x9:0, x9:0) :|: x8:0 > 0 && x9:0 > -1 && sum~cons_1~x9:0 = 1 + x9:0
f_564(x:0, sum~cons_1~x4:0, x2:0, x3:0) -> f_482(x:0, 1 + x4:0, x2:0, 1 + x4:0, x4:0) :|: x3:0 < 0 && x4:0 > -1 && sum~cons_1~x4:0 = 1 + x4:0
The following rules are bounded:
f_564(x10:0, x11:0, sum~cons_1~x15:0, cons_0) -> f_564(x10:0, x14:0, x15:0, x16:0) :|: x14:0 > 0 && x10:0 > 1 && x15:0 > 0 && sum~cons_1~x15:0 = 1 + x15:0 && cons_0 = 0
f_482(v2259:0:0, v2260:0:0, sum~cons_1~v3429:0:0, v2264:0:0, v2266:0:0) -> f_564(v2259:0:0, v3386:0:0, v3429:0:0, v3310:0:0) :|: v2259:0:0 > 1 && v3386:0:0 > 0 && v2264:0:0 > 1 && v2266:0:0 > 0 && v3429:0:0 > 0 && v2260:0:0 > 1 && sum~cons_1~v3429:0:0 = 1 + v3429:0:0

----------------------------------------

(13)
Complex Obligation (AND)

----------------------------------------

(14)
Obligation:
Rules:
f_482(x17:0, x18:0, x19:0, x20:0, sum~cons_1~x22:0) -> f_482(x17:0, 1 + x22:0, x19:0, x20:0, x22:0) :|: x22:0 > -1 && x20:0 > 1 && x18:0 > 1 && sum~cons_1~x22:0 = 1 + x22:0
f_482(v2259:0:0, v2260:0:0, sum~cons_1~v3429:0:0, v2264:0:0, v2266:0:0) -> f_564(v2259:0:0, v3386:0:0, v3429:0:0, v3310:0:0) :|: v2259:0:0 > 1 && v3386:0:0 > 0 && v2264:0:0 > 1 && v2266:0:0 > 0 && v3429:0:0 > 0 && v2260:0:0 > 1 && sum~cons_1~v3429:0:0 = 1 + v3429:0:0

----------------------------------------

(15) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(16)
Obligation:
Rules:
f_482(x17:0, x18:0, x19:0, x20:0, sum~cons_1~x22:0) -> f_482(x17:0, 1 + x22:0, x19:0, x20:0, x22:0) :|: x22:0 > -1 && x20:0 > 1 && x18:0 > 1 && sum~cons_1~x22:0 = 1 + x22:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_482(x17:0:0, x18:0:0, x19:0:0, x20:0:0, sum~cons_1~x22:0:0) -> f_482(x17:0:0, 1 + x22:0:0, x19:0:0, x20:0:0, x22:0:0) :|: x22:0:0 > -1 && x20:0:0 > 1 && x18:0:0 > 1 && sum~cons_1~x22:0:0 = 1 + x22:0:0

----------------------------------------

(19) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_482(x1, x2, x3, x4, x5) -> f_482(x2, x4, x5)

----------------------------------------

(20)
Obligation:
Rules:
f_482(x18:0:0, x20:0:0, sum~cons_1~x22:0:0) -> f_482(1 + x22:0:0, x20:0:0, x22:0:0) :|: x22:0:0 > -1 && x20:0:0 > 1 && x18:0:0 > 1 && sum~cons_1~x22:0:0 = 1 + x22:0:0

----------------------------------------

(21) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_482(x, x1, x2)] = x2

The following rules are decreasing:
f_482(x18:0:0, x20:0:0, sum~cons_1~x22:0:0) -> f_482(1 + x22:0:0, x20:0:0, x22:0:0) :|: x22:0:0 > -1 && x20:0:0 > 1 && x18:0:0 > 1 && sum~cons_1~x22:0:0 = 1 + x22:0:0
The following rules are bounded:
f_482(x18:0:0, x20:0:0, sum~cons_1~x22:0:0) -> f_482(1 + x22:0:0, x20:0:0, x22:0:0) :|: x22:0:0 > -1 && x20:0:0 > 1 && x18:0:0 > 1 && sum~cons_1~x22:0:0 = 1 + x22:0:0

----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Rules:
f_564(x5:0, sum~cons_1~x9:0, x7:0, x8:0) -> f_482(x5:0, 1 + x9:0, x7:0, 1 + x9:0, x9:0) :|: x8:0 > 0 && x9:0 > -1 && sum~cons_1~x9:0 = 1 + x9:0
f_482(x17:0, x18:0, x19:0, x20:0, sum~cons_1~x22:0) -> f_482(x17:0, 1 + x22:0, x19:0, x20:0, x22:0) :|: x22:0 > -1 && x20:0 > 1 && x18:0 > 1 && sum~cons_1~x22:0 = 1 + x22:0
f_564(x:0, sum~cons_1~x4:0, x2:0, x3:0) -> f_482(x:0, 1 + x4:0, x2:0, 1 + x4:0, x4:0) :|: x3:0 < 0 && x4:0 > -1 && sum~cons_1~x4:0 = 1 + x4:0

----------------------------------------

(24) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(25)
Obligation:
Rules:
f_482(x17:0, x18:0, x19:0, x20:0, sum~cons_1~x22:0) -> f_482(x17:0, 1 + x22:0, x19:0, x20:0, x22:0) :|: x22:0 > -1 && x20:0 > 1 && x18:0 > 1 && sum~cons_1~x22:0 = 1 + x22:0

----------------------------------------

(26) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(27)
Obligation:
Rules:
f_482(x17:0:0, x18:0:0, x19:0:0, x20:0:0, sum~cons_1~x22:0:0) -> f_482(x17:0:0, 1 + x22:0:0, x19:0:0, x20:0:0, x22:0:0) :|: x22:0:0 > -1 && x20:0:0 > 1 && x18:0:0 > 1 && sum~cons_1~x22:0:0 = 1 + x22:0:0

----------------------------------------

(28) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_482(x1, x2, x3, x4, x5) -> f_482(x2, x4, x5)

----------------------------------------

(29)
Obligation:
Rules:
f_482(x18:0:0, x20:0:0, sum~cons_1~x22:0:0) -> f_482(1 + x22:0:0, x20:0:0, x22:0:0) :|: x22:0:0 > -1 && x20:0:0 > 1 && x18:0:0 > 1 && sum~cons_1~x22:0:0 = 1 + x22:0:0

----------------------------------------

(30) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_482(x, x1, x2)] = x2

The following rules are decreasing:
f_482(x18:0:0, x20:0:0, sum~cons_1~x22:0:0) -> f_482(1 + x22:0:0, x20:0:0, x22:0:0) :|: x22:0:0 > -1 && x20:0:0 > 1 && x18:0:0 > 1 && sum~cons_1~x22:0:0 = 1 + x22:0:0
The following rules are bounded:
f_482(x18:0:0, x20:0:0, sum~cons_1~x22:0:0) -> f_482(1 + x22:0:0, x20:0:0, x22:0:0) :|: x22:0:0 > -1 && x20:0:0 > 1 && x18:0:0 > 1 && sum~cons_1~x22:0:0 = 1 + x22:0:0

----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
SCC
----------------------------------------

(33) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_299(v588, v589, v590, v591, v592, v593, 1, v595, 0, v597, v598, v599, v600, v601, 3, 4) -> f_301(v588, v589, v590, v591, v592, v597, 1, v595, 0, v598, v599, v600, v601, 3, 4) :|: 0 = 0
f_301(v588, v589, v590, v591, v592, v597, 1, v595, 0, v598, v599, v600, v601, 3, 4) -> f_304(v588, v589, v590, v591, v592, v597, 1, v595, 0, v598, v599, v600, v601, 3, 4) :|: 0 < v597
f_304(v588, v589, v590, v591, v592, v597, 1, v595, 0, v598, v599, v600, v601, 3, 4) -> f_308(v588, v589, v590, v591, v592, v597, 1, v595, 0, v598, v599, v600, v601, 3, 4) :|: 0 = 0
f_308(v588, v589, v590, v591, v592, v597, 1, v595, 0, v598, v599, v600, v601, 3, 4) -> f_312(v588, v589, v590, v591, v592, v597, 1, v595, 0, v598, v599, v600, v601, 3, 4) :|: TRUE
f_312(v588, v589, v590, v591, v592, v597, 1, v595, 0, v598, v599, v600, v601, 3, 4) -> f_316(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 4) :|: 0 = 0
f_316(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 4) -> f_320(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 2, 4) :|: 0 < v598 && 2 <= v595 && 2 <= v592
f_320(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 2, 4) -> f_324(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 2, 4) :|: 0 = 0
f_324(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 2, 4) -> f_328(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 2, 4) :|: 0 = 0
f_328(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 2, 4) -> f_332(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 2, 4) :|: TRUE
f_332(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 2, 4) -> f_335(v588, v589, v590, v591, v592, v597, 1, v598, v770, 0, v595, v599, v600, v601, 3, 2, 4) :|: TRUE
f_335(v588, v589, v590, v591, v592, v597, 1, v598, v770, 0, v595, v599, v600, v601, 3, 2, 4) -> f_338(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 2, 4) :|: v770 = 0
f_338(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 2, 4) -> f_341(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 2, 4) :|: 0 = 0
f_341(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 2, 4) -> f_345(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 2, 4) :|: TRUE
f_345(v588, v589, v590, v591, v592, v597, 1, v598, 0, v595, v599, v600, v601, 3, 2, 4) -> f_349(v588, v589, v590, v591, v592, v597, 1, v598, 0, v796, v595, v599, v600, v601, 3, 2, 4) :|: TRUE
f_349(v588, v589, v590, v591, v592, v597, 1, v598, 0, v796, v595, v599, v600, v601, 3, 2, 4) -> f_353(v588, v589, v590, v591, v592, v597, 1, v598, 0, v796, v595, v599, v600, v601, 3, 2, 4) :|: TRUE
f_353(v588, v589, v590, v591, v592, v597, 1, v598, 0, v796, v595, v599, v600, v601, 3, 2, 4) -> f_357(v588, v589, v590, v591, v592, v597, 1, v598, 0, v796, v599, v600, v601, 3, 2, 4) :|: 0 = 0
f_357(v588, v589, v590, v591, v592, v597, 1, v598, 0, v796, v599, v600, v601, 3, 2, 4) -> f_361(v588, v589, v590, v591, v592, v597, 1, v598, 0, v796, v919, v599, v600, v601, 3, 2, 4) :|: 1 + v919 = v598 && 0 <= v919
f_361(v588, v589, v590, v591, v592, v597, 1, v598, 0, v796, v919, v599, v600, v601, 3, 2, 4) -> f_365(v588, v589, v590, v591, v592, v597, 1, v598, 0, v796, v919, v599, v600, v601, 3, 2, 4) :|: TRUE
f_365(v588, v589, v590, v591, v592, v597, 1, v598, 0, v796, v919, v599, v600, v601, 3, 2, 4) -> f_369(v588, v589, v590, v591, v592, v597, 1, v598, 0, v796, v919, v599, v600, v601, 3, 2, 4) :|: TRUE
f_369(v588, v589, v590, v591, v592, v597, 1, v598, 0, v796, v919, v599, v600, v601, 3, 2, 4) -> f_297(v588, v589, v590, v591, v592, v597, 1, v598, 0, v796, v919, v599, v600, v601, 3, 4) :|: TRUE
f_297(v588, v589, v590, v591, v592, v593, 1, v595, 0, v597, v598, v599, v600, v601, 3, 4) -> f_299(v588, v589, v590, v591, v592, v593, 1, v595, 0, v597, v598, v599, v600, v601, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_299(v588:0, v589:0, v590:0, v591:0, v592:0, v593:0, 1, v595:0, 0, v597:0, 1 + v919:0, v599:0, v600:0, v601:0, 3, 4) -> f_299(v588:0, v589:0, v590:0, v591:0, v592:0, v597:0, 1, 1 + v919:0, 0, v796:0, v919:0, v599:0, v600:0, v601:0, 3, 4) :|: v597:0 > 0 && v595:0 > 1 && v919:0 > -1 && v592:0 > 1
Filtered unneeded arguments:
   f_299(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_299(x5, x8, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_299(v592:0, v595:0, v597:0, sum~cons_1~v919:0) -> f_299(v592:0, 1 + v919:0, v796:0, v919:0) :|: v595:0 > 1 && v597:0 > 0 && v592:0 > 1 && v919:0 > -1 && sum~cons_1~v919:0 = 1 + v919:0

----------------------------------------

(34)
Obligation:
Rules:
f_299(v592:0, v595:0, v597:0, sum~cons_1~v919:0) -> f_299(v592:0, 1 + v919:0, v796:0, v919:0) :|: v595:0 > 1 && v597:0 > 0 && v592:0 > 1 && v919:0 > -1 && sum~cons_1~v919:0 = 1 + v919:0

----------------------------------------

(35) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(36)
Obligation:
Rules:
f_299(v592:0:0, v595:0:0, v597:0:0, sum~cons_1~v919:0:0) -> f_299(v592:0:0, 1 + v919:0:0, v796:0:0, v919:0:0) :|: v592:0:0 > 1 && v919:0:0 > -1 && v597:0:0 > 0 && v595:0:0 > 1 && sum~cons_1~v919:0:0 = 1 + v919:0:0

----------------------------------------

(37) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_299(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_299(v592:0:0, v595:0:0, v597:0:0, sum~cons_1~v919:0:0) -> f_299(v592:0:0, 1 + v919:0:0, v796:0:0, v919:0:0) :|: v592:0:0 > 1 && v919:0:0 > -1 && v597:0:0 > 0 && v595:0:0 > 1 && sum~cons_1~v919:0:0 = 1 + v919:0:0
The following rules are bounded:
f_299(v592:0:0, v595:0:0, v597:0:0, sum~cons_1~v919:0:0) -> f_299(v592:0:0, 1 + v919:0:0, v796:0:0, v919:0:0) :|: v592:0:0 > 1 && v919:0:0 > -1 && v597:0:0 > 0 && v595:0:0 > 1 && sum~cons_1~v919:0:0 = 1 + v919:0:0

----------------------------------------

(38)
YES

----------------------------------------

(39)
Obligation:
SCC
----------------------------------------

(40) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_272(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 4) -> f_275(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 2, 4) :|: 0 < v461 && 2 <= v458 && 2 <= v456
f_275(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 2, 4) -> f_279(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 2, 4) :|: 0 = 0
f_279(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 2, 4) -> f_283(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 2, 4) :|: TRUE
f_283(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 2, 4) -> f_287(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 2, 4) :|: 0 = 0
f_287(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 2, 4) -> f_291(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 2, 4) :|: 0 = 0
f_291(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 2, 4) -> f_294(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 2, 4) :|: 0 = 0
f_294(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 2, 4) -> f_298(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 2, 4) :|: TRUE
f_298(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 2, 4) -> f_300(v453, v454, v455, v456, v457, v461, 1, v619, v458, v462, v463, v464, 0, 3, 2, 4) :|: TRUE
f_300(v453, v454, v455, v456, v457, v461, 1, v619, v458, v462, v463, v464, 0, 3, 2, 4) -> f_302(v453, v454, v455, v456, v457, v461, 1, v619, v458, v462, v463, v464, 0, 3, 2, 4) :|: v619 != 0
f_302(v453, v454, v455, v456, v457, v461, 1, v619, v458, v462, v463, v464, 0, 3, 2, 4) -> f_306(v453, v454, v455, v456, v457, v461, 1, v619, v458, v462, v463, v464, 0, 3, 2, 4) :|: 0 = 0
f_306(v453, v454, v455, v456, v457, v461, 1, v619, v458, v462, v463, v464, 0, 3, 2, 4) -> f_310(v453, v454, v455, v456, v457, v461, 1, v619, v458, v462, v463, v464, 0, 3, 2, 4) :|: TRUE
f_310(v453, v454, v455, v456, v457, v461, 1, v619, v458, v462, v463, v464, 0, 3, 2, 4) -> f_314(v453, v454, v455, v456, v457, v461, 1, v619, v462, v463, v464, 0, 3, 2, 4) :|: 0 = 0
f_314(v453, v454, v455, v456, v457, v461, 1, v619, v462, v463, v464, 0, 3, 2, 4) -> f_318(v453, v454, v455, v456, v457, v461, 1, v619, v650, v462, v463, v464, 0, 3, 2, 4) :|: 1 + v650 = v461 && 0 <= v650
f_318(v453, v454, v455, v456, v457, v461, 1, v619, v650, v462, v463, v464, 0, 3, 2, 4) -> f_322(v453, v454, v455, v456, v457, v461, 1, v619, v650, v462, v463, v464, 0, 3, 2, 4) :|: TRUE
f_322(v453, v454, v455, v456, v457, v461, 1, v619, v650, v462, v463, v464, 0, 3, 2, 4) -> f_326(v453, v454, v455, v456, v457, v461, 1, v619, v650, v462, v463, v464, 0, 3, 2, 4) :|: TRUE
f_326(v453, v454, v455, v456, v457, v461, 1, v619, v650, v462, v463, v464, 0, 3, 2, 4) -> f_330(v453, v454, v455, v456, v457, v461, 1, v619, v650, v462, v463, v464, 0, 3, 2, 4) :|: TRUE
f_330(v453, v454, v455, v456, v457, v461, 1, v619, v650, v462, v463, v464, 0, 3, 2, 4) -> f_269(v453, v454, v455, v456, v457, v461, 1, v619, v650, v462, v463, v464, 0, 3, 4) :|: TRUE
f_269(v453, v454, v455, v456, v457, v458, 1, v460, v461, v462, v463, v464, 0, 3, 4) -> f_272(v453, v454, v455, v456, v457, v461, 1, v460, v458, v462, v463, v464, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_272(v453:0, v454:0, v455:0, v456:0, v457:0, 1 + v650:0, 1, v460:0, v458:0, v462:0, v463:0, v464:0, 0, 3, 4) -> f_272(v453:0, v454:0, v455:0, v456:0, v457:0, v650:0, 1, v619:0, 1 + v650:0, v462:0, v463:0, v464:0, 0, 3, 4) :|: v458:0 > 1 && v650:0 > -1 && v456:0 > 1 && v619:0 < 0
f_272(v453:0, v454:0, v455:0, v456:0, v457:0, 1 + v650:0, 1, v460:0, v458:0, v462:0, v463:0, v464:0, 0, 3, 4) -> f_272(v453:0, v454:0, v455:0, v456:0, v457:0, v650:0, 1, v619:0, 1 + v650:0, v462:0, v463:0, v464:0, 0, 3, 4) :|: v458:0 > 1 && v650:0 > -1 && v456:0 > 1 && v619:0 > 0
Filtered unneeded arguments:
   f_272(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_272(x4, x6, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_272(v456:0, sum~cons_1~v650:0, v458:0) -> f_272(v456:0, v650:0, 1 + v650:0) :|: v650:0 > -1 && v456:0 > 1 && v458:0 > 1 && sum~cons_1~v650:0 = 1 + v650:0

----------------------------------------

(41)
Obligation:
Rules:
f_272(v456:0, sum~cons_1~v650:0, v458:0) -> f_272(v456:0, v650:0, 1 + v650:0) :|: v650:0 > -1 && v456:0 > 1 && v458:0 > 1 && sum~cons_1~v650:0 = 1 + v650:0

----------------------------------------

(42) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(43)
Obligation:
Rules:
f_272(v456:0:0, sum~cons_1~v650:0:0, v458:0:0) -> f_272(v456:0:0, v650:0:0, 1 + v650:0:0) :|: v650:0:0 > -1 && v456:0:0 > 1 && v458:0:0 > 1 && sum~cons_1~v650:0:0 = 1 + v650:0:0

----------------------------------------

(44) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_272(x, x1, x2)] = x1

The following rules are decreasing:
f_272(v456:0:0, sum~cons_1~v650:0:0, v458:0:0) -> f_272(v456:0:0, v650:0:0, 1 + v650:0:0) :|: v650:0:0 > -1 && v456:0:0 > 1 && v458:0:0 > 1 && sum~cons_1~v650:0:0 = 1 + v650:0:0
The following rules are bounded:
f_272(v456:0:0, sum~cons_1~v650:0:0, v458:0:0) -> f_272(v456:0:0, v650:0:0, 1 + v650:0:0) :|: v650:0:0 > -1 && v456:0:0 > 1 && v458:0:0 > 1 && sum~cons_1~v650:0:0 = 1 + v650:0:0

----------------------------------------

(45)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
