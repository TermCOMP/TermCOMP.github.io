YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/CuTp7.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 54 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3032 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 55 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 10 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 52 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/CuTp7.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/CuTp7.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		%8 = alloca *i32, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%11 = alloca i8, numElementsLit: 4, align 16
		%12 = bitcast *i8 %11 to *i32
		store %12, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %8)
		%13 = alloca i8, numElementsLit: 4, align 16
		%14 = bitcast *i8 %13 to *i32
		store %14, %8
		%15 = load %4
		%16 = load %6
		store %15, %16
		%17 = load %5
		%18 = load %7
		store %17, %18
		%19 = load %8
		store 0, %19
		%20 = load %6
		%21 = load %20
		%22 = icmp sle %21 0
		br %22, %27, %23
	23:
		%24 = load %7
		%25 = load %24
		%26 = icmp sle %25 0
		br %26, %27, %33
	27:
		%28 = load %6
		%29 = load %28
		%30 = load %7
		%31 = load %30
		%32 = add i32 %29, %31
		store %32, %3
		br %69
	33:
		br %34
	34:
		%35 = load %6
		%36 = load %35
		%37 = icmp eq %36 0
		%38 = xor i1 %37, 1
		br %38, %39, %66
	39:
		%40 = load %6
		%41 = load %40
		%42 = load %7
		%43 = load %42
		%44 = icmp sgt %41 %43
		br %44, %45, %49
	45:
		%46 = load %7
		%47 = load %46
		%48 = load %6
		store %47, %48
		br %61
	49:
		%50 = load %6
		%51 = load %50
		%52 = icmp sle %51 0
		br %52, %53, %56
	53:
		%54 = load %6
		%55 = load %54
		store %55, %3
		br %69
	56:
		%57 = load %6
		%58 = load %57
		%59 = sub i32 %58, 1
		%60 = load %6
		store %59, %60
		br %61
	61:
		%62 = load %8
		%63 = load %62
		%64 = add i32 %63, 1
		%65 = load %8
		store %64, %65
		br %34
	66:
		%67 = load %8
		%68 = load %67
		store %68, %3
		br %69
	69:
		%70 = load %3
		ret %70

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 95
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 29 rulesP rules:
f_915(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1692, 1, v1694, v1695, v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_917(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1692, 1, v1695, v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_917(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1692, 1, v1695, v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_919(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1692, 1, v1695, v1721, v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: v1721 = 1 + v1695 && 2 <= v1721
f_919(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1692, 1, v1695, v1721, v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_921(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1692, 1, v1695, v1721, v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_921(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1692, 1, v1695, v1721, v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_923(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1692, 1, v1695, v1721, v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: TRUE
f_923(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1692, 1, v1695, v1721, v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_925(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1692, 1, v1695, v1721, v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: TRUE
f_925(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1692, 1, v1695, v1721, v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_927(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1692, 1, v1695, v1721, v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_927(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1692, 1, v1695, v1721, v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_929(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1692, v1695, v1721, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_929(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1692, v1695, v1721, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_932(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1692, v1695, v1721, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: v1696 != 0 && 2 <= v1692 && 3 <= v1680 && 2 <= v1681
f_932(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1692, v1695, v1721, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_935(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1692, v1695, v1721, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_935(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1692, v1695, v1721, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_938(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1692, v1695, v1721, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_938(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1692, v1695, v1721, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_941(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1692, v1695, v1721, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: TRUE
f_941(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1692, v1695, v1721, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_944(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1692, v1695, v1721, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_944(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1692, v1695, v1721, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_946(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_946(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_948(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_948(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_950(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_950(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_952(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_952(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_954(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: TRUE
f_954(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_955(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_955(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_956(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_956(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_957(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_957(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_958(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: TRUE
f_958(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_959(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_959(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1692, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_960(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_960(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_961(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1961, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 1 + v1961 = v1696 && 0 <= v1961
f_961(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1961, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_962(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1961, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
f_962(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1961, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_963(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1961, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: TRUE
f_963(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1961, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_964(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1961, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: TRUE
f_964(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1961, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_913(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1696, 1, v1695, v1721, v1961, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: TRUE
f_913(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1692, 1, v1694, v1695, v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) -> f_915(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690, 0, v1692, 1, v1694, v1695, v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706, v1707, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_915(v1680:0, v1681:0, v1682:0, v1683:0, v1684:0, v1685:0, v1686:0, v1687:0, v1688:0, v1689:0, v1690:0, 0, v1692:0, 1, v1694:0, v1695:0, 1 + v1961:0, v1697:0, v1698:0, v1699:0, v1700:0, v1701:0, v1702:0, v1703:0, v1704:0, v1705:0, v1706:0, v1707:0, 3, 7, 2, 4, 8) -> f_915(v1680:0, v1681:0, v1682:0, v1683:0, v1684:0, v1685:0, v1686:0, v1687:0, v1688:0, v1689:0, v1690:0, 0, 1 + v1961:0, 1, v1695:0, 1 + v1695:0, v1961:0, v1697:0, v1698:0, v1699:0, v1700:0, v1701:0, v1702:0, v1703:0, v1704:0, v1705:0, v1706:0, v1707:0, 3, 7, 2, 4, 8) :|: v1695:0 > 0 && v1692:0 > 1 && v1961:0 > -1 && v1680:0 > 2 && v1681:0 > 1
Filtered unneeded arguments:
   f_915(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) -> f_915(x1, x2, x13, x16, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_915(v1680:0, v1681:0, v1692:0, v1695:0, sum~cons_1~v1961:0) -> f_915(v1680:0, v1681:0, 1 + v1961:0, 1 + v1695:0, v1961:0) :|: v1692:0 > 1 && v1695:0 > 0 && v1961:0 > -1 && v1681:0 > 1 && v1680:0 > 2 && sum~cons_1~v1961:0 = 1 + v1961:0

----------------------------------------

(9)
Obligation:
Rules:
f_915(v1680:0, v1681:0, v1692:0, v1695:0, sum~cons_1~v1961:0) -> f_915(v1680:0, v1681:0, 1 + v1961:0, 1 + v1695:0, v1961:0) :|: v1692:0 > 1 && v1695:0 > 0 && v1961:0 > -1 && v1681:0 > 1 && v1680:0 > 2 && sum~cons_1~v1961:0 = 1 + v1961:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_915(v1680:0:0, v1681:0:0, v1692:0:0, v1695:0:0, sum~cons_1~v1961:0:0) -> f_915(v1680:0:0, v1681:0:0, 1 + v1961:0:0, 1 + v1695:0:0, v1961:0:0) :|: v1681:0:0 > 1 && v1680:0:0 > 2 && v1961:0:0 > -1 && v1695:0:0 > 0 && v1692:0:0 > 1 && sum~cons_1~v1961:0:0 = 1 + v1961:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_915(x, x1, x2, x3, x4)] = x4

The following rules are decreasing:
f_915(v1680:0:0, v1681:0:0, v1692:0:0, v1695:0:0, sum~cons_1~v1961:0:0) -> f_915(v1680:0:0, v1681:0:0, 1 + v1961:0:0, 1 + v1695:0:0, v1961:0:0) :|: v1681:0:0 > 1 && v1680:0:0 > 2 && v1961:0:0 > -1 && v1695:0:0 > 0 && v1692:0:0 > 1 && sum~cons_1~v1961:0:0 = 1 + v1961:0:0
The following rules are bounded:
f_915(v1680:0:0, v1681:0:0, v1692:0:0, v1695:0:0, sum~cons_1~v1961:0:0) -> f_915(v1680:0:0, v1681:0:0, 1 + v1961:0:0, 1 + v1695:0:0, v1961:0:0) :|: v1681:0:0 > 1 && v1680:0:0 > 2 && v1961:0:0 > -1 && v1695:0:0 > 0 && v1692:0:0 > 1 && sum~cons_1~v1961:0:0 = 1 + v1961:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 29 rulesP rules:
f_868(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1577, 1, v1579, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 4, 8) -> f_871(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 4, 8) :|: 0 = 0
f_871(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 4, 8) -> f_875(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: v1579 != 0 && 2 <= v1577 && 2 <= v1565 && 2 <= v1566
f_875(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_879(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_879(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_883(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_883(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_887(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: TRUE
f_887(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_890(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_890(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_893(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_893(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_896(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_896(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_899(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_899(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_902(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_902(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_905(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: TRUE
f_905(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_907(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_907(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_909(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_909(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_911(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_911(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_914(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: TRUE
f_914(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_916(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_916(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1577, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_918(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_918(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_920(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 1 + v1722 = v1579 && 0 <= v1722
f_920(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_922(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_922(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_924(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: TRUE
f_924(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_926(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: TRUE
f_926(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_928(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_928(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_930(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_930(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_933(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1581, v1781, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: v1781 = 1 + v1581 && 2 <= v1781
f_933(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1581, v1781, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_936(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1581, v1781, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: 0 = 0
f_936(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1581, v1781, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_939(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1581, v1781, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: TRUE
f_939(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1581, v1781, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_942(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1581, v1781, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) :|: TRUE
f_942(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1581, v1781, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 2, 4, 8) -> f_865(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1579, 1, v1722, v1581, v1781, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 4, 8) :|: TRUE
f_865(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1577, 1, v1579, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 4, 8) -> f_868(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575, 0, v1577, 1, v1579, v1580, v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, v1592, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_868(v1565:0, v1566:0, v1567:0, v1568:0, v1569:0, v1570:0, v1571:0, v1572:0, v1573:0, v1574:0, v1575:0, 0, v1577:0, 1, 1 + v1722:0, v1580:0, v1581:0, v1582:0, v1583:0, v1584:0, v1585:0, v1586:0, v1587:0, v1588:0, v1589:0, v1590:0, v1591:0, v1592:0, 3, 7, 4, 8) -> f_868(v1565:0, v1566:0, v1567:0, v1568:0, v1569:0, v1570:0, v1571:0, v1572:0, v1573:0, v1574:0, v1575:0, 0, 1 + v1722:0, 1, v1722:0, v1581:0, 1 + v1581:0, v1582:0, v1583:0, v1584:0, v1585:0, v1586:0, v1587:0, v1588:0, v1589:0, v1590:0, v1591:0, v1592:0, 3, 7, 4, 8) :|: v1577:0 > 1 && v1722:0 > -1 && v1565:0 > 1 && v1566:0 > 1 && v1581:0 > 0
Filtered unneeded arguments:
   f_868(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32) -> f_868(x1, x2, x13, x15, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_868(v1565:0, v1566:0, v1577:0, sum~cons_1~v1722:0, v1581:0) -> f_868(v1565:0, v1566:0, 1 + v1722:0, v1722:0, 1 + v1581:0) :|: v1722:0 > -1 && v1577:0 > 1 && v1565:0 > 1 && v1581:0 > 0 && v1566:0 > 1 && sum~cons_1~v1722:0 = 1 + v1722:0

----------------------------------------

(16)
Obligation:
Rules:
f_868(v1565:0, v1566:0, v1577:0, sum~cons_1~v1722:0, v1581:0) -> f_868(v1565:0, v1566:0, 1 + v1722:0, v1722:0, 1 + v1581:0) :|: v1722:0 > -1 && v1577:0 > 1 && v1565:0 > 1 && v1581:0 > 0 && v1566:0 > 1 && sum~cons_1~v1722:0 = 1 + v1722:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_868(v1565:0:0, v1566:0:0, v1577:0:0, sum~cons_1~v1722:0:0, v1581:0:0) -> f_868(v1565:0:0, v1566:0:0, 1 + v1722:0:0, v1722:0:0, 1 + v1581:0:0) :|: v1581:0:0 > 0 && v1566:0:0 > 1 && v1565:0:0 > 1 && v1577:0:0 > 1 && v1722:0:0 > -1 && sum~cons_1~v1722:0:0 = 1 + v1722:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_868(x, x1, x2, x3, x4)] = x3

The following rules are decreasing:
f_868(v1565:0:0, v1566:0:0, v1577:0:0, sum~cons_1~v1722:0:0, v1581:0:0) -> f_868(v1565:0:0, v1566:0:0, 1 + v1722:0:0, v1722:0:0, 1 + v1581:0:0) :|: v1581:0:0 > 0 && v1566:0:0 > 1 && v1565:0:0 > 1 && v1577:0:0 > 1 && v1722:0:0 > -1 && sum~cons_1~v1722:0:0 = 1 + v1722:0:0
The following rules are bounded:
f_868(v1565:0:0, v1566:0:0, v1577:0:0, sum~cons_1~v1722:0:0, v1581:0:0) -> f_868(v1565:0:0, v1566:0:0, 1 + v1722:0:0, v1722:0:0, 1 + v1581:0:0) :|: v1581:0:0 > 0 && v1566:0:0 > 1 && v1565:0:0 > 1 && v1577:0:0 > 1 && v1722:0:0 > -1 && sum~cons_1~v1722:0:0 = 1 + v1722:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
