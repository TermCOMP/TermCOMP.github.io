YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/7MewN.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 492 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 14 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/7MewN.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/7MewN.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %6
	6:
		%7 = load %3
		%8 = load %4
		%9 = icmp eq %7 %8
		br %9, %10, %13
	10:
		%11 = load %3
		%12 = icmp sgt %11 0
		br %13
	13:
		%14 = phi [0, %6], [%12, %10]
		br %14, %15, %27
	15:
		br %16
	16:
		%17 = load %4
		%18 = icmp sgt %17 0
		br %18, %19, %26
	19:
		%20 = load %3
		%21 = sub i32 %20, 1
		store %21, %3
		%22 = load %4
		%23 = sub i32 %22, 1
		store %23, %4
		%24 = load %5
		%25 = add i32 %24, 1
		store %25, %5
		br %16
	26:
		br %6
	27:
		%28 = load %5
		ret %28

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 46
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_318(v128, v129, v130, v131, 1, v134, v133, v135, v136, v137, v138, v139, v140, v141, 0, 3, 4) -> f_319(v128, v129, v130, v131, 1, v134, v133, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) :|: 0 < v134 && 2 <= v133 && 2 <= v128
f_319(v128, v129, v130, v131, 1, v134, v133, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) -> f_321(v128, v129, v130, v131, 1, v134, v133, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) :|: 0 = 0
f_321(v128, v129, v130, v131, 1, v134, v133, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) -> f_323(v128, v129, v130, v131, 1, v134, v133, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) :|: TRUE
f_323(v128, v129, v130, v131, 1, v134, v133, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) -> f_325(v128, v129, v130, v131, 1, v134, v133, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) :|: 0 = 0
f_325(v128, v129, v130, v131, 1, v134, v133, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) -> f_327(v128, v129, v130, v131, 1, v134, v143, v133, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) :|: 1 + v143 = v134 && 0 <= v143
f_327(v128, v129, v130, v131, 1, v134, v143, v133, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) -> f_329(v128, v129, v130, v131, 1, v134, v143, v133, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) :|: TRUE
f_329(v128, v129, v130, v131, 1, v134, v143, v133, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) -> f_331(v128, v129, v130, v131, 1, v134, v143, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) :|: 0 = 0
f_331(v128, v129, v130, v131, 1, v134, v143, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) -> f_333(v128, v129, v130, v131, 1, v134, v143, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) :|: 1 + v143 = v134
f_333(v128, v129, v130, v131, 1, v134, v143, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) -> f_335(v128, v129, v130, v131, 1, v134, v143, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) :|: TRUE
f_335(v128, v129, v130, v131, 1, v134, v143, v135, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) -> f_337(v128, v129, v130, v131, 1, v134, v143, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) :|: 0 = 0
f_337(v128, v129, v130, v131, 1, v134, v143, v136, v137, v138, v139, v140, v141, 0, 3, 2, 4) -> f_339(v128, v129, v130, v131, 1, v134, v143, v136, v146, v137, v138, v139, v140, v141, 0, 3, 2, 4) :|: v146 = 1 + v136 && 2 <= v146
f_339(v128, v129, v130, v131, 1, v134, v143, v136, v146, v137, v138, v139, v140, v141, 0, 3, 2, 4) -> f_341(v128, v129, v130, v131, 1, v134, v143, v136, v146, v137, v138, v139, v140, v141, 0, 3, 2, 4) :|: TRUE
f_341(v128, v129, v130, v131, 1, v134, v143, v136, v146, v137, v138, v139, v140, v141, 0, 3, 2, 4) -> f_343(v128, v129, v130, v131, 1, v134, v143, v136, v146, v137, v138, v139, v140, v141, 0, 3, 2, 4) :|: TRUE
f_343(v128, v129, v130, v131, 1, v134, v143, v136, v146, v137, v138, v139, v140, v141, 0, 3, 2, 4) -> f_317(v128, v129, v130, v131, 1, v134, v143, v136, v146, v137, v138, v139, v140, v141, 0, 3, 4) :|: TRUE
f_317(v128, v129, v130, v131, 1, v133, v134, v135, v136, v137, v138, v139, v140, v141, 0, 3, 4) -> f_318(v128, v129, v130, v131, 1, v134, v133, v135, v136, v137, v138, v139, v140, v141, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_318(v128:0, v129:0, v130:0, v131:0, 1, 1 + v143:0, v133:0, v135:0, v136:0, v137:0, v138:0, v139:0, v140:0, v141:0, 0, 3, 4) -> f_318(v128:0, v129:0, v130:0, v131:0, 1, v143:0, 1 + v143:0, v136:0, 1 + v136:0, v137:0, v138:0, v139:0, v140:0, v141:0, 0, 3, 4) :|: v133:0 > 1 && v143:0 > -1 && v128:0 > 1 && v136:0 > 0
Filtered unneeded arguments:
   f_318(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_318(x1, x6, x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_318(v128:0, sum~cons_1~v143:0, v133:0, v136:0) -> f_318(v128:0, v143:0, 1 + v143:0, 1 + v136:0) :|: v143:0 > -1 && v133:0 > 1 && v136:0 > 0 && v128:0 > 1 && sum~cons_1~v143:0 = 1 + v143:0

----------------------------------------

(8)
Obligation:
Rules:
f_318(v128:0, sum~cons_1~v143:0, v133:0, v136:0) -> f_318(v128:0, v143:0, 1 + v143:0, 1 + v136:0) :|: v143:0 > -1 && v133:0 > 1 && v136:0 > 0 && v128:0 > 1 && sum~cons_1~v143:0 = 1 + v143:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_318(v128:0:0, sum~cons_1~v143:0:0, v133:0:0, v136:0:0) -> f_318(v128:0:0, v143:0:0, 1 + v143:0:0, 1 + v136:0:0) :|: v136:0:0 > 0 && v128:0:0 > 1 && v133:0:0 > 1 && v143:0:0 > -1 && sum~cons_1~v143:0:0 = 1 + v143:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_318(x, x1, x2, x3)] = x1

The following rules are decreasing:
f_318(v128:0:0, sum~cons_1~v143:0:0, v133:0:0, v136:0:0) -> f_318(v128:0:0, v143:0:0, 1 + v143:0:0, 1 + v136:0:0) :|: v136:0:0 > 0 && v128:0:0 > 1 && v133:0:0 > 1 && v143:0:0 > -1 && sum~cons_1~v143:0:0 = 1 + v143:0:0
The following rules are bounded:
f_318(v128:0:0, sum~cons_1~v143:0:0, v133:0:0, v136:0:0) -> f_318(v128:0:0, v143:0:0, 1 + v143:0:0, 1 + v136:0:0) :|: v136:0:0 > 0 && v128:0:0 > 1 && v133:0:0 > 1 && v143:0:0 > -1 && sum~cons_1~v143:0:0 = 1 + v143:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
