YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/AF7O2.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 494 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 2 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 37 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 7 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 8 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/AF7O2.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/AF7O2.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %4
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = load %3
		%8 = icmp sgt %7 0
		br %8, %9, %31
	9:
		%10 = load %4
		%11 = load %3
		%12 = icmp sgt %10 %11
		br %12, %13, %31
	13:
		%14 = load %4
		store %14, %2
		br %15
	15:
		%16 = load %2
		%17 = icmp sgt %16 0
		br %17, %18, %30
	18:
		%19 = load %2
		%20 = load %3
		%21 = icmp slt %19 %20
		br %21, %22, %25
	22:
		%23 = load %2
		%24 = sub i32 %23, 1
		store %24, %2
		br %29
	25:
		%26 = load %2
		%27 = load %3
		%28 = sub i32 %26, %27
		store %28, %2
		br %29
	29:
		br %15
	30:
		br %31
	31:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_257(v211, v212, v213, v214, v215, v216, 1, v218, v219, v220, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_258(v211, v212, v213, v214, v215, v216, 1, v221, v218, v219, v220, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_258(v211, v212, v213, v214, v215, v216, 1, v221, v218, v219, v220, v222, v223, v224, v225, 0, 3, 2, 4) -> f_259(v211, v212, v213, v214, v215, v216, 1, v221, v218, v219, v220, v222, v223, v224, v225, 0, 3, 2, 5, 4) :|: 0 < v221 && 2 <= v218 && 2 <= v220 && 5 <= v219 && 3 <= v216
f_259(v211, v212, v213, v214, v215, v216, 1, v221, v218, v219, v220, v222, v223, v224, v225, 0, 3, 2, 5, 4) -> f_261(v211, v212, v213, v214, v215, v216, 1, v221, v218, v219, v220, v222, v223, v224, v225, 0, 3, 2, 5, 4) :|: 0 = 0
f_261(v211, v212, v213, v214, v215, v216, 1, v221, v218, v219, v220, v222, v223, v224, v225, 0, 3, 2, 5, 4) -> f_263(v211, v212, v213, v214, v215, v216, 1, v221, v218, v219, v220, v222, v223, v224, v225, 0, 3, 2, 5, 4) :|: TRUE
f_263(v211, v212, v213, v214, v215, v216, 1, v221, v218, v219, v220, v222, v223, v224, v225, 0, 3, 2, 5, 4) -> f_265(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v218, v222, v223, v224, v225, 0, 3, 2, 5, 4) :|: 0 = 0
f_265(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v218, v222, v223, v224, v225, 0, 3, 2, 5, 4) -> f_267(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v218, v222, v223, v224, v225, 0, 3, 2, 5, 4) :|: 0 = 0
f_267(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v218, v222, v223, v224, v225, 0, 3, 2, 5, 4) -> f_268(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v218, v222, v223, v224, v225, 0, 3, 2, 5, 4) :|: 0 = 0
f_268(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v218, v222, v223, v224, v225, 0, 3, 2, 5, 4) -> f_269(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v218, v222, v223, v224, v225, 0, 3, 2, 5, 4) :|: TRUE
f_269(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v218, v222, v223, v224, v225, 0, 3, 2, 5, 4) -> f_270(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v222, v223, v224, v225, 0, 3, 2, 5, 4) :|: 0 = 0
f_270(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v222, v223, v224, v225, 0, 3, 2, 5, 4) -> f_271(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v270, v222, v223, v224, v225, 0, 3, 2, 5, 4) :|: 1 + v270 = v221 && 0 <= v270
f_271(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v270, v222, v223, v224, v225, 0, 3, 2, 5, 4) -> f_272(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v270, v222, v223, v224, v225, 0, 3, 2, 5, 4) :|: TRUE
f_272(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v270, v222, v223, v224, v225, 0, 3, 2, 5, 4) -> f_273(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v270, v222, v223, v224, v225, 0, 3, 2, 5, 4) :|: TRUE
f_273(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v270, v222, v223, v224, v225, 0, 3, 2, 5, 4) -> f_256(v211, v212, v213, v214, v215, v216, 1, v221, v219, v220, v270, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_256(v211, v212, v213, v214, v215, v216, 1, v218, v219, v220, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_257(v211, v212, v213, v214, v215, v216, 1, v218, v219, v220, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_257(v211:0, v212:0, v213:0, v214:0, v215:0, v216:0, 1, v218:0, v219:0, v220:0, 1 + v270:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 4) -> f_257(v211:0, v212:0, v213:0, v214:0, v215:0, v216:0, 1, 1 + v270:0, v219:0, v220:0, v270:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 4) :|: v218:0 > 1 && v270:0 > -1 && v220:0 > 1 && v219:0 > 4 && v216:0 > 2
Filtered unneeded arguments:
   f_257(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_257(x6, x8, x9, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_257(v216:0, v218:0, v219:0, v220:0, sum~cons_1~v270:0) -> f_257(v216:0, 1 + v270:0, v219:0, v220:0, v270:0) :|: v270:0 > -1 && v218:0 > 1 && v220:0 > 1 && v216:0 > 2 && v219:0 > 4 && sum~cons_1~v270:0 = 1 + v270:0

----------------------------------------

(9)
Obligation:
Rules:
f_257(v216:0, v218:0, v219:0, v220:0, sum~cons_1~v270:0) -> f_257(v216:0, 1 + v270:0, v219:0, v220:0, v270:0) :|: v270:0 > -1 && v218:0 > 1 && v220:0 > 1 && v216:0 > 2 && v219:0 > 4 && sum~cons_1~v270:0 = 1 + v270:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_257(v216:0:0, v218:0:0, v219:0:0, v220:0:0, sum~cons_1~v270:0:0) -> f_257(v216:0:0, 1 + v270:0:0, v219:0:0, v220:0:0, v270:0:0) :|: v216:0:0 > 2 && v219:0:0 > 4 && v220:0:0 > 1 && v218:0:0 > 1 && v270:0:0 > -1 && sum~cons_1~v270:0:0 = 1 + v270:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_257(x, x1, x2, x3, x4)] = x4

The following rules are decreasing:
f_257(v216:0:0, v218:0:0, v219:0:0, v220:0:0, sum~cons_1~v270:0:0) -> f_257(v216:0:0, 1 + v270:0:0, v219:0:0, v220:0:0, v270:0:0) :|: v216:0:0 > 2 && v219:0:0 > 4 && v220:0:0 > 1 && v218:0:0 > 1 && v270:0:0 > -1 && sum~cons_1~v270:0:0 = 1 + v270:0:0
The following rules are bounded:
f_257(v216:0:0, v218:0:0, v219:0:0, v220:0:0, sum~cons_1~v270:0:0) -> f_257(v216:0:0, 1 + v270:0:0, v219:0:0, v220:0:0, v270:0:0) :|: v216:0:0 > 2 && v219:0:0 > 4 && v220:0:0 > 1 && v218:0:0 > 1 && v270:0:0 > -1 && sum~cons_1~v270:0:0 = 1 + v270:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_195(v32, v33, v34, v35, v36, v37, 1, v41, v39, 0, v42, v43, v44, v45, 3, 2, 4) -> f_196(v32, v33, v34, v35, v36, v37, 1, v41, v39, 0, v42, v43, v44, v45, 3, 2, 4) :|: 0 < v41 && 2 <= v39
f_196(v32, v33, v34, v35, v36, v37, 1, v41, v39, 0, v42, v43, v44, v45, 3, 2, 4) -> f_198(v32, v33, v34, v35, v36, v37, 1, v41, v39, 0, v42, v43, v44, v45, 3, 2, 4) :|: 0 = 0
f_198(v32, v33, v34, v35, v36, v37, 1, v41, v39, 0, v42, v43, v44, v45, 3, 2, 4) -> f_200(v32, v33, v34, v35, v36, v37, 1, v41, v39, 0, v42, v43, v44, v45, 3, 2, 4) :|: TRUE
f_200(v32, v33, v34, v35, v36, v37, 1, v41, v39, 0, v42, v43, v44, v45, 3, 2, 4) -> f_202(v32, v33, v34, v35, v36, v37, 1, v41, 0, v39, v42, v43, v44, v45, 3, 2, 4) :|: 0 = 0
f_202(v32, v33, v34, v35, v36, v37, 1, v41, 0, v39, v42, v43, v44, v45, 3, 2, 4) -> f_204(v32, v33, v34, v35, v36, v37, 1, v41, 0, v39, v42, v43, v44, v45, 3, 2, 4) :|: 0 = 0
f_204(v32, v33, v34, v35, v36, v37, 1, v41, 0, v39, v42, v43, v44, v45, 3, 2, 4) -> f_206(v32, v33, v34, v35, v36, v37, 1, v41, 0, v39, v42, v43, v44, v45, 3, 2, 4) :|: v37 <= v41
f_206(v32, v33, v34, v35, v36, v37, 1, v41, 0, v39, v42, v43, v44, v45, 3, 2, 4) -> f_208(v32, v33, v34, v35, v36, v37, 1, v41, 0, v39, v42, v43, v44, v45, 3, 2, 4) :|: 0 = 0
f_208(v32, v33, v34, v35, v36, v37, 1, v41, 0, v39, v42, v43, v44, v45, 3, 2, 4) -> f_210(v32, v33, v34, v35, v36, v37, 1, v41, 0, v39, v42, v43, v44, v45, 3, 2, 4) :|: TRUE
f_210(v32, v33, v34, v35, v36, v37, 1, v41, 0, v39, v42, v43, v44, v45, 3, 2, 4) -> f_212(v32, v33, v34, v35, v36, v37, 1, v41, 0, v42, v43, v44, v45, 3, 2, 4) :|: 0 = 0
f_212(v32, v33, v34, v35, v36, v37, 1, v41, 0, v42, v43, v44, v45, 3, 2, 4) -> f_214(v32, v33, v34, v35, v36, v37, 1, v41, 0, v42, v43, v44, v45, 3, 2, 4) :|: 0 = 0
f_214(v32, v33, v34, v35, v36, v37, 1, v41, 0, v42, v43, v44, v45, 3, 2, 4) -> f_216(v32, v33, v34, v35, v36, v37, 1, v41, 0, v63, v42, v43, v44, v45, 3, 2, 4) :|: v63 + v37 = v41 && 0 <= v63
f_216(v32, v33, v34, v35, v36, v37, 1, v41, 0, v63, v42, v43, v44, v45, 3, 2, 4) -> f_218(v32, v33, v34, v35, v36, v37, 1, v41, 0, v63, v42, v43, v44, v45, 3, 2, 4) :|: TRUE
f_218(v32, v33, v34, v35, v36, v37, 1, v41, 0, v63, v42, v43, v44, v45, 3, 2, 4) -> f_220(v32, v33, v34, v35, v36, v37, 1, v41, 0, v63, v42, v43, v44, v45, 3, 2, 4) :|: TRUE
f_220(v32, v33, v34, v35, v36, v37, 1, v41, 0, v63, v42, v43, v44, v45, 3, 2, 4) -> f_222(v32, v33, v34, v35, v36, v37, 1, v41, 0, v63, v42, v43, v44, v45, 3, 2, 4) :|: TRUE
f_222(v32, v33, v34, v35, v36, v37, 1, v41, 0, v63, v42, v43, v44, v45, 3, 2, 4) -> f_194(v32, v33, v34, v35, v36, v37, 1, v41, 0, v63, v42, v43, v44, v45, 3, 2, 4) :|: 1 <= v32 && 1 <= v33 && 1 <= v34 && 1 <= v35 && 2 <= v36 && 1 <= v37 && 1 <= v41 && 0 <= v63 && 4 <= v42 && 4 <= v43 && 4 <= v44 && 4 <= v45 && v32 <= v42 && v33 <= v43 && v34 <= v44 && v35 <= v45
f_194(v32, v33, v34, v35, v36, v37, 1, v39, 0, v41, v42, v43, v44, v45, 3, 2, 4) -> f_195(v32, v33, v34, v35, v36, v37, 1, v41, v39, 0, v42, v43, v44, v45, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_195(v32:0, v33:0, v34:0, v35:0, v36:0, v37:0, 1, v63:0 + v37:0, v39:0, 0, v42:0, v43:0, v44:0, v45:0, 3, 2, 4) -> f_195(v32:0, v33:0, v34:0, v35:0, v36:0, v37:0, 1, v63:0, v63:0 + v37:0, 0, v42:0, v43:0, v44:0, v45:0, 3, 2, 4) :|: v33:0 > 0 && v32:0 > 0 && v34:0 > 0 && v39:0 > 1 && v63:0 + v37:0 > 0 && v35:0 > 0 && v36:0 > 1 && v37:0 > 0 && v63:0 > -1 && v63:0 + v37:0 >= v37:0 && v42:0 > 3 && v43:0 > 3 && v44:0 > 3 && v45:0 > 3 && v42:0 >= v32:0 && v43:0 >= v33:0 && v45:0 >= v35:0 && v44:0 >= v34:0
Filtered unneeded arguments:
   f_195(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_195(x1, x2, x3, x4, x5, x6, x8, x9, x11, x12, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_195(v32:0, v33:0, v34:0, v35:0, v36:0, v37:0, sum~v63:0~v37:0, v39:0, v42:0, v43:0, v44:0, v45:0) -> f_195(v32:0, v33:0, v34:0, v35:0, v36:0, v37:0, v63:0, v63:0 + v37:0, v42:0, v43:0, v44:0, v45:0) :|: v32:0 > 0 && v33:0 > 0 && v34:0 > 0 && v39:0 > 1 && v63:0 + v37:0 > 0 && v35:0 > 0 && v36:0 > 1 && v37:0 > 0 && v63:0 > -1 && v63:0 + v37:0 >= v37:0 && v42:0 > 3 && v43:0 > 3 && v44:0 > 3 && v45:0 > 3 && v42:0 >= v32:0 && v43:0 >= v33:0 && v44:0 >= v34:0 && v45:0 >= v35:0 && sum~v63:0~v37:0 = v63:0 + v37:0

----------------------------------------

(16)
Obligation:
Rules:
f_195(v32:0, v33:0, v34:0, v35:0, v36:0, v37:0, sum~v63:0~v37:0, v39:0, v42:0, v43:0, v44:0, v45:0) -> f_195(v32:0, v33:0, v34:0, v35:0, v36:0, v37:0, v63:0, v63:0 + v37:0, v42:0, v43:0, v44:0, v45:0) :|: v32:0 > 0 && v33:0 > 0 && v34:0 > 0 && v39:0 > 1 && v63:0 + v37:0 > 0 && v35:0 > 0 && v36:0 > 1 && v37:0 > 0 && v63:0 > -1 && v63:0 + v37:0 >= v37:0 && v42:0 > 3 && v43:0 > 3 && v44:0 > 3 && v45:0 > 3 && v42:0 >= v32:0 && v43:0 >= v33:0 && v44:0 >= v34:0 && v45:0 >= v35:0 && sum~v63:0~v37:0 = v63:0 + v37:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_195(v32:0:0, v33:0:0, v34:0:0, v35:0:0, v36:0:0, v37:0:0, sum~v63:0:0~v37:0:0, v39:0:0, v42:0:0, v43:0:0, v44:0:0, v45:0:0) -> f_195(v32:0:0, v33:0:0, v34:0:0, v35:0:0, v36:0:0, v37:0:0, v63:0:0, v63:0:0 + v37:0:0, v42:0:0, v43:0:0, v44:0:0, v45:0:0) :|: v44:0:0 >= v34:0:0 && v45:0:0 >= v35:0:0 && v43:0:0 >= v33:0:0 && v42:0:0 >= v32:0:0 && v45:0:0 > 3 && v44:0:0 > 3 && v43:0:0 > 3 && v42:0:0 > 3 && v63:0:0 + v37:0:0 >= v37:0:0 && v63:0:0 > -1 && v37:0:0 > 0 && v36:0:0 > 1 && v35:0:0 > 0 && v63:0:0 + v37:0:0 > 0 && v39:0:0 > 1 && v34:0:0 > 0 && v33:0:0 > 0 && v32:0:0 > 0 && sum~v63:0:0~v37:0:0 = v63:0:0 + v37:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_195 ] = f_195_7

The following rules are decreasing:
f_195(v32:0:0, v33:0:0, v34:0:0, v35:0:0, v36:0:0, v37:0:0, sum~v63:0:0~v37:0:0, v39:0:0, v42:0:0, v43:0:0, v44:0:0, v45:0:0) -> f_195(v32:0:0, v33:0:0, v34:0:0, v35:0:0, v36:0:0, v37:0:0, v63:0:0, v63:0:0 + v37:0:0, v42:0:0, v43:0:0, v44:0:0, v45:0:0) :|: v44:0:0 >= v34:0:0 && v45:0:0 >= v35:0:0 && v43:0:0 >= v33:0:0 && v42:0:0 >= v32:0:0 && v45:0:0 > 3 && v44:0:0 > 3 && v43:0:0 > 3 && v42:0:0 > 3 && v63:0:0 + v37:0:0 >= v37:0:0 && v63:0:0 > -1 && v37:0:0 > 0 && v36:0:0 > 1 && v35:0:0 > 0 && v63:0:0 + v37:0:0 > 0 && v39:0:0 > 1 && v34:0:0 > 0 && v33:0:0 > 0 && v32:0:0 > 0 && sum~v63:0:0~v37:0:0 = v63:0:0 + v37:0:0

The following rules are bounded:
f_195(v32:0:0, v33:0:0, v34:0:0, v35:0:0, v36:0:0, v37:0:0, sum~v63:0:0~v37:0:0, v39:0:0, v42:0:0, v43:0:0, v44:0:0, v45:0:0) -> f_195(v32:0:0, v33:0:0, v34:0:0, v35:0:0, v36:0:0, v37:0:0, v63:0:0, v63:0:0 + v37:0:0, v42:0:0, v43:0:0, v44:0:0, v45:0:0) :|: v44:0:0 >= v34:0:0 && v45:0:0 >= v35:0:0 && v43:0:0 >= v33:0:0 && v42:0:0 >= v32:0:0 && v45:0:0 > 3 && v44:0:0 > 3 && v43:0:0 > 3 && v42:0:0 > 3 && v63:0:0 + v37:0:0 >= v37:0:0 && v63:0:0 > -1 && v37:0:0 > 0 && v36:0:0 > 1 && v35:0:0 > 0 && v63:0:0 + v37:0:0 > 0 && v39:0:0 > 1 && v34:0:0 > 0 && v33:0:0 > 0 && v32:0:0 > 0 && sum~v63:0:0~v37:0:0 = v63:0:0 + v37:0:0


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
