YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/HElny.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 46 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 643 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 68 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/HElny.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/HElny.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_String" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 12
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i8, align 8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %1
		%4 = load %1
		%5 = icmp slt %4 1
		br %5, %6, %7
	6:
		store 1, %1
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		%8 = load %1
		%9 = sext i32 %8 to i64
		%10 = mul i64 %9, 1
		%11 = call noalias *i8 @malloc(i64 %10)
		store %11, %2
		%12 = load %2
		%13 = load %1
		%14 = sub i32 %13, 1
		%15 = sext i32 %14 to i64
		%16 = getelementptr %12, %15
		store 0, %16
		%17 = load %2
		ret %17

*BasicFunctionTypename: "cstrcmp" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 38
	0:
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		br %7
	7:
		%8 = load %3
		%9 = load %8
		%10 = sext i8 %9 to i32
		%11 = icmp ne %10 0
		br %11, %12, %20
	12:
		%13 = load %3
		%14 = load %13
		%15 = sext i8 %14 to i32
		%16 = load %4
		%17 = load %16
		%18 = sext i8 %17 to i32
		%19 = icmp eq %15 %18
		br %20
	20:
		%21 = phi [0, %7], [%19, %12]
		br %21, %22, %27
	22:
		%23 = load %3
		%24 = getelementptr %23, 1
		store %24, %3
		%25 = load %4
		%26 = getelementptr %25, 1
		store %26, %4
		br %7
	27:
		%28 = load %3
		%29 = load %28
		store %29, %5
		%30 = load %4
		%31 = load %30
		store %31, %6
		%32 = load %5
		%33 = zext i8 %32 to i32
		%34 = load %6
		%35 = zext i8 %34 to i32
		%36 = icmp slt %33 %35
		br %36, %37, %38
	37:
		br %45
	38:
		%39 = load %5
		%40 = zext i8 %39 to i32
		%41 = load %6
		%42 = zext i8 %41 to i32
		%43 = icmp sgt %40 %42
		%44 = zext i1 %43 to i32
		br %45
	45:
		%46 = phi [-1, %37], [%44, %38]
		ret %46

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 81
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call *i8 @__VERIFIER_nondet_String()
		%3 = call *i8 @__VERIFIER_nondet_String()
		%4 = call i32 @cstrcmp(*i8 %2, *i8 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_490(v466, v467, v468, v469, v470, v471, v476, v473, 1, v472, v475, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) -> f_491(v466, v467, v468, v469, v470, v471, v476, v486, v473, 1, v472, v475, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) :|: TRUE
f_491(v466, v467, v468, v469, v470, v471, v476, v486, v473, 1, v472, v475, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) -> f_492(v466, v467, v468, v469, v470, v471, v476, v486, 1, v472, v473, v475, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_492(v466, v467, v468, v469, v470, v471, v476, v486, 1, v472, v473, v475, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) -> f_493(v466, v467, v468, v469, v470, v471, v476, v486, 1, v472, v473, v475, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) :|: v486 != 0 && v476 < v480 && 3 <= v480
f_493(v466, v467, v468, v469, v470, v471, v476, v486, 1, v472, v473, v475, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) -> f_495(v466, v467, v468, v469, v470, v471, v476, v486, 1, v472, v473, v475, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_495(v466, v467, v468, v469, v470, v471, v476, v486, 1, v472, v473, v475, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) -> f_497(v466, v467, v468, v469, v470, v471, v476, v486, 1, v472, v473, v475, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) :|: TRUE
f_497(v466, v467, v468, v469, v470, v471, v476, v486, 1, v472, v473, v475, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) -> f_499(v466, v467, v468, v469, v470, v471, v476, v486, 1, v473, v475, v472, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_499(v466, v467, v468, v469, v470, v471, v476, v486, 1, v473, v475, v472, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) -> f_501(v466, v467, v468, v469, v470, v471, v476, v486, 1, v473, v475, v472, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_501(v466, v467, v468, v469, v470, v471, v476, v486, 1, v473, v475, v472, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) -> f_503(v466, v467, v468, v469, v470, v471, v476, v486, 1, v475, v473, v472, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_503(v466, v467, v468, v469, v470, v471, v476, v486, 1, v475, v473, v472, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) -> f_505(v466, v467, v468, v469, v470, v471, v476, v486, 1, v477, v473, v472, v475, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_505(v466, v467, v468, v469, v470, v471, v476, v486, 1, v477, v473, v472, v475, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) -> f_507(v466, v467, v468, v469, v470, v471, v476, v486, 1, v477, v509, v473, v472, v475, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) :|: TRUE
f_507(v466, v467, v468, v469, v470, v471, v476, v486, 1, v477, v509, v473, v472, v475, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) -> f_509(v466, v467, v468, v469, v470, v471, v476, v486, 1, v477, v509, v472, v475, v478, v479, v480, v481, v482, v483, v484, v473, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_509(v466, v467, v468, v469, v470, v471, v476, v486, 1, v477, v509, v472, v475, v478, v479, v480, v481, v482, v483, v484, v473, 0, 3, 7, 2, 4, 8) -> f_511(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v472, v475, v478, v479, v480, v481, v482, v483, v484, v473, 0, 3, 7, 2, 4, 8) :|: v486 = v509 && v477 < v481 && 3 <= v481
f_511(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v472, v475, v478, v479, v480, v481, v482, v483, v484, v473, 0, 3, 7, 2, 4, 8) -> f_514(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v472, v475, v478, v479, v480, v481, v482, v483, v484, v473, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_514(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v472, v475, v478, v479, v480, v481, v482, v483, v484, v473, 0, 3, 7, 2, 4, 8) -> f_517(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v472, v475, v478, v479, v480, v481, v482, v483, v484, v473, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_517(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v472, v475, v478, v479, v480, v481, v482, v483, v484, v473, 0, 3, 7, 2, 4, 8) -> f_520(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v472, v475, v478, v479, v480, v481, v482, v483, v484, v473, 0, 3, 7, 2, 4, 8) :|: TRUE
f_520(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v472, v475, v478, v479, v480, v481, v482, v483, v484, v473, 0, 3, 7, 2, 4, 8) -> f_523(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v475, v478, v479, v480, v481, v482, v483, v484, v472, v473, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_523(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v475, v478, v479, v480, v481, v482, v483, v484, v472, v473, 0, 3, 7, 2, 4, 8) -> f_526(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v581, v475, v478, v479, v480, v481, v482, v483, v484, v472, v473, 0, 3, 7, 2, 4, 8) :|: v581 = 1 + v476 && 3 <= v581
f_526(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v581, v475, v478, v479, v480, v481, v482, v483, v484, v472, v473, 0, 3, 7, 2, 4, 8) -> f_530(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v581, v475, v478, v479, v480, v481, v482, v483, v484, v472, v473, 0, 3, 7, 2, 4, 8) :|: TRUE
f_530(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v581, v475, v478, v479, v480, v481, v482, v483, v484, v472, v473, 0, 3, 7, 2, 4, 8) -> f_534(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v581, v478, v479, v480, v481, v482, v483, v484, v472, v473, v475, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_534(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v581, v478, v479, v480, v481, v482, v483, v484, v472, v473, v475, 0, 3, 7, 2, 4, 8) -> f_538(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v581, v598, v478, v479, v480, v481, v482, v483, v484, v472, v473, v475, 0, 3, 7, 2, 4, 8) :|: v598 = 1 + v477 && 3 <= v598
f_538(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v581, v598, v478, v479, v480, v481, v482, v483, v484, v472, v473, v475, 0, 3, 7, 2, 4, 8) -> f_542(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v581, v598, v478, v479, v480, v481, v482, v483, v484, v472, v473, v475, 0, 3, 7, 2, 4, 8) :|: TRUE
f_542(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v581, v598, v478, v479, v480, v481, v482, v483, v484, v472, v473, v475, 0, 3, 7, 2, 4, 8) -> f_546(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v581, v598, v478, v479, v480, v481, v482, v483, v484, v472, v473, v475, 0, 3, 7, 2, 4, 8) :|: TRUE
f_546(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v581, v598, v478, v479, v480, v481, v482, v483, v484, v472, v473, v475, 0, 3, 7, 2, 4, 8) -> f_489(v466, v467, v468, v469, v470, v471, v476, v509, 1, v477, v581, v598, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) :|: TRUE
f_489(v466, v467, v468, v469, v470, v471, v472, v473, 1, v475, v476, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) -> f_490(v466, v467, v468, v469, v470, v471, v476, v473, 1, v472, v475, v477, v478, v479, v480, v481, v482, v483, v484, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_490(v466:0, v467:0, v468:0, v469:0, v470:0, v471:0, v476:0, v473:0, 1, v472:0, v475:0, v477:0, v478:0, v479:0, v480:0, v481:0, v482:0, v483:0, v484:0, 0, 3, 7, 2, 4, 8) -> f_490(v466:0, v467:0, v468:0, v469:0, v470:0, v471:0, 1 + v476:0, v486:0, 1, v476:0, v477:0, 1 + v477:0, v478:0, v479:0, v480:0, v481:0, v482:0, v483:0, v484:0, 0, 3, 7, 2, 4, 8) :|: v480:0 > v476:0 && v486:0 < 0 && v480:0 > 2 && v481:0 > v477:0 && v481:0 > 2 && v477:0 > 1 && v476:0 > 1
f_490(v466:0, v467:0, v468:0, v469:0, v470:0, v471:0, v476:0, v473:0, 1, v472:0, v475:0, v477:0, v478:0, v479:0, v480:0, v481:0, v482:0, v483:0, v484:0, 0, 3, 7, 2, 4, 8) -> f_490(v466:0, v467:0, v468:0, v469:0, v470:0, v471:0, 1 + v476:0, v486:0, 1, v476:0, v477:0, 1 + v477:0, v478:0, v479:0, v480:0, v481:0, v482:0, v483:0, v484:0, 0, 3, 7, 2, 4, 8) :|: v480:0 > v476:0 && v486:0 > 0 && v480:0 > 2 && v481:0 > v477:0 && v481:0 > 2 && v477:0 > 1 && v476:0 > 1
Filtered unneeded arguments:
   f_490(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_490(x7, x12, x15, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_490(v476:0, v477:0, v480:0, v481:0) -> f_490(1 + v476:0, 1 + v477:0, v480:0, v481:0) :|: v480:0 > 2 && v480:0 > v476:0 && v481:0 > v477:0 && v481:0 > 2 && v476:0 > 1 && v477:0 > 1

----------------------------------------

(8)
Obligation:
Rules:
f_490(v476:0, v477:0, v480:0, v481:0) -> f_490(1 + v476:0, 1 + v477:0, v480:0, v481:0) :|: v480:0 > 2 && v480:0 > v476:0 && v481:0 > v477:0 && v481:0 > 2 && v476:0 > 1 && v477:0 > 1

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_490(v476:0:0, v477:0:0, v480:0:0, v481:0:0) -> f_490(1 + v476:0:0, 1 + v477:0:0, v480:0:0, v481:0:0) :|: v476:0:0 > 1 && v477:0:0 > 1 && v481:0:0 > 2 && v481:0:0 > v477:0:0 && v480:0:0 > v476:0:0 && v480:0:0 > 2

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_490(x, x1, x2, x3)] = -1 - x + x2

The following rules are decreasing:
f_490(v476:0:0, v477:0:0, v480:0:0, v481:0:0) -> f_490(1 + v476:0:0, 1 + v477:0:0, v480:0:0, v481:0:0) :|: v476:0:0 > 1 && v477:0:0 > 1 && v481:0:0 > 2 && v481:0:0 > v477:0:0 && v480:0:0 > v476:0:0 && v480:0:0 > 2
The following rules are bounded:
f_490(v476:0:0, v477:0:0, v480:0:0, v481:0:0) -> f_490(1 + v476:0:0, 1 + v477:0:0, v480:0:0, v481:0:0) :|: v476:0:0 > 1 && v477:0:0 > 1 && v481:0:0 > 2 && v481:0:0 > v477:0:0 && v480:0:0 > v476:0:0 && v480:0:0 > 2

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
