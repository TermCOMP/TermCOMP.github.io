YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/7zVQE.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1185 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 52 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/7zVQE.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/7zVQE.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		%9 = call i32 @__VERIFIER_nondet_int()
		store %9, %5
		%10 = call i32 @__VERIFIER_nondet_int()
		store %10, %6
		store 0, %2
		br %11
	11:
		%12 = load %3
		%13 = icmp sle %12 100
		br %13, %14, %18
	14:
		%15 = load %4
		%16 = load %5
		%17 = icmp sle %15 %16
		br %18
	18:
		%19 = phi [0, %11], [%17, %14]
		br %19, %20, %29
	20:
		%21 = load %3
		store %21, %6
		%22 = load %4
		store %22, %3
		%23 = load %6
		%24 = add i32 %23, 1
		store %24, %4
		%25 = load %5
		%26 = sub i32 %25, 1
		store %26, %5
		%27 = load %2
		%28 = add i32 %27, 1
		store %28, %2
		br %11
	29:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 25 rulesP rules:
f_362(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v821, v818, v822, v823, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_363(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v821, v818, v822, v823, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: v820 <= 100
f_363(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v821, v818, v822, v823, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_365(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v821, v818, v822, v823, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: 0 = 0
f_365(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v821, v818, v822, v823, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_367(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v821, v818, v822, v823, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: TRUE
f_367(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v821, v818, v822, v823, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_369(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v821, v818, v823, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: 0 = 0
f_369(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v821, v818, v823, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_371(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: 0 = 0
f_371(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_372(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: v822 <= v823
f_372(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_374(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: 0 = 0
f_374(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_376(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: 0 = 0
f_376(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_378(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: TRUE
f_378(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_380(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: 0 = 0
f_380(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_381(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: TRUE
f_381(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_382(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: 0 = 0
f_382(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_383(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: TRUE
f_383(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v818, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_384(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: 0 = 0
f_384(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_385(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: v958 = 1 + v820 && v958 <= 101
f_385(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_386(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: TRUE
f_386(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v821, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_387(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: 0 = 0
f_387(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_388(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v960, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: 1 + v960 = v823
f_388(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v960, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_389(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v960, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: TRUE
f_389(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v960, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_390(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v960, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: 0 = 0
f_390(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v960, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_391(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v960, v825, v962, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4, 2) :|: v962 = 1 + v825 && 2 <= v962
f_391(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v960, v825, v962, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4, 2) -> f_392(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v960, v825, v962, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4, 2) :|: TRUE
f_392(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v960, v825, v962, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4, 2) -> f_393(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v960, v825, v962, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4, 2) :|: TRUE
f_393(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v960, v825, v962, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4, 2) -> f_361(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v822, v823, v958, v960, v825, v962, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: TRUE
f_361(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v818, 1, v820, v821, v822, v823, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) -> f_362(v808, v809, v810, v811, v812, v813, v814, v815, v816, v817, v820, 1, v821, v818, v822, v823, v824, v825, v826, v827, v828, v829, v830, v831, 0, 3, 100, 101, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_362(v808:0, v809:0, v810:0, v811:0, v812:0, v813:0, v814:0, v815:0, v816:0, v817:0, v820:0, 1, v821:0, v818:0, v822:0, 1 + v960:0, v824:0, v825:0, v826:0, v827:0, v828:0, v829:0, v830:0, v831:0, 0, 3, 100, 101, 4) -> f_362(v808:0, v809:0, v810:0, v811:0, v812:0, v813:0, v814:0, v815:0, v816:0, v817:0, v822:0, 1, 1 + v960:0, v820:0, 1 + v820:0, v960:0, v825:0, 1 + v825:0, v826:0, v827:0, v828:0, v829:0, v830:0, v831:0, 0, 3, 100, 101, 4) :|: v820:0 < 101 && v822:0 <= 1 + v960:0 && v825:0 > 0
Filtered unneeded arguments:
   f_362(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_362(x11, x15, x16, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_362(v820:0, v822:0, sum~cons_1~v960:0, v825:0) -> f_362(v822:0, 1 + v820:0, v960:0, 1 + v825:0) :|: v822:0 <= 1 + v960:0 && v825:0 > 0 && v820:0 < 101 && sum~cons_1~v960:0 = 1 + v960:0

----------------------------------------

(8)
Obligation:
Rules:
f_362(v820:0, v822:0, sum~cons_1~v960:0, v825:0) -> f_362(v822:0, 1 + v820:0, v960:0, 1 + v825:0) :|: v822:0 <= 1 + v960:0 && v825:0 > 0 && v820:0 < 101 && sum~cons_1~v960:0 = 1 + v960:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_362(v820:0:0, v822:0:0, sum~cons_1~v960:0:0, v825:0:0) -> f_362(v822:0:0, 1 + v820:0:0, v960:0:0, 1 + v825:0:0) :|: v822:0:0 <= 1 + v960:0:0 && v825:0:0 > 0 && v820:0:0 < 101 && sum~cons_1~v960:0:0 = 1 + v960:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_362(x, x1, x2, x3)] = 100 - x - x1 + x2

The following rules are decreasing:
f_362(v820:0:0, v822:0:0, sum~cons_1~v960:0:0, v825:0:0) -> f_362(v822:0:0, 1 + v820:0:0, v960:0:0, 1 + v825:0:0) :|: v822:0:0 <= 1 + v960:0:0 && v825:0:0 > 0 && v820:0:0 < 101 && sum~cons_1~v960:0:0 = 1 + v960:0:0
The following rules are bounded:
f_362(v820:0:0, v822:0:0, sum~cons_1~v960:0:0, v825:0:0) -> f_362(v822:0:0, 1 + v820:0:0, v960:0:0, 1 + v825:0:0) :|: v822:0:0 <= 1 + v960:0:0 && v825:0:0 > 0 && v820:0:0 < 101 && sum~cons_1~v960:0:0 = 1 + v960:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
