YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/nYdcW.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 69 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2246 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 24 ms]
        (9) IntTRS
        (10) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (11) YES
    (12) LLVM Symbolic Execution SCC
        (13) SCC2IRS [SOUND, 25 ms]
        (14) IntTRS
        (15) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (16) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/nYdcW.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/nYdcW.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		%8 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		%9 = call i32 @__VERIFIER_nondet_int()
		store %9, %5
		%10 = call i32 @__VERIFIER_nondet_int()
		store %10, %6
		%11 = call i32 @__VERIFIER_nondet_int()
		store %11, %7
		%12 = call i32 @__VERIFIER_nondet_int()
		store %12, %8
		%13 = load %5
		store %13, %2
		%14 = load %6
		store %14, %3
		store 0, %4
		br %15
	15:
		%16 = load %5
		%17 = load %7
		%18 = icmp slt %16 %17
		br %18, %23, %19
	19:
		%20 = load %6
		%21 = load %8
		%22 = icmp slt %20 %21
		br %23
	23:
		%24 = phi [1, %15], [%22, %19]
		br %24, %25, %32
	25:
		%26 = load %5
		%27 = add i32 %26, 1
		store %27, %5
		%28 = load %6
		%29 = add i32 %28, 1
		store %29, %6
		%30 = load %4
		%31 = add i32 %30, 1
		store %31, %4
		br %15
	32:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_557(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2697, 1, v2695, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) -> f_558(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2697, 1, v2695, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) :|: 0 = 0
f_558(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2697, 1, v2695, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) -> f_559(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2697, 1, v2695, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) :|: 0 = 0
f_559(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2697, 1, v2695, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) -> f_560(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2697, 1, v2695, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) :|: TRUE
f_560(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2697, 1, v2695, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) -> f_561(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2700, 1, v2695, v2697, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) :|: 0 = 0
f_561(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2700, 1, v2695, v2697, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) -> f_562(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2700, 1, v2695, v2697, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) :|: 0 = 0
f_562(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2700, 1, v2695, v2697, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) -> f_563(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2700, 1, v2695, v2697, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) :|: v2700 < v2694
f_563(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2700, 1, v2695, v2697, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) -> f_565(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2700, 1, v2695, v2697, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) :|: 0 = 0
f_565(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2700, 1, v2695, v2697, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) -> f_567(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2700, 1, v2695, v2697, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) :|: 0 = 0
f_567(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2700, 1, v2695, v2697, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) -> f_568(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, 1, v2695, v2697, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) :|: TRUE
f_568(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2790, v2791, v2792, v2793, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) -> f_570(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2790, v2791, v2792, v2793, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) :|: TRUE
f_570(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2790, v2791, v2792, v2793, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) -> f_572(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2791, v2792, v2793, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) :|: 0 = 0
f_572(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2791, v2792, v2793, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) -> f_573(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2791, v2792, v2793, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) :|: v2922 = 1 + v2787
f_573(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2791, v2792, v2793, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) -> f_574(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2791, v2792, v2793, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) :|: TRUE
f_574(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2791, v2792, v2793, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) -> f_575(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2792, v2793, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) :|: 0 = 0
f_575(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2792, v2793, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) -> f_576(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2792, v2924, v2793, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) :|: v2924 = 1 + v2792
f_576(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2792, v2924, v2793, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) -> f_577(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2792, v2924, v2793, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) :|: TRUE
f_577(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2792, v2924, v2793, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) -> f_578(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2792, v2924, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) :|: 0 = 0
f_578(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2792, v2924, v2794, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) -> f_579(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2792, v2924, v2794, v2926, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4, 2) :|: v2926 = 1 + v2794 && 2 <= v2926
f_579(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2792, v2924, v2794, v2926, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4, 2) -> f_580(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2792, v2924, v2794, v2926, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4, 2) :|: TRUE
f_580(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2792, v2924, v2794, v2926, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4, 2) -> f_581(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2792, v2924, v2794, v2926, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4, 2) :|: TRUE
f_581(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, 1, v2922, v2792, v2924, v2794, v2926, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4, 2) -> f_556(v2775, v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786, v2787, 0, v2792, 1, v2922, v2924, v2794, v2926, v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802, 3, 4) :|: TRUE
f_556(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2695, 0, v2697, 1, v2699, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) -> f_557(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2699, 0, v2697, 1, v2695, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_557(v2683:0, v2684:0, v2685:0, v2686:0, v2687:0, v2688:0, v2689:0, v2690:0, v2691:0, v2692:0, v2693:0, v2694:0, v2699:0, 0, v2697:0, 1, v2695:0, v2700:0, v2701:0, v2702:0, v2703:0, v2704:0, v2705:0, v2706:0, v2707:0, v2708:0, v2709:0, v2710:0, 3, 4) -> f_557(v2683:0, v2684:0, v2685:0, v2686:0, v2687:0, v2688:0, v2689:0, v2690:0, v2691:0, v2692:0, v2693:0, v2694:0, 1 + v2699:0, 0, v2700:0, 1, v2699:0, 1 + v2700:0, v2702:0, 1 + v2702:0, v2703:0, v2704:0, v2705:0, v2706:0, v2707:0, v2708:0, v2709:0, v2710:0, 3, 4) :|: v2702:0 > 0 && v2700:0 < v2694:0
Filtered unneeded arguments:
   f_557(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_557(x12, x18, x20)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_557(v2694:0, v2700:0, v2702:0) -> f_557(v2694:0, 1 + v2700:0, 1 + v2702:0) :|: v2702:0 > 0 && v2700:0 < v2694:0

----------------------------------------

(9)
Obligation:
Rules:
f_557(v2694:0, v2700:0, v2702:0) -> f_557(v2694:0, 1 + v2700:0, 1 + v2702:0) :|: v2702:0 > 0 && v2700:0 < v2694:0

----------------------------------------

(10) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_557(x, x1, x2)] = -1 + x - x1

The following rules are decreasing:
f_557(v2694:0, v2700:0, v2702:0) -> f_557(v2694:0, 1 + v2700:0, 1 + v2702:0) :|: v2702:0 > 0 && v2700:0 < v2694:0
The following rules are bounded:
f_557(v2694:0, v2700:0, v2702:0) -> f_557(v2694:0, 1 + v2700:0, 1 + v2702:0) :|: v2702:0 > 0 && v2700:0 < v2694:0

----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
SCC
----------------------------------------

(13) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_492(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2134, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) -> f_494(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2134, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) :|: 0 = 0
f_494(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2134, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) -> f_496(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2134, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) :|: v2136 < v2132
f_496(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2134, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) -> f_499(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2134, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) :|: 0 = 0
f_499(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2134, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) -> f_502(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2134, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) :|: 0 = 0
f_502(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2134, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) -> f_506(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2134, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) :|: TRUE
f_506(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2134, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) -> f_509(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) :|: 0 = 0
f_509(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) -> f_512(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) :|: v2287 = 1 + v2136
f_512(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) -> f_516(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) :|: TRUE
f_516(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) -> f_520(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) :|: 0 = 0
f_520(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) -> f_524(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2138, v2393, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) :|: v2393 = 1 + v2138
f_524(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2138, v2393, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) -> f_528(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2138, v2393, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) :|: TRUE
f_528(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2138, v2393, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) -> f_532(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2138, v2393, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) :|: 0 = 0
f_532(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2138, v2393, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) -> f_536(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2138, v2393, v2140, v2422, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4, 2) :|: v2422 = 1 + v2140 && 2 <= v2422
f_536(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2138, v2393, v2140, v2422, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4, 2) -> f_540(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2138, v2393, v2140, v2422, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4, 2) :|: TRUE
f_540(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2138, v2393, v2140, v2422, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4, 2) -> f_544(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2138, v2393, v2140, v2422, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4, 2) :|: TRUE
f_544(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2138, v2393, v2140, v2422, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4, 2) -> f_490(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2287, v2138, v2393, v2140, v2422, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) :|: TRUE
f_490(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2134, 1, v2136, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) -> f_492(v2122, v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133, v2136, 1, v2134, v2137, v2138, v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146, v2147, v2148, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_492(v2122:0, v2123:0, v2124:0, v2125:0, v2126:0, v2127:0, v2128:0, v2129:0, v2130:0, v2131:0, v2132:0, v2133:0, v2136:0, 1, v2134:0, v2137:0, v2138:0, v2139:0, v2140:0, v2141:0, v2142:0, v2143:0, v2144:0, v2145:0, v2146:0, v2147:0, v2148:0, 0, 3, 4) -> f_492(v2122:0, v2123:0, v2124:0, v2125:0, v2126:0, v2127:0, v2128:0, v2129:0, v2130:0, v2131:0, v2132:0, v2133:0, 1 + v2136:0, 1, v2136:0, v2138:0, 1 + v2138:0, v2140:0, 1 + v2140:0, v2141:0, v2142:0, v2143:0, v2144:0, v2145:0, v2146:0, v2147:0, v2148:0, 0, 3, 4) :|: v2140:0 > 0 && v2136:0 < v2132:0
Filtered unneeded arguments:
   f_492(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_492(x11, x13, x19)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_492(v2132:0, v2136:0, v2140:0) -> f_492(v2132:0, 1 + v2136:0, 1 + v2140:0) :|: v2140:0 > 0 && v2136:0 < v2132:0

----------------------------------------

(14)
Obligation:
Rules:
f_492(v2132:0, v2136:0, v2140:0) -> f_492(v2132:0, 1 + v2136:0, 1 + v2140:0) :|: v2140:0 > 0 && v2136:0 < v2132:0

----------------------------------------

(15) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_492(x, x1, x2)] = x - x1

The following rules are decreasing:
f_492(v2132:0, v2136:0, v2140:0) -> f_492(v2132:0, 1 + v2136:0, 1 + v2140:0) :|: v2140:0 > 0 && v2136:0 < v2132:0
The following rules are bounded:
f_492(v2132:0, v2136:0, v2140:0) -> f_492(v2132:0, 1 + v2136:0, 1 + v2140:0) :|: v2140:0 > 0 && v2136:0 < v2132:0

----------------------------------------

(16)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
