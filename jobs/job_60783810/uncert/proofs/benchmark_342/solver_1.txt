MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/hOoFL.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
    (3) LLVMToTerminationGraphProof [EQUIVALENT, 200 ms]
    (4) LLVM Symbolic Execution Graph
    (5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
    (6) AND
        (7) LLVM Symbolic Execution SCC
            (8) SCC2IRS [SOUND, 7 ms]
            (9) IntTRS
            (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
            (11) IntTRS
            (12) TerminationGraphProcessor [EQUIVALENT, 1 ms]
            (13) IntTRS
            (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
            (15) IntTRS
        (16) LLVM Symbolic Execution SCC
            (17) SCC2IRS [SOUND, 10 ms]
            (18) IntTRS
                (19) IntTRSNonPeriodicNontermProof [COMPLETE, 5 ms]
                (20) NO
            (21) SCC2IRS [SOUND, 0 ms]
            (22) IntTRS
                (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (24) IntTRS
                (25) IntTRSNonPeriodicNontermProof [COMPLETE, 2 ms]
                (26) NO
    (27) SEGraph to IRS [EQUIVALENT, 67 ms]
    (28) IntTRS
        (29) IRSNoOverapproximation [EQUIVALENT, 0 ms]
        (30) IntTRS
        (31) IRSToKoat [EQUIVALENT, 0 ms]
        (32) Koat Problem
    (33) SEGraph to IRS [EQUIVALENT, 47 ms]
    (34) IntTRS
        (35) IRSToKoat [EQUIVALENT, 0 ms]
        (36) Koat Problem
        (37) KoAT2 [EQUIVALENT, 343 ms]
        (38) MAYBE
(39) CToIRSProof [EQUIVALENT, 0 ms]
(40) IntTRS
    (41) TerminationGraphProcessor [SOUND, 9 ms]
    (42) IntTRS
    (43) IntTRSCompressionProof [EQUIVALENT, 0 ms]
    (44) IntTRS
    (45) IntTRSNonPeriodicNontermProof [COMPLETE, 0 ms]
    (46) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/hOoFL.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/hOoFL.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %2
		br %4
	4:
		%5 = load %2
		%6 = load %2
		%7 = mul i32 %5, %6
		%8 = icmp sgt %7 9
		br %8, %9, %19
	9:
		%10 = load %2
		%11 = icmp slt %10 0
		br %11, %12, %15
	12:
		%13 = load %2
		%14 = sub i32 %13, 1
		store %14, %2
		br %18
	15:
		%16 = load %2
		%17 = add i32 %16, 1
		store %17, %2
		br %18
	18:
		br %4
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_185(v82, v83, v84, v88, v85, v86, 1, v89, v90, 0, 3, 10, 2, 4) -> f_187(v82, v83, v84, v88, v86, 1, v85, v89, v90, 0, 3, 10, 2, 4) :|: 0 = 0
f_187(v82, v83, v84, v88, v86, 1, v85, v89, v90, 0, 3, 10, 2, 4) -> f_189(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4) :|: v94 = v88 * v88
f_189(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4) -> f_191(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: 9 < v94
f_191(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_195(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: 0 = 0
f_195(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_199(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: TRUE
f_199(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_203(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: 0 = 0
f_203(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_205(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: 0 = 0
f_205(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_207(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: TRUE
f_207(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_209(v82, v83, v84, v88, v94, 1, v89, v90, 0, 3, 2, 4, 10) :|: 0 = 0
f_209(v82, v83, v84, v88, v94, 1, v89, v90, 0, 3, 2, 4, 10) -> f_211(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) :|: 1 + v100 = v88 && 3 + v100 <= 0
f_211(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) -> f_213(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) :|: TRUE
f_213(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) -> f_215(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) :|: TRUE
f_215(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) -> f_217(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) :|: TRUE
f_217(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) -> f_183(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 10, 2, 4) :|: TRUE
f_183(v82, v83, v84, v85, v86, 1, v88, v89, v90, 0, 3, 10, 2, 4) -> f_185(v82, v83, v84, v88, v85, v86, 1, v89, v90, 0, 3, 10, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_185(v82:0, v83:0, v84:0, 1 + v100:0, v85:0, v86:0, 1, v89:0, v90:0, 0, 3, 10, 2, 4) -> f_185(v82:0, v83:0, v84:0, v100:0, 1 + v100:0, (1 + v100:0) * (1 + v100:0), 1, v89:0, v90:0, 0, 3, 10, 2, 4) :|: v100:0 < -2 && 9 < (1 + v100:0) * (1 + v100:0)
Filtered unneeded arguments:
   f_185(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_185(x4)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_185(sum~cons_1~v100:0) -> f_185(v100:0) :|: v100:0 < -2 && 9 < 1 + v100:0 + (v100:0 + v100:0 * v100:0) && sum~cons_1~v100:0 = 1 + v100:0

----------------------------------------

(9)
Obligation:
Rules:
f_185(sum~cons_1~v100:0) -> f_185(v100:0) :|: v100:0 < -2 && 9 < 1 + v100:0 + (v100:0 + v100:0 * v100:0) && sum~cons_1~v100:0 = 1 + v100:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_185(sum~cons_1~v100:0:0) -> f_185(v100:0:0) :|: v100:0:0 < -2 && 9 < 1 + v100:0:0 + (v100:0:0 + v100:0:0 * v100:0:0) && sum~cons_1~v100:0:0 = 1 + v100:0:0

----------------------------------------

(12) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

f_185(sum~cons_1~v100:0:0) -> f_185(v100:0:0) :|: v100:0:0 < -2 && 9 < 1 + v100:0:0 + (v100:0:0 + v100:0:0 * v100:0:0) && sum~cons_1~v100:0:0 = 1 + v100:0:0
has been transformed into
f_185(sum~cons_1~v100:0:0) -> f_185(v100:0:0) :|: sum~cons_1~v100:0:0 = x5 && (v100:0:0 < -2 && 9 < 1 + v100:0:0 + (v100:0:0 + v100:0:0 * v100:0:0) && sum~cons_1~v100:0:0 = 1 + v100:0:0) && x5 < -2 && 9 < 1 + x5 + (x5 + x5 * x5).


f_185(sum~cons_1~v100:0:0) -> f_185(v100:0:0) :|: sum~cons_1~v100:0:0 = x5 && (v100:0:0 < -2 && 9 < 1 + v100:0:0 + (v100:0:0 + v100:0:0 * v100:0:0) && sum~cons_1~v100:0:0 = 1 + v100:0:0) && x5 < -2 && 9 < 1 + x5 + (x5 + x5 * x5) and 
f_185(sum~cons_1~v100:0:0) -> f_185(v100:0:0) :|: sum~cons_1~v100:0:0 = x5 && (v100:0:0 < -2 && 9 < 1 + v100:0:0 + (v100:0:0 + v100:0:0 * v100:0:0) && sum~cons_1~v100:0:0 = 1 + v100:0:0) && x5 < -2 && 9 < 1 + x5 + (x5 + x5 * x5)
have been merged into the new rule
f_185(x12) -> f_185(x13) :|: x12 = x14 && (x15 < -2 && 9 < 1 + x15 + (x15 + x15 * x15) && x12 = 1 + x15) && x14 < -2 && 9 < 1 + x14 + (x14 + x14 * x14) && (x15 = x16 && (x13 < -2 && 9 < 1 + x13 + (x13 + x13 * x13) && x15 = 1 + x13) && x16 < -2 && 9 < 1 + x16 + (x16 + x16 * x16))


----------------------------------------

(13)
Obligation:
Rules:
f_185(x17) -> f_185(x18) :|: TRUE && x17 + -1 * x19 = 0 && x20 <= -3 && -2 * x20 + -1 * (x20 * x20) <= -9 && x17 + -1 * x20 = 1 && x19 <= -3 && -2 * x19 + -1 * (x19 * x19) <= -9 && x20 + -1 * x21 = 0 && x18 <= -3 && -2 * x18 + -1 * (x18 * x18) <= -9 && x20 + -1 * x18 = 1 && x21 <= -3 && -2 * x21 + -1 * (x21 * x21) <= -9

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_185(x17:0) -> f_185(x18:0) :|: x21:0 < -2 && -9 >= -2 * x21:0 + -1 * (x21:0 * x21:0) && x20:0 + -1 * x18:0 = 1 && -9 >= -2 * x18:0 + -1 * (x18:0 * x18:0) && x18:0 < -2 && x20:0 + -1 * x21:0 = 0 && -9 >= -2 * x19:0 + -1 * (x19:0 * x19:0) && x19:0 < -2 && x17:0 + -1 * x20:0 = 1 && -9 >= -2 * x20:0 + -1 * (x20:0 * x20:0) && x17:0 + -1 * x19:0 = 0 && x20:0 < -2

----------------------------------------

(16)
Obligation:
SCC
----------------------------------------

(17) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_184(v66, v67, v68, v69, v70, 1, 0, v73, v74, v75, 3, 10, 4) -> f_186(v66, v67, v68, v73, v69, v70, 1, 0, v74, v75, 3, 10, 4) :|: 0 = 0
f_186(v66, v67, v68, v73, v69, v70, 1, 0, v74, v75, 3, 10, 4) -> f_188(v66, v67, v68, v73, v70, 1, v69, 0, v74, v75, 3, 10, 4) :|: 0 = 0
f_188(v66, v67, v68, v73, v70, 1, v69, 0, v74, v75, 3, 10, 4) -> f_190(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4) :|: v95 = v73 * v73
f_190(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4) -> f_193(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) :|: 9 < v95
f_193(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) -> f_197(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) :|: 0 = 0
f_197(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) -> f_201(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) :|: TRUE
f_201(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) -> f_204(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) :|: 0 = 0
f_204(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) -> f_206(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) :|: 0 = 0
f_206(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) -> f_208(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) :|: TRUE
f_208(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) -> f_210(v66, v67, v68, v73, v95, 1, 0, v74, v75, 3, 4, 10) :|: 0 = 0
f_210(v66, v67, v68, v73, v95, 1, 0, v74, v75, 3, 4, 10) -> f_212(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) :|: v101 = 1 + v73 && 2 <= v101
f_212(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) -> f_214(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) :|: TRUE
f_214(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) -> f_216(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) :|: TRUE
f_216(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) -> f_181(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 10, 4) :|: TRUE
f_181(v66, v67, v68, v69, v70, 1, 0, v73, v74, v75, 3, 10, 4) -> f_184(v66, v67, v68, v69, v70, 1, 0, v73, v74, v75, 3, 10, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_184(v66:0, v67:0, v68:0, v69:0, v70:0, 1, 0, v73:0, v74:0, v75:0, 3, 10, 4) -> f_184(v66:0, v67:0, v68:0, v73:0, v73:0 * v73:0, 1, 0, 1 + v73:0, v74:0, v75:0, 3, 10, 4) :|: v73:0 > 0 && v73:0 * v73:0 > 9
Filtered unneeded arguments:
   f_184(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) -> f_184(x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_184(v73:0) -> f_184(1 + v73:0) :|: v73:0 > 0 && v73:0 * v73:0 > 9

----------------------------------------

(18)
Obligation:
Rules:
f_184(v73:0) -> f_184(1 + v73:0) :|: v73:0 > 0 && v73:0 * v73:0 > 9

----------------------------------------

(19) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v73:0) -> f(1, 1 + v73:0) :|: pc = 1 && (v73:0 > 0 && v73:0 * v73:0 > 9)
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
(((run2_0 = ((1 * 1)) and run2_1 = ((1 * 1) + (run1_1 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and (((run1_1 * 1)) > 0 and (((run1_1 * run1_1) * 1)) > ((1 * 9))))) and !(((run2_0 * 1)) = ((1 * 1)) and (((run2_1 * 1)) > 0 and (((run2_1 * run2_1) * 1)) > ((1 * 9)))))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
((run2_0 = ((1 * 1)) and run2_1 = ((1 * 1) + (run1_1 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and (((run1_1 * 1)) > 0 and (((run1_1 * run1_1) * 1)) > ((1 * 9)))))

----------------------------------------

(20)
NO

----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_184(v66, v67, v68, v69, v70, 1, 0, v73, v74, v75, 3, 10, 4) -> f_186(v66, v67, v68, v73, v69, v70, 1, 0, v74, v75, 3, 10, 4) :|: 0 = 0
f_186(v66, v67, v68, v73, v69, v70, 1, 0, v74, v75, 3, 10, 4) -> f_188(v66, v67, v68, v73, v70, 1, v69, 0, v74, v75, 3, 10, 4) :|: 0 = 0
f_188(v66, v67, v68, v73, v70, 1, v69, 0, v74, v75, 3, 10, 4) -> f_190(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4) :|: v95 = v73 * v73
f_190(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4) -> f_193(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) :|: 9 < v95
f_193(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) -> f_197(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) :|: 0 = 0
f_197(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) -> f_201(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) :|: TRUE
f_201(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) -> f_204(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) :|: 0 = 0
f_204(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) -> f_206(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) :|: 0 = 0
f_206(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) -> f_208(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) :|: TRUE
f_208(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) -> f_210(v66, v67, v68, v73, v95, 1, 0, v74, v75, 3, 4, 10) :|: 0 = 0
f_210(v66, v67, v68, v73, v95, 1, 0, v74, v75, 3, 4, 10) -> f_212(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) :|: v101 = 1 + v73 && 2 <= v101
f_212(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) -> f_214(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) :|: TRUE
f_214(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) -> f_216(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) :|: TRUE
f_216(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) -> f_181(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 10, 4) :|: v68 <= v73 && 1 <= v66 && 1 <= v67 && 0 <= v68 && 0 <= v73 && 10 <= v95 && 1 <= v101 && 4 <= v74 && 4 <= v75 && v66 <= v74 && v67 <= v75
f_181(v66, v67, v68, v69, v70, 1, 0, v73, v74, v75, 3, 10, 4) -> f_184(v66, v67, v68, v69, v70, 1, 0, v73, v74, v75, 3, 10, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_184(v66:0, v67:0, v68:0, v69:0, v70:0, 1, 0, v73:0, v74:0, v75:0, 3, 10, 4) -> f_184(v66:0, v67:0, v68:0, v73:0, v73:0 * v73:0, 1, 0, 1 + v73:0, v74:0, v75:0, 3, 10, 4) :|: v73:0 > 0 && v66:0 > 0 && v73:0 >= v68:0 && v73:0 * v73:0 > 9 && v67:0 > 0 && v68:0 > -1 && v74:0 > 3 && v75:0 > 3 && v75:0 >= v67:0 && v74:0 >= v66:0
Filtered unneeded arguments:
   f_184(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) -> f_184(x1, x2, x3, x8, x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_184(v66:0, v67:0, v68:0, v73:0, v74:0, v75:0) -> f_184(v66:0, v67:0, v68:0, 1 + v73:0, v74:0, v75:0) :|: v66:0 > 0 && v73:0 > 0 && v73:0 >= v68:0 && v73:0 * v73:0 > 9 && v67:0 > 0 && v68:0 > -1 && v74:0 > 3 && v75:0 > 3 && v74:0 >= v66:0 && v75:0 >= v67:0

----------------------------------------

(22)
Obligation:
Rules:
f_184(v66:0, v67:0, v68:0, v73:0, v74:0, v75:0) -> f_184(v66:0, v67:0, v68:0, 1 + v73:0, v74:0, v75:0) :|: v66:0 > 0 && v73:0 > 0 && v73:0 >= v68:0 && v73:0 * v73:0 > 9 && v67:0 > 0 && v68:0 > -1 && v74:0 > 3 && v75:0 > 3 && v74:0 >= v66:0 && v75:0 >= v67:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_184(v66:0:0, v67:0:0, v68:0:0, v73:0:0, v74:0:0, v75:0:0) -> f_184(v66:0:0, v67:0:0, v68:0:0, 1 + v73:0:0, v74:0:0, v75:0:0) :|: v74:0:0 >= v66:0:0 && v75:0:0 >= v67:0:0 && v75:0:0 > 3 && v74:0:0 > 3 && v68:0:0 > -1 && v67:0:0 > 0 && v73:0:0 * v73:0:0 > 9 && v73:0:0 >= v68:0:0 && v73:0:0 > 0 && v66:0:0 > 0

----------------------------------------

(25) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v66:0:0, v67:0:0, v68:0:0, v73:0:0, v74:0:0, v75:0:0) -> f(1, v66:0:0, v67:0:0, v68:0:0, 1 + v73:0:0, v74:0:0, v75:0:0) :|: pc = 1 && (v74:0:0 >= v66:0:0 && v75:0:0 >= v67:0:0 && v75:0:0 > 3 && v74:0:0 > 3 && v68:0:0 > -1 && v67:0:0 > 0 && v73:0:0 * v73:0:0 > 9 && v73:0:0 >= v68:0:0 && v73:0:0 > 0 && v66:0:0 > 0)
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
(((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1)) and run2_2 = ((run1_2 * 1)) and run2_3 = ((run1_3 * 1)) and run2_4 = ((1 * 1) + (run1_4 * 1)) and run2_5 = ((run1_5 * 1)) and run2_6 = ((run1_6 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and (((((((((((run1_5 * 1)) >= ((run1_1 * 1)) and ((run1_6 * 1)) >= ((run1_2 * 1))) and ((run1_6 * 1)) > ((1 * 3))) and ((run1_5 * 1)) > ((1 * 3))) and ((run1_3 * 1)) > ((1 * -1))) and ((run1_2 * 1)) > 0) and (((run1_4 * run1_4) * 1)) > ((1 * 9))) and ((run1_4 * 1)) >= ((run1_3 * 1))) and ((run1_4 * 1)) > 0) and ((run1_1 * 1)) > 0))) and !(((run2_0 * 1)) = ((1 * 1)) and (((((((((((run2_5 * 1)) >= ((run2_1 * 1)) and ((run2_6 * 1)) >= ((run2_2 * 1))) and ((run2_6 * 1)) > ((1 * 3))) and ((run2_5 * 1)) > ((1 * 3))) and ((run2_3 * 1)) > ((1 * -1))) and ((run2_2 * 1)) > 0) and (((run2_4 * run2_4) * 1)) > ((1 * 9))) and ((run2_4 * 1)) >= ((run2_3 * 1))) and ((run2_4 * 1)) > 0) and ((run2_1 * 1)) > 0)))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1)) and run2_2 = ((run1_2 * 1)) and run2_3 = ((run1_3 * 1)) and run2_4 = ((1 * 1) + (run1_4 * 1)) and run2_5 = ((run1_5 * 1)) and run2_6 = ((run1_6 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and (((((((((((run1_5 * 1)) >= ((run1_1 * 1)) and ((run1_6 * 1)) >= ((run1_2 * 1))) and ((run1_6 * 1)) > ((1 * 3))) and ((run1_5 * 1)) > ((1 * 3))) and ((run1_3 * 1)) > ((1 * -1))) and ((run1_2 * 1)) > 0) and (((run1_4 * run1_4) * 1)) > ((1 * 9))) and ((run1_4 * 1)) >= ((run1_3 * 1))) and ((run1_4 * 1)) > 0) and ((run1_1 * 1)) > 0)))

----------------------------------------

(26)
NO

----------------------------------------

(27) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 72 rulesP rules:
f_79 -> f_80(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_80(v1, v2, 3, 1, 4) -> f_81(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_81(v1, v3, v2, v4, 3, 1, 4) -> f_82(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_82(v1, v3, v2, v4, 0, 3, 1, 4) -> f_83(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_83(v1, v3, v2, v4, 0, 3, 1, 4) -> f_84(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_84(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_85(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_85(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_86(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_86(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_87(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: 0 = 0
f_87(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_88(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: 0 = 0
f_88(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_89(v1, v3, v5, v7, v2, v4, 0, 3, 1, 4) :|: v7 = v5 * v5
f_89(v1, v3, v5, v7, v2, v4, 0, 3, 1, 4) -> f_90(v1, v3, v5, v7, v2, v4, 0, 3, 1, 4, 10) :|: 9 < v7
f_89(v1, v3, v5, v7, v2, v4, 0, 3, 1, 4) -> f_91(v1, v3, v5, v7, v2, v4, 0, 3, 1, 4, 9) :|: v7 <= 9
f_90(v1, v3, v5, v7, v2, v4, 0, 3, 1, 4, 10) -> f_92(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: 0 = 0
f_91(v1, v3, v5, v7, v2, v4, 0, 3, 1, 4, 9) -> f_93(v1, v3, v5, v7, 0, v2, v4, 3, 1, 4, 9) :|: 0 = 0
f_92(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_94(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: TRUE
f_93(v1, v3, v5, v7, 0, v2, v4, 3, 1, 4, 9) -> f_95(v1, v3, v5, v7, 0, v2, v4, 3, 1, 4, 9) :|: TRUE
f_94(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_96(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: 0 = 0
f_96(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_97(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: v5 < 0
f_96(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_98(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: 0 <= v5
f_97(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_99(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: 0 = 0
f_98(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_100(v1, v3, v5, v7, 1, 0, v2, v4, 3, 4, 10) :|: 0 = 0
f_99(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_101(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: TRUE
f_100(v1, v3, v5, v7, 1, 0, v2, v4, 3, 4, 10) -> f_102(v1, v3, v5, v7, 1, 0, v2, v4, 3, 4, 10) :|: TRUE
f_101(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_103(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: 0 = 0
f_102(v1, v3, v5, v7, 1, 0, v2, v4, 3, 4, 10) -> f_104(v1, v3, v5, v7, 1, 0, v2, v4, 3, 4, 10) :|: 0 = 0
f_103(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_105(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) :|: 1 + v8 = v5 && 2 + v8 <= 0
f_104(v1, v3, v5, v7, 1, 0, v2, v4, 3, 4, 10) -> f_106(v1, v3, v5, v7, 1, 0, v9, v2, v4, 3, 4, 10) :|: v9 = 1 + v5 && 1 <= v9
f_105(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) -> f_107(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) :|: TRUE
f_106(v1, v3, v5, v7, 1, 0, v9, v2, v4, 3, 4, 10) -> f_108(v1, v3, v5, v7, 1, 0, v9, v2, v4, 3, 4, 10) :|: TRUE
f_107(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) -> f_109(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) :|: TRUE
f_108(v1, v3, v5, v7, 1, 0, v9, v2, v4, 3, 4, 10) -> f_110(v1, v3, v5, v7, 1, 0, v9, v2, v4, 3, 4, 10) :|: TRUE
f_109(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) -> f_111(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) :|: TRUE
f_110(v1, v3, v5, v7, 1, 0, v9, v2, v4, 3, 4, 10) -> f_145(v1, v3, v5, v5, v7, 1, 0, v9, v2, v4, 3, 10, 4) :|: TRUE
f_111(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) -> f_147(v1, v3, v5, v5, v7, 1, v8, v2, v4, 0, 3, 10, 2, 4) :|: TRUE
f_145(v26, v27, v28, v29, v30, 1, 0, v33, v34, v35, 3, 10, 4) -> f_181(v26, v27, v28, v29, v30, 1, 0, v33, v34, v35, 3, 10, 4) :|: TRUE
f_147(v42, v43, v44, v45, v46, 1, v48, v49, v50, 0, 3, 10, 2, 4) -> f_183(v42, v43, v44, v45, v46, 1, v48, v49, v50, 0, 3, 10, 2, 4) :|: TRUE
f_181(v66, v67, v68, v69, v70, 1, 0, v73, v74, v75, 3, 10, 4) -> f_184(v66, v67, v68, v69, v70, 1, 0, v73, v74, v75, 3, 10, 4) :|: TRUE
f_183(v82, v83, v84, v85, v86, 1, v88, v89, v90, 0, 3, 10, 2, 4) -> f_185(v82, v83, v84, v88, v85, v86, 1, v89, v90, 0, 3, 10, 2, 4) :|: 0 = 0
f_184(v66, v67, v68, v69, v70, 1, 0, v73, v74, v75, 3, 10, 4) -> f_186(v66, v67, v68, v73, v69, v70, 1, 0, v74, v75, 3, 10, 4) :|: 0 = 0
f_185(v82, v83, v84, v88, v85, v86, 1, v89, v90, 0, 3, 10, 2, 4) -> f_187(v82, v83, v84, v88, v86, 1, v85, v89, v90, 0, 3, 10, 2, 4) :|: 0 = 0
f_186(v66, v67, v68, v73, v69, v70, 1, 0, v74, v75, 3, 10, 4) -> f_188(v66, v67, v68, v73, v70, 1, v69, 0, v74, v75, 3, 10, 4) :|: 0 = 0
f_187(v82, v83, v84, v88, v86, 1, v85, v89, v90, 0, 3, 10, 2, 4) -> f_189(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4) :|: v94 = v88 * v88
f_188(v66, v67, v68, v73, v70, 1, v69, 0, v74, v75, 3, 10, 4) -> f_190(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4) :|: v95 = v73 * v73
f_189(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4) -> f_191(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: 9 < v94
f_189(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4) -> f_192(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 9) :|: v94 <= 9
f_190(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4) -> f_193(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) :|: 9 < v95
f_190(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4) -> f_194(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 9) :|: v95 <= 9
f_191(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_195(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: 0 = 0
f_192(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 9) -> f_196(v82, v83, v84, v88, v94, 0, v85, 1, v89, v90, 3, 2, 4, 9) :|: 0 = 0
f_193(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) -> f_197(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) :|: 0 = 0
f_194(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 9) -> f_198(v66, v67, v68, v73, v95, 0, v69, v74, v75, 3, 1, 4, 9) :|: 0 = 0
f_195(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_199(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: TRUE
f_196(v82, v83, v84, v88, v94, 0, v85, 1, v89, v90, 3, 2, 4, 9) -> f_200(v82, v83, v84, v88, v94, 0, v85, 1, v89, v90, 3, 2, 4, 9) :|: TRUE
f_197(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) -> f_201(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) :|: TRUE
f_198(v66, v67, v68, v73, v95, 0, v69, v74, v75, 3, 1, 4, 9) -> f_202(v66, v67, v68, v73, v95, 0, v69, v74, v75, 3, 1, 4, 9) :|: TRUE
f_199(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_203(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: 0 = 0
f_201(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) -> f_204(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) :|: 0 = 0
f_203(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_205(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: 0 = 0
f_204(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) -> f_206(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) :|: 0 = 0
f_205(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_207(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: TRUE
f_206(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) -> f_208(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) :|: TRUE
f_207(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_209(v82, v83, v84, v88, v94, 1, v89, v90, 0, 3, 2, 4, 10) :|: 0 = 0
f_208(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) -> f_210(v66, v67, v68, v73, v95, 1, 0, v74, v75, 3, 4, 10) :|: 0 = 0
f_209(v82, v83, v84, v88, v94, 1, v89, v90, 0, 3, 2, 4, 10) -> f_211(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) :|: 1 + v100 = v88 && 3 + v100 <= 0
f_210(v66, v67, v68, v73, v95, 1, 0, v74, v75, 3, 4, 10) -> f_212(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) :|: v101 = 1 + v73 && 2 <= v101
f_211(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) -> f_213(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) :|: TRUE
f_212(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) -> f_214(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) :|: TRUE
f_213(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) -> f_215(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) :|: TRUE
f_214(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) -> f_216(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) :|: TRUE
f_215(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) -> f_217(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) :|: TRUE
f_216(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) -> f_181(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 10, 4) :|: TRUE
f_217(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) -> f_183(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 10, 2, 4) :|: TRUE
Combined rules. Obtained 7 rulesP rules:
f_189(v82:0, v83:0, v84:0, 1 + v100:0, v94:0, 1, v85:0, v89:0, v90:0, 0, 3, 2, 4) -> f_189(v82:0, v83:0, v84:0, v100:0, v100:0 * v100:0, 1, 1 + v100:0, v89:0, v90:0, 0, 3, 2, 4) :|: v100:0 < -2 && v94:0 > 9
f_189(v82:0, v83:0, v84:0, v88:0, v94:0, 1, v85:0, v89:0, v90:0, 0, 3, 2, 4) -> f_200(v82:0, v83:0, v84:0, v88:0, v94:0, 0, v85:0, 1, v89:0, v90:0, 3, 2, 4, 9) :|: v94:0 < 10
f_79 -> f_189(v1:0, v3:0, 1 + v8:0, v8:0, v8:0 * v8:0, 1, 1 + v8:0, 3 + v1:0, 3 + v3:0, 0, 3, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && 9 < (1 + v8:0) * (1 + v8:0) && v8:0 < -1
f_79 -> f_95(v1:0, v3:0, v5:0, v5:0 * v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4, 9) :|: v3:0 > 0 && v1:0 > 0 && v5:0 * v5:0 < 10
f_190(v66:0, v67:0, v68:0, v73:0, v95:0, 1, v69:0, 0, v74:0, v75:0, 3, 4) -> f_190(v66:0, v67:0, v68:0, 1 + v73:0, (1 + v73:0) * (1 + v73:0), 1, v73:0, 0, v74:0, v75:0, 3, 4) :|: v73:0 > 0 && v95:0 > 9
f_190(v66:0, v67:0, v68:0, v73:0, v95:0, 1, v69:0, 0, v74:0, v75:0, 3, 4) -> f_202(v66:0, v67:0, v68:0, v73:0, v95:0, 0, v69:0, v74:0, v75:0, 3, 1, 4, 9) :|: v95:0 < 10
f_79 -> f_190(v1:0, v3:0, v5:0, 1 + v5:0, (1 + v5:0) * (1 + v5:0), 1, v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 * v5:0 > 9 && v5:0 > -1
Filtered unneeded arguments:
   f_189(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) -> f_189(x4, x5)
   f_190(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) -> f_190(x4, x5)
Removed division, modulo operations, cleaned up constraints. Obtained 7 rules.P rules:
f_189(sum~cons_1~v100:0, v94:0) -> f_189(v100:0, v100:0 * v100:0) :|: v100:0 < -2 && v94:0 > 9 && sum~cons_1~v100:0 = 1 + v100:0
f_189(v88:0, v94:0) -> f_200(v82:0, v83:0, v84:0, v88:0, v94:0, 0, v85:0, 1, v89:0, v90:0, 3, 2, 4, 9) :|: v94:0 < 10
f_79 -> f_189(v8:0, v8:0 * v8:0) :|: 9 < 1 + v8:0 + (v8:0 + v8:0 * v8:0) && v8:0 < -1
f_79 -> f_95(v1:0, v3:0, v5:0, v5:0 * v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4, 9) :|: v1:0 > 0 && v5:0 * v5:0 < 10 && v3:0 > 0
f_190(v73:0, v95:0) -> f_190(1 + v73:0, 1 + v73:0 + (v73:0 + v73:0 * v73:0)) :|: v73:0 > 0 && v95:0 > 9
f_190(v73:0, v95:0) -> f_202(v66:0, v67:0, v68:0, v73:0, v95:0, 0, v69:0, v74:0, v75:0, 3, 1, 4, 9) :|: v95:0 < 10
f_79 -> f_190(1 + v5:0, 1 + v5:0 + (v5:0 + v5:0 * v5:0)) :|: v5:0 * v5:0 > 9 && v5:0 > -1

----------------------------------------

(28)
Obligation:
Rules:
f_189(sum~cons_1~v100:0, v94:0) -> f_189(v100:0, v100:0 * v100:0) :|: v100:0 < -2 && v94:0 > 9 && sum~cons_1~v100:0 = 1 + v100:0
f_189(x, x1) -> f_200(x2, x3, x4, x, x1, 0, x5, 1, x6, x7, 3, 2, 4, 9) :|: x1 < 10
f_79 -> f_189(v8:0, v8:0 * v8:0) :|: 9 < 1 + v8:0 + (v8:0 + v8:0 * v8:0) && v8:0 < -1
f_79 -> f_95(v1:0, v3:0, v5:0, v5:0 * v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4, 9) :|: v1:0 > 0 && v5:0 * v5:0 < 10 && v3:0 > 0
f_190(v73:0, v95:0) -> f_190(1 + v73:0, 1 + v73:0 + (v73:0 + v73:0 * v73:0)) :|: v73:0 > 0 && v95:0 > 9
f_190(x8, x9) -> f_202(x10, x11, x12, x8, x9, 0, x13, x14, x15, 3, 1, 4, 9) :|: x9 < 10
f_79 -> f_190(1 + x16, 1 + x16 + (x16 + x16 * x16)) :|: x16 * x16 > 9 && x16 > -1
Start term: f_79

----------------------------------------

(29) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination can continue
----------------------------------------

(30)
Obligation:
Rules:
f_189(sum~cons_1~v100:0, v94:0) -> f_189(v100:0, v100:0 * v100:0) :|: v100:0 < -2 && v94:0 > 9 && sum~cons_1~v100:0 = 1 + v100:0
f_189(x, x1) -> f_200(x2, x3, x4, x, x1, 0, x5, 1, x6, x7, 3, 2, 4, 9) :|: x1 < 10
f_79 -> f_189(v8:0, v8:0 * v8:0) :|: 9 < 1 + v8:0 + (v8:0 + v8:0 * v8:0) && v8:0 < -1
f_79 -> f_95(v1:0, v3:0, v5:0, v5:0 * v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4, 9) :|: v1:0 > 0 && v5:0 * v5:0 < 10 && v3:0 > 0
f_190(v73:0, v95:0) -> f_190(1 + v73:0, 1 + v73:0 + (v73:0 + v73:0 * v73:0)) :|: v73:0 > 0 && v95:0 > 9
f_190(x8, x9) -> f_202(x10, x11, x12, x8, x9, 0, x13, x14, x15, 3, 1, 4, 9) :|: x9 < 10
f_79 -> f_190(1 + x16, 1 + x16 + (x16 + x16 * x16)) :|: x16 * x16 > 9 && x16 > -1
Start term: f_79

----------------------------------------

(31) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(32)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_79))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x40 x41 k25 k21 k22 k23 k24 k20 x39 x35 x36 x37 x38 x31 x32 x33 x34 k18 k19 x30 x70 x68 x69 x64 x65 x66 x67 x60 x61 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x131 x58 x130 x59 x133 x132 x53 x135 x54 x134 x55 x137 x56 x136 x139 x50 x138 x51 x52 x90 x91 x92 x120 x122 x121 x86 x124 x87 x123 x88 x126 x89 x125 x x82 x128 x83 x127 x84 x85 x129 x80 x81 x79 x111 x110 x75 x113 x76 x112 x'' x77 x115 x78 x114 x71 x117 x72 x116 x73 x119 x74 x118 k14 k15 x109 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x7 x27 x20 x102 x21 x101 x22 x104 x23 x103 x106 x1 x105 x108 x107 x' x17 x18 x19 x13 x14 x15 x16 x97 x10 x98 x11 x99 x12 x93 x94 x95 x96)
(RULES
  f_79(x58, x59, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x70, x71) -> f_189(k11, k11 * k11, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82, x83) :|: 9 < 1 + k11 + (k11 + k11 * k11) && k11 < -1
  f_190(k7, k9, x127, x128, x129, x130, x131, x132, x133, x134, x135, x136, x137, x138) -> f_202(k23, k24, k25, k7, k9, 0, k19, k20, k21, 3, 1, 4, 9, x139) :|: k9 < 10
  f_190(k15, k16, x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9) -> f_190(1 + k15, 1 + k15 + (k15 + k15 * k15), x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) :|: k15 > 0 && k16 > 9
  f_79(x84, x85, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96, x97) -> f_95(k18, k3, k6, k6 * k6, 0, 3 + k18, 3 + k3, 3, 1, 4, 9, x98, x99, x100) :|: k18 > 0 && k6 * k6 < 10 && k3 > 0
  f_79(x101, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111, x112, x113, x114) -> f_190(1 + k22, 1 + k22 + (k22 + k22 * k22), x115, x116, x117, x118, x119, x120, x121, x122, x123, x124, x125, x126) :|: k22 * k22 > 9 && k22 > -1
  f_189(k8, k17, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45) -> f_189(k0, k0 * k0, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57) :|: k0 < -2 && k17 > 9 && k8 = 1 + k0
  f_189(k13, k14, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) -> f_200(k4, k5, k1, k13, k14, 0, k2, 1, k10, k12, 3, 2, 4, 9) :|: k14 < 10
)

----------------------------------------

(33) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 72 rulesP rules:
f_79 -> f_80(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_80(v1, v2, 3, 1, 4) -> f_81(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_81(v1, v3, v2, v4, 3, 1, 4) -> f_82(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_82(v1, v3, v2, v4, 0, 3, 1, 4) -> f_83(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_83(v1, v3, v2, v4, 0, 3, 1, 4) -> f_84(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_84(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_85(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_85(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_86(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_86(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_87(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: 0 = 0
f_87(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_88(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: 0 = 0
f_88(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_89(v1, v3, v5, v7, v2, v4, 0, 3, 1, 4) :|: v7 = v5 * v5
f_89(v1, v3, v5, v7, v2, v4, 0, 3, 1, 4) -> f_90(v1, v3, v5, v7, v2, v4, 0, 3, 1, 4, 10) :|: 9 < v7
f_89(v1, v3, v5, v7, v2, v4, 0, 3, 1, 4) -> f_91(v1, v3, v5, v7, v2, v4, 0, 3, 1, 4, 9) :|: v7 <= 9
f_90(v1, v3, v5, v7, v2, v4, 0, 3, 1, 4, 10) -> f_92(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: 0 = 0
f_91(v1, v3, v5, v7, v2, v4, 0, 3, 1, 4, 9) -> f_93(v1, v3, v5, v7, 0, v2, v4, 3, 1, 4, 9) :|: 0 = 0
f_92(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_94(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: TRUE
f_93(v1, v3, v5, v7, 0, v2, v4, 3, 1, 4, 9) -> f_95(v1, v3, v5, v7, 0, v2, v4, 3, 1, 4, 9) :|: TRUE
f_94(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_96(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: 0 = 0
f_96(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_97(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: v5 < 0
f_96(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_98(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: 0 <= v5
f_97(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_99(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: 0 = 0
f_98(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_100(v1, v3, v5, v7, 1, 0, v2, v4, 3, 4, 10) :|: 0 = 0
f_99(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_101(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: TRUE
f_100(v1, v3, v5, v7, 1, 0, v2, v4, 3, 4, 10) -> f_102(v1, v3, v5, v7, 1, 0, v2, v4, 3, 4, 10) :|: TRUE
f_101(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_103(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) :|: 0 = 0
f_102(v1, v3, v5, v7, 1, 0, v2, v4, 3, 4, 10) -> f_104(v1, v3, v5, v7, 1, 0, v2, v4, 3, 4, 10) :|: 0 = 0
f_103(v1, v3, v5, v7, 1, v2, v4, 0, 3, 4, 10) -> f_105(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) :|: 1 + v8 = v5 && 2 + v8 <= 0
f_104(v1, v3, v5, v7, 1, 0, v2, v4, 3, 4, 10) -> f_106(v1, v3, v5, v7, 1, 0, v9, v2, v4, 3, 4, 10) :|: v9 = 1 + v5 && 1 <= v9
f_105(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) -> f_107(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) :|: TRUE
f_106(v1, v3, v5, v7, 1, 0, v9, v2, v4, 3, 4, 10) -> f_108(v1, v3, v5, v7, 1, 0, v9, v2, v4, 3, 4, 10) :|: TRUE
f_107(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) -> f_109(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) :|: TRUE
f_108(v1, v3, v5, v7, 1, 0, v9, v2, v4, 3, 4, 10) -> f_110(v1, v3, v5, v7, 1, 0, v9, v2, v4, 3, 4, 10) :|: TRUE
f_109(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) -> f_111(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) :|: TRUE
f_110(v1, v3, v5, v7, 1, 0, v9, v2, v4, 3, 4, 10) -> f_145(v1, v3, v5, v5, v7, 1, 0, v9, v2, v4, 3, 10, 4) :|: TRUE
f_111(v1, v3, v5, v7, 1, v8, v2, v4, 0, 3, 4, 10, 2) -> f_147(v1, v3, v5, v5, v7, 1, v8, v2, v4, 0, 3, 10, 2, 4) :|: TRUE
f_145(v26, v27, v28, v29, v30, 1, 0, v33, v34, v35, 3, 10, 4) -> f_181(v26, v27, v28, v29, v30, 1, 0, v33, v34, v35, 3, 10, 4) :|: TRUE
f_147(v42, v43, v44, v45, v46, 1, v48, v49, v50, 0, 3, 10, 2, 4) -> f_183(v42, v43, v44, v45, v46, 1, v48, v49, v50, 0, 3, 10, 2, 4) :|: TRUE
f_181(v66, v67, v68, v69, v70, 1, 0, v73, v74, v75, 3, 10, 4) -> f_184(v66, v67, v68, v69, v70, 1, 0, v73, v74, v75, 3, 10, 4) :|: TRUE
f_183(v82, v83, v84, v85, v86, 1, v88, v89, v90, 0, 3, 10, 2, 4) -> f_185(v82, v83, v84, v88, v85, v86, 1, v89, v90, 0, 3, 10, 2, 4) :|: 0 = 0
f_184(v66, v67, v68, v69, v70, 1, 0, v73, v74, v75, 3, 10, 4) -> f_186(v66, v67, v68, v73, v69, v70, 1, 0, v74, v75, 3, 10, 4) :|: 0 = 0
f_185(v82, v83, v84, v88, v85, v86, 1, v89, v90, 0, 3, 10, 2, 4) -> f_187(v82, v83, v84, v88, v86, 1, v85, v89, v90, 0, 3, 10, 2, 4) :|: 0 = 0
f_186(v66, v67, v68, v73, v69, v70, 1, 0, v74, v75, 3, 10, 4) -> f_188(v66, v67, v68, v73, v70, 1, v69, 0, v74, v75, 3, 10, 4) :|: 0 = 0
f_187(v82, v83, v84, v88, v86, 1, v85, v89, v90, 0, 3, 10, 2, 4) -> f_189(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4) :|: v94 = v88 * v88
f_188(v66, v67, v68, v73, v70, 1, v69, 0, v74, v75, 3, 10, 4) -> f_190(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4) :|: v95 = v73 * v73
f_189(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4) -> f_191(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: 9 < v94
f_189(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4) -> f_192(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 9) :|: v94 <= 9
f_190(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4) -> f_193(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) :|: 9 < v95
f_190(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4) -> f_194(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 9) :|: v95 <= 9
f_191(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_195(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: 0 = 0
f_192(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 9) -> f_196(v82, v83, v84, v88, v94, 0, v85, 1, v89, v90, 3, 2, 4, 9) :|: 0 = 0
f_193(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) -> f_197(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) :|: 0 = 0
f_194(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 9) -> f_198(v66, v67, v68, v73, v95, 0, v69, v74, v75, 3, 1, 4, 9) :|: 0 = 0
f_195(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_199(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: TRUE
f_196(v82, v83, v84, v88, v94, 0, v85, 1, v89, v90, 3, 2, 4, 9) -> f_200(v82, v83, v84, v88, v94, 0, v85, 1, v89, v90, 3, 2, 4, 9) :|: TRUE
f_197(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) -> f_201(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) :|: TRUE
f_198(v66, v67, v68, v73, v95, 0, v69, v74, v75, 3, 1, 4, 9) -> f_202(v66, v67, v68, v73, v95, 0, v69, v74, v75, 3, 1, 4, 9) :|: TRUE
f_199(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_203(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: 0 = 0
f_201(v66, v67, v68, v73, v95, 1, v69, 0, v74, v75, 3, 4, 10) -> f_204(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) :|: 0 = 0
f_203(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_205(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: 0 = 0
f_204(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) -> f_206(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) :|: 0 = 0
f_205(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_207(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) :|: TRUE
f_206(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) -> f_208(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) :|: TRUE
f_207(v82, v83, v84, v88, v94, 1, v85, v89, v90, 0, 3, 2, 4, 10) -> f_209(v82, v83, v84, v88, v94, 1, v89, v90, 0, 3, 2, 4, 10) :|: 0 = 0
f_208(v66, v67, v68, v73, v95, 1, 0, v69, v74, v75, 3, 4, 10) -> f_210(v66, v67, v68, v73, v95, 1, 0, v74, v75, 3, 4, 10) :|: 0 = 0
f_209(v82, v83, v84, v88, v94, 1, v89, v90, 0, 3, 2, 4, 10) -> f_211(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) :|: 1 + v100 = v88 && 3 + v100 <= 0
f_210(v66, v67, v68, v73, v95, 1, 0, v74, v75, 3, 4, 10) -> f_212(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) :|: v101 = 1 + v73 && 2 <= v101
f_211(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) -> f_213(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) :|: TRUE
f_212(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) -> f_214(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) :|: TRUE
f_213(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) -> f_215(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) :|: TRUE
f_214(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) -> f_216(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) :|: TRUE
f_215(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) -> f_217(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) :|: TRUE
f_216(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 4, 10, 2) -> f_181(v66, v67, v68, v73, v95, 1, 0, v101, v74, v75, 3, 10, 4) :|: TRUE
f_217(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 2, 4, 10) -> f_183(v82, v83, v84, v88, v94, 1, v100, v89, v90, 0, 3, 10, 2, 4) :|: TRUE
Combined rules. Obtained 7 rulesP rules:
f_189(v82:0, v83:0, v84:0, 1 + v100:0, v94:0, 1, v85:0, v89:0, v90:0, 0, 3, 2, 4) -> f_189(v82:0, v83:0, v84:0, v100:0, v100:0 * v100:0, 1, 1 + v100:0, v89:0, v90:0, 0, 3, 2, 4) :|: v100:0 < -2 && v94:0 > 9
f_189(v82:0, v83:0, v84:0, v88:0, v94:0, 1, v85:0, v89:0, v90:0, 0, 3, 2, 4) -> f_200(v82:0, v83:0, v84:0, v88:0, v94:0, 0, v85:0, 1, v89:0, v90:0, 3, 2, 4, 9) :|: v94:0 < 10
f_79 -> f_189(v1:0, v3:0, 1 + v8:0, v8:0, v8:0 * v8:0, 1, 1 + v8:0, 3 + v1:0, 3 + v3:0, 0, 3, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && 9 < (1 + v8:0) * (1 + v8:0) && v8:0 < -1
f_79 -> f_95(v1:0, v3:0, v5:0, v5:0 * v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4, 9) :|: v3:0 > 0 && v1:0 > 0 && v5:0 * v5:0 < 10
f_190(v66:0, v67:0, v68:0, v73:0, v95:0, 1, v69:0, 0, v74:0, v75:0, 3, 4) -> f_190(v66:0, v67:0, v68:0, 1 + v73:0, (1 + v73:0) * (1 + v73:0), 1, v73:0, 0, v74:0, v75:0, 3, 4) :|: v73:0 > 0 && v95:0 > 9
f_190(v66:0, v67:0, v68:0, v73:0, v95:0, 1, v69:0, 0, v74:0, v75:0, 3, 4) -> f_202(v66:0, v67:0, v68:0, v73:0, v95:0, 0, v69:0, v74:0, v75:0, 3, 1, 4, 9) :|: v95:0 < 10
f_79 -> f_190(v1:0, v3:0, v5:0, 1 + v5:0, (1 + v5:0) * (1 + v5:0), 1, v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 * v5:0 > 9 && v5:0 > -1
Filtered unneeded arguments:
   f_189(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) -> f_189(x4, x5)
   f_190(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) -> f_190(x4, x5)
Removed division, modulo operations, cleaned up constraints. Obtained 7 rules.P rules:
f_189(sum~cons_1~v100:0, v94:0) -> f_189(v100:0, v100:0 * v100:0) :|: v100:0 < -2 && v94:0 > 9 && sum~cons_1~v100:0 = 1 + v100:0
f_189(v88:0, v94:0) -> f_200(v82:0, v83:0, v84:0, v88:0, v94:0, 0, v85:0, 1, v89:0, v90:0, 3, 2, 4, 9) :|: v94:0 < 10
f_79 -> f_189(v8:0, v8:0 * v8:0) :|: 9 < 1 + v8:0 + (v8:0 + v8:0 * v8:0) && v8:0 < -1
f_79 -> f_95(v1:0, v3:0, v5:0, v5:0 * v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4, 9) :|: v1:0 > 0 && v5:0 * v5:0 < 10 && v3:0 > 0
f_190(v73:0, v95:0) -> f_190(1 + v73:0, 1 + v73:0 + (v73:0 + v73:0 * v73:0)) :|: v73:0 > 0 && v95:0 > 9
f_190(v73:0, v95:0) -> f_202(v66:0, v67:0, v68:0, v73:0, v95:0, 0, v69:0, v74:0, v75:0, 3, 1, 4, 9) :|: v95:0 < 10
f_79 -> f_190(1 + v5:0, 1 + v5:0 + (v5:0 + v5:0 * v5:0)) :|: v5:0 * v5:0 > 9 && v5:0 > -1

----------------------------------------

(34)
Obligation:
Rules:
f_189(sum~cons_1~v100:0, v94:0) -> f_189(v100:0, v100:0 * v100:0) :|: v100:0 < -2 && v94:0 > 9 && sum~cons_1~v100:0 = 1 + v100:0
f_189(x, x1) -> f_200(x2, x3, x4, x, x1, 0, x5, 1, x6, x7, 3, 2, 4, 9) :|: x1 < 10
f_79 -> f_189(v8:0, v8:0 * v8:0) :|: 9 < 1 + v8:0 + (v8:0 + v8:0 * v8:0) && v8:0 < -1
f_79 -> f_95(v1:0, v3:0, v5:0, v5:0 * v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4, 9) :|: v1:0 > 0 && v5:0 * v5:0 < 10 && v3:0 > 0
f_190(v73:0, v95:0) -> f_190(1 + v73:0, 1 + v73:0 + (v73:0 + v73:0 * v73:0)) :|: v73:0 > 0 && v95:0 > 9
f_190(x8, x9) -> f_202(x10, x11, x12, x8, x9, 0, x13, x14, x15, 3, 1, 4, 9) :|: x9 < 10
f_79 -> f_190(1 + x16, 1 + x16 + (x16 + x16 * x16)) :|: x16 * x16 > 9 && x16 > -1
Start term: f_79

----------------------------------------

(35) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(36)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_79))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x40 x41 k25 k21 k22 k23 k24 k20 x39 x35 x36 x37 x38 x31 x32 x33 x34 k18 k19 x30 x70 x68 x69 x64 x65 x66 x67 x60 x61 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x131 x58 x130 x59 x133 x132 x53 x135 x54 x134 x55 x137 x56 x136 x139 x50 x138 x51 x52 x90 x91 x92 x120 x122 x121 x86 x124 x87 x123 x88 x126 x89 x125 x x82 x128 x83 x127 x84 x85 x129 x80 x81 x79 x111 x110 x75 x113 x76 x112 x'' x77 x115 x78 x114 x71 x117 x72 x116 x73 x119 x74 x118 k14 k15 x109 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x7 x27 x20 x102 x21 x101 x22 x104 x23 x103 x106 x1 x105 x108 x107 x' x17 x18 x19 x13 x14 x15 x16 x97 x10 x98 x11 x99 x12 x93 x94 x95 x96)
(RULES
  f_79(x58, x59, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x70, x71) -> f_189(k11, k11 * k11, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82, x83) :|: 9 < 1 + k11 + (k11 + k11 * k11) && k11 < -1
  f_190(k7, k9, x127, x128, x129, x130, x131, x132, x133, x134, x135, x136, x137, x138) -> f_202(k23, k24, k25, k7, k9, 0, k19, k20, k21, 3, 1, 4, 9, x139) :|: k9 < 10
  f_190(k15, k16, x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9) -> f_190(1 + k15, 1 + k15 + (k15 + k15 * k15), x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) :|: k15 > 0 && k16 > 9
  f_79(x84, x85, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96, x97) -> f_95(k18, k3, k6, k6 * k6, 0, 3 + k18, 3 + k3, 3, 1, 4, 9, x98, x99, x100) :|: k18 > 0 && k6 * k6 < 10 && k3 > 0
  f_79(x101, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111, x112, x113, x114) -> f_190(1 + k22, 1 + k22 + (k22 + k22 * k22), x115, x116, x117, x118, x119, x120, x121, x122, x123, x124, x125, x126) :|: k22 * k22 > 9 && k22 > -1
  f_189(k8, k17, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45) -> f_189(k0, k0 * k0, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57) :|: k0 < -2 && k17 > 9 && k8 = 1 + k0
  f_189(k13, k14, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) -> f_200(k4, k5, k1, k13, k14, 0, k2, 1, k10, k12, 3, 2, 4, 9) :|: k14 < 10
)

----------------------------------------

(37) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_17493540404614393537.koat 

KoAT2's output was:

MAYBE

----------------------------------------

(38)
MAYBE

----------------------------------------

(39) CToIRSProof (EQUIVALENT)
Parsed C Integer Program as IRS.
----------------------------------------

(40)
Obligation:
Rules:
f1(i) -> f2(x_1) :|: TRUE
f4(x) -> f7(arith) :|: TRUE && arith = x - 1
f5(x9) -> f8(x10) :|: TRUE && x10 = x9 + 1
f3(x2) -> f4(x2) :|: x2 < 0
f3(x3) -> f5(x3) :|: x3 >= 0
f7(x4) -> f6(x4) :|: TRUE
f8(x5) -> f6(x5) :|: TRUE
f2(x6) -> f3(x6) :|: x6 * x6 > 9
f6(x7) -> f2(x7) :|: TRUE
f2(x8) -> f9(x8) :|: x8 * x8 <= 9
Start term: f1(i)

----------------------------------------

(41) TerminationGraphProcessor (SOUND)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(42)
Obligation:
Rules:
f2(x6) -> f3(x6) :|: x6 * x6 > 9
f6(x7) -> f2(x7) :|: TRUE
f7(x4) -> f6(x4) :|: TRUE
f4(x) -> f7(arith) :|: TRUE && arith = x - 1
f3(x2) -> f4(x2) :|: x2 < 0
f8(x5) -> f6(x5) :|: TRUE
f5(x9) -> f8(x10) :|: TRUE && x10 = x9 + 1
f3(x3) -> f5(x3) :|: x3 >= 0

----------------------------------------

(43) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(44)
Obligation:
Rules:
f6(x7:0) -> f6(x7:0 + 1) :|: x7:0 * x7:0 > 9 && x7:0 > -1
f6(x) -> f6(x - 1) :|: x * x > 9 && x < 0

----------------------------------------

(45) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, x7:0) -> f(1, x7:0 + 1) :|: pc = 1 && (x7:0 * x7:0 > 9 && x7:0 > -1)
f(pc, x) -> f(1, x - 1) :|: pc = 1 && (x * x > 9 && x < 0)
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
((((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1) + (1 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and ((((run1_1 * run1_1) * 1)) > ((1 * 9)) and ((run1_1 * 1)) > ((1 * -1))))) or ((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1) + (1 * -1))) and (((run1_0 * 1)) = ((1 * 1)) and ((((run1_1 * run1_1) * 1)) > ((1 * 9)) and ((run1_1 * 1)) < 0)))) and (!(((run2_0 * 1)) = ((1 * 1)) and ((((run2_1 * run2_1) * 1)) > ((1 * 9)) and ((run2_1 * 1)) > ((1 * -1)))) and !(((run2_0 * 1)) = ((1 * 1)) and ((((run2_1 * run2_1) * 1)) > ((1 * 9)) and ((run2_1 * 1)) < 0))))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
(((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1) + (1 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and ((((run1_1 * run1_1) * 1)) > ((1 * 9)) and ((run1_1 * 1)) > ((1 * -1))))) or ((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1) + (1 * -1))) and (((run1_0 * 1)) = ((1 * 1)) and ((((run1_1 * run1_1) * 1)) > ((1 * 9)) and ((run1_1 * 1)) < 0))))

----------------------------------------

(46)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
Aborted 1756892391Exec. 15, LoAT with some error. Reason: java.lang.IllegalArgumentException: Input string cannot be converted to an expression. free_41^2.
            aprove.InputModules.Programs.loat.LoATOutputParser.intExpressionOf(LoATOutputParser.java:154)
            aprove.InputModules.Programs.loat.LoATOutputParser.intRelationOf(LoATOutputParser.java:86)
            aprove.InputModules.Programs.loat.LoATOutputParser.finalGuard(LoATOutputParser.java:44)
            aprove.InputModules.Programs.loat.LoATProcessor.generateWitness(LoATProcessor.java:141)
            aprove.InputModules.Programs.loat.LoATProcessor.process(LoATProcessor.java:103)
            aprove.Strategies.ExecutableStrategies.Executor.execute(Executor.java:326)
            aprove.Strategies.ExecutableStrategies.Executor$Runner.wrappedRun(Executor.java:377)
