YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/W078a.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 47 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1056 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 36 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 9 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 28 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 8 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/W078a.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/W078a.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store 0, %6
		%7 = load %4
		%8 = icmp sle %7 0
		br %8, %12, %9
	9:
		%10 = load %5
		%11 = icmp sle %10 0
		br %11, %12, %16
	12:
		%13 = load %4
		%14 = load %5
		%15 = add i32 %13, %14
		store %15, %3
		br %40
	16:
		br %17
	17:
		%18 = load %4
		%19 = icmp eq %18 0
		%20 = xor i1 %19, 1
		br %20, %21, %38
	21:
		%22 = load %4
		%23 = load %5
		%24 = icmp sgt %22 %23
		br %24, %25, %27
	25:
		%26 = load %5
		store %26, %4
		br %35
	27:
		%28 = load %4
		%29 = icmp sle %28 0
		br %29, %30, %32
	30:
		%31 = load %4
		store %31, %3
		br %40
	32:
		%33 = load %4
		%34 = sub i32 %33, 1
		store %34, %4
		br %35
	35:
		%36 = load %6
		%37 = add i32 %36, 1
		store %37, %6
		br %17
	38:
		%39 = load %6
		store %39, %3
		br %40
	40:
		%41 = load %3
		ret %41

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 63
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_589(v918, v919, v920, v921, v922, v923, 0, v925, 1, v928, v929, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_591(v918, v919, v920, v921, v922, v923, 0, v925, 1, v928, v944, v929, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: v944 = 1 + v928 && 2 <= v944
f_591(v918, v919, v920, v921, v922, v923, 0, v925, 1, v928, v944, v929, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_593(v918, v919, v920, v921, v922, v923, 0, v925, 1, v928, v944, v929, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: TRUE
f_593(v918, v919, v920, v921, v922, v923, 0, v925, 1, v928, v944, v929, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_595(v918, v919, v920, v921, v922, v923, 0, v925, 1, v928, v944, v929, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: TRUE
f_595(v918, v919, v920, v921, v922, v923, 0, v925, 1, v928, v944, v929, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_597(v918, v919, v920, v921, v922, v923, 0, v929, 1, v925, v928, v944, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: 0 = 0
f_597(v918, v919, v920, v921, v922, v923, 0, v929, 1, v925, v928, v944, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_600(v918, v919, v920, v921, v922, v923, 0, v929, 1, v925, v928, v944, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: v929 != 0 && 2 <= v925 && 3 <= v918 && 2 <= v919
f_600(v918, v919, v920, v921, v922, v923, 0, v929, 1, v925, v928, v944, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_603(v918, v919, v920, v921, v922, v923, 0, v929, 1, v925, v928, v944, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: 0 = 0
f_603(v918, v919, v920, v921, v922, v923, 0, v929, 1, v925, v928, v944, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_606(v918, v919, v920, v921, v922, v923, 0, v929, 1, v925, v928, v944, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: 0 = 0
f_606(v918, v919, v920, v921, v922, v923, 0, v929, 1, v925, v928, v944, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_609(v918, v919, v920, v921, v922, v923, 0, v929, 1, v925, v928, v944, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: TRUE
f_609(v918, v919, v920, v921, v922, v923, 0, v929, 1, v925, v928, v944, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_612(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v925, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: 0 = 0
f_612(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v925, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_614(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v925, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: 0 = 0
f_614(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v925, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_616(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v925, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: 0 = 0
f_616(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v925, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_618(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v925, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: TRUE
f_618(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v925, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_620(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v925, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: 0 = 0
f_620(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v925, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_621(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v925, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: 0 = 0
f_621(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v925, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_622(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v925, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: TRUE
f_622(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v925, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_623(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: 0 = 0
f_623(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_624(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v1104, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: 1 + v1104 = v929 && 0 <= v1104
f_624(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v1104, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_625(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v1104, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: TRUE
f_625(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v1104, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_626(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v1104, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: TRUE
f_626(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v1104, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_587(v918, v919, v920, v921, v922, v923, 0, v929, 1, v928, v944, v1104, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: TRUE
f_587(v918, v919, v920, v921, v922, v923, 0, v925, 1, v927, v928, v929, v930, v931, v932, v933, v934, v935, 3, 2, 4) -> f_589(v918, v919, v920, v921, v922, v923, 0, v925, 1, v928, v929, v930, v931, v932, v933, v934, v935, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_589(v918:0, v919:0, v920:0, v921:0, v922:0, v923:0, 0, v925:0, 1, v928:0, 1 + v1104:0, v930:0, v931:0, v932:0, v933:0, v934:0, v935:0, 3, 2, 4) -> f_589(v918:0, v919:0, v920:0, v921:0, v922:0, v923:0, 0, 1 + v1104:0, 1, 1 + v928:0, v1104:0, v930:0, v931:0, v932:0, v933:0, v934:0, v935:0, 3, 2, 4) :|: v928:0 > 0 && v925:0 > 1 && v1104:0 > -1 && v918:0 > 2 && v919:0 > 1
Filtered unneeded arguments:
   f_589(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_589(x1, x2, x8, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_589(v918:0, v919:0, v925:0, v928:0, sum~cons_1~v1104:0) -> f_589(v918:0, v919:0, 1 + v1104:0, 1 + v928:0, v1104:0) :|: v925:0 > 1 && v928:0 > 0 && v1104:0 > -1 && v919:0 > 1 && v918:0 > 2 && sum~cons_1~v1104:0 = 1 + v1104:0

----------------------------------------

(9)
Obligation:
Rules:
f_589(v918:0, v919:0, v925:0, v928:0, sum~cons_1~v1104:0) -> f_589(v918:0, v919:0, 1 + v1104:0, 1 + v928:0, v1104:0) :|: v925:0 > 1 && v928:0 > 0 && v1104:0 > -1 && v919:0 > 1 && v918:0 > 2 && sum~cons_1~v1104:0 = 1 + v1104:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_589(v918:0:0, v919:0:0, v925:0:0, v928:0:0, sum~cons_1~v1104:0:0) -> f_589(v918:0:0, v919:0:0, 1 + v1104:0:0, 1 + v928:0:0, v1104:0:0) :|: v919:0:0 > 1 && v918:0:0 > 2 && v1104:0:0 > -1 && v928:0:0 > 0 && v925:0:0 > 1 && sum~cons_1~v1104:0:0 = 1 + v1104:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_589(x, x1, x2, x3, x4)] = x4

The following rules are decreasing:
f_589(v918:0:0, v919:0:0, v925:0:0, v928:0:0, sum~cons_1~v1104:0:0) -> f_589(v918:0:0, v919:0:0, 1 + v1104:0:0, 1 + v928:0:0, v1104:0:0) :|: v919:0:0 > 1 && v918:0:0 > 2 && v1104:0:0 > -1 && v928:0:0 > 0 && v925:0:0 > 1 && sum~cons_1~v1104:0:0 = 1 + v1104:0:0
The following rules are bounded:
f_589(v918:0:0, v919:0:0, v925:0:0, v928:0:0, sum~cons_1~v1104:0:0) -> f_589(v918:0:0, v919:0:0, 1 + v1104:0:0, 1 + v928:0:0, v1104:0:0) :|: v919:0:0 > 1 && v918:0:0 > 2 && v1104:0:0 > -1 && v928:0:0 > 0 && v925:0:0 > 1 && sum~cons_1~v1104:0:0 = 1 + v1104:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_554(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 4) -> f_558(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: v852 != 0 && 2 <= v850 && 2 <= v843 && 2 <= v844
f_558(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_562(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: 0 = 0
f_562(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_566(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: 0 = 0
f_566(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_570(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: TRUE
f_570(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_573(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: 0 = 0
f_573(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_576(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: 0 = 0
f_576(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_579(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: 0 = 0
f_579(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_582(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: TRUE
f_582(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_585(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: 0 = 0
f_585(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_588(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: 0 = 0
f_588(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_590(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: TRUE
f_590(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_592(v843, v844, v845, v846, v847, v848, 0, v852, 1, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: 0 = 0
f_592(v843, v844, v845, v846, v847, v848, 0, v852, 1, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_594(v843, v844, v845, v846, v847, v848, 0, v852, 1, v946, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: 1 + v946 = v852 && 0 <= v946
f_594(v843, v844, v845, v846, v847, v848, 0, v852, 1, v946, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_596(v843, v844, v845, v846, v847, v848, 0, v852, 1, v946, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: TRUE
f_596(v843, v844, v845, v846, v847, v848, 0, v852, 1, v946, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_598(v843, v844, v845, v846, v847, v848, 0, v852, 1, v946, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: TRUE
f_598(v843, v844, v845, v846, v847, v848, 0, v852, 1, v946, v853, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_601(v843, v844, v845, v846, v847, v848, 0, v852, 1, v946, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: 0 = 0
f_601(v843, v844, v845, v846, v847, v848, 0, v852, 1, v946, v854, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_604(v843, v844, v845, v846, v847, v848, 0, v852, 1, v946, v854, v984, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: v984 = 1 + v854 && 2 <= v984
f_604(v843, v844, v845, v846, v847, v848, 0, v852, 1, v946, v854, v984, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_607(v843, v844, v845, v846, v847, v848, 0, v852, 1, v946, v854, v984, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: TRUE
f_607(v843, v844, v845, v846, v847, v848, 0, v852, 1, v946, v854, v984, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_610(v843, v844, v845, v846, v847, v848, 0, v852, 1, v946, v854, v984, v855, v856, v857, v858, v859, v860, 3, 2, 4) :|: TRUE
f_610(v843, v844, v845, v846, v847, v848, 0, v852, 1, v946, v854, v984, v855, v856, v857, v858, v859, v860, 3, 2, 4) -> f_551(v843, v844, v845, v846, v847, v848, 0, v852, 1, v946, v854, v984, v855, v856, v857, v858, v859, v860, 3, 4) :|: TRUE
f_551(v843, v844, v845, v846, v847, v848, 0, v850, 1, v852, v853, v854, v855, v856, v857, v858, v859, v860, 3, 4) -> f_554(v843, v844, v845, v846, v847, v848, 0, v852, 1, v850, v853, v854, v855, v856, v857, v858, v859, v860, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_554(v843:0, v844:0, v845:0, v846:0, v847:0, v848:0, 0, 1 + v946:0, 1, v850:0, v853:0, v854:0, v855:0, v856:0, v857:0, v858:0, v859:0, v860:0, 3, 4) -> f_554(v843:0, v844:0, v845:0, v846:0, v847:0, v848:0, 0, v946:0, 1, 1 + v946:0, v854:0, 1 + v854:0, v855:0, v856:0, v857:0, v858:0, v859:0, v860:0, 3, 4) :|: v850:0 > 1 && v946:0 > -1 && v843:0 > 1 && v844:0 > 1 && v854:0 > 0
Filtered unneeded arguments:
   f_554(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_554(x1, x2, x8, x10, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_554(v843:0, v844:0, sum~cons_1~v946:0, v850:0, v854:0) -> f_554(v843:0, v844:0, v946:0, 1 + v946:0, 1 + v854:0) :|: v946:0 > -1 && v850:0 > 1 && v843:0 > 1 && v854:0 > 0 && v844:0 > 1 && sum~cons_1~v946:0 = 1 + v946:0

----------------------------------------

(16)
Obligation:
Rules:
f_554(v843:0, v844:0, sum~cons_1~v946:0, v850:0, v854:0) -> f_554(v843:0, v844:0, v946:0, 1 + v946:0, 1 + v854:0) :|: v946:0 > -1 && v850:0 > 1 && v843:0 > 1 && v854:0 > 0 && v844:0 > 1 && sum~cons_1~v946:0 = 1 + v946:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_554(v843:0:0, v844:0:0, sum~cons_1~v946:0:0, v850:0:0, v854:0:0) -> f_554(v843:0:0, v844:0:0, v946:0:0, 1 + v946:0:0, 1 + v854:0:0) :|: v854:0:0 > 0 && v844:0:0 > 1 && v843:0:0 > 1 && v850:0:0 > 1 && v946:0:0 > -1 && sum~cons_1~v946:0:0 = 1 + v946:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_554 ] = f_554_3

The following rules are decreasing:
f_554(v843:0:0, v844:0:0, sum~cons_1~v946:0:0, v850:0:0, v854:0:0) -> f_554(v843:0:0, v844:0:0, v946:0:0, 1 + v946:0:0, 1 + v854:0:0) :|: v854:0:0 > 0 && v844:0:0 > 1 && v843:0:0 > 1 && v850:0:0 > 1 && v946:0:0 > -1 && sum~cons_1~v946:0:0 = 1 + v946:0:0

The following rules are bounded:
f_554(v843:0:0, v844:0:0, sum~cons_1~v946:0:0, v850:0:0, v854:0:0) -> f_554(v843:0:0, v844:0:0, v946:0:0, 1 + v946:0:0, 1 + v854:0:0) :|: v854:0:0 > 0 && v844:0:0 > 1 && v843:0:0 > 1 && v850:0:0 > 1 && v946:0:0 > -1 && sum~cons_1~v946:0:0 = 1 + v946:0:0


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
