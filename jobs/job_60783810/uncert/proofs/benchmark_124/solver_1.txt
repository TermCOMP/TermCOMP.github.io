YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/HeRyh.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 666 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 48 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 13 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/HeRyh.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/HeRyh.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%4 = alloca i8, numElementsLit: 4, align 16
		%5 = bitcast *i8 %4 to *i32
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%6 = alloca i8, numElementsLit: 4, align 16
		%7 = bitcast *i8 %6 to *i32
		store %7, %3
		br %8
	8:
		%9 = load %2
		%10 = load %9
		%11 = icmp sle %10 10
		br %11, %12, %28
	12:
		%13 = load %3
		store 1000, %13
		br %14
	14:
		%15 = load %3
		%16 = load %15
		%17 = icmp sgt %16 1
		br %17, %18, %23
	18:
		%19 = load %3
		%20 = load %19
		%21 = sub i32 %20, 1
		%22 = load %3
		store %21, %22
		br %14
	23:
		%24 = load %2
		%25 = load %24
		%26 = add i32 %25, 1
		%27 = load %2
		store %26, %27
		br %8
	28:
		%29 = load %1
		ret %29


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 39 rulesP rules:
f_266(v106, v107, v108, v109, v110, v111, 1, 0, 2, v122, v115, v116, v117, v118, v119, 3, 7, 10, 4, 8, 11) -> f_267(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 3, 7, 10, 4, 8, 11) :|: 0 = 0
f_267(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 3, 7, 10, 4, 8, 11) -> f_268(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 3, 7, 9, 4, 8, 10) :|: v122 <= 10 && v111 <= 9
f_268(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 3, 7, 9, 4, 8, 10) -> f_270(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 3, 7, 9, 4, 8, 10) :|: 0 = 0
f_270(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 3, 7, 9, 4, 8, 10) -> f_272(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 3, 7, 9, 4, 8, 10) :|: TRUE
f_272(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 3, 7, 9, 4, 8, 10) -> f_274(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 3, 7, 9, 4, 8, 10) :|: 0 = 0
f_274(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 3, 7, 9, 4, 8, 10) -> f_276(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 1000, 3, 7, 9, 4, 8, 10) :|: TRUE
f_276(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 1000, 3, 7, 9, 4, 8, 10) -> f_277(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 1000, 3, 7, 9, 4, 8, 10) :|: TRUE
f_277(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 1000, 3, 7, 9, 4, 8, 10) -> f_278(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 1000, 3, 7, 9, 4, 8, 10) :|: 0 = 0
f_278(v106, v107, v108, v109, v110, v122, 1, 0, 2, v111, v115, v116, v117, v118, v119, 1000, 3, 7, 9, 4, 8, 10) -> f_279(v106, v107, v108, v109, v110, v122, 1, 1000, 0, 2, v111, v115, v116, v117, v118, v119, 3, 7, 9, 4, 8, 10) :|: 0 = 0
f_279(v106, v107, v108, v109, v110, v122, 1, 1000, 0, 2, v111, v115, v116, v117, v118, v119, 3, 7, 9, 4, 8, 10) -> f_280(v106, v107, v108, v109, v110, v122, 1, 1000, 2, v111, v115, v116, v117, v118, v119, 0, 3, 7, 9, 4, 8, 10) :|: 0 = 0
f_280(v106, v107, v108, v109, v110, v122, 1, 1000, 2, v111, v115, v116, v117, v118, v119, 0, 3, 7, 9, 4, 8, 10) -> f_281(v106, v107, v108, v109, v110, v122, 1, 1000, 2, v111, v115, v116, v117, v118, v119, 0, 3, 7, 9, 4, 8, 10) :|: TRUE
f_281(v106, v107, v108, v109, v110, v122, 1, 1000, 2, v111, v115, v116, v117, v118, v119, 0, 3, 7, 9, 4, 8, 10) -> f_292(v106, v107, v108, v109, v110, v122, 1, 1000, 2, 1, v111, v115, v116, v117, v118, v119, 0, 3, 7, 10, 999, 1000, 2, 9, 4, 8) :|: TRUE
f_292(v184, v185, v186, v187, v188, v189, 1, v191, v192, v193, v194, v195, v196, v197, v198, v199, 0, 3, 7, 10, 999, 1000, 2, 9, 4, 8) -> f_303(v184, v185, v186, v187, v188, v189, 1, v191, v192, v193, v194, v195, v196, v197, v198, v199, 0, 3, 7, 10, 998, 1000, 2, 999, 9, 4, 8) :|: TRUE
f_303(v228, v229, v230, v231, v232, v233, 1, v235, v236, v237, v238, v239, v240, v241, v242, v243, 0, 3, 7, 10, 998, 1000, 2, 999, 9, 4, 8) -> f_314(v228, v229, v230, v231, v232, v233, 1, v235, v236, v237, v238, v239, v240, v241, v242, v243, 0, 3, 7, 10, 2, 1000, 999, 9, 4, 8) :|: TRUE
f_314(v272, v273, v274, v275, v276, v277, 1, v279, v280, v281, v282, v283, v284, v285, v286, v287, 0, 3, 7, 10, 2, 1000, 999, 9, 4, 8) -> f_328(v272, v273, v274, v275, v276, v277, 1, v279, v280, v281, v282, v283, v284, v285, v286, v287, 0, 3, 7, 10, 2, 1000, 999, 9, 4, 8) :|: TRUE
f_328(v316, v317, v318, v319, v320, v321, 1, v323, v324, v325, v326, v327, v328, v329, v330, v331, 0, 3, 7, 10, 2, 1000, 999, 9, 4, 8) -> f_342(v316, v317, v318, v319, v320, v321, 1, v323, v324, v325, v326, v327, v328, v329, v330, v331, 0, 3, 7, 10, 2, 1000, 999, 9, 4, 8) :|: TRUE
f_342(v360, v361, v362, v363, v364, v365, 1, v367, v368, v369, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 999, 9, 4, 8) -> f_343(v360, v361, v362, v363, v364, v365, 1, v367, v368, v369, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 999, 9, 4, 8) :|: 0 = 0
f_343(v360, v361, v362, v363, v364, v365, 1, v367, v368, v369, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 999, 9, 4, 8) -> f_344(v360, v361, v362, v363, v364, v365, 1, v367, v369, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 999, 9, 4, 8) :|: 0 = 0
f_344(v360, v361, v362, v363, v364, v365, 1, v367, v369, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 999, 9, 4, 8) -> f_345(v360, v361, v362, v363, v364, v365, 1, v367, v377, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) :|: 1 + v377 = v367 && 1 <= v377 && v377 <= 999
f_345(v360, v361, v362, v363, v364, v365, 1, v367, v377, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) -> f_346(v360, v361, v362, v363, v364, v365, 1, v367, v377, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) :|: 0 = 0
f_346(v360, v361, v362, v363, v364, v365, 1, v367, v377, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) -> f_347(v360, v361, v362, v363, v364, v365, 1, v367, v377, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) :|: TRUE
f_347(v360, v361, v362, v363, v364, v365, 1, v367, v377, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) -> f_348(v360, v361, v362, v363, v364, v365, 1, v367, v377, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) :|: TRUE
f_348(v360, v361, v362, v363, v364, v365, 1, v367, v377, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) -> f_349(v360, v361, v362, v363, v364, v365, 1, v367, v377, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) :|: 0 = 0
f_349(v360, v361, v362, v363, v364, v365, 1, v367, v377, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) -> f_350(v360, v361, v362, v363, v364, v365, 1, v377, v367, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) :|: 0 = 0
f_350(v360, v361, v362, v363, v364, v365, 1, v377, v367, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) -> f_351(v360, v361, v362, v363, v364, v365, 1, v377, v367, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 1000, 9, 4, 8, 2, 999) :|: 1 < v377 && 3 <= v367
f_350(v360, v361, v362, v363, v364, v365, 1, v377, v367, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) -> f_352(v360, v361, v362, v363, v364, v365, 1, 2, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 9, 4, 8) :|: v377 <= 1 && v367 = 2 && v377 = 1 && 0 = 0
f_351(v360, v361, v362, v363, v364, v365, 1, v377, v367, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 1000, 9, 4, 8, 2, 999) -> f_353(v360, v361, v362, v363, v364, v365, 1, v377, v367, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 1000, 9, 4, 8, 2, 999) :|: 0 = 0
f_353(v360, v361, v362, v363, v364, v365, 1, v377, v367, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 1000, 9, 4, 8, 2, 999) -> f_355(v360, v361, v362, v363, v364, v365, 1, v377, v367, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 1000, 9, 4, 8, 2, 999) :|: TRUE
f_355(v360, v361, v362, v363, v364, v365, 1, v377, v367, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 1000, 9, 4, 8, 2, 999) -> f_342(v360, v361, v362, v363, v364, v365, 1, v377, v367, v377, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 2, 1000, 999, 9, 4, 8) :|: TRUE
f_352(v360, v361, v362, v363, v364, v365, 1, 2, v370, v371, v372, v373, v374, v375, 0, 3, 7, 10, 9, 4, 8) -> f_354(v360, v361, v362, v363, v364, v365, 1, 0, 2, v370, v371, v372, v373, v374, v375, 3, 7, 10, 9, 4, 8) :|: 0 = 0
f_354(v360, v361, v362, v363, v364, v365, 1, 0, 2, v370, v371, v372, v373, v374, v375, 3, 7, 10, 9, 4, 8) -> f_356(v360, v361, v362, v363, v364, v365, 1, 0, 2, v370, v371, v372, v373, v374, v375, 3, 7, 10, 9, 4, 8) :|: TRUE
f_356(v360, v361, v362, v363, v364, v365, 1, 0, 2, v370, v371, v372, v373, v374, v375, 3, 7, 10, 9, 4, 8) -> f_357(v360, v361, v362, v363, v364, v365, 1, 0, 2, v370, v371, v372, v373, v374, v375, 3, 7, 10, 9, 4, 8) :|: 0 = 0
f_357(v360, v361, v362, v363, v364, v365, 1, 0, 2, v370, v371, v372, v373, v374, v375, 3, 7, 10, 9, 4, 8) -> f_358(v360, v361, v362, v363, v364, v365, 1, 0, 2, v371, v372, v373, v374, v375, 3, 7, 10, 4, 8) :|: 0 = 0
f_358(v360, v361, v362, v363, v364, v365, 1, 0, 2, v371, v372, v373, v374, v375, 3, 7, 10, 4, 8) -> f_359(v360, v361, v362, v363, v364, v365, 1, 0, 2, v430, v371, v372, v373, v374, v375, 3, 7, 10, 4, 8, 11) :|: v430 = 1 + v365 && v430 <= 11
f_359(v360, v361, v362, v363, v364, v365, 1, 0, 2, v430, v371, v372, v373, v374, v375, 3, 7, 10, 4, 8, 11) -> f_360(v360, v361, v362, v363, v364, v365, 1, 0, 2, v430, v371, v372, v373, v374, v375, 3, 7, 10, 4, 8, 11) :|: 0 = 0
f_360(v360, v361, v362, v363, v364, v365, 1, 0, 2, v430, v371, v372, v373, v374, v375, 3, 7, 10, 4, 8, 11) -> f_361(v360, v361, v362, v363, v364, v365, 1, 0, 2, v430, v371, v372, v373, v374, v375, 3, 7, 10, 4, 8, 11) :|: TRUE
f_361(v360, v361, v362, v363, v364, v365, 1, 0, 2, v430, v371, v372, v373, v374, v375, 3, 7, 10, 4, 8, 11) -> f_362(v360, v361, v362, v363, v364, v365, 1, 0, 2, v430, v371, v372, v373, v374, v375, 3, 7, 10, 4, 8, 11) :|: TRUE
f_362(v360, v361, v362, v363, v364, v365, 1, 0, 2, v430, v371, v372, v373, v374, v375, 3, 7, 10, 4, 8, 11) -> f_265(v360, v361, v362, v363, v364, v365, 1, 0, 2, v430, v371, v372, v373, v374, v375, 3, 7, 10, 4, 8, 11) :|: TRUE
f_265(v106, v107, v108, v109, v110, v111, 1, 0, 2, v122, v115, v116, v117, v118, v119, 3, 7, 10, 4, 8, 11) -> f_266(v106, v107, v108, v109, v110, v111, 1, 0, 2, v122, v115, v116, v117, v118, v119, 3, 7, 10, 4, 8, 11) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_350(v360:0, v361:0, v362:0, v363:0, v364:0, v365:0, 1, 1 + v377:1, v367:0, v370:0, v371:0, v372:0, v373:0, v374:0, v375:0, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) -> f_350(v360:0, v361:0, v362:0, v363:0, v364:0, v365:0, 1, v377:1, 1 + v377:1, v370:0, v371:0, v372:0, v373:0, v374:0, v375:0, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) :|: v377:1 > 0 && v377:1 < 1000 && v367:0 > 2
f_350(v360:0, v361:0, v362:0, v363:0, v364:0, v365:0, 1, 1, 2, v370:0, v371:0, v372:0, v373:0, v374:0, v375:0, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) -> f_350(v360:0, v361:0, v362:0, v363:0, v364:0, 1 + v365:0, 1, 999, 1000, v365:0, v371:0, v372:0, v373:0, v374:0, v375:0, 0, 3, 7, 10, 2, 1000, 9, 4, 8, 999) :|: v365:0 < 10 && v365:0 < 11
Filtered unneeded arguments:
   f_350(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_350(x6, x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_350(v365:0, sum~cons_1~v377:1, v367:0) -> f_350(v365:0, v377:1, 1 + v377:1) :|: v377:1 < 1000 && v367:0 > 2 && v377:1 > 0 && sum~cons_1~v377:1 = 1 + v377:1
f_350(v365:0, cons_1, cons_2) -> f_350(1 + v365:0, 999, 1000) :|: v365:0 < 10 && v365:0 < 11 && cons_1 = 1 && cons_2 = 2

----------------------------------------

(9)
Obligation:
Rules:
f_350(v365:0, sum~cons_1~v377:1, v367:0) -> f_350(v365:0, v377:1, 1 + v377:1) :|: v377:1 < 1000 && v367:0 > 2 && v377:1 > 0 && sum~cons_1~v377:1 = 1 + v377:1
f_350(x, x1, x2) -> f_350(1 + x, 999, 1000) :|: x < 10 && x < 11 && x1 = 1 && x2 = 2

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_350(v365:0:0, sum~cons_1~v377:1:0, v367:0:0) -> f_350(v365:0:0, v377:1:0, 1 + v377:1:0) :|: v377:1:0 < 1000 && v367:0:0 > 2 && v377:1:0 > 0 && sum~cons_1~v377:1:0 = 1 + v377:1:0
f_350(x:0, cons_1, cons_2) -> f_350(1 + x:0, 999, 1000) :|: x:0 < 10 && x:0 < 11 && cons_1 = 1 && cons_2 = 2

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_350(x, x1, x2)] = 9 - x

The following rules are decreasing:
f_350(x:0, cons_1, cons_2) -> f_350(1 + x:0, 999, 1000) :|: x:0 < 10 && x:0 < 11 && cons_1 = 1 && cons_2 = 2
The following rules are bounded:
f_350(x:0, cons_1, cons_2) -> f_350(1 + x:0, 999, 1000) :|: x:0 < 10 && x:0 < 11 && cons_1 = 1 && cons_2 = 2

----------------------------------------

(13)
Obligation:
Rules:
f_350(v365:0:0, sum~cons_1~v377:1:0, v367:0:0) -> f_350(v365:0:0, v377:1:0, 1 + v377:1:0) :|: v377:1:0 < 1000 && v367:0:0 > 2 && v377:1:0 > 0 && sum~cons_1~v377:1:0 = 1 + v377:1:0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_350(v365:0:0:0, sum~cons_1~v377:1:0:0, v367:0:0:0) -> f_350(v365:0:0:0, v377:1:0:0, 1 + v377:1:0:0) :|: v377:1:0:0 < 1000 && v367:0:0:0 > 2 && v377:1:0:0 > 0 && sum~cons_1~v377:1:0:0 = 1 + v377:1:0:0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_350(x1, x2, x3) -> f_350(x2, x3)

----------------------------------------

(17)
Obligation:
Rules:
f_350(sum~cons_1~v377:1:0:0, v367:0:0:0) -> f_350(v377:1:0:0, 1 + v377:1:0:0) :|: v377:1:0:0 < 1000 && v367:0:0:0 > 2 && v377:1:0:0 > 0 && sum~cons_1~v377:1:0:0 = 1 + v377:1:0:0

----------------------------------------

(18) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_350 ] = f_350_1

The following rules are decreasing:
f_350(sum~cons_1~v377:1:0:0, v367:0:0:0) -> f_350(v377:1:0:0, 1 + v377:1:0:0) :|: v377:1:0:0 < 1000 && v367:0:0:0 > 2 && v377:1:0:0 > 0 && sum~cons_1~v377:1:0:0 = 1 + v377:1:0:0

The following rules are bounded:
f_350(sum~cons_1~v377:1:0:0, v367:0:0:0) -> f_350(v377:1:0:0, 1 + v377:1:0:0) :|: v377:1:0:0 < 1000 && v367:0:0:0 > 2 && v377:1:0:0 > 0 && sum~cons_1~v377:1:0:0 = 1 + v377:1:0:0


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_246(v106, v107, v108, v109, v110, v111, 1, v113, v114, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 1000, 999, 4, 8) -> f_247(v106, v107, v108, v109, v110, v111, 1, v114, v113, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 1000, 999, 4, 8) :|: 0 = 0
f_247(v106, v107, v108, v109, v110, v111, 1, v114, v113, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 1000, 999, 4, 8) -> f_248(v106, v107, v108, v109, v110, v111, 1, v114, v113, v115, v116, v117, v118, v119, 0, 3, 7, 10, 1000, 2, 999, 4, 8) :|: 1 < v114 && 3 <= v113
f_248(v106, v107, v108, v109, v110, v111, 1, v114, v113, v115, v116, v117, v118, v119, 0, 3, 7, 10, 1000, 2, 999, 4, 8) -> f_250(v106, v107, v108, v109, v110, v111, 1, v114, v113, v115, v116, v117, v118, v119, 0, 3, 7, 10, 1000, 2, 999, 4, 8) :|: 0 = 0
f_250(v106, v107, v108, v109, v110, v111, 1, v114, v113, v115, v116, v117, v118, v119, 0, 3, 7, 10, 1000, 2, 999, 4, 8) -> f_252(v106, v107, v108, v109, v110, v111, 1, v114, v113, v115, v116, v117, v118, v119, 0, 3, 7, 10, 1000, 2, 999, 4, 8) :|: TRUE
f_252(v106, v107, v108, v109, v110, v111, 1, v114, v113, v115, v116, v117, v118, v119, 0, 3, 7, 10, 1000, 2, 999, 4, 8) -> f_254(v106, v107, v108, v109, v110, v111, 1, v114, v113, v115, v116, v117, v118, v119, 0, 3, 7, 10, 1000, 2, 999, 4, 8) :|: 0 = 0
f_254(v106, v107, v108, v109, v110, v111, 1, v114, v113, v115, v116, v117, v118, v119, 0, 3, 7, 10, 1000, 2, 999, 4, 8) -> f_256(v106, v107, v108, v109, v110, v111, 1, v114, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 999, 4, 8) :|: 0 = 0
f_256(v106, v107, v108, v109, v110, v111, 1, v114, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 999, 4, 8) -> f_258(v106, v107, v108, v109, v110, v111, 1, v114, v121, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 999, 4, 8, 998) :|: 1 + v121 = v114 && 1 <= v121 && v121 <= 998
f_258(v106, v107, v108, v109, v110, v111, 1, v114, v121, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 999, 4, 8, 998) -> f_260(v106, v107, v108, v109, v110, v111, 1, v114, v121, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 999, 4, 8, 998) :|: 0 = 0
f_260(v106, v107, v108, v109, v110, v111, 1, v114, v121, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 999, 4, 8, 998) -> f_262(v106, v107, v108, v109, v110, v111, 1, v114, v121, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 999, 4, 8, 998) :|: TRUE
f_262(v106, v107, v108, v109, v110, v111, 1, v114, v121, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 999, 4, 8, 998) -> f_264(v106, v107, v108, v109, v110, v111, 1, v114, v121, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 999, 4, 8, 998) :|: TRUE
f_264(v106, v107, v108, v109, v110, v111, 1, v114, v121, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 999, 4, 8, 998) -> f_245(v106, v107, v108, v109, v110, v111, 1, v114, v121, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 1000, 999, 4, 8) :|: TRUE
f_245(v106, v107, v108, v109, v110, v111, 1, v113, v114, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 1000, 999, 4, 8) -> f_246(v106, v107, v108, v109, v110, v111, 1, v113, v114, v115, v116, v117, v118, v119, 0, 3, 7, 10, 2, 1000, 999, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_246(v106:0, v107:0, v108:0, v109:0, v110:0, v111:0, 1, v113:0, 1 + v121:0, v115:0, v116:0, v117:0, v118:0, v119:0, 0, 3, 7, 10, 2, 1000, 999, 4, 8) -> f_246(v106:0, v107:0, v108:0, v109:0, v110:0, v111:0, 1, 1 + v121:0, v121:0, v115:0, v116:0, v117:0, v118:0, v119:0, 0, 3, 7, 10, 2, 1000, 999, 4, 8) :|: v113:0 > 2 && v121:0 > 0 && v121:0 < 999
Filtered unneeded arguments:
   f_246(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_246(x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_246(v113:0, sum~cons_1~v121:0) -> f_246(1 + v121:0, v121:0) :|: v121:0 > 0 && v121:0 < 999 && v113:0 > 2 && sum~cons_1~v121:0 = 1 + v121:0

----------------------------------------

(22)
Obligation:
Rules:
f_246(v113:0, sum~cons_1~v121:0) -> f_246(1 + v121:0, v121:0) :|: v121:0 > 0 && v121:0 < 999 && v113:0 > 2 && sum~cons_1~v121:0 = 1 + v121:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_246(v113:0:0, sum~cons_1~v121:0:0) -> f_246(1 + v121:0:0, v121:0:0) :|: v121:0:0 > 0 && v121:0:0 < 999 && v113:0:0 > 2 && sum~cons_1~v121:0:0 = 1 + v121:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_246(x, x1)] = x1

The following rules are decreasing:
f_246(v113:0:0, sum~cons_1~v121:0:0) -> f_246(1 + v121:0:0, v121:0:0) :|: v121:0:0 > 0 && v121:0:0 < 999 && v113:0:0 > 2 && sum~cons_1~v121:0:0 = 1 + v121:0:0
The following rules are bounded:
f_246(v113:0:0, sum~cons_1~v121:0:0) -> f_246(1 + v121:0:0, v121:0:0) :|: v121:0:0 > 0 && v121:0:0 < 999 && v113:0:0 > 2 && sum~cons_1~v121:0:0 = 1 + v121:0:0

----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
