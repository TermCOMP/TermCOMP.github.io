YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/VvZsd.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 801 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 49 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 16 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/VvZsd.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/VvZsd.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		store 0, %2
		br %7
	7:
		%8 = load %3
		%9 = icmp sgt %8 0
		br %9, %10, %13
	10:
		%11 = load %4
		%12 = icmp sgt %11 0
		br %13
	13:
		%14 = phi [0, %7], [%12, %10]
		br %14, %15, %22
	15:
		%16 = load %3
		%17 = sub i32 %16, 1
		store %17, %3
		%18 = load %4
		%19 = sub i32 %18, 1
		store %19, %4
		%20 = load %2
		%21 = add i32 %20, 1
		store %21, %2
		br %7
	22:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_285(v476, v477, v478, v479, v480, v481, v485, 1, v484, v482, v486, v487, v488, v489, v490, v491, v492, 0, 3, 4) -> f_286(v476, v477, v478, v479, v480, v481, v485, 1, v484, v482, v486, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) :|: 0 < v485 && 2 <= v482 && 2 <= v480
f_286(v476, v477, v478, v479, v480, v481, v485, 1, v484, v482, v486, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) -> f_288(v476, v477, v478, v479, v480, v481, v485, 1, v484, v482, v486, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) :|: 0 = 0
f_288(v476, v477, v478, v479, v480, v481, v485, 1, v484, v482, v486, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) -> f_290(v476, v477, v478, v479, v480, v481, v485, 1, v484, v482, v486, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) :|: TRUE
f_290(v476, v477, v478, v479, v480, v481, v485, 1, v484, v482, v486, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) -> f_292(v476, v477, v478, v479, v480, v481, v485, 1, v486, v482, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) :|: 0 = 0
f_292(v476, v477, v478, v479, v480, v481, v485, 1, v486, v482, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) -> f_294(v476, v477, v478, v479, v480, v481, v485, 1, v486, v482, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) :|: 0 < v486 && 2 <= v484 && 2 <= v481
f_294(v476, v477, v478, v479, v480, v481, v485, 1, v486, v482, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) -> f_296(v476, v477, v478, v479, v480, v481, v485, 1, v486, v482, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) :|: 0 = 0
f_296(v476, v477, v478, v479, v480, v481, v485, 1, v486, v482, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) -> f_298(v476, v477, v478, v479, v480, v481, v485, 1, v486, v482, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) :|: 0 = 0
f_298(v476, v477, v478, v479, v480, v481, v485, 1, v486, v482, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) -> f_300(v476, v477, v478, v479, v480, v481, v485, 1, v486, v482, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) :|: TRUE
f_300(v476, v477, v478, v479, v480, v481, v485, 1, v486, v482, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) -> f_302(v476, v477, v478, v479, v480, v481, v485, 1, v486, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) :|: 0 = 0
f_302(v476, v477, v478, v479, v480, v481, v485, 1, v486, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) -> f_303(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) :|: 1 + v562 = v485 && 0 <= v562
f_303(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) -> f_304(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) :|: TRUE
f_304(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v484, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) -> f_305(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) :|: 0 = 0
f_305(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) -> f_306(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v564, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) :|: 1 + v564 = v486 && 0 <= v564
f_306(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v564, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) -> f_307(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v564, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) :|: TRUE
f_307(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v564, v487, v488, v489, v490, v491, v492, 0, 3, 2, 4) -> f_308(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v564, v488, v489, v490, v491, v492, 0, 3, 2, 4) :|: 0 = 0
f_308(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v564, v488, v489, v490, v491, v492, 0, 3, 2, 4) -> f_309(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v564, v488, v566, v489, v490, v491, v492, 0, 3, 2, 4) :|: v566 = 1 + v488 && 2 <= v566
f_309(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v564, v488, v566, v489, v490, v491, v492, 0, 3, 2, 4) -> f_310(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v564, v488, v566, v489, v490, v491, v492, 0, 3, 2, 4) :|: TRUE
f_310(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v564, v488, v566, v489, v490, v491, v492, 0, 3, 2, 4) -> f_311(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v564, v488, v566, v489, v490, v491, v492, 0, 3, 2, 4) :|: TRUE
f_311(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v564, v488, v566, v489, v490, v491, v492, 0, 3, 2, 4) -> f_284(v476, v477, v478, v479, v480, v481, v485, 1, v486, v562, v564, v488, v566, v489, v490, v491, v492, 0, 3, 4) :|: TRUE
f_284(v476, v477, v478, v479, v480, v481, v482, 1, v484, v485, v486, v487, v488, v489, v490, v491, v492, 0, 3, 4) -> f_285(v476, v477, v478, v479, v480, v481, v485, 1, v484, v482, v486, v487, v488, v489, v490, v491, v492, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_285(v476:0, v477:0, v478:0, v479:0, v480:0, v481:0, 1 + v562:0, 1, v484:0, v482:0, 1 + v564:0, v487:0, v488:0, v489:0, v490:0, v491:0, v492:0, 0, 3, 4) -> f_285(v476:0, v477:0, v478:0, v479:0, v480:0, v481:0, v562:0, 1, 1 + v564:0, 1 + v562:0, v564:0, v488:0, 1 + v488:0, v489:0, v490:0, v491:0, v492:0, 0, 3, 4) :|: v482:0 > 1 && v562:0 > -1 && v480:0 > 1 && v484:0 > 1 && v564:0 > -1 && v481:0 > 1 && v488:0 > 0
Filtered unneeded arguments:
   f_285(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_285(x5, x6, x7, x9, x10, x11, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_285(v480:0, v481:0, sum~cons_1~v562:0, v484:0, v482:0, sum~cons_1~v564:0, v488:0) -> f_285(v480:0, v481:0, v562:0, 1 + v564:0, 1 + v562:0, v564:0, 1 + v488:0) :|: v562:0 > -1 && v482:0 > 1 && v480:0 > 1 && v484:0 > 1 && v564:0 > -1 && v488:0 > 0 && v481:0 > 1 && sum~cons_1~v562:0 = 1 + v562:0 && sum~cons_1~v564:0 = 1 + v564:0

----------------------------------------

(8)
Obligation:
Rules:
f_285(v480:0, v481:0, sum~cons_1~v562:0, v484:0, v482:0, sum~cons_1~v564:0, v488:0) -> f_285(v480:0, v481:0, v562:0, 1 + v564:0, 1 + v562:0, v564:0, 1 + v488:0) :|: v562:0 > -1 && v482:0 > 1 && v480:0 > 1 && v484:0 > 1 && v564:0 > -1 && v488:0 > 0 && v481:0 > 1 && sum~cons_1~v562:0 = 1 + v562:0 && sum~cons_1~v564:0 = 1 + v564:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_285(v480:0:0, v481:0:0, sum~cons_1~v562:0:0, v484:0:0, v482:0:0, sum~cons_1~v564:0:0, v488:0:0) -> f_285(v480:0:0, v481:0:0, v562:0:0, 1 + v564:0:0, 1 + v562:0:0, v564:0:0, 1 + v488:0:0) :|: v488:0:0 > 0 && v481:0:0 > 1 && v564:0:0 > -1 && v484:0:0 > 1 && v480:0:0 > 1 && v482:0:0 > 1 && v562:0:0 > -1 && sum~cons_1~v562:0:0 = 1 + v562:0:0 && sum~cons_1~v564:0:0 = 1 + v564:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_285 ] = f_285_6

The following rules are decreasing:
f_285(v480:0:0, v481:0:0, sum~cons_1~v562:0:0, v484:0:0, v482:0:0, sum~cons_1~v564:0:0, v488:0:0) -> f_285(v480:0:0, v481:0:0, v562:0:0, 1 + v564:0:0, 1 + v562:0:0, v564:0:0, 1 + v488:0:0) :|: v488:0:0 > 0 && v481:0:0 > 1 && v564:0:0 > -1 && v484:0:0 > 1 && v480:0:0 > 1 && v482:0:0 > 1 && v562:0:0 > -1 && sum~cons_1~v562:0:0 = 1 + v562:0:0 && sum~cons_1~v564:0:0 = 1 + v564:0:0

The following rules are bounded:
f_285(v480:0:0, v481:0:0, sum~cons_1~v562:0:0, v484:0:0, v482:0:0, sum~cons_1~v564:0:0, v488:0:0) -> f_285(v480:0:0, v481:0:0, v562:0:0, 1 + v564:0:0, 1 + v562:0:0, v564:0:0, 1 + v488:0:0) :|: v488:0:0 > 0 && v481:0:0 > 1 && v564:0:0 > -1 && v484:0:0 > 1 && v480:0:0 > 1 && v482:0:0 > 1 && v562:0:0 > -1 && sum~cons_1~v562:0:0 = 1 + v562:0:0 && sum~cons_1~v564:0:0 = 1 + v564:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
