YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/g1uiH.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 50 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 258 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 42 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/g1uiH.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/g1uiH.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_String" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 11
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i8, align 8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %1
		%4 = load %1
		%5 = icmp slt %4 1
		br %5, %6, %7
	6:
		store 1, %1
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		%8 = load %1
		%9 = sext i32 %8 to i64
		%10 = mul i64 %9, 1
		%11 = call noalias *i8 @malloc(i64 %10)
		store %11, %2
		%12 = load %2
		%13 = load %1
		%14 = sub i32 %13, 1
		%15 = sext i32 %14 to i64
		%16 = getelementptr %12, %15
		store 0, %16
		%17 = load %2
		ret %17

*BasicFunctionTypename: "cstrlen" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 36
	0:
		%2 = alloca *i8, align 8
		%3 = alloca *i8, align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%4 = load %2
		store %4, %3
		br %5
	5:
		%6 = load %3
		%7 = load %6
		%8 = sext i8 %7 to i32
		%9 = icmp ne %8 0
		br %9, %10, %13
	10:
		%11 = load %3
		%12 = getelementptr %11, 1
		store %12, %3
		br %5
	13:
		%14 = load %3
		%15 = load %2
		%16 = ptrtoint *i8 %14 to i64
		%17 = ptrtoint *i8 %15 to i64
		%18 = sub i64 %16, %17
		%19 = trunc i64 %18 to i32
		ret %19

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 57
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call *i8 @__VERIFIER_nondet_String()
		%3 = call i32 @cstrlen(*i8 %2)
		ret %3


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 11 rulesP rules:
f_233(v38, v39, v40, v44, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_234(v38, v39, v40, v44, v52, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: TRUE
f_234(v38, v39, v40, v44, v52, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_235(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, v42, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_235(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, v42, 0, 3, 7, 2, 4, 8) -> f_236(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, v42, 0, 3, 7, 2, 4, 8) :|: v52 != 0 && v44 < v47 && 3 <= v47
f_236(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, v42, 0, 3, 7, 2, 4, 8) -> f_238(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, v42, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_238(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, v42, 0, 3, 7, 2, 4, 8) -> f_240(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, v42, 0, 3, 7, 2, 4, 8) :|: TRUE
f_240(v38, v39, v40, v44, v52, 1, v41, v45, v46, v47, v48, v49, v50, v42, 0, 3, 7, 2, 4, 8) -> f_242(v38, v39, v40, v44, v52, 1, v45, v46, v47, v48, v49, v50, v41, v42, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_242(v38, v39, v40, v44, v52, 1, v45, v46, v47, v48, v49, v50, v41, v42, 0, 3, 7, 2, 4, 8) -> f_244(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, v41, v42, 0, 3, 7, 2, 4, 8) :|: v54 = 1 + v44 && 3 <= v54
f_244(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, v41, v42, 0, 3, 7, 2, 4, 8) -> f_246(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, v41, v42, 0, 3, 7, 2, 4, 8) :|: TRUE
f_246(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, v41, v42, 0, 3, 7, 2, 4, 8) -> f_248(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, v41, v42, 0, 3, 7, 2, 4, 8) :|: TRUE
f_248(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, v41, v42, 0, 3, 7, 2, 4, 8) -> f_232(v38, v39, v40, v44, v52, 1, v54, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: TRUE
f_232(v38, v39, v40, v41, v42, 1, v44, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) -> f_233(v38, v39, v40, v44, v42, 1, v41, v45, v46, v47, v48, v49, v50, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_233(v38:0, v39:0, v40:0, v44:0, v42:0, 1, v41:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) -> f_233(v38:0, v39:0, v40:0, 1 + v44:0, v52:0, 1, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) :|: v47:0 > v44:0 && v52:0 < 0 && v44:0 > 1 && v47:0 > 2
f_233(v38:0, v39:0, v40:0, v44:0, v42:0, 1, v41:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) -> f_233(v38:0, v39:0, v40:0, 1 + v44:0, v52:0, 1, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 0, 3, 7, 2, 4, 8) :|: v47:0 > v44:0 && v52:0 > 0 && v44:0 > 1 && v47:0 > 2
Filtered unneeded arguments:
   f_233(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_233(x4, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_233(v44:0, v47:0) -> f_233(1 + v44:0, v47:0) :|: v44:0 > 1 && v47:0 > 2 && v47:0 > v44:0

----------------------------------------

(8)
Obligation:
Rules:
f_233(v44:0, v47:0) -> f_233(1 + v44:0, v47:0) :|: v44:0 > 1 && v47:0 > 2 && v47:0 > v44:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_233(v44:0:0, v47:0:0) -> f_233(1 + v44:0:0, v47:0:0) :|: v44:0:0 > 1 && v47:0:0 > 2 && v47:0:0 > v44:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_233(x, x1)] = -x + x1

The following rules are decreasing:
f_233(v44:0:0, v47:0:0) -> f_233(1 + v44:0:0, v47:0:0) :|: v44:0:0 > 1 && v47:0:0 > 2 && v47:0:0 > v44:0:0
The following rules are bounded:
f_233(v44:0:0, v47:0:0) -> f_233(1 + v44:0:0, v47:0:0) :|: v44:0:0 > 1 && v47:0:0 > 2 && v47:0:0 > v44:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
