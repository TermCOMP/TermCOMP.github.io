YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ZW4Ao.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 691 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 29 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 11 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) RankingReductionPairProof [EQUIVALENT, 9 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/ZW4Ao.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/ZW4Ao.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "mlog" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca *i32, align 8
		%4 = alloca *i32, align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%5 = alloca i8, numElementsLit: 4, align 16
		%6 = bitcast *i8 %5 to *i32
		store %6, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %4)
		%7 = alloca i8, numElementsLit: 4, align 16
		%8 = bitcast *i8 %7 to *i32
		store %8, %4
		%9 = load %2
		%10 = load %3
		store %9, %10
		%11 = load %4
		store 0, %11
		br %12
	12:
		%13 = load %3
		%14 = load %13
		%15 = icmp sgt %14 1
		br %15, %16, %24
	16:
		%17 = load %3
		%18 = load %17
		%19 = sdiv i32 %18, 2
		%20 = load %3
		store %19, %20
		%21 = load %4
		%22 = load %21
		%23 = add i32 %22, 1
		store %23, %21
		br %12
	24:
		%25 = load %4
		%26 = load %25
		ret %26

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 43
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @mlog(i32 %2)
		ret %3


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_305(v137, v138, v139, v140, v141, v142, v143, 1, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_306(v137, v138, v139, v140, v141, v142, v145, 1, v143, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_306(v137, v138, v139, v140, v141, v142, v145, 1, v143, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_307(v137, v138, v139, v140, v141, v142, v145, 1, v143, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: 1 < v145
f_307(v137, v138, v139, v140, v141, v142, v145, 1, v143, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_309(v137, v138, v139, v140, v141, v142, v145, 1, v143, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_309(v137, v138, v139, v140, v141, v142, v145, 1, v143, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_311(v137, v138, v139, v140, v141, v142, v145, 1, v143, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: TRUE
f_311(v137, v138, v139, v140, v141, v142, v145, 1, v143, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_313(v137, v138, v139, v140, v141, v142, v145, 1, v143, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_313(v137, v138, v139, v140, v141, v142, v145, 1, v143, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_315(v137, v138, v139, v140, v141, v142, v145, 1, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_315(v137, v138, v139, v140, v141, v142, v145, 1, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_317(v137, v138, v139, v140, v141, v142, v145, 1, v156, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: v156 = v145 / 2
f_317(v137, v138, v139, v140, v141, v142, v145, 1, v156, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_319(v137, v138, v139, v140, v141, v142, v145, 1, v156, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_319(v137, v138, v139, v140, v141, v142, v145, 1, v156, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_320(v137, v138, v139, v140, v141, v142, v145, 1, v156, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: TRUE
f_320(v137, v138, v139, v140, v141, v142, v145, 1, v156, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_321(v137, v138, v139, v140, v141, v142, v145, 1, v156, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_321(v137, v138, v139, v140, v141, v142, v145, 1, v156, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_322(v137, v138, v139, v140, v141, v142, v145, 1, v156, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_322(v137, v138, v139, v140, v141, v142, v145, 1, v156, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_323(v137, v138, v139, v140, v141, v142, v145, 1, v156, v147, v158, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: v158 = 1 + v147 && 2 <= v158
f_323(v137, v138, v139, v140, v141, v142, v145, 1, v156, v147, v158, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_324(v137, v138, v139, v140, v141, v142, v145, 1, v156, v147, v158, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: TRUE
f_324(v137, v138, v139, v140, v141, v142, v145, 1, v156, v147, v158, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_325(v137, v138, v139, v140, v141, v142, v145, 1, v156, v147, v158, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: TRUE
f_325(v137, v138, v139, v140, v141, v142, v145, 1, v156, v147, v158, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_304(v137, v138, v139, v140, v141, v142, v145, 1, v156, v147, v158, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: TRUE
f_304(v137, v138, v139, v140, v141, v142, v143, 1, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) -> f_305(v137, v138, v139, v140, v141, v142, v143, 1, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_305(v137:0, v138:0, v139:0, v140:0, v141:0, v142:0, v143:0, 1, v145:0, v146:0, v147:0, v148:0, v149:0, v150:0, v151:0, v152:0, v153:0, v154:0, 0, 3, 7, 2, 4, 8) -> f_305(v137:0, v138:0, v139:0, v140:0, v141:0, v142:0, v145:0, 1, v156:0, v147:0, 1 + v147:0, v148:0, v149:0, v150:0, v151:0, v152:0, v153:0, v154:0, 0, 3, 7, 2, 4, 8) :|: v145:0 > 1 && v147:0 > 0 && v156:0 = v145:0 / 2
Filtered unneeded arguments:
   f_305(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_305(x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_305(v145:0, v147:0) -> f_305'(v145:0, v147:0) :|: v145:0 > 1 && v147:0 > 0
f_305'(v145:0, v147:0) -> f_305(div, 1 + v147:0) :|: v147:0 > 0 && v145:0 > 1 && v145:0 < 0 && v145:0 - 2 * div <= 0 && v145:0 - 2 * div > -2
f_305'(v145:0, v147:0) -> f_305(div, 1 + v147:0) :|: v145:0 > 1 && v147:0 > 0 && v145:0 - 2 * div < 2 && v145:0 - 2 * div >= 0

----------------------------------------

(8)
Obligation:
Rules:
f_305(v145:0, v147:0) -> f_305'(v145:0, v147:0) :|: v145:0 > 1 && v147:0 > 0
f_305'(x, x1) -> f_305(x2, 1 + x1) :|: x1 > 0 && x > 1 && x < 0 && x - 2 * x2 <= 0 && x - 2 * x2 > -2
f_305'(x3, x4) -> f_305(x5, 1 + x4) :|: x3 > 1 && x4 > 0 && x3 - 2 * x5 < 2 && x3 - 2 * x5 >= 0

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(10)
Obligation:
Rules:
f_305(v145:0, v147:0) -> f_305'(v145:0, v147:0) :|: v145:0 > 1 && v147:0 > 0
f_305'(x3, x4) -> f_305(x5, 1 + x4) :|: x3 > 1 && x4 > 0 && x3 - 2 * x5 < 2 && x3 - 2 * x5 >= 0

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_305(v145:0:0, v147:0:0) -> f_305(x5:0, 1 + v147:0:0) :|: v145:0:0 - 2 * x5:0 >= 0 && v145:0:0 - 2 * x5:0 < 2 && v147:0:0 > 0 && v145:0:0 > 1

----------------------------------------

(13) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_305 ] = f_305_1

The following rules are decreasing:
f_305(v145:0:0, v147:0:0) -> f_305(x5:0, 1 + v147:0:0) :|: v145:0:0 - 2 * x5:0 >= 0 && v145:0:0 - 2 * x5:0 < 2 && v147:0:0 > 0 && v145:0:0 > 1

The following rules are bounded:
f_305(v145:0:0, v147:0:0) -> f_305(x5:0, 1 + v147:0:0) :|: v145:0:0 - 2 * x5:0 >= 0 && v145:0:0 - 2 * x5:0 < 2 && v147:0:0 > 0 && v145:0:0 > 1


----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
