YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/jf9b2.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1189 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 22 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 21 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 21 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) RankingReductionPairProof [EQUIVALENT, 14 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/jf9b2.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/jf9b2.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %6
	6:
		%7 = load %3
		%8 = icmp sgt %7 0
		br %8, %9, %23
	9:
		br %10
	10:
		%11 = load %4
		%12 = icmp sgt %11 0
		br %12, %13, %18
	13:
		%14 = load %4
		%15 = sub i32 %14, 1
		store %15, %4
		%16 = load %5
		%17 = add i32 %16, 1
		store %17, %5
		br %10
	18:
		%19 = load %3
		%20 = sub i32 %19, 1
		store %20, %3
		%21 = load %5
		%22 = add i32 %21, 1
		store %22, %5
		br %6
	23:
		%24 = load %5
		ret %24

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 44
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_462(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) -> f_463(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) :|: 0 < v451 && 2 <= v446 && 2 <= v441
f_463(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) -> f_465(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) :|: 0 = 0
f_465(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) -> f_467(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) :|: TRUE
f_467(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) -> f_469(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) :|: TRUE
f_469(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) -> f_471(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) :|: 0 = 0
f_471(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) -> f_473(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) :|: 0 = 0
f_473(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) -> f_474(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) :|: TRUE
f_474(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) -> f_475(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) :|: 0 = 0
f_475(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) -> f_476(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v475, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) :|: 1 + v475 = v451 && 0 <= v475
f_476(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v475, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) -> f_477(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v475, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) :|: TRUE
f_477(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v475, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) -> f_478(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v475, v453, v454, v455, v456, v457, v458, 3, 2, 4) :|: 0 = 0
f_478(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v475, v453, v454, v455, v456, v457, v458, 3, 2, 4) -> f_479(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v475, v453, v477, v454, v455, v456, v457, v458, 3, 2, 4) :|: v477 = 1 + v453 && 3 <= v477
f_479(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v475, v453, v477, v454, v455, v456, v457, v458, 3, 2, 4) -> f_480(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v475, v453, v477, v454, v455, v456, v457, v458, 3, 2, 4) :|: TRUE
f_480(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v475, v453, v477, v454, v455, v456, v457, v458, 3, 2, 4) -> f_481(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v475, v453, v477, v454, v455, v456, v457, v458, 3, 2, 4) :|: TRUE
f_481(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v475, v453, v477, v454, v455, v456, v457, v458, 3, 2, 4) -> f_461(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v475, v453, v477, v454, v455, v456, v457, v458, 3, 2, 4) :|: TRUE
f_461(v441, v442, v443, v444, v445, v446, 1, 0, v449, v450, v451, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) -> f_462(v441, v442, v443, v444, v445, v451, 1, 0, v449, v450, v446, v452, v453, v454, v455, v456, v457, v458, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_462(v441:0, v442:0, v443:0, v444:0, v445:0, 1 + v475:0, 1, 0, v449:0, v450:0, v446:0, v452:0, v453:0, v454:0, v455:0, v456:0, v457:0, v458:0, 3, 2, 4) -> f_462(v441:0, v442:0, v443:0, v444:0, v445:0, v475:0, 1, 0, v449:0, v450:0, 1 + v475:0, v453:0, 1 + v453:0, v454:0, v455:0, v456:0, v457:0, v458:0, 3, 2, 4) :|: v446:0 > 1 && v475:0 > -1 && v441:0 > 1 && v453:0 > 1
Filtered unneeded arguments:
   f_462(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_462(x1, x6, x11, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_462(v441:0, sum~cons_1~v475:0, v446:0, v453:0) -> f_462(v441:0, v475:0, 1 + v475:0, 1 + v453:0) :|: v475:0 > -1 && v446:0 > 1 && v453:0 > 1 && v441:0 > 1 && sum~cons_1~v475:0 = 1 + v475:0

----------------------------------------

(9)
Obligation:
Rules:
f_462(v441:0, sum~cons_1~v475:0, v446:0, v453:0) -> f_462(v441:0, v475:0, 1 + v475:0, 1 + v453:0) :|: v475:0 > -1 && v446:0 > 1 && v453:0 > 1 && v441:0 > 1 && sum~cons_1~v475:0 = 1 + v475:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_462(v441:0:0, sum~cons_1~v475:0:0, v446:0:0, v453:0:0) -> f_462(v441:0:0, v475:0:0, 1 + v475:0:0, 1 + v453:0:0) :|: v453:0:0 > 1 && v441:0:0 > 1 && v446:0:0 > 1 && v475:0:0 > -1 && sum~cons_1~v475:0:0 = 1 + v475:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_462 ] = f_462_2

The following rules are decreasing:
f_462(v441:0:0, sum~cons_1~v475:0:0, v446:0:0, v453:0:0) -> f_462(v441:0:0, v475:0:0, 1 + v475:0:0, 1 + v453:0:0) :|: v453:0:0 > 1 && v441:0:0 > 1 && v446:0:0 > 1 && v475:0:0 > -1 && sum~cons_1~v475:0:0 = 1 + v475:0:0

The following rules are bounded:
f_462(v441:0:0, sum~cons_1~v475:0:0, v446:0:0, v453:0:0) -> f_462(v441:0:0, v475:0:0, 1 + v475:0:0, 1 + v453:0:0) :|: v453:0:0 > 1 && v441:0:0 > 1 && v446:0:0 > 1 && v475:0:0 > -1 && sum~cons_1~v475:0:0 = 1 + v475:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_415(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 4) -> f_417(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) :|: 0 < v333 && 2 <= v330 && 2 <= v325
f_417(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) -> f_420(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) :|: 0 = 0
f_420(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) -> f_423(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) :|: TRUE
f_423(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) -> f_426(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) :|: TRUE
f_426(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) -> f_430(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) :|: 0 = 0
f_430(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) -> f_433(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) :|: 0 = 0
f_433(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) -> f_436(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) :|: TRUE
f_436(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) -> f_439(v325, v326, v327, v328, v329, v333, 1, 0, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) :|: 0 = 0
f_439(v325, v326, v327, v328, v329, v333, 1, 0, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) -> f_442(v325, v326, v327, v328, v329, v333, 1, 0, v390, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) :|: 1 + v390 = v333 && 0 <= v390
f_442(v325, v326, v327, v328, v329, v333, 1, 0, v390, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) -> f_445(v325, v326, v327, v328, v329, v333, 1, 0, v390, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) :|: TRUE
f_445(v325, v326, v327, v328, v329, v333, 1, 0, v390, v334, v335, v336, v337, v338, v339, v340, 3, 2, 4) -> f_448(v325, v326, v327, v328, v329, v333, 1, 0, v390, v335, v336, v337, v338, v339, v340, 3, 2, 4) :|: 0 = 0
f_448(v325, v326, v327, v328, v329, v333, 1, 0, v390, v335, v336, v337, v338, v339, v340, 3, 2, 4) -> f_450(v325, v326, v327, v328, v329, v333, 1, 0, v390, v335, v399, v336, v337, v338, v339, v340, 3, 2, 4) :|: v399 = 1 + v335 && 2 <= v399
f_450(v325, v326, v327, v328, v329, v333, 1, 0, v390, v335, v399, v336, v337, v338, v339, v340, 3, 2, 4) -> f_452(v325, v326, v327, v328, v329, v333, 1, 0, v390, v335, v399, v336, v337, v338, v339, v340, 3, 2, 4) :|: TRUE
f_452(v325, v326, v327, v328, v329, v333, 1, 0, v390, v335, v399, v336, v337, v338, v339, v340, 3, 2, 4) -> f_454(v325, v326, v327, v328, v329, v333, 1, 0, v390, v335, v399, v336, v337, v338, v339, v340, 3, 2, 4) :|: TRUE
f_454(v325, v326, v327, v328, v329, v333, 1, 0, v390, v335, v399, v336, v337, v338, v339, v340, 3, 2, 4) -> f_413(v325, v326, v327, v328, v329, v333, 1, 0, v390, v335, v399, v336, v337, v338, v339, v340, 3, 4) :|: TRUE
f_413(v325, v326, v327, v328, v329, v330, 1, 0, v333, v334, v335, v336, v337, v338, v339, v340, 3, 4) -> f_415(v325, v326, v327, v328, v329, v333, 1, 0, v330, v334, v335, v336, v337, v338, v339, v340, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_415(v325:0, v326:0, v327:0, v328:0, v329:0, 1 + v390:0, 1, 0, v330:0, v334:0, v335:0, v336:0, v337:0, v338:0, v339:0, v340:0, 3, 4) -> f_415(v325:0, v326:0, v327:0, v328:0, v329:0, v390:0, 1, 0, 1 + v390:0, v335:0, 1 + v335:0, v336:0, v337:0, v338:0, v339:0, v340:0, 3, 4) :|: v330:0 > 1 && v390:0 > -1 && v325:0 > 1 && v335:0 > 0
Filtered unneeded arguments:
   f_415(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_415(x1, x6, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_415(v325:0, sum~cons_1~v390:0, v330:0, v335:0) -> f_415(v325:0, v390:0, 1 + v390:0, 1 + v335:0) :|: v390:0 > -1 && v330:0 > 1 && v335:0 > 0 && v325:0 > 1 && sum~cons_1~v390:0 = 1 + v390:0

----------------------------------------

(16)
Obligation:
Rules:
f_415(v325:0, sum~cons_1~v390:0, v330:0, v335:0) -> f_415(v325:0, v390:0, 1 + v390:0, 1 + v335:0) :|: v390:0 > -1 && v330:0 > 1 && v335:0 > 0 && v325:0 > 1 && sum~cons_1~v390:0 = 1 + v390:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_415(v325:0:0, sum~cons_1~v390:0:0, v330:0:0, v335:0:0) -> f_415(v325:0:0, v390:0:0, 1 + v390:0:0, 1 + v335:0:0) :|: v335:0:0 > 0 && v325:0:0 > 1 && v330:0:0 > 1 && v390:0:0 > -1 && sum~cons_1~v390:0:0 = 1 + v390:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_415(x, x1, x2, x3)] = -1 + x1

The following rules are decreasing:
f_415(v325:0:0, sum~cons_1~v390:0:0, v330:0:0, v335:0:0) -> f_415(v325:0:0, v390:0:0, 1 + v390:0:0, 1 + v335:0:0) :|: v335:0:0 > 0 && v325:0:0 > 1 && v330:0:0 > 1 && v390:0:0 > -1 && sum~cons_1~v390:0:0 = 1 + v390:0:0
The following rules are bounded:
f_415(v325:0:0, sum~cons_1~v390:0:0, v330:0:0, v335:0:0) -> f_415(v325:0:0, v390:0:0, 1 + v390:0:0, 1 + v335:0:0) :|: v335:0:0 > 0 && v325:0:0 > 1 && v330:0:0 > 1 && v390:0:0 > -1 && sum~cons_1~v390:0:0 = 1 + v390:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_352(v206, v207, v208, v209, v210, 1, v213, v212, v214, v215, v216, v217, v218, v219, v220, 0, 3, 4) -> f_354(v206, v207, v208, v209, v210, 1, v213, v212, v214, v215, v216, v217, v218, v219, v220, 0, 3, 2, 4) :|: 0 < v213 && 2 <= v212 && 2 <= v207
f_354(v206, v207, v208, v209, v210, 1, v213, v212, v214, v215, v216, v217, v218, v219, v220, 0, 3, 2, 4) -> f_357(v206, v207, v208, v209, v210, 1, v213, v212, v214, v215, v216, v217, v218, v219, v220, 0, 3, 2, 4) :|: 0 = 0
f_357(v206, v207, v208, v209, v210, 1, v213, v212, v214, v215, v216, v217, v218, v219, v220, 0, 3, 2, 4) -> f_360(v206, v207, v208, v209, v210, 1, v213, v212, v214, v215, v216, v217, v218, v219, v220, 0, 3, 2, 4) :|: TRUE
f_360(v206, v207, v208, v209, v210, 1, v213, v212, v214, v215, v216, v217, v218, v219, v220, 0, 3, 2, 4) -> f_363(v206, v207, v208, v209, v210, 1, v213, v214, v215, v216, v217, v218, v219, v220, 0, 3, 2, 4) :|: 0 = 0
f_363(v206, v207, v208, v209, v210, 1, v213, v214, v215, v216, v217, v218, v219, v220, 0, 3, 2, 4) -> f_367(v206, v207, v208, v209, v210, 1, v213, v250, v214, v215, v216, v217, v218, v219, v220, 0, 3, 2, 4) :|: 1 + v250 = v213 && 0 <= v250
f_367(v206, v207, v208, v209, v210, 1, v213, v250, v214, v215, v216, v217, v218, v219, v220, 0, 3, 2, 4) -> f_370(v206, v207, v208, v209, v210, 1, v213, v250, v214, v215, v216, v217, v218, v219, v220, 0, 3, 2, 4) :|: TRUE
f_370(v206, v207, v208, v209, v210, 1, v213, v250, v214, v215, v216, v217, v218, v219, v220, 0, 3, 2, 4) -> f_374(v206, v207, v208, v209, v210, 1, v213, v250, v215, v216, v217, v218, v219, v220, 0, 3, 2, 4) :|: 0 = 0
f_374(v206, v207, v208, v209, v210, 1, v213, v250, v215, v216, v217, v218, v219, v220, 0, 3, 2, 4) -> f_378(v206, v207, v208, v209, v210, 1, v213, v250, v215, v254, v216, v217, v218, v219, v220, 0, 3, 2, 4) :|: v254 = 1 + v215 && 2 <= v254
f_378(v206, v207, v208, v209, v210, 1, v213, v250, v215, v254, v216, v217, v218, v219, v220, 0, 3, 2, 4) -> f_382(v206, v207, v208, v209, v210, 1, v213, v250, v215, v254, v216, v217, v218, v219, v220, 0, 3, 2, 4) :|: TRUE
f_382(v206, v207, v208, v209, v210, 1, v213, v250, v215, v254, v216, v217, v218, v219, v220, 0, 3, 2, 4) -> f_386(v206, v207, v208, v209, v210, 1, v213, v250, v215, v254, v216, v217, v218, v219, v220, 0, 3, 2, 4) :|: TRUE
f_386(v206, v207, v208, v209, v210, 1, v213, v250, v215, v254, v216, v217, v218, v219, v220, 0, 3, 2, 4) -> f_350(v206, v207, v208, v209, v210, 1, v213, v250, v215, v254, v216, v217, v218, v219, v220, 0, 3, 4) :|: TRUE
f_350(v206, v207, v208, v209, v210, 1, v212, v213, v214, v215, v216, v217, v218, v219, v220, 0, 3, 4) -> f_352(v206, v207, v208, v209, v210, 1, v213, v212, v214, v215, v216, v217, v218, v219, v220, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_352(v206:0, v207:0, v208:0, v209:0, v210:0, 1, 1 + v250:0, v212:0, v214:0, v215:0, v216:0, v217:0, v218:0, v219:0, v220:0, 0, 3, 4) -> f_352(v206:0, v207:0, v208:0, v209:0, v210:0, 1, v250:0, 1 + v250:0, v215:0, 1 + v215:0, v216:0, v217:0, v218:0, v219:0, v220:0, 0, 3, 4) :|: v212:0 > 1 && v250:0 > -1 && v207:0 > 1 && v215:0 > 0
Filtered unneeded arguments:
   f_352(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_352(x2, x7, x8, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_352(v207:0, sum~cons_1~v250:0, v212:0, v215:0) -> f_352(v207:0, v250:0, 1 + v250:0, 1 + v215:0) :|: v250:0 > -1 && v212:0 > 1 && v215:0 > 0 && v207:0 > 1 && sum~cons_1~v250:0 = 1 + v250:0

----------------------------------------

(23)
Obligation:
Rules:
f_352(v207:0, sum~cons_1~v250:0, v212:0, v215:0) -> f_352(v207:0, v250:0, 1 + v250:0, 1 + v215:0) :|: v250:0 > -1 && v212:0 > 1 && v215:0 > 0 && v207:0 > 1 && sum~cons_1~v250:0 = 1 + v250:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_352(v207:0:0, sum~cons_1~v250:0:0, v212:0:0, v215:0:0) -> f_352(v207:0:0, v250:0:0, 1 + v250:0:0, 1 + v215:0:0) :|: v215:0:0 > 0 && v207:0:0 > 1 && v212:0:0 > 1 && v250:0:0 > -1 && sum~cons_1~v250:0:0 = 1 + v250:0:0

----------------------------------------

(26) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_352 ] = f_352_2

The following rules are decreasing:
f_352(v207:0:0, sum~cons_1~v250:0:0, v212:0:0, v215:0:0) -> f_352(v207:0:0, v250:0:0, 1 + v250:0:0, 1 + v215:0:0) :|: v215:0:0 > 0 && v207:0:0 > 1 && v212:0:0 > 1 && v250:0:0 > -1 && sum~cons_1~v250:0:0 = 1 + v250:0:0

The following rules are bounded:
f_352(v207:0:0, sum~cons_1~v250:0:0, v212:0:0, v215:0:0) -> f_352(v207:0:0, v250:0:0, 1 + v250:0:0, 1 + v215:0:0) :|: v215:0:0 > 0 && v207:0:0 > 1 && v212:0:0 > 1 && v250:0:0 > -1 && sum~cons_1~v250:0:0 = 1 + v250:0:0


----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
