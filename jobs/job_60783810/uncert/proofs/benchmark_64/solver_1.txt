YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/YUZQb.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 72 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 18.0 s]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 20 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 12 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/YUZQb.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/YUZQb.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "iterate" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca *i32, align 8
		%4 = alloca *i32, align 8
		%5 = alloca *i32, align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%6 = alloca i8, numElementsLit: 4, align 16
		%7 = bitcast *i8 %6 to *i32
		store %7, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %4)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %5
		%12 = load %2
		%13 = load %3
		store %12, %13
		%14 = load %5
		store 0, %14
		%15 = load %4
		store 0, %15
		br %16
	16:
		%17 = load %4
		%18 = load %17
		%19 = load %3
		%20 = load %19
		%21 = icmp slt %18 %20
		br %21, %22, %32
	22:
		%23 = load %4
		%24 = load %23
		%25 = load %5
		%26 = load %25
		%27 = add i32 %26, %24
		store %27, %25
		br %28
	28:
		%29 = load %4
		%30 = load %29
		%31 = add i32 %30, 1
		store %31, %29
		br %16
	32:
		%33 = load %5
		%34 = load %33
		ret %34

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 54
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @iterate(i32 %2)
		ret %3


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_373(v156, v157, v158, v159, v160, v161, v162, v163, v164, 1, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 4, 8) -> f_374(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v164, v166, v167, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 4, 8) :|: 0 = 0
f_374(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v164, v166, v167, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 4, 8) -> f_375(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v164, v166, v167, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 4, 8) :|: 0 = 0
f_375(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v164, v166, v167, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 4, 8) -> f_376(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v164, v166, v167, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 4, 8) :|: 0 = 0
f_376(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v164, v166, v167, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 4, 8) -> f_377(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v164, v166, v167, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) :|: v168 < v156 && 2 <= v156
f_377(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v164, v166, v167, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) -> f_379(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v164, v166, v167, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_379(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v164, v166, v167, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) -> f_381(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v164, v166, v167, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) :|: TRUE
f_381(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v164, v166, v167, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) -> f_383(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v164, v166, v167, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_383(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v164, v166, v167, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) -> f_385(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v166, v167, v164, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_385(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v166, v167, v164, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) -> f_387(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v166, v167, v164, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_387(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v166, v167, v164, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) -> f_389(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v164, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_389(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v164, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) -> f_390(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v164, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) :|: v179 = v167 + v168 && 1 <= v179
f_390(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v164, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) -> f_391(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v164, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) :|: TRUE
f_391(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v164, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) -> f_392(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v164, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) :|: TRUE
f_392(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v164, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) -> f_393(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v164, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_393(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v164, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) -> f_394(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_394(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) -> f_395(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v181, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) :|: v181 = 1 + v168 && 2 <= v181
f_395(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v181, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) -> f_396(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v181, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) :|: TRUE
f_396(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v181, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) -> f_397(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v181, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) :|: TRUE
f_397(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v181, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 2, 4, 8) -> f_372(v156, v157, v158, v159, v160, v161, v162, v163, v168, 1, v167, v179, v181, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 4, 8) :|: TRUE
f_372(v156, v157, v158, v159, v160, v161, v162, v163, v164, 1, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 4, 8) -> f_373(v156, v157, v158, v159, v160, v161, v162, v163, v164, 1, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_373(v156:0, v157:0, v158:0, v159:0, v160:0, v161:0, v162:0, v163:0, v164:0, 1, v166:0, v167:0, v168:0, v169:0, v170:0, v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, 0, 3, 7, 4, 8) -> f_373(v156:0, v157:0, v158:0, v159:0, v160:0, v161:0, v162:0, v163:0, v168:0, 1, v167:0, v167:0 + v168:0, 1 + v168:0, v169:0, v170:0, v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, 0, 3, 7, 4, 8) :|: v156:0 > 1 && v168:0 < v156:0 && v168:0 > 0 && v167:0 + v168:0 > 0
Filtered unneeded arguments:
   f_373(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_373(x1, x12, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_373(v156:0, v167:0, v168:0) -> f_373(v156:0, v167:0 + v168:0, 1 + v168:0) :|: v168:0 < v156:0 && v156:0 > 1 && v167:0 + v168:0 > 0 && v168:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f_373(v156:0, v167:0, v168:0) -> f_373(v156:0, v167:0 + v168:0, 1 + v168:0) :|: v168:0 < v156:0 && v156:0 > 1 && v167:0 + v168:0 > 0 && v168:0 > 0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_373(v156:0:0, v167:0:0, v168:0:0) -> f_373(v156:0:0, v167:0:0 + v168:0:0, 1 + v168:0:0) :|: v167:0:0 + v168:0:0 > 0 && v168:0:0 > 0 && v156:0:0 > 1 && v168:0:0 < v156:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_373 ] = -1*f_373_3 + f_373_1

The following rules are decreasing:
f_373(v156:0:0, v167:0:0, v168:0:0) -> f_373(v156:0:0, v167:0:0 + v168:0:0, 1 + v168:0:0) :|: v167:0:0 + v168:0:0 > 0 && v168:0:0 > 0 && v156:0:0 > 1 && v168:0:0 < v156:0:0

The following rules are bounded:
f_373(v156:0:0, v167:0:0, v168:0:0) -> f_373(v156:0:0, v167:0:0 + v168:0:0, 1 + v168:0:0) :|: v167:0:0 + v168:0:0 > 0 && v168:0:0 > 0 && v156:0:0 > 1 && v168:0:0 < v156:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
