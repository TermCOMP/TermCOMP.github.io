YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/cObmH.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1577 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 36 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 36 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/cObmH.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/cObmH.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		store 0, %2
		br %7
	7:
		%8 = load %3
		%9 = icmp sge %8 0
		br %9, %10, %25
	10:
		%11 = load %3
		%12 = add i32 %11, 1
		store %12, %3
		store 1, %4
		br %13
	13:
		%14 = load %3
		%15 = load %4
		%16 = icmp sgt %14 %15
		br %16, %17, %22
	17:
		%18 = load %4
		%19 = add i32 %18, 1
		store %19, %4
		%20 = load %2
		%21 = add i32 %20, 1
		store %21, %2
		br %13
	22:
		%23 = load %3
		%24 = sub i32 %23, 2
		store %24, %3
		br %7
	25:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 54 rulesP rules:
f_442(v675, v676, v677, v678, v679, v680, v681, 1, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) -> f_443(v675, v676, v677, v678, v679, v680, v681, 1, v683, 0, v685, v686, v687, v688, v694, v690, v691, v692, v693, 3, 2, 4) :|: 2 + v694 = v683 && 0 <= 1 + v694
f_443(v675, v676, v677, v678, v679, v680, v681, 1, v683, 0, v685, v686, v687, v688, v694, v690, v691, v692, v693, 3, 2, 4) -> f_444(v675, v676, v677, v678, v679, v680, v681, 1, v683, 0, v685, v686, v687, v688, v694, v690, v691, v692, v693, 3, 2, 4) :|: TRUE
f_444(v675, v676, v677, v678, v679, v680, v681, 1, v683, 0, v685, v686, v687, v688, v694, v690, v691, v692, v693, 3, 2, 4) -> f_445(v675, v676, v677, v678, v679, v680, v681, 1, v683, 0, v685, v686, v687, v688, v694, v690, v691, v692, v693, 3, 2, 4) :|: TRUE
f_445(v675, v676, v677, v678, v679, v680, v681, 1, v683, 0, v685, v686, v687, v688, v694, v690, v691, v692, v693, 3, 2, 4) -> f_446(v675, v676, v677, v678, v679, v680, v694, 1, v681, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) :|: 0 = 0
f_446(v675, v676, v677, v678, v679, v680, v694, 1, v681, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) -> f_447(v675, v676, v677, v678, v679, v680, v694, 1, v681, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) :|: 0 <= v694 && 2 <= v683 && 1 <= v681 && 2 <= v679 && 1 <= v687 && 2 <= v688
f_447(v675, v676, v677, v678, v679, v680, v694, 1, v681, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) -> f_449(v675, v676, v677, v678, v679, v680, v694, 1, v681, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) :|: 0 = 0
f_449(v675, v676, v677, v678, v679, v680, v694, 1, v681, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) -> f_451(v675, v676, v677, v678, v679, v680, v694, 1, v681, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) :|: TRUE
f_451(v675, v676, v677, v678, v679, v680, v694, 1, v681, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) -> f_453(v675, v676, v677, v678, v679, v680, v694, 1, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) :|: 0 = 0
f_453(v675, v676, v677, v678, v679, v680, v694, 1, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) -> f_454(v675, v676, v677, v678, v679, v680, v694, 1, v737, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) :|: v737 = 1 + v694 && 1 <= v737
f_454(v675, v676, v677, v678, v679, v680, v694, 1, v737, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) -> f_455(v675, v676, v677, v678, v679, v680, v694, 1, v737, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) :|: TRUE
f_455(v675, v676, v677, v678, v679, v680, v694, 1, v737, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) -> f_456(v675, v676, v677, v678, v679, v680, v694, 1, v737, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) :|: TRUE
f_456(v675, v676, v677, v678, v679, v680, v694, 1, v737, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) -> f_457(v675, v676, v677, v678, v679, v680, v694, 1, v737, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) :|: TRUE
f_457(v675, v676, v677, v678, v679, v680, v694, 1, v737, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) -> f_458(v675, v676, v677, v678, v679, v680, v694, 1, v737, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) :|: TRUE
f_458(v761, v762, v763, v764, v765, v766, v767, 1, v769, v770, 0, v772, v773, v774, v775, v776, v777, v778, v779, 3, 2, 4) -> f_459(v761, v762, v763, v764, v765, v766, v767, 1, v769, v770, 0, v772, v773, v774, v775, v776, v777, v778, v779, 3, 2, 4) :|: 0 = 0
f_459(v761, v762, v763, v764, v765, v766, v767, 1, v769, v770, 0, v772, v773, v774, v775, v776, v777, v778, v779, 3, 2, 4) -> f_460(v761, v762, v763, v764, v765, v766, v767, 1, v769, 0, v772, v773, v774, v775, v770, v776, v777, v778, v779, 3, 2, 4) :|: 0 = 0
f_460(v761, v762, v763, v764, v765, v766, v767, 1, v769, 0, v772, v773, v774, v775, v770, v776, v777, v778, v779, 3, 2, 4) -> f_461(v761, v762, v763, v764, v765, v766, v767, 1, v769, 0, v772, v773, v774, v775, v770, v776, v777, v778, v779, 3, 2, 4) :|: 1 < v769 && 1 <= v767 && 3 <= v770 && 3 <= v773 && 2 <= v772 && 2 <= v765
f_460(v761, v762, v763, v764, v765, v766, v767, 1, v769, 0, v772, v773, v774, v775, v770, v776, v777, v778, v779, 3, 2, 4) -> f_462(v761, v762, v763, v764, v765, v766, 0, 1, v772, v773, v774, v775, 2, v776, v777, v778, v779, 3, 4) :|: v769 <= 1 && v767 = 0 && v769 = 1 && 0 = 0 && v770 = 2
f_461(v761, v762, v763, v764, v765, v766, v767, 1, v769, 0, v772, v773, v774, v775, v770, v776, v777, v778, v779, 3, 2, 4) -> f_463(v761, v762, v763, v764, v765, v766, v767, 1, v769, v772, v773, v774, v775, v770, v776, v777, v778, v779, 0, 3, 2, 4) :|: 0 = 0
f_463(v761, v762, v763, v764, v765, v766, v767, 1, v769, v772, v773, v774, v775, v770, v776, v777, v778, v779, 0, 3, 2, 4) -> f_465(v761, v762, v763, v764, v765, v766, v767, 1, v769, v772, v773, v774, v775, v770, v776, v777, v778, v779, 0, 3, 2, 4) :|: TRUE
f_465(v761, v762, v763, v764, v765, v766, v767, 1, v769, v772, v773, v774, v775, v770, v776, v777, v778, v779, 0, 3, 2, 4) -> f_482(v761, v762, v763, v764, v765, v766, v767, 1, v769, 1, v772, v773, v774, v775, v770, v776, v777, v778, v779, 0, 3, 2, 4) :|: TRUE
f_482(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v899, v900, v901, v902, v903, v904, v905, v906, v907, 0, 3, 2, 4) -> f_484(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v900, v901, v902, v903, v904, v905, v906, v907, 0, 3, 2, 4) :|: 0 = 0
f_484(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v900, v901, v902, v903, v904, v905, v906, v907, 0, 3, 2, 4) -> f_485(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v935, v901, v902, v903, v904, v905, v906, v907, 0, 3, 2, 4) :|: v935 = 1 + v898 && 2 <= v935
f_485(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v935, v901, v902, v903, v904, v905, v906, v907, 0, 3, 2, 4) -> f_486(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v935, v901, v902, v903, v904, v905, v906, v907, 0, 3, 2, 4) :|: TRUE
f_486(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v935, v901, v902, v903, v904, v905, v906, v907, 0, 3, 2, 4) -> f_487(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v935, v902, v903, v904, v905, v906, v907, 0, 3, 2, 4) :|: 0 = 0
f_487(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v935, v902, v903, v904, v905, v906, v907, 0, 3, 2, 4) -> f_488(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v935, v902, v937, v903, v904, v905, v906, v907, 0, 3, 2, 4) :|: v937 = 1 + v902 && 2 <= v937
f_488(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v935, v902, v937, v903, v904, v905, v906, v907, 0, 3, 2, 4) -> f_489(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v935, v902, v937, v903, v904, v905, v906, v907, 0, 3, 2, 4) :|: TRUE
f_489(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v935, v902, v937, v903, v904, v905, v906, v907, 0, 3, 2, 4) -> f_490(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v935, v902, v937, v903, v904, v905, v906, v907, 0, 3, 2, 4) :|: TRUE
f_490(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v935, v902, v937, v903, v904, v905, v906, v907, 0, 3, 2, 4) -> f_491(v889, v890, v891, v892, v893, v894, v895, 1, v897, v898, v935, v902, v937, v903, v904, v905, v906, v907, 0, 3, 2, 4) :|: TRUE
f_491(v963, v964, v965, v966, v967, v968, v969, 1, v971, v972, v973, v974, v975, v976, v977, v978, v979, v980, 0, 3, 2, 4) -> f_492(v963, v964, v965, v966, v967, v968, v969, 1, v971, v972, v973, v974, v975, v976, v977, v978, v979, v980, 0, 3, 2, 4) :|: 0 = 0
f_492(v963, v964, v965, v966, v967, v968, v969, 1, v971, v972, v973, v974, v975, v976, v977, v978, v979, v980, 0, 3, 2, 4) -> f_493(v963, v964, v965, v966, v967, v968, v969, 1, v971, v973, v972, v974, v975, v976, v977, v978, v979, v980, 0, 3, 2, 4) :|: 0 = 0
f_493(v963, v964, v965, v966, v967, v968, v969, 1, v971, v973, v972, v974, v975, v976, v977, v978, v979, v980, 0, 3, 2, 4) -> f_494(v963, v964, v965, v966, v967, v968, v969, 1, v971, v973, v972, v974, v975, v976, v977, v978, v979, v980, 0, 3, 2, 4) :|: v973 < v971 && 3 <= v971 && 2 <= v969 && 4 <= v976 && 3 <= v967
f_493(v963, v964, v965, v966, v967, v968, v969, 1, v971, v973, v972, v974, v975, v976, v977, v978, v979, v980, 0, 3, 2, 4) -> f_495(v963, v964, v965, v966, v967, v968, v972, 1, v973, v974, v975, v976, v977, v978, v979, v980, 0, 3, 2, 4) :|: v971 <= v973 && v971 = v973 && v969 = v972
f_494(v963, v964, v965, v966, v967, v968, v969, 1, v971, v973, v972, v974, v975, v976, v977, v978, v979, v980, 0, 3, 2, 4) -> f_496(v963, v964, v965, v966, v967, v968, v969, 1, v971, v973, v972, v974, v975, v976, v977, v978, v979, v980, 0, 3, 2, 4) :|: 0 = 0
f_496(v963, v964, v965, v966, v967, v968, v969, 1, v971, v973, v972, v974, v975, v976, v977, v978, v979, v980, 0, 3, 2, 4) -> f_498(v963, v964, v965, v966, v967, v968, v969, 1, v971, v973, v972, v974, v975, v976, v977, v978, v979, v980, 0, 3, 2, 4) :|: TRUE
f_498(v963, v964, v965, v966, v967, v968, v969, 1, v971, v973, v972, v974, v975, v976, v977, v978, v979, v980, 0, 3, 2, 4) -> f_482(v963, v964, v965, v966, v967, v968, v969, 1, v971, v973, v972, v973, v974, v975, v976, v977, v978, v979, v980, 0, 3, 2, 4) :|: TRUE
f_495(v963, v964, v965, v966, v967, v968, v972, 1, v973, v974, v975, v976, v977, v978, v979, v980, 0, 3, 2, 4) -> f_497(v963, v964, v965, v966, v967, v968, v972, 1, v973, 0, v974, v975, v976, v977, v978, v979, v980, 3, 2, 4) :|: 0 = 0
f_497(v963, v964, v965, v966, v967, v968, v972, 1, v973, 0, v974, v975, v976, v977, v978, v979, v980, 3, 2, 4) -> f_499(v963, v964, v965, v966, v967, v968, v972, 1, v973, 0, v974, v975, v976, v977, v978, v979, v980, 3, 2, 4) :|: TRUE
f_499(v963, v964, v965, v966, v967, v968, v972, 1, v973, 0, v974, v975, v976, v977, v978, v979, v980, 3, 2, 4) -> f_500(v963, v964, v965, v966, v967, v968, v972, 1, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) :|: 0 = 0
f_500(v963, v964, v965, v966, v967, v968, v972, 1, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) -> f_501(v963, v964, v965, v966, v967, v968, v972, 1, v973, 0, v974, v975, v1041, v977, v978, v979, v980, 3, 2, 4) :|: 2 + v1041 = v973 && 0 <= v1041
f_501(v963, v964, v965, v966, v967, v968, v972, 1, v973, 0, v974, v975, v1041, v977, v978, v979, v980, 3, 2, 4) -> f_502(v963, v964, v965, v966, v967, v968, v972, 1, v973, 0, v974, v975, v1041, v977, v978, v979, v980, 3, 2, 4) :|: TRUE
f_502(v963, v964, v965, v966, v967, v968, v972, 1, v973, 0, v974, v975, v1041, v977, v978, v979, v980, 3, 2, 4) -> f_503(v963, v964, v965, v966, v967, v968, v972, 1, v973, 0, v974, v975, v1041, v977, v978, v979, v980, 3, 2, 4) :|: TRUE
f_503(v963, v964, v965, v966, v967, v968, v972, 1, v973, 0, v974, v975, v1041, v977, v978, v979, v980, 3, 2, 4) -> f_504(v963, v964, v965, v966, v967, v968, v1041, 1, v972, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) :|: 0 = 0
f_504(v963, v964, v965, v966, v967, v968, v1041, 1, v972, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) -> f_505(v963, v964, v965, v966, v967, v968, v1041, 1, v972, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) :|: 0 = 0
f_505(v963, v964, v965, v966, v967, v968, v1041, 1, v972, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) -> f_506(v963, v964, v965, v966, v967, v968, v1041, 1, v972, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) :|: TRUE
f_506(v963, v964, v965, v966, v967, v968, v1041, 1, v972, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) -> f_507(v963, v964, v965, v966, v967, v968, v1041, 1, v973, 0, v972, v974, v975, v977, v978, v979, v980, 3, 2, 4) :|: 0 = 0
f_507(v963, v964, v965, v966, v967, v968, v1041, 1, v973, 0, v972, v974, v975, v977, v978, v979, v980, 3, 2, 4) -> f_508(v963, v964, v965, v966, v967, v968, v1041, 1, v972, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) :|: v972 = 1 + v1041
f_508(v963, v964, v965, v966, v967, v968, v1041, 1, v972, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) -> f_509(v963, v964, v965, v966, v967, v968, v1041, 1, v972, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) :|: TRUE
f_509(v963, v964, v965, v966, v967, v968, v1041, 1, v972, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) -> f_510(v963, v964, v965, v966, v967, v968, v1041, 1, v972, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) :|: TRUE
f_510(v963, v964, v965, v966, v967, v968, v1041, 1, v972, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) -> f_511(v963, v964, v965, v966, v967, v968, v1041, 1, v972, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) :|: TRUE
f_511(v963, v964, v965, v966, v967, v968, v1041, 1, v972, v973, 0, v974, v975, v977, v978, v979, v980, 3, 2, 4) -> f_458(v963, v964, v965, v966, v967, v968, v1041, 1, v972, v973, 0, v972, v973, v974, v975, v977, v978, v979, v980, 3, 2, 4) :|: TRUE
f_462(v761, v762, v763, v764, v765, v766, 0, 1, v772, v773, v774, v775, 2, v776, v777, v778, v779, 3, 4) -> f_464(v761, v762, v763, v764, v765, v766, 0, 1, v772, v773, v774, v775, 2, v776, v777, v778, v779, 3, 4) :|: 0 = 0
f_464(v761, v762, v763, v764, v765, v766, 0, 1, v772, v773, v774, v775, 2, v776, v777, v778, v779, 3, 4) -> f_466(v761, v762, v763, v764, v765, v766, 0, 1, v772, v773, v774, v775, 2, v776, v777, v778, v779, 3, 4) :|: TRUE
f_466(v761, v762, v763, v764, v765, v766, 0, 1, v772, v773, v774, v775, 2, v776, v777, v778, v779, 3, 4) -> f_441(v761, v762, v763, v764, v765, v766, 0, 1, 1, 0, v772, v773, v774, v775, 2, v776, v777, v778, v779, 3, 2, 4) :|: TRUE
f_441(v675, v676, v677, v678, v679, v680, v681, 1, v683, 0, v685, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_442(v675, v676, v677, v678, v679, v680, v681, 1, v683, 0, v685, v686, v687, v688, v690, v691, v692, v693, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 3 rulesP rules:
f_493(v963:0, v964:0, v965:0, v966:0, v967:0, v968:0, v969:0, 1, v971:0, v973:0, v972:0, v974:0, v975:0, v976:0, v977:0, v978:0, v979:0, v980:0, 0, 3, 2, 4) -> f_493(v963:0, v964:0, v965:0, v966:0, v967:0, v968:0, v969:0, 1, v971:0, 1 + v973:0, v973:0, v975:0, 1 + v975:0, v976:0, v977:0, v978:0, v979:0, v980:0, 0, 3, 2, 4) :|: v973:0 > 0 && v975:0 > 0 && v971:0 > 2 && v973:0 < v971:0 && v969:0 > 1 && v967:0 > 2 && v976:0 > 3
f_493(v963:0, v964:0, v965:0, v966:0, v967:0, v968:0, 1 + v1041:0, 1, 2 + v1041:0, 2 + v1041:0, 1 + v1041:0, v974:0, v975:0, v976:0, v977:0, v978:0, v979:0, v980:0, 0, 3, 2, 4) -> f_460(v963:0, v964:0, v965:0, v966:0, v967:0, v968:0, v1041:0, 1, 1 + v1041:0, 0, 1 + v1041:0, 2 + v1041:0, v974:0, v975:0, 2 + v1041:0, v977:0, v978:0, v979:0, v980:0, 3, 2, 4) :|: v1041:0 > -1
f_460(v761:0, v762:0, v763:0, v764:0, v765:0, v766:0, v767:0, 1, v769:0, 0, v772:0, v773:0, v774:0, v775:0, v770:0, v776:0, v777:0, v778:0, v779:0, 3, 2, 4) -> f_493(v761:0, v762:0, v763:0, v764:0, v765:0, v766:0, v767:0, 1, v769:0, 2, 1, v775:0, 1 + v775:0, v770:0, v776:0, v777:0, v778:0, v779:0, 0, 3, 2, 4) :|: v767:0 > 0 && v769:0 > 1 && v770:0 > 2 && v773:0 > 2 && v772:0 > 1 && v775:0 > 0 && v765:0 > 1
Filtered unneeded arguments:
   f_493(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_493(x5, x7, x9, x10, x11, x13, x14)
   f_460(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_460(x5, x7, x9, x11, x12, x14, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_493(v967:0, v969:0, v971:0, v973:0, v972:0, v975:0, v976:0) -> f_493(v967:0, v969:0, v971:0, 1 + v973:0, v973:0, 1 + v975:0, v976:0) :|: v975:0 > 0 && v973:0 > 0 && v971:0 > 2 && v973:0 < v971:0 && v969:0 > 1 && v976:0 > 3 && v967:0 > 2
f_493(v967:0, sum~cons_1~v1041:0, sum~cons_2~v1041:0, sum~cons_2~v1041:01, sum~cons_1~v1041:01, v975:0, v976:0) -> f_460(v967:0, v1041:0, 1 + v1041:0, 1 + v1041:0, 2 + v1041:0, v975:0, 2 + v1041:0) :|: v1041:0 > -1 && sum~cons_1~v1041:0 = 1 + v1041:0 && sum~cons_2~v1041:0 = 2 + v1041:0 && sum~cons_2~v1041:01 = 2 + v1041:0 && sum~cons_1~v1041:01 = 1 + v1041:0
f_460(v765:0, v767:0, v769:0, v772:0, v773:0, v775:0, v770:0) -> f_493(v765:0, v767:0, v769:0, 2, 1, 1 + v775:0, v770:0) :|: v769:0 > 1 && v767:0 > 0 && v770:0 > 2 && v773:0 > 2 && v772:0 > 1 && v765:0 > 1 && v775:0 > 0

----------------------------------------

(9)
Obligation:
Rules:
f_493(v967:0, v969:0, v971:0, v973:0, v972:0, v975:0, v976:0) -> f_493(v967:0, v969:0, v971:0, 1 + v973:0, v973:0, 1 + v975:0, v976:0) :|: v975:0 > 0 && v973:0 > 0 && v971:0 > 2 && v973:0 < v971:0 && v969:0 > 1 && v976:0 > 3 && v967:0 > 2
f_493(x, x1, x2, x3, x4, x5, x6) -> f_460(x, x7, 1 + x7, 1 + x7, 2 + x7, x5, 2 + x7) :|: x7 > -1 && x1 = 1 + x7 && x2 = 2 + x7 && x3 = 2 + x7 && x4 = 1 + x7
f_460(v765:0, v767:0, v769:0, v772:0, v773:0, v775:0, v770:0) -> f_493(v765:0, v767:0, v769:0, 2, 1, 1 + v775:0, v770:0) :|: v769:0 > 1 && v767:0 > 0 && v770:0 > 2 && v773:0 > 2 && v772:0 > 1 && v765:0 > 1 && v775:0 > 0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_493(v967:0:0, v969:0:0, v971:0:0, v973:0:0, v972:0:0, v975:0:0, v976:0:0) -> f_493(v967:0:0, v969:0:0, v971:0:0, 1 + v973:0:0, v973:0:0, 1 + v975:0:0, v976:0:0) :|: v976:0:0 > 3 && v967:0:0 > 2 && v969:0:0 > 1 && v973:0:0 < v971:0:0 && v971:0:0 > 2 && v973:0:0 > 0 && v975:0:0 > 0
f_493(x:0, sum~cons_1~x7:0, sum~cons_2~x7:0, sum~cons_2~x7:01, sum~cons_1~x7:01, x5:0, x6:0) -> f_493(x:0, x7:0, 1 + x7:0, 2, 1, 1 + x5:0, 2 + x7:0) :|: x:0 > 1 && x7:0 > 0 && x5:0 > 0 && sum~cons_1~x7:0 = 1 + x7:0 && sum~cons_2~x7:0 = 2 + x7:0 && sum~cons_2~x7:01 = 2 + x7:0 && sum~cons_1~x7:01 = 1 + x7:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_493(x, x1, x2, x3, x4, x5, x6)] = x2

The following rules are decreasing:
f_493(x:0, sum~cons_1~x7:0, sum~cons_2~x7:0, sum~cons_2~x7:01, sum~cons_1~x7:01, x5:0, x6:0) -> f_493(x:0, x7:0, 1 + x7:0, 2, 1, 1 + x5:0, 2 + x7:0) :|: x:0 > 1 && x7:0 > 0 && x5:0 > 0 && sum~cons_1~x7:0 = 1 + x7:0 && sum~cons_2~x7:0 = 2 + x7:0 && sum~cons_2~x7:01 = 2 + x7:0 && sum~cons_1~x7:01 = 1 + x7:0
The following rules are bounded:
f_493(v967:0:0, v969:0:0, v971:0:0, v973:0:0, v972:0:0, v975:0:0, v976:0:0) -> f_493(v967:0:0, v969:0:0, v971:0:0, 1 + v973:0:0, v973:0:0, 1 + v975:0:0, v976:0:0) :|: v976:0:0 > 3 && v967:0:0 > 2 && v969:0:0 > 1 && v973:0:0 < v971:0:0 && v971:0:0 > 2 && v973:0:0 > 0 && v975:0:0 > 0
f_493(x:0, sum~cons_1~x7:0, sum~cons_2~x7:0, sum~cons_2~x7:01, sum~cons_1~x7:01, x5:0, x6:0) -> f_493(x:0, x7:0, 1 + x7:0, 2, 1, 1 + x5:0, 2 + x7:0) :|: x:0 > 1 && x7:0 > 0 && x5:0 > 0 && sum~cons_1~x7:0 = 1 + x7:0 && sum~cons_2~x7:0 = 2 + x7:0 && sum~cons_2~x7:01 = 2 + x7:0 && sum~cons_1~x7:01 = 1 + x7:0

----------------------------------------

(13)
Obligation:
Rules:
f_493(v967:0:0, v969:0:0, v971:0:0, v973:0:0, v972:0:0, v975:0:0, v976:0:0) -> f_493(v967:0:0, v969:0:0, v971:0:0, 1 + v973:0:0, v973:0:0, 1 + v975:0:0, v976:0:0) :|: v976:0:0 > 3 && v967:0:0 > 2 && v969:0:0 > 1 && v973:0:0 < v971:0:0 && v971:0:0 > 2 && v973:0:0 > 0 && v975:0:0 > 0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_493(v967:0:0:0, v969:0:0:0, v971:0:0:0, v973:0:0:0, v972:0:0:0, v975:0:0:0, v976:0:0:0) -> f_493(v967:0:0:0, v969:0:0:0, v971:0:0:0, 1 + v973:0:0:0, v973:0:0:0, 1 + v975:0:0:0, v976:0:0:0) :|: v973:0:0:0 > 0 && v975:0:0:0 > 0 && v971:0:0:0 > 2 && v973:0:0:0 < v971:0:0:0 && v969:0:0:0 > 1 && v967:0:0:0 > 2 && v976:0:0:0 > 3

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_493(x1, x2, x3, x4, x5, x6, x7) -> f_493(x1, x2, x3, x4, x6, x7)

----------------------------------------

(17)
Obligation:
Rules:
f_493(v967:0:0:0, v969:0:0:0, v971:0:0:0, v973:0:0:0, v975:0:0:0, v976:0:0:0) -> f_493(v967:0:0:0, v969:0:0:0, v971:0:0:0, 1 + v973:0:0:0, 1 + v975:0:0:0, v976:0:0:0) :|: v973:0:0:0 > 0 && v975:0:0:0 > 0 && v971:0:0:0 > 2 && v973:0:0:0 < v971:0:0:0 && v969:0:0:0 > 1 && v967:0:0:0 > 2 && v976:0:0:0 > 3

----------------------------------------

(18) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_493 ] = -1*f_493_4 + f_493_3

The following rules are decreasing:
f_493(v967:0:0:0, v969:0:0:0, v971:0:0:0, v973:0:0:0, v975:0:0:0, v976:0:0:0) -> f_493(v967:0:0:0, v969:0:0:0, v971:0:0:0, 1 + v973:0:0:0, 1 + v975:0:0:0, v976:0:0:0) :|: v973:0:0:0 > 0 && v975:0:0:0 > 0 && v971:0:0:0 > 2 && v973:0:0:0 < v971:0:0:0 && v969:0:0:0 > 1 && v967:0:0:0 > 2 && v976:0:0:0 > 3

The following rules are bounded:
f_493(v967:0:0:0, v969:0:0:0, v971:0:0:0, v973:0:0:0, v975:0:0:0, v976:0:0:0) -> f_493(v967:0:0:0, v969:0:0:0, v971:0:0:0, 1 + v973:0:0:0, 1 + v975:0:0:0, v976:0:0:0) :|: v973:0:0:0 > 0 && v975:0:0:0 > 0 && v971:0:0:0 > 2 && v973:0:0:0 < v971:0:0:0 && v969:0:0:0 > 1 && v967:0:0:0 > 2 && v976:0:0:0 > 3


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_277(v115, v116, v117, v118, v119, v120, 1, v122, v123, v124, v125, v126, v127, v128, v129, 0, 3, 2, 4) -> f_278(v115, v116, v117, v118, v119, v120, 1, v122, v124, v123, v125, v126, v127, v128, v129, 0, 3, 2, 4) :|: 0 = 0
f_278(v115, v116, v117, v118, v119, v120, 1, v122, v124, v123, v125, v126, v127, v128, v129, 0, 3, 2, 4) -> f_279(v115, v116, v117, v118, v119, v120, 1, v122, v124, v123, v125, v126, v127, v128, v129, 0, 3, 2, 4) :|: v124 < v122 && 3 <= v122 && 2 <= v119
f_279(v115, v116, v117, v118, v119, v120, 1, v122, v124, v123, v125, v126, v127, v128, v129, 0, 3, 2, 4) -> f_281(v115, v116, v117, v118, v119, v120, 1, v122, v124, v123, v125, v126, v127, v128, v129, 0, 3, 2, 4) :|: 0 = 0
f_281(v115, v116, v117, v118, v119, v120, 1, v122, v124, v123, v125, v126, v127, v128, v129, 0, 3, 2, 4) -> f_283(v115, v116, v117, v118, v119, v120, 1, v122, v124, v123, v125, v126, v127, v128, v129, 0, 3, 2, 4) :|: TRUE
f_283(v115, v116, v117, v118, v119, v120, 1, v122, v124, v123, v125, v126, v127, v128, v129, 0, 3, 2, 4) -> f_285(v115, v116, v117, v118, v119, v120, 1, v122, v124, v125, v123, v126, v127, v128, v129, 0, 3, 2, 4) :|: 0 = 0
f_285(v115, v116, v117, v118, v119, v120, 1, v122, v124, v125, v123, v126, v127, v128, v129, 0, 3, 2, 4) -> f_287(v115, v116, v117, v118, v119, v120, 1, v122, v124, v131, v125, v123, v126, v127, v128, v129, 0, 3, 2, 4) :|: v131 = 1 + v124 && 3 <= v131
f_287(v115, v116, v117, v118, v119, v120, 1, v122, v124, v131, v125, v123, v126, v127, v128, v129, 0, 3, 2, 4) -> f_289(v115, v116, v117, v118, v119, v120, 1, v122, v124, v131, v125, v123, v126, v127, v128, v129, 0, 3, 2, 4) :|: TRUE
f_289(v115, v116, v117, v118, v119, v120, 1, v122, v124, v131, v125, v123, v126, v127, v128, v129, 0, 3, 2, 4) -> f_291(v115, v116, v117, v118, v119, v120, 1, v122, v124, v131, v123, v126, v127, v128, v129, 0, 3, 2, 4) :|: 0 = 0
f_291(v115, v116, v117, v118, v119, v120, 1, v122, v124, v131, v123, v126, v127, v128, v129, 0, 3, 2, 4) -> f_293(v115, v116, v117, v118, v119, v120, 1, v122, v124, v131, v123, v126, v127, v128, v129, 0, 3, 2, 4) :|: v124 = 1 + v123
f_293(v115, v116, v117, v118, v119, v120, 1, v122, v124, v131, v123, v126, v127, v128, v129, 0, 3, 2, 4) -> f_295(v115, v116, v117, v118, v119, v120, 1, v122, v124, v131, v123, v126, v127, v128, v129, 0, 3, 2, 4) :|: TRUE
f_295(v115, v116, v117, v118, v119, v120, 1, v122, v124, v131, v123, v126, v127, v128, v129, 0, 3, 2, 4) -> f_297(v115, v116, v117, v118, v119, v120, 1, v122, v124, v131, v123, v126, v127, v128, v129, 0, 3, 2, 4) :|: TRUE
f_297(v115, v116, v117, v118, v119, v120, 1, v122, v124, v131, v123, v126, v127, v128, v129, 0, 3, 2, 4) -> f_276(v115, v116, v117, v118, v119, v120, 1, v122, v124, v131, v123, v126, v127, v128, v129, 0, 3, 2, 4) :|: TRUE
f_276(v115, v116, v117, v118, v119, v120, 1, v122, v123, v124, v125, v126, v127, v128, v129, 0, 3, 2, 4) -> f_277(v115, v116, v117, v118, v119, v120, 1, v122, v123, v124, v125, v126, v127, v128, v129, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_277(v115:0, v116:0, v117:0, v118:0, v119:0, v120:0, 1, v122:0, v123:0, 1 + v123:0, v125:0, v126:0, v127:0, v128:0, v129:0, 0, 3, 2, 4) -> f_277(v115:0, v116:0, v117:0, v118:0, v119:0, v120:0, 1, v122:0, 1 + v123:0, 1 + (1 + v123:0), v123:0, v126:0, v127:0, v128:0, v129:0, 0, 3, 2, 4) :|: v122:0 > 2 && v122:0 > 1 + v123:0 && v123:0 > 0 && v119:0 > 1
Filtered unneeded arguments:
   f_277(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_277(x5, x8, x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_277(v119:0, v122:0, v123:0, sum~cons_1~v123:0) -> f_277(v119:0, v122:0, 1 + v123:0, 1 + (1 + v123:0)) :|: v122:0 > 1 + v123:0 && v122:0 > 2 && v119:0 > 1 && v123:0 > 0 && sum~cons_1~v123:0 = 1 + v123:0

----------------------------------------

(22)
Obligation:
Rules:
f_277(v119:0, v122:0, v123:0, sum~cons_1~v123:0) -> f_277(v119:0, v122:0, 1 + v123:0, 1 + (1 + v123:0)) :|: v122:0 > 1 + v123:0 && v122:0 > 2 && v119:0 > 1 && v123:0 > 0 && sum~cons_1~v123:0 = 1 + v123:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_277(v119:0:0, v122:0:0, v123:0:0, sum~cons_1~v123:0:0) -> f_277(v119:0:0, v122:0:0, 1 + v123:0:0, 1 + (1 + v123:0:0)) :|: v119:0:0 > 1 && v123:0:0 > 0 && v122:0:0 > 2 && v122:0:0 > 1 + v123:0:0 && sum~cons_1~v123:0:0 = 1 + v123:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_277(x, x1, x2, x3)] = x1 + x2 - 2*x3

The following rules are decreasing:
f_277(v119:0:0, v122:0:0, v123:0:0, sum~cons_1~v123:0:0) -> f_277(v119:0:0, v122:0:0, 1 + v123:0:0, 1 + (1 + v123:0:0)) :|: v119:0:0 > 1 && v123:0:0 > 0 && v122:0:0 > 2 && v122:0:0 > 1 + v123:0:0 && sum~cons_1~v123:0:0 = 1 + v123:0:0
The following rules are bounded:
f_277(v119:0:0, v122:0:0, v123:0:0, sum~cons_1~v123:0:0) -> f_277(v119:0:0, v122:0:0, 1 + v123:0:0, 1 + (1 + v123:0:0)) :|: v119:0:0 > 1 && v123:0:0 > 0 && v122:0:0 > 2 && v122:0:0 > 1 + v123:0:0 && sum~cons_1~v123:0:0 = 1 + v123:0:0

----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
