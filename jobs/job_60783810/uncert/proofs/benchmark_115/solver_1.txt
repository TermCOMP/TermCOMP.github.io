YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/PlVnk.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 36 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 8964 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 117 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (13) AND
            (14) IntTRS
                (15) TerminationGraphProcessor [EQUIVALENT, 3 ms]
                (16) IntTRS
                (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (18) IntTRS
                (19) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (20) IntTRS
                (21) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
                (22) YES
            (23) IntTRS
                (24) TerminationGraphProcessor [EQUIVALENT, 2 ms]
                (25) IntTRS
                (26) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (27) IntTRS
                (28) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (29) IntTRS
                (30) RankingReductionPairProof [EQUIVALENT, 1 ms]
                (31) YES
    (32) LLVM Symbolic Execution SCC
        (33) SCC2IRS [SOUND, 69 ms]
        (34) IntTRS
        (35) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (36) IntTRS
        (37) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (38) YES
    (39) LLVM Symbolic Execution SCC
        (40) SCC2IRS [SOUND, 61 ms]
        (41) IntTRS
        (42) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (43) IntTRS
        (44) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (45) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/PlVnk.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/PlVnk.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "sumOfThirdBytes" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%3 = alloca *i32, align 8
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %7)
		store 0, %6
		store 0, %5
		br %8
	8:
		%9 = load %5
		%10 = load %4
		%11 = icmp slt %9 %10
		br %11, %12, %35
	12:
		%13 = load %3
		%14 = load %5
		%15 = sext i32 %14 to i64
		%16 = getelementptr %13, %15
		%17 = bitcast *i32 %16 to *i8
		store %17, %7
		%18 = load %7
		%19 = getelementptr %18, 2
		store %19, %7
		br %20
	20:
		%21 = load %7
		%22 = load %21
		%23 = sext i8 %22 to i32
		%24 = icmp sgt %23 0
		br %24, %25, %31
	25:
		%26 = load %6
		%27 = add i32 %26, 1
		store %27, %6
		%28 = load %7
		%29 = load %28
		%30 = add i8 %29, -1
		store %30, %28
		br %20
	31:
		br %32
	32:
		%33 = load %5
		%34 = add i32 %33, 1
		store %34, %5
		br %8
	35:
		%36 = load %6
		ret %36

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 60
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %7, %8
	7:
		store 1, %2
		br %8
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%9 = load %2
		%10 = sext i32 %9 to i64
		%11 = mul i64 %10, 4
		%12 = alloca i8, numElementsLit: %11, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %3
		%14 = load %3
		%15 = load %2
		%16 = call i32 @sumOfThirdBytes(*i32 %14, i32 %15)
		ret %16


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 53 rulesP rules:
f_1209(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3614, v3615, v3616, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) -> f_1211(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3782, v3614, v3615, v3616, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) :|: v3782 = 1 + v3613 && 2 <= v3782
f_1211(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3782, v3614, v3615, v3616, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) -> f_1213(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3782, v3614, v3615, v3616, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1213(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3782, v3614, v3615, v3616, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) -> f_1215(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3782, v3615, v3616, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3614, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) :|: 0 = 0
f_1215(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3782, v3615, v3616, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3614, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) -> f_1217(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3782, v3616, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3614, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) :|: 0 = 0
f_1217(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3782, v3616, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3614, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) -> f_1220(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3782, v3889, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3614, v3616, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) :|: 1 + v3889 = v3611 && 0 <= v3889
f_1220(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3782, v3889, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3614, v3616, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) -> f_1222(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3782, v3889, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1222(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3782, v3889, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) -> f_1224(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3782, v3889, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1224(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3782, v3889, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) -> f_1225(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3617, v3613, v3782, v3889, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, 0, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1225(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, v3969, v3970, v3971, v3972, v3973, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, 0, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) -> f_1228(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, v3969, v3970, v3971, v3972, v3973, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, 0, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) :|: 0 = 0
f_1228(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, v3969, v3970, v3971, v3972, v3973, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, 0, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) -> f_1231(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, v3973, v3969, v3970, v3971, v3972, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, 0, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) :|: 0 = 0
f_1231(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, v3973, v3969, v3970, v3971, v3972, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, 0, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) -> f_1234(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, v3973, v3970, v3971, v3972, v3969, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, 0, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) :|: 0 = 0
f_1234(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, v3973, v3970, v3971, v3972, v3969, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, 0, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) -> f_1237(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, v3973, v3970, v3971, v3972, v3969, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, 0, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) :|: 0 < v3973 && 2 <= v3969
f_1234(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, v3973, v3970, v3971, v3972, v3969, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, 0, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) -> f_1238(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, 0, v3970, v3971, v3972, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) :|: v3973 <= 0 && v3969 = 1 && v3973 = 0 && 0 = 0
f_1237(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, v3973, v3970, v3971, v3972, v3969, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, 0, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) -> f_1241(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, v3973, v3970, v3971, v3972, v3969, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, 0, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) :|: 0 = 0
f_1241(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, v3973, v3970, v3971, v3972, v3969, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, 0, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) -> f_1244(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, v3973, v3970, v3971, v3972, v3969, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, 0, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1244(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, v3973, v3970, v3971, v3972, v3969, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, 0, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) -> f_1206(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, v3973, v3971, v3972, v3968, v3969, v3973, v3970, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1206(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3612, v3613, v3614, v3615, v3616, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) -> f_1209(v3600, v3601, v3602, v3603, v3604, v3605, v3606, v3607, 1, v3609, v3610, v3611, v3613, v3614, v3615, v3616, v3617, v3618, v3624, v3619, v3625, v3620, v3626, v3627, v3628, v3629, v3630, v3631, v3632, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) :|: 0 = 0
f_1238(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, 0, v3970, v3971, v3972, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) -> f_1242(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, 0, v3970, v3971, v3972, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) :|: 0 = 0
f_1242(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, 0, v3970, v3971, v3972, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) -> f_1245(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, 0, v3970, v3971, v3972, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1245(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, 0, v3970, v3971, v3972, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, v3989, v3991, v3977, v3978, v3979, 3, 7, 2, 4, 5, 8) -> f_1208(v3958, v3959, v3960, v3961, v3962, v3963, v3964, v3965, 1, v3967, v3968, 0, 0, v3971, v3972, v3968, v3970, v3974, v3980, v3975, v3981, v3976, v3982, v3983, v3984, v3985, v3986, v3987, v3988, v3721, v3722, v3709, v3710, v3711, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1208(v3689, v3690, v3691, v3692, v3693, v3694, v3695, v3696, 1, v3698, v3699, v3700, 0, v3702, v3703, v3704, v3705, v3706, v3712, v3707, v3713, v3708, v3714, v3715, v3716, v3717, v3718, v3719, v3720, v3721, v3722, v3709, v3710, v3711, 3, 7, 2, 4, 5, 8) -> f_1210(v3689, v3690, v3691, v3692, v3693, v3694, v3695, v3696, 1, v3698, v3699, v3700, 0, v3702, v3703, v3704, v3705, v3706, v3712, v3707, v3713, v3708, v3714, v3715, v3716, v3717, v3718, v3719, v3720, v3721, v3722, v3709, v3710, v3711, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1210(v3689, v3690, v3691, v3692, v3693, v3694, v3695, v3696, 1, v3698, v3699, v3700, 0, v3702, v3703, v3704, v3705, v3706, v3712, v3707, v3713, v3708, v3714, v3715, v3716, v3717, v3718, v3719, v3720, v3721, v3722, v3709, v3710, v3711, 3, 7, 2, 4, 5, 8) -> f_1212(v3689, v3690, v3691, v3692, v3693, v3694, v3695, v3696, 1, v3698, v3699, v3700, 0, v3702, v3703, v3704, v3706, v3712, v3707, v3713, v3708, v3714, v3715, v3716, v3717, v3718, v3719, v3720, v3721, v3722, v3709, v3710, v3711, 3, 7, 2, 4, 5, 8) :|: 0 = 0
f_1212(v3689, v3690, v3691, v3692, v3693, v3694, v3695, v3696, 1, v3698, v3699, v3700, 0, v3702, v3703, v3704, v3706, v3712, v3707, v3713, v3708, v3714, v3715, v3716, v3717, v3718, v3719, v3720, v3721, v3722, v3709, v3710, v3711, 3, 7, 2, 4, 5, 8) -> f_1214(v3689, v3690, v3691, v3692, v3693, v3694, v3695, v3696, 1, v3698, v3699, v3700, 0, v3702, v3703, v3704, v3784, v3706, v3712, v3707, v3713, v3708, v3714, v3715, v3716, v3717, v3718, v3719, v3720, v3721, v3722, v3709, v3710, v3711, 3, 7, 2, 4, 5, 8) :|: v3784 = 1 + v3696 && 2 <= v3784
f_1214(v3689, v3690, v3691, v3692, v3693, v3694, v3695, v3696, 1, v3698, v3699, v3700, 0, v3702, v3703, v3704, v3784, v3706, v3712, v3707, v3713, v3708, v3714, v3715, v3716, v3717, v3718, v3719, v3720, v3721, v3722, v3709, v3710, v3711, 3, 7, 2, 4, 5, 8) -> f_1216(v3689, v3690, v3691, v3692, v3693, v3694, v3695, v3696, 1, v3698, v3699, v3700, 0, v3702, v3703, v3704, v3784, v3706, v3712, v3707, v3713, v3708, v3714, v3715, v3716, v3717, v3718, v3719, v3720, v3721, v3722, v3709, v3710, v3711, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1216(v3689, v3690, v3691, v3692, v3693, v3694, v3695, v3696, 1, v3698, v3699, v3700, 0, v3702, v3703, v3704, v3784, v3706, v3712, v3707, v3713, v3708, v3714, v3715, v3716, v3717, v3718, v3719, v3720, v3721, v3722, v3709, v3710, v3711, 3, 7, 2, 4, 5, 8) -> f_1218(v3689, v3690, v3691, v3692, v3693, v3694, v3695, v3696, 1, v3698, v3699, v3700, 0, v3702, v3703, v3704, v3784, v3706, v3712, v3707, v3713, v3708, v3714, v3715, v3716, v3717, v3718, v3719, v3720, v3721, v3722, v3709, v3710, v3711, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1218(v3689, v3690, v3691, v3692, v3693, v3694, v3695, v3696, 1, v3698, v3699, v3700, 0, v3702, v3703, v3704, v3784, v3706, v3712, v3707, v3713, v3708, v3714, v3715, v3716, v3717, v3718, v3719, v3720, v3721, v3722, v3709, v3710, v3711, 3, 7, 2, 4, 5, 8) -> f_1219(v3689, v3690, v3691, v3692, v3693, v3694, v3695, v3696, 1, v3698, v3699, v3700, 0, v3702, v3703, v3704, v3784, v3706, v3712, v3707, v3713, v3708, v3714, v3715, v3716, v3717, v3718, v3719, v3720, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) :|: TRUE
f_1219(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3848, 1, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3857, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) -> f_1221(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3848, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) :|: 0 = 0
f_1221(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3848, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) -> f_1223(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3848, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) :|: 0 = 0
f_1223(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3848, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) -> f_1226(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3848, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) :|: v3857 < v3842 && 2 <= v3842 && 8 <= v3867
f_1226(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3848, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) -> f_1229(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3848, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) :|: 0 = 0
f_1229(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3848, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) -> f_1232(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3848, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) :|: TRUE
f_1232(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3848, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) -> f_1235(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3848, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) :|: 0 = 0
f_1235(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3848, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) -> f_1239(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3848, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) :|: 0 = 0
f_1239(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3848, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) -> f_1243(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) :|: 0 = 0
f_1243(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8) -> f_1246(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v4181, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8, 5) :|: v4181 = v3841 + 4 * v3857 && 5 <= v4181
f_1246(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v4181, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8, 5) -> f_1247(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v4181, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_1247(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v4181, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8, 5) -> f_1248(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v4181, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8, 5) :|: TRUE
f_1248(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v4181, v3850, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8, 5) -> f_1249(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v4181, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_1249(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v4181, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8, 5) -> f_1250(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v4181, v4183, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8, 5) :|: v4183 = 2 + v4181 && 7 <= v4183
f_1250(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v4181, v4183, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8, 5) -> f_1251(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v4181, v4183, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8, 5) :|: TRUE
f_1251(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v4181, v4183, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8, 5) -> f_1252(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v4181, v4183, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8, 5) :|: TRUE
f_1252(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v4181, v4183, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874, v3861, v3862, v3863, 3, 7, 2, 4, 8, 5) -> f_1253(v3841, v3842, v3843, v3844, v3845, v3846, v3847, v3857, 1, v4181, v4183, v3851, v3852, 0, v3854, v3855, v3856, v3848, v3858, v3864, v3859, v3865, v3860, v3866, v3867, v3868, v3869, v3870, v3871, v3872, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1253(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4248, v4249, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) -> f_1254(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4249, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) :|: 0 = 0
f_1254(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4249, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) -> f_1255(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, v4249, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1255(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, v4249, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) -> f_1256(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4249, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) :|: 0 = 0
f_1256(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4249, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) -> f_1257(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4249, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) :|: 0 < v4285
f_1256(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4249, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) -> f_1258(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4249, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) :|: v4285 <= 0
f_1257(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4249, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) -> f_1259(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, v4251, v4252, v4253, 0, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4249, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) :|: 0 = 0
f_1259(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, v4251, v4252, v4253, 0, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4249, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) -> f_1261(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, v4251, v4252, v4253, 0, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4249, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1261(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, v4251, v4252, v4253, 0, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4249, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) -> f_1206(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, v4251, v4252, v4253, 1, 0, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v3633, v3634, 0, v3621, v3622, v3623, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1258(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4249, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) -> f_1260(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4249, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) :|: 0 = 0
f_1260(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4249, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) -> f_1262(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4249, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) :|: TRUE
f_1262(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v4248, v4249, v4270, v4271, v4258, v4259, v4260, 3, 7, 2, 4, 5, 8) -> f_1208(v4237, v4238, v4239, v4240, v4241, v4242, v4243, v4244, 1, v4246, v4247, v4285, 0, v4251, v4252, v4253, v4254, v4255, v4261, v4256, v4262, v4257, v4263, v4264, v4265, v4266, v4267, v4268, v4269, v3721, v3722, v3709, v3710, v3711, 3, 7, 2, 4, 5, 8) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_1209(v3600:0, v3601:0, v3602:0, v3603:0, v3604:0, v3605:0, v3606:0, v3607:0, 1, v3609:0, v3610:0, 1 + v3889:0, v3613:0, v3614:0, v3615:0, v3616:0, v3617:0, v3618:0, v3624:0, v3619:0, v3625:0, v3620:0, v3626:0, v3627:0, v3628:0, v3629:0, v3630:0, v3631:0, v3632:0, v3633:0, v3634:0, 0, v3621:0, v3622:0, v3623:0, 3, 7, 2, 4, 5, 8) -> f_1209(v3600:0, v3601:0, v3602:0, v3603:0, v3604:0, v3605:0, v3606:0, v3607:0, 1, v3609:0, v3610:0, v3889:0, 1 + v3613:0, v3610:0, 1 + v3889:0, v3889:0, v3617:0, v3618:0, v3624:0, v3619:0, v3625:0, v3620:0, v3626:0, v3627:0, v3628:0, v3629:0, v3630:0, v3631:0, v3632:0, v3633:1, v3634:1, 0, v3621:1, v3622:1, v3623:1, 3, 7, 2, 4, 5, 8) :|: v3889:0 > 0 && v3613:0 > 0
f_1209(v3600:0, v3601:0, v3602:0, v3603:0, v3604:0, v3605:0, v3606:0, v3607:0, 1, v3609:0, v3610:0, 1, v3613:0, v3614:0, v3615:0, v3616:0, v3617:0, v3618:0, v3624:0, v3619:0, v3625:0, v3620:0, v3626:0, v3627:0, v3628:0, v3629:0, v3630:0, v3631:0, v3632:0, v3633:0, v3634:0, 0, v3621:0, v3622:0, v3623:0, 3, 7, 2, 4, 5, 8) -> f_1256(v3600:0, v3601:0, v3602:0, v3603:0, v3604:0, v3605:0, v3606:0, 1 + v3607:0, 1, v3600:0 + 4 * (1 + v3607:0), 2 + (v3600:0 + 4 * (1 + v3607:0)), v4285:0, 0, v3613:0, 1 + v3613:0, v3610:0, v3607:0, v3618:0, v3624:0, v3619:0, v3625:0, v3620:0, v3626:0, v3627:0, v3628:0, v3629:0, v3630:0, v3631:0, v3632:0, v3610:0, 0, v4270:0, v4271:0, v4258:0, v4259:0, v4260:0, 3, 7, 2, 4, 5, 8) :|: v3613:0 > 0 && v3607:0 > 0 && v3601:0 > 1 && v3601:0 > 1 + v3607:0 && v3627:0 > 7 && v3600:0 + 4 * (1 + v3607:0) > 4
f_1256(v4237:0, v4238:0, v4239:0, v4240:0, v4241:0, v4242:0, v4243:0, v4244:0, 1, v4246:0, v4247:0, v4285:0, 0, v4251:0, v4252:0, v4253:0, v4254:0, v4255:0, v4261:0, v4256:0, v4262:0, v4257:0, v4263:0, v4264:0, v4265:0, v4266:0, v4267:0, v4268:0, v4269:0, v4248:0, v4249:0, v4270:0, v4271:0, v4258:0, v4259:0, v4260:0, 3, 7, 2, 4, 5, 8) -> f_1256(v4237:0, v4238:0, v4239:0, v4240:0, v4241:0, v4242:0, v4243:0, 1 + v4244:0, 1, v4237:0 + 4 * (1 + v4244:0), 2 + (v4237:0 + 4 * (1 + v4244:0)), v4285:1, 0, v4251:0, v4252:0, v4253:0, v4244:0, v4255:0, v4261:0, v4256:0, v4262:0, v4257:0, v4263:0, v4264:0, v4265:0, v4266:0, v4267:0, v4268:0, v4269:0, v4247:0, v4285:0, v4270:1, v4271:1, v4258:1, v4259:1, v4260:1, 3, 7, 2, 4, 5, 8) :|: v4244:0 > 0 && v4238:0 > 1 && v4238:0 > 1 + v4244:0 && v4264:0 > 7 && v4237:0 + 4 * (1 + v4244:0) > 4 && v4285:0 < 1
f_1256(v4237:0, v4238:0, v4239:0, v4240:0, v4241:0, v4242:0, v4243:0, v4244:0, 1, v4246:0, v4247:0, v4285:0, 0, v4251:0, v4252:0, v4253:0, v4254:0, v4255:0, v4261:0, v4256:0, v4262:0, v4257:0, v4263:0, v4264:0, v4265:0, v4266:0, v4267:0, v4268:0, v4269:0, v4248:0, v4249:0, v4270:0, v4271:0, v4258:0, v4259:0, v4260:0, 3, 7, 2, 4, 5, 8) -> f_1209(v4237:0, v4238:0, v4239:0, v4240:0, v4241:0, v4242:0, v4243:0, v4244:0, 1, v4246:0, v4247:0, v4285:0, v4252:0, v4253:0, 1, 0, v4254:0, v4255:0, v4261:0, v4256:0, v4262:0, v4257:0, v4263:0, v4264:0, v4265:0, v4266:0, v4267:0, v4268:0, v4269:0, v3633:0, v3634:0, 0, v3621:0, v3622:0, v3623:0, 3, 7, 2, 4, 5, 8) :|: v4285:0 > 0
Filtered unneeded arguments:
   f_1209(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41) -> f_1209(x1, x2, x8, x12, x13, x24)
   f_1256(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42) -> f_1256(x1, x2, x8, x12, x15, x24)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_1209(v3600:0, v3601:0, v3607:0, sum~cons_1~v3889:0, v3613:0, v3627:0) -> f_1209(v3600:0, v3601:0, v3607:0, v3889:0, 1 + v3613:0, v3627:0) :|: v3889:0 > 0 && v3613:0 > 0 && sum~cons_1~v3889:0 = 1 + v3889:0
f_1209(v3600:0, v3601:0, v3607:0, cons_1, v3613:0, v3627:0) -> f_1256(v3600:0, v3601:0, 1 + v3607:0, v4285:0, 1 + v3613:0, v3627:0) :|: v3607:0 > 0 && v3613:0 > 0 && v3601:0 > 1 && v3601:0 > 1 + v3607:0 && v3600:0 + (4 + 4 * v3607:0) > 4 && v3627:0 > 7 && cons_1 = 1
f_1256(v4237:0, v4238:0, v4244:0, v4285:0, v4252:0, v4264:0) -> f_1256(v4237:0, v4238:0, 1 + v4244:0, v4285:1, v4252:0, v4264:0) :|: v4238:0 > 1 && v4244:0 > 0 && v4238:0 > 1 + v4244:0 && v4264:0 > 7 && v4285:0 < 1 && v4237:0 + (4 + 4 * v4244:0) > 4
f_1256(v4237:0, v4238:0, v4244:0, v4285:0, v4252:0, v4264:0) -> f_1209(v4237:0, v4238:0, v4244:0, v4285:0, v4252:0, v4264:0) :|: v4285:0 > 0

----------------------------------------

(9)
Obligation:
Rules:
f_1209(v3600:0, v3601:0, v3607:0, sum~cons_1~v3889:0, v3613:0, v3627:0) -> f_1209(v3600:0, v3601:0, v3607:0, v3889:0, 1 + v3613:0, v3627:0) :|: v3889:0 > 0 && v3613:0 > 0 && sum~cons_1~v3889:0 = 1 + v3889:0
f_1209(x, x1, x2, x3, x4, x5) -> f_1256(x, x1, 1 + x2, x6, 1 + x4, x5) :|: x2 > 0 && x4 > 0 && x1 > 1 && x1 > 1 + x2 && x + (4 + 4 * x2) > 4 && x5 > 7 && x3 = 1
f_1256(v4237:0, v4238:0, v4244:0, v4285:0, v4252:0, v4264:0) -> f_1256(v4237:0, v4238:0, 1 + v4244:0, v4285:1, v4252:0, v4264:0) :|: v4238:0 > 1 && v4244:0 > 0 && v4238:0 > 1 + v4244:0 && v4264:0 > 7 && v4285:0 < 1 && v4237:0 + (4 + 4 * v4244:0) > 4
f_1256(x7, x8, x9, x10, x11, x12) -> f_1209(x7, x8, x9, x10, x11, x12) :|: x10 > 0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_1209(v3600:0:0, v3601:0:0, v3607:0:0, sum~cons_1~v3889:0:0, v3613:0:0, v3627:0:0) -> f_1209(v3600:0:0, v3601:0:0, v3607:0:0, v3889:0:0, 1 + v3613:0:0, v3627:0:0) :|: v3889:0:0 > 0 && v3613:0:0 > 0 && sum~cons_1~v3889:0:0 = 1 + v3889:0:0
f_1256(x7:0, x8:0, x9:0, x10:0, x11:0, x12:0) -> f_1209(x7:0, x8:0, x9:0, x10:0, x11:0, x12:0) :|: x10:0 > 0
f_1256(v4237:0:0, v4238:0:0, v4244:0:0, v4285:0:0, v4252:0:0, v4264:0:0) -> f_1256(v4237:0:0, v4238:0:0, 1 + v4244:0:0, v4285:1:0, v4252:0:0, v4264:0:0) :|: v4285:0:0 < 1 && v4237:0:0 + (4 + 4 * v4244:0:0) > 4 && v4264:0:0 > 7 && v4238:0:0 > 1 + v4244:0:0 && v4244:0:0 > 0 && v4238:0:0 > 1
f_1209(x:0, x1:0, x2:0, cons_1, x4:0, x5:0) -> f_1256(x:0, x1:0, 1 + x2:0, x6:0, 1 + x4:0, x5:0) :|: x:0 + (4 + 4 * x2:0) > 4 && x5:0 > 7 && x1:0 > 1 + x2:0 && x1:0 > 1 && x4:0 > 0 && x2:0 > 0 && cons_1 = 1

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1209(x, x1, x2, x3, x4, x5)] = -2 + x + 5*x1 - x2 + x5
[f_1256(x6, x7, x8, x9, x10, x11)] = -1 + x11 + x6 + 5*x7 - x8

The following rules are decreasing:
f_1256(x7:0, x8:0, x9:0, x10:0, x11:0, x12:0) -> f_1209(x7:0, x8:0, x9:0, x10:0, x11:0, x12:0) :|: x10:0 > 0
f_1256(v4237:0:0, v4238:0:0, v4244:0:0, v4285:0:0, v4252:0:0, v4264:0:0) -> f_1256(v4237:0:0, v4238:0:0, 1 + v4244:0:0, v4285:1:0, v4252:0:0, v4264:0:0) :|: v4285:0:0 < 1 && v4237:0:0 + (4 + 4 * v4244:0:0) > 4 && v4264:0:0 > 7 && v4238:0:0 > 1 + v4244:0:0 && v4244:0:0 > 0 && v4238:0:0 > 1
The following rules are bounded:
f_1256(v4237:0:0, v4238:0:0, v4244:0:0, v4285:0:0, v4252:0:0, v4264:0:0) -> f_1256(v4237:0:0, v4238:0:0, 1 + v4244:0:0, v4285:1:0, v4252:0:0, v4264:0:0) :|: v4285:0:0 < 1 && v4237:0:0 + (4 + 4 * v4244:0:0) > 4 && v4264:0:0 > 7 && v4238:0:0 > 1 + v4244:0:0 && v4244:0:0 > 0 && v4238:0:0 > 1
f_1209(x:0, x1:0, x2:0, cons_1, x4:0, x5:0) -> f_1256(x:0, x1:0, 1 + x2:0, x6:0, 1 + x4:0, x5:0) :|: x:0 + (4 + 4 * x2:0) > 4 && x5:0 > 7 && x1:0 > 1 + x2:0 && x1:0 > 1 && x4:0 > 0 && x2:0 > 0 && cons_1 = 1

----------------------------------------

(13)
Complex Obligation (AND)

----------------------------------------

(14)
Obligation:
Rules:
f_1209(v3600:0:0, v3601:0:0, v3607:0:0, sum~cons_1~v3889:0:0, v3613:0:0, v3627:0:0) -> f_1209(v3600:0:0, v3601:0:0, v3607:0:0, v3889:0:0, 1 + v3613:0:0, v3627:0:0) :|: v3889:0:0 > 0 && v3613:0:0 > 0 && sum~cons_1~v3889:0:0 = 1 + v3889:0:0
f_1209(x:0, x1:0, x2:0, cons_1, x4:0, x5:0) -> f_1256(x:0, x1:0, 1 + x2:0, x6:0, 1 + x4:0, x5:0) :|: x:0 + (4 + 4 * x2:0) > 4 && x5:0 > 7 && x1:0 > 1 + x2:0 && x1:0 > 1 && x4:0 > 0 && x2:0 > 0 && cons_1 = 1

----------------------------------------

(15) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(16)
Obligation:
Rules:
f_1209(v3600:0:0, v3601:0:0, v3607:0:0, sum~cons_1~v3889:0:0, v3613:0:0, v3627:0:0) -> f_1209(v3600:0:0, v3601:0:0, v3607:0:0, v3889:0:0, 1 + v3613:0:0, v3627:0:0) :|: v3889:0:0 > 0 && v3613:0:0 > 0 && sum~cons_1~v3889:0:0 = 1 + v3889:0:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_1209(v3600:0:0:0, v3601:0:0:0, v3607:0:0:0, sum~cons_1~v3889:0:0:0, v3613:0:0:0, v3627:0:0:0) -> f_1209(v3600:0:0:0, v3601:0:0:0, v3607:0:0:0, v3889:0:0:0, 1 + v3613:0:0:0, v3627:0:0:0) :|: v3889:0:0:0 > 0 && v3613:0:0:0 > 0 && sum~cons_1~v3889:0:0:0 = 1 + v3889:0:0:0

----------------------------------------

(19) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1209(x1, x2, x3, x4, x5, x6) -> f_1209(x4, x5)

----------------------------------------

(20)
Obligation:
Rules:
f_1209(sum~cons_1~v3889:0:0:0, v3613:0:0:0) -> f_1209(v3889:0:0:0, 1 + v3613:0:0:0) :|: v3889:0:0:0 > 0 && v3613:0:0:0 > 0 && sum~cons_1~v3889:0:0:0 = 1 + v3889:0:0:0

----------------------------------------

(21) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1209(x, x1)] = x

The following rules are decreasing:
f_1209(sum~cons_1~v3889:0:0:0, v3613:0:0:0) -> f_1209(v3889:0:0:0, 1 + v3613:0:0:0) :|: v3889:0:0:0 > 0 && v3613:0:0:0 > 0 && sum~cons_1~v3889:0:0:0 = 1 + v3889:0:0:0
The following rules are bounded:
f_1209(sum~cons_1~v3889:0:0:0, v3613:0:0:0) -> f_1209(v3889:0:0:0, 1 + v3613:0:0:0) :|: v3889:0:0:0 > 0 && v3613:0:0:0 > 0 && sum~cons_1~v3889:0:0:0 = 1 + v3889:0:0:0

----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Rules:
f_1209(v3600:0:0, v3601:0:0, v3607:0:0, sum~cons_1~v3889:0:0, v3613:0:0, v3627:0:0) -> f_1209(v3600:0:0, v3601:0:0, v3607:0:0, v3889:0:0, 1 + v3613:0:0, v3627:0:0) :|: v3889:0:0 > 0 && v3613:0:0 > 0 && sum~cons_1~v3889:0:0 = 1 + v3889:0:0
f_1256(x7:0, x8:0, x9:0, x10:0, x11:0, x12:0) -> f_1209(x7:0, x8:0, x9:0, x10:0, x11:0, x12:0) :|: x10:0 > 0

----------------------------------------

(24) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(25)
Obligation:
Rules:
f_1209(v3600:0:0, v3601:0:0, v3607:0:0, sum~cons_1~v3889:0:0, v3613:0:0, v3627:0:0) -> f_1209(v3600:0:0, v3601:0:0, v3607:0:0, v3889:0:0, 1 + v3613:0:0, v3627:0:0) :|: v3889:0:0 > 0 && v3613:0:0 > 0 && sum~cons_1~v3889:0:0 = 1 + v3889:0:0

----------------------------------------

(26) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(27)
Obligation:
Rules:
f_1209(v3600:0:0:0, v3601:0:0:0, v3607:0:0:0, sum~cons_1~v3889:0:0:0, v3613:0:0:0, v3627:0:0:0) -> f_1209(v3600:0:0:0, v3601:0:0:0, v3607:0:0:0, v3889:0:0:0, 1 + v3613:0:0:0, v3627:0:0:0) :|: v3889:0:0:0 > 0 && v3613:0:0:0 > 0 && sum~cons_1~v3889:0:0:0 = 1 + v3889:0:0:0

----------------------------------------

(28) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1209(x1, x2, x3, x4, x5, x6) -> f_1209(x4, x5)

----------------------------------------

(29)
Obligation:
Rules:
f_1209(sum~cons_1~v3889:0:0:0, v3613:0:0:0) -> f_1209(v3889:0:0:0, 1 + v3613:0:0:0) :|: v3889:0:0:0 > 0 && v3613:0:0:0 > 0 && sum~cons_1~v3889:0:0:0 = 1 + v3889:0:0:0

----------------------------------------

(30) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1209 ] = f_1209_1

The following rules are decreasing:
f_1209(sum~cons_1~v3889:0:0:0, v3613:0:0:0) -> f_1209(v3889:0:0:0, 1 + v3613:0:0:0) :|: v3889:0:0:0 > 0 && v3613:0:0:0 > 0 && sum~cons_1~v3889:0:0:0 = 1 + v3889:0:0:0

The following rules are bounded:
f_1209(sum~cons_1~v3889:0:0:0, v3613:0:0:0) -> f_1209(v3889:0:0:0, 1 + v3613:0:0:0) :|: v3889:0:0:0 > 0 && v3613:0:0:0 > 0 && sum~cons_1~v3889:0:0:0 = 1 + v3889:0:0:0


----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
SCC
----------------------------------------

(33) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 27 rulesP rules:
f_1105(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v2881, v2882, v2883, v2884, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8) -> f_1108(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v2881, v2882, v2883, v2884, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8) :|: 0 = 0
f_1108(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v2881, v2882, v2883, v2884, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8) -> f_1112(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v2882, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8) :|: 0 = 0
f_1112(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v2882, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8) -> f_1115(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v2882, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: v3006 = v2872 + 4 * v2879 && 5 <= v3006
f_1115(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v2882, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1118(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v2882, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_1118(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v2882, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1122(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v2882, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: TRUE
f_1122(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v2882, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1126(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_1126(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1131(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: v3119 = 2 + v3006 && 7 <= v3119
f_1131(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1134(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: TRUE
f_1134(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1137(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: TRUE
f_1137(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v2883, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1139(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_1139(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1141(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: TRUE
f_1141(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, v2884, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1143(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_1143(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1146(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: v3137 <= 0
f_1146(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1149(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_1149(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1152(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: TRUE
f_1152(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1155(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: TRUE
f_1155(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v2881, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1158(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_1158(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1161(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v3210, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: v3210 = 1 + v2879 && 2 <= v3210
f_1161(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v3210, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1164(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v3210, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: TRUE
f_1164(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v3210, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1167(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v3210, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: TRUE
f_1167(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v3006, v3119, v3137, 0, v3210, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1171(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v3210, 1, v2879, v3006, v3119, v3137, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_1171(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v3210, 1, v2879, v3006, v3119, v3137, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1175(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v3210, 1, v2879, v3006, v3119, v3137, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_1175(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v3210, 1, v2879, v3006, v3119, v3137, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 5) -> f_1179(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v3210, 1, v2879, v3006, v3119, v3137, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 12, 5) :|: v3210 < v2873 && 3 <= v2873 && 12 <= v2895
f_1179(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v3210, 1, v2879, v3006, v3119, v3137, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 12, 5) -> f_1184(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v3210, 1, v2879, v3006, v3119, v3137, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 12, 5) :|: 0 = 0
f_1184(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v3210, 1, v2879, v3006, v3119, v3137, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 12, 5) -> f_1189(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v3210, 1, v2879, v3006, v3119, v3137, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 12, 5) :|: TRUE
f_1189(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v3210, 1, v2879, v3006, v3119, v3137, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2883, v2884, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8, 12, 5) -> f_1102(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v3210, 1, v2879, v3006, v3119, v3137, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8) :|: TRUE
f_1102(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v2881, v2882, v2883, v2884, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8) -> f_1105(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879, 1, v2881, v2882, v2883, v2884, 0, v2886, v2892, v2887, v2893, v2888, v2894, v2895, v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2889, v2890, v2891, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_1105(v2872:0, v2873:0, v2874:0, v2875:0, v2876:0, v2877:0, v2878:0, v2879:0, 1, v2881:0, v2882:0, v2883:0, v2884:0, 0, v2886:0, v2892:0, v2887:0, v2893:0, v2888:0, v2894:0, v2895:0, v2896:0, v2897:0, v2898:0, v2899:0, v2900:0, v2901:0, v2902:0, v2889:0, v2890:0, v2891:0, 3, 7, 2, 4, 8) -> f_1105(v2872:0, v2873:0, v2874:0, v2875:0, v2876:0, v2877:0, v2878:0, 1 + v2879:0, 1, v2879:0, v2872:0 + 4 * v2879:0, 2 + (v2872:0 + 4 * v2879:0), v3137:0, 0, v2886:0, v2892:0, v2887:0, v2893:0, v2888:0, v2894:0, v2895:0, v2896:0, v2897:0, v2898:0, v2899:0, v2900:0, v2901:0, v2902:0, v2889:0, v2890:0, v2891:0, 3, 7, 2, 4, 8) :|: v2872:0 + 4 * v2879:0 > 4 && v3137:0 < 1 && v2879:0 > 0 && v2873:0 > 2 && v2895:0 > 11 && v2873:0 > 1 + v2879:0
Filtered unneeded arguments:
   f_1105(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36) -> f_1105(x1, x2, x8, x21)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1105(v2872:0, v2873:0, v2879:0, v2895:0) -> f_1105(v2872:0, v2873:0, 1 + v2879:0, v2895:0) :|: v2879:0 > 0 && v2872:0 + 4 * v2879:0 > 4 && v2873:0 > 2 && v2873:0 > 1 + v2879:0 && v2895:0 > 11

----------------------------------------

(34)
Obligation:
Rules:
f_1105(v2872:0, v2873:0, v2879:0, v2895:0) -> f_1105(v2872:0, v2873:0, 1 + v2879:0, v2895:0) :|: v2879:0 > 0 && v2872:0 + 4 * v2879:0 > 4 && v2873:0 > 2 && v2873:0 > 1 + v2879:0 && v2895:0 > 11

----------------------------------------

(35) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(36)
Obligation:
Rules:
f_1105(v2872:0:0, v2873:0:0, v2879:0:0, v2895:0:0) -> f_1105(v2872:0:0, v2873:0:0, 1 + v2879:0:0, v2895:0:0) :|: v2873:0:0 > 1 + v2879:0:0 && v2895:0:0 > 11 && v2873:0:0 > 2 && v2872:0:0 + 4 * v2879:0:0 > 4 && v2879:0:0 > 0

----------------------------------------

(37) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1105(x, x1, x2, x3)] = -2 + x1 - x2

The following rules are decreasing:
f_1105(v2872:0:0, v2873:0:0, v2879:0:0, v2895:0:0) -> f_1105(v2872:0:0, v2873:0:0, 1 + v2879:0:0, v2895:0:0) :|: v2873:0:0 > 1 + v2879:0:0 && v2895:0:0 > 11 && v2873:0:0 > 2 && v2872:0:0 + 4 * v2879:0:0 > 4 && v2879:0:0 > 0
The following rules are bounded:
f_1105(v2872:0:0, v2873:0:0, v2879:0:0, v2895:0:0) -> f_1105(v2872:0:0, v2873:0:0, 1 + v2879:0:0, v2895:0:0) :|: v2873:0:0 > 1 + v2879:0:0 && v2895:0:0 > 11 && v2873:0:0 > 2 && v2872:0:0 + 4 * v2879:0:0 > 4 && v2879:0:0 > 0

----------------------------------------

(38)
YES

----------------------------------------

(39)
Obligation:
SCC
----------------------------------------

(40) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_822(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1353, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) -> f_825(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1353, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) :|: v1377 = 1 + v1352 && 2 <= v1377
f_825(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1353, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) -> f_829(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1353, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) :|: TRUE
f_829(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1353, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) -> f_833(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1353, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) :|: 0 = 0
f_833(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1353, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) -> f_838(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) :|: 0 = 0
f_838(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) -> f_843(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1396, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) :|: 1 + v1396 = v1350 && 0 <= v1396
f_843(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1396, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) -> f_848(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1396, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) :|: TRUE
f_848(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1396, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) -> f_852(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1396, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) :|: TRUE
f_852(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1396, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) -> f_856(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1396, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) :|: 0 = 0
f_856(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1377, v1396, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) -> f_860(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1396, v1350, v1352, v1377, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) :|: 0 = 0
f_860(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1396, v1350, v1352, v1377, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) -> f_864(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1396, v1352, v1377, v1350, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) :|: 0 = 0
f_864(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1396, v1352, v1377, v1350, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) -> f_868(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1396, v1352, v1377, v1350, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) :|: 0 < v1396 && 2 <= v1350
f_868(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1396, v1352, v1377, v1350, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) -> f_873(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1396, v1352, v1377, v1350, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) :|: 0 = 0
f_873(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1396, v1352, v1377, v1350, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) -> f_878(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1396, v1352, v1377, v1350, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) :|: TRUE
f_878(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1396, v1352, v1377, v1350, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) -> f_819(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1396, v1352, v1377, v1350, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) :|: TRUE
f_819(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1351, v1352, v1353, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) -> f_822(v1340, v1341, v1342, v1343, v1344, v1345, v1346, 0, 1, v1349, v1350, v1352, v1353, v1354, v1360, v1355, v1361, v1356, v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1357, v1358, v1359, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_822(v1340:0, v1341:0, v1342:0, v1343:0, v1344:0, v1345:0, v1346:0, 0, 1, v1349:0, 1 + v1396:0, v1352:0, v1353:0, v1354:0, v1360:0, v1355:0, v1361:0, v1356:0, v1362:0, v1363:0, v1364:0, v1365:0, v1366:0, v1367:0, v1368:0, v1357:0, v1358:0, v1359:0, 3, 7, 2, 4, 8) -> f_822(v1340:0, v1341:0, v1342:0, v1343:0, v1344:0, v1345:0, v1346:0, 0, 1, v1349:0, v1396:0, 1 + v1352:0, 1 + v1396:0, v1354:0, v1360:0, v1355:0, v1361:0, v1356:0, v1362:0, v1363:0, v1364:0, v1365:0, v1366:0, v1367:0, v1368:0, v1357:0, v1358:0, v1359:0, 3, 7, 2, 4, 8) :|: v1396:0 > 0 && v1352:0 > 0
Filtered unneeded arguments:
   f_822(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) -> f_822(x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_822(sum~cons_1~v1396:0, v1352:0) -> f_822(v1396:0, 1 + v1352:0) :|: v1396:0 > 0 && v1352:0 > 0 && sum~cons_1~v1396:0 = 1 + v1396:0

----------------------------------------

(41)
Obligation:
Rules:
f_822(sum~cons_1~v1396:0, v1352:0) -> f_822(v1396:0, 1 + v1352:0) :|: v1396:0 > 0 && v1352:0 > 0 && sum~cons_1~v1396:0 = 1 + v1396:0

----------------------------------------

(42) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(43)
Obligation:
Rules:
f_822(sum~cons_1~v1396:0:0, v1352:0:0) -> f_822(v1396:0:0, 1 + v1352:0:0) :|: v1396:0:0 > 0 && v1352:0:0 > 0 && sum~cons_1~v1396:0:0 = 1 + v1396:0:0

----------------------------------------

(44) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_822 ] = f_822_1

The following rules are decreasing:
f_822(sum~cons_1~v1396:0:0, v1352:0:0) -> f_822(v1396:0:0, 1 + v1352:0:0) :|: v1396:0:0 > 0 && v1352:0:0 > 0 && sum~cons_1~v1396:0:0 = 1 + v1396:0:0

The following rules are bounded:
f_822(sum~cons_1~v1396:0:0, v1352:0:0) -> f_822(v1396:0:0, 1 + v1352:0:0) :|: v1396:0:0 > 0 && v1352:0:0 > 0 && sum~cons_1~v1396:0:0 = 1 + v1396:0:0


----------------------------------------

(45)
YES
/hpcwork/ff862203/termcomp25/benchmarks/PlVnk.c:11:11: warning: incompatible pointer types assigning to 'char *' from 'int *' [-Wincompatible-pointer-types]
        p = &(numbers[i]);
          ^ ~~~~~~~~~~~~~
1 warning generated.

Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
