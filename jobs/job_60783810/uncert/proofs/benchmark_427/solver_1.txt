YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/12s1E.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 21 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 384 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 31 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 8 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 31 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 5 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/12s1E.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/12s1E.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %2
		store 3, %3
		br %4
	4:
		%5 = load %2
		%6 = icmp slt %5 10
		br %6, %7, %19
	7:
		br %8
	8:
		%9 = load %3
		%10 = icmp slt %9 12
		br %10, %11, %16
	11:
		%12 = load %3
		%13 = sub i32 %12, 1
		store %13, %3
		%14 = load %3
		%15 = add i32 %14, 2
		store %15, %3
		br %8
	16:
		%17 = load %2
		%18 = add i32 %17, 1
		store %18, %2
		br %4
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_230(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 9, 4) -> f_231(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 8, 9, 4) :|: v150 < 10 && v144 <= 8
f_231(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 8, 9, 4) -> f_233(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 8, 9, 4) :|: 0 = 0
f_233(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 8, 9, 4) -> f_235(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 8, 9, 4) :|: TRUE
f_235(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 8, 9, 4) -> f_237(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 8, 9, 4) :|: TRUE
f_237(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 8, 9, 4) -> f_238(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 8, 9, 4) :|: 0 = 0
f_238(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 8, 9, 4) -> f_239(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 8, 9, 4) :|: 0 = 0
f_239(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 8, 9, 4) -> f_240(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 8, 9, 4) :|: TRUE
f_240(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 8, 9, 4) -> f_241(v141, v142, v143, v150, 1, 12, 0, 11, 10, v151, v152, v153, 3, 9, 4) :|: 0 = 0
f_241(v141, v142, v143, v150, 1, 12, 0, 11, 10, v151, v152, v153, 3, 9, 4) -> f_242(v141, v142, v143, v150, 1, 12, 0, 11, 10, v157, v151, v152, v153, 3, 9, 4, 2) :|: v157 = 1 + v150 && 2 <= v157 && v157 <= 10
f_242(v141, v142, v143, v150, 1, 12, 0, 11, 10, v157, v151, v152, v153, 3, 9, 4, 2) -> f_243(v141, v142, v143, v150, 1, 12, 0, 11, 10, v157, v151, v152, v153, 3, 9, 4, 2) :|: TRUE
f_243(v141, v142, v143, v150, 1, 12, 0, 11, 10, v157, v151, v152, v153, 3, 9, 4, 2) -> f_244(v141, v142, v143, v150, 1, 12, 0, 11, 10, v157, v151, v152, v153, 3, 9, 4, 2) :|: TRUE
f_244(v141, v142, v143, v150, 1, 12, 0, 11, 10, v157, v151, v152, v153, 3, 9, 4, 2) -> f_229(v141, v142, v143, v150, 1, 12, 0, 11, 10, v157, v151, v152, v153, 3, 9, 4) :|: TRUE
f_229(v141, v142, v143, v144, 1, 12, 0, 11, 10, v150, v151, v152, v153, 3, 9, 4) -> f_230(v141, v142, v143, v150, 1, 12, 0, 11, 10, v144, v151, v152, v153, 3, 9, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_230(v141:0, v142:0, v143:0, v150:0, 1, 12, 0, 11, 10, v144:0, v151:0, v152:0, v153:0, 3, 9, 4) -> f_230(v141:0, v142:0, v143:0, 1 + v150:0, 1, 12, 0, 11, 10, v150:0, v151:0, v152:0, v153:0, 3, 9, 4) :|: v144:0 < 9 && v150:0 < 10 && v150:0 > 0
Filtered unneeded arguments:
   f_230(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_230(x4, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_230(v150:0, v144:0) -> f_230(1 + v150:0, v150:0) :|: v150:0 < 10 && v150:0 > 0 && v144:0 < 9

----------------------------------------

(9)
Obligation:
Rules:
f_230(v150:0, v144:0) -> f_230(1 + v150:0, v150:0) :|: v150:0 < 10 && v150:0 > 0 && v144:0 < 9

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_230(v150:0:0, v144:0:0) -> f_230(1 + v150:0:0, v150:0:0) :|: v150:0:0 < 10 && v150:0:0 > 0 && v144:0:0 < 9

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_230 ] = -1*f_230_1

The following rules are decreasing:
f_230(v150:0:0, v144:0:0) -> f_230(1 + v150:0:0, v150:0:0) :|: v150:0:0 < 10 && v150:0:0 > 0 && v144:0:0 < 9

The following rules are bounded:
f_230(v150:0:0, v144:0:0) -> f_230(1 + v150:0:0, v150:0:0) :|: v150:0:0 < 10 && v150:0:0 > 0 && v144:0:0 < 9


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_144(v37, v38, v39, 0, 1, v44, v42, v43, v45, v46, v47, 3, 2, 11, 10, 4, 12) -> f_145(v37, v38, v39, 0, 1, v44, v42, v43, v45, v46, v47, 3, 2, 10, 9, 4, 11) :|: v44 < 12 && v43 <= 9 && v42 <= 10
f_145(v37, v38, v39, 0, 1, v44, v42, v43, v45, v46, v47, 3, 2, 10, 9, 4, 11) -> f_147(v37, v38, v39, 0, 1, v44, v42, v43, v45, v46, v47, 3, 2, 10, 9, 4, 11) :|: 0 = 0
f_147(v37, v38, v39, 0, 1, v44, v42, v43, v45, v46, v47, 3, 2, 10, 9, 4, 11) -> f_149(v37, v38, v39, 0, 1, v44, v42, v43, v45, v46, v47, 3, 2, 10, 9, 4, 11) :|: TRUE
f_149(v37, v38, v39, 0, 1, v44, v42, v43, v45, v46, v47, 3, 2, 10, 9, 4, 11) -> f_151(v37, v38, v39, 0, 1, v44, v43, v45, v46, v47, 3, 2, 9, 4, 11) :|: 0 = 0
f_151(v37, v38, v39, 0, 1, v44, v43, v45, v46, v47, 3, 2, 9, 4, 11) -> f_153(v37, v38, v39, 0, 1, v44, v48, v43, v45, v46, v47, 3, 2, 9, 4, 11, 10) :|: 1 + v48 = v44 && 3 <= v48 && v48 <= 10
f_153(v37, v38, v39, 0, 1, v44, v48, v43, v45, v46, v47, 3, 2, 9, 4, 11, 10) -> f_155(v37, v38, v39, 0, 1, v44, v48, v43, v45, v46, v47, 3, 2, 9, 4, 11, 10) :|: TRUE
f_155(v37, v38, v39, 0, 1, v44, v48, v43, v45, v46, v47, 3, 2, 9, 4, 11, 10) -> f_157(v37, v38, v39, 0, 1, v44, v48, v45, v46, v47, 3, 4, 11, 10) :|: 0 = 0
f_157(v37, v38, v39, 0, 1, v44, v48, v45, v46, v47, 3, 4, 11, 10) -> f_159(v37, v38, v39, 0, 1, v44, v48, v50, v45, v46, v47, 3, 2, 4, 11, 10, 5, 12) :|: v50 = 2 + v48 && 5 <= v50 && v50 <= 12
f_159(v37, v38, v39, 0, 1, v44, v48, v50, v45, v46, v47, 3, 2, 4, 11, 10, 5, 12) -> f_161(v37, v38, v39, 0, 1, v44, v48, v50, v45, v46, v47, 3, 2, 4, 11, 10, 5, 12) :|: TRUE
f_161(v37, v38, v39, 0, 1, v44, v48, v50, v45, v46, v47, 3, 2, 4, 11, 10, 5, 12) -> f_163(v37, v38, v39, 0, 1, v44, v48, v50, v45, v46, v47, 3, 2, 4, 11, 10, 5, 12) :|: TRUE
f_163(v37, v38, v39, 0, 1, v44, v48, v50, v45, v46, v47, 3, 2, 4, 11, 10, 5, 12) -> f_143(v37, v38, v39, 0, 1, v44, v48, v50, v45, v46, v47, 3, 2, 11, 10, 4, 12) :|: TRUE
f_143(v37, v38, v39, 0, 1, v42, v43, v44, v45, v46, v47, 3, 2, 11, 10, 4, 12) -> f_144(v37, v38, v39, 0, 1, v44, v42, v43, v45, v46, v47, 3, 2, 11, 10, 4, 12) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_144(v37:0, v38:0, v39:0, 0, 1, 1 + v48:0, v42:0, v43:0, v45:0, v46:0, v47:0, 3, 2, 11, 10, 4, 12) -> f_144(v37:0, v38:0, v39:0, 0, 1, 2 + v48:0, 1 + v48:0, v48:0, v45:0, v46:0, v47:0, 3, 2, 11, 10, 4, 12) :|: v43:0 < 10 && v48:0 < 11 && v42:0 < 11 && v48:0 > 2
Filtered unneeded arguments:
   f_144(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_144(x6, x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_144(sum~cons_1~v48:0, v42:0, v43:0) -> f_144(2 + v48:0, 1 + v48:0, v48:0) :|: v48:0 < 11 && v43:0 < 10 && v48:0 > 2 && v42:0 < 11 && sum~cons_1~v48:0 = 1 + v48:0

----------------------------------------

(16)
Obligation:
Rules:
f_144(sum~cons_1~v48:0, v42:0, v43:0) -> f_144(2 + v48:0, 1 + v48:0, v48:0) :|: v48:0 < 11 && v43:0 < 10 && v48:0 > 2 && v42:0 < 11 && sum~cons_1~v48:0 = 1 + v48:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_144(sum~cons_1~v48:0:0, v42:0:0, v43:0:0) -> f_144(2 + v48:0:0, 1 + v48:0:0, v48:0:0) :|: v48:0:0 > 2 && v42:0:0 < 11 && v43:0:0 < 10 && v48:0:0 < 11 && sum~cons_1~v48:0:0 = 1 + v48:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_144 ] = -1*f_144_1

The following rules are decreasing:
f_144(sum~cons_1~v48:0:0, v42:0:0, v43:0:0) -> f_144(2 + v48:0:0, 1 + v48:0:0, v48:0:0) :|: v48:0:0 > 2 && v42:0:0 < 11 && v43:0:0 < 10 && v48:0:0 < 11 && sum~cons_1~v48:0:0 = 1 + v48:0:0

The following rules are bounded:
f_144(sum~cons_1~v48:0:0, v42:0:0, v43:0:0) -> f_144(2 + v48:0:0, 1 + v48:0:0, v48:0:0) :|: v48:0:0 > 2 && v42:0:0 < 11 && v43:0:0 < 10 && v48:0:0 < 11 && sum~cons_1~v48:0:0 = 1 + v48:0:0


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
