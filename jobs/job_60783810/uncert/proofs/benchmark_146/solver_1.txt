MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/HE0jR.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/HE0jR.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/HE0jR.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "knapsack" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *i32, 1 *i32, 2 i32, 3 *i32, 4 *i32, 5 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%7 = alloca *i32, align 8
		%8 = alloca *i32, align 8
		%9 = alloca i32, align 4
		%10 = alloca *i32, align 8
		%11 = alloca *i32, align 8
		%12 = alloca i32, align 4
		%13 = alloca i32, align 4
		%14 = alloca i32, align 4
		store %0, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		store %1, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %8)
		store %2, %9
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %9)
		store %3, %10
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %10)
		store %4, %11
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %11)
		store %5, %12
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %12)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %13)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %14)
		store 1, %14
		br %15
	15:
		%16 = load %14
		%17 = load %9
		%18 = icmp sle %16 %17
		br %18, %19, %92
	19:
		store 1, %13
		br %20
	20:
		%21 = load %13
		%22 = load %12
		%23 = icmp sle %21 %22
		br %23, %24, %88
	24:
		%25 = load %13
		%26 = load %7
		%27 = load %14
		%28 = sext i32 %27 to i64
		%29 = getelementptr %26, %28
		%30 = load %29
		%31 = icmp sge %25 %30
		br %31, %32, %84
	32:
		%33 = load %10
		%34 = load %13
		%35 = sext i32 %34 to i64
		%36 = getelementptr %33, %35
		%37 = load %36
		%38 = load %10
		%39 = load %13
		%40 = load %7
		%41 = load %14
		%42 = sext i32 %41 to i64
		%43 = getelementptr %40, %42
		%44 = load %43
		%45 = sub i32 %39, %44
		%46 = sext i32 %45 to i64
		%47 = getelementptr %38, %46
		%48 = load %47
		%49 = load %8
		%50 = load %14
		%51 = sext i32 %50 to i64
		%52 = getelementptr %49, %51
		%53 = load %52
		%54 = add i32 %48, %53
		%55 = icmp slt %37 %54
		br %55, %56, %83
	56:
		%57 = load %10
		%58 = load %13
		%59 = load %7
		%60 = load %14
		%61 = sext i32 %60 to i64
		%62 = getelementptr %59, %61
		%63 = load %62
		%64 = sub i32 %58, %63
		%65 = sext i32 %64 to i64
		%66 = getelementptr %57, %65
		%67 = load %66
		%68 = load %8
		%69 = load %14
		%70 = sext i32 %69 to i64
		%71 = getelementptr %68, %70
		%72 = load %71
		%73 = add i32 %67, %72
		%74 = load %10
		%75 = load %13
		%76 = sext i32 %75 to i64
		%77 = getelementptr %74, %76
		store %73, %77
		%78 = load %14
		%79 = load %11
		%80 = load %13
		%81 = sext i32 %80 to i64
		%82 = getelementptr %79, %81
		store %78, %82
		br %83
	83:
		br %84
	84:
		br %85
	85:
		%86 = load %13
		%87 = add i32 %86, 1
		store %87, %13
		br %20
	88:
		br %89
	89:
		%90 = load %14
		%91 = add i32 %90, 1
		store %91, %14
		br %15
	92:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 96
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		%9 = call i32 @__VERIFIER_nondet_int()
		store %9, %7
		%10 = load %2
		%11 = load %3
		%12 = load %4
		%13 = load %5
		%14 = load %6
		%15 = load %7
		Unnamed Call-Instruction = call BasicVoidType @knapsack(*i32 %10, *i32 %11, i32 %12, *i32 %13, *i32 %14, i32 %15)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()Aborted 1756892240Exec. 4, LLVMToSEGraph with some error. Reason: java.lang.IllegalStateException: Adding two weak inequalities would result in an equation - but this should have been detected earlier!.
            aprove.InputModules.Programs.llvm.internalStructures.expressions.relations.LLVMHeuristicRelationSet.addRelation(LLVMHeuristicRelationSet.java:278)
            aprove.InputModules.Programs.llvm.internalStructures.expressions.relations.LLVMHeuristicRelationSet.addRelations(LLVMHeuristicRelationSet.java:318)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicState.cleanRelations(LLVMHeuristicState.java:800)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicState.adjustValues(LLVMHeuristicState.java:594)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicState.postProcess(LLVMHeuristicState.java:3220)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicState.postProcessAfterRefinement(LLVMHeuristicState.java:2662)
            aprove.InputModules.Programs.llvm.states.LLVMAbstractState.evaluate(LLVMAbstractState.java:542)
            aprove.InputModules.Programs.llvm.segraph.graphConstructionSteps.LLVMStandardStep.perform(LLVMStandardStep.java:98)
            aprove.InputModules.Programs.llvm.segraph.LLVMSEGraph.executeStepAndPutSucessorStepsInQueue(LLVMSEGraph.java:1087)
