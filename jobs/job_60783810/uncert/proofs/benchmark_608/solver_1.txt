MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/9Hrh7.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 43 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 17.2 s]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
    (8) LLVM Symbolic Execution SCC
    (9) LLVM Symbolic Execution SCC


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/9Hrh7.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/9Hrh7.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: nomsg initVal: -1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: mode1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: r1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: ep21 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p21_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: m1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: max1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: ep31 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p31_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: newmax1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: nl1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: ep12 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p12_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: ep13 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p13_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: r2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p12_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: m2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: max2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: ep32 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p32_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: newmax2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: nl2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p21_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: ep23 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p23_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: r3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p13_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: m3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: max3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p23_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: newmax3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: nl3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p31_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p32_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: nodes initVal: (@node1,@node2,@node3) type: [3 x *BasicFunctionType varArgs: falsereturnType: BasicVoidTypeparamTypes: ()] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: null section: null

Name: p12 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p13 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p21 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p23 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p31 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p32 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet__Bool" returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_char" returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "node1" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 121
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		store 0, %1
		%2 = load @mode1
		%3 = trunc i8 %2 to i1
		br %3, %4, %53
	4:
		%5 = load @r1
		%6 = sext i8 %5 to i32
		%7 = add i32 %6, 1
		%8 = trunc i32 %7 to i8
		store %8, @r1
		%9 = load @ep21
		%10 = trunc i8 %9 to i1
		br %10, %11, %22
	11:
		%12 = load @p21_old
		store %12, @m1
		%13 = load @nomsg
		store %13, @p21_old
		%14 = load @m1
		%15 = sext i8 %14 to i32
		%16 = load @max1
		%17 = sext i8 %16 to i32
		%18 = icmp sgt %15 %17
		br %18, %19, %21
	19:
		%20 = load @m1
		store %20, @max1
		store 1, %1
		br %21
	21:
		br %22
	22:
		%23 = load @ep31
		%24 = trunc i8 %23 to i1
		br %24, %25, %36
	25:
		%26 = load @p31_old
		store %26, @m1
		%27 = load @nomsg
		store %27, @p31_old
		%28 = load @m1
		%29 = sext i8 %28 to i32
		%30 = load @max1
		%31 = sext i8 %30 to i32
		%32 = icmp sgt %29 %31
		br %32, %33, %35
	33:
		%34 = load @m1
		store %34, @max1
		store 1, %1
		br %35
	35:
		br %36
	36:
		%37 = load %1
		%38 = trunc i8 %37 to i1
		%39 = zext i1 %38 to i8
		store %39, @newmax1
		%40 = load @r1
		%41 = sext i8 %40 to i32
		%42 = icmp eq %41 2
		br %42, %43, %52
	43:
		%44 = load @max1
		%45 = sext i8 %44 to i32
		%46 = load @id1
		%47 = sext i8 %46 to i32
		%48 = icmp eq %45 %47
		br %48, %49, %50
	49:
		store 1, @st1
		br %51
	50:
		store 1, @nl1
		br %51
	51:
		br %52
	52:
		store 0, @mode1
		br %115
	53:
		%54 = load @r1
		%55 = sext i8 %54 to i32
		%56 = icmp slt %55 2
		br %56, %57, %114
	57:
		%58 = load @ep12
		%59 = trunc i8 %58 to i1
		br %59, %60, %85
	60:
		%61 = load @newmax1
		%62 = trunc i8 %61 to i1
		br %62, %63, %84
	63:
		%64 = load @max1
		%65 = sext i8 %64 to i32
		%66 = load @nomsg
		%67 = sext i8 %66 to i32
		%68 = icmp ne %65 %67
		br %68, %69, %78
	69:
		%70 = load @p12_new
		%71 = sext i8 %70 to i32
		%72 = load @nomsg
		%73 = sext i8 %72 to i32
		%74 = icmp eq %71 %73
		br %74, %75, %78
	75:
		%76 = load @max1
		%77 = sext i8 %76 to i32
		br %81
	78:
		%79 = load @p12_new
		%80 = sext i8 %79 to i32
		br %81
	81:
		%82 = phi [%77, %75], [%80, %78]
		%83 = trunc i32 %82 to i8
		store %83, @p12_new
		br %84
	84:
		br %85
	85:
		%86 = load @ep13
		%87 = trunc i8 %86 to i1
		br %87, %88, %113
	88:
		%89 = load @newmax1
		%90 = trunc i8 %89 to i1
		br %90, %91, %112
	91:
		%92 = load @max1
		%93 = sext i8 %92 to i32
		%94 = load @nomsg
		%95 = sext i8 %94 to i32
		%96 = icmp ne %93 %95
		br %96, %97, %106
	97:
		%98 = load @p13_new
		%99 = sext i8 %98 to i32
		%100 = load @nomsg
		%101 = sext i8 %100 to i32
		%102 = icmp eq %99 %101
		br %102, %103, %106
	103:
		%104 = load @max1
		%105 = sext i8 %104 to i32
		br %109
	106:
		%107 = load @p13_new
		%108 = sext i8 %107 to i32
		br %109
	109:
		%110 = phi [%105, %103], [%108, %106]
		%111 = trunc i32 %110 to i8
		store %111, @p13_new
		br %112
	112:
		br %113
	113:
		br %114
	114:
		store 1, @mode1
		br %115
	115:
		ret void

*BasicFunctionTypename: "node2" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 250
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		store 0, %1
		%2 = load @mode2
		%3 = trunc i8 %2 to i1
		br %3, %4, %53
	4:
		%5 = load @r2
		%6 = sext i8 %5 to i32
		%7 = add i32 %6, 1
		%8 = trunc i32 %7 to i8
		store %8, @r2
		%9 = load @ep12
		%10 = trunc i8 %9 to i1
		br %10, %11, %22
	11:
		%12 = load @p12_old
		store %12, @m2
		%13 = load @nomsg
		store %13, @p12_old
		%14 = load @m2
		%15 = sext i8 %14 to i32
		%16 = load @max2
		%17 = sext i8 %16 to i32
		%18 = icmp sgt %15 %17
		br %18, %19, %21
	19:
		%20 = load @m2
		store %20, @max2
		store 1, %1
		br %21
	21:
		br %22
	22:
		%23 = load @ep32
		%24 = trunc i8 %23 to i1
		br %24, %25, %36
	25:
		%26 = load @p32_old
		store %26, @m2
		%27 = load @nomsg
		store %27, @p32_old
		%28 = load @m2
		%29 = sext i8 %28 to i32
		%30 = load @max2
		%31 = sext i8 %30 to i32
		%32 = icmp sgt %29 %31
		br %32, %33, %35
	33:
		%34 = load @m2
		store %34, @max2
		store 1, %1
		br %35
	35:
		br %36
	36:
		%37 = load %1
		%38 = trunc i8 %37 to i1
		%39 = zext i1 %38 to i8
		store %39, @newmax2
		%40 = load @r2
		%41 = sext i8 %40 to i32
		%42 = icmp eq %41 2
		br %42, %43, %52
	43:
		%44 = load @max2
		%45 = sext i8 %44 to i32
		%46 = load @id2
		%47 = sext i8 %46 to i32
		%48 = icmp eq %45 %47
		br %48, %49, %50
	49:
		store 1, @st2
		br %51
	50:
		store 1, @nl2
		br %51
	51:
		br %52
	52:
		store 0, @mode2
		br %115
	53:
		%54 = load @r2
		%55 = sext i8 %54 to i32
		%56 = icmp slt %55 2
		br %56, %57, %114
	57:
		%58 = load @ep21
		%59 = trunc i8 %58 to i1
		br %59, %60, %85
	60:
		%61 = load @newmax2
		%62 = trunc i8 %61 to i1
		br %62, %63, %84
	63:
		%64 = load @max2
		%65 = sext i8 %64 to i32
		%66 = load @nomsg
		%67 = sext i8 %66 to i32
		%68 = icmp ne %65 %67
		br %68, %69, %78
	69:
		%70 = load @p21_new
		%71 = sext i8 %70 to i32
		%72 = load @nomsg
		%73 = sext i8 %72 to i32
		%74 = icmp eq %71 %73
		br %74, %75, %78
	75:
		%76 = load @max2
		%77 = sext i8 %76 to i32
		br %81
	78:
		%79 = load @p21_new
		%80 = sext i8 %79 to i32
		br %81
	81:
		%82 = phi [%77, %75], [%80, %78]
		%83 = trunc i32 %82 to i8
		store %83, @p21_new
		br %84
	84:
		br %85
	85:
		%86 = load @ep23
		%87 = trunc i8 %86 to i1
		br %87, %88, %113
	88:
		%89 = load @newmax2
		%90 = trunc i8 %89 to i1
		br %90, %91, %112
	91:
		%92 = load @max2
		%93 = sext i8 %92 to i32
		%94 = load @nomsg
		%95 = sext i8 %94 to i32
		%96 = icmp ne %93 %95
		br %96, %97, %106
	97:
		%98 = load @p23_new
		%99 = sext i8 %98 to i32
		%100 = load @nomsg
		%101 = sext i8 %100 to i32
		%102 = icmp eq %99 %101
		br %102, %103, %106
	103:
		%104 = load @max2
		%105 = sext i8 %104 to i32
		br %109
	106:
		%107 = load @p23_new
		%108 = sext i8 %107 to i32
		br %109
	109:
		%110 = phi [%105, %103], [%108, %106]
		%111 = trunc i32 %110 to i8
		store %111, @p23_new
		br %112
	112:
		br %113
	113:
		br %114
	114:
		store 1, @mode2
		br %115
	115:
		ret void

*BasicFunctionTypename: "node3" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 379
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		store 0, %1
		%2 = load @mode3
		%3 = trunc i8 %2 to i1
		br %3, %4, %53
	4:
		%5 = load @r3
		%6 = sext i8 %5 to i32
		%7 = add i32 %6, 1
		%8 = trunc i32 %7 to i8
		store %8, @r3
		%9 = load @ep13
		%10 = trunc i8 %9 to i1
		br %10, %11, %22
	11:
		%12 = load @p13_old
		store %12, @m3
		%13 = load @nomsg
		store %13, @p13_old
		%14 = load @m3
		%15 = sext i8 %14 to i32
		%16 = load @max3
		%17 = sext i8 %16 to i32
		%18 = icmp sgt %15 %17
		br %18, %19, %21
	19:
		%20 = load @m3
		store %20, @max3
		store 1, %1
		br %21
	21:
		br %22
	22:
		%23 = load @ep23
		%24 = trunc i8 %23 to i1
		br %24, %25, %36
	25:
		%26 = load @p23_old
		store %26, @m3
		%27 = load @nomsg
		store %27, @p23_old
		%28 = load @m3
		%29 = sext i8 %28 to i32
		%30 = load @max3
		%31 = sext i8 %30 to i32
		%32 = icmp sgt %29 %31
		br %32, %33, %35
	33:
		%34 = load @m3
		store %34, @max3
		store 1, %1
		br %35
	35:
		br %36
	36:
		%37 = load %1
		%38 = trunc i8 %37 to i1
		%39 = zext i1 %38 to i8
		store %39, @newmax3
		%40 = load @r3
		%41 = sext i8 %40 to i32
		%42 = icmp eq %41 2
		br %42, %43, %52
	43:
		%44 = load @max3
		%45 = sext i8 %44 to i32
		%46 = load @id3
		%47 = sext i8 %46 to i32
		%48 = icmp eq %45 %47
		br %48, %49, %50
	49:
		store 1, @st3
		br %51
	50:
		store 1, @nl3
		br %51
	51:
		br %52
	52:
		store 0, @mode3
		br %115
	53:
		%54 = load @r3
		%55 = sext i8 %54 to i32
		%56 = icmp slt %55 2
		br %56, %57, %114
	57:
		%58 = load @ep31
		%59 = trunc i8 %58 to i1
		br %59, %60, %85
	60:
		%61 = load @newmax3
		%62 = trunc i8 %61 to i1
		br %62, %63, %84
	63:
		%64 = load @max3
		%65 = sext i8 %64 to i32
		%66 = load @nomsg
		%67 = sext i8 %66 to i32
		%68 = icmp ne %65 %67
		br %68, %69, %78
	69:
		%70 = load @p31_new
		%71 = sext i8 %70 to i32
		%72 = load @nomsg
		%73 = sext i8 %72 to i32
		%74 = icmp eq %71 %73
		br %74, %75, %78
	75:
		%76 = load @max3
		%77 = sext i8 %76 to i32
		br %81
	78:
		%79 = load @p31_new
		%80 = sext i8 %79 to i32
		br %81
	81:
		%82 = phi [%77, %75], [%80, %78]
		%83 = trunc i32 %82 to i8
		store %83, @p31_new
		br %84
	84:
		br %85
	85:
		%86 = load @ep32
		%87 = trunc i8 %86 to i1
		br %87, %88, %113
	88:
		%89 = load @newmax3
		%90 = trunc i8 %89 to i1
		br %90, %91, %112
	91:
		%92 = load @max3
		%93 = sext i8 %92 to i32
		%94 = load @nomsg
		%95 = sext i8 %94 to i32
		%96 = icmp ne %93 %95
		br %96, %97, %106
	97:
		%98 = load @p32_new
		%99 = sext i8 %98 to i32
		%100 = load @nomsg
		%101 = sext i8 %100 to i32
		%102 = icmp eq %99 %101
		br %102, %103, %106
	103:
		%104 = load @max3
		%105 = sext i8 %104 to i32
		br %109
	106:
		%107 = load @p32_new
		%108 = sext i8 %107 to i32
		br %109
	109:
		%110 = phi [%105, %103], [%108, %106]
		%111 = trunc i32 %110 to i8
		store %111, @p32_new
		br %112
	112:
		br %113
	113:
		br %114
	114:
		store 1, @mode3
		br %115
	115:
		ret void

*BasicFunctionTypename: "init" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 508
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i32, align 4
		%9 = alloca i8, align 1
		%10 = alloca i32, align 4
		%11 = alloca i8, align 1
		%12 = alloca i32, align 4
		%13 = alloca i8, align 1
		%14 = alloca i32, align 4
		%15 = alloca i8, align 1
		%16 = alloca i32, align 4
		%17 = alloca i8, align 1
		%18 = alloca i32, align 4
		%19 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %9)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %10)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %11)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %12)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %13)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %14)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %15)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %16)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %17)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %18)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %19)
		%20 = load @ep12
		%21 = trunc i8 %20 to i1
		%22 = zext i1 %21 to i8
		store %22, %1
		%23 = load @ep13
		%24 = trunc i8 %23 to i1
		%25 = zext i1 %24 to i8
		store %25, %2
		%26 = load @ep21
		%27 = trunc i8 %26 to i1
		%28 = zext i1 %27 to i8
		store %28, %3
		%29 = load @ep23
		%30 = trunc i8 %29 to i1
		%31 = zext i1 %30 to i8
		store %31, %4
		%32 = load @ep31
		%33 = trunc i8 %32 to i1
		%34 = zext i1 %33 to i8
		store %34, %5
		%35 = load @ep32
		%36 = trunc i8 %35 to i1
		%37 = zext i1 %36 to i8
		store %37, %6
		%38 = load %1
		%39 = trunc i8 %38 to i1
		br %39, %40, %41
	40:
		store 1, %8
		br %52
	41:
		%42 = load %2
		%43 = trunc i8 %42 to i1
		br %43, %44, %50
	44:
		%45 = load @ep32
		%46 = trunc i8 %45 to i1
		br %46, %47, %48
	47:
		store 1, %8
		br %49
	48:
		store 0, %8
		br %49
	49:
		br %51
	50:
		store 0, %8
		br %51
	51:
		br %52
	52:
		%53 = load %8
		%54 = icmp ne %53 0
		%55 = zext i1 %54 to i8
		store %55, %7
		%56 = load %2
		%57 = trunc i8 %56 to i1
		br %57, %58, %59
	58:
		store 1, %10
		br %70
	59:
		%60 = load %1
		%61 = trunc i8 %60 to i1
		br %61, %62, %68
	62:
		%63 = load @ep23
		%64 = trunc i8 %63 to i1
		br %64, %65, %66
	65:
		store 1, %10
		br %67
	66:
		store 0, %10
		br %67
	67:
		br %69
	68:
		store 0, %10
		br %69
	69:
		br %70
	70:
		%71 = load %10
		%72 = icmp ne %71 0
		%73 = zext i1 %72 to i8
		store %73, %9
		%74 = load %3
		%75 = trunc i8 %74 to i1
		br %75, %76, %77
	76:
		store 1, %12
		br %88
	77:
		%78 = load %4
		%79 = trunc i8 %78 to i1
		br %79, %80, %86
	80:
		%81 = load @ep31
		%82 = trunc i8 %81 to i1
		br %82, %83, %84
	83:
		store 1, %12
		br %85
	84:
		store 0, %12
		br %85
	85:
		br %87
	86:
		store 0, %12
		br %87
	87:
		br %88
	88:
		%89 = load %12
		%90 = icmp ne %89 0
		%91 = zext i1 %90 to i8
		store %91, %11
		%92 = load %4
		%93 = trunc i8 %92 to i1
		br %93, %94, %95
	94:
		store 1, %14
		br %106
	95:
		%96 = load %3
		%97 = trunc i8 %96 to i1
		br %97, %98, %104
	98:
		%99 = load @ep13
		%100 = trunc i8 %99 to i1
		br %100, %101, %102
	101:
		store 1, %14
		br %103
	102:
		store 0, %14
		br %103
	103:
		br %105
	104:
		store 0, %14
		br %105
	105:
		br %106
	106:
		%107 = load %14
		%108 = icmp ne %107 0
		%109 = zext i1 %108 to i8
		store %109, %13
		%110 = load %5
		%111 = trunc i8 %110 to i1
		br %111, %112, %113
	112:
		store 1, %16
		br %124
	113:
		%114 = load %6
		%115 = trunc i8 %114 to i1
		br %115, %116, %122
	116:
		%117 = load @ep21
		%118 = trunc i8 %117 to i1
		br %118, %119, %120
	119:
		store 1, %16
		br %121
	120:
		store 0, %16
		br %121
	121:
		br %123
	122:
		store 0, %16
		br %123
	123:
		br %124
	124:
		%125 = load %16
		%126 = icmp ne %125 0
		%127 = zext i1 %126 to i8
		store %127, %15
		%128 = load %6
		%129 = trunc i8 %128 to i1
		br %129, %130, %131
	130:
		store 1, %18
		br %142
	131:
		%132 = load %5
		%133 = trunc i8 %132 to i1
		br %133, %134, %140
	134:
		%135 = load @ep12
		%136 = trunc i8 %135 to i1
		br %136, %137, %138
	137:
		store 1, %18
		br %139
	138:
		store 0, %18
		br %139
	139:
		br %141
	140:
		store 0, %18
		br %141
	141:
		br %142
	142:
		%143 = load %18
		%144 = icmp ne %143 0
		%145 = zext i1 %144 to i8
		store %145, %17
		%146 = load @id1
		%147 = sext i8 %146 to i32
		%148 = load @id2
		%149 = sext i8 %148 to i32
		%150 = icmp ne %147 %149
		br %150, %151, %300
	151:
		%152 = load @id1
		%153 = sext i8 %152 to i32
		%154 = load @id3
		%155 = sext i8 %154 to i32
		%156 = icmp ne %153 %155
		br %156, %157, %298
	157:
		%158 = load @id2
		%159 = sext i8 %158 to i32
		%160 = load @id3
		%161 = sext i8 %160 to i32
		%162 = icmp ne %159 %161
		br %162, %163, %296
	163:
		%164 = load @id1
		%165 = sext i8 %164 to i32
		%166 = icmp sge %165 0
		br %166, %167, %294
	167:
		%168 = load @id2
		%169 = sext i8 %168 to i32
		%170 = icmp sge %169 0
		br %170, %171, %292
	171:
		%172 = load @id3
		%173 = sext i8 %172 to i32
		%174 = icmp sge %173 0
		br %174, %175, %290
	175:
		%176 = load @r1
		%177 = sext i8 %176 to i32
		%178 = icmp eq %177 0
		br %178, %179, %288
	179:
		%180 = load @r2
		%181 = sext i8 %180 to i32
		%182 = icmp eq %181 0
		br %182, %183, %286
	183:
		%184 = load @r3
		%185 = sext i8 %184 to i32
		%186 = icmp eq %185 0
		br %186, %187, %284
	187:
		%188 = load @max1
		%189 = sext i8 %188 to i32
		%190 = load @id1
		%191 = sext i8 %190 to i32
		%192 = icmp eq %189 %191
		br %192, %193, %282
	193:
		%194 = load @max2
		%195 = sext i8 %194 to i32
		%196 = load @id2
		%197 = sext i8 %196 to i32
		%198 = icmp eq %195 %197
		br %198, %199, %280
	199:
		%200 = load @max3
		%201 = sext i8 %200 to i32
		%202 = load @id3
		%203 = sext i8 %202 to i32
		%204 = icmp eq %201 %203
		br %204, %205, %278
	205:
		%206 = load @st1
		%207 = sext i8 %206 to i32
		%208 = icmp eq %207 0
		br %208, %209, %276
	209:
		%210 = load @st2
		%211 = sext i8 %210 to i32
		%212 = icmp eq %211 0
		br %212, %213, %274
	213:
		%214 = load @st3
		%215 = sext i8 %214 to i32
		%216 = icmp eq %215 0
		br %216, %217, %272
	217:
		%218 = load @nl1
		%219 = sext i8 %218 to i32
		%220 = icmp eq %219 0
		br %220, %221, %270
	221:
		%222 = load @nl2
		%223 = sext i8 %222 to i32
		%224 = icmp eq %223 0
		br %224, %225, %268
	225:
		%226 = load @nl3
		%227 = sext i8 %226 to i32
		%228 = icmp eq %227 0
		br %228, %229, %266
	229:
		%230 = load @mode1
		%231 = trunc i8 %230 to i1
		%232 = zext i1 %231 to i32
		%233 = icmp eq %232 0
		br %233, %234, %264
	234:
		%235 = load @mode2
		%236 = trunc i8 %235 to i1
		%237 = zext i1 %236 to i32
		%238 = icmp eq %237 0
		br %238, %239, %262
	239:
		%240 = load @mode3
		%241 = trunc i8 %240 to i1
		%242 = zext i1 %241 to i32
		%243 = icmp eq %242 0
		br %243, %244, %260
	244:
		%245 = load @newmax1
		%246 = trunc i8 %245 to i1
		br %246, %247, %258
	247:
		%248 = load @newmax2
		%249 = trunc i8 %248 to i1
		br %249, %250, %256
	250:
		%251 = load @newmax3
		%252 = trunc i8 %251 to i1
		br %252, %253, %254
	253:
		store 1, %19
		br %255
	254:
		store 0, %19
		br %255
	255:
		br %257
	256:
		store 0, %19
		br %257
	257:
		br %259
	258:
		store 0, %19
		br %259
	259:
		br %261
	260:
		store 0, %19
		br %261
	261:
		br %263
	262:
		store 0, %19
		br %263
	263:
		br %265
	264:
		store 0, %19
		br %265
	265:
		br %267
	266:
		store 0, %19
		br %267
	267:
		br %269
	268:
		store 0, %19
		br %269
	269:
		br %271
	270:
		store 0, %19
		br %271
	271:
		br %273
	272:
		store 0, %19
		br %273
	273:
		br %275
	274:
		store 0, %19
		br %275
	275:
		br %277
	276:
		store 0, %19
		br %277
	277:
		br %279
	278:
		store 0, %19
		br %279
	279:
		br %281
	280:
		store 0, %19
		br %281
	281:
		br %283
	282:
		store 0, %19
		br %283
	283:
		br %285
	284:
		store 0, %19
		br %285
	285:
		br %287
	286:
		store 0, %19
		br %287
	287:
		br %289
	288:
		store 0, %19
		br %289
	289:
		br %291
	290:
		store 0, %19
		br %291
	291:
		br %293
	292:
		store 0, %19
		br %293
	293:
		br %295
	294:
		store 0, %19
		br %295
	295:
		br %297
	296:
		store 0, %19
		br %297
	297:
		br %299
	298:
		store 0, %19
		br %299
	299:
		br %301
	300:
		store 0, %19
		br %301
	301:
		%302 = load %19
		ret %302

*BasicFunctionTypename: "check" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 931
	0:
		%1 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%2 = load @st1
		%3 = sext i8 %2 to i32
		%4 = load @st2
		%5 = sext i8 %4 to i32
		%6 = add i32 %3, %5
		%7 = load @st3
		%8 = sext i8 %7 to i32
		%9 = add i32 %6, %8
		%10 = icmp sle %9 1
		br %10, %11, %114
	11:
		%12 = load @st1
		%13 = sext i8 %12 to i32
		%14 = load @nl1
		%15 = sext i8 %14 to i32
		%16 = add i32 %13, %15
		%17 = icmp sle %16 1
		br %17, %18, %112
	18:
		%19 = load @st2
		%20 = sext i8 %19 to i32
		%21 = load @nl2
		%22 = sext i8 %21 to i32
		%23 = add i32 %20, %22
		%24 = icmp sle %23 1
		br %24, %25, %110
	25:
		%26 = load @st3
		%27 = sext i8 %26 to i32
		%28 = load @nl3
		%29 = sext i8 %28 to i32
		%30 = add i32 %27, %29
		%31 = icmp sle %30 1
		br %31, %32, %108
	32:
		%33 = load @r1
		%34 = sext i8 %33 to i32
		%35 = icmp sge %34 2
		br %35, %36, %37
	36:
		br %48
	37:
		%38 = load @st1
		%39 = sext i8 %38 to i32
		%40 = load @st2
		%41 = sext i8 %40 to i32
		%42 = add i32 %39, %41
		%43 = load @st3
		%44 = sext i8 %43 to i32
		%45 = add i32 %42, %44
		%46 = icmp eq %45 0
		br %46, %47, %105
	47:
		br %48
	48:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%49 = load @r1
		%50 = sext i8 %49 to i32
		%51 = icmp slt %50 2
		br %51, %52, %53
	52:
		br %64
	53:
		%54 = load @st1
		%55 = sext i8 %54 to i32
		%56 = load @st2
		%57 = sext i8 %56 to i32
		%58 = add i32 %55, %57
		%59 = load @st3
		%60 = sext i8 %59 to i32
		%61 = add i32 %58, %60
		%62 = icmp eq %61 1
		br %62, %63, %102
	63:
		br %64
	64:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%65 = load @r1
		%66 = sext i8 %65 to i32
		%67 = icmp sge %66 2
		br %67, %68, %69
	68:
		br %80
	69:
		%70 = load @nl1
		%71 = sext i8 %70 to i32
		%72 = load @nl2
		%73 = sext i8 %72 to i32
		%74 = add i32 %71, %73
		%75 = load @nl3
		%76 = sext i8 %75 to i32
		%77 = add i32 %74, %76
		%78 = icmp eq %77 0
		br %78, %79, %99
	79:
		br %80
	80:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%81 = load @r1
		%82 = sext i8 %81 to i32
		%83 = icmp slt %82 2
		br %83, %84, %85
	84:
		store 1, %1
		br %98
	85:
		%86 = load @nl1
		%87 = sext i8 %86 to i32
		%88 = load @nl2
		%89 = sext i8 %88 to i32
		%90 = add i32 %87, %89
		%91 = load @nl3
		%92 = sext i8 %91 to i32
		%93 = add i32 %90, %92
		%94 = icmp eq %93 2
		br %94, %95, %96
	95:
		store 1, %1
		br %97
	96:
		store 0, %1
		br %97
	97:
		br %98
	98:
		br %100
	99:
		store 0, %1
		br %100
	100:
		br %101
	101:
		br %103
	102:
		store 0, %1
		br %103
	103:
		br %104
	104:
		br %106
	105:
		store 0, %1
		br %106
	106:
		br %107
	107:
		br %109
	108:
		store 0, %1
		br %109
	109:
		br %111
	110:
		store 0, %1
		br %111
	111:
		br %113
	112:
		store 0, %1
		br %113
	113:
		br %115
	114:
		store 0, %1
		br %115
	115:
		%116 = load %1
		ret %116

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1087
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %2
		%4 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%5 = zext i1 %4 to i8
		store %5, @ep12
		%6 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%7 = zext i1 %6 to i8
		store %7, @ep13
		%8 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%9 = zext i1 %8 to i8
		store %9, @ep21
		%10 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%11 = zext i1 %10 to i8
		store %11, @ep23
		%12 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%13 = zext i1 %12 to i8
		store %13, @ep31
		%14 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%15 = zext i1 %14 to i8
		store %15, @ep32
		%16 = call signext i8 @__VERIFIER_nondet_char()
		store %16, @id1
		%17 = call signext i8 @__VERIFIER_nondet_char()
		store %17, @r1
		%18 = call signext i8 @__VERIFIER_nondet_char()
		store %18, @st1
		%19 = call signext i8 @__VERIFIER_nondet_char()
		store %19, @nl1
		%20 = call signext i8 @__VERIFIER_nondet_char()
		store %20, @m1
		%21 = call signext i8 @__VERIFIER_nondet_char()
		store %21, @max1
		%22 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%23 = zext i1 %22 to i8
		store %23, @mode1
		%24 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%25 = zext i1 %24 to i8
		store %25, @newmax1
		%26 = call signext i8 @__VERIFIER_nondet_char()
		store %26, @id2
		%27 = call signext i8 @__VERIFIER_nondet_char()
		store %27, @r2
		%28 = call signext i8 @__VERIFIER_nondet_char()
		store %28, @st2
		%29 = call signext i8 @__VERIFIER_nondet_char()
		store %29, @nl2
		%30 = call signext i8 @__VERIFIER_nondet_char()
		store %30, @m2
		%31 = call signext i8 @__VERIFIER_nondet_char()
		store %31, @max2
		%32 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%33 = zext i1 %32 to i8
		store %33, @mode2
		%34 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%35 = zext i1 %34 to i8
		store %35, @newmax2
		%36 = call signext i8 @__VERIFIER_nondet_char()
		store %36, @id3
		%37 = call signext i8 @__VERIFIER_nondet_char()
		store %37, @r3
		%38 = call signext i8 @__VERIFIER_nondet_char()
		store %38, @st3
		%39 = call signext i8 @__VERIFIER_nondet_char()
		store %39, @nl3
		%40 = call signext i8 @__VERIFIER_nondet_char()
		store %40, @m3
		%41 = call signext i8 @__VERIFIER_nondet_char()
		store %41, @max3
		%42 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%43 = zext i1 %42 to i8
		store %43, @mode3
		%44 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%45 = zext i1 %44 to i8
		store %45, @newmax3
		%46 = call i32 @init()
		store %46, %3
		%47 = load %3
		%48 = icmp ne %47 0
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i1 zeroext %48)
		%49 = load @nomsg
		store %49, @p12_old
		%50 = load @nomsg
		store %50, @p12_new
		%51 = load @nomsg
		store %51, @p13_old
		%52 = load @nomsg
		store %52, @p13_new
		%53 = load @nomsg
		store %53, @p21_old
		%54 = load @nomsg
		store %54, @p21_new
		%55 = load @nomsg
		store %55, @p23_old
		%56 = load @nomsg
		store %56, @p23_new
		%57 = load @nomsg
		store %57, @p31_old
		%58 = load @nomsg
		store %58, @p31_new
		%59 = load @nomsg
		store %59, @p32_old
		%60 = load @nomsg
		store %60, @p32_new
		store 0, %3
		br %61
	61:
		%62 = load %3
		%63 = icmp slt %62 6
		br %63, %64, %82
	64:
		Unnamed Call-Instruction = call BasicVoidType @node1()
		Unnamed Call-Instruction = call BasicVoidType @node2()
		Unnamed Call-Instruction = call BasicVoidType @node3()
		%65 = load @p12_new
		store %65, @p12_old
		%66 = load @nomsg
		store %66, @p12_new
		%67 = load @p13_new
		store %67, @p13_old
		%68 = load @nomsg
		store %68, @p13_new
		%69 = load @p21_new
		store %69, @p21_old
		%70 = load @nomsg
		store %70, @p21_new
		%71 = load @p23_new
		store %71, @p23_old
		%72 = load @nomsg
		store %72, @p23_new
		%73 = load @p31_new
		store %73, @p31_old
		%74 = load @nomsg
		store %74, @p31_new
		%75 = load @p32_new
		store %75, @p32_old
		%76 = load @nomsg
		store %76, @p32_new
		%77 = call i32 @check()
		store %77, %2
		%78 = load %2
		%79 = icmp ne %78 0
		Unnamed Call-Instruction = call BasicVoidType @assert(i1 zeroext %79)
		%80 = load %3
		%81 = add i32 %80, 1
		store %81, %3
		br %61
	82:
		%83 = load %1
		ret %83

*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1223
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		br %4
	4:
		%5 = load %2
		%6 = trunc i8 %5 to i1
		%7 = xor i1 %6, 1
		br %7, %8, %9
	8:
		br %4
	9:
		ret void

*BasicFunctionTypename: "assert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1235
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%4 = load %2
		%5 = trunc i8 %4 to i1
		br %5, %8, %6
	6:
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	8:
		ret void


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8)
Obligation:
SCC
----------------------------------------

(9)
Obligation:
SCCInstruction count:1090
deleted entry node of node1
deleted entry node of node2
deleted entry node of node3
deleted entry node of check
deleted entry node of assert
deleted entry node of node1
deleted entry node of node2
deleted entry node of node3
deleted entry node of check
