YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/750gx.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1476 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 1 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 50 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 27 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 36 ms]
        (23) IntTRS
        (24) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (25) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/750gx.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/750gx.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %5
		store 0, %2
		br %9
	9:
		%10 = load %3
		%11 = load %4
		%12 = icmp slt %10 %11
		br %12, %13, %26
	13:
		%14 = load %3
		%15 = load %5
		%16 = icmp slt %14 %15
		br %16, %17, %20
	17:
		%18 = load %3
		%19 = add i32 %18, 1
		store %19, %3
		br %23
	20:
		%21 = load %5
		%22 = add i32 %21, 1
		store %22, %5
		br %23
	23:
		%24 = load %2
		%25 = add i32 %24, 1
		store %25, %2
		br %9
	26:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 35 rulesP rules:
f_561(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4) -> f_562(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) :|: v1592 = 1 + v1585 && 2 <= v1592
f_562(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) -> f_563(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) :|: TRUE
f_563(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) -> f_564(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) :|: TRUE
f_564(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) -> f_565(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) :|: 0 = 0
f_565(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) -> f_566(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) :|: 0 = 0
f_566(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) -> f_567(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) :|: 0 = 0
f_567(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) -> f_568(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) :|: TRUE
f_568(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) -> f_569(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) :|: 0 = 0
f_569(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1592, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) -> f_570(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, v1586, 0, v1583, v1585, v1592, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) :|: 0 = 0
f_570(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, v1586, 0, v1583, v1585, v1592, v1587, v1588, v1589, v1590, v1591, 3, 4, 2) -> f_571(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, v1586, v1583, v1585, v1592, v1587, v1588, v1589, v1590, v1591, 0, 3, 4, 2) :|: 0 = 0
f_571(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, v1586, v1583, v1585, v1592, v1587, v1588, v1589, v1590, v1591, 0, 3, 4, 2) -> f_572(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, v1586, v1583, v1585, v1592, v1587, v1588, v1589, v1590, v1591, 0, 3, 4, 2) :|: TRUE
f_572(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, v1586, v1583, v1585, v1592, v1587, v1588, v1589, v1590, v1591, 0, 3, 4, 2) -> f_573(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, v1586, v1585, v1592, v1587, v1588, v1589, v1590, v1591, 0, 3, 4, 2) :|: 0 = 0
f_573(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, v1586, v1585, v1592, v1587, v1588, v1589, v1590, v1591, 0, 3, 4, 2) -> f_574(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, v1586, v1585, v1592, v1587, v1588, v1589, v1590, v1591, 0, 3, 4, 2) :|: v1586 = 1 + v1580
f_574(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, v1586, v1585, v1592, v1587, v1588, v1589, v1590, v1591, 0, 3, 4, 2) -> f_575(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, v1586, v1585, v1592, v1587, v1588, v1589, v1590, v1591, 0, 3, 4, 2) :|: TRUE
f_575(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, v1586, v1585, v1592, v1587, v1588, v1589, v1590, v1591, 0, 3, 4, 2) -> f_576(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, v1586, v1585, v1592, v1587, v1588, v1589, v1590, v1591, 0, 3, 4, 2) :|: TRUE
f_576(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, v1586, v1585, v1592, v1587, v1588, v1589, v1590, v1591, 0, 3, 4, 2) -> f_577(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, v1586, v1585, v1592, v1587, v1588, v1589, v1590, v1591, 0, 3, 4) :|: TRUE
f_577(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1716, 1, v1718, v1719, v1720, v1721, v1722, v1723, v1724, v1725, 0, 3, 4) -> f_578(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1716, 1, v1718, v1720, v1721, v1722, v1723, v1724, v1725, 0, 3, 4) :|: 0 = 0
f_578(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1716, 1, v1718, v1720, v1721, v1722, v1723, v1724, v1725, 0, 3, 4) -> f_579(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1716, 1, v1718, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) :|: v1763 = 1 + v1720 && 2 <= v1763
f_579(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1716, 1, v1718, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) -> f_580(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1716, 1, v1718, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) :|: TRUE
f_580(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1716, 1, v1718, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) -> f_581(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1716, 1, v1718, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) :|: TRUE
f_581(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1716, 1, v1718, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) -> f_582(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) :|: 0 = 0
f_582(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) -> f_583(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) :|: 0 = 0
f_583(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) -> f_584(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) :|: v1718 < v1714
f_584(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) -> f_586(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) :|: 0 = 0
f_586(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) -> f_588(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) :|: TRUE
f_588(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) -> f_590(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) :|: 0 = 0
f_590(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) -> f_591(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) :|: 0 = 0
f_591(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 0, 3, 4, 2) -> f_592(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, 0, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 3, 4, 2) :|: 0 = 0
f_592(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, 0, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 3, 4, 2) -> f_593(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, 0, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 3, 4, 2) :|: TRUE
f_593(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, 0, v1716, v1720, v1763, v1721, v1722, v1723, v1724, v1725, 3, 4, 2) -> f_594(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, 0, v1720, v1763, v1716, v1721, v1722, v1723, v1724, v1725, 3, 4, 2) :|: 0 = 0
f_594(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, 0, v1720, v1763, v1716, v1721, v1722, v1723, v1724, v1725, 3, 4, 2) -> f_595(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, 0, v1867, v1720, v1763, v1716, v1721, v1722, v1723, v1724, v1725, 3, 4, 2) :|: v1867 = 1 + v1718
f_595(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, 0, v1867, v1720, v1763, v1716, v1721, v1722, v1723, v1724, v1725, 3, 4, 2) -> f_596(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, 0, v1867, v1720, v1763, v1716, v1721, v1722, v1723, v1724, v1725, 3, 4, 2) :|: TRUE
f_596(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, 0, v1867, v1720, v1763, v1716, v1721, v1722, v1723, v1724, v1725, 3, 4, 2) -> f_597(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, 0, v1867, v1720, v1763, v1716, v1721, v1722, v1723, v1724, v1725, 3, 4, 2) :|: TRUE
f_597(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, 0, v1867, v1720, v1763, v1716, v1721, v1722, v1723, v1724, v1725, 3, 4, 2) -> f_560(v1708, v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1718, 1, 0, v1716, v1720, v1763, v1867, v1721, v1722, v1723, v1724, v1725, 3, 4) :|: TRUE
f_560(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4) -> f_561(v1572, v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580, 1, 0, v1583, v1585, v1586, v1587, v1588, v1589, v1590, v1591, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_561(v1572:0, v1573:0, v1574:0, v1575:0, v1576:0, v1577:0, v1578:0, v1579:0, v1580:0, 1, 0, v1583:0, v1585:0, 1 + v1580:0, v1587:0, v1588:0, v1589:0, v1590:0, v1591:0, 3, 4) -> f_561(v1572:0, v1573:0, v1574:0, v1575:0, v1576:0, v1577:0, v1578:0, v1579:0, 1 + v1580:0, 1, 0, v1580:0, 1 + (1 + v1585:0), 1 + (1 + v1580:0), v1587:0, v1588:0, v1589:0, v1590:0, v1591:0, 3, 4) :|: v1578:0 > 1 + v1580:0 && v1585:0 > 0
Filtered unneeded arguments:
   f_561(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_561(x7, x9, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_561(v1578:0, v1580:0, v1585:0, sum~cons_1~v1580:0) -> f_561(v1578:0, 1 + v1580:0, 1 + (1 + v1585:0), 1 + (1 + v1580:0)) :|: v1578:0 > 1 + v1580:0 && v1585:0 > 0 && sum~cons_1~v1580:0 = 1 + v1580:0

----------------------------------------

(9)
Obligation:
Rules:
f_561(v1578:0, v1580:0, v1585:0, sum~cons_1~v1580:0) -> f_561(v1578:0, 1 + v1580:0, 1 + (1 + v1585:0), 1 + (1 + v1580:0)) :|: v1578:0 > 1 + v1580:0 && v1585:0 > 0 && sum~cons_1~v1580:0 = 1 + v1580:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_561(v1578:0:0, v1580:0:0, v1585:0:0, sum~cons_1~v1580:0:0) -> f_561(v1578:0:0, 1 + v1580:0:0, 1 + (1 + v1585:0:0), 1 + (1 + v1580:0:0)) :|: v1578:0:0 > 1 + v1580:0:0 && v1585:0:0 > 0 && sum~cons_1~v1580:0:0 = 1 + v1580:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_561(x, x1, x2, x3)] = -2 + x - x1

The following rules are decreasing:
f_561(v1578:0:0, v1580:0:0, v1585:0:0, sum~cons_1~v1580:0:0) -> f_561(v1578:0:0, 1 + v1580:0:0, 1 + (1 + v1585:0:0), 1 + (1 + v1580:0:0)) :|: v1578:0:0 > 1 + v1580:0:0 && v1585:0:0 > 0 && sum~cons_1~v1580:0:0 = 1 + v1580:0:0
The following rules are bounded:
f_561(v1578:0:0, v1580:0:0, v1585:0:0, sum~cons_1~v1580:0:0) -> f_561(v1578:0:0, 1 + v1580:0:0, 1 + (1 + v1585:0:0), 1 + (1 + v1580:0:0)) :|: v1578:0:0 > 1 + v1580:0:0 && v1585:0:0 > 0 && sum~cons_1~v1580:0:0 = 1 + v1580:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_482(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_484(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: 0 = 0
f_484(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_487(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: v1123 < v1119
f_487(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_491(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: 0 = 0
f_491(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_495(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: TRUE
f_495(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_499(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: 0 = 0
f_499(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_502(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: 0 = 0
f_502(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_505(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: v1123 < v1120
f_505(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_509(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: 0 = 0
f_509(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_513(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: TRUE
f_513(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_517(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: 0 = 0
f_517(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_521(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1207, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: v1207 = 1 + v1123
f_521(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1207, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_525(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1207, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: TRUE
f_525(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1207, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_528(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1207, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: TRUE
f_528(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1207, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_531(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1207, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: 0 = 0
f_531(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1207, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_535(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1207, v1125, v1339, v1126, v1127, v1128, v1129, v1130, 0, 3, 4, 2) :|: v1339 = 1 + v1125 && 2 <= v1339
f_535(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1207, v1125, v1339, v1126, v1127, v1128, v1129, v1130, 0, 3, 4, 2) -> f_539(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1207, v1125, v1339, v1126, v1127, v1128, v1129, v1130, 0, 3, 4, 2) :|: TRUE
f_539(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1207, v1125, v1339, v1126, v1127, v1128, v1129, v1130, 0, 3, 4, 2) -> f_543(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1207, v1125, v1339, v1126, v1127, v1128, v1129, v1130, 0, 3, 4, 2) :|: TRUE
f_543(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1207, v1125, v1339, v1126, v1127, v1128, v1129, v1130, 0, 3, 4, 2) -> f_480(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1207, v1125, v1339, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: TRUE
f_480(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1121, 1, v1123, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) -> f_482(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1123, 1, v1121, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_482(v1113:0, v1114:0, v1115:0, v1116:0, v1117:0, v1118:0, v1119:0, v1120:0, v1123:0, 1, v1121:0, v1124:0, v1125:0, v1126:0, v1127:0, v1128:0, v1129:0, v1130:0, 0, 3, 4) -> f_482(v1113:0, v1114:0, v1115:0, v1116:0, v1117:0, v1118:0, v1119:0, v1120:0, 1 + v1123:0, 1, v1123:0, v1125:0, 1 + v1125:0, v1126:0, v1127:0, v1128:0, v1129:0, v1130:0, 0, 3, 4) :|: v1123:0 < v1119:0 && v1125:0 > 0 && v1123:0 < v1120:0
Filtered unneeded arguments:
   f_482(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_482(x7, x8, x9, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_482(v1119:0, v1120:0, v1123:0, v1125:0) -> f_482(v1119:0, v1120:0, 1 + v1123:0, 1 + v1125:0) :|: v1125:0 > 0 && v1123:0 < v1120:0 && v1123:0 < v1119:0

----------------------------------------

(16)
Obligation:
Rules:
f_482(v1119:0, v1120:0, v1123:0, v1125:0) -> f_482(v1119:0, v1120:0, 1 + v1123:0, 1 + v1125:0) :|: v1125:0 > 0 && v1123:0 < v1120:0 && v1123:0 < v1119:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_482(v1119:0:0, v1120:0:0, v1123:0:0, v1125:0:0) -> f_482(v1119:0:0, v1120:0:0, 1 + v1123:0:0, 1 + v1125:0:0) :|: v1125:0:0 > 0 && v1123:0:0 < v1120:0:0 && v1123:0:0 < v1119:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_482(x, x1, x2, x3)] = -1 + x - x2

The following rules are decreasing:
f_482(v1119:0:0, v1120:0:0, v1123:0:0, v1125:0:0) -> f_482(v1119:0:0, v1120:0:0, 1 + v1123:0:0, 1 + v1125:0:0) :|: v1125:0:0 > 0 && v1123:0:0 < v1120:0:0 && v1123:0:0 < v1119:0:0
The following rules are bounded:
f_482(v1119:0:0, v1120:0:0, v1123:0:0, v1125:0:0) -> f_482(v1119:0:0, v1120:0:0, 1 + v1123:0:0, 1 + v1125:0:0) :|: v1125:0:0 > 0 && v1123:0:0 < v1120:0:0 && v1123:0:0 < v1119:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_469(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1038, 0, v1040, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) -> f_472(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1038, 0, v1040, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) :|: 0 = 0
f_472(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1038, 0, v1040, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) -> f_475(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1038, 0, v1040, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) :|: 0 = 0
f_475(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1038, 0, v1040, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) -> f_478(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1038, 0, v1040, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) :|: TRUE
f_478(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1038, 0, v1040, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) -> f_481(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1038, 0, v1040, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) :|: 0 = 0
f_481(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1038, 0, v1040, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) -> f_483(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1038, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) :|: 0 = 0
f_483(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1038, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) -> f_486(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1038, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) :|: v1040 <= v1034
f_486(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1038, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) -> f_490(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1038, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) :|: 0 = 0
f_490(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1038, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) -> f_494(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1038, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) :|: TRUE
f_494(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1038, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) -> f_498(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) :|: 0 = 0
f_498(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) -> f_501(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1152, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) :|: v1152 = 1 + v1040
f_501(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1152, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) -> f_504(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1152, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) :|: TRUE
f_504(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1152, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) -> f_508(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1152, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) :|: TRUE
f_508(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1152, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) -> f_512(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1152, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) :|: 0 = 0
f_512(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1152, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) -> f_516(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1152, v1042, v1204, v1043, v1044, v1045, v1046, v1047, 3, 4, 2) :|: v1204 = 1 + v1042 && 2 <= v1204
f_516(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1152, v1042, v1204, v1043, v1044, v1045, v1046, v1047, 3, 4, 2) -> f_520(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1152, v1042, v1204, v1043, v1044, v1045, v1046, v1047, 3, 4, 2) :|: TRUE
f_520(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1152, v1042, v1204, v1043, v1044, v1045, v1046, v1047, 3, 4, 2) -> f_524(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1152, v1042, v1204, v1043, v1044, v1045, v1046, v1047, 3, 4, 2) :|: TRUE
f_524(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1152, v1042, v1204, v1043, v1044, v1045, v1046, v1047, 3, 4, 2) -> f_466(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1040, 0, v1152, v1042, v1204, v1043, v1044, v1045, v1046, v1047, 3, 4) :|: TRUE
f_466(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1038, 0, v1040, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) -> f_469(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, 1, v1038, 0, v1040, v1041, v1042, v1043, v1044, v1045, v1046, v1047, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_469(v1029:0, v1030:0, v1031:0, v1032:0, v1033:0, v1034:0, v1035:0, v1036:0, 1, v1038:0, 0, v1040:0, v1041:0, v1042:0, v1043:0, v1044:0, v1045:0, v1046:0, v1047:0, 3, 4) -> f_469(v1029:0, v1030:0, v1031:0, v1032:0, v1033:0, v1034:0, v1035:0, v1036:0, 1, v1040:0, 0, 1 + v1040:0, v1042:0, 1 + v1042:0, v1043:0, v1044:0, v1045:0, v1046:0, v1047:0, 3, 4) :|: v1042:0 > 0 && v1040:0 <= v1034:0
Filtered unneeded arguments:
   f_469(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_469(x6, x12, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_469(v1034:0, v1040:0, v1042:0) -> f_469(v1034:0, 1 + v1040:0, 1 + v1042:0) :|: v1042:0 > 0 && v1040:0 <= v1034:0

----------------------------------------

(23)
Obligation:
Rules:
f_469(v1034:0, v1040:0, v1042:0) -> f_469(v1034:0, 1 + v1040:0, 1 + v1042:0) :|: v1042:0 > 0 && v1040:0 <= v1034:0

----------------------------------------

(24) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_469(x, x1, x2)] = x - x1

The following rules are decreasing:
f_469(v1034:0, v1040:0, v1042:0) -> f_469(v1034:0, 1 + v1040:0, 1 + v1042:0) :|: v1042:0 > 0 && v1040:0 <= v1034:0
The following rules are bounded:
f_469(v1034:0, v1040:0, v1042:0) -> f_469(v1034:0, 1 + v1040:0, 1 + v1042:0) :|: v1042:0 > 0 && v1040:0 <= v1034:0

----------------------------------------

(25)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
