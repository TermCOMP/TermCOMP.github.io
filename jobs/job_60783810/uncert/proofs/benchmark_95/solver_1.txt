YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/NnTcf.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 69 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3247 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 62 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/NnTcf.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/NnTcf.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cmemrchr" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8, 1 i32, 2 i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 13
	0:
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		%6 = alloca i32, align 4
		%7 = alloca i64, align 8
		%8 = alloca *i8, align 8
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %8)
		%9 = load %7
		%10 = icmp ne %9 0
		br %10, %11, %32
	11:
		%12 = load %5
		%13 = load %7
		%14 = getelementptr %12, %13
		store %14, %8
		br %15
	15:
		%16 = load %8
		%17 = getelementptr %16, -1
		store %17, %8
		%18 = load %17
		%19 = zext i8 %18 to i32
		%20 = load %6
		%21 = trunc i32 %20 to i8
		%22 = zext i8 %21 to i32
		%23 = icmp eq %19 %22
		br %23, %24, %26
	24:
		%25 = load %8
		store %25, %4
		br %33
	26:
		br %27
	27:
		%28 = load %7
		%29 = add i64 %28, -1
		store %29, %7
		%30 = icmp ne %29 0
		br %30, %15, %31
	31:
		br %32
	32:
		store null, %4
		br %33
	33:
		%34 = load %4
		ret %34

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 61
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		%9 = load %2
		%10 = icmp slt %9 1
		br %10, %11, %12
	11:
		store 1, %2
		br %12
	12:
		%13 = load %3
		%14 = icmp slt %13 1
		br %14, %15, %16
	15:
		store 1, %3
		br %16
	16:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%17 = load %3
		%18 = sext i32 %17 to i64
		%19 = mul i64 %18, 1
		%20 = alloca i8, numElementsLit: %19, align 16
		store %20, %5
		%21 = load %5
		%22 = load %4
		%23 = load %3
		%24 = sext i32 %23 to i64
		%25 = call *i8 @cmemrchr(*i8 %21, i32 %22, i64 %24)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_695(v2312, v2313, v2314, v2315, v2316, v2317, v2318, v2319, 1, v2321, v2322, v2323, v2324, v2325, v2326, v2327, 0, v2329, v2330, v2331, v2338, v2332, v2339, v2333, v2340, v2334, v2341, v2335, v2342, v2343, v2344, v2345, v2346, v2347, v2348, v2349, v2350, v2336, v2337, 3, 7, 2, 4, 8) -> f_696(v2312, v2313, v2314, v2315, v2316, v2317, v2318, v2319, 1, v2321, v2322, v2323, v2324, v2325, v2326, v2327, 0, v2329, v2330, v2331, v2338, v2332, v2339, v2333, v2340, v2334, v2341, v2335, v2342, v2343, v2344, v2345, v2346, v2347, v2348, v2349, v2350, v2426, v2427, 3, 7, 2, 4, 8) :|: TRUE
f_696(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2412, v2413, v2414, v2415, v2416, v2417, 0, v2419, v2420, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 2, 4, 8) -> f_697(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2412, v2413, v2414, v2415, v2416, v2417, 0, v2420, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 2, 4, 8) :|: 0 = 0
f_697(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2412, v2413, v2414, v2415, v2416, v2417, 0, v2420, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 2, 4, 8) -> f_698(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2412, v2413, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 2, 4, 8) :|: 1 + v2441 = v2420 && 0 <= v2441
f_698(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2412, v2413, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 2, 4, 8) -> f_699(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2412, v2413, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 2, 4, 8) :|: TRUE
f_699(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2412, v2413, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 2, 4, 8) -> f_700(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2412, v2413, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) :|: 0 < v2441 && 2 <= v2420 && 3 <= v2404 && 4 <= v2411 && 3 <= v2433
f_700(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2412, v2413, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) -> f_702(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2412, v2413, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) :|: 0 = 0
f_702(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2412, v2413, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) -> f_704(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2412, v2413, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) :|: TRUE
f_704(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2412, v2413, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) -> f_706(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) :|: 0 = 0
f_706(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) -> f_708(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) :|: 1 + v2489 = v2413 && 1 <= v2413
f_708(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) -> f_710(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) :|: TRUE
f_710(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2414, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) -> f_712(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) :|: TRUE
f_712(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2415, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) -> f_714(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2535, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) :|: TRUE
f_714(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2535, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) -> f_716(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2535, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) :|: 0 = 0
f_716(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2535, v2416, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) -> f_717(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2535, v2536, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) :|: TRUE
f_717(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2535, v2536, v2417, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) -> f_718(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2535, v2536, v2537, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) :|: TRUE
f_718(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2535, v2536, v2537, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) -> f_720(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2535, v2536, v2537, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) :|: v2535 != v2537
f_720(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2535, v2536, v2537, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) -> f_722(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2535, v2536, v2537, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) :|: 0 = 0
f_722(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2535, v2536, v2537, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) -> f_724(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2535, v2536, v2537, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) :|: TRUE
f_724(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2535, v2536, v2537, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2426, v2427, 3, 7, 4, 2, 8) -> f_693(v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 1, v2411, v2413, v2489, v2533, v2535, v2536, v2537, 0, v2420, v2441, v2421, v2428, v2422, v2429, v2423, v2430, v2424, v2431, v2425, v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439, v2440, v2336, v2337, 3, 7, 2, 4, 8) :|: TRUE
f_693(v2312, v2313, v2314, v2315, v2316, v2317, v2318, v2319, 1, v2321, v2322, v2323, v2324, v2325, v2326, v2327, 0, v2329, v2330, v2331, v2338, v2332, v2339, v2333, v2340, v2334, v2341, v2335, v2342, v2343, v2344, v2345, v2346, v2347, v2348, v2349, v2350, v2336, v2337, 3, 7, 2, 4, 8) -> f_695(v2312, v2313, v2314, v2315, v2316, v2317, v2318, v2319, 1, v2321, v2322, v2323, v2324, v2325, v2326, v2327, 0, v2329, v2330, v2331, v2338, v2332, v2339, v2333, v2340, v2334, v2341, v2335, v2342, v2343, v2344, v2345, v2346, v2347, v2348, v2349, v2350, v2336, v2337, 3, 7, 2, 4, 8) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_695(v2312:0, v2313:0, v2314:0, v2315:0, v2316:0, v2317:0, v2318:0, v2319:0, 1, v2321:0, v2322:0, 1 + v2489:0, v2324:0, v2325:0, v2326:0, v2327:0, 0, v2329:0, 1 + v2441:0, v2331:0, v2338:0, v2332:0, v2339:0, v2333:0, v2340:0, v2334:0, v2341:0, v2335:0, v2342:0, v2343:0, v2344:0, v2345:0, v2346:0, v2347:0, v2348:0, v2349:0, v2350:0, v2336:0, v2337:0, 3, 7, 2, 4, 8) -> f_695(v2312:0, v2313:0, v2314:0, v2315:0, v2316:0, v2317:0, v2318:0, v2319:0, 1, v2321:0, 1 + v2489:0, v2489:0, v2533:0, v2535:0, v2536:0, v2537:0, 0, 1 + v2441:0, v2441:0, v2331:0, v2338:0, v2332:0, v2339:0, v2333:0, v2340:0, v2334:0, v2341:0, v2335:0, v2342:0, v2343:0, v2344:0, v2345:0, v2346:0, v2347:0, v2348:0, v2349:0, v2350:0, v2336:1, v2337:1, 3, 7, 2, 4, 8) :|: v2441:0 > 0 && v2314:0 > 2 && v2321:0 > 3 && v2343:0 > 2 && v2537:0 > v2535:0 && v2489:0 > -1
f_695(v2312:0, v2313:0, v2314:0, v2315:0, v2316:0, v2317:0, v2318:0, v2319:0, 1, v2321:0, v2322:0, 1 + v2489:0, v2324:0, v2325:0, v2326:0, v2327:0, 0, v2329:0, 1 + v2441:0, v2331:0, v2338:0, v2332:0, v2339:0, v2333:0, v2340:0, v2334:0, v2341:0, v2335:0, v2342:0, v2343:0, v2344:0, v2345:0, v2346:0, v2347:0, v2348:0, v2349:0, v2350:0, v2336:0, v2337:0, 3, 7, 2, 4, 8) -> f_695(v2312:0, v2313:0, v2314:0, v2315:0, v2316:0, v2317:0, v2318:0, v2319:0, 1, v2321:0, 1 + v2489:0, v2489:0, v2533:0, v2535:0, v2536:0, v2537:0, 0, 1 + v2441:0, v2441:0, v2331:0, v2338:0, v2332:0, v2339:0, v2333:0, v2340:0, v2334:0, v2341:0, v2335:0, v2342:0, v2343:0, v2344:0, v2345:0, v2346:0, v2347:0, v2348:0, v2349:0, v2350:0, v2336:1, v2337:1, 3, 7, 2, 4, 8) :|: v2441:0 > 0 && v2314:0 > 2 && v2321:0 > 3 && v2343:0 > 2 && v2537:0 < v2535:0 && v2489:0 > -1
Filtered unneeded arguments:
   f_695(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44) -> f_695(x3, x10, x12, x19, x30)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_695(v2314:0, v2321:0, sum~cons_1~v2489:0, sum~cons_1~v2441:0, v2343:0) -> f_695(v2314:0, v2321:0, v2489:0, v2441:0, v2343:0) :|: v2314:0 > 2 && v2441:0 > 0 && v2321:0 > 3 && v2489:0 > -1 && v2343:0 > 2 && sum~cons_1~v2489:0 = 1 + v2489:0 && sum~cons_1~v2441:0 = 1 + v2441:0

----------------------------------------

(8)
Obligation:
Rules:
f_695(v2314:0, v2321:0, sum~cons_1~v2489:0, sum~cons_1~v2441:0, v2343:0) -> f_695(v2314:0, v2321:0, v2489:0, v2441:0, v2343:0) :|: v2314:0 > 2 && v2441:0 > 0 && v2321:0 > 3 && v2489:0 > -1 && v2343:0 > 2 && sum~cons_1~v2489:0 = 1 + v2489:0 && sum~cons_1~v2441:0 = 1 + v2441:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_695(v2314:0:0, v2321:0:0, sum~cons_1~v2489:0:0, sum~cons_1~v2441:0:0, v2343:0:0) -> f_695(v2314:0:0, v2321:0:0, v2489:0:0, v2441:0:0, v2343:0:0) :|: v2489:0:0 > -1 && v2343:0:0 > 2 && v2321:0:0 > 3 && v2441:0:0 > 0 && v2314:0:0 > 2 && sum~cons_1~v2489:0:0 = 1 + v2489:0:0 && sum~cons_1~v2441:0:0 = 1 + v2441:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_695(x, x1, x2, x3, x4)] = x3

The following rules are decreasing:
f_695(v2314:0:0, v2321:0:0, sum~cons_1~v2489:0:0, sum~cons_1~v2441:0:0, v2343:0:0) -> f_695(v2314:0:0, v2321:0:0, v2489:0:0, v2441:0:0, v2343:0:0) :|: v2489:0:0 > -1 && v2343:0:0 > 2 && v2321:0:0 > 3 && v2441:0:0 > 0 && v2314:0:0 > 2 && sum~cons_1~v2489:0:0 = 1 + v2489:0:0 && sum~cons_1~v2441:0:0 = 1 + v2441:0:0
The following rules are bounded:
f_695(v2314:0:0, v2321:0:0, sum~cons_1~v2489:0:0, sum~cons_1~v2441:0:0, v2343:0:0) -> f_695(v2314:0:0, v2321:0:0, v2489:0:0, v2441:0:0, v2343:0:0) :|: v2489:0:0 > -1 && v2343:0:0 > 2 && v2321:0:0 > 3 && v2441:0:0 > 0 && v2314:0:0 > 2 && sum~cons_1~v2489:0:0 = 1 + v2489:0:0 && sum~cons_1~v2441:0:0 = 1 + v2441:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
