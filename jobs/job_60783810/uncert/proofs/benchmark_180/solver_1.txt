YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/wGItt.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 27 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 639 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 15 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 11 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/wGItt.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/wGItt.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %6
	6:
		%7 = load %3
		%8 = load %4
		%9 = icmp sgt %7 %8
		br %9, %10, %17
	10:
		%11 = load %3
		%12 = sub i32 %11, 1
		store %12, %3
		%13 = load %4
		%14 = add i32 %13, 1
		store %14, %4
		%15 = load %5
		%16 = add i32 %15, 1
		store %16, %5
		br %6
	17:
		%18 = load %5
		ret %18

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 36
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_242(v117, v118, v119, v120, v121, v125, v123, 1, v122, v126, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) -> f_243(v117, v118, v119, v120, v121, v125, v126, 1, v122, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) :|: 0 = 0
f_243(v117, v118, v119, v120, v121, v125, v126, 1, v122, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) -> f_244(v117, v118, v119, v120, v121, v125, v126, 1, v122, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) :|: v126 < v125
f_244(v117, v118, v119, v120, v121, v125, v126, 1, v122, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) -> f_246(v117, v118, v119, v120, v121, v125, v126, 1, v122, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) :|: 0 = 0
f_246(v117, v118, v119, v120, v121, v125, v126, 1, v122, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) -> f_248(v117, v118, v119, v120, v121, v125, v126, 1, v122, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) :|: TRUE
f_248(v117, v118, v119, v120, v121, v125, v126, 1, v122, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) -> f_250(v117, v118, v119, v120, v121, v125, v126, 1, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) :|: 0 = 0
f_250(v117, v118, v119, v120, v121, v125, v126, 1, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) -> f_252(v117, v118, v119, v120, v121, v125, v126, 1, v135, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) :|: 1 + v135 = v125
f_252(v117, v118, v119, v120, v121, v125, v126, 1, v135, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) -> f_254(v117, v118, v119, v120, v121, v125, v126, 1, v135, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) :|: TRUE
f_254(v117, v118, v119, v120, v121, v125, v126, 1, v135, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) -> f_255(v117, v118, v119, v120, v121, v125, v126, 1, v135, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) :|: 0 = 0
f_255(v117, v118, v119, v120, v121, v125, v126, 1, v135, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) -> f_256(v117, v118, v119, v120, v121, v125, v126, 1, v135, v137, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) :|: v137 = 1 + v126
f_256(v117, v118, v119, v120, v121, v125, v126, 1, v135, v137, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) -> f_257(v117, v118, v119, v120, v121, v125, v126, 1, v135, v137, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) :|: TRUE
f_257(v117, v118, v119, v120, v121, v125, v126, 1, v135, v137, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) -> f_258(v117, v118, v119, v120, v121, v125, v126, 1, v135, v137, v128, v129, v130, v131, v132, v133, 0, 3, 4) :|: 0 = 0
f_258(v117, v118, v119, v120, v121, v125, v126, 1, v135, v137, v128, v129, v130, v131, v132, v133, 0, 3, 4) -> f_259(v117, v118, v119, v120, v121, v125, v126, 1, v135, v137, v128, v139, v129, v130, v131, v132, v133, 0, 3, 4, 2) :|: v139 = 1 + v128 && 2 <= v139
f_259(v117, v118, v119, v120, v121, v125, v126, 1, v135, v137, v128, v139, v129, v130, v131, v132, v133, 0, 3, 4, 2) -> f_260(v117, v118, v119, v120, v121, v125, v126, 1, v135, v137, v128, v139, v129, v130, v131, v132, v133, 0, 3, 4, 2) :|: TRUE
f_260(v117, v118, v119, v120, v121, v125, v126, 1, v135, v137, v128, v139, v129, v130, v131, v132, v133, 0, 3, 4, 2) -> f_261(v117, v118, v119, v120, v121, v125, v126, 1, v135, v137, v128, v139, v129, v130, v131, v132, v133, 0, 3, 4, 2) :|: TRUE
f_261(v117, v118, v119, v120, v121, v125, v126, 1, v135, v137, v128, v139, v129, v130, v131, v132, v133, 0, 3, 4, 2) -> f_241(v117, v118, v119, v120, v121, v125, v126, 1, v135, v137, v128, v139, v129, v130, v131, v132, v133, 0, 3, 4) :|: TRUE
f_241(v117, v118, v119, v120, v121, v122, v123, 1, v125, v126, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) -> f_242(v117, v118, v119, v120, v121, v125, v123, 1, v122, v126, v127, v128, v129, v130, v131, v132, v133, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_242(v117:0, v118:0, v119:0, v120:0, v121:0, 1 + v135:0, v123:0, 1, v122:0, v126:0, v127:0, v128:0, v129:0, v130:0, v131:0, v132:0, v133:0, 0, 3, 4) -> f_242(v117:0, v118:0, v119:0, v120:0, v121:0, v135:0, v126:0, 1, 1 + v135:0, 1 + v126:0, v128:0, 1 + v128:0, v129:0, v130:0, v131:0, v132:0, v133:0, 0, 3, 4) :|: v128:0 > 0 && v126:0 < 1 + v135:0
Filtered unneeded arguments:
   f_242(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_242(x6, x10, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_242(sum~cons_1~v135:0, v126:0, v128:0) -> f_242(v135:0, 1 + v126:0, 1 + v128:0) :|: v128:0 > 0 && v126:0 < 1 + v135:0 && sum~cons_1~v135:0 = 1 + v135:0

----------------------------------------

(8)
Obligation:
Rules:
f_242(sum~cons_1~v135:0, v126:0, v128:0) -> f_242(v135:0, 1 + v126:0, 1 + v128:0) :|: v128:0 > 0 && v126:0 < 1 + v135:0 && sum~cons_1~v135:0 = 1 + v135:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_242(sum~cons_1~v135:0:0, v126:0:0, v128:0:0) -> f_242(v135:0:0, 1 + v126:0:0, 1 + v128:0:0) :|: v128:0:0 > 0 && v126:0:0 < 1 + v135:0:0 && sum~cons_1~v135:0:0 = 1 + v135:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_242 ] = -1/2*f_242_2 + 1/2*f_242_1

The following rules are decreasing:
f_242(sum~cons_1~v135:0:0, v126:0:0, v128:0:0) -> f_242(v135:0:0, 1 + v126:0:0, 1 + v128:0:0) :|: v128:0:0 > 0 && v126:0:0 < 1 + v135:0:0 && sum~cons_1~v135:0:0 = 1 + v135:0:0

The following rules are bounded:
f_242(sum~cons_1~v135:0:0, v126:0:0, v128:0:0) -> f_242(v135:0:0, 1 + v126:0:0, 1 + v128:0:0) :|: v128:0:0 > 0 && v126:0:0 < 1 + v135:0:0 && sum~cons_1~v135:0:0 = 1 + v135:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
