YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/xiEGM.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 313 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 26 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 5 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 27 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/xiEGM.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/xiEGM.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		br %5
	5:
		%6 = load %3
		%7 = icmp sgt %6 0
		br %7, %8, %11
	8:
		%9 = load %4
		%10 = icmp sgt %9 0
		br %11
	11:
		%12 = phi [0, %5], [%10, %8]
		br %12, %13, %34
	13:
		%14 = load %3
		%15 = load %4
		%16 = icmp sgt %14 %15
		br %16, %17, %25
	17:
		br %18
	18:
		%19 = load %3
		%20 = icmp sgt %19 0
		br %20, %21, %24
	21:
		%22 = load %3
		%23 = sub i32 %22, 1
		store %23, %3
		br %18
	24:
		br %33
	25:
		br %26
	26:
		%27 = load %4
		%28 = icmp sgt %27 0
		br %28, %29, %32
	29:
		%30 = load %4
		%31 = sub i32 %30, 1
		store %31, %4
		br %26
	32:
		br %33
	33:
		br %5
	34:
		%35 = load %3
		%36 = load %4
		%37 = add i32 %35, %36
		ret %37

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 56
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 9 rulesP rules:
f_267(v62, v63, v64, v65, 1, 0, v69, v68, v70, v71, v72, v73, 3, 4) -> f_270(v62, v63, v64, v65, 1, 0, v69, v68, v70, v71, v72, v73, 3, 2, 4) :|: 0 < v69 && 2 <= v68 && 2 <= v63
f_270(v62, v63, v64, v65, 1, 0, v69, v68, v70, v71, v72, v73, 3, 2, 4) -> f_274(v62, v63, v64, v65, 1, 0, v69, v68, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_274(v62, v63, v64, v65, 1, 0, v69, v68, v70, v71, v72, v73, 3, 2, 4) -> f_278(v62, v63, v64, v65, 1, 0, v69, v68, v70, v71, v72, v73, 3, 2, 4) :|: TRUE
f_278(v62, v63, v64, v65, 1, 0, v69, v68, v70, v71, v72, v73, 3, 2, 4) -> f_282(v62, v63, v64, v65, 1, 0, v69, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_282(v62, v63, v64, v65, 1, 0, v69, v70, v71, v72, v73, 3, 2, 4) -> f_286(v62, v63, v64, v65, 1, 0, v69, v76, v70, v71, v72, v73, 3, 2, 4) :|: 1 + v76 = v69 && 0 <= v76
f_286(v62, v63, v64, v65, 1, 0, v69, v76, v70, v71, v72, v73, 3, 2, 4) -> f_290(v62, v63, v64, v65, 1, 0, v69, v76, v70, v71, v72, v73, 3, 2, 4) :|: TRUE
f_290(v62, v63, v64, v65, 1, 0, v69, v76, v70, v71, v72, v73, 3, 2, 4) -> f_293(v62, v63, v64, v65, 1, 0, v69, v76, v70, v71, v72, v73, 3, 2, 4) :|: TRUE
f_293(v62, v63, v64, v65, 1, 0, v69, v76, v70, v71, v72, v73, 3, 2, 4) -> f_264(v62, v63, v64, v65, 1, 0, v69, v76, v70, v71, v72, v73, 3, 4) :|: TRUE
f_264(v62, v63, v64, v65, 1, 0, v68, v69, v70, v71, v72, v73, 3, 4) -> f_267(v62, v63, v64, v65, 1, 0, v69, v68, v70, v71, v72, v73, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_267(v62:0, v63:0, v64:0, v65:0, 1, 0, 1 + v76:0, v68:0, v70:0, v71:0, v72:0, v73:0, 3, 4) -> f_267(v62:0, v63:0, v64:0, v65:0, 1, 0, v76:0, 1 + v76:0, v70:0, v71:0, v72:0, v73:0, 3, 4) :|: v68:0 > 1 && v76:0 > -1 && v63:0 > 1
Filtered unneeded arguments:
   f_267(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_267(x2, x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_267(v63:0, sum~cons_1~v76:0, v68:0) -> f_267(v63:0, v76:0, 1 + v76:0) :|: v76:0 > -1 && v63:0 > 1 && v68:0 > 1 && sum~cons_1~v76:0 = 1 + v76:0

----------------------------------------

(9)
Obligation:
Rules:
f_267(v63:0, sum~cons_1~v76:0, v68:0) -> f_267(v63:0, v76:0, 1 + v76:0) :|: v76:0 > -1 && v63:0 > 1 && v68:0 > 1 && sum~cons_1~v76:0 = 1 + v76:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_267(v63:0:0, sum~cons_1~v76:0:0, v68:0:0) -> f_267(v63:0:0, v76:0:0, 1 + v76:0:0) :|: v76:0:0 > -1 && v63:0:0 > 1 && v68:0:0 > 1 && sum~cons_1~v76:0:0 = 1 + v76:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_267 ] = f_267_2

The following rules are decreasing:
f_267(v63:0:0, sum~cons_1~v76:0:0, v68:0:0) -> f_267(v63:0:0, v76:0:0, 1 + v76:0:0) :|: v76:0:0 > -1 && v63:0:0 > 1 && v68:0:0 > 1 && sum~cons_1~v76:0:0 = 1 + v76:0:0

The following rules are bounded:
f_267(v63:0:0, sum~cons_1~v76:0:0, v68:0:0) -> f_267(v63:0:0, v76:0:0, 1 + v76:0:0) :|: v76:0:0 > -1 && v63:0:0 > 1 && v68:0:0 > 1 && sum~cons_1~v76:0:0 = 1 + v76:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 9 rulesP rules:
f_262(v49, v50, v51, v52, 1, v55, v54, v56, v57, v58, v59, 0, 3, 2, 4) -> f_265(v49, v50, v51, v52, 1, v55, v54, v56, v57, v58, v59, 0, 3, 2, 4) :|: 0 < v55 && 2 <= v54
f_265(v49, v50, v51, v52, 1, v55, v54, v56, v57, v58, v59, 0, 3, 2, 4) -> f_268(v49, v50, v51, v52, 1, v55, v54, v56, v57, v58, v59, 0, 3, 2, 4) :|: 0 = 0
f_268(v49, v50, v51, v52, 1, v55, v54, v56, v57, v58, v59, 0, 3, 2, 4) -> f_272(v49, v50, v51, v52, 1, v55, v54, v56, v57, v58, v59, 0, 3, 2, 4) :|: TRUE
f_272(v49, v50, v51, v52, 1, v55, v54, v56, v57, v58, v59, 0, 3, 2, 4) -> f_276(v49, v50, v51, v52, 1, v55, v56, v57, v58, v59, 0, 3, 2, 4) :|: 0 = 0
f_276(v49, v50, v51, v52, 1, v55, v56, v57, v58, v59, 0, 3, 2, 4) -> f_280(v49, v50, v51, v52, 1, v55, v74, v56, v57, v58, v59, 0, 3, 2, 4) :|: 1 + v74 = v55 && 0 <= v74
f_280(v49, v50, v51, v52, 1, v55, v74, v56, v57, v58, v59, 0, 3, 2, 4) -> f_284(v49, v50, v51, v52, 1, v55, v74, v56, v57, v58, v59, 0, 3, 2, 4) :|: TRUE
f_284(v49, v50, v51, v52, 1, v55, v74, v56, v57, v58, v59, 0, 3, 2, 4) -> f_288(v49, v50, v51, v52, 1, v55, v74, v56, v57, v58, v59, 0, 3, 2, 4) :|: TRUE
f_288(v49, v50, v51, v52, 1, v55, v74, v56, v57, v58, v59, 0, 3, 2, 4) -> f_259(v49, v50, v51, v52, 1, v55, v74, v56, v57, v58, v59, 0, 3, 2, 4) :|: TRUE
f_259(v49, v50, v51, v52, 1, v54, v55, v56, v57, v58, v59, 0, 3, 2, 4) -> f_262(v49, v50, v51, v52, 1, v55, v54, v56, v57, v58, v59, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_262(v49:0, v50:0, v51:0, v52:0, 1, 1 + v74:0, v54:0, v56:0, v57:0, v58:0, v59:0, 0, 3, 2, 4) -> f_262(v49:0, v50:0, v51:0, v52:0, 1, v74:0, 1 + v74:0, v56:0, v57:0, v58:0, v59:0, 0, 3, 2, 4) :|: v54:0 > 1 && v74:0 > -1
Filtered unneeded arguments:
   f_262(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_262(x6, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_262(sum~cons_1~v74:0, v54:0) -> f_262(v74:0, 1 + v74:0) :|: v54:0 > 1 && v74:0 > -1 && sum~cons_1~v74:0 = 1 + v74:0

----------------------------------------

(16)
Obligation:
Rules:
f_262(sum~cons_1~v74:0, v54:0) -> f_262(v74:0, 1 + v74:0) :|: v54:0 > 1 && v74:0 > -1 && sum~cons_1~v74:0 = 1 + v74:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_262(sum~cons_1~v74:0:0, v54:0:0) -> f_262(v74:0:0, 1 + v74:0:0) :|: v54:0:0 > 1 && v74:0:0 > -1 && sum~cons_1~v74:0:0 = 1 + v74:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_262(x, x1)] = x

The following rules are decreasing:
f_262(sum~cons_1~v74:0:0, v54:0:0) -> f_262(v74:0:0, 1 + v74:0:0) :|: v54:0:0 > 1 && v74:0:0 > -1 && sum~cons_1~v74:0:0 = 1 + v74:0:0
The following rules are bounded:
f_262(sum~cons_1~v74:0:0, v54:0:0) -> f_262(v74:0:0, 1 + v74:0:0) :|: v54:0:0 > 1 && v74:0:0 > -1 && sum~cons_1~v74:0:0 = 1 + v74:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
