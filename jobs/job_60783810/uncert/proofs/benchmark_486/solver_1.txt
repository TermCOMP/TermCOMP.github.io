YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/YtoKM.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 691 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 56 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (17) YES
    (18) LLVM Symbolic Execution SCC
        (19) SCC2IRS [SOUND, 0 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) RankingReductionPairProof [EQUIVALENT, 10 ms]
        (24) YES
    (25) LLVM Symbolic Execution SCC
        (26) SCC2IRS [SOUND, 30 ms]
        (27) IntTRS
        (28) TerminationGraphProcessor [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/YtoKM.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/YtoKM.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sge %7 0
		br %8, %9, %20
	9:
		store 1, %3
		br %10
	10:
		%11 = load %3
		%12 = load %2
		%13 = icmp slt %11 %12
		br %13, %14, %17
	14:
		%15 = load %3
		%16 = add i32 %15, 1
		store %16, %3
		br %10
	17:
		%18 = load %2
		%19 = sub i32 %18, 1
		store %19, %2
		br %6
	20:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 35 rulesP rules:
f_356(v545, v546, v547, v548, v549, v550, 1, v552, v554, v555, v556, v557, v558, 0, 3, 2, 4) -> f_357(v545, v546, v547, v548, v549, v550, 1, v552, v560, v555, v556, v557, v558, 0, 3, 2, 4) :|: v560 = 1 + v552 && 2 <= v560
f_357(v545, v546, v547, v548, v549, v550, 1, v552, v560, v555, v556, v557, v558, 0, 3, 2, 4) -> f_358(v545, v546, v547, v548, v549, v550, 1, v552, v560, v555, v556, v557, v558, 0, 3, 2, 4) :|: TRUE
f_358(v545, v546, v547, v548, v549, v550, 1, v552, v560, v555, v556, v557, v558, 0, 3, 2, 4) -> f_359(v545, v546, v547, v548, v549, v550, 1, v552, v560, v555, v556, v557, v558, 0, 3, 2, 4) :|: TRUE
f_359(v545, v546, v547, v548, v549, v550, 1, v552, v560, v555, v556, v557, v558, 0, 3, 2, 4) -> f_360(v545, v546, v547, v548, v549, v550, 1, v560, v552, v555, v556, v557, v558, 0, 3, 2, 4) :|: 0 = 0
f_360(v545, v546, v547, v548, v549, v550, 1, v560, v552, v555, v556, v557, v558, 0, 3, 2, 4) -> f_361(v545, v546, v547, v548, v549, v550, 1, v560, v552, v555, v556, v557, v558, 0, 3, 2, 4) :|: 0 = 0
f_361(v545, v546, v547, v548, v549, v550, 1, v560, v552, v555, v556, v557, v558, 0, 3, 2, 4) -> f_362(v545, v546, v547, v548, v549, v550, 1, v560, v552, v555, v556, v557, v558, 0, 3, 4, 2) :|: v560 < v550 && 3 <= v550 && 4 <= v555 && 4 <= v548
f_361(v545, v546, v547, v548, v549, v550, 1, v560, v552, v555, v556, v557, v558, 0, 3, 2, 4) -> f_363(v545, v546, v547, v548, v549, v560, 1, v552, v555, v556, v557, v558, 0, 3, 4, 2) :|: v550 <= v560 && v550 = v560
f_362(v545, v546, v547, v548, v549, v550, 1, v560, v552, v555, v556, v557, v558, 0, 3, 4, 2) -> f_364(v545, v546, v547, v548, v549, v550, 1, v560, v552, v555, v556, v557, v558, 0, 3, 4, 2) :|: 0 = 0
f_364(v545, v546, v547, v548, v549, v550, 1, v560, v552, v555, v556, v557, v558, 0, 3, 4, 2) -> f_366(v545, v546, v547, v548, v549, v550, 1, v560, v552, v555, v556, v557, v558, 0, 3, 4, 2) :|: TRUE
f_366(v545, v546, v547, v548, v549, v550, 1, v560, v552, v555, v556, v557, v558, 0, 3, 4, 2) -> f_355(v545, v546, v547, v548, v549, v550, 1, v560, v552, v560, v555, v556, v557, v558, 0, 3, 2, 4) :|: TRUE
f_355(v545, v546, v547, v548, v549, v550, 1, v552, v553, v554, v555, v556, v557, v558, 0, 3, 2, 4) -> f_356(v545, v546, v547, v548, v549, v550, 1, v552, v554, v555, v556, v557, v558, 0, 3, 2, 4) :|: 0 = 0
f_363(v545, v546, v547, v548, v549, v560, 1, v552, v555, v556, v557, v558, 0, 3, 4, 2) -> f_365(v545, v546, v547, v548, v549, v560, 1, 0, v552, v555, v556, v557, v558, 3, 4, 2) :|: 0 = 0
f_365(v545, v546, v547, v548, v549, v560, 1, 0, v552, v555, v556, v557, v558, 3, 4, 2) -> f_367(v545, v546, v547, v548, v549, v560, 1, 0, v552, v555, v556, v557, v558, 3, 4, 2) :|: TRUE
f_367(v545, v546, v547, v548, v549, v560, 1, 0, v552, v555, v556, v557, v558, 3, 4, 2) -> f_386(v545, v546, v547, v548, v549, v560, 1, v560, 0, v552, v560, v555, v556, v557, v558, 3, 2, 4) :|: TRUE
f_386(v735, v736, v737, v738, v739, v740, 1, v742, 0, v744, v745, v746, v747, v748, v749, 3, 2, 4) -> f_387(v735, v736, v737, v738, v739, v740, 1, v742, 0, v744, v745, v747, v748, v749, 3, 2, 4) :|: 0 = 0
f_387(v735, v736, v737, v738, v739, v740, 1, v742, 0, v744, v745, v747, v748, v749, 3, 2, 4) -> f_388(v735, v736, v737, v738, v739, v740, 1, v742, 0, v744, v745, v750, v747, v748, v749, 3, 2, 4) :|: 1 + v750 = v740 && 0 <= 1 + v750
f_388(v735, v736, v737, v738, v739, v740, 1, v742, 0, v744, v745, v750, v747, v748, v749, 3, 2, 4) -> f_389(v735, v736, v737, v738, v739, v740, 1, v742, 0, v744, v745, v750, v747, v748, v749, 3, 2, 4) :|: TRUE
f_389(v735, v736, v737, v738, v739, v740, 1, v742, 0, v744, v745, v750, v747, v748, v749, 3, 2, 4) -> f_390(v735, v736, v737, v738, v739, v740, 1, v742, 0, v744, v745, v750, v747, v748, v749, 3, 2, 4) :|: TRUE
f_390(v735, v736, v737, v738, v739, v740, 1, v742, 0, v744, v745, v750, v747, v748, v749, 3, 2, 4) -> f_391(v735, v736, v737, v738, v739, v750, 1, v742, v740, 0, v744, v745, v747, v748, v749, 3, 2, 4) :|: 0 = 0
f_391(v735, v736, v737, v738, v739, v750, 1, v742, v740, 0, v744, v745, v747, v748, v749, 3, 2, 4) -> f_392(v735, v736, v737, v738, v739, v750, 1, v742, v740, 0, v744, v745, v747, v748, v749, 3, 2, 4) :|: 0 <= v750 && 1 <= v740
f_392(v735, v736, v737, v738, v739, v750, 1, v742, v740, 0, v744, v745, v747, v748, v749, 3, 2, 4) -> f_394(v735, v736, v737, v738, v739, v750, 1, v742, v740, 0, v744, v745, v747, v748, v749, 3, 2, 4) :|: 0 = 0
f_394(v735, v736, v737, v738, v739, v750, 1, v742, v740, 0, v744, v745, v747, v748, v749, 3, 2, 4) -> f_396(v735, v736, v737, v738, v739, v750, 1, v742, v740, 0, v744, v745, v747, v748, v749, 3, 2, 4) :|: TRUE
f_396(v735, v736, v737, v738, v739, v750, 1, v742, v740, 0, v744, v745, v747, v748, v749, 3, 2, 4) -> f_398(v735, v736, v737, v738, v739, v750, 1, v742, v740, 0, v744, v745, v747, v748, v749, 3, 2, 4) :|: TRUE
f_398(v735, v736, v737, v738, v739, v750, 1, v742, v740, 0, v744, v745, v747, v748, v749, 3, 2, 4) -> f_399(v735, v736, v737, v738, v739, v750, 1, v742, v740, 0, v744, v745, v747, v748, v749, 3, 2, 4) :|: TRUE
f_399(v735, v736, v737, v738, v739, v750, 1, v742, v740, 0, v744, v745, v747, v748, v749, 3, 2, 4) -> f_400(v735, v736, v737, v738, v739, v750, 1, v742, v740, 0, v744, v745, v747, v748, v749, 3, 2, 4) :|: TRUE
f_400(v822, v823, v824, v825, v826, v827, 1, v829, v830, 0, v832, v833, v834, v835, v836, 3, 2, 4) -> f_401(v822, v823, v824, v825, v826, v827, 1, v830, 0, v832, v833, v834, v835, v836, 3, 2, 4) :|: 0 = 0
f_401(v822, v823, v824, v825, v826, v827, 1, v830, 0, v832, v833, v834, v835, v836, 3, 2, 4) -> f_402(v822, v823, v824, v825, v826, v827, 1, 0, v832, v833, v830, v834, v835, v836, 3, 2, 4) :|: 0 = 0
f_402(v822, v823, v824, v825, v826, v827, 1, 0, v832, v833, v830, v834, v835, v836, 3, 2, 4) -> f_403(v822, v823, v824, v825, v826, v827, 1, 0, v832, v833, v830, v834, v835, v836, 3, 2, 4) :|: 1 < v827 && 3 <= v830 && 3 <= v825
f_402(v822, v823, v824, v825, v826, v827, 1, 0, v832, v833, v830, v834, v835, v836, 3, 2, 4) -> f_404(v822, v823, v824, v825, v826, v827, 1, 0, v832, v833, v830, v834, v835, v836, 3, 2, 4) :|: v827 <= 1 && v830 <= 2
f_403(v822, v823, v824, v825, v826, v827, 1, 0, v832, v833, v830, v834, v835, v836, 3, 2, 4) -> f_405(v822, v823, v824, v825, v826, v827, 1, v832, v833, v830, v834, v835, v836, 0, 3, 2, 4) :|: 0 = 0
f_405(v822, v823, v824, v825, v826, v827, 1, v832, v833, v830, v834, v835, v836, 0, 3, 2, 4) -> f_407(v822, v823, v824, v825, v826, v827, 1, v832, v833, v830, v834, v835, v836, 0, 3, 2, 4) :|: TRUE
f_407(v822, v823, v824, v825, v826, v827, 1, v832, v833, v830, v834, v835, v836, 0, 3, 2, 4) -> f_355(v822, v823, v824, v825, v826, v827, 1, 1, v832, v833, v830, v834, v835, v836, 0, 3, 2, 4) :|: TRUE
f_404(v822, v823, v824, v825, v826, v827, 1, 0, v832, v833, v830, v834, v835, v836, 3, 2, 4) -> f_406(v822, v823, v824, v825, v826, v827, 1, 0, v832, v833, v830, v834, v835, v836, 3, 2, 4) :|: 0 = 0
f_406(v822, v823, v824, v825, v826, v827, 1, 0, v832, v833, v830, v834, v835, v836, 3, 2, 4) -> f_408(v822, v823, v824, v825, v826, v827, 1, 0, v832, v833, v830, v834, v835, v836, 3, 2, 4) :|: TRUE
f_408(v822, v823, v824, v825, v826, v827, 1, 0, v832, v833, v830, v834, v835, v836, 3, 2, 4) -> f_386(v822, v823, v824, v825, v826, v827, 1, 1, 0, v832, v833, v830, v834, v835, v836, 3, 2, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_356(v545:0, v546:0, v547:0, v548:0, v549:0, v550:0, 1, v552:0, v554:0, v555:0, v556:0, v557:0, v558:0, 0, 3, 2, 4) -> f_356(v545:0, v546:0, v547:0, v548:0, v549:0, v550:0, 1, 1 + v552:0, 1 + v552:0, v555:0, v556:0, v557:0, v558:0, 0, 3, 2, 4) :|: v552:0 > 0 && v550:0 > 2 && v550:0 > 1 + v552:0 && v548:0 > 3 && v555:0 > 3
f_402(v822:0, v823:0, v824:0, v825:0, v826:0, v827:0, 1, 0, v832:0, v833:0, v830:0, v834:0, v835:0, v836:0, 3, 2, 4) -> f_356(v822:0, v823:0, v824:0, v825:0, v826:0, v827:0, 1, 1, v833:0, v830:0, v834:0, v835:0, v836:0, 0, 3, 2, 4) :|: v830:0 > 2 && v825:0 > 2 && v827:0 > 1
f_356(v545:0, v546:0, v547:0, v548:0, v549:0, 1 + v750:0, 1, v552:0, v554:0, v555:0, v556:0, v557:0, v558:0, 0, 3, 2, 4) -> f_402(v545:0, v546:0, v547:0, v548:0, v549:0, v750:0, 1, 0, v552:0, 1 + v750:0, 1 + v750:0, v556:0, v557:0, v558:0, 3, 2, 4) :|: 1 + v750:0 = 1 + v552:0 && v750:0 > 0
f_402(v822:0, v823:0, v824:0, v825:0, v826:0, 1 + v750:0, 1, 0, v832:0, v833:0, v830:0, v834:0, v835:0, v836:0, 3, 2, 4) -> f_402(v822:0, v823:0, v824:0, v825:0, v826:0, v750:0, 1, 0, v832:0, v833:0, 1 + v750:0, v834:0, v835:0, v836:0, 3, 2, 4) :|: v750:0 > -1 && v750:0 < 1 && v830:0 < 3
Filtered unneeded arguments:
   f_356(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_356(x4, x6, x8, x10)
   f_402(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_402(x4, x6, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_356(v548:0, v550:0, v552:0, v555:0) -> f_356(v548:0, v550:0, 1 + v552:0, v555:0) :|: v550:0 > 2 && v552:0 > 0 && v550:0 > 1 + v552:0 && v555:0 > 3 && v548:0 > 3
f_402(v825:0, v827:0, v830:0) -> f_356(v825:0, v827:0, 1, v830:0) :|: v825:0 > 2 && v827:0 > 1 && v830:0 > 2
f_356(v548:0, sum~cons_1~v750:0, v552:0, v555:0) -> f_402(v548:0, v750:0, 1 + v750:0) :|: 1 + v750:0 = 1 + v552:0 && v750:0 > 0 && sum~cons_1~v750:0 = 1 + v750:0
f_402(v825:0, sum~cons_1~v750:0, v830:0) -> f_402(v825:0, v750:0, 1 + v750:0) :|: v750:0 < 1 && v830:0 < 3 && v750:0 > -1 && sum~cons_1~v750:0 = 1 + v750:0

----------------------------------------

(9)
Obligation:
Rules:
f_356(v548:0, v550:0, v552:0, v555:0) -> f_356(v548:0, v550:0, 1 + v552:0, v555:0) :|: v550:0 > 2 && v552:0 > 0 && v550:0 > 1 + v552:0 && v555:0 > 3 && v548:0 > 3
f_402(v825:0, v827:0, v830:0) -> f_356(v825:0, v827:0, 1, v830:0) :|: v825:0 > 2 && v827:0 > 1 && v830:0 > 2
f_356(x, x1, x2, x3) -> f_402(x, x4, 1 + x4) :|: 1 + x4 = 1 + x2 && x4 > 0 && x1 = 1 + x4
f_402(x5, x6, x7) -> f_402(x5, x8, 1 + x8) :|: x8 < 1 && x7 < 3 && x8 > -1 && x6 = 1 + x8

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_356(v548:0:0, v550:0:0, v552:0:0, v555:0:0) -> f_356(v548:0:0, v550:0:0, 1 + v552:0:0, v555:0:0) :|: v555:0:0 > 3 && v548:0:0 > 3 && v550:0:0 > 1 + v552:0:0 && v552:0:0 > 0 && v550:0:0 > 2
f_402(v825:0:0, v827:0:0, v830:0:0) -> f_356(v825:0:0, v827:0:0, 1, v830:0:0) :|: v825:0:0 > 2 && v827:0:0 > 1 && v830:0:0 > 2
f_356(x:0, sum~cons_1~x4:0, x2:0, x3:0) -> f_402(x:0, x4:0, 1 + x4:0) :|: 1 + x4:0 = 1 + x2:0 && x4:0 > 0 && sum~cons_1~x4:0 = 1 + x4:0
f_402(x5:0, sum~cons_1~x8:0, x7:0) -> f_402(x5:0, x8:0, 1 + x8:0) :|: x8:0 < 1 && x7:0 < 3 && x8:0 > -1 && sum~cons_1~x8:0 = 1 + x8:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_356 ] = 2*f_356_2
[ f_402 ] = 2*f_402_2 + 1

The following rules are decreasing:
f_402(v825:0:0, v827:0:0, v830:0:0) -> f_356(v825:0:0, v827:0:0, 1, v830:0:0) :|: v825:0:0 > 2 && v827:0:0 > 1 && v830:0:0 > 2
f_356(x:0, sum~cons_1~x4:0, x2:0, x3:0) -> f_402(x:0, x4:0, 1 + x4:0) :|: 1 + x4:0 = 1 + x2:0 && x4:0 > 0 && sum~cons_1~x4:0 = 1 + x4:0
f_402(x5:0, sum~cons_1~x8:0, x7:0) -> f_402(x5:0, x8:0, 1 + x8:0) :|: x8:0 < 1 && x7:0 < 3 && x8:0 > -1 && sum~cons_1~x8:0 = 1 + x8:0

The following rules are bounded:
f_356(v548:0:0, v550:0:0, v552:0:0, v555:0:0) -> f_356(v548:0:0, v550:0:0, 1 + v552:0:0, v555:0:0) :|: v555:0:0 > 3 && v548:0:0 > 3 && v550:0:0 > 1 + v552:0:0 && v552:0:0 > 0 && v550:0:0 > 2
f_402(v825:0:0, v827:0:0, v830:0:0) -> f_356(v825:0:0, v827:0:0, 1, v830:0:0) :|: v825:0:0 > 2 && v827:0:0 > 1 && v830:0:0 > 2
f_356(x:0, sum~cons_1~x4:0, x2:0, x3:0) -> f_402(x:0, x4:0, 1 + x4:0) :|: 1 + x4:0 = 1 + x2:0 && x4:0 > 0 && sum~cons_1~x4:0 = 1 + x4:0
f_402(x5:0, sum~cons_1~x8:0, x7:0) -> f_402(x5:0, x8:0, 1 + x8:0) :|: x8:0 < 1 && x7:0 < 3 && x8:0 > -1 && sum~cons_1~x8:0 = 1 + x8:0


----------------------------------------

(13)
Obligation:
Rules:
f_356(v548:0:0, v550:0:0, v552:0:0, v555:0:0) -> f_356(v548:0:0, v550:0:0, 1 + v552:0:0, v555:0:0) :|: v555:0:0 > 3 && v548:0:0 > 3 && v550:0:0 > 1 + v552:0:0 && v552:0:0 > 0 && v550:0:0 > 2

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_356(v548:0:0:0, v550:0:0:0, v552:0:0:0, v555:0:0:0) -> f_356(v548:0:0:0, v550:0:0:0, 1 + v552:0:0:0, v555:0:0:0) :|: v552:0:0:0 > 0 && v550:0:0:0 > 2 && v550:0:0:0 > 1 + v552:0:0:0 && v548:0:0:0 > 3 && v555:0:0:0 > 3

----------------------------------------

(16) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_356(x, x1, x2, x3)] = -2 + x1 - x2

The following rules are decreasing:
f_356(v548:0:0:0, v550:0:0:0, v552:0:0:0, v555:0:0:0) -> f_356(v548:0:0:0, v550:0:0:0, 1 + v552:0:0:0, v555:0:0:0) :|: v552:0:0:0 > 0 && v550:0:0:0 > 2 && v550:0:0:0 > 1 + v552:0:0:0 && v548:0:0:0 > 3 && v555:0:0:0 > 3
The following rules are bounded:
f_356(v548:0:0:0, v550:0:0:0, v552:0:0:0, v555:0:0:0) -> f_356(v548:0:0:0, v550:0:0:0, 1 + v552:0:0:0, v555:0:0:0) :|: v552:0:0:0 > 0 && v550:0:0:0 > 2 && v550:0:0:0 > 1 + v552:0:0:0 && v548:0:0:0 > 3 && v555:0:0:0 > 3

----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
SCC
----------------------------------------

(19) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_227(v116, v117, v118, v119, v120, 1, v123, v122, v124, v125, v126, 0, 3, 2, 4) -> f_228(v116, v117, v118, v119, v120, 1, v123, v122, v124, v125, v126, 0, 3, 2, 4) :|: 0 = 0
f_228(v116, v117, v118, v119, v120, 1, v123, v122, v124, v125, v126, 0, 3, 2, 4) -> f_229(v116, v117, v118, v119, v120, 1, v123, v122, v124, v125, v126, 0, 3, 2, 4) :|: v123 < v119 && 3 <= v119
f_229(v116, v117, v118, v119, v120, 1, v123, v122, v124, v125, v126, 0, 3, 2, 4) -> f_231(v116, v117, v118, v119, v120, 1, v123, v122, v124, v125, v126, 0, 3, 2, 4) :|: 0 = 0
f_231(v116, v117, v118, v119, v120, 1, v123, v122, v124, v125, v126, 0, 3, 2, 4) -> f_233(v116, v117, v118, v119, v120, 1, v123, v122, v124, v125, v126, 0, 3, 2, 4) :|: TRUE
f_233(v116, v117, v118, v119, v120, 1, v123, v122, v124, v125, v126, 0, 3, 2, 4) -> f_235(v116, v117, v118, v119, v120, 1, v123, v124, v125, v126, 0, 3, 2, 4) :|: 0 = 0
f_235(v116, v117, v118, v119, v120, 1, v123, v124, v125, v126, 0, 3, 2, 4) -> f_237(v116, v117, v118, v119, v120, 1, v123, v131, v124, v125, v126, 0, 3, 2, 4) :|: v131 = 1 + v123 && 3 <= v131
f_237(v116, v117, v118, v119, v120, 1, v123, v131, v124, v125, v126, 0, 3, 2, 4) -> f_239(v116, v117, v118, v119, v120, 1, v123, v131, v124, v125, v126, 0, 3, 2, 4) :|: TRUE
f_239(v116, v117, v118, v119, v120, 1, v123, v131, v124, v125, v126, 0, 3, 2, 4) -> f_241(v116, v117, v118, v119, v120, 1, v123, v131, v124, v125, v126, 0, 3, 2, 4) :|: TRUE
f_241(v116, v117, v118, v119, v120, 1, v123, v131, v124, v125, v126, 0, 3, 2, 4) -> f_226(v116, v117, v118, v119, v120, 1, v123, v131, v124, v125, v126, 0, 3, 2, 4) :|: TRUE
f_226(v116, v117, v118, v119, v120, 1, v122, v123, v124, v125, v126, 0, 3, 2, 4) -> f_227(v116, v117, v118, v119, v120, 1, v123, v122, v124, v125, v126, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_227(v116:0, v117:0, v118:0, v119:0, v120:0, 1, v123:0, v122:0, v124:0, v125:0, v126:0, 0, 3, 2, 4) -> f_227(v116:0, v117:0, v118:0, v119:0, v120:0, 1, 1 + v123:0, v123:0, v124:0, v125:0, v126:0, 0, 3, 2, 4) :|: v119:0 > 2 && v123:0 > 1 && v123:0 < v119:0
Filtered unneeded arguments:
   f_227(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_227(x4, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_227(v119:0, v123:0) -> f_227(v119:0, 1 + v123:0) :|: v123:0 > 1 && v123:0 < v119:0 && v119:0 > 2

----------------------------------------

(20)
Obligation:
Rules:
f_227(v119:0, v123:0) -> f_227(v119:0, 1 + v123:0) :|: v123:0 > 1 && v123:0 < v119:0 && v119:0 > 2

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_227(v119:0:0, v123:0:0) -> f_227(v119:0:0, 1 + v123:0:0) :|: v123:0:0 > 1 && v123:0:0 < v119:0:0 && v119:0:0 > 2

----------------------------------------

(23) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_227 ] = -1*f_227_2 + f_227_1

The following rules are decreasing:
f_227(v119:0:0, v123:0:0) -> f_227(v119:0:0, 1 + v123:0:0) :|: v123:0:0 > 1 && v123:0:0 < v119:0:0 && v119:0:0 > 2

The following rules are bounded:
f_227(v119:0:0, v123:0:0) -> f_227(v119:0:0, 1 + v123:0:0) :|: v123:0:0 > 1 && v123:0:0 < v119:0:0 && v119:0:0 > 2


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
SCC
----------------------------------------

(26) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_172(v37, v38, v39, v40, v41, v45, 1, v42, 0, v46, v47, v48, 3, 4) -> f_175(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: 0 <= v45 && v42 = 1 && v45 = 0 && 0 = 0
f_175(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_179(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: 0 = 0
f_179(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_183(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: TRUE
f_183(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_186(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: TRUE
f_186(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_188(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: TRUE
f_188(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_191(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: 0 = 0
f_191(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_194(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: 0 = 0
f_194(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_197(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: 0 = 0
f_197(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_200(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: TRUE
f_200(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_203(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: 0 = 0
f_203(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_206(v37, v38, v39, 1, v41, 0, -1, v46, v47, v48, 3, 4) :|: 0 = 0
f_206(v37, v38, v39, 1, v41, 0, -1, v46, v47, v48, 3, 4) -> f_209(v37, v38, v39, 1, v41, 0, -1, v46, v47, v48, 3, 4) :|: TRUE
f_209(v37, v38, v39, 1, v41, 0, -1, v46, v47, v48, 3, 4) -> f_211(v37, v38, v39, 1, v41, 0, -1, v46, v47, v48, 3, 4) :|: TRUE
f_211(v37, v38, v39, 1, v41, 0, -1, v46, v47, v48, 3, 4) -> f_169(v37, v38, v39, 1, v41, 0, 1, 0, -1, v46, v47, v48, 3, 4) :|: TRUE
f_169(v37, v38, v39, v40, v41, v42, 1, 0, v45, v46, v47, v48, 3, 4) -> f_172(v37, v38, v39, v40, v41, v45, 1, v42, 0, v46, v47, v48, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_172(v37:0, v38:0, v39:0, v40:0, v41:0, 0, 1, 1, 0, v46:0, v47:0, v48:0, 3, 4) -> f_172(v37:0, v38:0, v39:0, 1, v41:0, -1, 1, 0, 0, v46:0, v47:0, v48:0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_172(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_172(x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_172(cons_0, cons_1) -> f_172(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(27)
Obligation:
Rules:
f_172(cons_0, cons_1) -> f_172(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(28) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(29)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
