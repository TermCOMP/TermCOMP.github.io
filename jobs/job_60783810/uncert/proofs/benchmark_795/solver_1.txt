YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/6ZDDq.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 53 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 362 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/6ZDDq.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/6ZDDq.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		%4 = alloca *i32, align 8
		%5 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%6 = alloca i8, numElementsLit: 4, align 16
		%7 = bitcast *i8 %6 to *i32
		store %7, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %4)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %5
		%14 = load %2
		store 0, %14
		%15 = load %3
		store 0, %15
		%16 = load %4
		store 0, %16
		%17 = load %5
		store 0, %17
		br %18
	18:
		%19 = load %5
		%20 = load %19
		%21 = icmp eq %20 0
		br %21, %22, %48
	22:
		%23 = load %2
		%24 = load %23
		%25 = icmp eq %24 0
		br %25, %26, %28
	26:
		%27 = load %2
		store 1, %27
		br %47
	28:
		%29 = load %2
		store 0, %29
		%30 = load %3
		%31 = load %30
		%32 = icmp eq %31 0
		br %32, %33, %35
	33:
		%34 = load %3
		store 1, %34
		br %46
	35:
		%36 = load %3
		store 0, %36
		%37 = load %4
		%38 = load %37
		%39 = icmp eq %38 0
		br %39, %40, %42
	40:
		%41 = load %4
		store 1, %41
		br %45
	42:
		%43 = load %4
		store 0, %43
		%44 = load %5
		store 1, %44
		br %45
	45:
		br %46
	46:
		br %47
	47:
		br %18
	48:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Proven termination by absence of SCCs
----------------------------------------

(6)
TRUE
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
