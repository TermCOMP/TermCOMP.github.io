YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/TBNjt.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 503 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 16 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) TerminationGraphProcessor [EQUIVALENT, 1 ms]
(12) IntTRS
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IntTRS
(15) RankingReductionPairProof [EQUIVALENT, 3 ms]
(16) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/TBNjt.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/TBNjt.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 (...)* @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 (...)* @__VERIFIER_nondet_int()
		store %6, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%7 = call i32 (...)* @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = load %3
		%11 = sub i32 %9, %10
		%12 = icmp sgt %11 0
		br %12, %13, %21
	13:
		%14 = load %2
		%15 = sub i32 0, %14
		%16 = load %3
		%17 = add i32 %15, %16
		store %17, %2
		%18 = load %4
		store %18, %3
		%19 = load %4
		%20 = add i32 %19, 1
		store %20, %4
		br %8
	21:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_178(v56, v57, v58, v59, v60, v61, v62, v68, v64, v65, 1, v63, v67, v69, v70, v71, v72, v73, v74, 0, 3, 4) -> f_179(v56, v57, v58, v59, v60, v61, v62, v68, v69, v65, 1, v63, v67, v64, v70, v71, v72, v73, v74, 0, 3, 4) :|: 0 = 0
f_179(v56, v57, v58, v59, v60, v61, v62, v68, v69, v65, 1, v63, v67, v64, v70, v71, v72, v73, v74, 0, 3, 4) -> f_180(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v63, v67, v64, v70, v71, v72, v73, v74, 0, 3, 4) :|: v76 + v69 = v68
f_180(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v63, v67, v64, v70, v71, v72, v73, v74, 0, 3, 4) -> f_181(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v63, v67, v64, v70, v71, v72, v73, v74, 0, 3, 4) :|: 0 < v76
f_181(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v63, v67, v64, v70, v71, v72, v73, v74, 0, 3, 4) -> f_183(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v63, v67, v64, v70, v71, v72, v73, v74, 0, 3, 4) :|: 0 = 0
f_183(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v63, v67, v64, v70, v71, v72, v73, v74, 0, 3, 4) -> f_185(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v63, v67, v64, v70, v71, v72, v73, v74, 0, 3, 4) :|: TRUE
f_185(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v63, v67, v64, v70, v71, v72, v73, v74, 0, 3, 4) -> f_187(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v67, v64, v70, v71, v72, v73, v74, 0, 3, 4) :|: 0 = 0
f_187(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v67, v64, v70, v71, v72, v73, v74, 0, 3, 4) -> f_188(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v64, v70, v71, v72, v73, v74, 0, 3, 4) :|: v77 + v68 = 0
f_188(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v64, v70, v71, v72, v73, v74, 0, 3, 4) -> f_189(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v70, v71, v72, v73, v74, 0, 3, 4) :|: 0 = 0
f_189(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v70, v71, v72, v73, v74, 0, 3, 4) -> f_190(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v71, v72, v73, v74, 0, 3, 4) :|: v78 = v77 + v69
f_190(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v71, v72, v73, v74, 0, 3, 4) -> f_191(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v71, v72, v73, v74, 0, 3, 4) :|: TRUE
f_191(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v71, v72, v73, v74, 0, 3, 4) -> f_192(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v71, v72, v73, v74, 0, 3, 4) :|: 0 = 0
f_192(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v71, v72, v73, v74, 0, 3, 4) -> f_193(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v71, v72, v73, v74, 0, 3, 4) :|: TRUE
f_193(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v71, v72, v73, v74, 0, 3, 4) -> f_194(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v71, v72, v73, v74, 0, 3, 4) :|: 0 = 0
f_194(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v71, v72, v73, v74, 0, 3, 4) -> f_195(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v81, v71, v72, v73, v74, 0, 3, 4) :|: v81 = 1 + v70
f_195(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v81, v71, v72, v73, v74, 0, 3, 4) -> f_196(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v81, v71, v72, v73, v74, 0, 3, 4) :|: TRUE
f_196(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v81, v71, v72, v73, v74, 0, 3, 4) -> f_197(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v81, v71, v72, v73, v74, 0, 3, 4) :|: TRUE
f_197(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v81, v71, v72, v73, v74, 0, 3, 4) -> f_177(v56, v57, v58, v59, v60, v61, v62, v68, v69, v76, 1, v77, v78, v70, v81, v71, v72, v73, v74, 0, 3, 4) :|: TRUE
f_177(v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 1, v67, v68, v69, v70, v71, v72, v73, v74, 0, 3, 4) -> f_178(v56, v57, v58, v59, v60, v61, v62, v68, v64, v65, 1, v63, v67, v69, v70, v71, v72, v73, v74, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_178(v56:0, v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, v76:0 + v69:0, v64:0, v65:0, 1, v63:0, v67:0, v69:0, v70:0, v71:0, v72:0, v73:0, v74:0, 0, 3, 4) -> f_178(v56:0, v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, v77:0 + v69:0, v69:0, v76:0, 1, v76:0 + v69:0, v77:0, v70:0, 1 + v70:0, v71:0, v72:0, v73:0, v74:0, 0, 3, 4) :|: v77:0 + (v76:0 + v69:0) = 0 && v76:0 > 0
Filtered unneeded arguments:
   f_178(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_178(x8, x14, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_178(sum~v76:0~v69:0, v69:0, v70:0) -> f_178(v77:0 + v69:0, v70:0, 1 + v70:0) :|: v77:0 + (v76:0 + v69:0) = 0 && v76:0 > 0 && sum~v76:0~v69:0 = v76:0 + v69:0

----------------------------------------

(8)
Obligation:
Rules:
f_178(sum~v76:0~v69:0, v69:0, v70:0) -> f_178(v77:0 + v69:0, v70:0, 1 + v70:0) :|: v77:0 + (v76:0 + v69:0) = 0 && v76:0 > 0 && sum~v76:0~v69:0 = v76:0 + v69:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_178(sum~v76:0:0~v69:0:0, v69:0:0, v70:0:0) -> f_178(v77:0:0 + v69:0:0, v70:0:0, 1 + v70:0:0) :|: v77:0:0 + (v76:0:0 + v69:0:0) = 0 && v76:0:0 > 0 && sum~v76:0:0~v69:0:0 = v76:0:0 + v69:0:0

----------------------------------------

(11) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

f_178(sum~v76:0:0~v69:0:0, v69:0:0, v70:0:0) -> f_178(v77:0:0 + v69:0:0, v70:0:0, 1 + v70:0:0) :|: v77:0:0 + (v76:0:0 + v69:0:0) = 0 && v76:0:0 > 0 && sum~v76:0:0~v69:0:0 = v76:0:0 + v69:0:0
has been transformed into
f_178(sum~v76:0:0~v69:0:0, v69:0:0, v70:0:0) -> f_178(v77:0:0 + v69:0:0, v70:0:0, 1 + v70:0:0) :|: v77:0:0 + (v76:0:0 + v69:0:0) = 0 && v76:0:0 > 0 && sum~v76:0:0~v69:0:0 = v76:0:0 + v69:0:0.


f_178(sum~v76:0:0~v69:0:0, v69:0:0, v70:0:0) -> f_178(v77:0:0 + v69:0:0, v70:0:0, 1 + v70:0:0) :|: v77:0:0 + (v76:0:0 + v69:0:0) = 0 && v76:0:0 > 0 && sum~v76:0:0~v69:0:0 = v76:0:0 + v69:0:0 and 
f_178(sum~v76:0:0~v69:0:0, v69:0:0, v70:0:0) -> f_178(v77:0:0 + v69:0:0, v70:0:0, 1 + v70:0:0) :|: v77:0:0 + (v76:0:0 + v69:0:0) = 0 && v76:0:0 > 0 && sum~v76:0:0~v69:0:0 = v76:0:0 + v69:0:0
have been merged into the new rule
f_178(x25, x26, x27) -> f_178(x28 + x27, 1 + x27, 1 + (1 + x27)) :|: x29 + (x30 + x26) = 0 && x30 > 0 && x25 = x30 + x26 && (x28 + (x31 + x27) = 0 && x31 > 0 && x29 + x26 = x31 + x27)


----------------------------------------

(12)
Obligation:
Rules:
f_178(x32, x33, x34) -> f_178(x35 + x34, 1 + x34, 2 + x34) :|: TRUE && x36 + x37 + x33 = 0 && x37 >= 1 && x32 + -1 * x37 + -1 * x33 = 0 && x35 + x38 + x34 = 0 && x38 >= 1 && x36 + x33 + -1 * x38 + -1 * x34 = 0

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f_178(x32:0, x33:0, x34:0) -> f_178(x35:0 + x34:0, 1 + x34:0, 2 + x34:0) :|: x38:0 > 0 && x36:0 + x33:0 + -1 * x38:0 + -1 * x34:0 = 0 && x35:0 + x38:0 + x34:0 = 0 && x32:0 + -1 * x37:0 + -1 * x33:0 = 0 && x36:0 + x37:0 + x33:0 = 0 && x37:0 > 0

----------------------------------------

(15) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_178 ] = -1/2*f_178_3

The following rules are decreasing:
f_178(x32:0, x33:0, x34:0) -> f_178(x35:0 + x34:0, 1 + x34:0, 2 + x34:0) :|: x38:0 > 0 && x36:0 + x33:0 + -1 * x38:0 + -1 * x34:0 = 0 && x35:0 + x38:0 + x34:0 = 0 && x32:0 + -1 * x37:0 + -1 * x33:0 = 0 && x36:0 + x37:0 + x33:0 = 0 && x37:0 > 0

The following rules are bounded:
f_178(x32:0, x33:0, x34:0) -> f_178(x35:0 + x34:0, 1 + x34:0, 2 + x34:0) :|: x38:0 > 0 && x36:0 + x33:0 + -1 * x38:0 + -1 * x34:0 = 0 && x35:0 + x38:0 + x34:0 = 0 && x32:0 + -1 * x37:0 + -1 * x33:0 = 0 && x36:0 + x37:0 + x33:0 = 0 && x37:0 > 0


----------------------------------------

(16)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
