YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/sRh2t.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 57 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1106 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 47 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/sRh2t.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/sRh2t.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cstrchr" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%3 = alloca *i8, align 8
		%4 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		br %5
	5:
		%6 = load %3
		%7 = load %6
		%8 = sext i8 %7 to i32
		%9 = icmp ne %8 0
		br %9, %10, %18
	10:
		%11 = load %3
		%12 = load %11
		%13 = sext i8 %12 to i32
		%14 = load %4
		%15 = trunc i32 %14 to i8
		%16 = sext i8 %15 to i32
		%17 = icmp ne %13 %16
		br %18
	18:
		%19 = phi [0, %5], [%17, %10]
		br %19, %20, %23
	20:
		%21 = load %3
		%22 = getelementptr %21, 1
		store %22, %3
		br %5
	23:
		%24 = load %3
		%25 = load %24
		%26 = sext i8 %25 to i32
		%27 = load %4
		%28 = icmp eq %26 %27
		br %28, %29, %31
	29:
		%30 = load %3
		br %32
	31:
		br %32
	32:
		%33 = phi [%30, %29], [null, %31]
		ret %33

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 41
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %7, %8
	7:
		store 1, %2
		br %8
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%9 = load %2
		%10 = sext i32 %9 to i64
		%11 = mul i64 %10, 1
		%12 = alloca i8, numElementsLit: %11, align 16
		store %12, %3
		%13 = load %3
		%14 = load %2
		%15 = sub i32 %14, 1
		%16 = sext i32 %15 to i64
		%17 = getelementptr %13, %16
		store 0, %17
		%18 = load %3
		%19 = call i32 @__VERIFIER_nondet_int()
		%20 = call *i8 @cstrchr(*i8 %18, i32 %19)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_490(v582, v583, v584, v585, v662, v673, 1, v586, v587, v589, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_492(v582, v583, v584, v585, v662, v673, 1, v586, v587, v589, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: 0 = 0
f_492(v582, v583, v584, v585, v662, v673, 1, v586, v587, v589, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_494(v582, v583, v584, v585, v662, v673, 1, v586, v587, v589, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: TRUE
f_494(v582, v583, v584, v585, v662, v673, 1, v586, v587, v589, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_496(v582, v583, v584, v585, v662, v673, 1, v587, v589, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: 0 = 0
f_496(v582, v583, v584, v585, v662, v673, 1, v587, v589, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_497(v582, v583, v584, v585, v662, v673, 1, v587, v589, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: 0 = 0
f_497(v582, v583, v584, v585, v662, v673, 1, v587, v589, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_498(v582, v583, v584, v585, v662, v673, 1, v589, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v587, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: 0 = 0
f_498(v582, v583, v584, v585, v662, v673, 1, v589, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v587, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_499(v582, v583, v584, v585, v662, v673, 1, v589, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v587, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: 0 = 0
f_499(v582, v583, v584, v585, v662, v673, 1, v589, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v587, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_500(v582, v583, v584, v585, v662, v673, 1, v734, v589, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v587, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: TRUE
f_500(v582, v583, v584, v585, v662, v673, 1, v734, v589, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v587, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_501(v582, v583, v584, v585, v662, v673, 1, v734, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v587, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: 0 = 0
f_501(v582, v583, v584, v585, v662, v673, 1, v734, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v587, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_502(v582, v583, v584, v585, v662, v673, 1, v734, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v587, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: v673 != v734
f_502(v582, v583, v584, v585, v662, v673, 1, v734, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v587, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_504(v582, v583, v584, v585, v662, v673, 1, v734, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v587, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: 0 = 0
f_504(v582, v583, v584, v585, v662, v673, 1, v734, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v587, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_506(v582, v583, v584, v585, v662, v673, 1, v734, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v587, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: 0 = 0
f_506(v582, v583, v584, v585, v662, v673, 1, v734, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v587, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_476(v582, v583, v584, v585, v662, v673, 1, v734, v586, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v587, 0, v594, v596, 3, 7, 2, 4, 8) :|: TRUE
f_476(v582, v583, v584, v585, v586, v587, 1, v589, v590, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_479(v582, v583, v584, v585, v586, v587, 1, v589, v590, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: TRUE
f_479(v582, v583, v584, v585, v586, v587, 1, v589, v590, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_482(v582, v583, v584, v585, v586, v587, 1, v589, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: 0 = 0
f_482(v582, v583, v584, v585, v586, v587, 1, v589, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_484(v582, v583, v584, v585, v586, v587, 1, v589, v662, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: v662 = 1 + v586 && 3 <= v662
f_484(v582, v583, v584, v585, v586, v587, 1, v589, v662, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_485(v582, v583, v584, v585, v586, v587, 1, v589, v662, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: TRUE
f_485(v582, v583, v584, v585, v586, v587, 1, v589, v662, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_486(v582, v583, v584, v585, v586, v587, 1, v589, v662, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: TRUE
f_486(v582, v583, v584, v585, v586, v587, 1, v589, v662, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_487(v582, v583, v584, v585, v662, v587, 1, v586, v589, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: 0 = 0
f_487(v582, v583, v584, v585, v662, v587, 1, v586, v589, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_488(v582, v583, v584, v585, v662, v673, v587, 1, v586, v589, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: TRUE
f_488(v582, v583, v584, v585, v662, v673, v587, 1, v586, v589, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_489(v582, v583, v584, v585, v662, v673, 1, v586, v587, v589, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: 0 = 0
f_489(v582, v583, v584, v585, v662, v673, 1, v586, v587, v589, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) -> f_490(v582, v583, v584, v585, v662, v673, 1, v586, v587, v589, v591, v598, v592, v599, v593, v600, v597, v601, v602, v603, v590, v604, 0, v594, v596, 3, 7, 2, 4, 8) :|: v673 != 0 && v662 < v597 && 4 <= v597
Combined rules. Obtained 4 rulesP rules:
f_490(v582:0, v583:0, v584:0, v585:0, v662:0, v673:0, 1, v586:0, v587:0, v589:0, v591:0, v598:0, v592:0, v599:0, v593:0, v600:0, v597:0, v601:0, v602:0, v603:0, v590:0, v604:0, 0, v594:0, v596:0, 3, 7, 2, 4, 8) -> f_490(v582:0, v583:0, v584:0, v585:0, 1 + v662:0, v673:1, 1, v662:0, v673:0, v734:0, v591:0, v598:0, v592:0, v599:0, v593:0, v600:0, v597:0, v601:0, v602:0, v603:0, v586:0, v587:0, 0, v594:0, v596:0, 3, 7, 2, 4, 8) :|: v734:0 > v673:0 && v662:0 > 1 && v597:0 > 1 + v662:0 && v597:0 > 3 && v673:1 < 0
f_490(v582:0, v583:0, v584:0, v585:0, v662:0, v673:0, 1, v586:0, v587:0, v589:0, v591:0, v598:0, v592:0, v599:0, v593:0, v600:0, v597:0, v601:0, v602:0, v603:0, v590:0, v604:0, 0, v594:0, v596:0, 3, 7, 2, 4, 8) -> f_490(v582:0, v583:0, v584:0, v585:0, 1 + v662:0, v673:1, 1, v662:0, v673:0, v734:0, v591:0, v598:0, v592:0, v599:0, v593:0, v600:0, v597:0, v601:0, v602:0, v603:0, v586:0, v587:0, 0, v594:0, v596:0, 3, 7, 2, 4, 8) :|: v734:0 > v673:0 && v662:0 > 1 && v597:0 > 1 + v662:0 && v597:0 > 3 && v673:1 > 0
f_490(v582:0, v583:0, v584:0, v585:0, v662:0, v673:0, 1, v586:0, v587:0, v589:0, v591:0, v598:0, v592:0, v599:0, v593:0, v600:0, v597:0, v601:0, v602:0, v603:0, v590:0, v604:0, 0, v594:0, v596:0, 3, 7, 2, 4, 8) -> f_490(v582:0, v583:0, v584:0, v585:0, 1 + v662:0, v673:1, 1, v662:0, v673:0, v734:0, v591:0, v598:0, v592:0, v599:0, v593:0, v600:0, v597:0, v601:0, v602:0, v603:0, v586:0, v587:0, 0, v594:0, v596:0, 3, 7, 2, 4, 8) :|: v734:0 < v673:0 && v662:0 > 1 && v597:0 > 1 + v662:0 && v597:0 > 3 && v673:1 < 0
f_490(v582:0, v583:0, v584:0, v585:0, v662:0, v673:0, 1, v586:0, v587:0, v589:0, v591:0, v598:0, v592:0, v599:0, v593:0, v600:0, v597:0, v601:0, v602:0, v603:0, v590:0, v604:0, 0, v594:0, v596:0, 3, 7, 2, 4, 8) -> f_490(v582:0, v583:0, v584:0, v585:0, 1 + v662:0, v673:1, 1, v662:0, v673:0, v734:0, v591:0, v598:0, v592:0, v599:0, v593:0, v600:0, v597:0, v601:0, v602:0, v603:0, v586:0, v587:0, 0, v594:0, v596:0, 3, 7, 2, 4, 8) :|: v734:0 < v673:0 && v662:0 > 1 && v597:0 > 1 + v662:0 && v597:0 > 3 && v673:1 > 0
Filtered unneeded arguments:
   f_490(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_490(x5, x6, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_490(v662:0, v673:0, v597:0) -> f_490(1 + v662:0, v673:1, v597:0) :|: v597:0 > 1 + v662:0 && v662:0 > 1 && v673:1 < 0 && v597:0 > 3
f_490(v662:0, v673:0, v597:0) -> f_490(1 + v662:0, v673:1, v597:0) :|: v597:0 > 1 + v662:0 && v662:0 > 1 && v673:1 > 0 && v597:0 > 3

----------------------------------------

(8)
Obligation:
Rules:
f_490(v662:0, v673:0, v597:0) -> f_490(1 + v662:0, v673:1, v597:0) :|: v597:0 > 1 + v662:0 && v662:0 > 1 && v673:1 < 0 && v597:0 > 3
f_490(x, x1, x2) -> f_490(1 + x, x3, x2) :|: x2 > 1 + x && x > 1 && x3 > 0 && x2 > 3

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_490(x:0, x1:0, x2:0) -> f_490(1 + x:0, x3:0, x2:0) :|: x3:0 > 0 && x2:0 > 3 && x:0 > 1 && x2:0 > 1 + x:0
f_490(v662:0:0, v673:0:0, v597:0:0) -> f_490(1 + v662:0:0, v673:1:0, v597:0:0) :|: v673:1:0 < 0 && v597:0:0 > 3 && v662:0:0 > 1 && v597:0:0 > 1 + v662:0:0

----------------------------------------

(11) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_490(x1, x2, x3) -> f_490(x1, x3)

----------------------------------------

(12)
Obligation:
Rules:
f_490(x:0, x2:0) -> f_490(1 + x:0, x2:0) :|: x3:0 > 0 && x2:0 > 3 && x:0 > 1 && x2:0 > 1 + x:0
f_490(v662:0:0, v597:0:0) -> f_490(1 + v662:0:0, v597:0:0) :|: v673:1:0 < 0 && v597:0:0 > 3 && v662:0:0 > 1 && v597:0:0 > 1 + v662:0:0

----------------------------------------

(13) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_490(x, x1)] = -2 - x + x1

The following rules are decreasing:
f_490(x:0, x2:0) -> f_490(1 + x:0, x2:0) :|: x3:0 > 0 && x2:0 > 3 && x:0 > 1 && x2:0 > 1 + x:0
f_490(v662:0:0, v597:0:0) -> f_490(1 + v662:0:0, v597:0:0) :|: v673:1:0 < 0 && v597:0:0 > 3 && v662:0:0 > 1 && v597:0:0 > 1 + v662:0:0
The following rules are bounded:
f_490(x:0, x2:0) -> f_490(1 + x:0, x2:0) :|: x3:0 > 0 && x2:0 > 3 && x:0 > 1 && x2:0 > 1 + x:0
f_490(v662:0:0, v597:0:0) -> f_490(1 + v662:0:0, v597:0:0) :|: v673:1:0 < 0 && v597:0:0 > 3 && v662:0:0 > 1 && v597:0:0 > 1 + v662:0:0

----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
