MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/C98RY.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 63 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 18.1 s]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 2 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
    (8) LLVM Symbolic Execution SCC
    (9) LLVM Symbolic Execution SCC


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/C98RY.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/C98RY.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: nomsg initVal: -1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: side1Failed_History_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: INTERNAL section: null

Name: side1Failed_History_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: INTERNAL section: null

Name: side1Failed_History_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: INTERNAL section: null

Name: side2Failed_History_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: INTERNAL section: null

Name: side2Failed_History_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: INTERNAL section: null

Name: side2Failed_History_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: INTERNAL section: null

Name: active_side_History_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: INTERNAL section: null

Name: active_side_History_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: INTERNAL section: null

Name: active_side_History_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: INTERNAL section: null

Name: manual_selection_History_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: INTERNAL section: null

Name: manual_selection_History_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: INTERNAL section: null

Name: manual_selection_History_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: INTERNAL section: null

Name: cs1_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: cs2_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: side1Failed initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: s1s1_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: s1s2_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: s1p_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: side1_written initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: s1s1_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: s2s1_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: cs1_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: side2Failed initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: s2s1_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: s2s2_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: s2p_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: side2_written initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: s1s2_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: s2s2_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: cs2_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: s1p_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: s2p_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: nodes initVal: (@Console_task_each_pals_period,@Side1_activestandby_task_each_pals_period,@Side2_activestandby_task_each_pals_period,@Pendulum_prism_task_each_pals_period) type: [4 x *BasicFunctionType varArgs: falsereturnType: BasicVoidTypeparamTypes: ()] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: null section: null

Name: cs1 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: cs2 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: s1s2 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: s1s1 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: s2s1 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: s2s2 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: s1p initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: s2p initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_char" returnParam: i8 signext parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_bool" returnParam: i1 zeroext parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet__Bool" returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_msg_t" returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int8_t" returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "write_side1_failed_history" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 107
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%4 = load @side1Failed_History_1
		%5 = trunc i8 %4 to i1
		%6 = zext i1 %5 to i8
		store %6, @side1Failed_History_2
		%7 = load @side1Failed_History_0
		%8 = trunc i8 %7 to i1
		%9 = zext i1 %8 to i8
		store %9, @side1Failed_History_1
		%10 = load %2
		%11 = trunc i8 %10 to i1
		%12 = zext i1 %11 to i8
		store %12, @side1Failed_History_0
		ret void

*BasicFunctionTypename: "read_side1_failed_history" linkageType: EXTERNALLY_VISIBLE returnParam: i1 zeroext parameters: (0 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 120
	0:
		%2 = alloca i1, align 1
		%3 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load %3
		%5 = zext i8 %4 to i32
		%6 = icmp eq %5 0
		br %6, %7, %10
	7:
		%8 = load @side1Failed_History_0
		%9 = trunc i8 %8 to i1
		store %9, %2
		br %25
	10:
		%11 = load %3
		%12 = zext i8 %11 to i32
		%13 = icmp eq %12 1
		br %13, %14, %17
	14:
		%15 = load @side1Failed_History_1
		%16 = trunc i8 %15 to i1
		store %16, %2
		br %25
	17:
		%18 = load %3
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 2
		br %20, %21, %24
	21:
		%22 = load @side1Failed_History_2
		%23 = trunc i8 %22 to i1
		store %23, %2
		br %25
	24:
		Unnamed Call-Instruction = call BasicVoidType @assert(i1 zeroext 0)
		store 0, %2
		br %25
	25:
		%26 = load %2
		ret %26

*BasicFunctionTypename: "assert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 154
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%4 = load %2
		%5 = trunc i8 %4 to i1
		br %5, %8, %6
	6:
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	8:
		ret void

*BasicFunctionTypename: "write_side2_failed_history" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 168
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%4 = load @side2Failed_History_1
		%5 = trunc i8 %4 to i1
		%6 = zext i1 %5 to i8
		store %6, @side2Failed_History_2
		%7 = load @side2Failed_History_0
		%8 = trunc i8 %7 to i1
		%9 = zext i1 %8 to i8
		store %9, @side2Failed_History_1
		%10 = load %2
		%11 = trunc i8 %10 to i1
		%12 = zext i1 %11 to i8
		store %12, @side2Failed_History_0
		ret void

*BasicFunctionTypename: "read_side2_failed_history" linkageType: EXTERNALLY_VISIBLE returnParam: i1 zeroext parameters: (0 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 179
	0:
		%2 = alloca i1, align 1
		%3 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load %3
		%5 = zext i8 %4 to i32
		%6 = icmp eq %5 0
		br %6, %7, %10
	7:
		%8 = load @side2Failed_History_0
		%9 = trunc i8 %8 to i1
		store %9, %2
		br %25
	10:
		%11 = load %3
		%12 = zext i8 %11 to i32
		%13 = icmp eq %12 1
		br %13, %14, %17
	14:
		%15 = load @side2Failed_History_1
		%16 = trunc i8 %15 to i1
		store %16, %2
		br %25
	17:
		%18 = load %3
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 2
		br %20, %21, %24
	21:
		%22 = load @side2Failed_History_2
		%23 = trunc i8 %22 to i1
		store %23, %2
		br %25
	24:
		Unnamed Call-Instruction = call BasicVoidType @assert(i1 zeroext 0)
		store 0, %2
		br %25
	25:
		%26 = load %2
		ret %26

*BasicFunctionTypename: "write_active_side_history" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 211
	0:
		%2 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%3 = load @active_side_History_1
		store %3, @active_side_History_2
		%4 = load @active_side_History_0
		store %4, @active_side_History_1
		%5 = load %2
		store %5, @active_side_History_0
		ret void

*BasicFunctionTypename: "read_active_side_history" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 224
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load %3
		%5 = zext i8 %4 to i32
		%6 = icmp eq %5 0
		br %6, %7, %9
	7:
		%8 = load @active_side_History_0
		store %8, %2
		br %22
	9:
		%10 = load %3
		%11 = zext i8 %10 to i32
		%12 = icmp eq %11 1
		br %12, %13, %15
	13:
		%14 = load @active_side_History_1
		store %14, %2
		br %22
	15:
		%16 = load %3
		%17 = zext i8 %16 to i32
		%18 = icmp eq %17 2
		br %18, %19, %21
	19:
		%20 = load @active_side_History_2
		store %20, %2
		br %22
	21:
		Unnamed Call-Instruction = call BasicVoidType @assert(i1 zeroext 0)
		store -2, %2
		br %22
	22:
		%23 = load %2
		ret %23

*BasicFunctionTypename: "write_manual_selection_history" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 258
	0:
		%2 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%3 = load @manual_selection_History_1
		store %3, @manual_selection_History_2
		%4 = load @manual_selection_History_0
		store %4, @manual_selection_History_1
		%5 = load %2
		store %5, @manual_selection_History_0
		ret void

*BasicFunctionTypename: "read_manual_selection_history" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 271
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load %3
		%5 = zext i8 %4 to i32
		%6 = icmp eq %5 0
		br %6, %7, %9
	7:
		%8 = load @manual_selection_History_0
		store %8, %2
		br %22
	9:
		%10 = load %3
		%11 = zext i8 %10 to i32
		%12 = icmp eq %11 1
		br %12, %13, %15
	13:
		%14 = load @manual_selection_History_1
		store %14, %2
		br %22
	15:
		%16 = load %3
		%17 = zext i8 %16 to i32
		%18 = icmp eq %17 2
		br %18, %19, %21
	19:
		%20 = load @manual_selection_History_2
		store %20, %2
		br %22
	21:
		Unnamed Call-Instruction = call BasicVoidType @assert(i1 zeroext 0)
		store 0, %2
		br %22
	22:
		%23 = load %2
		ret %23

*BasicFunctionTypename: "init" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 305
	0:
		%1 = alloca i32, align 4
		%2 = load @side1Failed_History_0
		%3 = trunc i8 %2 to i1
		%4 = zext i1 %3 to i32
		%5 = icmp ne %4 0
		br %5, %6, %7
	6:
		store 0, %1
		br %68
	7:
		%8 = load @side2Failed_History_0
		%9 = trunc i8 %8 to i1
		%10 = zext i1 %9 to i32
		%11 = icmp ne %10 0
		br %11, %12, %13
	12:
		store 0, %1
		br %68
	13:
		%14 = load @active_side_History_0
		%15 = sext i8 %14 to i32
		%16 = icmp ne %15 -2
		br %16, %17, %18
	17:
		store 0, %1
		br %68
	18:
		%19 = load @manual_selection_History_0
		%20 = sext i8 %19 to i32
		%21 = icmp ne %20 0
		br %21, %22, %23
	22:
		store 0, %1
		br %68
	23:
		%24 = load @side1Failed_History_1
		%25 = trunc i8 %24 to i1
		%26 = zext i1 %25 to i32
		%27 = icmp ne %26 0
		br %27, %28, %29
	28:
		store 0, %1
		br %68
	29:
		%30 = load @side2Failed_History_1
		%31 = trunc i8 %30 to i1
		%32 = zext i1 %31 to i32
		%33 = icmp ne %32 0
		br %33, %34, %35
	34:
		store 0, %1
		br %68
	35:
		%36 = load @active_side_History_1
		%37 = sext i8 %36 to i32
		%38 = icmp ne %37 -2
		br %38, %39, %40
	39:
		store 0, %1
		br %68
	40:
		%41 = load @manual_selection_History_1
		%42 = sext i8 %41 to i32
		%43 = icmp ne %42 0
		br %43, %44, %45
	44:
		store 0, %1
		br %68
	45:
		%46 = load @side1Failed_History_2
		%47 = trunc i8 %46 to i1
		%48 = zext i1 %47 to i32
		%49 = icmp ne %48 0
		br %49, %50, %51
	50:
		store 0, %1
		br %68
	51:
		%52 = load @side2Failed_History_2
		%53 = trunc i8 %52 to i1
		%54 = zext i1 %53 to i32
		%55 = icmp ne %54 0
		br %55, %56, %57
	56:
		store 0, %1
		br %68
	57:
		%58 = load @active_side_History_2
		%59 = sext i8 %58 to i32
		%60 = icmp ne %59 -2
		br %60, %61, %62
	61:
		store 0, %1
		br %68
	62:
		%63 = load @manual_selection_History_2
		%64 = sext i8 %63 to i32
		%65 = icmp ne %64 0
		br %65, %66, %67
	66:
		store 0, %1
		br %68
	67:
		store 1, %1
		br %68
	68:
		%69 = load %1
		ret %69

*BasicFunctionTypename: "flip_the_side" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 395
	0:
		%2 = alloca i8, align 1
		%3 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %2
		%5 = sext i8 %4 to i32
		%6 = icmp eq %5 1
		br %6, %7, %8
	7:
		store 0, %3
		br %9
	8:
		store 1, %3
		br %9
	9:
		%10 = load %3
		%11 = trunc i32 %10 to i8
		ret %11

*BasicFunctionTypename: "Console_task_each_pals_period" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 416
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%3 = call signext i8 (...)* @__VERIFIER_nondet_char()
		store %3, %2
		%4 = load %2
		store %4, %1
		%5 = load %1
		Unnamed Call-Instruction = call BasicVoidType @write_manual_selection_history(i8 signext %5)
		%6 = load %1
		%7 = sext i8 %6 to i32
		%8 = load @nomsg
		%9 = sext i8 %8 to i32
		%10 = icmp ne %7 %9
		br %10, %11, %20
	11:
		%12 = load @cs1_new
		%13 = sext i8 %12 to i32
		%14 = load @nomsg
		%15 = sext i8 %14 to i32
		%16 = icmp eq %13 %15
		br %16, %17, %20
	17:
		%18 = load %1
		%19 = sext i8 %18 to i32
		br %23
	20:
		%21 = load @cs1_new
		%22 = sext i8 %21 to i32
		br %23
	23:
		%24 = phi [%19, %17], [%22, %20]
		%25 = trunc i32 %24 to i8
		store %25, @cs1_new
		%26 = load %1
		%27 = sext i8 %26 to i32
		%28 = load @nomsg
		%29 = sext i8 %28 to i32
		%30 = icmp ne %27 %29
		br %30, %31, %40
	31:
		%32 = load @cs2_new
		%33 = sext i8 %32 to i32
		%34 = load @nomsg
		%35 = sext i8 %34 to i32
		%36 = icmp eq %33 %35
		br %36, %37, %40
	37:
		%38 = load %1
		%39 = sext i8 %38 to i32
		br %43
	40:
		%41 = load @cs2_new
		%42 = sext i8 %41 to i32
		br %43
	43:
		%44 = phi [%39, %37], [%42, %40]
		%45 = trunc i32 %44 to i8
		store %45, @cs2_new
		store 0, %1
		ret void

*BasicFunctionTypename: "Side1_activestandby_task_each_pals_period" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 450
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @nomsg
		store %5, %1
		%6 = load @nomsg
		store %6, %2
		store 0, %3
		%7 = call zeroext i1 (...)* @__VERIFIER_nondet_bool()
		%8 = zext i1 %7 to i8
		store %8, @side1Failed
		%9 = load @side1Failed
		%10 = trunc i8 %9 to i1
		Unnamed Call-Instruction = call BasicVoidType @write_side1_failed_history(i1 zeroext %10)
		%11 = load @side1Failed
		%12 = trunc i8 %11 to i1
		br %12, %13, %75
	13:
		%14 = load @nomsg
		%15 = sext i8 %14 to i32
		%16 = load @nomsg
		%17 = sext i8 %16 to i32
		%18 = icmp ne %15 %17
		br %18, %19, %28
	19:
		%20 = load @s1s1_new
		%21 = sext i8 %20 to i32
		%22 = load @nomsg
		%23 = sext i8 %22 to i32
		%24 = icmp eq %21 %23
		br %24, %25, %28
	25:
		%26 = load @nomsg
		%27 = sext i8 %26 to i32
		br %31
	28:
		%29 = load @s1s1_new
		%30 = sext i8 %29 to i32
		br %31
	31:
		%32 = phi [%27, %25], [%30, %28]
		%33 = trunc i32 %32 to i8
		store %33, @s1s1_new
		%34 = load @nomsg
		%35 = sext i8 %34 to i32
		%36 = load @nomsg
		%37 = sext i8 %36 to i32
		%38 = icmp ne %35 %37
		br %38, %39, %48
	39:
		%40 = load @s1s2_new
		%41 = sext i8 %40 to i32
		%42 = load @nomsg
		%43 = sext i8 %42 to i32
		%44 = icmp eq %41 %43
		br %44, %45, %48
	45:
		%46 = load @nomsg
		%47 = sext i8 %46 to i32
		br %51
	48:
		%49 = load @s1s2_new
		%50 = sext i8 %49 to i32
		br %51
	51:
		%52 = phi [%47, %45], [%50, %48]
		%53 = trunc i32 %52 to i8
		store %53, @s1s2_new
		%54 = load @nomsg
		%55 = sext i8 %54 to i32
		%56 = load @nomsg
		%57 = sext i8 %56 to i32
		%58 = icmp ne %55 %57
		br %58, %59, %68
	59:
		%60 = load @s1p_new
		%61 = sext i8 %60 to i32
		%62 = load @nomsg
		%63 = sext i8 %62 to i32
		%64 = icmp eq %61 %63
		br %64, %65, %68
	65:
		%66 = load @nomsg
		%67 = sext i8 %66 to i32
		br %71
	68:
		%69 = load @s1p_new
		%70 = sext i8 %69 to i32
		br %71
	71:
		%72 = phi [%67, %65], [%70, %68]
		%73 = trunc i32 %72 to i8
		store %73, @s1p_new
		%74 = load @nomsg
		store %74, @side1_written
		br %194
	75:
		%76 = load @s1s1_old
		store %76, %1
		%77 = load @nomsg
		store %77, @s1s1_old
		%78 = load @s2s1_old
		store %78, %2
		%79 = load @nomsg
		store %79, @s2s1_old
		%80 = load @cs1_old
		store %80, %3
		%81 = load @nomsg
		store %81, @cs1_old
		%82 = load %1
		%83 = sext i8 %82 to i32
		%84 = load %2
		%85 = sext i8 %84 to i32
		%86 = icmp eq %83 %85
		br %86, %87, %88
	87:
		store 1, %4
		br %132
	88:
		%89 = load %1
		%90 = sext i8 %89 to i32
		%91 = load @nomsg
		%92 = sext i8 %91 to i32
		%93 = icmp eq %90 %92
		br %93, %94, %103
	94:
		%95 = load %2
		%96 = sext i8 %95 to i32
		%97 = load @nomsg
		%98 = sext i8 %97 to i32
		%99 = icmp ne %96 %98
		br %99, %100, %101
	100:
		store 0, %4
		br %102
	101:
		br %104
	102:
		br %131
	103:
		br %104
	104:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%105 = load %1
		%106 = sext i8 %105 to i32
		%107 = load @nomsg
		%108 = sext i8 %107 to i32
		%109 = icmp ne %106 %108
		br %109, %110, %119
	110:
		%111 = load %2
		%112 = sext i8 %111 to i32
		%113 = load @nomsg
		%114 = sext i8 %113 to i32
		%115 = icmp eq %112 %114
		br %115, %116, %117
	116:
		store 1, %4
		br %118
	117:
		br %120
	118:
		br %130
	119:
		br %120
	120:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%121 = load %3
		%122 = sext i8 %121 to i32
		%123 = icmp eq %122 1
		br %123, %124, %127
	124:
		%125 = load %1
		%126 = call signext i8 @flip_the_side(i8 signext %125)
		store %126, %4
		br %129
	127:
		%128 = load %1
		store %128, %4
		br %129
	129:
		br %130
	130:
		br %131
	131:
		br %132
	132:
		%133 = load %4
		%134 = sext i8 %133 to i32
		%135 = load @nomsg
		%136 = sext i8 %135 to i32
		%137 = icmp ne %134 %136
		br %137, %138, %147
	138:
		%139 = load @s1s1_new
		%140 = sext i8 %139 to i32
		%141 = load @nomsg
		%142 = sext i8 %141 to i32
		%143 = icmp eq %140 %142
		br %143, %144, %147
	144:
		%145 = load %4
		%146 = sext i8 %145 to i32
		br %150
	147:
		%148 = load @s1s1_new
		%149 = sext i8 %148 to i32
		br %150
	150:
		%151 = phi [%146, %144], [%149, %147]
		%152 = trunc i32 %151 to i8
		store %152, @s1s1_new
		%153 = load %4
		%154 = sext i8 %153 to i32
		%155 = load @nomsg
		%156 = sext i8 %155 to i32
		%157 = icmp ne %154 %156
		br %157, %158, %167
	158:
		%159 = load @s1s2_new
		%160 = sext i8 %159 to i32
		%161 = load @nomsg
		%162 = sext i8 %161 to i32
		%163 = icmp eq %160 %162
		br %163, %164, %167
	164:
		%165 = load %4
		%166 = sext i8 %165 to i32
		br %170
	167:
		%168 = load @s1s2_new
		%169 = sext i8 %168 to i32
		br %170
	170:
		%171 = phi [%166, %164], [%169, %167]
		%172 = trunc i32 %171 to i8
		store %172, @s1s2_new
		%173 = load %4
		%174 = sext i8 %173 to i32
		%175 = load @nomsg
		%176 = sext i8 %175 to i32
		%177 = icmp ne %174 %176
		br %177, %178, %187
	178:
		%179 = load @s1p_new
		%180 = sext i8 %179 to i32
		%181 = load @nomsg
		%182 = sext i8 %181 to i32
		%183 = icmp eq %180 %182
		br %183, %184, %187
	184:
		%185 = load %4
		%186 = sext i8 %185 to i32
		br %190
	187:
		%188 = load @s1p_new
		%189 = sext i8 %188 to i32
		br %190
	190:
		%191 = phi [%186, %184], [%189, %187]
		%192 = trunc i32 %191 to i8
		store %192, @s1p_new
		%193 = load %4
		store %193, @side1_written
		br %194
	194:
		ret void

*BasicFunctionTypename: "Side2_activestandby_task_each_pals_period" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 621
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @nomsg
		store %5, %1
		%6 = load @nomsg
		store %6, %2
		store 0, %3
		%7 = call zeroext i1 (...)* @__VERIFIER_nondet_bool()
		%8 = zext i1 %7 to i8
		store %8, @side2Failed
		%9 = load @side2Failed
		%10 = trunc i8 %9 to i1
		Unnamed Call-Instruction = call BasicVoidType @write_side2_failed_history(i1 zeroext %10)
		%11 = load @side2Failed
		%12 = trunc i8 %11 to i1
		br %12, %13, %75
	13:
		%14 = load @nomsg
		%15 = sext i8 %14 to i32
		%16 = load @nomsg
		%17 = sext i8 %16 to i32
		%18 = icmp ne %15 %17
		br %18, %19, %28
	19:
		%20 = load @s2s1_new
		%21 = sext i8 %20 to i32
		%22 = load @nomsg
		%23 = sext i8 %22 to i32
		%24 = icmp eq %21 %23
		br %24, %25, %28
	25:
		%26 = load @nomsg
		%27 = sext i8 %26 to i32
		br %31
	28:
		%29 = load @s2s1_new
		%30 = sext i8 %29 to i32
		br %31
	31:
		%32 = phi [%27, %25], [%30, %28]
		%33 = trunc i32 %32 to i8
		store %33, @s2s1_new
		%34 = load @nomsg
		%35 = sext i8 %34 to i32
		%36 = load @nomsg
		%37 = sext i8 %36 to i32
		%38 = icmp ne %35 %37
		br %38, %39, %48
	39:
		%40 = load @s2s2_new
		%41 = sext i8 %40 to i32
		%42 = load @nomsg
		%43 = sext i8 %42 to i32
		%44 = icmp eq %41 %43
		br %44, %45, %48
	45:
		%46 = load @nomsg
		%47 = sext i8 %46 to i32
		br %51
	48:
		%49 = load @s2s2_new
		%50 = sext i8 %49 to i32
		br %51
	51:
		%52 = phi [%47, %45], [%50, %48]
		%53 = trunc i32 %52 to i8
		store %53, @s2s2_new
		%54 = load @nomsg
		%55 = sext i8 %54 to i32
		%56 = load @nomsg
		%57 = sext i8 %56 to i32
		%58 = icmp ne %55 %57
		br %58, %59, %68
	59:
		%60 = load @s2p_new
		%61 = sext i8 %60 to i32
		%62 = load @nomsg
		%63 = sext i8 %62 to i32
		%64 = icmp eq %61 %63
		br %64, %65, %68
	65:
		%66 = load @nomsg
		%67 = sext i8 %66 to i32
		br %71
	68:
		%69 = load @s2p_new
		%70 = sext i8 %69 to i32
		br %71
	71:
		%72 = phi [%67, %65], [%70, %68]
		%73 = trunc i32 %72 to i8
		store %73, @s2p_new
		%74 = load @nomsg
		store %74, @side2_written
		br %194
	75:
		%76 = load @s1s2_old
		store %76, %1
		%77 = load @nomsg
		store %77, @s1s2_old
		%78 = load @s2s2_old
		store %78, %2
		%79 = load @nomsg
		store %79, @s2s2_old
		%80 = load @cs2_old
		store %80, %3
		%81 = load @nomsg
		store %81, @cs2_old
		%82 = load %1
		%83 = sext i8 %82 to i32
		%84 = load %2
		%85 = sext i8 %84 to i32
		%86 = icmp eq %83 %85
		br %86, %87, %88
	87:
		store 1, %4
		br %132
	88:
		%89 = load %2
		%90 = sext i8 %89 to i32
		%91 = load @nomsg
		%92 = sext i8 %91 to i32
		%93 = icmp eq %90 %92
		br %93, %94, %103
	94:
		%95 = load %1
		%96 = sext i8 %95 to i32
		%97 = load @nomsg
		%98 = sext i8 %97 to i32
		%99 = icmp ne %96 %98
		br %99, %100, %101
	100:
		store 0, %4
		br %102
	101:
		br %104
	102:
		br %131
	103:
		br %104
	104:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%105 = load %2
		%106 = sext i8 %105 to i32
		%107 = load @nomsg
		%108 = sext i8 %107 to i32
		%109 = icmp ne %106 %108
		br %109, %110, %119
	110:
		%111 = load %1
		%112 = sext i8 %111 to i32
		%113 = load @nomsg
		%114 = sext i8 %113 to i32
		%115 = icmp eq %112 %114
		br %115, %116, %117
	116:
		store 1, %4
		br %118
	117:
		br %120
	118:
		br %130
	119:
		br %120
	120:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%121 = load %3
		%122 = sext i8 %121 to i32
		%123 = icmp eq %122 1
		br %123, %124, %127
	124:
		%125 = load %2
		%126 = call signext i8 @flip_the_side(i8 signext %125)
		store %126, %4
		br %129
	127:
		%128 = load %2
		store %128, %4
		br %129
	129:
		br %130
	130:
		br %131
	131:
		br %132
	132:
		%133 = load %4
		%134 = sext i8 %133 to i32
		%135 = load @nomsg
		%136 = sext i8 %135 to i32
		%137 = icmp ne %134 %136
		br %137, %138, %147
	138:
		%139 = load @s2s1_new
		%140 = sext i8 %139 to i32
		%141 = load @nomsg
		%142 = sext i8 %141 to i32
		%143 = icmp eq %140 %142
		br %143, %144, %147
	144:
		%145 = load %4
		%146 = sext i8 %145 to i32
		br %150
	147:
		%148 = load @s2s1_new
		%149 = sext i8 %148 to i32
		br %150
	150:
		%151 = phi [%146, %144], [%149, %147]
		%152 = trunc i32 %151 to i8
		store %152, @s2s1_new
		%153 = load %4
		%154 = sext i8 %153 to i32
		%155 = load @nomsg
		%156 = sext i8 %155 to i32
		%157 = icmp ne %154 %156
		br %157, %158, %167
	158:
		%159 = load @s2s2_new
		%160 = sext i8 %159 to i32
		%161 = load @nomsg
		%162 = sext i8 %161 to i32
		%163 = icmp eq %160 %162
		br %163, %164, %167
	164:
		%165 = load %4
		%166 = sext i8 %165 to i32
		br %170
	167:
		%168 = load @s2s2_new
		%169 = sext i8 %168 to i32
		br %170
	170:
		%171 = phi [%166, %164], [%169, %167]
		%172 = trunc i32 %171 to i8
		store %172, @s2s2_new
		%173 = load %4
		%174 = sext i8 %173 to i32
		%175 = load @nomsg
		%176 = sext i8 %175 to i32
		%177 = icmp ne %174 %176
		br %177, %178, %187
	178:
		%179 = load @s2p_new
		%180 = sext i8 %179 to i32
		%181 = load @nomsg
		%182 = sext i8 %181 to i32
		%183 = icmp eq %180 %182
		br %183, %184, %187
	184:
		%185 = load %4
		%186 = sext i8 %185 to i32
		br %190
	187:
		%188 = load @s2p_new
		%189 = sext i8 %188 to i32
		br %190
	190:
		%191 = phi [%186, %184], [%189, %187]
		%192 = trunc i32 %191 to i8
		store %192, @s2p_new
		%193 = load %4
		store %193, @side2_written
		br %194
	194:
		ret void

*BasicFunctionTypename: "Pendulum_prism_task_each_pals_period" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 792
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = call signext i8 @read_active_side_history(i8 zeroext 0)
		store %5, %2
		%6 = load %2
		store %6, %1
		%7 = load @nomsg
		store %7, %3
		%8 = load @nomsg
		store %8, %4
		%9 = load @s1p_old
		store %9, %3
		%10 = load @nomsg
		store %10, @s1p_old
		%11 = load @s2p_old
		store %11, %4
		%12 = load @nomsg
		store %12, @s2p_old
		%13 = load %3
		%14 = sext i8 %13 to i32
		%15 = icmp eq %14 1
		br %15, %16, %17
	16:
		store 1, %1
		br %53
	17:
		%18 = load %4
		%19 = sext i8 %18 to i32
		%20 = icmp eq %19 1
		br %20, %21, %22
	21:
		store 2, %1
		br %52
	22:
		%23 = load %3
		%24 = sext i8 %23 to i32
		%25 = icmp eq %24 0
		br %25, %26, %35
	26:
		%27 = load %4
		%28 = sext i8 %27 to i32
		%29 = load @nomsg
		%30 = sext i8 %29 to i32
		%31 = icmp eq %28 %30
		br %31, %32, %33
	32:
		store 1, %1
		br %34
	33:
		br %36
	34:
		br %51
	35:
		br %36
	36:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%37 = load %3
		%38 = sext i8 %37 to i32
		%39 = load @nomsg
		%40 = sext i8 %39 to i32
		%41 = icmp eq %38 %40
		br %41, %42, %49
	42:
		%43 = load %4
		%44 = sext i8 %43 to i32
		%45 = icmp eq %44 0
		br %45, %46, %47
	46:
		store 2, %1
		br %48
	47:
		store 0, %1
		br %48
	48:
		br %50
	49:
		store 0, %1
		br %50
	50:
		br %51
	51:
		br %52
	52:
		br %53
	53:
		%54 = load %1
		Unnamed Call-Instruction = call BasicVoidType @write_active_side_history(i8 signext %54)
		ret void

*BasicFunctionTypename: "check" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 879
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		%9 = alloca i8, align 1
		%10 = alloca i8, align 1
		%11 = alloca i8, align 1
		%12 = alloca i8, align 1
		%13 = alloca i8, align 1
		%14 = alloca i8, align 1
		%15 = alloca i8, align 1
		%16 = alloca i8, align 1
		%17 = alloca i8, align 1
		%18 = alloca i8, align 1
		%19 = alloca i8, align 1
		%20 = alloca i8, align 1
		%21 = alloca i8, align 1
		%22 = alloca i8, align 1
		%23 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %9)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %10)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %11)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %12)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %13)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %14)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %15)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %16)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %17)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %18)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %19)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %20)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %21)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %22)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %23)
		%24 = load @side1Failed
		%25 = trunc i8 %24 to i1
		br %25, %27, %26
	26:
		store 1, %2
		br %33
	27:
		%28 = load @side2Failed
		%29 = trunc i8 %28 to i1
		br %29, %31, %30
	30:
		store 1, %2
		br %32
	31:
		store 0, %2
		br %32
	32:
		br %33
	33:
		%34 = load %2
		%35 = icmp ne %34 0
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i1 zeroext %35)
		%36 = call signext i8 @read_manual_selection_history(i8 zeroext 1)
		store %36, %3
		%37 = load %3
		%38 = icmp ne %37 0
		br %38, %94, %39
	39:
		%40 = call zeroext i1 @read_side1_failed_history(i8 zeroext 1)
		%41 = zext i1 %40 to i8
		store %41, %4
		%42 = load %4
		%43 = trunc i8 %42 to i1
		br %43, %93, %44
	44:
		%45 = call zeroext i1 @read_side1_failed_history(i8 zeroext 0)
		%46 = zext i1 %45 to i8
		store %46, %5
		%47 = load %5
		%48 = trunc i8 %47 to i1
		br %48, %92, %49
	49:
		%50 = call zeroext i1 @read_side2_failed_history(i8 zeroext 1)
		%51 = zext i1 %50 to i8
		store %51, %6
		%52 = load %6
		%53 = trunc i8 %52 to i1
		br %53, %91, %54
	54:
		%55 = call zeroext i1 @read_side2_failed_history(i8 zeroext 0)
		%56 = zext i1 %55 to i8
		store %56, %7
		%57 = load %7
		%58 = trunc i8 %57 to i1
		br %58, %90, %59
	59:
		%60 = load @side1_written
		%61 = sext i8 %60 to i32
		%62 = icmp eq %61 1
		br %62, %69, %63
	63:
		%64 = load @side1_written
		%65 = sext i8 %64 to i32
		%66 = icmp eq %65 0
		br %66, %68, %67
	67:
		store 0, %1
		br %199
	68:
		br %69
	69:
		%70 = load @side1_written
		%71 = sext i8 %70 to i32
		%72 = icmp eq %71 0
		br %72, %73, %79
	73:
		%74 = load @side2_written
		%75 = sext i8 %74 to i32
		%76 = icmp eq %75 1
		br %76, %78, %77
	77:
		store 0, %1
		br %199
	78:
		br %79
	79:
		%80 = load @side1_written
		%81 = sext i8 %80 to i32
		%82 = icmp eq %81 1
		br %82, %83, %89
	83:
		%84 = load @side2_written
		%85 = sext i8 %84 to i32
		%86 = icmp eq %85 0
		br %86, %88, %87
	87:
		store 0, %1
		br %199
	88:
		br %89
	89:
		br %90
	90:
		br %91
	91:
		br %92
	92:
		br %93
	93:
		br %94
	94:
		%95 = call zeroext i1 @read_side1_failed_history(i8 zeroext 1)
		%96 = zext i1 %95 to i8
		store %96, %10
		%97 = load %10
		%98 = trunc i8 %97 to i1
		br %98, %99, %123
	99:
		%100 = call zeroext i1 @read_side2_failed_history(i8 zeroext 1)
		%101 = zext i1 %100 to i8
		store %101, %11
		%102 = load %11
		%103 = trunc i8 %102 to i1
		br %103, %122, %104
	104:
		%105 = call signext i8 @read_active_side_history(i8 zeroext 0)
		store %105, %8
		%106 = load %8
		%107 = sext i8 %106 to i32
		%108 = icmp eq %107 2
		br %108, %110, %109
	109:
		store 0, %1
		br %199
	110:
		%111 = call zeroext i1 @read_side2_failed_history(i8 zeroext 0)
		%112 = zext i1 %111 to i8
		store %112, %9
		%113 = load %9
		%114 = trunc i8 %113 to i1
		br %114, %121, %115
	115:
		%116 = load @side2_written
		%117 = sext i8 %116 to i32
		%118 = icmp eq %117 1
		br %118, %120, %119
	119:
		store 0, %1
		br %199
	120:
		br %121
	121:
		br %122
	122:
		br %123
	123:
		%124 = call zeroext i1 @read_side1_failed_history(i8 zeroext 1)
		%125 = zext i1 %124 to i8
		store %125, %14
		%126 = load %14
		%127 = trunc i8 %126 to i1
		br %127, %152, %128
	128:
		%129 = call zeroext i1 @read_side2_failed_history(i8 zeroext 1)
		%130 = zext i1 %129 to i8
		store %130, %15
		%131 = load %15
		%132 = trunc i8 %131 to i1
		br %132, %133, %151
	133:
		%134 = call signext i8 @read_active_side_history(i8 zeroext 0)
		store %134, %12
		%135 = load %12
		%136 = sext i8 %135 to i32
		%137 = icmp eq %136 1
		br %137, %139, %138
	138:
		store 0, %1
		br %199
	139:
		%140 = call zeroext i1 @read_side1_failed_history(i8 zeroext 0)
		%141 = zext i1 %140 to i8
		store %141, %13
		%142 = load %13
		%143 = trunc i8 %142 to i1
		br %143, %150, %144
	144:
		%145 = load @side1_written
		%146 = sext i8 %145 to i32
		%147 = icmp eq %146 1
		br %147, %149, %148
	148:
		store 0, %1
		br %199
	149:
		br %150
	150:
		br %151
	151:
		br %152
	152:
		%153 = call signext i8 @read_active_side_history(i8 zeroext 2)
		store %153, %23
		%154 = load %23
		%155 = sext i8 %154 to i32
		%156 = icmp sgt %155 -2
		br %156, %157, %198
	157:
		%158 = call signext i8 @read_manual_selection_history(i8 zeroext 2)
		store %158, %16
		%159 = load %16
		%160 = icmp ne %159 0
		br %160, %197, %161
	161:
		%162 = call zeroext i1 @read_side1_failed_history(i8 zeroext 2)
		%163 = zext i1 %162 to i8
		store %163, %17
		%164 = call zeroext i1 @read_side1_failed_history(i8 zeroext 1)
		%165 = zext i1 %164 to i8
		store %165, %18
		%166 = load %17
		%167 = trunc i8 %166 to i1
		%168 = zext i1 %167 to i32
		%169 = load %18
		%170 = trunc i8 %169 to i1
		%171 = zext i1 %170 to i32
		%172 = icmp eq %168 %171
		br %172, %173, %196
	173:
		%174 = call zeroext i1 @read_side2_failed_history(i8 zeroext 2)
		%175 = zext i1 %174 to i8
		store %175, %19
		%176 = call zeroext i1 @read_side2_failed_history(i8 zeroext 1)
		%177 = zext i1 %176 to i8
		store %177, %20
		%178 = load %19
		%179 = trunc i8 %178 to i1
		%180 = zext i1 %179 to i32
		%181 = load %20
		%182 = trunc i8 %181 to i1
		%183 = zext i1 %182 to i32
		%184 = icmp eq %180 %183
		br %184, %185, %195
	185:
		%186 = call signext i8 @read_active_side_history(i8 zeroext 1)
		store %186, %21
		%187 = call signext i8 @read_active_side_history(i8 zeroext 0)
		store %187, %22
		%188 = load %21
		%189 = sext i8 %188 to i32
		%190 = load %22
		%191 = sext i8 %190 to i32
		%192 = icmp eq %189 %191
		br %192, %194, %193
	193:
		store 0, %1
		br %199
	194:
		br %195
	195:
		br %196
	196:
		br %197
	197:
		br %198
	198:
		store 1, %1
		br %199
	199:
		%200 = load %1
		ret %200

*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1150
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		br %4
	4:
		%5 = load %2
		%6 = trunc i8 %5 to i1
		%7 = xor i1 %6, 1
		br %7, %8, %9
	8:
		br %4
	9:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1160
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %2
		%4 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%5 = zext i1 %4 to i8
		store %5, @side1Failed
		%6 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%7 = zext i1 %6 to i8
		store %7, @side2Failed
		%8 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %8, @side1_written
		%9 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %9, @side2_written
		%10 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%11 = zext i1 %10 to i8
		store %11, @side1Failed_History_0
		%12 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%13 = zext i1 %12 to i8
		store %13, @side1Failed_History_1
		%14 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%15 = zext i1 %14 to i8
		store %15, @side1Failed_History_2
		%16 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%17 = zext i1 %16 to i8
		store %17, @side2Failed_History_0
		%18 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%19 = zext i1 %18 to i8
		store %19, @side2Failed_History_1
		%20 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%21 = zext i1 %20 to i8
		store %21, @side2Failed_History_2
		%22 = call signext i8 @__VERIFIER_nondet_int8_t()
		store %22, @active_side_History_0
		%23 = call signext i8 @__VERIFIER_nondet_int8_t()
		store %23, @active_side_History_1
		%24 = call signext i8 @__VERIFIER_nondet_int8_t()
		store %24, @active_side_History_2
		%25 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %25, @manual_selection_History_0
		%26 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %26, @manual_selection_History_1
		%27 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %27, @manual_selection_History_2
		%28 = call i32 @init()
		store %28, %3
		%29 = load %3
		%30 = icmp ne %29 0
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i1 zeroext %30)
		%31 = load @nomsg
		store %31, @cs1_old
		%32 = load @nomsg
		store %32, @cs1_new
		%33 = load @nomsg
		store %33, @cs2_old
		%34 = load @nomsg
		store %34, @cs2_new
		%35 = load @nomsg
		store %35, @s1s2_old
		%36 = load @nomsg
		store %36, @s1s2_new
		%37 = load @nomsg
		store %37, @s1s1_old
		%38 = load @nomsg
		store %38, @s1s1_new
		%39 = load @nomsg
		store %39, @s2s1_old
		%40 = load @nomsg
		store %40, @s2s1_new
		%41 = load @nomsg
		store %41, @s2s2_old
		%42 = load @nomsg
		store %42, @s2s2_new
		%43 = load @nomsg
		store %43, @s1p_old
		%44 = load @nomsg
		store %44, @s1p_new
		%45 = load @nomsg
		store %45, @s2p_old
		%46 = load @nomsg
		store %46, @s2p_new
		store 0, %3
		br %47
	47:
		%48 = load %3
		%49 = icmp slt %48 10
		br %49, %50, %72
	50:
		Unnamed Call-Instruction = call BasicVoidType @Console_task_each_pals_period()
		Unnamed Call-Instruction = call BasicVoidType @Side1_activestandby_task_each_pals_period()
		Unnamed Call-Instruction = call BasicVoidType @Side2_activestandby_task_each_pals_period()
		Unnamed Call-Instruction = call BasicVoidType @Pendulum_prism_task_each_pals_period()
		%51 = load @cs1_new
		store %51, @cs1_old
		%52 = load @nomsg
		store %52, @cs1_new
		%53 = load @cs2_new
		store %53, @cs2_old
		%54 = load @nomsg
		store %54, @cs2_new
		%55 = load @s1s2_new
		store %55, @s1s2_old
		%56 = load @nomsg
		store %56, @s1s2_new
		%57 = load @s1s1_new
		store %57, @s1s1_old
		%58 = load @nomsg
		store %58, @s1s1_new
		%59 = load @s2s1_new
		store %59, @s2s1_old
		%60 = load @nomsg
		store %60, @s2s1_new
		%61 = load @s2s2_new
		store %61, @s2s2_old
		%62 = load @nomsg
		store %62, @s2s2_new
		%63 = load @s1p_new
		store %63, @s1p_old
		%64 = load @nomsg
		store %64, @s1p_new
		%65 = load @s2p_new
		store %65, @s2p_old
		%66 = load @nomsg
		store %66, @s2p_new
		%67 = call i32 @check()
		store %67, %2
		%68 = load %2
		%69 = icmp ne %68 0
		Unnamed Call-Instruction = call BasicVoidType @assert(i1 zeroext %69)
		%70 = load %3
		%71 = add i32 %70, 1
		store %71, %3
		br %47
	72:
		%73 = load %1
		ret %73


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8)
Obligation:
SCC
----------------------------------------

(9)
Obligation:
SCC/hpcwork/ff862203/termcomp25/benchmarks/C98RY.c:320:22: warning: self-comparison always evaluates to false [-Wtautological-compare]
    s1s1_new = nomsg != nomsg && s1s1_new == nomsg ? nomsg : s1s1_new;
                     ^
/hpcwork/ff862203/termcomp25/benchmarks/C98RY.c:321:22: warning: self-comparison always evaluates to false [-Wtautological-compare]
    s1s2_new = nomsg != nomsg && s1s2_new == nomsg ? nomsg : s1s2_new;
                     ^
/hpcwork/ff862203/termcomp25/benchmarks/C98RY.c:322:21: warning: self-comparison always evaluates to false [-Wtautological-compare]
    s1p_new = nomsg != nomsg && s1p_new == nomsg ? nomsg : s1p_new;
                    ^
/hpcwork/ff862203/termcomp25/benchmarks/C98RY.c:377:22: warning: self-comparison always evaluates to false [-Wtautological-compare]
