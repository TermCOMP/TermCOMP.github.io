YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/mDH5u.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 212 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 19 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 1 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/mDH5u.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/mDH5u.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %3
		%8 = icmp ne %7 0
		br %8, %9, %18
	9:
		%10 = call i32 @__VERIFIER_nondet_int()
		store %10, %3
		%11 = load %2
		%12 = sub i32 %11, 1
		store %12, %2
		%13 = load %2
		%14 = icmp sge %13 0
		br %14, %15, %16
	15:
		store 1, %3
		br %17
	16:
		store 0, %3
		br %17
	17:
		br %6
	18:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_170(v78, v79, v80, v81, v82, 1, v85, v86, v87, v88, v89, v90, 0, 3, 4) -> f_171(v78, v79, v80, v81, v82, 1, v85, v86, v87, v88, v89, v90, 0, 3, 4) :|: 0 = 0
f_171(v78, v79, v80, v81, v82, 1, v85, v86, v87, v88, v89, v90, 0, 3, 4) -> f_172(v78, v79, v80, v81, v82, 1, v85, v86, v87, v88, v89, v90, 0, 3, 4) :|: TRUE
f_172(v78, v79, v80, v81, v82, 1, v85, v86, v87, v88, v89, v90, 0, 3, 4) -> f_173(v78, v79, v80, v81, v82, 1, v92, v86, v87, v88, v89, v90, 0, 3, 4) :|: TRUE
f_173(v78, v79, v80, v81, v82, 1, v92, v86, v87, v88, v89, v90, 0, 3, 4) -> f_174(v78, v79, v80, v81, v82, 1, v92, v86, v87, v88, v89, v90, 0, 3, 4) :|: TRUE
f_174(v78, v79, v80, v81, v82, 1, v92, v86, v87, v88, v89, v90, 0, 3, 4) -> f_175(v78, v79, v80, v81, v82, 1, v92, v87, v88, v89, v90, 0, 3, 4) :|: 0 = 0
f_175(v78, v79, v80, v81, v82, 1, v92, v87, v88, v89, v90, 0, 3, 4) -> f_176(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 4) :|: 1 + v94 = v87 && 0 <= 1 + v94
f_176(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 4) -> f_177(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 4) :|: TRUE
f_177(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 4) -> f_178(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 4) :|: 0 = 0
f_178(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 4) -> f_179(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 2, 4) :|: 0 <= v94 && 1 <= v87 && 2 <= v81
f_179(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 2, 4) -> f_181(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 2, 4) :|: 0 = 0
f_181(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 2, 4) -> f_183(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 2, 4) :|: TRUE
f_183(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 2, 4) -> f_185(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 2, 4) :|: TRUE
f_185(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 2, 4) -> f_187(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 2, 4) :|: TRUE
f_187(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 2, 4) -> f_189(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 2, 4) :|: TRUE
f_189(v78, v79, v80, v81, v82, 1, v92, v87, v94, v88, v89, v90, 0, 3, 2, 4) -> f_169(v78, v79, v80, v81, v82, 1, 1, v92, v87, v94, v88, v89, v90, 0, 3, 4) :|: TRUE
f_169(v78, v79, v80, v81, v82, v83, 1, v85, v86, v87, v88, v89, v90, 0, 3, 4) -> f_170(v78, v79, v80, v81, v82, 1, v85, v86, v87, v88, v89, v90, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_170(v78:0, v79:0, v80:0, v81:0, v82:0, 1, v85:0, v86:0, 1 + v94:0, v88:0, v89:0, v90:0, 0, 3, 4) -> f_170(v78:0, v79:0, v80:0, v81:0, v82:0, 1, v92:0, 1 + v94:0, v94:0, v88:0, v89:0, v90:0, 0, 3, 4) :|: v94:0 > -1 && v81:0 > 1
Filtered unneeded arguments:
   f_170(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_170(x4, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_170(v81:0, sum~cons_1~v94:0) -> f_170(v81:0, v94:0) :|: v94:0 > -1 && v81:0 > 1 && sum~cons_1~v94:0 = 1 + v94:0

----------------------------------------

(8)
Obligation:
Rules:
f_170(v81:0, sum~cons_1~v94:0) -> f_170(v81:0, v94:0) :|: v94:0 > -1 && v81:0 > 1 && sum~cons_1~v94:0 = 1 + v94:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_170(v81:0:0, sum~cons_1~v94:0:0) -> f_170(v81:0:0, v94:0:0) :|: v94:0:0 > -1 && v81:0:0 > 1 && sum~cons_1~v94:0:0 = 1 + v94:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_170 ] = f_170_2

The following rules are decreasing:
f_170(v81:0:0, sum~cons_1~v94:0:0) -> f_170(v81:0:0, v94:0:0) :|: v94:0:0 > -1 && v81:0:0 > 1 && sum~cons_1~v94:0:0 = 1 + v94:0:0

The following rules are bounded:
f_170(v81:0:0, sum~cons_1~v94:0:0) -> f_170(v81:0:0, v94:0:0) :|: v94:0:0 > -1 && v81:0:0 > 1 && sum~cons_1~v94:0:0 = 1 + v94:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
