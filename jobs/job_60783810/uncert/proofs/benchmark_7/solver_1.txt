YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/eivO0.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 43 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 735 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [SOUND, 192 ms]
(6) IntTRS
(7) IRSToKoat [EQUIVALENT, 0 ms]
(8) Koat Problem
(9) KoAT2 [EQUIVALENT, 22 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/eivO0.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/eivO0.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		%8 = alloca *i32, align 8
		%9 = alloca *i32, align 8
		%10 = alloca *i32, align 8
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %8)
		%11 = alloca i8, numElementsLit: 4, align 16
		%12 = bitcast *i8 %11 to *i32
		store %12, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %9)
		%13 = alloca i8, numElementsLit: 4, align 16
		%14 = bitcast *i8 %13 to *i32
		store %14, %9
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %10)
		%15 = alloca i8, numElementsLit: 4, align 16
		%16 = bitcast *i8 %15 to *i32
		store %16, %10
		%17 = load %5
		%18 = load %8
		store %17, %18
		%19 = load %6
		%20 = load %9
		store %19, %20
		%21 = load %7
		%22 = load %10
		store %21, %22
		%23 = load %9
		%24 = load %23
		%25 = icmp sle %24 0
		br %25, %26, %29
	26:
		%27 = load %10
		%28 = load %27
		store %28, %4
		br %53
	29:
		br %30
	30:
		%31 = load %8
		%32 = load %31
		%33 = load %10
		%34 = load %33
		%35 = icmp sge %32 %34
		br %35, %36, %50
	36:
		%37 = load %9
		%38 = load %37
		%39 = icmp sle %38 0
		br %39, %40, %43
	40:
		%41 = load %10
		%42 = load %41
		store %42, %4
		br %53
	43:
		%44 = load %10
		%45 = load %44
		%46 = load %9
		%47 = load %46
		%48 = add i32 %45, %47
		%49 = load %10
		store %48, %49
		br %30
	50:
		%51 = load %10
		%52 = load %51
		store %52, %4
		br %53
	53:
		%54 = load %4
		ret %54

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 75
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @test_fun(i32 %2, i32 %3, i32 %4)
		ret %5


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 113 rulesP rules:
f_239 -> f_240(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_240(v1, v2, 3, 1, 4) -> f_241(v1, v2, 0, 3, 1, 4) :|: TRUE
f_241(v1, v2, 0, 3, 1, 4) -> f_242(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_242(v1, v3, v2, 0, 3, 1, 4) -> f_243(v1, v3, v4, v2, 0, 3, 1, 4) :|: TRUE
f_243(v1, v3, v4, v2, 0, 3, 1, 4) -> f_244(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_244(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_245(v3, v4, v5, v1, v2, 0, 3, 1, 4) :|: 0 = 0
f_245(v3, v4, v5, v1, v2, 0, 3, 1, 4) -> f_246(v3, v4, v5, v6, v1, v2, v7, 0, 3, 1, 4) :|: 1 <= v6 && v7 = 3 + v6 && 4 <= v7
f_246(v3, v4, v5, v6, v1, v2, v7, 0, 3, 1, 4) -> f_247(v3, v4, v5, v6, v8, v1, v2, v7, v9, 0, 3, 1, 4) :|: 1 <= v8 && v9 = 3 + v8 && 4 <= v9
f_247(v3, v4, v5, v6, v8, v1, v2, v7, v9, 0, 3, 1, 4) -> f_248(v3, v4, v5, v6, v8, v10, v1, v2, v7, v9, v11, 0, 3, 1, 4) :|: 1 <= v10 && v11 = 3 + v10 && 4 <= v11
f_248(v3, v4, v5, v6, v8, v10, v1, v2, v7, v9, v11, 0, 3, 1, 4) -> f_249(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) :|: 1 <= v12 && v13 = 3 + v12 && 4 <= v13
f_249(v3, v4, v5, v6, v8, v10, v12, v1, v2, v7, v9, v11, v13, 0, 3, 1, 4) -> f_250(v3, v4, v5, v6, v8, v10, v12, v14, v1, v2, v7, v9, v11, v13, v15, 0, 3, 7, 1, 4, 8) :|: 1 <= v14 && v15 = 7 + v14 && 8 <= v15
f_250(v3, v4, v5, v6, v8, v10, v12, v14, v1, v2, v7, v9, v11, v13, v15, 0, 3, 7, 1, 4, 8) -> f_251(v3, v4, v5, v6, v8, v10, v12, v14, v16, v1, v2, v7, v9, v11, v13, v15, v17, 0, 3, 7, 1, 4, 8) :|: 1 <= v16 && v17 = 7 + v16 && 8 <= v17
f_251(v3, v4, v5, v6, v8, v10, v12, v14, v16, v1, v2, v7, v9, v11, v13, v15, v17, 0, 3, 7, 1, 4, 8) -> f_252(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) :|: 1 <= v18 && v19 = 7 + v18 && 8 <= v19
f_252(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) -> f_253(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) :|: TRUE
f_253(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) -> f_254(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) :|: TRUE
f_254(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) -> f_255(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) :|: TRUE
f_255(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) -> f_256(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) :|: TRUE
f_256(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) -> f_257(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) :|: TRUE
f_257(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) -> f_258(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) :|: TRUE
f_258(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) -> f_259(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) :|: TRUE
f_259(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v1, v2, v7, v9, v11, v13, v15, v17, v19, 0, 3, 7, 1, 4, 8) -> f_260(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, 0, 3, 7, 1, 4, 8) :|: 1 <= v23 && v24 = 3 + v23 && 4 <= v24
f_260(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, 0, 3, 7, 1, 4, 8) -> f_261(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_261(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, 0, 3, 7, 1, 4, 8) -> f_262(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, 0, 3, 7, 1, 4, 8) :|: TRUE
f_262(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, 0, 3, 7, 1, 4, 8) -> f_263(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, 0, 3, 7, 1, 4, 8) :|: TRUE
f_263(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, 0, 3, 7, 1, 4, 8) -> f_264(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, 0, 3, 7, 1, 4, 8) :|: 1 <= v26 && v27 = 3 + v26 && 4 <= v27
f_264(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, 0, 3, 7, 1, 4, 8) -> f_265(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_265(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, 0, 3, 7, 1, 4, 8) -> f_266(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, 0, 3, 7, 1, 4, 8) :|: TRUE
f_266(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, 0, 3, 7, 1, 4, 8) -> f_267(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, 0, 3, 7, 1, 4, 8) :|: TRUE
f_267(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, 0, 3, 7, 1, 4, 8) -> f_268(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: 1 <= v29 && v30 = 3 + v29 && 4 <= v30
f_268(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_269(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_269(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_270(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: TRUE
f_270(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_271(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_271(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_272(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_272(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_273(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: TRUE
f_273(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_274(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_274(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_275(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_275(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_276(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: TRUE
f_276(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_277(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_277(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_278(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_278(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_279(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: TRUE
f_279(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_280(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_280(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_281(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_281(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_282(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: v4 <= 0
f_281(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_283(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) :|: 0 < v4
f_282(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_284(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 4, 8) :|: 0 = 0
f_283(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 1, 4, 8) -> f_285(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: 0 = 0
f_284(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 4, 8) -> f_286(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 4, 8) :|: TRUE
f_285(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_287(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: TRUE
f_286(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 4, 8) -> f_288(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 4, 8) :|: 0 = 0
f_287(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_289(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: TRUE
f_288(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 4, 8) -> f_290(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 4, 8) :|: 0 = 0
f_289(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_291(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: 0 = 0
f_290(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 4, 8) -> f_292(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 4, 8) :|: TRUE
f_291(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_293(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: 0 = 0
f_292(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 4, 8) -> f_294(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 4, 8) :|: TRUE
f_293(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_295(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: 0 = 0
f_294(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 4, 8) -> f_296(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 4, 8) :|: 0 = 0
f_295(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_297(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: 0 = 0
f_296(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 0, 3, 7, 4, 8) -> f_298(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: 0 = 0
f_297(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_299(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: v5 <= v3
f_297(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_300(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: v3 < v5
f_299(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_301(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) :|: 0 = 0
f_300(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_302(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: 0 = 0
f_301(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) -> f_303(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) :|: TRUE
f_302(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_304(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: TRUE
f_303(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) -> f_305(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) :|: 0 = 0
f_304(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_306(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: 0 = 0
f_305(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) -> f_307(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) :|: 0 = 0
f_306(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_308(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: 0 = 0
f_307(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) -> f_309(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) :|: 0 = 0
f_308(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_310(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: TRUE
f_309(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) -> f_311(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) :|: TRUE
f_310(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_312(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: TRUE
f_311(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) -> f_313(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) :|: 0 = 0
f_312(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_314(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) :|: 0 = 0
f_313(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) -> f_315(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) :|: 0 = 0
f_314(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 1, 4, 8) -> f_316(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: 0 = 0
f_315(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) -> f_317(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) :|: 0 = 0
f_317(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) -> f_318(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) :|: 0 = 0
f_318(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) -> f_319(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v37, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) :|: v37 = v5 + v4
f_319(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v37, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) -> f_320(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v37, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) :|: 0 = 0
f_320(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v37, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) -> f_321(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v37, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) :|: TRUE
f_321(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v37, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) -> f_322(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v37, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) :|: TRUE
f_322(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, 1, v37, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) -> f_351(v3, v4, v5, v6, v8, v10, v12, v14, v16, v18, v23, v26, v29, 0, v5, 1, v37, v1, v2, v7, v9, v11, v13, v15, v17, v19, v24, v27, v30, 3, 7, 4, 8) :|: TRUE
f_351(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v71, 1, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_352(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v71, 1, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: 0 = 0
f_352(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v71, 1, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_353(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v71, 1, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: 0 = 0
f_353(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v71, 1, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_354(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v71, 1, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: 0 = 0
f_354(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v71, 1, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_355(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: 0 = 0
f_355(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_356(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: v73 <= v57
f_355(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_357(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: v57 < v73
f_356(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_358(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: 0 = 0
f_357(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_359(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 1, 4, 8) :|: 0 = 0
f_358(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_360(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: TRUE
f_359(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 1, 4, 8) -> f_361(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 1, 4, 8) :|: TRUE
f_360(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_362(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: 0 = 0
f_361(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 1, 4, 8) -> f_363(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 1, 4, 8) :|: 0 = 0
f_362(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_364(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: 0 = 0
f_363(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 1, 4, 8) -> f_365(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 1, 4, 8) :|: 0 = 0
f_364(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_366(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: 0 = 0
f_365(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 1, 4, 8) -> f_367(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 1, 4, 8) :|: TRUE
f_366(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_368(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: TRUE
f_367(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 1, 4, 8) -> f_369(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 1, 4, 8) :|: TRUE
f_368(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_370(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: 0 = 0
f_369(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 1, 4, 8) -> f_371(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 1, 4, 8) :|: 0 = 0
f_370(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_372(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: 0 = 0
f_371(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, v71, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 1, 4, 8) -> f_373(v74, v57, v58, v59, v73, v75, 0, 3, 1, 4) :|: 0 = 0
f_372(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_374(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: 0 = 0
f_374(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_375(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: 0 = 0
f_375(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_376(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v102, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: v102 = v73 + v58
f_376(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v102, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_377(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v102, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: 0 = 0
f_377(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v102, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_378(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v102, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: TRUE
f_378(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v102, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_379(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v102, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: TRUE
f_379(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v102, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) -> f_351(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, v73, 1, v102, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, 3, 7, 4, 8) :|: TRUE
Combined rules. Obtained 5 rulesP rules:
f_239 -> f_298(v1:0, v3:0, v4:0, v5:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v6:0 > 0 && v8:0 > 0 && v10:0 > 0 && v12:0 > 0 && v14:0 > 0 && v16:0 > 0 && v18:0 > 0 && v23:0 > 0 && v26:0 > 0 && v29:0 > 0 && v4:0 < 1
f_355(v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, v68:0, v69:0, 0, v73:0, 1, v71:0, v74:0, v75:0, v76:0, v77:0, v78:0, v79:0, v80:0, v81:0, v82:0, v83:0, v84:0, v85:0, 3, 7, 4, 8) -> f_373(v74:0, v57:0, v58:0, v59:0, v73:0, v75:0, 0, 3, 1, 4) :|: v73:0 > v57:0
f_239 -> f_316(v1:0, v3:0, v4:0, v5:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v6:0 > 0 && v8:0 > 0 && v10:0 > 0 && v12:0 > 0 && v14:0 > 0 && v16:0 > 0 && v18:0 > 0 && v23:0 > 0 && v26:0 > 0 && v29:0 > 0 && v5:0 > v3:0 && v4:0 > 0
f_355(v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, v68:0, v69:0, 0, v73:0, 1, v71:0, v74:0, v75:0, v76:0, v77:0, v78:0, v79:0, v80:0, v81:0, v82:0, v83:0, v84:0, v85:0, 3, 7, 4, 8) -> f_355(v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, v68:0, v69:0, 0, v73:0 + v58:0, 1, v73:0, v74:0, v75:0, v76:0, v77:0, v78:0, v79:0, v80:0, v81:0, v82:0, v83:0, v84:0, v85:0, 3, 7, 4, 8) :|: v73:0 <= v57:0
f_239 -> f_355(v3:0, v4:0, v5:0, v6:0, v8:0, v10:0, v12:0, v14:0, v16:0, v18:0, v23:0, v26:0, v29:0, 0, v5:0 + v4:0, 1, v5:0, v1:0, 3 + v1:0, 3 + v6:0, 3 + v8:0, 3 + v10:0, 3 + v12:0, 7 + v14:0, 7 + v16:0, 7 + v18:0, 3 + v23:0, 3 + v26:0, 3 + v29:0, 3, 7, 4, 8) :|: v1:0 > 0 && v6:0 > 0 && v8:0 > 0 && v10:0 > 0 && v12:0 > 0 && v14:0 > 0 && v16:0 > 0 && v18:0 > 0 && v23:0 > 0 && v26:0 > 0 && v29:0 > 0 && v5:0 <= v3:0 && v4:0 > 0
Filtered unneeded arguments:
   f_355(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) -> f_355(x1, x2, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_239 -> f_298(v1:0, v3:0, v4:0, v5:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v4:0 < 1
f_355(v57:0, v58:0, v73:0) -> f_373(v74:0, v57:0, v58:0, v59:0, v73:0, v75:0, 0, 3, 1, 4) :|: v73:0 > v57:0
f_239 -> f_316(v1:0, v3:0, v4:0, v5:0, 3 + v1:0, 0, 3, 1, 4) :|: v5:0 > v3:0 && v4:0 > 0 && v1:0 > 0
f_355(v57:0, v58:0, v73:0) -> f_355(v57:0, v58:0, v73:0 + v58:0) :|: v73:0 <= v57:0
f_239 -> f_355(v3:0, v4:0, v5:0 + v4:0) :|: v5:0 <= v3:0 && v4:0 > 0

----------------------------------------

(6)
Obligation:
Rules:
f_239 -> f_298(v1:0, v3:0, v4:0, v5:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v4:0 < 1
f_355(v57:0, v58:0, v73:0) -> f_373(v74:0, v57:0, v58:0, v59:0, v73:0, v75:0, 0, 3, 1, 4) :|: v73:0 > v57:0
f_239 -> f_316(x, x1, x2, x3, 3 + x, 0, 3, 1, 4) :|: x3 > x1 && x2 > 0 && x > 0
f_355(x4, x5, x6) -> f_355(x4, x5, x6 + x5) :|: x6 <= x4
f_239 -> f_355(x7, x8, x9 + x8) :|: x9 <= x7 && x8 > 0
Start term: f_239

----------------------------------------

(7) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(8)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_239))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x x40 x41 x39 x35 x36 x37 x38 x31 x32 x'' x33 x34 k18 k19 x30 k14 k15 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x7 x27 x20 x21 x22 x23 x1 k7 k8 k5 k6 k9 x' k0 k3 k4 k1 k2 x17 x18 x19 x13 x57 x14 x15 x16 x53 x10 x54 x11 x55 x12 x56 x50 x51 x52)
(RULES
  f_239(x, x', x'', x1, x2, x3, x4, x5, x6, x7) -> f_355(k17, k14, k15 + k14, x8, x9, x10, x11, x12, x13, x14) :|: k15 <= k17 && k14 > 0
  f_239(x47, x48, x49, x50, x51, x52, x53, x54, x55, x56) -> f_298(k5, k8, k10, k12, 3 + k5, 0, 3, 1, 4, x57) :|: k5 > 0 && k10 < 1
  f_355(k7, k9, k16, x15, x16, x17, x18, x19, x20, x21) -> f_355(k7, k9, k16 + k9, x22, x23, x24, x25, x26, x27, x28) :|: k16 <= k7
  f_355(k4, k6, k1, x29, x30, x31, x32, x33, x34, x35) -> f_373(k0, k4, k6, k3, k1, k2, 0, 3, 1, 4) :|: k1 > k4
  f_239(x36, x37, x38, x39, x40, x41, x42, x43, x44, x45) -> f_316(k18, k19, k11, k13, 3 + k18, 0, 3, 1, 4, x46) :|: k13 > k19 && k11 > 0 && k18 > 0
)

----------------------------------------

(9) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_2342866268069890660.koat 

KoAT2's output was:

YES

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
