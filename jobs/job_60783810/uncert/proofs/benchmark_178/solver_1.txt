YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/XmiMn.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 811 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 41 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/XmiMn.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/XmiMn.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "addition" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %5
		%7 = icmp eq %6 0
		br %7, %8, %10
	8:
		%9 = load %4
		store %9, %3
		br %28
	10:
		%11 = load %5
		%12 = icmp sgt %11 0
		br %12, %13, %19
	13:
		%14 = load %4
		%15 = add i32 %14, 1
		%16 = load %5
		%17 = sub i32 %16, 1
		%18 = call i32 @addition(i32 %15, i32 %17)
		store %18, %3
		br %28
	19:
		%20 = load %5
		%21 = icmp slt %20 0
		br %21, %22, %28
	22:
		%23 = load %4
		%24 = sub i32 %23, 1
		%25 = load %5
		%26 = add i32 %25, 1
		%27 = call i32 @addition(i32 %24, i32 %26)
		store %27, %3
		br %28
	28:
		%29 = load %3
		ret %29

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 46
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = load %2
		%7 = icmp sle %6 0
		br %7, %8, %9
	8:
		store 0, %1
		br %18
	9:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%10 = call i32 @__VERIFIER_nondet_int()
		store %10, %3
		%11 = load %3
		%12 = icmp sle %11 0
		br %12, %13, %14
	13:
		store 0, %1
		br %18
	14:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%15 = load %2
		%16 = load %3
		%17 = call i32 @addition(i32 %15, i32 %16)
		store %17, %4
		br %18
	18:
		%19 = load %1
		ret %19


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_283(v63, v64, v76, v65, v66, v67, v68, v69, v70, v71, v72, v77, 0, v74, v75, 3, 1, 4) -> f_284(v63, v64, v76, v78, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, 0, v74, v75, 3, 1, 4) :|: 1 <= v78 && v79 = 3 + v78 && 4 <= v79
f_284(v63, v64, v76, v78, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, 0, v74, v75, 3, 1, 4) -> f_285(v63, v64, v76, v78, v80, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, 0, v74, v75, 3, 1, 4) :|: 1 <= v80 && v81 = 3 + v80 && 4 <= v81
f_285(v63, v64, v76, v78, v80, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, 0, v74, v75, 3, 1, 4) -> f_286(v63, v64, v76, v78, v80, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, 0, v74, v75, 3, 1, 4) :|: TRUE
f_286(v63, v64, v76, v78, v80, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, 0, v74, v75, 3, 1, 4) -> f_287(v63, v64, v76, v78, v80, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, 0, v74, v75, 3, 1, 4) :|: TRUE
f_287(v63, v64, v76, v78, v80, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, 0, v74, v75, 3, 1, 4) -> f_288(v63, v64, v76, v78, v80, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, 0, v74, v75, 3, 1, 4) :|: TRUE
f_288(v63, v64, v76, v78, v80, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, 0, v74, v75, 3, 1, 4) -> f_289(v63, v64, v76, v78, v80, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, 0, v74, v75, 3, 1, 4) :|: TRUE
f_289(v63, v64, v76, v78, v80, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, 0, v74, v75, 3, 1, 4) -> f_290(v63, v64, v76, v78, v80, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, 0, v74, v75, 3, 1, 4) :|: 0 = 0
f_290(v63, v64, v76, v78, v80, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, 0, v74, v75, 3, 1, 4) -> f_292(v63, v64, v76, v78, v80, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, 0, v74, v75, 3, 1, 4) :|: v64 != 0
f_292(v63, v64, v76, v78, v80, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, 0, v74, v75, 3, 1, 4) -> f_294(v63, v64, v76, v78, v80, 0, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 1, 4) :|: 0 = 0
f_294(v63, v64, v76, v78, v80, 0, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 1, 4) -> f_296(v63, v64, v76, v78, v80, 0, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 1, 4) :|: TRUE
f_296(v63, v64, v76, v78, v80, 0, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 1, 4) -> f_298(v63, v64, v76, v78, v80, 0, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 1, 4) :|: 0 = 0
f_298(v63, v64, v76, v78, v80, 0, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 1, 4) -> f_300(v63, v64, v76, v78, v80, 0, 1, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 4) :|: 0 = 0
f_300(v63, v64, v76, v78, v80, 0, 1, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 4) -> f_302(v63, v64, v76, v78, v80, 0, 1, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 4) :|: TRUE
f_302(v63, v64, v76, v78, v80, 0, 1, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 4) -> f_304(v63, v64, v76, v78, v80, 0, 1, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 4) :|: 0 = 0
f_304(v63, v64, v76, v78, v80, 0, 1, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 4) -> f_306(v63, v64, v76, v78, v80, 0, 1, v102, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 4, 2) :|: v102 = 1 + v63 && 2 <= v102
f_306(v63, v64, v76, v78, v80, 0, 1, v102, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 4, 2) -> f_307(v63, v64, v76, v78, v80, 0, 1, v102, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 4, 2) :|: 0 = 0
f_307(v63, v64, v76, v78, v80, 0, 1, v102, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 4, 2) -> f_308(v63, v64, v76, v78, v80, 0, 1, v102, v103, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 4, 2) :|: 1 + v103 = v64 && 0 <= v103
f_308(v63, v64, v76, v78, v80, 0, 1, v102, v103, v65, v66, v67, v68, v69, v70, v71, v72, v77, v79, v81, v74, v75, 3, 4, 2) -> f_309(v102, v103, v65, v66, v67, v68, v69, v70, v71, v72, v76, v77, v78, v79, v80, v81, 0, v74, v75, v63, v64, 1, 3, 4, 2) :|: 0 = 0
f_309(v102, v103, v65, v66, v67, v68, v69, v70, v71, v72, v76, v77, v78, v79, v80, v81, 0, v74, v75, v63, v64, 1, 3, 4, 2) -> f_310(v102, v103, v65, v66, v67, v68, v69, v70, v71, v72, v76, v77, v78, v79, v80, v81, 0, v74, v75, v63, v64, 3, 1, 4, 2) :|: TRUE
f_310(v102, v103, v65, v66, v67, v68, v69, v70, v71, v72, v76, v77, v78, v79, v80, v81, 0, v74, v75, v63, v64, 3, 1, 4, 2) -> f_282(v102, v103, v65, v66, v67, v68, v69, v70, v71, v72, 0, v74, v75, 3, 1, 4) :|: TRUE
f_282(v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, 0, v74, v75, 3, 1, 4) -> f_283(v63, v64, v76, v65, v66, v67, v68, v69, v70, v71, v72, v77, 0, v74, v75, 3, 1, 4) :|: 1 <= v76 && v77 = 3 + v76 && 4 <= v77
Combined rules. Obtained 1 rulesP rules:
f_283(v63:0, 1 + v103:0, v76:0, v65:0, v66:0, v67:0, v68:0, v69:0, v70:0, v71:0, v72:0, v77:0, 0, v74:0, v75:0, 3, 1, 4) -> f_283(1 + v63:0, v103:0, v76:1, v65:0, v66:0, v67:0, v68:0, v69:0, v70:0, v71:0, v72:0, 3 + v76:1, 0, v74:0, v75:0, 3, 1, 4) :|: v80:0 > 0 && v78:0 > 0 && v103:0 > -1 && v63:0 > 0 && v76:1 > 0
Filtered unneeded arguments:
   f_283(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_283(x1, x2)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_283(v63:0, sum~cons_1~v103:0) -> f_283(1 + v63:0, v103:0) :|: v103:0 > -1 && v63:0 > 0 && sum~cons_1~v103:0 = 1 + v103:0

----------------------------------------

(8)
Obligation:
Rules:
f_283(v63:0, sum~cons_1~v103:0) -> f_283(1 + v63:0, v103:0) :|: v103:0 > -1 && v63:0 > 0 && sum~cons_1~v103:0 = 1 + v103:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_283(v63:0:0, sum~cons_1~v103:0:0) -> f_283(1 + v63:0:0, v103:0:0) :|: v103:0:0 > -1 && v63:0:0 > 0 && sum~cons_1~v103:0:0 = 1 + v103:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_283(x, x1)] = x1

The following rules are decreasing:
f_283(v63:0:0, sum~cons_1~v103:0:0) -> f_283(1 + v63:0:0, v103:0:0) :|: v103:0:0 > -1 && v63:0:0 > 0 && sum~cons_1~v103:0:0 = 1 + v103:0:0
The following rules are bounded:
f_283(v63:0:0, sum~cons_1~v103:0:0) -> f_283(1 + v63:0:0, v103:0:0) :|: v103:0:0 > -1 && v63:0:0 > 0 && sum~cons_1~v103:0:0 = 1 + v103:0:0

----------------------------------------

(12)
YES
/hpcwork/ff862203/termcomp25/benchmarks/XmiMn.c:23:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]
}
^
1 warning generated.

Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
