YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/gZfQP.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1285 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 34 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 28 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 14 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 29 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (27) YES
    (28) LLVM Symbolic Execution SCC
        (29) SCC2IRS [SOUND, 27 ms]
        (30) IntTRS
        (31) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (32) IntTRS
        (33) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (34) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/gZfQP.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/gZfQP.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		store 0, %4
		br %7
	7:
		%8 = load %2
		%9 = icmp sgt %8 0
		br %9, %10, %13
	10:
		%11 = load %3
		%12 = icmp sgt %11 0
		br %13
	13:
		%14 = phi [0, %7], [%12, %10]
		br %14, %15, %20
	15:
		%16 = load %2
		%17 = sub i32 %16, 1
		store %17, %2
		%18 = load %3
		%19 = sub i32 %18, 1
		store %19, %3
		br %7
	20:
		br %21
	21:
		%22 = load %2
		%23 = icmp sgt %22 0
		br %23, %24, %43
	24:
		%25 = load %3
		%26 = add i32 %25, 1
		store %26, %3
		%27 = load %4
		%28 = add i32 %27, 1
		store %28, %4
		br %29
	29:
		%30 = load %2
		%31 = icmp sgt %30 0
		br %31, %32, %35
	32:
		%33 = load %3
		%34 = icmp sgt %33 0
		br %35
	35:
		%36 = phi [0, %29], [%34, %32]
		br %36, %37, %42
	37:
		%38 = load %2
		%39 = sub i32 %38, 1
		store %39, %2
		%40 = load %3
		%41 = sub i32 %40, 1
		store %41, %3
		br %29
	42:
		br %21
	43:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 4 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 34 rulesP rules:
f_916(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_917(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 < v6102 && 2 <= v6099 && 3 <= v6098 && 2 <= v6095 && 3 <= v6093
f_917(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_919(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_919(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_921(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) :|: TRUE
f_921(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_923(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_923(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_925(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_925(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_927(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_927(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_929(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) :|: TRUE
f_929(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_931(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) :|: TRUE
f_931(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_933(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6100, v6101, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_933(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6100, v6101, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_934(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6100, v6101, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_934(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6100, v6101, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_935(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6100, v6101, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: TRUE
f_935(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6100, v6101, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_936(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6100, v6101, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_936(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6100, v6101, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_937(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6100, v6101, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_937(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6100, v6101, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_938(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6100, v6101, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: TRUE
f_938(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6100, v6101, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_939(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_939(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_940(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: v6383 = 1 + v6101 && 2 <= v6383
f_940(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_941(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: TRUE
f_941(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_942(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: TRUE
f_942(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_943(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_943(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_944(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_944(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_945(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: TRUE
f_945(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_946(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_946(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_947(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_947(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_948(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_948(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_949(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) :|: TRUE
f_949(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6099, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_950(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_950(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_951(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6661, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 1 + v6661 = v6102 && 0 <= v6661
f_951(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6661, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_952(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6661, v6103, v6104, v6105, v6106, 3, 2, 4) :|: TRUE
f_952(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6661, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_953(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6661, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_953(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6661, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_954(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6661, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
f_954(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6661, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_955(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6661, v6103, v6104, v6105, v6106, 3, 2, 4) :|: TRUE
f_955(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6661, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_956(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6661, v6103, v6104, v6105, v6106, 3, 2, 4) :|: TRUE
f_956(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6661, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_915(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6102, v6101, v6383, v6661, v6103, v6104, v6105, v6106, 3, 2, 4) :|: TRUE
f_915(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) -> f_916(v6089, v6090, v6091, v6092, v6093, v6094, v6095, 1, 0, v6098, v6099, v6100, v6101, v6102, v6103, v6104, v6105, v6106, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_916(v6089:0, v6090:0, v6091:0, v6092:0, v6093:0, v6094:0, v6095:0, 1, 0, v6098:0, v6099:0, v6100:0, v6101:0, 1 + v6661:0, v6103:0, v6104:0, v6105:0, v6106:0, 3, 2, 4) -> f_916(v6089:0, v6090:0, v6091:0, v6092:0, v6093:0, v6094:0, v6095:0, 1, 0, v6098:0, 1 + v6661:0, v6101:0, 1 + v6101:0, v6661:0, v6103:0, v6104:0, v6105:0, v6106:0, 3, 2, 4) :|: v6099:0 > 1 && v6661:0 > -1 && v6098:0 > 2 && v6095:0 > 1 && v6093:0 > 2 && v6101:0 > 0
Filtered unneeded arguments:
   f_916(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_916(x5, x7, x10, x11, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_916(v6093:0, v6095:0, v6098:0, v6099:0, v6101:0, sum~cons_1~v6661:0) -> f_916(v6093:0, v6095:0, v6098:0, 1 + v6661:0, 1 + v6101:0, v6661:0) :|: v6661:0 > -1 && v6099:0 > 1 && v6098:0 > 2 && v6095:0 > 1 && v6101:0 > 0 && v6093:0 > 2 && sum~cons_1~v6661:0 = 1 + v6661:0

----------------------------------------

(9)
Obligation:
Rules:
f_916(v6093:0, v6095:0, v6098:0, v6099:0, v6101:0, sum~cons_1~v6661:0) -> f_916(v6093:0, v6095:0, v6098:0, 1 + v6661:0, 1 + v6101:0, v6661:0) :|: v6661:0 > -1 && v6099:0 > 1 && v6098:0 > 2 && v6095:0 > 1 && v6101:0 > 0 && v6093:0 > 2 && sum~cons_1~v6661:0 = 1 + v6661:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_916(v6093:0:0, v6095:0:0, v6098:0:0, v6099:0:0, v6101:0:0, sum~cons_1~v6661:0:0) -> f_916(v6093:0:0, v6095:0:0, v6098:0:0, 1 + v6661:0:0, 1 + v6101:0:0, v6661:0:0) :|: v6101:0:0 > 0 && v6093:0:0 > 2 && v6095:0:0 > 1 && v6098:0:0 > 2 && v6099:0:0 > 1 && v6661:0:0 > -1 && sum~cons_1~v6661:0:0 = 1 + v6661:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_916 ] = f_916_6

The following rules are decreasing:
f_916(v6093:0:0, v6095:0:0, v6098:0:0, v6099:0:0, v6101:0:0, sum~cons_1~v6661:0:0) -> f_916(v6093:0:0, v6095:0:0, v6098:0:0, 1 + v6661:0:0, 1 + v6101:0:0, v6661:0:0) :|: v6101:0:0 > 0 && v6093:0:0 > 2 && v6095:0:0 > 1 && v6098:0:0 > 2 && v6099:0:0 > 1 && v6661:0:0 > -1 && sum~cons_1~v6661:0:0 = 1 + v6661:0:0

The following rules are bounded:
f_916(v6093:0:0, v6095:0:0, v6098:0:0, v6099:0:0, v6101:0:0, sum~cons_1~v6661:0:0) -> f_916(v6093:0:0, v6095:0:0, v6098:0:0, 1 + v6661:0:0, 1 + v6101:0:0, v6661:0:0) :|: v6101:0:0 > 0 && v6093:0:0 > 2 && v6095:0:0 > 1 && v6098:0:0 > 2 && v6099:0:0 > 1 && v6661:0:0 > -1 && sum~cons_1~v6661:0:0 = 1 + v6661:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 34 rulesP rules:
f_752(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 4) -> f_755(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 < v3655 && 2 <= v3652 && 2 <= v3648
f_755(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_759(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_759(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_763(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) :|: TRUE
f_763(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_767(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_767(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_771(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_771(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_775(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_775(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_779(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) :|: TRUE
f_779(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_782(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) :|: TRUE
f_782(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_785(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3653, v3654, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_785(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3653, v3654, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_787(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3653, v3654, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_787(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3653, v3654, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_789(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3653, v3654, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: TRUE
f_789(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3653, v3654, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_791(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3653, v3654, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_791(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3653, v3654, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_793(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3653, v3654, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_793(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3653, v3654, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_795(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3653, v3654, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: TRUE
f_795(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3653, v3654, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_797(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_797(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_799(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: v4258 = 1 + v3654 && 2 <= v4258
f_799(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_801(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: TRUE
f_801(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_803(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: TRUE
f_803(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_805(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_805(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_807(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_807(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_809(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: TRUE
f_809(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_811(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_811(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_813(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_813(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_815(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_815(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_817(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) :|: TRUE
f_817(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3652, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_819(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_819(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_821(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v4722, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 1 + v4722 = v3655 && 0 <= v4722
f_821(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v4722, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_823(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v4722, v3656, v3657, v3658, v3659, 3, 2, 4) :|: TRUE
f_823(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v4722, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_825(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v4722, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_825(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v4722, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_827(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v4722, v3656, v3657, v3658, v3659, 3, 2, 4) :|: 0 = 0
f_827(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v4722, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_830(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v4722, v3656, v3657, v3658, v3659, 3, 2, 4) :|: TRUE
f_830(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v4722, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_832(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v4722, v3656, v3657, v3658, v3659, 3, 2, 4) :|: TRUE
f_832(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v4722, v3656, v3657, v3658, v3659, 3, 2, 4) -> f_749(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3655, v3654, v4258, v4722, v3656, v3657, v3658, v3659, 3, 4) :|: TRUE
f_749(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 4) -> f_752(v3644, v3645, v3646, v3647, v3648, v3649, 1, 0, v3652, v3653, v3654, v3655, v3656, v3657, v3658, v3659, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_752(v3644:0, v3645:0, v3646:0, v3647:0, v3648:0, v3649:0, 1, 0, v3652:0, v3653:0, v3654:0, 1 + v4722:0, v3656:0, v3657:0, v3658:0, v3659:0, 3, 4) -> f_752(v3644:0, v3645:0, v3646:0, v3647:0, v3648:0, v3649:0, 1, 0, 1 + v4722:0, v3654:0, 1 + v3654:0, v4722:0, v3656:0, v3657:0, v3658:0, v3659:0, 3, 4) :|: v3652:0 > 1 && v4722:0 > -1 && v3648:0 > 1 && v3654:0 > 0
Filtered unneeded arguments:
   f_752(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_752(x5, x9, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_752(v3648:0, v3652:0, v3654:0, sum~cons_1~v4722:0) -> f_752(v3648:0, 1 + v4722:0, 1 + v3654:0, v4722:0) :|: v4722:0 > -1 && v3652:0 > 1 && v3654:0 > 0 && v3648:0 > 1 && sum~cons_1~v4722:0 = 1 + v4722:0

----------------------------------------

(16)
Obligation:
Rules:
f_752(v3648:0, v3652:0, v3654:0, sum~cons_1~v4722:0) -> f_752(v3648:0, 1 + v4722:0, 1 + v3654:0, v4722:0) :|: v4722:0 > -1 && v3652:0 > 1 && v3654:0 > 0 && v3648:0 > 1 && sum~cons_1~v4722:0 = 1 + v4722:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_752(v3648:0:0, v3652:0:0, v3654:0:0, sum~cons_1~v4722:0:0) -> f_752(v3648:0:0, 1 + v4722:0:0, 1 + v3654:0:0, v4722:0:0) :|: v3654:0:0 > 0 && v3648:0:0 > 1 && v3652:0:0 > 1 && v4722:0:0 > -1 && sum~cons_1~v4722:0:0 = 1 + v4722:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_752 ] = f_752_4

The following rules are decreasing:
f_752(v3648:0:0, v3652:0:0, v3654:0:0, sum~cons_1~v4722:0:0) -> f_752(v3648:0:0, 1 + v4722:0:0, 1 + v3654:0:0, v4722:0:0) :|: v3654:0:0 > 0 && v3648:0:0 > 1 && v3652:0:0 > 1 && v4722:0:0 > -1 && sum~cons_1~v4722:0:0 = 1 + v4722:0:0

The following rules are bounded:
f_752(v3648:0:0, v3652:0:0, v3654:0:0, sum~cons_1~v4722:0:0) -> f_752(v3648:0:0, 1 + v4722:0:0, 1 + v3654:0:0, v4722:0:0) :|: v3654:0:0 > 0 && v3648:0:0 > 1 && v3652:0:0 > 1 && v4722:0:0 > -1 && sum~cons_1~v4722:0:0 = 1 + v4722:0:0


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_656(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2666, v2667, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) -> f_660(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2666, v2667, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) :|: TRUE
f_660(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2666, v2667, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) -> f_663(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2666, v2667, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) :|: 0 = 0
f_663(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2666, v2667, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) -> f_666(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2666, v2667, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) :|: 0 = 0
f_666(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2666, v2667, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) -> f_669(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2666, v2667, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) :|: TRUE
f_669(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2666, v2667, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) -> f_672(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) :|: 0 = 0
f_672(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) -> f_675(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) :|: v2969 = 1 + v2667 && v2969 <= 1
f_675(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) -> f_678(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) :|: TRUE
f_678(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) -> f_681(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2670, v2671, v2672, v2673, 3, 4) :|: 0 = 0
f_681(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2670, v2671, v2672, v2673, 3, 4) -> f_684(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 4, 2) :|: v2973 = 1 + v2669 && 2 <= v2973
f_684(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 4, 2) -> f_687(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 4, 2) :|: TRUE
f_687(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 4, 2) -> f_691(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 4, 2) :|: TRUE
f_691(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 4, 2) -> f_694(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 4, 2) :|: 0 = 0
f_694(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 4, 2) -> f_698(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 4, 2) :|: 0 = 0
f_698(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 4, 2) -> f_702(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 4, 2) :|: TRUE
f_702(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 4, 2) -> f_706(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 4, 2) :|: 0 = 0
f_706(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 4, 2) -> f_711(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 2, 4) :|: v2969 <= 0 && 1 + v2667 <= 0 && 2 + v2663 <= 0
f_711(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 2, 4) -> f_716(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 2, 4) :|: 0 = 0
f_716(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 2, 4) -> f_721(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 2, 4) :|: 0 = 0
f_721(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 2, 4) -> f_652(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2667, v2969, v2669, v2973, v2670, v2671, v2672, v2673, 3, 4) :|: TRUE
f_652(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2666, v2667, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) -> f_656(v2658, v2659, v2660, v2661, v2662, v2663, 1, 0, v2666, v2667, v2668, v2669, v2670, v2671, v2672, v2673, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_656(v2658:0, v2659:0, v2660:0, v2661:0, v2662:0, v2663:0, 1, 0, v2666:0, v2667:0, v2668:0, v2669:0, v2670:0, v2671:0, v2672:0, v2673:0, 3, 4) -> f_656(v2658:0, v2659:0, v2660:0, v2661:0, v2662:0, v2663:0, 1, 0, v2667:0, 1 + v2667:0, v2669:0, 1 + v2669:0, v2670:0, v2671:0, v2672:0, v2673:0, 3, 4) :|: v2667:0 < 1 && v2669:0 > 0 && v2667:0 < 0 && v2663:0 < -1
Filtered unneeded arguments:
   f_656(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_656(x6, x10, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_656(v2663:0, v2667:0, v2669:0) -> f_656(v2663:0, 1 + v2667:0, 1 + v2669:0) :|: v2669:0 > 0 && v2667:0 < 1 && v2663:0 < -1 && v2667:0 < 0

----------------------------------------

(23)
Obligation:
Rules:
f_656(v2663:0, v2667:0, v2669:0) -> f_656(v2663:0, 1 + v2667:0, 1 + v2669:0) :|: v2669:0 > 0 && v2667:0 < 1 && v2663:0 < -1 && v2667:0 < 0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_656(v2663:0:0, v2667:0:0, v2669:0:0) -> f_656(v2663:0:0, 1 + v2667:0:0, 1 + v2669:0:0) :|: v2663:0:0 < -1 && v2667:0:0 < 0 && v2667:0:0 < 1 && v2669:0:0 > 0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_656(x, x1, x2)] = -x1

The following rules are decreasing:
f_656(v2663:0:0, v2667:0:0, v2669:0:0) -> f_656(v2663:0:0, 1 + v2667:0:0, 1 + v2669:0:0) :|: v2663:0:0 < -1 && v2667:0:0 < 0 && v2667:0:0 < 1 && v2669:0:0 > 0
The following rules are bounded:
f_656(v2663:0:0, v2667:0:0, v2669:0:0) -> f_656(v2663:0:0, 1 + v2667:0:0, 1 + v2669:0:0) :|: v2663:0:0 < -1 && v2667:0:0 < 0 && v2667:0:0 < 1 && v2669:0:0 > 0

----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
SCC
----------------------------------------

(29) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_363(v469, v470, v471, v472, v473, v474, v478, 1, v477, v475, v479, v480, v481, v482, v483, 0, 3, 4) -> f_366(v469, v470, v471, v472, v473, v474, v478, 1, v477, v475, v479, v480, v481, v482, v483, 0, 3, 2, 4) :|: 0 < v478 && 2 <= v475 && 2 <= v473
f_366(v469, v470, v471, v472, v473, v474, v478, 1, v477, v475, v479, v480, v481, v482, v483, 0, 3, 2, 4) -> f_370(v469, v470, v471, v472, v473, v474, v478, 1, v477, v475, v479, v480, v481, v482, v483, 0, 3, 2, 4) :|: 0 = 0
f_370(v469, v470, v471, v472, v473, v474, v478, 1, v477, v475, v479, v480, v481, v482, v483, 0, 3, 2, 4) -> f_374(v469, v470, v471, v472, v473, v474, v478, 1, v477, v475, v479, v480, v481, v482, v483, 0, 3, 2, 4) :|: TRUE
f_374(v469, v470, v471, v472, v473, v474, v478, 1, v477, v475, v479, v480, v481, v482, v483, 0, 3, 2, 4) -> f_378(v469, v470, v471, v472, v473, v474, v478, 1, v479, v475, v477, v480, v481, v482, v483, 0, 3, 2, 4) :|: 0 = 0
f_378(v469, v470, v471, v472, v473, v474, v478, 1, v479, v475, v477, v480, v481, v482, v483, 0, 3, 2, 4) -> f_382(v469, v470, v471, v472, v473, v474, v478, 1, v479, v475, v477, v480, v481, v482, v483, 0, 3, 2, 4) :|: 0 < v479 && 2 <= v477 && 2 <= v474
f_382(v469, v470, v471, v472, v473, v474, v478, 1, v479, v475, v477, v480, v481, v482, v483, 0, 3, 2, 4) -> f_387(v469, v470, v471, v472, v473, v474, v478, 1, v479, v475, v477, v480, v481, v482, v483, 0, 3, 2, 4) :|: 0 = 0
f_387(v469, v470, v471, v472, v473, v474, v478, 1, v479, v475, v477, v480, v481, v482, v483, 0, 3, 2, 4) -> f_392(v469, v470, v471, v472, v473, v474, v478, 1, v479, v475, v477, v480, v481, v482, v483, 0, 3, 2, 4) :|: 0 = 0
f_392(v469, v470, v471, v472, v473, v474, v478, 1, v479, v475, v477, v480, v481, v482, v483, 0, 3, 2, 4) -> f_397(v469, v470, v471, v472, v473, v474, v478, 1, v479, v475, v477, v480, v481, v482, v483, 0, 3, 2, 4) :|: TRUE
f_397(v469, v470, v471, v472, v473, v474, v478, 1, v479, v475, v477, v480, v481, v482, v483, 0, 3, 2, 4) -> f_402(v469, v470, v471, v472, v473, v474, v478, 1, v479, v477, v480, v481, v482, v483, 0, 3, 2, 4) :|: 0 = 0
f_402(v469, v470, v471, v472, v473, v474, v478, 1, v479, v477, v480, v481, v482, v483, 0, 3, 2, 4) -> f_406(v469, v470, v471, v472, v473, v474, v478, 1, v479, v656, v477, v480, v481, v482, v483, 0, 3, 2, 4) :|: 1 + v656 = v478 && 0 <= v656
f_406(v469, v470, v471, v472, v473, v474, v478, 1, v479, v656, v477, v480, v481, v482, v483, 0, 3, 2, 4) -> f_410(v469, v470, v471, v472, v473, v474, v478, 1, v479, v656, v477, v480, v481, v482, v483, 0, 3, 2, 4) :|: TRUE
f_410(v469, v470, v471, v472, v473, v474, v478, 1, v479, v656, v477, v480, v481, v482, v483, 0, 3, 2, 4) -> f_414(v469, v470, v471, v472, v473, v474, v478, 1, v479, v656, v480, v481, v482, v483, 0, 3, 2, 4) :|: 0 = 0
f_414(v469, v470, v471, v472, v473, v474, v478, 1, v479, v656, v480, v481, v482, v483, 0, 3, 2, 4) -> f_418(v469, v470, v471, v472, v473, v474, v478, 1, v479, v656, v711, v480, v481, v482, v483, 0, 3, 2, 4) :|: 1 + v711 = v479 && 0 <= v711
f_418(v469, v470, v471, v472, v473, v474, v478, 1, v479, v656, v711, v480, v481, v482, v483, 0, 3, 2, 4) -> f_422(v469, v470, v471, v472, v473, v474, v478, 1, v479, v656, v711, v480, v481, v482, v483, 0, 3, 2, 4) :|: TRUE
f_422(v469, v470, v471, v472, v473, v474, v478, 1, v479, v656, v711, v480, v481, v482, v483, 0, 3, 2, 4) -> f_427(v469, v470, v471, v472, v473, v474, v478, 1, v479, v656, v711, v480, v481, v482, v483, 0, 3, 2, 4) :|: TRUE
f_427(v469, v470, v471, v472, v473, v474, v478, 1, v479, v656, v711, v480, v481, v482, v483, 0, 3, 2, 4) -> f_360(v469, v470, v471, v472, v473, v474, v478, 1, v479, v656, v711, v480, v481, v482, v483, 0, 3, 4) :|: TRUE
f_360(v469, v470, v471, v472, v473, v474, v475, 1, v477, v478, v479, v480, v481, v482, v483, 0, 3, 4) -> f_363(v469, v470, v471, v472, v473, v474, v478, 1, v477, v475, v479, v480, v481, v482, v483, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_363(v469:0, v470:0, v471:0, v472:0, v473:0, v474:0, 1 + v656:0, 1, v477:0, v475:0, 1 + v711:0, v480:0, v481:0, v482:0, v483:0, 0, 3, 4) -> f_363(v469:0, v470:0, v471:0, v472:0, v473:0, v474:0, v656:0, 1, 1 + v711:0, 1 + v656:0, v711:0, v480:0, v481:0, v482:0, v483:0, 0, 3, 4) :|: v475:0 > 1 && v656:0 > -1 && v473:0 > 1 && v477:0 > 1 && v711:0 > -1 && v474:0 > 1
Filtered unneeded arguments:
   f_363(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_363(x5, x6, x7, x9, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_363(v473:0, v474:0, sum~cons_1~v656:0, v477:0, v475:0, sum~cons_1~v711:0) -> f_363(v473:0, v474:0, v656:0, 1 + v711:0, 1 + v656:0, v711:0) :|: v656:0 > -1 && v475:0 > 1 && v473:0 > 1 && v477:0 > 1 && v474:0 > 1 && v711:0 > -1 && sum~cons_1~v656:0 = 1 + v656:0 && sum~cons_1~v711:0 = 1 + v711:0

----------------------------------------

(30)
Obligation:
Rules:
f_363(v473:0, v474:0, sum~cons_1~v656:0, v477:0, v475:0, sum~cons_1~v711:0) -> f_363(v473:0, v474:0, v656:0, 1 + v711:0, 1 + v656:0, v711:0) :|: v656:0 > -1 && v475:0 > 1 && v473:0 > 1 && v477:0 > 1 && v474:0 > 1 && v711:0 > -1 && sum~cons_1~v656:0 = 1 + v656:0 && sum~cons_1~v711:0 = 1 + v711:0

----------------------------------------

(31) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(32)
Obligation:
Rules:
f_363(v473:0:0, v474:0:0, sum~cons_1~v656:0:0, v477:0:0, v475:0:0, sum~cons_1~v711:0:0) -> f_363(v473:0:0, v474:0:0, v656:0:0, 1 + v711:0:0, 1 + v656:0:0, v711:0:0) :|: v474:0:0 > 1 && v711:0:0 > -1 && v477:0:0 > 1 && v473:0:0 > 1 && v475:0:0 > 1 && v656:0:0 > -1 && sum~cons_1~v656:0:0 = 1 + v656:0:0 && sum~cons_1~v711:0:0 = 1 + v711:0:0

----------------------------------------

(33) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_363(x, x1, x2, x3, x4, x5)] = x5

The following rules are decreasing:
f_363(v473:0:0, v474:0:0, sum~cons_1~v656:0:0, v477:0:0, v475:0:0, sum~cons_1~v711:0:0) -> f_363(v473:0:0, v474:0:0, v656:0:0, 1 + v711:0:0, 1 + v656:0:0, v711:0:0) :|: v474:0:0 > 1 && v711:0:0 > -1 && v477:0:0 > 1 && v473:0:0 > 1 && v475:0:0 > 1 && v656:0:0 > -1 && sum~cons_1~v656:0:0 = 1 + v656:0:0 && sum~cons_1~v711:0:0 = 1 + v711:0:0
The following rules are bounded:
f_363(v473:0:0, v474:0:0, sum~cons_1~v656:0:0, v477:0:0, v475:0:0, sum~cons_1~v711:0:0) -> f_363(v473:0:0, v474:0:0, v656:0:0, 1 + v711:0:0, 1 + v656:0:0, v711:0:0) :|: v474:0:0 > 1 && v711:0:0 > -1 && v477:0:0 > 1 && v473:0:0 > 1 && v475:0:0 > 1 && v656:0:0 > -1 && sum~cons_1~v656:0:0 = 1 + v656:0:0 && sum~cons_1~v711:0:0 = 1 + v711:0:0

----------------------------------------

(34)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
