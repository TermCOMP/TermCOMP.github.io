YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/2xwGO.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 52 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 556 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 64 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (13) IntTRS
        (14) TerminationGraphProcessor [EQUIVALENT, 1 ms]
        (15) IntTRS
        (16) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (19) IntTRS
        (20) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (21) YES
    (22) LLVM Symbolic Execution SCC
        (23) SCC2IRS [SOUND, 53 ms]
        (24) IntTRS
        (25) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (26) IntTRS
        (27) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
        (28) YES
    (29) LLVM Symbolic Execution SCC
        (30) SCC2IRS [SOUND, 52 ms]
        (31) IntTRS
        (32) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (33) IntTRS
        (34) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (35) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/2xwGO.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/2xwGO.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%4 = alloca i8, numElementsLit: 4, align 16
		%5 = bitcast *i8 %4 to *i32
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%6 = alloca i8, numElementsLit: 4, align 16
		%7 = bitcast *i8 %6 to *i32
		store %7, %3
		br %8
	8:
		%9 = load %2
		%10 = load %9
		%11 = icmp sgt %10 0
		br %11, %12, %16
	12:
		%13 = load %3
		%14 = load %13
		%15 = icmp sgt %14 0
		br %16
	16:
		%17 = phi [0, %8], [%15, %12]
		br %17, %18, %34
	18:
		%19 = call i32 @__VERIFIER_nondet_int()
		%20 = icmp ne %19 0
		br %20, %21, %26
	21:
		%22 = load %2
		%23 = load %22
		%24 = sub i32 %23, 1
		%25 = load %2
		store %24, %25
		br %33
	26:
		%27 = call i32 @__VERIFIER_nondet_int()
		%28 = load %2
		store %27, %28
		%29 = load %3
		%30 = load %29
		%31 = sub i32 %30, 1
		%32 = load %3
		store %31, %32
		br %33
	33:
		br %8
	34:
		%35 = load %1
		ret %35


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 58 rulesP rules:
f_292(v1, v3, v5, v7, v10, v234, 1, v15, 0, v13, v26, v266, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_296(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: 0 = 0
f_296(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_300(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: 0 < v266 && 2 <= v15
f_300(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_304(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: 0 = 0
f_304(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_307(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: 0 = 0
f_307(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_310(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: TRUE
f_310(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_313(v1, v3, v5, v7, v10, v234, 1, v266, v960, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: TRUE
f_313(v1, v3, v5, v7, v10, v234, 1, v266, v960, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_316(v1, v3, v5, v7, v10, v234, 1, v266, v960, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: v960 != 0
f_313(v1, v3, v5, v7, v10, v234, 1, v266, v960, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_317(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: v960 = 0
f_316(v1, v3, v5, v7, v10, v234, 1, v266, v960, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_320(v1, v3, v5, v7, v10, v234, 1, v266, v960, v13, v26, v15, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_320(v1, v3, v5, v7, v10, v234, 1, v266, v960, v13, v26, v15, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) -> f_324(v1, v3, v5, v7, v10, v234, 1, v266, v960, v13, v26, v15, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) :|: TRUE
f_324(v1, v3, v5, v7, v10, v234, 1, v266, v960, v13, v26, v15, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) -> f_327(v1, v3, v5, v7, v10, v234, 1, v266, v960, v13, v26, v234, v15, v2, v4, v6, v8, v11, 0, 3, 7, 2, 4, 8) :|: TRUE
f_327(v1025, v1026, v1027, v1028, v1029, v1030, 1, v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, 0, 3, 7, 2, 4, 8) -> f_330(v1025, v1026, v1027, v1028, v1029, v1030, 1, v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_330(v1025, v1026, v1027, v1028, v1029, v1030, 1, v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, 0, 3, 7, 2, 4, 8) -> f_332(v1025, v1026, v1027, v1028, v1029, v1030, 1, v1032, v1033, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_332(v1025, v1026, v1027, v1028, v1029, v1030, 1, v1032, v1033, v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042, 0, 3, 7, 2, 4, 8) -> f_334(v1025, v1026, v1027, v1028, v1029, v1030, 1, v1032, v1033, v1084, v1036, v1037, v1038, v1039, v1040, v1041, v1042, 0, 3, 7, 2, 4, 8) :|: 1 + v1084 = v1030 && 0 <= v1084
f_334(v1025, v1026, v1027, v1028, v1029, v1030, 1, v1032, v1033, v1084, v1036, v1037, v1038, v1039, v1040, v1041, v1042, 0, 3, 7, 2, 4, 8) -> f_336(v1025, v1026, v1027, v1028, v1029, v1030, 1, v1032, v1033, v1084, v1036, v1037, v1038, v1039, v1040, v1041, v1042, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_336(v1025, v1026, v1027, v1028, v1029, v1030, 1, v1032, v1033, v1084, v1036, v1037, v1038, v1039, v1040, v1041, v1042, 0, 3, 7, 2, 4, 8) -> f_338(v1025, v1026, v1027, v1028, v1029, v1030, 1, v1032, v1033, v1084, v1036, v1037, v1038, v1039, v1040, v1041, v1042, 0, 3, 7, 2, 4, 8) :|: TRUE
f_338(v1025, v1026, v1027, v1028, v1029, v1030, 1, v1032, v1033, v1084, v1036, v1037, v1038, v1039, v1040, v1041, v1042, 0, 3, 7, 2, 4, 8) -> f_340(v1025, v1026, v1027, v1028, v1029, v1030, 1, v1032, v1033, v1084, v1036, v1037, v1038, v1039, v1040, v1041, v1042, 0, 3, 7, 2, 4, 8) :|: TRUE
f_340(v1025, v1026, v1027, v1028, v1029, v1030, 1, v1032, v1033, v1084, v1036, v1037, v1038, v1039, v1040, v1041, v1042, 0, 3, 7, 2, 4, 8) -> f_341(v1025, v1026, v1027, v1028, v1029, v1030, 1, v1032, v1033, v1036, v1037, v1084, v1038, v1039, v1040, v1041, v1042, 0, 3, 7, 2, 4, 8) :|: TRUE
f_341(v1115, v1116, v1117, v1118, v1119, v1120, 1, v1122, v1123, v1124, v1125, v1126, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_343(v1115, v1116, v1117, v1118, v1119, v1120, 1, v1122, v1123, v1124, v1125, v1126, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: TRUE
f_343(v1115, v1116, v1117, v1118, v1119, v1120, 1, v1122, v1123, v1124, v1125, v1126, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_345(v1115, v1116, v1117, v1118, v1119, v1120, 1, v1122, v1123, v1124, v1125, v1126, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_345(v1115, v1116, v1117, v1118, v1119, v1120, 1, v1122, v1123, v1124, v1125, v1126, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_347(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_347(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_349(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: 0 < v1126 && 2 <= v1120 && 2 <= v1124
f_349(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_352(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_352(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_355(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: TRUE
f_355(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_358(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_358(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_362(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_362(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_366(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_366(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_369(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_369(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_370(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: TRUE
f_370(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1123, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_371(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1583, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: TRUE
f_371(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1583, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_372(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1583, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: v1583 != 0
f_371(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1583, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_373(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, 0, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 3, 7, 2, 4, 8) :|: v1583 = 0
f_372(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1583, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_374(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1583, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_374(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1583, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_376(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1583, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: TRUE
f_376(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1583, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) -> f_327(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, v1583, v1120, v1126, v1124, v1125, v1127, v1128, v1129, v1130, v1131, 0, 3, 7, 2, 4, 8) :|: TRUE
f_373(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, 0, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 3, 7, 2, 4, 8) -> f_375(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, 0, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 3, 7, 2, 4, 8) :|: 0 = 0
f_375(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, 0, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 3, 7, 2, 4, 8) -> f_377(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, 0, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 3, 7, 2, 4, 8) :|: TRUE
f_377(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, 0, v1124, v1125, v1120, v1127, v1128, v1129, v1130, v1131, 3, 7, 2, 4, 8) -> f_329(v1115, v1116, v1117, v1118, v1119, v1126, 1, v1122, 0, v1120, v1126, v1124, v1125, v1127, v1128, v1129, v1130, v1131, 3, 7, 2, 4, 8) :|: TRUE
f_329(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1076, v1077, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_331(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1077, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) :|: TRUE
f_331(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1077, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_333(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1077, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) :|: 0 = 0
f_333(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1077, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_335(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1077, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) :|: TRUE
f_335(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1077, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_337(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1077, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) :|: 0 = 0
f_337(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1077, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_339(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) :|: 0 = 0
f_339(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_342(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) :|: 1 + v1133 = v1072 && 0 <= v1133
f_342(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_344(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) :|: 0 = 0
f_344(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_346(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) :|: TRUE
f_346(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_348(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) :|: TRUE
f_348(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_351(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) :|: TRUE
f_351(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_354(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) :|: 0 = 0
f_354(v1065, v1066, v1067, v1068, v1069, v1070, 1, v1072, 0, v1074, v1075, v1083, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_357(v1065, v1066, v1067, v1068, v1069, v1083, 1, v1072, 0, v1074, v1075, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) :|: 0 = 0
f_357(v1065, v1066, v1067, v1068, v1069, v1083, 1, v1072, 0, v1074, v1075, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_360(v1065, v1066, v1067, v1068, v1069, v1083, 1, v1072, 0, v1074, v1075, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) :|: 0 < v1083
f_360(v1065, v1066, v1067, v1068, v1069, v1083, 1, v1072, 0, v1074, v1075, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_364(v1065, v1066, v1067, v1068, v1069, v1083, 1, v1072, 0, v1074, v1075, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) :|: 0 = 0
f_364(v1065, v1066, v1067, v1068, v1069, v1083, 1, v1072, 0, v1074, v1075, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_367(v1065, v1066, v1067, v1068, v1069, v1083, 1, v1072, 0, v1074, v1075, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) :|: TRUE
f_367(v1065, v1066, v1067, v1068, v1069, v1083, 1, v1072, 0, v1074, v1075, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 2, 4, 8) -> f_288(v1065, v1066, v1067, v1068, v1069, v1083, 1, v1072, 0, v1074, v1075, v1133, v1078, v1079, v1080, v1081, v1082, 3, 7, 4, 8, 2) :|: TRUE
f_288(v1, v3, v5, v7, v10, v234, 1, v15, 0, v13, v26, v266, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_292(v1, v3, v5, v7, v10, v234, 1, v15, 0, v13, v26, v266, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: 0 = 0
f_317(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_321(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: 0 = 0
f_321(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_325(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: TRUE
f_325(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_329(v1, v3, v5, v7, v10, v234, 1, v266, 0, v13, v26, v234, v15, v2, v4, v6, v8, v11, 3, 7, 2, 4, 8) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_292(v1:0, v3:0, v5:0, v7:0, v10:0, 1 + v1084:0, 1, v15:0, 0, v13:0, v26:0, v266:0, v2:0, v4:0, v6:0, v8:0, v11:0, 3, 7, 4, 8, 2) -> f_371(v1:0, v3:0, v5:0, v7:0, v10:0, v1084:0, 1, v266:0, v1583:0, 1 + v1084:0, v15:0, 1 + v1084:0, v2:0, v4:0, v6:0, v8:0, v11:0, 0, 3, 7, 2, 4, 8) :|: v1084:0 > 0 && v15:0 > 1 && v266:0 > 0 && v960:0 < 0
f_292(v1:0, v3:0, v5:0, v7:0, v10:0, 1 + v1084:0, 1, v15:0, 0, v13:0, v26:0, v266:0, v2:0, v4:0, v6:0, v8:0, v11:0, 3, 7, 4, 8, 2) -> f_371(v1:0, v3:0, v5:0, v7:0, v10:0, v1084:0, 1, v266:0, v1583:0, 1 + v1084:0, v15:0, 1 + v1084:0, v2:0, v4:0, v6:0, v8:0, v11:0, 0, 3, 7, 2, 4, 8) :|: v1084:0 > 0 && v15:0 > 1 && v266:0 > 0 && v960:0 > 0
f_371(v1115:0, v1116:0, v1117:0, v1118:0, v1119:0, 1 + v1084:0, 1, v1122:0, v1583:0, v1124:0, v1125:0, v1120:0, v1127:0, v1128:0, v1129:0, v1130:0, v1131:0, 0, 3, 7, 2, 4, 8) -> f_371(v1115:0, v1116:0, v1117:0, v1118:0, v1119:0, v1084:0, 1, v1122:0, v1583:1, v1124:0, v1125:0, 1 + v1084:0, v1127:0, v1128:0, v1129:0, v1130:0, v1131:0, 0, 3, 7, 2, 4, 8) :|: v1084:0 > 0 && v1583:0 < 0 && v1124:0 > 1
f_371(v1115:0, v1116:0, v1117:0, v1118:0, v1119:0, 1 + v1084:0, 1, v1122:0, v1583:0, v1124:0, v1125:0, v1120:0, v1127:0, v1128:0, v1129:0, v1130:0, v1131:0, 0, 3, 7, 2, 4, 8) -> f_371(v1115:0, v1116:0, v1117:0, v1118:0, v1119:0, v1084:0, 1, v1122:0, v1583:1, v1124:0, v1125:0, 1 + v1084:0, v1127:0, v1128:0, v1129:0, v1130:0, v1131:0, 0, 3, 7, 2, 4, 8) :|: v1084:0 > 0 && v1583:0 > 0 && v1124:0 > 1
f_371(v1115:0, v1116:0, v1117:0, v1118:0, v1119:0, v1126:0, 1, 1 + v1133:0, 0, v1124:0, v1125:0, v1120:0, v1127:0, v1128:0, v1129:0, v1130:0, v1131:0, 0, 3, 7, 2, 4, 8) -> f_292(v1115:0, v1116:0, v1117:0, v1118:0, v1119:0, v1083:0, 1, 1 + v1133:0, 0, v1120:0, v1126:0, v1133:0, v1127:0, v1128:0, v1129:0, v1130:0, v1131:0, 3, 7, 4, 8, 2) :|: v1083:0 > 0 && v1133:0 > -1
f_292(v1:0, v3:0, v5:0, v7:0, v10:0, v234:0, 1, v15:0, 0, v13:0, v26:0, 1 + v1133:0, v2:0, v4:0, v6:0, v8:0, v11:0, 3, 7, 4, 8, 2) -> f_292(v1:0, v3:0, v5:0, v7:0, v10:0, v1083:0, 1, 1 + v1133:0, 0, v13:0, v26:0, v1133:0, v2:0, v4:0, v6:0, v8:0, v11:0, 3, 7, 4, 8, 2) :|: v1133:0 > -1 && v15:0 > 1 && v1083:0 > 0
Filtered unneeded arguments:
   f_292(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_292(x6, x8, x12)
   f_371(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_371(x6, x8, x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_292(sum~cons_1~v1084:0, v15:0, v266:0) -> f_371(v1084:0, v266:0, v1583:0, 1 + v1084:0) :|: v15:0 > 1 && v266:0 > 0 && v1084:0 > 0 && sum~cons_1~v1084:0 = 1 + v1084:0
f_371(sum~cons_1~v1084:0, v1122:0, v1583:0, v1124:0) -> f_371(v1084:0, v1122:0, v1583:1, v1124:0) :|: v1583:0 < 0 && v1124:0 > 1 && v1084:0 > 0 && sum~cons_1~v1084:0 = 1 + v1084:0
f_371(sum~cons_1~v1084:0, v1122:0, v1583:0, v1124:0) -> f_371(v1084:0, v1122:0, v1583:1, v1124:0) :|: v1583:0 > 0 && v1124:0 > 1 && v1084:0 > 0 && sum~cons_1~v1084:0 = 1 + v1084:0
f_371(v1126:0, sum~cons_1~v1133:0, cons_0, v1124:0) -> f_292(v1083:0, 1 + v1133:0, v1133:0) :|: v1083:0 > 0 && v1133:0 > -1 && sum~cons_1~v1133:0 = 1 + v1133:0 && cons_0 = 0
f_292(v234:0, v15:0, sum~cons_1~v1133:0) -> f_292(v1083:0, 1 + v1133:0, v1133:0) :|: v15:0 > 1 && v1083:0 > 0 && v1133:0 > -1 && sum~cons_1~v1133:0 = 1 + v1133:0

----------------------------------------

(9)
Obligation:
Rules:
f_292(sum~cons_1~v1084:0, v15:0, v266:0) -> f_371(v1084:0, v266:0, v1583:0, 1 + v1084:0) :|: v15:0 > 1 && v266:0 > 0 && v1084:0 > 0 && sum~cons_1~v1084:0 = 1 + v1084:0
f_371(x, x1, x2, x3) -> f_371(x4, x1, x5, x3) :|: x2 < 0 && x3 > 1 && x4 > 0 && x = 1 + x4
f_371(x6, x7, x8, x9) -> f_371(x10, x7, x11, x9) :|: x8 > 0 && x9 > 1 && x10 > 0 && x6 = 1 + x10
f_371(v1126:0, sum~cons_1~v1133:0, cons_0, v1124:0) -> f_292(v1083:0, 1 + v1133:0, v1133:0) :|: v1083:0 > 0 && v1133:0 > -1 && sum~cons_1~v1133:0 = 1 + v1133:0 && cons_0 = 0
f_292(x12, x13, x14) -> f_292(x15, 1 + x16, x16) :|: x13 > 1 && x15 > 0 && x16 > -1 && x14 = 1 + x16

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_371(sum~cons_1~x4:0, x1:0, x2:0, x3:0) -> f_371(x4:0, x1:0, x5:0, x3:0) :|: x2:0 < 0 && x3:0 > 1 && x4:0 > 0 && sum~cons_1~x4:0 = 1 + x4:0
f_371(sum~cons_1~x10:0, x7:0, x8:0, x9:0) -> f_371(x10:0, x7:0, x11:0, x9:0) :|: x8:0 > 0 && x9:0 > 1 && x10:0 > 0 && sum~cons_1~x10:0 = 1 + x10:0
f_292(x12:0, x13:0, sum~cons_1~x16:0) -> f_292(x15:0, 1 + x16:0, x16:0) :|: x13:0 > 1 && x15:0 > 0 && x16:0 > -1 && sum~cons_1~x16:0 = 1 + x16:0
f_292(sum~cons_1~v1084:0:0, v15:0:0, v266:0:0) -> f_371(v1084:0:0, v266:0:0, v1583:0:0, 1 + v1084:0:0) :|: v15:0:0 > 1 && v266:0:0 > 0 && v1084:0:0 > 0 && sum~cons_1~v1084:0:0 = 1 + v1084:0:0
f_371(v1126:0:0, sum~cons_1~v1133:0:0, cons_0, v1124:0:0) -> f_292(v1083:0:0, 1 + v1133:0:0, v1133:0:0) :|: v1083:0:0 > 0 && v1133:0:0 > -1 && sum~cons_1~v1133:0:0 = 1 + v1133:0:0 && cons_0 = 0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_371(x, x1, x2, x3)] = -3 + x1 + x1^2
[f_292(x4, x5, x6)] = -1 + x6 + x6^2

The following rules are decreasing:
f_292(x12:0, x13:0, sum~cons_1~x16:0) -> f_292(x15:0, 1 + x16:0, x16:0) :|: x13:0 > 1 && x15:0 > 0 && x16:0 > -1 && sum~cons_1~x16:0 = 1 + x16:0
f_292(sum~cons_1~v1084:0:0, v15:0:0, v266:0:0) -> f_371(v1084:0:0, v266:0:0, v1583:0:0, 1 + v1084:0:0) :|: v15:0:0 > 1 && v266:0:0 > 0 && v1084:0:0 > 0 && sum~cons_1~v1084:0:0 = 1 + v1084:0:0
The following rules are bounded:
f_292(x12:0, x13:0, sum~cons_1~x16:0) -> f_292(x15:0, 1 + x16:0, x16:0) :|: x13:0 > 1 && x15:0 > 0 && x16:0 > -1 && sum~cons_1~x16:0 = 1 + x16:0
f_292(sum~cons_1~v1084:0:0, v15:0:0, v266:0:0) -> f_371(v1084:0:0, v266:0:0, v1583:0:0, 1 + v1084:0:0) :|: v15:0:0 > 1 && v266:0:0 > 0 && v1084:0:0 > 0 && sum~cons_1~v1084:0:0 = 1 + v1084:0:0

----------------------------------------

(13)
Obligation:
Rules:
f_371(sum~cons_1~x4:0, x1:0, x2:0, x3:0) -> f_371(x4:0, x1:0, x5:0, x3:0) :|: x2:0 < 0 && x3:0 > 1 && x4:0 > 0 && sum~cons_1~x4:0 = 1 + x4:0
f_371(sum~cons_1~x10:0, x7:0, x8:0, x9:0) -> f_371(x10:0, x7:0, x11:0, x9:0) :|: x8:0 > 0 && x9:0 > 1 && x10:0 > 0 && sum~cons_1~x10:0 = 1 + x10:0
f_371(v1126:0:0, sum~cons_1~v1133:0:0, cons_0, v1124:0:0) -> f_292(v1083:0:0, 1 + v1133:0:0, v1133:0:0) :|: v1083:0:0 > 0 && v1133:0:0 > -1 && sum~cons_1~v1133:0:0 = 1 + v1133:0:0 && cons_0 = 0

----------------------------------------

(14) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(15)
Obligation:
Rules:
f_371(sum~cons_1~x4:0, x1:0, x2:0, x3:0) -> f_371(x4:0, x1:0, x5:0, x3:0) :|: x2:0 < 0 && x3:0 > 1 && x4:0 > 0 && sum~cons_1~x4:0 = 1 + x4:0
f_371(sum~cons_1~x10:0, x7:0, x8:0, x9:0) -> f_371(x10:0, x7:0, x11:0, x9:0) :|: x8:0 > 0 && x9:0 > 1 && x10:0 > 0 && sum~cons_1~x10:0 = 1 + x10:0

----------------------------------------

(16) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(17)
Obligation:
Rules:
f_371(sum~cons_1~x4:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_371(x4:0:0, x1:0:0, x5:0:0, x3:0:0) :|: x2:0:0 < 0 && x3:0:0 > 1 && x4:0:0 > 0 && sum~cons_1~x4:0:0 = 1 + x4:0:0
f_371(sum~cons_1~x10:0:0, x7:0:0, x8:0:0, x9:0:0) -> f_371(x10:0:0, x7:0:0, x11:0:0, x9:0:0) :|: x8:0:0 > 0 && x9:0:0 > 1 && x10:0:0 > 0 && sum~cons_1~x10:0:0 = 1 + x10:0:0

----------------------------------------

(18) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_371(x1, x2, x3, x4) -> f_371(x1, x3, x4)

----------------------------------------

(19)
Obligation:
Rules:
f_371(sum~cons_1~x4:0:0, x2:0:0, x3:0:0) -> f_371(x4:0:0, x5:0:0, x3:0:0) :|: x2:0:0 < 0 && x3:0:0 > 1 && x4:0:0 > 0 && sum~cons_1~x4:0:0 = 1 + x4:0:0
f_371(sum~cons_1~x10:0:0, x8:0:0, x9:0:0) -> f_371(x10:0:0, x11:0:0, x9:0:0) :|: x8:0:0 > 0 && x9:0:0 > 1 && x10:0:0 > 0 && sum~cons_1~x10:0:0 = 1 + x10:0:0

----------------------------------------

(20) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_371 ] = f_371_1

The following rules are decreasing:
f_371(sum~cons_1~x4:0:0, x2:0:0, x3:0:0) -> f_371(x4:0:0, x5:0:0, x3:0:0) :|: x2:0:0 < 0 && x3:0:0 > 1 && x4:0:0 > 0 && sum~cons_1~x4:0:0 = 1 + x4:0:0
f_371(sum~cons_1~x10:0:0, x8:0:0, x9:0:0) -> f_371(x10:0:0, x11:0:0, x9:0:0) :|: x8:0:0 > 0 && x9:0:0 > 1 && x10:0:0 > 0 && sum~cons_1~x10:0:0 = 1 + x10:0:0

The following rules are bounded:
f_371(sum~cons_1~x4:0:0, x2:0:0, x3:0:0) -> f_371(x4:0:0, x5:0:0, x3:0:0) :|: x2:0:0 < 0 && x3:0:0 > 1 && x4:0:0 > 0 && sum~cons_1~x4:0:0 = 1 + x4:0:0
f_371(sum~cons_1~x10:0:0, x8:0:0, x9:0:0) -> f_371(x10:0:0, x11:0:0, x9:0:0) :|: x8:0:0 > 0 && x9:0:0 > 1 && x10:0:0 > 0 && sum~cons_1~x10:0:0 = 1 + x10:0:0


----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
SCC
----------------------------------------

(23) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_198(v1, v3, v5, v7, v10, v13, 1, v15, 0, v25, v29, v2, v4, v6, v8, v11, 3, 7, 4, 8) -> f_201(v1, v3, v5, v7, v10, v13, 1, v15, 0, v25, v29, v2, v4, v6, v8, v11, 3, 7, 4, 8) :|: 0 = 0
f_201(v1, v3, v5, v7, v10, v13, 1, v15, 0, v25, v29, v2, v4, v6, v8, v11, 3, 7, 4, 8) -> f_204(v1, v3, v5, v7, v10, v25, 1, v15, 0, v29, v2, v4, v6, v8, v11, 3, 7, 4, 8) :|: 0 = 0
f_204(v1, v3, v5, v7, v10, v25, 1, v15, 0, v29, v2, v4, v6, v8, v11, 3, 7, 4, 8) -> f_207(v1, v3, v5, v7, v10, v25, 1, v15, 0, v29, v2, v4, v6, v8, v11, 3, 7, 4, 8) :|: 0 < v25
f_207(v1, v3, v5, v7, v10, v25, 1, v15, 0, v29, v2, v4, v6, v8, v11, 3, 7, 4, 8) -> f_211(v1, v3, v5, v7, v10, v25, 1, v15, 0, v29, v2, v4, v6, v8, v11, 3, 7, 4, 8) :|: 0 = 0
f_211(v1, v3, v5, v7, v10, v25, 1, v15, 0, v29, v2, v4, v6, v8, v11, 3, 7, 4, 8) -> f_214(v1, v3, v5, v7, v10, v25, 1, v15, 0, v29, v2, v4, v6, v8, v11, 3, 7, 4, 8) :|: TRUE
f_214(v1, v3, v5, v7, v10, v25, 1, v15, 0, v29, v2, v4, v6, v8, v11, 3, 7, 4, 8) -> f_217(v1, v3, v5, v7, v10, v25, 1, v15, 0, v29, v2, v4, v6, v8, v11, 3, 7, 4, 8) :|: 0 = 0
f_217(v1, v3, v5, v7, v10, v25, 1, v15, 0, v29, v2, v4, v6, v8, v11, 3, 7, 4, 8) -> f_220(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8) :|: 0 = 0
f_220(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8) -> f_223(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: 0 < v29 && 2 <= v15
f_223(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_227(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: 0 = 0
f_227(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_231(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: 0 = 0
f_231(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_235(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: TRUE
f_235(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_239(v1, v3, v5, v7, v10, v25, 1, v29, v235, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: TRUE
f_239(v1, v3, v5, v7, v10, v25, 1, v29, v235, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_244(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: v235 = 0
f_244(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_248(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: 0 = 0
f_248(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_252(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: TRUE
f_252(v1, v3, v5, v7, v10, v25, 1, v29, 0, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_256(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: TRUE
f_256(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_260(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: 0 = 0
f_260(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_264(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: TRUE
f_264(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_267(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) :|: 0 = 0
f_267(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v15, v2, v4, v6, v8, v11, 3, 7, 4, 8, 2) -> f_270(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v2, v4, v6, v8, v11, 3, 7, 4, 8) :|: 0 = 0
f_270(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v2, v4, v6, v8, v11, 3, 7, 4, 8) -> f_273(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v363, v2, v4, v6, v8, v11, 3, 7, 4, 8) :|: 1 + v363 = v29 && 0 <= v363
f_273(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v363, v2, v4, v6, v8, v11, 3, 7, 4, 8) -> f_276(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v363, v2, v4, v6, v8, v11, 3, 7, 4, 8) :|: 0 = 0
f_276(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v363, v2, v4, v6, v8, v11, 3, 7, 4, 8) -> f_279(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v363, v2, v4, v6, v8, v11, 3, 7, 4, 8) :|: TRUE
f_279(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v363, v2, v4, v6, v8, v11, 3, 7, 4, 8) -> f_283(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v363, v2, v4, v6, v8, v11, 3, 7, 4, 8) :|: TRUE
f_283(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v363, v2, v4, v6, v8, v11, 3, 7, 4, 8) -> f_195(v1, v3, v5, v7, v10, v25, 1, v29, 0, v257, v363, v2, v4, v6, v8, v11, 3, 7, 4, 8) :|: TRUE
f_195(v1, v3, v5, v7, v10, v13, 1, v15, 0, v25, v29, v2, v4, v6, v8, v11, 3, 7, 4, 8) -> f_198(v1, v3, v5, v7, v10, v13, 1, v15, 0, v25, v29, v2, v4, v6, v8, v11, 3, 7, 4, 8) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_198(v1:0, v3:0, v5:0, v7:0, v10:0, v13:0, 1, v15:0, 0, v25:0, 1 + v363:0, v2:0, v4:0, v6:0, v8:0, v11:0, 3, 7, 4, 8) -> f_198(v1:0, v3:0, v5:0, v7:0, v10:0, v25:0, 1, 1 + v363:0, 0, v257:0, v363:0, v2:0, v4:0, v6:0, v8:0, v11:0, 3, 7, 4, 8) :|: v25:0 > 0 && v15:0 > 1 && v363:0 > -1
Filtered unneeded arguments:
   f_198(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_198(x8, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_198(v15:0, v25:0, sum~cons_1~v363:0) -> f_198(1 + v363:0, v257:0, v363:0) :|: v15:0 > 1 && v363:0 > -1 && v25:0 > 0 && sum~cons_1~v363:0 = 1 + v363:0

----------------------------------------

(24)
Obligation:
Rules:
f_198(v15:0, v25:0, sum~cons_1~v363:0) -> f_198(1 + v363:0, v257:0, v363:0) :|: v15:0 > 1 && v363:0 > -1 && v25:0 > 0 && sum~cons_1~v363:0 = 1 + v363:0

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f_198(v15:0:0, v25:0:0, sum~cons_1~v363:0:0) -> f_198(1 + v363:0:0, v257:0:0, v363:0:0) :|: v15:0:0 > 1 && v363:0:0 > -1 && v25:0:0 > 0 && sum~cons_1~v363:0:0 = 1 + v363:0:0

----------------------------------------

(27) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_198(x, x1, x2)] = x2

The following rules are decreasing:
f_198(v15:0:0, v25:0:0, sum~cons_1~v363:0:0) -> f_198(1 + v363:0:0, v257:0:0, v363:0:0) :|: v15:0:0 > 1 && v363:0:0 > -1 && v25:0:0 > 0 && sum~cons_1~v363:0:0 = 1 + v363:0:0
The following rules are bounded:
f_198(v15:0:0, v25:0:0, sum~cons_1~v363:0:0) -> f_198(1 + v363:0:0, v257:0:0, v363:0:0) :|: v15:0:0 > 1 && v363:0:0 > -1 && v25:0:0 > 0 && sum~cons_1~v363:0:0 = 1 + v363:0:0

----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
SCC
----------------------------------------

(30) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_192(v1, v3, v5, v7, v10, v13, 1, v15, v24, v26, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) -> f_194(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) :|: 0 = 0
f_194(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) -> f_196(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) :|: 0 < v26 && 2 <= v13
f_196(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) -> f_199(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_199(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) -> f_202(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) :|: TRUE
f_202(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) -> f_205(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_205(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) -> f_209(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_209(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) -> f_213(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_213(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) -> f_216(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_216(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) -> f_219(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) :|: TRUE
f_219(v1, v3, v5, v7, v10, v26, 1, v15, v24, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) -> f_222(v1, v3, v5, v7, v10, v26, 1, v15, v124, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) :|: TRUE
f_222(v1, v3, v5, v7, v10, v26, 1, v15, v124, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) -> f_225(v1, v3, v5, v7, v10, v26, 1, v15, v124, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) :|: v124 != 0
f_225(v1, v3, v5, v7, v10, v26, 1, v15, v124, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) -> f_229(v1, v3, v5, v7, v10, v26, 1, v15, v124, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_229(v1, v3, v5, v7, v10, v26, 1, v15, v124, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) -> f_233(v1, v3, v5, v7, v10, v26, 1, v15, v124, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) :|: TRUE
f_233(v1, v3, v5, v7, v10, v26, 1, v15, v124, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) -> f_237(v1, v3, v5, v7, v10, v26, 1, v15, v124, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_237(v1, v3, v5, v7, v10, v26, 1, v15, v124, v13, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8, 2) -> f_241(v1, v3, v5, v7, v10, v26, 1, v15, v124, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) :|: 0 = 0
f_241(v1, v3, v5, v7, v10, v26, 1, v15, v124, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) -> f_245(v1, v3, v5, v7, v10, v26, 1, v15, v124, v236, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) :|: 1 + v236 = v26 && 0 <= v236
f_245(v1, v3, v5, v7, v10, v26, 1, v15, v124, v236, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) -> f_249(v1, v3, v5, v7, v10, v26, 1, v15, v124, v236, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) :|: 0 = 0
f_249(v1, v3, v5, v7, v10, v26, 1, v15, v124, v236, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) -> f_253(v1, v3, v5, v7, v10, v26, 1, v15, v124, v236, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) :|: TRUE
f_253(v1, v3, v5, v7, v10, v26, 1, v15, v124, v236, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) -> f_257(v1, v3, v5, v7, v10, v26, 1, v15, v124, v236, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) :|: TRUE
f_257(v1, v3, v5, v7, v10, v26, 1, v15, v124, v236, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) -> f_261(v1, v3, v5, v7, v10, v26, 1, v15, v124, v236, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) :|: TRUE
f_261(v1, v3, v5, v7, v10, v26, 1, v15, v124, v236, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) -> f_190(v1, v3, v5, v7, v10, v26, 1, v15, v124, v236, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) :|: TRUE
f_190(v1, v3, v5, v7, v10, v13, 1, v15, v24, v26, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) -> f_192(v1, v3, v5, v7, v10, v13, 1, v15, v24, v26, v2, v4, v6, v8, v11, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_192(v1:0, v3:0, v5:0, v7:0, v10:0, v13:0, 1, v15:0, v24:0, 1 + v236:0, v2:0, v4:0, v6:0, v8:0, v11:0, 0, 3, 7, 4, 8) -> f_192(v1:0, v3:0, v5:0, v7:0, v10:0, 1 + v236:0, 1, v15:0, v124:0, v236:0, v2:0, v4:0, v6:0, v8:0, v11:0, 0, 3, 7, 4, 8) :|: v13:0 > 1 && v236:0 > -1 && v124:0 < 0
f_192(v1:0, v3:0, v5:0, v7:0, v10:0, v13:0, 1, v15:0, v24:0, 1 + v236:0, v2:0, v4:0, v6:0, v8:0, v11:0, 0, 3, 7, 4, 8) -> f_192(v1:0, v3:0, v5:0, v7:0, v10:0, 1 + v236:0, 1, v15:0, v124:0, v236:0, v2:0, v4:0, v6:0, v8:0, v11:0, 0, 3, 7, 4, 8) :|: v13:0 > 1 && v236:0 > -1 && v124:0 > 0
Filtered unneeded arguments:
   f_192(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_192(x6, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_192(v13:0, sum~cons_1~v236:0) -> f_192(1 + v236:0, v236:0) :|: v13:0 > 1 && v236:0 > -1 && sum~cons_1~v236:0 = 1 + v236:0

----------------------------------------

(31)
Obligation:
Rules:
f_192(v13:0, sum~cons_1~v236:0) -> f_192(1 + v236:0, v236:0) :|: v13:0 > 1 && v236:0 > -1 && sum~cons_1~v236:0 = 1 + v236:0

----------------------------------------

(32) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(33)
Obligation:
Rules:
f_192(v13:0:0, sum~cons_1~v236:0:0) -> f_192(1 + v236:0:0, v236:0:0) :|: v13:0:0 > 1 && v236:0:0 > -1 && sum~cons_1~v236:0:0 = 1 + v236:0:0

----------------------------------------

(34) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_192(x, x1)] = x1

The following rules are decreasing:
f_192(v13:0:0, sum~cons_1~v236:0:0) -> f_192(1 + v236:0:0, v236:0:0) :|: v13:0:0 > 1 && v236:0:0 > -1 && sum~cons_1~v236:0:0 = 1 + v236:0:0
The following rules are bounded:
f_192(v13:0:0, sum~cons_1~v236:0:0) -> f_192(1 + v236:0:0, v236:0:0) :|: v13:0:0 > 1 && v236:0:0 > -1 && sum~cons_1~v236:0:0 = 1 + v236:0:0

----------------------------------------

(35)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
