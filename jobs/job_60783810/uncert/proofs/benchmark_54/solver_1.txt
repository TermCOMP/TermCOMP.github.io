YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/urDou.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 61 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2836 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 32 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/urDou.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/urDou.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cstrcmp" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 12
	0:
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		br %7
	7:
		%8 = load %3
		%9 = load %8
		%10 = sext i8 %9 to i32
		%11 = icmp ne %10 0
		br %11, %12, %20
	12:
		%13 = load %3
		%14 = load %13
		%15 = sext i8 %14 to i32
		%16 = load %4
		%17 = load %16
		%18 = sext i8 %17 to i32
		%19 = icmp eq %15 %18
		br %20
	20:
		%21 = phi [0, %7], [%19, %12]
		br %21, %22, %27
	22:
		%23 = load %3
		%24 = getelementptr %23, 1
		store %24, %3
		%25 = load %4
		%26 = getelementptr %25, 1
		store %26, %4
		br %7
	27:
		%28 = load %3
		%29 = load %28
		store %29, %5
		%30 = load %4
		%31 = load %30
		store %31, %6
		%32 = load %5
		%33 = zext i8 %32 to i32
		%34 = load %6
		%35 = zext i8 %34 to i32
		%36 = icmp slt %33 %35
		br %36, %37, %38
	37:
		br %45
	38:
		%39 = load %5
		%40 = zext i8 %39 to i32
		%41 = load %6
		%42 = zext i8 %41 to i32
		%43 = icmp sgt %40 %42
		%44 = zext i1 %43 to i32
		br %45
	45:
		%46 = phi [-1, %37], [%44, %38]
		ret %46

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 57
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = load %2
		%9 = icmp slt %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %11
	11:
		%12 = load %3
		%13 = icmp slt %12 1
		br %13, %14, %15
	14:
		store 1, %3
		br %15
	15:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%16 = load %2
		%17 = sext i32 %16 to i64
		%18 = mul i64 %17, 1
		%19 = alloca i8, numElementsLit: %18, align 16
		store %19, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%20 = load %3
		%21 = sext i32 %20 to i64
		%22 = mul i64 %21, 1
		%23 = alloca i8, numElementsLit: %22, align 16
		store %23, %5
		%24 = load %4
		%25 = load %2
		%26 = sub i32 %25, 1
		%27 = sext i32 %26 to i64
		%28 = getelementptr %24, %27
		store 0, %28
		%29 = load %5
		%30 = load %3
		%31 = sub i32 %30, 1
		%32 = sext i32 %31 to i64
		%33 = getelementptr %29, %32
		store 0, %33
		%34 = load %4
		%35 = load %5
		%36 = call i32 @cstrcmp(*i8 %34, *i8 %35)
		ret %36


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_959(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3017, v3018, v3020, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_963(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3017, v3018, v3020, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: 0 = 0
f_963(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3017, v3018, v3020, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_967(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3017, v3018, v3020, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: TRUE
f_967(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3017, v3018, v3020, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_971(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3018, v3020, v3017, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: 0 = 0
f_971(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3018, v3020, v3017, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_972(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3018, v3020, v3017, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: 0 = 0
f_972(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3018, v3020, v3017, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_973(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3020, v3018, v3017, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: 0 = 0
f_973(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3020, v3018, v3017, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_974(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3125, v3018, v3017, v3020, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: 0 = 0
f_974(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3125, v3018, v3017, v3020, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_975(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3125, v3646, v3018, v3017, v3020, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: TRUE
f_975(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3125, v3646, v3018, v3017, v3020, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_976(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3125, v3646, v3017, v3020, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3018, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: 0 = 0
f_976(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3125, v3646, v3017, v3020, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3018, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_977(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3646, 1, v3125, v3017, v3020, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3018, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: v3265 = v3646 && v3125 < v3034 && 4 <= v3034
f_977(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3646, 1, v3125, v3017, v3020, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3018, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_979(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3646, 1, v3125, v3017, v3020, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3018, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: 0 = 0
f_979(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3646, 1, v3125, v3017, v3020, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3018, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_981(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3646, 1, v3125, v3017, v3020, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3018, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: 0 = 0
f_981(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3646, 1, v3125, v3017, v3020, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3018, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_928(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3646, 1, v3125, v3017, v3020, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3018, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: TRUE
f_928(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3021, v3022, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3043, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_930(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3021, v3022, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3043, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: TRUE
f_930(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3021, v3022, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3043, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_932(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3022, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: 0 = 0
f_932(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3022, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_934(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3053, v3022, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: v3053 = 1 + v3017 && 3 <= v3053
f_934(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3053, v3022, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_937(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3053, v3022, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: TRUE
f_937(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3053, v3022, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_940(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3053, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: 0 = 0
f_940(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3053, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_943(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3053, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: v3125 = 1 + v3020 && 3 <= v3125
f_943(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3053, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_946(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3053, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: TRUE
f_946(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3053, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_949(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3053, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: TRUE
f_949(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018, 1, v3020, v3053, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_951(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3018, 1, v3017, v3020, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: 0 = 0
f_951(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3018, 1, v3017, v3020, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_953(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, v3018, 1, v3017, v3020, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: TRUE
f_953(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, v3018, 1, v3017, v3020, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_956(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3017, v3018, v3020, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: 0 = 0
f_956(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3017, v3018, v3020, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) -> f_959(v3011, v3012, v3013, v3014, v3015, v3016, v3053, v3265, 1, v3017, v3018, v3020, v3125, v3023, v3035, v3024, v3036, v3025, v3037, v3026, v3038, v3027, v3039, v3032, v3034, v3040, v3041, v3042, v3021, v3043, v3022, 0, v3028, v3029, v3031, v3033, 3, 7, 2, 4, 8) :|: v3265 != 0 && v3053 < v3032 && 4 <= v3032
Combined rules. Obtained 2 rulesP rules:
f_959(v3011:0, v3012:0, v3013:0, v3014:0, v3015:0, v3016:0, v3053:0, v3265:0, 1, v3017:0, v3018:0, v3020:0, v3125:0, v3023:0, v3035:0, v3024:0, v3036:0, v3025:0, v3037:0, v3026:0, v3038:0, v3027:0, v3039:0, v3032:0, v3034:0, v3040:0, v3041:0, v3042:0, v3021:0, v3043:0, v3022:0, 0, v3028:0, v3029:0, v3031:0, v3033:0, 3, 7, 2, 4, 8) -> f_959(v3011:0, v3012:0, v3013:0, v3014:0, v3015:0, v3016:0, 1 + v3053:0, v3265:1, 1, v3053:0, v3265:0, v3125:0, 1 + v3125:0, v3023:0, v3035:0, v3024:0, v3036:0, v3025:0, v3037:0, v3026:0, v3038:0, v3027:0, v3039:0, v3032:0, v3034:0, v3040:0, v3041:0, v3042:0, v3017:0, v3018:0, v3020:0, 0, v3028:0, v3029:0, v3031:0, v3033:0, 3, 7, 2, 4, 8) :|: v3125:0 < v3034:0 && v3034:0 > 3 && v3053:0 > 1 && v3125:0 > 1 && v3032:0 > 1 + v3053:0 && v3032:0 > 3 && v3265:1 < 0
f_959(v3011:0, v3012:0, v3013:0, v3014:0, v3015:0, v3016:0, v3053:0, v3265:0, 1, v3017:0, v3018:0, v3020:0, v3125:0, v3023:0, v3035:0, v3024:0, v3036:0, v3025:0, v3037:0, v3026:0, v3038:0, v3027:0, v3039:0, v3032:0, v3034:0, v3040:0, v3041:0, v3042:0, v3021:0, v3043:0, v3022:0, 0, v3028:0, v3029:0, v3031:0, v3033:0, 3, 7, 2, 4, 8) -> f_959(v3011:0, v3012:0, v3013:0, v3014:0, v3015:0, v3016:0, 1 + v3053:0, v3265:1, 1, v3053:0, v3265:0, v3125:0, 1 + v3125:0, v3023:0, v3035:0, v3024:0, v3036:0, v3025:0, v3037:0, v3026:0, v3038:0, v3027:0, v3039:0, v3032:0, v3034:0, v3040:0, v3041:0, v3042:0, v3017:0, v3018:0, v3020:0, 0, v3028:0, v3029:0, v3031:0, v3033:0, 3, 7, 2, 4, 8) :|: v3125:0 < v3034:0 && v3034:0 > 3 && v3053:0 > 1 && v3125:0 > 1 && v3032:0 > 1 + v3053:0 && v3032:0 > 3 && v3265:1 > 0
Filtered unneeded arguments:
   f_959(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41) -> f_959(x7, x13, x24, x25)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_959(v3053:0, v3125:0, v3032:0, v3034:0) -> f_959(1 + v3053:0, 1 + v3125:0, v3032:0, v3034:0) :|: v3034:0 > 3 && v3125:0 < v3034:0 && v3053:0 > 1 && v3125:0 > 1 && v3032:0 > 3 && v3032:0 > 1 + v3053:0

----------------------------------------

(8)
Obligation:
Rules:
f_959(v3053:0, v3125:0, v3032:0, v3034:0) -> f_959(1 + v3053:0, 1 + v3125:0, v3032:0, v3034:0) :|: v3034:0 > 3 && v3125:0 < v3034:0 && v3053:0 > 1 && v3125:0 > 1 && v3032:0 > 3 && v3032:0 > 1 + v3053:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_959(v3053:0:0, v3125:0:0, v3032:0:0, v3034:0:0) -> f_959(1 + v3053:0:0, 1 + v3125:0:0, v3032:0:0, v3034:0:0) :|: v3032:0:0 > 3 && v3032:0:0 > 1 + v3053:0:0 && v3125:0:0 > 1 && v3053:0:0 > 1 && v3125:0:0 < v3034:0:0 && v3034:0:0 > 3

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_959(x, x1, x2, x3)] = -1 - x1 + x3

The following rules are decreasing:
f_959(v3053:0:0, v3125:0:0, v3032:0:0, v3034:0:0) -> f_959(1 + v3053:0:0, 1 + v3125:0:0, v3032:0:0, v3034:0:0) :|: v3032:0:0 > 3 && v3032:0:0 > 1 + v3053:0:0 && v3125:0:0 > 1 && v3053:0:0 > 1 && v3125:0:0 < v3034:0:0 && v3034:0:0 > 3
The following rules are bounded:
f_959(v3053:0:0, v3125:0:0, v3032:0:0, v3034:0:0) -> f_959(1 + v3053:0:0, 1 + v3125:0:0, v3032:0:0, v3034:0:0) :|: v3032:0:0 > 3 && v3032:0:0 > 1 + v3053:0:0 && v3125:0:0 > 1 && v3053:0:0 > 1 && v3125:0:0 < v3034:0:0 && v3034:0:0 > 3

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
