MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/MiqBl.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 78 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/MiqBl.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/MiqBl.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: __LABS_time initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: tupleStart initVal: (0,0) type: [2 x i8] addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: tupleEnd initVal: \01\01 type: [2 x i8] addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: I initVal: ((0,0),(0,0),(0,0)) type: [3 x [2 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Ltstamp initVal: ((0,0),(0,0),(0,0)) type: [3 x [2 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HinCnt initVal: (0,0,0) type: [3 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hin initVal: ((0,0),(0,0),(0,0)) type: [3 x [2 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HoutCnt initVal: (0,0,0) type: [3 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hout initVal: ((0,0),(0,0),(0,0)) type: [3 x [2 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Lvalue initVal: ((0,0),(0,0),(0,0)) type: [3 x [2 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: pc initVal: ((0),(0),(0)) type: [3 x [1 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "exit" returnParam: BasicVoidType parameters: (i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 52
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		Unnamed Call-Instruction = call BasicVoidType @exit(i32 0)
		unreachable
	6:
		ret void

*BasicFunctionTypename: "mod" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i8 signext, 1 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 63
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%6 = load %4
		%7 = sext i8 %6 to i32
		%8 = icmp sge %7 0
		br %8, %9, %22
	9:
		%10 = load %4
		%11 = sext i8 %10 to i32
		%12 = load %4
		%13 = sext i8 %12 to i32
		%14 = load %5
		%15 = sext i8 %14 to i32
		%16 = sdiv i32 %13, %15
		%17 = load %5
		%18 = sext i8 %17 to i32
		%19 = mul i32 %16, %18
		%20 = sub i32 %11, %19
		%21 = trunc i32 %20 to i8
		store %21, %3
		br %38
	22:
		%23 = load %5
		%24 = sext i8 %23 to i32
		%25 = load %4
		%26 = sext i8 %25 to i32
		%27 = load %4
		%28 = sext i8 %27 to i32
		%29 = load %5
		%30 = sext i8 %29 to i32
		%31 = sdiv i32 %28, %30
		%32 = load %5
		%33 = sext i8 %32 to i32
		%34 = mul i32 %31, %33
		%35 = sub i32 %26, %34
		%36 = add i32 %24, %35
		%37 = trunc i32 %36 to i8
		store %37, %3
		br %38
	38:
		%39 = load %3
		ret %39

*BasicFunctionTypename: "now" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 95
	0:
		%1 = load @__LABS_time
		%2 = add i8 %1, 1
		store %2, @__LABS_time
		ret %2

*BasicFunctionTypename: "link" linkageType: EXTERNALLY_VISIBLE returnParam: i1 zeroext parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 100
	0:
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		store 0, %7
		%8 = load %6
		%9 = zext i8 %8 to i32
		%10 = icmp sge %9 0
		br %10, %11, %73
	11:
		%12 = load %6
		%13 = zext i8 %12 to i32
		%14 = icmp sle %13 1
		br %14, %15, %73
	15:
		%16 = load %4
		%17 = zext i8 %16 to i64
		%18 = getelementptr @I, 0, %17
		%19 = getelementptr %18, 0, 0
		%20 = load %19
		%21 = sext i8 %20 to i32
		%22 = load %5
		%23 = zext i8 %22 to i64
		%24 = getelementptr @I, 0, %23
		%25 = getelementptr %24, 0, 0
		%26 = load %25
		%27 = sext i8 %26 to i32
		%28 = sub i32 %21, %27
		%29 = load %4
		%30 = zext i8 %29 to i64
		%31 = getelementptr @I, 0, %30
		%32 = getelementptr %31, 0, 0
		%33 = load %32
		%34 = sext i8 %33 to i32
		%35 = load %5
		%36 = zext i8 %35 to i64
		%37 = getelementptr @I, 0, %36
		%38 = getelementptr %37, 0, 0
		%39 = load %38
		%40 = sext i8 %39 to i32
		%41 = sub i32 %34, %40
		%42 = mul i32 %28, %41
		%43 = load %4
		%44 = zext i8 %43 to i64
		%45 = getelementptr @I, 0, %44
		%46 = getelementptr %45, 0, 1
		%47 = load %46
		%48 = sext i8 %47 to i32
		%49 = load %5
		%50 = zext i8 %49 to i64
		%51 = getelementptr @I, 0, %50
		%52 = getelementptr %51, 0, 1
		%53 = load %52
		%54 = sext i8 %53 to i32
		%55 = sub i32 %48, %54
		%56 = load %4
		%57 = zext i8 %56 to i64
		%58 = getelementptr @I, 0, %57
		%59 = getelementptr %58, 0, 1
		%60 = load %59
		%61 = sext i8 %60 to i32
		%62 = load %5
		%63 = zext i8 %62 to i64
		%64 = getelementptr @I, 0, %63
		%65 = getelementptr %64, 0, 1
		%66 = load %65
		%67 = sext i8 %66 to i32
		%68 = sub i32 %61, %67
		%69 = mul i32 %55, %68
		%70 = add i32 %42, %69
		%71 = icmp sle %70 25
		%72 = zext i1 %71 to i8
		store %72, %7
		br %73
	73:
		%74 = load %7
		%75 = trunc i8 %74 to i1
		ret %75

*BasicFunctionTypename: "timeof" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 148
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i64
		%7 = getelementptr @Ltstamp, 0, %6
		%8 = load %4
		%9 = zext i8 %8 to i64
		%10 = getelementptr @tupleStart, 0, %9
		%11 = load %10
		%12 = zext i8 %11 to i64
		%13 = getelementptr %7, 0, %12
		%14 = load %13
		ret %14

*BasicFunctionTypename: "setHin" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 160
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i64
		%7 = getelementptr @HinCnt, 0, %6
		%8 = load %7
		%9 = zext i8 %8 to i32
		%10 = load %3
		%11 = zext i8 %10 to i64
		%12 = getelementptr @Hin, 0, %11
		%13 = load %4
		%14 = zext i8 %13 to i64
		%15 = getelementptr @tupleStart, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i64
		%18 = getelementptr %12, 0, %17
		%19 = load %18
		%20 = trunc i8 %19 to i1
		%21 = xor i1 %20, 1
		%22 = zext i1 %21 to i32
		%23 = add i32 %9, %22
		%24 = trunc i32 %23 to i8
		%25 = load %3
		%26 = zext i8 %25 to i64
		%27 = getelementptr @HinCnt, 0, %26
		store %24, %27
		%28 = load %3
		%29 = zext i8 %28 to i64
		%30 = getelementptr @Hin, 0, %29
		%31 = load %4
		%32 = zext i8 %31 to i64
		%33 = getelementptr @tupleStart, 0, %32
		%34 = load %33
		%35 = zext i8 %34 to i64
		%36 = getelementptr %30, 0, %35
		store 1, %36
		ret void

*BasicFunctionTypename: "clearHin" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 184
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i64
		%7 = getelementptr @HinCnt, 0, %6
		%8 = load %7
		%9 = zext i8 %8 to i32
		%10 = load %3
		%11 = zext i8 %10 to i64
		%12 = getelementptr @Hin, 0, %11
		%13 = load %4
		%14 = zext i8 %13 to i64
		%15 = getelementptr @tupleStart, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i64
		%18 = getelementptr %12, 0, %17
		%19 = load %18
		%20 = trunc i8 %19 to i1
		%21 = zext i1 %20 to i32
		%22 = sub i32 %9, %21
		%23 = trunc i32 %22 to i8
		%24 = load %3
		%25 = zext i8 %24 to i64
		%26 = getelementptr @HinCnt, 0, %25
		store %23, %26
		%27 = load %3
		%28 = zext i8 %27 to i64
		%29 = getelementptr @Hin, 0, %28
		%30 = load %4
		%31 = zext i8 %30 to i64
		%32 = getelementptr @tupleStart, 0, %31
		%33 = load %32
		%34 = zext i8 %33 to i64
		%35 = getelementptr %29, 0, %34
		store 0, %35
		ret void

*BasicFunctionTypename: "setHout" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 205
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i64
		%7 = getelementptr @HoutCnt, 0, %6
		%8 = load %7
		%9 = zext i8 %8 to i32
		%10 = load %3
		%11 = zext i8 %10 to i64
		%12 = getelementptr @Hout, 0, %11
		%13 = load %4
		%14 = zext i8 %13 to i64
		%15 = getelementptr @tupleStart, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i64
		%18 = getelementptr %12, 0, %17
		%19 = load %18
		%20 = trunc i8 %19 to i1
		%21 = xor i1 %20, 1
		%22 = zext i1 %21 to i32
		%23 = add i32 %9, %22
		%24 = trunc i32 %23 to i8
		%25 = load %3
		%26 = zext i8 %25 to i64
		%27 = getelementptr @HoutCnt, 0, %26
		store %24, %27
		%28 = load %3
		%29 = zext i8 %28 to i64
		%30 = getelementptr @Hout, 0, %29
		%31 = load %4
		%32 = zext i8 %31 to i64
		%33 = getelementptr @tupleStart, 0, %32
		%34 = load %33
		%35 = zext i8 %34 to i64
		%36 = getelementptr %30, 0, %35
		store 1, %36
		ret void

*BasicFunctionTypename: "clearHout" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 227
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i64
		%7 = getelementptr @HoutCnt, 0, %6
		%8 = load %7
		%9 = zext i8 %8 to i32
		%10 = load %3
		%11 = zext i8 %10 to i64
		%12 = getelementptr @Hout, 0, %11
		%13 = load %4
		%14 = zext i8 %13 to i64
		%15 = getelementptr @tupleStart, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i64
		%18 = getelementptr %12, 0, %17
		%19 = load %18
		%20 = trunc i8 %19 to i1
		%21 = zext i1 %20 to i32
		%22 = sub i32 %9, %21
		%23 = trunc i32 %22 to i8
		%24 = load %3
		%25 = zext i8 %24 to i64
		%26 = getelementptr @HoutCnt, 0, %25
		store %23, %26
		%27 = load %3
		%28 = zext i8 %27 to i64
		%29 = getelementptr @Hout, 0, %28
		%30 = load %4
		%31 = zext i8 %30 to i64
		%32 = getelementptr @tupleStart, 0, %31
		%33 = load %32
		%34 = zext i8 %33 to i64
		%35 = getelementptr %29, 0, %34
		store 0, %35
		ret void

*BasicFunctionTypename: "attr" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext, 3 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 248
	0:
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%9 = zext i1 %3 to i8
		store %9, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		%10 = load %8
		%11 = trunc i8 %10 to i1
		br %11, %12, %19
	12:
		%13 = load %5
		%14 = zext i8 %13 to i64
		%15 = getelementptr @HoutCnt, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i32
		%18 = icmp eq %17 0
		br %19
	19:
		%20 = phi [1, %4], [%18, %12]
		%21 = zext i1 %20 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %21)
		%22 = load %8
		%23 = trunc i8 %22 to i1
		br %23, %24, %31
	24:
		%25 = load %5
		%26 = zext i8 %25 to i64
		%27 = getelementptr @HinCnt, 0, %26
		%28 = load %27
		%29 = zext i8 %28 to i32
		%30 = icmp eq %29 0
		br %31
	31:
		%32 = phi [1, %19], [%30, %24]
		%33 = zext i1 %32 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %33)
		%34 = load %7
		%35 = load %5
		%36 = zext i8 %35 to i64
		%37 = getelementptr @I, 0, %36
		%38 = load %6
		%39 = zext i8 %38 to i64
		%40 = getelementptr %37, 0, %39
		store %34, %40
		%41 = call zeroext i8 @now()
		ret void

*BasicFunctionTypename: "lstig" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext, 3 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 279
	0:
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%9 = zext i1 %3 to i8
		store %9, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		%10 = load %8
		%11 = trunc i8 %10 to i1
		br %11, %12, %19
	12:
		%13 = load %5
		%14 = zext i8 %13 to i64
		%15 = getelementptr @HoutCnt, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i32
		%18 = icmp eq %17 0
		br %19
	19:
		%20 = phi [1, %4], [%18, %12]
		%21 = zext i1 %20 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %21)
		%22 = load %8
		%23 = trunc i8 %22 to i1
		br %23, %24, %31
	24:
		%25 = load %5
		%26 = zext i8 %25 to i64
		%27 = getelementptr @HinCnt, 0, %26
		%28 = load %27
		%29 = zext i8 %28 to i32
		%30 = icmp eq %29 0
		br %31
	31:
		%32 = phi [1, %19], [%30, %24]
		%33 = zext i1 %32 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %33)
		%34 = load %7
		%35 = load %5
		%36 = zext i8 %35 to i64
		%37 = getelementptr @Lvalue, 0, %36
		%38 = load %6
		%39 = zext i8 %38 to i64
		%40 = getelementptr %37, 0, %39
		store %34, %40
		%41 = call zeroext i8 @now()
		%42 = load %5
		%43 = zext i8 %42 to i64
		%44 = getelementptr @Ltstamp, 0, %43
		%45 = load %6
		%46 = zext i8 %45 to i64
		%47 = getelementptr @tupleStart, 0, %46
		%48 = load %47
		%49 = zext i8 %48 to i64
		%50 = getelementptr %44, 0, %49
		store %41, %50
		%51 = load %5
		%52 = load %6
		Unnamed Call-Instruction = call BasicVoidType @setHout(i8 zeroext %51, i8 zeroext %52)
		ret void

*BasicFunctionTypename: "confirm" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 317
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = trunc i32 %7 to i8
		store %8, %1
		%9 = load %1
		%10 = zext i8 %9 to i32
		%11 = icmp slt %10 3
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = load %1
		%14 = zext i8 %13 to i64
		%15 = getelementptr @HinCnt, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i32
		%18 = icmp sgt %17 0
		%19 = zext i1 %18 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %19)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%20 = call i32 @__VERIFIER_nondet_int()
		%21 = trunc i32 %20 to i8
		store %21, %2
		%22 = load %2
		%23 = zext i8 %22 to i32
		%24 = icmp slt %23 2
		%25 = zext i1 %24 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %25)
		%26 = load %1
		%27 = zext i8 %26 to i64
		%28 = getelementptr @Hin, 0, %27
		%29 = load %2
		%30 = zext i8 %29 to i64
		%31 = getelementptr %28, 0, %30
		%32 = load %31
		%33 = trunc i8 %32 to i1
		%34 = zext i1 %33 to i32
		%35 = icmp eq %34 1
		%36 = zext i1 %35 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %36)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%37 = call i32 @__VERIFIER_nondet_int()
		%38 = trunc i32 %37 to i8
		store %38, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%39 = load %1
		%40 = load %2
		%41 = call zeroext i8 @timeof(i8 zeroext %39, i8 zeroext %40)
		store %41, %4
		store 0, %3
		br %42
	42:
		%43 = load %3
		%44 = zext i8 %43 to i32
		%45 = icmp slt %44 3
		br %45, %46, %132
	46:
		%47 = load %1
		%48 = zext i8 %47 to i32
		%49 = load %3
		%50 = zext i8 %49 to i32
		%51 = icmp ne %48 %50
		br %51, %52, %128
	52:
		%53 = load %3
		%54 = load %2
		%55 = call zeroext i8 @timeof(i8 zeroext %53, i8 zeroext %54)
		%56 = zext i8 %55 to i32
		%57 = load %4
		%58 = zext i8 %57 to i32
		%59 = icmp ne %56 %58
		br %59, %60, %128
	60:
		%61 = load %1
		%62 = load %3
		%63 = load %2
		%64 = call zeroext i1 @link(i8 zeroext %61, i8 zeroext %62, i8 zeroext %63)
		br %64, %65, %128
	65:
		%66 = load %3
		%67 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setHout(i8 zeroext %66, i8 zeroext %67)
		%68 = load %3
		%69 = load %2
		%70 = call zeroext i8 @timeof(i8 zeroext %68, i8 zeroext %69)
		%71 = zext i8 %70 to i32
		%72 = load %4
		%73 = zext i8 %72 to i32
		%74 = icmp slt %71 %73
		br %74, %75, %127
	75:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%76 = call i32 @__VERIFIER_nondet_int()
		%77 = trunc i32 %76 to i8
		store %77, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%78 = call i32 @__VERIFIER_nondet_int()
		%79 = trunc i32 %78 to i8
		store %79, %6
		%80 = load %3
		%81 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHin(i8 zeroext %80, i8 zeroext %81)
		store 0, %5
		br %82
	82:
		%83 = load %5
		%84 = zext i8 %83 to i32
		%85 = icmp slt %84 2
		br %85, %86, %119
	86:
		%87 = load %2
		%88 = zext i8 %87 to i32
		%89 = load %5
		%90 = zext i8 %89 to i32
		%91 = add i32 %88, %90
		%92 = trunc i32 %91 to i8
		store %92, %6
		%93 = load %6
		%94 = zext i8 %93 to i32
		%95 = load %2
		%96 = zext i8 %95 to i64
		%97 = getelementptr @tupleEnd, 0, %96
		%98 = load %97
		%99 = zext i8 %98 to i32
		%100 = icmp sle %94 %99
		br %100, %101, %115
	101:
		%102 = load %1
		%103 = zext i8 %102 to i64
		%104 = getelementptr @Lvalue, 0, %103
		%105 = load %6
		%106 = zext i8 %105 to i64
		%107 = getelementptr %104, 0, %106
		%108 = load %107
		%109 = load %3
		%110 = zext i8 %109 to i64
		%111 = getelementptr @Lvalue, 0, %110
		%112 = load %6
		%113 = zext i8 %112 to i64
		%114 = getelementptr %111, 0, %113
		store %108, %114
		br %115
	115:
		br %116
	116:
		%117 = load %5
		%118 = add i8 %117, 1
		store %118, %5
		br %82
	119:
		%120 = load %4
		%121 = load %3
		%122 = zext i8 %121 to i64
		%123 = getelementptr @Ltstamp, 0, %122
		%124 = load %2
		%125 = zext i8 %124 to i64
		%126 = getelementptr %123, 0, %125
		store %120, %126
		br %127
	127:
		br %128
	128:
		br %129
	129:
		%130 = load %3
		%131 = add i8 %130, 1
		store %131, %3
		br %42
	132:
		%133 = load %1
		%134 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHin(i8 zeroext %133, i8 zeroext %134)
		ret void

*BasicFunctionTypename: "propagate" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 440
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = trunc i32 %7 to i8
		store %8, %1
		%9 = load %1
		%10 = zext i8 %9 to i32
		%11 = icmp slt %10 3
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = load %1
		%14 = zext i8 %13 to i64
		%15 = getelementptr @HoutCnt, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i32
		%18 = icmp sgt %17 0
		%19 = zext i1 %18 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %19)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%20 = call i32 @__VERIFIER_nondet_int()
		%21 = trunc i32 %20 to i8
		store %21, %2
		%22 = load %2
		%23 = zext i8 %22 to i32
		%24 = icmp slt %23 2
		%25 = zext i1 %24 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %25)
		%26 = load %1
		%27 = zext i8 %26 to i64
		%28 = getelementptr @Hout, 0, %27
		%29 = load %2
		%30 = zext i8 %29 to i64
		%31 = getelementptr %28, 0, %30
		%32 = load %31
		%33 = trunc i8 %32 to i1
		%34 = zext i1 %33 to i32
		%35 = icmp eq %34 1
		%36 = zext i1 %35 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %36)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%37 = call i32 @__VERIFIER_nondet_int()
		%38 = trunc i32 %37 to i8
		store %38, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%39 = load %1
		%40 = load %2
		%41 = call zeroext i8 @timeof(i8 zeroext %39, i8 zeroext %40)
		store %41, %4
		store 0, %3
		br %42
	42:
		%43 = load %3
		%44 = zext i8 %43 to i32
		%45 = icmp slt %44 3
		br %45, %46, %123
	46:
		%47 = load %1
		%48 = zext i8 %47 to i32
		%49 = load %3
		%50 = zext i8 %49 to i32
		%51 = icmp ne %48 %50
		br %51, %52, %119
	52:
		%53 = load %3
		%54 = load %2
		%55 = call zeroext i8 @timeof(i8 zeroext %53, i8 zeroext %54)
		%56 = zext i8 %55 to i32
		%57 = load %4
		%58 = zext i8 %57 to i32
		%59 = icmp slt %56 %58
		br %59, %60, %119
	60:
		%61 = load %1
		%62 = load %3
		%63 = load %2
		%64 = call zeroext i1 @link(i8 zeroext %61, i8 zeroext %62, i8 zeroext %63)
		br %64, %65, %119
	65:
		%66 = load %3
		%67 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setHout(i8 zeroext %66, i8 zeroext %67)
		%68 = load %3
		%69 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHin(i8 zeroext %68, i8 zeroext %69)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%70 = call i32 @__VERIFIER_nondet_int()
		%71 = trunc i32 %70 to i8
		store %71, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%72 = call i32 @__VERIFIER_nondet_int()
		%73 = trunc i32 %72 to i8
		store %73, %6
		store 0, %5
		br %74
	74:
		%75 = load %5
		%76 = zext i8 %75 to i32
		%77 = icmp slt %76 2
		br %77, %78, %111
	78:
		%79 = load %2
		%80 = zext i8 %79 to i32
		%81 = load %5
		%82 = zext i8 %81 to i32
		%83 = add i32 %80, %82
		%84 = trunc i32 %83 to i8
		store %84, %6
		%85 = load %6
		%86 = zext i8 %85 to i32
		%87 = load %2
		%88 = zext i8 %87 to i64
		%89 = getelementptr @tupleEnd, 0, %88
		%90 = load %89
		%91 = zext i8 %90 to i32
		%92 = icmp sle %86 %91
		br %92, %93, %107
	93:
		%94 = load %1
		%95 = zext i8 %94 to i64
		%96 = getelementptr @Lvalue, 0, %95
		%97 = load %6
		%98 = zext i8 %97 to i64
		%99 = getelementptr %96, 0, %98
		%100 = load %99
		%101 = load %3
		%102 = zext i8 %101 to i64
		%103 = getelementptr @Lvalue, 0, %102
		%104 = load %6
		%105 = zext i8 %104 to i64
		%106 = getelementptr %103, 0, %105
		store %100, %106
		br %107
	107:
		br %108
	108:
		%109 = load %5
		%110 = add i8 %109, 1
		store %110, %5
		br %74
	111:
		%112 = load %4
		%113 = load %3
		%114 = zext i8 %113 to i64
		%115 = getelementptr @Ltstamp, 0, %114
		%116 = load %2
		%117 = zext i8 %116 to i64
		%118 = getelementptr %115, 0, %117
		store %112, %118
		br %119
	119:
		br %120
	120:
		%121 = load %3
		%122 = add i8 %121, 1
		store %122, %3
		br %42
	123:
		%124 = load %1
		%125 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHout(i8 zeroext %124, i8 zeroext %125)
		ret void

*BasicFunctionTypename: "init" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 552
	0:
		%1 = alloca [3 x [2 x i8]], align 1
		%2 = alloca [3 x [1 x i8]], align 1
		%3 = alloca [3 x [2 x i8]], align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [2 x i8]] %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [1 x i8]] %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [2 x i8]] %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%6 = call i32 @__VERIFIER_nondet_int()
		%7 = trunc i32 %6 to i8
		store %7, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%8 = call i32 @__VERIFIER_nondet_int()
		%9 = trunc i32 %8 to i8
		store %9, %5
		store 0, %4
		br %10
	10:
		%11 = load %4
		%12 = zext i8 %11 to i32
		%13 = icmp slt %12 3
		br %13, %14, %76
	14:
		store 0, %5
		br %15
	15:
		%16 = load %5
		%17 = zext i8 %16 to i32
		%18 = icmp slt %17 2
		br %18, %19, %31
	19:
		%20 = call i32 @__VERIFIER_nondet_int()
		%21 = trunc i32 %20 to i8
		%22 = load %4
		%23 = zext i8 %22 to i64
		%24 = getelementptr %1, 0, %23
		%25 = load %5
		%26 = zext i8 %25 to i64
		%27 = getelementptr %24, 0, %26
		store %21, %27
		br %28
	28:
		%29 = load %5
		%30 = add i8 %29, 1
		store %30, %5
		br %15
	31:
		store 0, %5
		br %32
	32:
		%33 = load %5
		%34 = zext i8 %33 to i32
		%35 = icmp slt %34 2
		br %35, %36, %66
	36:
		%37 = call i32 @__VERIFIER_nondet_int()
		%38 = trunc i32 %37 to i8
		%39 = load %4
		%40 = zext i8 %39 to i64
		%41 = getelementptr %3, 0, %40
		%42 = load %5
		%43 = zext i8 %42 to i64
		%44 = getelementptr %41, 0, %43
		store %38, %44
		%45 = load %4
		%46 = zext i8 %45 to i64
		%47 = getelementptr @Ltstamp, 0, %46
		%48 = load %5
		%49 = zext i8 %48 to i64
		%50 = getelementptr %47, 0, %49
		store 0, %50
		%51 = load %4
		%52 = zext i8 %51 to i64
		%53 = getelementptr @Hin, 0, %52
		%54 = load %5
		%55 = zext i8 %54 to i64
		%56 = getelementptr %53, 0, %55
		store 0, %56
		%57 = load %4
		%58 = zext i8 %57 to i64
		%59 = getelementptr @Hout, 0, %58
		%60 = load %5
		%61 = zext i8 %60 to i64
		%62 = getelementptr %59, 0, %61
		store 0, %62
		br %63
	63:
		%64 = load %5
		%65 = add i8 %64, 1
		store %65, %5
		br %32
	66:
		%67 = load %4
		%68 = zext i8 %67 to i64
		%69 = getelementptr @HinCnt, 0, %68
		store 0, %69
		%70 = load %4
		%71 = zext i8 %70 to i64
		%72 = getelementptr @HoutCnt, 0, %71
		store 0, %72
		br %73
	73:
		%74 = load %4
		%75 = add i8 %74, 1
		store %75, %4
		br %10
	76:
		%77 = getelementptr %2, 0, 0
		%78 = getelementptr %77, 0, 0
		store 2, %78
		%79 = getelementptr %2, 0, 1
		%80 = getelementptr %79, 0, 0
		store 2, %80
		%81 = getelementptr %2, 0, 2
		%82 = getelementptr %81, 0, 0
		store 2, %82
		%83 = getelementptr %3, 0, 0
		%84 = getelementptr %83, 0, 0
		%85 = load %84
		%86 = sext i8 %85 to i32
		%87 = icmp eq %86 -1
		br %87, %94, %88
	88:
		%89 = getelementptr %3, 0, 0
		%90 = getelementptr %89, 0, 0
		%91 = load %90
		%92 = sext i8 %91 to i32
		%93 = icmp eq %92 1
		br %94
	94:
		%95 = phi [1, %76], [%93, %88]
		%96 = zext i1 %95 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %96)
		%97 = getelementptr %3, 0, 1
		%98 = getelementptr %97, 0, 0
		%99 = load %98
		%100 = sext i8 %99 to i32
		%101 = icmp eq %100 -1
		br %101, %108, %102
	102:
		%103 = getelementptr %3, 0, 1
		%104 = getelementptr %103, 0, 0
		%105 = load %104
		%106 = sext i8 %105 to i32
		%107 = icmp eq %106 1
		br %108
	108:
		%109 = phi [1, %94], [%107, %102]
		%110 = zext i1 %109 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %110)
		%111 = getelementptr %3, 0, 2
		%112 = getelementptr %111, 0, 0
		%113 = load %112
		%114 = sext i8 %113 to i32
		%115 = icmp eq %114 -1
		br %115, %122, %116
	116:
		%117 = getelementptr %3, 0, 2
		%118 = getelementptr %117, 0, 0
		%119 = load %118
		%120 = sext i8 %119 to i32
		%121 = icmp eq %120 1
		br %122
	122:
		%123 = phi [1, %108], [%121, %116]
		%124 = zext i1 %123 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %124)
		%125 = getelementptr %3, 0, 0
		%126 = getelementptr %125, 0, 1
		%127 = load %126
		%128 = sext i8 %127 to i32
		%129 = icmp eq %128 -1
		br %129, %136, %130
	130:
		%131 = getelementptr %3, 0, 0
		%132 = getelementptr %131, 0, 1
		%133 = load %132
		%134 = sext i8 %133 to i32
		%135 = icmp eq %134 1
		br %136
	136:
		%137 = phi [1, %122], [%135, %130]
		%138 = zext i1 %137 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %138)
		%139 = getelementptr %3, 0, 1
		%140 = getelementptr %139, 0, 1
		%141 = load %140
		%142 = sext i8 %141 to i32
		%143 = icmp eq %142 -1
		br %143, %150, %144
	144:
		%145 = getelementptr %3, 0, 1
		%146 = getelementptr %145, 0, 1
		%147 = load %146
		%148 = sext i8 %147 to i32
		%149 = icmp eq %148 1
		br %150
	150:
		%151 = phi [1, %136], [%149, %144]
		%152 = zext i1 %151 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %152)
		%153 = getelementptr %3, 0, 2
		%154 = getelementptr %153, 0, 1
		%155 = load %154
		%156 = sext i8 %155 to i32
		%157 = icmp eq %156 -1
		br %157, %164, %158
	158:
		%159 = getelementptr %3, 0, 2
		%160 = getelementptr %159, 0, 1
		%161 = load %160
		%162 = sext i8 %161 to i32
		%163 = icmp eq %162 1
		br %164
	164:
		%165 = phi [1, %150], [%163, %158]
		%166 = zext i1 %165 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %166)
		%167 = getelementptr %1, 0, 0
		%168 = getelementptr %167, 0, 0
		%169 = load %168
		%170 = sext i8 %169 to i32
		%171 = icmp sge %170 0
		br %171, %172, %178
	172:
		%173 = getelementptr %1, 0, 0
		%174 = getelementptr %173, 0, 0
		%175 = load %174
		%176 = sext i8 %175 to i32
		%177 = icmp slt %176 5
		br %178
	178:
		%179 = phi [0, %164], [%177, %172]
		%180 = zext i1 %179 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %180)
		%181 = getelementptr %1, 0, 1
		%182 = getelementptr %181, 0, 0
		%183 = load %182
		%184 = sext i8 %183 to i32
		%185 = icmp sge %184 0
		br %185, %186, %192
	186:
		%187 = getelementptr %1, 0, 1
		%188 = getelementptr %187, 0, 0
		%189 = load %188
		%190 = sext i8 %189 to i32
		%191 = icmp slt %190 5
		br %192
	192:
		%193 = phi [0, %178], [%191, %186]
		%194 = zext i1 %193 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %194)
		%195 = getelementptr %1, 0, 2
		%196 = getelementptr %195, 0, 0
		%197 = load %196
		%198 = sext i8 %197 to i32
		%199 = icmp sge %198 0
		br %199, %200, %206
	200:
		%201 = getelementptr %1, 0, 2
		%202 = getelementptr %201, 0, 0
		%203 = load %202
		%204 = sext i8 %203 to i32
		%205 = icmp slt %204 5
		br %206
	206:
		%207 = phi [0, %192], [%205, %200]
		%208 = zext i1 %207 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %208)
		%209 = getelementptr %1, 0, 0
		%210 = getelementptr %209, 0, 1
		%211 = load %210
		%212 = sext i8 %211 to i32
		%213 = icmp sge %212 0
		br %213, %214, %220
	214:
		%215 = getelementptr %1, 0, 0
		%216 = getelementptr %215, 0, 1
		%217 = load %216
		%218 = sext i8 %217 to i32
		%219 = icmp slt %218 5
		br %220
	220:
		%221 = phi [0, %206], [%219, %214]
		%222 = zext i1 %221 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %222)
		%223 = getelementptr %1, 0, 1
		%224 = getelementptr %223, 0, 1
		%225 = load %224
		%226 = sext i8 %225 to i32
		%227 = icmp sge %226 0
		br %227, %228, %234
	228:
		%229 = getelementptr %1, 0, 1
		%230 = getelementptr %229, 0, 1
		%231 = load %230
		%232 = sext i8 %231 to i32
		%233 = icmp slt %232 5
		br %234
	234:
		%235 = phi [0, %220], [%233, %228]
		%236 = zext i1 %235 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %236)
		%237 = getelementptr %1, 0, 2
		%238 = getelementptr %237, 0, 1
		%239 = load %238
		%240 = sext i8 %239 to i32
		%241 = icmp sge %240 0
		br %241, %242, %248
	242:
		%243 = getelementptr %1, 0, 2
		%244 = getelementptr %243, 0, 1
		%245 = load %244
		%246 = sext i8 %245 to i32
		%247 = icmp slt %246 5
		br %248
	248:
		%249 = phi [0, %234], [%247, %242]
		%250 = zext i1 %249 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %250)
		%251 = call zeroext i8 @now()
		%252 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@778f927f
		%253 = zext i8 %252 to i64
		%254 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@77e82096, 0, %253
		store %251, %254
		%255 = call zeroext i8 @now()
		%256 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@dfbe847
		%257 = zext i8 %256 to i64
		%258 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6bbc67c9, 0, %257
		store %255, %258
		%259 = call zeroext i8 @now()
		%260 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@60ab1cab
		%261 = zext i8 %260 to i64
		%262 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@56716cb8, 0, %261
		store %259, %262
		%263 = call zeroext i8 @now()
		%264 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@41a0fe1
		%265 = zext i8 %264 to i64
		%266 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@c10b284, 0, %265
		store %263, %266
		%267 = call zeroext i8 @now()
		%268 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3466b9e9
		%269 = zext i8 %268 to i64
		%270 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@69af0771, 0, %269
		store %267, %270
		%271 = call zeroext i8 @now()
		%272 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3d9e78a2
		%273 = zext i8 %272 to i64
		%274 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@34937907, 0, %273
		store %271, %274
		%275 = call zeroext i8 @now()
		store 0, %4
		br %276
	276:
		%277 = load %4
		%278 = zext i8 %277 to i32
		%279 = icmp slt %278 3
		br %279, %280, %350
	280:
		store 0, %5
		br %281
	281:
		%282 = load %5
		%283 = zext i8 %282 to i32
		%284 = icmp slt %283 1
		br %284, %285, %302
	285:
		%286 = load %4
		%287 = zext i8 %286 to i64
		%288 = getelementptr %2, 0, %287
		%289 = load %5
		%290 = zext i8 %289 to i64
		%291 = getelementptr %288, 0, %290
		%292 = load %291
		%293 = load %4
		%294 = zext i8 %293 to i64
		%295 = getelementptr @pc, 0, %294
		%296 = load %5
		%297 = zext i8 %296 to i64
		%298 = getelementptr %295, 0, %297
		store %292, %298
		br %299
	299:
		%300 = load %5
		%301 = add i8 %300, 1
		store %301, %5
		br %281
	302:
		store 0, %5
		br %303
	303:
		%304 = load %5
		%305 = zext i8 %304 to i32
		%306 = icmp slt %305 2
		br %306, %307, %324
	307:
		%308 = load %4
		%309 = zext i8 %308 to i64
		%310 = getelementptr %1, 0, %309
		%311 = load %5
		%312 = zext i8 %311 to i64
		%313 = getelementptr %310, 0, %312
		%314 = load %313
		%315 = load %4
		%316 = zext i8 %315 to i64
		%317 = getelementptr @I, 0, %316
		%318 = load %5
		%319 = zext i8 %318 to i64
		%320 = getelementptr %317, 0, %319
		store %314, %320
		br %321
	321:
		%322 = load %5
		%323 = add i8 %322, 1
		store %323, %5
		br %303
	324:
		store 0, %5
		br %325
	325:
		%326 = load %5
		%327 = zext i8 %326 to i32
		%328 = icmp slt %327 2
		br %328, %329, %346
	329:
		%330 = load %4
		%331 = zext i8 %330 to i64
		%332 = getelementptr %3, 0, %331
		%333 = load %5
		%334 = zext i8 %333 to i64
		%335 = getelementptr %332, 0, %334
		%336 = load %335
		%337 = load %4
		%338 = zext i8 %337 to i64
		%339 = getelementptr @Lvalue, 0, %338
		%340 = load %5
		%341 = zext i8 %340 to i64
		%342 = getelementptr %339, 0, %341
		store %336, %342
		br %343
	343:
		%344 = load %5
		%345 = add i8 %344, 1
		store %345, %5
		br %325
	346:
		br %347
	347:
		%348 = load %4
		%349 = add i8 %348, 1
		store %349, %4
		br %276
	350:
		ret void

*BasicFunctionTypename: "_0_2" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 812
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%5 = load %2
		%6 = sext i32 %5 to i64
		%7 = getelementptr @I, 0, %6
		%8 = getelementptr %7, 0, 0
		%9 = load %8
		%10 = sext i8 %9 to i32
		%11 = load %2
		%12 = sext i32 %11 to i64
		%13 = getelementptr @Lvalue, 0, %12
		%14 = getelementptr %13, 0, 0
		%15 = load %14
		%16 = sext i8 %15 to i32
		%17 = add i32 %10, %16
		%18 = trunc i32 %17 to i8
		%19 = call signext i8 @mod(i8 signext %18, i8 signext 5)
		store %19, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%20 = load %2
		%21 = sext i32 %20 to i64
		%22 = getelementptr @I, 0, %21
		%23 = getelementptr %22, 0, 1
		%24 = load %23
		%25 = sext i8 %24 to i32
		%26 = load %2
		%27 = sext i32 %26 to i64
		%28 = getelementptr @Lvalue, 0, %27
		%29 = getelementptr %28, 0, 1
		%30 = load %29
		%31 = sext i8 %30 to i32
		%32 = add i32 %25, %31
		%33 = trunc i32 %32 to i8
		%34 = call signext i8 @mod(i8 signext %33, i8 signext 5)
		store %34, %4
		%35 = load %2
		%36 = trunc i32 %35 to i8
		%37 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %36, i8 zeroext 0, i8 signext %37, i1 zeroext 1)
		%38 = load %2
		%39 = trunc i32 %38 to i8
		%40 = load %4
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %39, i8 zeroext 1, i8 signext %40, i1 zeroext 0)
		%41 = load %2
		%42 = trunc i32 %41 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %42, i8 zeroext 0)
		%43 = load %2
		%44 = trunc i32 %43 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %44, i8 zeroext 1)
		%45 = load %2
		%46 = sext i32 %45 to i64
		%47 = getelementptr @pc, 0, %46
		%48 = getelementptr %47, 0, 0
		store 2, %48
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 845
	0:
		%1 = alloca i32, align 4
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @init()
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		store 0, %2
		br %4
	4:
		%5 = call i32 @__VERIFIER_nondet_int()
		%6 = icmp ne %5 0
		br %6, %7, %31
	7:
		%8 = load %2
		%9 = zext i8 %8 to i32
		%10 = icmp slt %9 3
		%11 = zext i1 %10 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %11)
		%12 = load %2
		%13 = zext i8 %12 to i64
		%14 = getelementptr @pc, 0, %13
		%15 = getelementptr %14, 0, 0
		%16 = load %15
		%17 = zext i8 %16 to i32
		switch %17, %21 [2, %18]
	18:
		%19 = load %2
		%20 = zext i8 %19 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_2(i32 %20)
		br %22
	21:
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 0)
		br %22
	22:
		%23 = load %2
		%24 = zext i8 %23 to i32
		%25 = icmp eq %24 2
		br %25, %26, %27
	26:
		store 0, %2
		br %30
	27:
		%28 = load %2
		%29 = add i8 %28, 1
		store %29, %2
		br %30
	30:
		br %40
	31:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%32 = call i32 @__VERIFIER_nondet_int()
		%33 = icmp ne %32 0
		%34 = zext i1 %33 to i8
		store %34, %3
		%35 = load %3
		%36 = trunc i8 %35 to i1
		br %36, %37, %38
	37:
		Unnamed Call-Instruction = call BasicVoidType @propagate()
		br %39
	38:
		Unnamed Call-Instruction = call BasicVoidType @confirm()
		br %39
	39:
		br %40
	40:
		%41 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@353b278d
		%42 = sext i8 %41 to i32
		%43 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@243e3ad4
		%44 = sext i8 %43 to i32
		%45 = icmp eq %42 %44
		br %45, %46, %113
	46:
		%47 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6a2b1d99
		%48 = sext i8 %47 to i32
		%49 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@45df1a9a
		%50 = sext i8 %49 to i32
		%51 = icmp eq %48 %50
		br %51, %52, %113
	52:
		%53 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@29345ae3
		%54 = sext i8 %53 to i32
		%55 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7c893d8b
		%56 = sext i8 %55 to i32
		%57 = icmp eq %54 %56
		br %57, %58, %113
	58:
		%59 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4efc3056
		%60 = sext i8 %59 to i32
		%61 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@734af8d9
		%62 = sext i8 %61 to i32
		%63 = icmp eq %60 %62
		br %63, %64, %113
	64:
		%65 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@78a24711
		%66 = sext i8 %65 to i32
		%67 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4d7258eb
		%68 = sext i8 %67 to i32
		%69 = icmp eq %66 %68
		br %69, %70, %113
	70:
		%71 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@62a3af93
		%72 = sext i8 %71 to i32
		%73 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@468b0f2e
		%74 = sext i8 %73 to i32
		%75 = icmp eq %72 %74
		br %75, %76, %113
	76:
		%77 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2cfb5221
		%78 = sext i8 %77 to i32
		%79 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7391f255
		%80 = sext i8 %79 to i32
		%81 = icmp eq %78 %80
		br %81, %82, %113
	82:
		%83 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@cb11483
		%84 = sext i8 %83 to i32
		%85 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@125d8844
		%86 = sext i8 %85 to i32
		%87 = icmp eq %84 %86
		br %87, %88, %113
	88:
		%89 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6441aa74
		%90 = sext i8 %89 to i32
		%91 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@18beeff3
		%92 = sext i8 %91 to i32
		%93 = icmp eq %90 %92
		br %93, %94, %113
	94:
		%95 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1caff56b
		%96 = sext i8 %95 to i32
		%97 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@62ce4112
		%98 = sext i8 %97 to i32
		%99 = icmp eq %96 %98
		br %99, %100, %113
	100:
		%101 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@b355535
		%102 = sext i8 %101 to i32
		%103 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@641bf2d7
		%104 = sext i8 %103 to i32
		%105 = icmp eq %102 %104
		br %105, %106, %113
	106:
		%107 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@77c5792
		%108 = sext i8 %107 to i32
		%109 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@17aa40be
		%110 = sext i8 %109 to i32
		%111 = icmp eq %108 %110
		br %111, %112, %113
	112:
		ret 0
	113:
		br %4


Analyze Termination of all function calls matching the pattern:
main()/hpcwork/ff862203/termcomp25/benchmarks/MiqBl.c:297:33: warning: self-comparison always evaluates to true [-Wtautological-compare]
    if ((((((((((((Lvalue[0][0] == Lvalue[0][0]) && (Lvalue[0][1] == Lvalue[0][1])) && (Lvalue[0][0] == Lvalue[1][0])) && (Lvalue[0][1] == Lvalue[1][1])) && (Lvalue[0][0] == Lvalue[2][0])) && (Lvalue[0][1] == Lvalue[2][1])) && (Lvalue[1][0] == Lvalue[1][0])) && (Lvalue[1][1] == Lvalue[1][1])) && (Lvalue[1][0] == Lvalue[2][0])) && (Lvalue[1][1] == Lvalue[2][1])) && (Lvalue[2][0] == Lvalue[2][0])) && (Lvalue[2][1] == Lvalue[2][1]))
                                ^
/hpcwork/ff862203/termcomp25/benchmarks/MiqBl.c:297:67: warning: self-comparison always evaluates to true [-Wtautological-compare]
    if ((((((((((((Lvalue[0][0] == Lvalue[0][0]) && (Lvalue[0][1] == Lvalue[0][1])) && (Lvalue[0][0] == Lvalue[1][0])) && (Lvalue[0][1] == Lvalue[1][1])) && (Lvalue[0][0] == Lvalue[2][0])) && (Lvalue[0][1] == Lvalue[2][1])) && (Lvalue[1][0] == Lvalue[1][0])) && (Lvalue[1][1] == Lvalue[1][1])) 
&& (Lvalue[1][0] == Lvalue[2][0])) && (Lvalue[1][1] == Lvalue[2][1])) && (Lvalue[2][0] == Lvalue[2][0])) && (Lvalue[2][1] == Lvalue[2][1]))
                                                                  ^
/hpcwork/ff862203/termcomp25/benchmarks/MiqBl.c:297:242: warning: self-comparison always evaluates to true [-Wtautological-compare]
    if ((((((((((((Lvalue[0][0] == Lvalue[0][0]) && (Lvalue[0][1] == Lvalue[0][1])) && (Lvalue[0][0] == Lvalue[1][0])) && (Lvalue[0][1] == Lvalue[1][1])) && (Lvalue[0][0] == Lvalue[2][0])) && (Lvalue[0][1] == Lvalue[2][1])) && (Lvalue[1][0] == Lvalue[1][0])) && (Lvalue[1][1] == Lvalue[1][1])) && (Lvalue[1][0] == Lvalue[2][0])) && (Lvalue[1][1] == Lvalue[2][1])) && (Lvalue[2][0] == Lvalue[2][0])) && (Lvalue[2][1] == Lvalue[2][1]))
                                                                                                                                                                                                                                                 ^
