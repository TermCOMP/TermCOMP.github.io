YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/U95hC.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 21 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1284 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 21 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 10 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (17) YES
    (18) LLVM Symbolic Execution SCC
        (19) SCC2IRS [SOUND, 23 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (24) YES
    (25) LLVM Symbolic Execution SCC
        (26) SCC2IRS [SOUND, 35 ms]
        (27) IntTRS
        (28) TerminationGraphProcessor [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/U95hC.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/U95hC.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		store 0, %2
		br %7
	7:
		%8 = load %3
		%9 = icmp sge %8 0
		br %9, %10, %23
	10:
		store 1, %4
		br %11
	11:
		%12 = load %3
		%13 = load %4
		%14 = icmp sgt %12 %13
		br %14, %15, %20
	15:
		%16 = load %4
		%17 = mul i32 2, %16
		store %17, %4
		%18 = load %2
		%19 = add i32 %18, 1
		store %19, %2
		br %11
	20:
		%21 = load %3
		%22 = sub i32 %21, 1
		store %22, %3
		br %7
	23:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 38 rulesP rules:
f_448(v688, v689, v690, v691, v692, v693, v694, 1, v696, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 2, 4) -> f_449(v688, v689, v690, v691, v692, v693, v694, 1, v696, v707, v699, v700, v701, v702, v703, v704, v705, 0, 3, 2, 4) :|: v707 = 2 * v696 && 2 <= v707
f_449(v688, v689, v690, v691, v692, v693, v694, 1, v696, v707, v699, v700, v701, v702, v703, v704, v705, 0, 3, 2, 4) -> f_450(v688, v689, v690, v691, v692, v693, v694, 1, v696, v707, v699, v700, v701, v702, v703, v704, v705, 0, 3, 2, 4) :|: TRUE
f_450(v688, v689, v690, v691, v692, v693, v694, 1, v696, v707, v699, v700, v701, v702, v703, v704, v705, 0, 3, 2, 4) -> f_451(v688, v689, v690, v691, v692, v693, v694, 1, v696, v707, v700, v701, v702, v703, v704, v705, 0, 3, 2, 4) :|: 0 = 0
f_451(v688, v689, v690, v691, v692, v693, v694, 1, v696, v707, v700, v701, v702, v703, v704, v705, 0, 3, 2, 4) -> f_452(v688, v689, v690, v691, v692, v693, v694, 1, v696, v707, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) :|: v709 = 1 + v700 && 2 <= v709
f_452(v688, v689, v690, v691, v692, v693, v694, 1, v696, v707, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) -> f_453(v688, v689, v690, v691, v692, v693, v694, 1, v696, v707, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) :|: TRUE
f_453(v688, v689, v690, v691, v692, v693, v694, 1, v696, v707, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) -> f_454(v688, v689, v690, v691, v692, v693, v694, 1, v696, v707, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) :|: TRUE
f_454(v688, v689, v690, v691, v692, v693, v694, 1, v696, v707, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) -> f_455(v688, v689, v690, v691, v692, v693, v694, 1, v696, v707, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) :|: 0 = 0
f_455(v688, v689, v690, v691, v692, v693, v694, 1, v696, v707, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) -> f_456(v688, v689, v690, v691, v692, v693, v694, 1, v707, v696, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) :|: 0 = 0
f_456(v688, v689, v690, v691, v692, v693, v694, 1, v707, v696, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) -> f_457(v688, v689, v690, v691, v692, v693, v694, 1, v707, v696, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) :|: v707 < v694 && 3 <= v694 && 4 <= v701 && 4 <= v692
f_456(v688, v689, v690, v691, v692, v693, v694, 1, v707, v696, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) -> f_458(v688, v689, v690, v691, v692, v693, v694, 1, v707, v696, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) :|: v694 <= v707
f_457(v688, v689, v690, v691, v692, v693, v694, 1, v707, v696, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) -> f_459(v688, v689, v690, v691, v692, v693, v694, 1, v707, v696, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) :|: 0 = 0
f_459(v688, v689, v690, v691, v692, v693, v694, 1, v707, v696, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) -> f_461(v688, v689, v690, v691, v692, v693, v694, 1, v707, v696, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) :|: TRUE
f_461(v688, v689, v690, v691, v692, v693, v694, 1, v707, v696, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) -> f_447(v688, v689, v690, v691, v692, v693, v694, 1, v707, v696, v707, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) :|: TRUE
f_447(v688, v689, v690, v691, v692, v693, v694, 1, v696, v697, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 2, 4) -> f_448(v688, v689, v690, v691, v692, v693, v694, 1, v696, v698, v699, v700, v701, v702, v703, v704, v705, 0, 3, 2, 4) :|: 0 = 0
f_458(v688, v689, v690, v691, v692, v693, v694, 1, v707, v696, v700, v709, v701, v702, v703, v704, v705, 0, 3, 2, 4) -> f_460(v688, v689, v690, v691, v692, v693, v694, 1, v707, 0, v696, v700, v709, v701, v702, v703, v704, v705, 3, 2, 4) :|: 0 = 0
f_460(v688, v689, v690, v691, v692, v693, v694, 1, v707, 0, v696, v700, v709, v701, v702, v703, v704, v705, 3, 2, 4) -> f_462(v688, v689, v690, v691, v692, v693, v694, 1, v707, 0, v696, v700, v709, v701, v702, v703, v704, v705, 3, 2, 4) :|: TRUE
f_462(v688, v689, v690, v691, v692, v693, v694, 1, v707, 0, v696, v700, v709, v701, v702, v703, v704, v705, 3, 2, 4) -> f_481(v688, v689, v690, v691, v692, v693, v694, 1, v707, 0, v696, v707, v700, v709, v701, v702, v703, v704, v705, 3, 2, 4) :|: TRUE
f_481(v933, v934, v935, v936, v937, v938, v939, 1, v941, 0, v943, v944, v945, v946, v947, v948, v949, v950, v951, 3, 2, 4) -> f_482(v933, v934, v935, v936, v937, v938, v939, 1, v941, 0, v943, v944, v945, v946, v948, v949, v950, v951, 3, 2, 4) :|: 0 = 0
f_482(v933, v934, v935, v936, v937, v938, v939, 1, v941, 0, v943, v944, v945, v946, v948, v949, v950, v951, 3, 2, 4) -> f_483(v933, v934, v935, v936, v937, v938, v939, 1, v941, 0, v943, v944, v945, v946, v952, v948, v949, v950, v951, 3, 2, 4) :|: 1 + v952 = v939 && 0 <= 1 + v952
f_483(v933, v934, v935, v936, v937, v938, v939, 1, v941, 0, v943, v944, v945, v946, v952, v948, v949, v950, v951, 3, 2, 4) -> f_484(v933, v934, v935, v936, v937, v938, v939, 1, v941, 0, v943, v944, v945, v946, v952, v948, v949, v950, v951, 3, 2, 4) :|: TRUE
f_484(v933, v934, v935, v936, v937, v938, v939, 1, v941, 0, v943, v944, v945, v946, v952, v948, v949, v950, v951, 3, 2, 4) -> f_485(v933, v934, v935, v936, v937, v938, v939, 1, v941, 0, v943, v944, v945, v946, v952, v948, v949, v950, v951, 3, 2, 4) :|: TRUE
f_485(v933, v934, v935, v936, v937, v938, v939, 1, v941, 0, v943, v944, v945, v946, v952, v948, v949, v950, v951, 3, 2, 4) -> f_486(v933, v934, v935, v936, v937, v938, v952, 1, v939, v941, 0, v943, v944, v945, v946, v948, v949, v950, v951, 3, 2, 4) :|: 0 = 0
f_486(v933, v934, v935, v936, v937, v938, v952, 1, v939, v941, 0, v943, v944, v945, v946, v948, v949, v950, v951, 3, 2, 4) -> f_487(v933, v934, v935, v936, v937, v938, v952, 1, v939, v941, 0, v943, v944, v945, v946, v948, v949, v950, v951, 3, 2, 4) :|: 0 <= v952 && 1 <= v939
f_487(v933, v934, v935, v936, v937, v938, v952, 1, v939, v941, 0, v943, v944, v945, v946, v948, v949, v950, v951, 3, 2, 4) -> f_489(v933, v934, v935, v936, v937, v938, v952, 1, v939, v941, 0, v943, v944, v945, v946, v948, v949, v950, v951, 3, 2, 4) :|: 0 = 0
f_489(v933, v934, v935, v936, v937, v938, v952, 1, v939, v941, 0, v943, v944, v945, v946, v948, v949, v950, v951, 3, 2, 4) -> f_491(v933, v934, v935, v936, v937, v938, v952, 1, v939, v941, 0, v943, v944, v945, v946, v948, v949, v950, v951, 3, 2, 4) :|: TRUE
f_491(v933, v934, v935, v936, v937, v938, v952, 1, v939, v941, 0, v943, v944, v945, v946, v948, v949, v950, v951, 3, 2, 4) -> f_493(v933, v934, v935, v936, v937, v938, v952, 1, v939, v941, 0, v943, v944, v945, v946, v948, v949, v950, v951, 3, 2, 4) :|: TRUE
f_493(v933, v934, v935, v936, v937, v938, v952, 1, v939, v941, 0, v943, v944, v945, v946, v948, v949, v950, v951, 3, 2, 4) -> f_494(v933, v934, v935, v936, v937, v938, v952, 1, v939, v941, 0, v943, v944, v945, v946, v948, v949, v950, v951, 3, 2, 4) :|: TRUE
f_494(v933, v934, v935, v936, v937, v938, v952, 1, v939, v941, 0, v943, v944, v945, v946, v948, v949, v950, v951, 3, 2, 4) -> f_472(v933, v934, v935, v936, v937, v938, v952, 1, v939, v941, 0, v943, v944, v945, v946, v948, v949, v950, v951, 3, 2, 4) :|: TRUE
f_472(v849, v850, v851, v852, v853, v854, v855, 1, v857, v858, 0, v860, v861, v862, v863, v864, v865, v866, v867, 3, 2, 4) -> f_473(v849, v850, v851, v852, v853, v854, v855, 1, v858, 0, v860, v861, v862, v863, v857, v864, v865, v866, v867, 3, 2, 4) :|: 0 = 0
f_473(v849, v850, v851, v852, v853, v854, v855, 1, v858, 0, v860, v861, v862, v863, v857, v864, v865, v866, v867, 3, 2, 4) -> f_474(v849, v850, v851, v852, v853, v854, v855, 1, 0, v860, v861, v862, v863, v857, v864, v865, v866, v867, 3, 2, 4) :|: 0 = 0
f_474(v849, v850, v851, v852, v853, v854, v855, 1, 0, v860, v861, v862, v863, v857, v864, v865, v866, v867, 3, 2, 4) -> f_475(v849, v850, v851, v852, v853, v854, v855, 1, 0, v860, v861, v862, v863, v857, v864, v865, v866, v867, 3, 2, 4) :|: 1 < v855 && 3 <= v857 && 3 <= v853 && 4 <= v861 && 2 <= v860
f_474(v849, v850, v851, v852, v853, v854, v855, 1, 0, v860, v861, v862, v863, v857, v864, v865, v866, v867, 3, 2, 4) -> f_476(v849, v850, v851, v852, v853, v854, v855, 1, 0, v860, v861, v862, v863, v857, v864, v865, v866, v867, 3, 2, 4) :|: v855 <= 1 && v857 <= 2
f_475(v849, v850, v851, v852, v853, v854, v855, 1, 0, v860, v861, v862, v863, v857, v864, v865, v866, v867, 3, 2, 4) -> f_477(v849, v850, v851, v852, v853, v854, v855, 1, v860, v861, v862, v863, v857, v864, v865, v866, v867, 0, 3, 2, 4) :|: 0 = 0
f_477(v849, v850, v851, v852, v853, v854, v855, 1, v860, v861, v862, v863, v857, v864, v865, v866, v867, 0, 3, 2, 4) -> f_479(v849, v850, v851, v852, v853, v854, v855, 1, v860, v861, v862, v863, v857, v864, v865, v866, v867, 0, 3, 2, 4) :|: TRUE
f_479(v849, v850, v851, v852, v853, v854, v855, 1, v860, v861, v862, v863, v857, v864, v865, v866, v867, 0, 3, 2, 4) -> f_447(v849, v850, v851, v852, v853, v854, v855, 1, 1, v860, v861, v862, v863, v857, v864, v865, v866, v867, 0, 3, 2, 4) :|: TRUE
f_476(v849, v850, v851, v852, v853, v854, v855, 1, 0, v860, v861, v862, v863, v857, v864, v865, v866, v867, 3, 2, 4) -> f_478(v849, v850, v851, v852, v853, v854, v855, 1, 0, v860, v861, v862, v863, v857, v864, v865, v866, v867, 3, 2, 4) :|: 0 = 0
f_478(v849, v850, v851, v852, v853, v854, v855, 1, 0, v860, v861, v862, v863, v857, v864, v865, v866, v867, 3, 2, 4) -> f_480(v849, v850, v851, v852, v853, v854, v855, 1, 0, v860, v861, v862, v863, v857, v864, v865, v866, v867, 3, 2, 4) :|: TRUE
f_480(v849, v850, v851, v852, v853, v854, v855, 1, 0, v860, v861, v862, v863, v857, v864, v865, v866, v867, 3, 2, 4) -> f_481(v849, v850, v851, v852, v853, v854, v855, 1, 1, 0, v860, v861, v862, v863, v857, v864, v865, v866, v867, 3, 2, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_448(v688:0, v689:0, v690:0, v691:0, v692:0, v693:0, v694:0, 1, v696:0, v698:0, v699:0, v700:0, v701:0, v702:0, v703:0, v704:0, v705:0, 0, 3, 2, 4) -> f_448(v688:0, v689:0, v690:0, v691:0, v692:0, v693:0, v694:0, 1, 2 * v696:0, 2 * v696:0, v700:0, 1 + v700:0, v701:0, v702:0, v703:0, v704:0, v705:0, 0, 3, 2, 4) :|: 2 * v696:0 > 1 && v700:0 > 0 && v694:0 > 2 && v694:0 > 2 * v696:0 && v692:0 > 3 && v701:0 > 3
f_474(v849:0, v850:0, v851:0, v852:0, v853:0, v854:0, 1 + v952:0, 1, 0, v860:0, v861:0, v862:0, v863:0, v857:0, v864:0, v865:0, v866:0, v867:0, 3, 2, 4) -> f_474(v849:0, v850:0, v851:0, v852:0, v853:0, v854:0, v952:0, 1, 0, v860:0, v861:0, v862:0, v863:0, 1 + v952:0, v864:0, v865:0, v866:0, v867:0, 3, 2, 4) :|: v952:0 > -1 && v952:0 < 1 && v857:0 < 3
f_448(v688:0, v689:0, v690:0, v691:0, v692:0, v693:0, 1 + v952:0, 1, v696:0, v698:0, v699:0, v700:0, v701:0, v702:0, v703:0, v704:0, v705:0, 0, 3, 2, 4) -> f_474(v688:0, v689:0, v690:0, v691:0, v692:0, v693:0, v952:0, 1, 0, v696:0, 2 * v696:0, v700:0, 1 + v700:0, 1 + v952:0, v702:0, v703:0, v704:0, v705:0, 3, 2, 4) :|: v952:0 > -1 && 2 * v696:0 > 1 && v700:0 > 0 && 2 * v696:0 >= 1 + v952:0
f_474(v849:0, v850:0, v851:0, v852:0, v853:0, v854:0, v855:0, 1, 0, v860:0, v861:0, v862:0, v863:0, v857:0, v864:0, v865:0, v866:0, v867:0, 3, 2, 4) -> f_448(v849:0, v850:0, v851:0, v852:0, v853:0, v854:0, v855:0, 1, 1, v861:0, v862:0, v863:0, v857:0, v864:0, v865:0, v866:0, v867:0, 0, 3, 2, 4) :|: v857:0 > 2 && v855:0 > 1 && v853:0 > 2 && v860:0 > 1 && v861:0 > 3
Filtered unneeded arguments:
   f_448(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_448(x5, x7, x9, x12, x13)
   f_474(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_474(x5, x7, x10, x11, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_448(v692:0, v694:0, v696:0, v700:0, v701:0) -> f_448(v692:0, v694:0, 2 * v696:0, 1 + v700:0, v701:0) :|: v700:0 > 0 && 2 * v696:0 > 1 && v694:0 > 2 && v694:0 > 2 * v696:0 && v701:0 > 3 && v692:0 > 3
f_474(v853:0, sum~cons_1~v952:0, v860:0, v861:0, v863:0, v857:0) -> f_474(v853:0, v952:0, v860:0, v861:0, v863:0, 1 + v952:0) :|: v952:0 < 1 && v857:0 < 3 && v952:0 > -1 && sum~cons_1~v952:0 = 1 + v952:0
f_448(v692:0, sum~cons_1~v952:0, v696:0, v700:0, v701:0) -> f_474(v692:0, v952:0, v696:0, 2 * v696:0, 1 + v700:0, 1 + v952:0) :|: 2 * v696:0 > 1 && v952:0 > -1 && 2 * v696:0 >= 1 + v952:0 && v700:0 > 0 && sum~cons_1~v952:0 = 1 + v952:0
f_474(v853:0, v855:0, v860:0, v861:0, v863:0, v857:0) -> f_448(v853:0, v855:0, 1, v863:0, v857:0) :|: v855:0 > 1 && v857:0 > 2 && v853:0 > 2 && v861:0 > 3 && v860:0 > 1

----------------------------------------

(9)
Obligation:
Rules:
f_448(v692:0, v694:0, v696:0, v700:0, v701:0) -> f_448(v692:0, v694:0, 2 * v696:0, 1 + v700:0, v701:0) :|: v700:0 > 0 && 2 * v696:0 > 1 && v694:0 > 2 && v694:0 > 2 * v696:0 && v701:0 > 3 && v692:0 > 3
f_474(v853:0, sum~cons_1~v952:0, v860:0, v861:0, v863:0, v857:0) -> f_474(v853:0, v952:0, v860:0, v861:0, v863:0, 1 + v952:0) :|: v952:0 < 1 && v857:0 < 3 && v952:0 > -1 && sum~cons_1~v952:0 = 1 + v952:0
f_448(x, x1, x2, x3, x4) -> f_474(x, x5, x2, 2 * x2, 1 + x3, 1 + x5) :|: 2 * x2 > 1 && x5 > -1 && 2 * x2 >= 1 + x5 && x3 > 0 && x1 = 1 + x5
f_474(x6, x7, x8, x9, x10, x11) -> f_448(x6, x7, 1, x10, x11) :|: x7 > 1 && x11 > 2 && x6 > 2 && x9 > 3 && x8 > 1

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_448(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_474(x:0, x5:0, x2:0, 2 * x2:0, 1 + x3:0, 1 + x5:0) :|: 2 * x2:0 >= 1 + x5:0 && x3:0 > 0 && x5:0 > -1 && 2 * x2:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0
f_474(x6:0, x7:0, x8:0, x9:0, x10:0, x11:0) -> f_448(x6:0, x7:0, 1, x10:0, x11:0) :|: x9:0 > 3 && x8:0 > 1 && x6:0 > 2 && x11:0 > 2 && x7:0 > 1
f_448(v692:0:0, v694:0:0, v696:0:0, v700:0:0, v701:0:0) -> f_448(v692:0:0, v694:0:0, 2 * v696:0:0, 1 + v700:0:0, v701:0:0) :|: v701:0:0 > 3 && v692:0:0 > 3 && v694:0:0 > 2 * v696:0:0 && v694:0:0 > 2 && 2 * v696:0:0 > 1 && v700:0:0 > 0
f_474(v853:0:0, sum~cons_1~v952:0:0, v860:0:0, v861:0:0, v863:0:0, v857:0:0) -> f_474(v853:0:0, v952:0:0, v860:0:0, v861:0:0, v863:0:0, 1 + v952:0:0) :|: v952:0:0 < 1 && v857:0:0 < 3 && v952:0:0 > -1 && sum~cons_1~v952:0:0 = 1 + v952:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_448 ] = 2*f_448_2 + -1
[ f_474 ] = 2*f_474_2

The following rules are decreasing:
f_448(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_474(x:0, x5:0, x2:0, 2 * x2:0, 1 + x3:0, 1 + x5:0) :|: 2 * x2:0 >= 1 + x5:0 && x3:0 > 0 && x5:0 > -1 && 2 * x2:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0
f_474(x6:0, x7:0, x8:0, x9:0, x10:0, x11:0) -> f_448(x6:0, x7:0, 1, x10:0, x11:0) :|: x9:0 > 3 && x8:0 > 1 && x6:0 > 2 && x11:0 > 2 && x7:0 > 1
f_474(v853:0:0, sum~cons_1~v952:0:0, v860:0:0, v861:0:0, v863:0:0, v857:0:0) -> f_474(v853:0:0, v952:0:0, v860:0:0, v861:0:0, v863:0:0, 1 + v952:0:0) :|: v952:0:0 < 1 && v857:0:0 < 3 && v952:0:0 > -1 && sum~cons_1~v952:0:0 = 1 + v952:0:0

The following rules are bounded:
f_448(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_474(x:0, x5:0, x2:0, 2 * x2:0, 1 + x3:0, 1 + x5:0) :|: 2 * x2:0 >= 1 + x5:0 && x3:0 > 0 && x5:0 > -1 && 2 * x2:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0
f_474(x6:0, x7:0, x8:0, x9:0, x10:0, x11:0) -> f_448(x6:0, x7:0, 1, x10:0, x11:0) :|: x9:0 > 3 && x8:0 > 1 && x6:0 > 2 && x11:0 > 2 && x7:0 > 1
f_448(v692:0:0, v694:0:0, v696:0:0, v700:0:0, v701:0:0) -> f_448(v692:0:0, v694:0:0, 2 * v696:0:0, 1 + v700:0:0, v701:0:0) :|: v701:0:0 > 3 && v692:0:0 > 3 && v694:0:0 > 2 * v696:0:0 && v694:0:0 > 2 && 2 * v696:0:0 > 1 && v700:0:0 > 0
f_474(v853:0:0, sum~cons_1~v952:0:0, v860:0:0, v861:0:0, v863:0:0, v857:0:0) -> f_474(v853:0:0, v952:0:0, v860:0:0, v861:0:0, v863:0:0, 1 + v952:0:0) :|: v952:0:0 < 1 && v857:0:0 < 3 && v952:0:0 > -1 && sum~cons_1~v952:0:0 = 1 + v952:0:0


----------------------------------------

(13)
Obligation:
Rules:
f_448(v692:0:0, v694:0:0, v696:0:0, v700:0:0, v701:0:0) -> f_448(v692:0:0, v694:0:0, 2 * v696:0:0, 1 + v700:0:0, v701:0:0) :|: v701:0:0 > 3 && v692:0:0 > 3 && v694:0:0 > 2 * v696:0:0 && v694:0:0 > 2 && 2 * v696:0:0 > 1 && v700:0:0 > 0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_448(v692:0:0:0, v694:0:0:0, v696:0:0:0, v700:0:0:0, v701:0:0:0) -> f_448(v692:0:0:0, v694:0:0:0, 2 * v696:0:0:0, 1 + v700:0:0:0, v701:0:0:0) :|: 2 * v696:0:0:0 > 1 && v700:0:0:0 > 0 && v694:0:0:0 > 2 && v694:0:0:0 > 2 * v696:0:0:0 && v692:0:0:0 > 3 && v701:0:0:0 > 3

----------------------------------------

(16) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_448 ] = -1*f_448_3 + 1/2*f_448_2

The following rules are decreasing:
f_448(v692:0:0:0, v694:0:0:0, v696:0:0:0, v700:0:0:0, v701:0:0:0) -> f_448(v692:0:0:0, v694:0:0:0, 2 * v696:0:0:0, 1 + v700:0:0:0, v701:0:0:0) :|: 2 * v696:0:0:0 > 1 && v700:0:0:0 > 0 && v694:0:0:0 > 2 && v694:0:0:0 > 2 * v696:0:0:0 && v692:0:0:0 > 3 && v701:0:0:0 > 3

The following rules are bounded:
f_448(v692:0:0:0, v694:0:0:0, v696:0:0:0, v700:0:0:0, v701:0:0:0) -> f_448(v692:0:0:0, v694:0:0:0, 2 * v696:0:0:0, 1 + v700:0:0:0, v701:0:0:0) :|: 2 * v696:0:0:0 > 1 && v700:0:0:0 > 0 && v694:0:0:0 > 2 && v694:0:0:0 > 2 * v696:0:0:0 && v692:0:0:0 > 3 && v701:0:0:0 > 3


----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
SCC
----------------------------------------

(19) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_319(v262, v263, v264, v265, v266, v267, 1, v269, v270, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) -> f_320(v262, v263, v264, v265, v266, v267, 1, v270, v269, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) :|: 0 = 0
f_320(v262, v263, v264, v265, v266, v267, 1, v270, v269, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) -> f_321(v262, v263, v264, v265, v266, v267, 1, v270, v269, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) :|: v270 < v266 && 3 <= v266
f_321(v262, v263, v264, v265, v266, v267, 1, v270, v269, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) -> f_323(v262, v263, v264, v265, v266, v267, 1, v270, v269, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) :|: 0 = 0
f_323(v262, v263, v264, v265, v266, v267, 1, v270, v269, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) -> f_325(v262, v263, v264, v265, v266, v267, 1, v270, v269, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) :|: TRUE
f_325(v262, v263, v264, v265, v266, v267, 1, v270, v269, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) -> f_327(v262, v263, v264, v265, v266, v267, 1, v270, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) :|: 0 = 0
f_327(v262, v263, v264, v265, v266, v267, 1, v270, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) -> f_329(v262, v263, v264, v265, v266, v267, 1, v270, v282, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) :|: v282 = 2 * v270 && 4 <= v282
f_329(v262, v263, v264, v265, v266, v267, 1, v270, v282, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) -> f_331(v262, v263, v264, v265, v266, v267, 1, v270, v282, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) :|: TRUE
f_331(v262, v263, v264, v265, v266, v267, 1, v270, v282, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) -> f_333(v262, v263, v264, v265, v266, v267, 1, v270, v282, v272, v273, v274, v275, v276, 0, 3, 2, 4) :|: 0 = 0
f_333(v262, v263, v264, v265, v266, v267, 1, v270, v282, v272, v273, v274, v275, v276, 0, 3, 2, 4) -> f_335(v262, v263, v264, v265, v266, v267, 1, v270, v282, v272, v290, v273, v274, v275, v276, 0, 3, 2, 4) :|: v290 = 1 + v272 && 2 <= v290
f_335(v262, v263, v264, v265, v266, v267, 1, v270, v282, v272, v290, v273, v274, v275, v276, 0, 3, 2, 4) -> f_337(v262, v263, v264, v265, v266, v267, 1, v270, v282, v272, v290, v273, v274, v275, v276, 0, 3, 2, 4) :|: TRUE
f_337(v262, v263, v264, v265, v266, v267, 1, v270, v282, v272, v290, v273, v274, v275, v276, 0, 3, 2, 4) -> f_339(v262, v263, v264, v265, v266, v267, 1, v270, v282, v272, v290, v273, v274, v275, v276, 0, 3, 2, 4) :|: TRUE
f_339(v262, v263, v264, v265, v266, v267, 1, v270, v282, v272, v290, v273, v274, v275, v276, 0, 3, 2, 4) -> f_318(v262, v263, v264, v265, v266, v267, 1, v270, v282, v272, v290, v273, v274, v275, v276, 0, 3, 2, 4) :|: TRUE
f_318(v262, v263, v264, v265, v266, v267, 1, v269, v270, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) -> f_319(v262, v263, v264, v265, v266, v267, 1, v269, v270, v271, v272, v273, v274, v275, v276, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_319(v262:0, v263:0, v264:0, v265:0, v266:0, v267:0, 1, v269:0, v270:0, v271:0, v272:0, v273:0, v274:0, v275:0, v276:0, 0, 3, 2, 4) -> f_319(v262:0, v263:0, v264:0, v265:0, v266:0, v267:0, 1, v270:0, 2 * v270:0, v272:0, 1 + v272:0, v273:0, v274:0, v275:0, v276:0, 0, 3, 2, 4) :|: v266:0 > 2 && v270:0 < v266:0 && v272:0 > 0 && 3 < 2 * v270:0
Filtered unneeded arguments:
   f_319(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_319(x5, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_319(v266:0, v270:0, v272:0) -> f_319(v266:0, 2 * v270:0, 1 + v272:0) :|: v270:0 < v266:0 && v266:0 > 2 && 3 < 2 * v270:0 && v272:0 > 0

----------------------------------------

(20)
Obligation:
Rules:
f_319(v266:0, v270:0, v272:0) -> f_319(v266:0, 2 * v270:0, 1 + v272:0) :|: v270:0 < v266:0 && v266:0 > 2 && 3 < 2 * v270:0 && v272:0 > 0

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_319(v266:0:0, v270:0:0, v272:0:0) -> f_319(v266:0:0, 2 * v270:0:0, 1 + v272:0:0) :|: 3 < 2 * v270:0:0 && v272:0:0 > 0 && v266:0:0 > 2 && v270:0:0 < v266:0:0

----------------------------------------

(23) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_319(x, x1, x2)] = -2 + x - x1 + x2

The following rules are decreasing:
f_319(v266:0:0, v270:0:0, v272:0:0) -> f_319(v266:0:0, 2 * v270:0:0, 1 + v272:0:0) :|: 3 < 2 * v270:0:0 && v272:0:0 > 0 && v266:0:0 > 2 && v270:0:0 < v266:0:0
The following rules are bounded:
f_319(v266:0:0, v270:0:0, v272:0:0) -> f_319(v266:0:0, 2 * v270:0:0, 1 + v272:0:0) :|: 3 < 2 * v270:0:0 && v272:0:0 > 0 && v266:0:0 > 2 && v270:0:0 < v266:0:0

----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
SCC
----------------------------------------

(26) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_192(v27, v28, v29, v30, v31, v32, v36, 1, v33, 0, v37, v38, v39, v40, 3, 4) -> f_194(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) :|: 0 <= v36 && v33 = 1 && v36 = 0 && 0 = 0
f_194(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) -> f_197(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) :|: 0 = 0
f_197(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) -> f_201(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) :|: TRUE
f_201(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) -> f_205(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) :|: TRUE
f_205(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) -> f_208(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) :|: TRUE
f_208(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) -> f_211(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) :|: 0 = 0
f_211(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) -> f_214(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) :|: 0 = 0
f_214(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) -> f_217(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) :|: 0 = 0
f_217(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) -> f_220(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) :|: TRUE
f_220(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) -> f_223(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) :|: 0 = 0
f_223(v27, v28, v29, v30, 1, v32, 0, v37, v38, v39, v40, 3, 4) -> f_226(v27, v28, v29, v30, 1, v32, 0, -1, v37, v38, v39, v40, 3, 4) :|: 0 = 0
f_226(v27, v28, v29, v30, 1, v32, 0, -1, v37, v38, v39, v40, 3, 4) -> f_229(v27, v28, v29, v30, 1, v32, 0, -1, v37, v38, v39, v40, 3, 4) :|: TRUE
f_229(v27, v28, v29, v30, 1, v32, 0, -1, v37, v38, v39, v40, 3, 4) -> f_231(v27, v28, v29, v30, 1, v32, 0, -1, v37, v38, v39, v40, 3, 4) :|: TRUE
f_231(v27, v28, v29, v30, 1, v32, 0, -1, v37, v38, v39, v40, 3, 4) -> f_189(v27, v28, v29, v30, 1, v32, 0, 1, 0, -1, v37, v38, v39, v40, 3, 4) :|: TRUE
f_189(v27, v28, v29, v30, v31, v32, v33, 1, 0, v36, v37, v38, v39, v40, 3, 4) -> f_192(v27, v28, v29, v30, v31, v32, v36, 1, v33, 0, v37, v38, v39, v40, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_192(v27:0, v28:0, v29:0, v30:0, v31:0, v32:0, 0, 1, 1, 0, v37:0, v38:0, v39:0, v40:0, 3, 4) -> f_192(v27:0, v28:0, v29:0, v30:0, 1, v32:0, -1, 1, 0, 0, v37:0, v38:0, v39:0, v40:0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_192(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_192(x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_192(cons_0, cons_1) -> f_192(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(27)
Obligation:
Rules:
f_192(cons_0, cons_1) -> f_192(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(28) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(29)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
