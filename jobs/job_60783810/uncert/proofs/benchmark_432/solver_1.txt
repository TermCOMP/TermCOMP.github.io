NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/IHSck.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 199 ms]
(4) LLVM Symbolic Execution Graph
(5) LLVMNonterminationProof [COMPLETE, 350 ms]
(6) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/IHSck.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/IHSck.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		%8 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		store 0, %2
		br %9
	9:
		%10 = load %2
		%11 = icmp slt %10 100
		br %11, %12, %65
	12:
		%13 = load %2
		%14 = add i32 %13, 2
		store %14, %7
		store 0, %3
		br %15
	15:
		%16 = load %3
		%17 = load %7
		%18 = icmp slt %16 %17
		br %18, %19, %62
	19:
		%20 = load %2
		%21 = load %3
		%22 = add i32 %20, %21
		%23 = add i32 %22, 3
		store %23, %4
		br %24
	24:
		%25 = load %4
		%26 = icmp sge %25 0
		br %26, %27, %59
	27:
		%28 = load %2
		%29 = load %3
		%30 = add i32 %28, %29
		%31 = load %4
		%32 = add i32 %30, %31
		%33 = add i32 %32, 4
		store %33, %8
		store 0, %5
		br %34
	34:
		%35 = load %5
		%36 = load %8
		%37 = icmp slt %35 %36
		br %37, %38, %56
	38:
		%39 = load %2
		%40 = load %3
		%41 = add i32 %39, %40
		%42 = load %4
		%43 = add i32 %41, %42
		%44 = load %5
		%45 = add i32 %43, %44
		%46 = add i32 %45, 1000
		store %46, %6
		br %47
	47:
		%48 = load %6
		%49 = icmp sge %48 0
		br %49, %50, %53
	50:
		%51 = load %6
		%52 = sub i32 %51, 0
		store %52, %6
		br %47
	53:
		%54 = load %5
		%55 = add i32 %54, 1
		store %55, %5
		br %34
	56:
		%57 = load %4
		%58 = sub i32 %57, 1
		store %58, %4
		br %24
	59:
		%60 = load %3
		%61 = add i32 %60, 1
		store %61, %3
		br %15
	62:
		%63 = load %2
		%64 = add i32 %63, 1
		store %64, %2
		br %9
	65:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) LLVMNonterminationProof (COMPLETE)
Proved nontermination with the following witness:

State #261 with references set to {}.
Nondeterministic instruction %1 = alloca i32, align 4 in node #261 yields value 17.
Nondeterministic instruction %2 = alloca i32, align 4 in node #262 yields value 21.
Nondeterministic instruction %3 = alloca i32, align 4 in node #263 yields value 1.
Nondeterministic instruction %4 = alloca i32, align 4 in node #264 yields value 13.
Nondeterministic instruction %5 = alloca i32, align 4 in node #265 yields value 29.
Nondeterministic instruction %6 = alloca i32, align 4 in node #266 yields value 5.
Nondeterministic instruction %7 = alloca i32, align 4 in node #267 yields value 25.
Nondeterministic instruction %8 = alloca i32, align 4 in node #268 yields value 9.

----------------------------------------

(6)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
