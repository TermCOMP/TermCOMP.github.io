YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Q5Yrl.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1003 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [EQUIVALENT, 45 ms]
(6) IntTRS
(7) IRSToKoat [EQUIVALENT, 0 ms]
(8) Koat Problem
(9) KoAT2 [EQUIVALENT, 43 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Q5Yrl.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Q5Yrl.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %2
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %3
		br %9
	9:
		%10 = load %4
		%11 = icmp sgt %10 0
		br %11, %12, %28
	12:
		%13 = load %4
		%14 = load %2
		%15 = add i32 %13, %14
		%16 = sub i32 %15, 1
		store %16, %4
		%17 = load %2
		store %17, %5
		%18 = load %5
		%19 = mul i32 3, %18
		%20 = load %3
		%21 = mul i32 4, %20
		%22 = sub i32 %19, %21
		store %22, %2
		%23 = load %5
		%24 = mul i32 4, %23
		%25 = load %3
		%26 = mul i32 3, %25
		%27 = add i32 %24, %26
		store %27, %3
		br %9
	28:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 73 rulesP rules:
f_127 -> f_128(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_128(v1, v2, 3, 1, 4) -> f_129(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_129(v1, v3, v2, v4, 3, 1, 4) -> f_130(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_130(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_131(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_131(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_132(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) :|: 1 <= v9 && v10 = 3 + v9 && 4 <= v10
f_132(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) -> f_133(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_133(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_134(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_134(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_135(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_135(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_136(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_136(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_137(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_137(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_138(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_138(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_139(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_139(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_140(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_140(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_141(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_141(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_142(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_142(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_143(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_143(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_144(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_144(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_145(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: 0 = 0
f_145(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_146(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: 0 < v11
f_145(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_147(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: v11 <= 0
f_146(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_148(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_147(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_149(v1, v3, v5, v7, v9, v11, v13, v15, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_148(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_150(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_149(v1, v3, v5, v7, v9, v11, v13, v15, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_151(v1, v3, v5, v7, v9, v11, v13, v15, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_150(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_152(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_152(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_153(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_153(v1, v3, v5, v7, v9, v11, v13, v15, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_154(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v2, v4, v6, v8, v10, 0, 3, 4) :|: v17 = v11 + v13
f_154(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v2, v4, v6, v8, v10, 0, 3, 4) -> f_155(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v2, v4, v6, v8, v10, 0, 3, 4) :|: 1 + v18 = v17
f_155(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v2, v4, v6, v8, v10, 0, 3, 4) -> f_156(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_156(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v2, v4, v6, v8, v10, 0, 3, 4) -> f_157(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_157(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v2, v4, v6, v8, v10, 0, 3, 4) -> f_158(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_158(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v2, v4, v6, v8, v10, 0, 3, 4) -> f_159(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_159(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v2, v4, v6, v8, v10, 0, 3, 4) -> f_160(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v2, v4, v6, v8, v10, 0, 3, 4) :|: v21 = 3 * v13
f_160(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v2, v4, v6, v8, v10, 0, 3, 4) -> f_161(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_161(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v2, v4, v6, v8, v10, 0, 3, 4) -> f_162(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v2, v4, v6, v8, v10, 0, 3, 4) :|: v22 = 4 * v15
f_162(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v2, v4, v6, v8, v10, 0, 3, 4) -> f_163(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v2, v4, v6, v8, v10, 0, 3, 4) :|: v23 + v22 = v21
f_163(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v2, v4, v6, v8, v10, 0, 3, 4) -> f_164(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_164(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v2, v4, v6, v8, v10, 0, 3, 4) -> f_165(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_165(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v2, v4, v6, v8, v10, 0, 3, 4) -> f_166(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v25, v2, v4, v6, v8, v10, 0, 3, 4) :|: v25 = 4 * v13
f_166(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v25, v2, v4, v6, v8, v10, 0, 3, 4) -> f_167(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v25, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_167(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v25, v2, v4, v6, v8, v10, 0, 3, 4) -> f_168(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v25, v26, v2, v4, v6, v8, v10, 0, 3, 4) :|: v26 = 3 * v15
f_168(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v25, v26, v2, v4, v6, v8, v10, 0, 3, 4) -> f_169(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v25, v26, v27, v2, v4, v6, v8, v10, 0, 3, 4) :|: v27 = v25 + v26
f_169(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v25, v26, v27, v2, v4, v6, v8, v10, 0, 3, 4) -> f_170(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v25, v26, v27, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_170(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v25, v26, v27, v2, v4, v6, v8, v10, 0, 3, 4) -> f_171(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v25, v26, v27, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_171(v1, v3, v5, v7, v9, v11, v13, v15, 1, v17, v18, v21, v22, v23, v25, v26, v27, v2, v4, v6, v8, v10, 0, 3, 4) -> f_199(v1, v3, v5, v7, v9, v11, v13, v15, v11, 1, v13, v17, v18, v21, v15, v22, v23, v25, v26, v27, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_199(v41, v42, v43, v44, v45, v46, v47, v48, v49, 1, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) -> f_200(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v49, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) :|: 0 = 0
f_200(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v49, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) -> f_201(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v49, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4, 2) :|: 0 < v53 && 2 <= v52
f_200(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v49, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) -> f_202(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v49, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) :|: v53 <= 0 && v52 <= 1 && v51 <= 0 && v54 <= 0 && v58 <= 0
f_201(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v49, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4, 2) -> f_203(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v49, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4, 2) :|: 0 = 0
f_202(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v49, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) -> f_204(v41, v42, v43, v44, v45, v46, v47, v48, v53, 0, v49, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 3, 1, 4) :|: 0 = 0
f_203(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v49, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4, 2) -> f_205(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v49, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4, 2) :|: TRUE
f_204(v41, v42, v43, v44, v45, v46, v47, v48, v53, 0, v49, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 3, 1, 4) -> f_206(v41, v42, v43, v44, v45, v46, v47, v48, v53, 0, v49, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 3, 1, 4) :|: TRUE
f_205(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v49, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4, 2) -> f_207(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4, 2) :|: 0 = 0
f_207(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v51, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4, 2) -> f_208(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v52, v51, v54, v55, v56, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4, 2) :|: 0 = 0
f_208(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v52, v51, v54, v55, v56, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4, 2) -> f_209(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v51, v54, v55, v56, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) :|: v67 = v53 + v57
f_209(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v51, v54, v55, v56, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) -> f_210(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v51, v54, v55, v56, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) :|: 1 + v68 = v67
f_210(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v51, v54, v55, v56, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) -> f_211(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v51, v54, v55, v56, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) :|: TRUE
f_211(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v51, v54, v55, v56, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) -> f_212(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v51, v54, v55, v56, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) :|: 0 = 0
f_212(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v51, v54, v55, v56, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) -> f_213(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v51, v54, v55, v56, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) :|: TRUE
f_213(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v51, v54, v55, v56, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) -> f_214(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v54, v55, v56, v51, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) :|: 0 = 0
f_214(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v54, v55, v56, v51, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) -> f_215(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v55, v56, v51, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) :|: v71 = 3 * v57
f_215(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v55, v56, v51, v58, v59, v60, v61, v62, v63, v64, v65, 0, 3, 4) -> f_216(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v56, v51, v58, v55, v59, v61, v62, v63, v64, v65, 0, 3, 4) :|: 0 = 0
f_216(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v56, v51, v58, v55, v59, v61, v62, v63, v64, v65, 0, 3, 4) -> f_217(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v51, v58, v55, v59, v61, v62, v63, v64, v65, 0, 3, 4) :|: v72 = 4 * v60
f_217(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v51, v58, v55, v59, v61, v62, v63, v64, v65, 0, 3, 4) -> f_218(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v51, v58, v55, v59, v61, v62, v63, v64, v65, 0, 3, 4) :|: v73 + v72 = v71
f_218(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v51, v58, v55, v59, v61, v62, v63, v64, v65, 0, 3, 4) -> f_219(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v51, v58, v55, v59, v61, v62, v63, v64, v65, 0, 3, 4) :|: TRUE
f_219(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v51, v58, v55, v59, v61, v62, v63, v64, v65, 0, 3, 4) -> f_220(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v58, v55, v59, v61, v62, v63, v64, v65, 0, 3, 4) :|: 0 = 0
f_220(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v58, v55, v59, v61, v62, v63, v64, v65, 0, 3, 4) -> f_221(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v75, v55, v59, v61, v62, v63, v64, v65, 0, 3, 4) :|: v75 = 4 * v57
f_221(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v75, v55, v59, v61, v62, v63, v64, v65, 0, 3, 4) -> f_222(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v75, v59, v61, v62, v63, v64, v65, 0, 3, 4) :|: 0 = 0
f_222(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v75, v59, v61, v62, v63, v64, v65, 0, 3, 4) -> f_223(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v75, v76, v61, v62, v63, v64, v65, 0, 3, 4) :|: v76 = 3 * v60
f_223(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v75, v76, v61, v62, v63, v64, v65, 0, 3, 4) -> f_224(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v75, v76, v77, v61, v62, v63, v64, v65, 0, 3, 4) :|: v77 = v75 + v76
f_224(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v75, v76, v77, v61, v62, v63, v64, v65, 0, 3, 4) -> f_225(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v75, v76, v77, v61, v62, v63, v64, v65, 0, 3, 4) :|: TRUE
f_225(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v75, v76, v77, v61, v62, v63, v64, v65, 0, 3, 4) -> f_226(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v75, v76, v77, v61, v62, v63, v64, v65, 0, 3, 4) :|: TRUE
f_226(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v75, v76, v77, v61, v62, v63, v64, v65, 0, 3, 4) -> f_199(v41, v42, v43, v44, v45, v46, v47, v48, v53, 1, v57, v67, v68, v71, v60, v72, v73, v75, v76, v77, v61, v62, v63, v64, v65, 0, 3, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_200(v41:0, v42:0, v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v53:0, 1, v49:0, v51:0, v52:0, v54:0, v55:0, v56:0, v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, 0, 3, 4) -> f_200(v41:0, v42:0, v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v68:0, 1, v53:0, v57:0, 1 + v68:0, v73:0 + 4 * v60:0, v60:0, 4 * v60:0, v73:0, 4 * v57:0, 3 * v60:0, 4 * v57:0 + 3 * v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, 0, 3, 4) :|: v52:0 > 1 && v53:0 > 0 && v73:0 + 4 * v60:0 = 3 * v57:0 && v53:0 + v57:0 = 1 + v68:0
f_127 -> f_200(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, v18:0, 1, v11:0, v13:0, 1 + v18:0, v23:0 + 4 * v15:0, v15:0, 4 * v15:0, v23:0, 4 * v13:0, 3 * v15:0, 4 * v13:0 + 3 * v15:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0 && v23:0 + 4 * v15:0 = 3 * v13:0 && v11:0 + v13:0 = 1 + v18:0
f_127 -> f_151(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 < 1
f_200(v41:0, v42:0, v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v53:0, 1, v49:0, v51:0, v52:0, v54:0, v55:0, v56:0, v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, 0, 3, 4) -> f_206(v41:0, v42:0, v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v53:0, 0, v49:0, v51:0, v52:0, v54:0, v55:0, v56:0, v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, 3, 1, 4) :|: v52:0 < 2 && v53:0 < 1 && v51:0 < 1 && v58:0 < 1 && v54:0 < 1
Filtered unneeded arguments:
   f_200(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_200(x6, x7, x9, x11, x12, x13, x14, x17, x18, x20)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_200(v46:0, v47:0, v53:0, v49:0, v51:0, v52:0, v54:0, v57:0, v58:0, v60:0) -> f_200(v46:0, v47:0, v68:0, v53:0, v57:0, 1 + v68:0, v73:0 + 4 * v60:0, v73:0, 4 * v57:0, 4 * v57:0 + 3 * v60:0) :|: v53:0 > 0 && v52:0 > 1 && v53:0 + v57:0 = 1 + v68:0 && v73:0 + 4 * v60:0 = 3 * v57:0
f_127 -> f_200(v11:0, v13:0, v18:0, v11:0, v13:0, 1 + v18:0, v23:0 + 4 * v15:0, v23:0, 4 * v13:0, 4 * v13:0 + 3 * v15:0) :|: v23:0 + 4 * v15:0 = 3 * v13:0 && v11:0 + v13:0 = 1 + v18:0 && v11:0 > 0
f_127 -> f_151(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v7:0 > 0 && v11:0 < 1 && v9:0 > 0
f_200(v46:0, v47:0, v53:0, v49:0, v51:0, v52:0, v54:0, v57:0, v58:0, v60:0) -> f_206(v41:0, v42:0, v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v53:0, 0, v49:0, v51:0, v52:0, v54:0, v55:0, v56:0, v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, 3, 1, 4) :|: v53:0 < 1 && v52:0 < 2 && v51:0 < 1 && v54:0 < 1 && v58:0 < 1

----------------------------------------

(6)
Obligation:
Rules:
f_200(v46:0, v47:0, v53:0, v49:0, v51:0, v52:0, v54:0, v57:0, v58:0, v60:0) -> f_200(v46:0, v47:0, v68:0, v53:0, v57:0, 1 + v68:0, v73:0 + 4 * v60:0, v73:0, 4 * v57:0, 4 * v57:0 + 3 * v60:0) :|: v53:0 > 0 && v52:0 > 1 && v53:0 + v57:0 = 1 + v68:0 && v73:0 + 4 * v60:0 = 3 * v57:0
f_127 -> f_200(v11:0, v13:0, v18:0, v11:0, v13:0, 1 + v18:0, v23:0 + 4 * v15:0, v23:0, 4 * v13:0, 4 * v13:0 + 3 * v15:0) :|: v23:0 + 4 * v15:0 = 3 * v13:0 && v11:0 + v13:0 = 1 + v18:0 && v11:0 > 0
f_127 -> f_151(x, x1, x2, x3, x4, x5, x6, x7, 0, 3 + x, 3 + x1, 3 + x2, 3 + x3, 3 + x4, 3, 1, 4) :|: x > 0 && x1 > 0 && x2 > 0 && x3 > 0 && x5 < 1 && x4 > 0
f_200(x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_206(x18, x19, x20, x21, x22, x8, x9, x23, x10, 0, x11, x12, x13, x14, x24, x25, x15, x16, x26, x17, x27, x28, x29, x30, x31, 3, 1, 4) :|: x10 < 1 && x13 < 2 && x12 < 1 && x14 < 1 && x16 < 1
Start term: f_127

----------------------------------------

(7) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(8)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_127))
(VAR k36 k37 k38 k39 k32 k33 k34 k35 k30 k31 x46 x47 x48 x49 x42 x43 x44 x45 k29 x40 x41 k25 k26 k27 k28 k21 k22 k23 k24 k20 x39 x35 x36 x37 x38 x31 x32 x33 x34 k18 k19 x30 x70 x68 x69 x64 x65 x66 x67 x60 x61 x62 x63 k47 k7 k48 k8 k5 k6 k43 k44 k45 k9 k46 k40 k0 k41 k42 k3 k4 k1 k2 x57 x131 x58 x130 x59 x133 x132 x53 x135 x54 x134 x55 x56 x136 x50 x51 x52 x90 x91 x92 x120 x122 x121 x86 x124 x87 x123 x88 x126 x89 x125 x x82 x128 x83 x127 x84 x85 x129 x80 x81 x79 x111 x110 x75 x113 x76 x112 x'' x77 x115 x78 x114 x71 x117 x72 x116 x73 x119 x74 x118 k14 k15 x109 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x7 x27 x20 x102 x21 x101 x22 x104 x23 x103 x106 x1 x105 x108 x107 x' x17 x18 x19 x13 x14 x15 x16 x97 x10 x98 x11 x99 x12 x93 x94 x95 x96)
(RULES
  f_127(x91, x92, x93, x94, x95, x96, x97, x98, x99, x100, x101, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111, x112, x113, x114, x115, x116, x117, x118) -> f_200(k6, k7, k2, k6, k7, 1 + k2, k0 + 4 * k9, k0, 4 * k7, 4 * k7 + 3 * k9, x119, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x130, x131, x132, x133, x134, x135, x136) :|: k0 + 4 * k9 = 3 * k7 && k6 + k7 = 1 + k2 && k6 > 0
  f_127(x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_151(k3, k34, k20, k21, k16, k18, k26, k28, 0, 3 + k3, 3 + k34, 3 + k20, 3 + k21, 3 + k16, 3, 1, 4, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36) :|: k3 > 0 && k34 > 0 && k20 > 0 && k21 > 0 && k18 < 1 && k16 > 0
  f_200(k1, k13, k5, k14, k4, k35, k37, k8, k38, k12, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72) -> f_200(k1, k13, k15, k5, k8, 1 + k15, k36 + 4 * k12, k36, 4 * k8, 4 * k8 + 3 * k12, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x90) :|: k5 > 0 && k35 > 1 && k5 + k8 = 1 + k15 && k36 + 4 * k12 = 3 * k8
  f_200(k22, k24, k46, k47, k48, k42, k43, k44, k45, k39, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54) -> f_206(k40, k41, k30, k31, k32, k22, k24, k33, k46, 0, k47, k48, k42, k43, k23, k25, k44, k45, k27, k39, k29, k17, k19, k11, k10, 3, 1, 4) :|: k46 < 1 && k42 < 2 && k48 < 1 && k43 < 1 && k45 < 1
)

----------------------------------------

(9) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_15316233702272460788.koat 

KoAT2's output was:

YES

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
