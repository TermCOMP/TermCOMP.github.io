YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Hvxfi.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 210 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 53 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 14 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Hvxfi.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Hvxfi.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		br %5
	5:
		%6 = load %2
		%7 = icmp sgt %6 0
		br %7, %8, %11
	8:
		%9 = load %2
		%10 = icmp slt %9 100
		br %11
	11:
		%12 = phi [0, %5], [%10, %8]
		br %12, %13, %23
	13:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%14 = load %2
		store %14, %3
		%15 = call i32 (...)* @__VERIFIER_nondet_int()
		store %15, %2
		%16 = load %2
		%17 = load %3
		%18 = mul i32 2, %17
		%19 = add i32 %18, 10
		%20 = icmp slt %16 %19
		br %20, %21, %22
	21:
		br %23
	22:
		br %5
	23:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_167(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 12, 198, 208, 4) -> f_168(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 12, 198, 208, 4) :|: 0 = 0
f_168(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 12, 198, 208, 4) -> f_169(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 12, 198, 208, 4) :|: TRUE
f_169(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 12, 198, 208, 4) -> f_170(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 12, 198, 208, 4) :|: 0 = 0
f_170(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 12, 198, 208, 4) -> f_171(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) :|: v81 < 100 && v83 <= 98 && 2 <= v82 && v82 <= 88 && 1 <= v79 && v79 <= 44
f_171(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) -> f_173(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) :|: 0 = 0
f_173(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) -> f_175(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) :|: 0 = 0
f_175(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) -> f_177(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) :|: TRUE
f_177(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) -> f_179(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) :|: TRUE
f_179(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) -> f_180(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) :|: 0 = 0
f_180(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) -> f_181(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) :|: TRUE
f_181(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) -> f_182(v75, v76, v77, v78, v81, 1, v115, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) :|: TRUE
f_182(v75, v76, v77, v78, v81, 1, v115, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) -> f_183(v75, v76, v77, v78, v81, 1, v115, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) :|: TRUE
f_183(v75, v76, v77, v78, v81, 1, v115, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) -> f_184(v75, v76, v77, v78, v81, 1, v115, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) :|: 0 = 0
f_184(v75, v76, v77, v78, v81, 1, v115, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 44, 12, 88, 98, 4) -> f_185(v75, v76, v77, v78, v81, 1, v115, v82, v83, 0, v85, v86, v87, 3, 10, 99, 12, 2, 88, 98, 4) :|: 0 = 0
f_185(v75, v76, v77, v78, v81, 1, v115, v82, v83, 0, v85, v86, v87, 3, 10, 99, 12, 2, 88, 98, 4) -> f_186(v75, v76, v77, v78, v81, 1, v115, v117, v83, 0, v85, v86, v87, 3, 2, 99, 12, 98, 4, 24, 198) :|: v117 = 2 * v81 && 24 <= v117 && v117 <= 198
f_186(v75, v76, v77, v78, v81, 1, v115, v117, v83, 0, v85, v86, v87, 3, 2, 99, 12, 98, 4, 24, 198) -> f_187(v75, v76, v77, v78, v81, 1, v115, v117, v118, 0, v85, v86, v87, 3, 2, 10, 99, 12, 4, 24, 198, 34, 208) :|: v118 = 10 + v117 && 34 <= v118 && v118 <= 208
f_187(v75, v76, v77, v78, v81, 1, v115, v117, v118, 0, v85, v86, v87, 3, 2, 10, 99, 12, 4, 24, 198, 34, 208) -> f_189(v75, v76, v77, v78, v81, 1, v115, v117, v118, 0, v85, v86, v87, 3, 2, 10, 99, 12, 4, 34, 24, 198, 208) :|: v118 <= v115 && 34 <= v115
f_189(v75, v76, v77, v78, v81, 1, v115, v117, v118, 0, v85, v86, v87, 3, 2, 10, 99, 12, 4, 34, 24, 198, 208) -> f_191(v75, v76, v77, v78, v81, 1, v115, v117, v118, 0, v85, v86, v87, 3, 2, 10, 99, 12, 4, 34, 24, 198, 208) :|: 0 = 0
f_191(v75, v76, v77, v78, v81, 1, v115, v117, v118, 0, v85, v86, v87, 3, 2, 10, 99, 12, 4, 34, 24, 198, 208) -> f_193(v75, v76, v77, v78, v81, 1, v115, v117, v118, 0, v85, v86, v87, 3, 2, 10, 99, 12, 4, 34, 24, 198, 208) :|: TRUE
f_193(v75, v76, v77, v78, v81, 1, v115, v117, v118, 0, v85, v86, v87, 3, 2, 10, 99, 12, 4, 34, 24, 198, 208) -> f_195(v75, v76, v77, v78, v81, 1, v115, v117, v118, 0, v85, v86, v87, 3, 2, 10, 99, 12, 4, 34, 24, 198, 208) :|: TRUE
f_195(v75, v76, v77, v78, v81, 1, v115, v117, v118, 0, v85, v86, v87, 3, 2, 10, 99, 12, 4, 34, 24, 198, 208) -> f_166(v75, v76, v77, v78, v81, 1, v115, v117, v118, 0, v85, v86, v87, 3, 2, 10, 99, 12, 198, 208, 4) :|: TRUE
f_166(v75, v76, v77, v78, v79, 1, v81, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 12, 198, 208, 4) -> f_167(v75, v76, v77, v78, v81, 1, v79, v82, v83, 0, v85, v86, v87, 3, 2, 10, 99, 12, 198, 208, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_167(v75:0, v76:0, v77:0, v78:0, v81:0, 1, v79:0, v82:0, v83:0, 0, v85:0, v86:0, v87:0, 3, 2, 10, 99, 12, 198, 208, 4) -> f_167(v75:0, v76:0, v77:0, v78:0, v115:0, 1, v81:0, 2 * v81:0, 10 + 2 * v81:0, 0, v85:0, v86:0, v87:0, 3, 2, 10, 99, 12, 198, 208, 4) :|: v83:0 < 99 && v81:0 < 100 && v82:0 > 1 && v82:0 < 89 && v79:0 > 0 && v79:0 < 45 && 23 < 2 * v81:0 && 2 * v81:0 < 199 && v115:0 >= 10 + 2 * v81:0 && v115:0 > 33
Filtered unneeded arguments:
   f_167(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_167(x5, x7, x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_167(v81:0, v79:0, v82:0, v83:0) -> f_167(v115:0, v81:0, 2 * v81:0, 10 + 2 * v81:0) :|: v81:0 < 100 && v83:0 < 99 && v82:0 > 1 && v82:0 < 89 && v79:0 > 0 && v79:0 < 45 && 23 < 2 * v81:0 && 2 * v81:0 < 199 && v115:0 > 33 && v115:0 >= 10 + 2 * v81:0

----------------------------------------

(8)
Obligation:
Rules:
f_167(v81:0, v79:0, v82:0, v83:0) -> f_167(v115:0, v81:0, 2 * v81:0, 10 + 2 * v81:0) :|: v81:0 < 100 && v83:0 < 99 && v82:0 > 1 && v82:0 < 89 && v79:0 > 0 && v79:0 < 45 && 23 < 2 * v81:0 && 2 * v81:0 < 199 && v115:0 > 33 && v115:0 >= 10 + 2 * v81:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_167(v81:0:0, v79:0:0, v82:0:0, v83:0:0) -> f_167(v115:0:0, v81:0:0, 2 * v81:0:0, 10 + 2 * v81:0:0) :|: v115:0:0 > 33 && v115:0:0 >= 10 + 2 * v81:0:0 && 2 * v81:0:0 < 199 && 23 < 2 * v81:0:0 && v79:0:0 < 45 && v79:0:0 > 0 && v82:0:0 < 89 && v82:0:0 > 1 && v83:0:0 < 99 && v81:0:0 < 100

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_167 ] = -1/11*f_167_1 + 1/11*f_167_2

The following rules are decreasing:
f_167(v81:0:0, v79:0:0, v82:0:0, v83:0:0) -> f_167(v115:0:0, v81:0:0, 2 * v81:0:0, 10 + 2 * v81:0:0) :|: v115:0:0 > 33 && v115:0:0 >= 10 + 2 * v81:0:0 && 2 * v81:0:0 < 199 && 23 < 2 * v81:0:0 && v79:0:0 < 45 && v79:0:0 > 0 && v82:0:0 < 89 && v82:0:0 > 1 && v83:0:0 < 99 && v81:0:0 < 100

The following rules are bounded:
f_167(v81:0:0, v79:0:0, v82:0:0, v83:0:0) -> f_167(v115:0:0, v81:0:0, 2 * v81:0:0, 10 + 2 * v81:0:0) :|: v115:0:0 > 33 && v115:0:0 >= 10 + 2 * v81:0:0 && 2 * v81:0:0 < 199 && 23 < 2 * v81:0:0 && v79:0:0 < 45 && v79:0:0 > 0 && v82:0:0 < 89 && v82:0:0 > 1 && v83:0:0 < 99 && v81:0:0 < 100


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
