YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/NI9YR.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 21 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 579 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 33 ms]
        (9) IntTRS
        (10) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (11) YES
    (12) LLVM Symbolic Execution SCC
        (13) SCC2IRS [SOUND, 31 ms]
        (14) IntTRS
        (15) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (16) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/NI9YR.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/NI9YR.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %2
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %3
		%9 = call i32 @__VERIFIER_nondet_int()
		store %9, %4
		%10 = call i32 @__VERIFIER_nondet_int()
		store %10, %5
		%11 = load %5
		%12 = icmp sge %11 1
		br %12, %13, %14
	13:
		store 1, %6
		br %15
	14:
		store -1, %6
		br %15
	15:
		br %16
	16:
		%17 = load %3
		%18 = load %4
		%19 = icmp sle %17 %18
		br %19, %20, %32
	20:
		%21 = load %5
		%22 = icmp sge %21 1
		br %22, %23, %27
	23:
		%24 = load %3
		%25 = load %6
		%26 = add i32 %24, %25
		store %26, %3
		br %31
	27:
		%28 = load %3
		%29 = load %6
		%30 = sub i32 %28, %29
		store %30, %3
		br %31
	31:
		br %16
	32:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_285(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) -> f_287(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) :|: 0 = 0
f_287(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) -> f_289(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) :|: v336 <= v332
f_289(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) -> f_293(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) :|: 0 = 0
f_293(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) -> f_297(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) :|: TRUE
f_297(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) -> f_301(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) :|: 0 = 0
f_301(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) -> f_303(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) :|: 0 = 0
f_303(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) -> f_305(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) :|: TRUE
f_305(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) -> f_307(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v337, v338, v339, v340, v341, v342, 0, 3, 4) :|: 0 = 0
f_307(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v337, v338, v339, v340, v341, v342, 0, 3, 4) -> f_309(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v337, v338, v339, v340, v341, v342, 0, 3, 4) :|: 0 = 0
f_309(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v337, v338, v339, v340, v341, v342, 0, 3, 4) -> f_311(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v424, v337, v338, v339, v340, v341, v342, 0, 3, 4) :|: v424 = 1 + v336
f_311(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v424, v337, v338, v339, v340, v341, v342, 0, 3, 4) -> f_313(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v424, v337, v338, v339, v340, v341, v342, 0, 3, 4) :|: TRUE
f_313(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v424, v337, v338, v339, v340, v341, v342, 0, 3, 4) -> f_315(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v424, v337, v338, v339, v340, v341, v342, 0, 3, 4) :|: TRUE
f_315(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v424, v337, v338, v339, v340, v341, v342, 0, 3, 4) -> f_317(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v424, v337, v338, v339, v340, v341, v342, 0, 3, 4) :|: TRUE
f_317(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v424, v337, v338, v339, v340, v341, v342, 0, 3, 4) -> f_283(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v424, v337, v338, v339, v340, v341, v342, 0, 3, 4) :|: TRUE
f_283(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v335, v336, v337, v338, v339, v340, v341, v342, 0, 3, 4) -> f_285(v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, 1, v336, v335, v337, v338, v339, v340, v341, v342, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_285(v324:0, v325:0, v326:0, v327:0, v328:0, v329:0, v330:0, v331:0, v332:0, v333:0, 1, v336:0, v335:0, v337:0, v338:0, v339:0, v340:0, v341:0, v342:0, 0, 3, 4) -> f_285(v324:0, v325:0, v326:0, v327:0, v328:0, v329:0, v330:0, v331:0, v332:0, v333:0, 1, 1 + v336:0, v336:0, v337:0, v338:0, v339:0, v340:0, v341:0, v342:0, 0, 3, 4) :|: v336:0 <= v332:0
Filtered unneeded arguments:
   f_285(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_285(x9, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_285(v332:0, v336:0) -> f_285(v332:0, 1 + v336:0) :|: v336:0 <= v332:0

----------------------------------------

(9)
Obligation:
Rules:
f_285(v332:0, v336:0) -> f_285(v332:0, 1 + v336:0) :|: v336:0 <= v332:0

----------------------------------------

(10) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_285 ] = -1*f_285_2 + f_285_1

The following rules are decreasing:
f_285(v332:0, v336:0) -> f_285(v332:0, 1 + v336:0) :|: v336:0 <= v332:0

The following rules are bounded:
f_285(v332:0, v336:0) -> f_285(v332:0, 1 + v336:0) :|: v336:0 <= v332:0


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
SCC
----------------------------------------

(13) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_284(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v294, 1, -1, v297, v298, v299, v300, v301, v302, v303, 3, 4) -> f_286(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) :|: 0 = 0
f_286(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) -> f_288(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) :|: 0 = 0
f_288(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) -> f_291(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) :|: v297 <= v291
f_291(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) -> f_295(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) :|: 0 = 0
f_295(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) -> f_299(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) :|: TRUE
f_299(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) -> f_302(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) :|: 0 = 0
f_302(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) -> f_304(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) :|: 0 = 0
f_304(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) -> f_306(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) :|: TRUE
f_306(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, v294, -1, v298, v299, v300, v301, v302, v303, 3, 4) -> f_308(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, -1, v298, v299, v300, v301, v302, v303, 3, 4) :|: 0 = 0
f_308(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, -1, v298, v299, v300, v301, v302, v303, 3, 4) -> f_310(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, -1, v298, v299, v300, v301, v302, v303, 3, 4) :|: 0 = 0
f_310(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, -1, v298, v299, v300, v301, v302, v303, 3, 4) -> f_312(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, -1, v425, v298, v299, v300, v301, v302, v303, 3, 4) :|: v425 = 1 + v297
f_312(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, -1, v425, v298, v299, v300, v301, v302, v303, 3, 4) -> f_314(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, -1, v425, v298, v299, v300, v301, v302, v303, 3, 4) :|: TRUE
f_314(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, -1, v425, v298, v299, v300, v301, v302, v303, 3, 4) -> f_316(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, -1, v425, v298, v299, v300, v301, v302, v303, 3, 4) :|: TRUE
f_316(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, -1, v425, v298, v299, v300, v301, v302, v303, 3, 4) -> f_281(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v297, 1, -1, v425, v298, v299, v300, v301, v302, v303, 3, 4) :|: TRUE
f_281(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v294, 1, -1, v297, v298, v299, v300, v301, v302, v303, 3, 4) -> f_284(v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, 0, v294, 1, -1, v297, v298, v299, v300, v301, v302, v303, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_284(v283:0, v284:0, v285:0, v286:0, v287:0, v288:0, v289:0, v290:0, v291:0, v292:0, 0, v294:0, 1, -1, v297:0, v298:0, v299:0, v300:0, v301:0, v302:0, v303:0, 3, 4) -> f_284(v283:0, v284:0, v285:0, v286:0, v287:0, v288:0, v289:0, v290:0, v291:0, v292:0, 0, v297:0, 1, -1, 1 + v297:0, v298:0, v299:0, v300:0, v301:0, v302:0, v303:0, 3, 4) :|: v297:0 <= v291:0
Filtered unneeded arguments:
   f_284(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_284(x9, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_284(v291:0, v297:0) -> f_284(v291:0, 1 + v297:0) :|: v297:0 <= v291:0

----------------------------------------

(14)
Obligation:
Rules:
f_284(v291:0, v297:0) -> f_284(v291:0, 1 + v297:0) :|: v297:0 <= v291:0

----------------------------------------

(15) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_284(x, x1)] = x - x1

The following rules are decreasing:
f_284(v291:0, v297:0) -> f_284(v291:0, 1 + v297:0) :|: v297:0 <= v291:0
The following rules are bounded:
f_284(v291:0, v297:0) -> f_284(v291:0, 1 + v297:0) :|: v297:0 <= v291:0

----------------------------------------

(16)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
