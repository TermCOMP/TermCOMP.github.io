YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/7nOMo.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1009 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 7 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 11 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/7nOMo.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/7nOMo.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %5
		store 0, %2
		br %9
	9:
		%10 = load %3
		%11 = load %4
		%12 = icmp sgt %10 %11
		br %12, %13, %17
	13:
		%14 = load %3
		%15 = load %5
		%16 = icmp sgt %14 %15
		br %17
	17:
		%18 = phi [0, %9], [%16, %13]
		br %18, %19, %26
	19:
		%20 = load %4
		%21 = add i32 %20, 1
		store %21, %4
		%22 = load %5
		%23 = add i32 %22, 1
		store %23, %5
		%24 = load %2
		%25 = add i32 %24, 1
		store %25, %2
		br %9
	26:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_319(v701, v702, v703, v704, v705, v706, v707, v708, v709, 1, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_320(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v711, v709, v713, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: 0 = 0
f_320(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v711, v709, v713, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_321(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v711, v709, v713, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: v712 < v706
f_321(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v711, v709, v713, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_323(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v711, v709, v713, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: 0 = 0
f_323(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v711, v709, v713, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_325(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v711, v709, v713, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: TRUE
f_325(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v711, v709, v713, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_327(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v711, v709, v713, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: 0 = 0
f_327(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v711, v709, v713, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_329(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v709, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: 0 = 0
f_329(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v709, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_330(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v709, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: v713 < v706
f_330(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v709, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_332(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v709, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: 0 = 0
f_332(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v709, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_334(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v709, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: 0 = 0
f_334(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v709, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_336(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v709, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: TRUE
f_336(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v709, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_338(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: 0 = 0
f_338(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_339(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: v832 = 1 + v712
f_339(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_340(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: TRUE
f_340(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v711, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_341(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: 0 = 0
f_341(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_342(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v834, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: v834 = 1 + v713
f_342(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v834, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_343(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v834, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: TRUE
f_343(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v834, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_344(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v834, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: 0 = 0
f_344(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v834, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_345(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v834, v715, v836, v716, v717, v718, v719, v720, 0, 3, 4, 2) :|: v836 = 1 + v715 && 2 <= v836
f_345(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v834, v715, v836, v716, v717, v718, v719, v720, 0, 3, 4, 2) -> f_346(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v834, v715, v836, v716, v717, v718, v719, v720, 0, 3, 4, 2) :|: TRUE
f_346(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v834, v715, v836, v716, v717, v718, v719, v720, 0, 3, 4, 2) -> f_347(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v834, v715, v836, v716, v717, v718, v719, v720, 0, 3, 4, 2) :|: TRUE
f_347(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v834, v715, v836, v716, v717, v718, v719, v720, 0, 3, 4, 2) -> f_318(v701, v702, v703, v704, v705, v706, v707, v708, v712, 1, v713, v832, v834, v715, v836, v716, v717, v718, v719, v720, 0, 3, 4) :|: TRUE
f_318(v701, v702, v703, v704, v705, v706, v707, v708, v709, 1, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) -> f_319(v701, v702, v703, v704, v705, v706, v707, v708, v709, 1, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_319(v701:0, v702:0, v703:0, v704:0, v705:0, v706:0, v707:0, v708:0, v709:0, 1, v711:0, v712:0, v713:0, v714:0, v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, 0, 3, 4) -> f_319(v701:0, v702:0, v703:0, v704:0, v705:0, v706:0, v707:0, v708:0, v712:0, 1, v713:0, 1 + v712:0, 1 + v713:0, v715:0, 1 + v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, 0, 3, 4) :|: v712:0 < v706:0 && v715:0 > 0 && v713:0 < v706:0
Filtered unneeded arguments:
   f_319(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_319(x6, x12, x13, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_319(v706:0, v712:0, v713:0, v715:0) -> f_319(v706:0, 1 + v712:0, 1 + v713:0, 1 + v715:0) :|: v715:0 > 0 && v713:0 < v706:0 && v712:0 < v706:0

----------------------------------------

(8)
Obligation:
Rules:
f_319(v706:0, v712:0, v713:0, v715:0) -> f_319(v706:0, 1 + v712:0, 1 + v713:0, 1 + v715:0) :|: v715:0 > 0 && v713:0 < v706:0 && v712:0 < v706:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_319(v706:0:0, v712:0:0, v713:0:0, v715:0:0) -> f_319(v706:0:0, 1 + v712:0:0, 1 + v713:0:0, 1 + v715:0:0) :|: v715:0:0 > 0 && v713:0:0 < v706:0:0 && v712:0:0 < v706:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_319 ] = -1*f_319_3 + f_319_1

The following rules are decreasing:
f_319(v706:0:0, v712:0:0, v713:0:0, v715:0:0) -> f_319(v706:0:0, 1 + v712:0:0, 1 + v713:0:0, 1 + v715:0:0) :|: v715:0:0 > 0 && v713:0:0 < v706:0:0 && v712:0:0 < v706:0:0

The following rules are bounded:
f_319(v706:0:0, v712:0:0, v713:0:0, v715:0:0) -> f_319(v706:0:0, 1 + v712:0:0, 1 + v713:0:0, 1 + v715:0:0) :|: v715:0:0 > 0 && v713:0:0 < v706:0:0 && v712:0:0 < v706:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
