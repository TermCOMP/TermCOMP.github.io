YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/GCAhb.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 672 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 11 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) LLVM Symbolic Execution SCC
        (19) SCC2IRS [SOUND, 20 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/GCAhb.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/GCAhb.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		br %5
	5:
		%6 = load %2
		%7 = icmp sgt %6 0
		br %7, %8, %19
	8:
		store 0, %3
		br %9
	9:
		%10 = load %3
		%11 = load %2
		%12 = icmp slt %10 %11
		br %12, %13, %16
	13:
		%14 = load %3
		%15 = add i32 %14, 1
		store %15, %3
		br %9
	16:
		%17 = load %2
		%18 = sub i32 %17, 1
		store %18, %2
		br %5
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 29 rulesP rules:
f_312(v370, v371, v372, v373, v374, 1, v376, v378, v379, v380, v381, v382, 0, 3, 2, 4) -> f_313(v370, v371, v372, v373, v374, 1, v376, v384, v379, v380, v381, v382, 0, 3, 2, 4) :|: v384 = 1 + v376 && 1 <= v384
f_313(v370, v371, v372, v373, v374, 1, v376, v384, v379, v380, v381, v382, 0, 3, 2, 4) -> f_314(v370, v371, v372, v373, v374, 1, v376, v384, v379, v380, v381, v382, 0, 3, 2, 4) :|: TRUE
f_314(v370, v371, v372, v373, v374, 1, v376, v384, v379, v380, v381, v382, 0, 3, 2, 4) -> f_315(v370, v371, v372, v373, v374, 1, v376, v384, v379, v380, v381, v382, 0, 3, 2, 4) :|: TRUE
f_315(v370, v371, v372, v373, v374, 1, v376, v384, v379, v380, v381, v382, 0, 3, 2, 4) -> f_316(v370, v371, v372, v373, v374, 1, v384, v376, v379, v380, v381, v382, 0, 3, 2, 4) :|: 0 = 0
f_316(v370, v371, v372, v373, v374, 1, v384, v376, v379, v380, v381, v382, 0, 3, 2, 4) -> f_317(v370, v371, v372, v373, v374, 1, v384, v376, v379, v380, v381, v382, 0, 3, 2, 4) :|: 0 = 0
f_317(v370, v371, v372, v373, v374, 1, v384, v376, v379, v380, v381, v382, 0, 3, 2, 4) -> f_318(v370, v371, v372, v373, v374, 1, v384, v376, v379, v380, v381, v382, 0, 3, 2, 4) :|: v384 < v374 && 2 <= v374 && 3 <= v379 && 3 <= v373
f_317(v370, v371, v372, v373, v374, 1, v384, v376, v379, v380, v381, v382, 0, 3, 2, 4) -> f_319(v370, v371, v372, v373, v384, 1, v376, v379, v380, v381, v382, 0, 3, 2, 4) :|: v374 <= v384 && v374 = v384
f_318(v370, v371, v372, v373, v374, 1, v384, v376, v379, v380, v381, v382, 0, 3, 2, 4) -> f_320(v370, v371, v372, v373, v374, 1, v384, v376, v379, v380, v381, v382, 0, 3, 2, 4) :|: 0 = 0
f_320(v370, v371, v372, v373, v374, 1, v384, v376, v379, v380, v381, v382, 0, 3, 2, 4) -> f_322(v370, v371, v372, v373, v374, 1, v384, v376, v379, v380, v381, v382, 0, 3, 2, 4) :|: TRUE
f_322(v370, v371, v372, v373, v374, 1, v384, v376, v379, v380, v381, v382, 0, 3, 2, 4) -> f_311(v370, v371, v372, v373, v374, 1, v384, v376, v384, v379, v380, v381, v382, 0, 3, 2, 4) :|: TRUE
f_311(v370, v371, v372, v373, v374, 1, v376, v377, v378, v379, v380, v381, v382, 0, 3, 2, 4) -> f_312(v370, v371, v372, v373, v374, 1, v376, v378, v379, v380, v381, v382, 0, 3, 2, 4) :|: 0 = 0
f_319(v370, v371, v372, v373, v384, 1, v376, v379, v380, v381, v382, 0, 3, 2, 4) -> f_321(v370, v371, v372, v373, v384, 1, 0, v376, v379, v380, v381, v382, 3, 2, 4) :|: 0 = 0
f_321(v370, v371, v372, v373, v384, 1, 0, v376, v379, v380, v381, v382, 3, 2, 4) -> f_323(v370, v371, v372, v373, v384, 1, 0, v376, v379, v380, v381, v382, 3, 2, 4) :|: TRUE
f_323(v370, v371, v372, v373, v384, 1, 0, v376, v379, v380, v381, v382, 3, 2, 4) -> f_324(v370, v371, v372, v373, v384, 1, 0, v376, v380, v381, v382, 3, 2, 4) :|: 0 = 0
f_324(v370, v371, v372, v373, v384, 1, 0, v376, v380, v381, v382, 3, 2, 4) -> f_325(v370, v371, v372, v373, v384, 1, 0, v376, v380, v381, v382, 3, 2, 4) :|: 1 + v376 = v384
f_325(v370, v371, v372, v373, v384, 1, 0, v376, v380, v381, v382, 3, 2, 4) -> f_326(v370, v371, v372, v373, v384, 1, 0, v376, v380, v381, v382, 3, 2, 4) :|: TRUE
f_326(v370, v371, v372, v373, v384, 1, 0, v376, v380, v381, v382, 3, 2, 4) -> f_327(v370, v371, v372, v373, v384, 1, 0, v376, v380, v381, v382, 3, 2, 4) :|: TRUE
f_327(v370, v371, v372, v373, v384, 1, 0, v376, v380, v381, v382, 3, 2, 4) -> f_328(v370, v371, v372, v373, v376, 1, v384, 0, v380, v381, v382, 3, 2, 4) :|: 0 = 0
f_328(v370, v371, v372, v373, v376, 1, v384, 0, v380, v381, v382, 3, 2, 4) -> f_329(v370, v371, v372, v373, v376, 1, v384, 0, v380, v381, v382, 3, 4, 2) :|: 0 < v376 && 2 <= v384 && 3 <= v373
f_329(v370, v371, v372, v373, v376, 1, v384, 0, v380, v381, v382, 3, 4, 2) -> f_331(v370, v371, v372, v373, v376, 1, v384, 0, v380, v381, v382, 3, 4, 2) :|: 0 = 0
f_331(v370, v371, v372, v373, v376, 1, v384, 0, v380, v381, v382, 3, 4, 2) -> f_333(v370, v371, v372, v373, v376, 1, v384, 0, v380, v381, v382, 3, 4, 2) :|: TRUE
f_333(v370, v371, v372, v373, v376, 1, v384, 0, v380, v381, v382, 3, 4, 2) -> f_335(v370, v371, v372, v373, v376, 1, v384, 0, v380, v381, v382, 3, 4, 2) :|: TRUE
f_335(v370, v371, v372, v373, v376, 1, v384, 0, v380, v381, v382, 3, 4, 2) -> f_336(v370, v371, v372, v373, v376, 1, v384, 0, v380, v381, v382, 3, 4, 2) :|: TRUE
f_336(v370, v371, v372, v373, v376, 1, v384, 0, v380, v381, v382, 3, 4, 2) -> f_337(v370, v371, v372, v373, v376, 1, v384, 0, v380, v381, v382, 3, 2, 4) :|: TRUE
f_337(v453, v454, v455, v456, v457, 1, v459, 0, v461, v462, v463, 3, 2, 4) -> f_338(v453, v454, v455, v456, v457, 1, 0, v459, v461, v462, v463, 3, 2, 4) :|: 0 = 0
f_338(v453, v454, v455, v456, v457, 1, 0, v459, v461, v462, v463, 3, 2, 4) -> f_339(v453, v454, v455, v456, v457, 1, 0, v459, v461, v462, v463, 3, 2, 4) :|: 0 = 0
f_339(v453, v454, v455, v456, v457, 1, 0, v459, v461, v462, v463, 3, 2, 4) -> f_340(v453, v454, v455, v456, v457, 1, 0, v459, v461, v462, v463, 3, 2, 4) :|: 0 = 0
f_340(v453, v454, v455, v456, v457, 1, 0, v459, v461, v462, v463, 3, 2, 4) -> f_341(v453, v454, v455, v456, v457, 1, 0, v459, v461, v462, v463, 3, 2, 4) :|: TRUE
f_341(v453, v454, v455, v456, v457, 1, 0, v459, v461, v462, v463, 3, 2, 4) -> f_311(v453, v454, v455, v456, v457, 1, 0, v457, v459, v459, v461, v462, v463, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_312(v370:0, v371:0, v372:0, v373:0, 1 + v376:0, 1, v376:0, v378:0, v379:0, v380:0, v381:0, v382:0, 0, 3, 2, 4) -> f_312(v370:0, v371:0, v372:0, v373:0, v376:0, 1, 0, 1 + v376:0, 1 + v376:0, v380:0, v381:0, v382:0, 0, 3, 2, 4) :|: v376:0 > 0 && v373:0 > 2
f_312(v370:0, v371:0, v372:0, v373:0, v374:0, 1, v376:0, v378:0, v379:0, v380:0, v381:0, v382:0, 0, 3, 2, 4) -> f_312(v370:0, v371:0, v372:0, v373:0, v374:0, 1, 1 + v376:0, 1 + v376:0, v379:0, v380:0, v381:0, v382:0, 0, 3, 2, 4) :|: v376:0 > -1 && v374:0 > 1 && v374:0 > 1 + v376:0 && v373:0 > 2 && v379:0 > 2
Filtered unneeded arguments:
   f_312(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_312(x4, x5, x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_312(v373:0, sum~cons_1~v376:0, v376:0, v379:0) -> f_312(v373:0, v376:0, 0, 1 + v376:0) :|: v376:0 > 0 && v373:0 > 2 && sum~cons_1~v376:0 = 1 + v376:0
f_312(v373:0, v374:0, v376:0, v379:0) -> f_312(v373:0, v374:0, 1 + v376:0, v379:0) :|: v374:0 > 1 && v376:0 > -1 && v374:0 > 1 + v376:0 && v379:0 > 2 && v373:0 > 2

----------------------------------------

(9)
Obligation:
Rules:
f_312(v373:0, sum~cons_1~v376:0, v376:0, v379:0) -> f_312(v373:0, v376:0, 0, 1 + v376:0) :|: v376:0 > 0 && v373:0 > 2 && sum~cons_1~v376:0 = 1 + v376:0
f_312(x, x1, x2, x3) -> f_312(x, x1, 1 + x2, x3) :|: x1 > 1 && x2 > -1 && x1 > 1 + x2 && x3 > 2 && x > 2

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_312(x:0, x1:0, x2:0, x3:0) -> f_312(x:0, x1:0, 1 + x2:0, x3:0) :|: x3:0 > 2 && x:0 > 2 && x1:0 > 1 + x2:0 && x2:0 > -1 && x1:0 > 1
f_312(v373:0:0, sum~cons_1~v376:0:0, v376:0:0, v379:0:0) -> f_312(v373:0:0, v376:0:0, 0, 1 + v376:0:0) :|: v376:0:0 > 0 && v373:0:0 > 2 && sum~cons_1~v376:0:0 = 1 + v376:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_312(x, x1, x2, x3)] = x1

The following rules are decreasing:
f_312(v373:0:0, sum~cons_1~v376:0:0, v376:0:0, v379:0:0) -> f_312(v373:0:0, v376:0:0, 0, 1 + v376:0:0) :|: v376:0:0 > 0 && v373:0:0 > 2 && sum~cons_1~v376:0:0 = 1 + v376:0:0
The following rules are bounded:
f_312(x:0, x1:0, x2:0, x3:0) -> f_312(x:0, x1:0, 1 + x2:0, x3:0) :|: x3:0 > 2 && x:0 > 2 && x1:0 > 1 + x2:0 && x2:0 > -1 && x1:0 > 1
f_312(v373:0:0, sum~cons_1~v376:0:0, v376:0:0, v379:0:0) -> f_312(v373:0:0, v376:0:0, 0, 1 + v376:0:0) :|: v376:0:0 > 0 && v373:0:0 > 2 && sum~cons_1~v376:0:0 = 1 + v376:0:0

----------------------------------------

(13)
Obligation:
Rules:
f_312(x:0, x1:0, x2:0, x3:0) -> f_312(x:0, x1:0, 1 + x2:0, x3:0) :|: x3:0 > 2 && x:0 > 2 && x1:0 > 1 + x2:0 && x2:0 > -1 && x1:0 > 1

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_312(x:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_312(x:0:0, x1:0:0, 1 + x2:0:0, x3:0:0) :|: x2:0:0 > -1 && x1:0:0 > 1 && x1:0:0 > 1 + x2:0:0 && x:0:0 > 2 && x3:0:0 > 2

----------------------------------------

(16) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_312 ] = -1*f_312_3 + f_312_2

The following rules are decreasing:
f_312(x:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_312(x:0:0, x1:0:0, 1 + x2:0:0, x3:0:0) :|: x2:0:0 > -1 && x1:0:0 > 1 && x1:0:0 > 1 + x2:0:0 && x:0:0 > 2 && x3:0:0 > 2

The following rules are bounded:
f_312(x:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_312(x:0:0, x1:0:0, 1 + x2:0:0, x3:0:0) :|: x2:0:0 > -1 && x1:0:0 > 1 && x1:0:0 > 1 + x2:0:0 && x:0:0 > 2 && x3:0:0 > 2


----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
SCC
----------------------------------------

(19) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_192(v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 4) -> f_193(v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 4) :|: 0 = 0
f_193(v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 4) -> f_194(v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 2, 4) :|: v71 < v68 && 2 <= v68
f_194(v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 2, 4) -> f_196(v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 2, 4) :|: 0 = 0
f_196(v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 2, 4) -> f_198(v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 2, 4) :|: TRUE
f_198(v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 2, 4) -> f_200(v65, v66, v67, v68, 1, v71, v72, v73, v74, 0, 3, 2, 4) :|: 0 = 0
f_200(v65, v66, v67, v68, 1, v71, v72, v73, v74, 0, 3, 2, 4) -> f_202(v65, v66, v67, v68, 1, v71, v76, v72, v73, v74, 0, 3, 2, 4) :|: v76 = 1 + v71 && 2 <= v76
f_202(v65, v66, v67, v68, 1, v71, v76, v72, v73, v74, 0, 3, 2, 4) -> f_204(v65, v66, v67, v68, 1, v71, v76, v72, v73, v74, 0, 3, 2, 4) :|: TRUE
f_204(v65, v66, v67, v68, 1, v71, v76, v72, v73, v74, 0, 3, 2, 4) -> f_206(v65, v66, v67, v68, 1, v71, v76, v72, v73, v74, 0, 3, 2, 4) :|: TRUE
f_206(v65, v66, v67, v68, 1, v71, v76, v72, v73, v74, 0, 3, 2, 4) -> f_191(v65, v66, v67, v68, 1, v71, v76, v72, v73, v74, 0, 3, 4) :|: TRUE
f_191(v65, v66, v67, v68, 1, v70, v71, v72, v73, v74, 0, 3, 4) -> f_192(v65, v66, v67, v68, 1, v71, v70, v72, v73, v74, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_192(v65:0, v66:0, v67:0, v68:0, 1, v71:0, v70:0, v72:0, v73:0, v74:0, 0, 3, 4) -> f_192(v65:0, v66:0, v67:0, v68:0, 1, 1 + v71:0, v71:0, v72:0, v73:0, v74:0, 0, 3, 4) :|: v68:0 > 1 && v71:0 > 0 && v71:0 < v68:0
Filtered unneeded arguments:
   f_192(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) -> f_192(x4, x6)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_192(v68:0, v71:0) -> f_192(v68:0, 1 + v71:0) :|: v71:0 > 0 && v71:0 < v68:0 && v68:0 > 1

----------------------------------------

(20)
Obligation:
Rules:
f_192(v68:0, v71:0) -> f_192(v68:0, 1 + v71:0) :|: v71:0 > 0 && v71:0 < v68:0 && v68:0 > 1

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_192(v68:0:0, v71:0:0) -> f_192(v68:0:0, 1 + v71:0:0) :|: v71:0:0 > 0 && v71:0:0 < v68:0:0 && v68:0:0 > 1

----------------------------------------

(23) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_192(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_192(v68:0:0, v71:0:0) -> f_192(v68:0:0, 1 + v71:0:0) :|: v71:0:0 > 0 && v71:0:0 < v68:0:0 && v68:0:0 > 1
The following rules are bounded:
f_192(v68:0:0, v71:0:0) -> f_192(v68:0:0, 1 + v71:0:0) :|: v71:0:0 > 0 && v71:0:0 < v68:0:0 && v68:0:0 > 1

----------------------------------------

(24)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
