YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/98o4r.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 292 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/98o4r.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/98o4r.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = load %3
		%11 = icmp eq %9 %10
		br %11, %12, %16
	12:
		%13 = load %2
		%14 = load %4
		%15 = icmp sgt %13 %14
		br %16
	16:
		%17 = phi [0, %8], [%15, %12]
		br %17, %18, %29
	18:
		br %19
	19:
		%20 = load %3
		%21 = load %4
		%22 = icmp sgt %20 %21
		br %22, %23, %28
	23:
		%24 = load %2
		%25 = sub i32 %24, 1
		store %25, %2
		%26 = load %3
		%27 = sub i32 %26, 1
		store %27, %3
		br %19
	28:
		br %8
	29:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_212(v45, v46, v47, v48, v49, v50, 1, v53, v52, v54, v55, v56, v57, 0, 3, 4) -> f_213(v45, v46, v47, v48, v49, v50, 1, v53, v52, v54, v55, v56, v57, 0, 3, 4) :|: 0 = 0
f_213(v45, v46, v47, v48, v49, v50, 1, v53, v52, v54, v55, v56, v57, 0, 3, 4) -> f_214(v45, v46, v47, v48, v49, v50, 1, v53, v52, v54, v55, v56, v57, 0, 3, 4) :|: v50 < v53
f_214(v45, v46, v47, v48, v49, v50, 1, v53, v52, v54, v55, v56, v57, 0, 3, 4) -> f_216(v45, v46, v47, v48, v49, v50, 1, v53, v52, v54, v55, v56, v57, 0, 3, 4) :|: 0 = 0
f_216(v45, v46, v47, v48, v49, v50, 1, v53, v52, v54, v55, v56, v57, 0, 3, 4) -> f_218(v45, v46, v47, v48, v49, v50, 1, v53, v52, v54, v55, v56, v57, 0, 3, 4) :|: TRUE
f_218(v45, v46, v47, v48, v49, v50, 1, v53, v52, v54, v55, v56, v57, 0, 3, 4) -> f_220(v45, v46, v47, v48, v49, v50, 1, v53, v52, v54, v55, v56, v57, 0, 3, 4) :|: 0 = 0
f_220(v45, v46, v47, v48, v49, v50, 1, v53, v52, v54, v55, v56, v57, 0, 3, 4) -> f_222(v45, v46, v47, v48, v49, v50, 1, v53, v59, v52, v54, v55, v56, v57, 0, 3, 4) :|: 1 + v59 = v53
f_222(v45, v46, v47, v48, v49, v50, 1, v53, v59, v52, v54, v55, v56, v57, 0, 3, 4) -> f_224(v45, v46, v47, v48, v49, v50, 1, v53, v59, v52, v54, v55, v56, v57, 0, 3, 4) :|: TRUE
f_224(v45, v46, v47, v48, v49, v50, 1, v53, v59, v52, v54, v55, v56, v57, 0, 3, 4) -> f_226(v45, v46, v47, v48, v49, v50, 1, v53, v59, v54, v55, v56, v57, 0, 3, 4) :|: 0 = 0
f_226(v45, v46, v47, v48, v49, v50, 1, v53, v59, v54, v55, v56, v57, 0, 3, 4) -> f_228(v45, v46, v47, v48, v49, v50, 1, v53, v59, v54, v55, v56, v57, 0, 3, 4) :|: 1 + v59 = v53
f_228(v45, v46, v47, v48, v49, v50, 1, v53, v59, v54, v55, v56, v57, 0, 3, 4) -> f_230(v45, v46, v47, v48, v49, v50, 1, v53, v59, v54, v55, v56, v57, 0, 3, 4) :|: TRUE
f_230(v45, v46, v47, v48, v49, v50, 1, v53, v59, v54, v55, v56, v57, 0, 3, 4) -> f_232(v45, v46, v47, v48, v49, v50, 1, v53, v59, v54, v55, v56, v57, 0, 3, 4) :|: TRUE
f_232(v45, v46, v47, v48, v49, v50, 1, v53, v59, v54, v55, v56, v57, 0, 3, 4) -> f_211(v45, v46, v47, v48, v49, v50, 1, v53, v59, v54, v55, v56, v57, 0, 3, 4) :|: TRUE
f_211(v45, v46, v47, v48, v49, v50, 1, v52, v53, v54, v55, v56, v57, 0, 3, 4) -> f_212(v45, v46, v47, v48, v49, v50, 1, v53, v52, v54, v55, v56, v57, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_212(v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 1, 1 + v59:0, v52:0, v54:0, v55:0, v56:0, v57:0, 0, 3, 4) -> f_212(v45:0, v46:0, v47:0, v48:0, v49:0, v50:0, 1, v59:0, 1 + v59:0, v54:0, v55:0, v56:0, v57:0, 0, 3, 4) :|: v50:0 < 1 + v59:0
Filtered unneeded arguments:
   f_212(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_212(x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_212(v50:0, sum~cons_1~v59:0) -> f_212(v50:0, v59:0) :|: v50:0 < 1 + v59:0 && sum~cons_1~v59:0 = 1 + v59:0

----------------------------------------

(8)
Obligation:
Rules:
f_212(v50:0, sum~cons_1~v59:0) -> f_212(v50:0, v59:0) :|: v50:0 < 1 + v59:0 && sum~cons_1~v59:0 = 1 + v59:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_212(v50:0:0, sum~cons_1~v59:0:0) -> f_212(v50:0:0, v59:0:0) :|: v50:0:0 < 1 + v59:0:0 && sum~cons_1~v59:0:0 = 1 + v59:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_212(x, x1)] = -x + x1

The following rules are decreasing:
f_212(v50:0:0, sum~cons_1~v59:0:0) -> f_212(v50:0:0, v59:0:0) :|: v50:0:0 < 1 + v59:0:0 && sum~cons_1~v59:0:0 = 1 + v59:0:0
The following rules are bounded:
f_212(v50:0:0, sum~cons_1~v59:0:0) -> f_212(v50:0:0, v59:0:0) :|: v50:0:0 < 1 + v59:0:0 && sum~cons_1~v59:0:0 = 1 + v59:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
