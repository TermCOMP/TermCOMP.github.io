YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/5HHf5.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1795 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 38 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 10 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/5HHf5.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/5HHf5.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "iterate" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store 0, %4
		store 0, %3
		br %5
	5:
		%6 = load %3
		%7 = load %2
		%8 = icmp slt %6 %7
		br %8, %9, %16
	9:
		%10 = load %3
		%11 = load %4
		%12 = add i32 %11, %10
		store %12, %4
		br %13
	13:
		%14 = load %3
		%15 = add i32 %14, 1
		store %15, %3
		br %5
	16:
		%17 = load %4
		ret %17

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 36
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @iterate(i32 %2)
		ret %3


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_229(v85, v86, v87, v88, v93, 1, v89, v91, v92, v94, v95, v96, v97, v98, 0, 3, 4) -> f_230(v85, v86, v87, v88, v93, 1, v89, v91, v92, v94, v95, v96, v97, v98, 0, 3, 4) :|: 0 = 0
f_230(v85, v86, v87, v88, v93, 1, v89, v91, v92, v94, v95, v96, v97, v98, 0, 3, 4) -> f_231(v85, v86, v87, v88, v93, 1, v89, v91, v92, v94, v95, v96, v97, v98, 0, 3, 2, 4) :|: v93 < v85 && 2 <= v85
f_231(v85, v86, v87, v88, v93, 1, v89, v91, v92, v94, v95, v96, v97, v98, 0, 3, 2, 4) -> f_233(v85, v86, v87, v88, v93, 1, v89, v91, v92, v94, v95, v96, v97, v98, 0, 3, 2, 4) :|: 0 = 0
f_233(v85, v86, v87, v88, v93, 1, v89, v91, v92, v94, v95, v96, v97, v98, 0, 3, 2, 4) -> f_235(v85, v86, v87, v88, v93, 1, v89, v91, v92, v94, v95, v96, v97, v98, 0, 3, 2, 4) :|: TRUE
f_235(v85, v86, v87, v88, v93, 1, v89, v91, v92, v94, v95, v96, v97, v98, 0, 3, 2, 4) -> f_237(v85, v86, v87, v88, v93, 1, v91, v92, v89, v94, v95, v96, v97, v98, 0, 3, 2, 4) :|: 0 = 0
f_237(v85, v86, v87, v88, v93, 1, v91, v92, v89, v94, v95, v96, v97, v98, 0, 3, 2, 4) -> f_239(v85, v86, v87, v88, v93, 1, v92, v89, v94, v95, v96, v97, v98, 0, 3, 2, 4) :|: 0 = 0
f_239(v85, v86, v87, v88, v93, 1, v92, v89, v94, v95, v96, v97, v98, 0, 3, 2, 4) -> f_241(v85, v86, v87, v88, v93, 1, v92, v100, v89, v94, v95, v96, v97, v98, 0, 3, 2, 4) :|: v100 = v92 + v93 && 1 <= v100
f_241(v85, v86, v87, v88, v93, 1, v92, v100, v89, v94, v95, v96, v97, v98, 0, 3, 2, 4) -> f_242(v85, v86, v87, v88, v93, 1, v92, v100, v89, v94, v95, v96, v97, v98, 0, 3, 2, 4) :|: TRUE
f_242(v85, v86, v87, v88, v93, 1, v92, v100, v89, v94, v95, v96, v97, v98, 0, 3, 2, 4) -> f_243(v85, v86, v87, v88, v93, 1, v92, v100, v89, v94, v95, v96, v97, v98, 0, 3, 2, 4) :|: TRUE
f_243(v85, v86, v87, v88, v93, 1, v92, v100, v89, v94, v95, v96, v97, v98, 0, 3, 2, 4) -> f_244(v85, v86, v87, v88, v93, 1, v92, v100, v94, v95, v96, v97, v98, 0, 3, 2, 4) :|: 0 = 0
f_244(v85, v86, v87, v88, v93, 1, v92, v100, v94, v95, v96, v97, v98, 0, 3, 2, 4) -> f_245(v85, v86, v87, v88, v93, 1, v92, v100, v102, v94, v95, v96, v97, v98, 0, 3, 2, 4) :|: v102 = 1 + v93 && 2 <= v102
f_245(v85, v86, v87, v88, v93, 1, v92, v100, v102, v94, v95, v96, v97, v98, 0, 3, 2, 4) -> f_246(v85, v86, v87, v88, v93, 1, v92, v100, v102, v94, v95, v96, v97, v98, 0, 3, 2, 4) :|: TRUE
f_246(v85, v86, v87, v88, v93, 1, v92, v100, v102, v94, v95, v96, v97, v98, 0, 3, 2, 4) -> f_247(v85, v86, v87, v88, v93, 1, v92, v100, v102, v94, v95, v96, v97, v98, 0, 3, 2, 4) :|: TRUE
f_247(v85, v86, v87, v88, v93, 1, v92, v100, v102, v94, v95, v96, v97, v98, 0, 3, 2, 4) -> f_228(v85, v86, v87, v88, v93, 1, v92, v100, v102, v94, v95, v96, v97, v98, 0, 3, 4) :|: TRUE
f_228(v85, v86, v87, v88, v89, 1, v91, v92, v93, v94, v95, v96, v97, v98, 0, 3, 4) -> f_229(v85, v86, v87, v88, v93, 1, v89, v91, v92, v94, v95, v96, v97, v98, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_229(v85:0, v86:0, v87:0, v88:0, v93:0, 1, v89:0, v91:0, v92:0, v94:0, v95:0, v96:0, v97:0, v98:0, 0, 3, 4) -> f_229(v85:0, v86:0, v87:0, v88:0, 1 + v93:0, 1, v93:0, v92:0, v92:0 + v93:0, v94:0, v95:0, v96:0, v97:0, v98:0, 0, 3, 4) :|: v85:0 > 1 && v93:0 < v85:0 && v93:0 > 0 && v92:0 + v93:0 > 0
Filtered unneeded arguments:
   f_229(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_229(x1, x5, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_229(v85:0, v93:0, v92:0) -> f_229(v85:0, 1 + v93:0, v92:0 + v93:0) :|: v93:0 < v85:0 && v85:0 > 1 && v92:0 + v93:0 > 0 && v93:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f_229(v85:0, v93:0, v92:0) -> f_229(v85:0, 1 + v93:0, v92:0 + v93:0) :|: v93:0 < v85:0 && v85:0 > 1 && v92:0 + v93:0 > 0 && v93:0 > 0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_229(v85:0:0, v93:0:0, v92:0:0) -> f_229(v85:0:0, 1 + v93:0:0, v92:0:0 + v93:0:0) :|: v92:0:0 + v93:0:0 > 0 && v93:0:0 > 0 && v85:0:0 > 1 && v93:0:0 < v85:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_229 ] = -1*f_229_2 + f_229_1

The following rules are decreasing:
f_229(v85:0:0, v93:0:0, v92:0:0) -> f_229(v85:0:0, 1 + v93:0:0, v92:0:0 + v93:0:0) :|: v92:0:0 + v93:0:0 > 0 && v93:0:0 > 0 && v85:0:0 > 1 && v93:0:0 < v85:0:0

The following rules are bounded:
f_229(v85:0:0, v93:0:0, v92:0:0) -> f_229(v85:0:0, 1 + v93:0:0, v92:0:0 + v93:0:0) :|: v92:0:0 + v93:0:0 > 0 && v93:0:0 > 0 && v85:0:0 > 1 && v93:0:0 < v85:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
