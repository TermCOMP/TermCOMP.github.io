YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ena9u.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 35 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2133 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 33 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/ena9u.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/ena9u.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "sumOfThirdBytes" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca *i32, align 8
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %7)
		store 0, %6
		store 0, %5
		br %8
	8:
		%9 = load %5
		%10 = load %4
		%11 = icmp slt %9 %10
		br %11, %12, %28
	12:
		%13 = load %3
		%14 = load %5
		%15 = sext i32 %14 to i64
		%16 = getelementptr %13, %15
		%17 = bitcast *i32 %16 to *i8
		store %17, %7
		%18 = load %7
		%19 = getelementptr %18, 2
		store %19, %7
		%20 = load %6
		%21 = load %7
		%22 = load %21
		%23 = sext i8 %22 to i32
		%24 = add i32 %20, %23
		store %24, %6
		br %25
	25:
		%26 = load %5
		%27 = add i32 %26, 1
		store %27, %5
		br %8
	28:
		%29 = load %6
		ret %29

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 54
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %3
		%5 = load %2
		%6 = load %3
		%7 = call i32 @sumOfThirdBytes(*i32 %5, i32 %6)
		ret %7


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_407(v222, v223, v224, v225, v226, v227, v228, v236, 1, v229, v231, v232, v233, v234, v235, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) -> f_408(v222, v223, v224, v225, v226, v227, v228, v236, 1, v229, v231, v232, v233, v234, v235, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_408(v222, v223, v224, v225, v226, v227, v228, v236, 1, v229, v231, v232, v233, v234, v235, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) -> f_409(v222, v223, v224, v225, v226, v227, v228, v236, 1, v229, v231, v232, v233, v234, v235, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) :|: v236 < v223 && 2 <= v223
f_409(v222, v223, v224, v225, v226, v227, v228, v236, 1, v229, v231, v232, v233, v234, v235, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) -> f_411(v222, v223, v224, v225, v226, v227, v228, v236, 1, v229, v231, v232, v233, v234, v235, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_411(v222, v223, v224, v225, v226, v227, v228, v236, 1, v229, v231, v232, v233, v234, v235, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) -> f_413(v222, v223, v224, v225, v226, v227, v228, v236, 1, v229, v231, v232, v233, v234, v235, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) :|: TRUE
f_413(v222, v223, v224, v225, v226, v227, v228, v236, 1, v229, v231, v232, v233, v234, v235, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) -> f_415(v222, v223, v224, v225, v226, v227, v228, v236, 1, v229, v231, v232, v233, v234, v235, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_415(v222, v223, v224, v225, v226, v227, v228, v236, 1, v229, v231, v232, v233, v234, v235, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) -> f_417(v222, v223, v224, v225, v226, v227, v228, v236, 1, v229, v231, v232, v233, v234, v235, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_417(v222, v223, v224, v225, v226, v227, v228, v236, 1, v229, v231, v232, v233, v234, v235, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) -> f_419(v222, v223, v224, v225, v226, v227, v228, v236, 1, v231, v232, v233, v234, v235, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_419(v222, v223, v224, v225, v226, v227, v228, v236, 1, v231, v232, v233, v234, v235, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) -> f_420(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v231, v232, v233, v234, v235, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) :|: v249 = v222 + 4 * v236 && 4 <= v249
f_420(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v231, v232, v233, v234, v235, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) -> f_421(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v231, v232, v233, v234, v235, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_421(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v231, v232, v233, v234, v235, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) -> f_422(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v231, v232, v233, v234, v235, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) :|: TRUE
f_422(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v231, v232, v233, v234, v235, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) -> f_423(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v232, v233, v234, v235, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8) :|: 0 = 0
f_423(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v232, v233, v234, v235, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8) -> f_424(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v233, v232, v234, v235, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) :|: v251 = 2 + v249 && 6 <= v251
f_424(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v233, v232, v234, v235, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) -> f_425(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v233, v232, v234, v235, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) :|: TRUE
f_425(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v233, v232, v234, v235, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) -> f_426(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v232, v234, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) :|: 0 = 0
f_426(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v232, v234, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) -> f_427(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v234, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) :|: 0 = 0
f_427(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v234, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) -> f_428(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v234, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) :|: TRUE
f_428(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v234, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) -> f_429(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) :|: 0 = 0
f_429(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) -> f_430(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v255, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) :|: v255 = v235 + v253
f_430(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v255, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) -> f_431(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v255, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) :|: TRUE
f_431(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v255, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) -> f_432(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v255, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) :|: TRUE
f_432(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v255, v229, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) -> f_433(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v255, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) :|: 0 = 0
f_433(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v255, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) -> f_434(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v255, v257, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) :|: v257 = 1 + v236 && 2 <= v257
f_434(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v255, v257, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) -> f_435(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v255, v257, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) :|: TRUE
f_435(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v255, v257, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) -> f_436(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v255, v257, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) :|: TRUE
f_436(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v255, v257, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 4, 2, 8, 6) -> f_406(v222, v223, v224, v225, v226, v227, v228, v236, 1, v249, v251, v235, v253, v255, v257, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) :|: TRUE
f_406(v222, v223, v224, v225, v226, v227, v228, v229, 1, v231, v232, v233, v234, v235, v236, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) -> f_407(v222, v223, v224, v225, v226, v227, v228, v236, 1, v229, v231, v232, v233, v234, v235, v237, v240, v238, v241, v239, v242, v243, v244, v245, v246, v247, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_407(v222:0, v223:0, v224:0, v225:0, v226:0, v227:0, v228:0, v236:0, 1, v229:0, v231:0, v232:0, v233:0, v234:0, v235:0, v237:0, v240:0, v238:0, v241:0, v239:0, v242:0, v243:0, v244:0, v245:0, v246:0, v247:0, 0, 3, 7, 2, 4, 8) -> f_407(v222:0, v223:0, v224:0, v225:0, v226:0, v227:0, v228:0, 1 + v236:0, 1, v236:0, v222:0 + 4 * v236:0, 2 + (v222:0 + 4 * v236:0), v235:0, v253:0, v235:0 + v253:0, v237:0, v240:0, v238:0, v241:0, v239:0, v242:0, v243:0, v244:0, v245:0, v246:0, v247:0, 0, 3, 7, 2, 4, 8) :|: v223:0 > 1 && v236:0 < v223:0 && v222:0 + 4 * v236:0 > 3 && v236:0 > 0
Filtered unneeded arguments:
   f_407(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32) -> f_407(x1, x2, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_407(v222:0, v223:0, v236:0) -> f_407(v222:0, v223:0, 1 + v236:0) :|: v236:0 < v223:0 && v223:0 > 1 && v236:0 > 0 && v222:0 + 4 * v236:0 > 3

----------------------------------------

(8)
Obligation:
Rules:
f_407(v222:0, v223:0, v236:0) -> f_407(v222:0, v223:0, 1 + v236:0) :|: v236:0 < v223:0 && v223:0 > 1 && v236:0 > 0 && v222:0 + 4 * v236:0 > 3

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_407(v222:0:0, v223:0:0, v236:0:0) -> f_407(v222:0:0, v223:0:0, 1 + v236:0:0) :|: v236:0:0 > 0 && v222:0:0 + 4 * v236:0:0 > 3 && v223:0:0 > 1 && v236:0:0 < v223:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_407 ] = -1*f_407_3 + f_407_2

The following rules are decreasing:
f_407(v222:0:0, v223:0:0, v236:0:0) -> f_407(v222:0:0, v223:0:0, 1 + v236:0:0) :|: v236:0:0 > 0 && v222:0:0 + 4 * v236:0:0 > 3 && v223:0:0 > 1 && v236:0:0 < v223:0:0

The following rules are bounded:
f_407(v222:0:0, v223:0:0, v236:0:0) -> f_407(v222:0:0, v223:0:0, 1 + v236:0:0) :|: v236:0:0 > 0 && v222:0:0 + 4 * v236:0:0 > 3 && v223:0:0 > 1 && v236:0:0 < v223:0:0


----------------------------------------

(12)
YES
/hpcwork/ff862203/termcomp25/benchmarks/ena9u.c:9:11: warning: incompatible pointer types assigning to 'char *' from 'int *' [-Wincompatible-pointer-types]
        p = &(numbers[i]);
          ^ ~~~~~~~~~~~~~
1 warning generated.

Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
