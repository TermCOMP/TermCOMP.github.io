YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/uBf3M.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1392 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 43 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) RankingReductionPairProof [EQUIVALENT, 10 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 50 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/uBf3M.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/uBf3M.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		store 0, %2
		br %7
	7:
		%8 = load %3
		%9 = icmp sge %8 0
		br %9, %10, %24
	10:
		store 0, %4
		br %11
	11:
		%12 = load %4
		%13 = load %3
		%14 = sub i32 %13, 1
		%15 = icmp sle %12 %14
		br %15, %16, %21
	16:
		%17 = load %4
		%18 = add i32 %17, 1
		store %18, %4
		%19 = load %2
		%20 = add i32 %19, 1
		store %20, %2
		br %11
	21:
		%22 = load %3
		%23 = sub i32 %22, 1
		store %23, %3
		br %7
	24:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 34 rulesP rules:
f_445(v625, v626, v627, v628, v629, v630, v631, 1, 0, v633, v635, v636, v637, v638, v639, v640, v641, v642, 3, 4) -> f_446(v625, v626, v627, v628, v629, v630, v631, 1, 0, v635, v636, v637, v638, v633, v639, v640, v641, v642, 3, 4) :|: 0 = 0
f_446(v625, v626, v627, v628, v629, v630, v631, 1, 0, v635, v636, v637, v638, v633, v639, v640, v641, v642, 3, 4) -> f_447(v625, v626, v627, v628, v629, v630, v631, 1, 0, v654, v635, v636, v637, v638, v633, v639, v640, v641, v642, 3, 4) :|: 1 + v654 = v631 && 0 <= 1 + v654
f_447(v625, v626, v627, v628, v629, v630, v631, 1, 0, v654, v635, v636, v637, v638, v633, v639, v640, v641, v642, 3, 4) -> f_448(v625, v626, v627, v628, v629, v630, v631, 1, 0, v654, v635, v636, v637, v638, v633, v639, v640, v641, v642, 3, 2, 4) :|: 0 <= v654 && 1 <= v631 && 2 <= v633 && 2 <= v629 && 2 <= v636 && 1 <= v635 && 2 <= v638 && 1 <= v637
f_448(v625, v626, v627, v628, v629, v630, v631, 1, 0, v654, v635, v636, v637, v638, v633, v639, v640, v641, v642, 3, 2, 4) -> f_450(v625, v626, v627, v628, v629, v630, v631, 1, 0, v654, v635, v636, v637, v638, v633, v639, v640, v641, v642, 3, 2, 4) :|: 0 = 0
f_450(v625, v626, v627, v628, v629, v630, v631, 1, 0, v654, v635, v636, v637, v638, v633, v639, v640, v641, v642, 3, 2, 4) -> f_452(v625, v626, v627, v628, v629, v630, v631, 1, 0, v654, v635, v636, v637, v638, v633, v639, v640, v641, v642, 3, 2, 4) :|: TRUE
f_452(v625, v626, v627, v628, v629, v630, v631, 1, 0, v654, v635, v636, v637, v638, v633, v639, v640, v641, v642, 3, 2, 4) -> f_453(v625, v626, v627, v628, v629, v630, v631, 1, 0, v654, v635, v636, v637, v638, v633, v639, v640, v641, v642, 0, 3, 2, 4) :|: TRUE
f_453(v669, v670, v671, v672, v673, v674, v675, 1, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_455(v669, v670, v671, v672, v673, v674, v675, 1, v677, v678, v680, v681, v682, v683, v684, v685, v686, v687, 0, 3, 2, 4) :|: 0 = 0
f_455(v669, v670, v671, v672, v673, v674, v675, 1, v677, v678, v680, v681, v682, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_457(v669, v670, v671, v672, v673, v674, v675, 1, v677, v678, v695, v681, v682, v683, v684, v685, v686, v687, 0, 3, 2, 4) :|: v695 = 1 + v677 && 1 <= v695
f_457(v669, v670, v671, v672, v673, v674, v675, 1, v677, v678, v695, v681, v682, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_459(v669, v670, v671, v672, v673, v674, v675, 1, v677, v678, v695, v681, v682, v683, v684, v685, v686, v687, 0, 3, 2, 4) :|: TRUE
f_459(v669, v670, v671, v672, v673, v674, v675, 1, v677, v678, v695, v681, v682, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_461(v669, v670, v671, v672, v673, v674, v675, 1, v677, v678, v695, v682, v683, v684, v685, v686, v687, 0, 3, 2, 4) :|: 0 = 0
f_461(v669, v670, v671, v672, v673, v674, v675, 1, v677, v678, v695, v682, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_463(v669, v670, v671, v672, v673, v674, v675, 1, v677, v678, v695, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) :|: v713 = 1 + v682 && 3 <= v713
f_463(v669, v670, v671, v672, v673, v674, v675, 1, v677, v678, v695, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_465(v669, v670, v671, v672, v673, v674, v675, 1, v677, v678, v695, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) :|: TRUE
f_465(v669, v670, v671, v672, v673, v674, v675, 1, v677, v678, v695, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_467(v669, v670, v671, v672, v673, v674, v675, 1, v677, v678, v695, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) :|: TRUE
f_467(v669, v670, v671, v672, v673, v674, v675, 1, v677, v678, v695, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_469(v669, v670, v671, v672, v673, v674, v675, 1, v695, v678, v677, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) :|: 0 = 0
f_469(v669, v670, v671, v672, v673, v674, v675, 1, v695, v678, v677, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_470(v669, v670, v671, v672, v673, v674, v675, 1, v695, v678, v677, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) :|: 0 = 0
f_470(v669, v670, v671, v672, v673, v674, v675, 1, v695, v678, v677, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_471(v669, v670, v671, v672, v673, v674, v675, 1, v695, v678, v677, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) :|: 1 + v678 = v675
f_471(v669, v670, v671, v672, v673, v674, v675, 1, v695, v678, v677, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_472(v669, v670, v671, v672, v673, v674, v675, 1, v695, v678, v677, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) :|: v695 <= v678 && 1 <= v678 && 2 <= v675 && 3 <= v683 && 3 <= v673 && 3 <= v682 && 4 <= v713
f_471(v669, v670, v671, v672, v673, v674, v675, 1, v695, v678, v677, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_473(v669, v670, v671, v672, v673, v674, v695, 1, v677, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) :|: v678 < v695 && v675 = v695 && v678 = v677
f_472(v669, v670, v671, v672, v673, v674, v675, 1, v695, v678, v677, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_474(v669, v670, v671, v672, v673, v674, v675, 1, v695, v678, v677, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) :|: 0 = 0
f_474(v669, v670, v671, v672, v673, v674, v675, 1, v695, v678, v677, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_476(v669, v670, v671, v672, v673, v674, v675, 1, v695, v678, v677, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) :|: TRUE
f_476(v669, v670, v671, v672, v673, v674, v675, 1, v695, v678, v677, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_453(v669, v670, v671, v672, v673, v674, v675, 1, v695, v678, v677, v695, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) :|: TRUE
f_473(v669, v670, v671, v672, v673, v674, v695, 1, v677, v682, v713, v683, v684, v685, v686, v687, 0, 3, 2, 4) -> f_475(v669, v670, v671, v672, v673, v674, v695, 1, v677, 0, v682, v713, v683, v684, v685, v686, v687, 3, 2, 4) :|: 0 = 0
f_475(v669, v670, v671, v672, v673, v674, v695, 1, v677, 0, v682, v713, v683, v684, v685, v686, v687, 3, 2, 4) -> f_477(v669, v670, v671, v672, v673, v674, v695, 1, v677, 0, v682, v713, v683, v684, v685, v686, v687, 3, 2, 4) :|: TRUE
f_477(v669, v670, v671, v672, v673, v674, v695, 1, v677, 0, v682, v713, v683, v684, v685, v686, v687, 3, 2, 4) -> f_478(v669, v670, v671, v672, v673, v674, v695, 1, v677, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) :|: 0 = 0
f_478(v669, v670, v671, v672, v673, v674, v695, 1, v677, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) -> f_479(v669, v670, v671, v672, v673, v674, v695, 1, v677, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) :|: 1 + v677 = v695
f_479(v669, v670, v671, v672, v673, v674, v695, 1, v677, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) -> f_480(v669, v670, v671, v672, v673, v674, v695, 1, v677, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) :|: TRUE
f_480(v669, v670, v671, v672, v673, v674, v695, 1, v677, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) -> f_481(v669, v670, v671, v672, v673, v674, v695, 1, v677, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) :|: TRUE
f_481(v669, v670, v671, v672, v673, v674, v695, 1, v677, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) -> f_482(v669, v670, v671, v672, v673, v674, v677, 1, v695, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) :|: 0 = 0
f_482(v669, v670, v671, v672, v673, v674, v677, 1, v695, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) -> f_483(v669, v670, v671, v672, v673, v674, v677, 1, v695, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) :|: 0 = 0
f_483(v669, v670, v671, v672, v673, v674, v677, 1, v695, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) -> f_484(v669, v670, v671, v672, v673, v674, v677, 1, v695, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) :|: TRUE
f_484(v669, v670, v671, v672, v673, v674, v677, 1, v695, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) -> f_485(v669, v670, v671, v672, v673, v674, v677, 1, v695, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) :|: TRUE
f_485(v669, v670, v671, v672, v673, v674, v677, 1, v695, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) -> f_486(v669, v670, v671, v672, v673, v674, v677, 1, v695, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) :|: TRUE
f_486(v669, v670, v671, v672, v673, v674, v677, 1, v695, 0, v682, v713, v684, v685, v686, v687, 3, 2, 4) -> f_444(v669, v670, v671, v672, v673, v674, v677, 1, v695, 0, v677, v695, v682, v713, v684, v685, v686, v687, 3, 4) :|: TRUE
f_444(v625, v626, v627, v628, v629, v630, v631, 1, v633, 0, v635, v636, v637, v638, v639, v640, v641, v642, 3, 4) -> f_445(v625, v626, v627, v628, v629, v630, v631, 1, 0, v633, v635, v636, v637, v638, v639, v640, v641, v642, 3, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_471(v669:0, v670:0, v671:0, v672:0, v673:0, v674:0, 1 + (1 + v654:0), 1, 1 + (1 + v654:0), 1 + v654:0, 1 + v654:0, v682:0, v713:0, v683:0, v684:0, v685:0, v686:0, v687:0, 0, 3, 2, 4) -> f_471(v669:0, v670:0, v671:0, v672:0, v673:0, v674:0, 1 + v654:0, 1, 1, v654:0, 0, v713:0, 1 + v713:0, 1 + (1 + v654:0), v684:0, v685:0, v686:0, v687:0, 0, 3, 2, 4) :|: v654:0 > -1 && v673:0 > 1 && v713:0 > 1 && v682:0 > 0 && 1 + v654:0 < 1 + (1 + v654:0)
f_471(v669:0, v670:0, v671:0, v672:0, v673:0, v674:0, 1 + v678:0, 1, v695:0, v678:0, v677:0, v682:0, v713:0, v683:0, v684:0, v685:0, v686:0, v687:0, 0, 3, 2, 4) -> f_471(v669:0, v670:0, v671:0, v672:0, v673:0, v674:0, 1 + v678:0, 1, 1 + v695:0, v678:0, v695:0, v713:0, 1 + v713:0, v683:0, v684:0, v685:0, v686:0, v687:0, 0, 3, 2, 4) :|: v713:0 > 3 && v695:0 > -1 && v678:0 > 0 && v695:0 <= v678:0 && v683:0 > 2 && v682:0 > 2 && v673:0 > 2
Filtered unneeded arguments:
   f_471(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_471(x5, x7, x9, x10, x11, x12, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_471(v673:0, sum~cons_1~sum~cons_1~v654:0, sum~cons_1~sum~cons_1~v654:01, sum~cons_1~v654:0, sum~cons_1~v654:01, v682:0, v713:0, v683:0) -> f_471(v673:0, 1 + v654:0, 1, v654:0, 0, v713:0, 1 + v713:0, 1 + (1 + v654:0)) :|: v673:0 > 1 && v654:0 > -1 && v713:0 > 1 && 1 + v654:0 < 1 + (1 + v654:0) && v682:0 > 0 && sum~cons_1~sum~cons_1~v654:0 = 1 + (1 + v654:0) && sum~cons_1~sum~cons_1~v654:01 = 1 + (1 + v654:0) && sum~cons_1~v654:0 = 1 + v654:0 && sum~cons_1~v654:01 = 1 + v654:0
f_471(v673:0, sum~cons_1~v678:0, v695:0, v678:0, v677:0, v682:0, v713:0, v683:0) -> f_471(v673:0, 1 + v678:0, 1 + v695:0, v678:0, v695:0, v713:0, 1 + v713:0, v683:0) :|: v695:0 > -1 && v713:0 > 3 && v678:0 > 0 && v695:0 <= v678:0 && v683:0 > 2 && v673:0 > 2 && v682:0 > 2 && sum~cons_1~v678:0 = 1 + v678:0

----------------------------------------

(9)
Obligation:
Rules:
f_471(v673:0, sum~cons_1~sum~cons_1~v654:0, sum~cons_1~sum~cons_1~v654:01, sum~cons_1~v654:0, sum~cons_1~v654:01, v682:0, v713:0, v683:0) -> f_471(v673:0, 1 + v654:0, 1, v654:0, 0, v713:0, 1 + v713:0, 1 + (1 + v654:0)) :|: v673:0 > 1 && v654:0 > -1 && v713:0 > 1 && 1 + v654:0 < 1 + (1 + v654:0) && v682:0 > 0 && sum~cons_1~sum~cons_1~v654:0 = 1 + (1 + v654:0) && sum~cons_1~sum~cons_1~v654:01 = 1 + (1 + v654:0) && sum~cons_1~v654:0 = 1 + v654:0 && sum~cons_1~v654:01 = 1 + v654:0
f_471(x, x1, x2, x3, x4, x5, x6, x7) -> f_471(x, 1 + x3, 1 + x2, x3, x2, x6, 1 + x6, x7) :|: x2 > -1 && x6 > 3 && x3 > 0 && x2 <= x3 && x7 > 2 && x > 2 && x5 > 2 && x1 = 1 + x3

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_471(v673:0:0, sum~cons_1~sum~cons_1~v654:0:0, sum~cons_1~sum~cons_1~v654:0:01, sum~cons_1~v654:0:0, sum~cons_1~v654:0:01, v682:0:0, v713:0:0, v683:0:0) -> f_471(v673:0:0, 1 + v654:0:0, 1, v654:0:0, 0, v713:0:0, 1 + v713:0:0, 1 + (1 + v654:0:0)) :|: 1 + v654:0:0 < 1 + (1 + v654:0:0) && v682:0:0 > 0 && v713:0:0 > 1 && v654:0:0 > -1 && v673:0:0 > 1 && sum~cons_1~sum~cons_1~v654:0:0 = 1 + (1 + v654:0:0) && sum~cons_1~sum~cons_1~v654:0:01 = 1 + (1 + v654:0:0) && sum~cons_1~v654:0:0 = 1 + v654:0:0 && sum~cons_1~v654:0:01 = 1 + v654:0:0
f_471(x:0, sum~cons_1~x3:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0) -> f_471(x:0, 1 + x3:0, 1 + x2:0, x3:0, x2:0, x6:0, 1 + x6:0, x7:0) :|: x:0 > 2 && x5:0 > 2 && x7:0 > 2 && x3:0 >= x2:0 && x3:0 > 0 && x6:0 > 3 && x2:0 > -1 && sum~cons_1~x3:0 = 1 + x3:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_471(x, x1, x2, x3, x4, x5, x6, x7)] = x3

The following rules are decreasing:
f_471(v673:0:0, sum~cons_1~sum~cons_1~v654:0:0, sum~cons_1~sum~cons_1~v654:0:01, sum~cons_1~v654:0:0, sum~cons_1~v654:0:01, v682:0:0, v713:0:0, v683:0:0) -> f_471(v673:0:0, 1 + v654:0:0, 1, v654:0:0, 0, v713:0:0, 1 + v713:0:0, 1 + (1 + v654:0:0)) :|: 1 + v654:0:0 < 1 + (1 + v654:0:0) && v682:0:0 > 0 && v713:0:0 > 1 && v654:0:0 > -1 && v673:0:0 > 1 && sum~cons_1~sum~cons_1~v654:0:0 = 1 + (1 + v654:0:0) && sum~cons_1~sum~cons_1~v654:0:01 = 1 + (1 + v654:0:0) && sum~cons_1~v654:0:0 = 1 + v654:0:0 && sum~cons_1~v654:0:01 = 1 + v654:0:0
The following rules are bounded:
f_471(v673:0:0, sum~cons_1~sum~cons_1~v654:0:0, sum~cons_1~sum~cons_1~v654:0:01, sum~cons_1~v654:0:0, sum~cons_1~v654:0:01, v682:0:0, v713:0:0, v683:0:0) -> f_471(v673:0:0, 1 + v654:0:0, 1, v654:0:0, 0, v713:0:0, 1 + v713:0:0, 1 + (1 + v654:0:0)) :|: 1 + v654:0:0 < 1 + (1 + v654:0:0) && v682:0:0 > 0 && v713:0:0 > 1 && v654:0:0 > -1 && v673:0:0 > 1 && sum~cons_1~sum~cons_1~v654:0:0 = 1 + (1 + v654:0:0) && sum~cons_1~sum~cons_1~v654:0:01 = 1 + (1 + v654:0:0) && sum~cons_1~v654:0:0 = 1 + v654:0:0 && sum~cons_1~v654:0:01 = 1 + v654:0:0
f_471(x:0, sum~cons_1~x3:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0) -> f_471(x:0, 1 + x3:0, 1 + x2:0, x3:0, x2:0, x6:0, 1 + x6:0, x7:0) :|: x:0 > 2 && x5:0 > 2 && x7:0 > 2 && x3:0 >= x2:0 && x3:0 > 0 && x6:0 > 3 && x2:0 > -1 && sum~cons_1~x3:0 = 1 + x3:0

----------------------------------------

(13)
Obligation:
Rules:
f_471(x:0, sum~cons_1~x3:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0) -> f_471(x:0, 1 + x3:0, 1 + x2:0, x3:0, x2:0, x6:0, 1 + x6:0, x7:0) :|: x:0 > 2 && x5:0 > 2 && x7:0 > 2 && x3:0 >= x2:0 && x3:0 > 0 && x6:0 > 3 && x2:0 > -1 && sum~cons_1~x3:0 = 1 + x3:0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_471(x:0:0, sum~cons_1~x3:0:0, x2:0:0, x3:0:0, x4:0:0, x5:0:0, x6:0:0, x7:0:0) -> f_471(x:0:0, 1 + x3:0:0, 1 + x2:0:0, x3:0:0, x2:0:0, x6:0:0, 1 + x6:0:0, x7:0:0) :|: x6:0:0 > 3 && x2:0:0 > -1 && x3:0:0 > 0 && x3:0:0 >= x2:0:0 && x7:0:0 > 2 && x5:0:0 > 2 && x:0:0 > 2 && sum~cons_1~x3:0:0 = 1 + x3:0:0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_471(x1, x2, x3, x4, x5, x6, x7, x8) -> f_471(x1, x2, x3, x4, x6, x7, x8)

----------------------------------------

(17)
Obligation:
Rules:
f_471(x:0:0, sum~cons_1~x3:0:0, x2:0:0, x3:0:0, x5:0:0, x6:0:0, x7:0:0) -> f_471(x:0:0, 1 + x3:0:0, 1 + x2:0:0, x3:0:0, x6:0:0, 1 + x6:0:0, x7:0:0) :|: x6:0:0 > 3 && x2:0:0 > -1 && x3:0:0 > 0 && x3:0:0 >= x2:0:0 && x7:0:0 > 2 && x5:0:0 > 2 && x:0:0 > 2 && sum~cons_1~x3:0:0 = 1 + x3:0:0

----------------------------------------

(18) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_471 ] = -1*f_471_3 + f_471_4

The following rules are decreasing:
f_471(x:0:0, sum~cons_1~x3:0:0, x2:0:0, x3:0:0, x5:0:0, x6:0:0, x7:0:0) -> f_471(x:0:0, 1 + x3:0:0, 1 + x2:0:0, x3:0:0, x6:0:0, 1 + x6:0:0, x7:0:0) :|: x6:0:0 > 3 && x2:0:0 > -1 && x3:0:0 > 0 && x3:0:0 >= x2:0:0 && x7:0:0 > 2 && x5:0:0 > 2 && x:0:0 > 2 && sum~cons_1~x3:0:0 = 1 + x3:0:0

The following rules are bounded:
f_471(x:0:0, sum~cons_1~x3:0:0, x2:0:0, x3:0:0, x5:0:0, x6:0:0, x7:0:0) -> f_471(x:0:0, 1 + x3:0:0, 1 + x2:0:0, x3:0:0, x6:0:0, 1 + x6:0:0, x7:0:0) :|: x6:0:0 > 3 && x2:0:0 > -1 && x3:0:0 > 0 && x3:0:0 >= x2:0:0 && x7:0:0 > 2 && x5:0:0 > 2 && x:0:0 > 2 && sum~cons_1~x3:0:0 = 1 + x3:0:0


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_274(v110, v111, v112, v113, v114, v115, 1, v119, v118, v117, v120, v121, v122, v123, 0, 3, 4) -> f_275(v110, v111, v112, v113, v114, v115, 1, v119, v118, v117, v120, v121, v122, v123, 0, 3, 4) :|: 0 = 0
f_275(v110, v111, v112, v113, v114, v115, 1, v119, v118, v117, v120, v121, v122, v123, 0, 3, 4) -> f_276(v110, v111, v112, v113, v114, v115, 1, v119, v118, v117, v120, v121, v122, v123, 0, 3, 4) :|: 1 + v118 = v114
f_276(v110, v111, v112, v113, v114, v115, 1, v119, v118, v117, v120, v121, v122, v123, 0, 3, 4) -> f_277(v110, v111, v112, v113, v114, v115, 1, v119, v118, v117, v120, v121, v122, v123, 0, 3, 2, 4) :|: v119 <= v118 && 1 <= v118 && 2 <= v114
f_277(v110, v111, v112, v113, v114, v115, 1, v119, v118, v117, v120, v121, v122, v123, 0, 3, 2, 4) -> f_279(v110, v111, v112, v113, v114, v115, 1, v119, v118, v117, v120, v121, v122, v123, 0, 3, 2, 4) :|: 0 = 0
f_279(v110, v111, v112, v113, v114, v115, 1, v119, v118, v117, v120, v121, v122, v123, 0, 3, 2, 4) -> f_281(v110, v111, v112, v113, v114, v115, 1, v119, v118, v117, v120, v121, v122, v123, 0, 3, 2, 4) :|: TRUE
f_281(v110, v111, v112, v113, v114, v115, 1, v119, v118, v117, v120, v121, v122, v123, 0, 3, 2, 4) -> f_283(v110, v111, v112, v113, v114, v115, 1, v119, v118, v117, v120, v121, v122, v123, 0, 3, 2, 4) :|: 0 = 0
f_283(v110, v111, v112, v113, v114, v115, 1, v119, v118, v117, v120, v121, v122, v123, 0, 3, 2, 4) -> f_285(v110, v111, v112, v113, v114, v115, 1, v119, v118, v125, v117, v120, v121, v122, v123, 0, 3, 2, 4) :|: v125 = 1 + v119 && 2 <= v125
f_285(v110, v111, v112, v113, v114, v115, 1, v119, v118, v125, v117, v120, v121, v122, v123, 0, 3, 2, 4) -> f_287(v110, v111, v112, v113, v114, v115, 1, v119, v118, v125, v117, v120, v121, v122, v123, 0, 3, 2, 4) :|: TRUE
f_287(v110, v111, v112, v113, v114, v115, 1, v119, v118, v125, v117, v120, v121, v122, v123, 0, 3, 2, 4) -> f_289(v110, v111, v112, v113, v114, v115, 1, v119, v118, v125, v120, v121, v122, v123, 0, 3, 2, 4) :|: 0 = 0
f_289(v110, v111, v112, v113, v114, v115, 1, v119, v118, v125, v120, v121, v122, v123, 0, 3, 2, 4) -> f_291(v110, v111, v112, v113, v114, v115, 1, v119, v118, v125, v120, v121, v122, v123, 0, 3, 2, 4) :|: v125 = 1 + v119
f_291(v110, v111, v112, v113, v114, v115, 1, v119, v118, v125, v120, v121, v122, v123, 0, 3, 2, 4) -> f_293(v110, v111, v112, v113, v114, v115, 1, v119, v118, v125, v120, v121, v122, v123, 0, 3, 2, 4) :|: TRUE
f_293(v110, v111, v112, v113, v114, v115, 1, v119, v118, v125, v120, v121, v122, v123, 0, 3, 2, 4) -> f_295(v110, v111, v112, v113, v114, v115, 1, v119, v118, v125, v120, v121, v122, v123, 0, 3, 2, 4) :|: TRUE
f_295(v110, v111, v112, v113, v114, v115, 1, v119, v118, v125, v120, v121, v122, v123, 0, 3, 2, 4) -> f_273(v110, v111, v112, v113, v114, v115, 1, v119, v118, v125, v120, v121, v122, v123, 0, 3, 4) :|: TRUE
f_273(v110, v111, v112, v113, v114, v115, 1, v117, v118, v119, v120, v121, v122, v123, 0, 3, 4) -> f_274(v110, v111, v112, v113, v114, v115, 1, v119, v118, v117, v120, v121, v122, v123, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_274(v110:0, v111:0, v112:0, v113:0, 1 + v118:0, v115:0, 1, v119:0, v118:0, v117:0, v120:0, v121:0, v122:0, v123:0, 0, 3, 4) -> f_274(v110:0, v111:0, v112:0, v113:0, 1 + v118:0, v115:0, 1, 1 + v119:0, v118:0, v119:0, v120:0, v121:0, v122:0, v123:0, 0, 3, 4) :|: v118:0 > 0 && v119:0 <= v118:0 && v119:0 > 0
Filtered unneeded arguments:
   f_274(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_274(x5, x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_274(sum~cons_1~v118:0, v119:0, v118:0) -> f_274(1 + v118:0, 1 + v119:0, v118:0) :|: v119:0 <= v118:0 && v119:0 > 0 && v118:0 > 0 && sum~cons_1~v118:0 = 1 + v118:0

----------------------------------------

(22)
Obligation:
Rules:
f_274(sum~cons_1~v118:0, v119:0, v118:0) -> f_274(1 + v118:0, 1 + v119:0, v118:0) :|: v119:0 <= v118:0 && v119:0 > 0 && v118:0 > 0 && sum~cons_1~v118:0 = 1 + v118:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_274(sum~cons_1~v118:0:0, v119:0:0, v118:0:0) -> f_274(1 + v118:0:0, 1 + v119:0:0, v118:0:0) :|: v119:0:0 <= v118:0:0 && v119:0:0 > 0 && v118:0:0 > 0 && sum~cons_1~v118:0:0 = 1 + v118:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_274(x, x1, x2)] = -x1 + x2

The following rules are decreasing:
f_274(sum~cons_1~v118:0:0, v119:0:0, v118:0:0) -> f_274(1 + v118:0:0, 1 + v119:0:0, v118:0:0) :|: v119:0:0 <= v118:0:0 && v119:0:0 > 0 && v118:0:0 > 0 && sum~cons_1~v118:0:0 = 1 + v118:0:0
The following rules are bounded:
f_274(sum~cons_1~v118:0:0, v119:0:0, v118:0:0) -> f_274(1 + v118:0:0, 1 + v119:0:0, v118:0:0) :|: v119:0:0 <= v118:0:0 && v119:0:0 > 0 && v118:0:0 > 0 && sum~cons_1~v118:0:0 = 1 + v118:0:0

----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
