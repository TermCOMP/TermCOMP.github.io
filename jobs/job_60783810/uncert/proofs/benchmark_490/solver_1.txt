YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zQN5s.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 493 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 8 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 7 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 4 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 11 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 5 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/zQN5s.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/zQN5s.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %3
		%8 = icmp sge %7 0
		br %8, %9, %20
	9:
		%10 = load %2
		%11 = sub i32 %10, 1
		store %11, %2
		%12 = load %2
		%13 = icmp sge %12 0
		br %13, %14, %16
	14:
		%15 = call i32 @__VERIFIER_nondet_int()
		store %15, %3
		br %19
	16:
		%17 = load %3
		%18 = sub i32 %17, 1
		store %18, %3
		br %19
	19:
		br %6
	20:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_316(v475, v476, v477, v478, v479, v480, 1, v482, v483, 0, v485, v486, v487, v488, v489, 3, 4) -> f_317(v475, v476, v477, v478, v479, v486, 1, v482, v483, 0, v485, v480, v487, v488, v489, 3, 4) :|: 0 = 0
f_317(v475, v476, v477, v478, v479, v486, 1, v482, v483, 0, v485, v480, v487, v488, v489, 3, 4) -> f_318(v475, v476, v477, v478, v479, v486, 1, v482, v483, 0, v485, v480, v487, v488, v489, 3, 4) :|: 0 <= v486 && 1 <= v480 && 1 <= v485
f_318(v475, v476, v477, v478, v479, v486, 1, v482, v483, 0, v485, v480, v487, v488, v489, 3, 4) -> f_320(v475, v476, v477, v478, v479, v486, 1, v482, v483, 0, v485, v480, v487, v488, v489, 3, 4) :|: 0 = 0
f_320(v475, v476, v477, v478, v479, v486, 1, v482, v483, 0, v485, v480, v487, v488, v489, 3, 4) -> f_322(v475, v476, v477, v478, v479, v486, 1, v482, v483, 0, v485, v480, v487, v488, v489, 3, 4) :|: TRUE
f_322(v475, v476, v477, v478, v479, v486, 1, v482, v483, 0, v485, v480, v487, v488, v489, 3, 4) -> f_324(v475, v476, v477, v478, v479, v486, 1, v483, 0, v485, v480, v487, v488, v489, 3, 4) :|: 0 = 0
f_324(v475, v476, v477, v478, v479, v486, 1, v483, 0, v485, v480, v487, v488, v489, 3, 4) -> f_325(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v480, v487, v488, v489, 3, 4, 2) :|: 1 + v520 = v483 && 2 + v520 <= 0
f_325(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v480, v487, v488, v489, 3, 4, 2) -> f_326(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v480, v487, v488, v489, 3, 4, 2) :|: TRUE
f_326(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v480, v487, v488, v489, 3, 4, 2) -> f_327(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v480, v487, v488, v489, 3, 4, 2) :|: 0 = 0
f_327(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v480, v487, v488, v489, 3, 4, 2) -> f_328(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v480, v487, v488, v489, 3, 4, 2) :|: 0 = 0
f_328(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v480, v487, v488, v489, 3, 4, 2) -> f_329(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v480, v487, v488, v489, 3, 4, 2) :|: TRUE
f_329(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v480, v487, v488, v489, 3, 4, 2) -> f_330(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v487, v488, v489, 3, 4, 2) :|: 0 = 0
f_330(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v487, v488, v489, 3, 4, 2) -> f_331(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v532, v487, v488, v489, 3, 4, 2) :|: 1 + v532 = v486 && 0 <= 1 + v532
f_331(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v532, v487, v488, v489, 3, 4, 2) -> f_332(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v532, v487, v488, v489, 3, 4, 2) :|: TRUE
f_332(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v532, v487, v488, v489, 3, 4, 2) -> f_333(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v532, v487, v488, v489, 3, 4, 2) :|: TRUE
f_333(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v532, v487, v488, v489, 3, 4, 2) -> f_315(v475, v476, v477, v478, v479, v486, 1, v483, v520, 0, v485, v532, v487, v488, v489, 3, 4) :|: TRUE
f_315(v475, v476, v477, v478, v479, v480, 1, v482, v483, 0, v485, v486, v487, v488, v489, 3, 4) -> f_316(v475, v476, v477, v478, v479, v480, 1, v482, v483, 0, v485, v486, v487, v488, v489, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_316(v475:0, v476:0, v477:0, v478:0, v479:0, v480:0, 1, v482:0, 1 + v520:0, 0, v485:0, 1 + v532:0, v487:0, v488:0, v489:0, 3, 4) -> f_316(v475:0, v476:0, v477:0, v478:0, v479:0, 1 + v532:0, 1, 1 + v520:0, v520:0, 0, v485:0, v532:0, v487:0, v488:0, v489:0, 3, 4) :|: v480:0 > 0 && v532:0 > -2 && v485:0 > 0 && v520:0 < -1
Filtered unneeded arguments:
   f_316(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_316(x6, x9, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_316(v480:0, sum~cons_1~v520:0, v485:0, sum~cons_1~v532:0) -> f_316(1 + v532:0, v520:0, v485:0, v532:0) :|: v532:0 > -2 && v480:0 > 0 && v520:0 < -1 && v485:0 > 0 && sum~cons_1~v520:0 = 1 + v520:0 && sum~cons_1~v532:0 = 1 + v532:0

----------------------------------------

(9)
Obligation:
Rules:
f_316(v480:0, sum~cons_1~v520:0, v485:0, sum~cons_1~v532:0) -> f_316(1 + v532:0, v520:0, v485:0, v532:0) :|: v532:0 > -2 && v480:0 > 0 && v520:0 < -1 && v485:0 > 0 && sum~cons_1~v520:0 = 1 + v520:0 && sum~cons_1~v532:0 = 1 + v532:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_316(v480:0:0, sum~cons_1~v520:0:0, v485:0:0, sum~cons_1~v532:0:0) -> f_316(1 + v532:0:0, v520:0:0, v485:0:0, v532:0:0) :|: v520:0:0 < -1 && v485:0:0 > 0 && v480:0:0 > 0 && v532:0:0 > -2 && sum~cons_1~v520:0:0 = 1 + v520:0:0 && sum~cons_1~v532:0:0 = 1 + v532:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_316 ] = f_316_4

The following rules are decreasing:
f_316(v480:0:0, sum~cons_1~v520:0:0, v485:0:0, sum~cons_1~v532:0:0) -> f_316(1 + v532:0:0, v520:0:0, v485:0:0, v532:0:0) :|: v520:0:0 < -1 && v485:0:0 > 0 && v480:0:0 > 0 && v532:0:0 > -2 && sum~cons_1~v520:0:0 = 1 + v520:0:0 && sum~cons_1~v532:0:0 = 1 + v532:0:0

The following rules are bounded:
f_316(v480:0:0, sum~cons_1~v520:0:0, v485:0:0, sum~cons_1~v532:0:0) -> f_316(1 + v532:0:0, v520:0:0, v485:0:0, v532:0:0) :|: v520:0:0 < -1 && v485:0:0 > 0 && v480:0:0 > 0 && v532:0:0 > -2 && sum~cons_1~v520:0:0 = 1 + v520:0:0 && sum~cons_1~v532:0:0 = 1 + v532:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_217(v127, v128, v129, v130, v131, v132, 1, v134, v135, 0, v137, v138, v139, v140, 3, 4) -> f_220(v127, v128, v129, v130, v131, v137, 1, v134, v135, 0, v132, v138, v139, v140, 3, 4) :|: 0 = 0
f_220(v127, v128, v129, v130, v131, v137, 1, v134, v135, 0, v132, v138, v139, v140, 3, 4) -> f_223(v127, v128, v129, v130, v131, v137, 1, v134, v135, 0, v132, v138, v139, v140, 3, 4) :|: 0 <= v137 && 1 <= v132 && 1 <= v131
f_223(v127, v128, v129, v130, v131, v137, 1, v134, v135, 0, v132, v138, v139, v140, 3, 4) -> f_227(v127, v128, v129, v130, v131, v137, 1, v134, v135, 0, v132, v138, v139, v140, 3, 4) :|: 0 = 0
f_227(v127, v128, v129, v130, v131, v137, 1, v134, v135, 0, v132, v138, v139, v140, 3, 4) -> f_230(v127, v128, v129, v130, v131, v137, 1, v134, v135, 0, v132, v138, v139, v140, 3, 4) :|: TRUE
f_230(v127, v128, v129, v130, v131, v137, 1, v134, v135, 0, v132, v138, v139, v140, 3, 4) -> f_233(v127, v128, v129, v130, v131, v137, 1, v135, 0, v132, v138, v139, v140, 3, 4) :|: 0 = 0
f_233(v127, v128, v129, v130, v131, v137, 1, v135, 0, v132, v138, v139, v140, 3, 4) -> f_235(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v132, v138, v139, v140, 3, 4, 2) :|: 1 + v152 = v135 && 2 + v152 <= 0
f_235(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v132, v138, v139, v140, 3, 4, 2) -> f_237(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v132, v138, v139, v140, 3, 4, 2) :|: TRUE
f_237(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v132, v138, v139, v140, 3, 4, 2) -> f_240(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v132, v138, v139, v140, 3, 4, 2) :|: 0 = 0
f_240(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v132, v138, v139, v140, 3, 4, 2) -> f_243(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v132, v138, v139, v140, 3, 4, 2) :|: 0 = 0
f_243(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v132, v138, v139, v140, 3, 4, 2) -> f_246(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v132, v138, v139, v140, 3, 4, 2) :|: TRUE
f_246(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v132, v138, v139, v140, 3, 4, 2) -> f_249(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v138, v139, v140, 3, 4, 2) :|: 0 = 0
f_249(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v138, v139, v140, 3, 4, 2) -> f_252(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v160, v138, v139, v140, 3, 4, 2) :|: 1 + v160 = v137 && 0 <= 1 + v160
f_252(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v160, v138, v139, v140, 3, 4, 2) -> f_255(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v160, v138, v139, v140, 3, 4, 2) :|: TRUE
f_255(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v160, v138, v139, v140, 3, 4, 2) -> f_258(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v160, v138, v139, v140, 3, 4, 2) :|: TRUE
f_258(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v160, v138, v139, v140, 3, 4, 2) -> f_215(v127, v128, v129, v130, v131, v137, 1, v135, v152, 0, v160, v138, v139, v140, 3, 4) :|: TRUE
f_215(v127, v128, v129, v130, v131, v132, 1, v134, v135, 0, v137, v138, v139, v140, 3, 4) -> f_217(v127, v128, v129, v130, v131, v132, 1, v134, v135, 0, v137, v138, v139, v140, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_217(v127:0, v128:0, v129:0, v130:0, v131:0, v132:0, 1, v134:0, 1 + v152:0, 0, 1 + v160:0, v138:0, v139:0, v140:0, 3, 4) -> f_217(v127:0, v128:0, v129:0, v130:0, v131:0, 1 + v160:0, 1, 1 + v152:0, v152:0, 0, v160:0, v138:0, v139:0, v140:0, 3, 4) :|: v132:0 > 0 && v160:0 > -2 && v131:0 > 0 && v152:0 < -1
Filtered unneeded arguments:
   f_217(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_217(x5, x6, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_217(v131:0, v132:0, sum~cons_1~v152:0, sum~cons_1~v160:0) -> f_217(v131:0, 1 + v160:0, v152:0, v160:0) :|: v160:0 > -2 && v132:0 > 0 && v152:0 < -1 && v131:0 > 0 && sum~cons_1~v152:0 = 1 + v152:0 && sum~cons_1~v160:0 = 1 + v160:0

----------------------------------------

(16)
Obligation:
Rules:
f_217(v131:0, v132:0, sum~cons_1~v152:0, sum~cons_1~v160:0) -> f_217(v131:0, 1 + v160:0, v152:0, v160:0) :|: v160:0 > -2 && v132:0 > 0 && v152:0 < -1 && v131:0 > 0 && sum~cons_1~v152:0 = 1 + v152:0 && sum~cons_1~v160:0 = 1 + v160:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_217(v131:0:0, v132:0:0, sum~cons_1~v152:0:0, sum~cons_1~v160:0:0) -> f_217(v131:0:0, 1 + v160:0:0, v152:0:0, v160:0:0) :|: v152:0:0 < -1 && v131:0:0 > 0 && v132:0:0 > 0 && v160:0:0 > -2 && sum~cons_1~v152:0:0 = 1 + v152:0:0 && sum~cons_1~v160:0:0 = 1 + v160:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_217(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_217(v131:0:0, v132:0:0, sum~cons_1~v152:0:0, sum~cons_1~v160:0:0) -> f_217(v131:0:0, 1 + v160:0:0, v152:0:0, v160:0:0) :|: v152:0:0 < -1 && v131:0:0 > 0 && v132:0:0 > 0 && v160:0:0 > -2 && sum~cons_1~v152:0:0 = 1 + v152:0:0 && sum~cons_1~v160:0:0 = 1 + v160:0:0
The following rules are bounded:
f_217(v131:0:0, v132:0:0, sum~cons_1~v152:0:0, sum~cons_1~v160:0:0) -> f_217(v131:0:0, 1 + v160:0:0, v152:0:0, v160:0:0) :|: v152:0:0 < -1 && v131:0:0 > 0 && v132:0:0 > 0 && v160:0:0 > -2 && sum~cons_1~v152:0:0 = 1 + v152:0:0 && sum~cons_1~v160:0:0 = 1 + v160:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_216(v104, v105, v106, v107, v108, v113, 1, v111, v112, v114, v115, v116, 0, 3, 4) -> f_218(v104, v105, v106, v107, v108, v113, 1, v111, v112, v114, v115, v116, 0, 3, 4) :|: 0 <= v113
f_218(v104, v105, v106, v107, v108, v113, 1, v111, v112, v114, v115, v116, 0, 3, 4) -> f_221(v104, v105, v106, v107, v108, v113, 1, v111, v112, v114, v115, v116, 0, 3, 4) :|: 0 = 0
f_221(v104, v105, v106, v107, v108, v113, 1, v111, v112, v114, v115, v116, 0, 3, 4) -> f_225(v104, v105, v106, v107, v108, v113, 1, v111, v112, v114, v115, v116, 0, 3, 4) :|: TRUE
f_225(v104, v105, v106, v107, v108, v113, 1, v111, v112, v114, v115, v116, 0, 3, 4) -> f_229(v104, v105, v106, v107, v108, v113, 1, v112, v114, v115, v116, 0, 3, 4) :|: 0 = 0
f_229(v104, v105, v106, v107, v108, v113, 1, v112, v114, v115, v116, 0, 3, 4) -> f_232(v104, v105, v106, v107, v108, v113, 1, v112, v150, v114, v115, v116, 0, 3, 4) :|: 1 + v150 = v112 && 0 <= 1 + v150
f_232(v104, v105, v106, v107, v108, v113, 1, v112, v150, v114, v115, v116, 0, 3, 4) -> f_234(v104, v105, v106, v107, v108, v113, 1, v112, v150, v114, v115, v116, 0, 3, 4) :|: TRUE
f_234(v104, v105, v106, v107, v108, v113, 1, v112, v150, v114, v115, v116, 0, 3, 4) -> f_236(v104, v105, v106, v107, v108, v113, 1, v112, v150, v114, v115, v116, 0, 3, 4) :|: 0 = 0
f_236(v104, v105, v106, v107, v108, v113, 1, v112, v150, v114, v115, v116, 0, 3, 4) -> f_238(v104, v105, v106, v107, v108, v113, 1, v112, v150, v114, v115, v116, 0, 3, 2, 4) :|: 0 <= v150 && 1 <= v112 && 2 <= v107
f_238(v104, v105, v106, v107, v108, v113, 1, v112, v150, v114, v115, v116, 0, 3, 2, 4) -> f_241(v104, v105, v106, v107, v108, v113, 1, v112, v150, v114, v115, v116, 0, 3, 2, 4) :|: 0 = 0
f_241(v104, v105, v106, v107, v108, v113, 1, v112, v150, v114, v115, v116, 0, 3, 2, 4) -> f_244(v104, v105, v106, v107, v108, v113, 1, v112, v150, v114, v115, v116, 0, 3, 2, 4) :|: TRUE
f_244(v104, v105, v106, v107, v108, v113, 1, v112, v150, v114, v115, v116, 0, 3, 2, 4) -> f_247(v104, v105, v106, v107, v108, v113, 1, v112, v150, v157, v114, v115, v116, 0, 3, 2, 4) :|: TRUE
f_247(v104, v105, v106, v107, v108, v113, 1, v112, v150, v157, v114, v115, v116, 0, 3, 2, 4) -> f_250(v104, v105, v106, v107, v108, v113, 1, v112, v150, v157, v114, v115, v116, 0, 3, 2, 4) :|: TRUE
f_250(v104, v105, v106, v107, v108, v113, 1, v112, v150, v157, v114, v115, v116, 0, 3, 2, 4) -> f_253(v104, v105, v106, v107, v108, v113, 1, v112, v150, v157, v114, v115, v116, 0, 3, 2, 4) :|: TRUE
f_253(v104, v105, v106, v107, v108, v113, 1, v112, v150, v157, v114, v115, v116, 0, 3, 2, 4) -> f_256(v104, v105, v106, v107, v108, v113, 1, v112, v150, v157, v114, v115, v116, 0, 3, 2, 4) :|: TRUE
f_256(v104, v105, v106, v107, v108, v113, 1, v112, v150, v157, v114, v115, v116, 0, 3, 2, 4) -> f_213(v104, v105, v106, v107, v108, v113, 1, v112, v150, v157, v114, v115, v116, 0, 3, 4) :|: TRUE
f_213(v104, v105, v106, v107, v108, v109, 1, v111, v112, v113, v114, v115, v116, 0, 3, 4) -> f_216(v104, v105, v106, v107, v108, v113, 1, v111, v112, v114, v115, v116, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_216(v104:0, v105:0, v106:0, v107:0, v108:0, v113:0, 1, v111:0, 1 + v150:0, v114:0, v115:0, v116:0, 0, 3, 4) -> f_216(v104:0, v105:0, v106:0, v107:0, v108:0, v157:0, 1, 1 + v150:0, v150:0, v114:0, v115:0, v116:0, 0, 3, 4) :|: v150:0 > -1 && v113:0 > -1 && v107:0 > 1
Filtered unneeded arguments:
   f_216(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_216(x4, x6, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_216(v107:0, v113:0, sum~cons_1~v150:0) -> f_216(v107:0, v157:0, v150:0) :|: v113:0 > -1 && v107:0 > 1 && v150:0 > -1 && sum~cons_1~v150:0 = 1 + v150:0

----------------------------------------

(23)
Obligation:
Rules:
f_216(v107:0, v113:0, sum~cons_1~v150:0) -> f_216(v107:0, v157:0, v150:0) :|: v113:0 > -1 && v107:0 > 1 && v150:0 > -1 && sum~cons_1~v150:0 = 1 + v150:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_216(v107:0:0, v113:0:0, sum~cons_1~v150:0:0) -> f_216(v107:0:0, v157:0:0, v150:0:0) :|: v113:0:0 > -1 && v107:0:0 > 1 && v150:0:0 > -1 && sum~cons_1~v150:0:0 = 1 + v150:0:0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_216(x, x1, x2)] = x2

The following rules are decreasing:
f_216(v107:0:0, v113:0:0, sum~cons_1~v150:0:0) -> f_216(v107:0:0, v157:0:0, v150:0:0) :|: v113:0:0 > -1 && v107:0:0 > 1 && v150:0:0 > -1 && sum~cons_1~v150:0:0 = 1 + v150:0:0
The following rules are bounded:
f_216(v107:0:0, v113:0:0, sum~cons_1~v150:0:0) -> f_216(v107:0:0, v157:0:0, v150:0:0) :|: v113:0:0 > -1 && v107:0:0 > 1 && v150:0:0 > -1 && sum~cons_1~v150:0:0 = 1 + v150:0:0

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
