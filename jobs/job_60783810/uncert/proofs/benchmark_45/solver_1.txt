YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/bqfy1.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 57 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 5120 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 69 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/bqfy1.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/bqfy1.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32, 3 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		%8 = alloca i32, align 4
		%9 = alloca *i32, align 8
		%10 = alloca *i32, align 8
		%11 = alloca *i32, align 8
		%12 = alloca *i32, align 8
		%13 = alloca *i32, align 8
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		store %3, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %9)
		%14 = alloca i8, numElementsLit: 4, align 16
		%15 = bitcast *i8 %14 to *i32
		store %15, %9
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %10)
		%16 = alloca i8, numElementsLit: 4, align 16
		%17 = bitcast *i8 %16 to *i32
		store %17, %10
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %11)
		%18 = alloca i8, numElementsLit: 4, align 16
		%19 = bitcast *i8 %18 to *i32
		store %19, %11
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %12)
		%20 = alloca i8, numElementsLit: 4, align 16
		%21 = bitcast *i8 %20 to *i32
		store %21, %12
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %13)
		%22 = alloca i8, numElementsLit: 4, align 16
		%23 = bitcast *i8 %22 to *i32
		store %23, %13
		%24 = load %5
		%25 = load %9
		store %24, %25
		%26 = load %6
		%27 = load %10
		store %26, %27
		%28 = load %7
		%29 = load %11
		store %28, %29
		%30 = load %8
		%31 = load %12
		store %30, %31
		%32 = load %13
		store 0, %32
		br %33
	33:
		%34 = load %9
		%35 = load %34
		%36 = icmp sle %35 100
		br %36, %37, %42
	37:
		%38 = load %10
		%39 = load %38
		%40 = load %7
		%41 = icmp sle %39 %40
		br %42
	42:
		%43 = phi [0, %33], [%41, %37]
		br %43, %44, %63
	44:
		%45 = load %9
		%46 = load %45
		%47 = load %12
		store %46, %47
		%48 = load %10
		%49 = load %48
		%50 = load %9
		store %49, %50
		%51 = load %12
		%52 = load %51
		%53 = add i32 %52, 1
		%54 = load %10
		store %53, %54
		%55 = load %11
		%56 = load %55
		%57 = sub i32 %56, 1
		%58 = load %11
		store %57, %58
		%59 = load %13
		%60 = load %59
		%61 = add i32 %60, 1
		%62 = load %13
		store %61, %62
		br %33
	63:
		%64 = load %13
		%65 = load %64
		ret %65

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 89
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @__VERIFIER_nondet_int()
		%6 = call i32 @test_fun(i32 %2, i32 %3, i32 %4, i32 %5)
		ret %6


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 37 rulesP rules:
f_715(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1449, 1, v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_716(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1449, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_716(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1449, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_717(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1449, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: v1451 <= 100
f_717(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1449, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_719(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1449, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_719(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1449, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_721(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1449, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: TRUE
f_721(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1449, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_723(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1449, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_723(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1449, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_725(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_725(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_727(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_727(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_729(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: v1452 <= v1433
f_729(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_732(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_732(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_734(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_734(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_736(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: TRUE
f_736(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_738(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_738(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_740(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_740(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_742(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_742(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_744(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: TRUE
f_744(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_745(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_745(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_746(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_746(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_747(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_747(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_748(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: TRUE
f_748(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_749(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_749(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1449, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_750(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_750(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_751(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: v1652 = 1 + v1451 && v1652 <= 101
f_751(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_752(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_752(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_753(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: TRUE
f_753(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_754(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_754(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_755(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_755(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_756(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 1 + v1654 = v1454
f_756(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_757(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_757(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_758(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: TRUE
f_758(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_759(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_759(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_760(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
f_760(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_761(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1456, v1656, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8, 2) :|: v1656 = 1 + v1456 && 2 <= v1656
f_761(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1456, v1656, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8, 2) -> f_762(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1456, v1656, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8, 2) :|: 0 = 0
f_762(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1456, v1656, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8, 2) -> f_763(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1456, v1656, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8, 2) :|: TRUE
f_763(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1456, v1656, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8, 2) -> f_764(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1456, v1656, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8, 2) :|: TRUE
f_764(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1456, v1656, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8, 2) -> f_714(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1451, 1, v1452, v1652, v1454, v1654, v1456, v1656, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: TRUE
f_714(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1449, 1, v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) -> f_715(v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1449, 1, v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, 0, 3, 7, 100, 101, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_715(v1431:0, v1432:0, v1433:0, v1434:0, v1435:0, v1436:0, v1437:0, v1438:0, v1439:0, v1440:0, v1441:0, v1442:0, v1443:0, v1444:0, v1445:0, v1446:0, v1447:0, v1448:0, v1449:0, 1, v1451:0, v1452:0, v1453:0, 1 + v1654:0, v1455:0, v1456:0, v1457:0, v1458:0, v1459:0, v1460:0, v1461:0, v1462:0, v1463:0, v1464:0, v1465:0, v1466:0, v1467:0, v1468:0, v1469:0, v1470:0, v1471:0, v1472:0, 0, 3, 7, 100, 101, 4, 8) -> f_715(v1431:0, v1432:0, v1433:0, v1434:0, v1435:0, v1436:0, v1437:0, v1438:0, v1439:0, v1440:0, v1441:0, v1442:0, v1443:0, v1444:0, v1445:0, v1446:0, v1447:0, v1448:0, v1451:0, 1, v1452:0, 1 + v1451:0, 1 + v1654:0, v1654:0, v1456:0, 1 + v1456:0, v1457:0, v1458:0, v1459:0, v1460:0, v1461:0, v1462:0, v1463:0, v1464:0, v1465:0, v1466:0, v1467:0, v1468:0, v1469:0, v1470:0, v1471:0, v1472:0, 0, 3, 7, 100, 101, 4, 8) :|: v1451:0 < 101 && v1452:0 <= v1433:0 && v1456:0 > 0
Filtered unneeded arguments:
   f_715(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49) -> f_715(x3, x21, x22, x24, x26)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_715(v1433:0, v1451:0, v1452:0, sum~cons_1~v1654:0, v1456:0) -> f_715(v1433:0, v1452:0, 1 + v1451:0, v1654:0, 1 + v1456:0) :|: v1452:0 <= v1433:0 && v1456:0 > 0 && v1451:0 < 101 && sum~cons_1~v1654:0 = 1 + v1654:0

----------------------------------------

(8)
Obligation:
Rules:
f_715(v1433:0, v1451:0, v1452:0, sum~cons_1~v1654:0, v1456:0) -> f_715(v1433:0, v1452:0, 1 + v1451:0, v1654:0, 1 + v1456:0) :|: v1452:0 <= v1433:0 && v1456:0 > 0 && v1451:0 < 101 && sum~cons_1~v1654:0 = 1 + v1654:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_715(v1433:0:0, v1451:0:0, v1452:0:0, sum~cons_1~v1654:0:0, v1456:0:0) -> f_715(v1433:0:0, v1452:0:0, 1 + v1451:0:0, v1654:0:0, 1 + v1456:0:0) :|: v1452:0:0 <= v1433:0:0 && v1456:0:0 > 0 && v1451:0:0 < 101 && sum~cons_1~v1654:0:0 = 1 + v1654:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_715(x, x1, x2, x3, x4)] = 100 + x - x1 - x2

The following rules are decreasing:
f_715(v1433:0:0, v1451:0:0, v1452:0:0, sum~cons_1~v1654:0:0, v1456:0:0) -> f_715(v1433:0:0, v1452:0:0, 1 + v1451:0:0, v1654:0:0, 1 + v1456:0:0) :|: v1452:0:0 <= v1433:0:0 && v1456:0:0 > 0 && v1451:0:0 < 101 && sum~cons_1~v1654:0:0 = 1 + v1654:0:0
The following rules are bounded:
f_715(v1433:0:0, v1451:0:0, v1452:0:0, sum~cons_1~v1654:0:0, v1456:0:0) -> f_715(v1433:0:0, v1452:0:0, 1 + v1451:0:0, v1654:0:0, 1 + v1456:0:0) :|: v1452:0:0 <= v1433:0:0 && v1456:0:0 > 0 && v1451:0:0 < 101 && sum~cons_1~v1654:0:0 = 1 + v1654:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
