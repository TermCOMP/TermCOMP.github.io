YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/0T7g0.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToIRSProof [EQUIVALENT, 13 ms]
(2) IntTRS
(3) TerminationGraphProcessor [SOUND, 0 ms]
(4) IntTRS
(5) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(6) IntTRS
(7) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
(8) IntTRS
(9) RankingReductionPairProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/0T7g0.c
----------------------------------------

(1) CToIRSProof (EQUIVALENT)
Parsed C Integer Program as IRS.
----------------------------------------

(2)
Obligation:
Rules:
f1(x, tmp) -> f2(x_1, tmp) :|: TRUE
f2(x1, x2) -> f3(x1, x3) :|: TRUE
f4(x4, x5) -> f5(arith, x5) :|: TRUE && arith = x4 - 1
f5(x6, x7) -> f6(x6, x8) :|: TRUE
f3(x9, x10) -> f4(x9, x10) :|: x9 > 0 && x9 = 2 * x10
f6(x11, x12) -> f3(x11, x12) :|: TRUE
f3(x13, x14) -> f7(x13, x14) :|: x13 <= 0
f3(x15, x16) -> f7(x15, x16) :|: x15 < 2 * x16
f3(x17, x18) -> f7(x17, x18) :|: x17 > 2 * x18
Start term: f1(x, tmp)

----------------------------------------

(3) TerminationGraphProcessor (SOUND)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(4)
Obligation:
Rules:
f3(x9, x10) -> f4(x9, x10) :|: x9 > 0 && x9 = 2 * x10
f6(x11, x12) -> f3(x11, x12) :|: TRUE
f5(x6, x7) -> f6(x6, x8) :|: TRUE
f4(x4, x5) -> f5(arith, x5) :|: TRUE && arith = x4 - 1

----------------------------------------

(5) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(6)
Obligation:
Rules:
f5(times~cons_2~x8:0, x7:0) -> f5(2 * x8:0 - 1, x8:0) :|: 2 * x8:0 > 0 && times~cons_2~x8:0 = 2 * x8:0

----------------------------------------

(7) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f5(x1, x2) -> f5(x1)

----------------------------------------

(8)
Obligation:
Rules:
f5(times~cons_2~x8:0) -> f5(2 * x8:0 - 1) :|: 2 * x8:0 > 0 && times~cons_2~x8:0 = 2 * x8:0

----------------------------------------

(9) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f5 ] = f5_1

The following rules are decreasing:
f5(times~cons_2~x8:0) -> f5(2 * x8:0 - 1) :|: 2 * x8:0 > 0 && times~cons_2~x8:0 = 2 * x8:0

The following rules are bounded:
f5(times~cons_2~x8:0) -> f5(2 * x8:0 - 1) :|: 2 * x8:0 > 0 && times~cons_2~x8:0 = 2 * x8:0


----------------------------------------

(10)
YES
