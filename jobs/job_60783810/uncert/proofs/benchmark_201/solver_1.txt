YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/1bI4H.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1499 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 34 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 29 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 24 ms]
        (23) IntTRS
        (24) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (25) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/1bI4H.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/1bI4H.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		store 0, %7
		br %8
	8:
		%9 = load %4
		%10 = load %5
		%11 = icmp slt %9 %10
		br %11, %12, %25
	12:
		%13 = load %4
		%14 = load %6
		%15 = icmp slt %13 %14
		br %15, %16, %19
	16:
		%17 = load %4
		%18 = add i32 %17, 1
		store %18, %4
		br %22
	19:
		%20 = load %6
		%21 = add i32 %20, 1
		store %21, %6
		br %22
	22:
		%23 = load %7
		%24 = add i32 %23, 1
		store %24, %7
		br %8
	25:
		%26 = load %7
		ret %26

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 46
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @test_fun(i32 %2, i32 %3, i32 %4)
		ret %5


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 35 rulesP rules:
f_588(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4) -> f_589(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) :|: v1458 = 1 + v1450 && 2 <= v1458
f_589(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) -> f_590(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) :|: TRUE
f_590(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) -> f_591(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) :|: TRUE
f_591(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) -> f_592(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) :|: 0 = 0
f_592(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) -> f_593(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) :|: 0 = 0
f_593(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) -> f_594(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) :|: 0 = 0
f_594(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) -> f_595(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) :|: TRUE
f_595(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) -> f_596(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) :|: 0 = 0
f_596(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1458, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) -> f_597(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, v1451, 0, v1448, v1450, v1458, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) :|: 0 = 0
f_597(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, v1451, 0, v1448, v1450, v1458, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4, 2) -> f_598(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, v1451, v1448, v1450, v1458, v1452, v1453, v1454, v1455, v1456, v1457, 0, 3, 4, 2) :|: 0 = 0
f_598(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, v1451, v1448, v1450, v1458, v1452, v1453, v1454, v1455, v1456, v1457, 0, 3, 4, 2) -> f_599(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, v1451, v1448, v1450, v1458, v1452, v1453, v1454, v1455, v1456, v1457, 0, 3, 4, 2) :|: TRUE
f_599(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, v1451, v1448, v1450, v1458, v1452, v1453, v1454, v1455, v1456, v1457, 0, 3, 4, 2) -> f_600(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, v1451, v1450, v1458, v1452, v1453, v1454, v1455, v1456, v1457, 0, 3, 4, 2) :|: 0 = 0
f_600(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, v1451, v1450, v1458, v1452, v1453, v1454, v1455, v1456, v1457, 0, 3, 4, 2) -> f_601(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, v1451, v1450, v1458, v1452, v1453, v1454, v1455, v1456, v1457, 0, 3, 4, 2) :|: v1451 = 1 + v1445
f_601(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, v1451, v1450, v1458, v1452, v1453, v1454, v1455, v1456, v1457, 0, 3, 4, 2) -> f_602(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, v1451, v1450, v1458, v1452, v1453, v1454, v1455, v1456, v1457, 0, 3, 4, 2) :|: TRUE
f_602(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, v1451, v1450, v1458, v1452, v1453, v1454, v1455, v1456, v1457, 0, 3, 4, 2) -> f_603(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, v1451, v1450, v1458, v1452, v1453, v1454, v1455, v1456, v1457, 0, 3, 4, 2) :|: TRUE
f_603(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, v1451, v1450, v1458, v1452, v1453, v1454, v1455, v1456, v1457, 0, 3, 4, 2) -> f_604(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, v1451, v1450, v1458, v1452, v1453, v1454, v1455, v1456, v1457, 0, 3, 4) :|: TRUE
f_604(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, 1, v1574, v1575, v1576, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4) -> f_605(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, 1, v1574, v1576, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4) :|: 0 = 0
f_605(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, 1, v1574, v1576, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4) -> f_606(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, 1, v1574, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) :|: v1617 = 1 + v1576 && 2 <= v1617
f_606(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, 1, v1574, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) -> f_607(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, 1, v1574, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) :|: TRUE
f_607(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, 1, v1574, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) -> f_608(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, 1, v1574, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) :|: TRUE
f_608(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572, 1, v1574, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) -> f_609(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) :|: 0 = 0
f_609(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) -> f_610(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) :|: 0 = 0
f_610(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) -> f_611(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) :|: v1574 < v1566
f_611(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) -> f_613(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) :|: 0 = 0
f_613(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) -> f_615(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) :|: TRUE
f_615(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) -> f_617(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) :|: 0 = 0
f_617(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) -> f_619(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) :|: 0 = 0
f_619(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 0, 3, 4, 2) -> f_621(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, 0, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 3, 4, 2) :|: 0 = 0
f_621(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, 0, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 3, 4, 2) -> f_622(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, 0, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 3, 4, 2) :|: TRUE
f_622(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, 0, v1572, v1576, v1617, v1577, v1578, v1579, v1580, v1581, v1582, 3, 4, 2) -> f_623(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, 0, v1576, v1617, v1572, v1577, v1578, v1579, v1580, v1581, v1582, 3, 4, 2) :|: 0 = 0
f_623(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, 0, v1576, v1617, v1572, v1577, v1578, v1579, v1580, v1581, v1582, 3, 4, 2) -> f_624(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, 0, v1712, v1576, v1617, v1572, v1577, v1578, v1579, v1580, v1581, v1582, 3, 4, 2) :|: v1712 = 1 + v1574
f_624(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, 0, v1712, v1576, v1617, v1572, v1577, v1578, v1579, v1580, v1581, v1582, 3, 4, 2) -> f_625(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, 0, v1712, v1576, v1617, v1572, v1577, v1578, v1579, v1580, v1581, v1582, 3, 4, 2) :|: TRUE
f_625(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, 0, v1712, v1576, v1617, v1572, v1577, v1578, v1579, v1580, v1581, v1582, 3, 4, 2) -> f_626(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, 0, v1712, v1576, v1617, v1572, v1577, v1578, v1579, v1580, v1581, v1582, 3, 4, 2) :|: TRUE
f_626(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, 0, v1712, v1576, v1617, v1572, v1577, v1578, v1579, v1580, v1581, v1582, 3, 4, 2) -> f_587(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1574, 1, 0, v1572, v1576, v1617, v1712, v1577, v1578, v1579, v1580, v1581, v1582, 3, 4) :|: TRUE
f_587(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1449, v1450, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4) -> f_588(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445, 1, 0, v1448, v1450, v1451, v1452, v1453, v1454, v1455, v1456, v1457, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_588(v1438:0, v1439:0, v1440:0, v1441:0, v1442:0, v1443:0, v1444:0, v1445:0, 1, 0, v1448:0, v1450:0, 1 + v1445:0, v1452:0, v1453:0, v1454:0, v1455:0, v1456:0, v1457:0, 3, 4) -> f_588(v1438:0, v1439:0, v1440:0, v1441:0, v1442:0, v1443:0, v1444:0, 1 + v1445:0, 1, 0, v1445:0, 1 + (1 + v1450:0), 1 + (1 + v1445:0), v1452:0, v1453:0, v1454:0, v1455:0, v1456:0, v1457:0, 3, 4) :|: v1439:0 > 1 + v1445:0 && v1450:0 > 0
Filtered unneeded arguments:
   f_588(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_588(x2, x8, x12, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_588(v1439:0, v1445:0, v1450:0, sum~cons_1~v1445:0) -> f_588(v1439:0, 1 + v1445:0, 1 + (1 + v1450:0), 1 + (1 + v1445:0)) :|: v1439:0 > 1 + v1445:0 && v1450:0 > 0 && sum~cons_1~v1445:0 = 1 + v1445:0

----------------------------------------

(9)
Obligation:
Rules:
f_588(v1439:0, v1445:0, v1450:0, sum~cons_1~v1445:0) -> f_588(v1439:0, 1 + v1445:0, 1 + (1 + v1450:0), 1 + (1 + v1445:0)) :|: v1439:0 > 1 + v1445:0 && v1450:0 > 0 && sum~cons_1~v1445:0 = 1 + v1445:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_588(v1439:0:0, v1445:0:0, v1450:0:0, sum~cons_1~v1445:0:0) -> f_588(v1439:0:0, 1 + v1445:0:0, 1 + (1 + v1450:0:0), 1 + (1 + v1445:0:0)) :|: v1439:0:0 > 1 + v1445:0:0 && v1450:0:0 > 0 && sum~cons_1~v1445:0:0 = 1 + v1445:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_588(x, x1, x2, x3)] = x - x1

The following rules are decreasing:
f_588(v1439:0:0, v1445:0:0, v1450:0:0, sum~cons_1~v1445:0:0) -> f_588(v1439:0:0, 1 + v1445:0:0, 1 + (1 + v1450:0:0), 1 + (1 + v1445:0:0)) :|: v1439:0:0 > 1 + v1445:0:0 && v1450:0:0 > 0 && sum~cons_1~v1445:0:0 = 1 + v1445:0:0
The following rules are bounded:
f_588(v1439:0:0, v1445:0:0, v1450:0:0, sum~cons_1~v1445:0:0) -> f_588(v1439:0:0, 1 + v1445:0:0, 1 + (1 + v1450:0:0), 1 + (1 + v1445:0:0)) :|: v1439:0:0 > 1 + v1445:0:0 && v1450:0:0 > 0 && sum~cons_1~v1445:0:0 = 1 + v1445:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_505(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_507(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: 0 = 0
f_507(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_510(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: v1023 < v1015
f_510(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_514(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: 0 = 0
f_514(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_518(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: TRUE
f_518(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_522(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: 0 = 0
f_522(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_526(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: 0 = 0
f_526(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_530(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: v1023 < v1016
f_530(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_534(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: 0 = 0
f_534(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_538(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: TRUE
f_538(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_542(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: 0 = 0
f_542(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_546(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1101, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: v1101 = 1 + v1023
f_546(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1101, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_550(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1101, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: TRUE
f_550(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1101, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_553(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1101, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: TRUE
f_553(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1101, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_556(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1101, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: 0 = 0
f_556(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1101, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_560(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1101, v1025, v1222, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4, 2) :|: v1222 = 1 + v1025 && 2 <= v1222
f_560(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1101, v1025, v1222, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4, 2) -> f_564(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1101, v1025, v1222, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4, 2) :|: TRUE
f_564(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1101, v1025, v1222, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4, 2) -> f_568(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1101, v1025, v1222, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4, 2) :|: TRUE
f_568(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1101, v1025, v1222, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4, 2) -> f_503(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1101, v1025, v1222, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: TRUE
f_503(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1021, 1, v1023, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) -> f_505(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1023, 1, v1021, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_505(v1014:0, v1015:0, v1016:0, v1017:0, v1018:0, v1019:0, v1020:0, v1023:0, 1, v1021:0, v1024:0, v1025:0, v1026:0, v1027:0, v1028:0, v1029:0, v1030:0, v1031:0, 0, 3, 4) -> f_505(v1014:0, v1015:0, v1016:0, v1017:0, v1018:0, v1019:0, v1020:0, 1 + v1023:0, 1, v1023:0, v1025:0, 1 + v1025:0, v1026:0, v1027:0, v1028:0, v1029:0, v1030:0, v1031:0, 0, 3, 4) :|: v1023:0 < v1015:0 && v1025:0 > 0 && v1023:0 < v1016:0
Filtered unneeded arguments:
   f_505(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_505(x2, x3, x8, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_505(v1015:0, v1016:0, v1023:0, v1025:0) -> f_505(v1015:0, v1016:0, 1 + v1023:0, 1 + v1025:0) :|: v1025:0 > 0 && v1023:0 < v1016:0 && v1023:0 < v1015:0

----------------------------------------

(16)
Obligation:
Rules:
f_505(v1015:0, v1016:0, v1023:0, v1025:0) -> f_505(v1015:0, v1016:0, 1 + v1023:0, 1 + v1025:0) :|: v1025:0 > 0 && v1023:0 < v1016:0 && v1023:0 < v1015:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_505(v1015:0:0, v1016:0:0, v1023:0:0, v1025:0:0) -> f_505(v1015:0:0, v1016:0:0, 1 + v1023:0:0, 1 + v1025:0:0) :|: v1025:0:0 > 0 && v1023:0:0 < v1016:0:0 && v1023:0:0 < v1015:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_505(x, x1, x2, x3)] = x - x2

The following rules are decreasing:
f_505(v1015:0:0, v1016:0:0, v1023:0:0, v1025:0:0) -> f_505(v1015:0:0, v1016:0:0, 1 + v1023:0:0, 1 + v1025:0:0) :|: v1025:0:0 > 0 && v1023:0:0 < v1016:0:0 && v1023:0:0 < v1015:0:0
The following rules are bounded:
f_505(v1015:0:0, v1016:0:0, v1023:0:0, v1025:0:0) -> f_505(v1015:0:0, v1016:0:0, 1 + v1023:0:0, 1 + v1025:0:0) :|: v1025:0:0 > 0 && v1023:0:0 < v1016:0:0 && v1023:0:0 < v1015:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_492(v936, v937, v938, v939, v940, v941, v942, 1, v944, 0, v946, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) -> f_495(v936, v937, v938, v939, v940, v941, v942, 1, v944, 0, v946, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) :|: 0 = 0
f_495(v936, v937, v938, v939, v940, v941, v942, 1, v944, 0, v946, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) -> f_498(v936, v937, v938, v939, v940, v941, v942, 1, v944, 0, v946, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) :|: 0 = 0
f_498(v936, v937, v938, v939, v940, v941, v942, 1, v944, 0, v946, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) -> f_501(v936, v937, v938, v939, v940, v941, v942, 1, v944, 0, v946, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) :|: TRUE
f_501(v936, v937, v938, v939, v940, v941, v942, 1, v944, 0, v946, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) -> f_504(v936, v937, v938, v939, v940, v941, v942, 1, v944, 0, v946, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) :|: 0 = 0
f_504(v936, v937, v938, v939, v940, v941, v942, 1, v944, 0, v946, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) -> f_506(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v944, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) :|: 0 = 0
f_506(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v944, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) -> f_509(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v944, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) :|: v946 <= v936
f_509(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v944, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) -> f_513(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v944, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) :|: 0 = 0
f_513(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v944, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) -> f_517(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v944, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) :|: TRUE
f_517(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v944, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) -> f_521(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) :|: 0 = 0
f_521(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) -> f_525(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v1051, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) :|: v1051 = 1 + v946
f_525(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v1051, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) -> f_529(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v1051, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) :|: TRUE
f_529(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v1051, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) -> f_533(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v1051, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) :|: TRUE
f_533(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v1051, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) -> f_537(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v1051, v948, v949, v950, v951, v952, v953, v954, 3, 4) :|: 0 = 0
f_537(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v1051, v948, v949, v950, v951, v952, v953, v954, 3, 4) -> f_541(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v1051, v948, v1098, v949, v950, v951, v952, v953, v954, 3, 4, 2) :|: v1098 = 1 + v948 && 2 <= v1098
f_541(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v1051, v948, v1098, v949, v950, v951, v952, v953, v954, 3, 4, 2) -> f_545(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v1051, v948, v1098, v949, v950, v951, v952, v953, v954, 3, 4, 2) :|: TRUE
f_545(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v1051, v948, v1098, v949, v950, v951, v952, v953, v954, 3, 4, 2) -> f_549(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v1051, v948, v1098, v949, v950, v951, v952, v953, v954, 3, 4, 2) :|: TRUE
f_549(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v1051, v948, v1098, v949, v950, v951, v952, v953, v954, 3, 4, 2) -> f_489(v936, v937, v938, v939, v940, v941, v942, 1, v946, 0, v1051, v948, v1098, v949, v950, v951, v952, v953, v954, 3, 4) :|: TRUE
f_489(v936, v937, v938, v939, v940, v941, v942, 1, v944, 0, v946, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) -> f_492(v936, v937, v938, v939, v940, v941, v942, 1, v944, 0, v946, v947, v948, v949, v950, v951, v952, v953, v954, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_492(v936:0, v937:0, v938:0, v939:0, v940:0, v941:0, v942:0, 1, v944:0, 0, v946:0, v947:0, v948:0, v949:0, v950:0, v951:0, v952:0, v953:0, v954:0, 3, 4) -> f_492(v936:0, v937:0, v938:0, v939:0, v940:0, v941:0, v942:0, 1, v946:0, 0, 1 + v946:0, v948:0, 1 + v948:0, v949:0, v950:0, v951:0, v952:0, v953:0, v954:0, 3, 4) :|: v948:0 > 0 && v946:0 <= v936:0
Filtered unneeded arguments:
   f_492(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_492(x1, x11, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_492(v936:0, v946:0, v948:0) -> f_492(v936:0, 1 + v946:0, 1 + v948:0) :|: v948:0 > 0 && v946:0 <= v936:0

----------------------------------------

(23)
Obligation:
Rules:
f_492(v936:0, v946:0, v948:0) -> f_492(v936:0, 1 + v946:0, 1 + v948:0) :|: v948:0 > 0 && v946:0 <= v936:0

----------------------------------------

(24) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_492 ] = -1*f_492_2 + f_492_1

The following rules are decreasing:
f_492(v936:0, v946:0, v948:0) -> f_492(v936:0, 1 + v946:0, 1 + v948:0) :|: v948:0 > 0 && v946:0 <= v936:0

The following rules are bounded:
f_492(v936:0, v946:0, v948:0) -> f_492(v936:0, 1 + v946:0, 1 + v948:0) :|: v948:0 > 0 && v946:0 <= v936:0


----------------------------------------

(25)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
