NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/sLvJK.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 205 ms]
(4) LLVM Symbolic Execution Graph
(5) LLVMNonterminationProof [COMPLETE, 50 ms]
(6) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/sLvJK.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/sLvJK.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %2
		br %4
	4:
		%5 = load %2
		%6 = icmp sge %5 -5
		br %6, %7, %10
	7:
		%8 = load %2
		%9 = icmp sle %8 5
		br %10
	10:
		%11 = phi [0, %4], [%9, %7]
		br %11, %12, %25
	12:
		%13 = load %2
		%14 = icmp sgt %13 0
		br %14, %15, %18
	15:
		%16 = load %2
		%17 = sub i32 %16, 1
		store %17, %2
		br %18
	18:
		%19 = load %2
		%20 = icmp slt %19 0
		br %20, %21, %24
	21:
		%22 = load %2
		%23 = add i32 %22, 1
		store %23, %2
		br %24
	24:
		br %4
	25:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) LLVMNonterminationProof (COMPLETE)
Proved nontermination with the following witness:

State #97 with references set to {}.
Nondeterministic instruction %1 = alloca i32, align 4 in node #97 yields value 1.
Nondeterministic instruction %2 = alloca i32, align 4 in node #98 yields value 12.
Nondeterministic instruction %3 = call i32 @__VERIFIER_nondet_int() in node #101 yields value (-1).

----------------------------------------

(6)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
