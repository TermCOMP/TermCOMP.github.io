YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/QHL5R.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 67 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1363 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 47 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 12 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 50 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/QHL5R.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/QHL5R.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		%4 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%5 = alloca i8, numElementsLit: 4, align 16
		%6 = bitcast *i8 %5 to *i32
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%7 = alloca i8, numElementsLit: 4, align 16
		%8 = bitcast *i8 %7 to *i32
		store %8, %3
		%9 = call i32 @__VERIFIER_nondet_int()
		%10 = load %2
		store %9, %10
		%11 = call i32 @__VERIFIER_nondet_int()
		%12 = load %3
		store %11, %12
		%13 = load %2
		%14 = load %13
		%15 = icmp sle 0 %14
		br %15, %16, %55
	16:
		%17 = load %2
		%18 = load %17
		%19 = load %3
		%20 = load %19
		%21 = icmp slt %18 %20
		br %21, %22, %55
	22:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %4)
		%23 = alloca i8, numElementsLit: 4, align 16
		%24 = bitcast *i8 %23 to *i32
		store %24, %4
		%25 = load %2
		%26 = load %25
		%27 = add i32 %26, 1
		%28 = load %4
		store %27, %28
		br %29
	29:
		%30 = load %4
		%31 = load %30
		%32 = load %2
		%33 = load %32
		%34 = icmp ne %31 %33
		br %34, %35, %38
	35:
		%36 = call i32 @__VERIFIER_nondet_int()
		%37 = icmp ne %36 0
		br %38
	38:
		%39 = phi [0, %29], [%37, %35]
		br %39, %40, %54
	40:
		%41 = load %4
		%42 = load %41
		%43 = load %3
		%44 = load %43
		%45 = icmp sle %42 %44
		br %45, %46, %51
	46:
		%47 = load %4
		%48 = load %47
		%49 = add i32 %48, 1
		%50 = load %4
		store %49, %50
		br %53
	51:
		%52 = load %4
		store 0, %52
		br %53
	53:
		br %29
	54:
		br %55
	55:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_610(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3324, v3325, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_611(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3325, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_611(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3325, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_612(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3334, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: v3334 = 1 + v3322 && 1 <= v3334
f_612(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3334, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_613(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3334, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_613(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3334, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_614(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3334, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: TRUE
f_614(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3334, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_615(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3334, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: TRUE
f_615(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3334, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_616(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3334, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: TRUE
f_616(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3334, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_617(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3334, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_617(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3334, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_618(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3323, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_618(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3323, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_619(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3323, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_619(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3323, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_620(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3323, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_620(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3323, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_621(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3323, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: v3334 < v3317 && 2 <= v3317 && 3 <= v3321 && 3 <= v3318
f_621(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3323, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_623(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3323, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_623(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3323, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_625(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3323, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: TRUE
f_625(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3323, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_627(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: TRUE
f_627(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_629(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: v3464 != 0
f_629(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_632(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_632(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_634(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_634(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_636(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: TRUE
f_636(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_638(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_638(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_640(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_640(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_641(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_641(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_642(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_642(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_643(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_643(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_644(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: TRUE
f_644(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_609(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3334, v3464, v3322, v3334, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: TRUE
f_609(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3324, v3325, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) -> f_610(v3311, v3312, v3313, v3314, v3315, v3316, v3317, v3318, 1, v3320, v3321, v3322, v3323, v3324, v3325, v3326, v3327, v3328, v3329, v3330, v3331, v3332, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_610(v3311:0, v3312:0, v3313:0, v3314:0, v3315:0, v3316:0, v3317:0, v3318:0, 1, v3320:0, v3321:0, v3322:0, v3323:0, v3324:0, v3325:0, v3326:0, v3327:0, v3328:0, v3329:0, v3330:0, v3331:0, v3332:0, 0, 3, 7, 2, 4, 8) -> f_610(v3311:0, v3312:0, v3313:0, v3314:0, v3315:0, v3316:0, v3317:0, v3318:0, 1, v3320:0, v3321:0, 1 + v3322:0, v3464:0, v3322:0, 1 + v3322:0, v3326:0, v3327:0, v3328:0, v3329:0, v3330:0, v3331:0, v3332:0, 0, 3, 7, 2, 4, 8) :|: v3322:0 > -1 && v3317:0 > 1 && v3317:0 > 1 + v3322:0 && v3321:0 > 2 && v3464:0 < 0 && v3318:0 > 2
f_610(v3311:0, v3312:0, v3313:0, v3314:0, v3315:0, v3316:0, v3317:0, v3318:0, 1, v3320:0, v3321:0, v3322:0, v3323:0, v3324:0, v3325:0, v3326:0, v3327:0, v3328:0, v3329:0, v3330:0, v3331:0, v3332:0, 0, 3, 7, 2, 4, 8) -> f_610(v3311:0, v3312:0, v3313:0, v3314:0, v3315:0, v3316:0, v3317:0, v3318:0, 1, v3320:0, v3321:0, 1 + v3322:0, v3464:0, v3322:0, 1 + v3322:0, v3326:0, v3327:0, v3328:0, v3329:0, v3330:0, v3331:0, v3332:0, 0, 3, 7, 2, 4, 8) :|: v3322:0 > -1 && v3317:0 > 1 && v3317:0 > 1 + v3322:0 && v3321:0 > 2 && v3464:0 > 0 && v3318:0 > 2
Filtered unneeded arguments:
   f_610(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_610(x7, x8, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_610(v3317:0, v3318:0, v3321:0, v3322:0) -> f_610(v3317:0, v3318:0, v3321:0, 1 + v3322:0) :|: v3317:0 > 1 && v3322:0 > -1 && v3317:0 > 1 + v3322:0 && v3318:0 > 2 && v3321:0 > 2

----------------------------------------

(9)
Obligation:
Rules:
f_610(v3317:0, v3318:0, v3321:0, v3322:0) -> f_610(v3317:0, v3318:0, v3321:0, 1 + v3322:0) :|: v3317:0 > 1 && v3322:0 > -1 && v3317:0 > 1 + v3322:0 && v3318:0 > 2 && v3321:0 > 2

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_610(v3317:0:0, v3318:0:0, v3321:0:0, v3322:0:0) -> f_610(v3317:0:0, v3318:0:0, v3321:0:0, 1 + v3322:0:0) :|: v3318:0:0 > 2 && v3321:0:0 > 2 && v3317:0:0 > 1 + v3322:0:0 && v3322:0:0 > -1 && v3317:0:0 > 1

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_610 ] = f_610_1 + -1*f_610_4

The following rules are decreasing:
f_610(v3317:0:0, v3318:0:0, v3321:0:0, v3322:0:0) -> f_610(v3317:0:0, v3318:0:0, v3321:0:0, 1 + v3322:0:0) :|: v3318:0:0 > 2 && v3321:0:0 > 2 && v3317:0:0 > 1 + v3322:0:0 && v3322:0:0 > -1 && v3317:0:0 > 1

The following rules are bounded:
f_610(v3317:0:0, v3318:0:0, v3321:0:0, v3322:0:0) -> f_610(v3317:0:0, v3318:0:0, v3321:0:0, 1 + v3322:0:0) :|: v3318:0:0 > 2 && v3321:0:0 > 2 && v3317:0:0 > 1 + v3322:0:0 && v3322:0:0 > -1 && v3317:0:0 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_365(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_366(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v253, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_366(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v253, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_367(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v253, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_367(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v253, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_368(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v253, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_368(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v253, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_369(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v253, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_369(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v253, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_370(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v253, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: TRUE
f_370(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v253, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_371(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: TRUE
f_371(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_372(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: v276 != 0
f_372(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_374(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_374(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_376(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_376(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_378(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: TRUE
f_378(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_380(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_380(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_382(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_382(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_383(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_383(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_384(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_384(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_385(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: v254 <= v248 && 2 <= v248
f_385(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_387(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_387(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_389(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: TRUE
f_389(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_391(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_391(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v252, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_393(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_393(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_395(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v334, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: v334 = 1 + v254 && 3 <= v334
f_395(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v334, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_397(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v334, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_397(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v334, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_399(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v334, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: TRUE
f_399(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v334, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_401(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v334, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: TRUE
f_401(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v334, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_403(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v334, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: TRUE
f_403(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v334, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_364(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v254, v276, v334, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: TRUE
f_364(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) -> f_365(v241, v242, v243, v244, v245, v246, v247, v248, 1, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_365(v241:0, v242:0, v243:0, v244:0, v245:0, v246:0, v247:0, v248:0, 1, v250:0, v251:0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v258:0, v259:0, v260:0, v261:0, 0, 3, 7, 2, 4, 8) -> f_365(v241:0, v242:0, v243:0, v244:0, v245:0, v246:0, v247:0, v248:0, 1, v250:0, v251:0, v254:0, v276:0, 1 + v254:0, v255:0, v256:0, v257:0, v258:0, v259:0, v260:0, v261:0, 0, 3, 7, 2, 4, 8) :|: v276:0 < 0 && v248:0 > 1 && v254:0 > 1 && v254:0 <= v248:0
f_365(v241:0, v242:0, v243:0, v244:0, v245:0, v246:0, v247:0, v248:0, 1, v250:0, v251:0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v258:0, v259:0, v260:0, v261:0, 0, 3, 7, 2, 4, 8) -> f_365(v241:0, v242:0, v243:0, v244:0, v245:0, v246:0, v247:0, v248:0, 1, v250:0, v251:0, v254:0, v276:0, 1 + v254:0, v255:0, v256:0, v257:0, v258:0, v259:0, v260:0, v261:0, 0, 3, 7, 2, 4, 8) :|: v276:0 > 0 && v248:0 > 1 && v254:0 > 1 && v254:0 <= v248:0
Filtered unneeded arguments:
   f_365(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_365(x8, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_365(v248:0, v254:0) -> f_365(v248:0, 1 + v254:0) :|: v254:0 > 1 && v254:0 <= v248:0 && v248:0 > 1

----------------------------------------

(16)
Obligation:
Rules:
f_365(v248:0, v254:0) -> f_365(v248:0, 1 + v254:0) :|: v254:0 > 1 && v254:0 <= v248:0 && v248:0 > 1

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_365(v248:0:0, v254:0:0) -> f_365(v248:0:0, 1 + v254:0:0) :|: v254:0:0 > 1 && v254:0:0 <= v248:0:0 && v248:0:0 > 1

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_365(x, x1)] = x - x1

The following rules are decreasing:
f_365(v248:0:0, v254:0:0) -> f_365(v248:0:0, 1 + v254:0:0) :|: v254:0:0 > 1 && v254:0:0 <= v248:0:0 && v248:0:0 > 1
The following rules are bounded:
f_365(v248:0:0, v254:0:0) -> f_365(v248:0:0, 1 + v254:0:0) :|: v254:0:0 > 1 && v254:0:0 <= v248:0:0 && v248:0:0 > 1

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
