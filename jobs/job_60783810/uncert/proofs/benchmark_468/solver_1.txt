YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/okY7M.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 483 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 8 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 2 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 10 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 5 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/okY7M.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/okY7M.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = load %4
		%11 = icmp sgt %9 %10
		br %11, %12, %23
	12:
		br %13
	13:
		%14 = load %3
		%15 = load %4
		%16 = icmp sgt %14 %15
		br %16, %17, %20
	17:
		%18 = load %3
		%19 = sub i32 %18, 1
		store %19, %3
		br %13
	20:
		%21 = load %2
		%22 = sub i32 %21, 1
		store %22, %2
		br %8
	23:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_281(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) -> f_282(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) :|: 0 = 0
f_282(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) -> f_283(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) :|: v392 < v397
f_283(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) -> f_285(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) :|: 0 = 0
f_285(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) -> f_287(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) :|: TRUE
f_287(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) -> f_289(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) :|: TRUE
f_289(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) -> f_290(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) :|: 0 = 0
f_290(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) -> f_291(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) :|: 0 = 0
f_291(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) -> f_292(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) :|: 0 = 0
f_292(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) -> f_293(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) :|: TRUE
f_293(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) -> f_294(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v398, v399, v400, v401, 3, 4) :|: 0 = 0
f_294(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v398, v399, v400, v401, 3, 4) -> f_295(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v457, v398, v399, v400, v401, 3, 4) :|: 1 + v457 = v397
f_295(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v457, v398, v399, v400, v401, 3, 4) -> f_296(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v457, v398, v399, v400, v401, 3, 4) :|: TRUE
f_296(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v457, v398, v399, v400, v401, 3, 4) -> f_297(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v457, v398, v399, v400, v401, 3, 4) :|: TRUE
f_297(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v457, v398, v399, v400, v401, 3, 4) -> f_280(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v457, v398, v399, v400, v401, 3, 4) :|: TRUE
f_280(v386, v387, v388, v389, v390, v391, v392, v393, 1, 0, v396, v397, v398, v399, v400, v401, 3, 4) -> f_281(v386, v387, v388, v389, v390, v391, v392, v397, 1, 0, v396, v393, v398, v399, v400, v401, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_281(v386:0, v387:0, v388:0, v389:0, v390:0, v391:0, v392:0, 1 + v457:0, 1, 0, v396:0, v393:0, v398:0, v399:0, v400:0, v401:0, 3, 4) -> f_281(v386:0, v387:0, v388:0, v389:0, v390:0, v391:0, v392:0, v457:0, 1, 0, v396:0, 1 + v457:0, v398:0, v399:0, v400:0, v401:0, 3, 4) :|: v392:0 < 1 + v457:0
Filtered unneeded arguments:
   f_281(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_281(x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_281(v392:0, sum~cons_1~v457:0) -> f_281(v392:0, v457:0) :|: v392:0 < 1 + v457:0 && sum~cons_1~v457:0 = 1 + v457:0

----------------------------------------

(9)
Obligation:
Rules:
f_281(v392:0, sum~cons_1~v457:0) -> f_281(v392:0, v457:0) :|: v392:0 < 1 + v457:0 && sum~cons_1~v457:0 = 1 + v457:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_281(v392:0:0, sum~cons_1~v457:0:0) -> f_281(v392:0:0, v457:0:0) :|: v392:0:0 < 1 + v457:0:0 && sum~cons_1~v457:0:0 = 1 + v457:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_281 ] = -1*f_281_1 + f_281_2

The following rules are decreasing:
f_281(v392:0:0, sum~cons_1~v457:0:0) -> f_281(v392:0:0, v457:0:0) :|: v392:0:0 < 1 + v457:0:0 && sum~cons_1~v457:0:0 = 1 + v457:0:0

The following rules are bounded:
f_281(v392:0:0, sum~cons_1~v457:0:0) -> f_281(v392:0:0, v457:0:0) :|: v392:0:0 < 1 + v457:0:0 && sum~cons_1~v457:0:0 = 1 + v457:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_230(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) -> f_233(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) :|: 0 = 0
f_233(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) -> f_236(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) :|: v165 < v169
f_236(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) -> f_240(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) :|: 0 = 0
f_240(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) -> f_243(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) :|: TRUE
f_243(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) -> f_246(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) :|: TRUE
f_246(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) -> f_248(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) :|: 0 = 0
f_248(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) -> f_250(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) :|: 0 = 0
f_250(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) -> f_252(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) :|: 0 = 0
f_252(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) -> f_254(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) :|: TRUE
f_254(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) -> f_256(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v170, v171, v172, v173, 3, 4) :|: 0 = 0
f_256(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v170, v171, v172, v173, 3, 4) -> f_258(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v262, v170, v171, v172, v173, 3, 4) :|: 1 + v262 = v169
f_258(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v262, v170, v171, v172, v173, 3, 4) -> f_261(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v262, v170, v171, v172, v173, 3, 4) :|: TRUE
f_261(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v262, v170, v171, v172, v173, 3, 4) -> f_263(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v262, v170, v171, v172, v173, 3, 4) :|: TRUE
f_263(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v262, v170, v171, v172, v173, 3, 4) -> f_228(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v262, v170, v171, v172, v173, 3, 4) :|: TRUE
f_228(v159, v160, v161, v162, v163, v164, v165, v166, 1, 0, v169, v170, v171, v172, v173, 3, 4) -> f_230(v159, v160, v161, v162, v163, v164, v165, v169, 1, 0, v166, v170, v171, v172, v173, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_230(v159:0, v160:0, v161:0, v162:0, v163:0, v164:0, v165:0, 1 + v262:0, 1, 0, v166:0, v170:0, v171:0, v172:0, v173:0, 3, 4) -> f_230(v159:0, v160:0, v161:0, v162:0, v163:0, v164:0, v165:0, v262:0, 1, 0, 1 + v262:0, v170:0, v171:0, v172:0, v173:0, 3, 4) :|: v165:0 < 1 + v262:0
Filtered unneeded arguments:
   f_230(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_230(x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_230(v165:0, sum~cons_1~v262:0) -> f_230(v165:0, v262:0) :|: v165:0 < 1 + v262:0 && sum~cons_1~v262:0 = 1 + v262:0

----------------------------------------

(16)
Obligation:
Rules:
f_230(v165:0, sum~cons_1~v262:0) -> f_230(v165:0, v262:0) :|: v165:0 < 1 + v262:0 && sum~cons_1~v262:0 = 1 + v262:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_230(v165:0:0, sum~cons_1~v262:0:0) -> f_230(v165:0:0, v262:0:0) :|: v165:0:0 < 1 + v262:0:0 && sum~cons_1~v262:0:0 = 1 + v262:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_230 ] = -1*f_230_1 + f_230_2

The following rules are decreasing:
f_230(v165:0:0, sum~cons_1~v262:0:0) -> f_230(v165:0:0, v262:0:0) :|: v165:0:0 < 1 + v262:0:0 && sum~cons_1~v262:0:0 = 1 + v262:0:0

The following rules are bounded:
f_230(v165:0:0, sum~cons_1~v262:0:0) -> f_230(v165:0:0, v262:0:0) :|: v165:0:0 < 1 + v262:0:0 && sum~cons_1~v262:0:0 = 1 + v262:0:0


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_200(v87, v88, v89, v90, v91, v92, v93, 1, v96, v95, v97, v98, v99, v100, 0, 3, 4) -> f_203(v87, v88, v89, v90, v91, v92, v93, 1, v96, v95, v97, v98, v99, v100, 0, 3, 4) :|: 0 = 0
f_203(v87, v88, v89, v90, v91, v92, v93, 1, v96, v95, v97, v98, v99, v100, 0, 3, 4) -> f_205(v87, v88, v89, v90, v91, v92, v93, 1, v96, v95, v97, v98, v99, v100, 0, 3, 4) :|: v93 < v96
f_205(v87, v88, v89, v90, v91, v92, v93, 1, v96, v95, v97, v98, v99, v100, 0, 3, 4) -> f_208(v87, v88, v89, v90, v91, v92, v93, 1, v96, v95, v97, v98, v99, v100, 0, 3, 4) :|: 0 = 0
f_208(v87, v88, v89, v90, v91, v92, v93, 1, v96, v95, v97, v98, v99, v100, 0, 3, 4) -> f_211(v87, v88, v89, v90, v91, v92, v93, 1, v96, v95, v97, v98, v99, v100, 0, 3, 4) :|: TRUE
f_211(v87, v88, v89, v90, v91, v92, v93, 1, v96, v95, v97, v98, v99, v100, 0, 3, 4) -> f_214(v87, v88, v89, v90, v91, v92, v93, 1, v96, v97, v98, v99, v100, 0, 3, 4) :|: 0 = 0
f_214(v87, v88, v89, v90, v91, v92, v93, 1, v96, v97, v98, v99, v100, 0, 3, 4) -> f_217(v87, v88, v89, v90, v91, v92, v93, 1, v96, v118, v97, v98, v99, v100, 0, 3, 4) :|: 1 + v118 = v96
f_217(v87, v88, v89, v90, v91, v92, v93, 1, v96, v118, v97, v98, v99, v100, 0, 3, 4) -> f_220(v87, v88, v89, v90, v91, v92, v93, 1, v96, v118, v97, v98, v99, v100, 0, 3, 4) :|: TRUE
f_220(v87, v88, v89, v90, v91, v92, v93, 1, v96, v118, v97, v98, v99, v100, 0, 3, 4) -> f_223(v87, v88, v89, v90, v91, v92, v93, 1, v96, v118, v97, v98, v99, v100, 0, 3, 4) :|: TRUE
f_223(v87, v88, v89, v90, v91, v92, v93, 1, v96, v118, v97, v98, v99, v100, 0, 3, 4) -> f_197(v87, v88, v89, v90, v91, v92, v93, 1, v96, v118, v97, v98, v99, v100, 0, 3, 4) :|: TRUE
f_197(v87, v88, v89, v90, v91, v92, v93, 1, v95, v96, v97, v98, v99, v100, 0, 3, 4) -> f_200(v87, v88, v89, v90, v91, v92, v93, 1, v96, v95, v97, v98, v99, v100, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_200(v87:0, v88:0, v89:0, v90:0, v91:0, v92:0, v93:0, 1, 1 + v118:0, v95:0, v97:0, v98:0, v99:0, v100:0, 0, 3, 4) -> f_200(v87:0, v88:0, v89:0, v90:0, v91:0, v92:0, v93:0, 1, v118:0, 1 + v118:0, v97:0, v98:0, v99:0, v100:0, 0, 3, 4) :|: v93:0 < 1 + v118:0
Filtered unneeded arguments:
   f_200(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_200(x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_200(v93:0, sum~cons_1~v118:0) -> f_200(v93:0, v118:0) :|: v93:0 < 1 + v118:0 && sum~cons_1~v118:0 = 1 + v118:0

----------------------------------------

(23)
Obligation:
Rules:
f_200(v93:0, sum~cons_1~v118:0) -> f_200(v93:0, v118:0) :|: v93:0 < 1 + v118:0 && sum~cons_1~v118:0 = 1 + v118:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_200(v93:0:0, sum~cons_1~v118:0:0) -> f_200(v93:0:0, v118:0:0) :|: v93:0:0 < 1 + v118:0:0 && sum~cons_1~v118:0:0 = 1 + v118:0:0

----------------------------------------

(26) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_200 ] = -1*f_200_1 + f_200_2

The following rules are decreasing:
f_200(v93:0:0, sum~cons_1~v118:0:0) -> f_200(v93:0:0, v118:0:0) :|: v93:0:0 < 1 + v118:0:0 && sum~cons_1~v118:0:0 = 1 + v118:0:0

The following rules are bounded:
f_200(v93:0:0, sum~cons_1~v118:0:0) -> f_200(v93:0:0, v118:0:0) :|: v93:0:0 < 1 + v118:0:0 && sum~cons_1~v118:0:0 = 1 + v118:0:0


----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
