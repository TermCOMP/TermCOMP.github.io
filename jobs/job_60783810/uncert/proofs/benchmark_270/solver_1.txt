YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/VdA6V.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1667 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 37 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 5 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 28 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/VdA6V.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/VdA6V.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %5
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		%8 = load %4
		%9 = icmp sgt %8 0
		br %9, %10, %31
	10:
		%11 = load %5
		%12 = load %4
		%13 = icmp sgt %11 %12
		br %13, %14, %31
	14:
		store 0, %2
		store 0, %3
		br %15
	15:
		%16 = load %2
		%17 = load %5
		%18 = icmp slt %16 %17
		br %18, %19, %30
	19:
		%20 = load %3
		%21 = load %4
		%22 = icmp slt %20 %21
		br %22, %23, %26
	23:
		%24 = load %3
		%25 = add i32 %24, 1
		store %25, %3
		br %29
	26:
		store 0, %3
		%27 = load %2
		%28 = add i32 %27, 1
		store %28, %2
		br %29
	29:
		br %15
	30:
		br %31
	31:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 35 rulesP rules:
f_583(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1537, 0, v1539, v1540, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) -> f_584(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) :|: 0 = 0
f_584(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) -> f_585(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) :|: 0 = 0
f_585(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) -> f_586(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) :|: v1540 < v1534
f_586(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) -> f_588(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) :|: 0 = 0
f_588(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) -> f_590(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) :|: TRUE
f_590(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) -> f_592(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) :|: 0 = 0
f_592(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) -> f_594(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) :|: 0 = 0
f_594(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) -> f_595(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) :|: 0 = 0
f_595(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) -> f_596(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) :|: TRUE
f_596(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1537, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) -> f_597(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1540, 0, v1539, v1535, v1537, v1541, v1542, v1543, v1544, v1545, 0, 3, 2, 4) :|: TRUE
f_597(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1626, v1627, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_598(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1627, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: 0 = 0
f_598(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1627, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_599(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: v1635 = 1 + v1625 && 1 <= v1635
f_599(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_600(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: TRUE
f_600(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_601(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: TRUE
f_601(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_602(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: TRUE
f_602(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_603(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: 0 = 0
f_603(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_604(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: 0 = 0
f_604(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_605(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: 0 = 0
f_605(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_606(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: TRUE
f_606(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_607(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1635, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: 0 = 0
f_607(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1635, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_608(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1635, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: 0 = 0
f_608(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1635, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_609(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1635, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: v1635 < v1622 && 2 <= v1622 && 3 <= v1621
f_608(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1635, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_610(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: v1622 <= v1635 && v1622 = v1635
f_609(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1635, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_611(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1635, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: 0 = 0
f_611(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1635, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_613(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1635, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: TRUE
f_613(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1635, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_597(v1616, v1617, v1618, v1619, v1620, v1621, v1622, 1, v1624, v1635, v1625, v1635, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) :|: TRUE
f_610(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 0, 3, 2, 4) -> f_612(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, 0, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 3, 2, 4) :|: 0 = 0
f_612(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, 0, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 3, 2, 4) -> f_614(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, 0, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 3, 2, 4) :|: TRUE
f_614(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, 0, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 3, 2, 4) -> f_615(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, 0, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 3, 2, 4) :|: TRUE
f_615(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, 0, v1625, v1628, v1629, v1630, v1631, v1632, v1633, 3, 2, 4) -> f_616(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, 0, v1625, v1629, v1630, v1631, v1632, v1633, 3, 2, 4) :|: 0 = 0
f_616(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, 0, v1625, v1629, v1630, v1631, v1632, v1633, 3, 2, 4) -> f_617(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, 0, v1625, v1738, v1629, v1630, v1631, v1632, v1633, 3, 2, 4) :|: v1738 = 1 + v1624 && 2 <= v1738
f_617(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, 0, v1625, v1738, v1629, v1630, v1631, v1632, v1633, 3, 2, 4) -> f_618(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, 0, v1625, v1738, v1629, v1630, v1631, v1632, v1633, 3, 2, 4) :|: TRUE
f_618(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, 0, v1625, v1738, v1629, v1630, v1631, v1632, v1633, 3, 2, 4) -> f_619(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, 0, v1625, v1738, v1629, v1630, v1631, v1632, v1633, 3, 2, 4) :|: TRUE
f_619(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, 0, v1625, v1738, v1629, v1630, v1631, v1632, v1633, 3, 2, 4) -> f_582(v1616, v1617, v1618, v1619, v1620, v1621, v1635, 1, v1624, 0, v1625, v1738, v1629, v1630, v1631, v1632, v1633, 3, 2, 4) :|: TRUE
f_582(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1537, 0, v1539, v1540, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) -> f_583(v1529, v1530, v1531, v1532, v1533, v1534, v1535, 1, v1537, 0, v1539, v1540, v1541, v1542, v1543, v1544, v1545, 3, 2, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_608(v1616:0, v1617:0, v1618:0, v1619:0, v1620:0, v1621:0, v1622:0, 1, v1624:0, v1622:0, v1625:0, v1628:0, v1629:0, v1630:0, v1631:0, v1632:0, v1633:0, 0, 3, 2, 4) -> f_608(v1616:0, v1617:0, v1618:0, v1619:0, v1620:0, v1621:0, v1622:0, 1, 1 + v1624:0, 1, 0, v1624:0, v1629:0, v1630:0, v1631:0, v1632:0, v1633:0, 0, 3, 2, 4) :|: v1624:0 > 0 && v1621:0 > 1 + v1624:0
f_608(v1616:0, v1617:0, v1618:0, v1619:0, v1620:0, v1621:0, v1622:0, 1, v1624:0, v1635:0, v1625:0, v1628:0, v1629:0, v1630:0, v1631:0, v1632:0, v1633:0, 0, 3, 2, 4) -> f_608(v1616:0, v1617:0, v1618:0, v1619:0, v1620:0, v1621:0, v1622:0, 1, v1624:0, 1 + v1635:0, v1635:0, v1628:0, v1629:0, v1630:0, v1631:0, v1632:0, v1633:0, 0, 3, 2, 4) :|: v1635:0 > -1 && v1622:0 > 1 && v1621:0 > 2 && v1635:0 < v1622:0
Filtered unneeded arguments:
   f_608(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_608(x6, x7, x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_608(v1621:0, v1622:0, v1624:0, v1622:01) -> f_608(v1621:0, v1622:0, 1 + v1624:0, 1) :|: v1624:0 > 0 && v1621:0 > 1 + v1624:0 && v1622:0 = v1622:01
f_608(v1621:0, v1622:0, v1624:0, v1635:0) -> f_608(v1621:0, v1622:0, v1624:0, 1 + v1635:0) :|: v1622:0 > 1 && v1635:0 > -1 && v1635:0 < v1622:0 && v1621:0 > 2

----------------------------------------

(9)
Obligation:
Rules:
f_608(v1621:0, v1622:0, v1624:0, v1622:01) -> f_608(v1621:0, v1622:0, 1 + v1624:0, 1) :|: v1624:0 > 0 && v1621:0 > 1 + v1624:0 && v1622:0 = v1622:01
f_608(x, x1, x2, x3) -> f_608(x, x1, x2, 1 + x3) :|: x1 > 1 && x3 > -1 && x3 < x1 && x > 2

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_608(x:0, x1:0, x2:0, x3:0) -> f_608(x:0, x1:0, x2:0, 1 + x3:0) :|: x3:0 < x1:0 && x:0 > 2 && x3:0 > -1 && x1:0 > 1
f_608(v1621:0:0, v1622:01:0, v1624:0:0, v1622:01:01) -> f_608(v1621:0:0, v1622:01:0, 1 + v1624:0:0, 1) :|: v1624:0:0 > 0 && v1621:0:0 > 1 + v1624:0:0 && v1622:01:0 = v1622:01:01

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_608 ] = f_608_1 + -1*f_608_3

The following rules are decreasing:
f_608(v1621:0:0, v1622:01:0, v1624:0:0, v1622:01:01) -> f_608(v1621:0:0, v1622:01:0, 1 + v1624:0:0, 1) :|: v1624:0:0 > 0 && v1621:0:0 > 1 + v1624:0:0 && v1622:01:0 = v1622:01:01

The following rules are bounded:
f_608(v1621:0:0, v1622:01:0, v1624:0:0, v1622:01:01) -> f_608(v1621:0:0, v1622:01:0, 1 + v1624:0:0, 1) :|: v1624:0:0 > 0 && v1621:0:0 > 1 + v1624:0:0 && v1622:01:0 = v1622:01:01


----------------------------------------

(13)
Obligation:
Rules:
f_608(x:0, x1:0, x2:0, x3:0) -> f_608(x:0, x1:0, x2:0, 1 + x3:0) :|: x3:0 < x1:0 && x:0 > 2 && x3:0 > -1 && x1:0 > 1

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_608(x:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_608(x:0:0, x1:0:0, x2:0:0, 1 + x3:0:0) :|: x3:0:0 > -1 && x1:0:0 > 1 && x:0:0 > 2 && x3:0:0 < x1:0:0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_608(x1, x2, x3, x4) -> f_608(x1, x2, x4)

----------------------------------------

(17)
Obligation:
Rules:
f_608(x:0:0, x1:0:0, x3:0:0) -> f_608(x:0:0, x1:0:0, 1 + x3:0:0) :|: x3:0:0 > -1 && x1:0:0 > 1 && x:0:0 > 2 && x3:0:0 < x1:0:0

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_608(x, x1, x2)] = -1 + x1 - x2

The following rules are decreasing:
f_608(x:0:0, x1:0:0, x3:0:0) -> f_608(x:0:0, x1:0:0, 1 + x3:0:0) :|: x3:0:0 > -1 && x1:0:0 > 1 && x:0:0 > 2 && x3:0:0 < x1:0:0
The following rules are bounded:
f_608(x:0:0, x1:0:0, x3:0:0) -> f_608(x:0:0, x1:0:0, 1 + x3:0:0) :|: x3:0:0 > -1 && x1:0:0 > 1 && x:0:0 > 2 && x3:0:0 < x1:0:0

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_292(v87, v88, v89, v90, v91, v92, v93, 1, 0, v96, v97, v98, v99, v100, v101, v102, 3, 2, 4) -> f_293(v87, v88, v89, v90, v91, v92, v93, 1, 0, v96, v97, v98, v99, v100, v101, v102, 3, 2, 4) :|: 0 = 0
f_293(v87, v88, v89, v90, v91, v92, v93, 1, 0, v96, v97, v98, v99, v100, v101, v102, 3, 2, 4) -> f_294(v87, v88, v89, v90, v91, v92, v93, 1, 0, v96, v97, v98, v99, v100, v101, v102, 3, 2, 4) :|: 0 = 0
f_294(v87, v88, v89, v90, v91, v92, v93, 1, 0, v96, v97, v98, v99, v100, v101, v102, 3, 2, 4) -> f_295(v87, v88, v89, v90, v91, v92, v93, 1, 0, v96, v97, v98, v99, v100, v101, v102, 3, 2, 4) :|: TRUE
f_295(v87, v88, v89, v90, v91, v92, v93, 1, 0, v96, v97, v98, v99, v100, v101, v102, 3, 2, 4) -> f_296(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v96, v98, v99, v100, v101, v102, 3, 2, 4) :|: 0 = 0
f_296(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v96, v98, v99, v100, v101, v102, 3, 2, 4) -> f_297(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v96, v98, v99, v100, v101, v102, 3, 2, 4) :|: 0 = 0
f_297(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v96, v98, v99, v100, v101, v102, 3, 2, 4) -> f_298(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v96, v98, v99, v100, v101, v102, 3, 2, 4) :|: v97 < v93 && 2 <= v93 && 3 <= v92
f_298(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v96, v98, v99, v100, v101, v102, 3, 2, 4) -> f_300(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v96, v98, v99, v100, v101, v102, 3, 2, 4) :|: 0 = 0
f_300(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v96, v98, v99, v100, v101, v102, 3, 2, 4) -> f_302(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v96, v98, v99, v100, v101, v102, 3, 2, 4) :|: TRUE
f_302(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v96, v98, v99, v100, v101, v102, 3, 2, 4) -> f_304(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v98, v99, v100, v101, v102, 3, 2, 4) :|: 0 = 0
f_304(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v98, v99, v100, v101, v102, 3, 2, 4) -> f_306(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v103, v98, v99, v100, v101, v102, 3, 2, 4) :|: v103 = 1 + v97 && 2 <= v103
f_306(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v103, v98, v99, v100, v101, v102, 3, 2, 4) -> f_308(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v103, v98, v99, v100, v101, v102, 3, 2, 4) :|: TRUE
f_308(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v103, v98, v99, v100, v101, v102, 3, 2, 4) -> f_310(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v103, v98, v99, v100, v101, v102, 3, 2, 4) :|: TRUE
f_310(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v103, v98, v99, v100, v101, v102, 3, 2, 4) -> f_312(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v103, v98, v99, v100, v101, v102, 3, 2, 4) :|: TRUE
f_312(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v103, v98, v99, v100, v101, v102, 3, 2, 4) -> f_291(v87, v88, v89, v90, v91, v92, v93, 1, 0, v97, v103, v98, v99, v100, v101, v102, 3, 2, 4) :|: TRUE
f_291(v87, v88, v89, v90, v91, v92, v93, 1, 0, v96, v97, v98, v99, v100, v101, v102, 3, 2, 4) -> f_292(v87, v88, v89, v90, v91, v92, v93, 1, 0, v96, v97, v98, v99, v100, v101, v102, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_292(v87:0, v88:0, v89:0, v90:0, v91:0, v92:0, v93:0, 1, 0, v96:0, v97:0, v98:0, v99:0, v100:0, v101:0, v102:0, 3, 2, 4) -> f_292(v87:0, v88:0, v89:0, v90:0, v91:0, v92:0, v93:0, 1, 0, v97:0, 1 + v97:0, v98:0, v99:0, v100:0, v101:0, v102:0, 3, 2, 4) :|: v93:0 > 1 && v97:0 < v93:0 && v97:0 > 0 && v92:0 > 2
Filtered unneeded arguments:
   f_292(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_292(x6, x7, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_292(v92:0, v93:0, v97:0) -> f_292(v92:0, v93:0, 1 + v97:0) :|: v97:0 < v93:0 && v93:0 > 1 && v92:0 > 2 && v97:0 > 0

----------------------------------------

(22)
Obligation:
Rules:
f_292(v92:0, v93:0, v97:0) -> f_292(v92:0, v93:0, 1 + v97:0) :|: v97:0 < v93:0 && v93:0 > 1 && v92:0 > 2 && v97:0 > 0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_292(v92:0:0, v93:0:0, v97:0:0) -> f_292(v92:0:0, v93:0:0, 1 + v97:0:0) :|: v92:0:0 > 2 && v97:0:0 > 0 && v93:0:0 > 1 && v97:0:0 < v93:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_292(x, x1, x2)] = -1 + x1 - x2

The following rules are decreasing:
f_292(v92:0:0, v93:0:0, v97:0:0) -> f_292(v92:0:0, v93:0:0, 1 + v97:0:0) :|: v92:0:0 > 2 && v97:0:0 > 0 && v93:0:0 > 1 && v97:0:0 < v93:0:0
The following rules are bounded:
f_292(v92:0:0, v93:0:0, v97:0:0) -> f_292(v92:0:0, v93:0:0, 1 + v97:0:0) :|: v92:0:0 > 2 && v97:0:0 > 0 && v93:0:0 > 1 && v97:0:0 < v93:0:0

----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
