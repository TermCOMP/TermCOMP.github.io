YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/b352a.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 595 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 43 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/b352a.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/b352a.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		store 0, %7
		br %8
	8:
		%9 = load %4
		%10 = load %5
		%11 = icmp eq %9 %10
		br %11, %12, %16
	12:
		%13 = load %4
		%14 = load %6
		%15 = icmp sgt %13 %14
		br %16
	16:
		%17 = phi [0, %8], [%15, %12]
		br %17, %18, %31
	18:
		br %19
	19:
		%20 = load %5
		%21 = load %6
		%22 = icmp sgt %20 %21
		br %22, %23, %30
	23:
		%24 = load %4
		%25 = sub i32 %24, 1
		store %25, %4
		%26 = load %5
		%27 = sub i32 %26, 1
		store %27, %5
		%28 = load %7
		%29 = add i32 %28, 1
		store %29, %7
		br %19
	30:
		br %8
	31:
		%32 = load %7
		ret %32

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 50
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @test_fun(i32 %2, i32 %3, i32 %4)
		ret %5


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_347(v195, v196, v197, v198, v199, v200, 1, v203, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) -> f_348(v195, v196, v197, v198, v199, v200, 1, v203, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) :|: 0 = 0
f_348(v195, v196, v197, v198, v199, v200, 1, v203, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) -> f_349(v195, v196, v197, v198, v199, v200, 1, v203, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) :|: v196 < v203
f_349(v195, v196, v197, v198, v199, v200, 1, v203, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) -> f_351(v195, v196, v197, v198, v199, v200, 1, v203, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) :|: 0 = 0
f_351(v195, v196, v197, v198, v199, v200, 1, v203, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) -> f_353(v195, v196, v197, v198, v199, v200, 1, v203, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) :|: TRUE
f_353(v195, v196, v197, v198, v199, v200, 1, v203, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) -> f_355(v195, v196, v197, v198, v199, v200, 1, v203, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) :|: 0 = 0
f_355(v195, v196, v197, v198, v199, v200, 1, v203, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) -> f_357(v195, v196, v197, v198, v199, v200, 1, v203, v213, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) :|: 1 + v213 = v203
f_357(v195, v196, v197, v198, v199, v200, 1, v203, v213, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) -> f_359(v195, v196, v197, v198, v199, v200, 1, v203, v213, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) :|: TRUE
f_359(v195, v196, v197, v198, v199, v200, 1, v203, v213, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) -> f_361(v195, v196, v197, v198, v199, v200, 1, v203, v213, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) :|: 0 = 0
f_361(v195, v196, v197, v198, v199, v200, 1, v203, v213, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) -> f_363(v195, v196, v197, v198, v199, v200, 1, v203, v213, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) :|: 1 + v213 = v203
f_363(v195, v196, v197, v198, v199, v200, 1, v203, v213, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) -> f_365(v195, v196, v197, v198, v199, v200, 1, v203, v213, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) :|: TRUE
f_365(v195, v196, v197, v198, v199, v200, 1, v203, v213, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) -> f_367(v195, v196, v197, v198, v199, v200, 1, v203, v213, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) :|: 0 = 0
f_367(v195, v196, v197, v198, v199, v200, 1, v203, v213, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) -> f_369(v195, v196, v197, v198, v199, v200, 1, v203, v213, v205, v216, v206, v207, v208, v209, v210, v211, 0, 3, 4, 2) :|: v216 = 1 + v205 && 2 <= v216
f_369(v195, v196, v197, v198, v199, v200, 1, v203, v213, v205, v216, v206, v207, v208, v209, v210, v211, 0, 3, 4, 2) -> f_371(v195, v196, v197, v198, v199, v200, 1, v203, v213, v205, v216, v206, v207, v208, v209, v210, v211, 0, 3, 4, 2) :|: TRUE
f_371(v195, v196, v197, v198, v199, v200, 1, v203, v213, v205, v216, v206, v207, v208, v209, v210, v211, 0, 3, 4, 2) -> f_373(v195, v196, v197, v198, v199, v200, 1, v203, v213, v205, v216, v206, v207, v208, v209, v210, v211, 0, 3, 4, 2) :|: TRUE
f_373(v195, v196, v197, v198, v199, v200, 1, v203, v213, v205, v216, v206, v207, v208, v209, v210, v211, 0, 3, 4, 2) -> f_346(v195, v196, v197, v198, v199, v200, 1, v203, v213, v205, v216, v206, v207, v208, v209, v210, v211, 0, 3, 4) :|: TRUE
f_346(v195, v196, v197, v198, v199, v200, 1, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) -> f_347(v195, v196, v197, v198, v199, v200, 1, v203, v202, v204, v205, v206, v207, v208, v209, v210, v211, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_347(v195:0, v196:0, v197:0, v198:0, v199:0, v200:0, 1, 1 + v213:0, v202:0, v204:0, v205:0, v206:0, v207:0, v208:0, v209:0, v210:0, v211:0, 0, 3, 4) -> f_347(v195:0, v196:0, v197:0, v198:0, v199:0, v200:0, 1, v213:0, 1 + v213:0, v205:0, 1 + v205:0, v206:0, v207:0, v208:0, v209:0, v210:0, v211:0, 0, 3, 4) :|: v205:0 > 0 && v196:0 < 1 + v213:0
Filtered unneeded arguments:
   f_347(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_347(x2, x8, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_347(v196:0, sum~cons_1~v213:0, v205:0) -> f_347(v196:0, v213:0, 1 + v205:0) :|: v205:0 > 0 && v196:0 < 1 + v213:0 && sum~cons_1~v213:0 = 1 + v213:0

----------------------------------------

(8)
Obligation:
Rules:
f_347(v196:0, sum~cons_1~v213:0, v205:0) -> f_347(v196:0, v213:0, 1 + v205:0) :|: v205:0 > 0 && v196:0 < 1 + v213:0 && sum~cons_1~v213:0 = 1 + v213:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_347(v196:0:0, sum~cons_1~v213:0:0, v205:0:0) -> f_347(v196:0:0, v213:0:0, 1 + v205:0:0) :|: v205:0:0 > 0 && v196:0:0 < 1 + v213:0:0 && sum~cons_1~v213:0:0 = 1 + v213:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_347(x, x1, x2)] = -x + x1

The following rules are decreasing:
f_347(v196:0:0, sum~cons_1~v213:0:0, v205:0:0) -> f_347(v196:0:0, v213:0:0, 1 + v205:0:0) :|: v205:0:0 > 0 && v196:0:0 < 1 + v213:0:0 && sum~cons_1~v213:0:0 = 1 + v213:0:0
The following rules are bounded:
f_347(v196:0:0, sum~cons_1~v213:0:0, v205:0:0) -> f_347(v196:0:0, v213:0:0, 1 + v205:0:0) :|: v205:0:0 > 0 && v196:0:0 < 1 + v213:0:0 && sum~cons_1~v213:0:0 = 1 + v213:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
