YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/G4HGD.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 204 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 14 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 1 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) RankingReductionPairProof [EQUIVALENT, 4 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/G4HGD.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/G4HGD.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sge %7 0
		br %8, %9, %16
	9:
		%10 = load %2
		%11 = load %3
		%12 = add i32 %10, %11
		store %12, %2
		%13 = load %3
		%14 = mul i32 -2, %13
		%15 = sub i32 %14, 1
		store %15, %3
		br %6
	16:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_121(v21, v22, v23, v24, v25, v29, 1, v26, v28, v30, v31, v32, v33, v34, 0, 3, 2, 4) -> f_122(v21, v22, v23, v24, v25, v29, 1, v26, v28, v30, v31, v32, v33, v34, 0, 3, 2, 4) :|: 0 <= v29
f_122(v21, v22, v23, v24, v25, v29, 1, v26, v28, v30, v31, v32, v33, v34, 0, 3, 2, 4) -> f_124(v21, v22, v23, v24, v25, v29, 1, v26, v28, v30, v31, v32, v33, v34, 0, 3, 2, 4) :|: 0 = 0
f_124(v21, v22, v23, v24, v25, v29, 1, v26, v28, v30, v31, v32, v33, v34, 0, 3, 2, 4) -> f_126(v21, v22, v23, v24, v25, v29, 1, v26, v28, v30, v31, v32, v33, v34, 0, 3, 2, 4) :|: TRUE
f_126(v21, v22, v23, v24, v25, v29, 1, v26, v28, v30, v31, v32, v33, v34, 0, 3, 2, 4) -> f_128(v21, v22, v23, v24, v25, v29, 1, v28, v30, v31, v32, v33, v34, 0, 3, 2, 4) :|: 0 = 0
f_128(v21, v22, v23, v24, v25, v29, 1, v28, v30, v31, v32, v33, v34, 0, 3, 2, 4) -> f_129(v21, v22, v23, v24, v25, v29, 1, v31, v28, v30, v32, v33, v34, 0, 3, 2, 4) :|: 0 = 0
f_129(v21, v22, v23, v24, v25, v29, 1, v31, v28, v30, v32, v33, v34, 0, 3, 2, 4) -> f_130(v21, v22, v23, v24, v25, v29, 1, v31, v36, v28, v30, v32, v33, v34, 0, 3, 2, 4) :|: v36 = v29 + v31
f_130(v21, v22, v23, v24, v25, v29, 1, v31, v36, v28, v30, v32, v33, v34, 0, 3, 2, 4) -> f_131(v21, v22, v23, v24, v25, v29, 1, v31, v36, v28, v30, v32, v33, v34, 0, 3, 2, 4) :|: TRUE
f_131(v21, v22, v23, v24, v25, v29, 1, v31, v36, v28, v30, v32, v33, v34, 0, 3, 2, 4) -> f_132(v21, v22, v23, v24, v25, v29, 1, v31, v36, v30, v32, v33, v34, 0, 3, 4) :|: 0 = 0
f_132(v21, v22, v23, v24, v25, v29, 1, v31, v36, v30, v32, v33, v34, 0, 3, 4) -> f_133(v21, v22, v23, v24, v25, v29, 1, v31, v36, v38, v32, v33, v34, 0, 3, 2, 4) :|: v38 + 2 * v31 = 0
f_133(v21, v22, v23, v24, v25, v29, 1, v31, v36, v38, v32, v33, v34, 0, 3, 2, 4) -> f_134(v21, v22, v23, v24, v25, v29, 1, v31, v36, v38, v39, v32, v33, v34, 0, 3, 2, 4) :|: 1 + v39 = v38
f_134(v21, v22, v23, v24, v25, v29, 1, v31, v36, v38, v39, v32, v33, v34, 0, 3, 2, 4) -> f_135(v21, v22, v23, v24, v25, v29, 1, v31, v36, v38, v39, v32, v33, v34, 0, 3, 2, 4) :|: TRUE
f_135(v21, v22, v23, v24, v25, v29, 1, v31, v36, v38, v39, v32, v33, v34, 0, 3, 2, 4) -> f_136(v21, v22, v23, v24, v25, v29, 1, v31, v36, v38, v39, v32, v33, v34, 0, 3, 2, 4) :|: TRUE
f_136(v21, v22, v23, v24, v25, v29, 1, v31, v36, v38, v39, v32, v33, v34, 0, 3, 2, 4) -> f_120(v21, v22, v23, v24, v25, v29, 1, v31, v36, v38, v39, v32, v33, v34, 0, 3, 2, 4) :|: TRUE
f_120(v21, v22, v23, v24, v25, v26, 1, v28, v29, v30, v31, v32, v33, v34, 0, 3, 2, 4) -> f_121(v21, v22, v23, v24, v25, v29, 1, v26, v28, v30, v31, v32, v33, v34, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_121(v21:0, v22:0, v23:0, v24:0, v25:0, v29:0, 1, v26:0, v28:0, v30:0, v31:0, v32:0, v33:0, v34:0, 0, 3, 2, 4) -> f_121(v21:0, v22:0, v23:0, v24:0, v25:0, v29:0 + v31:0, 1, v29:0, v31:0, 1 + v39:0, v39:0, v32:0, v33:0, v34:0, 0, 3, 2, 4) :|: 1 + v39:0 + 2 * v31:0 = 0 && v29:0 > -1
Filtered unneeded arguments:
   f_121(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_121(x6, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_121(v29:0, v31:0) -> f_121(v29:0 + v31:0, v39:0) :|: 1 + v39:0 + 2 * v31:0 = 0 && v29:0 > -1

----------------------------------------

(8)
Obligation:
Rules:
f_121(v29:0, v31:0) -> f_121(v29:0 + v31:0, v39:0) :|: 1 + v39:0 + 2 * v31:0 = 0 && v29:0 > -1

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

f_121(v29:0, v31:0) -> f_121(v29:0 + v31:0, v39:0) :|: 1 + v39:0 + 2 * v31:0 = 0 && v29:0 > -1
has been transformed into
f_121(v29:0, v31:0) -> f_121(v29:0 + v31:0, v39:0) :|: v31:0 = x8 && (v29:0 = x6 + x7 && (1 + v39:0 + 2 * v31:0 = 0 && v29:0 > -1)) && 1 + x8 + 2 * x7 = 0 && x6 > -1.


f_121(v29:0, v31:0) -> f_121(v29:0 + v31:0, v39:0) :|: v31:0 = x8 && (v29:0 = x6 + x7 && (1 + v39:0 + 2 * v31:0 = 0 && v29:0 > -1)) && 1 + x8 + 2 * x7 = 0 && x6 > -1 and 
f_121(v29:0, v31:0) -> f_121(v29:0 + v31:0, v39:0) :|: v31:0 = x8 && (v29:0 = x6 + x7 && (1 + v39:0 + 2 * v31:0 = 0 && v29:0 > -1)) && 1 + x8 + 2 * x7 = 0 && x6 > -1
have been merged into the new rule
f_121(x21, x22) -> f_121(x21 + x22 + x23, x24) :|: x22 = x25 && (x21 = x26 + x27 && (1 + x23 + 2 * x22 = 0 && x21 > -1)) && 1 + x25 + 2 * x27 = 0 && x26 > -1 && (x23 = x28 && (x21 + x22 = x29 + x30 && (1 + x24 + 2 * x23 = 0 && x21 + x22 > -1)) && 1 + x28 + 2 * x30 = 0 && x29 > -1)


----------------------------------------

(10)
Obligation:
Rules:
f_121(x31, x32) -> f_121(x31 + x32 + x33, x34) :|: TRUE && x32 + -1 * x35 = 0 && x31 + -1 * x36 + -1 * x37 = 0 && x33 + 2 * x32 = -1 && x31 >= 0 && x35 + 2 * x37 = -1 && x36 >= 0 && x33 + -1 * x38 = 0 && x31 + x32 + -1 * x39 + -1 * x40 = 0 && x34 + 2 * x33 = -1 && x31 + x32 >= 0 && x38 + 2 * x40 = -1 && x39 >= 0

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_121(x31:0, x32:0) -> f_121(x31:0 + x32:0 + x33:0, x34:0) :|: x38:0 + 2 * x40:0 = -1 && x39:0 > -1 && x31:0 + x32:0 >= 0 && x34:0 + 2 * x33:0 = -1 && x31:0 + x32:0 + -1 * x39:0 + -1 * x40:0 = 0 && x33:0 + -1 * x38:0 = 0 && x36:0 > -1 && x35:0 + 2 * x37:0 = -1 && x31:0 > -1 && x33:0 + 2 * x32:0 = -1 && x32:0 + -1 * x35:0 = 0 && x31:0 + -1 * x36:0 + -1 * x37:0 = 0

----------------------------------------

(13) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_121 ] = 3/2*f_121_1 + 1/2*f_121_2

The following rules are decreasing:
f_121(x31:0, x32:0) -> f_121(x31:0 + x32:0 + x33:0, x34:0) :|: x38:0 + 2 * x40:0 = -1 && x39:0 > -1 && x31:0 + x32:0 >= 0 && x34:0 + 2 * x33:0 = -1 && x31:0 + x32:0 + -1 * x39:0 + -1 * x40:0 = 0 && x33:0 + -1 * x38:0 = 0 && x36:0 > -1 && x35:0 + 2 * x37:0 = -1 && x31:0 > -1 && x33:0 + 2 * x32:0 = -1 && x32:0 + -1 * x35:0 = 0 && x31:0 + -1 * x36:0 + -1 * x37:0 = 0

The following rules are bounded:
f_121(x31:0, x32:0) -> f_121(x31:0 + x32:0 + x33:0, x34:0) :|: x38:0 + 2 * x40:0 = -1 && x39:0 > -1 && x31:0 + x32:0 >= 0 && x34:0 + 2 * x33:0 = -1 && x31:0 + x32:0 + -1 * x39:0 + -1 * x40:0 = 0 && x33:0 + -1 * x38:0 = 0 && x36:0 > -1 && x35:0 + 2 * x37:0 = -1 && x31:0 > -1 && x33:0 + 2 * x32:0 = -1 && x32:0 + -1 * x35:0 = 0 && x31:0 + -1 * x36:0 + -1 * x37:0 = 0


----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
