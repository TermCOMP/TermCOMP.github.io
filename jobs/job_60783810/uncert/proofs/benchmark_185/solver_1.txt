YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zaHYN.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 25 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 720 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 18 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 16 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/zaHYN.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/zaHYN.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %6
	6:
		%7 = load %3
		%8 = icmp sgt %7 0
		br %8, %9, %12
	9:
		%10 = load %4
		%11 = icmp sgt %10 0
		br %12
	12:
		%13 = phi [0, %6], [%11, %9]
		br %13, %14, %21
	14:
		%15 = load %3
		%16 = sub i32 %15, 1
		store %16, %3
		%17 = load %4
		%18 = sub i32 %17, 1
		store %18, %4
		%19 = load %5
		%20 = add i32 %19, 1
		store %20, %5
		br %6
	21:
		%22 = load %5
		ret %22

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 39
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_320(v322, v323, v324, v325, v326, v330, 1, v329, v327, v331, v332, v333, v334, v335, v336, v337, v338, 0, 3, 4) -> f_321(v322, v323, v324, v325, v326, v330, 1, v329, v327, v331, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: 0 < v330 && 2 <= v327 && 2 <= v322
f_321(v322, v323, v324, v325, v326, v330, 1, v329, v327, v331, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_323(v322, v323, v324, v325, v326, v330, 1, v329, v327, v331, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: 0 = 0
f_323(v322, v323, v324, v325, v326, v330, 1, v329, v327, v331, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_325(v322, v323, v324, v325, v326, v330, 1, v329, v327, v331, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: TRUE
f_325(v322, v323, v324, v325, v326, v330, 1, v329, v327, v331, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_327(v322, v323, v324, v325, v326, v330, 1, v331, v327, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: 0 = 0
f_327(v322, v323, v324, v325, v326, v330, 1, v331, v327, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_329(v322, v323, v324, v325, v326, v330, 1, v331, v327, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: 0 < v331 && 2 <= v329 && 2 <= v323
f_329(v322, v323, v324, v325, v326, v330, 1, v331, v327, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_332(v322, v323, v324, v325, v326, v330, 1, v331, v327, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: 0 = 0
f_332(v322, v323, v324, v325, v326, v330, 1, v331, v327, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_335(v322, v323, v324, v325, v326, v330, 1, v331, v327, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: 0 = 0
f_335(v322, v323, v324, v325, v326, v330, 1, v331, v327, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_337(v322, v323, v324, v325, v326, v330, 1, v331, v327, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: TRUE
f_337(v322, v323, v324, v325, v326, v330, 1, v331, v327, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_339(v322, v323, v324, v325, v326, v330, 1, v331, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: 0 = 0
f_339(v322, v323, v324, v325, v326, v330, 1, v331, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_341(v322, v323, v324, v325, v326, v330, 1, v331, v378, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: 1 + v378 = v330 && 0 <= v378
f_341(v322, v323, v324, v325, v326, v330, 1, v331, v378, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_343(v322, v323, v324, v325, v326, v330, 1, v331, v378, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: TRUE
f_343(v322, v323, v324, v325, v326, v330, 1, v331, v378, v329, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_344(v322, v323, v324, v325, v326, v330, 1, v331, v378, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: 0 = 0
f_344(v322, v323, v324, v325, v326, v330, 1, v331, v378, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_345(v322, v323, v324, v325, v326, v330, 1, v331, v378, v380, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: 1 + v380 = v331 && 0 <= v380
f_345(v322, v323, v324, v325, v326, v330, 1, v331, v378, v380, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_346(v322, v323, v324, v325, v326, v330, 1, v331, v378, v380, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: TRUE
f_346(v322, v323, v324, v325, v326, v330, 1, v331, v378, v380, v332, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_347(v322, v323, v324, v325, v326, v330, 1, v331, v378, v380, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: 0 = 0
f_347(v322, v323, v324, v325, v326, v330, 1, v331, v378, v380, v333, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_348(v322, v323, v324, v325, v326, v330, 1, v331, v378, v380, v333, v382, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: v382 = 1 + v333 && 2 <= v382
f_348(v322, v323, v324, v325, v326, v330, 1, v331, v378, v380, v333, v382, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_349(v322, v323, v324, v325, v326, v330, 1, v331, v378, v380, v333, v382, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: TRUE
f_349(v322, v323, v324, v325, v326, v330, 1, v331, v378, v380, v333, v382, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_350(v322, v323, v324, v325, v326, v330, 1, v331, v378, v380, v333, v382, v334, v335, v336, v337, v338, 0, 3, 2, 4) :|: TRUE
f_350(v322, v323, v324, v325, v326, v330, 1, v331, v378, v380, v333, v382, v334, v335, v336, v337, v338, 0, 3, 2, 4) -> f_319(v322, v323, v324, v325, v326, v330, 1, v331, v378, v380, v333, v382, v334, v335, v336, v337, v338, 0, 3, 4) :|: TRUE
f_319(v322, v323, v324, v325, v326, v327, 1, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, 0, 3, 4) -> f_320(v322, v323, v324, v325, v326, v330, 1, v329, v327, v331, v332, v333, v334, v335, v336, v337, v338, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_320(v322:0, v323:0, v324:0, v325:0, v326:0, 1 + v378:0, 1, v329:0, v327:0, 1 + v380:0, v332:0, v333:0, v334:0, v335:0, v336:0, v337:0, v338:0, 0, 3, 4) -> f_320(v322:0, v323:0, v324:0, v325:0, v326:0, v378:0, 1, 1 + v380:0, 1 + v378:0, v380:0, v333:0, 1 + v333:0, v334:0, v335:0, v336:0, v337:0, v338:0, 0, 3, 4) :|: v327:0 > 1 && v378:0 > -1 && v322:0 > 1 && v329:0 > 1 && v380:0 > -1 && v323:0 > 1 && v333:0 > 0
Filtered unneeded arguments:
   f_320(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_320(x1, x2, x6, x8, x9, x10, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_320(v322:0, v323:0, sum~cons_1~v378:0, v329:0, v327:0, sum~cons_1~v380:0, v333:0) -> f_320(v322:0, v323:0, v378:0, 1 + v380:0, 1 + v378:0, v380:0, 1 + v333:0) :|: v378:0 > -1 && v327:0 > 1 && v322:0 > 1 && v329:0 > 1 && v380:0 > -1 && v333:0 > 0 && v323:0 > 1 && sum~cons_1~v378:0 = 1 + v378:0 && sum~cons_1~v380:0 = 1 + v380:0

----------------------------------------

(8)
Obligation:
Rules:
f_320(v322:0, v323:0, sum~cons_1~v378:0, v329:0, v327:0, sum~cons_1~v380:0, v333:0) -> f_320(v322:0, v323:0, v378:0, 1 + v380:0, 1 + v378:0, v380:0, 1 + v333:0) :|: v378:0 > -1 && v327:0 > 1 && v322:0 > 1 && v329:0 > 1 && v380:0 > -1 && v333:0 > 0 && v323:0 > 1 && sum~cons_1~v378:0 = 1 + v378:0 && sum~cons_1~v380:0 = 1 + v380:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_320(v322:0:0, v323:0:0, sum~cons_1~v378:0:0, v329:0:0, v327:0:0, sum~cons_1~v380:0:0, v333:0:0) -> f_320(v322:0:0, v323:0:0, v378:0:0, 1 + v380:0:0, 1 + v378:0:0, v380:0:0, 1 + v333:0:0) :|: v333:0:0 > 0 && v323:0:0 > 1 && v380:0:0 > -1 && v329:0:0 > 1 && v322:0:0 > 1 && v327:0:0 > 1 && v378:0:0 > -1 && sum~cons_1~v378:0:0 = 1 + v378:0:0 && sum~cons_1~v380:0:0 = 1 + v380:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_320 ] = f_320_6

The following rules are decreasing:
f_320(v322:0:0, v323:0:0, sum~cons_1~v378:0:0, v329:0:0, v327:0:0, sum~cons_1~v380:0:0, v333:0:0) -> f_320(v322:0:0, v323:0:0, v378:0:0, 1 + v380:0:0, 1 + v378:0:0, v380:0:0, 1 + v333:0:0) :|: v333:0:0 > 0 && v323:0:0 > 1 && v380:0:0 > -1 && v329:0:0 > 1 && v322:0:0 > 1 && v327:0:0 > 1 && v378:0:0 > -1 && sum~cons_1~v378:0:0 = 1 + v378:0:0 && sum~cons_1~v380:0:0 = 1 + v380:0:0

The following rules are bounded:
f_320(v322:0:0, v323:0:0, sum~cons_1~v378:0:0, v329:0:0, v327:0:0, sum~cons_1~v380:0:0, v333:0:0) -> f_320(v322:0:0, v323:0:0, v378:0:0, 1 + v380:0:0, 1 + v378:0:0, v380:0:0, 1 + v333:0:0) :|: v333:0:0 > 0 && v323:0:0 > 1 && v380:0:0 > -1 && v329:0:0 > 1 && v322:0:0 > 1 && v327:0:0 > 1 && v378:0:0 > -1 && sum~cons_1~v378:0:0 = 1 + v378:0:0 && sum~cons_1~v380:0:0 = 1 + v380:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
