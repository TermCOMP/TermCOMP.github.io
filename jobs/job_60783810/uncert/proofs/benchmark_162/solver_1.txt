YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/oW7ur.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 409 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 69 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 18 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/oW7ur.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/oW7ur.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "rec1" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp sle %4 0
		br %5, %6, %7
	6:
		store 0, %2
		br %15
	7:
		%8 = load %3
		%9 = sub i32 %8, 2
		%10 = call i32 @rec1(i32 %9)
		%11 = sub i32 %10, 1
		%12 = call i32 @rec1(i32 %11)
		%13 = call i32 @rec1(i32 %12)
		%14 = add i32 %13, 1
		store %14, %2
		br %15
	15:
		%16 = load %2
		ret %16

*BasicFunctionTypename: "rec2" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 28
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp sle %4 0
		br %5, %6, %7
	6:
		store 0, %2
		br %13
	7:
		%8 = load %3
		%9 = add i32 %8, 1
		%10 = call i32 @rec1(i32 %9)
		%11 = call i32 @rec2(i32 %10)
		%12 = sub i32 %11, 1
		store %12, %2
		br %13
	13:
		%14 = load %2
		ret %14

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 43
	0:
		%1 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%2 = call i32 (...)* @__VERIFIER_nondet_int()
		store %2, %1
		%3 = load %1
		%4 = call i32 @rec1(i32 %3)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 37 rulesP rules:
f_191(v36, v40, v37, v38, v41, v39, 3, 1, 4) -> f_192(v36, v40, v42, v37, v38, v41, v43, v39, 3, 1, 4) :|: 1 <= v42 && v43 = 3 + v42 && 4 <= v43
f_192(v36, v40, v42, v37, v38, v41, v43, v39, 3, 1, 4) -> f_193(v36, v40, v42, v37, v38, v41, v43, v39, 3, 1, 4) :|: TRUE
f_193(v36, v40, v42, v37, v38, v41, v43, v39, 3, 1, 4) -> f_194(v36, v40, v42, v37, v38, v41, v43, v39, 3, 1, 4) :|: TRUE
f_194(v36, v40, v42, v37, v38, v41, v43, v39, 3, 1, 4) -> f_195(v36, v40, v42, v37, v38, v41, v43, v39, 3, 1, 4) :|: 0 = 0
f_195(v36, v40, v42, v37, v38, v41, v43, v39, 3, 1, 4) -> f_197(v36, v40, v42, v37, v38, v41, v43, v39, 3, 1, 4) :|: 0 < v36 && 1 <= v39
f_197(v36, v40, v42, v37, v38, v41, v43, v39, 3, 1, 4) -> f_199(v36, v40, v42, 0, v37, v38, v41, v43, v39, 3, 1, 4) :|: 0 = 0
f_199(v36, v40, v42, 0, v37, v38, v41, v43, v39, 3, 1, 4) -> f_201(v36, v40, v42, 0, v37, v38, v41, v43, v39, 3, 1, 4) :|: TRUE
f_201(v36, v40, v42, 0, v37, v38, v41, v43, v39, 3, 1, 4) -> f_203(v36, v40, v42, 0, v37, v38, v41, v43, v39, 3, 1, 4) :|: 0 = 0
f_203(v36, v40, v42, 0, v37, v38, v41, v43, v39, 3, 1, 4) -> f_205(v36, v40, v42, 0, v45, v37, v38, v41, v43, v39, 3, 2, 1, 4) :|: 2 + v45 = v36 && 0 <= 1 + v45
f_205(v36, v40, v42, 0, v45, v37, v38, v41, v43, v39, 3, 2, 1, 4) -> f_207(v45, v37, v38, v40, v41, v42, v43, v39, v36, 0, 3, 2, 1, 4) :|: 0 = 0
f_207(v45, v37, v38, v40, v41, v42, v43, v39, v36, 0, 3, 2, 1, 4) -> f_209(v45, v37, v38, v40, v41, v42, v43, v39, v36, 3, 2, 1, 4, 0) :|: TRUE
f_207(v45, v37, v38, v40, v41, v42, v43, v39, v36, 0, 3, 2, 1, 4) -> f_211(v45, 0, v37, v38, v40, v41, v42, v43, v39, v36, 3, 2, 1, 4) :|: TRUE
f_207(v45, v37, v38, v40, v41, v42, v43, v39, v36, 0, 3, 2, 1, 4) -> f_293(v45, 1, v37, v38, v40, v41, v42, v43, v39, v36, 0, 3, 2, 4) :|: TRUE
f_207(v45, v37, v38, v40, v41, v42, v43, v39, v36, 0, 3, 2, 1, 4) -> f_314(v45, 1, v37, v38, v40, v41, v42, v43, v39, v36, 0, 3, 2, 4) :|: TRUE
f_209(v45, v37, v38, v40, v41, v42, v43, v39, v36, 3, 2, 1, 4, 0) -> f_190(v45, v37, v38, v39, 3, 1, 4) :|: TRUE
f_190(v36, v37, v38, v39, 3, 1, 4) -> f_191(v36, v40, v37, v38, v41, v39, 3, 1, 4) :|: 1 <= v40 && v41 = 3 + v40 && 4 <= v41
f_211(v45, 0, v37, v38, v40, v41, v42, v43, v39, v36, 3, 2, 1, 4) -> f_212(v36, v40, v42, 0, v45, v37, v38, v41, v43, v39, 3, 2, 1, 4) :|: 0 = 0
f_212(v36, v40, v42, 0, v45, v37, v38, v41, v43, v39, 3, 2, 1, 4) -> f_213(v36, v40, v42, 0, v45, -1, v37, v38, v41, v43, v39, 3, 2, 1, 4) :|: 0 = 0
f_213(v36, v40, v42, 0, v45, -1, v37, v38, v41, v43, v39, 3, 2, 1, 4) -> f_214(-1, v37, v38, v40, v41, v42, v43, v39, v36, 0, v45, 3, 2, 1, 4) :|: 0 = 0
f_214(-1, v37, v38, v40, v41, v42, v43, v39, v36, 0, v45, 3, 2, 1, 4) -> f_215(-1, v37, v38, v40, v41, v42, v43, v39, v36, 3, 1, 2, 4) :|: TRUE
f_214(-1, v37, v38, v40, v41, v42, v43, v39, v36, 0, v45, 3, 2, 1, 4) -> f_216(-1, 0, v37, v38, v40, v41, v42, v43, v39, v36, v45, 3, 2, 1, 4) :|: TRUE
f_215(-1, v37, v38, v40, v41, v42, v43, v39, v36, 3, 1, 2, 4) -> f_190(-1, v37, v38, v39, 3, 1, 4) :|: TRUE
f_216(-1, 0, v37, v38, v40, v41, v42, v43, v39, v36, v45, 3, 2, 1, 4) -> f_217(v36, v40, v42, 0, v45, -1, v37, v38, v41, v43, v39, 3, 2, 1, 4) :|: 0 = 0
f_217(v36, v40, v42, 0, v45, -1, v37, v38, v41, v43, v39, 3, 2, 1, 4) -> f_218(0, v37, v38, v40, v41, v42, v43, v39, v36, v45, -1, 3, 2, 1, 4) :|: 0 = 0
f_218(0, v37, v38, v40, v41, v42, v43, v39, v36, v45, -1, 3, 2, 1, 4) -> f_219(0, v37, v38, v40, v41, v42, v43, v39, v36, 3, 1, 2, 4) :|: TRUE
f_219(0, v37, v38, v40, v41, v42, v43, v39, v36, 3, 1, 2, 4) -> f_190(0, v37, v38, v39, 3, 1, 4) :|: TRUE
f_293(v45, 1, v37, v38, v40, v41, v42, v43, v39, v36, 0, 3, 2, 4) -> f_297(v36, v40, v42, 0, v45, 1, v37, v38, v41, v43, v39, 3, 2, 4) :|: 0 = 0
f_297(v36, v40, v42, 0, v45, 1, v37, v38, v41, v43, v39, 3, 2, 4) -> f_298(v36, v40, v42, 0, v45, 1, v37, v38, v41, v43, v39, 3, 2, 4) :|: 0 = 0
f_298(v36, v40, v42, 0, v45, 1, v37, v38, v41, v43, v39, 3, 2, 4) -> f_299(0, v37, v38, v40, v41, v42, v43, v39, v36, v45, 1, 3, 2, 4) :|: 0 = 0
f_299(0, v37, v38, v40, v41, v42, v43, v39, v36, v45, 1, 3, 2, 4) -> f_300(0, v37, v38, v40, v41, v42, v43, v39, v36, 3, 1, 4) :|: TRUE
f_299(0, v37, v38, v40, v41, v42, v43, v39, v36, v45, 1, 3, 2, 4) -> f_301(0, v37, v38, v40, v41, v42, v43, v39, v36, v45, 1, 3, 2, 4) :|: TRUE
f_300(0, v37, v38, v40, v41, v42, v43, v39, v36, 3, 1, 4) -> f_190(0, v37, v38, v39, 3, 1, 4) :|: TRUE
f_301(0, v37, v38, v40, v41, v42, v43, v39, v36, v45, 1, 3, 2, 4) -> f_303(v36, v40, v42, 0, v45, 1, v37, v38, v41, v43, v39, 3, 2, 4) :|: 0 = 0
f_303(v36, v40, v42, 0, v45, 1, v37, v38, v41, v43, v39, 3, 2, 4) -> f_304(0, v37, v38, v40, v41, v42, v43, v39, v36, v45, 1, 3, 2, 4) :|: 0 = 0
f_304(0, v37, v38, v40, v41, v42, v43, v39, v36, v45, 1, 3, 2, 4) -> f_305(0, v37, v38, v40, v41, v42, v43, v39, v36, 3, 1, 4) :|: TRUE
f_305(0, v37, v38, v40, v41, v42, v43, v39, v36, 3, 1, 4) -> f_190(0, v37, v38, v39, 3, 1, 4) :|: TRUE
f_314(v45, 1, v37, v38, v40, v41, v42, v43, v39, v36, 0, 3, 2, 4) -> f_293(v45, 1, v37, v38, v40, v41, v42, v43, v39, v36, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 5 rulesP rules:
f_299(0, v37:0, v38:0, v40:0, v41:0, v42:0, v43:0, v39:0, v36:0, v45:0, 1, 3, 2, 4) -> f_191(0, v40:1, v37:0, v38:0, 3 + v40:1, v39:0, 3, 1, 4) :|: v40:1 > 0
f_191(2 + v45:0, v40:0, v37:0, v38:0, v41:0, v39:0, 3, 1, 4) -> f_299(0, v37:0, v38:0, v40:0, v41:0, v42:0, 3 + v42:0, v39:0, 2 + v45:0, v45:0, 1, 3, 2, 4) :|: v42:0 > 0 && v39:0 > 0 && v45:0 > -2
f_191(2 + v45:0, v40:0, v37:0, v38:0, v41:0, v39:0, 3, 1, 4) -> f_191(-1, v40:1, v37:0, v38:0, 3 + v40:1, v39:0, 3, 1, 4) :|: v42:0 > 0 && v39:0 > 0 && v45:0 > -2 && v40:1 > 0
f_191(2 + v45:0, v40:0, v37:0, v38:0, v41:0, v39:0, 3, 1, 4) -> f_191(0, v40:1, v37:0, v38:0, 3 + v40:1, v39:0, 3, 1, 4) :|: v42:0 > 0 && v39:0 > 0 && v45:0 > -2 && v40:1 > 0
f_191(2 + v45:0, v40:0, v37:0, v38:0, v41:0, v39:0, 3, 1, 4) -> f_191(v45:0, v40:1, v37:0, v38:0, 3 + v40:1, v39:0, 3, 1, 4) :|: v42:0 > 0 && v39:0 > 0 && v45:0 > -2 && v40:1 > 0
Filtered unneeded arguments:
   f_191(x1, x2, x3, x4, x5, x6, x7, x8, x9) -> f_191(x1, x6)
   f_299(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_299(x8)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_299(v39:0) -> f_191(0, v39:0) :|: TRUE
f_191(sum~cons_2~v45:0, v39:0) -> f_299(v39:0) :|: v39:0 > 0 && v45:0 > -2 && sum~cons_2~v45:0 = 2 + v45:0
f_191(sum~cons_2~v45:0, v39:0) -> f_191(-1, v39:0) :|: v39:0 > 0 && v45:0 > -2 && sum~cons_2~v45:0 = 2 + v45:0
f_191(sum~cons_2~v45:0, v39:0) -> f_191(0, v39:0) :|: v39:0 > 0 && v45:0 > -2 && sum~cons_2~v45:0 = 2 + v45:0
f_191(sum~cons_2~v45:0, v39:0) -> f_191(v45:0, v39:0) :|: v39:0 > 0 && v45:0 > -2 && sum~cons_2~v45:0 = 2 + v45:0

----------------------------------------

(8)
Obligation:
Rules:
f_299(v39:0) -> f_191(0, v39:0) :|: TRUE
f_191(x, x1) -> f_299(x1) :|: x1 > 0 && x2 > -2 && x = 2 + x2
f_191(x3, x4) -> f_191(-1, x4) :|: x4 > 0 && x5 > -2 && x3 = 2 + x5
f_191(x6, x7) -> f_191(0, x7) :|: x7 > 0 && x8 > -2 && x6 = 2 + x8
f_191(x9, x10) -> f_191(x11, x10) :|: x10 > 0 && x11 > -2 && x9 = 2 + x11

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(10)
Obligation:
Rules:
f_191(x9, x10) -> f_191(x11, x10) :|: x10 > 0 && x11 > -2 && x9 = 2 + x11

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_191(sum~cons_2~x11:0, x10:0) -> f_191(x11:0, x10:0) :|: x10:0 > 0 && x11:0 > -2 && sum~cons_2~x11:0 = 2 + x11:0

----------------------------------------

(13) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_191(x, x1)] = x

The following rules are decreasing:
f_191(sum~cons_2~x11:0, x10:0) -> f_191(x11:0, x10:0) :|: x10:0 > 0 && x11:0 > -2 && sum~cons_2~x11:0 = 2 + x11:0
The following rules are bounded:
f_191(sum~cons_2~x11:0, x10:0) -> f_191(x11:0, x10:0) :|: x10:0 > 0 && x11:0 > -2 && sum~cons_2~x11:0 = 2 + x11:0

----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
