MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/thKpS.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 397 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
    (7) SCC2IRS [SOUND, 14 ms]
    (8) IntTRS
        (9) IntTRSPeriodicNontermProof [COMPLETE, 4 ms]
        (10) NO
    (11) SCC2IRS [SOUND, 11 ms]
    (12) IntTRS
        (13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (14) IntTRS
        (15) IntTRSPeriodicNontermProof [COMPLETE, 8 ms]
        (16) NO
(17) SEGraph to IRS [SOUND, 100 ms]
(18) IntTRS
    (19) IRSNoOverapproximation [EQUIVALENT, 0 ms]
    (20) MAYBE
(21) SEGraph to IRS [SOUND, 100 ms]
(22) IntTRS
    (23) IRSToKoat [EQUIVALENT, 0 ms]
    (24) Koat Problem
    (25) KoAT2 [EQUIVALENT, 52 ms]
    (26) MAYBE


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/thKpS.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/thKpS.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cstrcpy" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		%6 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%7 = load %3
		store %7, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %6)
		%8 = load %4
		store %8, %6
		br %9
	9:
		%10 = load %6
		%11 = getelementptr %10, 1
		store %11, %6
		%12 = load %10
		%13 = load %5
		%14 = getelementptr %13, 1
		store %14, %5
		store %12, %13
		%15 = sext i8 %12 to i32
		%16 = icmp ne %15 0
		br %16, %17, %18
	17:
		br %9
	18:
		%19 = load %3
		ret %19

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 36
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i8, align 8
		%3 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%4 = load %3
		%5 = load %2
		%6 = call *i8 @cstrcpy(*i8 %4, *i8 %5)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_181(v43, v44, v45, v46, v47, v48, v65, v50, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_182(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: v67 = 1 + v65 && 1 <= v67
f_182(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_183(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_183(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_184(v43, v44, v45, v46, v47, v48, v65, v67, v69, v52, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_184(v43, v44, v45, v46, v47, v48, v65, v67, v69, v52, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_185(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_185(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_186(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: v73 = 1 + v71 && 1 <= v73
f_186(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_187(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_187(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_188(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_188(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_189(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: 0 = 0
f_189(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_190(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: v69 != 0
f_190(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_192(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: 0 = 0
f_192(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_194(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_194(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_196(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_196(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_180(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_180(v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_181(v43, v44, v45, v46, v47, v48, v65, v50, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_181(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:0, v50:0, v51:0, v52:0, v53:0, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) -> f_181(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:1, 1 + v65:0, v69:0, v71:0, 1 + v71:0, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) :|: v65:0 > -1 && v69:0 < 0 && v71:0 > -1
f_181(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:0, v50:0, v51:0, v52:0, v53:0, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) -> f_181(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:1, 1 + v65:0, v69:0, v71:0, 1 + v71:0, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) :|: v65:0 > -1 && v69:0 > 0 && v71:0 > -1
Filtered unneeded arguments:
   f_181(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_181(x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_181(v65:0) -> f_181(v65:1) :|: v65:0 > -1

----------------------------------------

(8)
Obligation:
Rules:
f_181(v65:0) -> f_181(v65:1) :|: v65:0 > -1

----------------------------------------

(9) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v65:0) -> f(1, v65:1) :|: pc = 1 && v65:0 > -1
Witness term starting non-terminating reduction: f(1, 0)
----------------------------------------

(10)
NO

----------------------------------------

(11) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_181(v43, v44, v45, v46, v47, v48, v65, v50, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_182(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: v67 = 1 + v65 && 1 <= v67
f_182(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_183(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_183(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_184(v43, v44, v45, v46, v47, v48, v65, v67, v69, v52, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_184(v43, v44, v45, v46, v47, v48, v65, v67, v69, v52, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_185(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_185(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_186(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: v73 = 1 + v71 && 1 <= v73
f_186(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_187(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_187(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_188(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_188(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_189(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: 0 = 0
f_189(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_190(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: v69 != 0
f_190(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_192(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: 0 = 0
f_192(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_194(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_194(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_196(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_196(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_180(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: 0 <= v43 && 0 <= v44 && 1 <= v45 && 1 <= v46 && 1 <= v47 && 1 <= v48 && 0 <= v65 && 1 <= v67 && 0 <= v71 && 1 <= v73 && 1 <= v55 && 1 <= v56 && 1 <= v57 && 4 <= v58 && 8 <= v59 && 8 <= v60 && 8 <= v61 && 8 <= v62 && 8 <= v63 && 8 <= v64 && v55 <= v58 && v56 <= v59 && v57 <= v60 && v45 <= v61 && v46 <= v62 && v47 <= v63 && v48 <= v64
f_180(v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_181(v43, v44, v45, v46, v47, v48, v65, v50, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_181(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:0, v50:0, v51:0, v52:0, v53:0, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) -> f_181(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:1, 1 + v65:0, v69:0, v71:0, 1 + v71:0, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) :|: v44:0 > -1 && v43:0 > -1 && v45:0 > 0 && v46:0 > 0 && v47:0 > 0 && v48:0 > 0 && v65:0 > -1 && v71:0 > -1 && v55:0 > 0 && v56:0 > 0 && v57:0 > 0 && v58:0 > 3 && v59:0 > 7 && v60:0 > 7 && v61:0 > 7 && v62:0 > 7 && v63:0 > 7 && v64:0 > 7 && v58:0 >= v55:0 && v59:0 >= v56:0 && v60:0 >= v57:0 && v61:0 >= v45:0 && v69:0 < 0 && v62:0 >= v46:0 && v64:0 >= v48:0 && v63:0 >= v47:0
f_181(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:0, v50:0, v51:0, v52:0, v53:0, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) -> f_181(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:1, 1 + v65:0, v69:0, v71:0, 1 + v71:0, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) :|: v44:0 > -1 && v43:0 > -1 && v45:0 > 0 && v46:0 > 0 && v47:0 > 0 && v48:0 > 0 && v65:0 > -1 && v71:0 > -1 && v55:0 > 0 && v56:0 > 0 && v57:0 > 0 && v58:0 > 3 && v59:0 > 7 && v60:0 > 7 && v61:0 > 7 && v62:0 > 7 && v63:0 > 7 && v64:0 > 7 && v58:0 >= v55:0 && v59:0 >= v56:0 && v60:0 >= v57:0 && v61:0 >= v45:0 && v69:0 > 0 && v62:0 >= v46:0 && v64:0 >= v48:0 && v63:0 >= v47:0
Filtered unneeded arguments:
   f_181(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_181(x1, x2, x3, x4, x5, x6, x7, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_181(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:0, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0) -> f_181(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0) :|: v43:0 > -1 && v44:0 > -1 && v45:0 > 0 && v46:0 > 0 && v47:0 > 0 && v48:0 > 0 && v65:0 > -1 && v55:0 > 0 && v56:0 > 0 && v57:0 > 0 && v58:0 > 3 && v59:0 > 7 && v60:0 > 7 && v61:0 > 7 && v62:0 > 7 && v63:0 > 7 && v64:0 > 7 && v58:0 >= v55:0 && v59:0 >= v56:0 && v60:0 >= v57:0 && v61:0 >= v45:0 && v62:0 >= v46:0 && v63:0 >= v47:0 && v64:0 >= v48:0

----------------------------------------

(12)
Obligation:
Rules:
f_181(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:0, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0) -> f_181(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0) :|: v43:0 > -1 && v44:0 > -1 && v45:0 > 0 && v46:0 > 0 && v47:0 > 0 && v48:0 > 0 && v65:0 > -1 && v55:0 > 0 && v56:0 > 0 && v57:0 > 0 && v58:0 > 3 && v59:0 > 7 && v60:0 > 7 && v61:0 > 7 && v62:0 > 7 && v63:0 > 7 && v64:0 > 7 && v58:0 >= v55:0 && v59:0 >= v56:0 && v60:0 >= v57:0 && v61:0 >= v45:0 && v62:0 >= v46:0 && v63:0 >= v47:0 && v64:0 >= v48:0

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f_181(v43:0:0, v44:0:0, v45:0:0, v46:0:0, v47:0:0, v48:0:0, v65:0:0, v55:0:0, v58:0:0, v56:0:0, v59:0:0, v57:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0) -> f_181(v43:0:0, v44:0:0, v45:0:0, v46:0:0, v47:0:0, v48:0:0, v65:1:0, v55:0:0, v58:0:0, v56:0:0, v59:0:0, v57:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0) :|: v63:0:0 >= v47:0:0 && v64:0:0 >= v48:0:0 && v62:0:0 >= v46:0:0 && v61:0:0 >= v45:0:0 && v60:0:0 >= v57:0:0 && v59:0:0 >= v56:0:0 && v58:0:0 >= v55:0:0 && v64:0:0 > 7 && v63:0:0 > 7 && v62:0:0 > 7 && v61:0:0 > 7 && v60:0:0 > 7 && v59:0:0 > 7 && v58:0:0 > 3 && v57:0:0 > 0 && v56:0:0 > 0 && v55:0:0 > 0 && v65:0:0 > -1 && v48:0:0 > 0 && v47:0:0 > 0 && v46:0:0 > 0 && v45:0:0 > 0 && v44:0:0 > -1 && v43:0:0 > -1

----------------------------------------

(15) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v43:0:0, v44:0:0, v45:0:0, v46:0:0, v47:0:0, v48:0:0, v65:0:0, v55:0:0, v58:0:0, v56:0:0, v59:0:0, v57:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0) -> f(1, v43:0:0, v44:0:0, v45:0:0, v46:0:0, v47:0:0, v48:0:0, v65:1:0, v55:0:0, v58:0:0, v56:0:0, v59:0:0, v57:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0) :|: pc = 1 && (v63:0:0 >= v47:0:0 && v64:0:0 >= v48:0:0 && v62:0:0 >= v46:0:0 && v61:0:0 >= v45:0:0 && v60:0:0 >= v57:0:0 && v59:0:0 >= v56:0:0 && v58:0:0 >= v55:0:0 && v64:0:0 > 7 && v63:0:0 > 7 && v62:0:0 > 7 && v61:0:0 > 7 && v60:0:0 > 7 && v59:0:0 > 7 && v58:0:0 > 3 && v57:0:0 > 0 && v56:0:0 > 0 && v55:0:0 > 0 && v65:0:0 > -1 && v48:0:0 > 0 && v47:0:0 > 0 && v46:0:0 > 0 && v45:0:0 > 0 && v44:0:0 > -1 && v43:0:0 > -1)
Witness term starting non-terminating reduction: f(1, 0, 0, 1, 1, 4, 1, 0, 1, 17, 1, 19, 1, 19, 19, 19, 22, 20)
----------------------------------------

(16)
NO

----------------------------------------

(17) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 62 rulesP rules:
f_121 -> f_122(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_122(v1, v2, 3, 1, 4) -> f_123(v1, v3, v2, v4, 3, 7, 1, 4, 8) :|: 1 <= v3 && v4 = 7 + v3 && 8 <= v4
f_123(v1, v3, v2, v4, 3, 7, 1, 4, 8) -> f_124(v1, v3, v5, v2, v4, v6, 3, 7, 1, 4, 8) :|: 1 <= v5 && v6 = 7 + v5 && 8 <= v6
f_124(v1, v3, v5, v2, v4, v6, 3, 7, 1, 4, 8) -> f_125(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_125(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_126(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_126(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_127(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_127(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_128(v1, v3, v5, v7, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_128(v1, v3, v5, v7, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_129(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_129(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_130(v7, v9, v1, v2, v3, v4, v5, v6, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_130(v7, v9, v1, v2, v3, v4, v5, v6, 0, 3, 7, 1, 4, 8) -> f_131(v7, v9, v11, v1, v2, v3, v4, v5, v6, v12, 0, 3, 7, 1, 4, 8) :|: 1 <= v11 && v12 = 7 + v11 && 8 <= v12
f_131(v7, v9, v11, v1, v2, v3, v4, v5, v6, v12, 0, 3, 7, 1, 4, 8) -> f_132(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: 1 <= v13 && v14 = 7 + v13 && 8 <= v14
f_132(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_133(v7, v9, v11, v13, v15, v1, v2, v3, v4, v5, v6, v12, v14, v16, 0, 3, 7, 1, 4, 8) :|: 1 <= v15 && v16 = 7 + v15 && 8 <= v16
f_133(v7, v9, v11, v13, v15, v1, v2, v3, v4, v5, v6, v12, v14, v16, 0, 3, 7, 1, 4, 8) -> f_134(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: 1 <= v17 && v18 = 7 + v17 && 8 <= v18
f_134(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_135(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_135(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_136(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_136(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_137(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_137(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_138(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_138(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_139(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_139(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_140(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_140(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_141(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_141(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_142(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_142(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_143(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_143(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_144(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_144(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_145(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_145(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_146(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_146(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_147(v7, v9, v11, v13, v15, v17, v23, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: v23 = 1 + v9 && 1 <= v23
f_147(v7, v9, v11, v13, v15, v17, v23, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_148(v7, v9, v11, v13, v15, v17, v23, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_148(v7, v9, v11, v13, v15, v17, v23, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_149(v7, v9, v11, v13, v15, v17, v23, v25, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_149(v7, v9, v11, v13, v15, v17, v23, v25, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_150(v7, v9, v11, v13, v15, v17, v23, v25, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_150(v7, v9, v11, v13, v15, v17, v23, v25, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_151(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: v27 = 1 + v7 && 1 <= v27
f_151(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_152(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_152(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_153(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8, 0) :|: TRUE
f_153(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8, 0) -> f_154(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8, 0) :|: 0 = 0
f_154(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8, 0) -> f_155(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 0, 4, 8) :|: v25 != 0
f_154(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8, 0) -> f_156(v7, v9, v11, v13, v15, v17, v23, 0, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) :|: v25 = 0
f_155(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 0, 4, 8) -> f_157(v7, v9, v11, v13, v15, v17, v23, v25, v27, 1, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 0, 4, 8) :|: 0 = 0
f_156(v7, v9, v11, v13, v15, v17, v23, 0, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) -> f_158(v7, v9, v11, v13, v15, v17, v23, 0, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) :|: 0 = 0
f_157(v7, v9, v11, v13, v15, v17, v23, v25, v27, 1, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 0, 4, 8) -> f_159(v7, v9, v11, v13, v15, v17, v23, v25, v27, 1, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 0, 4, 8) :|: TRUE
f_158(v7, v9, v11, v13, v15, v17, v23, 0, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) -> f_160(v7, v9, v11, v13, v15, v17, v23, 0, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) :|: TRUE
f_159(v7, v9, v11, v13, v15, v17, v23, v25, v27, 1, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 0, 4, 8) -> f_161(v7, v9, v11, v13, v15, v17, v23, v25, v27, 1, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 0, 4, 8) :|: TRUE
f_160(v7, v9, v11, v13, v15, v17, v23, 0, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) -> f_162(v7, v9, v11, v13, v15, v17, v23, 0, v27, v30, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) :|: TRUE
f_161(v7, v9, v11, v13, v15, v17, v23, v25, v27, 1, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 0, 4, 8) -> f_180(v7, v9, v11, v13, v15, v17, v9, v23, v25, v7, v27, 1, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 0, 4, 8) :|: TRUE
f_162(v7, v9, v11, v13, v15, v17, v23, 0, v27, v30, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) -> f_164(v1, v3, v5, v7, v9, v30, v2, v4, v6, 3, 7, 1, 4, 8, 0) :|: 0 = 0
f_180(v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_181(v43, v44, v45, v46, v47, v48, v65, v50, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_181(v43, v44, v45, v46, v47, v48, v65, v50, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_182(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: v67 = 1 + v65 && 1 <= v67
f_182(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_183(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_183(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_184(v43, v44, v45, v46, v47, v48, v65, v67, v69, v52, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_184(v43, v44, v45, v46, v47, v48, v65, v67, v69, v52, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_185(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_185(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_186(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: v73 = 1 + v71 && 1 <= v73
f_186(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_187(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_187(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_188(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_188(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_189(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: 0 = 0
f_189(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_190(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: v69 != 0
f_189(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_191(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 4, 8) :|: v69 = 0
f_190(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_192(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: 0 = 0
f_191(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 4, 8) -> f_193(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 1, 4, 8) :|: 0 = 0
f_192(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_194(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_193(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 1, 4, 8) -> f_195(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 1, 4, 8) :|: TRUE
f_194(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_196(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_195(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 1, 4, 8) -> f_197(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, v98, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 1, 4, 8) :|: TRUE
f_196(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_180(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_197(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, v98, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 1, 4, 8) -> f_198(v55, v56, v57, v43, v44, v98, v58, v59, v60, 3, 7, 0, 1, 4, 8) :|: 0 = 0
Combined rules. Obtained 6 rulesP rules:
f_121 -> f_189(v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, v65:0, 1 + v65:0, v69:0, v71:0, 1 + v71:0, 1, v1:0, 3 + v1:0, v3:0, 7 + v3:0, v5:0, 7 + v5:0, 7 + v11:0, 7 + v13:0, 7 + v15:0, 7 + v17:0, 3, 7, 0, 4, 8) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v15:0 > 0 && v17:0 > 0 && v9:0 > -1 && v7:0 > -1 && v25:0 < 0 && v71:0 > -1 && v65:0 > -1
f_121 -> f_189(v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, v65:0, 1 + v65:0, v69:0, v71:0, 1 + v71:0, 1, v1:0, 3 + v1:0, v3:0, 7 + v3:0, v5:0, 7 + v5:0, 7 + v11:0, 7 + v13:0, 7 + v15:0, 7 + v17:0, 3, 7, 0, 4, 8) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v15:0 > 0 && v17:0 > 0 && v9:0 > -1 && v7:0 > -1 && v25:0 > 0 && v71:0 > -1 && v65:0 > -1
f_189(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:0, v67:0, 0, v71:0, v73:0, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) -> f_198(v55:0, v56:0, v57:0, v43:0, v44:0, v98:0, v58:0, v59:0, v60:0, 3, 7, 0, 1, 4, 8) :|: TRUE
f_121 -> f_164(v1:0, v3:0, v5:0, v7:0, v9:0, v30:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v15:0 > 0 && v17:0 > 0 && v7:0 > -1 && v9:0 > -1
f_189(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:0, v67:0, v69:0, v71:0, v73:0, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) -> f_189(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:1, 1 + v65:1, v69:1, v71:1, 1 + v71:1, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) :|: v65:1 > -1 && v69:0 < 0 && v71:1 > -1
f_189(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:0, v67:0, v69:0, v71:0, v73:0, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) -> f_189(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:1, 1 + v65:1, v69:1, v71:1, 1 + v71:1, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) :|: v65:1 > -1 && v69:0 > 0 && v71:1 > -1
Filtered unneeded arguments:
   f_189(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_189(x9)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_121 -> f_189(v69:0) :|: TRUE
f_189(cons_0) -> f_198(v55:0, v56:0, v57:0, v43:0, v44:0, v98:0, v58:0, v59:0, v60:0, 3, 7, 0, 1, 4, 8) :|: TRUE && cons_0 = 0
f_121 -> f_164(v1:0, v3:0, v5:0, v7:0, v9:0, v30:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v9:0 > -1 && v7:0 > -1
f_189(v69:0) -> f_189(v69:1) :|: v69:0 < 0
f_189(v69:0) -> f_189(v69:1) :|: v69:0 > 0

----------------------------------------

(18)
Obligation:
Rules:
f_121 -> f_189(v69:0) :|: TRUE
f_189(cons_0) -> f_198(v55:0, v56:0, v57:0, v43:0, v44:0, v98:0, v58:0, v59:0, v60:0, 3, 7, 0, 1, 4, 8) :|: TRUE && cons_0 = 0
f_121 -> f_164(v1:0, v3:0, v5:0, v7:0, v9:0, v30:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v9:0 > -1 && v7:0 > -1
f_189(x) -> f_189(x1) :|: x < 0
f_189(x2) -> f_189(x3) :|: x2 > 0
Start term: f_121

----------------------------------------

(19) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination is aborted since the IRSProblem over-approximates
----------------------------------------

(20)
MAYBE

----------------------------------------

(21) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 62 rulesP rules:
f_121 -> f_122(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_122(v1, v2, 3, 1, 4) -> f_123(v1, v3, v2, v4, 3, 7, 1, 4, 8) :|: 1 <= v3 && v4 = 7 + v3 && 8 <= v4
f_123(v1, v3, v2, v4, 3, 7, 1, 4, 8) -> f_124(v1, v3, v5, v2, v4, v6, 3, 7, 1, 4, 8) :|: 1 <= v5 && v6 = 7 + v5 && 8 <= v6
f_124(v1, v3, v5, v2, v4, v6, 3, 7, 1, 4, 8) -> f_125(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_125(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_126(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_126(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_127(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_127(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_128(v1, v3, v5, v7, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_128(v1, v3, v5, v7, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_129(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_129(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_130(v7, v9, v1, v2, v3, v4, v5, v6, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_130(v7, v9, v1, v2, v3, v4, v5, v6, 0, 3, 7, 1, 4, 8) -> f_131(v7, v9, v11, v1, v2, v3, v4, v5, v6, v12, 0, 3, 7, 1, 4, 8) :|: 1 <= v11 && v12 = 7 + v11 && 8 <= v12
f_131(v7, v9, v11, v1, v2, v3, v4, v5, v6, v12, 0, 3, 7, 1, 4, 8) -> f_132(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: 1 <= v13 && v14 = 7 + v13 && 8 <= v14
f_132(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_133(v7, v9, v11, v13, v15, v1, v2, v3, v4, v5, v6, v12, v14, v16, 0, 3, 7, 1, 4, 8) :|: 1 <= v15 && v16 = 7 + v15 && 8 <= v16
f_133(v7, v9, v11, v13, v15, v1, v2, v3, v4, v5, v6, v12, v14, v16, 0, 3, 7, 1, 4, 8) -> f_134(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: 1 <= v17 && v18 = 7 + v17 && 8 <= v18
f_134(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_135(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_135(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_136(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_136(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_137(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_137(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_138(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_138(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_139(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_139(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_140(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_140(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_141(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_141(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_142(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_142(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_143(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_143(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_144(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_144(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_145(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_145(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_146(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_146(v7, v9, v11, v13, v15, v17, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_147(v7, v9, v11, v13, v15, v17, v23, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: v23 = 1 + v9 && 1 <= v23
f_147(v7, v9, v11, v13, v15, v17, v23, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_148(v7, v9, v11, v13, v15, v17, v23, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_148(v7, v9, v11, v13, v15, v17, v23, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_149(v7, v9, v11, v13, v15, v17, v23, v25, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_149(v7, v9, v11, v13, v15, v17, v23, v25, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_150(v7, v9, v11, v13, v15, v17, v23, v25, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_150(v7, v9, v11, v13, v15, v17, v23, v25, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_151(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: v27 = 1 + v7 && 1 <= v27
f_151(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_152(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_152(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 0, 3, 7, 1, 4, 8) -> f_153(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8, 0) :|: TRUE
f_153(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8, 0) -> f_154(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8, 0) :|: 0 = 0
f_154(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8, 0) -> f_155(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 0, 4, 8) :|: v25 != 0
f_154(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8, 0) -> f_156(v7, v9, v11, v13, v15, v17, v23, 0, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) :|: v25 = 0
f_155(v7, v9, v11, v13, v15, v17, v23, v25, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 0, 4, 8) -> f_157(v7, v9, v11, v13, v15, v17, v23, v25, v27, 1, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 0, 4, 8) :|: 0 = 0
f_156(v7, v9, v11, v13, v15, v17, v23, 0, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) -> f_158(v7, v9, v11, v13, v15, v17, v23, 0, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) :|: 0 = 0
f_157(v7, v9, v11, v13, v15, v17, v23, v25, v27, 1, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 0, 4, 8) -> f_159(v7, v9, v11, v13, v15, v17, v23, v25, v27, 1, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 0, 4, 8) :|: TRUE
f_158(v7, v9, v11, v13, v15, v17, v23, 0, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) -> f_160(v7, v9, v11, v13, v15, v17, v23, 0, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) :|: TRUE
f_159(v7, v9, v11, v13, v15, v17, v23, v25, v27, 1, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 0, 4, 8) -> f_161(v7, v9, v11, v13, v15, v17, v23, v25, v27, 1, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 0, 4, 8) :|: TRUE
f_160(v7, v9, v11, v13, v15, v17, v23, 0, v27, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) -> f_162(v7, v9, v11, v13, v15, v17, v23, 0, v27, v30, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) :|: TRUE
f_161(v7, v9, v11, v13, v15, v17, v23, v25, v27, 1, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 0, 4, 8) -> f_180(v7, v9, v11, v13, v15, v17, v9, v23, v25, v7, v27, 1, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 0, 4, 8) :|: TRUE
f_162(v7, v9, v11, v13, v15, v17, v23, 0, v27, v30, v1, v2, v3, v4, v5, v6, v12, v14, v16, v18, 3, 7, 1, 4, 8) -> f_164(v1, v3, v5, v7, v9, v30, v2, v4, v6, 3, 7, 1, 4, 8, 0) :|: 0 = 0
f_180(v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_181(v43, v44, v45, v46, v47, v48, v65, v50, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_181(v43, v44, v45, v46, v47, v48, v65, v50, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_182(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: v67 = 1 + v65 && 1 <= v67
f_182(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_183(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_183(v43, v44, v45, v46, v47, v48, v65, v67, v51, v52, v53, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_184(v43, v44, v45, v46, v47, v48, v65, v67, v69, v52, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_184(v43, v44, v45, v46, v47, v48, v65, v67, v69, v52, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_185(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_185(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v53, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_186(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: v73 = 1 + v71 && 1 <= v73
f_186(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_187(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_187(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_188(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_188(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, v51, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_189(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: 0 = 0
f_189(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_190(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: v69 != 0
f_189(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_191(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 4, 8) :|: v69 = 0
f_190(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_192(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: 0 = 0
f_191(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 4, 8) -> f_193(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 1, 4, 8) :|: 0 = 0
f_192(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_194(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_193(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 1, 4, 8) -> f_195(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 1, 4, 8) :|: TRUE
f_194(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_196(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_195(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 1, 4, 8) -> f_197(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, v98, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 1, 4, 8) :|: TRUE
f_196(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) -> f_180(v43, v44, v45, v46, v47, v48, v65, v67, v69, v71, v73, 1, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 0, 4, 8) :|: TRUE
f_197(v43, v44, v45, v46, v47, v48, v65, v67, 0, v71, v73, v98, v55, v58, v56, v59, v57, v60, v61, v62, v63, v64, 3, 7, 1, 4, 8) -> f_198(v55, v56, v57, v43, v44, v98, v58, v59, v60, 3, 7, 0, 1, 4, 8) :|: 0 = 0
Combined rules. Obtained 6 rulesP rules:
f_121 -> f_189(v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, v65:0, 1 + v65:0, v69:0, v71:0, 1 + v71:0, 1, v1:0, 3 + v1:0, v3:0, 7 + v3:0, v5:0, 7 + v5:0, 7 + v11:0, 7 + v13:0, 7 + v15:0, 7 + v17:0, 3, 7, 0, 4, 8) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v15:0 > 0 && v17:0 > 0 && v9:0 > -1 && v7:0 > -1 && v25:0 < 0 && v71:0 > -1 && v65:0 > -1
f_121 -> f_189(v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, v65:0, 1 + v65:0, v69:0, v71:0, 1 + v71:0, 1, v1:0, 3 + v1:0, v3:0, 7 + v3:0, v5:0, 7 + v5:0, 7 + v11:0, 7 + v13:0, 7 + v15:0, 7 + v17:0, 3, 7, 0, 4, 8) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v15:0 > 0 && v17:0 > 0 && v9:0 > -1 && v7:0 > -1 && v25:0 > 0 && v71:0 > -1 && v65:0 > -1
f_189(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:0, v67:0, 0, v71:0, v73:0, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) -> f_198(v55:0, v56:0, v57:0, v43:0, v44:0, v98:0, v58:0, v59:0, v60:0, 3, 7, 0, 1, 4, 8) :|: TRUE
f_121 -> f_164(v1:0, v3:0, v5:0, v7:0, v9:0, v30:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v15:0 > 0 && v17:0 > 0 && v7:0 > -1 && v9:0 > -1
f_189(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:0, v67:0, v69:0, v71:0, v73:0, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) -> f_189(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:1, 1 + v65:1, v69:1, v71:1, 1 + v71:1, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) :|: v65:1 > -1 && v69:0 < 0 && v71:1 > -1
f_189(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:0, v67:0, v69:0, v71:0, v73:0, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) -> f_189(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v65:1, 1 + v65:1, v69:1, v71:1, 1 + v71:1, 1, v55:0, v58:0, v56:0, v59:0, v57:0, v60:0, v61:0, v62:0, v63:0, v64:0, 3, 7, 0, 4, 8) :|: v65:1 > -1 && v69:0 > 0 && v71:1 > -1
Filtered unneeded arguments:
   f_189(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_189(x9)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_121 -> f_189(v69:0) :|: TRUE
f_189(cons_0) -> f_198(v55:0, v56:0, v57:0, v43:0, v44:0, v98:0, v58:0, v59:0, v60:0, 3, 7, 0, 1, 4, 8) :|: TRUE && cons_0 = 0
f_121 -> f_164(v1:0, v3:0, v5:0, v7:0, v9:0, v30:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v9:0 > -1 && v7:0 > -1
f_189(v69:0) -> f_189(v69:1) :|: v69:0 < 0
f_189(v69:0) -> f_189(v69:1) :|: v69:0 > 0

----------------------------------------

(22)
Obligation:
Rules:
f_121 -> f_189(v69:0) :|: TRUE
f_189(cons_0) -> f_198(v55:0, v56:0, v57:0, v43:0, v44:0, v98:0, v58:0, v59:0, v60:0, 3, 7, 0, 1, 4, 8) :|: TRUE && cons_0 = 0
f_121 -> f_164(v1:0, v3:0, v5:0, v7:0, v9:0, v30:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v9:0 > -1 && v7:0 > -1
f_189(x) -> f_189(x1) :|: x < 0
f_189(x2) -> f_189(x3) :|: x2 > 0
Start term: f_121

----------------------------------------

(23) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(24)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_121))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x40 x41 k20 x39 x35 x36 x37 x38 x31 x32 x33 x34 k18 k19 x30 x70 x68 x69 x64 x65 x66 x67 x60 x61 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x58 x59 x53 x54 x55 x56 x50 x51 x52 x90 x91 x92 x86 x87 x88 x89 x x82 x83 x84 x85 x80 x81 x79 x111 x110 x75 x76 x'' x77 x78 x71 x72 x73 x74 k14 x109 k15 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x7 x27 x20 x102 x21 x101 x22 x104 x23 x103 x106 x1 x105 x108 x107 x' x17 x18 x19 x13 x14 x15 x16 x97 x10 x98 x11 x99 x12 x93 x94 x95 x96)
(RULES
  f_189(k19, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82) -> f_189(k20, x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96) :|: k19 < 0
  f_121(x97, x98, x99, x100, x101, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111) -> f_164(k12, k13, k15, k17, k18, k1, 3 + k12, 7 + k13, 7 + k15, 3, 7, 1, 4, 8, 0) :|: k12 > 0 && k13 > 0 && k15 > 0 && k18 > -1 && k17 > -1
  f_189(k5, x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) -> f_198(k2, k4, k9, k3, k6, k8, k11, k7, k0, 3, 7, 0, 1, 4, 8) :|: 0 = 0 && k5 = 0
  f_121(x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54) -> f_189(k10, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67, x68) :|: 0 = 0
  f_189(k14, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_189(k16, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39) :|: k14 > 0
)

----------------------------------------

(25) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_17379890765492642102.koat 

KoAT2's output was:

MAYBE

----------------------------------------

(26)
MAYBE
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
