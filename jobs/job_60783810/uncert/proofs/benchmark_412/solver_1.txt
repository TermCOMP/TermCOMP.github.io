YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/asUVc.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 502 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 17 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 16 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 0 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/asUVc.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/asUVc.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sge %7 0
		br %8, %9, %19
	9:
		%10 = load %2
		%11 = load %3
		%12 = add i32 %10, %11
		store %12, %2
		%13 = load %3
		%14 = icmp sge %13 0
		br %14, %15, %18
	15:
		%16 = load %3
		%17 = sub i32 %16, 1
		store %17, %3
		br %18
	18:
		br %6
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_215(v177, v178, v179, v180, v181, v185, 1, -1, v216, 0, v187, v188, v189, 3, 4) -> f_217(v177, v178, v179, v180, v181, v216, 1, v185, -1, 0, v187, v188, v189, 3, 4) :|: 0 = 0
f_217(v177, v178, v179, v180, v181, v216, 1, v185, -1, 0, v187, v188, v189, 3, 4) -> f_219(v177, v178, v179, v180, v181, v216, 1, v185, -1, 0, v187, v188, v189, 3, 4) :|: 0 <= v216 && 1 <= v185
f_219(v177, v178, v179, v180, v181, v216, 1, v185, -1, 0, v187, v188, v189, 3, 4) -> f_222(v177, v178, v179, v180, v181, v216, 1, v185, -1, 0, v187, v188, v189, 3, 4) :|: 0 = 0
f_222(v177, v178, v179, v180, v181, v216, 1, v185, -1, 0, v187, v188, v189, 3, 4) -> f_224(v177, v178, v179, v180, v181, v216, 1, v185, -1, 0, v187, v188, v189, 3, 4) :|: TRUE
f_224(v177, v178, v179, v180, v181, v216, 1, v185, -1, 0, v187, v188, v189, 3, 4) -> f_226(v177, v178, v179, v180, v181, v216, 1, -1, 0, v187, v188, v189, 3, 4) :|: 0 = 0
f_226(v177, v178, v179, v180, v181, v216, 1, -1, 0, v187, v188, v189, 3, 4) -> f_227(v177, v178, v179, v180, v181, v216, 1, -1, 0, v187, v188, v189, 3, 4) :|: 0 = 0
f_227(v177, v178, v179, v180, v181, v216, 1, -1, 0, v187, v188, v189, 3, 4) -> f_228(v177, v178, v179, v180, v181, v216, 1, -1, v311, 0, v187, v188, v189, 3, 4) :|: 1 + v311 = v216 && 0 <= 1 + v311
f_228(v177, v178, v179, v180, v181, v216, 1, -1, v311, 0, v187, v188, v189, 3, 4) -> f_229(v177, v178, v179, v180, v181, v216, 1, -1, v311, 0, v187, v188, v189, 3, 4) :|: TRUE
f_229(v177, v178, v179, v180, v181, v216, 1, -1, v311, 0, v187, v188, v189, 3, 4) -> f_230(v177, v178, v179, v180, v181, v216, 1, -1, v311, 0, v187, v188, v189, 3, 4) :|: 0 = 0
f_230(v177, v178, v179, v180, v181, v216, 1, -1, v311, 0, v187, v188, v189, 3, 4) -> f_231(v177, v178, v179, v180, v181, v216, 1, -1, v311, 0, v187, v188, v189, 3, 4) :|: 0 = 0
f_231(v177, v178, v179, v180, v181, v216, 1, -1, v311, 0, v187, v188, v189, 3, 4) -> f_232(v177, v178, v179, v180, v181, v216, 1, -1, v311, 0, v187, v188, v189, 3, 4) :|: TRUE
f_232(v177, v178, v179, v180, v181, v216, 1, -1, v311, 0, v187, v188, v189, 3, 4) -> f_213(v177, v178, v179, v180, v181, v216, 1, -1, v311, 0, v187, v188, v189, 3, 4) :|: TRUE
f_213(v177, v178, v179, v180, v181, v185, 1, -1, v216, 0, v187, v188, v189, 3, 4) -> f_215(v177, v178, v179, v180, v181, v185, 1, -1, v216, 0, v187, v188, v189, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_215(v177:0, v178:0, v179:0, v180:0, v181:0, v185:0, 1, -1, 1 + v311:0, 0, v187:0, v188:0, v189:0, 3, 4) -> f_215(v177:0, v178:0, v179:0, v180:0, v181:0, 1 + v311:0, 1, -1, v311:0, 0, v187:0, v188:0, v189:0, 3, 4) :|: v185:0 > 0 && v311:0 > -2
Filtered unneeded arguments:
   f_215(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_215(x6, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_215(v185:0, sum~cons_1~v311:0) -> f_215(1 + v311:0, v311:0) :|: v185:0 > 0 && v311:0 > -2 && sum~cons_1~v311:0 = 1 + v311:0

----------------------------------------

(9)
Obligation:
Rules:
f_215(v185:0, sum~cons_1~v311:0) -> f_215(1 + v311:0, v311:0) :|: v185:0 > 0 && v311:0 > -2 && sum~cons_1~v311:0 = 1 + v311:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_215(v185:0:0, sum~cons_1~v311:0:0) -> f_215(1 + v311:0:0, v311:0:0) :|: v185:0:0 > 0 && v311:0:0 > -2 && sum~cons_1~v311:0:0 = 1 + v311:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_215(x, x1)] = x1

The following rules are decreasing:
f_215(v185:0:0, sum~cons_1~v311:0:0) -> f_215(1 + v311:0:0, v311:0:0) :|: v185:0:0 > 0 && v311:0:0 > -2 && sum~cons_1~v311:0:0 = 1 + v311:0:0
The following rules are bounded:
f_215(v185:0:0, sum~cons_1~v311:0:0) -> f_215(1 + v311:0:0, v311:0:0) :|: v185:0:0 > 0 && v311:0:0 > -2 && sum~cons_1~v311:0:0 = 1 + v311:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_199(v177, v178, v179, v180, v181, v182, 1, v184, v185, v186, v187, v188, v189, 0, 3, 4) -> f_200(v177, v178, v179, v180, v181, v185, 1, v182, v184, v186, v187, v188, v189, 0, 3, 4) :|: 0 = 0
f_200(v177, v178, v179, v180, v181, v185, 1, v182, v184, v186, v187, v188, v189, 0, 3, 4) -> f_201(v177, v178, v179, v180, v181, v185, 1, v182, v184, v186, v187, v188, v189, 0, 3, 4) :|: 0 = 0
f_201(v177, v178, v179, v180, v181, v185, 1, v182, v184, v186, v187, v188, v189, 0, 3, 4) -> f_202(v177, v178, v179, v180, v181, v185, 1, v182, v184, v186, v187, v188, v189, 0, 3, 4) :|: TRUE
f_202(v177, v178, v179, v180, v181, v185, 1, v182, v184, v186, v187, v188, v189, 0, 3, 4) -> f_203(v177, v178, v179, v180, v181, v185, 1, v184, v186, v187, v188, v189, 0, 3, 4) :|: 0 = 0
f_203(v177, v178, v179, v180, v181, v185, 1, v184, v186, v187, v188, v189, 0, 3, 4) -> f_204(v177, v178, v179, v180, v181, v185, 1, v186, v184, v187, v188, v189, 0, 3, 4) :|: 0 = 0
f_204(v177, v178, v179, v180, v181, v185, 1, v186, v184, v187, v188, v189, 0, 3, 4) -> f_205(v177, v178, v179, v180, v181, v185, 1, v186, v216, v184, v187, v188, v189, 0, 3, 4) :|: v216 = v185 + v186 && 0 <= 1 + v216
f_205(v177, v178, v179, v180, v181, v185, 1, v186, v216, v184, v187, v188, v189, 0, 3, 4) -> f_206(v177, v178, v179, v180, v181, v185, 1, v186, v216, v184, v187, v188, v189, 0, 3, 4) :|: TRUE
f_206(v177, v178, v179, v180, v181, v185, 1, v186, v216, v184, v187, v188, v189, 0, 3, 4) -> f_207(v177, v178, v179, v180, v181, v185, 1, v186, v216, v184, v187, v188, v189, 0, 3, 4) :|: 0 = 0
f_207(v177, v178, v179, v180, v181, v185, 1, v186, v216, v184, v187, v188, v189, 0, 3, 4) -> f_208(v177, v178, v179, v180, v181, v185, 1, v186, v216, v184, v187, v188, v189, 0, 3, 4) :|: 0 <= v186 && 1 <= v184 && 0 <= v216 && 1 <= v181
f_208(v177, v178, v179, v180, v181, v185, 1, v186, v216, v184, v187, v188, v189, 0, 3, 4) -> f_210(v177, v178, v179, v180, v181, v185, 1, v186, v216, v184, v187, v188, v189, 0, 3, 4) :|: 0 = 0
f_210(v177, v178, v179, v180, v181, v185, 1, v186, v216, v184, v187, v188, v189, 0, 3, 4) -> f_212(v177, v178, v179, v180, v181, v185, 1, v186, v216, v184, v187, v188, v189, 0, 3, 4) :|: TRUE
f_212(v177, v178, v179, v180, v181, v185, 1, v186, v216, v184, v187, v188, v189, 0, 3, 4) -> f_214(v177, v178, v179, v180, v181, v185, 1, v186, v216, v187, v188, v189, 0, 3, 4) :|: 0 = 0
f_214(v177, v178, v179, v180, v181, v185, 1, v186, v216, v187, v188, v189, 0, 3, 4) -> f_216(v177, v178, v179, v180, v181, v185, 1, v186, v216, v256, v187, v188, v189, 0, 3, 4) :|: 1 + v256 = v186 && 0 <= 1 + v256
f_216(v177, v178, v179, v180, v181, v185, 1, v186, v216, v256, v187, v188, v189, 0, 3, 4) -> f_218(v177, v178, v179, v180, v181, v185, 1, v186, v216, v256, v187, v188, v189, 0, 3, 4) :|: TRUE
f_218(v177, v178, v179, v180, v181, v185, 1, v186, v216, v256, v187, v188, v189, 0, 3, 4) -> f_221(v177, v178, v179, v180, v181, v185, 1, v186, v216, v256, v187, v188, v189, 0, 3, 4) :|: TRUE
f_221(v177, v178, v179, v180, v181, v185, 1, v186, v216, v256, v187, v188, v189, 0, 3, 4) -> f_198(v177, v178, v179, v180, v181, v185, 1, v186, v216, v256, v187, v188, v189, 0, 3, 4) :|: TRUE
f_198(v177, v178, v179, v180, v181, v182, 1, v184, v185, v186, v187, v188, v189, 0, 3, 4) -> f_199(v177, v178, v179, v180, v181, v182, 1, v184, v185, v186, v187, v188, v189, 0, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_199(v177:0, v178:0, v179:0, v180:0, v181:0, v182:0, 1, v184:0, v185:0, 1 + v256:0, v187:0, v188:0, v189:0, 0, 3, 4) -> f_199(v177:0, v178:0, v179:0, v180:0, v181:0, v185:0, 1, 1 + v256:0, v185:0 + (1 + v256:0), v256:0, v187:0, v188:0, v189:0, 0, 3, 4) :|: v185:0 + (1 + v256:0) > -1 && v184:0 > 0 && v256:0 > -2 && v181:0 > 0
Filtered unneeded arguments:
   f_199(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_199(x5, x8, x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_199(v181:0, v184:0, v185:0, sum~cons_1~v256:0) -> f_199(v181:0, 1 + v256:0, v185:0 + (1 + v256:0), v256:0) :|: v184:0 > 0 && v185:0 + (1 + v256:0) > -1 && v181:0 > 0 && v256:0 > -2 && sum~cons_1~v256:0 = 1 + v256:0

----------------------------------------

(16)
Obligation:
Rules:
f_199(v181:0, v184:0, v185:0, sum~cons_1~v256:0) -> f_199(v181:0, 1 + v256:0, v185:0 + (1 + v256:0), v256:0) :|: v184:0 > 0 && v185:0 + (1 + v256:0) > -1 && v181:0 > 0 && v256:0 > -2 && sum~cons_1~v256:0 = 1 + v256:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_199(v181:0:0, v184:0:0, v185:0:0, sum~cons_1~v256:0:0) -> f_199(v181:0:0, 1 + v256:0:0, v185:0:0 + (1 + v256:0:0), v256:0:0) :|: v181:0:0 > 0 && v256:0:0 > -2 && v185:0:0 + (1 + v256:0:0) > -1 && v184:0:0 > 0 && sum~cons_1~v256:0:0 = 1 + v256:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_199(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_199(v181:0:0, v184:0:0, v185:0:0, sum~cons_1~v256:0:0) -> f_199(v181:0:0, 1 + v256:0:0, v185:0:0 + (1 + v256:0:0), v256:0:0) :|: v181:0:0 > 0 && v256:0:0 > -2 && v185:0:0 + (1 + v256:0:0) > -1 && v184:0:0 > 0 && sum~cons_1~v256:0:0 = 1 + v256:0:0
The following rules are bounded:
f_199(v181:0:0, v184:0:0, v185:0:0, sum~cons_1~v256:0:0) -> f_199(v181:0:0, 1 + v256:0:0, v185:0:0 + (1 + v256:0:0), v256:0:0) :|: v181:0:0 > 0 && v256:0:0 > -2 && v185:0:0 + (1 + v256:0:0) > -1 && v184:0:0 > 0 && sum~cons_1~v256:0:0 = 1 + v256:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_147(v30, v31, v32, v33, v34, v37, 1, v35, 0, v39, v40, v41, 3, 4) -> f_150(v30, v31, v32, v33, v34, v37, 1, v35, 0, v39, v40, v41, 3, 4) :|: 0 <= v37 && 1 <= v35
f_150(v30, v31, v32, v33, v34, v37, 1, v35, 0, v39, v40, v41, 3, 4) -> f_154(v30, v31, v32, v33, v34, v37, 1, v35, 0, v39, v40, v41, 3, 4) :|: 0 = 0
f_154(v30, v31, v32, v33, v34, v37, 1, v35, 0, v39, v40, v41, 3, 4) -> f_158(v30, v31, v32, v33, v34, v37, 1, v35, 0, v39, v40, v41, 3, 4) :|: TRUE
f_158(v30, v31, v32, v33, v34, v37, 1, v35, 0, v39, v40, v41, 3, 4) -> f_162(v30, v31, v32, v33, v34, v37, 1, 0, v39, v40, v41, 3, 4) :|: 0 = 0
f_162(v30, v31, v32, v33, v34, v37, 1, 0, v39, v40, v41, 3, 4) -> f_166(v30, v31, v32, v33, v34, v37, 1, 0, v39, v40, v41, 3, 4) :|: 0 = 0
f_166(v30, v31, v32, v33, v34, v37, 1, 0, v39, v40, v41, 3, 4) -> f_169(v30, v31, v32, v33, v34, v37, 1, v105, 0, v39, v40, v41, 3, 4) :|: v105 = v37 + v34
f_169(v30, v31, v32, v33, v34, v37, 1, v105, 0, v39, v40, v41, 3, 4) -> f_171(v30, v31, v32, v33, v34, v37, 1, v105, 0, v39, v40, v41, 3, 4) :|: TRUE
f_171(v30, v31, v32, v33, v34, v37, 1, v105, 0, v39, v40, v41, 3, 4) -> f_173(v30, v31, v32, v33, v34, v37, 1, v105, 0, v39, v40, v41, 3, 4) :|: 0 = 0
f_173(v30, v31, v32, v33, v34, v37, 1, v105, 0, v39, v40, v41, 3, 4) -> f_175(v30, v31, v32, v33, v34, v37, 1, v105, 0, v39, v40, v41, 3, 4) :|: 0 = 0
f_175(v30, v31, v32, v33, v34, v37, 1, v105, 0, v39, v40, v41, 3, 4) -> f_177(v30, v31, v32, v33, v34, v37, 1, v105, 0, v39, v40, v41, 3, 4) :|: TRUE
f_177(v30, v31, v32, v33, v34, v37, 1, v105, 0, v39, v40, v41, 3, 4) -> f_179(v30, v31, v32, v33, v34, v37, 1, v105, 0, v39, v40, v41, 3, 4) :|: TRUE
f_179(v30, v31, v32, v33, v34, v37, 1, v105, 0, v39, v40, v41, 3, 4) -> f_144(v30, v31, v32, v33, v34, v37, 1, v105, 0, v39, v40, v41, 3, 4) :|: 1 <= v30 && 1 <= v31 && 1 <= v32 && 0 <= v33 && 1 + v34 <= 0 && 0 <= v37 && 4 <= v39 && 4 <= v40 && 4 <= v41 && v30 <= v39 && v31 <= v40 && v32 <= v41
f_144(v30, v31, v32, v33, v34, v35, 1, v37, 0, v39, v40, v41, 3, 4) -> f_147(v30, v31, v32, v33, v34, v37, 1, v35, 0, v39, v40, v41, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_147(v30:0, v31:0, v32:0, v33:0, v34:0, v37:0, 1, v35:0, 0, v39:0, v40:0, v41:0, 3, 4) -> f_147(v30:0, v31:0, v32:0, v33:0, v34:0, v37:0 + v34:0, 1, v37:0, 0, v39:0, v40:0, v41:0, 3, 4) :|: v31:0 > 0 && v30:0 > 0 && v35:0 > 0 && v37:0 > -1 && v32:0 > 0 && v33:0 > -1 && v34:0 < 0 && v39:0 > 3 && v40:0 > 3 && v41:0 > 3 && v39:0 >= v30:0 && v41:0 >= v32:0 && v40:0 >= v31:0
Filtered unneeded arguments:
   f_147(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_147(x1, x2, x3, x4, x5, x6, x8, x10, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_147(v30:0, v31:0, v32:0, v33:0, v34:0, v37:0, v35:0, v39:0, v40:0, v41:0) -> f_147(v30:0, v31:0, v32:0, v33:0, v34:0, v37:0 + v34:0, v37:0, v39:0, v40:0, v41:0) :|: v30:0 > 0 && v31:0 > 0 && v35:0 > 0 && v37:0 > -1 && v32:0 > 0 && v33:0 > -1 && v34:0 < 0 && v39:0 > 3 && v40:0 > 3 && v41:0 > 3 && v39:0 >= v30:0 && v40:0 >= v31:0 && v41:0 >= v32:0

----------------------------------------

(23)
Obligation:
Rules:
f_147(v30:0, v31:0, v32:0, v33:0, v34:0, v37:0, v35:0, v39:0, v40:0, v41:0) -> f_147(v30:0, v31:0, v32:0, v33:0, v34:0, v37:0 + v34:0, v37:0, v39:0, v40:0, v41:0) :|: v30:0 > 0 && v31:0 > 0 && v35:0 > 0 && v37:0 > -1 && v32:0 > 0 && v33:0 > -1 && v34:0 < 0 && v39:0 > 3 && v40:0 > 3 && v41:0 > 3 && v39:0 >= v30:0 && v40:0 >= v31:0 && v41:0 >= v32:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_147(v30:0:0, v31:0:0, v32:0:0, v33:0:0, v34:0:0, v37:0:0, v35:0:0, v39:0:0, v40:0:0, v41:0:0) -> f_147(v30:0:0, v31:0:0, v32:0:0, v33:0:0, v34:0:0, v37:0:0 + v34:0:0, v37:0:0, v39:0:0, v40:0:0, v41:0:0) :|: v40:0:0 >= v31:0:0 && v41:0:0 >= v32:0:0 && v39:0:0 >= v30:0:0 && v41:0:0 > 3 && v40:0:0 > 3 && v39:0:0 > 3 && v34:0:0 < 0 && v33:0:0 > -1 && v32:0:0 > 0 && v37:0:0 > -1 && v35:0:0 > 0 && v31:0:0 > 0 && v30:0:0 > 0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_147(x, x1, x2, x3, x4, x5, x6, x7, x8, x9)] = x5

The following rules are decreasing:
f_147(v30:0:0, v31:0:0, v32:0:0, v33:0:0, v34:0:0, v37:0:0, v35:0:0, v39:0:0, v40:0:0, v41:0:0) -> f_147(v30:0:0, v31:0:0, v32:0:0, v33:0:0, v34:0:0, v37:0:0 + v34:0:0, v37:0:0, v39:0:0, v40:0:0, v41:0:0) :|: v40:0:0 >= v31:0:0 && v41:0:0 >= v32:0:0 && v39:0:0 >= v30:0:0 && v41:0:0 > 3 && v40:0:0 > 3 && v39:0:0 > 3 && v34:0:0 < 0 && v33:0:0 > -1 && v32:0:0 > 0 && v37:0:0 > -1 && v35:0:0 > 0 && v31:0:0 > 0 && v30:0:0 > 0
The following rules are bounded:
f_147(v30:0:0, v31:0:0, v32:0:0, v33:0:0, v34:0:0, v37:0:0, v35:0:0, v39:0:0, v40:0:0, v41:0:0) -> f_147(v30:0:0, v31:0:0, v32:0:0, v33:0:0, v34:0:0, v37:0:0 + v34:0:0, v37:0:0, v39:0:0, v40:0:0, v41:0:0) :|: v40:0:0 >= v31:0:0 && v41:0:0 >= v32:0:0 && v39:0:0 >= v30:0:0 && v41:0:0 > 3 && v40:0:0 > 3 && v39:0:0 > 3 && v34:0:0 < 0 && v33:0:0 > -1 && v32:0:0 > 0 && v37:0:0 > -1 && v35:0:0 > 0 && v31:0:0 > 0 && v30:0:0 > 0

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
