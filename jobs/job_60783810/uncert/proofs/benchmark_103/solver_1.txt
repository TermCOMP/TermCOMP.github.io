YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/xk3x9.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 30 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 6655 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 21 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 13 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 10 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 16 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/xk3x9.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/xk3x9.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cstrlcpy" linkageType: EXTERNALLY_VISIBLE returnParam: i64 parameters: (0 *i8, 1 *i8, 2 i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		%6 = alloca i64, align 8
		%7 = alloca *i8, align 8
		%8 = alloca *i8, align 8
		%9 = alloca i64, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %7)
		%10 = load %4
		store %10, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %8)
		%11 = load %5
		store %11, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %9)
		%12 = load %6
		store %12, %9
		%13 = load %9
		%14 = icmp ne %13 0
		br %14, %15, %31
	15:
		br %16
	16:
		%17 = load %9
		%18 = add i64 %17, -1
		store %18, %9
		%19 = icmp ne %18 0
		br %19, %20, %30
	20:
		%21 = load %8
		%22 = getelementptr %21, 1
		store %22, %8
		%23 = load %21
		%24 = load %7
		%25 = getelementptr %24, 1
		store %25, %7
		store %23, %24
		%26 = sext i8 %23 to i32
		%27 = icmp eq %26 0
		br %27, %28, %29
	28:
		br %30
	29:
		br %16
	30:
		br %31
	31:
		%32 = load %9
		%33 = icmp eq %32 0
		br %33, %34, %47
	34:
		%35 = load %6
		%36 = icmp ne %35 0
		br %36, %37, %39
	37:
		%38 = load %7
		store 0, %38
		br %39
	39:
		br %40
	40:
		%41 = load %8
		%42 = getelementptr %41, 1
		store %42, %8
		%43 = load %41
		%44 = icmp ne %43 0
		br %44, %45, %46
	45:
		br %40
	46:
		br %47
	47:
		%48 = load %8
		%49 = load %5
		%50 = ptrtoint *i8 %48 to i64
		%51 = ptrtoint *i8 %49 to i64
		%52 = sub i64 %50, %51
		%53 = sub i64 %52, 1
		ret %53

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 78
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = load %2
		%9 = icmp slt %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %11
	11:
		%12 = load %3
		%13 = icmp slt %12 1
		br %13, %14, %15
	14:
		store 1, %3
		br %15
	15:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%16 = load %3
		%17 = sext i32 %16 to i64
		%18 = mul i64 %17, 1
		%19 = alloca i8, numElementsLit: %18, align 16
		store %19, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%20 = load %2
		%21 = sext i32 %20 to i64
		%22 = mul i64 %21, 1
		%23 = alloca i8, numElementsLit: %22, align 16
		store %23, %5
		%24 = load %4
		%25 = load %3
		%26 = sub i32 %25, 1
		%27 = sext i32 %26 to i64
		%28 = getelementptr %24, %27
		store 0, %28
		%29 = load %5
		%30 = load %2
		%31 = sub i32 %30, 1
		%32 = sext i32 %31 to i64
		%33 = getelementptr %29, %32
		store 0, %33
		%34 = load %4
		%35 = load %5
		%36 = load %3
		%37 = sext i32 %36 to i64
		%38 = call i64 @cstrlcpy(*i8 %34, *i8 %35, i64 %37)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_1134(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4206, v4207, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4232, v4229, v4233, v4230, v4234, v4205, v4213, v4214, v4216, 3, 7, 2, 4, 8) -> f_1137(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4206, v4289, v4207, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4232, v4229, v4233, v4230, v4234, v4205, v4213, v4214, v4216, 3, 7, 2, 4, 8) :|: v4289 = 1 + v4206 && 4 <= v4289
f_1137(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4206, v4289, v4207, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4232, v4229, v4233, v4230, v4234, v4205, v4213, v4214, v4216, 3, 7, 2, 4, 8) -> f_1140(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4206, v4289, v4207, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4232, v4229, v4233, v4230, v4234, v4205, v4213, v4214, v4216, 3, 7, 2, 4, 8) :|: TRUE
f_1140(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4206, v4289, v4207, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4232, v4229, v4233, v4230, v4234, v4205, v4213, v4214, v4216, 3, 7, 2, 4, 8) -> f_1143(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4206, v4289, v4293, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4232, v4229, v4233, v4230, v4234, v4205, v4207, v4213, v4214, v4216, 3, 7, 2, 4, 8) :|: TRUE
f_1143(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4206, v4289, v4293, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4232, v4229, v4233, v4230, v4234, v4205, v4207, v4213, v4214, v4216, 3, 7, 2, 4, 8) -> f_1146(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4206, v4289, v4293, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4232, v4229, v4233, v4230, v4234, v4205, v4207, v4213, v4214, v4216, 3, 7, 2, 4, 8) :|: v4293 != 0 && v4206 < v4217 && 4 <= v4217
f_1146(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4206, v4289, v4293, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4232, v4229, v4233, v4230, v4234, v4205, v4207, v4213, v4214, v4216, 3, 7, 2, 4, 8) -> f_1149(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4206, v4289, v4293, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4232, v4229, v4233, v4230, v4234, v4205, v4207, v4213, v4214, v4216, 3, 7, 2, 4, 8) :|: 0 = 0
f_1149(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4206, v4289, v4293, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4232, v4229, v4233, v4230, v4234, v4205, v4207, v4213, v4214, v4216, 3, 7, 2, 4, 8) -> f_1152(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4206, v4289, v4293, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4232, v4229, v4233, v4230, v4234, v4205, v4207, v4213, v4214, v4216, 3, 7, 2, 4, 8) :|: TRUE
f_1152(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4206, v4289, v4293, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4232, v4229, v4233, v4230, v4234, v4205, v4207, v4213, v4214, v4216, 3, 7, 2, 4, 8) -> f_1153(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4206, v4289, v4293, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4432, v4434, v4232, v4213, v4430, v4436, v4431, v4437, v4415, v4417, 3, 7, 2, 4, 8) :|: TRUE
f_1153(v4390, v4391, v4392, v4393, v4394, v4395, v4396, v4397, v4398, 1, 0, v4401, v4402, v4403, v4404, v4405, v4406, v4407, v4408, v4409, v4419, v4410, v4420, v4411, v4421, v4412, v4422, v4413, v4423, v4416, v4418, v4424, v4425, v4426, v4427, v4428, v4429, v4433, v4432, v4434, v4435, v4414, v4430, v4436, v4431, v4437, v4415, v4417, 3, 7, 2, 4, 8) -> f_1156(v4390, v4391, v4392, v4393, v4394, v4395, v4396, v4397, v4398, 1, 0, v4401, v4402, v4403, v4404, v4405, v4406, v4407, v4408, v4409, v4419, v4410, v4420, v4411, v4421, v4412, v4422, v4413, v4423, v4416, v4418, v4424, v4425, v4426, v4427, v4428, v4429, v4433, v4432, v4434, v4435, v4414, v4430, v4436, v4431, v4437, v4415, v4417, 3, 7, 2, 4, 8) :|: TRUE
f_1156(v4390, v4391, v4392, v4393, v4394, v4395, v4396, v4397, v4398, 1, 0, v4401, v4402, v4403, v4404, v4405, v4406, v4407, v4408, v4409, v4419, v4410, v4420, v4411, v4421, v4412, v4422, v4413, v4423, v4416, v4418, v4424, v4425, v4426, v4427, v4428, v4429, v4433, v4432, v4434, v4435, v4414, v4430, v4436, v4431, v4437, v4415, v4417, 3, 7, 2, 4, 8) -> f_1131(v4390, v4391, v4392, v4393, v4394, v4395, v4396, v4397, v4398, 1, 0, v4401, v4402, v4403, v4404, v4405, v4406, v4407, v4408, v4409, v4419, v4410, v4420, v4411, v4421, v4412, v4422, v4413, v4423, v4416, v4418, v4424, v4425, v4426, v4427, v4428, v4429, v4433, v4435, v4229, v4233, v4230, v4234, v4414, v4214, v4216, 3, 7, 2, 4, 8) :|: TRUE
f_1131(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4205, v4206, v4207, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4232, v4229, v4233, v4230, v4234, v4213, v4214, v4216, 3, 7, 2, 4, 8) -> f_1134(v4189, v4190, v4191, v4192, v4193, v4194, v4195, v4196, v4197, 1, 0, v4200, v4201, v4202, v4203, v4204, v4206, v4207, v4208, v4218, v4209, v4219, v4210, v4220, v4211, v4221, v4212, v4222, v4215, v4217, v4223, v4224, v4225, v4226, v4227, v4228, v4231, v4232, v4229, v4233, v4230, v4234, v4205, v4213, v4214, v4216, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_1134(v4189:0, v4190:0, v4191:0, v4192:0, v4193:0, v4194:0, v4195:0, v4196:0, v4197:0, 1, 0, v4200:0, v4201:0, v4202:0, v4203:0, v4204:0, v4206:0, v4207:0, v4208:0, v4218:0, v4209:0, v4219:0, v4210:0, v4220:0, v4211:0, v4221:0, v4212:0, v4222:0, v4215:0, v4217:0, v4223:0, v4224:0, v4225:0, v4226:0, v4227:0, v4228:0, v4231:0, v4232:0, v4229:0, v4233:0, v4230:0, v4234:0, v4205:0, v4213:0, v4214:0, v4216:0, 3, 7, 2, 4, 8) -> f_1134(v4189:0, v4190:0, v4191:0, v4192:0, v4193:0, v4194:0, v4195:0, v4196:0, v4197:0, 1, 0, v4200:0, v4201:0, v4202:0, v4203:0, v4204:0, 1 + v4206:0, v4293:0, v4208:0, v4218:0, v4209:0, v4219:0, v4210:0, v4220:0, v4211:0, v4221:0, v4212:0, v4222:0, v4215:0, v4217:0, v4223:0, v4224:0, v4225:0, v4226:0, v4227:0, v4228:0, v4231:0, v4232:0, v4229:1, v4233:1, v4230:1, v4234:1, v4206:0, v4213:0, v4214:1, v4216:1, 3, 7, 2, 4, 8) :|: v4206:0 > 2 && v4217:0 > v4206:0 && v4217:0 > 3 && v4293:0 < 0
f_1134(v4189:0, v4190:0, v4191:0, v4192:0, v4193:0, v4194:0, v4195:0, v4196:0, v4197:0, 1, 0, v4200:0, v4201:0, v4202:0, v4203:0, v4204:0, v4206:0, v4207:0, v4208:0, v4218:0, v4209:0, v4219:0, v4210:0, v4220:0, v4211:0, v4221:0, v4212:0, v4222:0, v4215:0, v4217:0, v4223:0, v4224:0, v4225:0, v4226:0, v4227:0, v4228:0, v4231:0, v4232:0, v4229:0, v4233:0, v4230:0, v4234:0, v4205:0, v4213:0, v4214:0, v4216:0, 3, 7, 2, 4, 8) -> f_1134(v4189:0, v4190:0, v4191:0, v4192:0, v4193:0, v4194:0, v4195:0, v4196:0, v4197:0, 1, 0, v4200:0, v4201:0, v4202:0, v4203:0, v4204:0, 1 + v4206:0, v4293:0, v4208:0, v4218:0, v4209:0, v4219:0, v4210:0, v4220:0, v4211:0, v4221:0, v4212:0, v4222:0, v4215:0, v4217:0, v4223:0, v4224:0, v4225:0, v4226:0, v4227:0, v4228:0, v4231:0, v4232:0, v4229:1, v4233:1, v4230:1, v4234:1, v4206:0, v4213:0, v4214:1, v4216:1, 3, 7, 2, 4, 8) :|: v4206:0 > 2 && v4217:0 > v4206:0 && v4217:0 > 3 && v4293:0 > 0
Filtered unneeded arguments:
   f_1134(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51) -> f_1134(x17, x30)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1134(v4206:0, v4217:0) -> f_1134(1 + v4206:0, v4217:0) :|: v4217:0 > v4206:0 && v4217:0 > 3 && v4206:0 > 2

----------------------------------------

(9)
Obligation:
Rules:
f_1134(v4206:0, v4217:0) -> f_1134(1 + v4206:0, v4217:0) :|: v4217:0 > v4206:0 && v4217:0 > 3 && v4206:0 > 2

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_1134(v4206:0:0, v4217:0:0) -> f_1134(1 + v4206:0:0, v4217:0:0) :|: v4217:0:0 > v4206:0:0 && v4217:0:0 > 3 && v4206:0:0 > 2

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1134(x, x1)] = -x + x1

The following rules are decreasing:
f_1134(v4206:0:0, v4217:0:0) -> f_1134(1 + v4206:0:0, v4217:0:0) :|: v4217:0:0 > v4206:0:0 && v4217:0:0 > 3 && v4206:0:0 > 2
The following rules are bounded:
f_1134(v4206:0:0, v4217:0:0) -> f_1134(1 + v4206:0:0, v4217:0:0) :|: v4217:0:0 > v4206:0:0 && v4217:0:0 > 3 && v4206:0:0 > 2

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_1077(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3526, v3527, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 2, 4, 8) -> f_1078(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3526, v3527, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 2, 4, 8) :|: 1 + v3557 = v3525 && 0 <= v3557
f_1078(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3526, v3527, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 2, 4, 8) -> f_1079(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3526, v3527, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 2, 4, 8) :|: TRUE
f_1079(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3526, v3527, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 2, 4, 8) -> f_1080(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3526, v3527, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: 0 < v3557 && 2 <= v3525 && 3 <= v3538 && 4 <= v3516 && 4 <= v3539
f_1080(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3526, v3527, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1082(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3526, v3527, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: 0 = 0
f_1082(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3526, v3527, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1084(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3526, v3527, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: TRUE
f_1084(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3526, v3527, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1086(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: 0 = 0
f_1086(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1088(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: v3659 = 1 + v3527 && 4 <= v3659
f_1088(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1090(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: TRUE
f_1090(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1092(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3529, v3530, v3528, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: TRUE
f_1092(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3529, v3530, v3528, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1094(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3528, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: 0 = 0
f_1094(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3528, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1096(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, v3528, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: v3671 = 1 + v3530 && 4 <= v3671
f_1096(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, v3528, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1098(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, v3528, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: TRUE
f_1098(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, v3528, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1100(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, v3528, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: TRUE
f_1100(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, v3528, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1102(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3528, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: 0 = 0
f_1102(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3528, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1105(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3528, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: v3661 != 0 && v3527 < v3541 && 4 <= v3541
f_1105(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3528, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1108(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3528, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: 0 = 0
f_1108(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3528, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1111(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3528, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: TRUE
f_1111(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3528, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1114(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3528, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) :|: TRUE
f_1114(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3526, v3528, v3529, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 4, 2, 8) -> f_1076(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3557, v3527, v3659, v3661, v3530, v3671, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 2, 4, 8) :|: TRUE
f_1076(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3524, v3525, v3526, v3527, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 2, 4, 8) -> f_1077(v3514, v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522, 1, v3525, v3526, v3527, v3528, v3529, v3530, 0, v3532, v3542, v3533, v3543, v3534, v3544, v3535, v3545, v3536, v3546, v3539, v3541, v3547, v3548, v3549, v3550, v3551, v3552, v3555, v3537, v3553, v3556, v3554, v3538, v3540, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_1077(v3514:0, v3515:0, v3516:0, v3517:0, v3518:0, v3519:0, v3520:0, v3521:0, v3522:0, 1, 1 + v3557:0, v3526:0, v3527:0, v3528:0, v3529:0, v3530:0, 0, v3532:0, v3542:0, v3533:0, v3543:0, v3534:0, v3544:0, v3535:0, v3545:0, v3536:0, v3546:0, v3539:0, v3541:0, v3547:0, v3548:0, v3549:0, v3550:0, v3551:0, v3552:0, v3555:0, v3537:0, v3553:0, v3556:0, v3554:0, v3538:0, v3540:0, 3, 7, 2, 4, 8) -> f_1077(v3514:0, v3515:0, v3516:0, v3517:0, v3518:0, v3519:0, v3520:0, v3521:0, v3522:0, 1, v3557:0, v3527:0, 1 + v3527:0, v3661:0, v3530:0, 1 + v3530:0, 0, v3532:0, v3542:0, v3533:0, v3543:0, v3534:0, v3544:0, v3535:0, v3545:0, v3536:0, v3546:0, v3539:0, v3541:0, v3547:0, v3548:0, v3549:0, v3550:0, v3551:0, v3552:0, v3555:0, v3537:0, v3553:0, v3556:0, v3554:0, v3538:0, v3540:0, 3, 7, 2, 4, 8) :|: v3557:0 > 0 && v3538:0 > 2 && v3516:0 > 3 && v3539:0 > 3 && v3527:0 > 2 && v3530:0 > 2 && v3541:0 > v3527:0 && v3541:0 > 3 && v3661:0 < 0
f_1077(v3514:0, v3515:0, v3516:0, v3517:0, v3518:0, v3519:0, v3520:0, v3521:0, v3522:0, 1, 1 + v3557:0, v3526:0, v3527:0, v3528:0, v3529:0, v3530:0, 0, v3532:0, v3542:0, v3533:0, v3543:0, v3534:0, v3544:0, v3535:0, v3545:0, v3536:0, v3546:0, v3539:0, v3541:0, v3547:0, v3548:0, v3549:0, v3550:0, v3551:0, v3552:0, v3555:0, v3537:0, v3553:0, v3556:0, v3554:0, v3538:0, v3540:0, 3, 7, 2, 4, 8) -> f_1077(v3514:0, v3515:0, v3516:0, v3517:0, v3518:0, v3519:0, v3520:0, v3521:0, v3522:0, 1, v3557:0, v3527:0, 1 + v3527:0, v3661:0, v3530:0, 1 + v3530:0, 0, v3532:0, v3542:0, v3533:0, v3543:0, v3534:0, v3544:0, v3535:0, v3545:0, v3536:0, v3546:0, v3539:0, v3541:0, v3547:0, v3548:0, v3549:0, v3550:0, v3551:0, v3552:0, v3555:0, v3537:0, v3553:0, v3556:0, v3554:0, v3538:0, v3540:0, 3, 7, 2, 4, 8) :|: v3557:0 > 0 && v3538:0 > 2 && v3516:0 > 3 && v3539:0 > 3 && v3527:0 > 2 && v3530:0 > 2 && v3541:0 > v3527:0 && v3541:0 > 3 && v3661:0 > 0
Filtered unneeded arguments:
   f_1077(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47) -> f_1077(x3, x11, x13, x16, x28, x29, x41)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1077(v3516:0, sum~cons_1~v3557:0, v3527:0, v3530:0, v3539:0, v3541:0, v3538:0) -> f_1077(v3516:0, v3557:0, 1 + v3527:0, 1 + v3530:0, v3539:0, v3541:0, v3538:0) :|: v3538:0 > 2 && v3557:0 > 0 && v3516:0 > 3 && v3539:0 > 3 && v3527:0 > 2 && v3530:0 > 2 && v3541:0 > 3 && v3541:0 > v3527:0 && sum~cons_1~v3557:0 = 1 + v3557:0

----------------------------------------

(16)
Obligation:
Rules:
f_1077(v3516:0, sum~cons_1~v3557:0, v3527:0, v3530:0, v3539:0, v3541:0, v3538:0) -> f_1077(v3516:0, v3557:0, 1 + v3527:0, 1 + v3530:0, v3539:0, v3541:0, v3538:0) :|: v3538:0 > 2 && v3557:0 > 0 && v3516:0 > 3 && v3539:0 > 3 && v3527:0 > 2 && v3530:0 > 2 && v3541:0 > 3 && v3541:0 > v3527:0 && sum~cons_1~v3557:0 = 1 + v3557:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_1077(v3516:0:0, sum~cons_1~v3557:0:0, v3527:0:0, v3530:0:0, v3539:0:0, v3541:0:0, v3538:0:0) -> f_1077(v3516:0:0, v3557:0:0, 1 + v3527:0:0, 1 + v3530:0:0, v3539:0:0, v3541:0:0, v3538:0:0) :|: v3541:0:0 > 3 && v3541:0:0 > v3527:0:0 && v3530:0:0 > 2 && v3527:0:0 > 2 && v3539:0:0 > 3 && v3516:0:0 > 3 && v3557:0:0 > 0 && v3538:0:0 > 2 && sum~cons_1~v3557:0:0 = 1 + v3557:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1077(x, x1, x2, x3, x4, x5, x6)] = -2 + x1

The following rules are decreasing:
f_1077(v3516:0:0, sum~cons_1~v3557:0:0, v3527:0:0, v3530:0:0, v3539:0:0, v3541:0:0, v3538:0:0) -> f_1077(v3516:0:0, v3557:0:0, 1 + v3527:0:0, 1 + v3530:0:0, v3539:0:0, v3541:0:0, v3538:0:0) :|: v3541:0:0 > 3 && v3541:0:0 > v3527:0:0 && v3530:0:0 > 2 && v3527:0:0 > 2 && v3539:0:0 > 3 && v3516:0:0 > 3 && v3557:0:0 > 0 && v3538:0:0 > 2 && sum~cons_1~v3557:0:0 = 1 + v3557:0:0
The following rules are bounded:
f_1077(v3516:0:0, sum~cons_1~v3557:0:0, v3527:0:0, v3530:0:0, v3539:0:0, v3541:0:0, v3538:0:0) -> f_1077(v3516:0:0, v3557:0:0, 1 + v3527:0:0, 1 + v3530:0:0, v3539:0:0, v3541:0:0, v3538:0:0) :|: v3541:0:0 > 3 && v3541:0:0 > v3527:0:0 && v3530:0:0 > 2 && v3527:0:0 > 2 && v3539:0:0 > 3 && v3516:0:0 > 3 && v3557:0:0 > 0 && v3538:0:0 > 2 && sum~cons_1~v3557:0:0 = 1 + v3557:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_922(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1662, v1663, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1661, v1685, v1687, v1669, v1670, v1671, v1672, 3, 7, 2, 4, 8) -> f_928(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1662, v1738, v1663, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1661, v1685, v1687, v1669, v1670, v1671, v1672, 3, 7, 2, 4, 8) :|: v1738 = 1 + v1662 && 4 <= v1738
f_928(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1662, v1738, v1663, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1661, v1685, v1687, v1669, v1670, v1671, v1672, 3, 7, 2, 4, 8) -> f_935(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1662, v1738, v1663, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1661, v1685, v1687, v1669, v1670, v1671, v1672, 3, 7, 2, 4, 8) :|: TRUE
f_935(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1662, v1738, v1663, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1661, v1685, v1687, v1669, v1670, v1671, v1672, 3, 7, 2, 4, 8) -> f_941(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1662, v1738, v1864, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1661, v1663, v1685, v1687, v1669, v1670, v1671, v1672, 3, 7, 2, 4, 8) :|: TRUE
f_941(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1662, v1738, v1864, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1661, v1663, v1685, v1687, v1669, v1670, v1671, v1672, 3, 7, 2, 4, 8) -> f_947(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1662, v1738, v1864, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1661, v1663, v1685, v1687, v1669, v1670, v1671, v1672, 3, 7, 2, 4, 8) :|: v1864 != 0 && v1662 < v1673 && 4 <= v1673
f_947(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1662, v1738, v1864, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1661, v1663, v1685, v1687, v1669, v1670, v1671, v1672, 3, 7, 2, 4, 8) -> f_954(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1662, v1738, v1864, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1661, v1663, v1685, v1687, v1669, v1670, v1671, v1672, 3, 7, 2, 4, 8) :|: 0 = 0
f_954(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1662, v1738, v1864, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1661, v1663, v1685, v1687, v1669, v1670, v1671, v1672, 3, 7, 2, 4, 8) -> f_961(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1662, v1738, v1864, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1661, v1663, v1685, v1687, v1669, v1670, v1671, v1672, 3, 7, 2, 4, 8) :|: TRUE
f_961(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1662, v1738, v1864, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1661, v1663, v1685, v1687, v1669, v1670, v1671, v1672, 3, 7, 2, 4, 8) -> f_962(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1662, v1738, v1864, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1669, v1993, v1995, v1978, v1979, v1980, 3, 7, 2, 4, 8) :|: TRUE
f_962(v1959, v1960, 1, v1962, v1963, v1964, v1965, v1966, v1967, 0, v1969, v1970, v1971, v1972, v1982, v1973, v1983, v1974, v1984, v1975, v1985, v1976, v1986, v1981, v1987, v1988, v1989, v1990, v1991, v1992, v1994, v1977, v1993, v1995, v1978, v1979, v1980, 3, 7, 2, 4, 8) -> f_970(v1959, v1960, 1, v1962, v1963, v1964, v1965, v1966, v1967, 0, v1969, v1970, v1971, v1972, v1982, v1973, v1983, v1974, v1984, v1975, v1985, v1976, v1986, v1981, v1987, v1988, v1989, v1990, v1991, v1992, v1994, v1977, v1993, v1995, v1978, v1979, v1980, 3, 7, 2, 4, 8) :|: TRUE
f_970(v1959, v1960, 1, v1962, v1963, v1964, v1965, v1966, v1967, 0, v1969, v1970, v1971, v1972, v1982, v1973, v1983, v1974, v1984, v1975, v1985, v1976, v1986, v1981, v1987, v1988, v1989, v1990, v1991, v1992, v1994, v1977, v1993, v1995, v1978, v1979, v1980, 3, 7, 2, 4, 8) -> f_916(v1959, v1960, 1, v1962, v1963, v1964, v1965, v1966, v1967, 0, v1969, v1970, v1971, v1972, v1982, v1973, v1983, v1974, v1984, v1975, v1985, v1976, v1986, v1981, v1987, v1988, v1989, v1990, v1991, v1992, v1994, v1685, v1687, v1977, v1670, v1671, v1672, 3, 7, 2, 4, 8) :|: TRUE
f_916(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1661, v1662, v1663, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1685, v1687, v1669, v1670, v1671, v1672, 3, 7, 2, 4, 8) -> f_922(v1651, v1652, 1, v1654, v1655, v1656, v1657, v1658, v1659, 0, v1662, v1663, v1664, v1674, v1665, v1675, v1666, v1676, v1667, v1677, v1668, v1678, v1673, v1679, v1680, v1681, v1682, v1683, v1684, v1686, v1661, v1685, v1687, v1669, v1670, v1671, v1672, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_922(v1651:0, v1652:0, 1, v1654:0, v1655:0, v1656:0, v1657:0, v1658:0, v1659:0, 0, v1662:0, v1663:0, v1664:0, v1674:0, v1665:0, v1675:0, v1666:0, v1676:0, v1667:0, v1677:0, v1668:0, v1678:0, v1673:0, v1679:0, v1680:0, v1681:0, v1682:0, v1683:0, v1684:0, v1686:0, v1661:0, v1685:0, v1687:0, v1669:0, v1670:0, v1671:0, v1672:0, 3, 7, 2, 4, 8) -> f_922(v1651:0, v1652:0, 1, v1654:0, v1655:0, v1656:0, v1657:0, v1658:0, v1659:0, 0, 1 + v1662:0, v1864:0, v1664:0, v1674:0, v1665:0, v1675:0, v1666:0, v1676:0, v1667:0, v1677:0, v1668:0, v1678:0, v1673:0, v1679:0, v1680:0, v1681:0, v1682:0, v1683:0, v1684:0, v1686:0, v1662:0, v1685:1, v1687:1, v1669:0, v1670:1, v1671:1, v1672:1, 3, 7, 2, 4, 8) :|: v1662:0 > 2 && v1673:0 > v1662:0 && v1673:0 > 3 && v1864:0 < 0
f_922(v1651:0, v1652:0, 1, v1654:0, v1655:0, v1656:0, v1657:0, v1658:0, v1659:0, 0, v1662:0, v1663:0, v1664:0, v1674:0, v1665:0, v1675:0, v1666:0, v1676:0, v1667:0, v1677:0, v1668:0, v1678:0, v1673:0, v1679:0, v1680:0, v1681:0, v1682:0, v1683:0, v1684:0, v1686:0, v1661:0, v1685:0, v1687:0, v1669:0, v1670:0, v1671:0, v1672:0, 3, 7, 2, 4, 8) -> f_922(v1651:0, v1652:0, 1, v1654:0, v1655:0, v1656:0, v1657:0, v1658:0, v1659:0, 0, 1 + v1662:0, v1864:0, v1664:0, v1674:0, v1665:0, v1675:0, v1666:0, v1676:0, v1667:0, v1677:0, v1668:0, v1678:0, v1673:0, v1679:0, v1680:0, v1681:0, v1682:0, v1683:0, v1684:0, v1686:0, v1662:0, v1685:1, v1687:1, v1669:0, v1670:1, v1671:1, v1672:1, 3, 7, 2, 4, 8) :|: v1662:0 > 2 && v1673:0 > v1662:0 && v1673:0 > 3 && v1864:0 > 0
Filtered unneeded arguments:
   f_922(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42) -> f_922(x11, x23)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_922(v1662:0, v1673:0) -> f_922(1 + v1662:0, v1673:0) :|: v1673:0 > v1662:0 && v1673:0 > 3 && v1662:0 > 2

----------------------------------------

(23)
Obligation:
Rules:
f_922(v1662:0, v1673:0) -> f_922(1 + v1662:0, v1673:0) :|: v1673:0 > v1662:0 && v1673:0 > 3 && v1662:0 > 2

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_922(v1662:0:0, v1673:0:0) -> f_922(1 + v1662:0:0, v1673:0:0) :|: v1673:0:0 > v1662:0:0 && v1673:0:0 > 3 && v1662:0:0 > 2

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_922(x, x1)] = -1 - x + x1

The following rules are decreasing:
f_922(v1662:0:0, v1673:0:0) -> f_922(1 + v1662:0:0, v1673:0:0) :|: v1673:0:0 > v1662:0:0 && v1673:0:0 > 3 && v1662:0:0 > 2
The following rules are bounded:
f_922(v1662:0:0, v1673:0:0) -> f_922(1 + v1662:0:0, v1673:0:0) :|: v1673:0:0 > v1662:0:0 && v1673:0:0 > 3 && v1662:0:0 > 2

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
