MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/gy50X.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 72 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/gy50X.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/gy50X.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

union.__CS__u --> BasicStructureType(elementType: [3 x i32])

Global variables:

Name: __CS_round initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __CS_ret initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __CS_ret_PREEMPTED initVal: 1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __CS_ret_ERROR initVal: 2 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __CS_ret_FINISHED initVal: 4 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __CS_error initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __THREAD_UNUSED initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __THREAD_RUNNING initVal: 1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __THREAD_FINISHED initVal: 2 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: __CS_thread_index initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_thread_lockedon initVal: ((null,null,null),(null,null,null),(null,null,null)) type: [3 x [3 x *i8]] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_thread_status initVal: ((0,0,0),(0,0,0),(0,0,0)) type: [3 x [3 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_thread_allocated initVal: (0,0,0) type: [3 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_thread_born_round initVal: (0,0,0) type: [3 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_thread initVal: (null,null,null) type: [3 x *BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8)] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: b1 initVal: (0,0,0) type: [3 x i32] addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: x initVal: (0,0,0) type: [3 x i32] addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: y initVal: (0,0,0) type: [3 x i32] addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: b2 initVal: (0,0,0) type: [3 x i32] addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: X initVal: (0,0,0) type: [3 x i32] addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: __CS_u initVal: {(0,0,0)} type: BasicTypeName typeName: union.__CS__uBasicStructureType(elementType: [3 x i32]) addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "exit" returnParam: BasicVoidType parameters: (i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 74
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		Unnamed Call-Instruction = call BasicVoidType @exit(i32 0)
		unreachable
	6:
		ret void

*BasicFunctionTypename: "__VERIFIER_assert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 84
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %7, %5
	5:
		br %6
	6:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	7:
		ret void

*BasicFunctionTypename: "__CS_cs" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 97
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @__CS_round
		%3 = zext i8 %2 to i32
		%4 = load %1
		%5 = zext i8 %4 to i32
		%6 = add i32 %3, %5
		%7 = icmp slt %6 3
		%8 = zext i1 %7 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %8)
		%9 = load %1
		%10 = zext i8 %9 to i32
		%11 = load @__CS_round
		%12 = zext i8 %11 to i32
		%13 = add i32 %12, %10
		%14 = trunc i32 %13 to i8
		store %14, @__CS_round
		%15 = call i32 (...)* @nondet_int()
		%16 = icmp ne %15 0
		br %16, %17, %22
	17:
		%18 = load @__CS_round
		%19 = zext i8 %18 to i32
		%20 = icmp eq %19 2
		br %20, %21, %22
	21:
		br %25
	22:
		%23 = load @__CS_ret
		%24 = zext i8 %23 to i32
		br %25
	25:
		%26 = phi [1, %21], [%24, %22]
		%27 = trunc i32 %26 to i8
		store %27, @__CS_ret
		ret void

*BasicFunctionTypename: "__CS_pthread_mutex_init" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 117
	0:
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		ret 0

*BasicFunctionTypename: "__CS_pthread_mutex_destroy" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 125
	0:
		%2 = alloca *i8, align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		%3 = load %2
		%4 = load %3
		%5 = zext i8 %4 to i32
		%6 = load @__CS_thread_index
		%7 = zext i8 %6 to i32
		%8 = icmp ne %5 %7
		br %8, %9, %15
	9:
		%10 = load %2
		%11 = load %10
		%12 = zext i8 %11 to i32
		%13 = icmp ne %12 0
		br %13, %14, %15
	14:
		store 1, @__CS_error
		store 2, @__CS_ret
		br %17
	15:
		%16 = load %2
		store 0, %16
		br %17
	17:
		ret 0

*BasicFunctionTypename: "__CS_pthread_mutex_lock" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 147
	0:
		%2 = alloca i32, align 4
		%3 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%4 = load %3
		%5 = load %4
		%6 = zext i8 %5 to i32
		%7 = icmp eq %6 0
		br %7, %8, %14
	8:
		%9 = load @__CS_thread_index
		%10 = zext i8 %9 to i32
		%11 = add i32 %10, 1
		%12 = trunc i32 %11 to i8
		%13 = load %3
		store %12, %13
		br %15
	14:
		store 1, @__CS_ret
		store 1, %2
		br %16
	15:
		store 0, %2
		br %16
	16:
		%17 = load %2
		ret %17

*BasicFunctionTypename: "__CS_pthread_mutex_unlock" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 166
	0:
		%2 = alloca i32, align 4
		%3 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%4 = load %3
		%5 = load %4
		%6 = zext i8 %5 to i32
		%7 = load @__CS_thread_index
		%8 = zext i8 %7 to i32
		%9 = add i32 %8, 1
		%10 = icmp ne %6 %9
		br %10, %11, %12
	11:
		store 1, @__CS_error
		store 2, @__CS_ret
		store 1, %2
		br %15
	12:
		%13 = load %3
		store 0, %13
		br %14
	14:
		store 0, %2
		br %15
	15:
		%16 = load %2
		ret %16

*BasicFunctionTypename: "__CS_pthread_cond_init" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 184
	0:
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		ret 0

*BasicFunctionTypename: "__CS_pthread_cond_signal" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 190
	0:
		%2 = alloca *i8, align 8
		%3 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %3
		br %4
	4:
		%5 = load %3
		%6 = icmp sle %5 2
		br %6, %7, %28
	7:
		%8 = load @__CS_round
		%9 = zext i8 %8 to i64
		%10 = getelementptr @__CS_thread_lockedon, 0, %9
		%11 = load %3
		%12 = sext i32 %11 to i64
		%13 = getelementptr %10, 0, %12
		%14 = load %13
		%15 = load %2
		%16 = icmp eq %14 %15
		br %16, %17, %24
	17:
		%18 = load @__CS_round
		%19 = zext i8 %18 to i64
		%20 = getelementptr @__CS_thread_lockedon, 0, %19
		%21 = load %3
		%22 = sext i32 %21 to i64
		%23 = getelementptr %20, 0, %22
		store null, %23
		br %24
	24:
		br %25
	25:
		%26 = load %3
		%27 = add i32 %26, 1
		store %27, %3
		br %4
	28:
		ret 0

*BasicFunctionTypename: "__CS_pthread_cond_broadcast" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 218
	0:
		%2 = alloca *i8, align 8
		%3 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %3
		br %4
	4:
		%5 = load %3
		%6 = icmp sle %5 2
		br %6, %7, %28
	7:
		%8 = load @__CS_round
		%9 = zext i8 %8 to i64
		%10 = getelementptr @__CS_thread_lockedon, 0, %9
		%11 = load %3
		%12 = sext i32 %11 to i64
		%13 = getelementptr %10, 0, %12
		%14 = load %13
		%15 = load %2
		%16 = icmp eq %14 %15
		br %16, %17, %24
	17:
		%18 = load @__CS_round
		%19 = zext i8 %18 to i64
		%20 = getelementptr @__CS_thread_lockedon, 0, %19
		%21 = load %3
		%22 = sext i32 %21 to i64
		%23 = getelementptr %20, 0, %22
		store null, %23
		br %24
	24:
		br %25
	25:
		%26 = load %3
		%27 = add i32 %26, 1
		store %27, %3
		br %4
	28:
		ret 0

*BasicFunctionTypename: "__CS_pthread_cond_wait" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 246
	0:
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%6 = load %5
		%7 = load %6
		%8 = zext i8 %7 to i32
		%9 = load @__CS_thread_index
		%10 = zext i8 %9 to i32
		%11 = add i32 %10, 1
		%12 = icmp ne %8 %11
		br %12, %13, %14
	13:
		store 1, @__CS_error
		store 2, @__CS_ret
		store 1, %3
		br %36
	14:
		%15 = load %5
		store 0, %15
		br %16
	16:
		%17 = load %4
		%18 = load @__CS_round
		%19 = zext i8 %18 to i64
		%20 = getelementptr @__CS_thread_lockedon, 0, %19
		%21 = load @__CS_thread_index
		%22 = zext i8 %21 to i64
		%23 = getelementptr %20, 0, %22
		store %17, %23
		store 1, @__CS_ret
		%24 = load %5
		%25 = load %24
		%26 = zext i8 %25 to i32
		%27 = icmp eq %26 0
		br %27, %28, %34
	28:
		%29 = load @__CS_thread_index
		%30 = zext i8 %29 to i32
		%31 = add i32 %30, 1
		%32 = trunc i32 %31 to i8
		%33 = load %5
		store %32, %33
		br %35
	34:
		store 1, @__CS_ret
		store 1, %3
		br %36
	35:
		store 0, %3
		br %36
	36:
		%37 = load %3
		ret %37

*BasicFunctionTypename: "__CS_assert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 287
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		store 1, @__CS_error
		store 2, @__CS_ret
		br %6
	6:
		ret void

*BasicFunctionTypename: "__CS_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 298
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		store 1, @__CS_ret
		br %6
	6:
		ret void

*BasicFunctionTypename: "__CS_pthread_join" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i8 zeroext, 1 **i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 307
	0:
		%3 = alloca i32, align 4
		%4 = alloca i8, align 1
		%5 = alloca **i8, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(***i8 %5)
		%6 = load %4
		%7 = zext i8 %6 to i32
		%8 = icmp ne %7 123
		br %8, %9, %14
	9:
		%10 = load %4
		%11 = zext i8 %10 to i32
		%12 = icmp sgt %11 3
		br %12, %13, %14
	13:
		store 1, @__CS_error
		store 2, @__CS_ret
		store 0, %3
		br %51
	14:
		%15 = load %4
		%16 = zext i8 %15 to i32
		%17 = icmp eq %16 123
		br %17, %28, %18
	18:
		%19 = load @__CS_round
		%20 = zext i8 %19 to i64
		%21 = getelementptr @__CS_thread_status, 0, %20
		%22 = load %4
		%23 = zext i8 %22 to i64
		%24 = getelementptr %21, 0, %23
		%25 = load %24
		%26 = zext i8 %25 to i32
		%27 = icmp eq %26 1
		br %27, %28, %29
	28:
		store 1, @__CS_ret
		store 0, %3
		br %51
	29:
		%30 = load @__CS_round
		%31 = zext i8 %30 to i64
		%32 = getelementptr @__CS_thread_status, 0, %31
		%33 = load %4
		%34 = zext i8 %33 to i64
		%35 = getelementptr %32, 0, %34
		%36 = load %35
		%37 = zext i8 %36 to i32
		%38 = icmp eq %37 0
		br %38, %39, %40
	39:
		store 1, @__CS_error
		store 2, @__CS_ret
		store 0, %3
		br %51
	40:
		%41 = load @__CS_round
		%42 = zext i8 %41 to i64
		%43 = getelementptr @__CS_thread_status, 0, %42
		%44 = load %4
		%45 = zext i8 %44 to i64
		%46 = getelementptr %43, 0, %45
		%47 = load %46
		%48 = zext i8 %47 to i32
		%49 = icmp eq %48 2
		%50 = zext i1 %49 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %50)
		store 0, %3
		br %51
	51:
		%52 = load %3
		ret %52

*BasicFunctionTypename: "__CS_pthread_create" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8, 2 *BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8), 3 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 355
	0:
		%5 = alloca i32, align 4
		%6 = alloca *i8, align 8
		%7 = alloca *i8, align 8
		%8 = alloca *BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8), align 8
		%9 = alloca *i8, align 8
		store %0, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %6)
		store %1, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %7)
		store %2, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8) %8)
		store %3, %9
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %9)
		%10 = load @__CS_thread_index
		%11 = zext i8 %10 to i32
		%12 = icmp eq %11 2
		br %12, %13, %15
	13:
		%14 = load %6
		store 123, %14
		store -1, %5
		br %39
	15:
		%16 = load @__CS_thread_index
		%17 = add i8 %16, 1
		store %17, @__CS_thread_index
		%18 = load @__CS_thread_index
		%19 = zext i8 %18 to i64
		%20 = getelementptr @__CS_thread_allocated, 0, %19
		store 1, %20
		%21 = load @__CS_round
		%22 = load @__CS_thread_index
		%23 = zext i8 %22 to i64
		%24 = getelementptr @__CS_thread_born_round, 0, %23
		store %21, %24
		%25 = load %8
		%26 = load @__CS_thread_index
		%27 = zext i8 %26 to i64
		%28 = getelementptr @__CS_thread, 0, %27
		store %25, %28
		%29 = load @__CS_round
		%30 = zext i8 %29 to i64
		%31 = getelementptr @__CS_thread_status, 0, %30
		%32 = load @__CS_thread_index
		%33 = zext i8 %32 to i64
		%34 = getelementptr %31, 0, %33
		store 1, %34
		%35 = load @__CS_thread_index
		%36 = load %6
		store %35, %36
		%37 = load @__CS_thread_index
		%38 = zext i8 %37 to i32
		store %38, %5
		br %39
	39:
		%40 = load %5
		ret %40

*BasicFunctionTypename: "thr1" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 396
	0:
		%1 = alloca *i8, align 8
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%2 = load @__CS_ret
		%3 = zext i8 %2 to i32
		%4 = icmp ne %3 0
		br %4, %5, %6
	5:
		store null, %1
		br %225
	6:
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%8 = load @__CS_ret
		%9 = zext i8 %8 to i32
		%10 = icmp ne %9 0
		br %10, %11, %12
	11:
		store null, %1
		br %225
	12:
		%13 = load @__CS_round
		%14 = zext i8 %13 to i64
		%15 = getelementptr @b1, 0, %14
		store 1, %15
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%16 = load @__CS_ret
		%17 = zext i8 %16 to i32
		%18 = icmp ne %17 0
		br %18, %19, %20
	19:
		store null, %1
		br %225
	20:
		%21 = load @__CS_round
		%22 = zext i8 %21 to i64
		%23 = getelementptr @x, 0, %22
		store 1, %23
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%24 = load @__CS_ret
		%25 = zext i8 %24 to i32
		%26 = icmp ne %25 0
		br %26, %27, %28
	27:
		store null, %1
		br %225
	28:
		%29 = load @__CS_round
		%30 = zext i8 %29 to i64
		%31 = getelementptr @y, 0, %30
		%32 = load %31
		%33 = icmp ne %32 0
		br %33, %34, %71
	34:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%35 = load @__CS_ret
		%36 = zext i8 %35 to i32
		%37 = icmp ne %36 0
		br %37, %38, %39
	38:
		store null, %1
		br %225
	39:
		%40 = load @__CS_round
		%41 = zext i8 %40 to i64
		%42 = getelementptr @b1, 0, %41
		store 0, %42
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%43 = load @__CS_ret
		%44 = zext i8 %43 to i32
		%45 = icmp ne %44 0
		br %45, %46, %47
	46:
		store null, %1
		br %225
	47:
		br %48
	48:
		%49 = load @__CS_round
		%50 = zext i8 %49 to i64
		%51 = getelementptr @y, 0, %50
		%52 = load %51
		%53 = icmp ne %52 0
		br %53, %54, %60
	54:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%55 = load @__CS_ret
		%56 = zext i8 %55 to i32
		%57 = icmp ne %56 0
		br %57, %58, %59
	58:
		store null, %1
		br %225
	59:
		br %48
	60:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%61 = load @__CS_ret
		%62 = zext i8 %61 to i32
		%63 = icmp ne %62 0
		br %63, %64, %65
	64:
		store null, %1
		br %225
	65:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%66 = load @__CS_ret
		%67 = zext i8 %66 to i32
		%68 = icmp ne %67 0
		br %68, %69, %70
	69:
		store null, %1
		br %225
	70:
		br %7
	71:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%72 = load @__CS_ret
		%73 = zext i8 %72 to i32
		%74 = icmp ne %73 0
		br %74, %75, %76
	75:
		store null, %1
		br %225
	76:
		%77 = load @__CS_round
		%78 = zext i8 %77 to i64
		%79 = getelementptr @y, 0, %78
		store 1, %79
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%80 = load @__CS_ret
		%81 = zext i8 %80 to i32
		%82 = icmp ne %81 0
		br %82, %83, %84
	83:
		store null, %1
		br %225
	84:
		%85 = load @__CS_round
		%86 = zext i8 %85 to i64
		%87 = getelementptr @x, 0, %86
		%88 = load %87
		%89 = icmp ne %88 1
		br %89, %90, %167
	90:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%91 = load @__CS_ret
		%92 = zext i8 %91 to i32
		%93 = icmp ne %92 0
		br %93, %94, %95
	94:
		store null, %1
		br %225
	95:
		%96 = load @__CS_round
		%97 = zext i8 %96 to i64
		%98 = getelementptr @b1, 0, %97
		store 0, %98
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%99 = load @__CS_ret
		%100 = zext i8 %99 to i32
		%101 = icmp ne %100 0
		br %101, %102, %103
	102:
		store null, %1
		br %225
	103:
		br %104
	104:
		%105 = load @__CS_round
		%106 = zext i8 %105 to i64
		%107 = getelementptr @b2, 0, %106
		%108 = load %107
		%109 = icmp sge %108 1
		br %109, %110, %116
	110:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%111 = load @__CS_ret
		%112 = zext i8 %111 to i32
		%113 = icmp ne %112 0
		br %113, %114, %115
	114:
		store null, %1
		br %225
	115:
		br %104
	116:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%117 = load @__CS_ret
		%118 = zext i8 %117 to i32
		%119 = icmp ne %118 0
		br %119, %120, %121
	120:
		store null, %1
		br %225
	121:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%122 = load @__CS_ret
		%123 = zext i8 %122 to i32
		%124 = icmp ne %123 0
		br %124, %125, %126
	125:
		store null, %1
		br %225
	126:
		%127 = load @__CS_round
		%128 = zext i8 %127 to i64
		%129 = getelementptr @y, 0, %128
		%130 = load %129
		%131 = icmp ne %130 1
		br %131, %132, %161
	132:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%133 = load @__CS_ret
		%134 = zext i8 %133 to i32
		%135 = icmp ne %134 0
		br %135, %136, %137
	136:
		store null, %1
		br %225
	137:
		br %138
	138:
		%139 = load @__CS_round
		%140 = zext i8 %139 to i64
		%141 = getelementptr @y, 0, %140
		%142 = load %141
		%143 = icmp ne %142 0
		br %143, %144, %150
	144:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%145 = load @__CS_ret
		%146 = zext i8 %145 to i32
		%147 = icmp ne %146 0
		br %147, %148, %149
	148:
		store null, %1
		br %225
	149:
		br %138
	150:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%151 = load @__CS_ret
		%152 = zext i8 %151 to i32
		%153 = icmp ne %152 0
		br %153, %154, %155
	154:
		store null, %1
		br %225
	155:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%156 = load @__CS_ret
		%157 = zext i8 %156 to i32
		%158 = icmp ne %157 0
		br %158, %159, %160
	159:
		store null, %1
		br %225
	160:
		br %7
	161:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%162 = load @__CS_ret
		%163 = zext i8 %162 to i32
		%164 = icmp ne %163 0
		br %164, %165, %166
	165:
		store null, %1
		br %225
	166:
		br %167
	167:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%168 = load @__CS_ret
		%169 = zext i8 %168 to i32
		%170 = icmp ne %169 0
		br %170, %171, %172
	171:
		store null, %1
		br %225
	172:
		br %173
	173:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%174 = load @__CS_ret
		%175 = zext i8 %174 to i32
		%176 = icmp ne %175 0
		br %176, %177, %178
	177:
		store null, %1
		br %225
	178:
		%179 = load @__CS_round
		%180 = zext i8 %179 to i64
		%181 = getelementptr @X, 0, %180
		store 0, %181
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%182 = load @__CS_ret
		%183 = zext i8 %182 to i32
		%184 = icmp ne %183 0
		br %184, %185, %186
	185:
		store null, %1
		br %225
	186:
		%187 = load @__CS_round
		%188 = zext i8 %187 to i64
		%189 = getelementptr @X, 0, %188
		%190 = load %189
		%191 = icmp sle %190 0
		br %191, %199, %192
	192:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%193 = load @__CS_ret
		%194 = zext i8 %193 to i32
		%195 = icmp ne %194 0
		br %195, %196, %197
	196:
		store null, %1
		br %225
	197:
		br %198
	198:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 1, @__CS_error
		store 2, @__CS_ret
		store null, %1
		br %225
	199:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%200 = load @__CS_ret
		%201 = zext i8 %200 to i32
		%202 = icmp ne %201 0
		br %202, %203, %204
	203:
		store null, %1
		br %225
	204:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%205 = load @__CS_ret
		%206 = zext i8 %205 to i32
		%207 = icmp ne %206 0
		br %207, %208, %209
	208:
		store null, %1
		br %225
	209:
		%210 = load @__CS_round
		%211 = zext i8 %210 to i64
		%212 = getelementptr @y, 0, %211
		store 0, %212
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%213 = load @__CS_ret
		%214 = zext i8 %213 to i32
		%215 = icmp ne %214 0
		br %215, %216, %217
	216:
		store null, %1
		br %225
	217:
		%218 = load @__CS_round
		%219 = zext i8 %218 to i64
		%220 = getelementptr @b1, 0, %219
		store 0, %220
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%221 = load @__CS_ret
		%222 = zext i8 %221 to i32
		%223 = icmp ne %222 0
		br %223, %224, %225
	224:
		store null, %1
		br %225
	225:
		%226 = load %1
		ret %226

*BasicFunctionTypename: "thr2" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 657
	0:
		%1 = alloca *i8, align 8
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%2 = load @__CS_ret
		%3 = zext i8 %2 to i32
		%4 = icmp ne %3 0
		br %4, %5, %6
	5:
		store null, %1
		br %225
	6:
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%8 = load @__CS_ret
		%9 = zext i8 %8 to i32
		%10 = icmp ne %9 0
		br %10, %11, %12
	11:
		store null, %1
		br %225
	12:
		%13 = load @__CS_round
		%14 = zext i8 %13 to i64
		%15 = getelementptr @b2, 0, %14
		store 1, %15
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%16 = load @__CS_ret
		%17 = zext i8 %16 to i32
		%18 = icmp ne %17 0
		br %18, %19, %20
	19:
		store null, %1
		br %225
	20:
		%21 = load @__CS_round
		%22 = zext i8 %21 to i64
		%23 = getelementptr @x, 0, %22
		store 2, %23
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%24 = load @__CS_ret
		%25 = zext i8 %24 to i32
		%26 = icmp ne %25 0
		br %26, %27, %28
	27:
		store null, %1
		br %225
	28:
		%29 = load @__CS_round
		%30 = zext i8 %29 to i64
		%31 = getelementptr @y, 0, %30
		%32 = load %31
		%33 = icmp ne %32 0
		br %33, %34, %71
	34:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%35 = load @__CS_ret
		%36 = zext i8 %35 to i32
		%37 = icmp ne %36 0
		br %37, %38, %39
	38:
		store null, %1
		br %225
	39:
		%40 = load @__CS_round
		%41 = zext i8 %40 to i64
		%42 = getelementptr @b2, 0, %41
		store 0, %42
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%43 = load @__CS_ret
		%44 = zext i8 %43 to i32
		%45 = icmp ne %44 0
		br %45, %46, %47
	46:
		store null, %1
		br %225
	47:
		br %48
	48:
		%49 = load @__CS_round
		%50 = zext i8 %49 to i64
		%51 = getelementptr @y, 0, %50
		%52 = load %51
		%53 = icmp ne %52 0
		br %53, %54, %60
	54:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%55 = load @__CS_ret
		%56 = zext i8 %55 to i32
		%57 = icmp ne %56 0
		br %57, %58, %59
	58:
		store null, %1
		br %225
	59:
		br %48
	60:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%61 = load @__CS_ret
		%62 = zext i8 %61 to i32
		%63 = icmp ne %62 0
		br %63, %64, %65
	64:
		store null, %1
		br %225
	65:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%66 = load @__CS_ret
		%67 = zext i8 %66 to i32
		%68 = icmp ne %67 0
		br %68, %69, %70
	69:
		store null, %1
		br %225
	70:
		br %7
	71:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%72 = load @__CS_ret
		%73 = zext i8 %72 to i32
		%74 = icmp ne %73 0
		br %74, %75, %76
	75:
		store null, %1
		br %225
	76:
		%77 = load @__CS_round
		%78 = zext i8 %77 to i64
		%79 = getelementptr @y, 0, %78
		store 2, %79
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%80 = load @__CS_ret
		%81 = zext i8 %80 to i32
		%82 = icmp ne %81 0
		br %82, %83, %84
	83:
		store null, %1
		br %225
	84:
		%85 = load @__CS_round
		%86 = zext i8 %85 to i64
		%87 = getelementptr @x, 0, %86
		%88 = load %87
		%89 = icmp ne %88 2
		br %89, %90, %167
	90:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%91 = load @__CS_ret
		%92 = zext i8 %91 to i32
		%93 = icmp ne %92 0
		br %93, %94, %95
	94:
		store null, %1
		br %225
	95:
		%96 = load @__CS_round
		%97 = zext i8 %96 to i64
		%98 = getelementptr @b2, 0, %97
		store 0, %98
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%99 = load @__CS_ret
		%100 = zext i8 %99 to i32
		%101 = icmp ne %100 0
		br %101, %102, %103
	102:
		store null, %1
		br %225
	103:
		br %104
	104:
		%105 = load @__CS_round
		%106 = zext i8 %105 to i64
		%107 = getelementptr @b1, 0, %106
		%108 = load %107
		%109 = icmp sge %108 1
		br %109, %110, %116
	110:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%111 = load @__CS_ret
		%112 = zext i8 %111 to i32
		%113 = icmp ne %112 0
		br %113, %114, %115
	114:
		store null, %1
		br %225
	115:
		br %104
	116:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%117 = load @__CS_ret
		%118 = zext i8 %117 to i32
		%119 = icmp ne %118 0
		br %119, %120, %121
	120:
		store null, %1
		br %225
	121:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%122 = load @__CS_ret
		%123 = zext i8 %122 to i32
		%124 = icmp ne %123 0
		br %124, %125, %126
	125:
		store null, %1
		br %225
	126:
		%127 = load @__CS_round
		%128 = zext i8 %127 to i64
		%129 = getelementptr @y, 0, %128
		%130 = load %129
		%131 = icmp ne %130 2
		br %131, %132, %161
	132:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%133 = load @__CS_ret
		%134 = zext i8 %133 to i32
		%135 = icmp ne %134 0
		br %135, %136, %137
	136:
		store null, %1
		br %225
	137:
		br %138
	138:
		%139 = load @__CS_round
		%140 = zext i8 %139 to i64
		%141 = getelementptr @y, 0, %140
		%142 = load %141
		%143 = icmp ne %142 0
		br %143, %144, %150
	144:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%145 = load @__CS_ret
		%146 = zext i8 %145 to i32
		%147 = icmp ne %146 0
		br %147, %148, %149
	148:
		store null, %1
		br %225
	149:
		br %138
	150:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%151 = load @__CS_ret
		%152 = zext i8 %151 to i32
		%153 = icmp ne %152 0
		br %153, %154, %155
	154:
		store null, %1
		br %225
	155:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%156 = load @__CS_ret
		%157 = zext i8 %156 to i32
		%158 = icmp ne %157 0
		br %158, %159, %160
	159:
		store null, %1
		br %225
	160:
		br %7
	161:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%162 = load @__CS_ret
		%163 = zext i8 %162 to i32
		%164 = icmp ne %163 0
		br %164, %165, %166
	165:
		store null, %1
		br %225
	166:
		br %167
	167:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%168 = load @__CS_ret
		%169 = zext i8 %168 to i32
		%170 = icmp ne %169 0
		br %170, %171, %172
	171:
		store null, %1
		br %225
	172:
		br %173
	173:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%174 = load @__CS_ret
		%175 = zext i8 %174 to i32
		%176 = icmp ne %175 0
		br %176, %177, %178
	177:
		store null, %1
		br %225
	178:
		%179 = load @__CS_round
		%180 = zext i8 %179 to i64
		%181 = getelementptr @X, 0, %180
		store 1, %181
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%182 = load @__CS_ret
		%183 = zext i8 %182 to i32
		%184 = icmp ne %183 0
		br %184, %185, %186
	185:
		store null, %1
		br %225
	186:
		%187 = load @__CS_round
		%188 = zext i8 %187 to i64
		%189 = getelementptr @X, 0, %188
		%190 = load %189
		%191 = icmp sge %190 1
		br %191, %199, %192
	192:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%193 = load @__CS_ret
		%194 = zext i8 %193 to i32
		%195 = icmp ne %194 0
		br %195, %196, %197
	196:
		store null, %1
		br %225
	197:
		br %198
	198:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 1, @__CS_error
		store 2, @__CS_ret
		store null, %1
		br %225
	199:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%200 = load @__CS_ret
		%201 = zext i8 %200 to i32
		%202 = icmp ne %201 0
		br %202, %203, %204
	203:
		store null, %1
		br %225
	204:
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%205 = load @__CS_ret
		%206 = zext i8 %205 to i32
		%207 = icmp ne %206 0
		br %207, %208, %209
	208:
		store null, %1
		br %225
	209:
		%210 = load @__CS_round
		%211 = zext i8 %210 to i64
		%212 = getelementptr @y, 0, %211
		store 0, %212
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%213 = load @__CS_ret
		%214 = zext i8 %213 to i32
		%215 = icmp ne %214 0
		br %215, %216, %217
	216:
		store null, %1
		br %225
	217:
		%218 = load @__CS_round
		%219 = zext i8 %218 to i64
		%220 = getelementptr @b2, 0, %219
		store 0, %220
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%221 = load @__CS_ret
		%222 = zext i8 %221 to i32
		%223 = icmp ne %222 0
		br %223, %224, %225
	224:
		store null, %1
		br %225
	225:
		%226 = load %1
		ret %226

*BasicFunctionTypename: "main_thread" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 916
	0:
		%2 = alloca *i8, align 8
		%3 = alloca *i8, align 8
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%6 = load @__CS_ret
		%7 = zext i8 %6 to i32
		%8 = icmp ne %7 0
		br %8, %9, %10
	9:
		store null, %2
		br %36
	10:
		%11 = call i32 @__CS_pthread_create(*i8 %4, *i8 null, *BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8) aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMConversionConstExpr@169e5af9, *i8 null)
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%12 = load @__CS_ret
		%13 = zext i8 %12 to i32
		%14 = icmp ne %13 0
		br %14, %15, %16
	15:
		store null, %2
		br %36
	16:
		%17 = call i32 @__CS_pthread_create(*i8 %5, *i8 null, *BasicFunctionType varArgs: falsereturnType: *i8paramTypes: (*i8) aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMConversionConstExpr@6de1560d, *i8 null)
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%18 = load @__CS_ret
		%19 = zext i8 %18 to i32
		%20 = icmp ne %19 0
		br %20, %21, %22
	21:
		store null, %2
		br %36
	22:
		%23 = load %4
		%24 = call i32 @__CS_pthread_join(i8 zeroext %23, **i8 null)
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%25 = load @__CS_ret
		%26 = zext i8 %25 to i32
		%27 = icmp ne %26 0
		br %27, %28, %29
	28:
		store null, %2
		br %36
	29:
		%30 = load %5
		%31 = call i32 @__CS_pthread_join(i8 zeroext %30, **i8 null)
		Unnamed Call-Instruction = call BasicVoidType @__CS_cs()
		%32 = load @__CS_ret
		%33 = zext i8 %32 to i32
		%34 = icmp ne %33 0
		br %34, %35, %36
	35:
		store null, %2
		br %36
	36:
		%37 = load %2
		ret %37

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 960
	0:
		%1 = alloca i32, align 4
		%2 = alloca [3 x [3 x i8]], align 1
		%3 = alloca [3 x [3 x *i8]], align 16
		%4 = alloca [3 x i32], align 4
		%5 = alloca [3 x i32], align 4
		%6 = alloca [3 x i32], align 4
		%7 = alloca [3 x i32], align 4
		%8 = alloca [3 x i32], align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [3 x i8]] %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [3 x *i8]] %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x i32] %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x i32] %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x i32] %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x i32] %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x i32] %8)
		%9 = getelementptr %2, 0, 1
		%10 = getelementptr %9, 0, 0
		%11 = load %10
		store %11, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@778f927f
		%12 = getelementptr %2, 0, 2
		%13 = getelementptr %12, 0, 0
		%14 = load %13
		store %14, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@77e82096
		%15 = getelementptr %2, 0, 1
		%16 = getelementptr %15, 0, 1
		%17 = load %16
		store %17, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@dfbe847
		%18 = getelementptr %2, 0, 2
		%19 = getelementptr %18, 0, 1
		%20 = load %19
		store %20, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6bbc67c9
		%21 = getelementptr %2, 0, 1
		%22 = getelementptr %21, 0, 2
		%23 = load %22
		store %23, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@60ab1cab
		%24 = getelementptr %2, 0, 2
		%25 = getelementptr %24, 0, 2
		%26 = load %25
		store %26, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@56716cb8
		%27 = getelementptr %3, 0, 1
		%28 = getelementptr %27, 0, 0
		%29 = load %28
		store %29, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@41a0fe1
		%30 = getelementptr %3, 0, 2
		%31 = getelementptr %30, 0, 0
		%32 = load %31
		store %32, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@c10b284
		%33 = getelementptr %3, 0, 1
		%34 = getelementptr %33, 0, 1
		%35 = load %34
		store %35, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3466b9e9
		%36 = getelementptr %3, 0, 2
		%37 = getelementptr %36, 0, 1
		%38 = load %37
		store %38, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@69af0771
		%39 = getelementptr %3, 0, 1
		%40 = getelementptr %39, 0, 2
		%41 = load %40
		store %41, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3d9e78a2
		%42 = getelementptr %3, 0, 2
		%43 = getelementptr %42, 0, 2
		%44 = load %43
		store %44, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@34937907
		%45 = getelementptr %4, 0, 1
		%46 = load %45
		store %46, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@353b278d
		%47 = getelementptr %4, 0, 2
		%48 = load %47
		store %48, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@243e3ad4
		%49 = getelementptr %5, 0, 1
		%50 = load %49
		store %50, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6a2b1d99
		%51 = getelementptr %5, 0, 2
		%52 = load %51
		store %52, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@45df1a9a
		%53 = getelementptr %6, 0, 1
		%54 = load %53
		store %54, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@29345ae3
		%55 = getelementptr %6, 0, 2
		%56 = load %55
		store %56, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7c893d8b
		%57 = getelementptr %7, 0, 1
		%58 = load %57
		store %58, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4efc3056
		%59 = getelementptr %7, 0, 2
		%60 = load %59
		store %60, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@734af8d9
		%61 = getelementptr %8, 0, 1
		%62 = load %61
		store %62, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@78a24711
		%63 = getelementptr %8, 0, 2
		%64 = load %63
		store %64, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4d7258eb
		store 0, @__CS_round
		store 0, @__CS_thread_index
		%65 = load @__CS_round
		store %65, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@62a3af93
		store 1, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@468b0f2e
		store @main_thread, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2cfb5221
		store 1, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7391f255
		%66 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@cb11483
		%67 = zext i8 %66 to i32
		%68 = icmp eq %67 1
		br %68, %69, %82
	69:
		%70 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@125d8844
		store %70, @__CS_round
		store 0, @__CS_ret
		%71 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6441aa74
		%72 = call *i8 %71(*i8 null)
		%73 = load @__CS_ret
		%74 = zext i8 %73 to i32
		%75 = icmp ne %74 1
		br %75, %76, %81
	76:
		%77 = load @__CS_round
		%78 = zext i8 %77 to i64
		%79 = getelementptr @__CS_thread_status, 0, %78
		%80 = getelementptr %79, 0, 0
		store 2, %80
		br %81
	81:
		br %82
	82:
		%83 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@18beeff3
		%84 = zext i8 %83 to i32
		%85 = icmp eq %84 1
		br %85, %86, %99
	86:
		%87 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1caff56b
		store %87, @__CS_round
		store 0, @__CS_ret
		%88 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@62ce4112
		%89 = call *i8 %88(*i8 null)
		%90 = load @__CS_ret
		%91 = zext i8 %90 to i32
		%92 = icmp ne %91 1
		br %92, %93, %98
	93:
		%94 = load @__CS_round
		%95 = zext i8 %94 to i64
		%96 = getelementptr @__CS_thread_status, 0, %95
		%97 = getelementptr %96, 0, 1
		store 2, %97
		br %98
	98:
		br %99
	99:
		%100 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@b355535
		%101 = zext i8 %100 to i32
		%102 = icmp eq %101 1
		br %102, %103, %116
	103:
		%104 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@641bf2d7
		store %104, @__CS_round
		store 0, @__CS_ret
		%105 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@77c5792
		%106 = call *i8 %105(*i8 null)
		%107 = load @__CS_ret
		%108 = zext i8 %107 to i32
		%109 = icmp ne %108 1
		br %109, %110, %115
	110:
		%111 = load @__CS_round
		%112 = zext i8 %111 to i64
		%113 = getelementptr @__CS_thread_status, 0, %112
		%114 = getelementptr %113, 0, 2
		store 2, %114
		br %115
	115:
		br %116
	116:
		%117 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@17aa40be
		%118 = zext i8 %117 to i32
		%119 = getelementptr %2, 0, 1
		%120 = getelementptr %119, 0, 0
		%121 = load %120
		%122 = zext i8 %121 to i32
		%123 = icmp eq %118 %122
		%124 = zext i1 %123 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %124)
		%125 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@36172383
		%126 = zext i8 %125 to i32
		%127 = getelementptr %2, 0, 2
		%128 = getelementptr %127, 0, 0
		%129 = load %128
		%130 = zext i8 %129 to i32
		%131 = icmp eq %126 %130
		%132 = zext i1 %131 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %132)
		%133 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@d21e2dc
		%134 = zext i8 %133 to i32
		%135 = getelementptr %2, 0, 1
		%136 = getelementptr %135, 0, 1
		%137 = load %136
		%138 = zext i8 %137 to i32
		%139 = icmp eq %134 %138
		%140 = zext i1 %139 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %140)
		%141 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6804f42d
		%142 = zext i8 %141 to i32
		%143 = getelementptr %2, 0, 2
		%144 = getelementptr %143, 0, 1
		%145 = load %144
		%146 = zext i8 %145 to i32
		%147 = icmp eq %142 %146
		%148 = zext i1 %147 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %148)
		%149 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2deee623
		%150 = zext i8 %149 to i32
		%151 = getelementptr %2, 0, 1
		%152 = getelementptr %151, 0, 2
		%153 = load %152
		%154 = zext i8 %153 to i32
		%155 = icmp eq %150 %154
		%156 = zext i1 %155 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %156)
		%157 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@226ad326
		%158 = zext i8 %157 to i32
		%159 = getelementptr %2, 0, 2
		%160 = getelementptr %159, 0, 2
		%161 = load %160
		%162 = zext i8 %161 to i32
		%163 = icmp eq %158 %162
		%164 = zext i1 %163 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %164)
		%165 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@20dff2b5
		%166 = getelementptr %3, 0, 1
		%167 = getelementptr %166, 0, 0
		%168 = load %167
		%169 = icmp eq %165 %168
		%170 = zext i1 %169 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %170)
		%171 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6f35cf1f
		%172 = getelementptr %3, 0, 2
		%173 = getelementptr %172, 0, 0
		%174 = load %173
		%175 = icmp eq %171 %174
		%176 = zext i1 %175 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %176)
		%177 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@35b0e324
		%178 = getelementptr %3, 0, 1
		%179 = getelementptr %178, 0, 1
		%180 = load %179
		%181 = icmp eq %177 %180
		%182 = zext i1 %181 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %182)
		%183 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@41b7f557
		%184 = getelementptr %3, 0, 2
		%185 = getelementptr %184, 0, 1
		%186 = load %185
		%187 = icmp eq %183 %186
		%188 = zext i1 %187 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %188)
		%189 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1e22fd8e
		%190 = getelementptr %3, 0, 1
		%191 = getelementptr %190, 0, 2
		%192 = load %191
		%193 = icmp eq %189 %192
		%194 = zext i1 %193 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %194)
		%195 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5fae8462
		%196 = getelementptr %3, 0, 2
		%197 = getelementptr %196, 0, 2
		%198 = load %197
		%199 = icmp eq %195 %198
		%200 = zext i1 %199 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %200)
		%201 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6db5f570
		%202 = getelementptr %4, 0, 1
		%203 = load %202
		%204 = icmp eq %201 %203
		%205 = zext i1 %204 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %205)
		%206 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@13d6a8dc
		%207 = getelementptr %4, 0, 2
		%208 = load %207
		%209 = icmp eq %206 %208
		%210 = zext i1 %209 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %210)
		%211 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1a11e9a5
		%212 = getelementptr %5, 0, 1
		%213 = load %212
		%214 = icmp eq %211 %213
		%215 = zext i1 %214 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %215)
		%216 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3137f311
		%217 = getelementptr %5, 0, 2
		%218 = load %217
		%219 = icmp eq %216 %218
		%220 = zext i1 %219 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %220)
		%221 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@73eb8e32
		%222 = getelementptr %6, 0, 1
		%223 = load %222
		%224 = icmp eq %221 %223
		%225 = zext i1 %224 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %225)
		%226 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@55dd58db
		%227 = getelementptr %6, 0, 2
		%228 = load %227
		%229 = icmp eq %226 %228
		%230 = zext i1 %229 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %230)
		%231 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4014df04
		%232 = getelementptr %7, 0, 1
		%233 = load %232
		%234 = icmp eq %231 %233
		%235 = zext i1 %234 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %235)
		%236 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4eb5036c
		%237 = getelementptr %7, 0, 2
		%238 = load %237
		%239 = icmp eq %236 %238
		%240 = zext i1 %239 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %240)
		%241 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@61008e96
		%242 = getelementptr %8, 0, 1
		%243 = load %242
		%244 = icmp eq %241 %243
		%245 = zext i1 %244 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %245)
		%246 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5e2419ed
		%247 = getelementptr %8, 0, 2
		%248 = load %247
		%249 = icmp eq %246 %248
		%250 = zext i1 %249 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %250)
		%251 = load @__CS_error
		%252 = zext i8 %251 to i32
		%253 = icmp ne %252 1
		%254 = zext i1 %253 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assert(i32 %254)
		%255 = load %1
		ret %255


Analyze Termination of all function calls matching the pattern:
main()/hpcwork/ff862203/termcomp25/benchmarks/gy50X.c:3:63: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));
                                                              ^
/hpcwork/ff862203/termcomp25/benchmarks/gy50X.c:51:75: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;
                                                                          ^
/hpcwork/ff862203/termcomp25/benchmarks/gy50X.c:54:36: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
                                   ^
/hpcwork/ff862203/termcomp25/benchmarks/gy50X.c:56:36: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
