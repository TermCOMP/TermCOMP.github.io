YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/33uzZ.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 203 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 12 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/33uzZ.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/33uzZ.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 (...)* @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %3
		%8 = icmp ne %7 0
		br %8, %10, %9
	9:
		br %17
	10:
		%11 = call i32 (...)* @__VERIFIER_nondet_int()
		store %11, %3
		%12 = load %2
		%13 = sub i32 %12, 1
		store %13, %2
		%14 = load %2
		%15 = icmp sge %14 0
		%16 = zext i1 %15 to i32
		store %16, %3
		br %6
	17:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_160(v60, v61, v62, v63, v64, 1, v67, v68, v69, v70, v71, v72, 0, 3, 4) -> f_161(v60, v61, v62, v63, v64, 1, v67, v68, v69, v70, v71, v72, 0, 3, 4) :|: 0 = 0
f_161(v60, v61, v62, v63, v64, 1, v67, v68, v69, v70, v71, v72, 0, 3, 4) -> f_162(v60, v61, v62, v63, v64, 1, v67, v68, v69, v70, v71, v72, 0, 3, 4) :|: TRUE
f_162(v60, v61, v62, v63, v64, 1, v67, v68, v69, v70, v71, v72, 0, 3, 4) -> f_163(v60, v61, v62, v63, v64, 1, v74, v68, v69, v70, v71, v72, 0, 3, 4) :|: TRUE
f_163(v60, v61, v62, v63, v64, 1, v74, v68, v69, v70, v71, v72, 0, 3, 4) -> f_164(v60, v61, v62, v63, v64, 1, v74, v68, v69, v70, v71, v72, 0, 3, 4) :|: TRUE
f_164(v60, v61, v62, v63, v64, 1, v74, v68, v69, v70, v71, v72, 0, 3, 4) -> f_165(v60, v61, v62, v63, v64, 1, v74, v69, v70, v71, v72, 0, 3, 4) :|: 0 = 0
f_165(v60, v61, v62, v63, v64, 1, v74, v69, v70, v71, v72, 0, 3, 4) -> f_166(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 4) :|: 1 + v76 = v69 && 0 <= 1 + v76
f_166(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 4) -> f_167(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 4) :|: TRUE
f_167(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 4) -> f_168(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 4) :|: 0 = 0
f_168(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 4) -> f_169(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 2, 4) :|: 0 <= v76 && 1 <= v69 && 2 <= v63
f_169(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 2, 4) -> f_171(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 2, 4) :|: 0 = 0
f_171(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 2, 4) -> f_173(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 2, 4) :|: 0 = 0
f_173(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 2, 4) -> f_175(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 2, 4) :|: TRUE
f_175(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 2, 4) -> f_177(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 2, 4) :|: TRUE
f_177(v60, v61, v62, v63, v64, 1, v74, v69, v76, v70, v71, v72, 0, 3, 2, 4) -> f_159(v60, v61, v62, v63, v64, 1, 1, v74, v69, v76, v70, v71, v72, 0, 3, 4) :|: TRUE
f_159(v60, v61, v62, v63, v64, v65, 1, v67, v68, v69, v70, v71, v72, 0, 3, 4) -> f_160(v60, v61, v62, v63, v64, 1, v67, v68, v69, v70, v71, v72, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_160(v60:0, v61:0, v62:0, v63:0, v64:0, 1, v67:0, v68:0, 1 + v76:0, v70:0, v71:0, v72:0, 0, 3, 4) -> f_160(v60:0, v61:0, v62:0, v63:0, v64:0, 1, v74:0, 1 + v76:0, v76:0, v70:0, v71:0, v72:0, 0, 3, 4) :|: v76:0 > -1 && v63:0 > 1
Filtered unneeded arguments:
   f_160(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_160(x4, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_160(v63:0, sum~cons_1~v76:0) -> f_160(v63:0, v76:0) :|: v76:0 > -1 && v63:0 > 1 && sum~cons_1~v76:0 = 1 + v76:0

----------------------------------------

(8)
Obligation:
Rules:
f_160(v63:0, sum~cons_1~v76:0) -> f_160(v63:0, v76:0) :|: v76:0 > -1 && v63:0 > 1 && sum~cons_1~v76:0 = 1 + v76:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_160(v63:0:0, sum~cons_1~v76:0:0) -> f_160(v63:0:0, v76:0:0) :|: v76:0:0 > -1 && v63:0:0 > 1 && sum~cons_1~v76:0:0 = 1 + v76:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_160(x, x1)] = x1

The following rules are decreasing:
f_160(v63:0:0, sum~cons_1~v76:0:0) -> f_160(v63:0:0, v76:0:0) :|: v76:0:0 > -1 && v63:0:0 > 1 && sum~cons_1~v76:0:0 = 1 + v76:0:0
The following rules are bounded:
f_160(v63:0:0, sum~cons_1~v76:0:0) -> f_160(v63:0:0, v76:0:0) :|: v76:0:0 > -1 && v63:0:0 > 1 && sum~cons_1~v76:0:0 = 1 + v76:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
