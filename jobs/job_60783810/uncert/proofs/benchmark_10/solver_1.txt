YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/7tXn5.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 40 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 7875 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 79 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (13) IntTRS
        (14) TerminationGraphProcessor [EQUIVALENT, 2 ms]
        (15) IntTRS
        (16) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (21) YES
    (22) LLVM Symbolic Execution SCC
        (23) SCC2IRS [SOUND, 16 ms]
        (24) IntTRS
        (25) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (26) IntTRS
        (27) RankingReductionPairProof [EQUIVALENT, 10 ms]
        (28) YES
    (29) LLVM Symbolic Execution SCC
        (30) SCC2IRS [SOUND, 21 ms]
        (31) IntTRS
        (32) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (33) IntTRS
        (34) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (35) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/7tXn5.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/7tXn5.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%3 = alloca *i32, align 8
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store 0, %6
		store 0, %5
		br %7
	7:
		%8 = load %5
		%9 = load %4
		%10 = icmp slt %8 %9
		br %10, %11, %32
	11:
		br %12
	12:
		%13 = load %3
		%14 = load %5
		%15 = sext i32 %14 to i64
		%16 = getelementptr %13, %15
		%17 = load %16
		%18 = icmp sgt %17 0
		br %18, %19, %28
	19:
		%20 = load %3
		%21 = load %5
		%22 = sext i32 %21 to i64
		%23 = getelementptr %20, %22
		%24 = load %23
		%25 = add i32 %24, -1
		store %25, %23
		%26 = load %6
		%27 = add i32 %26, 1
		store %27, %6
		br %12
	28:
		br %29
	29:
		%30 = load %5
		%31 = add i32 %30, 1
		store %31, %5
		br %7
	32:
		%33 = load %6
		ret %33

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 49
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %7, %8
	7:
		store 1, %2
		br %8
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%9 = load %2
		%10 = sext i32 %9 to i64
		%11 = mul i64 %10, 4
		%12 = alloca i8, numElementsLit: %11, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %3
		%14 = load %3
		%15 = load %2
		%16 = call i32 @test_fun(*i32 %14, i32 %15)
		%17 = load %1
		ret %17


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 55 rulesP rules:
f_1118(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2457, v2458, v2459, 0, v2461, v2462, v2463, v2464, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2468, v2469, v2470, 3, 7, 4, 2, 8) -> f_1122(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2457, v2458, v2459, 0, v2461, v2462, v2463, v2464, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2468, v2469, v2470, 3, 7, 4, 2, 8) :|: 0 = 0
f_1122(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2457, v2458, v2459, 0, v2461, v2462, v2463, v2464, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2468, v2469, v2470, 3, 7, 4, 2, 8) -> f_1126(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2457, v2458, v2459, 0, v2461, v2462, v2463, v2464, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2468, v2469, v2470, 3, 7, 4, 2, 8) :|: 0 = 0
f_1126(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2457, v2458, v2459, 0, v2461, v2462, v2463, v2464, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2468, v2469, v2470, 3, 7, 4, 2, 8) -> f_1129(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2458, v2459, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2468, v2469, v2470, 3, 7, 4, 2, 8) :|: 0 = 0
f_1129(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2458, v2459, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2468, v2469, v2470, 3, 7, 4, 2, 8) -> f_1131(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2459, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) :|: v2592 = v2449 + 4 * v2455 && 5 <= v2592
f_1131(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2459, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) -> f_1133(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) :|: TRUE
f_1133(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) -> f_1136(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) :|: 0 < v2593
f_1133(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) -> f_1137(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) :|: v2593 <= 0
f_1136(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) -> f_1140(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, v2461, v2462, 0, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) :|: 0 = 0
f_1140(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, v2461, v2462, 0, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) -> f_1144(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, v2461, v2462, 0, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) :|: TRUE
f_1144(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, v2461, v2462, 0, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) -> f_1210(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, v2461, v2462, 1, 0, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) :|: TRUE
f_1210(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3243, v3244, v3245, v3246, v3247, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) -> f_1212(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3243, v3244, v3245, v3246, v3247, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) :|: 0 = 0
f_1212(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3243, v3244, v3245, v3246, v3247, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) -> f_1214(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3243, v3244, v3245, v3246, v3247, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) :|: 0 = 0
f_1214(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3243, v3244, v3245, v3246, v3247, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) -> f_1216(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3244, v3245, v3246, v3247, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) :|: 0 = 0
f_1216(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3244, v3245, v3246, v3247, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) -> f_1218(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3245, v3246, v3247, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, v3244, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) :|: v3241 = v3233 + 4 * v3239
f_1218(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3245, v3246, v3247, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, v3244, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) -> f_1220(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3246, v3247, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, v3244, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) :|: 0 = 0
f_1220(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3246, v3247, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, v3244, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) -> f_1222(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3442, v3247, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, v3244, v3246, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) :|: 1 + v3442 = v3242 && 0 <= v3442
f_1222(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3442, v3247, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, v3244, v3246, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) -> f_1223(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3442, v3247, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) :|: TRUE
f_1223(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3442, v3247, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) -> f_1224(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3442, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) :|: 0 = 0
f_1224(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3442, v3248, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) -> f_1225(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3442, v3248, v3444, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) :|: v3444 = 1 + v3248 && 2 <= v3444
f_1225(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3442, v3248, v3444, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) -> f_1226(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3442, v3248, v3444, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) :|: TRUE
f_1226(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3442, v3248, v3444, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) -> f_1227(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3442, v3248, v3444, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) :|: TRUE
f_1227(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3442, v3248, v3444, v3249, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) -> f_1196(v3233, v3234, v3235, v3236, v3237, v3238, v3239, 1, v3241, v3242, v3249, v3442, v3248, v3444, v3250, v3256, v3251, v3257, v3252, v3258, v3259, v3260, v3261, v3262, v3263, v3265, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: TRUE
f_1196(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3176, v3177, v3178, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1198(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3176, v3177, v3178, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: 0 = 0
f_1198(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3176, v3177, v3178, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1200(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3176, v3177, v3178, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: 0 = 0
f_1200(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3176, v3177, v3178, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1202(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3176, v3177, v3178, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: 0 = 0
f_1202(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3176, v3177, v3178, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1203(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3176, v3177, v3178, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: v3175 = v3167 + 4 * v3173
f_1203(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3176, v3177, v3178, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1204(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3178, v3177, v3176, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: 0 = 0
f_1204(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3178, v3177, v3176, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1205(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3178, v3177, v3176, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: 0 < v3178 && 2 <= v3176
f_1204(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3178, v3177, v3176, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1206(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3177, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: v3178 <= 0 && v3176 = 1 && v3178 = 0 && 0 = 0
f_1205(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3178, v3177, v3176, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1207(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3178, v3177, v3176, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: 0 = 0
f_1207(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3178, v3177, v3176, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1209(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3178, v3177, v3176, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: TRUE
f_1209(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3178, v3177, v3176, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1210(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, v3178, v3173, v3175, v3176, v3178, v3179, v3180, v3177, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, 0, v3264, v3267, v3253, v3254, v3255, 3, 7, 4, 2, 5, 8) :|: TRUE
f_1206(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3177, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1208(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3177, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: 0 = 0
f_1208(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3177, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1211(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3177, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: TRUE
f_1211(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3177, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1213(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3177, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: TRUE
f_1213(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3177, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1215(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: 0 = 0
f_1215(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1217(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3384, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: v3384 = 1 + v3173 && 2 <= v3384
f_1217(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3384, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1219(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3384, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: TRUE
f_1219(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3384, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1221(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3384, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) :|: TRUE
f_1221(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, v3384, v3179, v3180, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v3195, v3198, v3184, v3185, v3186, 3, 7, 4, 2, 5, 8) -> f_1166(v3167, v3168, v3169, v3170, v3171, v3172, v3173, 1, v3175, 0, 0, v3173, v3175, v3179, v3180, v3384, v3181, v3187, v3182, v3188, v3183, v3189, v3190, v3191, v3192, v3193, v3194, v3196, v2882, v2883, v2884, 3, 7, 4, 8) :|: TRUE
f_1166(v2863, v2864, v2865, v2866, v2867, v2868, v2869, 1, v2871, v2872, 0, v2874, v2875, v2876, v2877, v2878, v2879, v2885, v2880, v2886, v2881, v2887, v2888, v2889, v2890, v2891, v2892, v2893, v2882, v2883, v2884, 3, 7, 4, 8) -> f_1170(v2863, v2864, v2865, v2866, v2867, v2868, v2878, 1, v2869, v2871, v2872, 0, v2874, v2875, v2876, v2877, v2879, v2885, v2880, v2886, v2881, v2887, v2888, v2889, v2890, v2891, v2892, v2893, v2882, v2883, v2884, 3, 7, 4, 8) :|: 0 = 0
f_1170(v2863, v2864, v2865, v2866, v2867, v2868, v2878, 1, v2869, v2871, v2872, 0, v2874, v2875, v2876, v2877, v2879, v2885, v2880, v2886, v2881, v2887, v2888, v2889, v2890, v2891, v2892, v2893, v2882, v2883, v2884, 3, 7, 4, 8) -> f_1174(v2863, v2864, v2865, v2866, v2867, v2868, v2878, 1, v2869, v2871, v2872, 0, v2874, v2875, v2876, v2877, v2879, v2885, v2880, v2886, v2881, v2887, v2888, v2889, v2890, v2891, v2892, v2893, v2882, v2883, v2884, 3, 7, 4, 8) :|: 0 = 0
f_1174(v2863, v2864, v2865, v2866, v2867, v2868, v2878, 1, v2869, v2871, v2872, 0, v2874, v2875, v2876, v2877, v2879, v2885, v2880, v2886, v2881, v2887, v2888, v2889, v2890, v2891, v2892, v2893, v2882, v2883, v2884, 3, 7, 4, 8) -> f_1179(v2863, v2864, v2865, v2866, v2867, v2868, v2878, 1, v2869, v2871, v2872, 0, v2874, v2875, v2876, v2877, v2879, v2885, v2880, v2886, v2881, v2887, v2888, v2889, v2890, v2891, v2892, v2893, v2882, v2883, v2884, 3, 7, 4, 2, 8) :|: v2878 < v2864 && 2 <= v2864 && 8 <= v2888
f_1179(v2863, v2864, v2865, v2866, v2867, v2868, v2878, 1, v2869, v2871, v2872, 0, v2874, v2875, v2876, v2877, v2879, v2885, v2880, v2886, v2881, v2887, v2888, v2889, v2890, v2891, v2892, v2893, v2882, v2883, v2884, 3, 7, 4, 2, 8) -> f_1185(v2863, v2864, v2865, v2866, v2867, v2868, v2878, 1, v2869, v2871, v2872, 0, v2874, v2875, v2876, v2877, v2879, v2885, v2880, v2886, v2881, v2887, v2888, v2889, v2890, v2891, v2892, v2893, v2882, v2883, v2884, 3, 7, 4, 2, 8) :|: 0 = 0
f_1185(v2863, v2864, v2865, v2866, v2867, v2868, v2878, 1, v2869, v2871, v2872, 0, v2874, v2875, v2876, v2877, v2879, v2885, v2880, v2886, v2881, v2887, v2888, v2889, v2890, v2891, v2892, v2893, v2882, v2883, v2884, 3, 7, 4, 2, 8) -> f_1191(v2863, v2864, v2865, v2866, v2867, v2868, v2878, 1, v2869, v2871, v2872, 0, v2874, v2875, v2876, v2877, v2879, v2885, v2880, v2886, v2881, v2887, v2888, v2889, v2890, v2891, v2892, v2893, v2882, v2883, v2884, 3, 7, 4, 2, 8) :|: TRUE
f_1191(v2863, v2864, v2865, v2866, v2867, v2868, v2878, 1, v2869, v2871, v2872, 0, v2874, v2875, v2876, v2877, v2879, v2885, v2880, v2886, v2881, v2887, v2888, v2889, v2890, v2891, v2892, v2893, v2882, v2883, v2884, 3, 7, 4, 2, 8) -> f_1113(v2863, v2864, v2865, v2866, v2867, v2868, v2878, 1, v2869, v2871, v2872, 0, v2874, v2875, v2876, v2877, v2879, v2885, v2880, v2886, v2881, v2887, v2888, v2889, v2890, v2891, v2892, v2893, v2468, v2469, v2470, 3, 7, 4, 2, 8) :|: TRUE
f_1113(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2457, v2458, v2459, 0, v2461, v2462, v2463, v2464, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2468, v2469, v2470, 3, 7, 4, 2, 8) -> f_1118(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2457, v2458, v2459, 0, v2461, v2462, v2463, v2464, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2468, v2469, v2470, 3, 7, 4, 2, 8) :|: TRUE
f_1137(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) -> f_1141(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) :|: 0 = 0
f_1141(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) -> f_1145(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) :|: TRUE
f_1145(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) -> f_1149(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) :|: TRUE
f_1149(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2457, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) -> f_1153(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) :|: 0 = 0
f_1153(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) -> f_1157(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2761, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) :|: v2761 = 1 + v2455 && 2 <= v2761
f_1157(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2761, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) -> f_1161(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2761, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) :|: TRUE
f_1161(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2761, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) -> f_1165(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2761, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) :|: TRUE
f_1165(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2761, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2458, v2459, v2468, v2469, v2470, 3, 7, 4, 2, 8, 5) -> f_1166(v2449, v2450, v2451, v2452, v2453, v2454, v2455, 1, v2592, v2593, 0, v2461, v2462, v2463, v2464, v2761, v2465, v2471, v2466, v2472, v2467, v2473, v2474, v2475, v2476, v2477, v2478, v2479, v2882, v2883, v2884, 3, 7, 4, 8) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_1204(v3167:0, v3168:0, v3169:0, v3170:0, v3171:0, v3172:0, v3173:0, 1, v3167:0 + 4 * v3173:0, 1 + v3442:0, v3177:0, v3176:0, v3179:0, v3180:0, v3181:0, v3187:0, v3182:0, v3188:0, v3183:0, v3189:0, v3190:0, v3191:0, v3192:0, v3193:0, v3194:0, v3196:0, 0, v3195:0, v3198:0, v3184:0, v3185:0, v3186:0, 3, 7, 4, 2, 5, 8) -> f_1204(v3167:0, v3168:0, v3169:0, v3170:0, v3171:0, v3172:0, v3173:0, 1, v3167:0 + 4 * v3173:0, v3442:0, v3177:0, 1 + v3442:0, v3180:0, 1 + v3180:0, v3181:0, v3187:0, v3182:0, v3188:0, v3183:0, v3189:0, v3190:0, v3191:0, v3192:0, v3193:0, v3194:0, v3196:0, 0, v3195:1, v3198:1, v3184:1, v3185:1, v3186:1, 3, 7, 4, 2, 5, 8) :|: v3442:0 > -1 && v3180:0 > 0 && v3176:0 > 1
f_1118(v2449:0, v2450:0, v2451:0, v2452:0, v2453:0, v2454:0, v2455:0, 1, v2457:0, v2458:0, v2459:0, 0, v2461:0, v2462:0, v2463:0, v2464:0, v2465:0, v2471:0, v2466:0, v2472:0, v2467:0, v2473:0, v2474:0, v2475:0, v2476:0, v2477:0, v2478:0, v2479:0, v2468:0, v2469:0, v2470:0, 3, 7, 4, 2, 8) -> f_1118(v2449:0, v2450:0, v2451:0, v2452:0, v2453:0, v2454:0, 1 + v2455:0, 1, v2455:0, v2449:0 + 4 * v2455:0, v2593:0, 0, v2461:0, v2462:0, v2463:0, v2464:0, v2465:0, v2471:0, v2466:0, v2472:0, v2467:0, v2473:0, v2474:0, v2475:0, v2476:0, v2477:0, v2478:0, v2479:0, v2468:1, v2469:1, v2470:1, 3, 7, 4, 2, 8) :|: v2449:0 + 4 * v2455:0 > 4 && v2593:0 < 1 && v2450:0 > 1 && v2450:0 > 1 + v2455:0 && v2455:0 > 0 && v2474:0 > 7
f_1118(v2449:0, v2450:0, v2451:0, v2452:0, v2453:0, v2454:0, v2455:0, 1, v2457:0, v2458:0, v2459:0, 0, v2461:0, v2462:0, v2463:0, v2464:0, v2465:0, v2471:0, v2466:0, v2472:0, v2467:0, v2473:0, v2474:0, v2475:0, v2476:0, v2477:0, v2478:0, v2479:0, v2468:0, v2469:0, v2470:0, 3, 7, 4, 2, 8) -> f_1204(v2449:0, v2450:0, v2451:0, v2452:0, v2453:0, v2454:0, v2455:0, 1, v2449:0 + 4 * v2455:0, v3442:0, v2457:0, 1 + v3442:0, v2464:0, 1 + v2464:0, v2465:0, v2471:0, v2466:0, v2472:0, v2467:0, v2473:0, v2474:0, v2475:0, v2476:0, v2477:0, v2478:0, v2479:0, 0, v3195:0, v3198:0, v3184:0, v3185:0, v3186:0, 3, 7, 4, 2, 5, 8) :|: v2449:0 + 4 * v2455:0 > 4 && v3442:0 > -1 && v2464:0 > 0
f_1204(v3167:0, v3168:0, v3169:0, v3170:0, v3171:0, v3172:0, v3173:0, 1, v3175:0, 0, v3177:0, 1, v3179:0, v3180:0, v3181:0, v3187:0, v3182:0, v3188:0, v3183:0, v3189:0, v3190:0, v3191:0, v3192:0, v3193:0, v3194:0, v3196:0, 0, v3195:0, v3198:0, v3184:0, v3185:0, v3186:0, 3, 7, 4, 2, 5, 8) -> f_1118(v3167:0, v3168:0, v3169:0, v3170:0, v3171:0, v3172:0, 1 + v3173:0, 1, v3173:0, v3175:0, 0, 0, v3173:0, v3175:0, v3179:0, v3180:0, v3181:0, v3187:0, v3182:0, v3188:0, v3183:0, v3189:0, v3190:0, v3191:0, v3192:0, v3193:0, v3194:0, v3196:0, v2468:0, v2469:0, v2470:0, 3, 7, 4, 2, 8) :|: v3173:0 > 0 && v3168:0 > 1 && v3190:0 > 7 && v3168:0 > 1 + v3173:0
Filtered unneeded arguments:
   f_1204(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38) -> f_1204(x1, x2, x7, x9, x10, x12, x14, x21)
   f_1118(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36) -> f_1118(x1, x2, x7, x16, x23)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_1204(v3167:0, v3168:0, v3173:0, sum~v3167:0~times~cons_4~v3173:0, sum~cons_1~v3442:0, v3176:0, v3180:0, v3190:0) -> f_1204(v3167:0, v3168:0, v3173:0, v3167:0 + 4 * v3173:0, v3442:0, 1 + v3442:0, 1 + v3180:0, v3190:0) :|: v3180:0 > 0 && v3176:0 > 1 && v3442:0 > -1 && sum~v3167:0~times~cons_4~v3173:0 = v3167:0 + 4 * v3173:0 && sum~cons_1~v3442:0 = 1 + v3442:0
f_1118(v2449:0, v2450:0, v2455:0, v2464:0, v2474:0) -> f_1118(v2449:0, v2450:0, 1 + v2455:0, v2464:0, v2474:0) :|: v2450:0 > 1 && v2449:0 + 4 * v2455:0 > 4 && v2450:0 > 1 + v2455:0 && v2474:0 > 7 && v2455:0 > 0
f_1118(v2449:0, v2450:0, v2455:0, v2464:0, v2474:0) -> f_1204(v2449:0, v2450:0, v2455:0, v2449:0 + 4 * v2455:0, v3442:0, 1 + v3442:0, 1 + v2464:0, v2474:0) :|: v3442:0 > -1 && v2464:0 > 0 && v2449:0 + 4 * v2455:0 > 4
f_1204(v3167:0, v3168:0, v3173:0, v3175:0, cons_0, cons_1, v3180:0, v3190:0) -> f_1118(v3167:0, v3168:0, 1 + v3173:0, v3180:0, v3190:0) :|: v3168:0 > 1 && v3173:0 > 0 && v3168:0 > 1 + v3173:0 && v3190:0 > 7 && cons_0 = 0 && cons_1 = 1

----------------------------------------

(9)
Obligation:
Rules:
f_1204(v3167:0, v3168:0, v3173:0, sum~v3167:0~times~cons_4~v3173:0, sum~cons_1~v3442:0, v3176:0, v3180:0, v3190:0) -> f_1204(v3167:0, v3168:0, v3173:0, v3167:0 + 4 * v3173:0, v3442:0, 1 + v3442:0, 1 + v3180:0, v3190:0) :|: v3180:0 > 0 && v3176:0 > 1 && v3442:0 > -1 && sum~v3167:0~times~cons_4~v3173:0 = v3167:0 + 4 * v3173:0 && sum~cons_1~v3442:0 = 1 + v3442:0
f_1118(v2449:0, v2450:0, v2455:0, v2464:0, v2474:0) -> f_1118(v2449:0, v2450:0, 1 + v2455:0, v2464:0, v2474:0) :|: v2450:0 > 1 && v2449:0 + 4 * v2455:0 > 4 && v2450:0 > 1 + v2455:0 && v2474:0 > 7 && v2455:0 > 0
f_1118(x, x1, x2, x3, x4) -> f_1204(x, x1, x2, x + 4 * x2, x5, 1 + x5, 1 + x3, x4) :|: x5 > -1 && x3 > 0 && x + 4 * x2 > 4
f_1204(x6, x7, x8, x9, x10, x11, x12, x13) -> f_1118(x6, x7, 1 + x8, x12, x13) :|: x7 > 1 && x8 > 0 && x7 > 1 + x8 && x13 > 7 && x10 = 0 && x11 = 1

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_1118(v2449:0:0, v2450:0:0, v2455:0:0, v2464:0:0, v2474:0:0) -> f_1118(v2449:0:0, v2450:0:0, 1 + v2455:0:0, v2464:0:0, v2474:0:0) :|: v2474:0:0 > 7 && v2455:0:0 > 0 && v2450:0:0 > 1 + v2455:0:0 && v2449:0:0 + 4 * v2455:0:0 > 4 && v2450:0:0 > 1
f_1118(x:0, x1:0, x2:0, x3:0, x4:0) -> f_1204(x:0, x1:0, x2:0, x:0 + 4 * x2:0, x5:0, 1 + x5:0, 1 + x3:0, x4:0) :|: x5:0 > -1 && x3:0 > 0 && x:0 + 4 * x2:0 > 4
f_1204(v3167:0:0, v3168:0:0, v3173:0:0, sum~v3167:0:0~times~cons_4~v3173:0:0, sum~cons_1~v3442:0:0, v3176:0:0, v3180:0:0, v3190:0:0) -> f_1204(v3167:0:0, v3168:0:0, v3173:0:0, v3167:0:0 + 4 * v3173:0:0, v3442:0:0, 1 + v3442:0:0, 1 + v3180:0:0, v3190:0:0) :|: v3180:0:0 > 0 && v3176:0:0 > 1 && v3442:0:0 > -1 && sum~v3167:0:0~times~cons_4~v3173:0:0 = v3167:0:0 + 4 * v3173:0:0 && sum~cons_1~v3442:0:0 = 1 + v3442:0:0
f_1204(x6:0, x7:0, x8:0, x9:0, cons_0, cons_1, x12:0, x13:0) -> f_1118(x6:0, x7:0, 1 + x8:0, x12:0, x13:0) :|: x7:0 > 1 + x8:0 && x13:0 > 7 && x8:0 > 0 && x7:0 > 1 && cons_0 = 0 && cons_1 = 1

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1118(x, x1, x2, x3, x4)] = -10 + x1 - x2 + x4
[f_1204(x5, x6, x7, x8, x9, x10, x11, x12)] = -10 + x12 + x6 - x7

The following rules are decreasing:
f_1118(v2449:0:0, v2450:0:0, v2455:0:0, v2464:0:0, v2474:0:0) -> f_1118(v2449:0:0, v2450:0:0, 1 + v2455:0:0, v2464:0:0, v2474:0:0) :|: v2474:0:0 > 7 && v2455:0:0 > 0 && v2450:0:0 > 1 + v2455:0:0 && v2449:0:0 + 4 * v2455:0:0 > 4 && v2450:0:0 > 1
f_1204(x6:0, x7:0, x8:0, x9:0, cons_0, cons_1, x12:0, x13:0) -> f_1118(x6:0, x7:0, 1 + x8:0, x12:0, x13:0) :|: x7:0 > 1 + x8:0 && x13:0 > 7 && x8:0 > 0 && x7:0 > 1 && cons_0 = 0 && cons_1 = 1
The following rules are bounded:
f_1118(v2449:0:0, v2450:0:0, v2455:0:0, v2464:0:0, v2474:0:0) -> f_1118(v2449:0:0, v2450:0:0, 1 + v2455:0:0, v2464:0:0, v2474:0:0) :|: v2474:0:0 > 7 && v2455:0:0 > 0 && v2450:0:0 > 1 + v2455:0:0 && v2449:0:0 + 4 * v2455:0:0 > 4 && v2450:0:0 > 1
f_1204(x6:0, x7:0, x8:0, x9:0, cons_0, cons_1, x12:0, x13:0) -> f_1118(x6:0, x7:0, 1 + x8:0, x12:0, x13:0) :|: x7:0 > 1 + x8:0 && x13:0 > 7 && x8:0 > 0 && x7:0 > 1 && cons_0 = 0 && cons_1 = 1

----------------------------------------

(13)
Obligation:
Rules:
f_1118(x:0, x1:0, x2:0, x3:0, x4:0) -> f_1204(x:0, x1:0, x2:0, x:0 + 4 * x2:0, x5:0, 1 + x5:0, 1 + x3:0, x4:0) :|: x5:0 > -1 && x3:0 > 0 && x:0 + 4 * x2:0 > 4
f_1204(v3167:0:0, v3168:0:0, v3173:0:0, sum~v3167:0:0~times~cons_4~v3173:0:0, sum~cons_1~v3442:0:0, v3176:0:0, v3180:0:0, v3190:0:0) -> f_1204(v3167:0:0, v3168:0:0, v3173:0:0, v3167:0:0 + 4 * v3173:0:0, v3442:0:0, 1 + v3442:0:0, 1 + v3180:0:0, v3190:0:0) :|: v3180:0:0 > 0 && v3176:0:0 > 1 && v3442:0:0 > -1 && sum~v3167:0:0~times~cons_4~v3173:0:0 = v3167:0:0 + 4 * v3173:0:0 && sum~cons_1~v3442:0:0 = 1 + v3442:0:0

----------------------------------------

(14) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(15)
Obligation:
Rules:
f_1204(v3167:0:0, v3168:0:0, v3173:0:0, sum~v3167:0:0~times~cons_4~v3173:0:0, sum~cons_1~v3442:0:0, v3176:0:0, v3180:0:0, v3190:0:0) -> f_1204(v3167:0:0, v3168:0:0, v3173:0:0, v3167:0:0 + 4 * v3173:0:0, v3442:0:0, 1 + v3442:0:0, 1 + v3180:0:0, v3190:0:0) :|: v3180:0:0 > 0 && v3176:0:0 > 1 && v3442:0:0 > -1 && sum~v3167:0:0~times~cons_4~v3173:0:0 = v3167:0:0 + 4 * v3173:0:0 && sum~cons_1~v3442:0:0 = 1 + v3442:0:0

----------------------------------------

(16) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(17)
Obligation:
Rules:
f_1204(v3167:0:0:0, v3168:0:0:0, v3173:0:0:0, sum~v3167:0:0:0~times~cons_4~v3173:0:0:0, sum~cons_1~v3442:0:0:0, v3176:0:0:0, v3180:0:0:0, v3190:0:0:0) -> f_1204(v3167:0:0:0, v3168:0:0:0, v3173:0:0:0, v3167:0:0:0 + 4 * v3173:0:0:0, v3442:0:0:0, 1 + v3442:0:0:0, 1 + v3180:0:0:0, v3190:0:0:0) :|: v3180:0:0:0 > 0 && v3176:0:0:0 > 1 && v3442:0:0:0 > -1 && sum~v3167:0:0:0~times~cons_4~v3173:0:0:0 = v3167:0:0:0 + 4 * v3173:0:0:0 && sum~cons_1~v3442:0:0:0 = 1 + v3442:0:0:0

----------------------------------------

(18) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1204(x1, x2, x3, x4, x5, x6, x7, x8) -> f_1204(x1, x3, x4, x5, x6, x7)

----------------------------------------

(19)
Obligation:
Rules:
f_1204(v3167:0:0:0, v3173:0:0:0, sum~v3167:0:0:0~times~cons_4~v3173:0:0:0, sum~cons_1~v3442:0:0:0, v3176:0:0:0, v3180:0:0:0) -> f_1204(v3167:0:0:0, v3173:0:0:0, v3167:0:0:0 + 4 * v3173:0:0:0, v3442:0:0:0, 1 + v3442:0:0:0, 1 + v3180:0:0:0) :|: v3180:0:0:0 > 0 && v3176:0:0:0 > 1 && v3442:0:0:0 > -1 && sum~v3167:0:0:0~times~cons_4~v3173:0:0:0 = v3167:0:0:0 + 4 * v3173:0:0:0 && sum~cons_1~v3442:0:0:0 = 1 + v3442:0:0:0

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1204(x, x1, x2, x3, x4, x5)] = -1 + x3

The following rules are decreasing:
f_1204(v3167:0:0:0, v3173:0:0:0, sum~v3167:0:0:0~times~cons_4~v3173:0:0:0, sum~cons_1~v3442:0:0:0, v3176:0:0:0, v3180:0:0:0) -> f_1204(v3167:0:0:0, v3173:0:0:0, v3167:0:0:0 + 4 * v3173:0:0:0, v3442:0:0:0, 1 + v3442:0:0:0, 1 + v3180:0:0:0) :|: v3180:0:0:0 > 0 && v3176:0:0:0 > 1 && v3442:0:0:0 > -1 && sum~v3167:0:0:0~times~cons_4~v3173:0:0:0 = v3167:0:0:0 + 4 * v3173:0:0:0 && sum~cons_1~v3442:0:0:0 = 1 + v3442:0:0:0
The following rules are bounded:
f_1204(v3167:0:0:0, v3173:0:0:0, sum~v3167:0:0:0~times~cons_4~v3173:0:0:0, sum~cons_1~v3442:0:0:0, v3176:0:0:0, v3180:0:0:0) -> f_1204(v3167:0:0:0, v3173:0:0:0, v3167:0:0:0 + 4 * v3173:0:0:0, v3442:0:0:0, 1 + v3442:0:0:0, 1 + v3180:0:0:0) :|: v3180:0:0:0 > 0 && v3176:0:0:0 > 1 && v3442:0:0:0 > -1 && sum~v3167:0:0:0~times~cons_4~v3173:0:0:0 = v3167:0:0:0 + 4 * v3173:0:0:0 && sum~cons_1~v3442:0:0:0 = 1 + v3442:0:0:0

----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
SCC
----------------------------------------

(23) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_981(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1693, v1694, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) -> f_986(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1693, v1694, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) :|: 0 = 0
f_986(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1693, v1694, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) -> f_991(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1693, v1694, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) :|: 0 = 0
f_991(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1693, v1694, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) -> f_996(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1693, v1694, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) :|: 0 = 0
f_996(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1693, v1694, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) -> f_1001(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1694, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8) :|: 0 = 0
f_1001(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1694, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8) -> f_1007(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1694, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8) :|: 1 + v1850 = v1692 && 0 <= v1850
f_1007(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1694, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8) -> f_1011(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1694, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8) :|: TRUE
f_1011(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1694, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8) -> f_1015(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8) :|: 0 = 0
f_1015(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8) -> f_1021(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) :|: v1854 = 1 + v1695 && 2 <= v1854
f_1021(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) -> f_1027(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) :|: TRUE
f_1027(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) -> f_1033(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) :|: TRUE
f_1033(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) -> f_1038(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) :|: 0 = 0
f_1038(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) -> f_1043(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) :|: 0 = 0
f_1043(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) -> f_1048(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) :|: 0 = 0
f_1048(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) -> f_1051(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) :|: 0 = 0
f_1051(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1850, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) -> f_1054(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1850, v1692, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) :|: 0 = 0
f_1054(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1850, v1692, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 8, 2) -> f_1057(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1850, v1692, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) :|: 0 < v1850 && 2 <= v1692
f_1057(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1850, v1692, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) -> f_1063(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1850, v1692, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) :|: 0 = 0
f_1063(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1850, v1692, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) -> f_1069(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1850, v1692, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) :|: TRUE
f_1069(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1850, v1692, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) -> f_976(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1850, v1692, v1695, v1854, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) :|: TRUE
f_976(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1693, v1694, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) -> f_981(v1684, v1685, v1686, v1687, v1688, v1689, 0, 1, v1692, v1693, v1694, v1695, v1696, v1702, v1697, v1703, v1698, v1704, v1705, v1706, v1707, v1708, v1709, v1699, v1700, v1701, 3, 7, 4, 2, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_981(v1684:0, v1685:0, v1686:0, v1687:0, v1688:0, v1689:0, 0, 1, 1 + v1850:0, v1693:0, v1694:0, v1695:0, v1696:0, v1702:0, v1697:0, v1703:0, v1698:0, v1704:0, v1705:0, v1706:0, v1707:0, v1708:0, v1709:0, v1699:0, v1700:0, v1701:0, 3, 7, 4, 2, 8) -> f_981(v1684:0, v1685:0, v1686:0, v1687:0, v1688:0, v1689:0, 0, 1, v1850:0, 1 + v1850:0, v1695:0, 1 + v1695:0, v1696:0, v1702:0, v1697:0, v1703:0, v1698:0, v1704:0, v1705:0, v1706:0, v1707:0, v1708:0, v1709:0, v1699:0, v1700:0, v1701:0, 3, 7, 4, 2, 8) :|: v1850:0 > 0 && v1695:0 > 0
Filtered unneeded arguments:
   f_981(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_981(x9, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_981(sum~cons_1~v1850:0, v1695:0) -> f_981(v1850:0, 1 + v1695:0) :|: v1850:0 > 0 && v1695:0 > 0 && sum~cons_1~v1850:0 = 1 + v1850:0

----------------------------------------

(24)
Obligation:
Rules:
f_981(sum~cons_1~v1850:0, v1695:0) -> f_981(v1850:0, 1 + v1695:0) :|: v1850:0 > 0 && v1695:0 > 0 && sum~cons_1~v1850:0 = 1 + v1850:0

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f_981(sum~cons_1~v1850:0:0, v1695:0:0) -> f_981(v1850:0:0, 1 + v1695:0:0) :|: v1850:0:0 > 0 && v1695:0:0 > 0 && sum~cons_1~v1850:0:0 = 1 + v1850:0:0

----------------------------------------

(27) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_981 ] = f_981_1

The following rules are decreasing:
f_981(sum~cons_1~v1850:0:0, v1695:0:0) -> f_981(v1850:0:0, 1 + v1695:0:0) :|: v1850:0:0 > 0 && v1695:0:0 > 0 && sum~cons_1~v1850:0:0 = 1 + v1850:0:0

The following rules are bounded:
f_981(sum~cons_1~v1850:0:0, v1695:0:0) -> f_981(v1850:0:0, 1 + v1695:0:0) :|: v1850:0:0 > 0 && v1695:0:0 > 0 && sum~cons_1~v1850:0:0 = 1 + v1850:0:0


----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
SCC
----------------------------------------

(30) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_945(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1589, v1590, v1591, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1596, v1597, v1598, 3, 7, 4, 2, 8) -> f_949(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1589, v1590, v1591, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1596, v1597, v1598, 3, 7, 4, 2, 8) :|: 0 = 0
f_949(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1589, v1590, v1591, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1596, v1597, v1598, 3, 7, 4, 2, 8) -> f_953(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1589, v1590, v1591, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1596, v1597, v1598, 3, 7, 4, 2, 8) :|: 0 = 0
f_953(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1589, v1590, v1591, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1596, v1597, v1598, 3, 7, 4, 2, 8) -> f_956(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1590, v1591, 0, v1589, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1596, v1597, v1598, 3, 7, 4, 2, 8) :|: 0 = 0
f_956(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1590, v1591, 0, v1589, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1596, v1597, v1598, 3, 7, 4, 2, 8) -> f_959(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1591, 0, v1589, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) :|: v1670 = v1581 + 4 * v1587 && 5 <= v1670
f_959(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1591, 0, v1589, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) -> f_962(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1589, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) :|: TRUE
f_962(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1589, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) -> f_968(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1589, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) :|: v1673 <= 0
f_968(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1589, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) -> f_974(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1589, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) :|: 0 = 0
f_974(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1589, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) -> f_980(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1589, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) :|: TRUE
f_980(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1589, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) -> f_985(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1589, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) :|: TRUE
f_985(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1589, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) -> f_990(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) :|: 0 = 0
f_990(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) -> f_995(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1785, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) :|: v1785 = 1 + v1587 && 2 <= v1785
f_995(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1785, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) -> f_1000(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1785, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) :|: TRUE
f_1000(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1785, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) -> f_1006(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1785, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) :|: TRUE
f_1006(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1670, v1673, 0, v1785, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) -> f_1010(v1581, v1582, v1583, v1584, v1585, v1586, v1785, 1, v1587, v1670, v1673, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) :|: 0 = 0
f_1010(v1581, v1582, v1583, v1584, v1585, v1586, v1785, 1, v1587, v1670, v1673, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) -> f_1014(v1581, v1582, v1583, v1584, v1585, v1586, v1785, 1, v1587, v1670, v1673, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) :|: 0 = 0
f_1014(v1581, v1582, v1583, v1584, v1585, v1586, v1785, 1, v1587, v1670, v1673, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 2, 8, 5) -> f_1019(v1581, v1582, v1583, v1584, v1585, v1586, v1785, 1, v1587, v1670, v1673, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 8, 12, 5, 2) :|: v1785 < v1582 && 3 <= v1582 && 12 <= v1602
f_1019(v1581, v1582, v1583, v1584, v1585, v1586, v1785, 1, v1587, v1670, v1673, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 8, 12, 5, 2) -> f_1025(v1581, v1582, v1583, v1584, v1585, v1586, v1785, 1, v1587, v1670, v1673, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 8, 12, 5, 2) :|: 0 = 0
f_1025(v1581, v1582, v1583, v1584, v1585, v1586, v1785, 1, v1587, v1670, v1673, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 8, 12, 5, 2) -> f_1031(v1581, v1582, v1583, v1584, v1585, v1586, v1785, 1, v1587, v1670, v1673, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 8, 12, 5, 2) :|: TRUE
f_1031(v1581, v1582, v1583, v1584, v1585, v1586, v1785, 1, v1587, v1670, v1673, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1590, v1591, v1596, v1597, v1598, 3, 7, 4, 8, 12, 5, 2) -> f_941(v1581, v1582, v1583, v1584, v1585, v1586, v1785, 1, v1587, v1670, v1673, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1596, v1597, v1598, 3, 7, 4, 2, 8) :|: TRUE
f_941(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1589, v1590, v1591, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1596, v1597, v1598, 3, 7, 4, 2, 8) -> f_945(v1581, v1582, v1583, v1584, v1585, v1586, v1587, 1, v1589, v1590, v1591, 0, v1593, v1599, v1594, v1600, v1595, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1596, v1597, v1598, 3, 7, 4, 2, 8) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_945(v1581:0, v1582:0, v1583:0, v1584:0, v1585:0, v1586:0, v1587:0, 1, v1589:0, v1590:0, v1591:0, 0, v1593:0, v1599:0, v1594:0, v1600:0, v1595:0, v1601:0, v1602:0, v1603:0, v1604:0, v1605:0, v1606:0, v1607:0, v1596:0, v1597:0, v1598:0, 3, 7, 4, 2, 8) -> f_945(v1581:0, v1582:0, v1583:0, v1584:0, v1585:0, v1586:0, 1 + v1587:0, 1, v1587:0, v1581:0 + 4 * v1587:0, v1673:0, 0, v1593:0, v1599:0, v1594:0, v1600:0, v1595:0, v1601:0, v1602:0, v1603:0, v1604:0, v1605:0, v1606:0, v1607:0, v1596:0, v1597:0, v1598:0, 3, 7, 4, 2, 8) :|: v1581:0 + 4 * v1587:0 > 4 && v1673:0 < 1 && v1587:0 > 0 && v1582:0 > 2 && v1602:0 > 11 && v1582:0 > 1 + v1587:0
Filtered unneeded arguments:
   f_945(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32) -> f_945(x1, x2, x7, x19)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_945(v1581:0, v1582:0, v1587:0, v1602:0) -> f_945(v1581:0, v1582:0, 1 + v1587:0, v1602:0) :|: v1587:0 > 0 && v1581:0 + 4 * v1587:0 > 4 && v1582:0 > 2 && v1582:0 > 1 + v1587:0 && v1602:0 > 11

----------------------------------------

(31)
Obligation:
Rules:
f_945(v1581:0, v1582:0, v1587:0, v1602:0) -> f_945(v1581:0, v1582:0, 1 + v1587:0, v1602:0) :|: v1587:0 > 0 && v1581:0 + 4 * v1587:0 > 4 && v1582:0 > 2 && v1582:0 > 1 + v1587:0 && v1602:0 > 11

----------------------------------------

(32) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(33)
Obligation:
Rules:
f_945(v1581:0:0, v1582:0:0, v1587:0:0, v1602:0:0) -> f_945(v1581:0:0, v1582:0:0, 1 + v1587:0:0, v1602:0:0) :|: v1582:0:0 > 1 + v1587:0:0 && v1602:0:0 > 11 && v1582:0:0 > 2 && v1581:0:0 + 4 * v1587:0:0 > 4 && v1587:0:0 > 0

----------------------------------------

(34) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_945(x, x1, x2, x3)] = -2 + x1 - x2

The following rules are decreasing:
f_945(v1581:0:0, v1582:0:0, v1587:0:0, v1602:0:0) -> f_945(v1581:0:0, v1582:0:0, 1 + v1587:0:0, v1602:0:0) :|: v1582:0:0 > 1 + v1587:0:0 && v1602:0:0 > 11 && v1582:0:0 > 2 && v1581:0:0 + 4 * v1587:0:0 > 4 && v1587:0:0 > 0
The following rules are bounded:
f_945(v1581:0:0, v1582:0:0, v1587:0:0, v1602:0:0) -> f_945(v1581:0:0, v1582:0:0, 1 + v1587:0:0, v1602:0:0) :|: v1582:0:0 > 1 + v1587:0:0 && v1602:0:0 > 11 && v1582:0:0 > 2 && v1581:0:0 + 4 * v1587:0:0 > 4 && v1587:0:0 > 0

----------------------------------------

(35)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
