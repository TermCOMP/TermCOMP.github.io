YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/I8wMx.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 25 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 4882 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 54 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 11 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 53 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/I8wMx.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/I8wMx.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "subxy" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		%8 = alloca *i32, align 8
		%9 = alloca *i32, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %8)
		%14 = alloca i8, numElementsLit: 4, align 16
		%15 = bitcast *i8 %14 to *i32
		store %15, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %9)
		%16 = alloca i8, numElementsLit: 4, align 16
		%17 = bitcast *i8 %16 to *i32
		store %17, %9
		%18 = load %4
		%19 = load %6
		store %18, %19
		%20 = load %5
		%21 = load %7
		store %20, %21
		%22 = load %8
		store 0, %22
		%23 = load %6
		%24 = load %23
		%25 = load %9
		store %24, %25
		%26 = load %7
		%27 = load %26
		%28 = icmp sle %27 0
		br %28, %33, %29
	29:
		%30 = load %6
		%31 = load %30
		%32 = icmp sle %31 0
		br %32, %33, %34
	33:
		store 0, %3
		br %63
	34:
		br %35
	35:
		%36 = load %9
		%37 = load %36
		%38 = icmp sgt %37 0
		br %38, %39, %46
	39:
		%40 = load %9
		%41 = load %40
		%42 = add i32 %41, -1
		store %42, %40
		%43 = load %8
		%44 = load %43
		%45 = add i32 %44, 1
		store %45, %43
		br %35
	46:
		br %47
	47:
		%48 = load %9
		%49 = load %48
		%50 = load %7
		%51 = load %50
		%52 = icmp slt %49 %51
		br %52, %53, %60
	53:
		%54 = load %9
		%55 = load %54
		%56 = add i32 %55, 1
		store %56, %54
		%57 = load %8
		%58 = load %57
		%59 = add i32 %58, -1
		store %59, %57
		br %47
	60:
		%61 = load %8
		%62 = load %61
		store %62, %3
		br %63
	63:
		%64 = load %3
		ret %64

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 80
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = load %2
		%7 = load %3
		%8 = call i32 @subxy(i32 %6, i32 %7)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_738(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v780, v781, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 4, 8) -> f_739(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v780, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 4, 8) :|: 0 = 0
f_739(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v780, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 4, 8) -> f_740(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v780, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 4, 8) :|: 0 = 0
f_740(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v780, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 4, 8) -> f_741(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v780, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 4, 8) :|: 0 = 0
f_741(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v780, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 4, 8) -> f_742(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v780, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) :|: v781 < v764 && 2 <= v764
f_742(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v780, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) -> f_744(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v780, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) :|: 0 = 0
f_744(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v780, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) -> f_746(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v780, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) :|: TRUE
f_746(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v780, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) -> f_748(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v780, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) :|: 0 = 0
f_748(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v780, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) -> f_750(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) :|: 0 = 0
f_750(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) -> f_752(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v818, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) :|: v818 = 1 + v781 && 2 <= v818
f_752(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v818, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) -> f_754(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v818, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) :|: TRUE
f_754(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v818, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) -> f_756(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v818, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) :|: 0 = 0
f_756(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v818, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) -> f_758(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v818, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) :|: 0 = 0
f_758(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v818, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) -> f_760(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v818, v783, v821, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) :|: 1 + v821 = v783
f_760(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v818, v783, v821, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) -> f_761(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v818, v783, v821, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) :|: TRUE
f_761(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v818, v783, v821, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) -> f_762(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v818, v783, v821, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) :|: TRUE
f_762(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v818, v783, v821, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 2, 4, 8) -> f_737(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v781, v818, v783, v821, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 4, 8) :|: TRUE
f_737(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v780, v781, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 4, 8) -> f_738(v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, 0, 1, v778, v779, v780, v781, v782, v783, v784, v787, v785, v788, v786, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_738(v763:0, v764:0, v765:0, v766:0, v767:0, v768:0, v769:0, v770:0, v771:0, v772:0, v773:0, v774:0, v775:0, 0, 1, v778:0, v779:0, v780:0, v781:0, v782:0, 1 + v821:0, v784:0, v787:0, v785:0, v788:0, v786:0, v789:0, v790:0, v791:0, v792:0, v793:0, v794:0, v795:0, v796:0, v797:0, v798:0, v799:0, v800:0, 3, 7, 4, 8) -> f_738(v763:0, v764:0, v765:0, v766:0, v767:0, v768:0, v769:0, v770:0, v771:0, v772:0, v773:0, v774:0, v775:0, 0, 1, v778:0, v779:0, v781:0, 1 + v781:0, 1 + v821:0, v821:0, v784:0, v787:0, v785:0, v788:0, v786:0, v789:0, v790:0, v791:0, v792:0, v793:0, v794:0, v795:0, v796:0, v797:0, v798:0, v799:0, v800:0, 3, 7, 4, 8) :|: v764:0 > 1 && v781:0 > 0 && v781:0 < v764:0
Filtered unneeded arguments:
   f_738(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42) -> f_738(x2, x19, x21)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_738(v764:0, v781:0, sum~cons_1~v821:0) -> f_738(v764:0, 1 + v781:0, v821:0) :|: v781:0 > 0 && v781:0 < v764:0 && v764:0 > 1 && sum~cons_1~v821:0 = 1 + v821:0

----------------------------------------

(9)
Obligation:
Rules:
f_738(v764:0, v781:0, sum~cons_1~v821:0) -> f_738(v764:0, 1 + v781:0, v821:0) :|: v781:0 > 0 && v781:0 < v764:0 && v764:0 > 1 && sum~cons_1~v821:0 = 1 + v821:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_738(v764:0:0, v781:0:0, sum~cons_1~v821:0:0) -> f_738(v764:0:0, 1 + v781:0:0, v821:0:0) :|: v781:0:0 > 0 && v781:0:0 < v764:0:0 && v764:0:0 > 1 && sum~cons_1~v821:0:0 = 1 + v821:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_738 ] = -1*f_738_2 + f_738_1

The following rules are decreasing:
f_738(v764:0:0, v781:0:0, sum~cons_1~v821:0:0) -> f_738(v764:0:0, 1 + v781:0:0, v821:0:0) :|: v781:0:0 > 0 && v781:0:0 < v764:0:0 && v764:0:0 > 1 && sum~cons_1~v821:0:0 = 1 + v821:0:0

The following rules are bounded:
f_738(v764:0:0, v781:0:0, sum~cons_1~v821:0:0) -> f_738(v764:0:0, 1 + v781:0:0, v821:0:0) :|: v781:0:0 > 0 && v781:0:0 < v764:0:0 && v764:0:0 > 1 && sum~cons_1~v821:0:0 = 1 + v821:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_549(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v260, 1, v262, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8) -> f_550(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v260, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8) :|: 0 = 0
f_550(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v260, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8) -> f_551(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v260, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) :|: 0 < v262 && 2 <= v260 && 2 <= v246
f_551(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v260, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) -> f_553(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v260, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) :|: 0 = 0
f_553(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v260, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) -> f_555(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v260, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) :|: TRUE
f_555(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v260, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) -> f_557(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v260, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) :|: 0 = 0
f_557(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v260, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) -> f_559(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) :|: 0 = 0
f_559(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) -> f_561(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v282, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) :|: 1 + v282 = v262 && 0 <= v282
f_561(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v282, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) -> f_563(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v282, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) :|: TRUE
f_563(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v282, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) -> f_565(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v282, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) :|: 0 = 0
f_565(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v282, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) -> f_567(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v282, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) :|: 0 = 0
f_567(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v282, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) -> f_569(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v282, v264, v284, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) :|: v284 = 1 + v264 && 2 <= v284
f_569(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v282, v264, v284, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) -> f_571(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v282, v264, v284, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) :|: TRUE
f_571(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v282, v264, v284, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) -> f_573(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v282, v264, v284, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) :|: TRUE
f_573(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v282, v264, v284, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 2, 4, 8) -> f_548(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v262, 1, v282, v264, v284, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8) :|: TRUE
f_548(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v260, 1, v262, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8) -> f_549(v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, 0, v260, 1, v262, v263, v264, v265, v268, v266, v269, v267, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_549(v246:0, v247:0, v248:0, v249:0, v250:0, v251:0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v258:0, 0, v260:0, 1, 1 + v282:0, v263:0, v264:0, v265:0, v268:0, v266:0, v269:0, v267:0, v270:0, v271:0, v272:0, v273:0, v274:0, v275:0, v276:0, v277:0, v278:0, v279:0, v280:0, v281:0, 3, 7, 4, 8) -> f_549(v246:0, v247:0, v248:0, v249:0, v250:0, v251:0, v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v258:0, 0, 1 + v282:0, 1, v282:0, v264:0, 1 + v264:0, v265:0, v268:0, v266:0, v269:0, v267:0, v270:0, v271:0, v272:0, v273:0, v274:0, v275:0, v276:0, v277:0, v278:0, v279:0, v280:0, v281:0, 3, 7, 4, 8) :|: v260:0 > 1 && v282:0 > -1 && v246:0 > 1 && v264:0 > 0
Filtered unneeded arguments:
   f_549(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40) -> f_549(x1, x15, x17, x19)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_549(v246:0, v260:0, sum~cons_1~v282:0, v264:0) -> f_549(v246:0, 1 + v282:0, v282:0, 1 + v264:0) :|: v282:0 > -1 && v260:0 > 1 && v264:0 > 0 && v246:0 > 1 && sum~cons_1~v282:0 = 1 + v282:0

----------------------------------------

(16)
Obligation:
Rules:
f_549(v246:0, v260:0, sum~cons_1~v282:0, v264:0) -> f_549(v246:0, 1 + v282:0, v282:0, 1 + v264:0) :|: v282:0 > -1 && v260:0 > 1 && v264:0 > 0 && v246:0 > 1 && sum~cons_1~v282:0 = 1 + v282:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_549(v246:0:0, v260:0:0, sum~cons_1~v282:0:0, v264:0:0) -> f_549(v246:0:0, 1 + v282:0:0, v282:0:0, 1 + v264:0:0) :|: v264:0:0 > 0 && v246:0:0 > 1 && v260:0:0 > 1 && v282:0:0 > -1 && sum~cons_1~v282:0:0 = 1 + v282:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_549(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_549(v246:0:0, v260:0:0, sum~cons_1~v282:0:0, v264:0:0) -> f_549(v246:0:0, 1 + v282:0:0, v282:0:0, 1 + v264:0:0) :|: v264:0:0 > 0 && v246:0:0 > 1 && v260:0:0 > 1 && v282:0:0 > -1 && sum~cons_1~v282:0:0 = 1 + v282:0:0
The following rules are bounded:
f_549(v246:0:0, v260:0:0, sum~cons_1~v282:0:0, v264:0:0) -> f_549(v246:0:0, 1 + v282:0:0, v282:0:0, 1 + v264:0:0) :|: v264:0:0 > 0 && v246:0:0 > 1 && v260:0:0 > 1 && v282:0:0 > -1 && sum~cons_1~v282:0:0 = 1 + v282:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
