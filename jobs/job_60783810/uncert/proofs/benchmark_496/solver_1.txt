YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/isOIg.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1183 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 26 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 13 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (17) YES
    (18) LLVM Symbolic Execution SCC
        (19) SCC2IRS [SOUND, 35 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/isOIg.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/isOIg.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		store 0, %2
		br %7
	7:
		%8 = load %3
		%9 = icmp sgt %8 0
		br %9, %10, %23
	10:
		store 0, %4
		br %11
	11:
		%12 = load %4
		%13 = load %3
		%14 = icmp slt %12 %13
		br %14, %15, %20
	15:
		%16 = load %4
		%17 = add i32 %16, 1
		store %17, %4
		%18 = load %2
		%19 = add i32 %18, 1
		store %19, %2
		br %11
	20:
		%21 = load %3
		%22 = sub i32 %21, 1
		store %22, %3
		br %7
	23:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 32 rulesP rules:
f_399(v513, v514, v515, v516, v517, v518, v519, 1, v521, v523, v524, v525, v526, v527, v528, v529, v530, 0, 3, 2, 4) -> f_400(v513, v514, v515, v516, v517, v518, v519, 1, v521, v532, v524, v525, v526, v527, v528, v529, v530, 0, 3, 2, 4) :|: v532 = 1 + v521 && 1 <= v532
f_400(v513, v514, v515, v516, v517, v518, v519, 1, v521, v532, v524, v525, v526, v527, v528, v529, v530, 0, 3, 2, 4) -> f_401(v513, v514, v515, v516, v517, v518, v519, 1, v521, v532, v524, v525, v526, v527, v528, v529, v530, 0, 3, 2, 4) :|: TRUE
f_401(v513, v514, v515, v516, v517, v518, v519, 1, v521, v532, v524, v525, v526, v527, v528, v529, v530, 0, 3, 2, 4) -> f_402(v513, v514, v515, v516, v517, v518, v519, 1, v521, v532, v525, v526, v527, v528, v529, v530, 0, 3, 2, 4) :|: 0 = 0
f_402(v513, v514, v515, v516, v517, v518, v519, 1, v521, v532, v525, v526, v527, v528, v529, v530, 0, 3, 2, 4) -> f_403(v513, v514, v515, v516, v517, v518, v519, 1, v521, v532, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) :|: v534 = 1 + v525 && 3 <= v534
f_403(v513, v514, v515, v516, v517, v518, v519, 1, v521, v532, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) -> f_404(v513, v514, v515, v516, v517, v518, v519, 1, v521, v532, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) :|: TRUE
f_404(v513, v514, v515, v516, v517, v518, v519, 1, v521, v532, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) -> f_405(v513, v514, v515, v516, v517, v518, v519, 1, v521, v532, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) :|: TRUE
f_405(v513, v514, v515, v516, v517, v518, v519, 1, v521, v532, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) -> f_406(v513, v514, v515, v516, v517, v518, v519, 1, v532, v521, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) :|: 0 = 0
f_406(v513, v514, v515, v516, v517, v518, v519, 1, v532, v521, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) -> f_407(v513, v514, v515, v516, v517, v518, v519, 1, v532, v521, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) :|: 0 = 0
f_407(v513, v514, v515, v516, v517, v518, v519, 1, v532, v521, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) -> f_408(v513, v514, v515, v516, v517, v518, v519, 1, v532, v521, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) :|: v532 < v519 && 2 <= v519 && 3 <= v526 && 3 <= v517
f_407(v513, v514, v515, v516, v517, v518, v519, 1, v532, v521, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) -> f_409(v513, v514, v515, v516, v517, v518, v532, 1, v521, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) :|: v519 <= v532 && v519 = v532
f_408(v513, v514, v515, v516, v517, v518, v519, 1, v532, v521, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) -> f_410(v513, v514, v515, v516, v517, v518, v519, 1, v532, v521, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) :|: 0 = 0
f_410(v513, v514, v515, v516, v517, v518, v519, 1, v532, v521, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) -> f_412(v513, v514, v515, v516, v517, v518, v519, 1, v532, v521, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) :|: TRUE
f_412(v513, v514, v515, v516, v517, v518, v519, 1, v532, v521, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) -> f_398(v513, v514, v515, v516, v517, v518, v519, 1, v532, v521, v532, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) :|: TRUE
f_398(v513, v514, v515, v516, v517, v518, v519, 1, v521, v522, v523, v524, v525, v526, v527, v528, v529, v530, 0, 3, 2, 4) -> f_399(v513, v514, v515, v516, v517, v518, v519, 1, v521, v523, v524, v525, v526, v527, v528, v529, v530, 0, 3, 2, 4) :|: 0 = 0
f_409(v513, v514, v515, v516, v517, v518, v532, 1, v521, v525, v534, v526, v527, v528, v529, v530, 0, 3, 2, 4) -> f_411(v513, v514, v515, v516, v517, v518, v532, 1, 0, v521, v525, v534, v526, v527, v528, v529, v530, 3, 2, 4) :|: 0 = 0
f_411(v513, v514, v515, v516, v517, v518, v532, 1, 0, v521, v525, v534, v526, v527, v528, v529, v530, 3, 2, 4) -> f_413(v513, v514, v515, v516, v517, v518, v532, 1, 0, v521, v525, v534, v526, v527, v528, v529, v530, 3, 2, 4) :|: TRUE
f_413(v513, v514, v515, v516, v517, v518, v532, 1, 0, v521, v525, v534, v526, v527, v528, v529, v530, 3, 2, 4) -> f_414(v513, v514, v515, v516, v517, v518, v532, 1, 0, v521, v525, v534, v527, v528, v529, v530, 3, 2, 4) :|: 0 = 0
f_414(v513, v514, v515, v516, v517, v518, v532, 1, 0, v521, v525, v534, v527, v528, v529, v530, 3, 2, 4) -> f_415(v513, v514, v515, v516, v517, v518, v532, 1, 0, v521, v525, v534, v527, v528, v529, v530, 3, 2, 4) :|: 1 + v521 = v532
f_415(v513, v514, v515, v516, v517, v518, v532, 1, 0, v521, v525, v534, v527, v528, v529, v530, 3, 2, 4) -> f_416(v513, v514, v515, v516, v517, v518, v532, 1, 0, v521, v525, v534, v527, v528, v529, v530, 3, 2, 4) :|: TRUE
f_416(v513, v514, v515, v516, v517, v518, v532, 1, 0, v521, v525, v534, v527, v528, v529, v530, 3, 2, 4) -> f_417(v513, v514, v515, v516, v517, v518, v532, 1, 0, v521, v525, v534, v527, v528, v529, v530, 3, 2, 4) :|: TRUE
f_417(v513, v514, v515, v516, v517, v518, v532, 1, 0, v521, v525, v534, v527, v528, v529, v530, 3, 2, 4) -> f_418(v513, v514, v515, v516, v517, v518, v521, 1, v532, 0, v525, v534, v527, v528, v529, v530, 3, 2, 4) :|: 0 = 0
f_418(v513, v514, v515, v516, v517, v518, v521, 1, v532, 0, v525, v534, v527, v528, v529, v530, 3, 2, 4) -> f_419(v513, v514, v515, v516, v517, v518, v521, 1, v532, 0, v525, v534, v527, v528, v529, v530, 3, 2, 4) :|: 0 < v521 && 2 <= v532 && 3 <= v517
f_419(v513, v514, v515, v516, v517, v518, v521, 1, v532, 0, v525, v534, v527, v528, v529, v530, 3, 2, 4) -> f_421(v513, v514, v515, v516, v517, v518, v521, 1, v532, 0, v525, v534, v527, v528, v529, v530, 3, 2, 4) :|: 0 = 0
f_421(v513, v514, v515, v516, v517, v518, v521, 1, v532, 0, v525, v534, v527, v528, v529, v530, 3, 2, 4) -> f_423(v513, v514, v515, v516, v517, v518, v521, 1, v532, 0, v525, v534, v527, v528, v529, v530, 3, 2, 4) :|: TRUE
f_423(v513, v514, v515, v516, v517, v518, v521, 1, v532, 0, v525, v534, v527, v528, v529, v530, 3, 2, 4) -> f_425(v513, v514, v515, v516, v517, v518, v521, 1, v532, 0, v525, v534, v527, v528, v529, v530, 3, 2, 4) :|: TRUE
f_425(v513, v514, v515, v516, v517, v518, v521, 1, v532, 0, v525, v534, v527, v528, v529, v530, 3, 2, 4) -> f_426(v513, v514, v515, v516, v517, v518, v521, 1, v532, 0, v525, v534, v527, v528, v529, v530, 3, 2, 4) :|: TRUE
f_426(v513, v514, v515, v516, v517, v518, v521, 1, v532, 0, v525, v534, v527, v528, v529, v530, 3, 2, 4) -> f_427(v513, v514, v515, v516, v517, v518, v521, 1, v532, 0, v525, v534, v527, v528, v529, v530, 3, 2, 4) :|: TRUE
f_427(v627, v628, v629, v630, v631, v632, v633, 1, v635, 0, v637, v638, v639, v640, v641, v642, 3, 2, 4) -> f_428(v627, v628, v629, v630, v631, v632, v633, 1, 0, v635, v637, v638, v639, v640, v641, v642, 3, 2, 4) :|: 0 = 0
f_428(v627, v628, v629, v630, v631, v632, v633, 1, 0, v635, v637, v638, v639, v640, v641, v642, 3, 2, 4) -> f_429(v627, v628, v629, v630, v631, v632, v633, 1, 0, v635, v637, v638, v639, v640, v641, v642, 3, 2, 4) :|: 0 = 0
f_429(v627, v628, v629, v630, v631, v632, v633, 1, 0, v635, v637, v638, v639, v640, v641, v642, 3, 2, 4) -> f_430(v627, v628, v629, v630, v631, v632, v633, 1, 0, v635, v637, v638, v639, v640, v641, v642, 3, 2, 4) :|: 0 = 0
f_430(v627, v628, v629, v630, v631, v632, v633, 1, 0, v635, v637, v638, v639, v640, v641, v642, 3, 2, 4) -> f_431(v627, v628, v629, v630, v631, v632, v633, 1, 0, v635, v637, v638, v639, v640, v641, v642, 3, 2, 4) :|: TRUE
f_431(v627, v628, v629, v630, v631, v632, v633, 1, 0, v635, v637, v638, v639, v640, v641, v642, 3, 2, 4) -> f_398(v627, v628, v629, v630, v631, v632, v633, 1, 0, v633, v635, v637, v638, v635, v639, v640, v641, v642, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_399(v513:0, v514:0, v515:0, v516:0, v517:0, v518:0, 1 + v521:0, 1, v521:0, v523:0, v524:0, v525:0, v526:0, v527:0, v528:0, v529:0, v530:0, 0, 3, 2, 4) -> f_399(v513:0, v514:0, v515:0, v516:0, v517:0, v518:0, v521:0, 1, 0, 1 + v521:0, v525:0, 1 + v525:0, 1 + v521:0, v527:0, v528:0, v529:0, v530:0, 0, 3, 2, 4) :|: v521:0 > 0 && v525:0 > 1 && v517:0 > 2
f_399(v513:0, v514:0, v515:0, v516:0, v517:0, v518:0, v519:0, 1, v521:0, v523:0, v524:0, v525:0, v526:0, v527:0, v528:0, v529:0, v530:0, 0, 3, 2, 4) -> f_399(v513:0, v514:0, v515:0, v516:0, v517:0, v518:0, v519:0, 1, 1 + v521:0, 1 + v521:0, v525:0, 1 + v525:0, v526:0, v527:0, v528:0, v529:0, v530:0, 0, 3, 2, 4) :|: v521:0 > -1 && v525:0 > 1 && v519:0 > 1 && v519:0 > 1 + v521:0 && v517:0 > 2 && v526:0 > 2
Filtered unneeded arguments:
   f_399(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_399(x5, x7, x9, x12, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_399(v517:0, sum~cons_1~v521:0, v521:0, v525:0, v526:0) -> f_399(v517:0, v521:0, 0, 1 + v525:0, 1 + v521:0) :|: v525:0 > 1 && v517:0 > 2 && v521:0 > 0 && sum~cons_1~v521:0 = 1 + v521:0
f_399(v517:0, v519:0, v521:0, v525:0, v526:0) -> f_399(v517:0, v519:0, 1 + v521:0, 1 + v525:0, v526:0) :|: v525:0 > 1 && v521:0 > -1 && v519:0 > 1 && v519:0 > 1 + v521:0 && v526:0 > 2 && v517:0 > 2

----------------------------------------

(9)
Obligation:
Rules:
f_399(v517:0, sum~cons_1~v521:0, v521:0, v525:0, v526:0) -> f_399(v517:0, v521:0, 0, 1 + v525:0, 1 + v521:0) :|: v525:0 > 1 && v517:0 > 2 && v521:0 > 0 && sum~cons_1~v521:0 = 1 + v521:0
f_399(x, x1, x2, x3, x4) -> f_399(x, x1, 1 + x2, 1 + x3, x4) :|: x3 > 1 && x2 > -1 && x1 > 1 && x1 > 1 + x2 && x4 > 2 && x > 2

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_399(v517:0:0, sum~cons_1~v521:0:0, v521:0:0, v525:0:0, v526:0:0) -> f_399(v517:0:0, v521:0:0, 0, 1 + v525:0:0, 1 + v521:0:0) :|: v525:0:0 > 1 && v517:0:0 > 2 && v521:0:0 > 0 && sum~cons_1~v521:0:0 = 1 + v521:0:0
f_399(x:0, x1:0, x2:0, x3:0, x4:0) -> f_399(x:0, x1:0, 1 + x2:0, 1 + x3:0, x4:0) :|: x4:0 > 2 && x:0 > 2 && x1:0 > 1 + x2:0 && x1:0 > 1 && x2:0 > -1 && x3:0 > 1

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_399(x, x1, x2, x3, x4)] = x1

The following rules are decreasing:
f_399(v517:0:0, sum~cons_1~v521:0:0, v521:0:0, v525:0:0, v526:0:0) -> f_399(v517:0:0, v521:0:0, 0, 1 + v525:0:0, 1 + v521:0:0) :|: v525:0:0 > 1 && v517:0:0 > 2 && v521:0:0 > 0 && sum~cons_1~v521:0:0 = 1 + v521:0:0
The following rules are bounded:
f_399(v517:0:0, sum~cons_1~v521:0:0, v521:0:0, v525:0:0, v526:0:0) -> f_399(v517:0:0, v521:0:0, 0, 1 + v525:0:0, 1 + v521:0:0) :|: v525:0:0 > 1 && v517:0:0 > 2 && v521:0:0 > 0 && sum~cons_1~v521:0:0 = 1 + v521:0:0
f_399(x:0, x1:0, x2:0, x3:0, x4:0) -> f_399(x:0, x1:0, 1 + x2:0, 1 + x3:0, x4:0) :|: x4:0 > 2 && x:0 > 2 && x1:0 > 1 + x2:0 && x1:0 > 1 && x2:0 > -1 && x3:0 > 1

----------------------------------------

(13)
Obligation:
Rules:
f_399(x:0, x1:0, x2:0, x3:0, x4:0) -> f_399(x:0, x1:0, 1 + x2:0, 1 + x3:0, x4:0) :|: x4:0 > 2 && x:0 > 2 && x1:0 > 1 + x2:0 && x1:0 > 1 && x2:0 > -1 && x3:0 > 1

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_399(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_399(x:0:0, x1:0:0, 1 + x2:0:0, 1 + x3:0:0, x4:0:0) :|: x2:0:0 > -1 && x3:0:0 > 1 && x1:0:0 > 1 && x1:0:0 > 1 + x2:0:0 && x:0:0 > 2 && x4:0:0 > 2

----------------------------------------

(16) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_399(x, x1, x2, x3, x4)] = -2 + x1 - x2

The following rules are decreasing:
f_399(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_399(x:0:0, x1:0:0, 1 + x2:0:0, 1 + x3:0:0, x4:0:0) :|: x2:0:0 > -1 && x3:0:0 > 1 && x1:0:0 > 1 && x1:0:0 > 1 + x2:0:0 && x:0:0 > 2 && x4:0:0 > 2
The following rules are bounded:
f_399(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_399(x:0:0, x1:0:0, 1 + x2:0:0, 1 + x3:0:0, x4:0:0) :|: x2:0:0 > -1 && x3:0:0 > 1 && x1:0:0 > 1 && x1:0:0 > 1 + x2:0:0 && x:0:0 > 2 && x4:0:0 > 2

----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
SCC
----------------------------------------

(19) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_258(v85, v86, v87, v88, v89, v90, 1, v93, v92, v94, v95, v96, v97, 0, 3, 4) -> f_259(v85, v86, v87, v88, v89, v90, 1, v93, v92, v94, v95, v96, v97, 0, 3, 4) :|: 0 = 0
f_259(v85, v86, v87, v88, v89, v90, 1, v93, v92, v94, v95, v96, v97, 0, 3, 4) -> f_260(v85, v86, v87, v88, v89, v90, 1, v93, v92, v94, v95, v96, v97, 0, 3, 2, 4) :|: v93 < v89 && 2 <= v89
f_260(v85, v86, v87, v88, v89, v90, 1, v93, v92, v94, v95, v96, v97, 0, 3, 2, 4) -> f_262(v85, v86, v87, v88, v89, v90, 1, v93, v92, v94, v95, v96, v97, 0, 3, 2, 4) :|: 0 = 0
f_262(v85, v86, v87, v88, v89, v90, 1, v93, v92, v94, v95, v96, v97, 0, 3, 2, 4) -> f_264(v85, v86, v87, v88, v89, v90, 1, v93, v92, v94, v95, v96, v97, 0, 3, 2, 4) :|: TRUE
f_264(v85, v86, v87, v88, v89, v90, 1, v93, v92, v94, v95, v96, v97, 0, 3, 2, 4) -> f_266(v85, v86, v87, v88, v89, v90, 1, v93, v92, v94, v95, v96, v97, 0, 3, 2, 4) :|: 0 = 0
f_266(v85, v86, v87, v88, v89, v90, 1, v93, v92, v94, v95, v96, v97, 0, 3, 2, 4) -> f_268(v85, v86, v87, v88, v89, v90, 1, v93, v99, v92, v94, v95, v96, v97, 0, 3, 2, 4) :|: v99 = 1 + v93 && 2 <= v99
f_268(v85, v86, v87, v88, v89, v90, 1, v93, v99, v92, v94, v95, v96, v97, 0, 3, 2, 4) -> f_270(v85, v86, v87, v88, v89, v90, 1, v93, v99, v92, v94, v95, v96, v97, 0, 3, 2, 4) :|: TRUE
f_270(v85, v86, v87, v88, v89, v90, 1, v93, v99, v92, v94, v95, v96, v97, 0, 3, 2, 4) -> f_272(v85, v86, v87, v88, v89, v90, 1, v93, v99, v94, v95, v96, v97, 0, 3, 2, 4) :|: 0 = 0
f_272(v85, v86, v87, v88, v89, v90, 1, v93, v99, v94, v95, v96, v97, 0, 3, 2, 4) -> f_274(v85, v86, v87, v88, v89, v90, 1, v93, v99, v94, v95, v96, v97, 0, 3, 2, 4) :|: v99 = 1 + v93
f_274(v85, v86, v87, v88, v89, v90, 1, v93, v99, v94, v95, v96, v97, 0, 3, 2, 4) -> f_276(v85, v86, v87, v88, v89, v90, 1, v93, v99, v94, v95, v96, v97, 0, 3, 2, 4) :|: TRUE
f_276(v85, v86, v87, v88, v89, v90, 1, v93, v99, v94, v95, v96, v97, 0, 3, 2, 4) -> f_279(v85, v86, v87, v88, v89, v90, 1, v93, v99, v94, v95, v96, v97, 0, 3, 2, 4) :|: TRUE
f_279(v85, v86, v87, v88, v89, v90, 1, v93, v99, v94, v95, v96, v97, 0, 3, 2, 4) -> f_257(v85, v86, v87, v88, v89, v90, 1, v93, v99, v94, v95, v96, v97, 0, 3, 4) :|: TRUE
f_257(v85, v86, v87, v88, v89, v90, 1, v92, v93, v94, v95, v96, v97, 0, 3, 4) -> f_258(v85, v86, v87, v88, v89, v90, 1, v93, v92, v94, v95, v96, v97, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_258(v85:0, v86:0, v87:0, v88:0, v89:0, v90:0, 1, v93:0, v92:0, v94:0, v95:0, v96:0, v97:0, 0, 3, 4) -> f_258(v85:0, v86:0, v87:0, v88:0, v89:0, v90:0, 1, 1 + v93:0, v93:0, v94:0, v95:0, v96:0, v97:0, 0, 3, 4) :|: v89:0 > 1 && v93:0 > 0 && v93:0 < v89:0
Filtered unneeded arguments:
   f_258(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_258(x5, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_258(v89:0, v93:0) -> f_258(v89:0, 1 + v93:0) :|: v93:0 > 0 && v93:0 < v89:0 && v89:0 > 1

----------------------------------------

(20)
Obligation:
Rules:
f_258(v89:0, v93:0) -> f_258(v89:0, 1 + v93:0) :|: v93:0 > 0 && v93:0 < v89:0 && v89:0 > 1

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_258(v89:0:0, v93:0:0) -> f_258(v89:0:0, 1 + v93:0:0) :|: v93:0:0 > 0 && v93:0:0 < v89:0:0 && v89:0:0 > 1

----------------------------------------

(23) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_258(x, x1)] = x - x1

The following rules are decreasing:
f_258(v89:0:0, v93:0:0) -> f_258(v89:0:0, 1 + v93:0:0) :|: v93:0:0 > 0 && v93:0:0 < v89:0:0 && v89:0:0 > 1
The following rules are bounded:
f_258(v89:0:0, v93:0:0) -> f_258(v89:0:0, 1 + v93:0:0) :|: v93:0:0 > 0 && v93:0:0 < v89:0:0 && v89:0:0 > 1

----------------------------------------

(24)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
