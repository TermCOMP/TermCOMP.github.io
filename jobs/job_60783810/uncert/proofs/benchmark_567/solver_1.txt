YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/SFFb3.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 47 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1220 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 28 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 4 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/SFFb3.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/SFFb3.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "addition" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %5
		%7 = icmp eq %6 0
		br %7, %8, %10
	8:
		%9 = load %4
		store %9, %3
		br %28
	10:
		%11 = load %5
		%12 = icmp sgt %11 0
		br %12, %13, %19
	13:
		%14 = load %4
		%15 = add i32 %14, 1
		%16 = load %5
		%17 = sub i32 %16, 1
		%18 = call i32 @addition(i32 %15, i32 %17)
		store %18, %3
		br %28
	19:
		%20 = load %5
		%21 = icmp slt %20 0
		br %21, %22, %28
	22:
		%23 = load %4
		%24 = sub i32 %23, 1
		%25 = load %5
		%26 = add i32 %25, 1
		%27 = call i32 @addition(i32 %24, i32 %26)
		store %27, %3
		br %28
	28:
		%29 = load %3
		ret %29

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 46
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = load %2
		%7 = icmp slt %6 0
		br %7, %11, %8
	8:
		%9 = load %2
		%10 = icmp sgt %9 2147483647
		br %10, %11, %12
	11:
		store 0, %1
		br %32
	12:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%13 = call i32 @__VERIFIER_nondet_int()
		store %13, %3
		%14 = load %3
		%15 = icmp slt %14 0
		br %15, %19, %16
	16:
		%17 = load %3
		%18 = icmp sgt %17 2147483647
		br %18, %19, %20
	19:
		store 0, %1
		br %32
	20:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%21 = load %2
		%22 = load %3
		%23 = call i32 @addition(i32 %21, i32 %22)
		store %23, %4
		%24 = load %4
		%25 = load %2
		%26 = load %3
		%27 = add i32 %25, %26
		%28 = icmp eq %24 %27
		br %28, %29, %30
	29:
		store 0, %1
		br %32
	30:
		br %31
	31:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	32:
		%33 = load %1
		ret %33


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_374(v100, v101, v113, v102, v103, v104, v105, v106, v107, v108, v109, v114, 0, v111, v112, 3, 1, 4) -> f_376(v100, v101, v113, v115, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, 0, v111, v112, 3, 1, 4) :|: 1 <= v115 && v116 = 3 + v115 && 4 <= v116
f_376(v100, v101, v113, v115, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, 0, v111, v112, 3, 1, 4) -> f_377(v100, v101, v113, v115, v117, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, 0, v111, v112, 3, 1, 4) :|: 1 <= v117 && v118 = 3 + v117 && 4 <= v118
f_377(v100, v101, v113, v115, v117, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, 0, v111, v112, 3, 1, 4) -> f_378(v100, v101, v113, v115, v117, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, 0, v111, v112, 3, 1, 4) :|: TRUE
f_378(v100, v101, v113, v115, v117, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, 0, v111, v112, 3, 1, 4) -> f_379(v100, v101, v113, v115, v117, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, 0, v111, v112, 3, 1, 4) :|: TRUE
f_379(v100, v101, v113, v115, v117, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, 0, v111, v112, 3, 1, 4) -> f_380(v100, v101, v113, v115, v117, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, 0, v111, v112, 3, 1, 4) :|: TRUE
f_380(v100, v101, v113, v115, v117, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, 0, v111, v112, 3, 1, 4) -> f_381(v100, v101, v113, v115, v117, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, 0, v111, v112, 3, 1, 4) :|: TRUE
f_381(v100, v101, v113, v115, v117, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, 0, v111, v112, 3, 1, 4) -> f_382(v100, v101, v113, v115, v117, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, 0, v111, v112, 3, 1, 4) :|: 0 = 0
f_382(v100, v101, v113, v115, v117, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, 0, v111, v112, 3, 1, 4) -> f_384(v100, v101, v113, v115, v117, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, 0, v111, v112, 3, 1, 4) :|: v101 != 0 && 1 <= v112
f_384(v100, v101, v113, v115, v117, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, 0, v111, v112, 3, 1, 4) -> f_386(v100, v101, v113, v115, v117, 0, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 1, 4) :|: 0 = 0
f_386(v100, v101, v113, v115, v117, 0, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 1, 4) -> f_388(v100, v101, v113, v115, v117, 0, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 1, 4) :|: TRUE
f_388(v100, v101, v113, v115, v117, 0, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 1, 4) -> f_390(v100, v101, v113, v115, v117, 0, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 1, 4) :|: 0 = 0
f_390(v100, v101, v113, v115, v117, 0, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 1, 4) -> f_392(v100, v101, v113, v115, v117, 0, 1, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 4) :|: 0 = 0
f_392(v100, v101, v113, v115, v117, 0, 1, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 4) -> f_394(v100, v101, v113, v115, v117, 0, 1, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 4) :|: TRUE
f_394(v100, v101, v113, v115, v117, 0, 1, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 4) -> f_396(v100, v101, v113, v115, v117, 0, 1, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 4) :|: 0 = 0
f_396(v100, v101, v113, v115, v117, 0, 1, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 4) -> f_398(v100, v101, v113, v115, v117, 0, 1, v139, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 4) :|: v139 = 1 + v100 && 1 <= v139
f_398(v100, v101, v113, v115, v117, 0, 1, v139, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 4) -> f_400(v100, v101, v113, v115, v117, 0, 1, v139, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 4) :|: 0 = 0
f_400(v100, v101, v113, v115, v117, 0, 1, v139, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 4) -> f_402(v100, v101, v113, v115, v117, 0, 1, v139, v141, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 4) :|: 1 + v141 = v101 && 0 <= v141
f_402(v100, v101, v113, v115, v117, 0, 1, v139, v141, v102, v103, v104, v105, v106, v107, v108, v109, v114, v116, v118, v111, v112, 3, 4) -> f_404(v139, v141, v102, v103, v104, v105, v106, v107, v108, v109, v113, v114, v115, v116, v117, v118, 0, v111, v112, v100, v101, 1, 3, 4) :|: 0 = 0
f_404(v139, v141, v102, v103, v104, v105, v106, v107, v108, v109, v113, v114, v115, v116, v117, v118, 0, v111, v112, v100, v101, 1, 3, 4) -> f_406(v139, v141, v102, v103, v104, v105, v106, v107, v108, v109, v113, v114, v115, v116, v117, v118, 0, v111, v112, v100, v101, 3, 1, 4) :|: TRUE
f_406(v139, v141, v102, v103, v104, v105, v106, v107, v108, v109, v113, v114, v115, v116, v117, v118, 0, v111, v112, v100, v101, 3, 1, 4) -> f_372(v139, v141, v102, v103, v104, v105, v106, v107, v108, v109, 0, v111, v112, 3, 1, 4) :|: TRUE
f_372(v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, 0, v111, v112, 3, 1, 4) -> f_374(v100, v101, v113, v102, v103, v104, v105, v106, v107, v108, v109, v114, 0, v111, v112, 3, 1, 4) :|: 1 <= v113 && v114 = 3 + v113 && 4 <= v114
Combined rules. Obtained 1 rulesP rules:
f_374(v100:0, 1 + v141:0, v113:0, v102:0, v103:0, v104:0, v105:0, v106:0, v107:0, v108:0, v109:0, v114:0, 0, v111:0, v112:0, 3, 1, 4) -> f_374(1 + v100:0, v141:0, v113:1, v102:0, v103:0, v104:0, v105:0, v106:0, v107:0, v108:0, v109:0, 3 + v113:1, 0, v111:0, v112:0, 3, 1, 4) :|: v117:0 > 0 && v115:0 > 0 && v112:0 > 0 && v141:0 > -1 && v100:0 > -1 && v113:1 > 0
Filtered unneeded arguments:
   f_374(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_374(x1, x2, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_374(v100:0, sum~cons_1~v141:0, v112:0) -> f_374(1 + v100:0, v141:0, v112:0) :|: v141:0 > -1 && v100:0 > -1 && v112:0 > 0 && sum~cons_1~v141:0 = 1 + v141:0

----------------------------------------

(8)
Obligation:
Rules:
f_374(v100:0, sum~cons_1~v141:0, v112:0) -> f_374(1 + v100:0, v141:0, v112:0) :|: v141:0 > -1 && v100:0 > -1 && v112:0 > 0 && sum~cons_1~v141:0 = 1 + v141:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_374(v100:0:0, sum~cons_1~v141:0:0, v112:0:0) -> f_374(1 + v100:0:0, v141:0:0, v112:0:0) :|: v141:0:0 > -1 && v100:0:0 > -1 && v112:0:0 > 0 && sum~cons_1~v141:0:0 = 1 + v141:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_374 ] = f_374_2

The following rules are decreasing:
f_374(v100:0:0, sum~cons_1~v141:0:0, v112:0:0) -> f_374(1 + v100:0:0, v141:0:0, v112:0:0) :|: v141:0:0 > -1 && v100:0:0 > -1 && v112:0:0 > 0 && sum~cons_1~v141:0:0 = 1 + v141:0:0

The following rules are bounded:
f_374(v100:0:0, sum~cons_1~v141:0:0, v112:0:0) -> f_374(1 + v100:0:0, v141:0:0, v112:0:0) :|: v141:0:0 > -1 && v100:0:0 > -1 && v112:0:0 > 0 && sum~cons_1~v141:0:0 = 1 + v141:0:0


----------------------------------------

(12)
YES
/hpcwork/ff862203/termcomp25/benchmarks/SFFb3.c:23:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]
}
^
1 warning generated.

Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
