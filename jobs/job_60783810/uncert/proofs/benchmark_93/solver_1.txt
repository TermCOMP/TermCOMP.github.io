YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ljs5c.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 58 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1853 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 15 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/ljs5c.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/ljs5c.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cbzero" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *i8, 1 i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%3 = alloca *i8, align 8
		%4 = alloca i64, align 8
		%5 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%6 = load %3
		store %6, %5
		br %7
	7:
		%8 = load %4
		%9 = add i64 %8, -1
		store %9, %4
		%10 = icmp ne %8 0
		br %10, %11, %14
	11:
		%12 = load %5
		%13 = getelementptr %12, 1
		store %13, %5
		store 0, %12
		br %7
	14:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 37
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = load %2
		%8 = icmp slt %7 1
		br %8, %9, %10
	9:
		store 1, %2
		br %10
	10:
		%11 = load %3
		%12 = icmp slt %11 1
		br %12, %13, %14
	13:
		store 1, %3
		br %14
	14:
		%15 = load %3
		%16 = load %2
		%17 = icmp sgt %15 %16
		br %17, %18, %19
	18:
		store 0, %1
		br %27
	19:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%20 = load %2
		%21 = sext i32 %20 to i64
		%22 = mul i64 %21, 1
		%23 = alloca i8, numElementsLit: %22, align 16
		store %23, %4
		%24 = load %4
		%25 = load %3
		%26 = sext i32 %25 to i64
		Unnamed Call-Instruction = call BasicVoidType @cbzero(*i8 %24, i64 %26)
		store 0, %1
		br %27
	27:
		%28 = load %1
		ret %28


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_455(v544, v545, v546, v547, v548, v550, 1, v552, v553, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v558, v568, 3, 7, 2, 4, 8) -> f_456(v544, v545, v546, v547, v548, v550, v569, 1, v552, v553, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v558, v568, 3, 7, 2, 4, 8) :|: 1 + v569 = v550 && 0 <= 1 + v569
f_456(v544, v545, v546, v547, v548, v550, v569, 1, v552, v553, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v558, v568, 3, 7, 2, 4, 8) -> f_457(v544, v545, v546, v547, v548, v550, v569, 1, v552, v553, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v558, v568, 3, 7, 2, 4, 8) :|: TRUE
f_457(v544, v545, v546, v547, v548, v550, v569, 1, v552, v553, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v558, v568, 3, 7, 2, 4, 8) -> f_458(v544, v545, v546, v547, v548, v550, v569, 1, v552, v553, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v558, v568, 3, 7, 2, 4, 8) :|: 0 < v550 && 0 <= v569 && 3 <= v564
f_458(v544, v545, v546, v547, v548, v550, v569, 1, v552, v553, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v558, v568, 3, 7, 2, 4, 8) -> f_460(v544, v545, v546, v547, v548, v550, v569, 1, v552, v553, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v558, v568, 3, 7, 2, 4, 8) :|: 0 = 0
f_460(v544, v545, v546, v547, v548, v550, v569, 1, v552, v553, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v558, v568, 3, 7, 2, 4, 8) -> f_462(v544, v545, v546, v547, v548, v550, v569, 1, v552, v553, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v558, v568, 3, 7, 2, 4, 8) :|: TRUE
f_462(v544, v545, v546, v547, v548, v550, v569, 1, v552, v553, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v558, v568, 3, 7, 2, 4, 8) -> f_464(v544, v545, v546, v547, v548, v550, v569, 1, v553, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v552, v558, v568, 3, 7, 2, 4, 8) :|: 0 = 0
f_464(v544, v545, v546, v547, v548, v550, v569, 1, v553, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v552, v558, v568, 3, 7, 2, 4, 8) -> f_466(v544, v545, v546, v547, v548, v550, v569, 1, v553, v584, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v552, v558, v568, 3, 7, 2, 4, 8) :|: v584 = 1 + v553 && 4 <= v584
f_466(v544, v545, v546, v547, v548, v550, v569, 1, v553, v584, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v552, v558, v568, 3, 7, 2, 4, 8) -> f_468(v544, v545, v546, v547, v548, v550, v569, 1, v553, v584, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v552, v558, v568, 3, 7, 2, 4, 8) :|: TRUE
f_468(v544, v545, v546, v547, v548, v550, v569, 1, v553, v584, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v552, v558, v568, 3, 7, 2, 4, 8) -> f_470(v544, v545, v546, v547, v548, v550, v569, 1, v553, v584, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v552, v558, v568, 3, 7, 2, 4, 8) :|: TRUE
f_470(v544, v545, v546, v547, v548, v550, v569, 1, v553, v584, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v552, v558, v568, 3, 7, 2, 4, 8) -> f_472(v544, v545, v546, v547, v548, v550, v569, 1, v553, v584, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v552, v558, v568, 3, 7, 2, 4, 8) :|: TRUE
f_472(v544, v545, v546, v547, v548, v550, v569, 1, v553, v584, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v552, v558, v568, 3, 7, 2, 4, 8) -> f_454(v544, v545, v546, v547, v548, v550, v569, 1, v553, v584, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v558, v568, 3, 7, 2, 4, 8) :|: TRUE
f_454(v544, v545, v546, v547, v548, v549, v550, 1, v552, v553, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v558, v568, 3, 7, 2, 4, 8) -> f_455(v544, v545, v546, v547, v548, v550, 1, v552, v553, v554, v560, v555, v561, v556, v562, v557, v563, v564, v565, v566, v567, 0, v558, v568, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_455(v544:0, v545:0, v546:0, v547:0, v548:0, 1 + v569:0, 1, v552:0, v553:0, v554:0, v560:0, v555:0, v561:0, v556:0, v562:0, v557:0, v563:0, v564:0, v565:0, v566:0, v567:0, 0, v558:0, v568:0, 3, 7, 2, 4, 8) -> f_455(v544:0, v545:0, v546:0, v547:0, v548:0, v569:0, 1, v553:0, 1 + v553:0, v554:0, v560:0, v555:0, v561:0, v556:0, v562:0, v557:0, v563:0, v564:0, v565:0, v566:0, v567:0, 0, v558:0, v568:0, 3, 7, 2, 4, 8) :|: v569:0 > -1 && v553:0 > 2 && v564:0 > 2
Filtered unneeded arguments:
   f_455(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_455(x6, x9, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_455(sum~cons_1~v569:0, v553:0, v564:0) -> f_455(v569:0, 1 + v553:0, v564:0) :|: v553:0 > 2 && v564:0 > 2 && v569:0 > -1 && sum~cons_1~v569:0 = 1 + v569:0

----------------------------------------

(8)
Obligation:
Rules:
f_455(sum~cons_1~v569:0, v553:0, v564:0) -> f_455(v569:0, 1 + v553:0, v564:0) :|: v553:0 > 2 && v564:0 > 2 && v569:0 > -1 && sum~cons_1~v569:0 = 1 + v569:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_455(sum~cons_1~v569:0:0, v553:0:0, v564:0:0) -> f_455(v569:0:0, 1 + v553:0:0, v564:0:0) :|: v553:0:0 > 2 && v564:0:0 > 2 && v569:0:0 > -1 && sum~cons_1~v569:0:0 = 1 + v569:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_455(x, x1, x2)] = x

The following rules are decreasing:
f_455(sum~cons_1~v569:0:0, v553:0:0, v564:0:0) -> f_455(v569:0:0, 1 + v553:0:0, v564:0:0) :|: v553:0:0 > 2 && v564:0:0 > 2 && v569:0:0 > -1 && sum~cons_1~v569:0:0 = 1 + v569:0:0
The following rules are bounded:
f_455(sum~cons_1~v569:0:0, v553:0:0, v564:0:0) -> f_455(v569:0:0, 1 + v553:0:0, v564:0:0) :|: v553:0:0 > 2 && v564:0:0 > 2 && v569:0:0 > -1 && sum~cons_1~v569:0:0 = 1 + v569:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
