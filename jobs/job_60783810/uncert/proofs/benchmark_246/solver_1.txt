YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/JYcpW.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 37 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2418 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 21 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 16 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/JYcpW.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/JYcpW.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%5 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store null, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%6 = load %3
		store %6, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %7
	7:
		%8 = load %5
		%9 = load %2
		%10 = icmp slt %8 %9
		br %10, %11, %24
	11:
		%12 = call noalias *i8 @malloc(i64 16)
		%13 = bitcast *i8 %12 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %13, %3
		%14 = call i32 (...)* @__VERIFIER_nondet_int()
		%15 = load %3
		%16 = getelementptr %15, 0, 0
		store %14, %16
		%17 = load %4
		%18 = load %3
		%19 = getelementptr %18, 0, 1
		store %17, %19
		%20 = load %3
		store %20, %4
		br %21
	21:
		%22 = load %5
		%23 = add i32 %22, 1
		store %23, %5
		br %7
	24:
		%25 = load %3
		ret %25

*BasicFunctionTypename: "skip" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 **BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 55
	0:
		%3 = alloca **BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca i32, align 4
		%5 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(***BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %5)
		%6 = load %3
		%7 = load %6
		store %7, %5
		%8 = load %5
		%9 = icmp eq %8 null
		br %9, %10, %11
	10:
		br %33
	11:
		br %12
	12:
		%13 = load %5
		%14 = getelementptr %13, 0, 0
		%15 = load %14
		%16 = load %4
		%17 = icmp eq %15 %16
		br %17, %18, %30
	18:
		%19 = load %5
		%20 = getelementptr %19, 0, 1
		%21 = load %20
		%22 = icmp ne %21 null
		br %22, %23, %27
	23:
		%24 = load %5
		%25 = getelementptr %24, 0, 1
		%26 = load %25
		store %26, %5
		br %29
	27:
		%28 = load %3
		store null, %28
		br %33
	29:
		br %12
	30:
		%31 = load %5
		%32 = load %3
		store %31, %32
		br %33
	33:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 98
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 (...)* @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 (...)* @__VERIFIER_nondet_int()
		store %6, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%7 = load %2
		%8 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %7)
		store %8, %4
		%9 = load %3
		Unnamed Call-Instruction = call BasicVoidType @skip(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4, i32 %9)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_824(v513, v514, v515, v516, v517, v518, 0, v523, v520, 1, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v538, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) -> f_825(v513, v514, v515, v516, v517, v518, 0, v523, 1, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v538, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) :|: 0 = 0
f_825(v513, v514, v515, v516, v517, v518, 0, v523, 1, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v538, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) -> f_826(v513, v514, v515, v516, v517, v518, 0, v523, v538, 1, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) :|: 0 = 0
f_826(v513, v514, v515, v516, v517, v518, 0, v523, v538, 1, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) -> f_827(v513, v514, v515, v516, v517, v518, 0, v523, v538, 1, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) :|: 0 = 0
f_827(v513, v514, v515, v516, v517, v518, 0, v523, v538, 1, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) -> f_828(v513, v514, v515, v516, v517, v518, 0, v523, 1, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) :|: v538 = v514
f_828(v513, v514, v515, v516, v517, v518, 0, v523, 1, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) -> f_830(v513, v514, v515, v516, v517, v518, 0, v523, 1, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) :|: 0 = 0
f_830(v513, v514, v515, v516, v517, v518, 0, v523, 1, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) -> f_832(v513, v514, v515, v516, v517, v518, 0, v523, 1, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) :|: TRUE
f_832(v513, v514, v515, v516, v517, v518, 0, v523, 1, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) -> f_834(v513, v514, v515, v516, v517, v518, 0, v523, 1, v522, v520, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) :|: 0 = 0
f_834(v513, v514, v515, v516, v517, v518, 0, v523, 1, v522, v520, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) -> f_842(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) :|: v541 = 8 + v523 && 9 <= v541
f_842(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) -> f_844(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v527, 3, 7, 4, 8, 9, 2, v535, v537) :|: 0 = 0
f_844(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v527, 3, 7, 4, 8, 9, 2, v535, v537) -> f_846(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v527, 3, 7, 4, 8, 9, 2, v535, v537) :|: 0 < v540 && 2 <= v537
f_846(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v527, 3, 7, 4, 8, 9, 2, v535, v537) -> f_849(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v527, 3, 7, 4, 8, 9, 2, v535, v537) :|: 0 = 0
f_849(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v527, 3, 7, 4, 8, 9, 2, v535, v537) -> f_852(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v527, 3, 7, 4, 8, 9, 2, v535, v537) :|: TRUE
f_852(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v520, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v527, 3, 7, 4, 8, 9, 2, v535, v537) -> f_854(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v527, 3, 7, 4, 8, 9, 2, v535, v537) :|: 0 = 0
f_854(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v539, v527, 3, 7, 4, 8, 9, 2, v535, v537) -> f_862(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v561, v522, v527, v560, v539, v558, v536, 3, 7, 4, 8, 15, 9, 2, v559, 16, v562) :|: v541 = 8 + v523 && v562 = 1 + v535 && 1 + v559 = v537 && v561 = 15 + v523 && 16 <= v561 && 1 <= v559 && 0 <= v562
f_862(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v561, v522, v527, v560, v539, v558, v536, 3, 7, 4, 8, 15, 9, 2, v559, 16, v562) -> f_864(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v561, v522, v527, v560, v539, v558, v536, 3, 7, 4, 8, 15, 9, 2, v559, 16, v562) :|: 0 = 0
f_864(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v561, v522, v527, v560, v539, v558, v536, 3, 7, 4, 8, 15, 9, 2, v559, 16, v562) -> f_866(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v561, v527, v560, v539, v558, v536, 3, 7, 4, 8, 15, 2, 9, v559, 16, v562) :|: TRUE
f_866(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v561, v527, v560, v539, v558, v536, 3, 7, 4, 8, 15, 2, 9, v559, 16, v562) -> f_868(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v561, v527, v560, v539, v558, v536, 3, 7, 4, 8, 15, 2, 9, v559, 16, v562) :|: TRUE
f_868(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v561, v527, v560, v539, v558, v536, 3, 7, 4, 8, 15, 2, 9, v559, 16, v562) -> f_869(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v561, v527, v560, v539, v558, v536, 3, 7, 4, 8, 15, 2, 9, v559, 16, v562) :|: TRUE
f_869(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v561, v527, v560, v539, v558, v536, 3, 7, 4, 8, 15, 2, 9, v559, 16, v562) -> f_823(v513, v514, v515, v516, v517, v518, 0, v523, 1, v541, v540, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v560, v539, v558, v527, 3, 7, 4, 8, 9, 2, v562, v559) :|: TRUE
f_823(v513, v514, v515, v516, v517, v518, 0, v520, 1, v522, v523, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v538, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) -> f_824(v513, v514, v515, v516, v517, v518, 0, v523, v520, 1, v522, v524, v528, v525, v529, v526, v530, v531, v532, v533, v534, v536, v538, v539, v540, v527, 3, 7, 4, 8, 9, 2, v535, v537) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_824(v513:0, v514:0, v515:0, v516:0, v517:0, v518:0, 0, v523:0, v520:0, 1, v522:0, v524:0, v528:0, v525:0, v529:0, v526:0, v530:0, v531:0, v532:0, v533:0, v534:0, v536:0, v514:0, v539:0, v540:0, v527:0, 3, 7, 4, 8, 9, 2, v535:0, 1 + v559:0) -> f_824(v513:0, v514:0, v515:0, v516:0, v517:0, v518:0, 0, v540:0, v523:0, 1, 8 + v523:0, v524:0, v528:0, v525:0, v529:0, v526:0, v530:0, v531:0, v532:0, v533:0, v534:0, v536:0, v560:0, v539:0, v558:0, v527:0, 3, 7, 4, 8, 9, 2, 1 + v535:0, v559:0) :|: v523:0 > 0 && v559:0 > 0 && v540:0 > 0 && v535:0 > -2
Filtered unneeded arguments:
   f_824(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34) -> f_824(x2, x8, x23, x25, x33, x34)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_824(v514:0, v523:0, v514:01, v540:0, v535:0, sum~cons_1~v559:0) -> f_824(v514:0, v540:0, v560:0, v558:0, 1 + v535:0, v559:0) :|: v559:0 > 0 && v523:0 > 0 && v535:0 > -2 && v540:0 > 0 && sum~cons_1~v559:0 = 1 + v559:0 && v514:0 = v514:01

----------------------------------------

(9)
Obligation:
Rules:
f_824(v514:0, v523:0, v514:01, v540:0, v535:0, sum~cons_1~v559:0) -> f_824(v514:0, v540:0, v560:0, v558:0, 1 + v535:0, v559:0) :|: v559:0 > 0 && v523:0 > 0 && v535:0 > -2 && v540:0 > 0 && sum~cons_1~v559:0 = 1 + v559:0 && v514:0 = v514:01

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_824(v514:01:0, v523:0:0, v514:01:01, v540:0:0, v535:0:0, sum~cons_1~v559:0:0) -> f_824(v514:01:0, v540:0:0, v560:0:0, v558:0:0, 1 + v535:0:0, v559:0:0) :|: v535:0:0 > -2 && v540:0:0 > 0 && v523:0:0 > 0 && v559:0:0 > 0 && sum~cons_1~v559:0:0 = 1 + v559:0:0 && v514:01:0 = v514:01:01

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_824(x, x1, x2, x3, x4, x5)] = x5

The following rules are decreasing:
f_824(v514:01:0, v523:0:0, v514:01:01, v540:0:0, v535:0:0, sum~cons_1~v559:0:0) -> f_824(v514:01:0, v540:0:0, v560:0:0, v558:0:0, 1 + v535:0:0, v559:0:0) :|: v535:0:0 > -2 && v540:0:0 > 0 && v523:0:0 > 0 && v559:0:0 > 0 && sum~cons_1~v559:0:0 = 1 + v559:0:0 && v514:01:0 = v514:01:01
The following rules are bounded:
f_824(v514:01:0, v523:0:0, v514:01:01, v540:0:0, v535:0:0, sum~cons_1~v559:0:0) -> f_824(v514:01:0, v540:0:0, v560:0:0, v558:0:0, 1 + v535:0:0, v559:0:0) :|: v535:0:0 > -2 && v540:0:0 > 0 && v523:0:0 > 0 && v559:0:0 > 0 && sum~cons_1~v559:0:0 = 1 + v559:0:0 && v514:01:0 = v514:01:01

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_638(v291, v292, v293, v294, v295, 0, v303, 1, v299, v300, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v317, v308, 3, 7, 4, 8, 9) -> f_639(v291, v292, v293, v294, v295, 0, v303, 1, v299, v300, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v317, v308, 3, 7, 4, 8, 9) :|: 0 = 0
f_639(v291, v292, v293, v294, v295, 0, v303, 1, v299, v300, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v317, v308, 3, 7, 4, 8, 9) -> f_640(v291, v292, v293, v294, v295, 0, v303, 1, v299, v300, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v317, v308, 3, 7, 4, 8, 2, 9) :|: v303 < v291 && 2 <= v291
f_640(v291, v292, v293, v294, v295, 0, v303, 1, v299, v300, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v317, v308, 3, 7, 4, 8, 2, 9) -> f_642(v291, v292, v293, v294, v295, 0, v303, 1, v299, v300, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v317, v308, 3, 7, 4, 8, 2, 9) :|: 0 = 0
f_642(v291, v292, v293, v294, v295, 0, v303, 1, v299, v300, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v317, v308, 3, 7, 4, 8, 2, 9) -> f_644(v291, v292, v293, v294, v295, 0, v303, 1, v299, v300, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v317, v308, 3, 7, 4, 8, 2, 9) :|: TRUE
f_644(v291, v292, v293, v294, v295, 0, v303, 1, v299, v300, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v317, v308, 3, 7, 4, 8, 2, 9) -> f_646(v291, v292, v293, v294, v295, 0, v303, 1, v318, v299, v300, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v317, v308, 3, 7, 4, 8, 15, 2, 9, 16) :|: v319 = 15 + v318 && v318 % 4 = 0 && 16 <= v319
f_646(v291, v292, v293, v294, v295, 0, v303, 1, v318, v299, v300, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v317, v308, 3, 7, 4, 8, 15, 2, 9, 16) -> f_648(v291, v292, v293, v294, v295, 0, v303, 1, v318, v300, v299, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v317, v308, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_648(v291, v292, v293, v294, v295, 0, v303, 1, v318, v300, v299, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v317, v308, 3, 7, 4, 8, 15, 2, 9, 16) -> f_650(v291, v292, v293, v294, v295, 0, v303, 1, v318, v300, v299, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v317, v308, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_650(v291, v292, v293, v294, v295, 0, v303, 1, v318, v300, v299, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v317, v308, 3, 7, 4, 8, 15, 2, 9, 16) -> f_652(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v300, v317, v308, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_652(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v300, v317, v308, 3, 7, 4, 8, 15, 2, 9, 16) -> f_654(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v300, v317, v308, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_654(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v300, v317, v308, 3, 7, 4, 8, 15, 2, 9, 16) -> f_656(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v301, v299, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v300, v317, v308, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_656(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v301, v299, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v300, v317, v308, 3, 7, 4, 8, 15, 2, 9, 16) -> f_658(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v301, v299, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v300, v317, v308, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_658(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v301, v299, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v300, v317, v308, 3, 7, 4, 8, 15, 2, 9, 16) -> f_660(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v300, v317, v301, v308, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_660(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v300, v317, v301, v308, 3, 7, 4, 8, 15, 2, 9, 16) -> f_662(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v300, v317, v301, v308, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_662(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v300, v317, v301, v308, 3, 7, 4, 8, 15, 2, 9, 16) -> f_664(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v300, v317, v301, v308, 3, 7, 4, 15, 8, 2, 16, 9) :|: v331 = 8 + v318 && 9 <= v331
f_664(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v319, v300, v317, v301, v308, 3, 7, 4, 15, 8, 2, 16, 9) -> f_666(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, v333, 2, 9) :|: v333 = 1 + v303 && 2 <= v333
f_666(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, v333, 2, 9) -> f_668(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, v333, 2, 9) :|: 0 = 0
f_668(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, v333, 2, 9) -> f_670(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, v333, 2, 9) :|: TRUE
f_670(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, v333, 2, 9) -> f_672(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, v333, 2, 9) :|: TRUE
f_672(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, v333, 2, 9) -> f_674(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, v333, 2, 9) :|: 0 = 0
f_674(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, v333, 2, 9) -> f_676(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v333, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, 2, 9) :|: v333 = 1 + v303
f_676(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v333, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, 2, 9) -> f_678(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v333, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, 2, 9) :|: TRUE
f_678(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v333, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, 2, 9) -> f_680(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v333, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, 2, 9) :|: TRUE
f_680(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v333, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v308, v317, 3, 7, 4, 8, 2, 9) -> f_637(v291, v292, v293, v294, v295, 0, v303, 1, v318, v322, v299, v331, v333, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v317, v308, 3, 7, 4, 8, 9) :|: TRUE
f_637(v291, v292, v293, v294, v295, 0, v297, 1, v299, v300, v301, v302, v303, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v317, v308, 3, 7, 4, 8, 9) -> f_638(v291, v292, v293, v294, v295, 0, v303, 1, v299, v300, v301, v302, v297, v304, v309, v305, v310, v306, v311, v307, v312, v313, v314, v315, v316, v317, v308, 3, 7, 4, 8, 9) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_638(v291:0, v292:0, v293:0, v294:0, v295:0, 0, v303:0, 1, v299:0, v300:0, v301:0, v302:0, v297:0, v304:0, v309:0, v305:0, v310:0, v306:0, v311:0, v307:0, v312:0, v313:0, v314:0, v315:0, v316:0, v317:0, v308:0, 3, 7, 4, 8, 9) -> f_638(v291:0, v292:0, v293:0, v294:0, v295:0, 0, 1 + v303:0, 1, v318:0, v322:0, v299:0, 8 + v318:0, v303:0, v304:0, v309:0, v305:0, v310:0, v306:0, v311:0, v307:0, v312:0, v313:0, v314:0, v315:0, v316:0, v317:0, v308:0, 3, 7, 4, 8, 9) :|: v291:0 > 1 && v303:0 < v291:0 && v318:0 % 4 = 0 && v318:0 > 0 && v303:0 > 0
Filtered unneeded arguments:
   f_638(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32) -> f_638(x1, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_638(v291:0, v303:0) -> f_638(v291:0, 1 + v303:0) :|: v303:0 < v291:0 && v303:0 > 0 && v291:0 > 1

----------------------------------------

(16)
Obligation:
Rules:
f_638(v291:0, v303:0) -> f_638(v291:0, 1 + v303:0) :|: v303:0 < v291:0 && v303:0 > 0 && v291:0 > 1

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_638(v291:0:0, v303:0:0) -> f_638(v291:0:0, 1 + v303:0:0) :|: v303:0:0 < v291:0:0 && v303:0:0 > 0 && v291:0:0 > 1

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_638(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_638(v291:0:0, v303:0:0) -> f_638(v291:0:0, 1 + v303:0:0) :|: v303:0:0 < v291:0:0 && v303:0:0 > 0 && v291:0:0 > 1
The following rules are bounded:
f_638(v291:0:0, v303:0:0) -> f_638(v291:0:0, 1 + v303:0:0) :|: v303:0:0 < v291:0:0 && v303:0:0 > 0 && v291:0:0 > 1

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
