YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/r867S.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 48 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 9771 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 16 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 18 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 11 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (27) YES
    (28) LLVM Symbolic Execution SCC
        (29) SCC2IRS [SOUND, 13 ms]
        (30) IntTRS
        (31) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (32) IntTRS
        (33) RankingReductionPairProof [EQUIVALENT, 12 ms]
        (34) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/r867S.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/r867S.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cstrncpy" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8, 1 *i8, 2 i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		%6 = alloca i64, align 8
		%7 = alloca *i8, align 8
		%8 = alloca *i8, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %6)
		%9 = load %6
		%10 = icmp ne %9 0
		br %10, %11, %37
	11:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %7)
		%12 = load %4
		store %12, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %8)
		%13 = load %5
		store %13, %8
		br %14
	14:
		%15 = load %8
		%16 = getelementptr %15, 1
		store %16, %8
		%17 = load %15
		%18 = load %7
		%19 = getelementptr %18, 1
		store %19, %7
		store %17, %18
		%20 = sext i8 %17 to i32
		%21 = icmp eq %20 0
		br %21, %22, %31
	22:
		br %23
	23:
		%24 = load %6
		%25 = add i64 %24, -1
		store %25, %6
		%26 = icmp ne %25 0
		br %26, %27, %30
	27:
		%28 = load %7
		%29 = getelementptr %28, 1
		store %29, %7
		store 0, %28
		br %23
	30:
		br %36
	31:
		br %32
	32:
		%33 = load %6
		%34 = add i64 %33, -1
		store %34, %6
		%35 = icmp ne %34 0
		br %35, %14, %36
	36:
		br %37
	37:
		%38 = load %4
		ret %38

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 63
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = load %2
		%9 = icmp slt %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %11
	11:
		%12 = load %3
		%13 = icmp slt %12 1
		br %13, %14, %15
	14:
		store 1, %3
		br %15
	15:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%16 = load %3
		%17 = sext i32 %16 to i64
		%18 = mul i64 %17, 1
		%19 = alloca i8, numElementsLit: %18, align 16
		store %19, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%20 = load %2
		%21 = sext i32 %20 to i64
		%22 = mul i64 %21, 1
		%23 = alloca i8, numElementsLit: %22, align 16
		store %23, %5
		%24 = load %5
		%25 = load %2
		%26 = sub i32 %25, 1
		%27 = sext i32 %26 to i64
		%28 = getelementptr %24, %27
		store 0, %28
		%29 = load %4
		%30 = load %5
		%31 = load %3
		%32 = sext i32 %31 to i64
		%33 = call *i8 @cstrncpy(*i8 %29, *i8 %30, i64 %32)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 4 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_1005(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4805, v4806, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4812, v4813, 3, 7, 2, 4, 8) -> f_1006(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4805, v4806, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4812, v4813, 3, 7, 2, 4, 8) :|: 1 + v4849 = v4804 && 0 <= v4849
f_1006(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4805, v4806, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4812, v4813, 3, 7, 2, 4, 8) -> f_1007(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4805, v4806, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4812, v4813, 3, 7, 2, 4, 8) :|: TRUE
f_1007(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4805, v4806, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4812, v4813, 3, 7, 2, 4, 8) -> f_1008(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4805, v4806, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4812, v4813, 3, 7, 2, 4, 8) :|: 0 < v4849 && 2 <= v4804 && 4 <= v4801 && 3 <= v4802 && 4 <= v4820
f_1008(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4805, v4806, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4812, v4813, 3, 7, 2, 4, 8) -> f_1010(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4805, v4806, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4812, v4813, 3, 7, 2, 4, 8) :|: 0 = 0
f_1010(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4805, v4806, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4812, v4813, 3, 7, 2, 4, 8) -> f_1012(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4805, v4806, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4812, v4813, 3, 7, 2, 4, 8) :|: TRUE
f_1012(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4805, v4806, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4812, v4813, 3, 7, 2, 4, 8) -> f_1014(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4806, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4805, v4812, v4813, 3, 7, 2, 4, 8) :|: 0 = 0
f_1014(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4806, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4805, v4812, v4813, 3, 7, 2, 4, 8) -> f_1016(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4806, v5050, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4805, v4812, v4813, 3, 7, 2, 4, 8, 5) :|: v5050 = 1 + v4806 && 5 <= v5050
f_1016(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4806, v5050, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4805, v4812, v4813, 3, 7, 2, 4, 8, 5) -> f_1018(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4806, v5050, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4805, v4812, v4813, 3, 7, 2, 4, 8, 5) :|: TRUE
f_1018(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4806, v5050, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4805, v4812, v4813, 3, 7, 2, 4, 8, 5) -> f_1020(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4806, v5050, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4805, v4812, v4813, 3, 7, 2, 4, 8, 5) :|: TRUE
f_1020(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4806, v5050, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4805, v4812, v4813, 3, 7, 2, 4, 8, 5) -> f_1022(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4806, v5050, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4805, v4812, v4813, 3, 7, 2, 4, 8, 5) :|: TRUE
f_1022(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4806, v5050, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4805, v4812, v4813, 3, 7, 2, 4, 8, 5) -> f_1004(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4849, v4806, v5050, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4812, v4813, 3, 7, 2, 4, 8) :|: TRUE
f_1004(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4803, v4804, v4805, v4806, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4812, v4813, 3, 7, 2, 4, 8) -> f_1005(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 1, v4796, v4797, 0, v4799, v4800, v4801, v4802, v4804, v4805, v4806, v4807, v4815, v4808, v4816, v4809, v4817, v4810, v4818, v4811, v4819, v4820, v4814, v4821, v4822, v4823, v4824, v4825, v4830, v4829, v4831, v4828, v4826, v4832, v4827, v4812, v4813, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_1005(v4787:0, v4788:0, v4789:0, v4790:0, v4791:0, v4792:0, v4793:0, v4794:0, 1, v4796:0, v4797:0, 0, v4799:0, v4800:0, v4801:0, v4802:0, 1 + v4849:0, v4805:0, v4806:0, v4807:0, v4815:0, v4808:0, v4816:0, v4809:0, v4817:0, v4810:0, v4818:0, v4811:0, v4819:0, v4820:0, v4814:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4830:0, v4829:0, v4831:0, v4828:0, v4826:0, v4832:0, v4827:0, v4812:0, v4813:0, 3, 7, 2, 4, 8) -> f_1005(v4787:0, v4788:0, v4789:0, v4790:0, v4791:0, v4792:0, v4793:0, v4794:0, 1, v4796:0, v4797:0, 0, v4799:0, v4800:0, v4801:0, v4802:0, v4849:0, v4806:0, 1 + v4806:0, v4807:0, v4815:0, v4808:0, v4816:0, v4809:0, v4817:0, v4810:0, v4818:0, v4811:0, v4819:0, v4820:0, v4814:0, v4821:0, v4822:0, v4823:0, v4824:0, v4825:0, v4830:0, v4829:0, v4831:0, v4828:0, v4826:0, v4832:0, v4827:0, v4812:0, v4813:0, 3, 7, 2, 4, 8) :|: v4849:0 > 0 && v4801:0 > 3 && v4802:0 > 2 && v4806:0 > 3 && v4820:0 > 3
Filtered unneeded arguments:
   f_1005(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50) -> f_1005(x15, x16, x17, x19, x30)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1005(v4801:0, v4802:0, sum~cons_1~v4849:0, v4806:0, v4820:0) -> f_1005(v4801:0, v4802:0, v4849:0, 1 + v4806:0, v4820:0) :|: v4801:0 > 3 && v4849:0 > 0 && v4802:0 > 2 && v4820:0 > 3 && v4806:0 > 3 && sum~cons_1~v4849:0 = 1 + v4849:0

----------------------------------------

(9)
Obligation:
Rules:
f_1005(v4801:0, v4802:0, sum~cons_1~v4849:0, v4806:0, v4820:0) -> f_1005(v4801:0, v4802:0, v4849:0, 1 + v4806:0, v4820:0) :|: v4801:0 > 3 && v4849:0 > 0 && v4802:0 > 2 && v4820:0 > 3 && v4806:0 > 3 && sum~cons_1~v4849:0 = 1 + v4849:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_1005(v4801:0:0, v4802:0:0, sum~cons_1~v4849:0:0, v4806:0:0, v4820:0:0) -> f_1005(v4801:0:0, v4802:0:0, v4849:0:0, 1 + v4806:0:0, v4820:0:0) :|: v4820:0:0 > 3 && v4806:0:0 > 3 && v4802:0:0 > 2 && v4849:0:0 > 0 && v4801:0:0 > 3 && sum~cons_1~v4849:0:0 = 1 + v4849:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1005(x, x1, x2, x3, x4)] = -2 + x2

The following rules are decreasing:
f_1005(v4801:0:0, v4802:0:0, sum~cons_1~v4849:0:0, v4806:0:0, v4820:0:0) -> f_1005(v4801:0:0, v4802:0:0, v4849:0:0, 1 + v4806:0:0, v4820:0:0) :|: v4820:0:0 > 3 && v4806:0:0 > 3 && v4802:0:0 > 2 && v4849:0:0 > 0 && v4801:0:0 > 3 && sum~cons_1~v4849:0:0 = 1 + v4849:0:0
The following rules are bounded:
f_1005(v4801:0:0, v4802:0:0, sum~cons_1~v4849:0:0, v4806:0:0, v4820:0:0) -> f_1005(v4801:0:0, v4802:0:0, v4849:0:0, 1 + v4806:0:0, v4820:0:0) :|: v4820:0:0 > 3 && v4806:0:0 > 3 && v4802:0:0 > 2 && v4849:0:0 > 0 && v4801:0:0 > 3 && sum~cons_1~v4849:0:0 = 1 + v4849:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_957(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4073, v4074, v4075, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_958(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4073, v4074, v4075, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: v4102 = 1 + v4072 && 4 <= v4102
f_958(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4073, v4074, v4075, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_959(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4073, v4074, v4075, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: TRUE
f_959(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4073, v4074, v4075, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_960(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4074, v4075, v4073, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: TRUE
f_960(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4074, v4075, v4073, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_961(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4073, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: 0 = 0
f_961(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4073, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_962(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, v4073, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: v4106 = 1 + v4075 && 4 <= v4106
f_962(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, v4073, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_963(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, v4073, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: TRUE
f_963(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, v4073, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_964(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, v4073, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: TRUE
f_964(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, v4073, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_965(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: 0 = 0
f_965(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_967(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: v4104 != 0 && v4072 < v4086 && 4 <= v4086
f_967(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_969(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: 0 = 0
f_969(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_971(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: TRUE
f_971(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_973(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: TRUE
f_973(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_975(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: 0 = 0
f_975(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_977(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4078, v4248, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: 1 + v4248 = v4078 && 0 <= v4248
f_977(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4078, v4248, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_979(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4078, v4248, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: TRUE
f_979(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4078, v4248, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_982(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4078, v4248, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: 0 < v4248 && 2 <= v4078 && 4 <= v4092
f_982(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4078, v4248, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_986(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4078, v4248, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: 0 = 0
f_986(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4078, v4248, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_990(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4078, v4248, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: TRUE
f_990(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4078, v4248, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4073, v4074, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_956(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4102, v4104, v4075, v4106, 0, v4078, v4248, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: TRUE
f_956(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4071, v4072, v4073, v4074, v4075, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) -> f_957(v4062, v4063, v4064, v4065, v4066, v4067, v4068, v4069, 1, v4072, v4073, v4074, v4075, 0, v4077, v4078, v4079, v4087, v4080, v4088, v4081, v4089, v4082, v4090, v4083, v4091, v4092, v4086, v4093, v4094, v4095, v4096, v4097, v4100, v4071, v4084, v4098, v4101, v4099, v4085, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_957(v4062:0, v4063:0, v4064:0, v4065:0, v4066:0, v4067:0, v4068:0, v4069:0, 1, v4072:0, v4073:0, v4074:0, v4075:0, 0, v4077:0, 1 + v4248:0, v4079:0, v4087:0, v4080:0, v4088:0, v4081:0, v4089:0, v4082:0, v4090:0, v4083:0, v4091:0, v4092:0, v4086:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4100:0, v4071:0, v4084:0, v4098:0, v4101:0, v4099:0, v4085:0, 3, 7, 2, 4, 8) -> f_957(v4062:0, v4063:0, v4064:0, v4065:0, v4066:0, v4067:0, v4068:0, v4069:0, 1, 1 + v4072:0, v4104:0, v4075:0, 1 + v4075:0, 0, 1 + v4248:0, v4248:0, v4079:0, v4087:0, v4080:0, v4088:0, v4081:0, v4089:0, v4082:0, v4090:0, v4083:0, v4091:0, v4092:0, v4086:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4100:0, v4072:0, v4084:0, v4098:0, v4101:0, v4099:0, v4085:0, 3, 7, 2, 4, 8) :|: v4248:0 > 0 && v4072:0 > 2 && v4075:0 > 2 && v4086:0 > v4072:0 && v4104:0 < 0 && v4086:0 > 3 && v4092:0 > 3
f_957(v4062:0, v4063:0, v4064:0, v4065:0, v4066:0, v4067:0, v4068:0, v4069:0, 1, v4072:0, v4073:0, v4074:0, v4075:0, 0, v4077:0, 1 + v4248:0, v4079:0, v4087:0, v4080:0, v4088:0, v4081:0, v4089:0, v4082:0, v4090:0, v4083:0, v4091:0, v4092:0, v4086:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4100:0, v4071:0, v4084:0, v4098:0, v4101:0, v4099:0, v4085:0, 3, 7, 2, 4, 8) -> f_957(v4062:0, v4063:0, v4064:0, v4065:0, v4066:0, v4067:0, v4068:0, v4069:0, 1, 1 + v4072:0, v4104:0, v4075:0, 1 + v4075:0, 0, 1 + v4248:0, v4248:0, v4079:0, v4087:0, v4080:0, v4088:0, v4081:0, v4089:0, v4082:0, v4090:0, v4083:0, v4091:0, v4092:0, v4086:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4100:0, v4072:0, v4084:0, v4098:0, v4101:0, v4099:0, v4085:0, 3, 7, 2, 4, 8) :|: v4248:0 > 0 && v4072:0 > 2 && v4075:0 > 2 && v4086:0 > v4072:0 && v4104:0 > 0 && v4086:0 > 3 && v4092:0 > 3
Filtered unneeded arguments:
   f_957(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45) -> f_957(x10, x13, x16, x27, x28)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_957(v4072:0, v4075:0, sum~cons_1~v4248:0, v4092:0, v4086:0) -> f_957(1 + v4072:0, 1 + v4075:0, v4248:0, v4092:0, v4086:0) :|: v4072:0 > 2 && v4248:0 > 0 && v4075:0 > 2 && v4086:0 > v4072:0 && v4092:0 > 3 && v4086:0 > 3 && sum~cons_1~v4248:0 = 1 + v4248:0

----------------------------------------

(16)
Obligation:
Rules:
f_957(v4072:0, v4075:0, sum~cons_1~v4248:0, v4092:0, v4086:0) -> f_957(1 + v4072:0, 1 + v4075:0, v4248:0, v4092:0, v4086:0) :|: v4072:0 > 2 && v4248:0 > 0 && v4075:0 > 2 && v4086:0 > v4072:0 && v4092:0 > 3 && v4086:0 > 3 && sum~cons_1~v4248:0 = 1 + v4248:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_957(v4072:0:0, v4075:0:0, sum~cons_1~v4248:0:0, v4092:0:0, v4086:0:0) -> f_957(1 + v4072:0:0, 1 + v4075:0:0, v4248:0:0, v4092:0:0, v4086:0:0) :|: v4092:0:0 > 3 && v4086:0:0 > 3 && v4086:0:0 > v4072:0:0 && v4075:0:0 > 2 && v4248:0:0 > 0 && v4072:0:0 > 2 && sum~cons_1~v4248:0:0 = 1 + v4248:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_957 ] = f_957_3

The following rules are decreasing:
f_957(v4072:0:0, v4075:0:0, sum~cons_1~v4248:0:0, v4092:0:0, v4086:0:0) -> f_957(1 + v4072:0:0, 1 + v4075:0:0, v4248:0:0, v4092:0:0, v4086:0:0) :|: v4092:0:0 > 3 && v4086:0:0 > 3 && v4086:0:0 > v4072:0:0 && v4075:0:0 > 2 && v4248:0:0 > 0 && v4072:0:0 > 2 && sum~cons_1~v4248:0:0 = 1 + v4248:0:0

The following rules are bounded:
f_957(v4072:0:0, v4075:0:0, sum~cons_1~v4248:0:0, v4092:0:0, v4086:0:0) -> f_957(1 + v4072:0:0, 1 + v4075:0:0, v4248:0:0, v4092:0:0, v4086:0:0) :|: v4092:0:0 > 3 && v4086:0:0 > 3 && v4086:0:0 > v4072:0:0 && v4075:0:0 > 2 && v4248:0:0 > 0 && v4072:0:0 > 2 && sum~cons_1~v4248:0:0 = 1 + v4248:0:0


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_870(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2408, v2409, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2415, v2429, v2416, 3, 7, 2, 4, 8) -> f_874(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2408, v2409, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2415, v2429, v2416, 3, 7, 2, 4, 8) :|: 1 + v2805 = v2407 && 0 <= v2805
f_874(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2408, v2409, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2415, v2429, v2416, 3, 7, 2, 4, 8) -> f_878(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2408, v2409, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2415, v2429, v2416, 3, 7, 2, 4, 8) :|: TRUE
f_878(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2408, v2409, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2415, v2429, v2416, 3, 7, 2, 4, 8) -> f_882(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2408, v2409, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2415, v2429, v2416, 3, 7, 2, 4, 8) :|: 0 < v2805 && 2 <= v2407 && 4 <= v2423
f_882(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2408, v2409, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2415, v2429, v2416, 3, 7, 2, 4, 8) -> f_887(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2408, v2409, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2415, v2429, v2416, 3, 7, 2, 4, 8) :|: 0 = 0
f_887(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2408, v2409, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2415, v2429, v2416, 3, 7, 2, 4, 8) -> f_892(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2408, v2409, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2415, v2429, v2416, 3, 7, 2, 4, 8) :|: TRUE
f_892(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2408, v2409, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2415, v2429, v2416, 3, 7, 2, 4, 8) -> f_897(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2409, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2408, v2415, v2429, v2416, 3, 7, 2, 4, 8) :|: 0 = 0
f_897(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2409, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2408, v2415, v2429, v2416, 3, 7, 2, 4, 8) -> f_902(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2409, v3061, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2408, v2415, v2429, v2416, 3, 7, 2, 4, 8, 5) :|: v3061 = 1 + v2409 && 5 <= v3061
f_902(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2409, v3061, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2408, v2415, v2429, v2416, 3, 7, 2, 4, 8, 5) -> f_907(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2409, v3061, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2408, v2415, v2429, v2416, 3, 7, 2, 4, 8, 5) :|: TRUE
f_907(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2409, v3061, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2408, v2415, v2429, v2416, 3, 7, 2, 4, 8, 5) -> f_911(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2409, v3061, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2408, v2415, v2429, v2416, 3, 7, 2, 4, 8, 5) :|: TRUE
f_911(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2409, v3061, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2408, v2415, v2429, v2416, 3, 7, 2, 4, 8, 5) -> f_916(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2409, v3061, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2408, v2415, v2429, v2416, 3, 7, 2, 4, 8, 5) :|: TRUE
f_916(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2409, v3061, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2408, v2415, v2429, v2416, 3, 7, 2, 4, 8, 5) -> f_863(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2805, v2409, v3061, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2415, v2429, v2416, 3, 7, 2, 4, 8) :|: TRUE
f_863(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2406, v2407, v2408, v2409, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2415, v2429, v2416, 3, 7, 2, 4, 8) -> f_870(v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, 1, v2403, 0, v2405, v2407, v2408, v2409, v2410, v2418, v2411, v2419, v2412, v2420, v2413, v2421, v2414, v2422, v2423, v2417, v2424, v2425, v2426, v2427, v2428, v2415, v2429, v2416, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_870(v2394:0, v2395:0, v2396:0, v2397:0, v2398:0, v2399:0, v2400:0, v2401:0, 1, v2403:0, 0, v2405:0, 1 + v2805:0, v2408:0, v2409:0, v2410:0, v2418:0, v2411:0, v2419:0, v2412:0, v2420:0, v2413:0, v2421:0, v2414:0, v2422:0, v2423:0, v2417:0, v2424:0, v2425:0, v2426:0, v2427:0, v2428:0, v2415:0, v2429:0, v2416:0, 3, 7, 2, 4, 8) -> f_870(v2394:0, v2395:0, v2396:0, v2397:0, v2398:0, v2399:0, v2400:0, v2401:0, 1, v2403:0, 0, v2405:0, v2805:0, v2409:0, 1 + v2409:0, v2410:0, v2418:0, v2411:0, v2419:0, v2412:0, v2420:0, v2413:0, v2421:0, v2414:0, v2422:0, v2423:0, v2417:0, v2424:0, v2425:0, v2426:0, v2427:0, v2428:0, v2415:0, v2429:0, v2416:0, 3, 7, 2, 4, 8) :|: v2805:0 > 0 && v2409:0 > 3 && v2423:0 > 3
Filtered unneeded arguments:
   f_870(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40) -> f_870(x13, x15, x26)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_870(sum~cons_1~v2805:0, v2409:0, v2423:0) -> f_870(v2805:0, 1 + v2409:0, v2423:0) :|: v2409:0 > 3 && v2423:0 > 3 && v2805:0 > 0 && sum~cons_1~v2805:0 = 1 + v2805:0

----------------------------------------

(23)
Obligation:
Rules:
f_870(sum~cons_1~v2805:0, v2409:0, v2423:0) -> f_870(v2805:0, 1 + v2409:0, v2423:0) :|: v2409:0 > 3 && v2423:0 > 3 && v2805:0 > 0 && sum~cons_1~v2805:0 = 1 + v2805:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_870(sum~cons_1~v2805:0:0, v2409:0:0, v2423:0:0) -> f_870(v2805:0:0, 1 + v2409:0:0, v2423:0:0) :|: v2409:0:0 > 3 && v2423:0:0 > 3 && v2805:0:0 > 0 && sum~cons_1~v2805:0:0 = 1 + v2805:0:0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_870(x, x1, x2)] = x

The following rules are decreasing:
f_870(sum~cons_1~v2805:0:0, v2409:0:0, v2423:0:0) -> f_870(v2805:0:0, 1 + v2409:0:0, v2423:0:0) :|: v2409:0:0 > 3 && v2423:0:0 > 3 && v2805:0:0 > 0 && sum~cons_1~v2805:0:0 = 1 + v2805:0:0
The following rules are bounded:
f_870(sum~cons_1~v2805:0:0, v2409:0:0, v2423:0:0) -> f_870(v2805:0:0, 1 + v2409:0:0, v2423:0:0) :|: v2409:0:0 > 3 && v2423:0:0 > 3 && v2805:0:0 > 0 && sum~cons_1~v2805:0:0 = 1 + v2805:0:0

----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
SCC
----------------------------------------

(29) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_791(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1666, v1667, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1673, 3, 7, 2, 4, 8) -> f_797(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1666, v1667, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1673, 3, 7, 2, 4, 8) :|: 1 + v1724 = v1665 && 0 <= v1724
f_797(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1666, v1667, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1673, 3, 7, 2, 4, 8) -> f_803(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1666, v1667, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1673, 3, 7, 2, 4, 8) :|: TRUE
f_803(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1666, v1667, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1673, 3, 7, 2, 4, 8) -> f_810(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1666, v1667, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1673, 3, 7, 2, 4, 8) :|: 0 < v1724 && 2 <= v1665 && 3 <= v1679 && 3 <= v1654
f_810(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1666, v1667, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1673, 3, 7, 2, 4, 8) -> f_818(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1666, v1667, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1673, 3, 7, 2, 4, 8) :|: 0 = 0
f_818(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1666, v1667, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1673, 3, 7, 2, 4, 8) -> f_826(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1666, v1667, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1673, 3, 7, 2, 4, 8) :|: TRUE
f_826(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1666, v1667, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1673, 3, 7, 2, 4, 8) -> f_834(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1667, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1666, v1673, 3, 7, 2, 4, 8) :|: 0 = 0
f_834(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1667, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1666, v1673, 3, 7, 2, 4, 8) -> f_842(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1667, v2285, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1666, v1673, 3, 7, 2, 4, 8) :|: v2285 = 1 + v1667 && 4 <= v2285
f_842(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1667, v2285, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1666, v1673, 3, 7, 2, 4, 8) -> f_851(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1667, v2285, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1666, v1673, 3, 7, 2, 4, 8) :|: TRUE
f_851(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1667, v2285, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1666, v1673, 3, 7, 2, 4, 8) -> f_860(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1667, v2285, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1666, v1673, 3, 7, 2, 4, 8) :|: TRUE
f_860(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1667, v2285, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1666, v1673, 3, 7, 2, 4, 8) -> f_869(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1667, v2285, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1666, v1673, 3, 7, 2, 4, 8) :|: TRUE
f_869(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1667, v2285, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1666, v1673, 3, 7, 2, 4, 8) -> f_786(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1724, v1667, v2285, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1673, 3, 7, 2, 4, 8) :|: TRUE
f_786(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1664, v1665, v1666, v1667, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1673, 3, 7, 2, 4, 8) -> f_791(v1652, v1653, v1654, v1655, v1656, v1657, v1658, v1659, 1, v1661, 0, v1663, v1665, v1666, v1667, v1668, v1674, v1669, v1675, v1670, v1676, v1671, v1677, v1672, v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1673, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_791(v1652:0, v1653:0, v1654:0, v1655:0, v1656:0, v1657:0, v1658:0, v1659:0, 1, v1661:0, 0, v1663:0, 1 + v1724:0, v1666:0, v1667:0, v1668:0, v1674:0, v1669:0, v1675:0, v1670:0, v1676:0, v1671:0, v1677:0, v1672:0, v1678:0, v1679:0, v1680:0, v1681:0, v1682:0, v1683:0, v1684:0, v1673:0, 3, 7, 2, 4, 8) -> f_791(v1652:0, v1653:0, v1654:0, v1655:0, v1656:0, v1657:0, v1658:0, v1659:0, 1, v1661:0, 0, v1663:0, v1724:0, v1667:0, 1 + v1667:0, v1668:0, v1674:0, v1669:0, v1675:0, v1670:0, v1676:0, v1671:0, v1677:0, v1672:0, v1678:0, v1679:0, v1680:0, v1681:0, v1682:0, v1683:0, v1684:0, v1673:0, 3, 7, 2, 4, 8) :|: v1724:0 > 0 && v1679:0 > 2 && v1667:0 > 2 && v1654:0 > 2
Filtered unneeded arguments:
   f_791(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37) -> f_791(x3, x13, x15, x26)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_791(v1654:0, sum~cons_1~v1724:0, v1667:0, v1679:0) -> f_791(v1654:0, v1724:0, 1 + v1667:0, v1679:0) :|: v1679:0 > 2 && v1724:0 > 0 && v1654:0 > 2 && v1667:0 > 2 && sum~cons_1~v1724:0 = 1 + v1724:0

----------------------------------------

(30)
Obligation:
Rules:
f_791(v1654:0, sum~cons_1~v1724:0, v1667:0, v1679:0) -> f_791(v1654:0, v1724:0, 1 + v1667:0, v1679:0) :|: v1679:0 > 2 && v1724:0 > 0 && v1654:0 > 2 && v1667:0 > 2 && sum~cons_1~v1724:0 = 1 + v1724:0

----------------------------------------

(31) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(32)
Obligation:
Rules:
f_791(v1654:0:0, sum~cons_1~v1724:0:0, v1667:0:0, v1679:0:0) -> f_791(v1654:0:0, v1724:0:0, 1 + v1667:0:0, v1679:0:0) :|: v1654:0:0 > 2 && v1667:0:0 > 2 && v1724:0:0 > 0 && v1679:0:0 > 2 && sum~cons_1~v1724:0:0 = 1 + v1724:0:0

----------------------------------------

(33) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_791 ] = f_791_2

The following rules are decreasing:
f_791(v1654:0:0, sum~cons_1~v1724:0:0, v1667:0:0, v1679:0:0) -> f_791(v1654:0:0, v1724:0:0, 1 + v1667:0:0, v1679:0:0) :|: v1654:0:0 > 2 && v1667:0:0 > 2 && v1724:0:0 > 0 && v1679:0:0 > 2 && sum~cons_1~v1724:0:0 = 1 + v1724:0:0

The following rules are bounded:
f_791(v1654:0:0, sum~cons_1~v1724:0:0, v1667:0:0, v1679:0:0) -> f_791(v1654:0:0, v1724:0:0, 1 + v1667:0:0, v1679:0:0) :|: v1654:0:0 > 2 && v1667:0:0 > 2 && v1724:0:0 > 0 && v1679:0:0 > 2 && sum~cons_1~v1724:0:0 = 1 + v1724:0:0


----------------------------------------

(34)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
