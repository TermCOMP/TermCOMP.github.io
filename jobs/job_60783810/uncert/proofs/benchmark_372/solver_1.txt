NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/wVmMi.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 690 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [EQUIVALENT, 63 ms]
(6) IntTRS
(7) IRSNoOverapproximation [EQUIVALENT, 0 ms]
(8) IntTRS
(9) IRSToKoat [EQUIVALENT, 0 ms]
(10) Koat Problem
(11) LoAT [COMPLETE, 394 ms]
(12) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/wVmMi.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/wVmMi.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		store 0, %3
		store 1, %4
		store 0, %5
		br %7
	7:
		%8 = load %4
		%9 = load %2
		%10 = icmp ne %8 %9
		br %10, %11, %17
	11:
		%12 = load %4
		%13 = load %3
		%14 = add i32 %12, %13
		store %14, %5
		%15 = load %4
		store %15, %3
		%16 = load %5
		store %16, %4
		br %7
	17:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 56 rulesP rules:
f_94 -> f_95(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_95(v1, v2, 3, 1, 4) -> f_96(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_96(v1, v3, v2, v4, 3, 1, 4) -> f_97(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_97(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_98(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_98(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_99(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) :|: 1 <= v9 && v10 = 3 + v9 && 4 <= v10
f_99(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) -> f_100(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_100(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_101(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_101(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_102(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_102(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_103(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_103(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_104(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_104(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_105(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_105(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_106(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_106(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_107(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_107(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_108(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 1, 3, 4) :|: TRUE
f_108(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 1, 3, 4) -> f_109(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 1, 3, 4) :|: TRUE
f_109(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 1, 3, 4) -> f_110(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 1, 3, 4) :|: TRUE
f_110(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 1, 3, 4) -> f_111(v1, v3, v5, v7, v9, v11, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_111(v1, v3, v5, v7, v9, v11, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_112(v1, v3, v5, v7, v9, v11, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_112(v1, v3, v5, v7, v9, v11, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_113(v1, v3, v5, v7, v9, v11, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 1 != v11
f_112(v1, v3, v5, v7, v9, v11, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_114(v1, v3, v5, v7, v9, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 1 = v11
f_113(v1, v3, v5, v7, v9, v11, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_115(v1, v3, v5, v7, v9, v11, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_114(v1, v3, v5, v7, v9, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_116(v1, v3, v5, v7, v9, 1, 0, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_115(v1, v3, v5, v7, v9, v11, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_117(v1, v3, v5, v7, v9, v11, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_116(v1, v3, v5, v7, v9, 1, 0, v2, v4, v6, v8, v10, 3, 4) -> f_118(v1, v3, v5, v7, v9, 1, 0, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_117(v1, v3, v5, v7, v9, v11, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_119(v1, v3, v5, v7, v9, v11, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_119(v1, v3, v5, v7, v9, v11, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_120(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_120(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) -> f_121(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_121(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) -> f_122(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_122(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) -> f_123(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_123(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) -> f_124(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_124(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) -> f_125(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_125(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) -> f_126(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_126(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) -> f_127(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_127(v1, v3, v5, v7, v9, v11, 1, 0, v2, v4, v6, v8, v10, 3, 4) -> f_141(v1, v3, v5, v7, v9, v11, 1, 0, 1, v2, v4, v6, v8, v10, 0, 3, 2, 4) :|: TRUE
f_141(v13, v14, v15, v16, v17, v18, 1, v20, v21, v22, v23, v24, v25, v26, 0, 3, 2, 4) -> f_159(v13, v14, v15, v16, v17, v18, 1, 1, v20, v21, v22, v23, v24, v25, v26, 0, 3, 2, 4) :|: TRUE
f_159(v32, v33, v34, v35, v36, v37, v38, 1, v40, v41, v42, v43, v44, v45, v46, 0, 3, 2, 4) -> f_177(v32, v33, v34, v35, v36, v37, v38, 1, v40, v41, v42, v43, v44, v45, v46, 0, 3, 4) :|: TRUE
f_177(v52, v53, v54, v55, v56, v57, v58, 1, v60, v61, v62, v63, v64, v65, v66, 0, 3, 4) -> f_195(v52, v53, v54, v55, v56, v57, v58, 1, v60, v61, v62, v63, v64, v65, v66, 0, 3, 4) :|: TRUE
f_195(v72, v73, v74, v75, v76, v77, v78, 1, v80, v81, v82, v83, v84, v85, v86, 0, 3, 4) -> f_213(v72, v73, v74, v75, v76, v77, v78, 1, v80, v81, v82, v83, v84, v85, v86, 0, 3, 4) :|: TRUE
f_213(v92, v93, v94, v95, v96, v97, v98, 1, v100, v101, v102, v103, v104, v105, v106, 0, 3, 4) -> f_214(v92, v93, v94, v95, v96, v97, v101, 1, v98, v100, v102, v103, v104, v105, v106, 0, 3, 4) :|: 0 = 0
f_214(v92, v93, v94, v95, v96, v97, v101, 1, v98, v100, v102, v103, v104, v105, v106, 0, 3, 4) -> f_215(v92, v93, v94, v95, v96, v97, v101, 1, v98, v100, v102, v103, v104, v105, v106, 0, 3, 4) :|: 0 = 0
f_215(v92, v93, v94, v95, v96, v97, v101, 1, v98, v100, v102, v103, v104, v105, v106, 0, 3, 4) -> f_216(v92, v93, v94, v95, v96, v97, v101, 1, v98, v100, v102, v103, v104, v105, v106, 0, 3, 4) :|: v101 != v97
f_215(v92, v93, v94, v95, v96, v97, v101, 1, v98, v100, v102, v103, v104, v105, v106, 0, 3, 4) -> f_217(v92, v93, v94, v95, v96, v97, 1, v98, v100, v102, v103, v104, v105, v106, 0, 3, 2, 4) :|: v101 = v97 && 2 <= v97
f_216(v92, v93, v94, v95, v96, v97, v101, 1, v98, v100, v102, v103, v104, v105, v106, 0, 3, 4) -> f_218(v92, v93, v94, v95, v96, v97, v101, 1, v98, v100, v102, v103, v104, v105, v106, 0, 3, 4) :|: 0 = 0
f_217(v92, v93, v94, v95, v96, v97, 1, v98, v100, v102, v103, v104, v105, v106, 0, 3, 2, 4) -> f_219(v92, v93, v94, v95, v96, v97, 0, v98, v100, v102, v103, v104, v105, v106, 3, 1, 2, 4) :|: 0 = 0
f_218(v92, v93, v94, v95, v96, v97, v101, 1, v98, v100, v102, v103, v104, v105, v106, 0, 3, 4) -> f_220(v92, v93, v94, v95, v96, v97, v101, 1, v98, v100, v102, v103, v104, v105, v106, 0, 3, 4) :|: TRUE
f_219(v92, v93, v94, v95, v96, v97, 0, v98, v100, v102, v103, v104, v105, v106, 3, 1, 2, 4) -> f_221(v92, v93, v94, v95, v96, v97, 0, v98, v100, v102, v103, v104, v105, v106, 3, 1, 2, 4) :|: TRUE
f_220(v92, v93, v94, v95, v96, v97, v101, 1, v98, v100, v102, v103, v104, v105, v106, 0, 3, 4) -> f_222(v92, v93, v94, v95, v96, v97, v101, 1, v100, v98, v102, v103, v104, v105, v106, 0, 3, 4) :|: 0 = 0
f_222(v92, v93, v94, v95, v96, v97, v101, 1, v100, v98, v102, v103, v104, v105, v106, 0, 3, 4) -> f_223(v92, v93, v94, v95, v96, v97, v101, 1, v98, v102, v103, v104, v105, v106, 0, 3, 4) :|: 0 = 0
f_223(v92, v93, v94, v95, v96, v97, v101, 1, v98, v102, v103, v104, v105, v106, 0, 3, 4) -> f_224(v92, v93, v94, v95, v96, v97, v101, 1, v98, v108, v102, v103, v104, v105, v106, 0, 3, 4, 2) :|: v108 = v101 + v98 && 2 <= v108
f_224(v92, v93, v94, v95, v96, v97, v101, 1, v98, v108, v102, v103, v104, v105, v106, 0, 3, 4, 2) -> f_225(v92, v93, v94, v95, v96, v97, v101, 1, v98, v108, v102, v103, v104, v105, v106, 0, 3, 4, 2) :|: TRUE
f_225(v92, v93, v94, v95, v96, v97, v101, 1, v98, v108, v102, v103, v104, v105, v106, 0, 3, 4, 2) -> f_226(v92, v93, v94, v95, v96, v97, v101, 1, v98, v108, v102, v103, v104, v105, v106, 0, 3, 4, 2) :|: 0 = 0
f_226(v92, v93, v94, v95, v96, v97, v101, 1, v98, v108, v102, v103, v104, v105, v106, 0, 3, 4, 2) -> f_227(v92, v93, v94, v95, v96, v97, v101, 1, v98, v108, v102, v103, v104, v105, v106, 0, 3, 4, 2) :|: TRUE
f_227(v92, v93, v94, v95, v96, v97, v101, 1, v98, v108, v102, v103, v104, v105, v106, 0, 3, 4, 2) -> f_228(v92, v93, v94, v95, v96, v97, v101, 1, v98, v108, v102, v103, v104, v105, v106, 0, 3, 4, 2) :|: 0 = 0
f_228(v92, v93, v94, v95, v96, v97, v101, 1, v98, v108, v102, v103, v104, v105, v106, 0, 3, 4, 2) -> f_229(v92, v93, v94, v95, v96, v97, v101, 1, v98, v108, v102, v103, v104, v105, v106, 0, 3, 4, 2) :|: TRUE
f_229(v92, v93, v94, v95, v96, v97, v101, 1, v98, v108, v102, v103, v104, v105, v106, 0, 3, 4, 2) -> f_230(v92, v93, v94, v95, v96, v97, v101, 1, v98, v108, v102, v103, v104, v105, v106, 0, 3, 4, 2) :|: TRUE
f_230(v92, v93, v94, v95, v96, v97, v101, 1, v98, v108, v102, v103, v104, v105, v106, 0, 3, 4, 2) -> f_213(v92, v93, v94, v95, v96, v97, v101, 1, v98, v108, v102, v103, v104, v105, v106, 0, 3, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_215(v92:0, v93:0, v94:0, v95:0, v96:0, v101:0, v101:0, 1, v98:0, v100:0, v102:0, v103:0, v104:0, v105:0, v106:0, 0, 3, 4) -> f_221(v92:0, v93:0, v94:0, v95:0, v96:0, v101:0, 0, v98:0, v100:0, v102:0, v103:0, v104:0, v105:0, v106:0, 3, 1, 2, 4) :|: v101:0 > 1
f_94 -> f_215(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, 1, 1, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 1
f_94 -> f_215(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, 1, 1, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 < 1
f_94 -> f_118(v1:0, v3:0, v5:0, v7:0, v9:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0
f_215(v92:0, v93:0, v94:0, v95:0, v96:0, v97:0, v101:0, 1, v98:0, v100:0, v102:0, v103:0, v104:0, v105:0, v106:0, 0, 3, 4) -> f_215(v92:0, v93:0, v94:0, v95:0, v96:0, v97:0, v101:0 + v98:0, 1, v101:0, v98:0, v102:0, v103:0, v104:0, v105:0, v106:0, 0, 3, 4) :|: v101:0 + v98:0 > 1 && v97:0 > v101:0
f_215(v92:0, v93:0, v94:0, v95:0, v96:0, v97:0, v101:0, 1, v98:0, v100:0, v102:0, v103:0, v104:0, v105:0, v106:0, 0, 3, 4) -> f_215(v92:0, v93:0, v94:0, v95:0, v96:0, v97:0, v101:0 + v98:0, 1, v101:0, v98:0, v102:0, v103:0, v104:0, v105:0, v106:0, 0, 3, 4) :|: v101:0 + v98:0 > 1 && v97:0 < v101:0
Filtered unneeded arguments:
   f_215(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_215(x6, x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 6 rules.P rules:
f_215(v101:0, v101:01, v98:0) -> f_221(v92:0, v93:0, v94:0, v95:0, v96:0, v101:0, 0, v98:0, v100:0, v102:0, v103:0, v104:0, v105:0, v106:0, 3, 1, 2, 4) :|: v101:0 > 1 && v101:0 = v101:01
f_94 -> f_215(v11:0, 1, 1) :|: v11:0 > 1
f_94 -> f_215(v11:0, 1, 1) :|: v11:0 < 1
f_94 -> f_118(v1:0, v3:0, v5:0, v7:0, v9:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v9:0 > 0 && v7:0 > 0
f_215(v97:0, v101:0, v98:0) -> f_215(v97:0, v101:0 + v98:0, v101:0) :|: v101:0 + v98:0 > 1 && v97:0 > v101:0
f_215(v97:0, v101:0, v98:0) -> f_215(v97:0, v101:0 + v98:0, v101:0) :|: v101:0 + v98:0 > 1 && v97:0 < v101:0

----------------------------------------

(6)
Obligation:
Rules:
f_215(v101:0, v101:01, v98:0) -> f_221(v92:0, v93:0, v94:0, v95:0, v96:0, v101:0, 0, v98:0, v100:0, v102:0, v103:0, v104:0, v105:0, v106:0, 3, 1, 2, 4) :|: v101:0 > 1 && v101:0 = v101:01
f_94 -> f_215(v11:0, 1, 1) :|: v11:0 > 1
f_94 -> f_215(x, 1, 1) :|: x < 1
f_94 -> f_118(v1:0, v3:0, v5:0, v7:0, v9:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v9:0 > 0 && v7:0 > 0
f_215(x1, x2, x3) -> f_215(x1, x2 + x3, x2) :|: x2 + x3 > 1 && x1 > x2
f_215(x4, x5, x6) -> f_215(x4, x5 + x6, x5) :|: x5 + x6 > 1 && x4 < x5
Start term: f_94

----------------------------------------

(7) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination can continue
----------------------------------------

(8)
Obligation:
Rules:
f_215(v101:0, v101:01, v98:0) -> f_221(v92:0, v93:0, v94:0, v95:0, v96:0, v101:0, 0, v98:0, v100:0, v102:0, v103:0, v104:0, v105:0, v106:0, 3, 1, 2, 4) :|: v101:0 > 1 && v101:0 = v101:01
f_94 -> f_215(v11:0, 1, 1) :|: v11:0 > 1
f_94 -> f_215(x, 1, 1) :|: x < 1
f_94 -> f_118(v1:0, v3:0, v5:0, v7:0, v9:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v9:0 > 0 && v7:0 > 0
f_215(x1, x2, x3) -> f_215(x1, x2 + x3, x2) :|: x2 + x3 > 1 && x1 > x2
f_215(x4, x5, x6) -> f_215(x4, x5 + x6, x5) :|: x5 + x6 > 1 && x4 < x5
Start term: f_94

----------------------------------------

(9) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(10)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_94))
(VAR x160 x46 x47 x48 x49 x42 x43 x44 x45 x40 x41 k25 k26 k21 k22 k23 k24 k20 x39 x151 x150 x35 x153 x36 x152 x37 x155 x38 x154 x31 x157 x32 x156 x33 x159 x34 x158 k18 k19 x30 x70 x140 x68 x142 x69 x141 x144 x143 x64 x146 x65 x145 x66 x148 x67 x147 x60 x61 x149 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x131 x58 x130 x59 x133 x132 x53 x135 x54 x134 x55 x137 x56 x136 x139 x50 x138 x51 x52 x90 x91 x92 x120 x122 x121 x86 x124 x87 x123 x88 x126 x89 x125 x x82 x128 x83 x127 x84 x85 x129 x80 x81 x79 x111 x110 x75 x113 x76 x112 x'' x77 x115 x78 x114 x71 x117 x72 x116 x73 x119 x74 x118 k14 k15 x109 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x7 x27 x20 x102 x21 x101 x22 x104 x23 x103 x106 x1 x105 x108 x107 x' x17 x18 x19 x13 x14 x15 x16 x97 x10 x98 x11 x99 x12 x93 x94 x95 x96)
(RULES
  f_94(x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60) -> f_215(k10, 1, 1, x61, x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75) :|: k10 < 1
  f_215(k1, k3, k8, x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) -> f_215(k1, k3 + k8, k3, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) :|: k3 + k8 > 1 && k1 < k3
  f_94(x106, x107, x108, x109, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122, x123) -> f_215(k18, 1, 1, x124, x125, x126, x127, x128, x129, x130, x131, x132, x133, x134, x135, x136, x137, x138) :|: k18 > 1
  f_94(x139, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, x154, x155, x156) -> f_118(k20, k2, k5, k7, k9, 1, 0, 3 + k20, 3 + k2, 3 + k5, 3 + k7, 3 + k9, 3, 4, x157, x158, x159, x160) :|: k20 > 0 && k2 > 0 && k5 > 0 && k9 > 0 && k7 > 0
  f_215(k11, k4, k6, x76, x77, x78, x79, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x90) -> f_215(k11, k4 + k6, k4, x91, x92, x93, x94, x95, x96, x97, x98, x99, x100, x101, x102, x103, x104, x105) :|: k4 + k6 > 1 && k11 > k4
  f_215(k26, k12, k19, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42) -> f_221(k13, k17, k16, k15, k14, k26, 0, k19, k0, k25, k24, k23, k22, k21, 3, 1, 2, 4) :|: k26 > 1 && k26 = k12
)

----------------------------------------

(11) LoAT (COMPLETE)
LoAT was called with the following command:

/aprove/bin/loat --plain --nonterm --proof-level 3 /tmp/aprove.InputModules.Programs.loat17496634979868373557.koat 

LoAT's output was:


### Pre-processing the ITS problem ###

Initial linear ITS problem
   Start location: f_94
      0: f_94 -> f_215 : k1'=free_4, k3'=1, k8'=1, x'=free_5, x_'=free_9, x__'=free_14, x1'=free_2, x10'=free_8, x11'=free_13, x12'=free_1, x2'=free_7, x3'=free_12, x4'=free, x5'=free_6, x6'=free_11, x7'=free_10, x8'=free_15, x9'=free_3, [ free_4<1 ], cost: 1
      2: f_94 -> f_215 : k1'=free_41, k3'=1, k8'=1, x'=free_42, x_'=free_31, x__'=free_36, x1'=free_37, x10'=free_38, x11'=free_44, x12'=free_33, x2'=free_43, x3'=free_32, x4'=free_40, x5'=free_46, x6'=free_35, x7'=free_39, x8'=free_45, x9'=free_34, [ free_41>1 ], cost: 1
      3: f_94 -> f_118 : k0'=free_52, k1'=free_49, k10'=free_50, k11'=free_55, k12'=free_53, k13'=1, k14'=0, k15'=3+free_52, k16'=3+free_49, k17'=3+free_50, k18'=3+free_55, k19'=3+free_53, k2'=3, k20'=4, k21'=free_54, k22'=free_48, k23'=free_51, k24'=free_47, [ free_52>0 && free_49>0 && free_50>0 && free_53>0 && free_55>0 ], cost: 1
      1: f_215 -> f_215 : k3'=k8+k3, k8'=k3, x'=free_20, x_'=free_26, x__'=free_17, x1'=free_27, x10'=free_18, x11'=free_22, x12'=free_28, x2'=free_21, x3'=free_25, x4'=free_16, x5'=free_24, x6'=free_30, x7'=free_19, x8'=free_23, x9'=free_29, [ k8+k3>1 && k1<k3 ], cost: 1
      4: f_215 -> f_215 : k3'=k8+k3, k8'=k3, x'=free_63, x_'=free_69, x__'=free_58, x1'=free_61, x10'=free_62, x11'=free_68, x12'=free_57, x2'=free_66, x3'=free_56, x4'=free_60, x5'=free_65, x6'=free_67, x7'=free_64, x8'=free_70, x9'=free_59, [ k8+k3>1 && k1>k3 ], cost: 1
      5: f_215 -> f_221 : k0'=free_72, k1'=free_75, k10'=free_71, k11'=free_79, k12'=free_76, k13'=k1, k14'=0, k15'=k8, k16'=free_78, k17'=free_73, k18'=free_80, k19'=free_77, k2'=free_74, k20'=free_81, k21'=3, k22'=1, k23'=2, k24'=4, [ k1>1 && k1==k3 ], cost: 1

Checking for constant complexity:
   The following rule is satisfiable with cost >= 1, yielding constant complexity:
      0: f_94 -> f_215 : k1'=free_4, k3'=1, k8'=1, x'=free_5, x_'=free_9, x__'=free_14, x1'=free_2, x10'=free_8, x11'=free_13, x12'=free_1, x2'=free_7, x3'=free_12, x4'=free, x5'=free_6, x6'=free_11, x7'=free_10, x8'=free_15, x9'=free_3, [ free_4<1 ], cost: 1

Removed unreachable and leaf rules:
   Start location: f_94
      0: f_94 -> f_215 : k1'=free_4, k3'=1, k8'=1, x'=free_5, x_'=free_9, x__'=free_14, x1'=free_2, x10'=free_8, x11'=free_13, x12'=free_1, x2'=free_7, x3'=free_12, x4'=free, x5'=free_6, x6'=free_11, x7'=free_10, x8'=free_15, x9'=free_3, [ free_4<1 ], cost: 1
      2: f_94 -> f_215 : k1'=free_41, k3'=1, k8'=1, x'=free_42, x_'=free_31, x__'=free_36, x1'=free_37, x10'=free_38, x11'=free_44, x12'=free_33, x2'=free_43, x3'=free_32, x4'=free_40, x5'=free_46, x6'=free_35, x7'=free_39, x8'=free_45, x9'=free_34, [ free_41>1 ], cost: 1
      1: f_215 -> f_215 : k3'=k8+k3, k8'=k3, x'=free_20, x_'=free_26, x__'=free_17, x1'=free_27, x10'=free_18, x11'=free_22, x12'=free_28, x2'=free_21, x3'=free_25, x4'=free_16, x5'=free_24, x6'=free_30, x7'=free_19, x8'=free_23, x9'=free_29, [ k8+k3>1 && k1<k3 ], cost: 1
      4: f_215 -> f_215 : k3'=k8+k3, k8'=k3, x'=free_63, x_'=free_69, x__'=free_58, x1'=free_61, x10'=free_62, x11'=free_68, x12'=free_57, x2'=free_66, x3'=free_56, x4'=free_60, x5'=free_65, x6'=free_67, x7'=free_64, x8'=free_70, x9'=free_59, [ k8+k3>1 && k1>k3 ], cost: 1

### Simplification by acceleration and chaining ###

Accelerating simple loops of location 1.
   Accelerating the following rules:
      1: f_215 -> f_215 : k3'=k8+k3, k8'=k3, x'=free_20, x_'=free_26, x__'=free_17, x1'=free_27, x10'=free_18, x11'=free_22, x12'=free_28, x2'=free_21, x3'=free_25, x4'=free_16, x5'=free_24, x6'=free_30, x7'=free_19, x8'=free_23, x9'=free_29, [ k8+k3>1 && k1<k3 ], cost: 1
      4: f_215 -> f_215 : k3'=k8+k3, k8'=k3, x'=free_63, x_'=free_69, x__'=free_58, x1'=free_61, x10'=free_62, x11'=free_68, x12'=free_57, x2'=free_66, x3'=free_56, x4'=free_60, x5'=free_65, x6'=free_67, x7'=free_64, x8'=free_70, x9'=free_59, [ k8+k3>1 && k1>k3 ], cost: 1

   Accelerated rule 1 with non-termination, yielding the new rule 6.
   Found no closed form for 4.
   Removing the simple loops: 1.

Accelerated all simple loops using metering functions (where possible):
   Start location: f_94
      0: f_94 -> f_215 : k1'=free_4, k3'=1, k8'=1, x'=free_5, x_'=free_9, x__'=free_14, x1'=free_2, x10'=free_8, x11'=free_13, x12'=free_1, x2'=free_7, x3'=free_12, x4'=free, x5'=free_6, x6'=free_11, x7'=free_10, x8'=free_15, x9'=free_3, [ free_4<1 ], cost: 1
      2: f_94 -> f_215 : k1'=free_41, k3'=1, k8'=1, x'=free_42, x_'=free_31, x__'=free_36, x1'=free_37, x10'=free_38, x11'=free_44, x12'=free_33, x2'=free_43, x3'=free_32, x4'=free_40, x5'=free_46, x6'=free_35, x7'=free_39, x8'=free_45, x9'=free_34, [ free_41>1 ], cost: 1
      4: f_215 -> f_215 : k3'=k8+k3, k8'=k3, x'=free_63, x_'=free_69, x__'=free_58, x1'=free_61, x10'=free_62, x11'=free_68, x12'=free_57, x2'=free_66, x3'=free_56, x4'=free_60, x5'=free_65, x6'=free_67, x7'=free_64, x8'=free_70, x9'=free_59, [ k8+k3>1 && k1>k3 ], cost: 1
      6: f_215 -> [4] : [ k8+k3>1 && k1<k3 && k8+2*k3>1 && k1<k8+k3 ], cost: NONTERM

Chaining 2 accelerated rules with incoming rules:
   Chained incoming rule 2 with accelerated rule 4 to new rule 7.
   Removing accelerated rule 4.
   Chained incoming rule 0 with accelerated rule 6 to new rule 8.
   Removing accelerated rule 6.

Chained accelerated rules (with incoming rules):
   Start location: f_94
      0: f_94 -> f_215 : k1'=free_4, k3'=1, k8'=1, x'=free_5, x_'=free_9, x__'=free_14, x1'=free_2, x10'=free_8, x11'=free_13, x12'=free_1, x2'=free_7, x3'=free_12, x4'=free, x5'=free_6, x6'=free_11, x7'=free_10, x8'=free_15, x9'=free_3, [ free_4<1 ], cost: 1
      2: f_94 -> f_215 : k1'=free_41, k3'=1, k8'=1, x'=free_42, x_'=free_31, x__'=free_36, x1'=free_37, x10'=free_38, x11'=free_44, x12'=free_33, x2'=free_43, x3'=free_32, x4'=free_40, x5'=free_46, x6'=free_35, x7'=free_39, x8'=free_45, x9'=free_34, [ free_41>1 ], cost: 1
      7: f_94 -> f_215 : k1'=free_41, k3'=2, k8'=1, x'=free_63, x_'=free_69, x__'=free_58, x1'=free_61, x10'=free_62, x11'=free_68, x12'=free_57, x2'=free_66, x3'=free_56, x4'=free_60, x5'=free_65, x6'=free_67, x7'=free_64, x8'=free_70, x9'=free_59, [ free_41>1 ], cost: 2
      8: f_94 -> [4] : [], cost: NONTERM

Removed unreachable locations (and leaf rules with constant cost):
   Start location: f_94
      8: f_94 -> [4] : [], cost: NONTERM

### Computing asymptotic complexity ###

Fully simplified ITS problem
   Start location: f_94
      8: f_94 -> [4] : [], cost: NONTERM

Computing asymptotic complexity for rule 8
   Guard is satisfiable, yielding nontermination
   Resulting cost NONTERM has complexity: Nonterm

Found new complexity Nonterm.

Obtained the following overall complexity (w.r.t. the length of the input n):
   Complexity:  Nonterm
   Cpx degree:  Nonterm
   Solved cost: NONTERM
   Rule cost:   NONTERM
   Rule guard:  []

NO


The final guard is:


Z3 found a model for the final guard:
{}

Try to generate a witness via retracing LoAT's simplifications:
  AssertionError: null
No witness generated
----------------------------------------

(12)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
Truth value repropagation in proof tree changed value to NO
