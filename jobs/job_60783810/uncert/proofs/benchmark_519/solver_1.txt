YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/dWIOT.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 591 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 40 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 9 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/dWIOT.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/dWIOT.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %5
		store 0, %2
		br %9
	9:
		%10 = load %3
		%11 = load %4
		%12 = icmp eq %10 %11
		br %12, %13, %17
	13:
		%14 = load %3
		%15 = load %5
		%16 = icmp sgt %14 %15
		br %17
	17:
		%18 = phi [0, %9], [%16, %13]
		br %18, %19, %32
	19:
		br %20
	20:
		%21 = load %4
		%22 = load %5
		%23 = icmp sgt %21 %22
		br %23, %24, %31
	24:
		%25 = load %3
		%26 = sub i32 %25, 1
		store %26, %3
		%27 = load %4
		%28 = sub i32 %27, 1
		store %28, %4
		%29 = load %2
		%30 = add i32 %29, 1
		store %30, %2
		br %20
	31:
		br %9
	32:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_332(v206, v207, v208, v209, v210, v211, v212, 1, v215, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) -> f_333(v206, v207, v208, v209, v210, v211, v212, 1, v215, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) :|: 0 = 0
f_333(v206, v207, v208, v209, v210, v211, v212, 1, v215, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) -> f_334(v206, v207, v208, v209, v210, v211, v212, 1, v215, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) :|: v212 < v215
f_334(v206, v207, v208, v209, v210, v211, v212, 1, v215, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) -> f_336(v206, v207, v208, v209, v210, v211, v212, 1, v215, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) :|: 0 = 0
f_336(v206, v207, v208, v209, v210, v211, v212, 1, v215, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) -> f_338(v206, v207, v208, v209, v210, v211, v212, 1, v215, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) :|: TRUE
f_338(v206, v207, v208, v209, v210, v211, v212, 1, v215, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) -> f_340(v206, v207, v208, v209, v210, v211, v212, 1, v215, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) :|: 0 = 0
f_340(v206, v207, v208, v209, v210, v211, v212, 1, v215, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) -> f_342(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) :|: 1 + v224 = v215
f_342(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) -> f_344(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) :|: TRUE
f_344(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) -> f_346(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) :|: 0 = 0
f_346(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) -> f_348(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) :|: 1 + v224 = v215
f_348(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) -> f_350(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) :|: TRUE
f_350(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) -> f_352(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v217, v218, v219, v220, v221, v222, 0, 3, 4) :|: 0 = 0
f_352(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v217, v218, v219, v220, v221, v222, 0, 3, 4) -> f_354(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v217, v227, v218, v219, v220, v221, v222, 0, 3, 4, 2) :|: v227 = 1 + v217 && 2 <= v227
f_354(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v217, v227, v218, v219, v220, v221, v222, 0, 3, 4, 2) -> f_356(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v217, v227, v218, v219, v220, v221, v222, 0, 3, 4, 2) :|: TRUE
f_356(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v217, v227, v218, v219, v220, v221, v222, 0, 3, 4, 2) -> f_358(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v217, v227, v218, v219, v220, v221, v222, 0, 3, 4, 2) :|: TRUE
f_358(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v217, v227, v218, v219, v220, v221, v222, 0, 3, 4, 2) -> f_331(v206, v207, v208, v209, v210, v211, v212, 1, v215, v224, v217, v227, v218, v219, v220, v221, v222, 0, 3, 4) :|: TRUE
f_331(v206, v207, v208, v209, v210, v211, v212, 1, v214, v215, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) -> f_332(v206, v207, v208, v209, v210, v211, v212, 1, v215, v214, v216, v217, v218, v219, v220, v221, v222, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_332(v206:0, v207:0, v208:0, v209:0, v210:0, v211:0, v212:0, 1, 1 + v224:0, v214:0, v216:0, v217:0, v218:0, v219:0, v220:0, v221:0, v222:0, 0, 3, 4) -> f_332(v206:0, v207:0, v208:0, v209:0, v210:0, v211:0, v212:0, 1, v224:0, 1 + v224:0, v217:0, 1 + v217:0, v218:0, v219:0, v220:0, v221:0, v222:0, 0, 3, 4) :|: v217:0 > 0 && v212:0 < 1 + v224:0
Filtered unneeded arguments:
   f_332(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_332(x7, x9, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_332(v212:0, sum~cons_1~v224:0, v217:0) -> f_332(v212:0, v224:0, 1 + v217:0) :|: v217:0 > 0 && v212:0 < 1 + v224:0 && sum~cons_1~v224:0 = 1 + v224:0

----------------------------------------

(8)
Obligation:
Rules:
f_332(v212:0, sum~cons_1~v224:0, v217:0) -> f_332(v212:0, v224:0, 1 + v217:0) :|: v217:0 > 0 && v212:0 < 1 + v224:0 && sum~cons_1~v224:0 = 1 + v224:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_332(v212:0:0, sum~cons_1~v224:0:0, v217:0:0) -> f_332(v212:0:0, v224:0:0, 1 + v217:0:0) :|: v217:0:0 > 0 && v212:0:0 < 1 + v224:0:0 && sum~cons_1~v224:0:0 = 1 + v224:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_332 ] = -1*f_332_1 + f_332_2

The following rules are decreasing:
f_332(v212:0:0, sum~cons_1~v224:0:0, v217:0:0) -> f_332(v212:0:0, v224:0:0, 1 + v217:0:0) :|: v217:0:0 > 0 && v212:0:0 < 1 + v224:0:0 && sum~cons_1~v224:0:0 = 1 + v224:0:0

The following rules are bounded:
f_332(v212:0:0, sum~cons_1~v224:0:0, v217:0:0) -> f_332(v212:0:0, v224:0:0, 1 + v217:0:0) :|: v217:0:0 > 0 && v212:0:0 < 1 + v224:0:0 && sum~cons_1~v224:0:0 = 1 + v224:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
