YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/52XW0.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 46 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 38.6 s]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 72 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/52XW0.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/52XW0.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cstrcpy" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		%6 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%7 = load %3
		store %7, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %6)
		%8 = load %4
		store %8, %6
		br %9
	9:
		%10 = load %6
		%11 = getelementptr %10, 1
		store %11, %6
		%12 = load %10
		%13 = load %5
		%14 = getelementptr %13, 1
		store %14, %5
		store %12, %13
		%15 = sext i8 %12 to i32
		%16 = icmp ne %15 0
		br %16, %17, %18
	17:
		br %9
	18:
		%19 = load %3
		ret %19

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 37
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = load %2
		%9 = icmp slt %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %11
	11:
		%12 = load %3
		%13 = icmp slt %12 1
		br %13, %14, %15
	14:
		store 1, %3
		br %15
	15:
		%16 = load %2
		%17 = load %3
		%18 = icmp slt %16 %17
		br %18, %19, %20
	19:
		store 0, %1
		br %37
	20:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%21 = load %2
		%22 = sext i32 %21 to i64
		%23 = mul i64 %22, 1
		%24 = alloca i8, numElementsLit: %23, align 16
		store %24, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%25 = load %3
		%26 = sext i32 %25 to i64
		%27 = mul i64 %26, 1
		%28 = alloca i8, numElementsLit: %27, align 16
		store %28, %5
		%29 = load %5
		%30 = load %3
		%31 = sub i32 %30, 1
		%32 = sext i32 %31 to i64
		%33 = getelementptr %29, %32
		store 0, %33
		%34 = load %4
		%35 = load %5
		%36 = call *i8 @cstrcpy(*i8 %34, *i8 %35)
		store 0, %1
		br %37
	37:
		%38 = load %1
		ret %38


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_568(v430, v431, v432, v433, v434, v435, v437, v438, v439, v440, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, 0, v447, v448, v450, 3, 7, 2, 4, 8) -> f_569(v430, v431, v432, v433, v434, v435, v437, v463, v438, v439, v440, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, 0, v447, v448, v450, 3, 7, 2, 4, 8) :|: v463 = 1 + v437 && 3 <= v463
f_569(v430, v431, v432, v433, v434, v435, v437, v463, v438, v439, v440, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, 0, v447, v448, v450, 3, 7, 2, 4, 8) -> f_570(v430, v431, v432, v433, v434, v435, v437, v463, v438, v439, v440, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, 0, v447, v448, v450, 3, 7, 2, 4, 8) :|: TRUE
f_570(v430, v431, v432, v433, v434, v435, v437, v463, v438, v439, v440, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, 0, v447, v448, v450, 3, 7, 2, 4, 8) -> f_571(v430, v431, v432, v433, v434, v435, v437, v463, v465, v439, v440, v438, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, 0, v447, v448, v450, 3, 7, 2, 4, 8) :|: TRUE
f_571(v430, v431, v432, v433, v434, v435, v437, v463, v465, v439, v440, v438, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, 0, v447, v448, v450, 3, 7, 2, 4, 8) -> f_572(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v438, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) :|: 0 = 0
f_572(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v438, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) -> f_573(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, v438, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) :|: v467 = 1 + v440 && 3 <= v467 && 3 <= v457
f_573(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, v438, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) -> f_574(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, v438, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) :|: TRUE
f_574(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, v438, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) -> f_575(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, v438, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) :|: TRUE
f_575(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, v438, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) -> f_576(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v438, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) :|: 0 = 0
f_576(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v438, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) -> f_577(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v438, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) :|: v465 != 0 && v437 < v451 && 3 <= v451
f_577(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v438, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) -> f_579(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v438, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) :|: 0 = 0
f_579(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v438, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) -> f_581(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v438, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) :|: TRUE
f_581(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v438, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) -> f_583(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v438, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) :|: TRUE
f_583(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, v438, v439, 0, v447, v448, v450, 3, 7, 2, 4, 8) -> f_567(v430, v431, v432, v433, v434, v435, v437, v463, v465, v440, v467, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, 0, v447, v448, v450, 3, 7, 2, 4, 8) :|: TRUE
f_567(v430, v431, v432, v433, v434, v435, v436, v437, v438, v439, v440, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, 0, v447, v448, v450, 3, 7, 2, 4, 8) -> f_568(v430, v431, v432, v433, v434, v435, v437, v438, v439, v440, 1, v442, v452, v443, v453, v444, v454, v445, v455, v446, v456, v457, v451, v458, v459, v460, v461, v462, v436, 0, v447, v448, v450, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_568(v430:0, v431:0, v432:0, v433:0, v434:0, v435:0, v437:0, v438:0, v439:0, v440:0, 1, v442:0, v452:0, v443:0, v453:0, v444:0, v454:0, v445:0, v455:0, v446:0, v456:0, v457:0, v451:0, v458:0, v459:0, v460:0, v461:0, v462:0, v436:0, 0, v447:0, v448:0, v450:0, 3, 7, 2, 4, 8) -> f_568(v430:0, v431:0, v432:0, v433:0, v434:0, v435:0, 1 + v437:0, v465:0, v440:0, 1 + v440:0, 1, v442:0, v452:0, v443:0, v453:0, v444:0, v454:0, v445:0, v455:0, v446:0, v456:0, v457:0, v451:0, v458:0, v459:0, v460:0, v461:0, v462:0, v437:0, 0, v447:0, v448:0, v450:0, 3, 7, 2, 4, 8) :|: v437:0 > 1 && v440:0 > 1 && v457:0 > 2 && v451:0 > v437:0 && v451:0 > 2 && v465:0 < 0
f_568(v430:0, v431:0, v432:0, v433:0, v434:0, v435:0, v437:0, v438:0, v439:0, v440:0, 1, v442:0, v452:0, v443:0, v453:0, v444:0, v454:0, v445:0, v455:0, v446:0, v456:0, v457:0, v451:0, v458:0, v459:0, v460:0, v461:0, v462:0, v436:0, 0, v447:0, v448:0, v450:0, 3, 7, 2, 4, 8) -> f_568(v430:0, v431:0, v432:0, v433:0, v434:0, v435:0, 1 + v437:0, v465:0, v440:0, 1 + v440:0, 1, v442:0, v452:0, v443:0, v453:0, v444:0, v454:0, v445:0, v455:0, v446:0, v456:0, v457:0, v451:0, v458:0, v459:0, v460:0, v461:0, v462:0, v437:0, 0, v447:0, v448:0, v450:0, 3, 7, 2, 4, 8) :|: v437:0 > 1 && v440:0 > 1 && v457:0 > 2 && v451:0 > v437:0 && v451:0 > 2 && v465:0 > 0
Filtered unneeded arguments:
   f_568(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38) -> f_568(x7, x10, x22, x23)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_568(v437:0, v440:0, v457:0, v451:0) -> f_568(1 + v437:0, 1 + v440:0, v457:0, v451:0) :|: v440:0 > 1 && v437:0 > 1 && v457:0 > 2 && v451:0 > 2 && v451:0 > v437:0

----------------------------------------

(8)
Obligation:
Rules:
f_568(v437:0, v440:0, v457:0, v451:0) -> f_568(1 + v437:0, 1 + v440:0, v457:0, v451:0) :|: v440:0 > 1 && v437:0 > 1 && v457:0 > 2 && v451:0 > 2 && v451:0 > v437:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_568(v437:0:0, v440:0:0, v457:0:0, v451:0:0) -> f_568(1 + v437:0:0, 1 + v440:0:0, v457:0:0, v451:0:0) :|: v451:0:0 > 2 && v451:0:0 > v437:0:0 && v457:0:0 > 2 && v437:0:0 > 1 && v440:0:0 > 1

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_568(x, x1, x2, x3)] = -1 - x + x3

The following rules are decreasing:
f_568(v437:0:0, v440:0:0, v457:0:0, v451:0:0) -> f_568(1 + v437:0:0, 1 + v440:0:0, v457:0:0, v451:0:0) :|: v451:0:0 > 2 && v451:0:0 > v437:0:0 && v457:0:0 > 2 && v437:0:0 > 1 && v440:0:0 > 1
The following rules are bounded:
f_568(v437:0:0, v440:0:0, v457:0:0, v451:0:0) -> f_568(1 + v437:0:0, 1 + v440:0:0, v457:0:0, v451:0:0) :|: v451:0:0 > 2 && v451:0:0 > v437:0:0 && v457:0:0 > 2 && v437:0:0 > 1 && v440:0:0 > 1

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
