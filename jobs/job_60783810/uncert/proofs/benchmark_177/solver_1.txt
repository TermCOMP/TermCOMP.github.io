YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/iIlTe.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 4355 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 122 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) IntTRS
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IntTRS
(15) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(16) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/iIlTe.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/iIlTe.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "ackermann" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = icmp eq %6 0
		br %7, %8, %11
	8:
		%9 = load %5
		%10 = add i32 %9, 1
		store %10, %3
		br %26
	11:
		%12 = load %5
		%13 = icmp eq %12 0
		br %13, %14, %18
	14:
		%15 = load %4
		%16 = sub i32 %15, 1
		%17 = call i32 @ackermann(i32 %16, i32 1)
		store %17, %3
		br %26
	18:
		%19 = load %4
		%20 = sub i32 %19, 1
		%21 = load %4
		%22 = load %5
		%23 = sub i32 %22, 1
		%24 = call i32 @ackermann(i32 %21, i32 %23)
		%25 = call i32 @ackermann(i32 %20, i32 %24)
		store %25, %3
		br %26
	26:
		%27 = load %3
		ret %27

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 42
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = load %2
		%7 = icmp slt %6 0
		br %7, %11, %8
	8:
		%9 = load %2
		%10 = icmp sgt %9 3
		br %10, %11, %12
	11:
		store 0, %1
		br %35
	12:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%13 = call i32 @__VERIFIER_nondet_int()
		store %13, %3
		%14 = load %3
		%15 = icmp slt %14 0
		br %15, %19, %16
	16:
		%17 = load %3
		%18 = icmp sgt %17 23
		br %18, %19, %20
	19:
		store 0, %1
		br %35
	20:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%21 = load %2
		%22 = load %3
		%23 = call i32 @ackermann(i32 %21, i32 %22)
		store %23, %4
		%24 = load %2
		%25 = icmp slt %24 0
		br %25, %32, %26
	26:
		%27 = load %3
		%28 = icmp slt %27 0
		br %28, %32, %29
	29:
		%30 = load %4
		%31 = icmp sge %30 0
		br %31, %32, %33
	32:
		store 0, %1
		br %35
	33:
		br %34
	34:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	35:
		%36 = load %1
		ret %36


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 88 rulesP rules:
f_626(v1139, v1140, v1156, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, 0, v1150, v1151, 3, 1, 4, 23) -> f_628(v1139, v1140, v1156, v1158, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, 0, v1150, v1151, 3, 1, 4, 23) :|: 1 <= v1158 && v1159 = 3 + v1158 && 4 <= v1159
f_628(v1139, v1140, v1156, v1158, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, 0, v1150, v1151, 3, 1, 4, 23) -> f_629(v1139, v1140, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, 0, v1150, v1151, 3, 1, 4, 23) :|: 1 <= v1160 && v1161 = 3 + v1160 && 4 <= v1161
f_629(v1139, v1140, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, 0, v1150, v1151, 3, 1, 4, 23) -> f_630(v1139, v1140, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, 0, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_630(v1139, v1140, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, 0, v1150, v1151, 3, 1, 4, 23) -> f_631(v1139, v1140, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, 0, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_631(v1139, v1140, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, 0, v1150, v1151, 3, 1, 4, 23) -> f_632(v1139, v1140, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, 0, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_632(v1139, v1140, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, 0, v1150, v1151, 3, 1, 4, 23) -> f_633(v1139, v1140, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, 0, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_633(v1139, v1140, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, 0, v1150, v1151, 3, 1, 4, 23) -> f_634(v1139, v1140, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, 0, v1150, v1151, 3, 1, 4, 23) :|: 0 = 0
f_634(v1139, v1140, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, 0, v1150, v1151, 3, 1, 4, 23) -> f_636(v1139, v1140, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, 0, v1150, v1151, 3, 1, 4, 23) :|: v1139 != 0 && 1 <= v1150
f_636(v1139, v1140, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, 0, v1150, v1151, 3, 1, 4, 23) -> f_638(v1139, v1140, v1156, v1158, v1160, 0, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) :|: 0 = 0
f_638(v1139, v1140, v1156, v1158, v1160, 0, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) -> f_640(v1139, v1140, v1156, v1158, v1160, 0, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_640(v1139, v1140, v1156, v1158, v1160, 0, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) -> f_642(v1139, v1140, v1156, v1158, v1160, 0, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) :|: 0 = 0
f_642(v1139, v1140, v1156, v1158, v1160, 0, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) -> f_644(v1139, 0, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) :|: v1140 = 0
f_642(v1139, v1140, v1156, v1158, v1160, 0, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) -> f_645(v1139, v1140, v1156, v1158, v1160, 0, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) :|: v1140 != 0
f_644(v1139, 0, v1156, v1158, v1160, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) -> f_647(v1139, 0, v1156, v1158, v1160, 1, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23) :|: 0 = 0
f_647(v1139, 0, v1156, v1158, v1160, 1, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23) -> f_650(v1139, 0, v1156, v1158, v1160, 1, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23) :|: TRUE
f_650(v1139, 0, v1156, v1158, v1160, 1, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23) -> f_653(v1139, 0, v1156, v1158, v1160, 1, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23) :|: 0 = 0
f_653(v1139, 0, v1156, v1158, v1160, 1, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23) -> f_656(v1139, 0, v1156, v1158, v1160, 1, v1184, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23, 2) :|: 1 + v1184 = v1139 && 0 <= v1184 && v1184 <= 2
f_656(v1139, 0, v1156, v1158, v1160, 1, v1184, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23, 2) -> f_659(v1184, 1, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 3, 4, 23, 2) :|: 0 = 0
f_659(v1184, 1, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 3, 4, 23, 2) -> f_662(v1184, 1, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 3, 4, 23, 2) :|: TRUE
f_662(v1184, 1, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 3, 4, 23, 2) -> f_624(v1184, 1, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, 0, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_624(v1139, v1140, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, 0, v1150, v1151, 3, 1, 4, 23) -> f_626(v1139, v1140, v1156, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, 0, v1150, v1151, 3, 1, 4, 23) :|: 1 <= v1156 && v1157 = 3 + v1156 && 4 <= v1157
f_645(v1139, v1140, v1156, v1158, v1160, 0, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) -> f_648(v1139, v1140, v1156, v1158, v1160, 0, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) :|: 0 = 0
f_648(v1139, v1140, v1156, v1158, v1160, 0, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) -> f_651(v1139, v1140, v1156, v1158, v1160, 0, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_651(v1139, v1140, v1156, v1158, v1160, 0, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) -> f_654(v1139, v1140, v1156, v1158, v1160, 0, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) :|: 0 = 0
f_654(v1139, v1140, v1156, v1158, v1160, 0, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23) -> f_657(v1139, v1140, v1156, v1158, v1160, 0, v1185, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23, 2) :|: 1 + v1185 = v1139 && 0 <= v1185 && v1185 <= 2
f_657(v1139, v1140, v1156, v1158, v1160, 0, v1185, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23, 2) -> f_660(v1139, v1140, v1156, v1158, v1160, 0, v1185, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23, 2) :|: 0 = 0
f_660(v1139, v1140, v1156, v1158, v1160, 0, v1185, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23, 2) -> f_663(v1139, v1140, v1156, v1158, v1160, 0, v1185, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23, 2) :|: 0 = 0
f_663(v1139, v1140, v1156, v1158, v1160, 0, v1185, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23, 2) -> f_665(v1139, v1140, v1156, v1158, v1160, 0, v1185, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23, 2) :|: 1 + v1200 = v1140 && 0 <= v1200
f_665(v1139, v1140, v1156, v1158, v1160, 0, v1185, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23, 2) -> f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) :|: 0 = 0
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_671(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, 3, 1, 4, 23) :|: TRUE
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_846(v1139, 0, v2190, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) :|: TRUE
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_900(v1139, 0, v2478, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) :|: TRUE
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_944(v1139, 0, v2767, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) :|: TRUE
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_999(v1139, 0, v3061, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) :|: TRUE
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1062(v1139, 0, v3061, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) :|: TRUE
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1074(v1139, v1200, v3475, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) :|: TRUE
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1120(v1139, 0, v3734, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) :|: TRUE
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1177(v1139, 0, v3734, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) :|: TRUE
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1185(v1139, v1200, v4135, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) :|: TRUE
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1237(v1139, 0, v4550, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) :|: TRUE
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1246(v1139, v1200, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) :|: TRUE
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1284(v1139, v1200, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) :|: TRUE
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1311(v1139, 0, v4550, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) :|: TRUE
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1321(v1139, v1200, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) :|: TRUE
f_668(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1351(v1139, v1200, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) :|: TRUE
f_671(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, 3, 1, 4, 23) -> f_624(v1139, v1200, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, 0, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_846(v1139, 0, v2190, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) -> f_851(v1139, 1, v1156, v1158, v1160, 0, v1185, v2190, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23, 2) :|: 0 = 0
f_851(v1139, 1, v1156, v1158, v1160, 0, v1185, v2190, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23, 2) -> f_853(v1185, v2190, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) :|: 0 = 0
f_853(v1185, v2190, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) -> f_855(v1185, v2190, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) :|: TRUE
f_855(v1185, v2190, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) -> f_624(v1185, v2190, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, 0, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_900(v1139, 0, v2478, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) -> f_909(v1139, 1, v1156, v1158, v1160, 0, v1185, v2478, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23, 2) :|: 0 = 0
f_909(v1139, 1, v1156, v1158, v1160, 0, v1185, v2478, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23, 2) -> f_915(v1185, v2478, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) :|: 0 = 0
f_915(v1185, v2478, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) -> f_921(v1185, v2478, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) :|: TRUE
f_921(v1185, v2478, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) -> f_624(v1185, v2478, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, 0, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_944(v1139, 0, v2767, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) -> f_956(v1139, 1, v1156, v1158, v1160, 0, v1185, v2767, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23, 2) :|: 0 = 0
f_956(v1139, 1, v1156, v1158, v1160, 0, v1185, v2767, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23, 2) -> f_964(v1185, v2767, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) :|: 0 = 0
f_964(v1185, v2767, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) -> f_976(v1185, v2767, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) :|: TRUE
f_976(v1185, v2767, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) -> f_624(v1185, v2767, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, 0, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_999(v1139, 0, v3061, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) -> f_1016(v1139, 1, v1156, v1158, v1160, 0, v1185, v3061, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23, 2) :|: 0 = 0
f_1016(v1139, 1, v1156, v1158, v1160, 0, v1185, v3061, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23, 2) -> f_1029(v1185, v3061, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) :|: 0 = 0
f_1029(v1185, v3061, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) -> f_1047(v1185, v3061, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) :|: TRUE
f_1047(v1185, v3061, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) -> f_624(v1185, v3061, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, 0, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_1062(v1139, 0, v3061, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) -> f_999(v1139, 0, v3061, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) :|: TRUE
f_1074(v1139, v1200, v3475, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1082(v1139, v1140, v1156, v1158, v1160, 0, v1185, v1200, v3475, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23, 2) :|: 0 = 0
f_1082(v1139, v1140, v1156, v1158, v1160, 0, v1185, v1200, v3475, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23, 2) -> f_1090(v1185, v3475, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, v1140, v1200, 3, 1, 4, 23, 2) :|: 0 = 0
f_1090(v1185, v3475, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, v1140, v1200, 3, 1, 4, 23, 2) -> f_1098(v1185, v3475, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, v1140, 3, 1, 4, 23, 2) :|: TRUE
f_1098(v1185, v3475, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, v1140, 3, 1, 4, 23, 2) -> f_624(v1185, v3475, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, 0, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_1120(v1139, 0, v3734, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) -> f_1137(v1139, 1, v1156, v1158, v1160, 0, v1185, v3734, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23, 2) :|: 0 = 0
f_1137(v1139, 1, v1156, v1158, v1160, 0, v1185, v3734, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23, 2) -> f_1150(v1185, v3734, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) :|: 0 = 0
f_1150(v1185, v3734, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) -> f_1162(v1185, v3734, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) :|: TRUE
f_1162(v1185, v3734, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) -> f_624(v1185, v3734, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, 0, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_1177(v1139, 0, v3734, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) -> f_1120(v1139, 0, v3734, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) :|: TRUE
f_1185(v1139, v1200, v4135, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1203(v1139, v1140, v1156, v1158, v1160, 0, v1185, v1200, v4135, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23, 2) :|: 0 = 0
f_1203(v1139, v1140, v1156, v1158, v1160, 0, v1185, v1200, v4135, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23, 2) -> f_1214(v1185, v4135, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, v1140, v1200, 3, 1, 4, 23, 2) :|: 0 = 0
f_1214(v1185, v4135, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, v1140, v1200, 3, 1, 4, 23, 2) -> f_1225(v1185, v4135, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, v1140, 3, 1, 4, 23, 2) :|: TRUE
f_1225(v1185, v4135, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, v1140, 3, 1, 4, 23, 2) -> f_624(v1185, v4135, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, 0, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_1237(v1139, 0, v4550, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) -> f_1256(v1139, 1, v1156, v1158, v1160, 0, v1185, v4550, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23, 2) :|: 0 = 0
f_1256(v1139, 1, v1156, v1158, v1160, 0, v1185, v4550, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 4, 23, 2) -> f_1270(v1185, v4550, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) :|: 0 = 0
f_1270(v1185, v4550, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) -> f_1293(v1185, v4550, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) :|: TRUE
f_1293(v1185, v4550, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, 1, 3, 4, 23, 2) -> f_624(v1185, v4550, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, 0, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_1246(v1139, v1200, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1262(v1139, v1140, v1156, v1158, v1160, 0, v1185, v1200, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23, 2) :|: 0 = 0
f_1262(v1139, v1140, v1156, v1158, v1160, 0, v1185, v1200, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1157, v1159, v1161, v1150, v1151, 3, 1, 4, 23, 2) -> f_1275(v1185, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, v1140, v1200, 3, 1, 4, 23, 2) :|: 0 = 0
f_1275(v1185, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, v1140, v1200, 3, 1, 4, 23, 2) -> f_1298(v1185, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, v1140, 3, 1, 4, 23, 2) :|: TRUE
f_1298(v1185, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1139, v1140, 3, 1, 4, 23, 2) -> f_624(v1185, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, 0, v1150, v1151, 3, 1, 4, 23) :|: TRUE
f_1284(v1139, v1200, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1246(v1139, v1200, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) :|: TRUE
f_1311(v1139, 0, v4550, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) -> f_1237(v1139, 0, v4550, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, v1150, v1151, 1, v1185, 3, 4, 23, 2) :|: TRUE
f_1321(v1139, v1200, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1284(v1139, v1200, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) :|: TRUE
f_1351(v1139, v1200, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) -> f_1321(v1139, v1200, v4653, v1141, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1156, v1157, v1158, v1159, v1160, v1161, 0, v1150, v1151, v1140, v1185, 3, 1, 4, 23, 2) :|: TRUE
Combined rules. Obtained 3 rulesP rules:
f_626(1 + v1185:0, 1 + v1200:0, v1156:0, v1141:0, v1142:0, v1143:0, v1144:0, v1145:0, v1146:0, v1147:0, v1148:0, v1157:0, 0, v1150:0, v1151:0, 3, 1, 4, 23) -> f_626(v1185:0, v4653:0, v1156:1, v1141:0, v1142:0, v1143:0, v1144:0, v1145:0, v1146:0, v1147:0, v1148:0, 3 + v1156:1, 0, v1150:0, v1151:0, 3, 1, 4, 23) :|: v1160:0 > 0 && v1158:0 > 0 && v1150:0 > 0 && v1185:0 > -1 && v1200:0 > -1 && v1185:0 < 3 && v1156:1 > 0
f_626(1 + v1185:0, 1 + v1200:0, v1156:0, v1141:0, v1142:0, v1143:0, v1144:0, v1145:0, v1146:0, v1147:0, v1148:0, v1157:0, 0, v1150:0, v1151:0, 3, 1, 4, 23) -> f_626(1 + v1185:0, v1200:0, v1156:1, v1141:0, v1142:0, v1143:0, v1144:0, v1145:0, v1146:0, v1147:0, v1148:0, 3 + v1156:1, 0, v1150:0, v1151:0, 3, 1, 4, 23) :|: v1160:0 > 0 && v1158:0 > 0 && v1150:0 > 0 && v1185:0 > -1 && v1200:0 > -1 && v1185:0 < 3 && v1156:1 > 0
f_626(1 + v1184:0, 0, v1156:0, v1141:0, v1142:0, v1143:0, v1144:0, v1145:0, v1146:0, v1147:0, v1148:0, v1157:0, 0, v1150:0, v1151:0, 3, 1, 4, 23) -> f_626(v1184:0, 1, v1156:1, v1141:0, v1142:0, v1143:0, v1144:0, v1145:0, v1146:0, v1147:0, v1148:0, 3 + v1156:1, 0, v1150:0, v1151:0, 3, 1, 4, 23) :|: v1160:0 > 0 && v1158:0 > 0 && v1150:0 > 0 && v1184:0 > -1 && v1184:0 < 3 && v1156:1 > 0
Filtered unneeded arguments:
   f_626(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_626(x1, x2, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_626(sum~cons_1~v1185:0, sum~cons_1~v1200:0, v1150:0) -> f_626(v1185:0, v4653:0, v1150:0) :|: v1185:0 > -1 && v1150:0 > 0 && v1185:0 < 3 && v1200:0 > -1 && sum~cons_1~v1185:0 = 1 + v1185:0 && sum~cons_1~v1200:0 = 1 + v1200:0
f_626(sum~cons_1~v1185:0, sum~cons_1~v1200:0, v1150:0) -> f_626(1 + v1185:0, v1200:0, v1150:0) :|: v1185:0 > -1 && v1150:0 > 0 && v1185:0 < 3 && v1200:0 > -1 && sum~cons_1~v1185:0 = 1 + v1185:0 && sum~cons_1~v1200:0 = 1 + v1200:0
f_626(sum~cons_1~v1184:0, cons_0, v1150:0) -> f_626(v1184:0, 1, v1150:0) :|: v1184:0 > -1 && v1184:0 < 3 && v1150:0 > 0 && sum~cons_1~v1184:0 = 1 + v1184:0 && cons_0 = 0

----------------------------------------

(8)
Obligation:
Rules:
f_626(sum~cons_1~v1185:0, sum~cons_1~v1200:0, v1150:0) -> f_626(v1185:0, v4653:0, v1150:0) :|: v1185:0 > -1 && v1150:0 > 0 && v1185:0 < 3 && v1200:0 > -1 && sum~cons_1~v1185:0 = 1 + v1185:0 && sum~cons_1~v1200:0 = 1 + v1200:0
f_626(x, x1, x2) -> f_626(1 + x3, x4, x2) :|: x3 > -1 && x2 > 0 && x3 < 3 && x4 > -1 && x = 1 + x3 && x1 = 1 + x4
f_626(x5, x6, x7) -> f_626(x8, 1, x7) :|: x8 > -1 && x8 < 3 && x7 > 0 && x5 = 1 + x8 && x6 = 0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_626(sum~cons_1~x8:0, cons_0, x7:0) -> f_626(x8:0, 1, x7:0) :|: x8:0 > -1 && x8:0 < 3 && x7:0 > 0 && sum~cons_1~x8:0 = 1 + x8:0 && cons_0 = 0
f_626(sum~cons_1~x3:0, sum~cons_1~x4:0, x2:0) -> f_626(1 + x3:0, x4:0, x2:0) :|: x3:0 < 3 && x4:0 > -1 && x2:0 > 0 && x3:0 > -1 && sum~cons_1~x3:0 = 1 + x3:0 && sum~cons_1~x4:0 = 1 + x4:0
f_626(sum~cons_1~v1185:0:0, sum~cons_1~v1200:0:0, v1150:0:0) -> f_626(v1185:0:0, v4653:0:0, v1150:0:0) :|: v1185:0:0 < 3 && v1200:0:0 > -1 && v1150:0:0 > 0 && v1185:0:0 > -1 && sum~cons_1~v1185:0:0 = 1 + v1185:0:0 && sum~cons_1~v1200:0:0 = 1 + v1200:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_626(x, x1, x2)] = x*x2 - x2

The following rules are decreasing:
f_626(sum~cons_1~x8:0, cons_0, x7:0) -> f_626(x8:0, 1, x7:0) :|: x8:0 > -1 && x8:0 < 3 && x7:0 > 0 && sum~cons_1~x8:0 = 1 + x8:0 && cons_0 = 0
f_626(sum~cons_1~v1185:0:0, sum~cons_1~v1200:0:0, v1150:0:0) -> f_626(v1185:0:0, v4653:0:0, v1150:0:0) :|: v1185:0:0 < 3 && v1200:0:0 > -1 && v1150:0:0 > 0 && v1185:0:0 > -1 && sum~cons_1~v1185:0:0 = 1 + v1185:0:0 && sum~cons_1~v1200:0:0 = 1 + v1200:0:0
The following rules are bounded:
f_626(sum~cons_1~x8:0, cons_0, x7:0) -> f_626(x8:0, 1, x7:0) :|: x8:0 > -1 && x8:0 < 3 && x7:0 > 0 && sum~cons_1~x8:0 = 1 + x8:0 && cons_0 = 0
f_626(sum~cons_1~v1185:0:0, sum~cons_1~v1200:0:0, v1150:0:0) -> f_626(v1185:0:0, v4653:0:0, v1150:0:0) :|: v1185:0:0 < 3 && v1200:0:0 > -1 && v1150:0:0 > 0 && v1185:0:0 > -1 && sum~cons_1~v1185:0:0 = 1 + v1185:0:0 && sum~cons_1~v1200:0:0 = 1 + v1200:0:0

----------------------------------------

(12)
Obligation:
Rules:
f_626(sum~cons_1~x3:0, sum~cons_1~x4:0, x2:0) -> f_626(1 + x3:0, x4:0, x2:0) :|: x3:0 < 3 && x4:0 > -1 && x2:0 > 0 && x3:0 > -1 && sum~cons_1~x3:0 = 1 + x3:0 && sum~cons_1~x4:0 = 1 + x4:0

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f_626(sum~cons_1~x3:0:0, sum~cons_1~x4:0:0, x2:0:0) -> f_626(1 + x3:0:0, x4:0:0, x2:0:0) :|: x2:0:0 > 0 && x3:0:0 > -1 && x4:0:0 > -1 && x3:0:0 < 3 && sum~cons_1~x3:0:0 = 1 + x3:0:0 && sum~cons_1~x4:0:0 = 1 + x4:0:0

----------------------------------------

(15) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_626(x, x1, x2)] = x1

The following rules are decreasing:
f_626(sum~cons_1~x3:0:0, sum~cons_1~x4:0:0, x2:0:0) -> f_626(1 + x3:0:0, x4:0:0, x2:0:0) :|: x2:0:0 > 0 && x3:0:0 > -1 && x4:0:0 > -1 && x3:0:0 < 3 && sum~cons_1~x3:0:0 = 1 + x3:0:0 && sum~cons_1~x4:0:0 = 1 + x4:0:0
The following rules are bounded:
f_626(sum~cons_1~x3:0:0, sum~cons_1~x4:0:0, x2:0:0) -> f_626(1 + x3:0:0, x4:0:0, x2:0:0) :|: x2:0:0 > 0 && x3:0:0 > -1 && x4:0:0 > -1 && x3:0:0 < 3 && sum~cons_1~x3:0:0 = 1 + x3:0:0 && sum~cons_1~x4:0:0 = 1 + x4:0:0

----------------------------------------

(16)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.003s
