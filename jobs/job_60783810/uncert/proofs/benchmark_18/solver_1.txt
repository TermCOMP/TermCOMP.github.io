YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Nv1vl.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 39 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 537 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 14 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Nv1vl.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Nv1vl.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %7
		%12 = load %4
		%13 = load %6
		store %12, %13
		%14 = load %5
		%15 = load %7
		store %14, %15
		%16 = load %6
		%17 = load %16
		%18 = icmp sle %17 0
		br %18, %19, %22
	19:
		%20 = load %7
		%21 = load %20
		store %21, %3
		br %39
	22:
		br %23
	23:
		%24 = load %6
		%25 = load %24
		%26 = load %7
		%27 = load %26
		%28 = icmp sgt %25 %27
		br %28, %29, %36
	29:
		%30 = load %7
		%31 = load %30
		%32 = load %6
		%33 = load %32
		%34 = add i32 %31, %33
		%35 = load %7
		store %34, %35
		br %23
	36:
		%37 = load %7
		%38 = load %37
		store %38, %3
		br %39
	39:
		%40 = load %3
		ret %40

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 58
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_297(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v69, 1, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_298(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v69, 1, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_298(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v69, 1, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_299(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v69, 1, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_299(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v69, 1, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_300(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_300(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_301(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: v71 < v59 && 1 + v69 <= 0
f_301(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_303(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_303(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_305(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: TRUE
f_305(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_307(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_307(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_309(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_309(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_311(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_311(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_313(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_313(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_315(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: v83 = v71 + v59
f_315(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_317(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_317(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_319(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: TRUE
f_319(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_320(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: TRUE
f_320(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_296(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: v60 < v59 && 1 <= v59 && 1 <= v61 && 1 <= v62 && 1 <= v63 && 1 <= v64 && 1 <= v65 && 1 <= v66 && 1 <= v67 && 1 <= v72 && 4 <= v73 && 4 <= v74 && 4 <= v75 && 4 <= v76 && 8 <= v77 && 8 <= v78 && 4 <= v79 && 4 <= v80 && v72 <= v73 && v61 <= v74 && v62 <= v75 && v63 <= v76 && v64 <= v77 && v65 <= v78 && v66 <= v79 && v67 <= v80
f_296(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v69, 1, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_297(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v69, 1, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_297(v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, 0, v69:0, 1, v71:0, v72:0, v73:0, v74:0, v75:0, v76:0, v77:0, v78:0, v79:0, v80:0, 3, 7, 4, 8) -> f_297(v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, 0, v71:0, 1, v71:0 + v59:0, v72:0, v73:0, v74:0, v75:0, v76:0, v77:0, v78:0, v79:0, v80:0, 3, 7, 4, 8) :|: v59:0 > 0 && v60:0 < v59:0 && v61:0 > 0 && v62:0 > 0 && v63:0 > 0 && v64:0 > 0 && v65:0 > 0 && v66:0 > 0 && v67:0 > 0 && v72:0 > 0 && v73:0 > 3 && v74:0 > 3 && v75:0 > 3 && v76:0 > 3 && v77:0 > 7 && v69:0 < 0 && v71:0 < v59:0 && v78:0 > 7 && v79:0 > 3 && v80:0 > 3 && v73:0 >= v72:0 && v74:0 >= v61:0 && v75:0 >= v62:0 && v76:0 >= v63:0 && v77:0 >= v64:0 && v78:0 >= v65:0 && v80:0 >= v67:0 && v79:0 >= v66:0
Filtered unneeded arguments:
   f_297(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26) -> f_297(x1, x2, x3, x4, x5, x6, x7, x8, x9, x11, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_297(v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, v69:0, v71:0, v72:0, v73:0, v74:0, v75:0, v76:0, v77:0, v78:0, v79:0, v80:0) -> f_297(v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, v71:0, v71:0 + v59:0, v72:0, v73:0, v74:0, v75:0, v76:0, v77:0, v78:0, v79:0, v80:0) :|: v60:0 < v59:0 && v59:0 > 0 && v61:0 > 0 && v62:0 > 0 && v63:0 > 0 && v64:0 > 0 && v65:0 > 0 && v66:0 > 0 && v67:0 > 0 && v72:0 > 0 && v73:0 > 3 && v74:0 > 3 && v75:0 > 3 && v76:0 > 3 && v77:0 > 7 && v69:0 < 0 && v71:0 < v59:0 && v78:0 > 7 && v79:0 > 3 && v80:0 > 3 && v73:0 >= v72:0 && v74:0 >= v61:0 && v75:0 >= v62:0 && v76:0 >= v63:0 && v77:0 >= v64:0 && v78:0 >= v65:0 && v79:0 >= v66:0 && v80:0 >= v67:0

----------------------------------------

(8)
Obligation:
Rules:
f_297(v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, v69:0, v71:0, v72:0, v73:0, v74:0, v75:0, v76:0, v77:0, v78:0, v79:0, v80:0) -> f_297(v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, v71:0, v71:0 + v59:0, v72:0, v73:0, v74:0, v75:0, v76:0, v77:0, v78:0, v79:0, v80:0) :|: v60:0 < v59:0 && v59:0 > 0 && v61:0 > 0 && v62:0 > 0 && v63:0 > 0 && v64:0 > 0 && v65:0 > 0 && v66:0 > 0 && v67:0 > 0 && v72:0 > 0 && v73:0 > 3 && v74:0 > 3 && v75:0 > 3 && v76:0 > 3 && v77:0 > 7 && v69:0 < 0 && v71:0 < v59:0 && v78:0 > 7 && v79:0 > 3 && v80:0 > 3 && v73:0 >= v72:0 && v74:0 >= v61:0 && v75:0 >= v62:0 && v76:0 >= v63:0 && v77:0 >= v64:0 && v78:0 >= v65:0 && v79:0 >= v66:0 && v80:0 >= v67:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_297(v59:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0, v65:0:0, v66:0:0, v67:0:0, v69:0:0, v71:0:0, v72:0:0, v73:0:0, v74:0:0, v75:0:0, v76:0:0, v77:0:0, v78:0:0, v79:0:0, v80:0:0) -> f_297(v59:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0, v65:0:0, v66:0:0, v67:0:0, v71:0:0, v71:0:0 + v59:0:0, v72:0:0, v73:0:0, v74:0:0, v75:0:0, v76:0:0, v77:0:0, v78:0:0, v79:0:0, v80:0:0) :|: v79:0:0 >= v66:0:0 && v80:0:0 >= v67:0:0 && v78:0:0 >= v65:0:0 && v77:0:0 >= v64:0:0 && v76:0:0 >= v63:0:0 && v75:0:0 >= v62:0:0 && v74:0:0 >= v61:0:0 && v73:0:0 >= v72:0:0 && v80:0:0 > 3 && v79:0:0 > 3 && v78:0:0 > 7 && v71:0:0 < v59:0:0 && v69:0:0 < 0 && v77:0:0 > 7 && v76:0:0 > 3 && v75:0:0 > 3 && v74:0:0 > 3 && v73:0:0 > 3 && v72:0:0 > 0 && v67:0:0 > 0 && v66:0:0 > 0 && v65:0:0 > 0 && v64:0:0 > 0 && v63:0:0 > 0 && v62:0:0 > 0 && v61:0:0 > 0 && v59:0:0 > 0 && v60:0:0 < v59:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_297 ] = -1*f_297_11 + f_297_1

The following rules are decreasing:
f_297(v59:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0, v65:0:0, v66:0:0, v67:0:0, v69:0:0, v71:0:0, v72:0:0, v73:0:0, v74:0:0, v75:0:0, v76:0:0, v77:0:0, v78:0:0, v79:0:0, v80:0:0) -> f_297(v59:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0, v65:0:0, v66:0:0, v67:0:0, v71:0:0, v71:0:0 + v59:0:0, v72:0:0, v73:0:0, v74:0:0, v75:0:0, v76:0:0, v77:0:0, v78:0:0, v79:0:0, v80:0:0) :|: v79:0:0 >= v66:0:0 && v80:0:0 >= v67:0:0 && v78:0:0 >= v65:0:0 && v77:0:0 >= v64:0:0 && v76:0:0 >= v63:0:0 && v75:0:0 >= v62:0:0 && v74:0:0 >= v61:0:0 && v73:0:0 >= v72:0:0 && v80:0:0 > 3 && v79:0:0 > 3 && v78:0:0 > 7 && v71:0:0 < v59:0:0 && v69:0:0 < 0 && v77:0:0 > 7 && v76:0:0 > 3 && v75:0:0 > 3 && v74:0:0 > 3 && v73:0:0 > 3 && v72:0:0 > 0 && v67:0:0 > 0 && v66:0:0 > 0 && v65:0:0 > 0 && v64:0:0 > 0 && v63:0:0 > 0 && v62:0:0 > 0 && v61:0:0 > 0 && v59:0:0 > 0 && v60:0:0 < v59:0:0

The following rules are bounded:
f_297(v59:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0, v65:0:0, v66:0:0, v67:0:0, v69:0:0, v71:0:0, v72:0:0, v73:0:0, v74:0:0, v75:0:0, v76:0:0, v77:0:0, v78:0:0, v79:0:0, v80:0:0) -> f_297(v59:0:0, v60:0:0, v61:0:0, v62:0:0, v63:0:0, v64:0:0, v65:0:0, v66:0:0, v67:0:0, v71:0:0, v71:0:0 + v59:0:0, v72:0:0, v73:0:0, v74:0:0, v75:0:0, v76:0:0, v77:0:0, v78:0:0, v79:0:0, v80:0:0) :|: v79:0:0 >= v66:0:0 && v80:0:0 >= v67:0:0 && v78:0:0 >= v65:0:0 && v77:0:0 >= v64:0:0 && v76:0:0 >= v63:0:0 && v75:0:0 >= v62:0:0 && v74:0:0 >= v61:0:0 && v73:0:0 >= v72:0:0 && v80:0:0 > 3 && v79:0:0 > 3 && v78:0:0 > 7 && v71:0:0 < v59:0:0 && v69:0:0 < 0 && v77:0:0 > 7 && v76:0:0 > 3 && v75:0:0 > 3 && v74:0:0 > 3 && v73:0:0 > 3 && v72:0:0 > 0 && v67:0:0 > 0 && v66:0:0 > 0 && v65:0:0 > 0 && v64:0:0 > 0 && v63:0:0 > 0 && v62:0:0 > 0 && v61:0:0 > 0 && v59:0:0 > 0 && v60:0:0 < v59:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
