YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/3G4IU.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1182 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 56 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/3G4IU.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/3G4IU.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "twoWay" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%7 = load %5
		%8 = icmp slt %7 0
		br %8, %9, %10
	9:
		store 1, %3
		br %26
	10:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		%11 = load %5
		store %11, %6
		%12 = load %4
		%13 = icmp ne %12 0
		br %13, %14, %17
	14:
		%15 = load %6
		%16 = add i32 %15, -1
		store %16, %6
		br %20
	17:
		%18 = load %6
		%19 = add i32 %18, 1
		store %19, %6
		br %20
	20:
		%21 = load %6
		%22 = load %4
		%23 = load %6
		%24 = call i32 @twoWay(i32 %22, i32 %23)
		%25 = mul i32 %21, %24
		store %25, %3
		br %26
	26:
		%27 = load %3
		ret %27

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 41
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = load %2
		%7 = icmp slt %6 0
		br %7, %8, %9
	8:
		store 0, %1
		br %18
	9:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%10 = call i32 @__VERIFIER_nondet_int()
		store %10, %3
		%11 = load %3
		%12 = icmp slt %11 0
		br %12, %13, %14
	13:
		store 0, %1
		br %18
	14:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%15 = call i32 @__VERIFIER_nondet_int()
		store %15, %4
		%16 = load %2
		%17 = call i32 @twoWay(i32 1, i32 %16)
		br %18
	18:
		%19 = load %1
		ret %19


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 28 rulesP rules:
f_303(1, v78, v91, v79, v80, v81, v82, v83, v84, v85, v86, v92, 0, v88, v89, v90, 3, 4) -> f_304(1, v78, v91, v93, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, 0, v88, v89, v90, 3, 4) :|: 1 <= v93 && v94 = 3 + v93 && 4 <= v94
f_304(1, v78, v91, v93, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, 0, v88, v89, v90, 3, 4) -> f_305(1, v78, v91, v93, v95, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, 0, v88, v89, v90, 3, 4) :|: 1 <= v95 && v96 = 3 + v95 && 4 <= v96
f_305(1, v78, v91, v93, v95, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, 0, v88, v89, v90, 3, 4) -> f_306(1, v78, v91, v93, v95, v97, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, 0, v88, v89, v90, 3, 4) :|: 1 <= v97 && v98 = 3 + v97 && 4 <= v98
f_306(1, v78, v91, v93, v95, v97, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, 0, v88, v89, v90, 3, 4) -> f_307(1, v78, v91, v93, v95, v97, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, 0, v88, v89, v90, 3, 4) :|: TRUE
f_307(1, v78, v91, v93, v95, v97, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, 0, v88, v89, v90, 3, 4) -> f_308(1, v78, v91, v93, v95, v97, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, 0, v88, v89, v90, 3, 4) :|: TRUE
f_308(1, v78, v91, v93, v95, v97, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, 0, v88, v89, v90, 3, 4) -> f_309(1, v78, v91, v93, v95, v97, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, 0, v88, v89, v90, 3, 4) :|: TRUE
f_309(1, v78, v91, v93, v95, v97, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, 0, v88, v89, v90, 3, 4) -> f_310(1, v78, v91, v93, v95, v97, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, 0, v88, v89, v90, 3, 4) :|: TRUE
f_310(1, v78, v91, v93, v95, v97, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, 0, v88, v89, v90, 3, 4) -> f_311(1, v78, v91, v93, v95, v97, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, 0, v88, v89, v90, 3, 4) :|: 0 = 0
f_311(1, v78, v91, v93, v95, v97, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, 0, v88, v89, v90, 3, 4) -> f_313(1, v78, v91, v93, v95, v97, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, 0, v88, v89, v90, 3, 4) :|: 0 <= v78
f_313(1, v78, v91, v93, v95, v97, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, 0, v88, v89, v90, 3, 4) -> f_315(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) :|: 0 = 0
f_315(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) -> f_317(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) :|: TRUE
f_317(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) -> f_319(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) :|: TRUE
f_319(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) -> f_321(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) :|: 0 = 0
f_321(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) -> f_323(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) :|: TRUE
f_323(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) -> f_325(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) :|: 0 = 0
f_325(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) -> f_327(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) :|: 0 = 0
f_327(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) -> f_329(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) :|: TRUE
f_329(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) -> f_331(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) :|: 0 = 0
f_331(1, v78, v91, v93, v95, v97, 0, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) -> f_332(1, v78, v91, v93, v95, v97, 0, v126, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) :|: 1 + v126 = v78 && 0 <= 1 + v126
f_332(1, v78, v91, v93, v95, v97, 0, v126, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) -> f_333(1, v78, v91, v93, v95, v97, 0, v126, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) :|: TRUE
f_333(1, v78, v91, v93, v95, v97, 0, v126, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) -> f_334(1, v78, v91, v93, v95, v97, 0, v126, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) :|: TRUE
f_334(1, v78, v91, v93, v95, v97, 0, v126, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) -> f_335(1, v78, v91, v93, v95, v97, 0, v126, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) :|: 0 = 0
f_335(1, v78, v91, v93, v95, v97, 0, v126, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) -> f_336(1, v78, v91, v93, v95, v97, 0, v126, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) :|: 0 = 0
f_336(1, v78, v91, v93, v95, v97, 0, v126, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) -> f_337(1, v78, v91, v93, v95, v97, 0, v126, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) :|: 0 = 0
f_337(1, v78, v91, v93, v95, v97, 0, v126, v79, v80, v81, v82, v83, v84, v85, v86, v92, v94, v96, v98, v88, v89, v90, 3, 4) -> f_338(1, v126, v79, v80, v81, v82, v83, v84, v85, v86, v91, v92, v93, v94, v95, v96, v97, v98, 0, v88, v89, v90, v78, 3, 4) :|: 0 = 0
f_338(1, v126, v79, v80, v81, v82, v83, v84, v85, v86, v91, v92, v93, v94, v95, v96, v97, v98, 0, v88, v89, v90, v78, 3, 4) -> f_339(1, v126, v79, v80, v81, v82, v83, v84, v85, v86, v91, v92, v93, v94, v95, v96, v97, v98, 0, v88, v89, v90, v78, 3, 4) :|: TRUE
f_339(1, v126, v79, v80, v81, v82, v83, v84, v85, v86, v91, v92, v93, v94, v95, v96, v97, v98, 0, v88, v89, v90, v78, 3, 4) -> f_302(1, v126, v79, v80, v81, v82, v83, v84, v85, v86, 0, v88, v89, v90, 3, 4) :|: TRUE
f_302(1, v78, v79, v80, v81, v82, v83, v84, v85, v86, 0, v88, v89, v90, 3, 4) -> f_303(1, v78, v91, v79, v80, v81, v82, v83, v84, v85, v86, v92, 0, v88, v89, v90, 3, 4) :|: 1 <= v91 && v92 = 3 + v91 && 4 <= v92
Combined rules. Obtained 1 rulesP rules:
f_303(1, 1 + v126:0, v91:0, v79:0, v80:0, v81:0, v82:0, v83:0, v84:0, v85:0, v86:0, v92:0, 0, v88:0, v89:0, v90:0, 3, 4) -> f_303(1, v126:0, v91:1, v79:0, v80:0, v81:0, v82:0, v83:0, v84:0, v85:0, v86:0, 3 + v91:1, 0, v88:0, v89:0, v90:0, 3, 4) :|: v95:0 > 0 && v93:0 > 0 && v97:0 > 0 && v126:0 > -2 && v91:1 > 0
Filtered unneeded arguments:
   f_303(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_303(x2)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_303(sum~cons_1~v126:0) -> f_303(v126:0) :|: v126:0 > -2 && sum~cons_1~v126:0 = 1 + v126:0

----------------------------------------

(8)
Obligation:
Rules:
f_303(sum~cons_1~v126:0) -> f_303(v126:0) :|: v126:0 > -2 && sum~cons_1~v126:0 = 1 + v126:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_303(sum~cons_1~v126:0:0) -> f_303(v126:0:0) :|: v126:0:0 > -2 && sum~cons_1~v126:0:0 = 1 + v126:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_303(x)] = x

The following rules are decreasing:
f_303(sum~cons_1~v126:0:0) -> f_303(v126:0:0) :|: v126:0:0 > -2 && sum~cons_1~v126:0:0 = 1 + v126:0:0
The following rules are bounded:
f_303(sum~cons_1~v126:0:0) -> f_303(v126:0:0) :|: v126:0:0 > -2 && sum~cons_1~v126:0:0 = 1 + v126:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
