YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/vnHyP.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 127 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 5 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/vnHyP.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/vnHyP.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "f" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp slt %3 3
		br %4, %5, %6
	5:
		br %11
	6:
		%7 = load %2
		%8 = add i32 %7, -1
		store %8, %2
		%9 = load %2
		Unnamed Call-Instruction = call BasicVoidType @f2(i32 %9)
		br %10
	10:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		br %11
	11:
		ret void

*BasicFunctionTypename: "f2" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 26
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp slt %3 3
		br %4, %5, %6
	5:
		br %11
	6:
		%7 = load %2
		%8 = add i32 %7, -1
		store %8, %2
		%9 = load %2
		Unnamed Call-Instruction = call BasicVoidType @f(i32 %9)
		br %10
	10:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		br %11
	11:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 41
	0:
		Unnamed Call-Instruction = call BasicVoidType @f(i32 4)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 27 rulesP rules:
f_143(v5, v6, v7, 3, 2, 4, 1) -> f_144(v5, v6, v7, 3, 2, 4, 1) :|: TRUE
f_144(v5, v6, v7, 3, 2, 4, 1) -> f_145(v5, v6, v7, 3, 2, 4, 1) :|: TRUE
f_145(v5, v6, v7, 3, 2, 4, 1) -> f_146(v5, v6, v7, 3, 2, 4, 1) :|: 0 = 0
f_146(v5, v6, v7, 3, 2, 4, 1) -> f_148(v5, v6, v7, 3, 4, 1) :|: 3 <= v5
f_148(v5, v6, v7, 3, 4, 1) -> f_150(v5, v6, 0, v7, 3, 4, 1) :|: 0 = 0
f_150(v5, v6, 0, v7, 3, 4, 1) -> f_152(v5, v6, 0, v7, 3, 4, 1) :|: TRUE
f_152(v5, v6, 0, v7, 3, 4, 1) -> f_154(v5, v6, 0, v7, 3, 4, 1) :|: 0 = 0
f_154(v5, v6, 0, v7, 3, 4, 1) -> f_156(v5, v6, 0, v11, v7, 3, 1, 4, 2) :|: 1 + v11 = v5 && 2 <= v11 && v11 <= 3
f_156(v5, v6, 0, v11, v7, 3, 1, 4, 2) -> f_158(v5, v6, 0, v11, v7, 3, 1, 4, 2) :|: TRUE
f_158(v5, v6, 0, v11, v7, 3, 1, 4, 2) -> f_159(v5, v6, 0, v11, v7, 3, 1, 4, 2) :|: 0 = 0
f_159(v5, v6, 0, v11, v7, 3, 1, 4, 2) -> f_160(v11, v6, v7, v5, 0, 3, 1, 4, 2) :|: 0 = 0
f_160(v11, v6, v7, v5, 0, 3, 1, 4, 2) -> f_161(v11, v6, v7, 3, 1, 4, 2) :|: TRUE
f_161(v11, v6, v7, 3, 1, 4, 2) -> f_162(v11, v13, v6, v7, v14, 3, 1, 4, 2) :|: 1 <= v13 && v14 = 3 + v13 && 4 <= v14
f_162(v11, v13, v6, v7, v14, 3, 1, 4, 2) -> f_163(v11, v13, v6, v7, v14, 3, 1, 4, 2) :|: TRUE
f_163(v11, v13, v6, v7, v14, 3, 1, 4, 2) -> f_164(v11, v13, v6, v7, v14, 3, 1, 4, 2) :|: TRUE
f_164(v11, v13, v6, v7, v14, 3, 1, 4, 2) -> f_165(v11, v13, v6, v7, v14, 3, 1, 4, 2) :|: 0 = 0
f_165(v11, v13, v6, v7, v14, 3, 1, 4, 2) -> f_167(3, v13, v6, v7, v14, 1, 4) :|: 3 <= v11
f_167(3, v13, v6, v7, v14, 1, 4) -> f_169(3, v13, 0, v6, v7, v14, 1, 4) :|: 0 = 0
f_169(3, v13, 0, v6, v7, v14, 1, 4) -> f_171(3, v13, 0, v6, v7, v14, 1, 4) :|: TRUE
f_171(3, v13, 0, v6, v7, v14, 1, 4) -> f_173(3, v13, 0, v6, v7, v14, 1, 4) :|: 0 = 0
f_173(3, v13, 0, v6, v7, v14, 1, 4) -> f_175(3, v13, 0, 2, v6, v7, v14, 1, 4) :|: 0 = 0
f_175(3, v13, 0, 2, v6, v7, v14, 1, 4) -> f_177(3, v13, 0, 2, v6, v7, v14, 1, 4) :|: TRUE
f_177(3, v13, 0, 2, v6, v7, v14, 1, 4) -> f_179(3, v13, 0, 2, v6, v7, v14, 1, 4) :|: 0 = 0
f_179(3, v13, 0, 2, v6, v7, v14, 1, 4) -> f_181(2, v6, v7, v13, v14, 3, 0, 1, 4) :|: 0 = 0
f_181(2, v6, v7, v13, v14, 3, 0, 1, 4) -> f_183(2, v6, v7, v13, v14, 3, 1, 4) :|: TRUE
f_183(2, v6, v7, v13, v14, 3, 1, 4) -> f_142(2, 2, 4) :|: TRUE
f_142(v5, 2, 4) -> f_143(v5, v6, v7, 3, 2, 4, 1) :|: 1 <= v6 && v7 = 3 + v6 && 4 <= v7
Combined rules. Obtained 1 rulesP rules:
f_143(1 + v11:0, v6:0, v7:0, 3, 2, 4, 1) -> f_143(2, v6:1, 3 + v6:1, 3, 2, 4, 1) :|: v11:0 > 2 && v11:0 < 4 && v13:0 > 0 && v6:1 > 0
Filtered unneeded arguments:
   f_143(x1, x2, x3, x4, x5, x6, x7) -> f_143(x1)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_143(sum~cons_1~v11:0) -> f_143(2) :|: v11:0 > 2 && v11:0 < 4 && sum~cons_1~v11:0 = 1 + v11:0

----------------------------------------

(8)
Obligation:
Rules:
f_143(sum~cons_1~v11:0) -> f_143(2) :|: v11:0 > 2 && v11:0 < 4 && sum~cons_1~v11:0 = 1 + v11:0

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.003s
