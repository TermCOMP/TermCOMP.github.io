MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/QdZlI.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 78 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/QdZlI.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/QdZlI.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: __LABS_time initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: tupleStart initVal: \00\00\00\00\04\04 type: [6 x i8] addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: tupleEnd initVal: \03\03\03\03\05\05 type: [6 x i8] addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: I initVal: ((0,0),(0,0),(0,0)) type: [3 x [2 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Lvalue initVal: ((0,0,0,0,0,0),(0,0,0,0,0,0),(0,0,0,0,0,0)) type: [3 x [6 x i8]] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: Ltstamp initVal: ((0,0,0,0,0,0),(0,0,0,0,0,0),(0,0,0,0,0,0)) type: [3 x [6 x i8]] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: HinCnt initVal: (0,0,0) type: [3 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hin initVal: ((0,0,0,0,0,0),(0,0,0,0,0,0),(0,0,0,0,0,0)) type: [3 x [6 x i8]] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: HoutCnt initVal: (0,0,0) type: [3 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hout initVal: ((0,0,0,0,0,0),(0,0,0,0,0,0),(0,0,0,0,0,0)) type: [3 x [6 x i8]] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: pc initVal: ((0),(0),(0)) type: [3 x [1 x i8]] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "exit" returnParam: BasicVoidType parameters: (i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 56
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		Unnamed Call-Instruction = call BasicVoidType @exit(i32 0)
		unreachable
	6:
		ret void

*BasicFunctionTypename: "__abs" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 67
	0:
		%2 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%3 = load %2
		%4 = sext i8 %3 to i32
		%5 = icmp sgt %4 0
		br %5, %6, %9
	6:
		%7 = load %2
		%8 = sext i8 %7 to i32
		br %13
	9:
		%10 = load %2
		%11 = sext i8 %10 to i32
		%12 = sub i32 0, %11
		br %13
	13:
		%14 = phi [%8, %6], [%12, %9]
		%15 = trunc i32 %14 to i8
		ret %15

*BasicFunctionTypename: "mod" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i8 signext, 1 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 80
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = sext i8 %5 to i32
		%7 = icmp sge %6 0
		br %7, %8, %14
	8:
		%9 = load %3
		%10 = sext i8 %9 to i32
		%11 = load %4
		%12 = sext i8 %11 to i32
		%13 = srem i32 %10, %12
		br %23
	14:
		%15 = load %4
		%16 = sext i8 %15 to i32
		%17 = load %3
		%18 = sext i8 %17 to i32
		%19 = load %4
		%20 = sext i8 %19 to i32
		%21 = srem i32 %18, %20
		%22 = add i32 %16, %21
		br %23
	23:
		%24 = phi [%13, %8], [%22, %14]
		%25 = trunc i32 %24 to i8
		ret %25

*BasicFunctionTypename: "now" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 99
	0:
		%1 = load @__LABS_time
		%2 = add i8 %1, 1
		store %2, @__LABS_time
		ret %2

*BasicFunctionTypename: "link" linkageType: EXTERNALLY_VISIBLE returnParam: i1 zeroext parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 104
	0:
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		store 0, %7
		%8 = load %6
		%9 = zext i8 %8 to i32
		%10 = icmp sge %9 4
		br %10, %11, %73
	11:
		%12 = load %6
		%13 = zext i8 %12 to i32
		%14 = icmp sle %13 5
		br %14, %15, %73
	15:
		%16 = load %4
		%17 = zext i8 %16 to i64
		%18 = getelementptr @I, 0, %17
		%19 = getelementptr %18, 0, 0
		%20 = load %19
		%21 = sext i8 %20 to i32
		%22 = load %5
		%23 = zext i8 %22 to i64
		%24 = getelementptr @I, 0, %23
		%25 = getelementptr %24, 0, 0
		%26 = load %25
		%27 = sext i8 %26 to i32
		%28 = sub i32 %21, %27
		%29 = load %4
		%30 = zext i8 %29 to i64
		%31 = getelementptr @I, 0, %30
		%32 = getelementptr %31, 0, 0
		%33 = load %32
		%34 = sext i8 %33 to i32
		%35 = load %5
		%36 = zext i8 %35 to i64
		%37 = getelementptr @I, 0, %36
		%38 = getelementptr %37, 0, 0
		%39 = load %38
		%40 = sext i8 %39 to i32
		%41 = sub i32 %34, %40
		%42 = mul i32 %28, %41
		%43 = load %4
		%44 = zext i8 %43 to i64
		%45 = getelementptr @I, 0, %44
		%46 = getelementptr %45, 0, 1
		%47 = load %46
		%48 = sext i8 %47 to i32
		%49 = load %5
		%50 = zext i8 %49 to i64
		%51 = getelementptr @I, 0, %50
		%52 = getelementptr %51, 0, 1
		%53 = load %52
		%54 = sext i8 %53 to i32
		%55 = sub i32 %48, %54
		%56 = load %4
		%57 = zext i8 %56 to i64
		%58 = getelementptr @I, 0, %57
		%59 = getelementptr %58, 0, 1
		%60 = load %59
		%61 = sext i8 %60 to i32
		%62 = load %5
		%63 = zext i8 %62 to i64
		%64 = getelementptr @I, 0, %63
		%65 = getelementptr %64, 0, 1
		%66 = load %65
		%67 = sext i8 %66 to i32
		%68 = sub i32 %61, %67
		%69 = mul i32 %55, %68
		%70 = add i32 %42, %69
		%71 = icmp sle %70 25
		%72 = zext i1 %71 to i8
		store %72, %7
		br %97
	73:
		%74 = load %6
		%75 = zext i8 %74 to i32
		%76 = icmp sge %75 0
		br %76, %77, %96
	77:
		%78 = load %6
		%79 = zext i8 %78 to i32
		%80 = icmp sle %79 3
		br %80, %81, %96
	81:
		%82 = load %4
		%83 = zext i8 %82 to i64
		%84 = getelementptr @Lvalue, 0, %83
		%85 = getelementptr %84, 0, 0
		%86 = load %85
		%87 = sext i8 %86 to i32
		%88 = load %5
		%89 = zext i8 %88 to i64
		%90 = getelementptr @Lvalue, 0, %89
		%91 = getelementptr %90, 0, 0
		%92 = load %91
		%93 = sext i8 %92 to i32
		%94 = icmp sge %87 %93
		%95 = zext i1 %94 to i8
		store %95, %7
		br %96
	96:
		br %97
	97:
		%98 = load %7
		%99 = trunc i8 %98 to i1
		ret %99

*BasicFunctionTypename: "timeof" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 167
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i64
		%7 = getelementptr @Ltstamp, 0, %6
		%8 = load %4
		%9 = zext i8 %8 to i64
		%10 = getelementptr @tupleStart, 0, %9
		%11 = load %10
		%12 = zext i8 %11 to i64
		%13 = getelementptr %7, 0, %12
		%14 = load %13
		ret %14

*BasicFunctionTypename: "setHin" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 179
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i64
		%7 = getelementptr @HinCnt, 0, %6
		%8 = load %7
		%9 = zext i8 %8 to i32
		%10 = load %3
		%11 = zext i8 %10 to i64
		%12 = getelementptr @Hin, 0, %11
		%13 = load %4
		%14 = zext i8 %13 to i64
		%15 = getelementptr @tupleStart, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i64
		%18 = getelementptr %12, 0, %17
		%19 = load %18
		%20 = trunc i8 %19 to i1
		%21 = xor i1 %20, 1
		%22 = zext i1 %21 to i32
		%23 = add i32 %9, %22
		%24 = trunc i32 %23 to i8
		%25 = load %3
		%26 = zext i8 %25 to i64
		%27 = getelementptr @HinCnt, 0, %26
		store %24, %27
		%28 = load %3
		%29 = zext i8 %28 to i64
		%30 = getelementptr @Hin, 0, %29
		%31 = load %4
		%32 = zext i8 %31 to i64
		%33 = getelementptr @tupleStart, 0, %32
		%34 = load %33
		%35 = zext i8 %34 to i64
		%36 = getelementptr %30, 0, %35
		store 1, %36
		ret void

*BasicFunctionTypename: "clearHin" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 203
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i64
		%7 = getelementptr @HinCnt, 0, %6
		%8 = load %7
		%9 = zext i8 %8 to i32
		%10 = load %3
		%11 = zext i8 %10 to i64
		%12 = getelementptr @Hin, 0, %11
		%13 = load %4
		%14 = zext i8 %13 to i64
		%15 = getelementptr @tupleStart, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i64
		%18 = getelementptr %12, 0, %17
		%19 = load %18
		%20 = trunc i8 %19 to i1
		%21 = zext i1 %20 to i32
		%22 = sub i32 %9, %21
		%23 = trunc i32 %22 to i8
		%24 = load %3
		%25 = zext i8 %24 to i64
		%26 = getelementptr @HinCnt, 0, %25
		store %23, %26
		%27 = load %3
		%28 = zext i8 %27 to i64
		%29 = getelementptr @Hin, 0, %28
		%30 = load %4
		%31 = zext i8 %30 to i64
		%32 = getelementptr @tupleStart, 0, %31
		%33 = load %32
		%34 = zext i8 %33 to i64
		%35 = getelementptr %29, 0, %34
		store 0, %35
		ret void

*BasicFunctionTypename: "setHout" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 224
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i64
		%7 = getelementptr @HoutCnt, 0, %6
		%8 = load %7
		%9 = zext i8 %8 to i32
		%10 = load %3
		%11 = zext i8 %10 to i64
		%12 = getelementptr @Hout, 0, %11
		%13 = load %4
		%14 = zext i8 %13 to i64
		%15 = getelementptr @tupleStart, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i64
		%18 = getelementptr %12, 0, %17
		%19 = load %18
		%20 = trunc i8 %19 to i1
		%21 = xor i1 %20, 1
		%22 = zext i1 %21 to i32
		%23 = add i32 %9, %22
		%24 = trunc i32 %23 to i8
		%25 = load %3
		%26 = zext i8 %25 to i64
		%27 = getelementptr @HoutCnt, 0, %26
		store %24, %27
		%28 = load %3
		%29 = zext i8 %28 to i64
		%30 = getelementptr @Hout, 0, %29
		%31 = load %4
		%32 = zext i8 %31 to i64
		%33 = getelementptr @tupleStart, 0, %32
		%34 = load %33
		%35 = zext i8 %34 to i64
		%36 = getelementptr %30, 0, %35
		store 1, %36
		ret void

*BasicFunctionTypename: "clearHout" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 246
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i64
		%7 = getelementptr @HoutCnt, 0, %6
		%8 = load %7
		%9 = zext i8 %8 to i32
		%10 = load %3
		%11 = zext i8 %10 to i64
		%12 = getelementptr @Hout, 0, %11
		%13 = load %4
		%14 = zext i8 %13 to i64
		%15 = getelementptr @tupleStart, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i64
		%18 = getelementptr %12, 0, %17
		%19 = load %18
		%20 = trunc i8 %19 to i1
		%21 = zext i1 %20 to i32
		%22 = sub i32 %9, %21
		%23 = trunc i32 %22 to i8
		%24 = load %3
		%25 = zext i8 %24 to i64
		%26 = getelementptr @HoutCnt, 0, %25
		store %23, %26
		%27 = load %3
		%28 = zext i8 %27 to i64
		%29 = getelementptr @Hout, 0, %28
		%30 = load %4
		%31 = zext i8 %30 to i64
		%32 = getelementptr @tupleStart, 0, %31
		%33 = load %32
		%34 = zext i8 %33 to i64
		%35 = getelementptr %29, 0, %34
		store 0, %35
		ret void

*BasicFunctionTypename: "attr" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext, 3 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 267
	0:
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%9 = zext i1 %3 to i8
		store %9, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		%10 = load %8
		%11 = trunc i8 %10 to i1
		br %11, %12, %19
	12:
		%13 = load %5
		%14 = zext i8 %13 to i64
		%15 = getelementptr @HoutCnt, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i32
		%18 = icmp eq %17 0
		br %19
	19:
		%20 = phi [1, %4], [%18, %12]
		%21 = zext i1 %20 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %21)
		%22 = load %8
		%23 = trunc i8 %22 to i1
		br %23, %24, %31
	24:
		%25 = load %5
		%26 = zext i8 %25 to i64
		%27 = getelementptr @HinCnt, 0, %26
		%28 = load %27
		%29 = zext i8 %28 to i32
		%30 = icmp eq %29 0
		br %31
	31:
		%32 = phi [1, %19], [%30, %24]
		%33 = zext i1 %32 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %33)
		%34 = load %7
		%35 = load %5
		%36 = zext i8 %35 to i64
		%37 = getelementptr @I, 0, %36
		%38 = load %6
		%39 = zext i8 %38 to i64
		%40 = getelementptr %37, 0, %39
		store %34, %40
		%41 = call zeroext i8 @now()
		ret void

*BasicFunctionTypename: "lstig" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext, 3 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 298
	0:
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%9 = zext i1 %3 to i8
		store %9, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		%10 = load %8
		%11 = trunc i8 %10 to i1
		br %11, %12, %19
	12:
		%13 = load %5
		%14 = zext i8 %13 to i64
		%15 = getelementptr @HoutCnt, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i32
		%18 = icmp eq %17 0
		br %19
	19:
		%20 = phi [1, %4], [%18, %12]
		%21 = zext i1 %20 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %21)
		%22 = load %8
		%23 = trunc i8 %22 to i1
		br %23, %24, %31
	24:
		%25 = load %5
		%26 = zext i8 %25 to i64
		%27 = getelementptr @HinCnt, 0, %26
		%28 = load %27
		%29 = zext i8 %28 to i32
		%30 = icmp eq %29 0
		br %31
	31:
		%32 = phi [1, %19], [%30, %24]
		%33 = zext i1 %32 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %33)
		%34 = load %7
		%35 = load %5
		%36 = zext i8 %35 to i64
		%37 = getelementptr @Lvalue, 0, %36
		%38 = load %6
		%39 = zext i8 %38 to i64
		%40 = getelementptr %37, 0, %39
		store %34, %40
		%41 = call zeroext i8 @now()
		%42 = load %5
		%43 = zext i8 %42 to i64
		%44 = getelementptr @Ltstamp, 0, %43
		%45 = load %6
		%46 = zext i8 %45 to i64
		%47 = getelementptr @tupleStart, 0, %46
		%48 = load %47
		%49 = zext i8 %48 to i64
		%50 = getelementptr %44, 0, %49
		store %41, %50
		%51 = load %5
		%52 = load %6
		Unnamed Call-Instruction = call BasicVoidType @setHout(i8 zeroext %51, i8 zeroext %52)
		ret void

*BasicFunctionTypename: "confirm" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 336
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = trunc i32 %7 to i8
		store %8, %1
		%9 = load %1
		%10 = zext i8 %9 to i32
		%11 = icmp slt %10 3
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = load %1
		%14 = zext i8 %13 to i64
		%15 = getelementptr @HinCnt, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i32
		%18 = icmp sgt %17 0
		%19 = zext i1 %18 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %19)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%20 = call i32 @__VERIFIER_nondet_int()
		%21 = trunc i32 %20 to i8
		store %21, %2
		%22 = load %2
		%23 = zext i8 %22 to i32
		%24 = icmp slt %23 6
		%25 = zext i1 %24 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %25)
		%26 = load %1
		%27 = zext i8 %26 to i64
		%28 = getelementptr @Hin, 0, %27
		%29 = load %2
		%30 = zext i8 %29 to i64
		%31 = getelementptr %28, 0, %30
		%32 = load %31
		%33 = trunc i8 %32 to i1
		%34 = zext i1 %33 to i32
		%35 = icmp eq %34 1
		%36 = zext i1 %35 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %36)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%37 = call i32 @__VERIFIER_nondet_int()
		%38 = trunc i32 %37 to i8
		store %38, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%39 = load %1
		%40 = load %2
		%41 = call zeroext i8 @timeof(i8 zeroext %39, i8 zeroext %40)
		store %41, %4
		store 0, %3
		br %42
	42:
		%43 = load %3
		%44 = zext i8 %43 to i32
		%45 = icmp slt %44 3
		br %45, %46, %132
	46:
		%47 = load %1
		%48 = zext i8 %47 to i32
		%49 = load %3
		%50 = zext i8 %49 to i32
		%51 = icmp ne %48 %50
		br %51, %52, %128
	52:
		%53 = load %3
		%54 = load %2
		%55 = call zeroext i8 @timeof(i8 zeroext %53, i8 zeroext %54)
		%56 = zext i8 %55 to i32
		%57 = load %4
		%58 = zext i8 %57 to i32
		%59 = icmp ne %56 %58
		br %59, %60, %128
	60:
		%61 = load %1
		%62 = load %3
		%63 = load %2
		%64 = call zeroext i1 @link(i8 zeroext %61, i8 zeroext %62, i8 zeroext %63)
		br %64, %65, %128
	65:
		%66 = load %3
		%67 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setHout(i8 zeroext %66, i8 zeroext %67)
		%68 = load %3
		%69 = load %2
		%70 = call zeroext i8 @timeof(i8 zeroext %68, i8 zeroext %69)
		%71 = zext i8 %70 to i32
		%72 = load %4
		%73 = zext i8 %72 to i32
		%74 = icmp slt %71 %73
		br %74, %75, %127
	75:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%76 = call i32 @__VERIFIER_nondet_int()
		%77 = trunc i32 %76 to i8
		store %77, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%78 = call i32 @__VERIFIER_nondet_int()
		%79 = trunc i32 %78 to i8
		store %79, %6
		%80 = load %3
		%81 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHin(i8 zeroext %80, i8 zeroext %81)
		store 0, %5
		br %82
	82:
		%83 = load %5
		%84 = zext i8 %83 to i32
		%85 = icmp slt %84 4
		br %85, %86, %119
	86:
		%87 = load %2
		%88 = zext i8 %87 to i32
		%89 = load %5
		%90 = zext i8 %89 to i32
		%91 = add i32 %88, %90
		%92 = trunc i32 %91 to i8
		store %92, %6
		%93 = load %6
		%94 = zext i8 %93 to i32
		%95 = load %2
		%96 = zext i8 %95 to i64
		%97 = getelementptr @tupleEnd, 0, %96
		%98 = load %97
		%99 = zext i8 %98 to i32
		%100 = icmp sle %94 %99
		br %100, %101, %115
	101:
		%102 = load %1
		%103 = zext i8 %102 to i64
		%104 = getelementptr @Lvalue, 0, %103
		%105 = load %6
		%106 = zext i8 %105 to i64
		%107 = getelementptr %104, 0, %106
		%108 = load %107
		%109 = load %3
		%110 = zext i8 %109 to i64
		%111 = getelementptr @Lvalue, 0, %110
		%112 = load %6
		%113 = zext i8 %112 to i64
		%114 = getelementptr %111, 0, %113
		store %108, %114
		br %115
	115:
		br %116
	116:
		%117 = load %5
		%118 = add i8 %117, 1
		store %118, %5
		br %82
	119:
		%120 = load %4
		%121 = load %3
		%122 = zext i8 %121 to i64
		%123 = getelementptr @Ltstamp, 0, %122
		%124 = load %2
		%125 = zext i8 %124 to i64
		%126 = getelementptr %123, 0, %125
		store %120, %126
		br %127
	127:
		br %128
	128:
		br %129
	129:
		%130 = load %3
		%131 = add i8 %130, 1
		store %131, %3
		br %42
	132:
		%133 = load %1
		%134 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHin(i8 zeroext %133, i8 zeroext %134)
		ret void

*BasicFunctionTypename: "propagate" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 459
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = trunc i32 %7 to i8
		store %8, %1
		%9 = load %1
		%10 = zext i8 %9 to i32
		%11 = icmp slt %10 3
		%12 = zext i1 %11 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %12)
		%13 = load %1
		%14 = zext i8 %13 to i64
		%15 = getelementptr @HoutCnt, 0, %14
		%16 = load %15
		%17 = zext i8 %16 to i32
		%18 = icmp sgt %17 0
		%19 = zext i1 %18 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %19)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%20 = call i32 @__VERIFIER_nondet_int()
		%21 = trunc i32 %20 to i8
		store %21, %2
		%22 = load %2
		%23 = zext i8 %22 to i32
		%24 = icmp slt %23 6
		%25 = zext i1 %24 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %25)
		%26 = load %1
		%27 = zext i8 %26 to i64
		%28 = getelementptr @Hout, 0, %27
		%29 = load %2
		%30 = zext i8 %29 to i64
		%31 = getelementptr %28, 0, %30
		%32 = load %31
		%33 = trunc i8 %32 to i1
		%34 = zext i1 %33 to i32
		%35 = icmp eq %34 1
		%36 = zext i1 %35 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %36)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%37 = call i32 @__VERIFIER_nondet_int()
		%38 = trunc i32 %37 to i8
		store %38, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%39 = load %1
		%40 = load %2
		%41 = call zeroext i8 @timeof(i8 zeroext %39, i8 zeroext %40)
		store %41, %4
		store 0, %3
		br %42
	42:
		%43 = load %3
		%44 = zext i8 %43 to i32
		%45 = icmp slt %44 3
		br %45, %46, %123
	46:
		%47 = load %1
		%48 = zext i8 %47 to i32
		%49 = load %3
		%50 = zext i8 %49 to i32
		%51 = icmp ne %48 %50
		br %51, %52, %119
	52:
		%53 = load %3
		%54 = load %2
		%55 = call zeroext i8 @timeof(i8 zeroext %53, i8 zeroext %54)
		%56 = zext i8 %55 to i32
		%57 = load %4
		%58 = zext i8 %57 to i32
		%59 = icmp slt %56 %58
		br %59, %60, %119
	60:
		%61 = load %1
		%62 = load %3
		%63 = load %2
		%64 = call zeroext i1 @link(i8 zeroext %61, i8 zeroext %62, i8 zeroext %63)
		br %64, %65, %119
	65:
		%66 = load %3
		%67 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setHout(i8 zeroext %66, i8 zeroext %67)
		%68 = load %3
		%69 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHin(i8 zeroext %68, i8 zeroext %69)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%70 = call i32 @__VERIFIER_nondet_int()
		%71 = trunc i32 %70 to i8
		store %71, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%72 = call i32 @__VERIFIER_nondet_int()
		%73 = trunc i32 %72 to i8
		store %73, %6
		store 0, %5
		br %74
	74:
		%75 = load %5
		%76 = zext i8 %75 to i32
		%77 = icmp slt %76 4
		br %77, %78, %111
	78:
		%79 = load %2
		%80 = zext i8 %79 to i32
		%81 = load %5
		%82 = zext i8 %81 to i32
		%83 = add i32 %80, %82
		%84 = trunc i32 %83 to i8
		store %84, %6
		%85 = load %6
		%86 = zext i8 %85 to i32
		%87 = load %2
		%88 = zext i8 %87 to i64
		%89 = getelementptr @tupleEnd, 0, %88
		%90 = load %89
		%91 = zext i8 %90 to i32
		%92 = icmp sle %86 %91
		br %92, %93, %107
	93:
		%94 = load %1
		%95 = zext i8 %94 to i64
		%96 = getelementptr @Lvalue, 0, %95
		%97 = load %6
		%98 = zext i8 %97 to i64
		%99 = getelementptr %96, 0, %98
		%100 = load %99
		%101 = load %3
		%102 = zext i8 %101 to i64
		%103 = getelementptr @Lvalue, 0, %102
		%104 = load %6
		%105 = zext i8 %104 to i64
		%106 = getelementptr %103, 0, %105
		store %100, %106
		br %107
	107:
		br %108
	108:
		%109 = load %5
		%110 = add i8 %109, 1
		store %110, %5
		br %74
	111:
		%112 = load %4
		%113 = load %3
		%114 = zext i8 %113 to i64
		%115 = getelementptr @Ltstamp, 0, %114
		%116 = load %2
		%117 = zext i8 %116 to i64
		%118 = getelementptr %115, 0, %117
		store %112, %118
		br %119
	119:
		br %120
	120:
		%121 = load %3
		%122 = add i8 %121, 1
		store %122, %3
		br %42
	123:
		%124 = load %1
		%125 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHout(i8 zeroext %124, i8 zeroext %125)
		ret void

*BasicFunctionTypename: "init" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 571
	0:
		%1 = alloca [3 x [2 x i8]], align 1
		%2 = alloca [3 x [1 x i8]], align 1
		%3 = alloca [3 x [6 x i8]], align 16
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [2 x i8]] %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [1 x i8]] %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[3 x [6 x i8]] %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%6 = call i32 @__VERIFIER_nondet_int()
		%7 = trunc i32 %6 to i8
		store %7, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%8 = call i32 @__VERIFIER_nondet_int()
		%9 = trunc i32 %8 to i8
		store %9, %5
		store 0, %4
		br %10
	10:
		%11 = load %4
		%12 = zext i8 %11 to i32
		%13 = icmp slt %12 3
		br %13, %14, %76
	14:
		store 0, %5
		br %15
	15:
		%16 = load %5
		%17 = zext i8 %16 to i32
		%18 = icmp slt %17 2
		br %18, %19, %31
	19:
		%20 = call i32 @__VERIFIER_nondet_int()
		%21 = trunc i32 %20 to i8
		%22 = load %4
		%23 = zext i8 %22 to i64
		%24 = getelementptr %1, 0, %23
		%25 = load %5
		%26 = zext i8 %25 to i64
		%27 = getelementptr %24, 0, %26
		store %21, %27
		br %28
	28:
		%29 = load %5
		%30 = add i8 %29, 1
		store %30, %5
		br %15
	31:
		store 0, %5
		br %32
	32:
		%33 = load %5
		%34 = zext i8 %33 to i32
		%35 = icmp slt %34 6
		br %35, %36, %66
	36:
		%37 = call i32 @__VERIFIER_nondet_int()
		%38 = trunc i32 %37 to i8
		%39 = load %4
		%40 = zext i8 %39 to i64
		%41 = getelementptr %3, 0, %40
		%42 = load %5
		%43 = zext i8 %42 to i64
		%44 = getelementptr %41, 0, %43
		store %38, %44
		%45 = load %4
		%46 = zext i8 %45 to i64
		%47 = getelementptr @Ltstamp, 0, %46
		%48 = load %5
		%49 = zext i8 %48 to i64
		%50 = getelementptr %47, 0, %49
		store 0, %50
		%51 = load %4
		%52 = zext i8 %51 to i64
		%53 = getelementptr @Hin, 0, %52
		%54 = load %5
		%55 = zext i8 %54 to i64
		%56 = getelementptr %53, 0, %55
		store 0, %56
		%57 = load %4
		%58 = zext i8 %57 to i64
		%59 = getelementptr @Hout, 0, %58
		%60 = load %5
		%61 = zext i8 %60 to i64
		%62 = getelementptr %59, 0, %61
		store 0, %62
		br %63
	63:
		%64 = load %5
		%65 = add i8 %64, 1
		store %65, %5
		br %32
	66:
		%67 = load %4
		%68 = zext i8 %67 to i64
		%69 = getelementptr @HinCnt, 0, %68
		store 0, %69
		%70 = load %4
		%71 = zext i8 %70 to i64
		%72 = getelementptr @HoutCnt, 0, %71
		store 0, %72
		br %73
	73:
		%74 = load %4
		%75 = add i8 %74, 1
		store %75, %4
		br %10
	76:
		%77 = getelementptr %2, 0, 0
		%78 = getelementptr %77, 0, 0
		store 8, %78
		%79 = getelementptr %2, 0, 1
		%80 = getelementptr %79, 0, 0
		store 8, %80
		%81 = getelementptr %2, 0, 2
		%82 = getelementptr %81, 0, 0
		store 8, %82
		%83 = getelementptr %3, 0, 0
		%84 = getelementptr %83, 0, 0
		%85 = load %84
		%86 = sext i8 %85 to i32
		%87 = icmp eq %86 1
		%88 = zext i1 %87 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %88)
		%89 = getelementptr %3, 0, 1
		%90 = getelementptr %89, 0, 0
		%91 = load %90
		%92 = sext i8 %91 to i32
		%93 = icmp eq %92 1
		%94 = zext i1 %93 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %94)
		%95 = getelementptr %3, 0, 2
		%96 = getelementptr %95, 0, 0
		%97 = load %96
		%98 = sext i8 %97 to i32
		%99 = icmp eq %98 1
		%100 = zext i1 %99 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %100)
		%101 = getelementptr %3, 0, 0
		%102 = getelementptr %101, 0, 1
		%103 = load %102
		%104 = sext i8 %103 to i32
		%105 = icmp eq %104 0
		%106 = zext i1 %105 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %106)
		%107 = getelementptr %3, 0, 1
		%108 = getelementptr %107, 0, 1
		%109 = load %108
		%110 = sext i8 %109 to i32
		%111 = icmp eq %110 1
		%112 = zext i1 %111 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %112)
		%113 = getelementptr %3, 0, 2
		%114 = getelementptr %113, 0, 1
		%115 = load %114
		%116 = sext i8 %115 to i32
		%117 = icmp eq %116 2
		%118 = zext i1 %117 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %118)
		%119 = getelementptr %3, 0, 0
		%120 = getelementptr %119, 0, 2
		%121 = load %120
		%122 = sext i8 %121 to i32
		%123 = icmp eq %122 -1
		%124 = zext i1 %123 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %124)
		%125 = getelementptr %3, 0, 1
		%126 = getelementptr %125, 0, 2
		%127 = load %126
		%128 = sext i8 %127 to i32
		%129 = icmp eq %128 -1
		%130 = zext i1 %129 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %130)
		%131 = getelementptr %3, 0, 2
		%132 = getelementptr %131, 0, 2
		%133 = load %132
		%134 = sext i8 %133 to i32
		%135 = icmp eq %134 -1
		%136 = zext i1 %135 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %136)
		%137 = getelementptr %3, 0, 0
		%138 = getelementptr %137, 0, 3
		%139 = load %138
		%140 = sext i8 %139 to i32
		%141 = icmp eq %140 -1
		%142 = zext i1 %141 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %142)
		%143 = getelementptr %3, 0, 1
		%144 = getelementptr %143, 0, 3
		%145 = load %144
		%146 = sext i8 %145 to i32
		%147 = icmp eq %146 -1
		%148 = zext i1 %147 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %148)
		%149 = getelementptr %3, 0, 2
		%150 = getelementptr %149, 0, 3
		%151 = load %150
		%152 = sext i8 %151 to i32
		%153 = icmp eq %152 -1
		%154 = zext i1 %153 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %154)
		%155 = getelementptr %3, 0, 0
		%156 = getelementptr %155, 0, 4
		%157 = load %156
		%158 = sext i8 %157 to i32
		%159 = icmp eq %158 -1
		br %159, %166, %160
	160:
		%161 = getelementptr %3, 0, 0
		%162 = getelementptr %161, 0, 4
		%163 = load %162
		%164 = sext i8 %163 to i32
		%165 = icmp eq %164 1
		br %166
	166:
		%167 = phi [1, %76], [%165, %160]
		%168 = zext i1 %167 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %168)
		%169 = getelementptr %3, 0, 1
		%170 = getelementptr %169, 0, 4
		%171 = load %170
		%172 = sext i8 %171 to i32
		%173 = icmp eq %172 -1
		br %173, %180, %174
	174:
		%175 = getelementptr %3, 0, 1
		%176 = getelementptr %175, 0, 4
		%177 = load %176
		%178 = sext i8 %177 to i32
		%179 = icmp eq %178 1
		br %180
	180:
		%181 = phi [1, %166], [%179, %174]
		%182 = zext i1 %181 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %182)
		%183 = getelementptr %3, 0, 2
		%184 = getelementptr %183, 0, 4
		%185 = load %184
		%186 = sext i8 %185 to i32
		%187 = icmp eq %186 -1
		br %187, %194, %188
	188:
		%189 = getelementptr %3, 0, 2
		%190 = getelementptr %189, 0, 4
		%191 = load %190
		%192 = sext i8 %191 to i32
		%193 = icmp eq %192 1
		br %194
	194:
		%195 = phi [1, %180], [%193, %188]
		%196 = zext i1 %195 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %196)
		%197 = getelementptr %3, 0, 0
		%198 = getelementptr %197, 0, 5
		%199 = load %198
		%200 = sext i8 %199 to i32
		%201 = icmp eq %200 -1
		br %201, %208, %202
	202:
		%203 = getelementptr %3, 0, 0
		%204 = getelementptr %203, 0, 5
		%205 = load %204
		%206 = sext i8 %205 to i32
		%207 = icmp eq %206 1
		br %208
	208:
		%209 = phi [1, %194], [%207, %202]
		%210 = zext i1 %209 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %210)
		%211 = getelementptr %3, 0, 1
		%212 = getelementptr %211, 0, 5
		%213 = load %212
		%214 = sext i8 %213 to i32
		%215 = icmp eq %214 -1
		br %215, %222, %216
	216:
		%217 = getelementptr %3, 0, 1
		%218 = getelementptr %217, 0, 5
		%219 = load %218
		%220 = sext i8 %219 to i32
		%221 = icmp eq %220 1
		br %222
	222:
		%223 = phi [1, %208], [%221, %216]
		%224 = zext i1 %223 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %224)
		%225 = getelementptr %3, 0, 2
		%226 = getelementptr %225, 0, 5
		%227 = load %226
		%228 = sext i8 %227 to i32
		%229 = icmp eq %228 -1
		br %229, %236, %230
	230:
		%231 = getelementptr %3, 0, 2
		%232 = getelementptr %231, 0, 5
		%233 = load %232
		%234 = sext i8 %233 to i32
		%235 = icmp eq %234 1
		br %236
	236:
		%237 = phi [1, %222], [%235, %230]
		%238 = zext i1 %237 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %238)
		%239 = getelementptr %1, 0, 0
		%240 = getelementptr %239, 0, 0
		%241 = load %240
		%242 = sext i8 %241 to i32
		%243 = icmp sge %242 0
		br %243, %244, %250
	244:
		%245 = getelementptr %1, 0, 0
		%246 = getelementptr %245, 0, 0
		%247 = load %246
		%248 = sext i8 %247 to i32
		%249 = icmp slt %248 5
		br %250
	250:
		%251 = phi [0, %236], [%249, %244]
		%252 = zext i1 %251 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %252)
		%253 = getelementptr %1, 0, 1
		%254 = getelementptr %253, 0, 0
		%255 = load %254
		%256 = sext i8 %255 to i32
		%257 = icmp sge %256 0
		br %257, %258, %264
	258:
		%259 = getelementptr %1, 0, 1
		%260 = getelementptr %259, 0, 0
		%261 = load %260
		%262 = sext i8 %261 to i32
		%263 = icmp slt %262 5
		br %264
	264:
		%265 = phi [0, %250], [%263, %258]
		%266 = zext i1 %265 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %266)
		%267 = getelementptr %1, 0, 2
		%268 = getelementptr %267, 0, 0
		%269 = load %268
		%270 = sext i8 %269 to i32
		%271 = icmp sge %270 0
		br %271, %272, %278
	272:
		%273 = getelementptr %1, 0, 2
		%274 = getelementptr %273, 0, 0
		%275 = load %274
		%276 = sext i8 %275 to i32
		%277 = icmp slt %276 5
		br %278
	278:
		%279 = phi [0, %264], [%277, %272]
		%280 = zext i1 %279 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %280)
		%281 = getelementptr %1, 0, 0
		%282 = getelementptr %281, 0, 1
		%283 = load %282
		%284 = sext i8 %283 to i32
		%285 = icmp sge %284 0
		br %285, %286, %292
	286:
		%287 = getelementptr %1, 0, 0
		%288 = getelementptr %287, 0, 1
		%289 = load %288
		%290 = sext i8 %289 to i32
		%291 = icmp slt %290 5
		br %292
	292:
		%293 = phi [0, %278], [%291, %286]
		%294 = zext i1 %293 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %294)
		%295 = getelementptr %1, 0, 1
		%296 = getelementptr %295, 0, 1
		%297 = load %296
		%298 = sext i8 %297 to i32
		%299 = icmp sge %298 0
		br %299, %300, %306
	300:
		%301 = getelementptr %1, 0, 1
		%302 = getelementptr %301, 0, 1
		%303 = load %302
		%304 = sext i8 %303 to i32
		%305 = icmp slt %304 5
		br %306
	306:
		%307 = phi [0, %292], [%305, %300]
		%308 = zext i1 %307 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %308)
		%309 = getelementptr %1, 0, 2
		%310 = getelementptr %309, 0, 1
		%311 = load %310
		%312 = sext i8 %311 to i32
		%313 = icmp sge %312 0
		br %313, %314, %320
	314:
		%315 = getelementptr %1, 0, 2
		%316 = getelementptr %315, 0, 1
		%317 = load %316
		%318 = sext i8 %317 to i32
		%319 = icmp slt %318 5
		br %320
	320:
		%321 = phi [0, %306], [%319, %314]
		%322 = zext i1 %321 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %322)
		%323 = call zeroext i8 @now()
		%324 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@243cbffa
		%325 = zext i8 %324 to i64
		%326 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5593a2ec, 0, %325
		store %323, %326
		%327 = call zeroext i8 @now()
		%328 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@9cc2aad
		%329 = zext i8 %328 to i64
		%330 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3d70fe4d, 0, %329
		store %327, %330
		%331 = call zeroext i8 @now()
		%332 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7c725576
		%333 = zext i8 %332 to i64
		%334 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@343e0cd6, 0, %333
		store %331, %334
		%335 = call zeroext i8 @now()
		%336 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5ccfd1be
		%337 = zext i8 %336 to i64
		%338 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@66f7cefc, 0, %337
		store %335, %338
		%339 = call zeroext i8 @now()
		%340 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@840eeb1
		%341 = zext i8 %340 to i64
		%342 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4cdc1bd3, 0, %341
		store %339, %342
		%343 = call zeroext i8 @now()
		%344 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6ebc71d7
		%345 = zext i8 %344 to i64
		%346 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3664d2d2, 0, %345
		store %343, %346
		%347 = call zeroext i8 @now()
		%348 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@39de87c9
		%349 = zext i8 %348 to i64
		%350 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@157011a2, 0, %349
		store %347, %350
		%351 = call zeroext i8 @now()
		%352 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@18cfe812
		%353 = zext i8 %352 to i64
		%354 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@82d4b9b, 0, %353
		store %351, %354
		%355 = call zeroext i8 @now()
		%356 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@45807598
		%357 = zext i8 %356 to i64
		%358 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@50e8918b, 0, %357
		store %355, %358
		%359 = call zeroext i8 @now()
		%360 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@37806cfc
		%361 = zext i8 %360 to i64
		%362 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@55139804, 0, %361
		store %359, %362
		%363 = call zeroext i8 @now()
		%364 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@13f90b8b
		%365 = zext i8 %364 to i64
		%366 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@789b4b6, 0, %365
		store %363, %366
		%367 = call zeroext i8 @now()
		%368 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@33dacf37
		%369 = zext i8 %368 to i64
		%370 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7ac0a2f0, 0, %369
		store %367, %370
		%371 = call zeroext i8 @now()
		%372 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@213e4b70
		%373 = zext i8 %372 to i64
		%374 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6bd877e5, 0, %373
		store %371, %374
		%375 = call zeroext i8 @now()
		%376 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@e9eaede
		%377 = zext i8 %376 to i64
		%378 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@71b64adf, 0, %377
		store %375, %378
		%379 = call zeroext i8 @now()
		%380 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2280ea52
		%381 = zext i8 %380 to i64
		%382 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@a4fd6b8, 0, %381
		store %379, %382
		%383 = call zeroext i8 @now()
		%384 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@71dc7171
		%385 = zext i8 %384 to i64
		%386 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@32ff3d27, 0, %385
		store %383, %386
		%387 = call zeroext i8 @now()
		%388 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@17089350
		%389 = zext i8 %388 to i64
		%390 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@63067d1f, 0, %389
		store %387, %390
		%391 = call zeroext i8 @now()
		%392 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7143cff7
		%393 = zext i8 %392 to i64
		%394 = getelementptr aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3a9ec2fd, 0, %393
		store %391, %394
		%395 = call zeroext i8 @now()
		store 0, %4
		br %396
	396:
		%397 = load %4
		%398 = zext i8 %397 to i32
		%399 = icmp slt %398 3
		br %399, %400, %470
	400:
		store 0, %5
		br %401
	401:
		%402 = load %5
		%403 = zext i8 %402 to i32
		%404 = icmp slt %403 1
		br %404, %405, %422
	405:
		%406 = load %4
		%407 = zext i8 %406 to i64
		%408 = getelementptr %2, 0, %407
		%409 = load %5
		%410 = zext i8 %409 to i64
		%411 = getelementptr %408, 0, %410
		%412 = load %411
		%413 = load %4
		%414 = zext i8 %413 to i64
		%415 = getelementptr @pc, 0, %414
		%416 = load %5
		%417 = zext i8 %416 to i64
		%418 = getelementptr %415, 0, %417
		store %412, %418
		br %419
	419:
		%420 = load %5
		%421 = add i8 %420, 1
		store %421, %5
		br %401
	422:
		store 0, %5
		br %423
	423:
		%424 = load %5
		%425 = zext i8 %424 to i32
		%426 = icmp slt %425 2
		br %426, %427, %444
	427:
		%428 = load %4
		%429 = zext i8 %428 to i64
		%430 = getelementptr %1, 0, %429
		%431 = load %5
		%432 = zext i8 %431 to i64
		%433 = getelementptr %430, 0, %432
		%434 = load %433
		%435 = load %4
		%436 = zext i8 %435 to i64
		%437 = getelementptr @I, 0, %436
		%438 = load %5
		%439 = zext i8 %438 to i64
		%440 = getelementptr %437, 0, %439
		store %434, %440
		br %441
	441:
		%442 = load %5
		%443 = add i8 %442, 1
		store %443, %5
		br %423
	444:
		store 0, %5
		br %445
	445:
		%446 = load %5
		%447 = zext i8 %446 to i32
		%448 = icmp slt %447 6
		br %448, %449, %466
	449:
		%450 = load %4
		%451 = zext i8 %450 to i64
		%452 = getelementptr %3, 0, %451
		%453 = load %5
		%454 = zext i8 %453 to i64
		%455 = getelementptr %452, 0, %454
		%456 = load %455
		%457 = load %4
		%458 = zext i8 %457 to i64
		%459 = getelementptr @Lvalue, 0, %458
		%460 = load %5
		%461 = zext i8 %460 to i64
		%462 = getelementptr %459, 0, %461
		store %456, %462
		br %463
	463:
		%464 = load %5
		%465 = add i8 %464, 1
		store %465, %5
		br %445
	466:
		br %467
	467:
		%468 = load %4
		%469 = add i8 %468, 1
		store %469, %4
		br %396
	470:
		ret void

*BasicFunctionTypename: "_0_2" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 913
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = load %2
		%6 = sext i32 %5 to i64
		%7 = getelementptr @Lvalue, 0, %6
		%8 = getelementptr %7, 0, 1
		%9 = load %8
		%10 = sext i8 %9 to i32
		%11 = load %2
		%12 = icmp eq %10 %11
		%13 = zext i1 %12 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %13)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%14 = load %2
		%15 = sext i32 %14 to i64
		%16 = getelementptr @I, 0, %15
		%17 = getelementptr %16, 0, 0
		%18 = load %17
		store %18, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%19 = load %2
		%20 = sext i32 %19 to i64
		%21 = getelementptr @I, 0, %20
		%22 = getelementptr %21, 0, 1
		%23 = load %22
		store %23, %4
		%24 = load %2
		%25 = trunc i32 %24 to i8
		%26 = load %3
		Unnamed Call-Instruction = call BasicVoidType @lstig(i8 zeroext %25, i8 zeroext 2, i8 signext %26, i1 zeroext 1)
		%27 = load %2
		%28 = trunc i32 %27 to i8
		%29 = load %4
		Unnamed Call-Instruction = call BasicVoidType @lstig(i8 zeroext %28, i8 zeroext 3, i8 signext %29, i1 zeroext 0)
		%30 = load %2
		%31 = trunc i32 %30 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %31, i8 zeroext 1)
		%32 = load %2
		%33 = sext i32 %32 to i64
		%34 = getelementptr @pc, 0, %33
		%35 = getelementptr %34, 0, 0
		store 8, %35
		ret void

*BasicFunctionTypename: "_0_3" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 941
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = load %2
		%5 = sext i32 %4 to i64
		%6 = getelementptr @I, 0, %5
		%7 = getelementptr %6, 0, 1
		%8 = load %7
		%9 = sext i8 %8 to i32
		%10 = load %2
		%11 = sext i32 %10 to i64
		%12 = getelementptr @Lvalue, 0, %11
		%13 = getelementptr %12, 0, 3
		%14 = load %13
		%15 = sext i8 %14 to i32
		%16 = sub i32 %9, %15
		%17 = trunc i32 %16 to i8
		%18 = call signext i8 @__abs(i8 signext %17)
		%19 = sext i8 %18 to i32
		%20 = icmp sgt %19 5
		%21 = zext i1 %20 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %21)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%22 = load %2
		%23 = sext i32 %22 to i64
		%24 = getelementptr @Lvalue, 0, %23
		%25 = getelementptr %24, 0, 3
		%26 = load %25
		%27 = sext i8 %26 to i32
		%28 = load %2
		%29 = sext i32 %28 to i64
		%30 = getelementptr @I, 0, %29
		%31 = getelementptr %30, 0, 1
		%32 = load %31
		%33 = sext i8 %32 to i32
		%34 = sub i32 %27, %33
		%35 = load %2
		%36 = sext i32 %35 to i64
		%37 = getelementptr @Lvalue, 0, %36
		%38 = getelementptr %37, 0, 3
		%39 = load %38
		%40 = sext i8 %39 to i32
		%41 = load %2
		%42 = sext i32 %41 to i64
		%43 = getelementptr @I, 0, %42
		%44 = getelementptr %43, 0, 1
		%45 = load %44
		%46 = sext i8 %45 to i32
		%47 = sub i32 %40, %46
		%48 = trunc i32 %47 to i8
		%49 = call signext i8 @__abs(i8 signext %48)
		%50 = sext i8 %49 to i32
		%51 = sdiv i32 %34, %50
		%52 = trunc i32 %51 to i8
		store %52, %3
		%53 = load %2
		%54 = trunc i32 %53 to i8
		%55 = load %3
		Unnamed Call-Instruction = call BasicVoidType @lstig(i8 zeroext %54, i8 zeroext 5, i8 signext %55, i1 zeroext 1)
		%56 = load %2
		%57 = trunc i32 %56 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %57, i8 zeroext 3)
		%58 = load %2
		%59 = sext i32 %58 to i64
		%60 = getelementptr @pc, 0, %59
		%61 = getelementptr %60, 0, 0
		store 8, %61
		ret void

*BasicFunctionTypename: "_0_4" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 976
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = sext i32 %3 to i64
		%5 = getelementptr @HoutCnt, 0, %4
		%6 = load %5
		%7 = zext i8 %6 to i32
		%8 = icmp eq %7 0
		br %8, %9, %16
	9:
		%10 = load %2
		%11 = sext i32 %10 to i64
		%12 = getelementptr @HinCnt, 0, %11
		%13 = load %12
		%14 = zext i8 %13 to i32
		%15 = icmp eq %14 0
		br %16
	16:
		%17 = phi [0, %1], [%15, %9]
		%18 = zext i1 %17 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %18)
		%19 = load %2
		%20 = sext i32 %19 to i64
		%21 = getelementptr @I, 0, %20
		%22 = getelementptr %21, 0, 1
		%23 = load %22
		%24 = sext i8 %23 to i32
		%25 = load %2
		%26 = sext i32 %25 to i64
		%27 = getelementptr @Lvalue, 0, %26
		%28 = getelementptr %27, 0, 3
		%29 = load %28
		%30 = sext i8 %29 to i32
		%31 = sub i32 %24, %30
		%32 = trunc i32 %31 to i8
		%33 = call signext i8 @__abs(i8 signext %32)
		%34 = sext i8 %33 to i32
		%35 = icmp sle %34 5
		%36 = zext i1 %35 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %36)
		%37 = load %2
		%38 = trunc i32 %37 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %38, i8 zeroext 3)
		%39 = load %2
		%40 = sext i32 %39 to i64
		%41 = getelementptr @pc, 0, %40
		%42 = getelementptr %41, 0, 0
		store 8, %42
		ret void

*BasicFunctionTypename: "_0_5" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1002
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = load %2
		%6 = sext i32 %5 to i64
		%7 = getelementptr @I, 0, %6
		%8 = getelementptr %7, 0, 0
		%9 = load %8
		%10 = sext i8 %9 to i32
		%11 = load %2
		%12 = sext i32 %11 to i64
		%13 = getelementptr @Lvalue, 0, %12
		%14 = getelementptr %13, 0, 2
		%15 = load %14
		%16 = sext i8 %15 to i32
		%17 = sub i32 %10, %16
		%18 = trunc i32 %17 to i8
		%19 = call signext i8 @__abs(i8 signext %18)
		%20 = sext i8 %19 to i32
		%21 = icmp sgt %20 5
		%22 = zext i1 %21 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %22)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%23 = load %2
		%24 = sext i32 %23 to i64
		%25 = getelementptr @Lvalue, 0, %24
		%26 = getelementptr %25, 0, 2
		%27 = load %26
		%28 = sext i8 %27 to i32
		%29 = load %2
		%30 = sext i32 %29 to i64
		%31 = getelementptr @I, 0, %30
		%32 = getelementptr %31, 0, 0
		%33 = load %32
		%34 = sext i8 %33 to i32
		%35 = sub i32 %28, %34
		%36 = load %2
		%37 = sext i32 %36 to i64
		%38 = getelementptr @Lvalue, 0, %37
		%39 = getelementptr %38, 0, 2
		%40 = load %39
		%41 = sext i8 %40 to i32
		%42 = load %2
		%43 = sext i32 %42 to i64
		%44 = getelementptr @I, 0, %43
		%45 = getelementptr %44, 0, 0
		%46 = load %45
		%47 = sext i8 %46 to i32
		%48 = sub i32 %41, %47
		%49 = trunc i32 %48 to i8
		%50 = call signext i8 @__abs(i8 signext %49)
		%51 = sext i8 %50 to i32
		%52 = sdiv i32 %35, %51
		%53 = trunc i32 %52 to i8
		store %53, %3
		%54 = load %2
		%55 = trunc i32 %54 to i8
		%56 = load %3
		Unnamed Call-Instruction = call BasicVoidType @lstig(i8 zeroext %55, i8 zeroext 4, i8 signext %56, i1 zeroext 1)
		%57 = load %2
		%58 = trunc i32 %57 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %58, i8 zeroext 2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%59 = call i32 @__VERIFIER_nondet_int()
		%60 = trunc i32 %59 to i8
		store %60, %4
		%61 = load %4
		%62 = zext i8 %61 to i32
		%63 = icmp eq %62 3
		br %63, %68, %64
	64:
		%65 = load %4
		%66 = zext i8 %65 to i32
		%67 = icmp eq %66 4
		br %68
	68:
		%69 = phi [1, %1], [%67, %64]
		%70 = zext i1 %69 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %70)
		%71 = load %4
		%72 = load %2
		%73 = sext i32 %72 to i64
		%74 = getelementptr @pc, 0, %73
		%75 = getelementptr %74, 0, 0
		store %71, %75
		ret void

*BasicFunctionTypename: "_0_6" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1047
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = load %2
		%5 = sext i32 %4 to i64
		%6 = getelementptr @HoutCnt, 0, %5
		%7 = load %6
		%8 = zext i8 %7 to i32
		%9 = icmp eq %8 0
		br %9, %10, %17
	10:
		%11 = load %2
		%12 = sext i32 %11 to i64
		%13 = getelementptr @HinCnt, 0, %12
		%14 = load %13
		%15 = zext i8 %14 to i32
		%16 = icmp eq %15 0
		br %17
	17:
		%18 = phi [0, %1], [%16, %10]
		%19 = zext i1 %18 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %19)
		%20 = load %2
		%21 = sext i32 %20 to i64
		%22 = getelementptr @I, 0, %21
		%23 = getelementptr %22, 0, 0
		%24 = load %23
		%25 = sext i8 %24 to i32
		%26 = load %2
		%27 = sext i32 %26 to i64
		%28 = getelementptr @Lvalue, 0, %27
		%29 = getelementptr %28, 0, 2
		%30 = load %29
		%31 = sext i8 %30 to i32
		%32 = sub i32 %25, %31
		%33 = trunc i32 %32 to i8
		%34 = call signext i8 @__abs(i8 signext %33)
		%35 = sext i8 %34 to i32
		%36 = icmp sle %35 5
		%37 = zext i1 %36 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %37)
		%38 = load %2
		%39 = trunc i32 %38 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %39, i8 zeroext 2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%40 = call i32 @__VERIFIER_nondet_int()
		%41 = trunc i32 %40 to i8
		store %41, %3
		%42 = load %3
		%43 = zext i8 %42 to i32
		%44 = icmp eq %43 3
		br %44, %49, %45
	45:
		%46 = load %3
		%47 = zext i8 %46 to i32
		%48 = icmp eq %47 4
		br %49
	49:
		%50 = phi [1, %17], [%48, %45]
		%51 = zext i1 %50 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %51)
		%52 = load %3
		%53 = load %2
		%54 = sext i32 %53 to i64
		%55 = getelementptr @pc, 0, %54
		%56 = getelementptr %55, 0, 0
		store %52, %56
		ret void

*BasicFunctionTypename: "_0_7" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1083
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = load %2
		%6 = sext i32 %5 to i64
		%7 = getelementptr @Lvalue, 0, %6
		%8 = getelementptr %7, 0, 1
		%9 = load %8
		%10 = sext i8 %9 to i32
		%11 = load %2
		%12 = icmp ne %10 %11
		%13 = zext i1 %12 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %13)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%14 = load %2
		%15 = sext i32 %14 to i64
		%16 = getelementptr @Lvalue, 0, %15
		%17 = getelementptr %16, 0, 0
		%18 = load %17
		%19 = sext i8 %18 to i32
		%20 = add i32 %19, 1
		%21 = trunc i32 %20 to i8
		store %21, %3
		%22 = load %2
		%23 = trunc i32 %22 to i8
		%24 = load %3
		Unnamed Call-Instruction = call BasicVoidType @lstig(i8 zeroext %23, i8 zeroext 0, i8 signext %24, i1 zeroext 1)
		%25 = load %2
		%26 = trunc i32 %25 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %26, i8 zeroext 0)
		%27 = load %2
		%28 = trunc i32 %27 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %28, i8 zeroext 1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%29 = call i32 @__VERIFIER_nondet_int()
		%30 = trunc i32 %29 to i8
		store %30, %4
		%31 = load %4
		%32 = zext i8 %31 to i32
		%33 = icmp eq %32 5
		br %33, %38, %34
	34:
		%35 = load %4
		%36 = zext i8 %35 to i32
		%37 = icmp eq %36 6
		br %38
	38:
		%39 = phi [1, %1], [%37, %34]
		%40 = zext i1 %39 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %40)
		%41 = load %4
		%42 = load %2
		%43 = sext i32 %42 to i64
		%44 = getelementptr @pc, 0, %43
		%45 = getelementptr %44, 0, 0
		store %41, %45
		ret void

*BasicFunctionTypename: "_0_8" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1117
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%6 = load %2
		%7 = sext i32 %6 to i64
		%8 = getelementptr @I, 0, %7
		%9 = getelementptr %8, 0, 0
		%10 = load %9
		%11 = sext i8 %10 to i32
		%12 = load %2
		%13 = sext i32 %12 to i64
		%14 = getelementptr @Lvalue, 0, %13
		%15 = getelementptr %14, 0, 4
		%16 = load %15
		%17 = sext i8 %16 to i32
		%18 = add i32 %11, %17
		%19 = trunc i32 %18 to i8
		%20 = call signext i8 @mod(i8 signext %19, i8 signext 5)
		store %20, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%21 = load %2
		%22 = sext i32 %21 to i64
		%23 = getelementptr @I, 0, %22
		%24 = getelementptr %23, 0, 1
		%25 = load %24
		%26 = sext i8 %25 to i32
		%27 = load %2
		%28 = sext i32 %27 to i64
		%29 = getelementptr @Lvalue, 0, %28
		%30 = getelementptr %29, 0, 5
		%31 = load %30
		%32 = sext i8 %31 to i32
		%33 = add i32 %26, %32
		%34 = trunc i32 %33 to i8
		%35 = call signext i8 @mod(i8 signext %34, i8 signext 5)
		store %35, %4
		%36 = load %2
		%37 = trunc i32 %36 to i8
		%38 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %37, i8 zeroext 0, i8 signext %38, i1 zeroext 1)
		%39 = load %2
		%40 = trunc i32 %39 to i8
		%41 = load %4
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %40, i8 zeroext 1, i8 signext %41, i1 zeroext 0)
		%42 = load %2
		%43 = trunc i32 %42 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %43, i8 zeroext 4)
		%44 = load %2
		%45 = trunc i32 %44 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %45, i8 zeroext 5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%46 = call i32 @__VERIFIER_nondet_int()
		%47 = trunc i32 %46 to i8
		store %47, %5
		%48 = load %5
		%49 = zext i8 %48 to i32
		%50 = icmp eq %49 2
		br %50, %55, %51
	51:
		%52 = load %5
		%53 = zext i8 %52 to i32
		%54 = icmp eq %53 7
		br %55
	55:
		%56 = phi [1, %1], [%54, %51]
		%57 = zext i1 %56 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %57)
		%58 = load %5
		%59 = load %2
		%60 = sext i32 %59 to i64
		%61 = getelementptr @pc, 0, %60
		%62 = getelementptr %61, 0, 0
		store %58, %62
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1160
	0:
		%1 = alloca i32, align 4
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @init()
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		store 0, %2
		br %4
	4:
		%5 = call i32 @__VERIFIER_nondet_int()
		%6 = icmp ne %5 0
		br %6, %7, %45
	7:
		%8 = load %2
		%9 = zext i8 %8 to i64
		%10 = getelementptr @pc, 0, %9
		%11 = getelementptr %10, 0, 0
		%12 = load %11
		%13 = zext i8 %12 to i32
		switch %13, %35 [2, %14 3, %17 4, %20 5, %23 6, %26 7, %29 8, %32]
	14:
		%15 = load %2
		%16 = zext i8 %15 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_2(i32 %16)
		br %36
	17:
		%18 = load %2
		%19 = zext i8 %18 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_3(i32 %19)
		br %36
	20:
		%21 = load %2
		%22 = zext i8 %21 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_4(i32 %22)
		br %36
	23:
		%24 = load %2
		%25 = zext i8 %24 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_5(i32 %25)
		br %36
	26:
		%27 = load %2
		%28 = zext i8 %27 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_6(i32 %28)
		br %36
	29:
		%30 = load %2
		%31 = zext i8 %30 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_7(i32 %31)
		br %36
	32:
		%33 = load %2
		%34 = zext i8 %33 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_8(i32 %34)
		br %36
	35:
		br %36
	36:
		%37 = load %2
		%38 = zext i8 %37 to i32
		%39 = icmp eq %38 2
		br %39, %40, %41
	40:
		store 0, %2
		br %44
	41:
		%42 = load %2
		%43 = add i8 %42, 1
		store %43, %2
		br %44
	44:
		br %54
	45:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%46 = call i32 @__VERIFIER_nondet_int()
		%47 = icmp ne %46 0
		%48 = zext i1 %47 to i8
		store %48, %3
		%49 = load %3
		%50 = trunc i8 %49 to i1
		br %50, %51, %52
	51:
		Unnamed Call-Instruction = call BasicVoidType @propagate()
		br %53
	52:
		Unnamed Call-Instruction = call BasicVoidType @confirm()
		br %53
	53:
		br %54
	54:
		%55 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@695f44ed
		%56 = sext i8 %55 to i32
		%57 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3961225c
		%58 = sext i8 %57 to i32
		%59 = icmp eq %56 %58
		br %59, %60, %91
	60:
		%61 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@56b27ef0
		%62 = sext i8 %61 to i32
		%63 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1af7d7f1
		%64 = sext i8 %63 to i32
		%65 = icmp eq %62 %64
		br %65, %66, %91
	66:
		%67 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@91c906e
		%68 = sext i8 %67 to i32
		%69 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@39df20d3
		%70 = sext i8 %69 to i32
		%71 = icmp eq %68 %70
		br %71, %72, %91
	72:
		%73 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7c5f8ce6
		%74 = sext i8 %73 to i32
		%75 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@583394c3
		%76 = sext i8 %75 to i32
		%77 = icmp eq %74 %76
		br %77, %78, %91
	78:
		%79 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3541e04b
		%80 = sext i8 %79 to i32
		%81 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@75d89788
		%82 = sext i8 %81 to i32
		%83 = icmp eq %80 %82
		br %83, %84, %91
	84:
		%85 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@75600d69
		%86 = sext i8 %85 to i32
		%87 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@31311a8a
		%88 = sext i8 %87 to i32
		%89 = icmp eq %86 %88
		br %89, %90, %91
	90:
		ret 0
	91:
		br %4


Analyze Termination of all function calls matching the pattern:
main()/hpcwork/ff862203/termcomp25/benchmarks/QdZlI.c:413:27: warning: self-comparison always evaluates to true [-Wtautological-compare]
    if ((((((Lvalue[0][1] == Lvalue[0][1]) && (Lvalue[0][1] == Lvalue[1][1])) && (Lvalue[0][1] == Lvalue[2][1])) && (Lvalue[1][1] == Lvalue[1][1])) && (Lvalue[1][1] == Lvalue[2][1])) && (Lvalue[2][1] == Lvalue[2][1]))
                          ^
/hpcwork/ff862203/termcomp25/benchmarks/QdZlI.c:413:131: warning: self-comparison always evaluates to true [-Wtautological-compare]
    if ((((((Lvalue[0][1] == Lvalue[0][1]) && (Lvalue[0][1] == Lvalue[1][1])) && (Lvalue[0][1] == Lvalue[2][1])) && (Lvalue[1][1] == Lvalue[1][1])) && (Lvalue[1][1] == Lvalue[2][1])) && (Lvalue[2][1] == Lvalue[2][1]))
                                                                                                                                  ^
/hpcwork/ff862203/termcomp25/benchmarks/QdZlI.c:413:201: warning: self-comparison always evaluates to true [-Wtautological-compare]
    if ((((((Lvalue[0][1] == Lval
ue[0][1]) && (Lvalue[0][1] == Lvalue[1][1])) && (Lvalue[0][1] == Lvalue[2][1])) && (Lvalue[1][1] == Lvalue[1][1])) && (Lvalue[1][1] == Lvalue[2][1])) && (Lvalue[2][1] == Lvalue[2][1]))
                                                                                                                                                                                                        ^
