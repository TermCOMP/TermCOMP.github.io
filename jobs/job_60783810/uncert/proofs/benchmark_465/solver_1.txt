YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/qC1Rs.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 192 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 24 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/qC1Rs.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/qC1Rs.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = load %3
		%9 = icmp eq %7 %8
		br %9, %10, %13
	10:
		%11 = load %2
		%12 = icmp sgt %11 0
		br %13
	13:
		%14 = phi [0, %6], [%12, %10]
		br %14, %15, %25
	15:
		br %16
	16:
		%17 = load %3
		%18 = icmp sgt %17 0
		br %18, %19, %24
	19:
		%20 = load %2
		%21 = sub i32 %20, 1
		store %21, %2
		%22 = load %3
		%23 = sub i32 %22, 1
		store %23, %3
		br %16
	24:
		br %6
	25:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_186(v34, v35, v36, v37, 1, v40, v39, v41, v42, v43, 0, 3, 4) -> f_187(v34, v35, v36, v37, 1, v40, v39, v41, v42, v43, 0, 3, 2, 4) :|: 0 < v40 && 2 <= v39 && 2 <= v37
f_187(v34, v35, v36, v37, 1, v40, v39, v41, v42, v43, 0, 3, 2, 4) -> f_189(v34, v35, v36, v37, 1, v40, v39, v41, v42, v43, 0, 3, 2, 4) :|: 0 = 0
f_189(v34, v35, v36, v37, 1, v40, v39, v41, v42, v43, 0, 3, 2, 4) -> f_191(v34, v35, v36, v37, 1, v40, v39, v41, v42, v43, 0, 3, 2, 4) :|: TRUE
f_191(v34, v35, v36, v37, 1, v40, v39, v41, v42, v43, 0, 3, 2, 4) -> f_193(v34, v35, v36, v37, 1, v40, v39, v41, v42, v43, 0, 3, 2, 4) :|: 0 = 0
f_193(v34, v35, v36, v37, 1, v40, v39, v41, v42, v43, 0, 3, 2, 4) -> f_195(v34, v35, v36, v37, 1, v40, v45, v39, v41, v42, v43, 0, 3, 2, 4) :|: 1 + v45 = v40 && 0 <= v45
f_195(v34, v35, v36, v37, 1, v40, v45, v39, v41, v42, v43, 0, 3, 2, 4) -> f_197(v34, v35, v36, v37, 1, v40, v45, v39, v41, v42, v43, 0, 3, 2, 4) :|: TRUE
f_197(v34, v35, v36, v37, 1, v40, v45, v39, v41, v42, v43, 0, 3, 2, 4) -> f_199(v34, v35, v36, v37, 1, v40, v45, v41, v42, v43, 0, 3, 2, 4) :|: 0 = 0
f_199(v34, v35, v36, v37, 1, v40, v45, v41, v42, v43, 0, 3, 2, 4) -> f_201(v34, v35, v36, v37, 1, v40, v45, v41, v42, v43, 0, 3, 2, 4) :|: 1 + v45 = v40
f_201(v34, v35, v36, v37, 1, v40, v45, v41, v42, v43, 0, 3, 2, 4) -> f_203(v34, v35, v36, v37, 1, v40, v45, v41, v42, v43, 0, 3, 2, 4) :|: TRUE
f_203(v34, v35, v36, v37, 1, v40, v45, v41, v42, v43, 0, 3, 2, 4) -> f_205(v34, v35, v36, v37, 1, v40, v45, v41, v42, v43, 0, 3, 2, 4) :|: TRUE
f_205(v34, v35, v36, v37, 1, v40, v45, v41, v42, v43, 0, 3, 2, 4) -> f_185(v34, v35, v36, v37, 1, v40, v45, v41, v42, v43, 0, 3, 4) :|: TRUE
f_185(v34, v35, v36, v37, 1, v39, v40, v41, v42, v43, 0, 3, 4) -> f_186(v34, v35, v36, v37, 1, v40, v39, v41, v42, v43, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_186(v34:0, v35:0, v36:0, v37:0, 1, 1 + v45:0, v39:0, v41:0, v42:0, v43:0, 0, 3, 4) -> f_186(v34:0, v35:0, v36:0, v37:0, 1, v45:0, 1 + v45:0, v41:0, v42:0, v43:0, 0, 3, 4) :|: v39:0 > 1 && v45:0 > -1 && v37:0 > 1
Filtered unneeded arguments:
   f_186(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) -> f_186(x4, x6, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_186(v37:0, sum~cons_1~v45:0, v39:0) -> f_186(v37:0, v45:0, 1 + v45:0) :|: v45:0 > -1 && v37:0 > 1 && v39:0 > 1 && sum~cons_1~v45:0 = 1 + v45:0

----------------------------------------

(8)
Obligation:
Rules:
f_186(v37:0, sum~cons_1~v45:0, v39:0) -> f_186(v37:0, v45:0, 1 + v45:0) :|: v45:0 > -1 && v37:0 > 1 && v39:0 > 1 && sum~cons_1~v45:0 = 1 + v45:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_186(v37:0:0, sum~cons_1~v45:0:0, v39:0:0) -> f_186(v37:0:0, v45:0:0, 1 + v45:0:0) :|: v45:0:0 > -1 && v37:0:0 > 1 && v39:0:0 > 1 && sum~cons_1~v45:0:0 = 1 + v45:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_186(x, x1, x2)] = x1

The following rules are decreasing:
f_186(v37:0:0, sum~cons_1~v45:0:0, v39:0:0) -> f_186(v37:0:0, v45:0:0, 1 + v45:0:0) :|: v45:0:0 > -1 && v37:0:0 > 1 && v39:0:0 > 1 && sum~cons_1~v45:0:0 = 1 + v45:0:0
The following rules are bounded:
f_186(v37:0:0, sum~cons_1~v45:0:0, v39:0:0) -> f_186(v37:0:0, v45:0:0, 1 + v45:0:0) :|: v45:0:0 > -1 && v37:0:0 > 1 && v39:0:0 > 1 && sum~cons_1~v45:0:0 = 1 + v45:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
