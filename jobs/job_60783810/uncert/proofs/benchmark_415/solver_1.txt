YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Y9U9C.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 69 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 669 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 60 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) RankingReductionPairProof [EQUIVALENT, 8 ms]
        (17) YES
    (18) LLVM Symbolic Execution SCC
        (19) SCC2IRS [SOUND, 44 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Y9U9C.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Y9U9C.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		store 1, %3
		br %5
	5:
		%6 = load %3
		%7 = icmp sgt %6 0
		br %7, %8, %22
	8:
		%9 = load %2
		%10 = icmp sgt %9 100
		br %10, %11, %16
	11:
		%12 = load %2
		%13 = sub i32 %12, 10
		store %13, %2
		%14 = load %3
		%15 = sub i32 %14, 1
		store %15, %3
		br %21
	16:
		%17 = load %2
		%18 = add i32 %17, 11
		store %18, %2
		%19 = load %3
		%20 = add i32 %19, 1
		store %20, %3
		br %21
	21:
		br %5
	22:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 36 rulesP rules:
f_322(v302, v303, v304, v305, v306, 1, v308, v309, v310, v311, v312, v313, v314, v315, v316, v317, 0, 3, 11, 10, 100, 101, 111, 90, 2, 91, 4) -> f_323(v302, v303, v304, v305, v314, 1, v308, v309, v310, v311, v312, v313, v306, v315, v316, v317, 0, 3, 11, 10, 100, 101, 111, 90, 2, 91, 4) :|: 0 = 0
f_323(v302, v303, v304, v305, v314, 1, v308, v309, v310, v311, v312, v313, v306, v315, v316, v317, 0, 3, 11, 10, 100, 101, 111, 90, 2, 91, 4) -> f_324(v302, v303, v304, v305, v314, 1, v308, v309, v310, v311, v312, v313, v306, v315, v316, v317, 0, 3, 11, 10, 100, 2, 101, 111, 90, 91, 4) :|: 0 < v314 && 2 <= v306
f_324(v302, v303, v304, v305, v314, 1, v308, v309, v310, v311, v312, v313, v306, v315, v316, v317, 0, 3, 11, 10, 100, 2, 101, 111, 90, 91, 4) -> f_326(v302, v303, v304, v305, v314, 1, v308, v309, v310, v311, v312, v313, v306, v315, v316, v317, 0, 3, 11, 10, 100, 2, 101, 111, 90, 91, 4) :|: 0 = 0
f_326(v302, v303, v304, v305, v314, 1, v308, v309, v310, v311, v312, v313, v306, v315, v316, v317, 0, 3, 11, 10, 100, 2, 101, 111, 90, 91, 4) -> f_328(v302, v303, v304, v305, v314, 1, v308, v309, v310, v311, v312, v313, v306, v315, v316, v317, 0, 3, 11, 10, 100, 2, 101, 111, 90, 91, 4) :|: TRUE
f_328(v302, v303, v304, v305, v314, 1, v308, v309, v310, v311, v312, v313, v306, v315, v316, v317, 0, 3, 11, 10, 100, 2, 101, 111, 90, 91, 4) -> f_330(v302, v303, v304, v305, v314, 1, v313, v309, v310, v311, v312, v308, v306, v315, v316, v317, 0, 3, 11, 10, 100, 2, 101, 111, 90, 91, 4) :|: 0 = 0
f_330(v302, v303, v304, v305, v314, 1, v313, v309, v310, v311, v312, v308, v306, v315, v316, v317, 0, 3, 11, 10, 100, 2, 101, 111, 90, 91, 4) -> f_331(v302, v303, v304, v305, v314, 1, 101, v309, v310, v311, v312, 111, v306, v315, v316, v317, 0, 3, 11, 100, 2, 90, 4) :|: 100 < v313 && v308 = 111 && v313 = 101 && 0 = 0
f_330(v302, v303, v304, v305, v314, 1, v313, v309, v310, v311, v312, v308, v306, v315, v316, v317, 0, 3, 11, 10, 100, 2, 101, 111, 90, 91, 4) -> f_332(v302, v303, v304, v305, v314, 1, v313, v309, v310, v311, v312, v308, v306, v315, v316, v317, 0, 3, 11, 10, 100, 2, 101, 110, 90, 111, 91, 4) :|: v313 <= 100 && v308 <= 110
f_331(v302, v303, v304, v305, v314, 1, 101, v309, v310, v311, v312, 111, v306, v315, v316, v317, 0, 3, 11, 100, 2, 90, 4) -> f_333(v302, v303, v304, v305, v314, 1, 101, v309, v310, v311, v312, 111, v306, v315, v316, v317, 0, 3, 11, 100, 2, 90, 4) :|: 0 = 0
f_333(v302, v303, v304, v305, v314, 1, 101, v309, v310, v311, v312, 111, v306, v315, v316, v317, 0, 3, 11, 100, 2, 90, 4) -> f_335(v302, v303, v304, v305, v314, 1, 101, v309, v310, v311, v312, 111, v306, v315, v316, v317, 0, 3, 11, 100, 2, 90, 4) :|: TRUE
f_335(v302, v303, v304, v305, v314, 1, 101, v309, v310, v311, v312, 111, v306, v315, v316, v317, 0, 3, 11, 100, 2, 90, 4) -> f_358(v302, v303, v304, v305, v314, 1, 101, v309, v310, v311, v312, 111, 101, v306, v314, v315, v316, v317, 0, 3, 11, 10, 100, 101, 111, 90, 2, 91, 4) :|: TRUE
f_358(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v447, v448, v449, v450, v451, v452, v453, 0, 3, 11, 10, 100, 101, 111, 90, 2, 91, 4) -> f_359(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v448, v449, v450, v451, v452, v453, 0, 3, 11, 100, 101, 111, 90, 2, 91, 4) :|: 0 = 0
f_359(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v448, v449, v450, v451, v452, v453, 0, 3, 11, 100, 101, 111, 90, 2, 91, 4) -> f_360(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v455, v449, v450, v451, v452, v453, 0, 3, 11, 10, 100, 101, 111, 90, 2, 4, 91) :|: 10 + v455 = v442 && 91 <= v455 && v455 <= 101
f_360(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v455, v449, v450, v451, v452, v453, 0, 3, 11, 10, 100, 101, 111, 90, 2, 4, 91) -> f_361(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v455, v449, v450, v451, v452, v453, 0, 3, 11, 10, 100, 101, 111, 90, 2, 4, 91) :|: TRUE
f_361(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v455, v449, v450, v451, v452, v453, 0, 3, 11, 10, 100, 101, 111, 90, 2, 4, 91) -> f_362(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v455, v450, v451, v452, v453, 0, 3, 11, 10, 100, 101, 111, 90, 2, 4, 91) :|: 0 = 0
f_362(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v455, v450, v451, v452, v453, 0, 3, 11, 10, 100, 101, 111, 90, 2, 4, 91) -> f_363(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v455, v457, v451, v452, v453, 0, 3, 11, 10, 100, 101, 111, 90, 2, 4, 91) :|: 1 + v457 = v440 && 0 <= v457
f_363(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v455, v457, v451, v452, v453, 0, 3, 11, 10, 100, 101, 111, 90, 2, 4, 91) -> f_364(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v455, v457, v451, v452, v453, 0, 3, 11, 10, 100, 101, 111, 90, 2, 4, 91) :|: TRUE
f_364(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v455, v457, v451, v452, v453, 0, 3, 11, 10, 100, 101, 111, 90, 2, 4, 91) -> f_365(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v455, v457, v451, v452, v453, 0, 3, 11, 10, 100, 101, 111, 90, 2, 4, 91) :|: TRUE
f_365(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v455, v457, v451, v452, v453, 0, 3, 11, 10, 100, 101, 111, 90, 2, 4, 91) -> f_321(v436, v437, v438, v439, v440, 1, v442, v443, v444, v445, v446, v455, v457, v451, v452, v453, 0, 3, 11, 10, 100, 101, 111, 90, 2, 91, 4) :|: TRUE
f_321(v302, v303, v304, v305, v306, 1, v308, v309, v310, v311, v312, v313, v314, v315, v316, v317, 0, 3, 11, 10, 100, 101, 111, 90, 2, 91, 4) -> f_322(v302, v303, v304, v305, v306, 1, v308, v309, v310, v311, v312, v313, v314, v315, v316, v317, 0, 3, 11, 10, 100, 101, 111, 90, 2, 91, 4) :|: TRUE
f_332(v302, v303, v304, v305, v314, 1, v313, v309, v310, v311, v312, v308, v306, v315, v316, v317, 0, 3, 11, 10, 100, 2, 101, 110, 90, 111, 91, 4) -> f_334(v302, v303, v304, v305, v314, 1, v313, 0, v309, v310, v311, v312, v308, v306, v315, v316, v317, 3, 11, 10, 100, 2, 101, 110, 90, 111, 91, 4) :|: 0 = 0
f_334(v302, v303, v304, v305, v314, 1, v313, 0, v309, v310, v311, v312, v308, v306, v315, v316, v317, 3, 11, 10, 100, 2, 101, 110, 90, 111, 91, 4) -> f_336(v302, v303, v304, v305, v314, 1, v313, 0, v309, v310, v311, v312, v308, v306, v315, v316, v317, 3, 11, 10, 100, 2, 101, 110, 90, 111, 91, 4) :|: TRUE
f_336(v302, v303, v304, v305, v314, 1, v313, 0, v309, v310, v311, v312, v308, v306, v315, v316, v317, 3, 11, 10, 100, 2, 101, 110, 90, 111, 91, 4) -> f_338(v302, v303, v304, v305, v314, 1, v313, 0, v310, v311, v312, v308, v306, v315, v316, v317, 3, 10, 100, 2, 101, 110, 111, 91, 4) :|: 0 = 0
f_338(v302, v303, v304, v305, v314, 1, v313, 0, v310, v311, v312, v308, v306, v315, v316, v317, 3, 10, 100, 2, 101, 110, 111, 91, 4) -> f_340(v302, v303, v304, v305, v314, 1, v313, 0, v340, v311, v312, v308, v306, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) :|: v340 = 11 + v313 && 102 <= v340 && v340 <= 111
f_340(v302, v303, v304, v305, v314, 1, v313, 0, v340, v311, v312, v308, v306, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) -> f_342(v302, v303, v304, v305, v314, 1, v313, 0, v340, v311, v312, v308, v306, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) :|: TRUE
f_342(v302, v303, v304, v305, v314, 1, v313, 0, v340, v311, v312, v308, v306, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) -> f_344(v302, v303, v304, v305, v314, 1, v313, 0, v340, v312, v308, v306, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) :|: 0 = 0
f_344(v302, v303, v304, v305, v314, 1, v313, 0, v340, v312, v308, v306, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) -> f_346(v302, v303, v304, v305, v314, 1, v313, 0, v340, v306, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) :|: v306 = 1 + v314
f_346(v302, v303, v304, v305, v314, 1, v313, 0, v340, v306, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) -> f_348(v302, v303, v304, v305, v314, 1, v313, 0, v340, v306, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) :|: TRUE
f_348(v302, v303, v304, v305, v314, 1, v313, 0, v340, v306, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) -> f_350(v302, v303, v304, v305, v314, 1, v313, 0, v340, v306, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) :|: TRUE
f_350(v302, v303, v304, v305, v314, 1, v313, 0, v340, v306, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) -> f_351(v302, v303, v304, v305, v314, 1, v313, 0, v340, v306, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) :|: TRUE
f_351(v302, v303, v304, v305, v314, 1, v313, 0, v340, v306, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) -> f_352(v302, v303, v304, v305, v306, 1, v313, 0, v340, v314, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) :|: 0 = 0
f_352(v302, v303, v304, v305, v306, 1, v313, 0, v340, v314, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) -> f_353(v302, v303, v304, v305, v306, 1, v313, 0, v340, v314, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) :|: 0 = 0
f_353(v302, v303, v304, v305, v306, 1, v313, 0, v340, v314, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) -> f_354(v302, v303, v304, v305, v306, 1, v313, 0, v340, v314, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) :|: TRUE
f_354(v302, v303, v304, v305, v306, 1, v313, 0, v340, v314, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) -> f_355(v302, v303, v304, v305, v306, 1, v340, 0, v313, v314, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) :|: 0 = 0
f_355(v302, v303, v304, v305, v306, 1, v340, 0, v313, v314, v308, v315, v316, v317, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) -> f_356(v302, v303, v304, v305, v306, 1, v340, v313, v314, v308, v315, v316, v317, 0, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) :|: 0 = 0
f_356(v302, v303, v304, v305, v306, 1, v340, v313, v314, v308, v315, v316, v317, 0, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) -> f_357(v302, v303, v304, v305, v306, 1, v340, v313, v314, v308, v315, v316, v317, 0, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) :|: TRUE
f_357(v302, v303, v304, v305, v306, 1, v340, v313, v314, v308, v315, v316, v317, 0, 3, 10, 11, 100, 2, 101, 110, 91, 4, 102, 111) -> f_358(v302, v303, v304, v305, v306, 1, v340, v313, v340, v314, v306, v308, v313, v306, v314, v315, v316, v317, 0, 3, 11, 10, 100, 101, 111, 90, 2, 91, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_322(v302:0, v303:0, v304:0, v305:0, v306:0, 1, 111, v309:0, v310:0, v311:0, v312:0, 101, 1 + v457:0, v315:0, v316:0, v317:0, 0, 3, 11, 10, 100, 101, 111, 90, 2, 91, 4) -> f_322(v302:0, v303:0, v304:0, v305:0, 1 + v457:0, 1, 101, v309:0, v310:0, v311:0, v312:0, 91, v457:0, v315:0, v316:0, v317:0, 0, 3, 11, 10, 100, 101, 111, 90, 2, 91, 4) :|: v306:0 > 1 && v457:0 > -1
f_322(v302:0, v303:0, v304:0, v305:0, 1 + v457:0, 1, v308:0, v309:0, v310:0, v311:0, v312:0, v313:0, v314:0, v315:0, v316:0, v317:0, 0, 3, 11, 10, 100, 101, 111, 90, 2, 91, 4) -> f_322(v302:0, v303:0, v304:0, v305:0, 1 + v457:0, 1, 10 + v455:0, v313:0, 10 + v455:0, v314:0, 1 + v457:0, v455:0, v457:0, v315:0, v316:0, v317:0, 0, 3, 11, 10, 100, 101, 111, 90, 2, 91, 4) :|: v457:0 > 0 && v455:0 > 91 && v314:0 > 0 && v308:0 < 111 && v313:0 < 101 && 11 + v313:0 = 10 + v455:0 && v455:0 < 102 && 1 + v457:0 = 1 + v314:0
Filtered unneeded arguments:
   f_322(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_322(x5, x7, x12, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_322(v306:0, cons_111, cons_101, sum~cons_1~v457:0) -> f_322(1 + v457:0, 101, 91, v457:0) :|: v306:0 > 1 && v457:0 > -1 && cons_111 = 111 && cons_101 = 101 && sum~cons_1~v457:0 = 1 + v457:0
f_322(sum~cons_1~v457:0, v308:0, v313:0, v314:0) -> f_322(1 + v457:0, 10 + v455:0, v455:0, v457:0) :|: v455:0 > 91 && v457:0 > 0 && v314:0 > 0 && v308:0 < 111 && v313:0 < 101 && 11 + v313:0 = 10 + v455:0 && 1 + v457:0 = 1 + v314:0 && v455:0 < 102 && sum~cons_1~v457:0 = 1 + v457:0

----------------------------------------

(9)
Obligation:
Rules:
f_322(v306:0, cons_111, cons_101, sum~cons_1~v457:0) -> f_322(1 + v457:0, 101, 91, v457:0) :|: v306:0 > 1 && v457:0 > -1 && cons_111 = 111 && cons_101 = 101 && sum~cons_1~v457:0 = 1 + v457:0
f_322(x, x1, x2, x3) -> f_322(1 + x4, 10 + x5, x5, x4) :|: x5 > 91 && x4 > 0 && x3 > 0 && x1 < 111 && x2 < 101 && 11 + x2 = 10 + x5 && 1 + x4 = 1 + x3 && x5 < 102 && x = 1 + x4

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_322(v306:0:0, cons_111, cons_101, sum~cons_1~v457:0:0) -> f_322(1 + v457:0:0, 101, 91, v457:0:0) :|: v306:0:0 > 1 && v457:0:0 > -1 && cons_111 = 111 && cons_101 = 101 && sum~cons_1~v457:0:0 = 1 + v457:0:0
f_322(sum~cons_1~x4:0, x1:0, x2:0, x3:0) -> f_322(1 + x4:0, 10 + x5:0, x5:0, x4:0) :|: 1 + x4:0 = 1 + x3:0 && x5:0 < 102 && 11 + x2:0 = 10 + x5:0 && x2:0 < 101 && x1:0 < 111 && x3:0 > 0 && x4:0 > 0 && x5:0 > 91 && sum~cons_1~x4:0 = 1 + x4:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_322(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_322(v306:0:0, cons_111, cons_101, sum~cons_1~v457:0:0) -> f_322(1 + v457:0:0, 101, 91, v457:0:0) :|: v306:0:0 > 1 && v457:0:0 > -1 && cons_111 = 111 && cons_101 = 101 && sum~cons_1~v457:0:0 = 1 + v457:0:0
The following rules are bounded:
f_322(v306:0:0, cons_111, cons_101, sum~cons_1~v457:0:0) -> f_322(1 + v457:0:0, 101, 91, v457:0:0) :|: v306:0:0 > 1 && v457:0:0 > -1 && cons_111 = 111 && cons_101 = 101 && sum~cons_1~v457:0:0 = 1 + v457:0:0
f_322(sum~cons_1~x4:0, x1:0, x2:0, x3:0) -> f_322(1 + x4:0, 10 + x5:0, x5:0, x4:0) :|: 1 + x4:0 = 1 + x3:0 && x5:0 < 102 && 11 + x2:0 = 10 + x5:0 && x2:0 < 101 && x1:0 < 111 && x3:0 > 0 && x4:0 > 0 && x5:0 > 91 && sum~cons_1~x4:0 = 1 + x4:0

----------------------------------------

(13)
Obligation:
Rules:
f_322(sum~cons_1~x4:0, x1:0, x2:0, x3:0) -> f_322(1 + x4:0, 10 + x5:0, x5:0, x4:0) :|: 1 + x4:0 = 1 + x3:0 && x5:0 < 102 && 11 + x2:0 = 10 + x5:0 && x2:0 < 101 && x1:0 < 111 && x3:0 > 0 && x4:0 > 0 && x5:0 > 91 && sum~cons_1~x4:0 = 1 + x4:0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_322(sum~cons_1~x4:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_322(1 + x4:0:0, 10 + x5:0:0, x5:0:0, x4:0:0) :|: x4:0:0 > 0 && x5:0:0 > 91 && x3:0:0 > 0 && x1:0:0 < 111 && x2:0:0 < 101 && 11 + x2:0:0 = 10 + x5:0:0 && x5:0:0 < 102 && 1 + x4:0:0 = 1 + x3:0:0 && sum~cons_1~x4:0:0 = 1 + x4:0:0

----------------------------------------

(16) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_322 ] = -1*f_322_3

The following rules are decreasing:
f_322(sum~cons_1~x4:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_322(1 + x4:0:0, 10 + x5:0:0, x5:0:0, x4:0:0) :|: x4:0:0 > 0 && x5:0:0 > 91 && x3:0:0 > 0 && x1:0:0 < 111 && x2:0:0 < 101 && 11 + x2:0:0 = 10 + x5:0:0 && x5:0:0 < 102 && 1 + x4:0:0 = 1 + x3:0:0 && sum~cons_1~x4:0:0 = 1 + x4:0:0

The following rules are bounded:
f_322(sum~cons_1~x4:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_322(1 + x4:0:0, 10 + x5:0:0, x5:0:0, x4:0:0) :|: x4:0:0 > 0 && x5:0:0 > 91 && x3:0:0 > 0 && x1:0:0 < 111 && x2:0:0 < 101 && 11 + x2:0:0 = 10 + x5:0:0 && x5:0:0 < 102 && 1 + x4:0:0 = 1 + x3:0:0 && sum~cons_1~x4:0:0 = 1 + x4:0:0


----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
SCC
----------------------------------------

(19) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_243(v138, v139, v140, v141, v142, 1, v144, 0, v146, v147, v148, v149, v150, 3, 11, 100, 111, 2, 4) -> f_244(v138, v139, v140, v141, v147, 1, v144, 0, v146, v142, v148, v149, v150, 3, 11, 100, 111, 2, 4) :|: 0 = 0
f_244(v138, v139, v140, v141, v147, 1, v144, 0, v146, v142, v148, v149, v150, 3, 11, 100, 111, 2, 4) -> f_245(v138, v139, v140, v141, v147, 1, v144, 0, v146, v142, v148, v149, v150, 3, 11, 100, 111, 2, 4) :|: 0 = 0
f_245(v138, v139, v140, v141, v147, 1, v144, 0, v146, v142, v148, v149, v150, 3, 11, 100, 111, 2, 4) -> f_246(v138, v139, v140, v141, v147, 1, v144, 0, v146, v142, v148, v149, v150, 3, 11, 100, 111, 2, 4) :|: TRUE
f_246(v138, v139, v140, v141, v147, 1, v144, 0, v146, v142, v148, v149, v150, 3, 11, 100, 111, 2, 4) -> f_247(v138, v139, v140, v141, v147, 1, v146, 0, v144, v142, v148, v149, v150, 3, 11, 100, 111, 2, 4) :|: 0 = 0
f_247(v138, v139, v140, v141, v147, 1, v146, 0, v144, v142, v148, v149, v150, 3, 11, 100, 111, 2, 4) -> f_249(v138, v139, v140, v141, v147, 1, v146, 0, v144, v142, v148, v149, v150, 3, 11, 100, 89, 2, 4) :|: v146 <= 100 && v144 <= 89
f_249(v138, v139, v140, v141, v147, 1, v146, 0, v144, v142, v148, v149, v150, 3, 11, 100, 89, 2, 4) -> f_251(v138, v139, v140, v141, v147, 1, v146, 0, v144, v142, v148, v149, v150, 3, 11, 100, 89, 2, 4) :|: 0 = 0
f_251(v138, v139, v140, v141, v147, 1, v146, 0, v144, v142, v148, v149, v150, 3, 11, 100, 89, 2, 4) -> f_253(v138, v139, v140, v141, v147, 1, v146, 0, v144, v142, v148, v149, v150, 3, 11, 100, 89, 2, 4) :|: TRUE
f_253(v138, v139, v140, v141, v147, 1, v146, 0, v144, v142, v148, v149, v150, 3, 11, 100, 89, 2, 4) -> f_255(v138, v139, v140, v141, v147, 1, v146, 0, v142, v148, v149, v150, 3, 100, 2, 4) :|: 0 = 0
f_255(v138, v139, v140, v141, v147, 1, v146, 0, v142, v148, v149, v150, 3, 100, 2, 4) -> f_257(v138, v139, v140, v141, v147, 1, v146, 0, v162, v142, v148, v149, v150, 3, 11, 100, 2, 4, 111) :|: v162 = 11 + v146 && v162 <= 111
f_257(v138, v139, v140, v141, v147, 1, v146, 0, v162, v142, v148, v149, v150, 3, 11, 100, 2, 4, 111) -> f_259(v138, v139, v140, v141, v147, 1, v146, 0, v162, v142, v148, v149, v150, 3, 11, 100, 2, 4, 111) :|: TRUE
f_259(v138, v139, v140, v141, v147, 1, v146, 0, v162, v142, v148, v149, v150, 3, 11, 100, 2, 4, 111) -> f_261(v138, v139, v140, v141, v147, 1, v146, 0, v162, v148, v149, v150, 3, 11, 100, 2, 4, 111) :|: 0 = 0
f_261(v138, v139, v140, v141, v147, 1, v146, 0, v162, v148, v149, v150, 3, 11, 100, 2, 4, 111) -> f_263(v138, v139, v140, v141, v147, 1, v146, 0, v162, v165, v148, v149, v150, 3, 11, 100, 2, 4, 111) :|: v165 = 1 + v147 && 3 <= v165
f_263(v138, v139, v140, v141, v147, 1, v146, 0, v162, v165, v148, v149, v150, 3, 11, 100, 2, 4, 111) -> f_265(v138, v139, v140, v141, v147, 1, v146, 0, v162, v165, v148, v149, v150, 3, 11, 100, 2, 4, 111) :|: TRUE
f_265(v138, v139, v140, v141, v147, 1, v146, 0, v162, v165, v148, v149, v150, 3, 11, 100, 2, 4, 111) -> f_267(v138, v139, v140, v141, v147, 1, v146, 0, v162, v165, v148, v149, v150, 3, 11, 100, 2, 4, 111) :|: TRUE
f_267(v138, v139, v140, v141, v147, 1, v146, 0, v162, v165, v148, v149, v150, 3, 11, 100, 2, 4, 111) -> f_242(v138, v139, v140, v141, v147, 1, v146, 0, v162, v165, v148, v149, v150, 3, 11, 100, 111, 2, 4) :|: TRUE
f_242(v138, v139, v140, v141, v142, 1, v144, 0, v146, v147, v148, v149, v150, 3, 11, 100, 111, 2, 4) -> f_243(v138, v139, v140, v141, v142, 1, v144, 0, v146, v147, v148, v149, v150, 3, 11, 100, 111, 2, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_243(v138:0, v139:0, v140:0, v141:0, v142:0, 1, v144:0, 0, v146:0, v147:0, v148:0, v149:0, v150:0, 3, 11, 100, 111, 2, 4) -> f_243(v138:0, v139:0, v140:0, v141:0, v147:0, 1, v146:0, 0, 11 + v146:0, 1 + v147:0, v148:0, v149:0, v150:0, 3, 11, 100, 111, 2, 4) :|: v144:0 < 90 && v146:0 < 101 && v147:0 > 1
Filtered unneeded arguments:
   f_243(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_243(x7, x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_243(v144:0, v146:0, v147:0) -> f_243(v146:0, 11 + v146:0, 1 + v147:0) :|: v146:0 < 101 && v147:0 > 1 && v144:0 < 90

----------------------------------------

(20)
Obligation:
Rules:
f_243(v144:0, v146:0, v147:0) -> f_243(v146:0, 11 + v146:0, 1 + v147:0) :|: v146:0 < 101 && v147:0 > 1 && v144:0 < 90

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_243(v144:0:0, v146:0:0, v147:0:0) -> f_243(v146:0:0, 11 + v146:0:0, 1 + v147:0:0) :|: v146:0:0 < 101 && v147:0:0 > 1 && v144:0:0 < 90

----------------------------------------

(23) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_243(x, x1, x2)] = 80 - x1 + 10*x2

The following rules are decreasing:
f_243(v144:0:0, v146:0:0, v147:0:0) -> f_243(v146:0:0, 11 + v146:0:0, 1 + v147:0:0) :|: v146:0:0 < 101 && v147:0:0 > 1 && v144:0:0 < 90
The following rules are bounded:
f_243(v144:0:0, v146:0:0, v147:0:0) -> f_243(v146:0:0, 11 + v146:0:0, 1 + v147:0:0) :|: v146:0:0 < 101 && v147:0:0 > 1 && v144:0:0 < 90

----------------------------------------

(24)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
