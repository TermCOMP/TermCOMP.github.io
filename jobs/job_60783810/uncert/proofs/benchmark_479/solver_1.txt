YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/i4WOD.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 591 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 52 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/i4WOD.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/i4WOD.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		br %9
	9:
		%10 = load %2
		%11 = icmp sle %10 100
		br %11, %12, %16
	12:
		%13 = load %3
		%14 = load %4
		%15 = icmp sle %13 %14
		br %16
	16:
		%17 = phi [0, %9], [%15, %12]
		br %17, %18, %24
	18:
		%19 = load %3
		store %19, %2
		%20 = load %2
		%21 = add i32 %20, 1
		store %21, %3
		%22 = load %4
		%23 = sub i32 %22, 1
		store %23, %4
		br %9
	24:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_213(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v288, v289, v290, v291, v292, v293, v294, v295, 0, 3, 100, 4) -> f_214(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v288, v289, v290, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) :|: v287 <= 100 && v289 <= 101 && v283 <= 100
f_214(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v288, v289, v290, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) -> f_216(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v288, v289, v290, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) :|: 0 = 0
f_216(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v288, v289, v290, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) -> f_218(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v288, v289, v290, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) :|: TRUE
f_218(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v288, v289, v290, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) -> f_220(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v288, v290, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) :|: 0 = 0
f_220(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v288, v290, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) -> f_222(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) :|: 0 = 0
f_222(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) -> f_223(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) :|: v289 <= v290
f_223(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) -> f_225(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) :|: 0 = 0
f_225(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) -> f_227(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) :|: 0 = 0
f_227(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) -> f_229(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) :|: TRUE
f_229(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) -> f_231(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) :|: 0 = 0
f_231(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) -> f_232(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) :|: TRUE
f_232(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) -> f_233(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) :|: 0 = 0
f_233(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4) -> f_234(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v400, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4, 102) :|: v400 = 1 + v289 && v400 <= 102
f_234(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v400, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4, 102) -> f_235(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v400, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4, 102) :|: TRUE
f_235(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v400, v288, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4, 102) -> f_236(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v400, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4, 102) :|: 0 = 0
f_236(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v400, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4, 102) -> f_237(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v400, v402, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4, 102) :|: 1 + v402 = v290
f_237(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v400, v402, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4, 102) -> f_238(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v400, v402, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4, 102) :|: TRUE
f_238(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v400, v402, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4, 102) -> f_239(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v400, v402, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4, 102) :|: TRUE
f_239(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v400, v402, v291, v292, v293, v294, v295, 0, 3, 100, 101, 4, 102) -> f_212(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v289, v290, v400, v402, v291, v292, v293, v294, v295, 0, 3, 100, 4) :|: TRUE
f_212(v277, v278, v279, v280, v281, v282, v283, v284, v285, 1, v287, v288, v289, v290, v291, v292, v293, v294, v295, 0, 3, 100, 4) -> f_213(v277, v278, v279, v280, v281, v282, v283, v284, v287, 1, v288, v289, v290, v291, v292, v293, v294, v295, 0, 3, 100, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_213(v277:0, v278:0, v279:0, v280:0, v281:0, v282:0, v283:0, v284:0, v287:0, 1, v288:0, v289:0, 1 + v402:0, v291:0, v292:0, v293:0, v294:0, v295:0, 0, 3, 100, 4) -> f_213(v277:0, v278:0, v279:0, v280:0, v281:0, v282:0, v283:0, v284:0, v289:0, 1, 1 + v402:0, 1 + v289:0, v402:0, v291:0, v292:0, v293:0, v294:0, v295:0, 0, 3, 100, 4) :|: v289:0 < 102 && v287:0 < 101 && v283:0 < 101 && v289:0 <= 1 + v402:0
Filtered unneeded arguments:
   f_213(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_213(x7, x9, x12, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_213(v283:0, v287:0, v289:0, sum~cons_1~v402:0) -> f_213(v283:0, v289:0, 1 + v289:0, v402:0) :|: v287:0 < 101 && v289:0 < 102 && v289:0 <= 1 + v402:0 && v283:0 < 101 && sum~cons_1~v402:0 = 1 + v402:0

----------------------------------------

(8)
Obligation:
Rules:
f_213(v283:0, v287:0, v289:0, sum~cons_1~v402:0) -> f_213(v283:0, v289:0, 1 + v289:0, v402:0) :|: v287:0 < 101 && v289:0 < 102 && v289:0 <= 1 + v402:0 && v283:0 < 101 && sum~cons_1~v402:0 = 1 + v402:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_213(v283:0:0, v287:0:0, v289:0:0, sum~cons_1~v402:0:0) -> f_213(v283:0:0, v289:0:0, 1 + v289:0:0, v402:0:0) :|: v289:0:0 <= 1 + v402:0:0 && v283:0:0 < 101 && v289:0:0 < 102 && v287:0:0 < 101 && sum~cons_1~v402:0:0 = 1 + v402:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_213(x, x1, x2, x3)] = 101 - x2

The following rules are decreasing:
f_213(v283:0:0, v287:0:0, v289:0:0, sum~cons_1~v402:0:0) -> f_213(v283:0:0, v289:0:0, 1 + v289:0:0, v402:0:0) :|: v289:0:0 <= 1 + v402:0:0 && v283:0:0 < 101 && v289:0:0 < 102 && v287:0:0 < 101 && sum~cons_1~v402:0:0 = 1 + v402:0:0
The following rules are bounded:
f_213(v283:0:0, v287:0:0, v289:0:0, sum~cons_1~v402:0:0) -> f_213(v283:0:0, v289:0:0, 1 + v289:0:0, v402:0:0) :|: v289:0:0 <= 1 + v402:0:0 && v283:0:0 < 101 && v289:0:0 < 102 && v287:0:0 < 101 && sum~cons_1~v402:0:0 = 1 + v402:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
