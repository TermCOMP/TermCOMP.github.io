YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/P2cxu.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 71 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 275 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 18 ms]
        (9) IntTRS
        (10) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (11) YES
    (12) LLVM Symbolic Execution SCC
        (13) SCC2IRS [SOUND, 19 ms]
        (14) IntTRS
        (15) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (16) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/P2cxu.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/P2cxu.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = load %3
		%9 = icmp ne %7 %8
		br %9, %10, %21
	10:
		%11 = load %2
		%12 = load %3
		%13 = icmp sgt %11 %12
		br %13, %14, %17
	14:
		%15 = load %3
		%16 = add i32 %15, 1
		store %16, %3
		br %20
	17:
		%18 = load %2
		%19 = add i32 %18, 1
		store %19, %2
		br %20
	20:
		br %6
	21:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_201(v124, v125, v126, v127, v128, v129, 1, v131, v132, v133, v134, 0, 3, 4) -> f_203(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) :|: 0 = 0
f_203(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) -> f_205(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) :|: v131 < v127
f_205(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) -> f_209(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) :|: 0 = 0
f_209(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) -> f_213(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) :|: TRUE
f_213(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) -> f_217(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) :|: 0 = 0
f_217(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) -> f_219(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) :|: 0 = 0
f_219(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) -> f_221(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) :|: 0 = 0
f_221(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) -> f_223(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) :|: TRUE
f_223(v124, v125, v126, v127, v128, v131, 1, v129, v132, v133, v134, 0, 3, 4) -> f_225(v124, v125, v126, v127, v128, v131, 1, v132, v133, v134, 0, 3, 4) :|: 0 = 0
f_225(v124, v125, v126, v127, v128, v131, 1, v132, v133, v134, 0, 3, 4) -> f_227(v124, v125, v126, v127, v128, v131, 1, v154, v132, v133, v134, 0, 3, 4) :|: v154 = 1 + v131
f_227(v124, v125, v126, v127, v128, v131, 1, v154, v132, v133, v134, 0, 3, 4) -> f_229(v124, v125, v126, v127, v128, v131, 1, v154, v132, v133, v134, 0, 3, 4) :|: TRUE
f_229(v124, v125, v126, v127, v128, v131, 1, v154, v132, v133, v134, 0, 3, 4) -> f_231(v124, v125, v126, v127, v128, v131, 1, v154, v132, v133, v134, 0, 3, 4) :|: TRUE
f_231(v124, v125, v126, v127, v128, v131, 1, v154, v132, v133, v134, 0, 3, 4) -> f_233(v124, v125, v126, v127, v128, v131, 1, v154, v132, v133, v134, 0, 3, 4) :|: TRUE
f_233(v124, v125, v126, v127, v128, v131, 1, v154, v132, v133, v134, 0, 3, 4) -> f_199(v124, v125, v126, v127, v128, v131, 1, v154, v132, v133, v134, 0, 3, 4) :|: TRUE
f_199(v124, v125, v126, v127, v128, v129, 1, v131, v132, v133, v134, 0, 3, 4) -> f_201(v124, v125, v126, v127, v128, v129, 1, v131, v132, v133, v134, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_201(v124:0, v125:0, v126:0, v127:0, v128:0, v129:0, 1, v131:0, v132:0, v133:0, v134:0, 0, 3, 4) -> f_201(v124:0, v125:0, v126:0, v127:0, v128:0, v131:0, 1, 1 + v131:0, v132:0, v133:0, v134:0, 0, 3, 4) :|: v131:0 < v127:0
Filtered unneeded arguments:
   f_201(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_201(x4, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_201(v127:0, v131:0) -> f_201(v127:0, 1 + v131:0) :|: v131:0 < v127:0

----------------------------------------

(9)
Obligation:
Rules:
f_201(v127:0, v131:0) -> f_201(v127:0, 1 + v131:0) :|: v131:0 < v127:0

----------------------------------------

(10) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_201(x, x1)] = x - x1

The following rules are decreasing:
f_201(v127:0, v131:0) -> f_201(v127:0, 1 + v131:0) :|: v131:0 < v127:0
The following rules are bounded:
f_201(v127:0, v131:0) -> f_201(v127:0, 1 + v131:0) :|: v131:0 < v127:0

----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
SCC
----------------------------------------

(13) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_200(v104, v105, v106, v107, v108, v109, 1, 0, v112, v113, v114, v115, 3, 4) -> f_202(v104, v105, v106, v107, v108, v112, 1, v109, 0, v113, v114, v115, 3, 4) :|: 0 = 0
f_202(v104, v105, v106, v107, v108, v112, 1, v109, 0, v113, v114, v115, 3, 4) -> f_204(v104, v105, v106, v107, v108, v112, 1, v109, 0, v113, v114, v115, 3, 4) :|: 0 = 0
f_204(v104, v105, v106, v107, v108, v112, 1, v109, 0, v113, v114, v115, 3, 4) -> f_207(v104, v105, v106, v107, v108, v112, 1, v109, 0, v113, v114, v115, 3, 4) :|: v112 < v108
f_207(v104, v105, v106, v107, v108, v112, 1, v109, 0, v113, v114, v115, 3, 4) -> f_211(v104, v105, v106, v107, v108, v112, 1, v109, 0, v113, v114, v115, 3, 4) :|: 0 = 0
f_211(v104, v105, v106, v107, v108, v112, 1, v109, 0, v113, v114, v115, 3, 4) -> f_215(v104, v105, v106, v107, v108, v112, 1, v109, 0, v113, v114, v115, 3, 4) :|: TRUE
f_215(v104, v105, v106, v107, v108, v112, 1, v109, 0, v113, v114, v115, 3, 4) -> f_218(v104, v105, v106, v107, v108, v112, 1, 0, v109, v113, v114, v115, 3, 4) :|: 0 = 0
f_218(v104, v105, v106, v107, v108, v112, 1, 0, v109, v113, v114, v115, 3, 4) -> f_220(v104, v105, v106, v107, v108, v112, 1, 0, v109, v113, v114, v115, 3, 4) :|: 0 = 0
f_220(v104, v105, v106, v107, v108, v112, 1, 0, v109, v113, v114, v115, 3, 4) -> f_222(v104, v105, v106, v107, v108, v112, 1, 0, v109, v113, v114, v115, 3, 4) :|: 0 = 0
f_222(v104, v105, v106, v107, v108, v112, 1, 0, v109, v113, v114, v115, 3, 4) -> f_224(v104, v105, v106, v107, v108, v112, 1, 0, v109, v113, v114, v115, 3, 4) :|: TRUE
f_224(v104, v105, v106, v107, v108, v112, 1, 0, v109, v113, v114, v115, 3, 4) -> f_226(v104, v105, v106, v107, v108, v112, 1, 0, v113, v114, v115, 3, 4) :|: 0 = 0
f_226(v104, v105, v106, v107, v108, v112, 1, 0, v113, v114, v115, 3, 4) -> f_228(v104, v105, v106, v107, v108, v112, 1, 0, v155, v113, v114, v115, 3, 4) :|: v155 = 1 + v112
f_228(v104, v105, v106, v107, v108, v112, 1, 0, v155, v113, v114, v115, 3, 4) -> f_230(v104, v105, v106, v107, v108, v112, 1, 0, v155, v113, v114, v115, 3, 4) :|: TRUE
f_230(v104, v105, v106, v107, v108, v112, 1, 0, v155, v113, v114, v115, 3, 4) -> f_232(v104, v105, v106, v107, v108, v112, 1, 0, v155, v113, v114, v115, 3, 4) :|: TRUE
f_232(v104, v105, v106, v107, v108, v112, 1, 0, v155, v113, v114, v115, 3, 4) -> f_197(v104, v105, v106, v107, v108, v112, 1, 0, v155, v113, v114, v115, 3, 4) :|: TRUE
f_197(v104, v105, v106, v107, v108, v109, 1, 0, v112, v113, v114, v115, 3, 4) -> f_200(v104, v105, v106, v107, v108, v109, 1, 0, v112, v113, v114, v115, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_200(v104:0, v105:0, v106:0, v107:0, v108:0, v109:0, 1, 0, v112:0, v113:0, v114:0, v115:0, 3, 4) -> f_200(v104:0, v105:0, v106:0, v107:0, v108:0, v112:0, 1, 0, 1 + v112:0, v113:0, v114:0, v115:0, 3, 4) :|: v112:0 < v108:0
Filtered unneeded arguments:
   f_200(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_200(x5, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_200(v108:0, v112:0) -> f_200(v108:0, 1 + v112:0) :|: v112:0 < v108:0

----------------------------------------

(14)
Obligation:
Rules:
f_200(v108:0, v112:0) -> f_200(v108:0, 1 + v112:0) :|: v112:0 < v108:0

----------------------------------------

(15) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_200(x, x1)] = x - x1

The following rules are decreasing:
f_200(v108:0, v112:0) -> f_200(v108:0, 1 + v112:0) :|: v112:0 < v108:0
The following rules are bounded:
f_200(v108:0, v112:0) -> f_200(v108:0, 1 + v112:0) :|: v112:0 < v108:0

----------------------------------------

(16)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
