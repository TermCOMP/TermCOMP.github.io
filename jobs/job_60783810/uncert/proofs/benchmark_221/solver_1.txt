YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/F6ikC.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 591 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 37 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/F6ikC.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/F6ikC.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "hanoi" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp eq %4 1
		br %5, %6, %7
	6:
		store 1, %2
		br %13
	7:
		%8 = load %3
		%9 = sub i32 %8, 1
		%10 = call i32 @hanoi(i32 %9)
		%11 = mul i32 2, %10
		%12 = add i32 %11, 1
		store %12, %2
		br %13
	13:
		%14 = load %2
		ret %14

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 27
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %10, %7
	7:
		%8 = load %2
		%9 = icmp sgt %8 31
		br %9, %10, %11
	10:
		store 0, %1
		br %19
	11:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%12 = load %2
		%13 = call i32 @hanoi(i32 %12)
		store %13, %3
		%14 = load %3
		%15 = icmp sge %14 0
		br %15, %16, %17
	16:
		store 0, %1
		br %19
	17:
		br %18
	18:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	19:
		%20 = load %1
		ret %20


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_228(v51, v60, v52, v53, v54, v55, v56, v57, v61, 0, v59, 3, 1, 31, 4) -> f_230(v51, v60, v62, v52, v53, v54, v55, v56, v57, v61, v63, 0, v59, 3, 1, 31, 4) :|: 1 <= v62 && v63 = 3 + v62 && 4 <= v63
f_230(v51, v60, v62, v52, v53, v54, v55, v56, v57, v61, v63, 0, v59, 3, 1, 31, 4) -> f_231(v51, v60, v62, v52, v53, v54, v55, v56, v57, v61, v63, 0, v59, 3, 1, 31, 4) :|: TRUE
f_231(v51, v60, v62, v52, v53, v54, v55, v56, v57, v61, v63, 0, v59, 3, 1, 31, 4) -> f_232(v51, v60, v62, v52, v53, v54, v55, v56, v57, v61, v63, 0, v59, 3, 1, 31, 4) :|: TRUE
f_232(v51, v60, v62, v52, v53, v54, v55, v56, v57, v61, v63, 0, v59, 3, 1, 31, 4) -> f_233(v51, v60, v62, v52, v53, v54, v55, v56, v57, v61, v63, 0, v59, 3, 1, 31, 4) :|: 0 = 0
f_233(v51, v60, v62, v52, v53, v54, v55, v56, v57, v61, v63, 0, v59, 3, 1, 31, 4) -> f_235(v51, v60, v62, v52, v53, v54, v55, v56, v57, v61, v63, 0, v59, 3, 2, 31, 1, 4) :|: v51 != 1 && 2 <= v51 && v51 <= 31 && 2 <= v59
f_235(v51, v60, v62, v52, v53, v54, v55, v56, v57, v61, v63, 0, v59, 3, 2, 31, 1, 4) -> f_237(v51, v60, v62, 0, v52, v53, v54, v55, v56, v57, v61, v63, v59, 3, 2, 31, 1, 4) :|: 0 = 0
f_237(v51, v60, v62, 0, v52, v53, v54, v55, v56, v57, v61, v63, v59, 3, 2, 31, 1, 4) -> f_239(v51, v60, v62, 0, v52, v53, v54, v55, v56, v57, v61, v63, v59, 3, 2, 31, 1, 4) :|: TRUE
f_239(v51, v60, v62, 0, v52, v53, v54, v55, v56, v57, v61, v63, v59, 3, 2, 31, 1, 4) -> f_241(v51, v60, v62, 0, v52, v53, v54, v55, v56, v57, v61, v63, v59, 3, 2, 31, 1, 4) :|: 0 = 0
f_241(v51, v60, v62, 0, v52, v53, v54, v55, v56, v57, v61, v63, v59, 3, 2, 31, 1, 4) -> f_243(v51, v60, v62, 0, v65, v52, v53, v54, v55, v56, v57, v61, v63, v59, 3, 1, 2, 31, 4, 30) :|: 1 + v65 = v51 && 1 <= v65 && v65 <= 30
f_243(v51, v60, v62, 0, v65, v52, v53, v54, v55, v56, v57, v61, v63, v59, 3, 1, 2, 31, 4, 30) -> f_245(v65, v52, v53, v54, v55, v56, v57, v60, v61, v62, v63, 0, v59, v51, 3, 1, 2, 31, 4, 30) :|: 0 = 0
f_245(v65, v52, v53, v54, v55, v56, v57, v60, v61, v62, v63, 0, v59, v51, 3, 1, 2, 31, 4, 30) -> f_247(v65, v52, v53, v54, v55, v56, v57, v60, v61, v62, v63, 0, v59, v51, 3, 1, 2, 31, 4, 30) :|: TRUE
f_247(v65, v52, v53, v54, v55, v56, v57, v60, v61, v62, v63, 0, v59, v51, 3, 1, 2, 31, 4, 30) -> f_226(v65, v52, v53, v54, v55, v56, v57, 0, v59, 3, 1, 31, 4) :|: TRUE
f_226(v51, v52, v53, v54, v55, v56, v57, 0, v59, 3, 1, 31, 4) -> f_228(v51, v60, v52, v53, v54, v55, v56, v57, v61, 0, v59, 3, 1, 31, 4) :|: 1 <= v60 && v61 = 3 + v60 && 4 <= v61
Combined rules. Obtained 1 rulesP rules:
f_228(1 + v65:0, v60:0, v52:0, v53:0, v54:0, v55:0, v56:0, v57:0, v61:0, 0, v59:0, 3, 1, 31, 4) -> f_228(v65:0, v60:1, v52:0, v53:0, v54:0, v55:0, v56:0, v57:0, 3 + v60:1, 0, v59:0, 3, 1, 31, 4) :|: v62:0 > 0 && v65:0 > 0 && v65:0 < 31 && v59:0 > 1 && v60:1 > 0
Filtered unneeded arguments:
   f_228(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_228(x1, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_228(sum~cons_1~v65:0, v59:0) -> f_228(v65:0, v59:0) :|: v65:0 < 31 && v59:0 > 1 && v65:0 > 0 && sum~cons_1~v65:0 = 1 + v65:0

----------------------------------------

(8)
Obligation:
Rules:
f_228(sum~cons_1~v65:0, v59:0) -> f_228(v65:0, v59:0) :|: v65:0 < 31 && v59:0 > 1 && v65:0 > 0 && sum~cons_1~v65:0 = 1 + v65:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_228(sum~cons_1~v65:0:0, v59:0:0) -> f_228(v65:0:0, v59:0:0) :|: v65:0:0 < 31 && v59:0:0 > 1 && v65:0:0 > 0 && sum~cons_1~v65:0:0 = 1 + v65:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_228(x, x1)] = x

The following rules are decreasing:
f_228(sum~cons_1~v65:0:0, v59:0:0) -> f_228(v65:0:0, v59:0:0) :|: v65:0:0 < 31 && v59:0:0 > 1 && v65:0:0 > 0 && sum~cons_1~v65:0:0 = 1 + v65:0:0
The following rules are bounded:
f_228(sum~cons_1~v65:0:0, v59:0:0) -> f_228(v65:0:0, v59:0:0) :|: v65:0:0 < 31 && v59:0:0 > 1 && v65:0:0 > 0 && sum~cons_1~v65:0:0 = 1 + v65:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
