YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/6YUn8.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1471 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 53 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 1 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 12 ms]
        (13) IntTRS
        (14) TerminationGraphProcessor [EQUIVALENT, 2 ms]
        (15) IntTRS
        (16) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (21) YES
    (22) LLVM Symbolic Execution SCC
        (23) SCC2IRS [SOUND, 50 ms]
        (24) IntTRS
        (25) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (26) IntTRS
        (27) RankingReductionPairProof [EQUIVALENT, 13 ms]
        (28) YES
    (29) LLVM Symbolic Execution SCC
        (30) SCC2IRS [SOUND, 33 ms]
        (31) IntTRS
        (32) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (33) IntTRS
        (34) RankingReductionPairProof [EQUIVALENT, 8 ms]
        (35) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/6YUn8.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/6YUn8.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = icmp sgt %9 0
		br %10, %11, %17
	11:
		%12 = load %3
		%13 = icmp sgt %12 0
		br %13, %14, %17
	14:
		%15 = load %4
		%16 = icmp sgt %15 0
		br %17
	17:
		%18 = phi [0, %11], [0, %8], [%16, %14]
		br %18, %19, %33
	19:
		%20 = call i32 @__VERIFIER_nondet_int()
		%21 = icmp ne %20 0
		br %21, %22, %26
	22:
		%23 = load %2
		%24 = sub i32 %23, 1
		store %24, %2
		%25 = call i32 @__VERIFIER_nondet_int()
		store %25, %4
		br %32
	26:
		%27 = call i32 @__VERIFIER_nondet_int()
		store %27, %2
		%28 = load %3
		%29 = sub i32 %28, 1
		store %29, %3
		%30 = load %4
		%31 = sub i32 %30, 1
		store %31, %4
		br %32
	32:
		br %8
	33:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 62 rulesP rules:
f_715(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6321, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6330, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_718(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_718(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_721(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 < v6330 && 2 <= v6321 && 2 <= v6326
f_721(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_725(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_725(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_729(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: TRUE
f_729(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_733(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_733(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_737(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_737(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_740(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: TRUE
f_740(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6321, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_743(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_743(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_745(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 < v6331
f_745(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_748(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_748(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_751(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_751(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_753(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: TRUE
f_753(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v6325, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_755(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: TRUE
f_755(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_756(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: v7147 != 0
f_755(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_757(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, 0, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 3, 2, 4) :|: v7147 = 0
f_756(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_758(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: 0 = 0
f_758(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_760(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: TRUE
f_760(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_761(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, v7147, v6321, v6330, v6331, v6326, v6327, v6328, v6329, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: TRUE
f_761(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7189, v7190, v7191, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) -> f_763(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7190, v7191, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) :|: 0 = 0
f_763(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7190, v7191, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) -> f_765(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7191, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) :|: 1 + v7216 = v7184 && 0 <= v7216
f_765(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7191, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) -> f_767(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7191, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) :|: TRUE
f_767(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7191, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) -> f_769(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7219, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) :|: TRUE
f_769(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7219, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) -> f_771(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7219, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) :|: TRUE
f_771(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7219, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) -> f_773(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7219, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) :|: TRUE
f_773(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7216, v7219, v7192, v7193, v7194, v7195, v7196, v7197, v7198, v7199, 0, 3, 2, 4) -> f_712(v7177, v7178, v7179, v7180, v7181, v7182, v7183, v7184, 1, v7186, v7187, v7188, v7192, v7193, v7194, v7195, v7216, v7219, v7196, v7197, v7198, v7199, 0, 3, 2, 4) :|: TRUE
f_712(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6321, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6330, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) -> f_715(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6321, 1, v6323, v6324, v6325, v6326, v6327, v6328, v6329, v6330, v6331, v6332, v6333, v6334, v6335, 0, 3, 2, 4) :|: TRUE
f_757(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, 0, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 3, 2, 4) -> f_759(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, 0, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 3, 2, 4) :|: 0 = 0
f_759(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, 0, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 3, 2, 4) -> f_762(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, 0, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 3, 2, 4) :|: TRUE
f_762(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, 0, v6326, v6327, v6328, v6329, v6321, v6332, v6333, v6334, v6335, 3, 2, 4) -> f_812(v6314, v6315, v6316, v6317, v6318, v6319, v6320, v6330, 1, v6323, v6331, 0, v6326, v6327, v6328, v6329, v6321, v6330, v6331, v6332, v6333, v6334, v6335, 3, 2, 4) :|: TRUE
f_812(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8378, v8379, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_813(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8379, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: TRUE
f_813(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8379, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_814(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8379, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: TRUE
f_814(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8379, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_815(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: 0 = 0
f_815(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_816(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: 1 + v8391 = v8375 && 0 <= v8391
f_816(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_817(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: TRUE
f_817(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8380, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_818(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: 0 = 0
f_818(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8381, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_819(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8393, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: 1 + v8393 = v8376 && 0 <= v8393
f_819(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8393, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_820(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8393, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: TRUE
f_820(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8393, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_821(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8393, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) :|: TRUE
f_821(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8389, v8391, v8393, v8382, v8383, v8384, v8385, v8386, v8387, v8388, 3, 2, 4) -> f_778(v8366, v8367, v8368, v8369, v8370, v8371, v8372, v8373, 1, v8375, v8376, 0, v8382, v8383, v8384, v8389, v8391, v8393, v8385, v8386, v8387, v8388, 3, 2, 4) :|: TRUE
f_778(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7320, 1, v7322, v7323, 0, v7325, v7326, v7327, v7328, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_779(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7320, 1, v7322, v7323, 0, v7325, v7326, v7327, v7328, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: TRUE
f_779(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7320, 1, v7322, v7323, 0, v7325, v7326, v7327, v7328, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_780(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_780(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_781(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 < v7328
f_781(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_783(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_783(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_785(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: TRUE
f_785(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7322, v7323, 0, v7325, v7326, v7327, v7329, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_787(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_787(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_789(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 < v7329 && 2 <= v7322 && 2 <= v7318
f_789(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_791(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_791(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_793(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) :|: TRUE
f_793(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7323, 0, v7325, v7326, v7327, v7322, v7330, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_795(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_795(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_797(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 < v7330 && 2 <= v7323 && 2 <= v7327
f_797(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_799(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_799(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_801(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_801(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_803(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: TRUE
f_803(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_805(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: TRUE
f_805(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_806(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: v8283 != 0
f_805(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_807(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: v8283 = 0
f_806(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_808(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 0, 3, 2, 4) :|: 0 = 0
f_808(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 0, 3, 2, 4) -> f_810(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 0, 3, 2, 4) :|: TRUE
f_810(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 0, 3, 2, 4) -> f_761(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, v8283, v7325, v7326, v7327, v7328, v7322, v7323, v7330, v7331, v7332, v7333, v7334, 0, 3, 2, 4) :|: TRUE
f_807(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_809(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: 0 = 0
f_809(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_811(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) :|: TRUE
f_811(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7325, v7326, v7327, v7322, v7323, v7331, v7332, v7333, v7334, 3, 2, 4) -> f_812(v7313, v7314, v7315, v7316, v7317, v7318, v7319, v7328, 1, v7329, v7330, 0, v7328, v7322, v7323, v7330, v7325, v7326, v7327, v7331, v7332, v7333, v7334, 3, 2, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_805(v7313:0, v7314:0, v7315:0, v7316:0, v7317:0, v7318:0, v7319:0, 1 + v7216:0, 1, v7329:0, v7330:0, v8283:0, 0, v7325:0, v7326:0, v7327:0, v7322:0, v7323:0, v7331:0, v7332:0, v7333:0, v7334:0, 3, 2, 4) -> f_715(v7313:0, v7314:0, v7315:0, v7316:0, v7317:0, v7318:0, v7319:0, 1 + v7216:0, 1, v7329:0, v7330:0, v8283:0, 1 + v7216:0, v7322:0, v7323:0, v7330:0, v7216:0, v7219:0, v7331:0, v7332:0, v7333:0, v7334:0, 0, 3, 2, 4) :|: v8283:0 < 0 && v7216:0 > -1
f_805(v7313:0, v7314:0, v7315:0, v7316:0, v7317:0, v7318:0, v7319:0, 1 + v7216:0, 1, v7329:0, v7330:0, v8283:0, 0, v7325:0, v7326:0, v7327:0, v7322:0, v7323:0, v7331:0, v7332:0, v7333:0, v7334:0, 3, 2, 4) -> f_715(v7313:0, v7314:0, v7315:0, v7316:0, v7317:0, v7318:0, v7319:0, 1 + v7216:0, 1, v7329:0, v7330:0, v8283:0, 1 + v7216:0, v7322:0, v7323:0, v7330:0, v7216:0, v7219:0, v7331:0, v7332:0, v7333:0, v7334:0, 0, 3, 2, 4) :|: v8283:0 > 0 && v7216:0 > -1
f_805(v7313:0, v7314:0, v7315:0, v7316:0, v7317:0, v7318:0, v7319:0, v7328:0, 1, 1 + v8391:0, 1 + v8393:0, 0, 0, v7325:0, v7326:0, v7327:0, v7322:0, v7323:0, v7331:0, v7332:0, v7333:0, v7334:0, 3, 2, 4) -> f_805(v7313:0, v7314:0, v7315:0, v7316:0, v7317:0, v7318:0, v7319:0, v8389:0, 1, v8391:0, v8393:0, v8283:1, 0, v7325:0, v7326:0, v7327:0, 1 + v8391:0, 1 + v8393:0, v7331:0, v7332:0, v7333:0, v7334:0, 3, 2, 4) :|: v8391:0 > 0 && v8393:0 > 0 && v8389:0 > 0 && v7318:0 > 1 && v7327:0 > 1
f_715(v6314:0, v6315:0, v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, v6321:0, 1, 1 + v8391:0, v6324:0, v6325:0, v6326:0, v6327:0, v6328:0, v6329:0, v6330:0, 1 + v8393:0, v6332:0, v6333:0, v6334:0, v6335:0, 0, 3, 2, 4) -> f_805(v6314:0, v6315:0, v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, v8389:0, 1, v8391:0, v8393:0, v8283:0, 0, v6321:0, v6330:0, 1 + v8393:0, 1 + v8391:0, 1 + v8393:0, v6332:0, v6333:0, v6334:0, v6335:0, 3, 2, 4) :|: v8391:0 > 0 && v8393:0 > 0 && v6321:0 > 1 && v6330:0 > 0 && v6326:0 > 1 && v8389:0 > 0 && v6319:0 > 1
f_715(v6314:0, v6315:0, v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, v6321:0, 1, v6323:0, v6324:0, v6325:0, v6326:0, v6327:0, v6328:0, v6329:0, 1 + v7216:0, v6331:0, v6332:0, v6333:0, v6334:0, v6335:0, 0, 3, 2, 4) -> f_715(v6314:0, v6315:0, v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, 1 + v7216:0, 1, v6323:0, v6331:0, v7147:0, v6326:0, v6327:0, v6328:0, v6329:0, v7216:0, v7219:0, v6332:0, v6333:0, v6334:0, v6335:0, 0, 3, 2, 4) :|: v6321:0 > 1 && v7216:0 > -1 && v6326:0 > 1 && v6331:0 > 0 && v7147:0 < 0
f_715(v6314:0, v6315:0, v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, v6321:0, 1, v6323:0, v6324:0, v6325:0, v6326:0, v6327:0, v6328:0, v6329:0, 1 + v7216:0, v6331:0, v6332:0, v6333:0, v6334:0, v6335:0, 0, 3, 2, 4) -> f_715(v6314:0, v6315:0, v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, 1 + v7216:0, 1, v6323:0, v6331:0, v7147:0, v6326:0, v6327:0, v6328:0, v6329:0, v7216:0, v7219:0, v6332:0, v6333:0, v6334:0, v6335:0, 0, 3, 2, 4) :|: v6321:0 > 1 && v7216:0 > -1 && v6326:0 > 1 && v6331:0 > 0 && v7147:0 > 0
Filtered unneeded arguments:
   f_805(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_805(x6, x8, x10, x11, x12, x16)
   f_715(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26) -> f_715(x6, x8, x10, x13, x17, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_805(v7318:0, sum~cons_1~v7216:0, v7329:0, v7330:0, v8283:0, v7327:0) -> f_715(v7318:0, 1 + v7216:0, v7329:0, 1 + v7216:0, v7216:0, v7219:0) :|: v8283:0 < 0 && v7216:0 > -1 && sum~cons_1~v7216:0 = 1 + v7216:0
f_805(v7318:0, sum~cons_1~v7216:0, v7329:0, v7330:0, v8283:0, v7327:0) -> f_715(v7318:0, 1 + v7216:0, v7329:0, 1 + v7216:0, v7216:0, v7219:0) :|: v8283:0 > 0 && v7216:0 > -1 && sum~cons_1~v7216:0 = 1 + v7216:0
f_805(v7318:0, v7328:0, sum~cons_1~v8391:0, sum~cons_1~v8393:0, cons_0, v7327:0) -> f_805(v7318:0, v8389:0, v8391:0, v8393:0, v8283:1, v7327:0) :|: v8393:0 > 0 && v8391:0 > 0 && v8389:0 > 0 && v7327:0 > 1 && v7318:0 > 1 && sum~cons_1~v8391:0 = 1 + v8391:0 && sum~cons_1~v8393:0 = 1 + v8393:0 && cons_0 = 0
f_715(v6319:0, v6321:0, sum~cons_1~v8391:0, v6326:0, v6330:0, sum~cons_1~v8393:0) -> f_805(v6319:0, v8389:0, v8391:0, v8393:0, v8283:0, 1 + v8393:0) :|: v8393:0 > 0 && v8391:0 > 0 && v6321:0 > 1 && v6330:0 > 0 && v6326:0 > 1 && v6319:0 > 1 && v8389:0 > 0 && sum~cons_1~v8391:0 = 1 + v8391:0 && sum~cons_1~v8393:0 = 1 + v8393:0
f_715(v6319:0, v6321:0, v6323:0, v6326:0, sum~cons_1~v7216:0, v6331:0) -> f_715(v6319:0, 1 + v7216:0, v6323:0, v6326:0, v7216:0, v7219:0) :|: v7216:0 > -1 && v6321:0 > 1 && v6331:0 > 0 && v6326:0 > 1 && sum~cons_1~v7216:0 = 1 + v7216:0

----------------------------------------

(9)
Obligation:
Rules:
f_805(v7318:0, sum~cons_1~v7216:0, v7329:0, v7330:0, v8283:0, v7327:0) -> f_715(v7318:0, 1 + v7216:0, v7329:0, 1 + v7216:0, v7216:0, v7219:0) :|: v8283:0 < 0 && v7216:0 > -1 && sum~cons_1~v7216:0 = 1 + v7216:0
f_805(x, x1, x2, x3, x4, x5) -> f_715(x, 1 + x6, x2, 1 + x6, x6, x7) :|: x4 > 0 && x6 > -1 && x1 = 1 + x6
f_805(x8, x9, x10, x11, x12, x13) -> f_805(x8, x14, x15, x16, x17, x13) :|: x16 > 0 && x15 > 0 && x14 > 0 && x13 > 1 && x8 > 1 && x10 = 1 + x15 && x11 = 1 + x16 && x12 = 0
f_715(x18, x19, x20, x21, x22, x23) -> f_805(x18, x24, x25, x26, x27, 1 + x26) :|: x26 > 0 && x25 > 0 && x19 > 1 && x22 > 0 && x21 > 1 && x18 > 1 && x24 > 0 && x20 = 1 + x25 && x23 = 1 + x26
f_715(x28, x29, x30, x31, x32, x33) -> f_715(x28, 1 + x34, x30, x31, x34, x35) :|: x34 > -1 && x29 > 1 && x33 > 0 && x31 > 1 && x32 = 1 + x34

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_805(v7318:0:0, sum~cons_1~v7216:0:0, v7329:0:0, v7330:0:0, v8283:0:0, v7327:0:0) -> f_715(v7318:0:0, 1 + v7216:0:0, v7329:0:0, 1 + v7216:0:0, v7216:0:0, v7219:0:0) :|: v8283:0:0 < 0 && v7216:0:0 > -1 && sum~cons_1~v7216:0:0 = 1 + v7216:0:0
f_715(x18:0, x19:0, sum~cons_1~x25:0, x21:0, x22:0, sum~cons_1~x26:0) -> f_805(x18:0, x24:0, x25:0, x26:0, x27:0, 1 + x26:0) :|: x18:0 > 1 && x24:0 > 0 && x21:0 > 1 && x22:0 > 0 && x19:0 > 1 && x25:0 > 0 && x26:0 > 0 && sum~cons_1~x25:0 = 1 + x25:0 && sum~cons_1~x26:0 = 1 + x26:0
f_805(x8:0, x9:0, sum~cons_1~x15:0, sum~cons_1~x16:0, cons_0, x13:0) -> f_805(x8:0, x14:0, x15:0, x16:0, x17:0, x13:0) :|: x13:0 > 1 && x8:0 > 1 && x14:0 > 0 && x15:0 > 0 && x16:0 > 0 && sum~cons_1~x15:0 = 1 + x15:0 && sum~cons_1~x16:0 = 1 + x16:0 && cons_0 = 0
f_715(x28:0, x29:0, x30:0, x31:0, sum~cons_1~x34:0, x33:0) -> f_715(x28:0, 1 + x34:0, x30:0, x31:0, x34:0, x35:0) :|: x33:0 > 0 && x31:0 > 1 && x29:0 > 1 && x34:0 > -1 && sum~cons_1~x34:0 = 1 + x34:0
f_805(x:0, sum~cons_1~x6:0, x2:0, x3:0, x4:0, x5:0) -> f_715(x:0, 1 + x6:0, x2:0, 1 + x6:0, x6:0, x7:0) :|: x4:0 > 0 && x6:0 > -1 && sum~cons_1~x6:0 = 1 + x6:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_805 ] = 2*f_805_1 + 2*f_805_3 + 1
[ f_715 ] = 2*f_715_1 + 2*f_715_3

The following rules are decreasing:
f_805(v7318:0:0, sum~cons_1~v7216:0:0, v7329:0:0, v7330:0:0, v8283:0:0, v7327:0:0) -> f_715(v7318:0:0, 1 + v7216:0:0, v7329:0:0, 1 + v7216:0:0, v7216:0:0, v7219:0:0) :|: v8283:0:0 < 0 && v7216:0:0 > -1 && sum~cons_1~v7216:0:0 = 1 + v7216:0:0
f_715(x18:0, x19:0, sum~cons_1~x25:0, x21:0, x22:0, sum~cons_1~x26:0) -> f_805(x18:0, x24:0, x25:0, x26:0, x27:0, 1 + x26:0) :|: x18:0 > 1 && x24:0 > 0 && x21:0 > 1 && x22:0 > 0 && x19:0 > 1 && x25:0 > 0 && x26:0 > 0 && sum~cons_1~x25:0 = 1 + x25:0 && sum~cons_1~x26:0 = 1 + x26:0
f_805(x8:0, x9:0, sum~cons_1~x15:0, sum~cons_1~x16:0, cons_0, x13:0) -> f_805(x8:0, x14:0, x15:0, x16:0, x17:0, x13:0) :|: x13:0 > 1 && x8:0 > 1 && x14:0 > 0 && x15:0 > 0 && x16:0 > 0 && sum~cons_1~x15:0 = 1 + x15:0 && sum~cons_1~x16:0 = 1 + x16:0 && cons_0 = 0
f_805(x:0, sum~cons_1~x6:0, x2:0, x3:0, x4:0, x5:0) -> f_715(x:0, 1 + x6:0, x2:0, 1 + x6:0, x6:0, x7:0) :|: x4:0 > 0 && x6:0 > -1 && sum~cons_1~x6:0 = 1 + x6:0

The following rules are bounded:
f_715(x18:0, x19:0, sum~cons_1~x25:0, x21:0, x22:0, sum~cons_1~x26:0) -> f_805(x18:0, x24:0, x25:0, x26:0, x27:0, 1 + x26:0) :|: x18:0 > 1 && x24:0 > 0 && x21:0 > 1 && x22:0 > 0 && x19:0 > 1 && x25:0 > 0 && x26:0 > 0 && sum~cons_1~x25:0 = 1 + x25:0 && sum~cons_1~x26:0 = 1 + x26:0
f_805(x8:0, x9:0, sum~cons_1~x15:0, sum~cons_1~x16:0, cons_0, x13:0) -> f_805(x8:0, x14:0, x15:0, x16:0, x17:0, x13:0) :|: x13:0 > 1 && x8:0 > 1 && x14:0 > 0 && x15:0 > 0 && x16:0 > 0 && sum~cons_1~x15:0 = 1 + x15:0 && sum~cons_1~x16:0 = 1 + x16:0 && cons_0 = 0


----------------------------------------

(13)
Obligation:
Rules:
f_805(v7318:0:0, sum~cons_1~v7216:0:0, v7329:0:0, v7330:0:0, v8283:0:0, v7327:0:0) -> f_715(v7318:0:0, 1 + v7216:0:0, v7329:0:0, 1 + v7216:0:0, v7216:0:0, v7219:0:0) :|: v8283:0:0 < 0 && v7216:0:0 > -1 && sum~cons_1~v7216:0:0 = 1 + v7216:0:0
f_715(x28:0, x29:0, x30:0, x31:0, sum~cons_1~x34:0, x33:0) -> f_715(x28:0, 1 + x34:0, x30:0, x31:0, x34:0, x35:0) :|: x33:0 > 0 && x31:0 > 1 && x29:0 > 1 && x34:0 > -1 && sum~cons_1~x34:0 = 1 + x34:0
f_805(x:0, sum~cons_1~x6:0, x2:0, x3:0, x4:0, x5:0) -> f_715(x:0, 1 + x6:0, x2:0, 1 + x6:0, x6:0, x7:0) :|: x4:0 > 0 && x6:0 > -1 && sum~cons_1~x6:0 = 1 + x6:0

----------------------------------------

(14) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(15)
Obligation:
Rules:
f_715(x28:0, x29:0, x30:0, x31:0, sum~cons_1~x34:0, x33:0) -> f_715(x28:0, 1 + x34:0, x30:0, x31:0, x34:0, x35:0) :|: x33:0 > 0 && x31:0 > 1 && x29:0 > 1 && x34:0 > -1 && sum~cons_1~x34:0 = 1 + x34:0

----------------------------------------

(16) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(17)
Obligation:
Rules:
f_715(x28:0:0, x29:0:0, x30:0:0, x31:0:0, sum~cons_1~x34:0:0, x33:0:0) -> f_715(x28:0:0, 1 + x34:0:0, x30:0:0, x31:0:0, x34:0:0, x35:0:0) :|: x29:0:0 > 1 && x34:0:0 > -1 && x31:0:0 > 1 && x33:0:0 > 0 && sum~cons_1~x34:0:0 = 1 + x34:0:0

----------------------------------------

(18) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_715(x1, x2, x3, x4, x5, x6) -> f_715(x2, x4, x5, x6)

----------------------------------------

(19)
Obligation:
Rules:
f_715(x29:0:0, x31:0:0, sum~cons_1~x34:0:0, x33:0:0) -> f_715(1 + x34:0:0, x31:0:0, x34:0:0, x35:0:0) :|: x29:0:0 > 1 && x34:0:0 > -1 && x31:0:0 > 1 && x33:0:0 > 0 && sum~cons_1~x34:0:0 = 1 + x34:0:0

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_715(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_715(x29:0:0, x31:0:0, sum~cons_1~x34:0:0, x33:0:0) -> f_715(1 + x34:0:0, x31:0:0, x34:0:0, x35:0:0) :|: x29:0:0 > 1 && x34:0:0 > -1 && x31:0:0 > 1 && x33:0:0 > 0 && sum~cons_1~x34:0:0 = 1 + x34:0:0
The following rules are bounded:
f_715(x29:0:0, x31:0:0, sum~cons_1~x34:0:0, x33:0:0) -> f_715(1 + x34:0:0, x31:0:0, x34:0:0, x35:0:0) :|: x29:0:0 > 1 && x34:0:0 > -1 && x31:0:0 > 1 && x33:0:0 > 0 && sum~cons_1~x34:0:0 = 1 + x34:0:0

----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
SCC
----------------------------------------

(23) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 28 rulesP rules:
f_412(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1322, 1, v1324, v1325, 0, v1327, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) -> f_415(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) :|: 0 = 0
f_415(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) -> f_417(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) :|: 0 < v1327
f_417(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) -> f_421(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) :|: 0 = 0
f_421(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) -> f_425(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) :|: TRUE
f_425(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1324, v1325, 0, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) -> f_429(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 4) :|: 0 = 0
f_429(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 4) -> f_433(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 < v1328 && 2 <= v1324 && 2 <= v1320
f_433(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_437(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 = 0
f_437(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_441(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_441(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1325, 0, v1324, v1329, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_445(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 = 0
f_445(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_449(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 < v1329 && 2 <= v1325 && 2 <= v1321
f_449(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_453(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 = 0
f_453(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_457(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 = 0
f_457(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_460(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_460(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_463(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, v1793, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_463(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, v1793, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_466(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: v1793 = 0
f_466(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_469(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 = 0
f_469(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_473(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_473(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_477(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_477(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_481(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_481(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1324, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_485(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 = 0
f_485(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_489(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 1 + v1999 = v1328 && 0 <= v1999
f_489(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_493(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_493(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v1325, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_497(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 0 = 0
f_497(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_501(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v2269, v1330, v1331, v1332, v1333, 3, 2, 4) :|: 1 + v2269 = v1329 && 0 <= v2269
f_501(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v2269, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_505(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v2269, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_505(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v2269, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_510(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v2269, v1330, v1331, v1332, v1333, 3, 2, 4) :|: TRUE
f_510(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v2269, v1330, v1331, v1332, v1333, 3, 2, 4) -> f_409(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1327, 1, v1328, v1329, 0, v1828, v1999, v2269, v1330, v1331, v1332, v1333, 3, 4) :|: TRUE
f_409(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1322, 1, v1324, v1325, 0, v1327, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) -> f_412(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1322, 1, v1324, v1325, 0, v1327, v1328, v1329, v1330, v1331, v1332, v1333, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_412(v1315:0, v1316:0, v1317:0, v1318:0, v1319:0, v1320:0, v1321:0, v1322:0, 1, v1324:0, v1325:0, 0, v1327:0, 1 + v1999:0, 1 + v2269:0, v1330:0, v1331:0, v1332:0, v1333:0, 3, 4) -> f_412(v1315:0, v1316:0, v1317:0, v1318:0, v1319:0, v1320:0, v1321:0, v1327:0, 1, 1 + v1999:0, 1 + v2269:0, 0, v1828:0, v1999:0, v2269:0, v1330:0, v1331:0, v1332:0, v1333:0, 3, 4) :|: v1327:0 > 0 && v1324:0 > 1 && v1999:0 > -1 && v1320:0 > 1 && v1325:0 > 1 && v2269:0 > -1 && v1321:0 > 1
Filtered unneeded arguments:
   f_412(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_412(x6, x7, x10, x11, x13, x14, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_412(v1320:0, v1321:0, v1324:0, v1325:0, v1327:0, sum~cons_1~v1999:0, sum~cons_1~v2269:0) -> f_412(v1320:0, v1321:0, 1 + v1999:0, 1 + v2269:0, v1828:0, v1999:0, v2269:0) :|: v1324:0 > 1 && v1327:0 > 0 && v1999:0 > -1 && v1320:0 > 1 && v1325:0 > 1 && v1321:0 > 1 && v2269:0 > -1 && sum~cons_1~v1999:0 = 1 + v1999:0 && sum~cons_1~v2269:0 = 1 + v2269:0

----------------------------------------

(24)
Obligation:
Rules:
f_412(v1320:0, v1321:0, v1324:0, v1325:0, v1327:0, sum~cons_1~v1999:0, sum~cons_1~v2269:0) -> f_412(v1320:0, v1321:0, 1 + v1999:0, 1 + v2269:0, v1828:0, v1999:0, v2269:0) :|: v1324:0 > 1 && v1327:0 > 0 && v1999:0 > -1 && v1320:0 > 1 && v1325:0 > 1 && v1321:0 > 1 && v2269:0 > -1 && sum~cons_1~v1999:0 = 1 + v1999:0 && sum~cons_1~v2269:0 = 1 + v2269:0

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f_412(v1320:0:0, v1321:0:0, v1324:0:0, v1325:0:0, v1327:0:0, sum~cons_1~v1999:0:0, sum~cons_1~v2269:0:0) -> f_412(v1320:0:0, v1321:0:0, 1 + v1999:0:0, 1 + v2269:0:0, v1828:0:0, v1999:0:0, v2269:0:0) :|: v1321:0:0 > 1 && v2269:0:0 > -1 && v1325:0:0 > 1 && v1320:0:0 > 1 && v1999:0:0 > -1 && v1327:0:0 > 0 && v1324:0:0 > 1 && sum~cons_1~v1999:0:0 = 1 + v1999:0:0 && sum~cons_1~v2269:0:0 = 1 + v2269:0:0

----------------------------------------

(27) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_412 ] = f_412_6

The following rules are decreasing:
f_412(v1320:0:0, v1321:0:0, v1324:0:0, v1325:0:0, v1327:0:0, sum~cons_1~v1999:0:0, sum~cons_1~v2269:0:0) -> f_412(v1320:0:0, v1321:0:0, 1 + v1999:0:0, 1 + v2269:0:0, v1828:0:0, v1999:0:0, v2269:0:0) :|: v1321:0:0 > 1 && v2269:0:0 > -1 && v1325:0:0 > 1 && v1320:0:0 > 1 && v1999:0:0 > -1 && v1327:0:0 > 0 && v1324:0:0 > 1 && sum~cons_1~v1999:0:0 = 1 + v1999:0:0 && sum~cons_1~v2269:0:0 = 1 + v2269:0:0

The following rules are bounded:
f_412(v1320:0:0, v1321:0:0, v1324:0:0, v1325:0:0, v1327:0:0, sum~cons_1~v1999:0:0, sum~cons_1~v2269:0:0) -> f_412(v1320:0:0, v1321:0:0, 1 + v1999:0:0, 1 + v2269:0:0, v1828:0:0, v1999:0:0, v2269:0:0) :|: v1321:0:0 > 1 && v2269:0:0 > -1 && v1325:0:0 > 1 && v1320:0:0 > 1 && v1999:0:0 > -1 && v1327:0:0 > 0 && v1324:0:0 > 1 && sum~cons_1~v1999:0:0 = 1 + v1999:0:0 && sum~cons_1~v2269:0:0 = 1 + v2269:0:0


----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
SCC
----------------------------------------

(30) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_372(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 4) -> f_375(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 < v1154 && 2 <= v1150 && 2 <= v1147
f_375(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_379(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_379(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_383(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_383(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_387(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_387(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_391(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_391(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_394(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_394(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_397(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_397(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_400(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 < v1155
f_400(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_404(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_404(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_410(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_410(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_413(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_413(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1153, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_416(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_416(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_419(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: v1435 != 0
f_419(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_423(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_423(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_427(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_427(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1150, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_431(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 0 = 0
f_431(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_435(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: 1 + v1496 = v1154 && 0 <= v1496
f_435(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_439(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_439(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_443(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_443(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_447(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_447(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_451(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_451(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_455(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) :|: TRUE
f_455(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 2, 4) -> f_369(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1155, v1435, v1496, v1544, v1156, v1157, v1158, v1159, 0, 3, 4) :|: TRUE
f_369(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1150, 1, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, 0, 3, 4) -> f_372(v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1154, 1, v1152, v1153, v1150, v1155, v1156, v1157, v1158, v1159, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_372(v1143:0, v1144:0, v1145:0, v1146:0, v1147:0, v1148:0, v1149:0, 1 + v1496:0, 1, v1152:0, v1153:0, v1150:0, v1155:0, v1156:0, v1157:0, v1158:0, v1159:0, 0, 3, 4) -> f_372(v1143:0, v1144:0, v1145:0, v1146:0, v1147:0, v1148:0, v1149:0, v1496:0, 1, v1155:0, v1435:0, 1 + v1496:0, v1544:0, v1156:0, v1157:0, v1158:0, v1159:0, 0, 3, 4) :|: v1150:0 > 1 && v1496:0 > -1 && v1147:0 > 1 && v1155:0 > 0 && v1435:0 < 0
f_372(v1143:0, v1144:0, v1145:0, v1146:0, v1147:0, v1148:0, v1149:0, 1 + v1496:0, 1, v1152:0, v1153:0, v1150:0, v1155:0, v1156:0, v1157:0, v1158:0, v1159:0, 0, 3, 4) -> f_372(v1143:0, v1144:0, v1145:0, v1146:0, v1147:0, v1148:0, v1149:0, v1496:0, 1, v1155:0, v1435:0, 1 + v1496:0, v1544:0, v1156:0, v1157:0, v1158:0, v1159:0, 0, 3, 4) :|: v1150:0 > 1 && v1496:0 > -1 && v1147:0 > 1 && v1155:0 > 0 && v1435:0 > 0
Filtered unneeded arguments:
   f_372(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_372(x5, x8, x12, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_372(v1147:0, sum~cons_1~v1496:0, v1150:0, v1155:0) -> f_372(v1147:0, v1496:0, 1 + v1496:0, v1544:0) :|: v1496:0 > -1 && v1150:0 > 1 && v1155:0 > 0 && v1147:0 > 1 && sum~cons_1~v1496:0 = 1 + v1496:0

----------------------------------------

(31)
Obligation:
Rules:
f_372(v1147:0, sum~cons_1~v1496:0, v1150:0, v1155:0) -> f_372(v1147:0, v1496:0, 1 + v1496:0, v1544:0) :|: v1496:0 > -1 && v1150:0 > 1 && v1155:0 > 0 && v1147:0 > 1 && sum~cons_1~v1496:0 = 1 + v1496:0

----------------------------------------

(32) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(33)
Obligation:
Rules:
f_372(v1147:0:0, sum~cons_1~v1496:0:0, v1150:0:0, v1155:0:0) -> f_372(v1147:0:0, v1496:0:0, 1 + v1496:0:0, v1544:0:0) :|: v1155:0:0 > 0 && v1147:0:0 > 1 && v1150:0:0 > 1 && v1496:0:0 > -1 && sum~cons_1~v1496:0:0 = 1 + v1496:0:0

----------------------------------------

(34) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_372 ] = f_372_2

The following rules are decreasing:
f_372(v1147:0:0, sum~cons_1~v1496:0:0, v1150:0:0, v1155:0:0) -> f_372(v1147:0:0, v1496:0:0, 1 + v1496:0:0, v1544:0:0) :|: v1155:0:0 > 0 && v1147:0:0 > 1 && v1150:0:0 > 1 && v1496:0:0 > -1 && sum~cons_1~v1496:0:0 = 1 + v1496:0:0

The following rules are bounded:
f_372(v1147:0:0, sum~cons_1~v1496:0:0, v1150:0:0, v1155:0:0) -> f_372(v1147:0:0, v1496:0:0, 1 + v1496:0:0, v1544:0:0) :|: v1155:0:0 > 0 && v1147:0:0 > 1 && v1150:0:0 > 1 && v1496:0:0 > -1 && sum~cons_1~v1496:0:0 = 1 + v1496:0:0


----------------------------------------

(35)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
