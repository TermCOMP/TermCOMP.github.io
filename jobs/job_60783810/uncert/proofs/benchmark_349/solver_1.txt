YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/fmBHi.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 191 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 1 ms]
        (9) IntTRS
        (10) TerminationGraphProcessor [EQUIVALENT, 15 ms]
        (11) IntTRS
        (12) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (13) IntTRS
        (14) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (15) YES
    (16) LLVM Symbolic Execution SCC
        (17) SCC2IRS [SOUND, 4 ms]
        (18) IntTRS
        (19) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (20) IntTRS
        (21) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/fmBHi.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/fmBHi.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %2
		br %4
	4:
		%5 = load %2
		%6 = icmp ne %5 0
		br %6, %7, %17
	7:
		%8 = load %2
		%9 = icmp sgt %8 0
		br %9, %10, %13
	10:
		%11 = load %2
		%12 = sub i32 %11, 1
		store %12, %2
		br %16
	13:
		%14 = load %2
		%15 = add i32 %14, 1
		store %15, %2
		br %16
	16:
		br %4
	17:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_187(v91, v92, v93, v94, 1, 0, v97, v98, v99, 3, 4) -> f_190(v91, v92, v93, v97, 1, v94, 0, v98, v99, 3, 4) :|: 0 = 0
f_190(v91, v92, v93, v97, 1, v94, 0, v98, v99, 3, 4) -> f_193(v91, v92, v93, v97, 1, v94, 0, v98, v99, 3, 4) :|: v97 != 0
f_193(v91, v92, v93, v97, 1, v94, 0, v98, v99, 3, 4) -> f_196(v91, v92, v93, v97, 1, v94, 0, v98, v99, 3, 4) :|: 0 = 0
f_196(v91, v92, v93, v97, 1, v94, 0, v98, v99, 3, 4) -> f_199(v91, v92, v93, v97, 1, v94, 0, v98, v99, 3, 4) :|: TRUE
f_199(v91, v92, v93, v97, 1, v94, 0, v98, v99, 3, 4) -> f_202(v91, v92, v93, v97, 1, 0, v94, v98, v99, 3, 4) :|: 0 = 0
f_202(v91, v92, v93, v97, 1, 0, v94, v98, v99, 3, 4) -> f_205(v91, v92, v93, v97, 1, 0, v94, v98, v99, 3, 4) :|: v97 <= 0 && 1 + v94 <= 0 && 1 + v93 <= 0
f_205(v91, v92, v93, v97, 1, 0, v94, v98, v99, 3, 4) -> f_208(v91, v92, v93, v97, 1, 0, v94, v98, v99, 3, 4) :|: 0 = 0
f_208(v91, v92, v93, v97, 1, 0, v94, v98, v99, 3, 4) -> f_211(v91, v92, v93, v97, 1, 0, v94, v98, v99, 3, 4) :|: TRUE
f_211(v91, v92, v93, v97, 1, 0, v94, v98, v99, 3, 4) -> f_214(v91, v92, v93, v97, 1, 0, v98, v99, 3, 4) :|: 0 = 0
f_214(v91, v92, v93, v97, 1, 0, v98, v99, 3, 4) -> f_217(v91, v92, v93, v97, 1, 0, v128, v98, v99, 3, 4) :|: v128 = 1 + v97 && v128 <= 1
f_217(v91, v92, v93, v97, 1, 0, v128, v98, v99, 3, 4) -> f_219(v91, v92, v93, v97, 1, 0, v128, v98, v99, 3, 4) :|: TRUE
f_219(v91, v92, v93, v97, 1, 0, v128, v98, v99, 3, 4) -> f_221(v91, v92, v93, v97, 1, 0, v128, v98, v99, 3, 4) :|: TRUE
f_221(v91, v92, v93, v97, 1, 0, v128, v98, v99, 3, 4) -> f_184(v91, v92, v93, v97, 1, 0, v128, v98, v99, 3, 4) :|: TRUE
f_184(v91, v92, v93, v94, 1, 0, v97, v98, v99, 3, 4) -> f_187(v91, v92, v93, v94, 1, 0, v97, v98, v99, 3, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_187(v91:0, v92:0, v93:0, v94:0, 1, 0, v97:0, v98:0, v99:0, 3, 4) -> f_187(v91:0, v92:0, v93:0, v97:0, 1, 0, 1 + v97:0, v98:0, v99:0, 3, 4) :|: v97:0 < 0 && v94:0 < 0 && v97:0 < 1 && v93:0 < 0
f_187(v91:0, v92:0, v93:0, v94:0, 1, 0, v97:0, v98:0, v99:0, 3, 4) -> f_187(v91:0, v92:0, v93:0, v97:0, 1, 0, 1 + v97:0, v98:0, v99:0, 3, 4) :|: v97:0 > 0 && v94:0 < 0 && v97:0 < 1 && v93:0 < 0
Filtered unneeded arguments:
   f_187(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) -> f_187(x3, x4, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_187(v93:0, v94:0, v97:0) -> f_187(v93:0, v97:0, 1 + v97:0) :|: v94:0 < 0 && v97:0 < 0 && v93:0 < 0 && v97:0 < 1
f_187(v93:0, v94:0, v97:0) -> f_187(v93:0, v97:0, 1 + v97:0) :|: v94:0 < 0 && v97:0 > 0 && v93:0 < 0 && v97:0 < 1

----------------------------------------

(9)
Obligation:
Rules:
f_187(v93:0, v94:0, v97:0) -> f_187(v93:0, v97:0, 1 + v97:0) :|: v94:0 < 0 && v97:0 < 0 && v93:0 < 0 && v97:0 < 1
f_187(x, x1, x2) -> f_187(x, x2, 1 + x2) :|: x1 < 0 && x2 > 0 && x < 0 && x2 < 1

----------------------------------------

(10) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(11)
Obligation:
Rules:
f_187(v93:0, v94:0, v97:0) -> f_187(v93:0, v97:0, 1 + v97:0) :|: v94:0 < 0 && v97:0 < 0 && v93:0 < 0 && v97:0 < 1

----------------------------------------

(12) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(13)
Obligation:
Rules:
f_187(v93:0:0, v94:0:0, v97:0:0) -> f_187(v93:0:0, v97:0:0, 1 + v97:0:0) :|: v93:0:0 < 0 && v97:0:0 < 1 && v97:0:0 < 0 && v94:0:0 < 0

----------------------------------------

(14) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_187(x, x1, x2)] = -x2

The following rules are decreasing:
f_187(v93:0:0, v94:0:0, v97:0:0) -> f_187(v93:0:0, v97:0:0, 1 + v97:0:0) :|: v93:0:0 < 0 && v97:0:0 < 1 && v97:0:0 < 0 && v94:0:0 < 0
The following rules are bounded:
f_187(v93:0:0, v94:0:0, v97:0:0) -> f_187(v93:0:0, v97:0:0, 1 + v97:0:0) :|: v93:0:0 < 0 && v97:0:0 < 1 && v97:0:0 < 0 && v94:0:0 < 0

----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
SCC
----------------------------------------

(17) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_181(v71, v72, v73, v76, 1, v74, v77, v78, 0, 3, 4) -> f_185(v71, v72, v73, v76, 1, v74, v77, v78, 0, 3, 2, 4) :|: 0 < v76 && 2 <= v74 && 2 <= v73
f_185(v71, v72, v73, v76, 1, v74, v77, v78, 0, 3, 2, 4) -> f_188(v71, v72, v73, v76, 1, v74, v77, v78, 0, 3, 2, 4) :|: 0 = 0
f_188(v71, v72, v73, v76, 1, v74, v77, v78, 0, 3, 2, 4) -> f_191(v71, v72, v73, v76, 1, v74, v77, v78, 0, 3, 2, 4) :|: TRUE
f_191(v71, v72, v73, v76, 1, v74, v77, v78, 0, 3, 2, 4) -> f_195(v71, v72, v73, v76, 1, v74, v77, v78, 0, 3, 2, 4) :|: 0 = 0
f_195(v71, v72, v73, v76, 1, v74, v77, v78, 0, 3, 2, 4) -> f_198(v71, v72, v73, v76, 1, v74, v77, v78, 0, 3, 2, 4) :|: 0 = 0
f_198(v71, v72, v73, v76, 1, v74, v77, v78, 0, 3, 2, 4) -> f_201(v71, v72, v73, v76, 1, v74, v77, v78, 0, 3, 2, 4) :|: TRUE
f_201(v71, v72, v73, v76, 1, v74, v77, v78, 0, 3, 2, 4) -> f_203(v71, v72, v73, v76, 1, v77, v78, 0, 3, 2, 4) :|: 0 = 0
f_203(v71, v72, v73, v76, 1, v77, v78, 0, 3, 2, 4) -> f_206(v71, v72, v73, v76, 1, v111, v77, v78, 0, 3, 2, 4) :|: 1 + v111 = v76 && 0 <= v111
f_206(v71, v72, v73, v76, 1, v111, v77, v78, 0, 3, 2, 4) -> f_209(v71, v72, v73, v76, 1, v111, v77, v78, 0, 3, 2, 4) :|: TRUE
f_209(v71, v72, v73, v76, 1, v111, v77, v78, 0, 3, 2, 4) -> f_212(v71, v72, v73, v76, 1, v111, v77, v78, 0, 3, 2, 4) :|: TRUE
f_212(v71, v72, v73, v76, 1, v111, v77, v78, 0, 3, 2, 4) -> f_215(v71, v72, v73, v76, 1, v111, v77, v78, 0, 3, 2, 4) :|: TRUE
f_215(v71, v72, v73, v76, 1, v111, v77, v78, 0, 3, 2, 4) -> f_178(v71, v72, v73, v76, 1, v111, v77, v78, 0, 3, 4) :|: TRUE
f_178(v71, v72, v73, v74, 1, v76, v77, v78, 0, 3, 4) -> f_181(v71, v72, v73, v76, 1, v74, v77, v78, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_181(v71:0, v72:0, v73:0, 1 + v111:0, 1, v74:0, v77:0, v78:0, 0, 3, 4) -> f_181(v71:0, v72:0, v73:0, v111:0, 1, 1 + v111:0, v77:0, v78:0, 0, 3, 4) :|: v74:0 > 1 && v111:0 > -1 && v73:0 > 1
Filtered unneeded arguments:
   f_181(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) -> f_181(x3, x4, x6)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_181(v73:0, sum~cons_1~v111:0, v74:0) -> f_181(v73:0, v111:0, 1 + v111:0) :|: v111:0 > -1 && v73:0 > 1 && v74:0 > 1 && sum~cons_1~v111:0 = 1 + v111:0

----------------------------------------

(18)
Obligation:
Rules:
f_181(v73:0, sum~cons_1~v111:0, v74:0) -> f_181(v73:0, v111:0, 1 + v111:0) :|: v111:0 > -1 && v73:0 > 1 && v74:0 > 1 && sum~cons_1~v111:0 = 1 + v111:0

----------------------------------------

(19) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(20)
Obligation:
Rules:
f_181(v73:0:0, sum~cons_1~v111:0:0, v74:0:0) -> f_181(v73:0:0, v111:0:0, 1 + v111:0:0) :|: v111:0:0 > -1 && v73:0:0 > 1 && v74:0:0 > 1 && sum~cons_1~v111:0:0 = 1 + v111:0:0

----------------------------------------

(21) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_181(x, x1, x2)] = x1

The following rules are decreasing:
f_181(v73:0:0, sum~cons_1~v111:0:0, v74:0:0) -> f_181(v73:0:0, v111:0:0, 1 + v111:0:0) :|: v111:0:0 > -1 && v73:0:0 > 1 && v74:0:0 > 1 && sum~cons_1~v111:0:0 = 1 + v111:0:0
The following rules are bounded:
f_181(v73:0:0, sum~cons_1~v111:0:0, v74:0:0) -> f_181(v73:0:0, v111:0:0, 1 + v111:0:0) :|: v111:0:0 > -1 && v73:0:0 > 1 && v74:0:0 > 1 && sum~cons_1~v111:0:0 = 1 + v111:0:0

----------------------------------------

(22)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
