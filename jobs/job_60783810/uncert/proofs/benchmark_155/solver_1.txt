YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/xhU6m.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1211 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 46 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
(12) IntTRS
(13) TerminationGraphProcessor [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/xhU6m.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/xhU6m.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @random()
		%8 = call i32 @random()
		%9 = call i32 @average(i32 %7, i32 %8)
		ret 0

*BasicFunctionTypename: "average" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 25
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = icmp sgt %6 0
		br %7, %8, %14
	8:
		%9 = load %4
		%10 = sub i32 %9, 1
		%11 = load %5
		%12 = add i32 %11, 1
		%13 = call i32 @average(i32 %10, i32 %12)
		store %13, %3
		br %25
	14:
		%15 = load %5
		%16 = icmp sgt %15 2
		br %16, %17, %24
	17:
		%18 = load %4
		%19 = add i32 %18, 1
		%20 = load %5
		%21 = sub i32 %20, 2
		%22 = call i32 @average(i32 %19, i32 %21)
		%23 = add i32 1, %22
		store %23, %3
		br %25
	24:
		store 1, %3
		br %25
	25:
		%26 = load %3
		ret %26

*BasicFunctionTypename: "random" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 58
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %2
		%4 = load %2
		%5 = icmp slt %4 0
		br %5, %6, %9
	6:
		%7 = load %2
		%8 = sub i32 0, %7
		store %8, %1
		br %11
	9:
		%10 = load %2
		store %10, %1
		br %11
	11:
		%12 = load %1
		ret %12


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 32 rulesP rules:
f_267(v17, v36, v63, v1, v2, v3, v4, v5, v6, v64, v7, v9, v11, 3, 1, 4, 0) -> f_268(v17, v36, v63, v65, v1, v2, v3, v4, v5, v6, v64, v66, v7, v9, v11, 3, 1, 4, 0) :|: 1 <= v65 && v66 = 3 + v65 && 4 <= v66
f_268(v17, v36, v63, v65, v1, v2, v3, v4, v5, v6, v64, v66, v7, v9, v11, 3, 1, 4, 0) -> f_269(v17, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4, 0) :|: 1 <= v67 && v68 = 3 + v67 && 4 <= v68
f_269(v17, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4, 0) -> f_270(v17, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4, 0) :|: TRUE
f_270(v17, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4, 0) -> f_271(v17, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4, 0) :|: TRUE
f_271(v17, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4, 0) -> f_272(v17, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4, 0) :|: TRUE
f_272(v17, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4, 0) -> f_273(v17, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4, 0) :|: TRUE
f_273(v17, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4, 0) -> f_274(v17, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4, 0) :|: 0 = 0
f_274(v17, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4, 0) -> f_275(v17, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4, 0) :|: 0 < v17
f_274(v17, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4, 0) -> f_276(0, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4) :|: v17 <= 0
f_275(v17, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4, 0) -> f_277(v17, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4, 0) :|: 0 = 0
f_277(v17, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4, 0) -> f_279(v17, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4, 0) :|: TRUE
f_279(v17, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4, 0) -> f_281(v17, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4, 0) :|: 0 = 0
f_281(v17, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4, 0) -> f_283(v17, v36, v63, v65, v67, 1, v71, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4, 0) :|: 1 + v71 = v17 && 0 <= v71
f_283(v17, v36, v63, v65, v67, 1, v71, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4, 0) -> f_286(v17, v36, v63, v65, v67, 1, v71, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4, 0) :|: 0 = 0
f_286(v17, v36, v63, v65, v67, 1, v71, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4, 0) -> f_289(v17, v36, v63, v65, v67, 1, v71, v72, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4, 0) :|: v72 = 1 + v36 && 1 <= v72
f_289(v17, v36, v63, v65, v67, 1, v71, v72, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4, 0) -> f_292(v71, v72, v1, v2, v3, v4, v5, v6, v63, v64, v65, v66, v67, v68, v7, v9, v11, v17, v36, 1, 3, 4, 0) :|: 0 = 0
f_292(v71, v72, v1, v2, v3, v4, v5, v6, v63, v64, v65, v66, v67, v68, v7, v9, v11, v17, v36, 1, 3, 4, 0) -> f_295(v71, v72, v1, v2, v3, v4, v5, v6, v63, v64, v65, v66, v67, v68, v7, v9, v11, v17, v36, 3, 1, 4, 0) :|: TRUE
f_295(v71, v72, v1, v2, v3, v4, v5, v6, v63, v64, v65, v66, v67, v68, v7, v9, v11, v17, v36, 3, 1, 4, 0) -> f_265(v71, v72, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) :|: TRUE
f_265(v17, v36, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) -> f_267(v17, v36, v63, v1, v2, v3, v4, v5, v6, v64, v7, v9, v11, 3, 1, 4, 0) :|: 1 <= v63 && v64 = 3 + v63 && 4 <= v64
f_276(0, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4) -> f_278(0, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4) :|: 0 = 0
f_278(0, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4) -> f_280(0, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4) :|: TRUE
f_280(0, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4) -> f_282(0, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4) :|: 0 = 0
f_282(0, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4) -> f_284(0, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4) :|: 2 < v36
f_284(0, v36, v63, v65, v67, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 1, 4) -> f_287(0, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4) :|: 0 = 0
f_287(0, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4) -> f_290(0, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4) :|: TRUE
f_290(0, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4) -> f_293(0, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4) :|: 0 = 0
f_293(0, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4) -> f_296(0, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4) :|: 0 = 0
f_296(0, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4) -> f_298(0, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4) :|: 0 = 0
f_298(0, v36, v63, v65, v67, 1, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 4) -> f_300(0, v36, v63, v65, v67, 1, v84, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 2, 4) :|: 2 + v84 = v36 && 1 <= v84
f_300(0, v36, v63, v65, v67, 1, v84, v1, v2, v3, v4, v5, v6, v64, v66, v68, v7, v9, v11, 3, 2, 4) -> f_304(1, v84, v1, v2, v3, v4, v5, v6, v63, v64, v65, v66, v67, v68, v7, v9, v11, 0, v36, 3, 2, 4) :|: 0 = 0
f_304(1, v84, v1, v2, v3, v4, v5, v6, v63, v64, v65, v66, v67, v68, v7, v9, v11, 0, v36, 3, 2, 4) -> f_308(1, v84, v1, v2, v3, v4, v5, v6, v63, v64, v65, v66, v67, v68, v7, v9, v11, 0, v36, 3, 2, 4) :|: TRUE
f_308(1, v84, v1, v2, v3, v4, v5, v6, v63, v64, v65, v66, v67, v68, v7, v9, v11, 0, v36, 3, 2, 4) -> f_265(1, v84, v1, v2, v3, v4, v5, v6, v7, v9, v11, 3, 1, 4, 0) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_267(1 + v71:0, v36:0, v63:0, v1:0, v2:0, v3:0, v4:0, v5:0, v6:0, v64:0, v7:0, v9:0, v11:0, 3, 1, 4, 0) -> f_267(v71:0, 1 + v36:0, v63:1, v1:0, v2:0, v3:0, v4:0, v5:0, v6:0, 3 + v63:1, v7:0, v9:0, v11:0, 3, 1, 4, 0) :|: v67:0 > 0 && v65:0 > 0 && v71:0 > -1 && v36:0 > -1 && v63:1 > 0
f_267(v17:0, 2 + v84:0, v63:0, v1:0, v2:0, v3:0, v4:0, v5:0, v6:0, v64:0, v7:0, v9:0, v11:0, 3, 1, 4, 0) -> f_267(1, v84:0, v63:1, v1:0, v2:0, v3:0, v4:0, v5:0, v6:0, 3 + v63:1, v7:0, v9:0, v11:0, 3, 1, 4, 0) :|: v67:0 > 0 && v65:0 > 0 && v17:0 < 1 && v84:0 > 0 && v63:1 > 0
Filtered unneeded arguments:
   f_267(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_267(x1, x2)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_267(sum~cons_1~v71:0, v36:0) -> f_267(v71:0, 1 + v36:0) :|: v71:0 > -1 && v36:0 > -1 && sum~cons_1~v71:0 = 1 + v71:0
f_267(v17:0, sum~cons_2~v84:0) -> f_267(1, v84:0) :|: v17:0 < 1 && v84:0 > 0 && sum~cons_2~v84:0 = 2 + v84:0

----------------------------------------

(8)
Obligation:
Rules:
f_267(sum~cons_1~v71:0, v36:0) -> f_267(v71:0, 1 + v36:0) :|: v71:0 > -1 && v36:0 > -1 && sum~cons_1~v71:0 = 1 + v71:0
f_267(v17:0, sum~cons_2~v84:0) -> f_267(1, v84:0) :|: v17:0 < 1 && v84:0 > 0 && sum~cons_2~v84:0 = 2 + v84:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_267(sum~cons_1~v71:0:0, v36:0:0) -> f_267(v71:0:0, 1 + v36:0:0) :|: v71:0:0 > -1 && v36:0:0 > -1 && sum~cons_1~v71:0:0 = 1 + v71:0:0
f_267(v17:0:0, sum~cons_2~v84:0:0) -> f_267(1, v84:0:0) :|: v17:0:0 < 1 && v84:0:0 > 0 && sum~cons_2~v84:0:0 = 2 + v84:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_267(x, x1)] = 2*x^2 + x1

The following rules are decreasing:
f_267(sum~cons_1~v71:0:0, v36:0:0) -> f_267(v71:0:0, 1 + v36:0:0) :|: v71:0:0 > -1 && v36:0:0 > -1 && sum~cons_1~v71:0:0 = 1 + v71:0:0
The following rules are bounded:
f_267(sum~cons_1~v71:0:0, v36:0:0) -> f_267(v71:0:0, 1 + v36:0:0) :|: v71:0:0 > -1 && v36:0:0 > -1 && sum~cons_1~v71:0:0 = 1 + v71:0:0
f_267(v17:0:0, sum~cons_2~v84:0:0) -> f_267(1, v84:0:0) :|: v17:0:0 < 1 && v84:0:0 > 0 && sum~cons_2~v84:0:0 = 2 + v84:0:0

----------------------------------------

(12)
Obligation:
Rules:
f_267(v17:0:0, sum~cons_2~v84:0:0) -> f_267(1, v84:0:0) :|: v17:0:0 < 1 && v84:0:0 > 0 && sum~cons_2~v84:0:0 = 2 + v84:0:0

----------------------------------------

(13) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
