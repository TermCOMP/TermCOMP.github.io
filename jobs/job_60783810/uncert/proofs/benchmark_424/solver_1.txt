YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/68QzG.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 393 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 17 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 10 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/68QzG.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/68QzG.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %3
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = load %2
		%7 = icmp sge %6 2
		br %7, %8, %21
	8:
		br %9
	9:
		%10 = load %3
		%11 = load %2
		%12 = add i32 %10, %11
		%13 = icmp sge %12 0
		br %13, %14, %20
	14:
		%15 = load %3
		%16 = load %2
		%17 = sub i32 %15, %16
		store %17, %3
		%18 = load %2
		%19 = add i32 %18, 1
		store %19, %2
		br %9
	20:
		br %21
	21:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_166(v47, v48, v49, v50, v51, 1, v56, v54, v55, v53, v57, v58, v59, v60, 0, 3, 2, 4) -> f_167(v47, v48, v49, v50, v51, 1, v56, v57, v55, v53, v54, v58, v59, v60, 0, 3, 2, 4) :|: 0 = 0
f_167(v47, v48, v49, v50, v51, 1, v56, v57, v55, v53, v54, v58, v59, v60, 0, 3, 2, 4) -> f_168(v47, v48, v49, v50, v51, 1, v56, v57, v62, v53, v54, v58, v59, v60, 0, 3, 2, 4) :|: v62 = v56 + v57
f_168(v47, v48, v49, v50, v51, 1, v56, v57, v62, v53, v54, v58, v59, v60, 0, 3, 2, 4) -> f_169(v47, v48, v49, v50, v51, 1, v56, v57, v62, v53, v54, v58, v59, v60, 0, 3, 2, 4) :|: 0 <= v62
f_169(v47, v48, v49, v50, v51, 1, v56, v57, v62, v53, v54, v58, v59, v60, 0, 3, 2, 4) -> f_171(v47, v48, v49, v50, v51, 1, v56, v57, v62, v53, v54, v58, v59, v60, 0, 3, 2, 4) :|: 0 = 0
f_171(v47, v48, v49, v50, v51, 1, v56, v57, v62, v53, v54, v58, v59, v60, 0, 3, 2, 4) -> f_173(v47, v48, v49, v50, v51, 1, v56, v57, v62, v53, v54, v58, v59, v60, 0, 3, 2, 4) :|: TRUE
f_173(v47, v48, v49, v50, v51, 1, v56, v57, v62, v53, v54, v58, v59, v60, 0, 3, 2, 4) -> f_175(v47, v48, v49, v50, v51, 1, v56, v57, v62, v54, v58, v59, v60, 0, 3, 2, 4) :|: 0 = 0
f_175(v47, v48, v49, v50, v51, 1, v56, v57, v62, v54, v58, v59, v60, 0, 3, 2, 4) -> f_177(v47, v48, v49, v50, v51, 1, v56, v57, v62, v54, v58, v59, v60, 0, 3, 2, 4) :|: 0 = 0
f_177(v47, v48, v49, v50, v51, 1, v56, v57, v62, v54, v58, v59, v60, 0, 3, 2, 4) -> f_178(v47, v48, v49, v50, v51, 1, v56, v57, v62, v66, v54, v58, v59, v60, 0, 3, 2, 4) :|: v66 + v57 = v56
f_178(v47, v48, v49, v50, v51, 1, v56, v57, v62, v66, v54, v58, v59, v60, 0, 3, 2, 4) -> f_179(v47, v48, v49, v50, v51, 1, v56, v57, v62, v66, v54, v58, v59, v60, 0, 3, 2, 4) :|: TRUE
f_179(v47, v48, v49, v50, v51, 1, v56, v57, v62, v66, v54, v58, v59, v60, 0, 3, 2, 4) -> f_180(v47, v48, v49, v50, v51, 1, v56, v57, v62, v66, v58, v59, v60, 0, 3, 2, 4) :|: 0 = 0
f_180(v47, v48, v49, v50, v51, 1, v56, v57, v62, v66, v58, v59, v60, 0, 3, 2, 4) -> f_181(v47, v48, v49, v50, v51, 1, v56, v57, v62, v66, v68, v58, v59, v60, 0, 3, 2, 4) :|: v68 = 1 + v57 && 4 <= v68
f_181(v47, v48, v49, v50, v51, 1, v56, v57, v62, v66, v68, v58, v59, v60, 0, 3, 2, 4) -> f_182(v47, v48, v49, v50, v51, 1, v56, v57, v62, v66, v68, v58, v59, v60, 0, 3, 2, 4) :|: TRUE
f_182(v47, v48, v49, v50, v51, 1, v56, v57, v62, v66, v68, v58, v59, v60, 0, 3, 2, 4) -> f_183(v47, v48, v49, v50, v51, 1, v56, v57, v62, v66, v68, v58, v59, v60, 0, 3, 2, 4) :|: TRUE
f_183(v47, v48, v49, v50, v51, 1, v56, v57, v62, v66, v68, v58, v59, v60, 0, 3, 2, 4) -> f_165(v47, v48, v49, v50, v51, 1, v56, v57, v62, v66, v68, v58, v59, v60, 0, 3, 2, 4) :|: TRUE
f_165(v47, v48, v49, v50, v51, 1, v53, v54, v55, v56, v57, v58, v59, v60, 0, 3, 2, 4) -> f_166(v47, v48, v49, v50, v51, 1, v56, v54, v55, v53, v57, v58, v59, v60, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_166(v47:0, v48:0, v49:0, v50:0, v51:0, 1, v66:0 + v57:0, v54:0, v55:0, v53:0, v57:0, v58:0, v59:0, v60:0, 0, 3, 2, 4) -> f_166(v47:0, v48:0, v49:0, v50:0, v51:0, 1, v66:0, v57:0, v66:0 + v57:0 + v57:0, v66:0 + v57:0, 1 + v57:0, v58:0, v59:0, v60:0, 0, 3, 2, 4) :|: v57:0 > 2 && v66:0 + v57:0 + v57:0 > -1
Filtered unneeded arguments:
   f_166(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_166(x7, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_166(sum~v66:0~v57:0, v57:0) -> f_166(v66:0, 1 + v57:0) :|: v57:0 > 2 && v66:0 + v57:0 + v57:0 > -1 && sum~v66:0~v57:0 = v66:0 + v57:0

----------------------------------------

(8)
Obligation:
Rules:
f_166(sum~v66:0~v57:0, v57:0) -> f_166(v66:0, 1 + v57:0) :|: v57:0 > 2 && v66:0 + v57:0 + v57:0 > -1 && sum~v66:0~v57:0 = v66:0 + v57:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_166(sum~v66:0:0~v57:0:0, v57:0:0) -> f_166(v66:0:0, 1 + v57:0:0) :|: v57:0:0 > 2 && v66:0:0 + v57:0:0 + v57:0:0 > -1 && sum~v66:0:0~v57:0:0 = v66:0:0 + v57:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_166 ] = 1/2*f_166_2 + 1/2*f_166_1

The following rules are decreasing:
f_166(sum~v66:0:0~v57:0:0, v57:0:0) -> f_166(v66:0:0, 1 + v57:0:0) :|: v57:0:0 > 2 && v66:0:0 + v57:0:0 + v57:0:0 > -1 && sum~v66:0:0~v57:0:0 = v66:0:0 + v57:0:0

The following rules are bounded:
f_166(sum~v66:0:0~v57:0:0, v57:0:0) -> f_166(v66:0:0, 1 + v57:0:0) :|: v57:0:0 > 2 && v66:0:0 + v57:0:0 + v57:0:0 > -1 && sum~v66:0:0~v57:0:0 = v66:0:0 + v57:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
