YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/dsylV.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 21 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2898 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 44 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 9 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 51 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/dsylV.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/dsylV.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		%8 = alloca *i32, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%11 = alloca i8, numElementsLit: 4, align 16
		%12 = bitcast *i8 %11 to *i32
		store %12, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %8)
		%13 = alloca i8, numElementsLit: 4, align 16
		%14 = bitcast *i8 %13 to *i32
		store %14, %8
		%15 = load %4
		%16 = load %6
		store %15, %16
		%17 = load %5
		%18 = load %7
		store %17, %18
		%19 = load %8
		store 0, %19
		%20 = load %6
		%21 = load %20
		%22 = icmp sle %21 0
		br %22, %27, %23
	23:
		%24 = load %7
		%25 = load %24
		%26 = icmp sle %25 0
		br %26, %27, %33
	27:
		%28 = load %6
		%29 = load %28
		%30 = load %7
		%31 = load %30
		%32 = add i32 %29, %31
		store %32, %3
		br %62
	33:
		br %34
	34:
		%35 = load %6
		%36 = load %35
		%37 = icmp eq %36 0
		%38 = xor i1 %37, 1
		br %38, %39, %59
	39:
		%40 = load %6
		%41 = load %40
		%42 = load %7
		%43 = load %42
		%44 = icmp sgt %41 %43
		br %44, %45, %49
	45:
		%46 = load %7
		%47 = load %46
		%48 = load %6
		store %47, %48
		br %54
	49:
		%50 = load %6
		%51 = load %50
		%52 = sub i32 %51, 1
		%53 = load %6
		store %52, %53
		br %54
	54:
		%55 = load %8
		%56 = load %55
		%57 = add i32 %56, 1
		%58 = load %8
		store %57, %58
		br %34
	59:
		%60 = load %8
		%61 = load %60
		store %61, %3
		br %62
	62:
		%63 = load %3
		ret %63

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 86
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 25 rulesP rules:
f_835(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1378, 1, v1380, v1381, v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_837(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1378, 1, v1381, v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 0 = 0
f_837(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1378, 1, v1381, v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_839(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1378, 1, v1381, v1422, v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: v1422 = 1 + v1381 && 2 <= v1422
f_839(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1378, 1, v1381, v1422, v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_841(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1378, 1, v1381, v1422, v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 0 = 0
f_841(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1378, 1, v1381, v1422, v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_843(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1378, 1, v1381, v1422, v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: TRUE
f_843(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1378, 1, v1381, v1422, v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_845(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1378, 1, v1381, v1422, v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: TRUE
f_845(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1378, 1, v1381, v1422, v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_847(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1378, 1, v1381, v1422, v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 0 = 0
f_847(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1378, 1, v1381, v1422, v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_849(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1378, v1381, v1422, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 0 = 0
f_849(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1378, v1381, v1422, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_852(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1378, v1381, v1422, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: v1382 != 0 && 2 <= v1378 && 3 <= v1366 && 2 <= v1367
f_852(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1378, v1381, v1422, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_854(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1378, v1381, v1422, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 0 = 0
f_854(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1378, v1381, v1422, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_856(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1378, v1381, v1422, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 0 = 0
f_856(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1378, v1381, v1422, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_858(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1378, v1381, v1422, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: TRUE
f_858(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1378, v1381, v1422, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_860(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1378, v1381, v1422, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 0 = 0
f_860(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1378, v1381, v1422, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_862(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1378, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 0 = 0
f_862(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1378, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_864(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1378, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 0 = 0
f_864(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1378, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_866(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1378, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 0 = 0
f_866(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1378, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_868(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1378, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 0 = 0
f_868(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1378, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_870(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1378, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: TRUE
f_870(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1378, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_871(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1378, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 0 = 0
f_871(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1378, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_872(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 0 = 0
f_872(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_873(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1603, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 1 + v1603 = v1382 && 0 <= v1603
f_873(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1603, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_874(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1603, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 0 = 0
f_874(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1603, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_875(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1603, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: TRUE
f_875(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1603, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_876(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1603, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: TRUE
f_876(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1603, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_833(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1382, 1, v1381, v1422, v1603, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: TRUE
f_833(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1378, 1, v1380, v1381, v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) -> f_835(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376, 0, v1378, 1, v1380, v1381, v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_835(v1366:0, v1367:0, v1368:0, v1369:0, v1370:0, v1371:0, v1372:0, v1373:0, v1374:0, v1375:0, v1376:0, 0, v1378:0, 1, v1380:0, v1381:0, 1 + v1603:0, v1383:0, v1384:0, v1385:0, v1386:0, v1387:0, v1388:0, v1389:0, v1390:0, v1391:0, v1392:0, v1393:0, 3, 7, 2, 4, 8) -> f_835(v1366:0, v1367:0, v1368:0, v1369:0, v1370:0, v1371:0, v1372:0, v1373:0, v1374:0, v1375:0, v1376:0, 0, 1 + v1603:0, 1, v1381:0, 1 + v1381:0, v1603:0, v1383:0, v1384:0, v1385:0, v1386:0, v1387:0, v1388:0, v1389:0, v1390:0, v1391:0, v1392:0, v1393:0, 3, 7, 2, 4, 8) :|: v1381:0 > 0 && v1378:0 > 1 && v1603:0 > -1 && v1366:0 > 2 && v1367:0 > 1
Filtered unneeded arguments:
   f_835(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) -> f_835(x1, x2, x13, x16, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_835(v1366:0, v1367:0, v1378:0, v1381:0, sum~cons_1~v1603:0) -> f_835(v1366:0, v1367:0, 1 + v1603:0, 1 + v1381:0, v1603:0) :|: v1378:0 > 1 && v1381:0 > 0 && v1603:0 > -1 && v1367:0 > 1 && v1366:0 > 2 && sum~cons_1~v1603:0 = 1 + v1603:0

----------------------------------------

(9)
Obligation:
Rules:
f_835(v1366:0, v1367:0, v1378:0, v1381:0, sum~cons_1~v1603:0) -> f_835(v1366:0, v1367:0, 1 + v1603:0, 1 + v1381:0, v1603:0) :|: v1378:0 > 1 && v1381:0 > 0 && v1603:0 > -1 && v1367:0 > 1 && v1366:0 > 2 && sum~cons_1~v1603:0 = 1 + v1603:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_835(v1366:0:0, v1367:0:0, v1378:0:0, v1381:0:0, sum~cons_1~v1603:0:0) -> f_835(v1366:0:0, v1367:0:0, 1 + v1603:0:0, 1 + v1381:0:0, v1603:0:0) :|: v1367:0:0 > 1 && v1366:0:0 > 2 && v1603:0:0 > -1 && v1381:0:0 > 0 && v1378:0:0 > 1 && sum~cons_1~v1603:0:0 = 1 + v1603:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_835(x, x1, x2, x3, x4)] = x4

The following rules are decreasing:
f_835(v1366:0:0, v1367:0:0, v1378:0:0, v1381:0:0, sum~cons_1~v1603:0:0) -> f_835(v1366:0:0, v1367:0:0, 1 + v1603:0:0, 1 + v1381:0:0, v1603:0:0) :|: v1367:0:0 > 1 && v1366:0:0 > 2 && v1603:0:0 > -1 && v1381:0:0 > 0 && v1378:0:0 > 1 && sum~cons_1~v1603:0:0 = 1 + v1603:0:0
The following rules are bounded:
f_835(v1366:0:0, v1367:0:0, v1378:0:0, v1381:0:0, sum~cons_1~v1603:0:0) -> f_835(v1366:0:0, v1367:0:0, 1 + v1603:0:0, 1 + v1381:0:0, v1603:0:0) :|: v1367:0:0 > 1 && v1366:0:0 > 2 && v1603:0:0 > -1 && v1381:0:0 > 0 && v1378:0:0 > 1 && sum~cons_1~v1603:0:0 = 1 + v1603:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 25 rulesP rules:
f_784(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1262, 1, v1264, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 4, 8) -> f_787(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 4, 8) :|: 0 = 0
f_787(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 4, 8) -> f_791(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: v1264 != 0 && 2 <= v1262 && 2 <= v1250 && 2 <= v1251
f_791(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_795(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: 0 = 0
f_795(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_799(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: 0 = 0
f_799(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_803(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: TRUE
f_803(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_807(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: 0 = 0
f_807(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_811(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: 0 = 0
f_811(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_815(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: 0 = 0
f_815(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_819(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: 0 = 0
f_819(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_822(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: 0 = 0
f_822(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_825(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: TRUE
f_825(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_827(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: 0 = 0
f_827(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1262, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_829(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: 0 = 0
f_829(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_831(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: 1 + v1350 = v1264 && 0 <= v1350
f_831(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_834(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: 0 = 0
f_834(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_836(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: TRUE
f_836(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_838(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: TRUE
f_838(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_840(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: 0 = 0
f_840(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_842(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: 0 = 0
f_842(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_844(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1266, v1424, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: v1424 = 1 + v1266 && 2 <= v1424
f_844(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1266, v1424, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_846(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1266, v1424, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: 0 = 0
f_846(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1266, v1424, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_848(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1266, v1424, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: TRUE
f_848(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1266, v1424, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_850(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1266, v1424, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) :|: TRUE
f_850(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1266, v1424, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 2, 4, 8) -> f_781(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1264, 1, v1350, v1266, v1424, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 4, 8) :|: TRUE
f_781(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1262, 1, v1264, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 4, 8) -> f_784(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260, 0, v1262, 1, v1264, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_784(v1250:0, v1251:0, v1252:0, v1253:0, v1254:0, v1255:0, v1256:0, v1257:0, v1258:0, v1259:0, v1260:0, 0, v1262:0, 1, 1 + v1350:0, v1265:0, v1266:0, v1267:0, v1268:0, v1269:0, v1270:0, v1271:0, v1272:0, v1273:0, v1274:0, v1275:0, v1276:0, v1277:0, 3, 7, 4, 8) -> f_784(v1250:0, v1251:0, v1252:0, v1253:0, v1254:0, v1255:0, v1256:0, v1257:0, v1258:0, v1259:0, v1260:0, 0, 1 + v1350:0, 1, v1350:0, v1266:0, 1 + v1266:0, v1267:0, v1268:0, v1269:0, v1270:0, v1271:0, v1272:0, v1273:0, v1274:0, v1275:0, v1276:0, v1277:0, 3, 7, 4, 8) :|: v1262:0 > 1 && v1350:0 > -1 && v1250:0 > 1 && v1251:0 > 1 && v1266:0 > 0
Filtered unneeded arguments:
   f_784(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32) -> f_784(x1, x2, x13, x15, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_784(v1250:0, v1251:0, v1262:0, sum~cons_1~v1350:0, v1266:0) -> f_784(v1250:0, v1251:0, 1 + v1350:0, v1350:0, 1 + v1266:0) :|: v1350:0 > -1 && v1262:0 > 1 && v1250:0 > 1 && v1266:0 > 0 && v1251:0 > 1 && sum~cons_1~v1350:0 = 1 + v1350:0

----------------------------------------

(16)
Obligation:
Rules:
f_784(v1250:0, v1251:0, v1262:0, sum~cons_1~v1350:0, v1266:0) -> f_784(v1250:0, v1251:0, 1 + v1350:0, v1350:0, 1 + v1266:0) :|: v1350:0 > -1 && v1262:0 > 1 && v1250:0 > 1 && v1266:0 > 0 && v1251:0 > 1 && sum~cons_1~v1350:0 = 1 + v1350:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_784(v1250:0:0, v1251:0:0, v1262:0:0, sum~cons_1~v1350:0:0, v1266:0:0) -> f_784(v1250:0:0, v1251:0:0, 1 + v1350:0:0, v1350:0:0, 1 + v1266:0:0) :|: v1266:0:0 > 0 && v1251:0:0 > 1 && v1250:0:0 > 1 && v1262:0:0 > 1 && v1350:0:0 > -1 && sum~cons_1~v1350:0:0 = 1 + v1350:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_784 ] = f_784_4

The following rules are decreasing:
f_784(v1250:0:0, v1251:0:0, v1262:0:0, sum~cons_1~v1350:0:0, v1266:0:0) -> f_784(v1250:0:0, v1251:0:0, 1 + v1350:0:0, v1350:0:0, 1 + v1266:0:0) :|: v1266:0:0 > 0 && v1251:0:0 > 1 && v1250:0:0 > 1 && v1262:0:0 > 1 && v1350:0:0 > -1 && sum~cons_1~v1350:0:0 = 1 + v1350:0:0

The following rules are bounded:
f_784(v1250:0:0, v1251:0:0, v1262:0:0, sum~cons_1~v1350:0:0, v1266:0:0) -> f_784(v1250:0:0, v1251:0:0, 1 + v1350:0:0, v1350:0:0, 1 + v1266:0:0) :|: v1266:0:0 > 0 && v1251:0:0 > 1 && v1250:0:0 > 1 && v1262:0:0 > 1 && v1350:0:0 > -1 && sum~cons_1~v1350:0:0 = 1 + v1350:0:0


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
