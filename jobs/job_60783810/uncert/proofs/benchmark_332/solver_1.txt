YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/16zww.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 290 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 46 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 11 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/16zww.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/16zww.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		br %9
	9:
		%10 = load %2
		%11 = icmp sgt %10 0
		br %11, %12, %21
	12:
		%13 = load %2
		%14 = load %3
		%15 = icmp slt %13 %14
		br %15, %16, %21
	16:
		%17 = load %2
		%18 = load %5
		%19 = mul i32 2, %18
		%20 = icmp sgt %17 %19
		br %21
	21:
		%22 = phi [0, %12], [0, %9], [%20, %16]
		br %22, %23, %27
	23:
		%24 = load %2
		store %24, %5
		%25 = call i32 @__VERIFIER_nondet_int()
		store %25, %2
		%26 = load %4
		store %26, %3
		br %9
	27:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_210(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v349, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_211(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v349, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: 0 < v352
f_211(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v349, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_213(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v349, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: 0 = 0
f_213(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v349, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_215(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v349, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: TRUE
f_215(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v349, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_217(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v349, v347, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: 0 = 0
f_217(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v349, v347, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_219(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: 0 = 0
f_219(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_220(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: v352 < v346 && 2 <= v346
f_220(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_222(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: 0 = 0
f_222(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_224(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: TRUE
f_224(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_226(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v350, v351, v347, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: 0 = 0
f_226(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v350, v351, v347, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_228(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: 0 = 0
f_228(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_229(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: v460 = 2 * v347 && 2 <= v460
f_229(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_230(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: v460 < v352 && 3 <= v352 && 4 <= v346
f_230(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_232(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: 0 = 0
f_232(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_234(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: 0 = 0
f_234(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_236(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: TRUE
f_236(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_238(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: 0 = 0
f_238(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_239(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: TRUE
f_239(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_240(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v595, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: TRUE
f_240(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v595, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_241(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v595, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: TRUE
f_241(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v595, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_242(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v595, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: 0 = 0
f_242(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v595, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_243(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v595, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: TRUE
f_243(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v595, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_244(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v595, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: TRUE
f_244(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v460, v595, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_209(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v346, v347, v460, v595, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: TRUE
f_209(v339, v340, v341, v342, v343, v344, v345, v346, v347, 1, v349, v350, v351, v352, v353, v354, v355, v356, v357, 0, 3, 2, 4) -> f_210(v339, v340, v341, v342, v343, v344, v345, v346, v352, 1, v347, v349, v350, v351, v353, v354, v355, v356, v357, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_210(v339:0, v340:0, v341:0, v342:0, v343:0, v344:0, v345:0, v346:0, v352:0, 1, v347:0, v349:0, v350:0, v351:0, v353:0, v354:0, v355:0, v356:0, v357:0, 0, 3, 2, 4) -> f_210(v339:0, v340:0, v341:0, v342:0, v343:0, v344:0, v345:0, v346:0, v595:0, 1, v352:0, v346:0, v347:0, 2 * v347:0, v353:0, v354:0, v355:0, v356:0, v357:0, 0, 3, 2, 4) :|: v352:0 > 2 && v346:0 > 3 && v352:0 < v346:0 && 2 * v347:0 > 1 && v352:0 > 2 * v347:0
Filtered unneeded arguments:
   f_210(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_210(x8, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_210(v346:0, v352:0, v347:0) -> f_210(v346:0, v595:0, v352:0) :|: v346:0 > 3 && v352:0 > 2 && v352:0 < v346:0 && v352:0 > 2 * v347:0 && 2 * v347:0 > 1

----------------------------------------

(8)
Obligation:
Rules:
f_210(v346:0, v352:0, v347:0) -> f_210(v346:0, v595:0, v352:0) :|: v346:0 > 3 && v352:0 > 2 && v352:0 < v346:0 && v352:0 > 2 * v347:0 && 2 * v347:0 > 1

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_210(v346:0:0, v352:0:0, v347:0:0) -> f_210(v346:0:0, v595:0:0, v352:0:0) :|: v352:0:0 > 2 * v347:0:0 && 2 * v347:0:0 > 1 && v352:0:0 < v346:0:0 && v352:0:0 > 2 && v346:0:0 > 3

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_210 ] = -1/2*f_210_3 + 1/4*f_210_1

The following rules are decreasing:
f_210(v346:0:0, v352:0:0, v347:0:0) -> f_210(v346:0:0, v595:0:0, v352:0:0) :|: v352:0:0 > 2 * v347:0:0 && 2 * v347:0:0 > 1 && v352:0:0 < v346:0:0 && v352:0:0 > 2 && v346:0:0 > 3

The following rules are bounded:
f_210(v346:0:0, v352:0:0, v347:0:0) -> f_210(v346:0:0, v595:0:0, v352:0:0) :|: v352:0:0 > 2 * v347:0:0 && 2 * v347:0:0 > 1 && v352:0:0 < v346:0:0 && v352:0:0 > 2 && v346:0:0 > 3


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
