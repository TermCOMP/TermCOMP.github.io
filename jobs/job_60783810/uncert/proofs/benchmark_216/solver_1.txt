YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/hLM1U.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 42 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 451 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 8 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 5 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 13 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/hLM1U.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/hLM1U.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		store 0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %3
		br %4
	4:
		%5 = load %2
		%6 = icmp slt %5 20
		br %6, %7, %16
	7:
		%8 = load %2
		%9 = add i32 %8, 1
		store %9, %2
		%10 = load %2
		%11 = icmp sle %10 10
		br %11, %12, %13
	12:
		br %4
	13:
		%14 = load %3
		%15 = add i32 %14, 1
		store %15, %3
		br %4
	16:
		%17 = load %3
		ret %17


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_259(v214, v215, v216, v219, 1, v217, 0, v221, v222, v223, v224, v225, 3, 10, 19, 11, 20, 9, 4) -> f_260(v214, v215, v216, v219, 1, v217, 0, v221, v222, v223, v224, v225, 3, 10, 18, 11, 19, 8, 9, 4) :|: v219 < 20 && v217 <= 18 && v221 <= 8 && v222 <= 9
f_260(v214, v215, v216, v219, 1, v217, 0, v221, v222, v223, v224, v225, 3, 10, 18, 11, 19, 8, 9, 4) -> f_262(v214, v215, v216, v219, 1, v217, 0, v221, v222, v223, v224, v225, 3, 10, 18, 11, 19, 8, 9, 4) :|: 0 = 0
f_262(v214, v215, v216, v219, 1, v217, 0, v221, v222, v223, v224, v225, 3, 10, 18, 11, 19, 8, 9, 4) -> f_264(v214, v215, v216, v219, 1, v217, 0, v221, v222, v223, v224, v225, 3, 10, 18, 11, 19, 8, 9, 4) :|: TRUE
f_264(v214, v215, v216, v219, 1, v217, 0, v221, v222, v223, v224, v225, 3, 10, 18, 11, 19, 8, 9, 4) -> f_266(v214, v215, v216, v219, 1, 0, v221, v222, v223, v224, v225, 3, 11, 19, 8, 9, 4) :|: 0 = 0
f_266(v214, v215, v216, v219, 1, 0, v221, v222, v223, v224, v225, 3, 11, 19, 8, 9, 4) -> f_268(v214, v215, v216, v219, 1, v229, 0, v221, v222, v223, v224, v225, 3, 11, 19, 8, 9, 4, 12, 20) :|: v229 = 1 + v219 && 12 <= v229 && v229 <= 20
f_268(v214, v215, v216, v219, 1, v229, 0, v221, v222, v223, v224, v225, 3, 11, 19, 8, 9, 4, 12, 20) -> f_269(v214, v215, v216, v219, 1, v229, 0, v221, v222, v223, v224, v225, 3, 11, 19, 8, 9, 4, 12, 20) :|: TRUE
f_269(v214, v215, v216, v219, 1, v229, 0, v221, v222, v223, v224, v225, 3, 11, 19, 8, 9, 4, 12, 20) -> f_270(v214, v215, v216, v219, 1, v229, 0, v221, v222, v223, v224, v225, 3, 11, 19, 8, 9, 4, 12, 20) :|: 0 = 0
f_270(v214, v215, v216, v219, 1, v229, 0, v221, v222, v223, v224, v225, 3, 11, 19, 8, 9, 4, 12, 20) -> f_271(v214, v215, v216, v219, 1, v229, 0, v221, v222, v223, v224, v225, 3, 11, 19, 8, 9, 4, 12, 20) :|: 0 = 0
f_271(v214, v215, v216, v219, 1, v229, 0, v221, v222, v223, v224, v225, 3, 11, 19, 8, 9, 4, 12, 20) -> f_272(v214, v215, v216, v219, 1, v229, 0, v221, v222, v223, v224, v225, 3, 11, 19, 8, 9, 4, 12, 20) :|: TRUE
f_272(v214, v215, v216, v219, 1, v229, 0, v221, v222, v223, v224, v225, 3, 11, 19, 8, 9, 4, 12, 20) -> f_273(v214, v215, v216, v219, 1, v229, 0, v222, v223, v224, v225, 3, 10, 11, 19, 9, 4, 12, 20) :|: 0 = 0
f_273(v214, v215, v216, v219, 1, v229, 0, v222, v223, v224, v225, 3, 10, 11, 19, 9, 4, 12, 20) -> f_274(v214, v215, v216, v219, 1, v229, 0, v222, v234, v223, v224, v225, 3, 10, 11, 19, 9, 4, 12, 20, 2) :|: v234 = 1 + v222 && 2 <= v234 && v234 <= 10
f_274(v214, v215, v216, v219, 1, v229, 0, v222, v234, v223, v224, v225, 3, 10, 11, 19, 9, 4, 12, 20, 2) -> f_275(v214, v215, v216, v219, 1, v229, 0, v222, v234, v223, v224, v225, 3, 10, 11, 19, 9, 4, 12, 20, 2) :|: TRUE
f_275(v214, v215, v216, v219, 1, v229, 0, v222, v234, v223, v224, v225, 3, 10, 11, 19, 9, 4, 12, 20, 2) -> f_276(v214, v215, v216, v219, 1, v229, 0, v222, v234, v223, v224, v225, 3, 10, 11, 19, 9, 4, 12, 20, 2) :|: TRUE
f_276(v214, v215, v216, v219, 1, v229, 0, v222, v234, v223, v224, v225, 3, 10, 11, 19, 9, 4, 12, 20, 2) -> f_258(v214, v215, v216, v219, 1, v229, 0, v222, v234, v223, v224, v225, 3, 10, 19, 11, 20, 9, 4) :|: TRUE
f_258(v214, v215, v216, v217, 1, v219, 0, v221, v222, v223, v224, v225, 3, 10, 19, 11, 20, 9, 4) -> f_259(v214, v215, v216, v219, 1, v217, 0, v221, v222, v223, v224, v225, 3, 10, 19, 11, 20, 9, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_259(v214:0, v215:0, v216:0, v219:0, 1, v217:0, 0, v221:0, v222:0, v223:0, v224:0, v225:0, 3, 10, 19, 11, 20, 9, 4) -> f_259(v214:0, v215:0, v216:0, 1 + v219:0, 1, v219:0, 0, v222:0, 1 + v222:0, v223:0, v224:0, v225:0, 3, 10, 19, 11, 20, 9, 4) :|: v217:0 < 19 && v219:0 < 20 && v221:0 < 9 && v222:0 < 10 && v219:0 > 10 && v222:0 > 0
Filtered unneeded arguments:
   f_259(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_259(x4, x6, x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_259(v219:0, v217:0, v221:0, v222:0) -> f_259(1 + v219:0, v219:0, v222:0, 1 + v222:0) :|: v219:0 < 20 && v217:0 < 19 && v221:0 < 9 && v222:0 < 10 && v222:0 > 0 && v219:0 > 10

----------------------------------------

(9)
Obligation:
Rules:
f_259(v219:0, v217:0, v221:0, v222:0) -> f_259(1 + v219:0, v219:0, v222:0, 1 + v222:0) :|: v219:0 < 20 && v217:0 < 19 && v221:0 < 9 && v222:0 < 10 && v222:0 > 0 && v219:0 > 10

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_259(v219:0:0, v217:0:0, v221:0:0, v222:0:0) -> f_259(1 + v219:0:0, v219:0:0, v222:0:0, 1 + v222:0:0) :|: v222:0:0 > 0 && v219:0:0 > 10 && v222:0:0 < 10 && v221:0:0 < 9 && v217:0:0 < 19 && v219:0:0 < 20

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_259 ] = -1*f_259_1

The following rules are decreasing:
f_259(v219:0:0, v217:0:0, v221:0:0, v222:0:0) -> f_259(1 + v219:0:0, v219:0:0, v222:0:0, 1 + v222:0:0) :|: v222:0:0 > 0 && v219:0:0 > 10 && v222:0:0 < 10 && v221:0:0 < 9 && v217:0:0 < 19 && v219:0:0 < 20

The following rules are bounded:
f_259(v219:0:0, v217:0:0, v221:0:0, v222:0:0) -> f_259(1 + v219:0:0, v219:0:0, v222:0:0, 1 + v222:0:0) :|: v222:0:0 > 0 && v219:0:0 > 10 && v222:0:0 < 10 && v221:0:0 < 9 && v217:0:0 < 19 && v219:0:0 < 20


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_161(v55, v56, v57, v60, 1, v58, v61, v62, v63, 0, 3, 9, 10, 4) -> f_162(v55, v56, v57, v60, 1, v58, v61, v62, v63, 0, 3, 9, 10, 4) :|: 0 = 0
f_162(v55, v56, v57, v60, 1, v58, v61, v62, v63, 0, 3, 9, 10, 4) -> f_163(v55, v56, v57, v60, 1, v58, v61, v62, v63, 0, 3, 9, 10, 4) :|: TRUE
f_163(v55, v56, v57, v60, 1, v58, v61, v62, v63, 0, 3, 9, 10, 4) -> f_164(v55, v56, v57, v60, 1, v61, v62, v63, 0, 3, 10, 4) :|: 0 = 0
f_164(v55, v56, v57, v60, 1, v61, v62, v63, 0, 3, 10, 4) -> f_165(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 10, 4, 2, 11) :|: v65 = 1 + v60 && 2 <= v65 && v65 <= 11
f_165(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 10, 4, 2, 11) -> f_166(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 10, 4, 2, 11) :|: TRUE
f_166(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 10, 4, 2, 11) -> f_167(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 10, 4, 2, 11) :|: 0 = 0
f_167(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 10, 4, 2, 11) -> f_168(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) :|: v65 <= 10 && v60 <= 9
f_168(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) -> f_170(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) :|: 0 = 0
f_170(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) -> f_172(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) :|: TRUE
f_172(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) -> f_174(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) :|: TRUE
f_174(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 4, 2, 10) -> f_160(v55, v56, v57, v60, 1, v65, v61, v62, v63, 0, 3, 9, 10, 4) :|: TRUE
f_160(v55, v56, v57, v58, 1, v60, v61, v62, v63, 0, 3, 9, 10, 4) -> f_161(v55, v56, v57, v60, 1, v58, v61, v62, v63, 0, 3, 9, 10, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_161(v55:0, v56:0, v57:0, v60:0, 1, v58:0, v61:0, v62:0, v63:0, 0, 3, 9, 10, 4) -> f_161(v55:0, v56:0, v57:0, 1 + v60:0, 1, v60:0, v61:0, v62:0, v63:0, 0, 3, 9, 10, 4) :|: v60:0 > 0 && v60:0 < 11 && v60:0 < 10
Filtered unneeded arguments:
   f_161(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_161(x4)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_161(v60:0) -> f_161(1 + v60:0) :|: v60:0 < 11 && v60:0 < 10 && v60:0 > 0

----------------------------------------

(16)
Obligation:
Rules:
f_161(v60:0) -> f_161(1 + v60:0) :|: v60:0 < 11 && v60:0 < 10 && v60:0 > 0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_161(v60:0:0) -> f_161(1 + v60:0:0) :|: v60:0:0 < 11 && v60:0:0 < 10 && v60:0:0 > 0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_161(x)] = 9 - x

The following rules are decreasing:
f_161(v60:0:0) -> f_161(1 + v60:0:0) :|: v60:0:0 < 11 && v60:0:0 < 10 && v60:0:0 > 0
The following rules are bounded:
f_161(v60:0:0) -> f_161(1 + v60:0:0) :|: v60:0:0 < 11 && v60:0:0 < 10 && v60:0:0 > 0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
