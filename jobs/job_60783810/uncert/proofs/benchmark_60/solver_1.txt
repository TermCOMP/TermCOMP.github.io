YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/lGsAk.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 54 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 13.3 s]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 34 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 30 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 16 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 30 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (27) YES
    (28) LLVM Symbolic Execution SCC
        (29) SCC2IRS [SOUND, 38 ms]
        (30) IntTRS
        (31) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (32) IntTRS
        (33) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (34) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/lGsAk.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/lGsAk.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cstrncpy" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8, 1 *i8, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		%6 = alloca i32, align 4
		%7 = alloca *i8, align 8
		%8 = alloca *i8, align 8
		%9 = alloca *i8, align 8
		%10 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %7)
		%11 = load %4
		store %11, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %8)
		%12 = load %5
		store %12, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %9)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %10)
		br %13
	13:
		%14 = load %6
		%15 = icmp sgt %14 0
		br %15, %16, %38
	16:
		%17 = load %6
		%18 = add i32 %17, -1
		store %18, %6
		%19 = load %8
		%20 = getelementptr %19, 1
		store %20, %8
		%21 = load %19
		%22 = load %7
		%23 = getelementptr %22, 1
		store %23, %7
		store %21, %22
		%24 = sext i8 %21 to i32
		%25 = icmp eq %24 0
		br %25, %26, %37
	26:
		%27 = load %7
		store %27, %9
		%28 = load %6
		store %28, %10
		br %29
	29:
		%30 = load %10
		%31 = add i32 %30, -1
		store %31, %10
		%32 = icmp ne %30 0
		br %32, %33, %36
	33:
		%34 = load %9
		%35 = getelementptr %34, 1
		store %35, %9
		store 0, %34
		br %29
	36:
		br %38
	37:
		br %13
	38:
		%39 = load %4
		ret %39

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 63
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = load %2
		%9 = icmp slt %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %11
	11:
		%12 = load %3
		%13 = icmp slt %12 1
		br %13, %14, %15
	14:
		store 1, %3
		br %15
	15:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%16 = load %3
		%17 = sext i32 %16 to i64
		%18 = mul i64 %17, 1
		%19 = alloca i8, numElementsLit: %18, align 16
		store %19, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%20 = load %2
		%21 = sext i32 %20 to i64
		%22 = mul i64 %21, 1
		%23 = alloca i8, numElementsLit: %22, align 16
		store %23, %5
		%24 = load %5
		%25 = load %2
		%26 = sub i32 %25, 1
		%27 = sext i32 %26 to i64
		%28 = getelementptr %24, %27
		store 0, %28
		%29 = load %4
		%30 = load %5
		%31 = load %3
		%32 = call *i8 @cstrncpy(*i8 %29, *i8 %30, i32 %31)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 4 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_1035(v5193, v5194, v5195, v5196, v5197, v5198, v5199, v5200, v5201, v5202, v5203, 1, v5205, v5206, v5207, 0, v5209, v5210, v5211, v5212, v5214, v5215, v5223, v5216, v5224, v5217, v5225, v5218, v5226, v5219, v5227, v5228, v5222, v5229, v5230, v5231, v5232, v5233, v5234, v5235, v5237, v5236, v5238, v5213, v5220, v5221, 3, 7, 2, 4, 8) -> f_1037(v5193, v5194, v5195, v5196, v5197, v5198, v5199, v5200, v5201, v5202, v5203, 1, v5205, v5206, v5207, 0, v5209, v5210, v5211, v5212, v5214, v5339, v5215, v5223, v5216, v5224, v5217, v5225, v5218, v5226, v5219, v5227, v5228, v5222, v5229, v5230, v5231, v5232, v5233, v5234, v5235, v5237, v5236, v5238, v5213, v5220, v5221, 3, 7, 2, 4, 8) :|: v5339 = 1 + v5214 && 4 <= v5339
f_1037(v5193, v5194, v5195, v5196, v5197, v5198, v5199, v5200, v5201, v5202, v5203, 1, v5205, v5206, v5207, 0, v5209, v5210, v5211, v5212, v5214, v5339, v5215, v5223, v5216, v5224, v5217, v5225, v5218, v5226, v5219, v5227, v5228, v5222, v5229, v5230, v5231, v5232, v5233, v5234, v5235, v5237, v5236, v5238, v5213, v5220, v5221, 3, 7, 2, 4, 8) -> f_1039(v5193, v5194, v5195, v5196, v5197, v5198, v5199, v5200, v5201, v5202, v5203, 1, v5205, v5206, v5207, 0, v5209, v5210, v5211, v5212, v5214, v5339, v5215, v5223, v5216, v5224, v5217, v5225, v5218, v5226, v5219, v5227, v5228, v5222, v5229, v5230, v5231, v5232, v5233, v5234, v5235, v5237, v5236, v5238, v5213, v5220, v5221, 3, 7, 2, 4, 8) :|: TRUE
f_1039(v5193, v5194, v5195, v5196, v5197, v5198, v5199, v5200, v5201, v5202, v5203, 1, v5205, v5206, v5207, 0, v5209, v5210, v5211, v5212, v5214, v5339, v5215, v5223, v5216, v5224, v5217, v5225, v5218, v5226, v5219, v5227, v5228, v5222, v5229, v5230, v5231, v5232, v5233, v5234, v5235, v5237, v5236, v5238, v5213, v5220, v5221, 3, 7, 2, 4, 8) -> f_1041(v5193, v5194, v5195, v5196, v5197, v5198, v5199, v5200, v5201, v5202, v5203, 1, v5205, v5206, v5207, 0, v5209, v5210, v5211, v5212, v5214, v5339, v5215, v5223, v5216, v5224, v5217, v5225, v5218, v5226, v5219, v5227, v5228, v5222, v5229, v5230, v5231, v5232, v5233, v5234, v5235, v5237, v5236, v5238, v5213, v5220, v5221, 3, 7, 2, 4, 8) :|: TRUE
f_1041(v5193, v5194, v5195, v5196, v5197, v5198, v5199, v5200, v5201, v5202, v5203, 1, v5205, v5206, v5207, 0, v5209, v5210, v5211, v5212, v5214, v5339, v5215, v5223, v5216, v5224, v5217, v5225, v5218, v5226, v5219, v5227, v5228, v5222, v5229, v5230, v5231, v5232, v5233, v5234, v5235, v5237, v5236, v5238, v5213, v5220, v5221, 3, 7, 2, 4, 8) -> f_1042(v5193, v5194, v5195, v5196, v5197, v5198, v5199, v5200, v5201, v5202, v5203, 1, v5205, v5206, v5207, 0, v5209, v5210, v5211, v5212, v5214, v5339, v5215, v5223, v5216, v5224, v5217, v5225, v5218, v5226, v5219, v5227, v5228, v5222, v5229, v5230, v5231, v5232, v5233, v5234, v5235, v5237, v5236, v5238, v5213, v5220, v5221, 3, 7, 2, 4, 8) :|: TRUE
f_1042(v5193, v5194, v5195, v5196, v5197, v5198, v5199, v5200, v5201, v5202, v5203, 1, v5205, v5206, v5207, 0, v5209, v5210, v5211, v5212, v5214, v5339, v5215, v5223, v5216, v5224, v5217, v5225, v5218, v5226, v5219, v5227, v5228, v5222, v5229, v5230, v5231, v5232, v5233, v5234, v5235, v5237, v5236, v5238, v5213, v5220, v5221, 3, 7, 2, 4, 8) -> f_1043(v5193, v5194, v5195, v5196, v5197, v5198, v5199, v5200, v5201, v5202, v5203, 1, v5205, v5206, v5207, 0, v5209, v5210, v5211, v5212, v5214, v5339, v5215, v5223, v5216, v5224, v5217, v5225, v5218, v5226, v5219, v5227, v5228, v5222, v5229, v5230, v5231, v5232, v5233, v5234, v5235, v5237, v5550, v5552, v5220, v5535, 3, 7, 2, 4, 8) :|: TRUE
f_1043(v5507, v5508, v5509, v5510, v5511, v5512, v5513, v5514, v5515, v5516, v5517, 1, v5519, v5520, v5521, 0, v5523, v5524, v5525, v5526, v5527, v5528, v5529, v5537, v5530, v5538, v5531, v5539, v5532, v5540, v5533, v5541, v5542, v5536, v5543, v5544, v5545, v5546, v5547, v5548, v5549, v5551, v5550, v5552, v5534, v5535, 3, 7, 2, 4, 8) -> f_1044(v5507, v5508, v5509, v5510, v5511, v5512, v5513, v5514, v5515, v5516, v5517, 1, v5519, v5520, v5521, 0, v5523, v5524, v5526, v5527, v5528, v5529, v5537, v5530, v5538, v5531, v5539, v5532, v5540, v5533, v5541, v5542, v5536, v5543, v5544, v5545, v5546, v5547, v5548, v5549, v5551, v5550, v5552, v5534, v5535, 3, 7, 2, 4, 8) :|: 0 = 0
f_1044(v5507, v5508, v5509, v5510, v5511, v5512, v5513, v5514, v5515, v5516, v5517, 1, v5519, v5520, v5521, 0, v5523, v5524, v5526, v5527, v5528, v5529, v5537, v5530, v5538, v5531, v5539, v5532, v5540, v5533, v5541, v5542, v5536, v5543, v5544, v5545, v5546, v5547, v5548, v5549, v5551, v5550, v5552, v5534, v5535, 3, 7, 2, 4, 8) -> f_1045(v5507, v5508, v5509, v5510, v5511, v5512, v5513, v5514, v5515, v5516, v5517, 1, v5519, v5520, v5521, 0, v5523, v5524, v5526, v5618, v5527, v5528, v5529, v5537, v5530, v5538, v5531, v5539, v5532, v5540, v5533, v5541, v5542, v5536, v5543, v5544, v5545, v5546, v5547, v5548, v5549, v5551, v5550, v5552, v5534, v5535, 3, 7, 2, 4, 8) :|: 1 + v5618 = v5526 && 0 <= 1 + v5618
f_1045(v5507, v5508, v5509, v5510, v5511, v5512, v5513, v5514, v5515, v5516, v5517, 1, v5519, v5520, v5521, 0, v5523, v5524, v5526, v5618, v5527, v5528, v5529, v5537, v5530, v5538, v5531, v5539, v5532, v5540, v5533, v5541, v5542, v5536, v5543, v5544, v5545, v5546, v5547, v5548, v5549, v5551, v5550, v5552, v5534, v5535, 3, 7, 2, 4, 8) -> f_1046(v5507, v5508, v5509, v5510, v5511, v5512, v5513, v5514, v5515, v5516, v5517, 1, v5519, v5520, v5521, 0, v5523, v5524, v5526, v5618, v5527, v5528, v5529, v5537, v5530, v5538, v5531, v5539, v5532, v5540, v5533, v5541, v5542, v5536, v5543, v5544, v5545, v5546, v5547, v5548, v5549, v5551, v5550, v5552, v5534, v5535, 3, 7, 2, 4, 8) :|: TRUE
f_1046(v5507, v5508, v5509, v5510, v5511, v5512, v5513, v5514, v5515, v5516, v5517, 1, v5519, v5520, v5521, 0, v5523, v5524, v5526, v5618, v5527, v5528, v5529, v5537, v5530, v5538, v5531, v5539, v5532, v5540, v5533, v5541, v5542, v5536, v5543, v5544, v5545, v5546, v5547, v5548, v5549, v5551, v5550, v5552, v5534, v5535, 3, 7, 2, 4, 8) -> f_1047(v5507, v5508, v5509, v5510, v5511, v5512, v5513, v5514, v5515, v5516, v5517, 1, v5519, v5520, v5521, 0, v5523, v5524, v5526, v5618, v5527, v5528, v5529, v5537, v5530, v5538, v5531, v5539, v5532, v5540, v5533, v5541, v5542, v5536, v5543, v5544, v5545, v5546, v5547, v5548, v5549, v5551, v5550, v5552, v5534, v5535, 3, 7, 2, 4, 8) :|: 0 < v5526 && 0 <= v5618 && 3 <= v5517 && 2 <= v5519 && 4 <= v5542
f_1047(v5507, v5508, v5509, v5510, v5511, v5512, v5513, v5514, v5515, v5516, v5517, 1, v5519, v5520, v5521, 0, v5523, v5524, v5526, v5618, v5527, v5528, v5529, v5537, v5530, v5538, v5531, v5539, v5532, v5540, v5533, v5541, v5542, v5536, v5543, v5544, v5545, v5546, v5547, v5548, v5549, v5551, v5550, v5552, v5534, v5535, 3, 7, 2, 4, 8) -> f_1049(v5507, v5508, v5509, v5510, v5511, v5512, v5513, v5514, v5515, v5516, v5517, 1, v5519, v5520, v5521, 0, v5523, v5524, v5526, v5618, v5527, v5528, v5529, v5537, v5530, v5538, v5531, v5539, v5532, v5540, v5533, v5541, v5542, v5536, v5543, v5544, v5545, v5546, v5547, v5548, v5549, v5551, v5550, v5552, v5534, v5535, 3, 7, 2, 4, 8) :|: 0 = 0
f_1049(v5507, v5508, v5509, v5510, v5511, v5512, v5513, v5514, v5515, v5516, v5517, 1, v5519, v5520, v5521, 0, v5523, v5524, v5526, v5618, v5527, v5528, v5529, v5537, v5530, v5538, v5531, v5539, v5532, v5540, v5533, v5541, v5542, v5536, v5543, v5544, v5545, v5546, v5547, v5548, v5549, v5551, v5550, v5552, v5534, v5535, 3, 7, 2, 4, 8) -> f_1051(v5507, v5508, v5509, v5510, v5511, v5512, v5513, v5514, v5515, v5516, v5517, 1, v5519, v5520, v5521, 0, v5523, v5524, v5526, v5618, v5527, v5528, v5529, v5537, v5530, v5538, v5531, v5539, v5532, v5540, v5533, v5541, v5542, v5536, v5543, v5544, v5545, v5546, v5547, v5548, v5549, v5551, v5550, v5552, v5534, v5535, 3, 7, 2, 4, 8) :|: TRUE
f_1051(v5507, v5508, v5509, v5510, v5511, v5512, v5513, v5514, v5515, v5516, v5517, 1, v5519, v5520, v5521, 0, v5523, v5524, v5526, v5618, v5527, v5528, v5529, v5537, v5530, v5538, v5531, v5539, v5532, v5540, v5533, v5541, v5542, v5536, v5543, v5544, v5545, v5546, v5547, v5548, v5549, v5551, v5550, v5552, v5534, v5535, 3, 7, 2, 4, 8) -> f_1033(v5507, v5508, v5509, v5510, v5511, v5512, v5513, v5514, v5515, v5516, v5517, 1, v5519, v5520, v5521, 0, v5523, v5524, v5526, v5618, v5527, v5528, v5529, v5537, v5530, v5538, v5531, v5539, v5532, v5540, v5533, v5541, v5542, v5536, v5543, v5544, v5545, v5546, v5547, v5548, v5549, v5551, v5236, v5238, v5534, v5221, 3, 7, 2, 4, 8) :|: TRUE
f_1033(v5193, v5194, v5195, v5196, v5197, v5198, v5199, v5200, v5201, v5202, v5203, 1, v5205, v5206, v5207, 0, v5209, v5210, v5211, v5212, v5213, v5214, v5215, v5223, v5216, v5224, v5217, v5225, v5218, v5226, v5219, v5227, v5228, v5222, v5229, v5230, v5231, v5232, v5233, v5234, v5235, v5237, v5236, v5238, v5220, v5221, 3, 7, 2, 4, 8) -> f_1035(v5193, v5194, v5195, v5196, v5197, v5198, v5199, v5200, v5201, v5202, v5203, 1, v5205, v5206, v5207, 0, v5209, v5210, v5211, v5212, v5214, v5215, v5223, v5216, v5224, v5217, v5225, v5218, v5226, v5219, v5227, v5228, v5222, v5229, v5230, v5231, v5232, v5233, v5234, v5235, v5237, v5236, v5238, v5213, v5220, v5221, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_1035(v5193:0, v5194:0, v5195:0, v5196:0, v5197:0, v5198:0, v5199:0, v5200:0, v5201:0, v5202:0, v5203:0, 1, v5205:0, v5206:0, v5207:0, 0, v5209:0, v5210:0, v5211:0, 1 + v5618:0, v5214:0, v5215:0, v5223:0, v5216:0, v5224:0, v5217:0, v5225:0, v5218:0, v5226:0, v5219:0, v5227:0, v5228:0, v5222:0, v5229:0, v5230:0, v5231:0, v5232:0, v5233:0, v5234:0, v5235:0, v5237:0, v5236:0, v5238:0, v5213:0, v5220:0, v5221:0, 3, 7, 2, 4, 8) -> f_1035(v5193:0, v5194:0, v5195:0, v5196:0, v5197:0, v5198:0, v5199:0, v5200:0, v5201:0, v5202:0, v5203:0, 1, v5205:0, v5206:0, v5207:0, 0, v5209:0, v5210:0, 1 + v5618:0, v5618:0, 1 + v5214:0, v5215:0, v5223:0, v5216:0, v5224:0, v5217:0, v5225:0, v5218:0, v5226:0, v5219:0, v5227:0, v5228:0, v5222:0, v5229:0, v5230:0, v5231:0, v5232:0, v5233:0, v5234:0, v5235:0, v5237:0, v5236:1, v5238:1, v5214:0, v5220:0, v5221:1, 3, 7, 2, 4, 8) :|: v5618:0 > -1 && v5214:0 > 2 && v5203:0 > 2 && v5228:0 > 3 && v5205:0 > 1
Filtered unneeded arguments:
   f_1035(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51) -> f_1035(x11, x13, x20, x21, x32)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1035(v5203:0, v5205:0, sum~cons_1~v5618:0, v5214:0, v5228:0) -> f_1035(v5203:0, v5205:0, v5618:0, 1 + v5214:0, v5228:0) :|: v5214:0 > 2 && v5618:0 > -1 && v5203:0 > 2 && v5205:0 > 1 && v5228:0 > 3 && sum~cons_1~v5618:0 = 1 + v5618:0

----------------------------------------

(9)
Obligation:
Rules:
f_1035(v5203:0, v5205:0, sum~cons_1~v5618:0, v5214:0, v5228:0) -> f_1035(v5203:0, v5205:0, v5618:0, 1 + v5214:0, v5228:0) :|: v5214:0 > 2 && v5618:0 > -1 && v5203:0 > 2 && v5205:0 > 1 && v5228:0 > 3 && sum~cons_1~v5618:0 = 1 + v5618:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_1035(v5203:0:0, v5205:0:0, sum~cons_1~v5618:0:0, v5214:0:0, v5228:0:0) -> f_1035(v5203:0:0, v5205:0:0, v5618:0:0, 1 + v5214:0:0, v5228:0:0) :|: v5205:0:0 > 1 && v5228:0:0 > 3 && v5203:0:0 > 2 && v5618:0:0 > -1 && v5214:0:0 > 2 && sum~cons_1~v5618:0:0 = 1 + v5618:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1035(x, x1, x2, x3, x4)] = x2

The following rules are decreasing:
f_1035(v5203:0:0, v5205:0:0, sum~cons_1~v5618:0:0, v5214:0:0, v5228:0:0) -> f_1035(v5203:0:0, v5205:0:0, v5618:0:0, 1 + v5214:0:0, v5228:0:0) :|: v5205:0:0 > 1 && v5228:0:0 > 3 && v5203:0:0 > 2 && v5618:0:0 > -1 && v5214:0:0 > 2 && sum~cons_1~v5618:0:0 = 1 + v5618:0:0
The following rules are bounded:
f_1035(v5203:0:0, v5205:0:0, sum~cons_1~v5618:0:0, v5214:0:0, v5228:0:0) -> f_1035(v5203:0:0, v5205:0:0, v5618:0:0, 1 + v5214:0:0, v5228:0:0) :|: v5205:0:0 > 1 && v5228:0:0 > 3 && v5203:0:0 > 2 && v5618:0:0 > -1 && v5214:0:0 > 2 && sum~cons_1~v5618:0:0 = 1 + v5618:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_962(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v3865, v3868, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_965(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v3865, v3868, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: 0 < v3867 && 2 <= v3865 && 3 <= v3887
f_965(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v3865, v3868, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_969(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v3865, v3868, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: 0 = 0
f_969(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v3865, v3868, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_973(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v3865, v3868, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: TRUE
f_973(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v3865, v3868, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_977(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v3868, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: 0 = 0
f_977(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v3868, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_981(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3868, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: 1 + v4086 = v3867 && 0 <= v4086
f_981(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3868, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_984(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3868, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: TRUE
f_984(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3868, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_986(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: 0 = 0
f_986(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_987(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: v4339 = 1 + v3869 && 4 <= v4339
f_987(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_988(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: TRUE
f_988(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_989(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3871, v3872, v3870, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: TRUE
f_989(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3871, v3872, v3870, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_990(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v3870, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: 0 = 0
f_990(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v3870, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_991(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, v3870, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: v4343 = 1 + v3872 && 4 <= v4343
f_991(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, v3870, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_992(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, v3870, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: TRUE
f_992(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, v3870, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_993(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, v3870, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: TRUE
f_993(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, v3870, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_994(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3870, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: 0 = 0
f_994(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3870, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_996(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3870, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: v4341 != 0 && v3869 < v3881 && 4 <= v3881
f_996(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3870, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_998(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3870, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: 0 = 0
f_998(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3870, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_1000(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3870, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: TRUE
f_1000(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3870, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_1002(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3870, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: TRUE
f_1002(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3868, v3870, v3871, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_959(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v4086, v3869, v4339, v4341, v3872, v4343, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: TRUE
f_959(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 1, v3867, v3868, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) -> f_962(v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3867, 1, v3865, v3868, v3869, v3870, v3871, v3872, 0, v3874, v3882, v3875, v3883, v3876, v3884, v3877, v3885, v3878, v3886, v3887, v3881, v3888, v3889, v3890, v3891, v3892, v3893, v3894, v3897, v3879, v3895, v3898, v3896, v3880, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_962(v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, 1 + v4086:0, 1, v3865:0, v3868:0, v3869:0, v3870:0, v3871:0, v3872:0, 0, v3874:0, v3882:0, v3875:0, v3883:0, v3876:0, v3884:0, v3877:0, v3885:0, v3878:0, v3886:0, v3887:0, v3881:0, v3888:0, v3889:0, v3890:0, v3891:0, v3892:0, v3893:0, v3894:0, v3897:0, v3879:0, v3895:0, v3898:0, v3896:0, v3880:0, 3, 7, 2, 4, 8) -> f_962(v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v4086:0, 1, 1 + v4086:0, v3869:0, 1 + v3869:0, v4341:0, v3872:0, 1 + v3872:0, 0, v3874:0, v3882:0, v3875:0, v3883:0, v3876:0, v3884:0, v3877:0, v3885:0, v3878:0, v3886:0, v3887:0, v3881:0, v3888:0, v3889:0, v3890:0, v3891:0, v3892:0, v3893:0, v3894:0, v3897:0, v3879:0, v3895:0, v3898:0, v3896:0, v3880:0, 3, 7, 2, 4, 8) :|: v3865:0 > 1 && v4086:0 > -1 && v3887:0 > 2 && v3869:0 > 2 && v3872:0 > 2 && v3881:0 > v3869:0 && v3881:0 > 3 && v4341:0 < 0
f_962(v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, 1 + v4086:0, 1, v3865:0, v3868:0, v3869:0, v3870:0, v3871:0, v3872:0, 0, v3874:0, v3882:0, v3875:0, v3883:0, v3876:0, v3884:0, v3877:0, v3885:0, v3878:0, v3886:0, v3887:0, v3881:0, v3888:0, v3889:0, v3890:0, v3891:0, v3892:0, v3893:0, v3894:0, v3897:0, v3879:0, v3895:0, v3898:0, v3896:0, v3880:0, 3, 7, 2, 4, 8) -> f_962(v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v4086:0, 1, 1 + v4086:0, v3869:0, 1 + v3869:0, v4341:0, v3872:0, 1 + v3872:0, 0, v3874:0, v3882:0, v3875:0, v3883:0, v3876:0, v3884:0, v3877:0, v3885:0, v3878:0, v3886:0, v3887:0, v3881:0, v3888:0, v3889:0, v3890:0, v3891:0, v3892:0, v3893:0, v3894:0, v3897:0, v3879:0, v3895:0, v3898:0, v3896:0, v3880:0, 3, 7, 2, 4, 8) :|: v3865:0 > 1 && v4086:0 > -1 && v3887:0 > 2 && v3869:0 > 2 && v3872:0 > 2 && v3881:0 > v3869:0 && v3881:0 > 3 && v4341:0 > 0
Filtered unneeded arguments:
   f_962(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49) -> f_962(x11, x13, x15, x18, x30, x31)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_962(sum~cons_1~v4086:0, v3865:0, v3869:0, v3872:0, v3887:0, v3881:0) -> f_962(v4086:0, 1 + v4086:0, 1 + v3869:0, 1 + v3872:0, v3887:0, v3881:0) :|: v4086:0 > -1 && v3865:0 > 1 && v3887:0 > 2 && v3869:0 > 2 && v3872:0 > 2 && v3881:0 > 3 && v3881:0 > v3869:0 && sum~cons_1~v4086:0 = 1 + v4086:0

----------------------------------------

(16)
Obligation:
Rules:
f_962(sum~cons_1~v4086:0, v3865:0, v3869:0, v3872:0, v3887:0, v3881:0) -> f_962(v4086:0, 1 + v4086:0, 1 + v3869:0, 1 + v3872:0, v3887:0, v3881:0) :|: v4086:0 > -1 && v3865:0 > 1 && v3887:0 > 2 && v3869:0 > 2 && v3872:0 > 2 && v3881:0 > 3 && v3881:0 > v3869:0 && sum~cons_1~v4086:0 = 1 + v4086:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_962(sum~cons_1~v4086:0:0, v3865:0:0, v3869:0:0, v3872:0:0, v3887:0:0, v3881:0:0) -> f_962(v4086:0:0, 1 + v4086:0:0, 1 + v3869:0:0, 1 + v3872:0:0, v3887:0:0, v3881:0:0) :|: v3881:0:0 > 3 && v3881:0:0 > v3869:0:0 && v3872:0:0 > 2 && v3869:0:0 > 2 && v3887:0:0 > 2 && v3865:0:0 > 1 && v4086:0:0 > -1 && sum~cons_1~v4086:0:0 = 1 + v4086:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_962 ] = f_962_1

The following rules are decreasing:
f_962(sum~cons_1~v4086:0:0, v3865:0:0, v3869:0:0, v3872:0:0, v3887:0:0, v3881:0:0) -> f_962(v4086:0:0, 1 + v4086:0:0, 1 + v3869:0:0, 1 + v3872:0:0, v3887:0:0, v3881:0:0) :|: v3881:0:0 > 3 && v3881:0:0 > v3869:0:0 && v3872:0:0 > 2 && v3869:0:0 > 2 && v3887:0:0 > 2 && v3865:0:0 > 1 && v4086:0:0 > -1 && sum~cons_1~v4086:0:0 = 1 + v4086:0:0

The following rules are bounded:
f_962(sum~cons_1~v4086:0:0, v3865:0:0, v3869:0:0, v3872:0:0, v3887:0:0, v3881:0:0) -> f_962(v4086:0:0, 1 + v4086:0:0, 1 + v3869:0:0, 1 + v3872:0:0, v3887:0:0, v3881:0:0) :|: v3881:0:0 > 3 && v3881:0:0 > v3869:0:0 && v3872:0:0 > 2 && v3869:0:0 > 2 && v3887:0:0 > 2 && v3865:0:0 > 1 && v4086:0:0 > -1 && sum~cons_1~v4086:0:0 = 1 + v4086:0:0


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_907(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2672, v2673, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2679, v2695, v2680, 3, 7, 2, 4, 8) -> f_910(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2672, v2673, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2679, v2695, v2680, 3, 7, 2, 4, 8) :|: 1 + v2951 = v2671 && 0 <= 1 + v2951
f_910(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2672, v2673, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2679, v2695, v2680, 3, 7, 2, 4, 8) -> f_914(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2672, v2673, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2679, v2695, v2680, 3, 7, 2, 4, 8) :|: TRUE
f_914(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2672, v2673, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2679, v2695, v2680, 3, 7, 2, 4, 8) -> f_918(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2672, v2673, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2679, v2695, v2680, 3, 7, 2, 4, 8) :|: 0 < v2671 && 0 <= v2951 && 4 <= v2687
f_918(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2672, v2673, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2679, v2695, v2680, 3, 7, 2, 4, 8) -> f_923(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2672, v2673, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2679, v2695, v2680, 3, 7, 2, 4, 8) :|: 0 = 0
f_923(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2672, v2673, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2679, v2695, v2680, 3, 7, 2, 4, 8) -> f_928(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2672, v2673, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2679, v2695, v2680, 3, 7, 2, 4, 8) :|: TRUE
f_928(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2672, v2673, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2679, v2695, v2680, 3, 7, 2, 4, 8) -> f_933(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2673, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2672, v2679, v2695, v2680, 3, 7, 2, 4, 8) :|: 0 = 0
f_933(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2673, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2672, v2679, v2695, v2680, 3, 7, 2, 4, 8) -> f_938(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2673, v3210, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2672, v2679, v2695, v2680, 3, 7, 2, 4, 8, 5) :|: v3210 = 1 + v2673 && 5 <= v3210
f_938(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2673, v3210, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2672, v2679, v2695, v2680, 3, 7, 2, 4, 8, 5) -> f_942(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2673, v3210, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2672, v2679, v2695, v2680, 3, 7, 2, 4, 8, 5) :|: TRUE
f_942(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2673, v3210, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2672, v2679, v2695, v2680, 3, 7, 2, 4, 8, 5) -> f_948(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2673, v3210, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2672, v2679, v2695, v2680, 3, 7, 2, 4, 8, 5) :|: TRUE
f_948(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2673, v3210, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2672, v2679, v2695, v2680, 3, 7, 2, 4, 8, 5) -> f_952(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2673, v3210, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2672, v2679, v2695, v2680, 3, 7, 2, 4, 8, 5) :|: TRUE
f_952(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2673, v3210, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2672, v2679, v2695, v2680, 3, 7, 2, 4, 8, 5) -> f_903(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2951, v2673, v3210, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2679, v2695, v2680, 3, 7, 2, 4, 8) :|: TRUE
f_903(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2670, v2671, v2672, v2673, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2679, v2695, v2680, 3, 7, 2, 4, 8) -> f_907(v2655, v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663, v2664, 1, v2666, v2667, 0, v2669, v2671, v2672, v2673, v2674, v2682, v2675, v2683, v2676, v2684, v2677, v2685, v2678, v2686, v2687, v2681, v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2679, v2695, v2680, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_907(v2655:0, v2656:0, v2657:0, v2658:0, v2659:0, v2660:0, v2661:0, v2662:0, v2663:0, v2664:0, 1, v2666:0, v2667:0, 0, v2669:0, 1 + v2951:0, v2672:0, v2673:0, v2674:0, v2682:0, v2675:0, v2683:0, v2676:0, v2684:0, v2677:0, v2685:0, v2678:0, v2686:0, v2687:0, v2681:0, v2688:0, v2689:0, v2690:0, v2691:0, v2692:0, v2693:0, v2694:0, v2679:0, v2695:0, v2680:0, 3, 7, 2, 4, 8) -> f_907(v2655:0, v2656:0, v2657:0, v2658:0, v2659:0, v2660:0, v2661:0, v2662:0, v2663:0, v2664:0, 1, v2666:0, v2667:0, 0, v2669:0, v2951:0, v2673:0, 1 + v2673:0, v2674:0, v2682:0, v2675:0, v2683:0, v2676:0, v2684:0, v2677:0, v2685:0, v2678:0, v2686:0, v2687:0, v2681:0, v2688:0, v2689:0, v2690:0, v2691:0, v2692:0, v2693:0, v2694:0, v2679:0, v2695:0, v2680:0, 3, 7, 2, 4, 8) :|: v2951:0 > -1 && v2673:0 > 3 && v2687:0 > 3
Filtered unneeded arguments:
   f_907(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45) -> f_907(x16, x18, x29)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_907(sum~cons_1~v2951:0, v2673:0, v2687:0) -> f_907(v2951:0, 1 + v2673:0, v2687:0) :|: v2673:0 > 3 && v2687:0 > 3 && v2951:0 > -1 && sum~cons_1~v2951:0 = 1 + v2951:0

----------------------------------------

(23)
Obligation:
Rules:
f_907(sum~cons_1~v2951:0, v2673:0, v2687:0) -> f_907(v2951:0, 1 + v2673:0, v2687:0) :|: v2673:0 > 3 && v2687:0 > 3 && v2951:0 > -1 && sum~cons_1~v2951:0 = 1 + v2951:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_907(sum~cons_1~v2951:0:0, v2673:0:0, v2687:0:0) -> f_907(v2951:0:0, 1 + v2673:0:0, v2687:0:0) :|: v2673:0:0 > 3 && v2687:0:0 > 3 && v2951:0:0 > -1 && sum~cons_1~v2951:0:0 = 1 + v2951:0:0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_907(x, x1, x2)] = x

The following rules are decreasing:
f_907(sum~cons_1~v2951:0:0, v2673:0:0, v2687:0:0) -> f_907(v2951:0:0, 1 + v2673:0:0, v2687:0:0) :|: v2673:0:0 > 3 && v2687:0:0 > 3 && v2951:0:0 > -1 && sum~cons_1~v2951:0:0 = 1 + v2951:0:0
The following rules are bounded:
f_907(sum~cons_1~v2951:0:0, v2673:0:0, v2687:0:0) -> f_907(v2951:0:0, 1 + v2673:0:0, v2687:0:0) :|: v2673:0:0 > 3 && v2687:0:0 > 3 && v2951:0:0 > -1 && sum~cons_1~v2951:0:0 = 1 + v2951:0:0

----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
SCC
----------------------------------------

(29) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_838(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1689, v1690, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1696, 3, 7, 2, 4, 8) -> f_844(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1689, v1690, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1696, 3, 7, 2, 4, 8) :|: 1 + v1858 = v1688 && 0 <= 1 + v1858
f_844(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1689, v1690, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1696, 3, 7, 2, 4, 8) -> f_851(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1689, v1690, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1696, 3, 7, 2, 4, 8) :|: TRUE
f_851(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1689, v1690, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1696, 3, 7, 2, 4, 8) -> f_857(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1689, v1690, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1696, 3, 7, 2, 4, 8) :|: 0 < v1688 && 0 <= v1858 && 3 <= v1674 && 2 <= v1683 && 3 <= v1702
f_857(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1689, v1690, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1696, 3, 7, 2, 4, 8) -> f_865(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1689, v1690, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1696, 3, 7, 2, 4, 8) :|: 0 = 0
f_865(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1689, v1690, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1696, 3, 7, 2, 4, 8) -> f_873(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1689, v1690, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1696, 3, 7, 2, 4, 8) :|: TRUE
f_873(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1689, v1690, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1696, 3, 7, 2, 4, 8) -> f_881(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1690, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1689, v1696, 3, 7, 2, 4, 8) :|: 0 = 0
f_881(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1690, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1689, v1696, 3, 7, 2, 4, 8) -> f_888(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1690, v2310, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1689, v1696, 3, 7, 2, 4, 8) :|: v2310 = 1 + v1690 && 4 <= v2310
f_888(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1690, v2310, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1689, v1696, 3, 7, 2, 4, 8) -> f_896(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1690, v2310, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1689, v1696, 3, 7, 2, 4, 8) :|: TRUE
f_896(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1690, v2310, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1689, v1696, 3, 7, 2, 4, 8) -> f_901(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1690, v2310, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1689, v1696, 3, 7, 2, 4, 8) :|: TRUE
f_901(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1690, v2310, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1689, v1696, 3, 7, 2, 4, 8) -> f_906(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1690, v2310, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1689, v1696, 3, 7, 2, 4, 8) :|: TRUE
f_906(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1690, v2310, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1689, v1696, 3, 7, 2, 4, 8) -> f_833(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1858, v1690, v2310, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1696, 3, 7, 2, 4, 8) :|: TRUE
f_833(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1687, v1688, v1689, v1690, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1696, 3, 7, 2, 4, 8) -> f_838(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681, 1, v1683, v1684, 0, v1686, v1688, v1689, v1690, v1691, v1697, v1692, v1698, v1693, v1699, v1694, v1700, v1695, v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709, v1696, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_838(v1672:0, v1673:0, v1674:0, v1675:0, v1676:0, v1677:0, v1678:0, v1679:0, v1680:0, v1681:0, 1, v1683:0, v1684:0, 0, v1686:0, 1 + v1858:0, v1689:0, v1690:0, v1691:0, v1697:0, v1692:0, v1698:0, v1693:0, v1699:0, v1694:0, v1700:0, v1695:0, v1701:0, v1702:0, v1703:0, v1704:0, v1705:0, v1706:0, v1707:0, v1708:0, v1709:0, v1696:0, 3, 7, 2, 4, 8) -> f_838(v1672:0, v1673:0, v1674:0, v1675:0, v1676:0, v1677:0, v1678:0, v1679:0, v1680:0, v1681:0, 1, v1683:0, v1684:0, 0, v1686:0, v1858:0, v1690:0, 1 + v1690:0, v1691:0, v1697:0, v1692:0, v1698:0, v1693:0, v1699:0, v1694:0, v1700:0, v1695:0, v1701:0, v1702:0, v1703:0, v1704:0, v1705:0, v1706:0, v1707:0, v1708:0, v1709:0, v1696:0, 3, 7, 2, 4, 8) :|: v1858:0 > -1 && v1674:0 > 2 && v1683:0 > 1 && v1690:0 > 2 && v1702:0 > 2
Filtered unneeded arguments:
   f_838(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42) -> f_838(x3, x12, x16, x18, x29)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_838(v1674:0, v1683:0, sum~cons_1~v1858:0, v1690:0, v1702:0) -> f_838(v1674:0, v1683:0, v1858:0, 1 + v1690:0, v1702:0) :|: v1674:0 > 2 && v1858:0 > -1 && v1683:0 > 1 && v1702:0 > 2 && v1690:0 > 2 && sum~cons_1~v1858:0 = 1 + v1858:0

----------------------------------------

(30)
Obligation:
Rules:
f_838(v1674:0, v1683:0, sum~cons_1~v1858:0, v1690:0, v1702:0) -> f_838(v1674:0, v1683:0, v1858:0, 1 + v1690:0, v1702:0) :|: v1674:0 > 2 && v1858:0 > -1 && v1683:0 > 1 && v1702:0 > 2 && v1690:0 > 2 && sum~cons_1~v1858:0 = 1 + v1858:0

----------------------------------------

(31) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(32)
Obligation:
Rules:
f_838(v1674:0:0, v1683:0:0, sum~cons_1~v1858:0:0, v1690:0:0, v1702:0:0) -> f_838(v1674:0:0, v1683:0:0, v1858:0:0, 1 + v1690:0:0, v1702:0:0) :|: v1702:0:0 > 2 && v1690:0:0 > 2 && v1683:0:0 > 1 && v1858:0:0 > -1 && v1674:0:0 > 2 && sum~cons_1~v1858:0:0 = 1 + v1858:0:0

----------------------------------------

(33) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_838(x, x1, x2, x3, x4)] = x2

The following rules are decreasing:
f_838(v1674:0:0, v1683:0:0, sum~cons_1~v1858:0:0, v1690:0:0, v1702:0:0) -> f_838(v1674:0:0, v1683:0:0, v1858:0:0, 1 + v1690:0:0, v1702:0:0) :|: v1702:0:0 > 2 && v1690:0:0 > 2 && v1683:0:0 > 1 && v1858:0:0 > -1 && v1674:0:0 > 2 && sum~cons_1~v1858:0:0 = 1 + v1858:0:0
The following rules are bounded:
f_838(v1674:0:0, v1683:0:0, sum~cons_1~v1858:0:0, v1690:0:0, v1702:0:0) -> f_838(v1674:0:0, v1683:0:0, v1858:0:0, 1 + v1690:0:0, v1702:0:0) :|: v1702:0:0 > 2 && v1690:0:0 > 2 && v1683:0:0 > 1 && v1858:0:0 > -1 && v1674:0:0 > 2 && sum~cons_1~v1858:0:0 = 1 + v1858:0:0

----------------------------------------

(34)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
