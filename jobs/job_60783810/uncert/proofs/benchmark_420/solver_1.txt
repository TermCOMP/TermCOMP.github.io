YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/HaksL.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 681 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 25 ms]
(8) IntTRS
(9) RankingReductionPairProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/HaksL.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/HaksL.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		store 0, %4
		%8 = load %2
		%9 = load %3
		%10 = icmp slt %8 %9
		br %10, %11, %13
	11:
		%12 = load %2
		store %12, %5
		br %15
	13:
		%14 = load %3
		store %14, %5
		br %15
	15:
		br %16
	16:
		%17 = load %5
		%18 = load %3
		%19 = icmp eq %17 %18
		br %19, %20, %33
	20:
		%21 = load %3
		%22 = add i32 %21, 1
		store %22, %3
		%23 = load %4
		%24 = add i32 %23, 1
		store %24, %4
		%25 = load %2
		%26 = load %3
		%27 = icmp slt %25 %26
		br %27, %28, %30
	28:
		%29 = load %2
		store %29, %5
		br %32
	30:
		%31 = load %3
		store %31, %5
		br %32
	32:
		br %16
	33:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_343(v319, v320, v321, v322, v323, v324, v325, 0, v327, 1, v329, v330, v331, v332, v333, v334, v335, v336, 3, 4) -> f_344(v319, v320, v321, v322, v323, v324, v325, 0, v329, v327, 1, v330, v331, v332, v333, v334, v335, v336, 3, 4) :|: 0 = 0
f_344(v319, v320, v321, v322, v323, v324, v325, 0, v329, v327, 1, v330, v331, v332, v333, v334, v335, v336, 3, 4) -> f_345(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v327, v330, v331, v332, v333, v334, v335, v336, 3, 4) :|: 0 = 0
f_345(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v327, v330, v331, v332, v333, v334, v335, v336, 3, 4) -> f_346(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v327, v330, v331, v332, v333, v334, v335, v336, 3, 4) :|: 0 = 0
f_346(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v327, v330, v331, v332, v333, v334, v335, v336, 3, 4) -> f_347(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v327, v330, v331, v332, v333, v334, v335, v336, 3, 4) :|: TRUE
f_347(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v327, v330, v331, v332, v333, v334, v335, v336, 3, 4) -> f_348(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v330, v331, v332, v333, v334, v335, v336, 3, 4) :|: 0 = 0
f_348(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v330, v331, v332, v333, v334, v335, v336, 3, 4) -> f_349(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v330, v331, v332, v333, v334, v335, v336, 3, 4) :|: v365 = 1 + v329
f_349(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v330, v331, v332, v333, v334, v335, v336, 3, 4) -> f_350(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v330, v331, v332, v333, v334, v335, v336, 3, 4) :|: TRUE
f_350(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v330, v331, v332, v333, v334, v335, v336, 3, 4) -> f_351(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v332, v333, v334, v335, v336, 3, 4) :|: 0 = 0
f_351(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v332, v333, v334, v335, v336, 3, 4) -> f_352(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) :|: v367 = 1 + v331 && 2 <= v367
f_352(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) -> f_353(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) :|: TRUE
f_353(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) -> f_354(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) :|: 0 = 0
f_354(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) -> f_355(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) :|: 0 = 0
f_355(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) -> f_357(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) :|: v365 <= v324
f_357(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) -> f_359(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) :|: 0 = 0
f_359(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) -> f_361(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) :|: TRUE
f_361(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) -> f_363(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) :|: 0 = 0
f_363(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) -> f_365(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) :|: TRUE
f_365(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) -> f_367(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) :|: TRUE
f_367(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4, 2) -> f_342(v319, v320, v321, v322, v323, v324, v325, 0, v329, 1, v365, v331, v367, v332, v333, v334, v335, v336, 3, 4) :|: TRUE
f_342(v319, v320, v321, v322, v323, v324, v325, 0, v327, 1, v329, v330, v331, v332, v333, v334, v335, v336, 3, 4) -> f_343(v319, v320, v321, v322, v323, v324, v325, 0, v327, 1, v329, v330, v331, v332, v333, v334, v335, v336, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_343(v319:0, v320:0, v321:0, v322:0, v323:0, v324:0, v325:0, 0, v327:0, 1, v329:0, v330:0, v331:0, v332:0, v333:0, v334:0, v335:0, v336:0, 3, 4) -> f_343(v319:0, v320:0, v321:0, v322:0, v323:0, v324:0, v325:0, 0, v329:0, 1, 1 + v329:0, v331:0, 1 + v331:0, v332:0, v333:0, v334:0, v335:0, v336:0, 3, 4) :|: v324:0 >= 1 + v329:0 && v331:0 > 0
Filtered unneeded arguments:
   f_343(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_343(x6, x11, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_343(v324:0, v329:0, v331:0) -> f_343(v324:0, 1 + v329:0, 1 + v331:0) :|: v324:0 >= 1 + v329:0 && v331:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f_343(v324:0, v329:0, v331:0) -> f_343(v324:0, 1 + v329:0, 1 + v331:0) :|: v324:0 >= 1 + v329:0 && v331:0 > 0

----------------------------------------

(9) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_343 ] = f_343_1 + -1*f_343_2

The following rules are decreasing:
f_343(v324:0, v329:0, v331:0) -> f_343(v324:0, 1 + v329:0, 1 + v331:0) :|: v324:0 >= 1 + v329:0 && v331:0 > 0

The following rules are bounded:
f_343(v324:0, v329:0, v331:0) -> f_343(v324:0, 1 + v329:0, 1 + v331:0) :|: v324:0 >= 1 + v329:0 && v331:0 > 0


----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
