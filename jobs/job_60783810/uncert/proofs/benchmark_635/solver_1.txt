MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/JX4Y5.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 127 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/JX4Y5.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/JX4Y5.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: __startrek_Assert_t3_i0 initVal: \01\01\01\01\01\01\01\01 type: [8 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_Assert_t2_i0 initVal: \01\01\01\01\01\01\01\01 type: [8 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_Assert_t1_i0 initVal: \01\01\01\01\01\01\01\01 type: [8 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_Assert_t0_i0 initVal: \01\01\01\01 type: [4 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_lock initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_pi_locks_held initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_task_base_priority initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden___startrek_current_priority initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden_R_count initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden_R_speed initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden_W_count initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden_W_speed initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden_T_count initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden_T_speed initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: state initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden_need_to_read initVal: 1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden_need_to_run_nxtbg initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden_threshold initVal: 200 type: i16 addrSpace: null alignment: 2 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden_R_state initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden_W_state initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden_T_state initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: C_state initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: TM_mode initVal: 2 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: moved initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: sign initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: INTERNAL section: null

Name: __startrek_time_bound initVal: 2000 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_base_priority_Controller initVal: 1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden___startrek_job_count_Controller initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_period_Controller initVal: 500 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_wcet_Controller initVal: 440 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_arrival_min_Controller initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_arrival_max_Controller initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_base_priority_TapeMover initVal: 2 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden___startrek_job_count_TapeMover initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_period_TapeMover initVal: 250 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_wcet_TapeMover initVal: 10 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_arrival_min_TapeMover initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_arrival_max_TapeMover initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_base_priority_Reader initVal: 3 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden___startrek_job_count_Reader initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_period_Reader initVal: 250 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_wcet_Reader initVal: 10 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_arrival_min_Reader initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_arrival_max_Reader initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_base_priority_Writer initVal: 4 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_hidden___startrek_job_count_Writer initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_period_Writer initVal: 250 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_wcet_Writer initVal: 10 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_arrival_min_Writer initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_arrival_max_Writer initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: __startrek_error_round initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_task initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_job initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_is_first_cs initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_start_t0 initVal: (0,0,0,0) type: [4 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_round initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_end_t0 initVal: (0,0,0,0) type: [4 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_job_end initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_start_t1 initVal: (0,0,0,0,0,0,0,0) type: [8 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_end_t1 initVal: (0,0,0,0,0,0,0,0) type: [8 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_start_t2 initVal: (0,0,0,0,0,0,0,0) type: [8 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_end_t2 initVal: (0,0,0,0,0,0,0,0) type: [8 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_start_t3 initVal: (0,0,0,0,0,0,0,0) type: [8 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_end_t3 initVal: (0,0,0,0,0,0,0,0) type: [8 x i8] addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_hyper_period initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: ___startrek_job_count_Writer_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: ___startrek_job_count_Reader_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: ___startrek_job_count_TapeMover_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: ___startrek_job_count_Controller_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _T_state_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _W_state_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _R_state_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _threshold_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i16] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _need_to_run_nxtbg_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _need_to_read_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_hidden_dir initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: _dir_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_hidden_output initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: _output_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_hidden_input initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: _input_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_hidden_nxtcolorsensor_mode initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: _nxtcolorsensor_mode_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: __startrek_hidden_nxtcolorsensor_data_mode initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: _nxtcolorsensor_data_mode_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _T_speed_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _T_count_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i32] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _W_speed_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _W_count_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i32] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _R_speed_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _R_count_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i32] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: ___startrek_current_priority_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i___startrek_current_priority_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_R_count_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i32] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_R_speed_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_W_count_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i32] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_W_speed_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_T_count_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i32] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_T_speed_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_nxtcolorsensor_data_mode_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_nxtcolorsensor_mode_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_input_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_output_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_dir_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_need_to_read_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_need_to_run_nxtbg_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_threshold_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i16] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_R_state_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_W_state_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i_T_state_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i___startrek_job_count_Controller_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i___startrek_job_count_TapeMover_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i___startrek_job_count_Reader_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Name: _i___startrek_job_count_Writer_ initVal: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) type: [28 x i8] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "exit" returnParam: BasicVoidType parameters: (i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_U8" returnParam: i8 zeroext parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_Bool" returnParam: i1 zeroext parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__startrek_schedule_jobs" returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__startrek_init_globals" returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__startrek_check_assumptions" returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__startrek_check_assertions" returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__startrek_user_final" returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__startrek_user_init" returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_bool" returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_uchar" returnParam: i8 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 261
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		Unnamed Call-Instruction = call BasicVoidType @exit(i32 0)
		unreachable
	6:
		ret void

*BasicFunctionTypename: "assert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 271
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%4 = load %2
		%5 = trunc i8 %4 to i1
		br %5, %8, %6
	6:
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	8:
		ret void

*BasicFunctionTypename: "calibrate" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 285
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = call zeroext i8 (...)* @__VERIFIER_nondet_U8()
		store %2, %1
		%3 = load %1
		%4 = zext i8 %3 to i32
		ret %4

*BasicFunctionTypename: "ecrobot_set_nxtcolorsensor" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 296
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %4
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_nxtcolorsensor_data_mode(i8 zeroext %5)
		ret void

*BasicFunctionTypename: "__startrek_write_nxtcolorsensor_data_mode" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 307
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @_nxtcolorsensor_data_mode_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "ecrobot_get_nxtcolorsensor_mode" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: (0 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 345
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = call zeroext i8 @__startrek_read_nxtcolorsensor_mode()
		store %4, %3
		%5 = load %3
		ret %5

*BasicFunctionTypename: "__startrek_read_nxtcolorsensor_mode" linkageType: INTERNAL returnParam: i8 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 357
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_nxtcolorsensor_mode_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "bg_nxtcolorsensor" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 394
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = zext i1 %0 to i8
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%7 = call zeroext i8 @__startrek_read_nxtcolorsensor_data_mode()
		store %7, %4
		%8 = call zeroext i8 @__startrek_read_nxtcolorsensor_mode()
		store %8, %5
		%9 = load %4
		%10 = zext i8 %9 to i32
		%11 = load %5
		%12 = zext i8 %11 to i32
		%13 = icmp ne %10 %12
		br %13, %14, %17
	14:
		%15 = call zeroext i8 @__startrek_read_nxtcolorsensor_data_mode()
		store %15, %3
		%16 = load %3
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_nxtcolorsensor_mode(i8 zeroext %16)
		br %17
	17:
		ret void

*BasicFunctionTypename: "__startrek_read_nxtcolorsensor_data_mode" linkageType: INTERNAL returnParam: i8 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 418
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_nxtcolorsensor_data_mode_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "__startrek_write_nxtcolorsensor_mode" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 453
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @_nxtcolorsensor_mode_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "ecrobot_is_ENTER_button_pressed" linkageType: EXTERNALLY_VISIBLE returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 489
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = call zeroext i1 (...)* @__VERIFIER_nondet_Bool()
		%3 = zext i1 %2 to i8
		store %3, %1
		%4 = load %1
		%5 = trunc i8 %4 to i1
		ret %5

*BasicFunctionTypename: "nxt_motor_set_speed" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32, 1 i32, 2 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 499
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		%9 = alloca i32, align 4
		%10 = alloca i32, align 4
		%11 = alloca i32, align 4
		%12 = alloca i32, align 4
		%13 = alloca i32, align 4
		%14 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%15 = zext i1 %2 to i8
		store %15, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %9)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %10)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %11)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %12)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %13)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %14)
		%16 = load %4
		switch %16, %92 [0, %17 1, %42 2, %67]
	17:
		%18 = call signext i8 @__startrek_read_R_speed()
		store %18, %8
		%19 = load %8
		%20 = sext i8 %19 to i32
		%21 = icmp ne %20 0
		br %21, %22, %39
	22:
		%23 = call zeroext i8 (...)* @__VERIFIER_nondet_U8()
		store %23, %7
		%24 = call i32 @__startrek_read_R_count()
		store %24, %9
		%25 = load %8
		%26 = sext i8 %25 to i32
		%27 = icmp sgt %26 0
		br %27, %28, %31
	28:
		%29 = load %7
		%30 = zext i8 %29 to i32
		store %30, %10
		br %35
	31:
		%32 = load %7
		%33 = zext i8 %32 to i32
		%34 = sub i32 0, %33
		store %34, %10
		br %35
	35:
		%36 = load %9
		%37 = load %10
		%38 = add i32 %36, %37
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_R_count(i32 %38)
		br %39
	39:
		%40 = load %5
		%41 = trunc i32 %40 to i8
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_R_speed(i8 signext %41)
		br %93
	42:
		%43 = call signext i8 @__startrek_read_W_speed()
		store %43, %8
		%44 = load %8
		%45 = sext i8 %44 to i32
		%46 = icmp ne %45 0
		br %46, %47, %64
	47:
		%48 = call zeroext i8 (...)* @__VERIFIER_nondet_U8()
		store %48, %7
		%49 = call i32 @__startrek_read_W_count()
		store %49, %11
		%50 = load %8
		%51 = sext i8 %50 to i32
		%52 = icmp sgt %51 0
		br %52, %53, %56
	53:
		%54 = load %7
		%55 = zext i8 %54 to i32
		store %55, %12
		br %60
	56:
		%57 = load %7
		%58 = zext i8 %57 to i32
		%59 = sub i32 0, %58
		store %59, %12
		br %60
	60:
		%61 = load %11
		%62 = load %12
		%63 = add i32 %61, %62
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_W_count(i32 %63)
		br %64
	64:
		%65 = load %5
		%66 = trunc i32 %65 to i8
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_W_speed(i8 signext %66)
		br %93
	67:
		%68 = call signext i8 @__startrek_read_T_speed()
		store %68, %8
		%69 = load %8
		%70 = sext i8 %69 to i32
		%71 = icmp ne %70 0
		br %71, %72, %89
	72:
		%73 = call zeroext i8 (...)* @__VERIFIER_nondet_U8()
		store %73, %7
		%74 = call i32 @__startrek_read_T_count()
		store %74, %13
		%75 = load %8
		%76 = sext i8 %75 to i32
		%77 = icmp sgt %76 0
		br %77, %78, %81
	78:
		%79 = load %7
		%80 = zext i8 %79 to i32
		store %80, %14
		br %85
	81:
		%82 = load %7
		%83 = zext i8 %82 to i32
		%84 = sub i32 0, %83
		store %84, %14
		br %85
	85:
		%86 = load %13
		%87 = load %14
		%88 = add i32 %86, %87
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_T_count(i32 %88)
		br %89
	89:
		%90 = load %5
		%91 = trunc i32 %90 to i8
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_T_speed(i8 signext %91)
		br %93
	92:
		br %93
	93:
		ret void

*BasicFunctionTypename: "__startrek_read_R_speed" linkageType: INTERNAL returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 626
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_R_speed_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "__startrek_read_R_count" linkageType: INTERNAL returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 663
	0:
		%1 = alloca i32, align 4
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_R_count_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "__startrek_write_R_count" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 698
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @_R_count_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "__startrek_write_R_speed" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 734
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @_R_speed_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "__startrek_read_W_speed" linkageType: INTERNAL returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 772
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_W_speed_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "__startrek_read_W_count" linkageType: INTERNAL returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 807
	0:
		%1 = alloca i32, align 4
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_W_count_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "__startrek_write_W_count" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 842
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @_W_count_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "__startrek_write_W_speed" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 878
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @_W_speed_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "__startrek_read_T_speed" linkageType: INTERNAL returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 914
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_T_speed_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "__startrek_read_T_count" linkageType: INTERNAL returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 949
	0:
		%1 = alloca i32, align 4
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_T_count_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "__startrek_write_T_count" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 984
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @_T_count_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "__startrek_write_T_speed" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1020
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @_T_speed_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "nxt_motor_get_count" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1056
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i8, align 1
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		%9 = alloca i8, align 1
		%10 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %9)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %10)
		store 0, %6
		store 0, %7
		%11 = load %3
		switch %11, %90 [0, %12 1, %38 2, %64]
	12:
		%13 = call signext i8 @__startrek_read_R_speed()
		store %13, %8
		%14 = load %8
		store %14, %7
		%15 = call i32 @__startrek_read_R_count()
		store %15, %6
		%16 = load %7
		%17 = sext i8 %16 to i32
		%18 = icmp eq %17 0
		br %18, %19, %21
	19:
		%20 = load %6
		store %20, %2
		br %93
	21:
		%22 = call zeroext i8 (...)* @__VERIFIER_nondet_U8()
		store %22, %4
		%23 = load %6
		%24 = load %7
		%25 = sext i8 %24 to i32
		%26 = add i32 %23, %25
		%27 = icmp sgt %26 0
		br %27, %28, %31
	28:
		%29 = load %4
		%30 = zext i8 %29 to i32
		store %30, %5
		br %35
	31:
		%32 = load %4
		%33 = zext i8 %32 to i32
		%34 = sub i32 0, %33
		store %34, %5
		br %35
	35:
		%36 = load %5
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_R_count(i32 %36)
		br %37
	37:
		br %91
	38:
		%39 = call signext i8 @__startrek_read_W_speed()
		store %39, %9
		%40 = load %9
		store %40, %7
		%41 = call i32 @__startrek_read_W_count()
		store %41, %6
		%42 = load %7
		%43 = sext i8 %42 to i32
		%44 = icmp eq %43 0
		br %44, %45, %47
	45:
		%46 = load %6
		store %46, %2
		br %93
	47:
		%48 = call zeroext i8 (...)* @__VERIFIER_nondet_U8()
		store %48, %4
		%49 = load %6
		%50 = load %7
		%51 = sext i8 %50 to i32
		%52 = add i32 %49, %51
		%53 = icmp sgt %52 0
		br %53, %54, %57
	54:
		%55 = load %4
		%56 = zext i8 %55 to i32
		store %56, %5
		br %61
	57:
		%58 = load %4
		%59 = zext i8 %58 to i32
		%60 = sub i32 0, %59
		store %60, %5
		br %61
	61:
		%62 = load %5
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_W_count(i32 %62)
		br %63
	63:
		br %91
	64:
		%65 = call signext i8 @__startrek_read_T_speed()
		store %65, %10
		%66 = load %10
		store %66, %7
		%67 = call i32 @__startrek_read_T_count()
		store %67, %6
		%68 = load %7
		%69 = sext i8 %68 to i32
		%70 = icmp eq %69 0
		br %70, %71, %73
	71:
		%72 = load %6
		store %72, %2
		br %93
	73:
		%74 = call zeroext i8 (...)* @__VERIFIER_nondet_U8()
		store %74, %4
		%75 = load %6
		%76 = load %7
		%77 = sext i8 %76 to i32
		%78 = add i32 %75, %77
		%79 = icmp sgt %78 0
		br %79, %80, %83
	80:
		%81 = load %4
		%82 = zext i8 %81 to i32
		store %82, %5
		br %87
	83:
		%84 = load %4
		%85 = zext i8 %84 to i32
		%86 = sub i32 0, %85
		store %86, %5
		br %87
	87:
		%88 = load %5
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_T_count(i32 %88)
		br %89
	89:
		br %91
	90:
		br %91
	91:
		%92 = load %5
		store %92, %2
		br %93
	93:
		%94 = load %2
		ret %94

*BasicFunctionTypename: "nxt_motor_set_count" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1190
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = load %3
		switch %5, %12 [0, %6 1, %8 2, %10]
	6:
		%7 = load %4
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_R_count(i32 %7)
		br %12
	8:
		%9 = load %4
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_W_count(i32 %9)
		br %12
	10:
		%11 = load %4
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_T_count(i32 %11)
		br %12
	12:
		ret void

*BasicFunctionTypename: "ecrobot_get_nxtcolorsensor_light" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: (0 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1211
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = call zeroext i8 (...)* @__VERIFIER_nondet_U8()
		store %4, %3
		%5 = load %3
		ret %5

*BasicFunctionTypename: "TerminateTask" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1221
	0:
		ret void

*BasicFunctionTypename: "transition" linkageType: EXTERNALLY_VISIBLE returnParam: i1 zeroext parameters: (0 i16 zeroext, 1 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1226
	0:
		%3 = alloca i16, align 2
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i16 %3)
		%6 = zext i1 %1 to i8
		store %6, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store 0, %5
		%7 = load %3
		%8 = zext i16 %7 to i32
		switch %8, %17 [0, %9]
	9:
		%10 = load %4
		%11 = trunc i8 %10 to i1
		%12 = zext i1 %11 to i32
		%13 = icmp eq %12 0
		br %13, %14, %15
	14:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_output(i1 zeroext 1)
		store 0, @state
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_dir(i1 zeroext 0)
		br %16
	15:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_output(i1 zeroext 0)
		store 0, @state
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_dir(i1 zeroext 0)
		br %16
	16:
		br %17
	17:
		%18 = load %5
		%19 = trunc i8 %18 to i1
		ret %19

*BasicFunctionTypename: "__startrek_write_output" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1258
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = zext i1 %0 to i8
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%6 = load @__startrek_task
		%7 = zext i8 %6 to i32
		switch %7, %24 [0, %8 1, %12 2, %16 3, %20]
	8:
		%9 = load @__startrek_round
		store %9, %4
		%10 = call zeroext i1 @__startrek_cs_t0()
		%11 = zext i1 %10 to i8
		store %11, %3
		br %24
	12:
		%13 = load @__startrek_round
		store %13, %4
		%14 = call zeroext i1 @__startrek_cs_t1()
		%15 = zext i1 %14 to i8
		store %15, %3
		br %24
	16:
		%17 = load @__startrek_round
		store %17, %4
		%18 = call zeroext i1 @__startrek_cs_t2()
		%19 = zext i1 %18 to i8
		store %19, %3
		br %24
	20:
		%21 = load @__startrek_round
		store %21, %4
		%22 = call zeroext i1 @__startrek_cs_t3()
		%23 = zext i1 %22 to i8
		store %23, %3
		br %24
	24:
		%25 = load %2
		%26 = trunc i8 %25 to i1
		%27 = load @__startrek_round
		%28 = zext i8 %27 to i64
		%29 = getelementptr @_output_, 0, %28
		%30 = zext i1 %26 to i8
		store %30, %29
		ret void

*BasicFunctionTypename: "__startrek_write_dir" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1294
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = zext i1 %0 to i8
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%6 = load @__startrek_task
		%7 = zext i8 %6 to i32
		switch %7, %24 [0, %8 1, %12 2, %16 3, %20]
	8:
		%9 = load @__startrek_round
		store %9, %4
		%10 = call zeroext i1 @__startrek_cs_t0()
		%11 = zext i1 %10 to i8
		store %11, %3
		br %24
	12:
		%13 = load @__startrek_round
		store %13, %4
		%14 = call zeroext i1 @__startrek_cs_t1()
		%15 = zext i1 %14 to i8
		store %15, %3
		br %24
	16:
		%17 = load @__startrek_round
		store %17, %4
		%18 = call zeroext i1 @__startrek_cs_t2()
		%19 = zext i1 %18 to i8
		store %19, %3
		br %24
	20:
		%21 = load @__startrek_round
		store %21, %4
		%22 = call zeroext i1 @__startrek_cs_t3()
		%23 = zext i1 %22 to i8
		store %23, %3
		br %24
	24:
		%25 = load %2
		%26 = trunc i8 %25 to i1
		%27 = load @__startrek_round
		%28 = zext i8 %27 to i64
		%29 = getelementptr @_dir_, 0, %28
		%30 = zext i1 %26 to i8
		store %30, %29
		ret void

*BasicFunctionTypename: "init" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1330
	0:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_R_state(i8 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_W_state(i8 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_T_state(i8 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @nxt_motor_set_count(i32 0, i32 0)
		Unnamed Call-Instruction = call BasicVoidType @nxt_motor_set_count(i32 1, i32 0)
		Unnamed Call-Instruction = call BasicVoidType @nxt_motor_set_count(i32 2, i32 0)
		store 0, @C_state
		store 0, @state
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_need_to_read(i1 zeroext 1)
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_need_to_run_nxtbg(i1 zeroext 0)
		store 0, @moved
		ret void

*BasicFunctionTypename: "__startrek_write_R_state" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1344
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @_R_state_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "__startrek_write_W_state" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1380
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @_W_state_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "__startrek_write_T_state" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1416
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @_T_state_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "__startrek_write_need_to_read" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1452
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = zext i1 %0 to i8
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%6 = load @__startrek_task
		%7 = zext i8 %6 to i32
		switch %7, %24 [0, %8 1, %12 2, %16 3, %20]
	8:
		%9 = load @__startrek_round
		store %9, %4
		%10 = call zeroext i1 @__startrek_cs_t0()
		%11 = zext i1 %10 to i8
		store %11, %3
		br %24
	12:
		%13 = load @__startrek_round
		store %13, %4
		%14 = call zeroext i1 @__startrek_cs_t1()
		%15 = zext i1 %14 to i8
		store %15, %3
		br %24
	16:
		%17 = load @__startrek_round
		store %17, %4
		%18 = call zeroext i1 @__startrek_cs_t2()
		%19 = zext i1 %18 to i8
		store %19, %3
		br %24
	20:
		%21 = load @__startrek_round
		store %21, %4
		%22 = call zeroext i1 @__startrek_cs_t3()
		%23 = zext i1 %22 to i8
		store %23, %3
		br %24
	24:
		%25 = load %2
		%26 = trunc i8 %25 to i1
		%27 = load @__startrek_round
		%28 = zext i8 %27 to i64
		%29 = getelementptr @_need_to_read_, 0, %28
		%30 = zext i1 %26 to i8
		store %30, %29
		ret void

*BasicFunctionTypename: "__startrek_write_need_to_run_nxtbg" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1488
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = zext i1 %0 to i8
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%6 = load @__startrek_task
		%7 = zext i8 %6 to i32
		switch %7, %24 [0, %8 1, %12 2, %16 3, %20]
	8:
		%9 = load @__startrek_round
		store %9, %4
		%10 = call zeroext i1 @__startrek_cs_t0()
		%11 = zext i1 %10 to i8
		store %11, %3
		br %24
	12:
		%13 = load @__startrek_round
		store %13, %4
		%14 = call zeroext i1 @__startrek_cs_t1()
		%15 = zext i1 %14 to i8
		store %15, %3
		br %24
	16:
		%17 = load @__startrek_round
		store %17, %4
		%18 = call zeroext i1 @__startrek_cs_t2()
		%19 = zext i1 %18 to i8
		store %19, %3
		br %24
	20:
		%21 = load @__startrek_round
		store %21, %4
		%22 = call zeroext i1 @__startrek_cs_t3()
		%23 = zext i1 %22 to i8
		store %23, %3
		br %24
	24:
		%25 = load %2
		%26 = trunc i8 %25 to i1
		%27 = load @__startrek_round
		%28 = zext i8 %27 to i64
		%29 = getelementptr @_need_to_run_nxtbg_, 0, %28
		%30 = zext i1 %26 to i8
		store %30, %29
		ret void

*BasicFunctionTypename: "move_motor" linkageType: EXTERNALLY_VISIBLE returnParam: i1 zeroext parameters: (0 i32, 1 i32, 2 i32, 3 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1524
	0:
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		%8 = alloca i32, align 4
		%9 = alloca i32, align 4
		%10 = alloca i32, align 4
		%11 = alloca i32, align 4
		%12 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		store %3, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %9)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %10)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %11)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %12)
		%13 = load %5
		%14 = call i32 @nxt_motor_get_count(i32 %13)
		store %14, %10
		%15 = load %10
		store %15, %9
		store 0, %12
		%16 = load %8
		%17 = load %9
		%18 = mul i32 %16, %17
		%19 = load %8
		%20 = load %7
		%21 = mul i32 %19, %20
		%22 = icmp sge %18 %21
		br %22, %23, %24
	23:
		store 0, %11
		store 1, %12
		br %39
	24:
		%25 = load %8
		%26 = load %7
		%27 = load %9
		%28 = sub i32 %26, %27
		%29 = mul i32 %25, %28
		%30 = icmp slt %29 60
		br %30, %31, %34
	31:
		%32 = load %8
		%33 = mul i32 %32, 15
		store %33, %11
		br %38
	34:
		%35 = load %8
		%36 = load %6
		%37 = mul i32 %35, %36
		store %37, %11
		br %38
	38:
		store 0, %12
		br %39
	39:
		%40 = load %5
		%41 = load %11
		Unnamed Call-Instruction = call BasicVoidType @nxt_motor_set_speed(i32 %40, i32 %41, i1 zeroext 1)
		%42 = load %12
		%43 = trunc i8 %42 to i1
		ret %43

*BasicFunctionTypename: "Controller" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1587
	0:
		%1 = alloca i32, align 4
		%2 = alloca i8, align 1
		%3 = alloca i32, align 4
		%4 = alloca i16, align 2
		%5 = alloca i32, align 4
		%6 = alloca i8, align 1
		%7 = alloca i32, align 4
		%8 = alloca i8, align 1
		%9 = alloca i8, align 1
		%10 = alloca i8, align 1
		%11 = alloca i8, align 1
		%12 = alloca i32, align 4
		%13 = alloca i8, align 1
		%14 = alloca i32, align 4
		%15 = alloca i8, align 1
		%16 = alloca i8, align 1
		%17 = alloca i8, align 1
		%18 = alloca i8, align 1
		%19 = alloca i8, align 1
		%20 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i16 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %9)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %10)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %11)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %12)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %13)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %14)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %15)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %16)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %17)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %18)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %19)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %20)
		%21 = load @state
		%22 = zext i8 %21 to i32
		store %22, %1
		%23 = call zeroext i1 @__startrek_read_need_to_run_nxtbg()
		%24 = zext i1 %23 to i8
		store %24, %2
		%25 = load %2
		%26 = trunc i8 %25 to i1
		br %26, %27, %28
	27:
		Unnamed Call-Instruction = call BasicVoidType @bg_nxtcolorsensor(i1 zeroext 1)
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_need_to_run_nxtbg(i1 zeroext 0)
		br %28
	28:
		%29 = load @TM_mode
		%30 = zext i8 %29 to i32
		switch %30, %153 [0, %31 1, %41 2, %42 3, %146]
	31:
		%32 = call i32 @calibrate()
		store %32, %3
		%33 = load %3
		%34 = trunc i32 %33 to i16
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_threshold(i16 zeroext %34)
		%35 = call zeroext i16 @__startrek_read_threshold()
		store %35, %4
		%36 = load %4
		%37 = zext i16 %36 to i32
		%38 = icmp sgt %37 0
		br %38, %39, %40
	39:
		store 1, @TM_mode
		br %40
	40:
		br %153
	41:
		Unnamed Call-Instruction = call BasicVoidType @init()
		store 3, @TM_mode
		br %153
	42:
		%43 = load @C_state
		%44 = zext i8 %43 to i32
		switch %44, %145 [0, %45 1, %78 2, %94 3, %131]
	45:
		%46 = call zeroext i1 @__startrek_read_need_to_read()
		%47 = zext i1 %46 to i8
		store %47, %9
		%48 = load %9
		%49 = trunc i8 %48 to i1
		br %49, %50, %76
	50:
		%51 = call i32 @nxt_motor_get_count(i32 0)
		store %51, %7
		%52 = load %7
		%53 = icmp slt %52 45
		br %53, %54, %62
	54:
		%55 = call zeroext i8 @__startrek_read_R_state()
		store %55, %8
		%56 = load %8
		%57 = zext i8 %56 to i32
		%58 = icmp eq %57 0
		br %58, %59, %60
	59:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_R_state(i8 zeroext 1)
		br %61
	60:
		br %63
	61:
		br %75
	62:
		br %63
	63:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%64 = call i32 @nxt_motor_get_count(i32 0)
		store %64, %5
		%65 = load %5
		%66 = icmp sge %65 45
		br %66, %67, %74
	67:
		%68 = call zeroext i8 @__startrek_read_R_state()
		store %68, %6
		%69 = load %6
		%70 = zext i8 %69 to i32
		%71 = icmp eq %70 0
		br %71, %72, %73
	72:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_R_state(i8 zeroext 3)
		br %73
	73:
		br %74
	74:
		br %75
	75:
		br %77
	76:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_R_state(i8 zeroext 0)
		store 1, @C_state
		br %77
	77:
		br %145
	78:
		%79 = load @state
		%80 = zext i8 %79 to i32
		store %80, %1
		%81 = call zeroext i1 @__startrek_read_input()
		%82 = zext i1 %81 to i8
		store %82, %10
		%83 = load @state
		%84 = zext i8 %83 to i16
		%85 = load %10
		%86 = trunc i8 %85 to i1
		%87 = call zeroext i1 @transition(i16 zeroext %84, i1 zeroext %86)
		%88 = zext i1 %87 to i8
		store %88, %11
		%89 = load %11
		%90 = trunc i8 %89 to i1
		br %90, %91, %92
	91:
		store 3, @TM_mode
		br %93
	92:
		store 2, @C_state
		br %93
	93:
		br %145
	94:
		%95 = call zeroext i1 @__startrek_read_input()
		%96 = zext i1 %95 to i8
		store %96, %16
		%97 = call zeroext i1 @__startrek_read_output()
		%98 = zext i1 %97 to i8
		store %98, %17
		%99 = load %16
		%100 = trunc i8 %99 to i1
		%101 = zext i1 %100 to i32
		%102 = load %17
		%103 = trunc i8 %102 to i1
		%104 = zext i1 %103 to i32
		%105 = icmp ne %101 %104
		br %105, %106, %129
	106:
		%107 = call i32 @nxt_motor_get_count(i32 0)
		store %107, %12
		%108 = load %12
		%109 = icmp sgt %108 0
		br %109, %110, %117
	110:
		%111 = call zeroext i8 @__startrek_read_R_state()
		store %111, %13
		%112 = load %13
		%113 = zext i8 %112 to i32
		%114 = icmp eq %113 0
		br %114, %115, %116
	115:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_R_state(i8 zeroext 2)
		br %116
	116:
		br %117
	117:
		%118 = call i32 @nxt_motor_get_count(i32 0)
		store %118, %14
		%119 = load %14
		%120 = icmp sle %119 0
		br %120, %121, %128
	121:
		%122 = call zeroext i8 @__startrek_read_W_state()
		store %122, %15
		%123 = load %15
		%124 = zext i8 %123 to i32
		%125 = icmp eq %124 0
		br %125, %126, %127
	126:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_W_state(i8 zeroext 1)
		br %127
	127:
		br %128
	128:
		br %130
	129:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_W_state(i8 zeroext 0)
		store 3, @C_state
		br %130
	130:
		br %145
	131:
		%132 = call zeroext i8 @__startrek_read_T_state()
		store %132, %19
		%133 = load %19
		%134 = zext i8 %133 to i32
		%135 = icmp eq %134 0
		br %135, %136, %137
	136:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_T_state(i8 zeroext 1)
		br %144
	137:
		%138 = call zeroext i8 @__startrek_read_T_state()
		store %138, %18
		%139 = load %18
		%140 = zext i8 %139 to i32
		%141 = icmp eq %140 2
		br %141, %142, %143
	142:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_T_state(i8 zeroext 0)
		store 0, @C_state
		br %143
	143:
		br %144
	144:
		br %145
	145:
		br %153
	146:
		%147 = call zeroext i1 @ecrobot_is_ENTER_button_pressed()
		%148 = zext i1 %147 to i8
		store %148, %20
		%149 = load %20
		%150 = trunc i8 %149 to i1
		br %150, %151, %152
	151:
		store 2, @TM_mode
		br %152
	152:
		br %153
	153:
		Unnamed Call-Instruction = call BasicVoidType @TerminateTask()
		ret void

*BasicFunctionTypename: "__startrek_read_need_to_run_nxtbg" linkageType: INTERNAL returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1808
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_need_to_run_nxtbg_, 0, %24
		%26 = load %25
		%27 = trunc i8 %26 to i1
		%28 = zext i1 %27 to i8
		store %28, %1
		%29 = load %1
		%30 = trunc i8 %29 to i1
		ret %30

*BasicFunctionTypename: "__startrek_write_threshold" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i16 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1843
	0:
		%2 = alloca i16, align 2
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i16 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @_threshold_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "__startrek_read_threshold" linkageType: INTERNAL returnParam: i16 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1881
	0:
		%1 = alloca i16, align 2
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i16 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_threshold_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "__startrek_read_need_to_read" linkageType: INTERNAL returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1918
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_need_to_read_, 0, %24
		%26 = load %25
		%27 = trunc i8 %26 to i1
		%28 = zext i1 %27 to i8
		store %28, %1
		%29 = load %1
		%30 = trunc i8 %29 to i1
		ret %30

*BasicFunctionTypename: "__startrek_read_R_state" linkageType: INTERNAL returnParam: i8 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1953
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_R_state_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "__startrek_read_input" linkageType: INTERNAL returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1988
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_input_, 0, %24
		%26 = load %25
		%27 = trunc i8 %26 to i1
		%28 = zext i1 %27 to i8
		store %28, %1
		%29 = load %1
		%30 = trunc i8 %29 to i1
		ret %30

*BasicFunctionTypename: "__startrek_read_output" linkageType: INTERNAL returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2023
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_output_, 0, %24
		%26 = load %25
		%27 = trunc i8 %26 to i1
		%28 = zext i1 %27 to i8
		store %28, %1
		%29 = load %1
		%30 = trunc i8 %29 to i1
		ret %30

*BasicFunctionTypename: "__startrek_read_W_state" linkageType: INTERNAL returnParam: i8 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2058
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_W_state_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "__startrek_read_T_state" linkageType: INTERNAL returnParam: i8 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2093
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_T_state_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "Reader" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2128
	0:
		%1 = alloca i16, align 2
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i32, align 4
		%9 = alloca i16, align 2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i16 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i16 %9)
		%10 = call zeroext i8 @__startrek_read_R_state()
		store %10, %2
		%11 = load %2
		%12 = zext i8 %11 to i32
		switch %12, %53 [0, %13 1, %14 2, %21 3, %28]
	13:
		br %53
	14:
		%15 = call zeroext i1 @move_motor(i32 0, i32 15, i32 45, i32 1)
		%16 = zext i1 %15 to i8
		store %16, %3
		%17 = load %3
		%18 = trunc i8 %17 to i1
		br %18, %19, %20
	19:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_R_state(i8 zeroext 0)
		br %20
	20:
		br %53
	21:
		%22 = call zeroext i1 @move_motor(i32 0, i32 15, i32 0, i32 -1)
		%23 = zext i1 %22 to i8
		store %23, %4
		%24 = load %4
		%25 = trunc i8 %24 to i1
		br %25, %26, %27
	26:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_R_state(i8 zeroext 0)
		br %27
	27:
		br %53
	28:
		%29 = call zeroext i8 @ecrobot_get_nxtcolorsensor_mode(i8 zeroext 0)
		store %29, %5
		%30 = load %5
		%31 = zext i8 %30 to i32
		%32 = icmp ne %31 2
		br %32, %33, %34
	33:
		Unnamed Call-Instruction = call BasicVoidType @ecrobot_set_nxtcolorsensor(i8 zeroext 0, i8 zeroext 2)
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_need_to_run_nxtbg(i1 zeroext 1)
		br %34
	34:
		%35 = call zeroext i8 @ecrobot_get_nxtcolorsensor_mode(i8 zeroext 0)
		store %35, %6
		%36 = load %6
		%37 = zext i8 %36 to i32
		%38 = icmp eq %37 2
		Unnamed Call-Instruction = call BasicVoidType @__startrek_assert_i0(i1 zeroext %38)
		Unnamed Call-Instruction = call BasicVoidType @bg_nxtcolorsensor(i1 zeroext 0)
		%39 = call zeroext i8 @ecrobot_get_nxtcolorsensor_light(i8 zeroext 0)
		store %39, %7
		%40 = load %7
		%41 = zext i8 %40 to i16
		store %41, %1
		%42 = call zeroext i16 @__startrek_read_threshold()
		store %42, %9
		%43 = load %1
		%44 = zext i16 %43 to i32
		%45 = load %9
		%46 = zext i16 %45 to i32
		%47 = icmp slt %44 %46
		br %47, %48, %49
	48:
		store 1, %8
		br %50
	49:
		store 0, %8
		br %50
	50:
		%51 = load %8
		%52 = icmp ne %51 0
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_input(i1 zeroext %52)
		Unnamed Call-Instruction = call BasicVoidType @ecrobot_set_nxtcolorsensor(i8 zeroext 0, i8 zeroext 5)
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_need_to_run_nxtbg(i1 zeroext 1)
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_R_state(i8 zeroext 0)
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_need_to_read(i1 zeroext 0)
		br %53
	53:
		Unnamed Call-Instruction = call BasicVoidType @TerminateTask()
		ret void

*BasicFunctionTypename: "__startrek_assert_i0" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2215
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%4 = load @__startrek_hyper_period
		%5 = zext i8 %4 to i32
		%6 = icmp ne %5 0
		br %6, %7, %8
	7:
		br %39
	8:
		%9 = load %2
		%10 = trunc i8 %9 to i1
		br %10, %11, %12
	11:
		br %39
	12:
		%13 = load @__startrek_round
		%14 = zext i8 %13 to i32
		%15 = load @__startrek_error_round
		%16 = zext i8 %15 to i32
		%17 = icmp slt %14 %16
		br %17, %18, %20
	18:
		%19 = load @__startrek_round
		store %19, @__startrek_error_round
		br %20
	20:
		%21 = load @__startrek_task
		%22 = zext i8 %21 to i32
		switch %22, %39 [0, %23 1, %27 2, %31 3, %35]
	23:
		%24 = load @__startrek_job
		%25 = zext i8 %24 to i64
		%26 = getelementptr @__startrek_Assert_t0_i0, 0, %25
		store 0, %26
		br %39
	27:
		%28 = load @__startrek_job
		%29 = zext i8 %28 to i64
		%30 = getelementptr @__startrek_Assert_t1_i0, 0, %29
		store 0, %30
		br %39
	31:
		%32 = load @__startrek_job
		%33 = zext i8 %32 to i64
		%34 = getelementptr @__startrek_Assert_t2_i0, 0, %33
		store 0, %34
		br %39
	35:
		%36 = load @__startrek_job
		%37 = zext i8 %36 to i64
		%38 = getelementptr @__startrek_Assert_t3_i0, 0, %37
		store 0, %38
		br %39
	39:
		ret void

*BasicFunctionTypename: "__startrek_write_input" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2254
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = zext i1 %0 to i8
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%6 = load @__startrek_task
		%7 = zext i8 %6 to i32
		switch %7, %24 [0, %8 1, %12 2, %16 3, %20]
	8:
		%9 = load @__startrek_round
		store %9, %4
		%10 = call zeroext i1 @__startrek_cs_t0()
		%11 = zext i1 %10 to i8
		store %11, %3
		br %24
	12:
		%13 = load @__startrek_round
		store %13, %4
		%14 = call zeroext i1 @__startrek_cs_t1()
		%15 = zext i1 %14 to i8
		store %15, %3
		br %24
	16:
		%17 = load @__startrek_round
		store %17, %4
		%18 = call zeroext i1 @__startrek_cs_t2()
		%19 = zext i1 %18 to i8
		store %19, %3
		br %24
	20:
		%21 = load @__startrek_round
		store %21, %4
		%22 = call zeroext i1 @__startrek_cs_t3()
		%23 = zext i1 %22 to i8
		store %23, %3
		br %24
	24:
		%25 = load %2
		%26 = trunc i8 %25 to i1
		%27 = load @__startrek_round
		%28 = zext i8 %27 to i64
		%29 = getelementptr @_input_, 0, %28
		%30 = zext i1 %26 to i8
		store %30, %29
		ret void

*BasicFunctionTypename: "Writer" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2289
	0:
		%1 = alloca i32, align 4
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i8, align 1
		%6 = alloca i32, align 4
		%7 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%8 = call zeroext i1 @__startrek_read_output()
		%9 = zext i1 %8 to i8
		store %9, %2
		%10 = load %2
		%11 = trunc i8 %10 to i1
		%12 = zext i1 %11 to i32
		%13 = icmp eq %12 1
		br %13, %14, %15
	14:
		store 1, %1
		br %16
	15:
		store -1, %1
		br %16
	16:
		%17 = call zeroext i8 @__startrek_read_W_state()
		store %17, %3
		%18 = load %3
		%19 = zext i8 %18 to i32
		switch %19, %43 [0, %20 1, %21]
	20:
		br %43
	21:
		%22 = load %1
		%23 = mul i32 %22, 180
		%24 = load %1
		%25 = call zeroext i1 @move_motor(i32 1, i32 30, i32 %23, i32 %24)
		%26 = zext i1 %25 to i8
		store %26, %7
		%27 = load %7
		%28 = trunc i8 %27 to i1
		br %28, %29, %42
	29:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_W_state(i8 zeroext 0)
		%30 = call i32 @nxt_motor_get_count(i32 1)
		store %30, %4
		%31 = load %4
		%32 = srem i32 %31, 180
		Unnamed Call-Instruction = call BasicVoidType @nxt_motor_set_count(i32 1, i32 %32)
		%33 = call zeroext i1 @__startrek_read_input()
		%34 = zext i1 %33 to i8
		store %34, %5
		%35 = load %5
		%36 = trunc i8 %35 to i1
		br %36, %37, %38
	37:
		store 0, %6
		br %39
	38:
		store 1, %6
		br %39
	39:
		%40 = load %6
		%41 = icmp ne %40 0
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_input(i1 zeroext %41)
		br %42
	42:
		br %43
	43:
		Unnamed Call-Instruction = call BasicVoidType @TerminateTask()
		ret void

*BasicFunctionTypename: "TapeMover" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2352
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i32, align 4
		%4 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = call zeroext i1 @__startrek_read_dir()
		%6 = zext i1 %5 to i8
		store %6, %1
		%7 = load %1
		%8 = trunc i8 %7 to i1
		%9 = zext i1 %8 to i32
		%10 = icmp eq %9 0
		br %10, %11, %12
	11:
		store 1, @sign
		br %13
	12:
		store -1, @sign
		br %13
	13:
		%14 = call zeroext i8 @__startrek_read_T_state()
		store %14, %2
		%15 = load %2
		%16 = zext i8 %15 to i32
		switch %16, %31 [0, %17 2, %17 1, %18]
	17:
		br %31
	18:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_need_to_read(i1 zeroext 1)
		%19 = load @sign
		%20 = mul i32 %19, 1800
		%21 = load @sign
		%22 = call zeroext i1 @move_motor(i32 2, i32 100, i32 %20, i32 %21)
		%23 = zext i1 %22 to i8
		store %23, %4
		%24 = load %4
		%25 = trunc i8 %24 to i1
		br %25, %26, %30
	26:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write_T_state(i8 zeroext 2)
		%27 = call i32 @nxt_motor_get_count(i32 2)
		store %27, %3
		%28 = load %3
		%29 = srem i32 %28, 1800
		Unnamed Call-Instruction = call BasicVoidType @nxt_motor_set_count(i32 2, i32 %29)
		br %30
	30:
		br %31
	31:
		Unnamed Call-Instruction = call BasicVoidType @TerminateTask()
		ret void

*BasicFunctionTypename: "__startrek_read_dir" linkageType: INTERNAL returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2398
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @_dir_, 0, %24
		%26 = load %25
		%27 = trunc i8 %26 to i1
		%28 = zext i1 %27 to i8
		store %28, %1
		%29 = load %1
		%30 = trunc i8 %29 to i1
		ret %30

*BasicFunctionTypename: "cil_keeperController" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2433
	0:
		%1 = call zeroext i1 @__startrek_entry_pt_Controller()
		ret void

*BasicFunctionTypename: "__startrek_entry_pt_Controller" linkageType: INTERNAL returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2436
	0:
		%1 = alloca i1, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store 1, @__startrek_lock
		%5 = call signext i8 @__startrek_read___startrek_current_priority()
		store %5, %3
		%6 = load %3
		store %6, %2
		store 0, @__startrek_lock
		%7 = load @__startrek_base_priority_Controller
		%8 = sext i8 %7 to i32
		%9 = load %2
		%10 = sext i8 %9 to i32
		%11 = icmp sle %8 %10
		br %11, %12, %13
	12:
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 0)
		store 0, %1
		br %22
	13:
		store 1, @__startrek_lock
		%14 = load @__startrek_base_priority_Controller
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write___startrek_current_priority(i8 signext %14)
		store 0, @__startrek_lock
		store 0, @__startrek_pi_locks_held
		%15 = load @__startrek_base_priority_Controller
		store %15, @__startrek_task_base_priority
		Unnamed Call-Instruction = call BasicVoidType @Controller()
		store 1, @__startrek_lock
		%16 = call signext i8 @__startrek_read___startrek_job_count_Controller()
		store %16, %4
		%17 = load %4
		%18 = sext i8 %17 to i32
		%19 = add i32 %18, 1
		%20 = trunc i32 %19 to i8
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write___startrek_job_count_Controller(i8 signext %20)
		%21 = load %2
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write___startrek_current_priority(i8 signext %21)
		store 0, @__startrek_lock
		store 1, %1
		br %22
	22:
		%23 = load %1
		ret %23

*BasicFunctionTypename: "cil_keeperTapeMover" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2467
	0:
		%1 = call zeroext i1 @__startrek_entry_pt_TapeMover()
		ret void

*BasicFunctionTypename: "__startrek_entry_pt_TapeMover" linkageType: INTERNAL returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2470
	0:
		%1 = alloca i1, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store 1, @__startrek_lock
		%5 = call signext i8 @__startrek_read___startrek_current_priority()
		store %5, %3
		%6 = load %3
		store %6, %2
		store 0, @__startrek_lock
		%7 = load @__startrek_base_priority_TapeMover
		%8 = sext i8 %7 to i32
		%9 = load %2
		%10 = sext i8 %9 to i32
		%11 = icmp sle %8 %10
		br %11, %12, %13
	12:
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 0)
		store 0, %1
		br %22
	13:
		store 1, @__startrek_lock
		%14 = load @__startrek_base_priority_TapeMover
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write___startrek_current_priority(i8 signext %14)
		store 0, @__startrek_lock
		store 0, @__startrek_pi_locks_held
		%15 = load @__startrek_base_priority_TapeMover
		store %15, @__startrek_task_base_priority
		Unnamed Call-Instruction = call BasicVoidType @TapeMover()
		store 1, @__startrek_lock
		%16 = call signext i8 @__startrek_read___startrek_job_count_TapeMover()
		store %16, %4
		%17 = load %4
		%18 = sext i8 %17 to i32
		%19 = add i32 %18, 1
		%20 = trunc i32 %19 to i8
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write___startrek_job_count_TapeMover(i8 signext %20)
		%21 = load %2
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write___startrek_current_priority(i8 signext %21)
		store 0, @__startrek_lock
		store 1, %1
		br %22
	22:
		%23 = load %1
		ret %23

*BasicFunctionTypename: "cil_keeperReader" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2501
	0:
		%1 = call zeroext i1 @__startrek_entry_pt_Reader()
		ret void

*BasicFunctionTypename: "__startrek_entry_pt_Reader" linkageType: INTERNAL returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2504
	0:
		%1 = alloca i1, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store 1, @__startrek_lock
		%5 = call signext i8 @__startrek_read___startrek_current_priority()
		store %5, %3
		%6 = load %3
		store %6, %2
		store 0, @__startrek_lock
		%7 = load @__startrek_base_priority_Reader
		%8 = sext i8 %7 to i32
		%9 = load %2
		%10 = sext i8 %9 to i32
		%11 = icmp sle %8 %10
		br %11, %12, %13
	12:
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 0)
		store 0, %1
		br %22
	13:
		store 1, @__startrek_lock
		%14 = load @__startrek_base_priority_Reader
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write___startrek_current_priority(i8 signext %14)
		store 0, @__startrek_lock
		store 0, @__startrek_pi_locks_held
		%15 = load @__startrek_base_priority_Reader
		store %15, @__startrek_task_base_priority
		Unnamed Call-Instruction = call BasicVoidType @Reader()
		store 1, @__startrek_lock
		%16 = call signext i8 @__startrek_read___startrek_job_count_Reader()
		store %16, %4
		%17 = load %4
		%18 = sext i8 %17 to i32
		%19 = add i32 %18, 1
		%20 = trunc i32 %19 to i8
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write___startrek_job_count_Reader(i8 signext %20)
		%21 = load %2
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write___startrek_current_priority(i8 signext %21)
		store 0, @__startrek_lock
		store 1, %1
		br %22
	22:
		%23 = load %1
		ret %23

*BasicFunctionTypename: "cil_keeperWriter" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2534
	0:
		%1 = call zeroext i1 @__startrek_entry_pt_Writer()
		ret void

*BasicFunctionTypename: "__startrek_entry_pt_Writer" linkageType: INTERNAL returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2537
	0:
		%1 = alloca i1, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store 1, @__startrek_lock
		%5 = call signext i8 @__startrek_read___startrek_current_priority()
		store %5, %3
		%6 = load %3
		store %6, %2
		store 0, @__startrek_lock
		%7 = load @__startrek_base_priority_Writer
		%8 = sext i8 %7 to i32
		%9 = load %2
		%10 = sext i8 %9 to i32
		%11 = icmp sle %8 %10
		br %11, %12, %13
	12:
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 0)
		store 0, %1
		br %22
	13:
		store 1, @__startrek_lock
		%14 = load @__startrek_base_priority_Writer
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write___startrek_current_priority(i8 signext %14)
		store 0, @__startrek_lock
		store 0, @__startrek_pi_locks_held
		%15 = load @__startrek_base_priority_Writer
		store %15, @__startrek_task_base_priority
		Unnamed Call-Instruction = call BasicVoidType @Writer()
		store 1, @__startrek_lock
		%16 = call signext i8 @__startrek_read___startrek_job_count_Writer()
		store %16, %4
		%17 = load %4
		%18 = sext i8 %17 to i32
		%19 = add i32 %18, 1
		%20 = trunc i32 %19 to i8
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write___startrek_job_count_Writer(i8 signext %20)
		%21 = load %2
		Unnamed Call-Instruction = call BasicVoidType @__startrek_write___startrek_current_priority(i8 signext %21)
		store 0, @__startrek_lock
		store 1, %1
		br %22
	22:
		%23 = load %1
		ret %23

*BasicFunctionTypename: "__main" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 2567
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		store 28, @__startrek_error_round
		Unnamed Call-Instruction = call BasicVoidType @__startrek_schedule_jobs()
		Unnamed Call-Instruction = call BasicVoidType @__startrek_init_globals()
		store 0, @__startrek_task
		store 0, @__startrek_job
		store 1, @__startrek_is_first_cs
		%2 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@778f927f
		store %2, @__startrek_round
		%3 = load @__startrek_round
		%4 = zext i8 %3 to i32
		%5 = load @__startrek_error_round
		%6 = zext i8 %5 to i32
		%7 = icmp slt %4 %6
		br %7, %8, %18
	8:
		%9 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@77e82096
		store %9, @__startrek_job_end
		%10 = call zeroext i1 @__startrek_entry_pt_Controller()
		%11 = zext i1 %10 to i8
		store %11, %1
		store 0, @__startrek_lock
		%12 = load @__startrek_round
		%13 = zext i8 %12 to i32
		%14 = load @__startrek_job_end
		%15 = zext i8 %14 to i32
		%16 = icmp eq %13 %15
		%17 = zext i1 %16 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %17)
		br %18
	18:
		store 1, @__startrek_job
		store 1, @__startrek_is_first_cs
		%19 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@dfbe847
		store %19, @__startrek_round
		%20 = load @__startrek_round
		%21 = zext i8 %20 to i32
		%22 = load @__startrek_error_round
		%23 = zext i8 %22 to i32
		%24 = icmp slt %21 %23
		br %24, %25, %35
	25:
		%26 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6bbc67c9
		store %26, @__startrek_job_end
		%27 = call zeroext i1 @__startrek_entry_pt_Controller()
		%28 = zext i1 %27 to i8
		store %28, %1
		store 0, @__startrek_lock
		%29 = load @__startrek_round
		%30 = zext i8 %29 to i32
		%31 = load @__startrek_job_end
		%32 = zext i8 %31 to i32
		%33 = icmp eq %30 %32
		%34 = zext i1 %33 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %34)
		br %35
	35:
		store 2, @__startrek_job
		store 1, @__startrek_is_first_cs
		%36 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@60ab1cab
		store %36, @__startrek_round
		%37 = load @__startrek_round
		%38 = zext i8 %37 to i32
		%39 = load @__startrek_error_round
		%40 = zext i8 %39 to i32
		%41 = icmp slt %38 %40
		br %41, %42, %52
	42:
		%43 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@56716cb8
		store %43, @__startrek_job_end
		%44 = call zeroext i1 @__startrek_entry_pt_Controller()
		%45 = zext i1 %44 to i8
		store %45, %1
		store 0, @__startrek_lock
		%46 = load @__startrek_round
		%47 = zext i8 %46 to i32
		%48 = load @__startrek_job_end
		%49 = zext i8 %48 to i32
		%50 = icmp eq %47 %49
		%51 = zext i1 %50 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %51)
		br %52
	52:
		store 3, @__startrek_job
		store 1, @__startrek_is_first_cs
		%53 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@41a0fe1
		store %53, @__startrek_round
		%54 = load @__startrek_round
		%55 = zext i8 %54 to i32
		%56 = load @__startrek_error_round
		%57 = zext i8 %56 to i32
		%58 = icmp slt %55 %57
		br %58, %59, %69
	59:
		%60 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@c10b284
		store %60, @__startrek_job_end
		%61 = call zeroext i1 @__startrek_entry_pt_Controller()
		%62 = zext i1 %61 to i8
		store %62, %1
		store 0, @__startrek_lock
		%63 = load @__startrek_round
		%64 = zext i8 %63 to i32
		%65 = load @__startrek_job_end
		%66 = zext i8 %65 to i32
		%67 = icmp eq %64 %66
		%68 = zext i1 %67 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %68)
		br %69
	69:
		store 1, @__startrek_task
		store 0, @__startrek_job
		store 1, @__startrek_is_first_cs
		%70 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3466b9e9
		store %70, @__startrek_round
		%71 = load @__startrek_round
		%72 = zext i8 %71 to i32
		%73 = load @__startrek_error_round
		%74 = zext i8 %73 to i32
		%75 = icmp slt %72 %74
		br %75, %76, %86
	76:
		%77 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@69af0771
		store %77, @__startrek_job_end
		%78 = call zeroext i1 @__startrek_entry_pt_TapeMover()
		%79 = zext i1 %78 to i8
		store %79, %1
		store 0, @__startrek_lock
		%80 = load @__startrek_round
		%81 = zext i8 %80 to i32
		%82 = load @__startrek_job_end
		%83 = zext i8 %82 to i32
		%84 = icmp eq %81 %83
		%85 = zext i1 %84 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %85)
		br %86
	86:
		store 1, @__startrek_job
		store 1, @__startrek_is_first_cs
		%87 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3d9e78a2
		store %87, @__startrek_round
		%88 = load @__startrek_round
		%89 = zext i8 %88 to i32
		%90 = load @__startrek_error_round
		%91 = zext i8 %90 to i32
		%92 = icmp slt %89 %91
		br %92, %93, %103
	93:
		%94 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@34937907
		store %94, @__startrek_job_end
		%95 = call zeroext i1 @__startrek_entry_pt_TapeMover()
		%96 = zext i1 %95 to i8
		store %96, %1
		store 0, @__startrek_lock
		%97 = load @__startrek_round
		%98 = zext i8 %97 to i32
		%99 = load @__startrek_job_end
		%100 = zext i8 %99 to i32
		%101 = icmp eq %98 %100
		%102 = zext i1 %101 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %102)
		br %103
	103:
		store 2, @__startrek_job
		store 1, @__startrek_is_first_cs
		%104 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@353b278d
		store %104, @__startrek_round
		%105 = load @__startrek_round
		%106 = zext i8 %105 to i32
		%107 = load @__startrek_error_round
		%108 = zext i8 %107 to i32
		%109 = icmp slt %106 %108
		br %109, %110, %120
	110:
		%111 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@243e3ad4
		store %111, @__startrek_job_end
		%112 = call zeroext i1 @__startrek_entry_pt_TapeMover()
		%113 = zext i1 %112 to i8
		store %113, %1
		store 0, @__startrek_lock
		%114 = load @__startrek_round
		%115 = zext i8 %114 to i32
		%116 = load @__startrek_job_end
		%117 = zext i8 %116 to i32
		%118 = icmp eq %115 %117
		%119 = zext i1 %118 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %119)
		br %120
	120:
		store 3, @__startrek_job
		store 1, @__startrek_is_first_cs
		%121 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6a2b1d99
		store %121, @__startrek_round
		%122 = load @__startrek_round
		%123 = zext i8 %122 to i32
		%124 = load @__startrek_error_round
		%125 = zext i8 %124 to i32
		%126 = icmp slt %123 %125
		br %126, %127, %137
	127:
		%128 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@45df1a9a
		store %128, @__startrek_job_end
		%129 = call zeroext i1 @__startrek_entry_pt_TapeMover()
		%130 = zext i1 %129 to i8
		store %130, %1
		store 0, @__startrek_lock
		%131 = load @__startrek_round
		%132 = zext i8 %131 to i32
		%133 = load @__startrek_job_end
		%134 = zext i8 %133 to i32
		%135 = icmp eq %132 %134
		%136 = zext i1 %135 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %136)
		br %137
	137:
		store 4, @__startrek_job
		store 1, @__startrek_is_first_cs
		%138 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@29345ae3
		store %138, @__startrek_round
		%139 = load @__startrek_round
		%140 = zext i8 %139 to i32
		%141 = load @__startrek_error_round
		%142 = zext i8 %141 to i32
		%143 = icmp slt %140 %142
		br %143, %144, %154
	144:
		%145 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7c893d8b
		store %145, @__startrek_job_end
		%146 = call zeroext i1 @__startrek_entry_pt_TapeMover()
		%147 = zext i1 %146 to i8
		store %147, %1
		store 0, @__startrek_lock
		%148 = load @__startrek_round
		%149 = zext i8 %148 to i32
		%150 = load @__startrek_job_end
		%151 = zext i8 %150 to i32
		%152 = icmp eq %149 %151
		%153 = zext i1 %152 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %153)
		br %154
	154:
		store 5, @__startrek_job
		store 1, @__startrek_is_first_cs
		%155 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4efc3056
		store %155, @__startrek_round
		%156 = load @__startrek_round
		%157 = zext i8 %156 to i32
		%158 = load @__startrek_error_round
		%159 = zext i8 %158 to i32
		%160 = icmp slt %157 %159
		br %160, %161, %171
	161:
		%162 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@734af8d9
		store %162, @__startrek_job_end
		%163 = call zeroext i1 @__startrek_entry_pt_TapeMover()
		%164 = zext i1 %163 to i8
		store %164, %1
		store 0, @__startrek_lock
		%165 = load @__startrek_round
		%166 = zext i8 %165 to i32
		%167 = load @__startrek_job_end
		%168 = zext i8 %167 to i32
		%169 = icmp eq %166 %168
		%170 = zext i1 %169 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %170)
		br %171
	171:
		store 6, @__startrek_job
		store 1, @__startrek_is_first_cs
		%172 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@78a24711
		store %172, @__startrek_round
		%173 = load @__startrek_round
		%174 = zext i8 %173 to i32
		%175 = load @__startrek_error_round
		%176 = zext i8 %175 to i32
		%177 = icmp slt %174 %176
		br %177, %178, %188
	178:
		%179 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4d7258eb
		store %179, @__startrek_job_end
		%180 = call zeroext i1 @__startrek_entry_pt_TapeMover()
		%181 = zext i1 %180 to i8
		store %181, %1
		store 0, @__startrek_lock
		%182 = load @__startrek_round
		%183 = zext i8 %182 to i32
		%184 = load @__startrek_job_end
		%185 = zext i8 %184 to i32
		%186 = icmp eq %183 %185
		%187 = zext i1 %186 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %187)
		br %188
	188:
		store 7, @__startrek_job
		store 1, @__startrek_is_first_cs
		%189 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@62a3af93
		store %189, @__startrek_round
		%190 = load @__startrek_round
		%191 = zext i8 %190 to i32
		%192 = load @__startrek_error_round
		%193 = zext i8 %192 to i32
		%194 = icmp slt %191 %193
		br %194, %195, %205
	195:
		%196 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@468b0f2e
		store %196, @__startrek_job_end
		%197 = call zeroext i1 @__startrek_entry_pt_TapeMover()
		%198 = zext i1 %197 to i8
		store %198, %1
		store 0, @__startrek_lock
		%199 = load @__startrek_round
		%200 = zext i8 %199 to i32
		%201 = load @__startrek_job_end
		%202 = zext i8 %201 to i32
		%203 = icmp eq %200 %202
		%204 = zext i1 %203 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %204)
		br %205
	205:
		store 2, @__startrek_task
		store 0, @__startrek_job
		store 1, @__startrek_is_first_cs
		%206 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2cfb5221
		store %206, @__startrek_round
		%207 = load @__startrek_round
		%208 = zext i8 %207 to i32
		%209 = load @__startrek_error_round
		%210 = zext i8 %209 to i32
		%211 = icmp slt %208 %210
		br %211, %212, %222
	212:
		%213 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7391f255
		store %213, @__startrek_job_end
		%214 = call zeroext i1 @__startrek_entry_pt_Reader()
		%215 = zext i1 %214 to i8
		store %215, %1
		store 0, @__startrek_lock
		%216 = load @__startrek_round
		%217 = zext i8 %216 to i32
		%218 = load @__startrek_job_end
		%219 = zext i8 %218 to i32
		%220 = icmp eq %217 %219
		%221 = zext i1 %220 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %221)
		br %222
	222:
		store 1, @__startrek_job
		store 1, @__startrek_is_first_cs
		%223 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@cb11483
		store %223, @__startrek_round
		%224 = load @__startrek_round
		%225 = zext i8 %224 to i32
		%226 = load @__startrek_error_round
		%227 = zext i8 %226 to i32
		%228 = icmp slt %225 %227
		br %228, %229, %239
	229:
		%230 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@125d8844
		store %230, @__startrek_job_end
		%231 = call zeroext i1 @__startrek_entry_pt_Reader()
		%232 = zext i1 %231 to i8
		store %232, %1
		store 0, @__startrek_lock
		%233 = load @__startrek_round
		%234 = zext i8 %233 to i32
		%235 = load @__startrek_job_end
		%236 = zext i8 %235 to i32
		%237 = icmp eq %234 %236
		%238 = zext i1 %237 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %238)
		br %239
	239:
		store 2, @__startrek_job
		store 1, @__startrek_is_first_cs
		%240 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6441aa74
		store %240, @__startrek_round
		%241 = load @__startrek_round
		%242 = zext i8 %241 to i32
		%243 = load @__startrek_error_round
		%244 = zext i8 %243 to i32
		%245 = icmp slt %242 %244
		br %245, %246, %256
	246:
		%247 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@18beeff3
		store %247, @__startrek_job_end
		%248 = call zeroext i1 @__startrek_entry_pt_Reader()
		%249 = zext i1 %248 to i8
		store %249, %1
		store 0, @__startrek_lock
		%250 = load @__startrek_round
		%251 = zext i8 %250 to i32
		%252 = load @__startrek_job_end
		%253 = zext i8 %252 to i32
		%254 = icmp eq %251 %253
		%255 = zext i1 %254 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %255)
		br %256
	256:
		store 3, @__startrek_job
		store 1, @__startrek_is_first_cs
		%257 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1caff56b
		store %257, @__startrek_round
		%258 = load @__startrek_round
		%259 = zext i8 %258 to i32
		%260 = load @__startrek_error_round
		%261 = zext i8 %260 to i32
		%262 = icmp slt %259 %261
		br %262, %263, %273
	263:
		%264 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@62ce4112
		store %264, @__startrek_job_end
		%265 = call zeroext i1 @__startrek_entry_pt_Reader()
		%266 = zext i1 %265 to i8
		store %266, %1
		store 0, @__startrek_lock
		%267 = load @__startrek_round
		%268 = zext i8 %267 to i32
		%269 = load @__startrek_job_end
		%270 = zext i8 %269 to i32
		%271 = icmp eq %268 %270
		%272 = zext i1 %271 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %272)
		br %273
	273:
		store 4, @__startrek_job
		store 1, @__startrek_is_first_cs
		%274 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@b355535
		store %274, @__startrek_round
		%275 = load @__startrek_round
		%276 = zext i8 %275 to i32
		%277 = load @__startrek_error_round
		%278 = zext i8 %277 to i32
		%279 = icmp slt %276 %278
		br %279, %280, %290
	280:
		%281 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@641bf2d7
		store %281, @__startrek_job_end
		%282 = call zeroext i1 @__startrek_entry_pt_Reader()
		%283 = zext i1 %282 to i8
		store %283, %1
		store 0, @__startrek_lock
		%284 = load @__startrek_round
		%285 = zext i8 %284 to i32
		%286 = load @__startrek_job_end
		%287 = zext i8 %286 to i32
		%288 = icmp eq %285 %287
		%289 = zext i1 %288 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %289)
		br %290
	290:
		store 5, @__startrek_job
		store 1, @__startrek_is_first_cs
		%291 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@77c5792
		store %291, @__startrek_round
		%292 = load @__startrek_round
		%293 = zext i8 %292 to i32
		%294 = load @__startrek_error_round
		%295 = zext i8 %294 to i32
		%296 = icmp slt %293 %295
		br %296, %297, %307
	297:
		%298 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@17aa40be
		store %298, @__startrek_job_end
		%299 = call zeroext i1 @__startrek_entry_pt_Reader()
		%300 = zext i1 %299 to i8
		store %300, %1
		store 0, @__startrek_lock
		%301 = load @__startrek_round
		%302 = zext i8 %301 to i32
		%303 = load @__startrek_job_end
		%304 = zext i8 %303 to i32
		%305 = icmp eq %302 %304
		%306 = zext i1 %305 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %306)
		br %307
	307:
		store 6, @__startrek_job
		store 1, @__startrek_is_first_cs
		%308 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@36172383
		store %308, @__startrek_round
		%309 = load @__startrek_round
		%310 = zext i8 %309 to i32
		%311 = load @__startrek_error_round
		%312 = zext i8 %311 to i32
		%313 = icmp slt %310 %312
		br %313, %314, %324
	314:
		%315 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@d21e2dc
		store %315, @__startrek_job_end
		%316 = call zeroext i1 @__startrek_entry_pt_Reader()
		%317 = zext i1 %316 to i8
		store %317, %1
		store 0, @__startrek_lock
		%318 = load @__startrek_round
		%319 = zext i8 %318 to i32
		%320 = load @__startrek_job_end
		%321 = zext i8 %320 to i32
		%322 = icmp eq %319 %321
		%323 = zext i1 %322 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %323)
		br %324
	324:
		store 7, @__startrek_job
		store 1, @__startrek_is_first_cs
		%325 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6804f42d
		store %325, @__startrek_round
		%326 = load @__startrek_round
		%327 = zext i8 %326 to i32
		%328 = load @__startrek_error_round
		%329 = zext i8 %328 to i32
		%330 = icmp slt %327 %329
		br %330, %331, %341
	331:
		%332 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2deee623
		store %332, @__startrek_job_end
		%333 = call zeroext i1 @__startrek_entry_pt_Reader()
		%334 = zext i1 %333 to i8
		store %334, %1
		store 0, @__startrek_lock
		%335 = load @__startrek_round
		%336 = zext i8 %335 to i32
		%337 = load @__startrek_job_end
		%338 = zext i8 %337 to i32
		%339 = icmp eq %336 %338
		%340 = zext i1 %339 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %340)
		br %341
	341:
		store 3, @__startrek_task
		store 0, @__startrek_job
		store 1, @__startrek_is_first_cs
		%342 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@226ad326
		store %342, @__startrek_round
		%343 = load @__startrek_round
		%344 = zext i8 %343 to i32
		%345 = load @__startrek_error_round
		%346 = zext i8 %345 to i32
		%347 = icmp slt %344 %346
		br %347, %348, %358
	348:
		%349 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@20dff2b5
		store %349, @__startrek_job_end
		%350 = call zeroext i1 @__startrek_entry_pt_Writer()
		%351 = zext i1 %350 to i8
		store %351, %1
		store 0, @__startrek_lock
		%352 = load @__startrek_round
		%353 = zext i8 %352 to i32
		%354 = load @__startrek_job_end
		%355 = zext i8 %354 to i32
		%356 = icmp eq %353 %355
		%357 = zext i1 %356 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %357)
		br %358
	358:
		store 1, @__startrek_job
		store 1, @__startrek_is_first_cs
		%359 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6f35cf1f
		store %359, @__startrek_round
		%360 = load @__startrek_round
		%361 = zext i8 %360 to i32
		%362 = load @__startrek_error_round
		%363 = zext i8 %362 to i32
		%364 = icmp slt %361 %363
		br %364, %365, %375
	365:
		%366 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@35b0e324
		store %366, @__startrek_job_end
		%367 = call zeroext i1 @__startrek_entry_pt_Writer()
		%368 = zext i1 %367 to i8
		store %368, %1
		store 0, @__startrek_lock
		%369 = load @__startrek_round
		%370 = zext i8 %369 to i32
		%371 = load @__startrek_job_end
		%372 = zext i8 %371 to i32
		%373 = icmp eq %370 %372
		%374 = zext i1 %373 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %374)
		br %375
	375:
		store 2, @__startrek_job
		store 1, @__startrek_is_first_cs
		%376 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@41b7f557
		store %376, @__startrek_round
		%377 = load @__startrek_round
		%378 = zext i8 %377 to i32
		%379 = load @__startrek_error_round
		%380 = zext i8 %379 to i32
		%381 = icmp slt %378 %380
		br %381, %382, %392
	382:
		%383 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1e22fd8e
		store %383, @__startrek_job_end
		%384 = call zeroext i1 @__startrek_entry_pt_Writer()
		%385 = zext i1 %384 to i8
		store %385, %1
		store 0, @__startrek_lock
		%386 = load @__startrek_round
		%387 = zext i8 %386 to i32
		%388 = load @__startrek_job_end
		%389 = zext i8 %388 to i32
		%390 = icmp eq %387 %389
		%391 = zext i1 %390 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %391)
		br %392
	392:
		store 3, @__startrek_job
		store 1, @__startrek_is_first_cs
		%393 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5fae8462
		store %393, @__startrek_round
		%394 = load @__startrek_round
		%395 = zext i8 %394 to i32
		%396 = load @__startrek_error_round
		%397 = zext i8 %396 to i32
		%398 = icmp slt %395 %397
		br %398, %399, %409
	399:
		%400 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6db5f570
		store %400, @__startrek_job_end
		%401 = call zeroext i1 @__startrek_entry_pt_Writer()
		%402 = zext i1 %401 to i8
		store %402, %1
		store 0, @__startrek_lock
		%403 = load @__startrek_round
		%404 = zext i8 %403 to i32
		%405 = load @__startrek_job_end
		%406 = zext i8 %405 to i32
		%407 = icmp eq %404 %406
		%408 = zext i1 %407 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %408)
		br %409
	409:
		store 4, @__startrek_job
		store 1, @__startrek_is_first_cs
		%410 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@13d6a8dc
		store %410, @__startrek_round
		%411 = load @__startrek_round
		%412 = zext i8 %411 to i32
		%413 = load @__startrek_error_round
		%414 = zext i8 %413 to i32
		%415 = icmp slt %412 %414
		br %415, %416, %426
	416:
		%417 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1a11e9a5
		store %417, @__startrek_job_end
		%418 = call zeroext i1 @__startrek_entry_pt_Writer()
		%419 = zext i1 %418 to i8
		store %419, %1
		store 0, @__startrek_lock
		%420 = load @__startrek_round
		%421 = zext i8 %420 to i32
		%422 = load @__startrek_job_end
		%423 = zext i8 %422 to i32
		%424 = icmp eq %421 %423
		%425 = zext i1 %424 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %425)
		br %426
	426:
		store 5, @__startrek_job
		store 1, @__startrek_is_first_cs
		%427 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3137f311
		store %427, @__startrek_round
		%428 = load @__startrek_round
		%429 = zext i8 %428 to i32
		%430 = load @__startrek_error_round
		%431 = zext i8 %430 to i32
		%432 = icmp slt %429 %431
		br %432, %433, %443
	433:
		%434 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@73eb8e32
		store %434, @__startrek_job_end
		%435 = call zeroext i1 @__startrek_entry_pt_Writer()
		%436 = zext i1 %435 to i8
		store %436, %1
		store 0, @__startrek_lock
		%437 = load @__startrek_round
		%438 = zext i8 %437 to i32
		%439 = load @__startrek_job_end
		%440 = zext i8 %439 to i32
		%441 = icmp eq %438 %440
		%442 = zext i1 %441 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %442)
		br %443
	443:
		store 6, @__startrek_job
		store 1, @__startrek_is_first_cs
		%444 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@55dd58db
		store %444, @__startrek_round
		%445 = load @__startrek_round
		%446 = zext i8 %445 to i32
		%447 = load @__startrek_error_round
		%448 = zext i8 %447 to i32
		%449 = icmp slt %446 %448
		br %449, %450, %460
	450:
		%451 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4014df04
		store %451, @__startrek_job_end
		%452 = call zeroext i1 @__startrek_entry_pt_Writer()
		%453 = zext i1 %452 to i8
		store %453, %1
		store 0, @__startrek_lock
		%454 = load @__startrek_round
		%455 = zext i8 %454 to i32
		%456 = load @__startrek_job_end
		%457 = zext i8 %456 to i32
		%458 = icmp eq %455 %457
		%459 = zext i1 %458 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %459)
		br %460
	460:
		store 7, @__startrek_job
		store 1, @__startrek_is_first_cs
		%461 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4eb5036c
		store %461, @__startrek_round
		%462 = load @__startrek_round
		%463 = zext i8 %462 to i32
		%464 = load @__startrek_error_round
		%465 = zext i8 %464 to i32
		%466 = icmp slt %463 %465
		br %466, %467, %477
	467:
		%468 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@61008e96
		store %468, @__startrek_job_end
		%469 = call zeroext i1 @__startrek_entry_pt_Writer()
		%470 = zext i1 %469 to i8
		store %470, %1
		store 0, @__startrek_lock
		%471 = load @__startrek_round
		%472 = zext i8 %471 to i32
		%473 = load @__startrek_job_end
		%474 = zext i8 %473 to i32
		%475 = icmp eq %472 %474
		%476 = zext i1 %475 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %476)
		br %477
	477:
		store 28, @__startrek_round
		Unnamed Call-Instruction = call BasicVoidType @__startrek_check_assumptions()
		Unnamed Call-Instruction = call BasicVoidType @__startrek_check_assertions()
		%478 = load @__startrek_hyper_period
		%479 = zext i8 %478 to i32
		%480 = icmp eq %479 0
		br %480, %481, %482
	481:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_user_final()
		br %482
	482:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3062
	0:
		Unnamed Call-Instruction = call BasicVoidType @__startrek_init_shared()
		Unnamed Call-Instruction = call BasicVoidType @__startrek_user_init()
		store 0, @__startrek_hyper_period
		Unnamed Call-Instruction = call BasicVoidType @__main()
		ret 0

*BasicFunctionTypename: "__startrek_init_shared" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3069
	0:
		%1 = load @__startrek_hidden___startrek_job_count_Writer
		store %1, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5e2419ed
		%2 = load @__startrek_hidden___startrek_job_count_Reader
		store %2, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@382e01d2
		%3 = load @__startrek_hidden___startrek_job_count_TapeMover
		store %3, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5e66dbd8
		%4 = load @__startrek_hidden___startrek_job_count_Controller
		store %4, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3b779abc
		%5 = load @__startrek_hidden_T_state
		store %5, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@45e2074e
		%6 = load @__startrek_hidden_W_state
		store %6, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@d0abeb1
		%7 = load @__startrek_hidden_R_state
		store %7, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@65da0cd3
		%8 = load @__startrek_hidden_threshold
		store %8, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@62ffc8ae
		%9 = load @__startrek_hidden_need_to_run_nxtbg
		%10 = trunc i8 %9 to i1
		%11 = zext i1 %10 to i8
		store %11, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@37726bc8
		%12 = load @__startrek_hidden_need_to_read
		%13 = trunc i8 %12 to i1
		%14 = zext i1 %13 to i8
		store %14, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6f55a4a1
		%15 = load @__startrek_hidden_dir
		%16 = trunc i8 %15 to i1
		%17 = zext i1 %16 to i8
		store %17, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5adc910c
		%18 = load @__startrek_hidden_output
		%19 = trunc i8 %18 to i1
		%20 = zext i1 %19 to i8
		store %20, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@46fa8841
		%21 = load @__startrek_hidden_input
		%22 = trunc i8 %21 to i1
		%23 = zext i1 %22 to i8
		store %23, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6272877d
		%24 = load @__startrek_hidden_nxtcolorsensor_mode
		store %24, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2040473e
		%25 = load @__startrek_hidden_nxtcolorsensor_data_mode
		store %25, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1e2af6cb
		%26 = load @__startrek_hidden_T_speed
		store %26, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@c00ddcf
		%27 = load @__startrek_hidden_T_count
		store %27, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7a3ffa5d
		%28 = load @__startrek_hidden_W_speed
		store %28, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@58e43b93
		%29 = load @__startrek_hidden_W_count
		store %29, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@11b112ea
		%30 = load @__startrek_hidden_R_speed
		store %30, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1b555bb6
		%31 = load @__startrek_hidden_R_count
		store %31, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1e3da793
		%32 = load @__startrek_hidden___startrek_current_priority
		store %32, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@67fc2f64
		ret void

*BasicFunctionTypename: "__startrek_read___startrek_current_priority" linkageType: INTERNAL returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3094
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @___startrek_current_priority_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "__startrek_write___startrek_current_priority" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3129
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @___startrek_current_priority_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "__startrek_read___startrek_job_count_Controller" linkageType: INTERNAL returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3165
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @___startrek_job_count_Controller_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "__startrek_write___startrek_job_count_Controller" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3200
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @___startrek_job_count_Controller_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "__startrek_cs_t0" linkageType: INTERNAL returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3236
	0:
		%1 = alloca i1, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_is_first_cs
		%5 = trunc i8 %4 to i1
		br %5, %6, %7
	6:
		store 0, @__startrek_is_first_cs
		br %7
	7:
		%8 = load @__startrek_lock
		%9 = trunc i8 %8 to i1
		br %9, %10, %11
	10:
		store 0, %1
		br %247
	11:
		%12 = call zeroext i1 @__VERIFIER_nondet_bool()
		%13 = zext i1 %12 to i8
		store %13, %2
		%14 = load %2
		%15 = trunc i8 %14 to i1
		br %15, %16, %17
	16:
		store 0, %1
		br %247
	17:
		%18 = load @__startrek_round
		store %18, %3
		%19 = call zeroext i8 @__VERIFIER_nondet_uchar()
		store %19, @__startrek_round
		%20 = load @__startrek_round
		%21 = zext i8 %20 to i32
		%22 = load %3
		%23 = zext i8 %22 to i32
		%24 = icmp sgt %21 %23
		%25 = zext i1 %24 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %25)
		%26 = load @__startrek_round
		%27 = zext i8 %26 to i32
		%28 = load @__startrek_job_end
		%29 = zext i8 %28 to i32
		%30 = icmp sle %27 %29
		%31 = zext i1 %30 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %31)
		%32 = load @__startrek_round
		%33 = zext i8 %32 to i32
		%34 = load @__startrek_job_end
		%35 = zext i8 %34 to i32
		%36 = icmp ne %33 %35
		br %36, %37, %246
	37:
		%38 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7e434733
		%39 = zext i8 %38 to i32
		%40 = load @__startrek_round
		%41 = zext i8 %40 to i32
		%42 = icmp slt %39 %41
		br %42, %43, %50
	43:
		%44 = load @__startrek_round
		%45 = zext i8 %44 to i32
		%46 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4f7a3ba6
		%47 = zext i8 %46 to i32
		%48 = icmp sgt %45 %47
		%49 = zext i1 %48 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %49)
		br %50
	50:
		%51 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3c080ce5
		%52 = zext i8 %51 to i32
		%53 = load @__startrek_round
		%54 = zext i8 %53 to i32
		%55 = icmp slt %52 %54
		br %55, %56, %63
	56:
		%57 = load @__startrek_round
		%58 = zext i8 %57 to i32
		%59 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3a09830f
		%60 = zext i8 %59 to i32
		%61 = icmp sgt %58 %60
		%62 = zext i1 %61 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %62)
		br %63
	63:
		%64 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5e9731a2
		%65 = zext i8 %64 to i32
		%66 = load @__startrek_round
		%67 = zext i8 %66 to i32
		%68 = icmp slt %65 %67
		br %68, %69, %76
	69:
		%70 = load @__startrek_round
		%71 = zext i8 %70 to i32
		%72 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@40ae96dd
		%73 = zext i8 %72 to i32
		%74 = icmp sgt %71 %73
		%75 = zext i1 %74 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %75)
		br %76
	76:
		%77 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3cbdc509
		%78 = zext i8 %77 to i32
		%79 = load @__startrek_round
		%80 = zext i8 %79 to i32
		%81 = icmp slt %78 %80
		br %81, %82, %89
	82:
		%83 = load @__startrek_round
		%84 = zext i8 %83 to i32
		%85 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4a5a386a
		%86 = zext i8 %85 to i32
		%87 = icmp sgt %84 %86
		%88 = zext i1 %87 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %88)
		br %89
	89:
		%90 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2da70aa2
		%91 = zext i8 %90 to i32
		%92 = load @__startrek_round
		%93 = zext i8 %92 to i32
		%94 = icmp slt %91 %93
		br %94, %95, %102
	95:
		%96 = load @__startrek_round
		%97 = zext i8 %96 to i32
		%98 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@190b79b5
		%99 = zext i8 %98 to i32
		%100 = icmp sgt %97 %99
		%101 = zext i1 %100 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %101)
		br %102
	102:
		%103 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4bcc6210
		%104 = zext i8 %103 to i32
		%105 = load @__startrek_round
		%106 = zext i8 %105 to i32
		%107 = icmp slt %104 %106
		br %107, %108, %115
	108:
		%109 = load @__startrek_round
		%110 = zext i8 %109 to i32
		%111 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@50ce9a6b
		%112 = zext i8 %111 to i32
		%113 = icmp sgt %110 %112
		%114 = zext i1 %113 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %114)
		br %115
	115:
		%116 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@45a968ca
		%117 = zext i8 %116 to i32
		%118 = load @__startrek_round
		%119 = zext i8 %118 to i32
		%120 = icmp slt %117 %119
		br %120, %121, %128
	121:
		%122 = load @__startrek_round
		%123 = zext i8 %122 to i32
		%124 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@72d771b
		%125 = zext i8 %124 to i32
		%126 = icmp sgt %123 %125
		%127 = zext i1 %126 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %127)
		br %128
	128:
		%129 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2fd9490c
		%130 = zext i8 %129 to i32
		%131 = load @__startrek_round
		%132 = zext i8 %131 to i32
		%133 = icmp slt %130 %132
		br %133, %134, %141
	134:
		%135 = load @__startrek_round
		%136 = zext i8 %135 to i32
		%137 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@b60935e
		%138 = zext i8 %137 to i32
		%139 = icmp sgt %136 %138
		%140 = zext i1 %139 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %140)
		br %141
	141:
		%142 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@58155c0
		%143 = zext i8 %142 to i32
		%144 = load @__startrek_round
		%145 = zext i8 %144 to i32
		%146 = icmp slt %143 %145
		br %146, %147, %154
	147:
		%148 = load @__startrek_round
		%149 = zext i8 %148 to i32
		%150 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@69787fc4
		%151 = zext i8 %150 to i32
		%152 = icmp sgt %149 %151
		%153 = zext i1 %152 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %153)
		br %154
	154:
		%155 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@c0cdace
		%156 = zext i8 %155 to i32
		%157 = load @__startrek_round
		%158 = zext i8 %157 to i32
		%159 = icmp slt %156 %158
		br %159, %160, %167
	160:
		%161 = load @__startrek_round
		%162 = zext i8 %161 to i32
		%163 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@3794272
		%164 = zext i8 %163 to i32
		%165 = icmp sgt %162 %164
		%166 = zext i1 %165 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %166)
		br %167
	167:
		%168 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@cd92888
		%169 = zext i8 %168 to i32
		%170 = load @__startrek_round
		%171 = zext i8 %170 to i32
		%172 = icmp slt %169 %171
		br %172, %173, %180
	173:
		%174 = load @__startrek_round
		%175 = zext i8 %174 to i32
		%176 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2675f088
		%177 = zext i8 %176 to i32
		%178 = icmp sgt %175 %177
		%179 = zext i1 %178 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %179)
		br %180
	180:
		%181 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4cc58422
		%182 = zext i8 %181 to i32
		%183 = load @__startrek_round
		%184 = zext i8 %183 to i32
		%185 = icmp slt %182 %184
		br %185, %186, %193
	186:
		%187 = load @__startrek_round
		%188 = zext i8 %187 to i32
		%189 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5e6351a
		%190 = zext i8 %189 to i32
		%191 = icmp sgt %188 %190
		%192 = zext i1 %191 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %192)
		br %193
	193:
		%194 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@40bec046
		%195 = zext i8 %194 to i32
		%196 = load @__startrek_round
		%197 = zext i8 %196 to i32
		%198 = icmp slt %195 %197
		br %198, %199, %206
	199:
		%200 = load @__startrek_round
		%201 = zext i8 %200 to i32
		%202 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@49c69969
		%203 = zext i8 %202 to i32
		%204 = icmp sgt %201 %203
		%205 = zext i1 %204 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %205)
		br %206
	206:
		%207 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2942e0e7
		%208 = zext i8 %207 to i32
		%209 = load @__startrek_round
		%210 = zext i8 %209 to i32
		%211 = icmp slt %208 %210
		br %211, %212, %219
	212:
		%213 = load @__startrek_round
		%214 = zext i8 %213 to i32
		%215 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@1d384e30
		%216 = zext i8 %215 to i32
		%217 = icmp sgt %214 %216
		%218 = zext i1 %217 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %218)
		br %219
	219:
		%220 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2bb20121
		%221 = zext i8 %220 to i32
		%222 = load @__startrek_round
		%223 = zext i8 %222 to i32
		%224 = icmp slt %221 %223
		br %224, %225, %232
	225:
		%226 = load @__startrek_round
		%227 = zext i8 %226 to i32
		%228 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@56c2d8ef
		%229 = zext i8 %228 to i32
		%230 = icmp sgt %227 %229
		%231 = zext i1 %230 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %231)
		br %232
	232:
		%233 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@68b94f08
		%234 = zext i8 %233 to i32
		%235 = load @__startrek_round
		%236 = zext i8 %235 to i32
		%237 = icmp slt %234 %236
		br %237, %238, %245
	238:
		%239 = load @__startrek_round
		%240 = zext i8 %239 to i32
		%241 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@372fc5e1
		%242 = zext i8 %241 to i32
		%243 = icmp sgt %240 %242
		%244 = zext i1 %243 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %244)
		br %245
	245:
		br %246
	246:
		store 1, %1
		br %247
	247:
		%248 = load %1
		ret %248

*BasicFunctionTypename: "__startrek_cs_t1" linkageType: INTERNAL returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3440
	0:
		%1 = alloca i1, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_is_first_cs
		%5 = trunc i8 %4 to i1
		br %5, %6, %7
	6:
		store 0, @__startrek_is_first_cs
		br %7
	7:
		%8 = load @__startrek_lock
		%9 = trunc i8 %8 to i1
		br %9, %10, %11
	10:
		store 0, %1
		br %143
	11:
		%12 = call zeroext i1 @__VERIFIER_nondet_bool()
		%13 = zext i1 %12 to i8
		store %13, %2
		%14 = load %2
		%15 = trunc i8 %14 to i1
		br %15, %16, %17
	16:
		store 0, %1
		br %143
	17:
		%18 = load @__startrek_round
		store %18, %3
		%19 = call zeroext i8 @__VERIFIER_nondet_uchar()
		store %19, @__startrek_round
		%20 = load @__startrek_round
		%21 = zext i8 %20 to i32
		%22 = load %3
		%23 = zext i8 %22 to i32
		%24 = icmp sgt %21 %23
		%25 = zext i1 %24 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %25)
		%26 = load @__startrek_round
		%27 = zext i8 %26 to i32
		%28 = load @__startrek_job_end
		%29 = zext i8 %28 to i32
		%30 = icmp sle %27 %29
		%31 = zext i1 %30 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %31)
		%32 = load @__startrek_round
		%33 = zext i8 %32 to i32
		%34 = load @__startrek_job_end
		%35 = zext i8 %34 to i32
		%36 = icmp ne %33 %35
		br %36, %37, %142
	37:
		%38 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@c2f612c
		%39 = zext i8 %38 to i32
		%40 = load @__startrek_round
		%41 = zext i8 %40 to i32
		%42 = icmp slt %39 %41
		br %42, %43, %50
	43:
		%44 = load @__startrek_round
		%45 = zext i8 %44 to i32
		%46 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4c6ac5e6
		%47 = zext i8 %46 to i32
		%48 = icmp sgt %45 %47
		%49 = zext i1 %48 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %49)
		br %50
	50:
		%51 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6e09026c
		%52 = zext i8 %51 to i32
		%53 = load @__startrek_round
		%54 = zext i8 %53 to i32
		%55 = icmp slt %52 %54
		br %55, %56, %63
	56:
		%57 = load @__startrek_round
		%58 = zext i8 %57 to i32
		%59 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@27c0d281
		%60 = zext i8 %59 to i32
		%61 = icmp sgt %58 %60
		%62 = zext i1 %61 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %62)
		br %63
	63:
		%64 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@5091f154
		%65 = zext i8 %64 to i32
		%66 = load @__startrek_round
		%67 = zext i8 %66 to i32
		%68 = icmp slt %65 %67
		br %68, %69, %76
	69:
		%70 = load @__startrek_round
		%71 = zext i8 %70 to i32
		%72 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4ace4b55
		%73 = zext i8 %72 to i32
		%74 = icmp sgt %71 %73
		%75 = zext i1 %74 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %75)
		br %76
	76:
		%77 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6c723a02
		%78 = zext i8 %77 to i32
		%79 = load @__startrek_round
		%80 = zext i8 %79 to i32
		%81 = icmp slt %78 %80
		br %81, %82, %89
	82:
		%83 = load @__startrek_round
		%84 = zext i8 %83 to i32
		%85 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4d07a9d7
		%86 = zext i8 %85 to i32
		%87 = icmp sgt %84 %86
		%88 = zext i1 %87 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %88)
		br %89
	89:
		%90 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@12c3fa72
		%91 = zext i8 %90 to i32
		%92 = load @__startrek_round
		%93 = zext i8 %92 to i32
		%94 = icmp slt %91 %93
		br %94, %95, %102
	95:
		%96 = load @__startrek_round
		%97 = zext i8 %96 to i32
		%98 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2a6f8f9c
		%99 = zext i8 %98 to i32
		%100 = icmp sgt %97 %99
		%101 = zext i1 %100 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %101)
		br %102
	102:
		%103 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@57b002f9
		%104 = zext i8 %103 to i32
		%105 = load @__startrek_round
		%106 = zext i8 %105 to i32
		%107 = icmp slt %104 %106
		br %107, %108, %115
	108:
		%109 = load @__startrek_round
		%110 = zext i8 %109 to i32
		%111 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@270950c9
		%112 = zext i8 %111 to i32
		%113 = icmp sgt %110 %112
		%114 = zext i1 %113 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %114)
		br %115
	115:
		%116 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2a143e30
		%117 = zext i8 %116 to i32
		%118 = load @__startrek_round
		%119 = zext i8 %118 to i32
		%120 = icmp slt %117 %119
		br %120, %121, %128
	121:
		%122 = load @__startrek_round
		%123 = zext i8 %122 to i32
		%124 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@7c515781
		%125 = zext i8 %124 to i32
		%126 = icmp sgt %123 %125
		%127 = zext i1 %126 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %127)
		br %128
	128:
		%129 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@2b212538
		%130 = zext i8 %129 to i32
		%131 = load @__startrek_round
		%132 = zext i8 %131 to i32
		%133 = icmp slt %130 %132
		br %133, %134, %141
	134:
		%135 = load @__startrek_round
		%136 = zext i8 %135 to i32
		%137 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@4643b78d
		%138 = zext i8 %137 to i32
		%139 = icmp sgt %136 %138
		%140 = zext i1 %139 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %140)
		br %141
	141:
		br %142
	142:
		store 1, %1
		br %143
	143:
		%144 = load %1
		ret %144

*BasicFunctionTypename: "__startrek_cs_t2" linkageType: INTERNAL returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3564
	0:
		%1 = alloca i1, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_is_first_cs
		%5 = trunc i8 %4 to i1
		br %5, %6, %7
	6:
		store 0, @__startrek_is_first_cs
		br %7
	7:
		%8 = load @__startrek_lock
		%9 = trunc i8 %8 to i1
		br %9, %10, %11
	10:
		store 0, %1
		br %39
	11:
		%12 = call zeroext i1 @__VERIFIER_nondet_bool()
		%13 = zext i1 %12 to i8
		store %13, %2
		%14 = load %2
		%15 = trunc i8 %14 to i1
		br %15, %16, %17
	16:
		store 0, %1
		br %39
	17:
		%18 = load @__startrek_round
		store %18, %3
		%19 = call zeroext i8 @__VERIFIER_nondet_uchar()
		store %19, @__startrek_round
		%20 = load @__startrek_round
		%21 = zext i8 %20 to i32
		%22 = load %3
		%23 = zext i8 %22 to i32
		%24 = icmp sgt %21 %23
		%25 = zext i1 %24 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %25)
		%26 = load @__startrek_round
		%27 = zext i8 %26 to i32
		%28 = load @__startrek_job_end
		%29 = zext i8 %28 to i32
		%30 = icmp sle %27 %29
		%31 = zext i1 %30 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %31)
		%32 = load @__startrek_round
		%33 = zext i8 %32 to i32
		%34 = load @__startrek_job_end
		%35 = zext i8 %34 to i32
		%36 = icmp ne %33 %35
		br %36, %37, %38
	37:
		br %38
	38:
		store 1, %1
		br %39
	39:
		%40 = load %1
		ret %40

*BasicFunctionTypename: "__startrek_cs_t3" linkageType: INTERNAL returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3606
	0:
		ret 0

*BasicFunctionTypename: "__startrek_read___startrek_job_count_TapeMover" linkageType: INTERNAL returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3610
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @___startrek_job_count_TapeMover_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "__startrek_write___startrek_job_count_TapeMover" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3645
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @___startrek_job_count_TapeMover_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "__startrek_read___startrek_job_count_Reader" linkageType: INTERNAL returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3681
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @___startrek_job_count_Reader_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "__startrek_write___startrek_job_count_Reader" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3716
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @___startrek_job_count_Reader_, 0, %26
		store %24, %27
		ret void

*BasicFunctionTypename: "__startrek_read___startrek_job_count_Writer" linkageType: INTERNAL returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3752
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%4 = load @__startrek_task
		%5 = zext i8 %4 to i32
		switch %5, %22 [0, %6 1, %10 2, %14 3, %18]
	6:
		%7 = load @__startrek_round
		store %7, %3
		%8 = call zeroext i1 @__startrek_cs_t0()
		%9 = zext i1 %8 to i8
		store %9, %2
		br %22
	10:
		%11 = load @__startrek_round
		store %11, %3
		%12 = call zeroext i1 @__startrek_cs_t1()
		%13 = zext i1 %12 to i8
		store %13, %2
		br %22
	14:
		%15 = load @__startrek_round
		store %15, %3
		%16 = call zeroext i1 @__startrek_cs_t2()
		%17 = zext i1 %16 to i8
		store %17, %2
		br %22
	18:
		%19 = load @__startrek_round
		store %19, %3
		%20 = call zeroext i1 @__startrek_cs_t3()
		%21 = zext i1 %20 to i8
		store %21, %2
		br %22
	22:
		%23 = load @__startrek_round
		%24 = zext i8 %23 to i64
		%25 = getelementptr @___startrek_job_count_Writer_, 0, %24
		%26 = load %25
		store %26, %1
		%27 = load %1
		ret %27

*BasicFunctionTypename: "__startrek_write___startrek_job_count_Writer" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 3787
	0:
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load @__startrek_task
		%6 = zext i8 %5 to i32
		switch %6, %23 [0, %7 1, %11 2, %15 3, %19]
	7:
		%8 = load @__startrek_round
		store %8, %4
		%9 = call zeroext i1 @__startrek_cs_t0()
		%10 = zext i1 %9 to i8
		store %10, %3
		br %23
	11:
		%12 = load @__startrek_round
		store %12, %4
		%13 = call zeroext i1 @__startrek_cs_t1()
		%14 = zext i1 %13 to i8
		store %14, %3
		br %23
	15:
		%16 = load @__startrek_round
		store %16, %4
		%17 = call zeroext i1 @__startrek_cs_t2()
		%18 = zext i1 %17 to i8
		store %18, %3
		br %23
	19:
		%20 = load @__startrek_round
		store %20, %4
		%21 = call zeroext i1 @__startrek_cs_t3()
		%22 = zext i1 %21 to i8
		store %22, %3
		br %23
	23:
		%24 = load %2
		%25 = load @__startrek_round
		%26 = zext i8 %25 to i64
		%27 = getelementptr @___startrek_job_count_Writer_, 0, %26
		store %24, %27
		ret void


Analyze Termination of all function calls matching the pattern:
main()Instruction count:4147
Aborted 1756892632Exec. 4, LLVMToSEGraph with some error. Reason: java.lang.UnsupportedOperationException: cannot return sum of symbolic var and constant number  here although we would have to!.
            aprove.InputModules.Programs.llvm.states.LLVMAbstractState.getSimpleTermForLiteral(LLVMAbstractState.java:1144)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicState.getSimpleTermForLiteral(LLVMHeuristicState.java:2373)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicState.getSimpleTermForLiteral(LLVMHeuristicState.java:58)
            aprove.InputModules.Programs.llvm.internalStructures.instructions.LLVMLoadInstruction.evaluate(LLVMLoadInstruction.java:97)
            aprove.InputModules.Programs.llvm.states.LLVMAbstractState.evaluate(LLVMAbstractState.java:531)
            aprove.InputModules.Programs.llvm.segraph.graphConstructionSteps.LLVMStandardStep.perform(LLVMStandardStep.java:98)
            aprove.InputModules.Programs.llvm.segraph.LLVMSEGraph.executeStepAndPutSucessorStepsInQueue(LLVMSEGraph.java:1087)
            aprove.InputModules.Programs.llvm.segraph.LLVMSEGraph.buildFullGraph(LLVMSEGraph.java:243)
