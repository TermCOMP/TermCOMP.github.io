YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/sKUuH.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1482 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 53 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 11 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 6 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/sKUuH.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/sKUuH.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %6
	6:
		%7 = load %3
		%8 = icmp sge %7 0
		br %8, %9, %24
	9:
		%10 = load %3
		%11 = add i32 %10, 1
		store %11, %3
		store 1, %4
		br %12
	12:
		%13 = load %3
		%14 = load %4
		%15 = icmp sgt %13 %14
		br %15, %16, %21
	16:
		%17 = load %4
		%18 = add i32 %17, 1
		store %18, %4
		%19 = load %5
		%20 = add i32 %19, 1
		store %20, %5
		br %12
	21:
		%22 = load %3
		%23 = sub i32 %22, 2
		store %23, %3
		br %6
	24:
		%25 = load %5
		ret %25

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 46
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 54 rulesP rules:
f_459(v612, v613, v614, v615, v616, v617, 1, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) -> f_460(v612, v613, v614, v615, v616, v617, 1, v619, 0, v621, v622, v623, v624, v631, v626, v627, v628, v629, v630, 3, 2, 4) :|: 2 + v631 = v619 && 0 <= 1 + v631
f_460(v612, v613, v614, v615, v616, v617, 1, v619, 0, v621, v622, v623, v624, v631, v626, v627, v628, v629, v630, 3, 2, 4) -> f_461(v612, v613, v614, v615, v616, v617, 1, v619, 0, v621, v622, v623, v624, v631, v626, v627, v628, v629, v630, 3, 2, 4) :|: TRUE
f_461(v612, v613, v614, v615, v616, v617, 1, v619, 0, v621, v622, v623, v624, v631, v626, v627, v628, v629, v630, 3, 2, 4) -> f_462(v612, v613, v614, v615, v616, v617, 1, v619, 0, v621, v622, v623, v624, v631, v626, v627, v628, v629, v630, 3, 2, 4) :|: TRUE
f_462(v612, v613, v614, v615, v616, v617, 1, v619, 0, v621, v622, v623, v624, v631, v626, v627, v628, v629, v630, 3, 2, 4) -> f_463(v612, v613, v614, v615, v616, v631, 1, v617, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) :|: 0 = 0
f_463(v612, v613, v614, v615, v616, v631, 1, v617, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) -> f_464(v612, v613, v614, v615, v616, v631, 1, v617, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) :|: 0 <= v631 && 2 <= v619 && 1 <= v617 && 2 <= v612 && 1 <= v623 && 2 <= v624
f_464(v612, v613, v614, v615, v616, v631, 1, v617, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) -> f_466(v612, v613, v614, v615, v616, v631, 1, v617, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) :|: 0 = 0
f_466(v612, v613, v614, v615, v616, v631, 1, v617, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) -> f_468(v612, v613, v614, v615, v616, v631, 1, v617, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) :|: TRUE
f_468(v612, v613, v614, v615, v616, v631, 1, v617, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) -> f_470(v612, v613, v614, v615, v616, v631, 1, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) :|: 0 = 0
f_470(v612, v613, v614, v615, v616, v631, 1, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) -> f_472(v612, v613, v614, v615, v616, v631, 1, v663, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) :|: v663 = 1 + v631 && 1 <= v663
f_472(v612, v613, v614, v615, v616, v631, 1, v663, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) -> f_474(v612, v613, v614, v615, v616, v631, 1, v663, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) :|: TRUE
f_474(v612, v613, v614, v615, v616, v631, 1, v663, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) -> f_475(v612, v613, v614, v615, v616, v631, 1, v663, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) :|: TRUE
f_475(v612, v613, v614, v615, v616, v631, 1, v663, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) -> f_476(v612, v613, v614, v615, v616, v631, 1, v663, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) :|: TRUE
f_476(v612, v613, v614, v615, v616, v631, 1, v663, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) -> f_477(v612, v613, v614, v615, v616, v631, 1, v663, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) :|: TRUE
f_477(v685, v686, v687, v688, v689, v690, 1, v692, v693, 0, v695, v696, v697, v698, v699, v700, v701, v702, v703, 3, 2, 4) -> f_478(v685, v686, v687, v688, v689, v690, 1, v692, v693, 0, v695, v696, v697, v698, v699, v700, v701, v702, v703, 3, 2, 4) :|: 0 = 0
f_478(v685, v686, v687, v688, v689, v690, 1, v692, v693, 0, v695, v696, v697, v698, v699, v700, v701, v702, v703, 3, 2, 4) -> f_479(v685, v686, v687, v688, v689, v690, 1, v692, 0, v695, v696, v697, v698, v693, v699, v700, v701, v702, v703, 3, 2, 4) :|: 0 = 0
f_479(v685, v686, v687, v688, v689, v690, 1, v692, 0, v695, v696, v697, v698, v693, v699, v700, v701, v702, v703, 3, 2, 4) -> f_480(v685, v686, v687, v688, v689, v690, 1, v692, 0, v695, v696, v697, v698, v693, v699, v700, v701, v702, v703, 3, 2, 4) :|: 1 < v692 && 1 <= v690 && 3 <= v693 && 3 <= v696 && 2 <= v695 && 2 <= v685
f_479(v685, v686, v687, v688, v689, v690, 1, v692, 0, v695, v696, v697, v698, v693, v699, v700, v701, v702, v703, 3, 2, 4) -> f_481(v685, v686, v687, v688, v689, 0, 1, v695, v696, v697, v698, 2, v699, v700, v701, v702, v703, 3, 4) :|: v692 <= 1 && v690 = 0 && v692 = 1 && 0 = 0 && v693 = 2
f_480(v685, v686, v687, v688, v689, v690, 1, v692, 0, v695, v696, v697, v698, v693, v699, v700, v701, v702, v703, 3, 2, 4) -> f_482(v685, v686, v687, v688, v689, v690, 1, v692, v695, v696, v697, v698, v693, v699, v700, v701, v702, v703, 0, 3, 2, 4) :|: 0 = 0
f_482(v685, v686, v687, v688, v689, v690, 1, v692, v695, v696, v697, v698, v693, v699, v700, v701, v702, v703, 0, 3, 2, 4) -> f_484(v685, v686, v687, v688, v689, v690, 1, v692, v695, v696, v697, v698, v693, v699, v700, v701, v702, v703, 0, 3, 2, 4) :|: TRUE
f_484(v685, v686, v687, v688, v689, v690, 1, v692, v695, v696, v697, v698, v693, v699, v700, v701, v702, v703, 0, 3, 2, 4) -> f_501(v685, v686, v687, v688, v689, v690, 1, v692, 1, v695, v696, v697, v698, v693, v699, v700, v701, v702, v703, 0, 3, 2, 4) :|: TRUE
f_501(v807, v808, v809, v810, v811, v812, 1, v814, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) -> f_503(v807, v808, v809, v810, v811, v812, 1, v814, v815, v817, v818, v819, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) :|: 0 = 0
f_503(v807, v808, v809, v810, v811, v812, 1, v814, v815, v817, v818, v819, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) -> f_504(v807, v808, v809, v810, v811, v812, 1, v814, v815, v852, v818, v819, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) :|: v852 = 1 + v815 && 2 <= v852
f_504(v807, v808, v809, v810, v811, v812, 1, v814, v815, v852, v818, v819, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) -> f_505(v807, v808, v809, v810, v811, v812, 1, v814, v815, v852, v818, v819, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) :|: TRUE
f_505(v807, v808, v809, v810, v811, v812, 1, v814, v815, v852, v818, v819, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) -> f_506(v807, v808, v809, v810, v811, v812, 1, v814, v815, v852, v819, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) :|: 0 = 0
f_506(v807, v808, v809, v810, v811, v812, 1, v814, v815, v852, v819, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) -> f_507(v807, v808, v809, v810, v811, v812, 1, v814, v815, v852, v819, v854, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) :|: v854 = 1 + v819 && 2 <= v854
f_507(v807, v808, v809, v810, v811, v812, 1, v814, v815, v852, v819, v854, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) -> f_508(v807, v808, v809, v810, v811, v812, 1, v814, v815, v852, v819, v854, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) :|: TRUE
f_508(v807, v808, v809, v810, v811, v812, 1, v814, v815, v852, v819, v854, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) -> f_509(v807, v808, v809, v810, v811, v812, 1, v814, v815, v852, v819, v854, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) :|: TRUE
f_509(v807, v808, v809, v810, v811, v812, 1, v814, v815, v852, v819, v854, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) -> f_510(v807, v808, v809, v810, v811, v812, 1, v814, v815, v852, v819, v854, v820, v821, v822, v823, v824, v825, 0, 3, 2, 4) :|: TRUE
f_510(v878, v879, v880, v881, v882, v883, 1, v885, v886, v887, v888, v889, v890, v891, v892, v893, v894, v895, 0, 3, 2, 4) -> f_511(v878, v879, v880, v881, v882, v883, 1, v885, v886, v887, v888, v889, v890, v891, v892, v893, v894, v895, 0, 3, 2, 4) :|: 0 = 0
f_511(v878, v879, v880, v881, v882, v883, 1, v885, v886, v887, v888, v889, v890, v891, v892, v893, v894, v895, 0, 3, 2, 4) -> f_512(v878, v879, v880, v881, v882, v883, 1, v885, v887, v886, v888, v889, v890, v891, v892, v893, v894, v895, 0, 3, 2, 4) :|: 0 = 0
f_512(v878, v879, v880, v881, v882, v883, 1, v885, v887, v886, v888, v889, v890, v891, v892, v893, v894, v895, 0, 3, 2, 4) -> f_513(v878, v879, v880, v881, v882, v883, 1, v885, v887, v886, v888, v889, v890, v891, v892, v893, v894, v895, 0, 3, 2, 4) :|: v887 < v885 && 3 <= v885 && 2 <= v883 && 4 <= v890 && 3 <= v878
f_512(v878, v879, v880, v881, v882, v883, 1, v885, v887, v886, v888, v889, v890, v891, v892, v893, v894, v895, 0, 3, 2, 4) -> f_514(v878, v879, v880, v881, v882, v886, 1, v887, v888, v889, v890, v891, v892, v893, v894, v895, 0, 3, 2, 4) :|: v885 <= v887 && v885 = v887 && v883 = v886
f_513(v878, v879, v880, v881, v882, v883, 1, v885, v887, v886, v888, v889, v890, v891, v892, v893, v894, v895, 0, 3, 2, 4) -> f_515(v878, v879, v880, v881, v882, v883, 1, v885, v887, v886, v888, v889, v890, v891, v892, v893, v894, v895, 0, 3, 2, 4) :|: 0 = 0
f_515(v878, v879, v880, v881, v882, v883, 1, v885, v887, v886, v888, v889, v890, v891, v892, v893, v894, v895, 0, 3, 2, 4) -> f_517(v878, v879, v880, v881, v882, v883, 1, v885, v887, v886, v888, v889, v890, v891, v892, v893, v894, v895, 0, 3, 2, 4) :|: TRUE
f_517(v878, v879, v880, v881, v882, v883, 1, v885, v887, v886, v888, v889, v890, v891, v892, v893, v894, v895, 0, 3, 2, 4) -> f_501(v878, v879, v880, v881, v882, v883, 1, v885, v887, v886, v887, v888, v889, v890, v891, v892, v893, v894, v895, 0, 3, 2, 4) :|: TRUE
f_514(v878, v879, v880, v881, v882, v886, 1, v887, v888, v889, v890, v891, v892, v893, v894, v895, 0, 3, 2, 4) -> f_516(v878, v879, v880, v881, v882, v886, 1, v887, 0, v888, v889, v890, v891, v892, v893, v894, v895, 3, 2, 4) :|: 0 = 0
f_516(v878, v879, v880, v881, v882, v886, 1, v887, 0, v888, v889, v890, v891, v892, v893, v894, v895, 3, 2, 4) -> f_518(v878, v879, v880, v881, v882, v886, 1, v887, 0, v888, v889, v890, v891, v892, v893, v894, v895, 3, 2, 4) :|: TRUE
f_518(v878, v879, v880, v881, v882, v886, 1, v887, 0, v888, v889, v890, v891, v892, v893, v894, v895, 3, 2, 4) -> f_519(v878, v879, v880, v881, v882, v886, 1, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) :|: 0 = 0
f_519(v878, v879, v880, v881, v882, v886, 1, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) -> f_520(v878, v879, v880, v881, v882, v886, 1, v887, 0, v888, v889, v954, v891, v892, v893, v894, v895, 3, 2, 4) :|: 2 + v954 = v887 && 0 <= v954
f_520(v878, v879, v880, v881, v882, v886, 1, v887, 0, v888, v889, v954, v891, v892, v893, v894, v895, 3, 2, 4) -> f_521(v878, v879, v880, v881, v882, v886, 1, v887, 0, v888, v889, v954, v891, v892, v893, v894, v895, 3, 2, 4) :|: TRUE
f_521(v878, v879, v880, v881, v882, v886, 1, v887, 0, v888, v889, v954, v891, v892, v893, v894, v895, 3, 2, 4) -> f_522(v878, v879, v880, v881, v882, v886, 1, v887, 0, v888, v889, v954, v891, v892, v893, v894, v895, 3, 2, 4) :|: TRUE
f_522(v878, v879, v880, v881, v882, v886, 1, v887, 0, v888, v889, v954, v891, v892, v893, v894, v895, 3, 2, 4) -> f_523(v878, v879, v880, v881, v882, v954, 1, v886, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) :|: 0 = 0
f_523(v878, v879, v880, v881, v882, v954, 1, v886, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) -> f_524(v878, v879, v880, v881, v882, v954, 1, v886, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) :|: 0 = 0
f_524(v878, v879, v880, v881, v882, v954, 1, v886, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) -> f_525(v878, v879, v880, v881, v882, v954, 1, v886, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) :|: TRUE
f_525(v878, v879, v880, v881, v882, v954, 1, v886, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) -> f_526(v878, v879, v880, v881, v882, v954, 1, v887, 0, v886, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) :|: 0 = 0
f_526(v878, v879, v880, v881, v882, v954, 1, v887, 0, v886, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) -> f_527(v878, v879, v880, v881, v882, v954, 1, v886, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) :|: v886 = 1 + v954
f_527(v878, v879, v880, v881, v882, v954, 1, v886, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) -> f_528(v878, v879, v880, v881, v882, v954, 1, v886, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) :|: TRUE
f_528(v878, v879, v880, v881, v882, v954, 1, v886, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) -> f_529(v878, v879, v880, v881, v882, v954, 1, v886, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) :|: TRUE
f_529(v878, v879, v880, v881, v882, v954, 1, v886, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) -> f_530(v878, v879, v880, v881, v882, v954, 1, v886, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) :|: TRUE
f_530(v878, v879, v880, v881, v882, v954, 1, v886, v887, 0, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) -> f_477(v878, v879, v880, v881, v882, v954, 1, v886, v887, 0, v886, v887, v888, v889, v891, v892, v893, v894, v895, 3, 2, 4) :|: TRUE
f_481(v685, v686, v687, v688, v689, 0, 1, v695, v696, v697, v698, 2, v699, v700, v701, v702, v703, 3, 4) -> f_483(v685, v686, v687, v688, v689, 0, 1, v695, v696, v697, v698, 2, v699, v700, v701, v702, v703, 3, 4) :|: 0 = 0
f_483(v685, v686, v687, v688, v689, 0, 1, v695, v696, v697, v698, 2, v699, v700, v701, v702, v703, 3, 4) -> f_485(v685, v686, v687, v688, v689, 0, 1, v695, v696, v697, v698, 2, v699, v700, v701, v702, v703, 3, 4) :|: TRUE
f_485(v685, v686, v687, v688, v689, 0, 1, v695, v696, v697, v698, 2, v699, v700, v701, v702, v703, 3, 4) -> f_458(v685, v686, v687, v688, v689, 0, 1, 1, 0, v695, v696, v697, v698, 2, v699, v700, v701, v702, v703, 3, 2, 4) :|: TRUE
f_458(v612, v613, v614, v615, v616, v617, 1, v619, 0, v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, 3, 2, 4) -> f_459(v612, v613, v614, v615, v616, v617, 1, v619, 0, v621, v622, v623, v624, v626, v627, v628, v629, v630, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 3 rulesP rules:
f_512(v878:0, v879:0, v880:0, v881:0, v882:0, 1 + v954:0, 1, 2 + v954:0, 2 + v954:0, 1 + v954:0, v888:0, v889:0, v890:0, v891:0, v892:0, v893:0, v894:0, v895:0, 0, 3, 2, 4) -> f_479(v878:0, v879:0, v880:0, v881:0, v882:0, v954:0, 1, 1 + v954:0, 0, 1 + v954:0, 2 + v954:0, v888:0, v889:0, 2 + v954:0, v891:0, v892:0, v893:0, v894:0, v895:0, 3, 2, 4) :|: v954:0 > -1
f_512(v878:0, v879:0, v880:0, v881:0, v882:0, v883:0, 1, v885:0, v887:0, v886:0, v888:0, v889:0, v890:0, v891:0, v892:0, v893:0, v894:0, v895:0, 0, 3, 2, 4) -> f_512(v878:0, v879:0, v880:0, v881:0, v882:0, v883:0, 1, v885:0, 1 + v887:0, v887:0, v889:0, 1 + v889:0, v890:0, v891:0, v892:0, v893:0, v894:0, v895:0, 0, 3, 2, 4) :|: v887:0 > 0 && v889:0 > 0 && v885:0 > 2 && v887:0 < v885:0 && v883:0 > 1 && v878:0 > 2 && v890:0 > 3
f_479(v685:0, v686:0, v687:0, v688:0, v689:0, v690:0, 1, v692:0, 0, v695:0, v696:0, v697:0, v698:0, v693:0, v699:0, v700:0, v701:0, v702:0, v703:0, 3, 2, 4) -> f_512(v685:0, v686:0, v687:0, v688:0, v689:0, v690:0, 1, v692:0, 2, 1, v698:0, 1 + v698:0, v693:0, v699:0, v700:0, v701:0, v702:0, v703:0, 0, 3, 2, 4) :|: v690:0 > 0 && v692:0 > 1 && v693:0 > 2 && v696:0 > 2 && v695:0 > 1 && v698:0 > 0 && v685:0 > 1
Filtered unneeded arguments:
   f_512(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_512(x1, x6, x8, x9, x10, x12, x13)
   f_479(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_479(x1, x6, x8, x10, x11, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_512(v878:0, sum~cons_1~v954:0, sum~cons_2~v954:0, sum~cons_2~v954:01, sum~cons_1~v954:01, v889:0, v890:0) -> f_479(v878:0, v954:0, 1 + v954:0, 1 + v954:0, 2 + v954:0, v889:0, 2 + v954:0) :|: v954:0 > -1 && sum~cons_1~v954:0 = 1 + v954:0 && sum~cons_2~v954:0 = 2 + v954:0 && sum~cons_2~v954:01 = 2 + v954:0 && sum~cons_1~v954:01 = 1 + v954:0
f_512(v878:0, v883:0, v885:0, v887:0, v886:0, v889:0, v890:0) -> f_512(v878:0, v883:0, v885:0, 1 + v887:0, v887:0, 1 + v889:0, v890:0) :|: v889:0 > 0 && v887:0 > 0 && v885:0 > 2 && v887:0 < v885:0 && v883:0 > 1 && v890:0 > 3 && v878:0 > 2
f_479(v685:0, v690:0, v692:0, v695:0, v696:0, v698:0, v693:0) -> f_512(v685:0, v690:0, v692:0, 2, 1, 1 + v698:0, v693:0) :|: v692:0 > 1 && v690:0 > 0 && v693:0 > 2 && v696:0 > 2 && v695:0 > 1 && v685:0 > 1 && v698:0 > 0

----------------------------------------

(9)
Obligation:
Rules:
f_512(v878:0, sum~cons_1~v954:0, sum~cons_2~v954:0, sum~cons_2~v954:01, sum~cons_1~v954:01, v889:0, v890:0) -> f_479(v878:0, v954:0, 1 + v954:0, 1 + v954:0, 2 + v954:0, v889:0, 2 + v954:0) :|: v954:0 > -1 && sum~cons_1~v954:0 = 1 + v954:0 && sum~cons_2~v954:0 = 2 + v954:0 && sum~cons_2~v954:01 = 2 + v954:0 && sum~cons_1~v954:01 = 1 + v954:0
f_512(x, x1, x2, x3, x4, x5, x6) -> f_512(x, x1, x2, 1 + x3, x3, 1 + x5, x6) :|: x5 > 0 && x3 > 0 && x2 > 2 && x3 < x2 && x1 > 1 && x6 > 3 && x > 2
f_479(v685:0, v690:0, v692:0, v695:0, v696:0, v698:0, v693:0) -> f_512(v685:0, v690:0, v692:0, 2, 1, 1 + v698:0, v693:0) :|: v692:0 > 1 && v690:0 > 0 && v693:0 > 2 && v696:0 > 2 && v695:0 > 1 && v685:0 > 1 && v698:0 > 0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_512(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_512(x:0, x1:0, x2:0, 1 + x3:0, x3:0, 1 + x5:0, x6:0) :|: x6:0 > 3 && x:0 > 2 && x1:0 > 1 && x3:0 < x2:0 && x2:0 > 2 && x3:0 > 0 && x5:0 > 0
f_512(v878:0:0, sum~cons_1~v954:0:0, sum~cons_2~v954:0:0, sum~cons_2~v954:0:01, sum~cons_1~v954:0:01, v889:0:0, v890:0:0) -> f_512(v878:0:0, v954:0:0, 1 + v954:0:0, 2, 1, 1 + v889:0:0, 2 + v954:0:0) :|: v878:0:0 > 1 && v954:0:0 > 0 && v889:0:0 > 0 && sum~cons_1~v954:0:0 = 1 + v954:0:0 && sum~cons_2~v954:0:0 = 2 + v954:0:0 && sum~cons_2~v954:0:01 = 2 + v954:0:0 && sum~cons_1~v954:0:01 = 1 + v954:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_512 ] = f_512_2

The following rules are decreasing:
f_512(v878:0:0, sum~cons_1~v954:0:0, sum~cons_2~v954:0:0, sum~cons_2~v954:0:01, sum~cons_1~v954:0:01, v889:0:0, v890:0:0) -> f_512(v878:0:0, v954:0:0, 1 + v954:0:0, 2, 1, 1 + v889:0:0, 2 + v954:0:0) :|: v878:0:0 > 1 && v954:0:0 > 0 && v889:0:0 > 0 && sum~cons_1~v954:0:0 = 1 + v954:0:0 && sum~cons_2~v954:0:0 = 2 + v954:0:0 && sum~cons_2~v954:0:01 = 2 + v954:0:0 && sum~cons_1~v954:0:01 = 1 + v954:0:0

The following rules are bounded:
f_512(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_512(x:0, x1:0, x2:0, 1 + x3:0, x3:0, 1 + x5:0, x6:0) :|: x6:0 > 3 && x:0 > 2 && x1:0 > 1 && x3:0 < x2:0 && x2:0 > 2 && x3:0 > 0 && x5:0 > 0
f_512(v878:0:0, sum~cons_1~v954:0:0, sum~cons_2~v954:0:0, sum~cons_2~v954:0:01, sum~cons_1~v954:0:01, v889:0:0, v890:0:0) -> f_512(v878:0:0, v954:0:0, 1 + v954:0:0, 2, 1, 1 + v889:0:0, 2 + v954:0:0) :|: v878:0:0 > 1 && v954:0:0 > 0 && v889:0:0 > 0 && sum~cons_1~v954:0:0 = 1 + v954:0:0 && sum~cons_2~v954:0:0 = 2 + v954:0:0 && sum~cons_2~v954:0:01 = 2 + v954:0:0 && sum~cons_1~v954:0:01 = 1 + v954:0:0


----------------------------------------

(13)
Obligation:
Rules:
f_512(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_512(x:0, x1:0, x2:0, 1 + x3:0, x3:0, 1 + x5:0, x6:0) :|: x6:0 > 3 && x:0 > 2 && x1:0 > 1 && x3:0 < x2:0 && x2:0 > 2 && x3:0 > 0 && x5:0 > 0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_512(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0, x5:0:0, x6:0:0) -> f_512(x:0:0, x1:0:0, x2:0:0, 1 + x3:0:0, x3:0:0, 1 + x5:0:0, x6:0:0) :|: x3:0:0 > 0 && x5:0:0 > 0 && x2:0:0 > 2 && x3:0:0 < x2:0:0 && x1:0:0 > 1 && x:0:0 > 2 && x6:0:0 > 3

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_512(x1, x2, x3, x4, x5, x6, x7) -> f_512(x1, x2, x3, x4, x6, x7)

----------------------------------------

(17)
Obligation:
Rules:
f_512(x:0:0, x1:0:0, x2:0:0, x3:0:0, x5:0:0, x6:0:0) -> f_512(x:0:0, x1:0:0, x2:0:0, 1 + x3:0:0, 1 + x5:0:0, x6:0:0) :|: x3:0:0 > 0 && x5:0:0 > 0 && x2:0:0 > 2 && x3:0:0 < x2:0:0 && x1:0:0 > 1 && x:0:0 > 2 && x6:0:0 > 3

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_512(x, x1, x2, x3, x4, x5)] = -1 + x2 - x3

The following rules are decreasing:
f_512(x:0:0, x1:0:0, x2:0:0, x3:0:0, x5:0:0, x6:0:0) -> f_512(x:0:0, x1:0:0, x2:0:0, 1 + x3:0:0, 1 + x5:0:0, x6:0:0) :|: x3:0:0 > 0 && x5:0:0 > 0 && x2:0:0 > 2 && x3:0:0 < x2:0:0 && x1:0:0 > 1 && x:0:0 > 2 && x6:0:0 > 3
The following rules are bounded:
f_512(x:0:0, x1:0:0, x2:0:0, x3:0:0, x5:0:0, x6:0:0) -> f_512(x:0:0, x1:0:0, x2:0:0, 1 + x3:0:0, 1 + x5:0:0, x6:0:0) :|: x3:0:0 > 0 && x5:0:0 > 0 && x2:0:0 > 2 && x3:0:0 < x2:0:0 && x1:0:0 > 1 && x:0:0 > 2 && x6:0:0 > 3

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_292(v95, v96, v97, v98, v99, 1, v101, v102, v103, v104, v105, v106, v107, v108, v109, 0, 3, 2, 4) -> f_293(v95, v96, v97, v98, v99, 1, v101, v103, v102, v104, v105, v106, v107, v108, v109, 0, 3, 2, 4) :|: 0 = 0
f_293(v95, v96, v97, v98, v99, 1, v101, v103, v102, v104, v105, v106, v107, v108, v109, 0, 3, 2, 4) -> f_294(v95, v96, v97, v98, v99, 1, v101, v103, v102, v104, v105, v106, v107, v108, v109, 0, 3, 2, 4) :|: v103 < v101 && 3 <= v101 && 2 <= v95
f_294(v95, v96, v97, v98, v99, 1, v101, v103, v102, v104, v105, v106, v107, v108, v109, 0, 3, 2, 4) -> f_296(v95, v96, v97, v98, v99, 1, v101, v103, v102, v104, v105, v106, v107, v108, v109, 0, 3, 2, 4) :|: 0 = 0
f_296(v95, v96, v97, v98, v99, 1, v101, v103, v102, v104, v105, v106, v107, v108, v109, 0, 3, 2, 4) -> f_298(v95, v96, v97, v98, v99, 1, v101, v103, v102, v104, v105, v106, v107, v108, v109, 0, 3, 2, 4) :|: TRUE
f_298(v95, v96, v97, v98, v99, 1, v101, v103, v102, v104, v105, v106, v107, v108, v109, 0, 3, 2, 4) -> f_300(v95, v96, v97, v98, v99, 1, v101, v103, v104, v102, v105, v106, v107, v108, v109, 0, 3, 2, 4) :|: 0 = 0
f_300(v95, v96, v97, v98, v99, 1, v101, v103, v104, v102, v105, v106, v107, v108, v109, 0, 3, 2, 4) -> f_302(v95, v96, v97, v98, v99, 1, v101, v103, v111, v104, v102, v105, v106, v107, v108, v109, 0, 3, 2, 4) :|: v111 = 1 + v103 && 3 <= v111
f_302(v95, v96, v97, v98, v99, 1, v101, v103, v111, v104, v102, v105, v106, v107, v108, v109, 0, 3, 2, 4) -> f_304(v95, v96, v97, v98, v99, 1, v101, v103, v111, v104, v102, v105, v106, v107, v108, v109, 0, 3, 2, 4) :|: TRUE
f_304(v95, v96, v97, v98, v99, 1, v101, v103, v111, v104, v102, v105, v106, v107, v108, v109, 0, 3, 2, 4) -> f_306(v95, v96, v97, v98, v99, 1, v101, v103, v111, v102, v105, v106, v107, v108, v109, 0, 3, 2, 4) :|: 0 = 0
f_306(v95, v96, v97, v98, v99, 1, v101, v103, v111, v102, v105, v106, v107, v108, v109, 0, 3, 2, 4) -> f_308(v95, v96, v97, v98, v99, 1, v101, v103, v111, v102, v105, v106, v107, v108, v109, 0, 3, 2, 4) :|: v103 = 1 + v102
f_308(v95, v96, v97, v98, v99, 1, v101, v103, v111, v102, v105, v106, v107, v108, v109, 0, 3, 2, 4) -> f_310(v95, v96, v97, v98, v99, 1, v101, v103, v111, v102, v105, v106, v107, v108, v109, 0, 3, 2, 4) :|: TRUE
f_310(v95, v96, v97, v98, v99, 1, v101, v103, v111, v102, v105, v106, v107, v108, v109, 0, 3, 2, 4) -> f_312(v95, v96, v97, v98, v99, 1, v101, v103, v111, v102, v105, v106, v107, v108, v109, 0, 3, 2, 4) :|: TRUE
f_312(v95, v96, v97, v98, v99, 1, v101, v103, v111, v102, v105, v106, v107, v108, v109, 0, 3, 2, 4) -> f_291(v95, v96, v97, v98, v99, 1, v101, v103, v111, v102, v105, v106, v107, v108, v109, 0, 3, 2, 4) :|: TRUE
f_291(v95, v96, v97, v98, v99, 1, v101, v102, v103, v104, v105, v106, v107, v108, v109, 0, 3, 2, 4) -> f_292(v95, v96, v97, v98, v99, 1, v101, v102, v103, v104, v105, v106, v107, v108, v109, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_292(v95:0, v96:0, v97:0, v98:0, v99:0, 1, v101:0, v102:0, 1 + v102:0, v104:0, v105:0, v106:0, v107:0, v108:0, v109:0, 0, 3, 2, 4) -> f_292(v95:0, v96:0, v97:0, v98:0, v99:0, 1, v101:0, 1 + v102:0, 1 + (1 + v102:0), v102:0, v105:0, v106:0, v107:0, v108:0, v109:0, 0, 3, 2, 4) :|: v101:0 > 2 && v101:0 > 1 + v102:0 && v102:0 > 0 && v95:0 > 1
Filtered unneeded arguments:
   f_292(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_292(x1, x7, x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_292(v95:0, v101:0, v102:0, sum~cons_1~v102:0) -> f_292(v95:0, v101:0, 1 + v102:0, 1 + (1 + v102:0)) :|: v101:0 > 1 + v102:0 && v101:0 > 2 && v95:0 > 1 && v102:0 > 0 && sum~cons_1~v102:0 = 1 + v102:0

----------------------------------------

(22)
Obligation:
Rules:
f_292(v95:0, v101:0, v102:0, sum~cons_1~v102:0) -> f_292(v95:0, v101:0, 1 + v102:0, 1 + (1 + v102:0)) :|: v101:0 > 1 + v102:0 && v101:0 > 2 && v95:0 > 1 && v102:0 > 0 && sum~cons_1~v102:0 = 1 + v102:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_292(v95:0:0, v101:0:0, v102:0:0, sum~cons_1~v102:0:0) -> f_292(v95:0:0, v101:0:0, 1 + v102:0:0, 1 + (1 + v102:0:0)) :|: v95:0:0 > 1 && v102:0:0 > 0 && v101:0:0 > 2 && v101:0:0 > 1 + v102:0:0 && sum~cons_1~v102:0:0 = 1 + v102:0:0

----------------------------------------

(25) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_292 ] = -1*f_292_3 + f_292_2

The following rules are decreasing:
f_292(v95:0:0, v101:0:0, v102:0:0, sum~cons_1~v102:0:0) -> f_292(v95:0:0, v101:0:0, 1 + v102:0:0, 1 + (1 + v102:0:0)) :|: v95:0:0 > 1 && v102:0:0 > 0 && v101:0:0 > 2 && v101:0:0 > 1 + v102:0:0 && sum~cons_1~v102:0:0 = 1 + v102:0:0

The following rules are bounded:
f_292(v95:0:0, v101:0:0, v102:0:0, sum~cons_1~v102:0:0) -> f_292(v95:0:0, v101:0:0, 1 + v102:0:0, 1 + (1 + v102:0:0)) :|: v95:0:0 > 1 && v102:0:0 > 0 && v101:0:0 > 2 && v101:0:0 > 1 + v102:0:0 && sum~cons_1~v102:0:0 = 1 + v102:0:0


----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
