YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/4W9rK.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 61 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1055 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 27 ms]
(8) IntTRS
(9) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/4W9rK.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/4W9rK.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		store 0, %7
		br %8
	8:
		%9 = load %4
		%10 = load %5
		%11 = load %6
		%12 = add i32 %10, %11
		%13 = icmp sgt %9 %12
		br %13, %14, %21
	14:
		%15 = load %5
		%16 = add i32 %15, 1
		store %16, %5
		%17 = load %6
		%18 = add i32 %17, 1
		store %18, %6
		%19 = load %7
		%20 = add i32 %19, 1
		store %20, %7
		br %8
	21:
		%22 = load %7
		ret %22

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 40
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @test_fun(i32 %2, i32 %3, i32 %4)
		ret %5


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_276(v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, 1, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) -> f_277(v143, v144, v145, v146, v147, v148, v149, v154, v151, v152, 1, v150, v155, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) :|: 0 = 0
f_277(v143, v144, v145, v146, v147, v148, v149, v154, v151, v152, 1, v150, v155, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) -> f_278(v143, v144, v145, v146, v147, v148, v149, v154, v155, v152, 1, v150, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) :|: 0 = 0
f_278(v143, v144, v145, v146, v147, v148, v149, v154, v155, v152, 1, v150, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) -> f_279(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v150, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) :|: v165 = v154 + v155
f_279(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v150, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) -> f_280(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v150, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) :|: v165 < v143
f_280(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v150, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) -> f_282(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v150, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) :|: 0 = 0
f_282(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v150, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) -> f_284(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v150, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) :|: TRUE
f_284(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v150, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) -> f_286(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) :|: 0 = 0
f_286(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) -> f_288(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) :|: v166 = 1 + v154
f_288(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) -> f_290(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) :|: TRUE
f_290(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v151, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) -> f_291(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) :|: 0 = 0
f_291(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) -> f_292(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v168, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) :|: v168 = 1 + v155
f_292(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v168, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) -> f_293(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v168, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) :|: TRUE
f_293(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v168, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) -> f_294(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v168, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) :|: 0 = 0
f_294(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v168, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) -> f_295(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v168, v157, v170, v158, v159, v160, v161, v162, v163, 0, 3, 4, 2) :|: v170 = 1 + v157 && 2 <= v170
f_295(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v168, v157, v170, v158, v159, v160, v161, v162, v163, 0, 3, 4, 2) -> f_296(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v168, v157, v170, v158, v159, v160, v161, v162, v163, 0, 3, 4, 2) :|: TRUE
f_296(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v168, v157, v170, v158, v159, v160, v161, v162, v163, 0, 3, 4, 2) -> f_297(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v168, v157, v170, v158, v159, v160, v161, v162, v163, 0, 3, 4, 2) :|: TRUE
f_297(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v168, v157, v170, v158, v159, v160, v161, v162, v163, 0, 3, 4, 2) -> f_275(v143, v144, v145, v146, v147, v148, v149, v154, v155, v165, 1, v166, v168, v157, v170, v158, v159, v160, v161, v162, v163, 0, 3, 4) :|: TRUE
f_275(v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, 1, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) -> f_276(v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, 1, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_276(v143:0, v144:0, v145:0, v146:0, v147:0, v148:0, v149:0, v150:0, v151:0, v152:0, 1, v154:0, v155:0, v156:0, v157:0, v158:0, v159:0, v160:0, v161:0, v162:0, v163:0, 0, 3, 4) -> f_276(v143:0, v144:0, v145:0, v146:0, v147:0, v148:0, v149:0, v154:0, v155:0, v154:0 + v155:0, 1, 1 + v154:0, 1 + v155:0, v157:0, 1 + v157:0, v158:0, v159:0, v160:0, v161:0, v162:0, v163:0, 0, 3, 4) :|: v157:0 > 0 && v154:0 + v155:0 < v143:0
Filtered unneeded arguments:
   f_276(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_276(x1, x12, x13, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_276(v143:0, v154:0, v155:0, v157:0) -> f_276(v143:0, 1 + v154:0, 1 + v155:0, 1 + v157:0) :|: v157:0 > 0 && v154:0 + v155:0 < v143:0

----------------------------------------

(8)
Obligation:
Rules:
f_276(v143:0, v154:0, v155:0, v157:0) -> f_276(v143:0, 1 + v154:0, 1 + v155:0, 1 + v157:0) :|: v157:0 > 0 && v154:0 + v155:0 < v143:0

----------------------------------------

(9) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_276(x, x1, x2, x3)] = -1 + x - x1 - x2

The following rules are decreasing:
f_276(v143:0, v154:0, v155:0, v157:0) -> f_276(v143:0, 1 + v154:0, 1 + v155:0, 1 + v157:0) :|: v157:0 > 0 && v154:0 + v155:0 < v143:0
The following rules are bounded:
f_276(v143:0, v154:0, v155:0, v157:0) -> f_276(v143:0, 1 + v154:0, 1 + v155:0, 1 + v157:0) :|: v157:0 > 0 && v154:0 + v155:0 < v143:0

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
