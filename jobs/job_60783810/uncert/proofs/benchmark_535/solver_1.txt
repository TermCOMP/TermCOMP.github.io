YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/fOdmT.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 687 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/fOdmT.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/fOdmT.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 1, %2
		store 0, %3
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %5
		br %8
	8:
		%9 = load %2
		%10 = icmp ne %9 0
		br %10, %11, %21
	11:
		%12 = load %4
		%13 = load %5
		%14 = icmp sge %12 %13
		br %14, %15, %16
	15:
		store 0, %2
		br %16
	16:
		%17 = load %4
		%18 = add i32 %17, 1
		store %18, %4
		%19 = load %3
		%20 = add i32 %19, 1
		store %20, %3
		br %8
	21:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_284(v311, v312, v313, v314, v315, v316, v317, 1, v319, 0, v321, v322, v323, v324, v325, v326, v327, v328, 3, 4) -> f_285(v311, v312, v313, v314, v315, v316, v317, 1, v319, 0, v321, v322, v323, v324, v325, v326, v327, v328, 3, 4) :|: 0 = 0
f_285(v311, v312, v313, v314, v315, v316, v317, 1, v319, 0, v321, v322, v323, v324, v325, v326, v327, v328, 3, 4) -> f_286(v311, v312, v313, v314, v315, v316, v317, 1, v319, 0, v321, v322, v323, v324, v325, v326, v327, v328, 3, 4) :|: TRUE
f_286(v311, v312, v313, v314, v315, v316, v317, 1, v319, 0, v321, v322, v323, v324, v325, v326, v327, v328, 3, 4) -> f_287(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v319, v322, v323, v324, v325, v326, v327, v328, 3, 4) :|: 0 = 0
f_287(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v319, v322, v323, v324, v325, v326, v327, v328, 3, 4) -> f_288(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v319, v322, v323, v324, v325, v326, v327, v328, 3, 4) :|: 0 = 0
f_288(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v319, v322, v323, v324, v325, v326, v327, v328, 3, 4) -> f_290(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v319, v322, v323, v324, v325, v326, v327, v328, 3, 4) :|: v321 < v317
f_290(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v319, v322, v323, v324, v325, v326, v327, v328, 3, 4) -> f_292(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v319, v322, v323, v324, v325, v326, v327, v328, 3, 4) :|: 0 = 0
f_292(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v319, v322, v323, v324, v325, v326, v327, v328, 3, 4) -> f_294(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v319, v322, v323, v324, v325, v326, v327, v328, 3, 4) :|: TRUE
f_294(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v319, v322, v323, v324, v325, v326, v327, v328, 3, 4) -> f_296(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v322, v323, v324, v325, v326, v327, v328, 3, 4) :|: 0 = 0
f_296(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v322, v323, v324, v325, v326, v327, v328, 3, 4) -> f_298(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v356, v322, v323, v324, v325, v326, v327, v328, 3, 4) :|: v356 = 1 + v321
f_298(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v356, v322, v323, v324, v325, v326, v327, v328, 3, 4) -> f_300(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v356, v322, v323, v324, v325, v326, v327, v328, 3, 4) :|: TRUE
f_300(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v356, v322, v323, v324, v325, v326, v327, v328, 3, 4) -> f_302(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v356, v323, v324, v325, v326, v327, v328, 3, 4) :|: 0 = 0
f_302(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v356, v323, v324, v325, v326, v327, v328, 3, 4) -> f_304(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v356, v323, v360, v324, v325, v326, v327, v328, 3, 4, 2) :|: v360 = 1 + v323 && 2 <= v360
f_304(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v356, v323, v360, v324, v325, v326, v327, v328, 3, 4, 2) -> f_306(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v356, v323, v360, v324, v325, v326, v327, v328, 3, 4, 2) :|: TRUE
f_306(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v356, v323, v360, v324, v325, v326, v327, v328, 3, 4, 2) -> f_308(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v356, v323, v360, v324, v325, v326, v327, v328, 3, 4, 2) :|: TRUE
f_308(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v356, v323, v360, v324, v325, v326, v327, v328, 3, 4, 2) -> f_283(v311, v312, v313, v314, v315, v316, v317, 1, v321, 0, v356, v323, v360, v324, v325, v326, v327, v328, 3, 4) :|: TRUE
f_283(v311, v312, v313, v314, v315, v316, v317, 1, v319, 0, v321, v322, v323, v324, v325, v326, v327, v328, 3, 4) -> f_284(v311, v312, v313, v314, v315, v316, v317, 1, v319, 0, v321, v322, v323, v324, v325, v326, v327, v328, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_284(v311:0, v312:0, v313:0, v314:0, v315:0, v316:0, v317:0, 1, v319:0, 0, v321:0, v322:0, v323:0, v324:0, v325:0, v326:0, v327:0, v328:0, 3, 4) -> f_284(v311:0, v312:0, v313:0, v314:0, v315:0, v316:0, v317:0, 1, v321:0, 0, 1 + v321:0, v323:0, 1 + v323:0, v324:0, v325:0, v326:0, v327:0, v328:0, 3, 4) :|: v323:0 > 0 && v321:0 < v317:0
Filtered unneeded arguments:
   f_284(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_284(x7, x11, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_284(v317:0, v321:0, v323:0) -> f_284(v317:0, 1 + v321:0, 1 + v323:0) :|: v323:0 > 0 && v321:0 < v317:0

----------------------------------------

(8)
Obligation:
Rules:
f_284(v317:0, v321:0, v323:0) -> f_284(v317:0, 1 + v321:0, 1 + v323:0) :|: v323:0 > 0 && v321:0 < v317:0

----------------------------------------

(9) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_284(x, x1, x2)] = -1 + x - x1

The following rules are decreasing:
f_284(v317:0, v321:0, v323:0) -> f_284(v317:0, 1 + v321:0, 1 + v323:0) :|: v323:0 > 0 && v321:0 < v317:0
The following rules are bounded:
f_284(v317:0, v321:0, v323:0) -> f_284(v317:0, 1 + v321:0, 1 + v323:0) :|: v323:0 > 0 && v321:0 < v317:0

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
