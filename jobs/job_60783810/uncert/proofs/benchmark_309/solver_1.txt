YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/y8Rom.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 304 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [EQUIVALENT, 34 ms]
(6) IntTRS
(7) IRSToKoat [EQUIVALENT, 0 ms]
(8) Koat Problem
(9) KoAT2 [EQUIVALENT, 25 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/y8Rom.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/y8Rom.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sgt %7 0
		br %8, %9, %16
	9:
		%10 = load %2
		%11 = load %3
		%12 = mul i32 2, %11
		%13 = sub i32 %10, %12
		store %13, %2
		%14 = load %3
		%15 = add i32 %14, 1
		store %15, %3
		br %6
	16:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 46 rulesP rules:
f_76 -> f_77(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_77(v1, v2, 3, 1, 4) -> f_78(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_78(v1, v3, v2, v4, 3, 1, 4) -> f_79(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_79(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_80(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_80(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_81(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_81(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_82(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_82(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_83(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_83(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_84(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_84(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_85(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_85(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) -> f_86(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_86(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) -> f_87(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_87(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) -> f_88(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) :|: 0 = 0
f_88(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) -> f_89(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) :|: 0 < v7
f_88(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) -> f_90(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) :|: v7 <= 0
f_89(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) -> f_91(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) :|: 0 = 0
f_90(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 1, 4) -> f_92(v1, v3, v5, v7, v9, 0, v2, v4, v6, 3, 1, 4) :|: 0 = 0
f_91(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) -> f_93(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) :|: TRUE
f_92(v1, v3, v5, v7, v9, 0, v2, v4, v6, 3, 1, 4) -> f_94(v1, v3, v5, v7, v9, 0, v2, v4, v6, 3, 1, 4) :|: TRUE
f_93(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) -> f_95(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) :|: 0 = 0
f_95(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) -> f_96(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) :|: 0 = 0
f_96(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 4) -> f_97(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 2, 4) :|: v11 = 2 * v9
f_97(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 2, 4) -> f_98(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 2, 4) :|: v12 + v11 = v7
f_98(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 2, 4) -> f_99(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 2, 4) :|: TRUE
f_99(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 2, 4) -> f_100(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 2, 4) :|: 0 = 0
f_100(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 2, 4) -> f_101(v1, v3, v5, v7, v9, 1, v11, v12, v14, v2, v4, v6, 0, 3, 2, 4) :|: v14 = 1 + v9
f_101(v1, v3, v5, v7, v9, 1, v11, v12, v14, v2, v4, v6, 0, 3, 2, 4) -> f_102(v1, v3, v5, v7, v9, 1, v11, v12, v14, v2, v4, v6, 0, 3, 2, 4) :|: TRUE
f_102(v1, v3, v5, v7, v9, 1, v11, v12, v14, v2, v4, v6, 0, 3, 2, 4) -> f_103(v1, v3, v5, v7, v9, 1, v11, v12, v14, v2, v4, v6, 0, 3, 2, 4) :|: TRUE
f_103(v1, v3, v5, v7, v9, 1, v11, v12, v14, v2, v4, v6, 0, 3, 2, 4) -> f_120(v1, v3, v5, v7, v9, v7, 1, v9, v11, v12, v14, v2, v4, v6, 0, 3, 2, 4) :|: TRUE
f_120(v21, v22, v23, v24, v25, v26, 1, v28, v29, v30, v31, v32, v33, v34, 0, 3, 2, 4) -> f_137(v21, v22, v23, v24, v25, v26, 1, v28, v29, v30, v31, v32, v33, v34, 0, 3, 2, 4) :|: TRUE
f_137(v41, v42, v43, v44, v45, v46, 1, v48, v49, v50, v51, v52, v53, v54, 0, 3, 2, 4) -> f_138(v41, v42, v43, v44, v45, v50, 1, v46, v48, v49, v51, v52, v53, v54, 0, 3, 2, 4) :|: 0 = 0
f_138(v41, v42, v43, v44, v45, v50, 1, v46, v48, v49, v51, v52, v53, v54, 0, 3, 2, 4) -> f_139(v41, v42, v43, v44, v45, v50, 1, v46, v48, v49, v51, v52, v53, v54, 0, 3, 2, 4) :|: 0 < v50
f_138(v41, v42, v43, v44, v45, v50, 1, v46, v48, v49, v51, v52, v53, v54, 0, 3, 2, 4) -> f_140(v41, v42, v43, v44, v45, v50, 1, v46, v48, v49, v51, v52, v53, v54, 0, 3, 2, 4) :|: v50 <= 0 && 2 <= v49 && 1 <= v48 && 2 <= v51
f_139(v41, v42, v43, v44, v45, v50, 1, v46, v48, v49, v51, v52, v53, v54, 0, 3, 2, 4) -> f_141(v41, v42, v43, v44, v45, v50, 1, v46, v48, v49, v51, v52, v53, v54, 0, 3, 2, 4) :|: 0 = 0
f_140(v41, v42, v43, v44, v45, v50, 1, v46, v48, v49, v51, v52, v53, v54, 0, 3, 2, 4) -> f_142(v41, v42, v43, v44, v45, v50, 0, v46, v48, v49, v51, v52, v53, v54, 3, 2, 1, 4) :|: 0 = 0
f_141(v41, v42, v43, v44, v45, v50, 1, v46, v48, v49, v51, v52, v53, v54, 0, 3, 2, 4) -> f_143(v41, v42, v43, v44, v45, v50, 1, v46, v48, v49, v51, v52, v53, v54, 0, 3, 2, 4) :|: TRUE
f_142(v41, v42, v43, v44, v45, v50, 0, v46, v48, v49, v51, v52, v53, v54, 3, 2, 1, 4) -> f_144(v41, v42, v43, v44, v45, v50, 0, v46, v48, v49, v51, v52, v53, v54, 3, 2, 1, 4) :|: TRUE
f_143(v41, v42, v43, v44, v45, v50, 1, v46, v48, v49, v51, v52, v53, v54, 0, 3, 2, 4) -> f_145(v41, v42, v43, v44, v45, v50, 1, v48, v49, v51, v52, v53, v54, 0, 3, 2, 4) :|: 0 = 0
f_145(v41, v42, v43, v44, v45, v50, 1, v48, v49, v51, v52, v53, v54, 0, 3, 2, 4) -> f_146(v41, v42, v43, v44, v45, v50, 1, v51, v49, v48, v52, v53, v54, 0, 3, 2, 4) :|: 0 = 0
f_146(v41, v42, v43, v44, v45, v50, 1, v51, v49, v48, v52, v53, v54, 0, 3, 2, 4) -> f_147(v41, v42, v43, v44, v45, v50, 1, v51, v56, v48, v52, v53, v54, 0, 3, 2, 4) :|: v56 = 2 * v51
f_147(v41, v42, v43, v44, v45, v50, 1, v51, v56, v48, v52, v53, v54, 0, 3, 2, 4) -> f_148(v41, v42, v43, v44, v45, v50, 1, v51, v56, v57, v48, v52, v53, v54, 0, 3, 2, 4) :|: v57 + v56 = v50
f_148(v41, v42, v43, v44, v45, v50, 1, v51, v56, v57, v48, v52, v53, v54, 0, 3, 2, 4) -> f_149(v41, v42, v43, v44, v45, v50, 1, v51, v56, v57, v48, v52, v53, v54, 0, 3, 2, 4) :|: TRUE
f_149(v41, v42, v43, v44, v45, v50, 1, v51, v56, v57, v48, v52, v53, v54, 0, 3, 2, 4) -> f_150(v41, v42, v43, v44, v45, v50, 1, v51, v56, v57, v52, v53, v54, 0, 3, 2, 4) :|: 0 = 0
f_150(v41, v42, v43, v44, v45, v50, 1, v51, v56, v57, v52, v53, v54, 0, 3, 2, 4) -> f_151(v41, v42, v43, v44, v45, v50, 1, v51, v56, v57, v59, v52, v53, v54, 0, 3, 2, 4) :|: v59 = 1 + v51
f_151(v41, v42, v43, v44, v45, v50, 1, v51, v56, v57, v59, v52, v53, v54, 0, 3, 2, 4) -> f_152(v41, v42, v43, v44, v45, v50, 1, v51, v56, v57, v59, v52, v53, v54, 0, 3, 2, 4) :|: TRUE
f_152(v41, v42, v43, v44, v45, v50, 1, v51, v56, v57, v59, v52, v53, v54, 0, 3, 2, 4) -> f_153(v41, v42, v43, v44, v45, v50, 1, v51, v56, v57, v59, v52, v53, v54, 0, 3, 2, 4) :|: TRUE
f_153(v41, v42, v43, v44, v45, v50, 1, v51, v56, v57, v59, v52, v53, v54, 0, 3, 2, 4) -> f_137(v41, v42, v43, v44, v45, v50, 1, v51, v56, v57, v59, v52, v53, v54, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_138(v41:0, v42:0, v43:0, v44:0, v45:0, v50:0, 1, v46:0, v48:0, v49:0, v51:0, v52:0, v53:0, v54:0, 0, 3, 2, 4) -> f_144(v41:0, v42:0, v43:0, v44:0, v45:0, v50:0, 0, v46:0, v48:0, v49:0, v51:0, v52:0, v53:0, v54:0, 3, 2, 1, 4) :|: v49:0 > 1 && v50:0 < 1 && v51:0 > 1 && v48:0 > 0
f_76 -> f_94(v1:0, v3:0, v5:0, v7:0, v9:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 < 1
f_138(v41:0, v42:0, v43:0, v44:0, v45:0, v57:0 + 2 * v51:0, 1, v46:0, v48:0, v49:0, v51:0, v52:0, v53:0, v54:0, 0, 3, 2, 4) -> f_138(v41:0, v42:0, v43:0, v44:0, v45:0, v57:0, 1, v57:0 + 2 * v51:0, v51:0, 2 * v51:0, 1 + v51:0, v52:0, v53:0, v54:0, 0, 3, 2, 4) :|: v57:0 + 2 * v51:0 > 0
f_76 -> f_138(v1:0, v3:0, v5:0, v12:0 + 2 * v9:0, v9:0, v12:0, 1, v12:0 + 2 * v9:0, v9:0, 2 * v9:0, 1 + v9:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 0, 3, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v12:0 + 2 * v9:0 > 0
Filtered unneeded arguments:
   f_138(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_138(x6, x9, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_138(v50:0, v48:0, v49:0, v51:0) -> f_144(v41:0, v42:0, v43:0, v44:0, v45:0, v50:0, 0, v46:0, v48:0, v49:0, v51:0, v52:0, v53:0, v54:0, 3, 2, 1, 4) :|: v50:0 < 1 && v49:0 > 1 && v48:0 > 0 && v51:0 > 1
f_76 -> f_94(v1:0, v3:0, v5:0, v7:0, v9:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0 && v7:0 < 1 && v5:0 > 0
f_138(sum~v57:0~times~cons_2~v51:0, v48:0, v49:0, v51:0) -> f_138(v57:0, v51:0, 2 * v51:0, 1 + v51:0) :|: v57:0 + 2 * v51:0 > 0 && sum~v57:0~times~cons_2~v51:0 = v57:0 + 2 * v51:0
f_76 -> f_138(v12:0, v9:0, 2 * v9:0, 1 + v9:0) :|: v12:0 + 2 * v9:0 > 0

----------------------------------------

(6)
Obligation:
Rules:
f_138(v50:0, v48:0, v49:0, v51:0) -> f_144(v41:0, v42:0, v43:0, v44:0, v45:0, v50:0, 0, v46:0, v48:0, v49:0, v51:0, v52:0, v53:0, v54:0, 3, 2, 1, 4) :|: v50:0 < 1 && v49:0 > 1 && v48:0 > 0 && v51:0 > 1
f_76 -> f_94(v1:0, v3:0, v5:0, v7:0, v9:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0 && v7:0 < 1 && v5:0 > 0
f_138(x, x1, x2, x3) -> f_138(x4, x3, 2 * x3, 1 + x3) :|: x4 + 2 * x3 > 0 && x = x4 + 2 * x3
f_76 -> f_138(x5, x6, 2 * x6, 1 + x6) :|: x5 + 2 * x6 > 0
Start term: f_76

----------------------------------------

(7) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(8)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_76))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x40 x41 k21 k22 k23 k24 k20 x39 x35 x36 x37 x38 x31 x32 x33 x34 k18 k19 x30 x70 x68 x69 x64 x65 x66 x67 x60 x61 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x58 x59 x53 x54 x55 x56 x50 x51 x52 x90 x91 x92 x86 x87 x88 x89 x x82 x83 x84 x85 x80 x81 x79 x75 x76 x'' x77 x78 x71 x72 x73 x74 k14 k15 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x7 x27 x20 x21 x22 x23 x1 x' x17 x18 x19 x13 x14 x15 x16 x10 x11 x12 x93 x94 x95)
(RULES
  f_76(x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61) -> f_94(k24, k9, k12, k14, k16, 0, 3 + k24, 3 + k9, 3 + k12, 3, 1, 4, x62, x63, x64, x65, x66, x67) :|: k24 > 0 && k9 > 0 && k14 < 1 && k12 > 0
  f_138(k21, k7, k6, k19, x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) -> f_144(k0, k2, k1, k4, k3, k21, 0, k5, k7, k6, k19, k20, k22, k23, 3, 2, 1, 4) :|: k21 < 1 && k6 > 1 && k7 > 0 && k19 > 1
  f_76(x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_138(k10, k15, 2 * k15, 1 + k15, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43) :|: k10 + 2 * k15 > 0
  f_138(k17, k18, k11, k13, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81) -> f_138(k8, k13, 2 * k13, 1 + k13, x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95) :|: k8 + 2 * k13 > 0 && k17 = k8 + 2 * k13
)

----------------------------------------

(9) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_5938683181973659518.koat 

KoAT2's output was:

YES

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
