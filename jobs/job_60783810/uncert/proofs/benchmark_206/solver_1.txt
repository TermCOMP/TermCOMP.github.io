YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/sKDGu.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 299 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 43 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/sKDGu.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/sKDGu.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store 1, %6
		br %7
	7:
		%8 = load %5
		%9 = icmp sgt %8 0
		br %9, %10, %16
	10:
		%11 = load %6
		%12 = load %4
		%13 = mul i32 %11, %12
		store %13, %6
		%14 = load %5
		%15 = sub i32 %14, 1
		store %15, %5
		br %7
	16:
		%17 = load %6
		ret %17

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 34
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @test_fun(i32 %2, i32 %3, i32 %4)
		ret %5


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_169(v43, v44, v45, v46, v47, v48, v53, 1, v51, v52, v49, v54, v55, v56, v57, v58, 0, 3, 4) -> f_170(v43, v44, v45, v46, v47, v48, v53, 1, v51, v52, v49, v54, v55, v56, v57, v58, 0, 3, 2, 4) :|: 0 < v53 && 2 <= v49 && 2 <= v44
f_170(v43, v44, v45, v46, v47, v48, v53, 1, v51, v52, v49, v54, v55, v56, v57, v58, 0, 3, 2, 4) -> f_172(v43, v44, v45, v46, v47, v48, v53, 1, v51, v52, v49, v54, v55, v56, v57, v58, 0, 3, 2, 4) :|: 0 = 0
f_172(v43, v44, v45, v46, v47, v48, v53, 1, v51, v52, v49, v54, v55, v56, v57, v58, 0, 3, 2, 4) -> f_174(v43, v44, v45, v46, v47, v48, v53, 1, v51, v52, v49, v54, v55, v56, v57, v58, 0, 3, 2, 4) :|: TRUE
f_174(v43, v44, v45, v46, v47, v48, v53, 1, v51, v52, v49, v54, v55, v56, v57, v58, 0, 3, 2, 4) -> f_176(v43, v44, v45, v46, v47, v48, v53, 1, v52, v49, v54, v55, v56, v57, v58, 0, 3, 2, 4) :|: 0 = 0
f_176(v43, v44, v45, v46, v47, v48, v53, 1, v52, v49, v54, v55, v56, v57, v58, 0, 3, 2, 4) -> f_178(v43, v44, v45, v46, v47, v48, v53, 1, v52, v49, v54, v55, v56, v57, v58, 0, 3, 2, 4) :|: 0 = 0
f_178(v43, v44, v45, v46, v47, v48, v53, 1, v52, v49, v54, v55, v56, v57, v58, 0, 3, 2, 4) -> f_180(v43, v44, v45, v46, v47, v48, v53, 1, v52, v60, v49, v54, v55, v56, v57, v58, 0, 3, 2, 4) :|: v60 = v52 * v43
f_180(v43, v44, v45, v46, v47, v48, v53, 1, v52, v60, v49, v54, v55, v56, v57, v58, 0, 3, 2, 4) -> f_181(v43, v44, v45, v46, v47, v48, v53, 1, v52, v60, v49, v54, v55, v56, v57, v58, 0, 3, 2, 4) :|: TRUE
f_181(v43, v44, v45, v46, v47, v48, v53, 1, v52, v60, v49, v54, v55, v56, v57, v58, 0, 3, 2, 4) -> f_182(v43, v44, v45, v46, v47, v48, v53, 1, v52, v60, v54, v55, v56, v57, v58, 0, 3, 2, 4) :|: 0 = 0
f_182(v43, v44, v45, v46, v47, v48, v53, 1, v52, v60, v54, v55, v56, v57, v58, 0, 3, 2, 4) -> f_183(v43, v44, v45, v46, v47, v48, v53, 1, v52, v60, v62, v54, v55, v56, v57, v58, 0, 3, 2, 4) :|: 1 + v62 = v53 && 0 <= v62
f_183(v43, v44, v45, v46, v47, v48, v53, 1, v52, v60, v62, v54, v55, v56, v57, v58, 0, 3, 2, 4) -> f_184(v43, v44, v45, v46, v47, v48, v53, 1, v52, v60, v62, v54, v55, v56, v57, v58, 0, 3, 2, 4) :|: TRUE
f_184(v43, v44, v45, v46, v47, v48, v53, 1, v52, v60, v62, v54, v55, v56, v57, v58, 0, 3, 2, 4) -> f_185(v43, v44, v45, v46, v47, v48, v53, 1, v52, v60, v62, v54, v55, v56, v57, v58, 0, 3, 2, 4) :|: TRUE
f_185(v43, v44, v45, v46, v47, v48, v53, 1, v52, v60, v62, v54, v55, v56, v57, v58, 0, 3, 2, 4) -> f_168(v43, v44, v45, v46, v47, v48, v53, 1, v52, v60, v62, v54, v55, v56, v57, v58, 0, 3, 4) :|: TRUE
f_168(v43, v44, v45, v46, v47, v48, v49, 1, v51, v52, v53, v54, v55, v56, v57, v58, 0, 3, 4) -> f_169(v43, v44, v45, v46, v47, v48, v53, 1, v51, v52, v49, v54, v55, v56, v57, v58, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_169(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, 1 + v62:0, 1, v51:0, v52:0, v49:0, v54:0, v55:0, v56:0, v57:0, v58:0, 0, 3, 4) -> f_169(v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v62:0, 1, v52:0, v52:0 * v43:0, 1 + v62:0, v54:0, v55:0, v56:0, v57:0, v58:0, 0, 3, 4) :|: v49:0 > 1 && v62:0 > -1 && v44:0 > 1
Filtered unneeded arguments:
   f_169(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_169(x2, x7, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_169(v44:0, sum~cons_1~v62:0, v49:0) -> f_169(v44:0, v62:0, 1 + v62:0) :|: v62:0 > -1 && v44:0 > 1 && v49:0 > 1 && sum~cons_1~v62:0 = 1 + v62:0

----------------------------------------

(8)
Obligation:
Rules:
f_169(v44:0, sum~cons_1~v62:0, v49:0) -> f_169(v44:0, v62:0, 1 + v62:0) :|: v62:0 > -1 && v44:0 > 1 && v49:0 > 1 && sum~cons_1~v62:0 = 1 + v62:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_169(v44:0:0, sum~cons_1~v62:0:0, v49:0:0) -> f_169(v44:0:0, v62:0:0, 1 + v62:0:0) :|: v62:0:0 > -1 && v44:0:0 > 1 && v49:0:0 > 1 && sum~cons_1~v62:0:0 = 1 + v62:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_169(x, x1, x2)] = x1

The following rules are decreasing:
f_169(v44:0:0, sum~cons_1~v62:0:0, v49:0:0) -> f_169(v44:0:0, v62:0:0, 1 + v62:0:0) :|: v62:0:0 > -1 && v44:0:0 > 1 && v49:0:0 > 1 && sum~cons_1~v62:0:0 = 1 + v62:0:0
The following rules are bounded:
f_169(v44:0:0, sum~cons_1~v62:0:0, v49:0:0) -> f_169(v44:0:0, v62:0:0, 1 + v62:0:0) :|: v62:0:0 > -1 && v44:0:0 > 1 && v49:0:0 > 1 && sum~cons_1~v62:0:0 = 1 + v62:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
