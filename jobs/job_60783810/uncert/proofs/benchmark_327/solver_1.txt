YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/F6Rd0.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 784 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 58 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 2 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) RankingReductionPairProof [EQUIVALENT, 3 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/F6Rd0.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/F6Rd0.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = load %3
		%11 = add i32 %9, %10
		%12 = icmp sge %11 0
		br %12, %13, %17
	13:
		%14 = load %2
		%15 = load %4
		%16 = icmp sle %14 %15
		br %17
	17:
		%18 = phi [0, %8], [%16, %13]
		br %18, %19, %26
	19:
		%20 = load %2
		%21 = mul i32 2, %20
		%22 = load %3
		%23 = add i32 %21, %22
		store %23, %2
		%24 = load %3
		%25 = add i32 %24, 1
		store %25, %3
		br %8
	26:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_217(v284, v285, v286, v287, v288, v289, v290, v296, v292, v293, 1, v291, v295, v297, v298, v299, v300, v301, 0, 3, 2, 4) -> f_218(v284, v285, v286, v287, v288, v289, v290, v296, v297, v293, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) :|: 0 = 0
f_218(v284, v285, v286, v287, v288, v289, v290, v296, v297, v293, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) -> f_219(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) :|: v303 = v296 + v297
f_219(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) -> f_220(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) :|: 0 <= v303
f_220(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) -> f_222(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) :|: 0 = 0
f_222(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) -> f_224(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) :|: TRUE
f_224(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) -> f_226(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) :|: 0 = 0
f_226(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) -> f_228(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) :|: 0 = 0
f_228(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) -> f_229(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) :|: v296 <= v290
f_229(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) -> f_231(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) :|: 0 = 0
f_231(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) -> f_233(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) :|: 0 = 0
f_233(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) -> f_235(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) :|: TRUE
f_235(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v291, v295, v292, v298, v299, v300, v301, 0, 3, 2, 4) -> f_237(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v295, v292, v298, v299, v300, v301, 0, 3, 4) :|: 0 = 0
f_237(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v295, v292, v298, v299, v300, v301, 0, 3, 4) -> f_238(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v292, v298, v299, v300, v301, 0, 3, 2, 4) :|: v406 = 2 * v296
f_238(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v292, v298, v299, v300, v301, 0, 3, 2, 4) -> f_239(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v292, v298, v299, v300, v301, 0, 3, 2, 4) :|: 0 = 0
f_239(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v292, v298, v299, v300, v301, 0, 3, 2, 4) -> f_240(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v407, v292, v298, v299, v300, v301, 0, 3, 2, 4) :|: v407 = v406 + v297
f_240(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v407, v292, v298, v299, v300, v301, 0, 3, 2, 4) -> f_241(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v407, v292, v298, v299, v300, v301, 0, 3, 2, 4) :|: TRUE
f_241(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v407, v292, v298, v299, v300, v301, 0, 3, 2, 4) -> f_242(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v407, v298, v299, v300, v301, 0, 3, 2, 4) :|: 0 = 0
f_242(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v407, v298, v299, v300, v301, 0, 3, 2, 4) -> f_243(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v407, v409, v298, v299, v300, v301, 0, 3, 2, 4) :|: v409 = 1 + v297
f_243(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v407, v409, v298, v299, v300, v301, 0, 3, 2, 4) -> f_244(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v407, v409, v298, v299, v300, v301, 0, 3, 2, 4) :|: TRUE
f_244(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v407, v409, v298, v299, v300, v301, 0, 3, 2, 4) -> f_245(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v407, v409, v298, v299, v300, v301, 0, 3, 2, 4) :|: TRUE
f_245(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v407, v409, v298, v299, v300, v301, 0, 3, 2, 4) -> f_216(v284, v285, v286, v287, v288, v289, v290, v296, v297, v303, 1, v406, v407, v409, v298, v299, v300, v301, 0, 3, 2, 4) :|: TRUE
f_216(v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, 1, v295, v296, v297, v298, v299, v300, v301, 0, 3, 2, 4) -> f_217(v284, v285, v286, v287, v288, v289, v290, v296, v292, v293, 1, v291, v295, v297, v298, v299, v300, v301, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_217(v284:0, v285:0, v286:0, v287:0, v288:0, v289:0, v290:0, v296:0, v292:0, v293:0, 1, v291:0, v295:0, v297:0, v298:0, v299:0, v300:0, v301:0, 0, 3, 2, 4) -> f_217(v284:0, v285:0, v286:0, v287:0, v288:0, v289:0, v290:0, 2 * v296:0 + v297:0, v297:0, v296:0 + v297:0, 1, v296:0, 2 * v296:0, 1 + v297:0, v298:0, v299:0, v300:0, v301:0, 0, 3, 2, 4) :|: v296:0 <= v290:0 && v296:0 + v297:0 > -1
Filtered unneeded arguments:
   f_217(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_217(x7, x8, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_217(v290:0, v296:0, v297:0) -> f_217(v290:0, 2 * v296:0 + v297:0, 1 + v297:0) :|: v296:0 <= v290:0 && v296:0 + v297:0 > -1

----------------------------------------

(8)
Obligation:
Rules:
f_217(v290:0, v296:0, v297:0) -> f_217(v290:0, 2 * v296:0 + v297:0, 1 + v297:0) :|: v296:0 <= v290:0 && v296:0 + v297:0 > -1

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

f_217(v290:0, v296:0, v297:0) -> f_217(v290:0, 2 * v296:0 + v297:0, 1 + v297:0) :|: v296:0 <= v290:0 && v296:0 + v297:0 > -1
has been transformed into
f_217(v290:0, v296:0, v297:0) -> f_217(v290:0, 2 * v296:0 + v297:0, 1 + v297:0) :|: v297:0 = 1 + x8 && (v296:0 = 2 * x7 + x8 && (v290:0 = x6 && (v296:0 <= v290:0 && v296:0 + v297:0 > -1))) && x7 <= x6 && x7 + x8 > -1.


f_217(v290:0, v296:0, v297:0) -> f_217(v290:0, 2 * v296:0 + v297:0, 1 + v297:0) :|: v297:0 = 1 + x8 && (v296:0 = 2 * x7 + x8 && (v290:0 = x6 && (v296:0 <= v290:0 && v296:0 + v297:0 > -1))) && x7 <= x6 && x7 + x8 > -1 and 
f_217(v290:0, v296:0, v297:0) -> f_217(v290:0, 2 * v296:0 + v297:0, 1 + v297:0) :|: v297:0 = 1 + x8 && (v296:0 = 2 * x7 + x8 && (v290:0 = x6 && (v296:0 <= v290:0 && v296:0 + v297:0 > -1))) && x7 <= x6 && x7 + x8 > -1
have been merged into the new rule
f_217(x21, x22, x23) -> f_217(x21, 2 * (2 * x22 + x23) + (1 + x23), 1 + (1 + x23)) :|: x23 = 1 + x24 && (x22 = 2 * x25 + x24 && (x21 = x26 && (x22 <= x21 && x22 + x23 > -1))) && x25 <= x26 && x25 + x24 > -1 && (1 + x23 = 1 + x27 && (2 * x22 + x23 = 2 * x28 + x27 && (x21 = x29 && (2 * x22 + x23 <= x21 && 2 * x22 + x23 + (1 + x23) > -1))) && x28 <= x29 && x28 + x27 > -1)


----------------------------------------

(10)
Obligation:
Rules:
f_217(x30, x31, x32) -> f_217(x30, 4 * x31 + 3 * x32 + 1, 2 + x32) :|: TRUE && x32 + -1 * x33 = 1 && x31 + -2 * x34 + -1 * x33 = 0 && x30 + -1 * x35 = 0 && x31 + -1 * x30 <= 0 && x31 + x32 >= 0 && x34 + -1 * x35 <= 0 && x34 + x33 >= 0 && x32 + -1 * x36 = 0 && 2 * x31 + x32 + -2 * x37 + -1 * x36 = 0 && x30 + -1 * x38 = 0 && 2 * x31 + x32 + -1 * x30 <= 0 && x37 + -1 * x38 <= 0 && x37 + x36 >= 0

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_217(x30:0, x31:0, x32:0) -> f_217(x30:0, 4 * x31:0 + 3 * x32:0 + 1, 2 + x32:0) :|: x37:0 + -1 * x38:0 <= 0 && x37:0 + x36:0 >= 0 && 2 * x31:0 + x32:0 + -1 * x30:0 <= 0 && x30:0 + -1 * x38:0 = 0 && 2 * x31:0 + x32:0 + -2 * x37:0 + -1 * x36:0 = 0 && x32:0 + -1 * x36:0 = 0 && x34:0 + x33:0 >= 0 && x34:0 + -1 * x35:0 <= 0 && x31:0 + x32:0 >= 0 && x31:0 + -1 * x30:0 <= 0 && x30:0 + -1 * x35:0 = 0 && x32:0 + -1 * x33:0 = 1 && x31:0 + -2 * x34:0 + -1 * x33:0 = 0

----------------------------------------

(13) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_217 ] = -1/4*f_217_2 + 1/4*f_217_1

The following rules are decreasing:
f_217(x30:0, x31:0, x32:0) -> f_217(x30:0, 4 * x31:0 + 3 * x32:0 + 1, 2 + x32:0) :|: x37:0 + -1 * x38:0 <= 0 && x37:0 + x36:0 >= 0 && 2 * x31:0 + x32:0 + -1 * x30:0 <= 0 && x30:0 + -1 * x38:0 = 0 && 2 * x31:0 + x32:0 + -2 * x37:0 + -1 * x36:0 = 0 && x32:0 + -1 * x36:0 = 0 && x34:0 + x33:0 >= 0 && x34:0 + -1 * x35:0 <= 0 && x31:0 + x32:0 >= 0 && x31:0 + -1 * x30:0 <= 0 && x30:0 + -1 * x35:0 = 0 && x32:0 + -1 * x33:0 = 1 && x31:0 + -2 * x34:0 + -1 * x33:0 = 0

The following rules are bounded:
f_217(x30:0, x31:0, x32:0) -> f_217(x30:0, 4 * x31:0 + 3 * x32:0 + 1, 2 + x32:0) :|: x37:0 + -1 * x38:0 <= 0 && x37:0 + x36:0 >= 0 && 2 * x31:0 + x32:0 + -1 * x30:0 <= 0 && x30:0 + -1 * x38:0 = 0 && 2 * x31:0 + x32:0 + -2 * x37:0 + -1 * x36:0 = 0 && x32:0 + -1 * x36:0 = 0 && x34:0 + x33:0 >= 0 && x34:0 + -1 * x35:0 <= 0 && x31:0 + x32:0 >= 0 && x31:0 + -1 * x30:0 <= 0 && x30:0 + -1 * x35:0 = 0 && x32:0 + -1 * x33:0 = 1 && x31:0 + -2 * x34:0 + -1 * x33:0 = 0


----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
