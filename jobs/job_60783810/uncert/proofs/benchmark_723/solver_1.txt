YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/sXiKt.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 390 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 13 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 12 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 6 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/sXiKt.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/sXiKt.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		store 0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %3
		br %4
	4:
		%5 = load %2
		%6 = icmp sle %5 50
		br %6, %7, %10
	7:
		%8 = load %3
		%9 = add i32 %8, 1
		store %9, %3
		br %13
	10:
		%11 = load %3
		%12 = add i32 %11, -1
		store %12, %3
		br %13
	13:
		%14 = load %3
		%15 = icmp slt %14 0
		br %15, %16, %17
	16:
		br %20
	17:
		%18 = load %2
		%19 = add i32 %18, 1
		store %19, %2
		br %4
	20:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_314(v237, v238, v239, v240, 0, 50, 51, v246, v245, v244, v247, v248, v249, 3, 1, 4) -> f_316(v237, v238, v239, v240, 0, 50, 51, v246, v245, v244, v247, v248, v249, 3, 1, 4) :|: 0 <= v246 && 1 <= v244
f_316(v237, v238, v239, v240, 0, 50, 51, v246, v245, v244, v247, v248, v249, 3, 1, 4) -> f_318(v237, v238, v239, v240, 0, 50, 51, v246, v245, v244, v247, v248, v249, 3, 1, 4) :|: 0 = 0
f_318(v237, v238, v239, v240, 0, 50, 51, v246, v245, v244, v247, v248, v249, 3, 1, 4) -> f_320(v237, v238, v239, v240, 0, 50, 51, v246, v245, v244, v247, v248, v249, 3, 1, 4) :|: TRUE
f_320(v237, v238, v239, v240, 0, 50, 51, v246, v245, v244, v247, v248, v249, 3, 1, 4) -> f_322(v237, v238, v239, v240, 0, 50, 51, v246, v244, v247, v248, v249, 3, 1, 4) :|: 0 = 0
f_322(v237, v238, v239, v240, 0, 50, 51, v246, v244, v247, v248, v249, 3, 1, 4) -> f_323(v237, v238, v239, v240, 0, 50, 51, v246, v253, v244, v247, v248, v249, 3, 1, 4, 52) :|: v253 = 1 + v240 && 52 <= v253
f_323(v237, v238, v239, v240, 0, 50, 51, v246, v253, v244, v247, v248, v249, 3, 1, 4, 52) -> f_324(v237, v238, v239, v240, 0, 50, 51, v246, v253, v244, v247, v248, v249, 3, 1, 4, 52) :|: TRUE
f_324(v237, v238, v239, v240, 0, 50, 51, v246, v253, v244, v247, v248, v249, 3, 1, 4, 52) -> f_325(v237, v238, v239, v240, 0, 50, 51, v246, v253, v244, v247, v248, v249, 3, 1, 4, 52) :|: TRUE
f_325(v237, v238, v239, v240, 0, 50, 51, v246, v253, v244, v247, v248, v249, 3, 1, 4, 52) -> f_326(v237, v238, v239, v253, 0, 50, 51, v246, v240, v244, v247, v248, v249, 3, 1, 4, 52) :|: 0 = 0
f_326(v237, v238, v239, v253, 0, 50, 51, v246, v240, v244, v247, v248, v249, 3, 1, 4, 52) -> f_327(v237, v238, v239, v253, 0, 50, 51, v246, v240, v244, v247, v248, v249, 3, 1, 4, 52) :|: 0 = 0
f_327(v237, v238, v239, v253, 0, 50, 51, v246, v240, v244, v247, v248, v249, 3, 1, 4, 52) -> f_328(v237, v238, v239, v253, 0, 50, 51, v246, v240, v244, v247, v248, v249, 3, 1, 4, 52) :|: TRUE
f_328(v237, v238, v239, v253, 0, 50, 51, v246, v240, v244, v247, v248, v249, 3, 1, 4, 52) -> f_329(v237, v238, v239, v253, 0, 50, 51, v246, v240, v247, v248, v249, 3, 1, 4, 52) :|: 0 = 0
f_329(v237, v238, v239, v253, 0, 50, 51, v246, v240, v247, v248, v249, 3, 1, 4, 52) -> f_330(v237, v238, v239, v253, 0, 50, 51, v246, v240, v261, v247, v248, v249, 3, 1, 4, 52, 49) :|: 1 + v261 = v246 && 0 <= 1 + v261 && v261 <= 49
f_330(v237, v238, v239, v253, 0, 50, 51, v246, v240, v261, v247, v248, v249, 3, 1, 4, 52, 49) -> f_331(v237, v238, v239, v253, 0, 50, 51, v246, v240, v261, v247, v248, v249, 3, 1, 4, 52, 49) :|: TRUE
f_331(v237, v238, v239, v253, 0, 50, 51, v246, v240, v261, v247, v248, v249, 3, 1, 4, 52, 49) -> f_332(v237, v238, v239, v253, 0, 50, 51, v246, v240, v261, v247, v248, v249, 3, 1, 4, 52, 49) :|: TRUE
f_332(v237, v238, v239, v253, 0, 50, 51, v246, v240, v261, v247, v248, v249, 3, 1, 4, 52, 49) -> f_313(v237, v238, v239, v253, 0, 50, 51, v246, v240, v261, v247, v248, v249, 3, 1, 4) :|: TRUE
f_313(v237, v238, v239, v240, 0, 50, 51, v244, v245, v246, v247, v248, v249, 3, 1, 4) -> f_314(v237, v238, v239, v240, 0, 50, 51, v246, v245, v244, v247, v248, v249, 3, 1, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_314(v237:0, v238:0, v239:0, v240:0, 0, 50, 51, 1 + v261:0, v245:0, v244:0, v247:0, v248:0, v249:0, 3, 1, 4) -> f_314(v237:0, v238:0, v239:0, 1 + v240:0, 0, 50, 51, v261:0, v240:0, 1 + v261:0, v247:0, v248:0, v249:0, 3, 1, 4) :|: v244:0 > 0 && v261:0 > -2 && v240:0 > 50 && v261:0 < 50
Filtered unneeded arguments:
   f_314(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_314(x4, x8, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_314(v240:0, sum~cons_1~v261:0, v244:0) -> f_314(1 + v240:0, v261:0, 1 + v261:0) :|: v261:0 > -2 && v244:0 > 0 && v261:0 < 50 && v240:0 > 50 && sum~cons_1~v261:0 = 1 + v261:0

----------------------------------------

(9)
Obligation:
Rules:
f_314(v240:0, sum~cons_1~v261:0, v244:0) -> f_314(1 + v240:0, v261:0, 1 + v261:0) :|: v261:0 > -2 && v244:0 > 0 && v261:0 < 50 && v240:0 > 50 && sum~cons_1~v261:0 = 1 + v261:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_314(v240:0:0, sum~cons_1~v261:0:0, v244:0:0) -> f_314(1 + v240:0:0, v261:0:0, 1 + v261:0:0) :|: v261:0:0 < 50 && v240:0:0 > 50 && v244:0:0 > 0 && v261:0:0 > -2 && sum~cons_1~v261:0:0 = 1 + v261:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_314(x, x1, x2)] = x1

The following rules are decreasing:
f_314(v240:0:0, sum~cons_1~v261:0:0, v244:0:0) -> f_314(1 + v240:0:0, v261:0:0, 1 + v261:0:0) :|: v261:0:0 < 50 && v240:0:0 > 50 && v244:0:0 > 0 && v261:0:0 > -2 && sum~cons_1~v261:0:0 = 1 + v261:0:0
The following rules are bounded:
f_314(v240:0:0, sum~cons_1~v261:0:0, v244:0:0) -> f_314(1 + v240:0:0, v261:0:0, 1 + v261:0:0) :|: v261:0:0 < 50 && v240:0:0 > 50 && v244:0:0 > 0 && v261:0:0 > -2 && sum~cons_1~v261:0:0 = 1 + v261:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_217(v71, v72, v73, v76, 1, v74, 0, v78, v79, v80, 3, 50, 51, 4) -> f_218(v71, v72, v73, v76, 1, v74, 0, v78, v79, v80, 3, 49, 50, 4) :|: v76 <= 50 && v74 <= 49
f_218(v71, v72, v73, v76, 1, v74, 0, v78, v79, v80, 3, 49, 50, 4) -> f_220(v71, v72, v73, v76, 1, v74, 0, v78, v79, v80, 3, 49, 50, 4) :|: 0 = 0
f_220(v71, v72, v73, v76, 1, v74, 0, v78, v79, v80, 3, 49, 50, 4) -> f_222(v71, v72, v73, v76, 1, v74, 0, v78, v79, v80, 3, 49, 50, 4) :|: TRUE
f_222(v71, v72, v73, v76, 1, v74, 0, v78, v79, v80, 3, 49, 50, 4) -> f_224(v71, v72, v73, v76, 1, 0, v74, v78, v79, v80, 3, 49, 50, 4) :|: 0 = 0
f_224(v71, v72, v73, v76, 1, 0, v74, v78, v79, v80, 3, 49, 50, 4) -> f_226(v71, v72, v73, v76, 1, v81, 0, v74, v78, v79, v80, 3, 49, 50, 4, 2, 51) :|: v81 = 1 + v76 && 2 <= v81 && v81 <= 51
f_226(v71, v72, v73, v76, 1, v81, 0, v74, v78, v79, v80, 3, 49, 50, 4, 2, 51) -> f_228(v71, v72, v73, v76, 1, v81, 0, v74, v78, v79, v80, 3, 49, 50, 4, 2, 51) :|: TRUE
f_228(v71, v72, v73, v76, 1, v81, 0, v74, v78, v79, v80, 3, 49, 50, 4, 2, 51) -> f_230(v71, v72, v73, v76, 1, v81, 0, v74, v78, v79, v80, 3, 49, 50, 4, 2, 51) :|: TRUE
f_230(v71, v72, v73, v76, 1, v81, 0, v74, v78, v79, v80, 3, 49, 50, 4, 2, 51) -> f_232(v71, v72, v73, v76, 1, v81, 0, v74, v78, v79, v80, 3, 49, 50, 4, 2, 51) :|: 0 = 0
f_232(v71, v72, v73, v76, 1, v81, 0, v74, v78, v79, v80, 3, 49, 50, 4, 2, 51) -> f_234(v71, v72, v73, v76, 1, v81, 0, v74, v78, v79, v80, 3, 49, 50, 4, 2, 51) :|: 0 = 0
f_234(v71, v72, v73, v76, 1, v81, 0, v74, v78, v79, v80, 3, 49, 50, 4, 2, 51) -> f_236(v71, v72, v73, v76, 1, v81, 0, v74, v78, v79, v80, 3, 49, 50, 4, 2, 51) :|: TRUE
f_236(v71, v72, v73, v76, 1, v81, 0, v74, v78, v79, v80, 3, 49, 50, 4, 2, 51) -> f_238(v71, v72, v73, v76, 1, v81, 0, v78, v79, v80, 3, 50, 4, 2, 51) :|: 0 = 0
f_238(v71, v72, v73, v76, 1, v81, 0, v78, v79, v80, 3, 50, 4, 2, 51) -> f_240(v71, v72, v73, v76, 1, v81, 0, v78, v79, v80, 3, 50, 4, 2, 51) :|: v81 = 1 + v76
f_240(v71, v72, v73, v76, 1, v81, 0, v78, v79, v80, 3, 50, 4, 2, 51) -> f_242(v71, v72, v73, v76, 1, v81, 0, v78, v79, v80, 3, 50, 4, 2, 51) :|: TRUE
f_242(v71, v72, v73, v76, 1, v81, 0, v78, v79, v80, 3, 50, 4, 2, 51) -> f_244(v71, v72, v73, v76, 1, v81, 0, v78, v79, v80, 3, 50, 4, 2, 51) :|: TRUE
f_244(v71, v72, v73, v76, 1, v81, 0, v78, v79, v80, 3, 50, 4, 2, 51) -> f_216(v71, v72, v73, v76, 1, v81, 0, v78, v79, v80, 3, 50, 51, 4) :|: TRUE
f_216(v71, v72, v73, v74, 1, v76, 0, v78, v79, v80, 3, 50, 51, 4) -> f_217(v71, v72, v73, v76, 1, v74, 0, v78, v79, v80, 3, 50, 51, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_217(v71:0, v72:0, v73:0, v76:0, 1, v74:0, 0, v78:0, v79:0, v80:0, 3, 50, 51, 4) -> f_217(v71:0, v72:0, v73:0, 1 + v76:0, 1, v76:0, 0, v78:0, v79:0, v80:0, 3, 50, 51, 4) :|: v74:0 < 50 && v76:0 < 51 && v76:0 > 0
Filtered unneeded arguments:
   f_217(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_217(x4, x6)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_217(v76:0, v74:0) -> f_217(1 + v76:0, v76:0) :|: v76:0 < 51 && v76:0 > 0 && v74:0 < 50

----------------------------------------

(16)
Obligation:
Rules:
f_217(v76:0, v74:0) -> f_217(1 + v76:0, v76:0) :|: v76:0 < 51 && v76:0 > 0 && v74:0 < 50

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_217(v76:0:0, v74:0:0) -> f_217(1 + v76:0:0, v76:0:0) :|: v76:0:0 < 51 && v76:0:0 > 0 && v74:0:0 < 50

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_217 ] = -1*f_217_1

The following rules are decreasing:
f_217(v76:0:0, v74:0:0) -> f_217(1 + v76:0:0, v76:0:0) :|: v76:0:0 < 51 && v76:0:0 > 0 && v74:0:0 < 50

The following rules are bounded:
f_217(v76:0:0, v74:0:0) -> f_217(1 + v76:0:0, v76:0:0) :|: v76:0:0 < 51 && v76:0:0 > 0 && v74:0:0 < 50


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
