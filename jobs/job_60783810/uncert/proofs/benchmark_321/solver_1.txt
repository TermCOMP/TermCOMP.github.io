YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/e0c1q.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 278 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 39 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 15 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/e0c1q.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/e0c1q.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = load %3
		%9 = icmp sgt %7 %8
		br %9, %10, %16
	10:
		%11 = load %3
		%12 = icmp sge %11 1
		br %12, %13, %16
	13:
		%14 = load %3
		%15 = icmp sle %14 2
		br %16
	16:
		%17 = phi [0, %10], [0, %6], [%15, %13]
		br %17, %18, %23
	18:
		%19 = load %2
		%20 = load %3
		%21 = sub i32 %19, %20
		store %21, %2
		%22 = call i32 @__VERIFIER_nondet_int()
		store %22, %3
		br %6
	23:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_176(v216, v217, v218, v219, v220, v224, v222, 1, v221, v225, v226, v227, v228, 0, 3, 2, 4) -> f_177(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) :|: 0 = 0
f_177(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) -> f_178(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) :|: v225 < v224
f_178(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) -> f_180(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) :|: 0 = 0
f_180(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) -> f_182(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) :|: TRUE
f_182(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) -> f_184(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) :|: 0 = 0
f_184(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) -> f_186(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) :|: 1 <= v225 && 2 <= v224 && 3 <= v221
f_186(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) -> f_188(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) :|: 0 = 0
f_188(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) -> f_190(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) :|: TRUE
f_190(v216, v217, v218, v219, v220, v224, v225, 1, v222, v221, v226, v227, v228, 0, 3, 2, 4) -> f_192(v216, v217, v218, v219, v220, v224, v225, 1, v221, v222, v226, v227, v228, 0, 3, 2, 4) :|: 0 = 0
f_192(v216, v217, v218, v219, v220, v224, v225, 1, v221, v222, v226, v227, v228, 0, 3, 2, 4) -> f_194(v216, v217, v218, v219, v220, v224, v225, 1, v221, v222, v226, v227, v228, 0, 3, 2, 4) :|: v225 <= 2
f_194(v216, v217, v218, v219, v220, v224, v225, 1, v221, v222, v226, v227, v228, 0, 3, 2, 4) -> f_196(v216, v217, v218, v219, v220, v224, v225, 1, v221, v222, v226, v227, v228, 0, 3, 2, 4) :|: 0 = 0
f_196(v216, v217, v218, v219, v220, v224, v225, 1, v221, v222, v226, v227, v228, 0, 3, 2, 4) -> f_198(v216, v217, v218, v219, v220, v224, v225, 1, v221, v222, v226, v227, v228, 0, 3, 2, 4) :|: 0 = 0
f_198(v216, v217, v218, v219, v220, v224, v225, 1, v221, v222, v226, v227, v228, 0, 3, 2, 4) -> f_200(v216, v217, v218, v219, v220, v224, v225, 1, v221, v222, v226, v227, v228, 0, 3, 2, 4) :|: TRUE
f_200(v216, v217, v218, v219, v220, v224, v225, 1, v221, v222, v226, v227, v228, 0, 3, 2, 4) -> f_202(v216, v217, v218, v219, v220, v224, v225, 1, v222, v226, v227, v228, 0, 3, 2, 4) :|: 0 = 0
f_202(v216, v217, v218, v219, v220, v224, v225, 1, v222, v226, v227, v228, 0, 3, 2, 4) -> f_203(v216, v217, v218, v219, v220, v224, v225, 1, v226, v227, v228, 0, 3, 2, 4) :|: 0 = 0
f_203(v216, v217, v218, v219, v220, v224, v225, 1, v226, v227, v228, 0, 3, 2, 4) -> f_204(v216, v217, v218, v219, v220, v224, v225, 1, v358, v226, v227, v228, 0, 3, 2, 4) :|: v358 + v225 = v224 && 1 <= v358
f_204(v216, v217, v218, v219, v220, v224, v225, 1, v358, v226, v227, v228, 0, 3, 2, 4) -> f_205(v216, v217, v218, v219, v220, v224, v225, 1, v358, v226, v227, v228, 0, 3, 2, 4) :|: TRUE
f_205(v216, v217, v218, v219, v220, v224, v225, 1, v358, v226, v227, v228, 0, 3, 2, 4) -> f_206(v216, v217, v218, v219, v220, v224, v225, 1, v358, v360, v226, v227, v228, 0, 3, 2, 4) :|: TRUE
f_206(v216, v217, v218, v219, v220, v224, v225, 1, v358, v360, v226, v227, v228, 0, 3, 2, 4) -> f_207(v216, v217, v218, v219, v220, v224, v225, 1, v358, v360, v226, v227, v228, 0, 3, 2, 4) :|: TRUE
f_207(v216, v217, v218, v219, v220, v224, v225, 1, v358, v360, v226, v227, v228, 0, 3, 2, 4) -> f_208(v216, v217, v218, v219, v220, v224, v225, 1, v358, v360, v226, v227, v228, 0, 3, 2, 4) :|: TRUE
f_208(v216, v217, v218, v219, v220, v224, v225, 1, v358, v360, v226, v227, v228, 0, 3, 2, 4) -> f_175(v216, v217, v218, v219, v220, v224, v225, 1, v358, v360, v226, v227, v228, 0, 3, 2, 4) :|: TRUE
f_175(v216, v217, v218, v219, v220, v221, v222, 1, v224, v225, v226, v227, v228, 0, 3, 2, 4) -> f_176(v216, v217, v218, v219, v220, v224, v222, 1, v221, v225, v226, v227, v228, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_176(v216:0, v217:0, v218:0, v219:0, v220:0, v358:0 + v225:0, v222:0, 1, v221:0, v225:0, v226:0, v227:0, v228:0, 0, 3, 2, 4) -> f_176(v216:0, v217:0, v218:0, v219:0, v220:0, v358:0, v225:0, 1, v358:0 + v225:0, v360:0, v226:0, v227:0, v228:0, 0, 3, 2, 4) :|: v358:0 + v225:0 > v225:0 && v358:0 + v225:0 > 1 && v225:0 > 0 && v221:0 > 2 && v358:0 > 0 && v225:0 < 3
Filtered unneeded arguments:
   f_176(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_176(x6, x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_176(sum~v358:0~v225:0, v221:0, v225:0) -> f_176(v358:0, v358:0 + v225:0, v360:0) :|: v358:0 + v225:0 > 1 && v358:0 + v225:0 > v225:0 && v225:0 > 0 && v221:0 > 2 && v225:0 < 3 && v358:0 > 0 && sum~v358:0~v225:0 = v358:0 + v225:0

----------------------------------------

(8)
Obligation:
Rules:
f_176(sum~v358:0~v225:0, v221:0, v225:0) -> f_176(v358:0, v358:0 + v225:0, v360:0) :|: v358:0 + v225:0 > 1 && v358:0 + v225:0 > v225:0 && v225:0 > 0 && v221:0 > 2 && v225:0 < 3 && v358:0 > 0 && sum~v358:0~v225:0 = v358:0 + v225:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_176(sum~v358:0:0~v225:0:0, v221:0:0, v225:0:0) -> f_176(v358:0:0, v358:0:0 + v225:0:0, v360:0:0) :|: v225:0:0 < 3 && v358:0:0 > 0 && v221:0:0 > 2 && v225:0:0 > 0 && v358:0:0 + v225:0:0 > v225:0:0 && v358:0:0 + v225:0:0 > 1 && sum~v358:0:0~v225:0:0 = v358:0:0 + v225:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_176 ] = f_176_1

The following rules are decreasing:
f_176(sum~v358:0:0~v225:0:0, v221:0:0, v225:0:0) -> f_176(v358:0:0, v358:0:0 + v225:0:0, v360:0:0) :|: v225:0:0 < 3 && v358:0:0 > 0 && v221:0:0 > 2 && v225:0:0 > 0 && v358:0:0 + v225:0:0 > v225:0:0 && v358:0:0 + v225:0:0 > 1 && sum~v358:0:0~v225:0:0 = v358:0:0 + v225:0:0

The following rules are bounded:
f_176(sum~v358:0:0~v225:0:0, v221:0:0, v225:0:0) -> f_176(v358:0:0, v358:0:0 + v225:0:0, v360:0:0) :|: v225:0:0 < 3 && v358:0:0 > 0 && v221:0:0 > 2 && v225:0:0 > 0 && v358:0:0 + v225:0:0 > v225:0:0 && v358:0:0 + v225:0:0 > 1 && sum~v358:0:0~v225:0:0 = v358:0:0 + v225:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
