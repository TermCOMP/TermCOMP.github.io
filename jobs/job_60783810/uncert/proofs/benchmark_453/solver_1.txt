YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/n6Mvh.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 292 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 39 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) IntTRS
        (14) TerminationGraphProcessor [EQUIVALENT, 2 ms]
        (15) IntTRS
        (16) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (21) YES
    (22) LLVM Symbolic Execution SCC
        (23) SCC2IRS [SOUND, 37 ms]
        (24) IntTRS
        (25) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (26) IntTRS
        (27) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (28) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/n6Mvh.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/n6Mvh.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		br %4
	4:
		%5 = load %2
		%6 = icmp sge %5 0
		br %6, %7, %10
	7:
		%8 = load %3
		%9 = icmp sge %8 0
		br %10
	10:
		%11 = phi [0, %4], [%9, %7]
		br %11, %12, %22
	12:
		%13 = load %3
		%14 = sub i32 %13, 1
		store %14, %3
		%15 = load %3
		%16 = icmp slt %15 0
		br %16, %17, %21
	17:
		%18 = load %2
		%19 = sub i32 %18, 1
		store %19, %2
		%20 = call i32 @__VERIFIER_nondet_int()
		store %20, %3
		br %21
	21:
		br %4
	22:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 56 rulesP rules:
f_138(v1, v3, v5, v7, 1, 0, -1, v18, v20, v2, v4, v6, 3, 4) -> f_140(v1, v3, v5, v18, 1, 0, -1, v7, v20, v2, v4, v6, 3, 4) :|: 0 = 0
f_140(v1, v3, v5, v18, 1, 0, -1, v7, v20, v2, v4, v6, 3, 4) -> f_142(v1, v3, v5, v18, 1, 0, -1, v7, v20, v2, v4, v6, 3, 4) :|: 0 <= v18 && 1 <= v7
f_142(v1, v3, v5, v18, 1, 0, -1, v7, v20, v2, v4, v6, 3, 4) -> f_145(v1, v3, v5, v18, 1, 0, -1, v7, v20, v2, v4, v6, 3, 4) :|: 0 = 0
f_145(v1, v3, v5, v18, 1, 0, -1, v7, v20, v2, v4, v6, 3, 4) -> f_148(v1, v3, v5, v18, 1, 0, -1, v7, v20, v2, v4, v6, 3, 4) :|: TRUE
f_148(v1, v3, v5, v18, 1, 0, -1, v7, v20, v2, v4, v6, 3, 4) -> f_151(v1, v3, v5, v18, 1, v20, 0, -1, v7, v2, v4, v6, 3, 4) :|: 0 = 0
f_151(v1, v3, v5, v18, 1, v20, 0, -1, v7, v2, v4, v6, 3, 4) -> f_154(v1, v3, v5, v18, 1, v20, 0, -1, v7, v2, v4, v6, 3, 4) :|: 0 <= v20
f_154(v1, v3, v5, v18, 1, v20, 0, -1, v7, v2, v4, v6, 3, 4) -> f_158(v1, v3, v5, v18, 1, v20, 0, -1, v7, v2, v4, v6, 3, 4) :|: 0 = 0
f_158(v1, v3, v5, v18, 1, v20, 0, -1, v7, v2, v4, v6, 3, 4) -> f_162(v1, v3, v5, v18, 1, v20, 0, -1, v7, v2, v4, v6, 3, 4) :|: 0 = 0
f_162(v1, v3, v5, v18, 1, v20, 0, -1, v7, v2, v4, v6, 3, 4) -> f_166(v1, v3, v5, v18, 1, v20, 0, -1, v7, v2, v4, v6, 3, 4) :|: TRUE
f_166(v1, v3, v5, v18, 1, v20, 0, -1, v7, v2, v4, v6, 3, 4) -> f_170(v1, v3, v5, v18, 1, v20, -1, v7, v2, v4, v6, 0, 3, 4) :|: 0 = 0
f_170(v1, v3, v5, v18, 1, v20, -1, v7, v2, v4, v6, 0, 3, 4) -> f_172(v1, v3, v5, v18, 1, v20, v152, -1, v7, v2, v4, v6, 0, 3, 4) :|: 1 + v152 = v20 && 0 <= 1 + v152
f_172(v1, v3, v5, v18, 1, v20, v152, -1, v7, v2, v4, v6, 0, 3, 4) -> f_174(v1, v3, v5, v18, 1, v20, v152, -1, v7, v2, v4, v6, 0, 3, 4) :|: TRUE
f_174(v1, v3, v5, v18, 1, v20, v152, -1, v7, v2, v4, v6, 0, 3, 4) -> f_176(v1, v3, v5, v18, 1, v20, v152, v7, v2, v4, v6, 0, 3, 4) :|: 0 = 0
f_176(v1, v3, v5, v18, 1, v20, v152, v7, v2, v4, v6, 0, 3, 4) -> f_178(v1, v3, v5, v18, 1, 0, -1, v7, v2, v4, v6, 3, 4) :|: v152 < 0 && v20 = 0 && 1 + v152 = 0 && 0 = 0
f_176(v1, v3, v5, v18, 1, v20, v152, v7, v2, v4, v6, 0, 3, 4) -> f_179(v1, v3, v5, v18, 1, v20, v152, v7, v2, v4, v6, 0, 3, 4) :|: 0 <= v152 && 1 <= v20
f_178(v1, v3, v5, v18, 1, 0, -1, v7, v2, v4, v6, 3, 4) -> f_181(v1, v3, v5, v18, 1, 0, -1, v7, v2, v4, v6, 3, 4) :|: 0 = 0
f_181(v1, v3, v5, v18, 1, 0, -1, v7, v2, v4, v6, 3, 4) -> f_183(v1, v3, v5, v18, 1, 0, -1, v7, v2, v4, v6, 3, 4) :|: TRUE
f_183(v1, v3, v5, v18, 1, 0, -1, v7, v2, v4, v6, 3, 4) -> f_208(v1, v3, v5, v18, 1, 0, -1, v7, 0, v2, v4, v6, 3, 4) :|: TRUE
f_208(v315, v316, v317, v318, 1, 0, -1, v322, v323, v324, v325, v326, 3, 4) -> f_211(v315, v316, v317, v318, 1, 0, -1, v323, v324, v325, v326, 3, 4) :|: 0 = 0
f_211(v315, v316, v317, v318, 1, 0, -1, v323, v324, v325, v326, 3, 4) -> f_213(v315, v316, v317, v318, 1, 0, -1, v368, v323, v324, v325, v326, 3, 4) :|: 1 + v368 = v318 && 0 <= 1 + v368
f_213(v315, v316, v317, v318, 1, 0, -1, v368, v323, v324, v325, v326, 3, 4) -> f_215(v315, v316, v317, v318, 1, 0, -1, v368, v323, v324, v325, v326, 3, 4) :|: TRUE
f_215(v315, v316, v317, v318, 1, 0, -1, v368, v323, v324, v325, v326, 3, 4) -> f_217(v315, v316, v317, v318, 1, 0, -1, v368, v370, v324, v325, v326, 3, 4) :|: TRUE
f_217(v315, v316, v317, v318, 1, 0, -1, v368, v370, v324, v325, v326, 3, 4) -> f_219(v315, v316, v317, v318, 1, 0, -1, v368, v370, v324, v325, v326, 3, 4) :|: TRUE
f_219(v315, v316, v317, v318, 1, 0, -1, v368, v370, v324, v325, v326, 3, 4) -> f_221(v315, v316, v317, v318, 1, 0, -1, v368, v370, v324, v325, v326, 3, 4) :|: TRUE
f_221(v315, v316, v317, v318, 1, 0, -1, v368, v370, v324, v325, v326, 3, 4) -> f_136(v315, v316, v317, v318, 1, 0, -1, v368, v370, v324, v325, v326, 3, 4) :|: TRUE
f_136(v1, v3, v5, v7, 1, 0, -1, v18, v20, v2, v4, v6, 3, 4) -> f_138(v1, v3, v5, v7, 1, 0, -1, v18, v20, v2, v4, v6, 3, 4) :|: TRUE
f_179(v1, v3, v5, v18, 1, v20, v152, v7, v2, v4, v6, 0, 3, 4) -> f_182(v1, v3, v5, v18, 1, v20, v152, 0, v7, v2, v4, v6, 3, 4) :|: 0 = 0
f_182(v1, v3, v5, v18, 1, v20, v152, 0, v7, v2, v4, v6, 3, 4) -> f_184(v1, v3, v5, v18, 1, v20, v152, 0, v7, v2, v4, v6, 3, 4) :|: TRUE
f_184(v1, v3, v5, v18, 1, v20, v152, 0, v7, v2, v4, v6, 3, 4) -> f_210(v1, v3, v5, v18, 1, v20, v152, 0, v7, v20, v2, v4, v6, 3, 4) :|: TRUE
f_210(v342, v343, v344, v345, 1, v347, v348, 0, v350, v351, v352, v353, v354, 3, 4) -> f_235(v342, v343, v344, v345, 1, v347, v348, 0, v350, v351, v352, v353, v354, 3, 4) :|: TRUE
f_235(v486, v487, v488, v489, 1, v491, v492, 0, v494, v495, v496, v497, v498, 3, 4) -> f_236(v486, v487, v488, v489, 1, v491, v492, 0, v494, v495, v496, v497, v498, 3, 4) :|: TRUE
f_236(v486, v487, v488, v489, 1, v491, v492, 0, v494, v495, v496, v497, v498, 3, 4) -> f_237(v486, v487, v488, v489, 1, v491, v492, 0, v494, v495, v496, v497, v498, 3, 4) :|: 0 = 0
f_237(v486, v487, v488, v489, 1, v491, v492, 0, v494, v495, v496, v497, v498, 3, 4) -> f_238(v486, v487, v488, v489, 1, v491, v492, 0, v494, v495, v496, v497, v498, 3, 4) :|: 0 = 0
f_238(v486, v487, v488, v489, 1, v491, v492, 0, v494, v495, v496, v497, v498, 3, 4) -> f_239(v486, v487, v488, v489, 1, v491, v492, 0, v494, v495, v496, v497, v498, 3, 4) :|: TRUE
f_239(v486, v487, v488, v489, 1, v491, v492, 0, v494, v495, v496, v497, v498, 3, 4) -> f_240(v486, v487, v488, v489, 1, v492, v491, 0, v494, v495, v496, v497, v498, 3, 4) :|: 0 = 0
f_240(v486, v487, v488, v489, 1, v492, v491, 0, v494, v495, v496, v497, v498, 3, 4) -> f_241(v486, v487, v488, v489, 1, v492, v491, 0, v494, v495, v496, v497, v498, 3, 4) :|: 0 = 0
f_241(v486, v487, v488, v489, 1, v492, v491, 0, v494, v495, v496, v497, v498, 3, 4) -> f_242(v486, v487, v488, v489, 1, v492, v491, 0, v494, v495, v496, v497, v498, 3, 4) :|: 0 = 0
f_242(v486, v487, v488, v489, 1, v492, v491, 0, v494, v495, v496, v497, v498, 3, 4) -> f_243(v486, v487, v488, v489, 1, v492, v491, 0, v494, v495, v496, v497, v498, 3, 4) :|: TRUE
f_243(v486, v487, v488, v489, 1, v492, v491, 0, v494, v495, v496, v497, v498, 3, 4) -> f_244(v486, v487, v488, v489, 1, v492, 0, v494, v495, v496, v497, v498, 3, 4) :|: 0 = 0
f_244(v486, v487, v488, v489, 1, v492, 0, v494, v495, v496, v497, v498, 3, 4) -> f_245(v486, v487, v488, v489, 1, v492, v572, 0, v494, v495, v496, v497, v498, 3, 4) :|: 1 + v572 = v492 && 0 <= 1 + v572
f_245(v486, v487, v488, v489, 1, v492, v572, 0, v494, v495, v496, v497, v498, 3, 4) -> f_246(v486, v487, v488, v489, 1, v492, v572, 0, v494, v495, v496, v497, v498, 3, 4) :|: TRUE
f_246(v486, v487, v488, v489, 1, v492, v572, 0, v494, v495, v496, v497, v498, 3, 4) -> f_247(v486, v487, v488, v489, 1, v492, v572, 0, v494, v495, v496, v497, v498, 3, 4) :|: 0 = 0
f_247(v486, v487, v488, v489, 1, v492, v572, 0, v494, v495, v496, v497, v498, 3, 4) -> f_248(v486, v487, v488, v489, 1, 0, -1, v494, v495, v496, v497, v498, 3, 4) :|: v572 < 0 && v492 = 0 && 1 + v572 = 0 && 0 = 0
f_247(v486, v487, v488, v489, 1, v492, v572, 0, v494, v495, v496, v497, v498, 3, 4) -> f_249(v486, v487, v488, v489, 1, v492, v572, 0, v494, v495, v496, v497, v498, 3, 2, 4) :|: 0 <= v572 && 1 <= v492 && 2 <= v495
f_248(v486, v487, v488, v489, 1, 0, -1, v494, v495, v496, v497, v498, 3, 4) -> f_250(v486, v487, v488, v489, 1, 0, -1, v494, v495, v496, v497, v498, 3, 4) :|: 0 = 0
f_250(v486, v487, v488, v489, 1, 0, -1, v494, v495, v496, v497, v498, 3, 4) -> f_252(v486, v487, v488, v489, 1, 0, -1, v494, v495, v496, v497, v498, 3, 4) :|: TRUE
f_252(v486, v487, v488, v489, 1, 0, -1, v494, v495, v496, v497, v498, 3, 4) -> f_254(v486, v487, v488, v489, 1, 0, -1, v495, v496, v497, v498, 3, 4) :|: 0 = 0
f_254(v486, v487, v488, v489, 1, 0, -1, v495, v496, v497, v498, 3, 4) -> f_255(v486, v487, v488, v489, 1, 0, -1, v617, v495, v496, v497, v498, 3, 4) :|: 1 + v617 = v489 && 0 <= 1 + v617
f_255(v486, v487, v488, v489, 1, 0, -1, v617, v495, v496, v497, v498, 3, 4) -> f_256(v486, v487, v488, v489, 1, 0, -1, v617, v495, v496, v497, v498, 3, 4) :|: TRUE
f_256(v486, v487, v488, v489, 1, 0, -1, v617, v495, v496, v497, v498, 3, 4) -> f_257(v486, v487, v488, v489, 1, 0, -1, v617, v619, v496, v497, v498, 3, 4) :|: TRUE
f_257(v486, v487, v488, v489, 1, 0, -1, v617, v619, v496, v497, v498, 3, 4) -> f_258(v486, v487, v488, v489, 1, 0, -1, v617, v619, v496, v497, v498, 3, 4) :|: TRUE
f_258(v486, v487, v488, v489, 1, 0, -1, v617, v619, v496, v497, v498, 3, 4) -> f_259(v486, v487, v488, v489, 1, 0, -1, v617, v619, v496, v497, v498, 3, 4) :|: TRUE
f_259(v486, v487, v488, v489, 1, 0, -1, v617, v619, v496, v497, v498, 3, 4) -> f_136(v486, v487, v488, v489, 1, 0, -1, v617, v619, v496, v497, v498, 3, 4) :|: TRUE
f_249(v486, v487, v488, v489, 1, v492, v572, 0, v494, v495, v496, v497, v498, 3, 2, 4) -> f_251(v486, v487, v488, v489, 1, v492, v572, 0, v494, v495, v496, v497, v498, 3, 2, 4) :|: 0 = 0
f_251(v486, v487, v488, v489, 1, v492, v572, 0, v494, v495, v496, v497, v498, 3, 2, 4) -> f_253(v486, v487, v488, v489, 1, v492, v572, 0, v494, v495, v496, v497, v498, 3, 2, 4) :|: TRUE
f_253(v486, v487, v488, v489, 1, v492, v572, 0, v494, v495, v496, v497, v498, 3, 2, 4) -> f_235(v486, v487, v488, v489, 1, v492, v572, 0, v494, v495, v496, v497, v498, 3, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_138(v1:0, v3:0, v5:0, v7:0, 1, 0, -1, 1 + v368:0, 0, v2:0, v4:0, v6:0, 3, 4) -> f_138(v1:0, v3:0, v5:0, 1 + v368:0, 1, 0, -1, v368:0, v370:0, v2:0, v4:0, v6:0, 3, 4) :|: v7:0 > 0 && v368:0 > -2
f_247(v486:0, v487:0, v488:0, v489:0, 1, v492:0, 1 + v572:1, 0, v494:0, v495:0, v496:0, v497:0, v498:0, 3, 4) -> f_247(v486:0, v487:0, v488:0, v489:0, 1, 1 + v572:1, v572:1, 0, v494:0, v495:0, v496:0, v497:0, v498:0, 3, 4) :|: v572:1 > -2 && v492:0 > 0 && v495:0 > 1
f_247(v486:0, v487:0, v488:0, 1 + v617:0, 1, 0, -1, 0, v494:0, v495:0, v496:0, v497:0, v498:0, 3, 4) -> f_138(v486:0, v487:0, v488:0, 1 + v617:0, 1, 0, -1, v617:0, v619:0, v496:0, v497:0, v498:0, 3, 4) :|: v617:0 > -2
f_138(v1:0, v3:0, v5:0, v7:0, 1, 0, -1, v18:0, 1 + (1 + v572:0), v2:0, v4:0, v6:0, 3, 4) -> f_247(v1:0, v3:0, v5:0, v18:0, 1, 1 + v572:0, v572:0, 0, v7:0, 1 + (1 + v572:0), v2:0, v4:0, v6:0, 3, 4) :|: v572:0 > -2 && v7:0 > 0 && v18:0 > -1
Filtered unneeded arguments:
   f_138(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_138(x4, x8, x9)
   f_247(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_247(x4, x6, x7, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_138(v7:0, sum~cons_1~v368:0, cons_0) -> f_138(1 + v368:0, v368:0, v370:0) :|: v7:0 > 0 && v368:0 > -2 && sum~cons_1~v368:0 = 1 + v368:0 && cons_0 = 0
f_247(v489:0, v492:0, sum~cons_1~v572:1, v495:0) -> f_247(v489:0, 1 + v572:1, v572:1, v495:0) :|: v492:0 > 0 && v495:0 > 1 && v572:1 > -2 && sum~cons_1~v572:1 = 1 + v572:1
f_247(sum~cons_1~v617:0, cons_0, cons_-1, v495:0) -> f_138(1 + v617:0, v617:0, v619:0) :|: v617:0 > -2 && sum~cons_1~v617:0 = 1 + v617:0 && cons_0 = 0 && cons_-1 = -1
f_138(v7:0, v18:0, sum~cons_1~sum~cons_1~v572:0) -> f_247(v18:0, 1 + v572:0, v572:0, 1 + (1 + v572:0)) :|: v7:0 > 0 && v18:0 > -1 && v572:0 > -2 && sum~cons_1~sum~cons_1~v572:0 = 1 + (1 + v572:0)

----------------------------------------

(9)
Obligation:
Rules:
f_138(v7:0, sum~cons_1~v368:0, cons_0) -> f_138(1 + v368:0, v368:0, v370:0) :|: v7:0 > 0 && v368:0 > -2 && sum~cons_1~v368:0 = 1 + v368:0 && cons_0 = 0
f_247(v489:0, v492:0, sum~cons_1~v572:1, v495:0) -> f_247(v489:0, 1 + v572:1, v572:1, v495:0) :|: v492:0 > 0 && v495:0 > 1 && v572:1 > -2 && sum~cons_1~v572:1 = 1 + v572:1
f_247(x, x1, x2, x3) -> f_138(1 + x4, x4, x5) :|: x4 > -2 && x = 1 + x4 && x1 = 0 && x2 = -1
f_138(x6, x7, x8) -> f_247(x7, 1 + x9, x9, 1 + (1 + x9)) :|: x6 > 0 && x7 > -1 && x9 > -2 && x8 = 1 + (1 + x9)

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_138(x6:0, x7:0, sum~cons_1~sum~cons_1~x9:0) -> f_247(x7:0, 1 + x9:0, x9:0, 1 + (1 + x9:0)) :|: x6:0 > 0 && x7:0 > -1 && x9:0 > -2 && sum~cons_1~sum~cons_1~x9:0 = 1 + (1 + x9:0)
f_247(v489:0:0, v492:0:0, sum~cons_1~v572:1:0, v495:0:0) -> f_247(v489:0:0, 1 + v572:1:0, v572:1:0, v495:0:0) :|: v492:0:0 > 0 && v495:0:0 > 1 && v572:1:0 > -2 && sum~cons_1~v572:1:0 = 1 + v572:1:0
f_247(sum~cons_1~x4:0, cons_0, cons_-1, x3:0) -> f_138(1 + x4:0, x4:0, x5:0) :|: x4:0 > -2 && sum~cons_1~x4:0 = 1 + x4:0 && cons_0 = 0 && cons_-1 = -1
f_138(x, x1, x2) -> f_138(1 + x3, x3, x4) :|: x > 0 && x3 > -2 && x1 = 1 + x3 && x2 = 0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_138(x, x1, x2)] = x1
[f_247(x3, x4, x5, x6)] = -1 + x3

The following rules are decreasing:
f_138(x6:0, x7:0, sum~cons_1~sum~cons_1~x9:0) -> f_247(x7:0, 1 + x9:0, x9:0, 1 + (1 + x9:0)) :|: x6:0 > 0 && x7:0 > -1 && x9:0 > -2 && sum~cons_1~sum~cons_1~x9:0 = 1 + (1 + x9:0)
f_138(x, x1, x2) -> f_138(1 + x3, x3, x4) :|: x > 0 && x3 > -2 && x1 = 1 + x3 && x2 = 0
The following rules are bounded:
f_138(x6:0, x7:0, sum~cons_1~sum~cons_1~x9:0) -> f_247(x7:0, 1 + x9:0, x9:0, 1 + (1 + x9:0)) :|: x6:0 > 0 && x7:0 > -1 && x9:0 > -2 && sum~cons_1~sum~cons_1~x9:0 = 1 + (1 + x9:0)
f_138(x, x1, x2) -> f_138(1 + x3, x3, x4) :|: x > 0 && x3 > -2 && x1 = 1 + x3 && x2 = 0

----------------------------------------

(13)
Obligation:
Rules:
f_247(v489:0:0, v492:0:0, sum~cons_1~v572:1:0, v495:0:0) -> f_247(v489:0:0, 1 + v572:1:0, v572:1:0, v495:0:0) :|: v492:0:0 > 0 && v495:0:0 > 1 && v572:1:0 > -2 && sum~cons_1~v572:1:0 = 1 + v572:1:0
f_247(sum~cons_1~x4:0, cons_0, cons_-1, x3:0) -> f_138(1 + x4:0, x4:0, x5:0) :|: x4:0 > -2 && sum~cons_1~x4:0 = 1 + x4:0 && cons_0 = 0 && cons_-1 = -1

----------------------------------------

(14) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(15)
Obligation:
Rules:
f_247(v489:0:0, v492:0:0, sum~cons_1~v572:1:0, v495:0:0) -> f_247(v489:0:0, 1 + v572:1:0, v572:1:0, v495:0:0) :|: v492:0:0 > 0 && v495:0:0 > 1 && v572:1:0 > -2 && sum~cons_1~v572:1:0 = 1 + v572:1:0

----------------------------------------

(16) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(17)
Obligation:
Rules:
f_247(v489:0:0:0, v492:0:0:0, sum~cons_1~v572:1:0:0, v495:0:0:0) -> f_247(v489:0:0:0, 1 + v572:1:0:0, v572:1:0:0, v495:0:0:0) :|: v492:0:0:0 > 0 && v495:0:0:0 > 1 && v572:1:0:0 > -2 && sum~cons_1~v572:1:0:0 = 1 + v572:1:0:0

----------------------------------------

(18) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_247(x1, x2, x3, x4) -> f_247(x2, x3, x4)

----------------------------------------

(19)
Obligation:
Rules:
f_247(v492:0:0:0, sum~cons_1~v572:1:0:0, v495:0:0:0) -> f_247(1 + v572:1:0:0, v572:1:0:0, v495:0:0:0) :|: v492:0:0:0 > 0 && v495:0:0:0 > 1 && v572:1:0:0 > -2 && sum~cons_1~v572:1:0:0 = 1 + v572:1:0:0

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_247(x, x1, x2)] = x1

The following rules are decreasing:
f_247(v492:0:0:0, sum~cons_1~v572:1:0:0, v495:0:0:0) -> f_247(1 + v572:1:0:0, v572:1:0:0, v495:0:0:0) :|: v492:0:0:0 > 0 && v495:0:0:0 > 1 && v572:1:0:0 > -2 && sum~cons_1~v572:1:0:0 = 1 + v572:1:0:0
The following rules are bounded:
f_247(v492:0:0:0, sum~cons_1~v572:1:0:0, v495:0:0:0) -> f_247(1 + v572:1:0:0, v572:1:0:0, v495:0:0:0) :|: v492:0:0:0 > 0 && v495:0:0:0 > 1 && v572:1:0:0 > -2 && sum~cons_1~v572:1:0:0 = 1 + v572:1:0:0

----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
SCC
----------------------------------------

(23) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_129(v1, v3, v5, v7, 1, v9, v16, 0, v2, v4, v6, 3, 4) -> f_131(v1, v3, v5, v7, 1, v9, v16, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_131(v1, v3, v5, v7, 1, v9, v16, 0, v2, v4, v6, 3, 4) -> f_133(v1, v3, v5, v7, 1, v9, v16, 0, v2, v4, v6, 3, 4) :|: TRUE
f_133(v1, v3, v5, v7, 1, v9, v16, 0, v2, v4, v6, 3, 4) -> f_135(v1, v3, v5, v7, 1, v16, v9, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_135(v1, v3, v5, v7, 1, v16, v9, 0, v2, v4, v6, 3, 4) -> f_137(v1, v3, v5, v7, 1, v16, v9, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_137(v1, v3, v5, v7, 1, v16, v9, 0, v2, v4, v6, 3, 4) -> f_139(v1, v3, v5, v7, 1, v16, v9, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_139(v1, v3, v5, v7, 1, v16, v9, 0, v2, v4, v6, 3, 4) -> f_141(v1, v3, v5, v7, 1, v16, v9, 0, v2, v4, v6, 3, 4) :|: TRUE
f_141(v1, v3, v5, v7, 1, v16, v9, 0, v2, v4, v6, 3, 4) -> f_144(v1, v3, v5, v7, 1, v16, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_144(v1, v3, v5, v7, 1, v16, 0, v2, v4, v6, 3, 4) -> f_147(v1, v3, v5, v7, 1, v16, v39, 0, v2, v4, v6, 3, 4) :|: 1 + v39 = v16 && 0 <= 1 + v39
f_147(v1, v3, v5, v7, 1, v16, v39, 0, v2, v4, v6, 3, 4) -> f_150(v1, v3, v5, v7, 1, v16, v39, 0, v2, v4, v6, 3, 4) :|: TRUE
f_150(v1, v3, v5, v7, 1, v16, v39, 0, v2, v4, v6, 3, 4) -> f_153(v1, v3, v5, v7, 1, v16, v39, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_153(v1, v3, v5, v7, 1, v16, v39, 0, v2, v4, v6, 3, 4) -> f_157(v1, v3, v5, v7, 1, v16, v39, 0, v2, v4, v6, 3, 4) :|: 0 <= v39 && 1 <= v16
f_157(v1, v3, v5, v7, 1, v16, v39, 0, v2, v4, v6, 3, 4) -> f_161(v1, v3, v5, v7, 1, v16, v39, 0, v2, v4, v6, 3, 4) :|: 0 = 0
f_161(v1, v3, v5, v7, 1, v16, v39, 0, v2, v4, v6, 3, 4) -> f_165(v1, v3, v5, v7, 1, v16, v39, 0, v2, v4, v6, 3, 4) :|: TRUE
f_165(v1, v3, v5, v7, 1, v16, v39, 0, v2, v4, v6, 3, 4) -> f_169(v1, v3, v5, v7, 1, v16, v39, 0, v2, v4, v6, 3, 4) :|: TRUE
f_169(v1, v3, v5, v7, 1, v16, v39, 0, v2, v4, v6, 3, 4) -> f_127(v1, v3, v5, v7, 1, v16, v39, 0, v2, v4, v6, 3, 4) :|: TRUE
f_127(v1, v3, v5, v7, 1, v9, v16, 0, v2, v4, v6, 3, 4) -> f_129(v1, v3, v5, v7, 1, v9, v16, 0, v2, v4, v6, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_129(v1:0, v3:0, v5:0, v7:0, 1, v9:0, 1 + v39:0, 0, v2:0, v4:0, v6:0, 3, 4) -> f_129(v1:0, v3:0, v5:0, v7:0, 1, 1 + v39:0, v39:0, 0, v2:0, v4:0, v6:0, 3, 4) :|: v39:0 > -1
Filtered unneeded arguments:
   f_129(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) -> f_129(x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_129(sum~cons_1~v39:0) -> f_129(v39:0) :|: v39:0 > -1 && sum~cons_1~v39:0 = 1 + v39:0

----------------------------------------

(24)
Obligation:
Rules:
f_129(sum~cons_1~v39:0) -> f_129(v39:0) :|: v39:0 > -1 && sum~cons_1~v39:0 = 1 + v39:0

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f_129(sum~cons_1~v39:0:0) -> f_129(v39:0:0) :|: v39:0:0 > -1 && sum~cons_1~v39:0:0 = 1 + v39:0:0

----------------------------------------

(27) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_129(x)] = x

The following rules are decreasing:
f_129(sum~cons_1~v39:0:0) -> f_129(v39:0:0) :|: v39:0:0 > -1 && sum~cons_1~v39:0:0 = 1 + v39:0:0
The following rules are bounded:
f_129(sum~cons_1~v39:0:0) -> f_129(v39:0:0) :|: v39:0:0 > -1 && sum~cons_1~v39:0:0 = 1 + v39:0:0

----------------------------------------

(28)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
