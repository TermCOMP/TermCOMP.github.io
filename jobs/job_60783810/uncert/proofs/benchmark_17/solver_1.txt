YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/TEW0p.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 43 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 543 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [SOUND, 142 ms]
(6) IntTRS
(7) IRSToKoat [EQUIVALENT, 0 ms]
(8) Koat Problem
(9) KoAT2 [EQUIVALENT, 32 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/TEW0p.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/TEW0p.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %7
		%12 = load %4
		%13 = load %6
		store %12, %13
		%14 = load %5
		%15 = load %7
		store %14, %15
		%16 = load %6
		%17 = load %16
		%18 = icmp sle %17 0
		br %18, %19, %22
	19:
		%20 = load %7
		%21 = load %20
		store %21, %3
		br %46
	22:
		br %23
	23:
		%24 = load %6
		%25 = load %24
		%26 = load %7
		%27 = load %26
		%28 = icmp sgt %25 %27
		br %28, %29, %43
	29:
		%30 = load %6
		%31 = load %30
		%32 = icmp sle %31 0
		br %32, %33, %36
	33:
		%34 = load %7
		%35 = load %34
		store %35, %3
		br %46
	36:
		%37 = load %7
		%38 = load %37
		%39 = load %6
		%40 = load %39
		%41 = add i32 %38, %40
		%42 = load %7
		store %41, %42
		br %23
	43:
		%44 = load %7
		%45 = load %44
		store %45, %3
		br %46
	46:
		%47 = load %3
		ret %47

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 67
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 102 rulesP rules:
f_203 -> f_204(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_204(v1, v2, 3, 1, 4) -> f_205(v1, v2, 0, 3, 1, 4) :|: TRUE
f_205(v1, v2, 0, 3, 1, 4) -> f_206(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_206(v1, v3, v2, 0, 3, 1, 4) -> f_207(v1, v3, v4, v2, 0, 3, 1, 4) :|: TRUE
f_207(v1, v3, v4, v2, 0, 3, 1, 4) -> f_208(v3, v4, v1, v2, 0, 3, 1, 4) :|: 0 = 0
f_208(v3, v4, v1, v2, 0, 3, 1, 4) -> f_209(v3, v4, v5, v1, v2, v6, 0, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_209(v3, v4, v5, v1, v2, v6, 0, 3, 1, 4) -> f_210(v3, v4, v5, v7, v1, v2, v6, v8, 0, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_210(v3, v4, v5, v7, v1, v2, v6, v8, 0, 3, 1, 4) -> f_211(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: 1 <= v9 && v10 = 3 + v9 && 4 <= v10
f_211(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_212(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 7, 1, 4, 8) :|: 1 <= v11 && v12 = 7 + v11 && 8 <= v12
f_212(v3, v4, v5, v7, v9, v11, v1, v2, v6, v8, v10, v12, 0, 3, 7, 1, 4, 8) -> f_213(v3, v4, v5, v7, v9, v11, v13, v1, v2, v6, v8, v10, v12, v14, 0, 3, 7, 1, 4, 8) :|: 1 <= v13 && v14 = 7 + v13 && 8 <= v14
f_213(v3, v4, v5, v7, v9, v11, v13, v1, v2, v6, v8, v10, v12, v14, 0, 3, 7, 1, 4, 8) -> f_214(v3, v4, v5, v7, v9, v11, v13, v1, v2, v6, v8, v10, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_214(v3, v4, v5, v7, v9, v11, v13, v1, v2, v6, v8, v10, v12, v14, 0, 3, 7, 1, 4, 8) -> f_215(v3, v4, v5, v7, v9, v11, v13, v1, v2, v6, v8, v10, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_215(v3, v4, v5, v7, v9, v11, v13, v1, v2, v6, v8, v10, v12, v14, 0, 3, 7, 1, 4, 8) -> f_216(v3, v4, v5, v7, v9, v11, v13, v1, v2, v6, v8, v10, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_216(v3, v4, v5, v7, v9, v11, v13, v1, v2, v6, v8, v10, v12, v14, 0, 3, 7, 1, 4, 8) -> f_217(v3, v4, v5, v7, v9, v11, v13, v1, v2, v6, v8, v10, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_217(v3, v4, v5, v7, v9, v11, v13, v1, v2, v6, v8, v10, v12, v14, 0, 3, 7, 1, 4, 8) -> f_218(v3, v4, v5, v7, v9, v11, v13, v1, v2, v6, v8, v10, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_218(v3, v4, v5, v7, v9, v11, v13, v1, v2, v6, v8, v10, v12, v14, 0, 3, 7, 1, 4, 8) -> f_219(v3, v4, v5, v7, v9, v11, v13, v17, v1, v2, v6, v8, v10, v12, v14, v18, 0, 3, 7, 1, 4, 8) :|: 1 <= v17 && v18 = 3 + v17 && 4 <= v18
f_219(v3, v4, v5, v7, v9, v11, v13, v17, v1, v2, v6, v8, v10, v12, v14, v18, 0, 3, 7, 1, 4, 8) -> f_220(v3, v4, v5, v7, v9, v11, v13, v17, v1, v2, v6, v8, v10, v12, v14, v18, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_220(v3, v4, v5, v7, v9, v11, v13, v17, v1, v2, v6, v8, v10, v12, v14, v18, 0, 3, 7, 1, 4, 8) -> f_221(v3, v4, v5, v7, v9, v11, v13, v17, v1, v2, v6, v8, v10, v12, v14, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_221(v3, v4, v5, v7, v9, v11, v13, v17, v1, v2, v6, v8, v10, v12, v14, v18, 0, 3, 7, 1, 4, 8) -> f_222(v3, v4, v5, v7, v9, v11, v13, v17, v1, v2, v6, v8, v10, v12, v14, v18, 0, 3, 7, 1, 4, 8) :|: TRUE
f_222(v3, v4, v5, v7, v9, v11, v13, v17, v1, v2, v6, v8, v10, v12, v14, v18, 0, 3, 7, 1, 4, 8) -> f_223(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) :|: 1 <= v20 && v21 = 3 + v20 && 4 <= v21
f_223(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) -> f_224(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_224(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) -> f_225(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) :|: TRUE
f_225(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) -> f_226(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_226(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) -> f_227(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_227(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) -> f_228(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) :|: TRUE
f_228(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) -> f_229(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_229(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) -> f_230(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_230(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) -> f_231(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) :|: TRUE
f_231(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) -> f_232(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_232(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) -> f_233(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_233(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) -> f_234(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) :|: v3 <= 0
f_233(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) -> f_235(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) :|: 0 < v3
f_234(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) -> f_236(v3, v4, v5, v7, v9, v11, v13, v17, v20, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 4, 8) :|: 0 = 0
f_235(v3, v4, v5, v7, v9, v11, v13, v17, v20, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 1, 4, 8) -> f_237(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: 0 = 0
f_236(v3, v4, v5, v7, v9, v11, v13, v17, v20, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 4, 8) -> f_238(v3, v4, v5, v7, v9, v11, v13, v17, v20, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 4, 8) :|: TRUE
f_237(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_239(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: TRUE
f_238(v3, v4, v5, v7, v9, v11, v13, v17, v20, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 4, 8) -> f_240(v3, v4, v5, v7, v9, v11, v13, v17, v20, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 4, 8) :|: 0 = 0
f_239(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_241(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: TRUE
f_240(v3, v4, v5, v7, v9, v11, v13, v17, v20, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 4, 8) -> f_242(v3, v4, v5, v7, v9, v11, v13, v17, v20, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 4, 8) :|: 0 = 0
f_241(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_243(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: 0 = 0
f_242(v3, v4, v5, v7, v9, v11, v13, v17, v20, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 4, 8) -> f_244(v3, v4, v5, v7, v9, v11, v13, v17, v20, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 4, 8) :|: TRUE
f_243(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_245(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: 0 = 0
f_244(v3, v4, v5, v7, v9, v11, v13, v17, v20, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 4, 8) -> f_246(v3, v4, v5, v7, v9, v11, v13, v17, v20, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 4, 8) :|: TRUE
f_245(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_247(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: 0 = 0
f_246(v3, v4, v5, v7, v9, v11, v13, v17, v20, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 4, 8) -> f_248(v3, v4, v5, v7, v9, v11, v13, v17, v20, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 4, 8) :|: 0 = 0
f_247(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_249(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: 0 = 0
f_248(v3, v4, v5, v7, v9, v11, v13, v17, v20, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 0, 3, 7, 4, 8) -> f_250(v1, v3, v4, v2, 0, 3, 1, 4) :|: 0 = 0
f_249(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_251(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: v4 < v3
f_249(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_252(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: v3 <= v4 && 1 <= v4
f_251(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_253(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) :|: 0 = 0
f_252(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_254(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: 0 = 0
f_253(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) -> f_255(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) :|: TRUE
f_254(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_256(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: TRUE
f_255(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) -> f_257(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) :|: 0 = 0
f_256(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_258(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: 0 = 0
f_257(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) -> f_259(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) :|: 0 = 0
f_258(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_260(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: 0 = 0
f_259(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) -> f_261(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) :|: 0 = 0
f_260(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_262(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: TRUE
f_261(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) -> f_263(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) :|: TRUE
f_262(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_264(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: TRUE
f_263(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) -> f_265(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) :|: 0 = 0
f_264(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_266(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) :|: 0 = 0
f_265(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) -> f_267(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) :|: 0 = 0
f_266(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 1, 4, 8) -> f_268(v1, v3, v4, v2, 0, 3, 1, 4) :|: 0 = 0
f_267(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) -> f_269(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) :|: 0 = 0
f_269(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) -> f_270(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) :|: 0 = 0
f_270(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) -> f_271(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v27, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) :|: v27 = v4 + v3
f_271(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v27, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) -> f_272(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v27, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) :|: 0 = 0
f_272(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v27, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) -> f_273(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v27, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) :|: TRUE
f_273(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v27, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) -> f_274(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v27, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) :|: TRUE
f_274(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, 1, v27, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) -> f_303(v3, v4, v5, v7, v9, v11, v13, v17, v20, 0, v4, 1, v27, v1, v2, v6, v8, v10, v12, v14, v18, v21, 3, 7, 4, 8) :|: TRUE
f_303(v33, v34, v35, v36, v37, v38, v39, v40, v41, 0, v43, 1, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, 3, 7, 4, 8) -> f_332(v33, v34, v35, v36, v37, v38, v39, v40, v41, 0, v43, 1, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, 3, 7, 4, 8) :|: TRUE
f_332(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v69, 1, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_333(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v69, 1, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_333(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v69, 1, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_334(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v69, 1, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_334(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v69, 1, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_335(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v69, 1, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_335(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v69, 1, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_336(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_336(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_337(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: v71 < v59 && 1 + v69 <= 0
f_336(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_338(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: v59 <= v71 && 0 <= v69 && 1 <= v71
f_337(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_339(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_338(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_340(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 1, 4, 8) :|: 0 = 0
f_339(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_341(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: TRUE
f_340(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 1, 4, 8) -> f_342(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 1, 4, 8) :|: TRUE
f_341(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_343(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_342(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 1, 4, 8) -> f_344(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 1, 4, 8) :|: 0 = 0
f_343(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_345(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_344(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 1, 4, 8) -> f_346(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 1, 4, 8) :|: 0 = 0
f_345(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_347(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_346(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 1, 4, 8) -> f_348(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 1, 4, 8) :|: TRUE
f_347(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_349(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: TRUE
f_348(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 1, 4, 8) -> f_350(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 1, 4, 8) :|: TRUE
f_349(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_351(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_350(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 1, 4, 8) -> f_352(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 1, 4, 8) :|: 0 = 0
f_351(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_353(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_352(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, v69, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 1, 4, 8) -> f_354(v72, v59, v60, v71, v73, 0, 3, 1, 4) :|: 0 = 0
f_353(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_355(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_355(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_356(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_356(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_357(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: v83 = v71 + v59
f_357(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_358(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: 0 = 0
f_358(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_359(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: TRUE
f_359(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_360(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: TRUE
f_360(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) -> f_332(v59, v60, v61, v62, v63, v64, v65, v66, v67, 0, v71, 1, v83, v72, v73, v74, v75, v76, v77, v78, v79, v80, 3, 7, 4, 8) :|: TRUE
Combined rules. Obtained 5 rulesP rules:
f_203 -> f_268(v1:0, v3:0, v4:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0 && v13:0 > 0 && v17:0 > 0 && v20:0 > 0 && v3:0 > 0 && v4:0 >= v3:0 && v4:0 > 0
f_336(v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, 0, v71:0, 1, v69:0, v72:0, v73:0, v74:0, v75:0, v76:0, v77:0, v78:0, v79:0, v80:0, 3, 7, 4, 8) -> f_336(v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, 0, v71:0 + v59:0, 1, v71:0, v72:0, v73:0, v74:0, v75:0, v76:0, v77:0, v78:0, v79:0, v80:0, 3, 7, 4, 8) :|: v71:0 < v59:0 && v69:0 < 0
f_203 -> f_336(v3:0, v4:0, v5:0, v7:0, v9:0, v11:0, v13:0, v17:0, v20:0, 0, v4:0 + v3:0, 1, v4:0, v1:0, 3 + v1:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 7 + v11:0, 7 + v13:0, 3 + v17:0, 3 + v20:0, 3, 7, 4, 8) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0 && v13:0 > 0 && v17:0 > 0 && v20:0 > 0 && v4:0 < v3:0 && v3:0 > 0
f_336(v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, 0, v71:0, 1, v69:0, v72:0, v73:0, v74:0, v75:0, v76:0, v77:0, v78:0, v79:0, v80:0, 3, 7, 4, 8) -> f_354(v72:0, v59:0, v60:0, v71:0, v73:0, 0, 3, 1, 4) :|: v69:0 > -1 && v71:0 > 0 && v71:0 >= v59:0
f_203 -> f_250(v1:0, v3:0, v4:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0 && v13:0 > 0 && v17:0 > 0 && v20:0 > 0 && v3:0 < 1
Filtered unneeded arguments:
   f_336(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26) -> f_336(x1, x11, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_203 -> f_268(v1:0, v3:0, v4:0, 3 + v1:0, 0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v4:0 > 0 && v4:0 >= v3:0
f_336(v59:0, v71:0, v69:0) -> f_336(v59:0, v71:0 + v59:0, v71:0) :|: v71:0 < v59:0 && v69:0 < 0
f_203 -> f_336(v3:0, v4:0 + v3:0, v4:0) :|: v4:0 < v3:0 && v3:0 > 0
f_336(v59:0, v71:0, v69:0) -> f_354(v72:0, v59:0, v60:0, v71:0, v73:0, 0, 3, 1, 4) :|: v71:0 > 0 && v71:0 >= v59:0 && v69:0 > -1
f_203 -> f_250(v1:0, v3:0, v4:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v3:0 < 1

----------------------------------------

(6)
Obligation:
Rules:
f_203 -> f_268(v1:0, v3:0, v4:0, 3 + v1:0, 0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v4:0 > 0 && v4:0 >= v3:0
f_336(v59:0, v71:0, v69:0) -> f_336(v59:0, v71:0 + v59:0, v71:0) :|: v71:0 < v59:0 && v69:0 < 0
f_203 -> f_336(x, x1 + x, x1) :|: x1 < x && x > 0
f_336(x2, x3, x4) -> f_354(x5, x2, x6, x3, x7, 0, 3, 1, 4) :|: x3 > 0 && x3 >= x2 && x4 > -1
f_203 -> f_250(x8, x9, x10, 3 + x8, 0, 3, 1, 4) :|: x8 > 0 && x9 < 1
Start term: f_203

----------------------------------------

(7) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(8)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_203))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x x40 x41 x39 x35 x36 x37 x38 x31 x32 x'' x33 x34 x30 k14 k15 k16 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x7 x27 x20 x21 x22 x23 x1 k7 k8 k5 k6 k9 x' k0 k3 k4 k1 k2 x17 x18 x19 x13 x14 x15 x16 x10 x11 x12 x50)
(RULES
  f_336(k1, k0, k3, x39, x40, x41, x42, x43, x44) -> f_336(k1, k0 + k1, k0, x45, x46, x47, x48, x49, x50) :|: k0 < k1 && k3 < 0
  f_203(x, x', x'', x1, x2, x3, x4, x5, x6) -> f_250(k10, k11, k14, 3 + k10, 0, 3, 1, 4, x7) :|: k10 > 0 && k11 < 1
  f_203(x29, x30, x31, x32, x33, x34, x35, x36, x37) -> f_268(k2, k5, k7, 3 + k2, 0, 3, 1, 4, x38) :|: k5 > 0 && k2 > 0 && k7 > 0 && k7 >= k5
  f_203(x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_336(k15, k16 + k15, k16, x17, x18, x19, x20, x21, x22) :|: k16 < k15 && k15 > 0
  f_336(k8, k9, k4, x23, x24, x25, x26, x27, x28) -> f_354(k6, k8, k12, k9, k13, 0, 3, 1, 4) :|: k9 > 0 && k9 >= k8 && k4 > -1
)

----------------------------------------

(9) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_10163474597778755126.koat 

KoAT2's output was:

YES

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
