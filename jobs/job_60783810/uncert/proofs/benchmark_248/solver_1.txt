YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/yeGYt.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 34 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2304 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 44 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 51 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/yeGYt.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/yeGYt.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 17
	0:
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%5 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store null, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%6 = load %3
		store %6, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %7
	7:
		%8 = load %5
		%9 = load %2
		%10 = icmp slt %8 %9
		br %10, %11, %24
	11:
		%12 = call noalias *i8 @malloc(i64 16)
		%13 = bitcast *i8 %12 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %13, %3
		%14 = call i32 (...)* @__VERIFIER_nondet_int()
		%15 = load %3
		%16 = getelementptr %15, 0, 0
		store %14, %16
		%17 = load %4
		%18 = load %3
		%19 = getelementptr %18, 0, 1
		store %17, %19
		%20 = load %3
		store %20, %4
		br %21
	21:
		%22 = load %5
		%23 = add i32 %22, 1
		store %23, %5
		br %7
	24:
		%25 = load %3
		ret %25

*BasicFunctionTypename: "traverse" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 56
	0:
		%2 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%3 = alloca i64, align 8
		%4 = alloca *i8, align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %3)
		%5 = load %2
		%6 = getelementptr %5, 0, 1
		%7 = bitcast **BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %6 to *i8
		%8 = load %2
		%9 = getelementptr %8, 0, 0
		%10 = bitcast *i32 %9 to *i8
		%11 = ptrtoint *i8 %7 to i64
		%12 = ptrtoint *i8 %10 to i64
		%13 = sub i64 %11, %12
		store %13, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%14 = load %2
		%15 = bitcast *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %14 to *i8
		store %15, %4
		br %16
	16:
		%17 = load %4
		%18 = icmp ne %17 null
		br %18, %19, %26
	19:
		%20 = load %4
		%21 = load %3
		%22 = getelementptr %20, %21
		%23 = bitcast *i8 %22 to **BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		%24 = load %23
		%25 = bitcast *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %24 to *i8
		store %25, %4
		br %16
	26:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 89
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %7, %8
	7:
		store 0, %1
		br %12
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		%9 = load %2
		%10 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %9)
		store %10, %3
		%11 = load %3
		Unnamed Call-Instruction = call BasicVoidType @traverse(*BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %11)
		store 0, %1
		br %12
	12:
		%13 = load %1
		ret %13


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_771(v471, v472, v473, v474, v475, 8, v480, 1, v477, v479, v481, v486, v482, v487, v483, v488, v489, v490, v491, v493, v494, v495, v497, v498, 0, v484, 3, 7, 4, 9, 2, v492, v496) -> f_772(v471, v472, v473, v474, v475, 8, v480, 1, v477, v479, v481, v486, v482, v487, v483, v488, v489, v490, v491, v493, v494, v495, v497, v498, 0, v484, 3, 7, 4, 9, 2, v492, v496) :|: 0 < v480 && 2 <= v496
f_772(v471, v472, v473, v474, v475, 8, v480, 1, v477, v479, v481, v486, v482, v487, v483, v488, v489, v490, v491, v493, v494, v495, v497, v498, 0, v484, 3, 7, 4, 9, 2, v492, v496) -> f_774(v471, v472, v473, v474, v475, 8, v480, 1, v477, v479, v481, v486, v482, v487, v483, v488, v489, v490, v491, v493, v494, v495, v497, v498, 0, v484, 3, 7, 4, 9, 2, v492, v496) :|: 0 = 0
f_774(v471, v472, v473, v474, v475, 8, v480, 1, v477, v479, v481, v486, v482, v487, v483, v488, v489, v490, v491, v493, v494, v495, v497, v498, 0, v484, 3, 7, 4, 9, 2, v492, v496) -> f_776(v471, v472, v473, v474, v475, 8, v480, 1, v477, v479, v481, v486, v482, v487, v483, v488, v489, v490, v491, v493, v494, v495, v497, v498, 0, v484, 3, 7, 4, 9, 2, v492, v496) :|: TRUE
f_776(v471, v472, v473, v474, v475, 8, v480, 1, v477, v479, v481, v486, v482, v487, v483, v488, v489, v490, v491, v493, v494, v495, v497, v498, 0, v484, 3, 7, 4, 9, 2, v492, v496) -> f_778(v471, v472, v473, v474, v475, 8, v480, 1, v479, v481, v486, v482, v487, v483, v488, v489, v490, v491, v493, v494, v495, v477, v497, v498, 0, v484, 3, 7, 4, 9, 2, v492, v496) :|: 0 = 0
f_778(v471, v472, v473, v474, v475, 8, v480, 1, v479, v481, v486, v482, v487, v483, v488, v489, v490, v491, v493, v494, v495, v477, v497, v498, 0, v484, 3, 7, 4, 9, 2, v492, v496) -> f_780(v471, v472, v473, v474, v475, 8, v480, 1, v479, v481, v486, v482, v487, v483, v488, v489, v490, v491, v493, v494, v495, v477, v497, v498, 0, v484, 3, 7, 4, 9, 2, v492, v496) :|: 0 = 0
f_780(v471, v472, v473, v474, v475, 8, v480, 1, v479, v481, v486, v482, v487, v483, v488, v489, v490, v491, v493, v494, v495, v477, v497, v498, 0, v484, 3, 7, 4, 9, 2, v492, v496) -> f_782(v471, v472, v473, v474, v475, 8, v480, 1, v510, v479, v481, v486, v482, v487, v483, v488, v489, v490, v491, 0, v484, v513, v498, v511, v493, v497, v495, 3, 7, 4, 9, 2, v512, v514) :|: v510 = 8 + v480 && 1 + v512 = v496 && v514 = 1 + v492 && 9 <= v510 && 1 <= v512 && 0 <= v514
f_782(v471, v472, v473, v474, v475, 8, v480, 1, v510, v479, v481, v486, v482, v487, v483, v488, v489, v490, v491, 0, v484, v513, v498, v511, v493, v497, v495, 3, 7, 4, 9, 2, v512, v514) -> f_784(v471, v472, v473, v474, v475, 8, v480, 1, v510, v481, v486, v482, v487, v483, v488, v489, v490, v491, 0, v484, v513, v498, v511, v493, v497, v495, 3, 7, 4, 9, 2, v512, v514) :|: 0 = 0
f_784(v471, v472, v473, v474, v475, 8, v480, 1, v510, v481, v486, v482, v487, v483, v488, v489, v490, v491, 0, v484, v513, v498, v511, v493, v497, v495, 3, 7, 4, 9, 2, v512, v514) -> f_786(v471, v472, v473, v474, v475, 8, v480, 1, v510, v511, v481, v486, v482, v487, v483, v488, v489, v490, v491, 0, v484, v513, v498, v493, v497, v495, 3, 7, 4, 9, 2, v512, v514) :|: 0 = 0
f_786(v471, v472, v473, v474, v475, 8, v480, 1, v510, v511, v481, v486, v482, v487, v483, v488, v489, v490, v491, 0, v484, v513, v498, v493, v497, v495, 3, 7, 4, 9, 2, v512, v514) -> f_787(v471, v472, v473, v474, v475, 8, v480, 1, v510, v511, v481, v486, v482, v487, v483, v488, v489, v490, v491, 0, v484, v513, v498, v493, v497, v495, 3, 7, 4, 9, 2, v512, v514) :|: 0 = 0
f_787(v471, v472, v473, v474, v475, 8, v480, 1, v510, v511, v481, v486, v482, v487, v483, v488, v489, v490, v491, 0, v484, v513, v498, v493, v497, v495, 3, 7, 4, 9, 2, v512, v514) -> f_788(v471, v472, v473, v474, v475, 8, v480, 1, v510, v511, v481, v486, v482, v487, v483, v488, v489, v490, v491, 0, v484, v513, v498, v493, v497, v495, 3, 7, 4, 9, 2, v512, v514) :|: TRUE
f_788(v471, v472, v473, v474, v475, 8, v480, 1, v510, v511, v481, v486, v482, v487, v483, v488, v489, v490, v491, 0, v484, v513, v498, v493, v497, v495, 3, 7, 4, 9, 2, v512, v514) -> f_789(v471, v472, v473, v474, v475, 8, v480, 1, v510, v511, v481, v486, v482, v487, v483, v488, v489, v490, v491, 0, v484, v513, v498, v493, v497, v495, 3, 7, 4, 9, 2, v512, v514) :|: TRUE
f_789(v471, v472, v473, v474, v475, 8, v480, 1, v510, v511, v481, v486, v482, v487, v483, v488, v489, v490, v491, 0, v484, v513, v498, v493, v497, v495, 3, 7, 4, 9, 2, v512, v514) -> f_770(v471, v472, v473, v474, v475, 8, v480, 1, v510, v511, v481, v486, v482, v487, v483, v488, v489, v490, v491, v493, v497, v495, v513, v498, 0, v484, 3, 7, 4, 9, 2, v514, v512) :|: TRUE
f_770(v471, v472, v473, v474, v475, 8, v477, 1, v479, v480, v481, v486, v482, v487, v483, v488, v489, v490, v491, v493, v494, v495, v497, v498, 0, v484, 3, 7, 4, 9, 2, v492, v496) -> f_771(v471, v472, v473, v474, v475, 8, v480, 1, v477, v479, v481, v486, v482, v487, v483, v488, v489, v490, v491, v493, v494, v495, v497, v498, 0, v484, 3, 7, 4, 9, 2, v492, v496) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_771(v471:0, v472:0, v473:0, v474:0, v475:0, 8, v480:0, 1, v477:0, v479:0, v481:0, v486:0, v482:0, v487:0, v483:0, v488:0, v489:0, v490:0, v491:0, v493:0, v494:0, v495:0, v497:0, v498:0, 0, v484:0, 3, 7, 4, 9, 2, v492:0, 1 + v512:0) -> f_771(v471:0, v472:0, v473:0, v474:0, v475:0, 8, v511:0, 1, v480:0, 8 + v480:0, v481:0, v486:0, v482:0, v487:0, v483:0, v488:0, v489:0, v490:0, v491:0, v493:0, v497:0, v495:0, v513:0, v498:0, 0, v484:0, 3, 7, 4, 9, 2, 1 + v492:0, v512:0) :|: v512:0 > 0 && v480:0 > 0 && v492:0 > -2
Filtered unneeded arguments:
   f_771(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) -> f_771(x7, x32, x33)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_771(v480:0, v492:0, sum~cons_1~v512:0) -> f_771(v511:0, 1 + v492:0, v512:0) :|: v480:0 > 0 && v492:0 > -2 && v512:0 > 0 && sum~cons_1~v512:0 = 1 + v512:0

----------------------------------------

(9)
Obligation:
Rules:
f_771(v480:0, v492:0, sum~cons_1~v512:0) -> f_771(v511:0, 1 + v492:0, v512:0) :|: v480:0 > 0 && v492:0 > -2 && v512:0 > 0 && sum~cons_1~v512:0 = 1 + v512:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_771(v480:0:0, v492:0:0, sum~cons_1~v512:0:0) -> f_771(v511:0:0, 1 + v492:0:0, v512:0:0) :|: v480:0:0 > 0 && v492:0:0 > -2 && v512:0:0 > 0 && sum~cons_1~v512:0:0 = 1 + v512:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_771 ] = f_771_3

The following rules are decreasing:
f_771(v480:0:0, v492:0:0, sum~cons_1~v512:0:0) -> f_771(v511:0:0, 1 + v492:0:0, v512:0:0) :|: v480:0:0 > 0 && v492:0:0 > -2 && v512:0:0 > 0 && sum~cons_1~v512:0:0 = 1 + v512:0:0

The following rules are bounded:
f_771(v480:0:0, v492:0:0, sum~cons_1~v512:0:0) -> f_771(v511:0:0, 1 + v492:0:0, v512:0:0) :|: v480:0:0 > 0 && v492:0:0 > -2 && v512:0:0 > 0 && sum~cons_1~v512:0:0 = 1 + v512:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_637(v257, v258, v259, v260, v261, 0, v269, 1, v265, v266, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 9) -> f_638(v257, v258, v259, v260, v261, 0, v269, 1, v265, v266, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 9) :|: 0 = 0
f_638(v257, v258, v259, v260, v261, 0, v269, 1, v265, v266, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 9) -> f_639(v257, v258, v259, v260, v261, 0, v269, 1, v265, v266, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 2, 9) :|: v269 < v257 && 2 <= v257
f_639(v257, v258, v259, v260, v261, 0, v269, 1, v265, v266, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 2, 9) -> f_641(v257, v258, v259, v260, v261, 0, v269, 1, v265, v266, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 2, 9) :|: 0 = 0
f_641(v257, v258, v259, v260, v261, 0, v269, 1, v265, v266, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 2, 9) -> f_643(v257, v258, v259, v260, v261, 0, v269, 1, v265, v266, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 2, 9) :|: TRUE
f_643(v257, v258, v259, v260, v261, 0, v269, 1, v265, v266, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 2, 9) -> f_645(v257, v258, v259, v260, v261, 0, v269, 1, v281, v265, v266, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v280, 3, 7, 4, 8, 15, 2, 9, 16) :|: v282 = 15 + v281 && v281 % 4 = 0 && 16 <= v282
f_645(v257, v258, v259, v260, v261, 0, v269, 1, v281, v265, v266, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v280, 3, 7, 4, 8, 15, 2, 9, 16) -> f_647(v257, v258, v259, v260, v261, 0, v269, 1, v281, v266, v265, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v280, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_647(v257, v258, v259, v260, v261, 0, v269, 1, v281, v266, v265, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v280, 3, 7, 4, 8, 15, 2, 9, 16) -> f_649(v257, v258, v259, v260, v261, 0, v269, 1, v281, v266, v265, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v280, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_649(v257, v258, v259, v260, v261, 0, v269, 1, v281, v266, v265, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v280, 3, 7, 4, 8, 15, 2, 9, 16) -> f_651(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v266, v280, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_651(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v266, v280, 3, 7, 4, 8, 15, 2, 9, 16) -> f_653(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v266, v280, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_653(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v266, v280, 3, 7, 4, 8, 15, 2, 9, 16) -> f_655(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v267, v265, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v266, v280, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_655(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v267, v265, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v266, v280, 3, 7, 4, 8, 15, 2, 9, 16) -> f_657(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v267, v265, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v266, v280, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_657(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v267, v265, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v266, v280, 3, 7, 4, 8, 15, 2, 9, 16) -> f_659(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v266, v280, v267, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_659(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v266, v280, v267, 3, 7, 4, 8, 15, 2, 9, 16) -> f_661(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v266, v280, v267, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_661(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v266, v280, v267, 3, 7, 4, 8, 15, 2, 9, 16) -> f_663(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v266, v280, v267, 3, 7, 4, 15, 8, 2, 16, 9) :|: v294 = 8 + v281 && 9 <= v294
f_663(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v282, v266, v280, v267, 3, 7, 4, 15, 8, 2, 16, 9) -> f_665(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, v296, 2, 9) :|: v296 = 1 + v269 && 2 <= v296
f_665(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, v296, 2, 9) -> f_667(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, v296, 2, 9) :|: 0 = 0
f_667(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, v296, 2, 9) -> f_669(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, v296, 2, 9) :|: TRUE
f_669(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, v296, 2, 9) -> f_677(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, v296, 2, 9) :|: TRUE
f_677(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, v296, 2, 9) -> f_679(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, v296, 2, 9) :|: 0 = 0
f_679(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, v296, 2, 9) -> f_681(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v296, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 2, 9) :|: v296 = 1 + v269
f_681(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v296, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 2, 9) -> f_683(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v296, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 2, 9) :|: TRUE
f_683(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v296, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 2, 9) -> f_685(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v296, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 2, 9) :|: TRUE
f_685(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v296, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 2, 9) -> f_636(v257, v258, v259, v260, v261, 0, v269, 1, v281, v285, v265, v294, v296, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 9) :|: TRUE
f_636(v257, v258, v259, v260, v261, 0, v263, 1, v265, v266, v267, v268, v269, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 9) -> f_637(v257, v258, v259, v260, v261, 0, v269, 1, v265, v266, v267, v268, v263, v270, v273, v271, v274, v272, v275, v276, v277, v278, v279, v280, 3, 7, 4, 8, 9) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_637(v257:0, v258:0, v259:0, v260:0, v261:0, 0, v269:0, 1, v265:0, v266:0, v267:0, v268:0, v263:0, v270:0, v273:0, v271:0, v274:0, v272:0, v275:0, v276:0, v277:0, v278:0, v279:0, v280:0, 3, 7, 4, 8, 9) -> f_637(v257:0, v258:0, v259:0, v260:0, v261:0, 0, 1 + v269:0, 1, v281:0, v285:0, v265:0, 8 + v281:0, v269:0, v270:0, v273:0, v271:0, v274:0, v272:0, v275:0, v276:0, v277:0, v278:0, v279:0, v280:0, 3, 7, 4, 8, 9) :|: v257:0 > 1 && v269:0 < v257:0 && v281:0 % 4 = 0 && v281:0 > 0 && v269:0 > 0
Filtered unneeded arguments:
   f_637(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_637(x1, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_637(v257:0, v269:0) -> f_637(v257:0, 1 + v269:0) :|: v269:0 < v257:0 && v269:0 > 0 && v257:0 > 1

----------------------------------------

(16)
Obligation:
Rules:
f_637(v257:0, v269:0) -> f_637(v257:0, 1 + v269:0) :|: v269:0 < v257:0 && v269:0 > 0 && v257:0 > 1

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_637(v257:0:0, v269:0:0) -> f_637(v257:0:0, 1 + v269:0:0) :|: v269:0:0 < v257:0:0 && v269:0:0 > 0 && v257:0:0 > 1

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_637(x, x1)] = x - x1

The following rules are decreasing:
f_637(v257:0:0, v269:0:0) -> f_637(v257:0:0, 1 + v269:0:0) :|: v269:0:0 < v257:0:0 && v269:0:0 > 0 && v257:0:0 > 1
The following rules are bounded:
f_637(v257:0:0, v269:0:0) -> f_637(v257:0:0, 1 + v269:0:0) :|: v269:0:0 < v257:0:0 && v269:0:0 > 0 && v257:0:0 > 1

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
