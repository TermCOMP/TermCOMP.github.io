YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/NPpkt.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 200 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 21 ms]
(8) IntTRS
(9) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/NPpkt.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/NPpkt.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = load %3
		%7 = icmp sgt %6 0
		br %7, %8, %23
	8:
		br %9
	9:
		%10 = load %2
		%11 = load %3
		%12 = icmp ne %10 %11
		br %12, %13, %22
	13:
		%14 = load %2
		%15 = load %3
		%16 = icmp sgt %14 %15
		br %16, %17, %18
	17:
		store 0, %2
		br %21
	18:
		%19 = load %2
		%20 = add i32 %19, 1
		store %20, %2
		br %21
	21:
		br %9
	22:
		br %23
	23:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_187(v72, v73, v74, v75, v76, 1, v78, 0, v80, v81, v82, v83, 3, 4) -> f_188(v72, v73, v74, v75, v76, 1, v78, 0, v80, v81, v82, v83, 3, 4) :|: TRUE
f_188(v103, v104, v105, v106, v107, 1, v109, 0, v111, v112, v113, v114, 3, 4) -> f_189(v103, v104, v105, v106, v107, 1, v111, v109, 0, v112, v113, v114, 3, 4) :|: 0 = 0
f_189(v103, v104, v105, v106, v107, 1, v111, v109, 0, v112, v113, v114, 3, 4) -> f_190(v103, v104, v105, v106, v107, 1, v111, v109, 0, v112, v113, v114, 3, 4) :|: 0 = 0
f_190(v103, v104, v105, v106, v107, 1, v111, v109, 0, v112, v113, v114, 3, 4) -> f_191(v103, v104, v105, v106, v107, 1, v111, v109, 0, v112, v113, v114, 3, 4) :|: v111 < v107
f_191(v103, v104, v105, v106, v107, 1, v111, v109, 0, v112, v113, v114, 3, 4) -> f_193(v103, v104, v105, v106, v107, 1, v111, v109, 0, v112, v113, v114, 3, 4) :|: 0 = 0
f_193(v103, v104, v105, v106, v107, 1, v111, v109, 0, v112, v113, v114, 3, 4) -> f_195(v103, v104, v105, v106, v107, 1, v111, v109, 0, v112, v113, v114, 3, 4) :|: TRUE
f_195(v103, v104, v105, v106, v107, 1, v111, v109, 0, v112, v113, v114, 3, 4) -> f_197(v103, v104, v105, v106, v107, 1, v111, 0, v109, v112, v113, v114, 3, 4) :|: 0 = 0
f_197(v103, v104, v105, v106, v107, 1, v111, 0, v109, v112, v113, v114, 3, 4) -> f_199(v103, v104, v105, v106, v107, 1, v111, 0, v109, v112, v113, v114, 3, 4) :|: 0 = 0
f_199(v103, v104, v105, v106, v107, 1, v111, 0, v109, v112, v113, v114, 3, 4) -> f_200(v103, v104, v105, v106, v107, 1, v111, 0, v109, v112, v113, v114, 3, 4) :|: 0 = 0
f_200(v103, v104, v105, v106, v107, 1, v111, 0, v109, v112, v113, v114, 3, 4) -> f_201(v103, v104, v105, v106, v107, 1, v111, 0, v109, v112, v113, v114, 3, 4) :|: TRUE
f_201(v103, v104, v105, v106, v107, 1, v111, 0, v109, v112, v113, v114, 3, 4) -> f_202(v103, v104, v105, v106, v107, 1, v111, 0, v112, v113, v114, 3, 4) :|: 0 = 0
f_202(v103, v104, v105, v106, v107, 1, v111, 0, v112, v113, v114, 3, 4) -> f_203(v103, v104, v105, v106, v107, 1, v111, 0, v124, v112, v113, v114, 3, 4) :|: v124 = 1 + v111
f_203(v103, v104, v105, v106, v107, 1, v111, 0, v124, v112, v113, v114, 3, 4) -> f_204(v103, v104, v105, v106, v107, 1, v111, 0, v124, v112, v113, v114, 3, 4) :|: TRUE
f_204(v103, v104, v105, v106, v107, 1, v111, 0, v124, v112, v113, v114, 3, 4) -> f_205(v103, v104, v105, v106, v107, 1, v111, 0, v124, v112, v113, v114, 3, 4) :|: TRUE
f_205(v103, v104, v105, v106, v107, 1, v111, 0, v124, v112, v113, v114, 3, 4) -> f_186(v103, v104, v105, v106, v107, 1, v111, 0, v124, v112, v113, v114, 3, 4) :|: TRUE
f_186(v72, v73, v74, v75, v76, 1, v78, 0, v80, v81, v82, v83, 3, 4) -> f_187(v72, v73, v74, v75, v76, 1, v78, 0, v80, v81, v82, v83, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_187(v72:0, v73:0, v74:0, v75:0, v76:0, 1, v78:0, 0, v80:0, v81:0, v82:0, v83:0, 3, 4) -> f_187(v72:0, v73:0, v74:0, v75:0, v76:0, 1, v80:0, 0, 1 + v80:0, v81:0, v82:0, v83:0, 3, 4) :|: v80:0 < v76:0
Filtered unneeded arguments:
   f_187(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_187(x5, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_187(v76:0, v80:0) -> f_187(v76:0, 1 + v80:0) :|: v80:0 < v76:0

----------------------------------------

(8)
Obligation:
Rules:
f_187(v76:0, v80:0) -> f_187(v76:0, 1 + v80:0) :|: v80:0 < v76:0

----------------------------------------

(9) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_187(x, x1)] = x - x1

The following rules are decreasing:
f_187(v76:0, v80:0) -> f_187(v76:0, 1 + v80:0) :|: v80:0 < v76:0
The following rules are bounded:
f_187(v76:0, v80:0) -> f_187(v76:0, 1 + v80:0) :|: v80:0 < v76:0

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
