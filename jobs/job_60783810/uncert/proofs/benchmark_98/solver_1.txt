YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/uDfoa.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 16.4 s]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 17 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 16 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 11 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 20 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (27) YES
    (28) LLVM Symbolic Execution SCC
        (29) SCC2IRS [SOUND, 26 ms]
        (30) IntTRS
        (31) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (32) IntTRS
        (33) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (34) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/uDfoa.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/uDfoa.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cstpncpy" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8, 1 *i8, 2 i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		%6 = alloca i64, align 8
		%7 = alloca *i8, align 8
		%8 = alloca *i8, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %6)
		%9 = load %6
		%10 = icmp ne %9 0
		br %10, %11, %42
	11:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %7)
		%12 = load %4
		store %12, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %8)
		%13 = load %5
		store %13, %8
		%14 = load %4
		%15 = load %6
		%16 = getelementptr %14, %15
		store %16, %4
		br %17
	17:
		%18 = load %8
		%19 = getelementptr %18, 1
		store %19, %8
		%20 = load %18
		%21 = load %7
		%22 = getelementptr %21, 1
		store %22, %7
		store %20, %21
		%23 = sext i8 %20 to i32
		%24 = icmp eq %23 0
		br %24, %25, %36
	25:
		%26 = load %7
		%27 = getelementptr %26, -1
		store %27, %4
		br %28
	28:
		%29 = load %6
		%30 = add i64 %29, -1
		store %30, %6
		%31 = icmp ne %30 0
		br %31, %32, %35
	32:
		%33 = load %7
		%34 = getelementptr %33, 1
		store %34, %7
		store 0, %33
		br %28
	35:
		br %41
	36:
		br %37
	37:
		%38 = load %6
		%39 = add i64 %38, -1
		store %39, %6
		%40 = icmp ne %39 0
		br %40, %17, %41
	41:
		br %42
	42:
		%43 = load %4
		ret %43

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 69
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = load %2
		%9 = icmp slt %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %11
	11:
		%12 = load %3
		%13 = icmp slt %12 1
		br %13, %14, %15
	14:
		store 1, %3
		br %15
	15:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%16 = load %3
		%17 = sext i32 %16 to i64
		%18 = mul i64 %17, 1
		%19 = alloca i8, numElementsLit: %18, align 16
		store %19, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%20 = load %2
		%21 = sext i32 %20 to i64
		%22 = mul i64 %21, 1
		%23 = alloca i8, numElementsLit: %22, align 16
		store %23, %5
		%24 = load %5
		%25 = load %2
		%26 = sub i32 %25, 1
		%27 = sext i32 %26 to i64
		%28 = getelementptr %24, %27
		store 0, %28
		%29 = load %4
		%30 = load %5
		%31 = load %3
		%32 = sext i32 %31 to i64
		%33 = call *i8 @cstpncpy(*i8 %29, *i8 %30, i64 %32)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 4 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_1054(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4853, v4854, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4860, v4861, 3, 7, 4, 2, 8) -> f_1055(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4853, v4854, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4860, v4861, 3, 7, 4, 2, 8) :|: 1 + v4898 = v4852 && 0 <= v4898
f_1055(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4853, v4854, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4860, v4861, 3, 7, 4, 2, 8) -> f_1056(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4853, v4854, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4860, v4861, 3, 7, 4, 2, 8) :|: TRUE
f_1056(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4853, v4854, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4860, v4861, 3, 7, 4, 2, 8) -> f_1057(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4853, v4854, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4860, v4861, 3, 7, 4, 2, 8) :|: 0 < v4898 && 2 <= v4852 && 4 <= v4849 && 3 <= v4850 && 4 <= v4868
f_1057(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4853, v4854, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4860, v4861, 3, 7, 4, 2, 8) -> f_1059(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4853, v4854, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4860, v4861, 3, 7, 4, 2, 8) :|: 0 = 0
f_1059(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4853, v4854, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4860, v4861, 3, 7, 4, 2, 8) -> f_1061(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4853, v4854, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4860, v4861, 3, 7, 4, 2, 8) :|: TRUE
f_1061(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4853, v4854, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4860, v4861, 3, 7, 4, 2, 8) -> f_1063(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4854, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4853, v4860, v4861, 3, 7, 4, 2, 8) :|: 0 = 0
f_1063(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4854, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4853, v4860, v4861, 3, 7, 4, 2, 8) -> f_1065(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4854, v5112, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4853, v4860, v4861, 3, 7, 4, 2, 8, 5) :|: v5112 = 1 + v4854 && 5 <= v5112
f_1065(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4854, v5112, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4853, v4860, v4861, 3, 7, 4, 2, 8, 5) -> f_1067(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4854, v5112, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4853, v4860, v4861, 3, 7, 4, 2, 8, 5) :|: TRUE
f_1067(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4854, v5112, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4853, v4860, v4861, 3, 7, 4, 2, 8, 5) -> f_1069(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4854, v5112, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4853, v4860, v4861, 3, 7, 4, 2, 8, 5) :|: TRUE
f_1069(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4854, v5112, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4853, v4860, v4861, 3, 7, 4, 2, 8, 5) -> f_1071(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4854, v5112, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4853, v4860, v4861, 3, 7, 4, 2, 8, 5) :|: TRUE
f_1071(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4854, v5112, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4853, v4860, v4861, 3, 7, 4, 2, 8, 5) -> f_1053(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4898, v4854, v5112, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4860, v4861, 3, 7, 4, 2, 8) :|: TRUE
f_1053(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4851, v4852, v4853, v4854, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4860, v4861, 3, 7, 4, 2, 8) -> f_1054(v4834, v4835, v4836, v4837, v4838, v4839, v4840, v4841, 1, v4843, v4844, v4845, 0, v4847, v4848, v4849, v4850, v4852, v4853, v4854, v4855, v4863, v4856, v4864, v4857, v4865, v4858, v4866, v4859, v4867, v4868, v4862, v4869, v4870, v4871, v4872, v4873, v4878, v4877, v4879, v4876, v4874, v4880, v4875, v4860, v4861, 3, 7, 4, 2, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_1054(v4834:0, v4835:0, v4836:0, v4837:0, v4838:0, v4839:0, v4840:0, v4841:0, 1, v4843:0, v4844:0, v4845:0, 0, v4847:0, v4848:0, v4849:0, v4850:0, 1 + v4898:0, v4853:0, v4854:0, v4855:0, v4863:0, v4856:0, v4864:0, v4857:0, v4865:0, v4858:0, v4866:0, v4859:0, v4867:0, v4868:0, v4862:0, v4869:0, v4870:0, v4871:0, v4872:0, v4873:0, v4878:0, v4877:0, v4879:0, v4876:0, v4874:0, v4880:0, v4875:0, v4860:0, v4861:0, 3, 7, 4, 2, 8) -> f_1054(v4834:0, v4835:0, v4836:0, v4837:0, v4838:0, v4839:0, v4840:0, v4841:0, 1, v4843:0, v4844:0, v4845:0, 0, v4847:0, v4848:0, v4849:0, v4850:0, v4898:0, v4854:0, 1 + v4854:0, v4855:0, v4863:0, v4856:0, v4864:0, v4857:0, v4865:0, v4858:0, v4866:0, v4859:0, v4867:0, v4868:0, v4862:0, v4869:0, v4870:0, v4871:0, v4872:0, v4873:0, v4878:0, v4877:0, v4879:0, v4876:0, v4874:0, v4880:0, v4875:0, v4860:0, v4861:0, 3, 7, 4, 2, 8) :|: v4898:0 > 0 && v4849:0 > 3 && v4850:0 > 2 && v4854:0 > 3 && v4868:0 > 3
Filtered unneeded arguments:
   f_1054(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51) -> f_1054(x16, x17, x18, x20, x31)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1054(v4849:0, v4850:0, sum~cons_1~v4898:0, v4854:0, v4868:0) -> f_1054(v4849:0, v4850:0, v4898:0, 1 + v4854:0, v4868:0) :|: v4849:0 > 3 && v4898:0 > 0 && v4850:0 > 2 && v4868:0 > 3 && v4854:0 > 3 && sum~cons_1~v4898:0 = 1 + v4898:0

----------------------------------------

(9)
Obligation:
Rules:
f_1054(v4849:0, v4850:0, sum~cons_1~v4898:0, v4854:0, v4868:0) -> f_1054(v4849:0, v4850:0, v4898:0, 1 + v4854:0, v4868:0) :|: v4849:0 > 3 && v4898:0 > 0 && v4850:0 > 2 && v4868:0 > 3 && v4854:0 > 3 && sum~cons_1~v4898:0 = 1 + v4898:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_1054(v4849:0:0, v4850:0:0, sum~cons_1~v4898:0:0, v4854:0:0, v4868:0:0) -> f_1054(v4849:0:0, v4850:0:0, v4898:0:0, 1 + v4854:0:0, v4868:0:0) :|: v4868:0:0 > 3 && v4854:0:0 > 3 && v4850:0:0 > 2 && v4898:0:0 > 0 && v4849:0:0 > 3 && sum~cons_1~v4898:0:0 = 1 + v4898:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1054(x, x1, x2, x3, x4)] = x2

The following rules are decreasing:
f_1054(v4849:0:0, v4850:0:0, sum~cons_1~v4898:0:0, v4854:0:0, v4868:0:0) -> f_1054(v4849:0:0, v4850:0:0, v4898:0:0, 1 + v4854:0:0, v4868:0:0) :|: v4868:0:0 > 3 && v4854:0:0 > 3 && v4850:0:0 > 2 && v4898:0:0 > 0 && v4849:0:0 > 3 && sum~cons_1~v4898:0:0 = 1 + v4898:0:0
The following rules are bounded:
f_1054(v4849:0:0, v4850:0:0, sum~cons_1~v4898:0:0, v4854:0:0, v4868:0:0) -> f_1054(v4849:0:0, v4850:0:0, v4898:0:0, 1 + v4854:0:0, v4868:0:0) :|: v4868:0:0 > 3 && v4854:0:0 > 3 && v4850:0:0 > 2 && v4898:0:0 > 0 && v4849:0:0 > 3 && sum~cons_1~v4898:0:0 = 1 + v4898:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_1000(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3916, v3917, v3918, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1003(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v3916, v3917, v3918, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: v3946 = 1 + v3915 && 4 <= v3946
f_1003(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v3916, v3917, v3918, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1005(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v3916, v3917, v3918, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: TRUE
f_1005(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v3916, v3917, v3918, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1006(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3917, v3918, v3916, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: TRUE
f_1006(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3917, v3918, v3916, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1007(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v3916, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: 0 = 0
f_1007(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v3916, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1008(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, v3916, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: v4108 = 1 + v3918 && 4 <= v4108
f_1008(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, v3916, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1009(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, v3916, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: TRUE
f_1009(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, v3916, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1010(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, v3916, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: TRUE
f_1010(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, v3916, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1011(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: 0 = 0
f_1011(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1013(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: v4106 != 0 && v3915 < v3929 && 4 <= v3929
f_1013(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1015(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: 0 = 0
f_1015(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1017(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: TRUE
f_1017(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1019(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: TRUE
f_1019(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1021(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: 0 = 0
f_1021(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1023(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3921, v4181, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: 1 + v4181 = v3921 && 0 <= v4181
f_1023(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3921, v4181, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1025(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3921, v4181, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: TRUE
f_1025(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3921, v4181, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1027(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3921, v4181, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: 0 < v4181 && 2 <= v3921 && 4 <= v3935
f_1027(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3921, v4181, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1030(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3921, v4181, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: 0 = 0
f_1030(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3921, v4181, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1033(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3921, v4181, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: TRUE
f_1033(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3921, v4181, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3916, v3917, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_997(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3946, v4106, v3918, v4108, 0, v3921, v4181, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: TRUE
f_997(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3914, v3915, v3916, v3917, v3918, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) -> f_1000(v3904, v3905, v3906, v3907, v3908, v3909, v3910, v3911, 1, v3913, v3915, v3916, v3917, v3918, 0, v3920, v3921, v3922, v3930, v3923, v3931, v3924, v3932, v3925, v3933, v3926, v3934, v3935, v3929, v3936, v3937, v3938, v3939, v3940, v3943, v3914, v3927, v3941, v3944, v3942, v3928, 3, 7, 4, 2, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_1000(v3904:0, v3905:0, v3906:0, v3907:0, v3908:0, v3909:0, v3910:0, v3911:0, 1, v3913:0, v3915:0, v3916:0, v3917:0, v3918:0, 0, v3920:0, 1 + v4181:0, v3922:0, v3930:0, v3923:0, v3931:0, v3924:0, v3932:0, v3925:0, v3933:0, v3926:0, v3934:0, v3935:0, v3929:0, v3936:0, v3937:0, v3938:0, v3939:0, v3940:0, v3943:0, v3914:0, v3927:0, v3941:0, v3944:0, v3942:0, v3928:0, 3, 7, 4, 2, 8) -> f_1000(v3904:0, v3905:0, v3906:0, v3907:0, v3908:0, v3909:0, v3910:0, v3911:0, 1, v3913:0, 1 + v3915:0, v4106:0, v3918:0, 1 + v3918:0, 0, 1 + v4181:0, v4181:0, v3922:0, v3930:0, v3923:0, v3931:0, v3924:0, v3932:0, v3925:0, v3933:0, v3926:0, v3934:0, v3935:0, v3929:0, v3936:0, v3937:0, v3938:0, v3939:0, v3940:0, v3943:0, v3915:0, v3927:0, v3941:0, v3944:0, v3942:0, v3928:0, 3, 7, 4, 2, 8) :|: v4181:0 > 0 && v3915:0 > 2 && v3918:0 > 2 && v3929:0 > v3915:0 && v4106:0 < 0 && v3929:0 > 3 && v3935:0 > 3
f_1000(v3904:0, v3905:0, v3906:0, v3907:0, v3908:0, v3909:0, v3910:0, v3911:0, 1, v3913:0, v3915:0, v3916:0, v3917:0, v3918:0, 0, v3920:0, 1 + v4181:0, v3922:0, v3930:0, v3923:0, v3931:0, v3924:0, v3932:0, v3925:0, v3933:0, v3926:0, v3934:0, v3935:0, v3929:0, v3936:0, v3937:0, v3938:0, v3939:0, v3940:0, v3943:0, v3914:0, v3927:0, v3941:0, v3944:0, v3942:0, v3928:0, 3, 7, 4, 2, 8) -> f_1000(v3904:0, v3905:0, v3906:0, v3907:0, v3908:0, v3909:0, v3910:0, v3911:0, 1, v3913:0, 1 + v3915:0, v4106:0, v3918:0, 1 + v3918:0, 0, 1 + v4181:0, v4181:0, v3922:0, v3930:0, v3923:0, v3931:0, v3924:0, v3932:0, v3925:0, v3933:0, v3926:0, v3934:0, v3935:0, v3929:0, v3936:0, v3937:0, v3938:0, v3939:0, v3940:0, v3943:0, v3915:0, v3927:0, v3941:0, v3944:0, v3942:0, v3928:0, 3, 7, 4, 2, 8) :|: v4181:0 > 0 && v3915:0 > 2 && v3918:0 > 2 && v3929:0 > v3915:0 && v4106:0 > 0 && v3929:0 > 3 && v3935:0 > 3
Filtered unneeded arguments:
   f_1000(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46) -> f_1000(x11, x14, x17, x28, x29)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1000(v3915:0, v3918:0, sum~cons_1~v4181:0, v3935:0, v3929:0) -> f_1000(1 + v3915:0, 1 + v3918:0, v4181:0, v3935:0, v3929:0) :|: v3915:0 > 2 && v4181:0 > 0 && v3918:0 > 2 && v3929:0 > v3915:0 && v3935:0 > 3 && v3929:0 > 3 && sum~cons_1~v4181:0 = 1 + v4181:0

----------------------------------------

(16)
Obligation:
Rules:
f_1000(v3915:0, v3918:0, sum~cons_1~v4181:0, v3935:0, v3929:0) -> f_1000(1 + v3915:0, 1 + v3918:0, v4181:0, v3935:0, v3929:0) :|: v3915:0 > 2 && v4181:0 > 0 && v3918:0 > 2 && v3929:0 > v3915:0 && v3935:0 > 3 && v3929:0 > 3 && sum~cons_1~v4181:0 = 1 + v4181:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_1000(v3915:0:0, v3918:0:0, sum~cons_1~v4181:0:0, v3935:0:0, v3929:0:0) -> f_1000(1 + v3915:0:0, 1 + v3918:0:0, v4181:0:0, v3935:0:0, v3929:0:0) :|: v3935:0:0 > 3 && v3929:0:0 > 3 && v3929:0:0 > v3915:0:0 && v3918:0:0 > 2 && v4181:0:0 > 0 && v3915:0:0 > 2 && sum~cons_1~v4181:0:0 = 1 + v4181:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1000 ] = f_1000_3

The following rules are decreasing:
f_1000(v3915:0:0, v3918:0:0, sum~cons_1~v4181:0:0, v3935:0:0, v3929:0:0) -> f_1000(1 + v3915:0:0, 1 + v3918:0:0, v4181:0:0, v3935:0:0, v3929:0:0) :|: v3935:0:0 > 3 && v3929:0:0 > 3 && v3929:0:0 > v3915:0:0 && v3918:0:0 > 2 && v4181:0:0 > 0 && v3915:0:0 > 2 && sum~cons_1~v4181:0:0 = 1 + v4181:0:0

The following rules are bounded:
f_1000(v3915:0:0, v3918:0:0, sum~cons_1~v4181:0:0, v3935:0:0, v3929:0:0) -> f_1000(1 + v3915:0:0, 1 + v3918:0:0, v4181:0:0, v3935:0:0, v3929:0:0) :|: v3935:0:0 > 3 && v3929:0:0 > 3 && v3929:0:0 > v3915:0:0 && v3918:0:0 > 2 && v4181:0:0 > 0 && v3915:0:0 > 2 && sum~cons_1~v4181:0:0 = 1 + v4181:0:0


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_922(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2643, v2644, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2650, v2664, v2651, 3, 7, 4, 2, 8) -> f_926(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2643, v2644, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2650, v2664, v2651, 3, 7, 4, 2, 8) :|: 1 + v2868 = v2642 && 0 <= v2868
f_926(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2643, v2644, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2650, v2664, v2651, 3, 7, 4, 2, 8) -> f_930(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2643, v2644, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2650, v2664, v2651, 3, 7, 4, 2, 8) :|: TRUE
f_930(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2643, v2644, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2650, v2664, v2651, 3, 7, 4, 2, 8) -> f_934(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2643, v2644, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2650, v2664, v2651, 3, 7, 4, 2, 8) :|: 0 < v2868 && 2 <= v2642 && 4 <= v2658
f_934(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2643, v2644, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2650, v2664, v2651, 3, 7, 4, 2, 8) -> f_939(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2643, v2644, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2650, v2664, v2651, 3, 7, 4, 2, 8) :|: 0 = 0
f_939(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2643, v2644, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2650, v2664, v2651, 3, 7, 4, 2, 8) -> f_944(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2643, v2644, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2650, v2664, v2651, 3, 7, 4, 2, 8) :|: TRUE
f_944(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2643, v2644, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2650, v2664, v2651, 3, 7, 4, 2, 8) -> f_949(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2644, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2643, v2650, v2664, v2651, 3, 7, 4, 2, 8) :|: 0 = 0
f_949(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2644, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2643, v2650, v2664, v2651, 3, 7, 4, 2, 8) -> f_955(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2644, v3134, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2643, v2650, v2664, v2651, 3, 7, 4, 2, 8, 5) :|: v3134 = 1 + v2644 && 5 <= v3134
f_955(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2644, v3134, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2643, v2650, v2664, v2651, 3, 7, 4, 2, 8, 5) -> f_961(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2644, v3134, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2643, v2650, v2664, v2651, 3, 7, 4, 2, 8, 5) :|: TRUE
f_961(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2644, v3134, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2643, v2650, v2664, v2651, 3, 7, 4, 2, 8, 5) -> f_966(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2644, v3134, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2643, v2650, v2664, v2651, 3, 7, 4, 2, 8, 5) :|: TRUE
f_966(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2644, v3134, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2643, v2650, v2664, v2651, 3, 7, 4, 2, 8, 5) -> f_971(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2644, v3134, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2643, v2650, v2664, v2651, 3, 7, 4, 2, 8, 5) :|: TRUE
f_971(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2644, v3134, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2643, v2650, v2664, v2651, 3, 7, 4, 2, 8, 5) -> f_918(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2868, v2644, v3134, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2650, v2664, v2651, 3, 7, 4, 2, 8) :|: TRUE
f_918(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2641, v2642, v2643, v2644, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2650, v2664, v2651, 3, 7, 4, 2, 8) -> f_922(v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, 1, v2637, v2638, 0, v2640, v2642, v2643, v2644, v2645, v2653, v2646, v2654, v2647, v2655, v2648, v2656, v2649, v2657, v2658, v2652, v2659, v2660, v2661, v2662, v2663, v2650, v2664, v2651, 3, 7, 4, 2, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_922(v2628:0, v2629:0, v2630:0, v2631:0, v2632:0, v2633:0, v2634:0, v2635:0, 1, v2637:0, v2638:0, 0, v2640:0, 1 + v2868:0, v2643:0, v2644:0, v2645:0, v2653:0, v2646:0, v2654:0, v2647:0, v2655:0, v2648:0, v2656:0, v2649:0, v2657:0, v2658:0, v2652:0, v2659:0, v2660:0, v2661:0, v2662:0, v2663:0, v2650:0, v2664:0, v2651:0, 3, 7, 4, 2, 8) -> f_922(v2628:0, v2629:0, v2630:0, v2631:0, v2632:0, v2633:0, v2634:0, v2635:0, 1, v2637:0, v2638:0, 0, v2640:0, v2868:0, v2644:0, 1 + v2644:0, v2645:0, v2653:0, v2646:0, v2654:0, v2647:0, v2655:0, v2648:0, v2656:0, v2649:0, v2657:0, v2658:0, v2652:0, v2659:0, v2660:0, v2661:0, v2662:0, v2663:0, v2650:0, v2664:0, v2651:0, 3, 7, 4, 2, 8) :|: v2868:0 > 0 && v2644:0 > 3 && v2658:0 > 3
Filtered unneeded arguments:
   f_922(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41) -> f_922(x14, x16, x27)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_922(sum~cons_1~v2868:0, v2644:0, v2658:0) -> f_922(v2868:0, 1 + v2644:0, v2658:0) :|: v2644:0 > 3 && v2658:0 > 3 && v2868:0 > 0 && sum~cons_1~v2868:0 = 1 + v2868:0

----------------------------------------

(23)
Obligation:
Rules:
f_922(sum~cons_1~v2868:0, v2644:0, v2658:0) -> f_922(v2868:0, 1 + v2644:0, v2658:0) :|: v2644:0 > 3 && v2658:0 > 3 && v2868:0 > 0 && sum~cons_1~v2868:0 = 1 + v2868:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_922(sum~cons_1~v2868:0:0, v2644:0:0, v2658:0:0) -> f_922(v2868:0:0, 1 + v2644:0:0, v2658:0:0) :|: v2644:0:0 > 3 && v2658:0:0 > 3 && v2868:0:0 > 0 && sum~cons_1~v2868:0:0 = 1 + v2868:0:0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_922(x, x1, x2)] = x

The following rules are decreasing:
f_922(sum~cons_1~v2868:0:0, v2644:0:0, v2658:0:0) -> f_922(v2868:0:0, 1 + v2644:0:0, v2658:0:0) :|: v2644:0:0 > 3 && v2658:0:0 > 3 && v2868:0:0 > 0 && sum~cons_1~v2868:0:0 = 1 + v2868:0:0
The following rules are bounded:
f_922(sum~cons_1~v2868:0:0, v2644:0:0, v2658:0:0) -> f_922(v2868:0:0, 1 + v2644:0:0, v2658:0:0) :|: v2644:0:0 > 3 && v2658:0:0 > 3 && v2868:0:0 > 0 && sum~cons_1~v2868:0:0 = 1 + v2868:0:0

----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
SCC
----------------------------------------

(29) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_849(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1751, v1752, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1758, 3, 7, 2, 4, 8) -> f_855(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1751, v1752, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1758, 3, 7, 2, 4, 8) :|: 1 + v1880 = v1750 && 0 <= v1880
f_855(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1751, v1752, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1758, 3, 7, 2, 4, 8) -> f_861(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1751, v1752, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1758, 3, 7, 2, 4, 8) :|: TRUE
f_861(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1751, v1752, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1758, 3, 7, 2, 4, 8) -> f_868(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1751, v1752, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1758, 3, 7, 4, 2, 8) :|: 0 < v1880 && 2 <= v1750 && 3 <= v1764 && 3 <= v1738 && 4 <= v1745
f_868(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1751, v1752, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1758, 3, 7, 4, 2, 8) -> f_876(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1751, v1752, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1758, 3, 7, 4, 2, 8) :|: 0 = 0
f_876(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1751, v1752, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1758, 3, 7, 4, 2, 8) -> f_885(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1751, v1752, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1758, 3, 7, 4, 2, 8) :|: TRUE
f_885(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1751, v1752, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1758, 3, 7, 4, 2, 8) -> f_894(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1752, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1751, v1758, 3, 7, 4, 2, 8) :|: 0 = 0
f_894(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1752, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1751, v1758, 3, 7, 4, 2, 8) -> f_903(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1752, v2513, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1751, v1758, 3, 7, 4, 2, 8) :|: v2513 = 1 + v1752 && 4 <= v2513
f_903(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1752, v2513, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1751, v1758, 3, 7, 4, 2, 8) -> f_909(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1752, v2513, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1751, v1758, 3, 7, 4, 2, 8) :|: TRUE
f_909(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1752, v2513, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1751, v1758, 3, 7, 4, 2, 8) -> f_915(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1752, v2513, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1751, v1758, 3, 7, 4, 2, 8) :|: TRUE
f_915(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1752, v2513, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1751, v1758, 3, 7, 4, 2, 8) -> f_921(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1752, v2513, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1751, v1758, 3, 7, 4, 2, 8) :|: TRUE
f_921(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1752, v2513, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1751, v1758, 3, 7, 4, 2, 8) -> f_843(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1880, v1752, v2513, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1758, 3, 7, 2, 4, 8) :|: TRUE
f_843(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1749, v1750, v1751, v1752, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1758, 3, 7, 2, 4, 8) -> f_849(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743, 1, v1745, v1746, 0, v1748, v1750, v1751, v1752, v1753, v1759, v1754, v1760, v1755, v1761, v1756, v1762, v1757, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1758, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_849(v1736:0, v1737:0, v1738:0, v1739:0, v1740:0, v1741:0, v1742:0, v1743:0, 1, v1745:0, v1746:0, 0, v1748:0, 1 + v1880:0, v1751:0, v1752:0, v1753:0, v1759:0, v1754:0, v1760:0, v1755:0, v1761:0, v1756:0, v1762:0, v1757:0, v1763:0, v1764:0, v1765:0, v1766:0, v1767:0, v1768:0, v1769:0, v1758:0, 3, 7, 2, 4, 8) -> f_849(v1736:0, v1737:0, v1738:0, v1739:0, v1740:0, v1741:0, v1742:0, v1743:0, 1, v1745:0, v1746:0, 0, v1748:0, v1880:0, v1752:0, 1 + v1752:0, v1753:0, v1759:0, v1754:0, v1760:0, v1755:0, v1761:0, v1756:0, v1762:0, v1757:0, v1763:0, v1764:0, v1765:0, v1766:0, v1767:0, v1768:0, v1769:0, v1758:0, 3, 7, 2, 4, 8) :|: v1880:0 > 0 && v1764:0 > 2 && v1738:0 > 2 && v1752:0 > 2 && v1745:0 > 3
Filtered unneeded arguments:
   f_849(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38) -> f_849(x3, x10, x14, x16, x27)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_849(v1738:0, v1745:0, sum~cons_1~v1880:0, v1752:0, v1764:0) -> f_849(v1738:0, v1745:0, v1880:0, 1 + v1752:0, v1764:0) :|: v1764:0 > 2 && v1880:0 > 0 && v1738:0 > 2 && v1745:0 > 3 && v1752:0 > 2 && sum~cons_1~v1880:0 = 1 + v1880:0

----------------------------------------

(30)
Obligation:
Rules:
f_849(v1738:0, v1745:0, sum~cons_1~v1880:0, v1752:0, v1764:0) -> f_849(v1738:0, v1745:0, v1880:0, 1 + v1752:0, v1764:0) :|: v1764:0 > 2 && v1880:0 > 0 && v1738:0 > 2 && v1745:0 > 3 && v1752:0 > 2 && sum~cons_1~v1880:0 = 1 + v1880:0

----------------------------------------

(31) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(32)
Obligation:
Rules:
f_849(v1738:0:0, v1745:0:0, sum~cons_1~v1880:0:0, v1752:0:0, v1764:0:0) -> f_849(v1738:0:0, v1745:0:0, v1880:0:0, 1 + v1752:0:0, v1764:0:0) :|: v1745:0:0 > 3 && v1752:0:0 > 2 && v1738:0:0 > 2 && v1880:0:0 > 0 && v1764:0:0 > 2 && sum~cons_1~v1880:0:0 = 1 + v1880:0:0

----------------------------------------

(33) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_849(x, x1, x2, x3, x4)] = x2

The following rules are decreasing:
f_849(v1738:0:0, v1745:0:0, sum~cons_1~v1880:0:0, v1752:0:0, v1764:0:0) -> f_849(v1738:0:0, v1745:0:0, v1880:0:0, 1 + v1752:0:0, v1764:0:0) :|: v1745:0:0 > 3 && v1752:0:0 > 2 && v1738:0:0 > 2 && v1880:0:0 > 0 && v1764:0:0 > 2 && sum~cons_1~v1880:0:0 = 1 + v1880:0:0
The following rules are bounded:
f_849(v1738:0:0, v1745:0:0, sum~cons_1~v1880:0:0, v1752:0:0, v1764:0:0) -> f_849(v1738:0:0, v1745:0:0, v1880:0:0, 1 + v1752:0:0, v1764:0:0) :|: v1745:0:0 > 3 && v1752:0:0 > 2 && v1738:0:0 > 2 && v1880:0:0 > 0 && v1764:0:0 > 2 && sum~cons_1~v1880:0:0 = 1 + v1880:0:0

----------------------------------------

(34)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
