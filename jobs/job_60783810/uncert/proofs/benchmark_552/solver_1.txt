YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/NJmUF.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 589 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 36 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 31 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/NJmUF.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/NJmUF.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sle %7 10
		br %8, %9, %19
	9:
		store 1000, %3
		br %10
	10:
		%11 = load %3
		%12 = icmp sgt %11 1
		br %12, %13, %16
	13:
		%14 = load %3
		%15 = sub i32 %14, 1
		store %15, %3
		br %10
	16:
		%17 = load %2
		%18 = add i32 %17, 1
		store %18, %2
		br %6
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 27 rulesP rules:
f_298(v468, v469, v470, v471, v472, v473, 1, v475, v477, v478, v479, v480, v481, 0, 3, 9, 10, 2, 1000, 999, 4) -> f_299(v468, v469, v470, v471, v472, v473, 1, v475, v483, v478, v479, v480, v481, 0, 3, 9, 10, 2, 1000, 4, 999) :|: 1 + v483 = v475 && 1 <= v483 && v483 <= 999
f_299(v468, v469, v470, v471, v472, v473, 1, v475, v483, v478, v479, v480, v481, 0, 3, 9, 10, 2, 1000, 4, 999) -> f_300(v468, v469, v470, v471, v472, v473, 1, v475, v483, v478, v479, v480, v481, 0, 3, 9, 10, 2, 1000, 4, 999) :|: TRUE
f_300(v468, v469, v470, v471, v472, v473, 1, v475, v483, v478, v479, v480, v481, 0, 3, 9, 10, 2, 1000, 4, 999) -> f_301(v468, v469, v470, v471, v472, v473, 1, v475, v483, v478, v479, v480, v481, 0, 3, 9, 10, 2, 1000, 4, 999) :|: TRUE
f_301(v468, v469, v470, v471, v472, v473, 1, v475, v483, v478, v479, v480, v481, 0, 3, 9, 10, 2, 1000, 4, 999) -> f_302(v468, v469, v470, v471, v472, v473, 1, v483, v475, v478, v479, v480, v481, 0, 3, 9, 10, 2, 1000, 4, 999) :|: 0 = 0
f_302(v468, v469, v470, v471, v472, v473, 1, v483, v475, v478, v479, v480, v481, 0, 3, 9, 10, 2, 1000, 4, 999) -> f_303(v468, v469, v470, v471, v472, v473, 1, v483, v475, v478, v479, v480, v481, 0, 3, 9, 10, 1000, 4, 2, 999) :|: 1 < v483 && 3 <= v475
f_302(v468, v469, v470, v471, v472, v473, 1, v483, v475, v478, v479, v480, v481, 0, 3, 9, 10, 2, 1000, 4, 999) -> f_304(v468, v469, v470, v471, v472, v473, 1, 2, v478, v479, v480, v481, 0, 3, 9, 10, 4) :|: v483 <= 1 && v475 = 2 && v483 = 1 && 0 = 0
f_303(v468, v469, v470, v471, v472, v473, 1, v483, v475, v478, v479, v480, v481, 0, 3, 9, 10, 1000, 4, 2, 999) -> f_305(v468, v469, v470, v471, v472, v473, 1, v483, v475, v478, v479, v480, v481, 0, 3, 9, 10, 1000, 4, 2, 999) :|: 0 = 0
f_305(v468, v469, v470, v471, v472, v473, 1, v483, v475, v478, v479, v480, v481, 0, 3, 9, 10, 1000, 4, 2, 999) -> f_307(v468, v469, v470, v471, v472, v473, 1, v483, v475, v478, v479, v480, v481, 0, 3, 9, 10, 1000, 4, 2, 999) :|: TRUE
f_307(v468, v469, v470, v471, v472, v473, 1, v483, v475, v478, v479, v480, v481, 0, 3, 9, 10, 1000, 4, 2, 999) -> f_297(v468, v469, v470, v471, v472, v473, 1, v483, v475, v483, v478, v479, v480, v481, 0, 3, 9, 10, 2, 1000, 999, 4) :|: TRUE
f_297(v468, v469, v470, v471, v472, v473, 1, v475, v476, v477, v478, v479, v480, v481, 0, 3, 9, 10, 2, 1000, 999, 4) -> f_298(v468, v469, v470, v471, v472, v473, 1, v475, v477, v478, v479, v480, v481, 0, 3, 9, 10, 2, 1000, 999, 4) :|: 0 = 0
f_304(v468, v469, v470, v471, v472, v473, 1, 2, v478, v479, v480, v481, 0, 3, 9, 10, 4) -> f_306(v468, v469, v470, v471, v472, v473, 1, 0, 2, v478, v479, v480, v481, 3, 9, 10, 4) :|: 0 = 0
f_306(v468, v469, v470, v471, v472, v473, 1, 0, 2, v478, v479, v480, v481, 3, 9, 10, 4) -> f_308(v468, v469, v470, v471, v472, v473, 1, 0, 2, v478, v479, v480, v481, 3, 9, 10, 4) :|: TRUE
f_308(v468, v469, v470, v471, v472, v473, 1, 0, 2, v478, v479, v480, v481, 3, 9, 10, 4) -> f_309(v468, v469, v470, v471, v472, v473, 1, 0, 2, v479, v480, v481, 3, 9, 10, 4) :|: 0 = 0
f_309(v468, v469, v470, v471, v472, v473, 1, 0, 2, v479, v480, v481, 3, 9, 10, 4) -> f_310(v468, v469, v470, v471, v472, v473, 1, 0, 2, v532, v479, v480, v481, 3, 9, 10, 4, 11) :|: v532 = 1 + v473 && v532 <= 11
f_310(v468, v469, v470, v471, v472, v473, 1, 0, 2, v532, v479, v480, v481, 3, 9, 10, 4, 11) -> f_311(v468, v469, v470, v471, v472, v473, 1, 0, 2, v532, v479, v480, v481, 3, 9, 10, 4, 11) :|: TRUE
f_311(v468, v469, v470, v471, v472, v473, 1, 0, 2, v532, v479, v480, v481, 3, 9, 10, 4, 11) -> f_312(v468, v469, v470, v471, v472, v473, 1, 0, 2, v532, v479, v480, v481, 3, 9, 10, 4, 11) :|: TRUE
f_312(v468, v469, v470, v471, v472, v473, 1, 0, 2, v532, v479, v480, v481, 3, 9, 10, 4, 11) -> f_313(v468, v469, v470, v471, v472, v532, 1, 0, 2, v473, v479, v480, v481, 3, 9, 10, 4, 11) :|: 0 = 0
f_313(v468, v469, v470, v471, v472, v532, 1, 0, 2, v473, v479, v480, v481, 3, 9, 10, 4, 11) -> f_314(v468, v469, v470, v471, v472, v532, 1, 0, 2, v473, v479, v480, v481, 3, 8, 9, 4, 10) :|: v532 <= 10 && v473 <= 9 && v471 <= 8
f_314(v468, v469, v470, v471, v472, v532, 1, 0, 2, v473, v479, v480, v481, 3, 8, 9, 4, 10) -> f_316(v468, v469, v470, v471, v472, v532, 1, 0, 2, v473, v479, v480, v481, 3, 8, 9, 4, 10) :|: 0 = 0
f_316(v468, v469, v470, v471, v472, v532, 1, 0, 2, v473, v479, v480, v481, 3, 8, 9, 4, 10) -> f_318(v468, v469, v470, v471, v472, v532, 1, 0, 2, v473, v479, v480, v481, 3, 8, 9, 4, 10) :|: TRUE
f_318(v468, v469, v470, v471, v472, v532, 1, 0, 2, v473, v479, v480, v481, 3, 8, 9, 4, 10) -> f_320(v468, v469, v470, v471, v472, v532, 1, 0, 2, v473, v479, v480, v481, 1000, 3, 8, 9, 4, 10) :|: TRUE
f_320(v468, v469, v470, v471, v472, v532, 1, 0, 2, v473, v479, v480, v481, 1000, 3, 8, 9, 4, 10) -> f_321(v468, v469, v470, v471, v472, v532, 1, 0, 2, v473, v479, v480, v481, 1000, 3, 8, 9, 4, 10) :|: TRUE
f_321(v468, v469, v470, v471, v472, v532, 1, 0, 2, v473, v479, v480, v481, 1000, 3, 8, 9, 4, 10) -> f_322(v468, v469, v470, v471, v472, v532, 1, 0, 2, v473, v479, v480, v481, 1000, 3, 9, 10, 4) :|: TRUE
f_322(v561, v562, v563, v564, v565, v566, 1, 0, 2, v570, v571, v572, v573, 1000, 3, 9, 10, 4) -> f_323(v561, v562, v563, v564, v565, v566, 1, 1000, 0, 2, v570, v571, v572, v573, 3, 9, 10, 4) :|: 0 = 0
f_323(v561, v562, v563, v564, v565, v566, 1, 1000, 0, 2, v570, v571, v572, v573, 3, 9, 10, 4) -> f_324(v561, v562, v563, v564, v565, v566, 1, 1000, 2, v570, v571, v572, v573, 0, 3, 9, 10, 4) :|: 0 = 0
f_324(v561, v562, v563, v564, v565, v566, 1, 1000, 2, v570, v571, v572, v573, 0, 3, 9, 10, 4) -> f_325(v561, v562, v563, v564, v565, v566, 1, 1000, 2, v570, v571, v572, v573, 0, 3, 9, 10, 4) :|: TRUE
f_325(v561, v562, v563, v564, v565, v566, 1, 1000, 2, v570, v571, v572, v573, 0, 3, 9, 10, 4) -> f_297(v561, v562, v563, v564, v565, v566, 1, 1000, 2, 1, v570, v571, v572, v573, 0, 3, 9, 10, 2, 1000, 999, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_298(v468:0, v469:0, v470:0, v471:0, v472:0, v473:0, 1, 1 + v483:0, v477:0, v478:0, v479:0, v480:0, v481:0, 0, 3, 9, 10, 2, 1000, 999, 4) -> f_298(v468:0, v469:0, v470:0, v471:0, v472:0, v473:0, 1, v483:0, v483:0, v478:0, v479:0, v480:0, v481:0, 0, 3, 9, 10, 2, 1000, 999, 4) :|: v483:0 > 1 && v483:0 < 1000
f_298(v468:0, v469:0, v470:0, v471:0, v472:0, v473:0, 1, 2, v477:0, v478:0, v479:0, v480:0, v481:0, 0, 3, 9, 10, 2, 1000, 999, 4) -> f_298(v468:0, v469:0, v470:0, v471:0, v472:0, 1 + v473:0, 1, 1000, 1, v473:0, v479:0, v480:0, v481:0, 0, 3, 9, 10, 2, 1000, 999, 4) :|: v473:0 < 11 && v473:0 < 10 && v471:0 < 9
Filtered unneeded arguments:
   f_298(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_298(x4, x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_298(v471:0, v473:0, sum~cons_1~v483:0) -> f_298(v471:0, v473:0, v483:0) :|: v483:0 > 1 && v483:0 < 1000 && sum~cons_1~v483:0 = 1 + v483:0
f_298(v471:0, v473:0, cons_2) -> f_298(v471:0, 1 + v473:0, 1000) :|: v473:0 < 10 && v471:0 < 9 && v473:0 < 11 && cons_2 = 2

----------------------------------------

(9)
Obligation:
Rules:
f_298(v471:0, v473:0, sum~cons_1~v483:0) -> f_298(v471:0, v473:0, v483:0) :|: v483:0 > 1 && v483:0 < 1000 && sum~cons_1~v483:0 = 1 + v483:0
f_298(x, x1, x2) -> f_298(x, 1 + x1, 1000) :|: x1 < 10 && x < 9 && x1 < 11 && x2 = 2

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_298(x:0, x1:0, cons_2) -> f_298(x:0, 1 + x1:0, 1000) :|: x1:0 < 10 && x:0 < 9 && x1:0 < 11 && cons_2 = 2
f_298(v471:0:0, v473:0:0, sum~cons_1~v483:0:0) -> f_298(v471:0:0, v473:0:0, v483:0:0) :|: v483:0:0 > 1 && v483:0:0 < 1000 && sum~cons_1~v483:0:0 = 1 + v483:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_298(x, x1, x2)] = 17 - x - x1

The following rules are decreasing:
f_298(x:0, x1:0, cons_2) -> f_298(x:0, 1 + x1:0, 1000) :|: x1:0 < 10 && x:0 < 9 && x1:0 < 11 && cons_2 = 2
The following rules are bounded:
f_298(x:0, x1:0, cons_2) -> f_298(x:0, 1 + x1:0, 1000) :|: x1:0 < 10 && x:0 < 9 && x1:0 < 11 && cons_2 = 2

----------------------------------------

(13)
Obligation:
Rules:
f_298(v471:0:0, v473:0:0, sum~cons_1~v483:0:0) -> f_298(v471:0:0, v473:0:0, v483:0:0) :|: v483:0:0 > 1 && v483:0:0 < 1000 && sum~cons_1~v483:0:0 = 1 + v483:0:0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_298(v471:0:0:0, v473:0:0:0, sum~cons_1~v483:0:0:0) -> f_298(v471:0:0:0, v473:0:0:0, v483:0:0:0) :|: v483:0:0:0 > 1 && v483:0:0:0 < 1000 && sum~cons_1~v483:0:0:0 = 1 + v483:0:0:0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_298(x1, x2, x3) -> f_298(x3)

----------------------------------------

(17)
Obligation:
Rules:
f_298(sum~cons_1~v483:0:0:0) -> f_298(v483:0:0:0) :|: v483:0:0:0 > 1 && v483:0:0:0 < 1000 && sum~cons_1~v483:0:0:0 = 1 + v483:0:0:0

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_298(x)] = x

The following rules are decreasing:
f_298(sum~cons_1~v483:0:0:0) -> f_298(v483:0:0:0) :|: v483:0:0:0 > 1 && v483:0:0:0 < 1000 && sum~cons_1~v483:0:0:0 = 1 + v483:0:0:0
The following rules are bounded:
f_298(sum~cons_1~v483:0:0:0) -> f_298(v483:0:0:0) :|: v483:0:0:0 > 1 && v483:0:0:0 < 1000 && sum~cons_1~v483:0:0:0 = 1 + v483:0:0:0

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 9 rulesP rules:
f_185(v87, v88, v89, v90, v91, 1, v94, v93, v95, v96, v97, 0, 3, 10, 2, 1000, 999, 4) -> f_186(v87, v88, v89, v90, v91, 1, v94, v93, v95, v96, v97, 0, 3, 10, 1000, 2, 999, 4) :|: 1 < v94 && 3 <= v93
f_186(v87, v88, v89, v90, v91, 1, v94, v93, v95, v96, v97, 0, 3, 10, 1000, 2, 999, 4) -> f_188(v87, v88, v89, v90, v91, 1, v94, v93, v95, v96, v97, 0, 3, 10, 1000, 2, 999, 4) :|: 0 = 0
f_188(v87, v88, v89, v90, v91, 1, v94, v93, v95, v96, v97, 0, 3, 10, 1000, 2, 999, 4) -> f_190(v87, v88, v89, v90, v91, 1, v94, v93, v95, v96, v97, 0, 3, 10, 1000, 2, 999, 4) :|: TRUE
f_190(v87, v88, v89, v90, v91, 1, v94, v93, v95, v96, v97, 0, 3, 10, 1000, 2, 999, 4) -> f_192(v87, v88, v89, v90, v91, 1, v94, v95, v96, v97, 0, 3, 10, 2, 999, 4) :|: 0 = 0
f_192(v87, v88, v89, v90, v91, 1, v94, v95, v96, v97, 0, 3, 10, 2, 999, 4) -> f_194(v87, v88, v89, v90, v91, 1, v94, v99, v95, v96, v97, 0, 3, 10, 2, 999, 4, 998) :|: 1 + v99 = v94 && 1 <= v99 && v99 <= 998
f_194(v87, v88, v89, v90, v91, 1, v94, v99, v95, v96, v97, 0, 3, 10, 2, 999, 4, 998) -> f_196(v87, v88, v89, v90, v91, 1, v94, v99, v95, v96, v97, 0, 3, 10, 2, 999, 4, 998) :|: TRUE
f_196(v87, v88, v89, v90, v91, 1, v94, v99, v95, v96, v97, 0, 3, 10, 2, 999, 4, 998) -> f_198(v87, v88, v89, v90, v91, 1, v94, v99, v95, v96, v97, 0, 3, 10, 2, 999, 4, 998) :|: TRUE
f_198(v87, v88, v89, v90, v91, 1, v94, v99, v95, v96, v97, 0, 3, 10, 2, 999, 4, 998) -> f_184(v87, v88, v89, v90, v91, 1, v94, v99, v95, v96, v97, 0, 3, 10, 2, 1000, 999, 4) :|: TRUE
f_184(v87, v88, v89, v90, v91, 1, v93, v94, v95, v96, v97, 0, 3, 10, 2, 1000, 999, 4) -> f_185(v87, v88, v89, v90, v91, 1, v94, v93, v95, v96, v97, 0, 3, 10, 2, 1000, 999, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_185(v87:0, v88:0, v89:0, v90:0, v91:0, 1, 1 + v99:0, v93:0, v95:0, v96:0, v97:0, 0, 3, 10, 2, 1000, 999, 4) -> f_185(v87:0, v88:0, v89:0, v90:0, v91:0, 1, v99:0, 1 + v99:0, v95:0, v96:0, v97:0, 0, 3, 10, 2, 1000, 999, 4) :|: v93:0 > 2 && v99:0 > 0 && v99:0 < 999
Filtered unneeded arguments:
   f_185(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_185(x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_185(sum~cons_1~v99:0, v93:0) -> f_185(v99:0, 1 + v99:0) :|: v99:0 > 0 && v99:0 < 999 && v93:0 > 2 && sum~cons_1~v99:0 = 1 + v99:0

----------------------------------------

(22)
Obligation:
Rules:
f_185(sum~cons_1~v99:0, v93:0) -> f_185(v99:0, 1 + v99:0) :|: v99:0 > 0 && v99:0 < 999 && v93:0 > 2 && sum~cons_1~v99:0 = 1 + v99:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_185(sum~cons_1~v99:0:0, v93:0:0) -> f_185(v99:0:0, 1 + v99:0:0) :|: v99:0:0 > 0 && v99:0:0 < 999 && v93:0:0 > 2 && sum~cons_1~v99:0:0 = 1 + v99:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_185(x, x1)] = x

The following rules are decreasing:
f_185(sum~cons_1~v99:0:0, v93:0:0) -> f_185(v99:0:0, 1 + v99:0:0) :|: v99:0:0 > 0 && v99:0:0 < 999 && v93:0:0 > 2 && sum~cons_1~v99:0:0 = 1 + v99:0:0
The following rules are bounded:
f_185(sum~cons_1~v99:0:0, v93:0:0) -> f_185(v99:0:0, 1 + v99:0:0) :|: v99:0:0 > 0 && v99:0:0 < 999 && v93:0:0 > 2 && sum~cons_1~v99:0:0 = 1 + v99:0:0

----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
