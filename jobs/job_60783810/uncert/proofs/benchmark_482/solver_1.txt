YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/rRxxF.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 784 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [EQUIVALENT, 80 ms]
(6) IntTRS
(7) IRSToKoat [EQUIVALENT, 0 ms]
(8) Koat Problem
(9) KoAT2 [EQUIVALENT, 43 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/rRxxF.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/rRxxF.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		store 0, %5
		br %8
	8:
		%9 = load %3
		%10 = icmp sgt %9 0
		br %10, %11, %18
	11:
		%12 = load %2
		store %12, %4
		%13 = load %3
		%14 = sub i32 %13, 1
		store %14, %2
		%15 = load %4
		store %15, %3
		%16 = load %5
		%17 = add i32 %16, 1
		store %17, %5
		br %8
	18:
		%19 = load %5
		%20 = load %2
		%21 = add i32 %19, %20
		store %21, %5
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 66 rulesP rules:
f_109 -> f_110(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_110(v1, v2, 3, 1, 4) -> f_111(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_111(v1, v3, v2, v4, 3, 1, 4) -> f_112(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_112(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_113(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_113(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_114(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) :|: 1 <= v9 && v10 = 3 + v9 && 4 <= v10
f_114(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) -> f_115(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_115(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_116(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_116(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_117(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_117(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_118(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_118(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_119(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_119(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_120(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_120(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_121(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_121(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_122(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_122(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_123(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_123(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_124(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_124(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_125(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_125(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_126(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: 0 = 0
f_126(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_127(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: 0 < v13
f_126(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_128(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: v13 <= 0
f_127(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_129(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_128(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_130(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_129(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_131(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_130(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_132(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_131(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_133(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_132(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_134(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_133(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_135(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_134(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_136(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_135(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_137(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_136(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_138(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_137(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, v10, 0, 3, 4) -> f_139(v1, v3, v5, v7, v9, v11, v13, 1, v16, v2, v4, v6, v8, v10, 0, 3, 4) :|: 1 + v16 = v13 && 0 <= v16
f_138(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_140(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_139(v1, v3, v5, v7, v9, v11, v13, 1, v16, v2, v4, v6, v8, v10, 0, 3, 4) -> f_141(v1, v3, v5, v7, v9, v11, v13, 1, v16, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_141(v1, v3, v5, v7, v9, v11, v13, 1, v16, v2, v4, v6, v8, v10, 0, 3, 4) -> f_142(v1, v3, v5, v7, v9, v11, v13, 1, v16, v2, v4, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_142(v1, v3, v5, v7, v9, v11, v13, 1, v16, v2, v4, v6, v8, v10, 0, 3, 4) -> f_143(v1, v3, v5, v7, v9, v11, v13, 1, v16, v2, v4, v6, v8, v10, 0, 3, 4) :|: TRUE
f_143(v1, v3, v5, v7, v9, v11, v13, 1, v16, v2, v4, v6, v8, v10, 0, 3, 4) -> f_144(v1, v3, v5, v7, v9, v11, v13, 1, v16, 0, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_144(v1, v3, v5, v7, v9, v11, v13, 1, v16, 0, v2, v4, v6, v8, v10, 3, 4) -> f_145(v1, v3, v5, v7, v9, v11, v13, 1, v16, 0, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_145(v1, v3, v5, v7, v9, v11, v13, 1, v16, 0, v2, v4, v6, v8, v10, 3, 4) -> f_146(v1, v3, v5, v7, v9, v11, v13, 1, v16, 0, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_146(v1, v3, v5, v7, v9, v11, v13, 1, v16, 0, v2, v4, v6, v8, v10, 3, 4) -> f_147(v1, v3, v5, v7, v9, v11, v13, 1, v16, 0, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_147(v1, v3, v5, v7, v9, v11, v13, 1, v16, 0, v2, v4, v6, v8, v10, 3, 4) -> f_170(v1, v3, v5, v7, v9, v11, v13, v13, 1, v11, v16, 0, 1, v2, v4, v6, v8, v10, 0, 3, 2, 4) :|: TRUE
f_170(v25, v26, v27, v28, v29, v30, v31, v32, 1, v34, v35, v36, v37, v38, v39, v40, v41, v42, 0, 3, 2, 4) -> f_193(v25, v26, v27, v28, v29, v30, v31, v32, 1, v34, v35, v36, v37, v38, v39, v40, v41, v42, 0, 3, 2, 4) :|: TRUE
f_193(v52, v53, v54, v55, v56, v57, v58, v59, 1, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, 3, 2, 4) -> f_216(v52, v53, v54, v55, v56, v57, v58, v59, 1, v61, v62, v63, v64, v65, v66, v67, v68, v69, 0, 3, 4) :|: TRUE
f_216(v79, v80, v81, v82, v83, v84, v85, v86, 1, v88, v89, v90, v91, v92, v93, v94, v95, v96, 0, 3, 4) -> f_239(v79, v80, v81, v82, v83, v84, v85, v86, 1, v88, v89, v90, v91, v92, v93, v94, v95, v96, 0, 3, 4) :|: TRUE
f_239(v106, v107, v108, v109, v110, v111, v112, v113, 1, v115, v116, v117, v118, v119, v120, v121, v122, v123, 0, 3, 4) -> f_262(v106, v107, v108, v109, v110, v111, v112, v113, 1, v115, v116, v117, v118, v119, v120, v121, v122, v123, 0, 3, 4) :|: TRUE
f_262(v133, v134, v135, v136, v137, v138, v139, v140, 1, v142, v143, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) -> f_263(v133, v134, v135, v136, v137, v138, v139, v142, 1, v140, v143, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) :|: 0 = 0
f_263(v133, v134, v135, v136, v137, v138, v139, v142, 1, v140, v143, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) -> f_264(v133, v134, v135, v136, v137, v138, v139, v142, 1, v140, v143, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) :|: 0 < v142
f_263(v133, v134, v135, v136, v137, v138, v139, v142, 1, v140, v143, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) -> f_265(v133, v134, v135, v136, v137, v138, v139, v142, 1, v140, v143, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) :|: v142 <= 0
f_264(v133, v134, v135, v136, v137, v138, v139, v142, 1, v140, v143, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) -> f_266(v133, v134, v135, v136, v137, v138, v139, v142, 1, v140, v143, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) :|: 0 = 0
f_265(v133, v134, v135, v136, v137, v138, v139, v142, 1, v140, v143, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) -> f_267(v133, v134, v135, v136, v137, v138, v139, v142, 0, v140, v143, v144, v145, v146, v147, v148, v149, v150, 3, 1, 4) :|: 0 = 0
f_266(v133, v134, v135, v136, v137, v138, v139, v142, 1, v140, v143, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) -> f_268(v133, v134, v135, v136, v137, v138, v139, v142, 1, v140, v143, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) :|: TRUE
f_267(v133, v134, v135, v136, v137, v138, v139, v142, 0, v140, v143, v144, v145, v146, v147, v148, v149, v150, 3, 1, 4) -> f_269(v133, v134, v135, v136, v137, v138, v139, v142, 0, v140, v143, v144, v145, v146, v147, v148, v149, v150, 3, 1, 4) :|: TRUE
f_268(v133, v134, v135, v136, v137, v138, v139, v142, 1, v140, v143, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) -> f_270(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v140, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) :|: 0 = 0
f_269(v133, v134, v135, v136, v137, v138, v139, v142, 0, v140, v143, v144, v145, v146, v147, v148, v149, v150, 3, 1, 4) -> f_271(v133, v134, v135, v136, v137, v138, v139, v142, 0, v140, v143, v144, v145, v146, v147, v148, v149, v150, 3, 1, 4) :|: 0 = 0
f_270(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v140, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) -> f_272(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v140, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) :|: TRUE
f_271(v133, v134, v135, v136, v137, v138, v139, v142, 0, v140, v143, v144, v145, v146, v147, v148, v149, v150, 3, 1, 4) -> f_273(v133, v134, v135, v136, v137, v138, v139, v142, 0, v140, v143, v144, v145, v146, v147, v148, v149, v150, 3, 1, 4) :|: 0 = 0
f_272(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v140, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) -> f_274(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) :|: 0 = 0
f_273(v133, v134, v135, v136, v137, v138, v139, v142, 0, v140, v143, v144, v145, v146, v147, v148, v149, v150, 3, 1, 4) -> f_275(v133, v134, v135, v136, v137, v138, v139, v142, 0, v140, v143, v144, v145, v153, v146, v147, v148, v149, v150, 3, 1, 4) :|: v153 = v145 + v143 && 1 <= v153
f_274(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) -> f_276(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) :|: 1 + v154 = v142 && 0 <= v154
f_275(v133, v134, v135, v136, v137, v138, v139, v142, 0, v140, v143, v144, v145, v153, v146, v147, v148, v149, v150, 3, 1, 4) -> f_277(v133, v134, v135, v136, v137, v138, v139, v142, 0, v140, v143, v144, v145, v153, v146, v147, v148, v149, v150, 3, 1, 4) :|: TRUE
f_276(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) -> f_278(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) :|: TRUE
f_278(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) -> f_279(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) :|: 0 = 0
f_279(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) -> f_280(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) :|: TRUE
f_280(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v144, v145, v146, v147, v148, v149, v150, 0, 3, 4) -> f_281(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v145, v146, v147, v148, v149, v150, 0, 3, 4) :|: 0 = 0
f_281(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v145, v146, v147, v148, v149, v150, 0, 3, 4) -> f_282(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v145, v158, v146, v147, v148, v149, v150, 0, 3, 4, 2) :|: v158 = 1 + v145 && 2 <= v158
f_282(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v145, v158, v146, v147, v148, v149, v150, 0, 3, 4, 2) -> f_283(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v145, v158, v146, v147, v148, v149, v150, 0, 3, 4, 2) :|: TRUE
f_283(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v145, v158, v146, v147, v148, v149, v150, 0, 3, 4, 2) -> f_284(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v145, v158, v146, v147, v148, v149, v150, 0, 3, 4, 2) :|: TRUE
f_284(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v145, v158, v146, v147, v148, v149, v150, 0, 3, 4, 2) -> f_262(v133, v134, v135, v136, v137, v138, v139, v142, 1, v143, v154, v145, v158, v146, v147, v148, v149, v150, 0, 3, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_263(v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, v142:0, 1, v140:0, v143:0, v144:0, v145:0, v146:0, v147:0, v148:0, v149:0, v150:0, 0, 3, 4) -> f_277(v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, v142:0, 0, v140:0, v143:0, v144:0, v145:0, v145:0 + v143:0, v146:0, v147:0, v148:0, v149:0, v150:0, 3, 1, 4) :|: v145:0 + v143:0 > 0 && v142:0 < 1
f_109 -> f_140(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v13:0 < 1
f_263(v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, 1 + v154:0, 1, v140:0, v143:0, v144:0, v145:0, v146:0, v147:0, v148:0, v149:0, v150:0, 0, 3, 4) -> f_263(v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, v143:0, 1, 1 + v154:0, v154:0, v145:0, 1 + v145:0, v146:0, v147:0, v148:0, v149:0, v150:0, 0, 3, 4) :|: v154:0 > -1 && v145:0 > 0
f_109 -> f_263(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, 1 + v16:0, v11:0, 1, 1 + v16:0, v16:0, 0, 1, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v16:0 > -1
Filtered unneeded arguments:
   f_263(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_263(x8, x11, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_263(v142:0, v143:0, v145:0) -> f_277(v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, v142:0, 0, v140:0, v143:0, v144:0, v145:0, v145:0 + v143:0, v146:0, v147:0, v148:0, v149:0, v150:0, 3, 1, 4) :|: v145:0 + v143:0 > 0 && v142:0 < 1
f_109 -> f_140(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v7:0 > 0 && v13:0 < 1 && v9:0 > 0
f_263(sum~cons_1~v154:0, v143:0, v145:0) -> f_263(v143:0, v154:0, 1 + v145:0) :|: v154:0 > -1 && v145:0 > 0 && sum~cons_1~v154:0 = 1 + v154:0
f_109 -> f_263(v11:0, v16:0, 1) :|: v16:0 > -1

----------------------------------------

(6)
Obligation:
Rules:
f_263(v142:0, v143:0, v145:0) -> f_277(v133:0, v134:0, v135:0, v136:0, v137:0, v138:0, v139:0, v142:0, 0, v140:0, v143:0, v144:0, v145:0, v145:0 + v143:0, v146:0, v147:0, v148:0, v149:0, v150:0, 3, 1, 4) :|: v145:0 + v143:0 > 0 && v142:0 < 1
f_109 -> f_140(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v7:0 > 0 && v13:0 < 1 && v9:0 > 0
f_263(x, x1, x2) -> f_263(x1, x3, 1 + x2) :|: x3 > -1 && x2 > 0 && x = 1 + x3
f_109 -> f_263(x4, x5, 1) :|: x5 > -1
Start term: f_109

----------------------------------------

(7) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(8)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_109))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 k29 x40 x41 k25 k26 k27 k28 k21 k22 k23 k24 k20 x39 x35 x36 x37 x38 x31 x32 x33 x34 k18 k19 x30 x70 x68 x69 x64 x65 x66 x67 x60 x61 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x58 x59 x53 x54 x55 x56 x50 x51 x52 x90 x91 x92 x120 x122 x121 x86 x87 x123 x88 x89 x x82 x83 x84 x85 x80 x81 x79 x111 x110 x75 x113 x76 x112 x'' x77 x115 x78 x114 x71 x117 x72 x116 x73 x119 x74 x118 k14 k15 x109 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x7 x27 x20 x102 x21 x101 x22 x104 x23 x103 x106 x1 x105 x108 x107 x' x17 x18 x19 x13 x14 x15 x16 x97 x10 x98 x11 x99 x12 x93 x94 x95 x96)
(RULES
  f_109(x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57) -> f_140(k25, k6, k9, k11, k12, k23, k24, 0, 3 + k25, 3 + k6, 3 + k9, 3 + k11, 3 + k12, 3, 1, 4, x58, x59, x60, x61, x62, x63) :|: k25 > 0 && k6 > 0 && k9 > 0 && k11 > 0 && k24 < 1 && k12 > 0
  f_263(k14, k15, k8, x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_263(k15, k10, 1 + k8, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35) :|: k10 > -1 && k8 > 0 && k14 = 1 + k10
  f_109(x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82, x83, x84, x85) -> f_263(k5, k7, 1, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99, x100, x101, x102, x103, x104) :|: k7 > -1
  f_263(k27, k29, k1, x105, x106, x107, x108, x109, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x120, x121, x122, x123) -> f_277(k16, k17, k18, k19, k20, k21, k22, k27, 0, k26, k29, k28, k1, k1 + k29, k0, k3, k2, k4, k13, 3, 1, 4) :|: k1 + k29 > 0 && k27 < 1
)

----------------------------------------

(9) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_3003724373305988260.koat 

KoAT2's output was:

YES

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
