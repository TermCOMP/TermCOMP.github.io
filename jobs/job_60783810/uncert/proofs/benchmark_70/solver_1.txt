YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/eqS8H.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2171 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 44 ms]
(8) IntTRS
(9) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/eqS8H.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/eqS8H.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "f" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		%8 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%11 = alloca i8, numElementsLit: 4, align 16
		%12 = bitcast *i8 %11 to *i32
		store %12, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%13 = alloca i8, numElementsLit: 4, align 16
		%14 = bitcast *i8 %13 to *i32
		store %14, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %8)
		%15 = alloca i8, numElementsLit: 4, align 16
		%16 = bitcast *i8 %15 to *i32
		store %16, %8
		%17 = load %3
		%18 = load %5
		store %17, %18
		%19 = load %4
		%20 = load %6
		store %19, %20
		%21 = load %7
		store 1, %21
		%22 = load %8
		store 0, %22
		br %23
	23:
		%24 = load %7
		%25 = load %24
		%26 = icmp ne %25 0
		br %26, %27, %40
	27:
		%28 = load %5
		%29 = load %28
		%30 = add i32 %29, 1
		store %30, %28
		%31 = load %6
		%32 = load %31
		%33 = icmp slt %29 %32
		%34 = zext i1 %33 to i32
		%35 = load %7
		store %34, %35
		%36 = load %8
		%37 = load %36
		%38 = add i32 %37, 1
		%39 = load %8
		store %38, %39
		br %23
	40:
		%41 = load %8
		%42 = load %41
		ret %42

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 60
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @f(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_477(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_478(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: 0 = 0
f_478(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_479(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: 0 = 0
f_479(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_480(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: TRUE
f_480(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_481(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: 0 = 0
f_481(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_482(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: 0 = 0
f_482(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_483(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: v351 = 1 + v335
f_483(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_484(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: TRUE
f_484(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_485(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: 0 = 0
f_485(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_486(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: 0 = 0
f_486(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_487(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: v335 < v322
f_487(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_489(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: 0 = 0
f_489(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_491(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: 0 = 0
f_491(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_493(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: 0 = 0
f_493(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_495(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: TRUE
f_495(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_497(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: 0 = 0
f_497(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_499(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: 0 = 0
f_499(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_501(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v337, v353, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8, 2) :|: v353 = 1 + v337 && 2 <= v353
f_501(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v337, v353, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8, 2) -> f_503(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v337, v353, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_503(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v337, v353, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8, 2) -> f_505(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v337, v353, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8, 2) :|: TRUE
f_505(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v337, v353, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8, 2) -> f_507(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v337, v353, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8, 2) :|: TRUE
f_507(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v337, v353, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8, 2) -> f_476(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v335, v351, v337, v353, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: TRUE
f_476(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) -> f_477(v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 1, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_477(v321:0, v322:0, v323:0, v324:0, v325:0, v326:0, v327:0, v328:0, v329:0, v330:0, v331:0, v332:0, 1, v334:0, v335:0, v336:0, v337:0, v338:0, v339:0, v340:0, v341:0, v342:0, v343:0, v344:0, v345:0, v346:0, v347:0, v348:0, v349:0, 0, 3, 7, 4, 8) -> f_477(v321:0, v322:0, v323:0, v324:0, v325:0, v326:0, v327:0, v328:0, v329:0, v330:0, v331:0, v332:0, 1, v335:0, 1 + v335:0, v337:0, 1 + v337:0, v338:0, v339:0, v340:0, v341:0, v342:0, v343:0, v344:0, v345:0, v346:0, v347:0, v348:0, v349:0, 0, 3, 7, 4, 8) :|: v337:0 > 0 && v335:0 < v322:0
Filtered unneeded arguments:
   f_477(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34) -> f_477(x2, x15, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_477(v322:0, v335:0, v337:0) -> f_477(v322:0, 1 + v335:0, 1 + v337:0) :|: v337:0 > 0 && v335:0 < v322:0

----------------------------------------

(8)
Obligation:
Rules:
f_477(v322:0, v335:0, v337:0) -> f_477(v322:0, 1 + v335:0, 1 + v337:0) :|: v337:0 > 0 && v335:0 < v322:0

----------------------------------------

(9) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_477(x, x1, x2)] = -1 + x - x1

The following rules are decreasing:
f_477(v322:0, v335:0, v337:0) -> f_477(v322:0, 1 + v335:0, 1 + v337:0) :|: v337:0 > 0 && v335:0 < v322:0
The following rules are bounded:
f_477(v322:0, v335:0, v337:0) -> f_477(v322:0, 1 + v335:0, 1 + v337:0) :|: v337:0 > 0 && v335:0 < v322:0

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
