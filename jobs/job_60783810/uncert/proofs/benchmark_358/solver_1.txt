YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/XwQ1M.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 410 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 29 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 11 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/XwQ1M.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/XwQ1M.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store 12, %2
		store 0, %3
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %4
		br %6
	6:
		%7 = load %4
		%8 = icmp sgt %7 0
		br %8, %9, %16
	9:
		%10 = load %2
		%11 = add i32 %10, 1
		store %11, %2
		%12 = load %3
		%13 = sub i32 %12, 1
		store %13, %3
		%14 = load %4
		%15 = sub i32 %14, 1
		store %15, %4
		br %6
	16:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_170(v61, v62, v63, v64, v65, v72, 1, v68, v69, v70, v71, v66, v73, v74, v75, v76, 0, 3, 12, 13, 4) -> f_171(v61, v62, v63, v64, v65, v72, 1, v68, v69, v70, v71, v66, v73, v74, v75, v76, 0, 3, 2, 12, 13, 4) :|: 0 < v72 && 2 <= v66 && 2 <= v65
f_171(v61, v62, v63, v64, v65, v72, 1, v68, v69, v70, v71, v66, v73, v74, v75, v76, 0, 3, 2, 12, 13, 4) -> f_173(v61, v62, v63, v64, v65, v72, 1, v68, v69, v70, v71, v66, v73, v74, v75, v76, 0, 3, 2, 12, 13, 4) :|: 0 = 0
f_173(v61, v62, v63, v64, v65, v72, 1, v68, v69, v70, v71, v66, v73, v74, v75, v76, 0, 3, 2, 12, 13, 4) -> f_175(v61, v62, v63, v64, v65, v72, 1, v68, v69, v70, v71, v66, v73, v74, v75, v76, 0, 3, 2, 12, 13, 4) :|: TRUE
f_175(v61, v62, v63, v64, v65, v72, 1, v68, v69, v70, v71, v66, v73, v74, v75, v76, 0, 3, 2, 12, 13, 4) -> f_177(v61, v62, v63, v64, v65, v72, 1, v69, v70, v71, v66, v73, v74, v75, v76, 0, 3, 2, 13, 4) :|: 0 = 0
f_177(v61, v62, v63, v64, v65, v72, 1, v69, v70, v71, v66, v73, v74, v75, v76, 0, 3, 2, 13, 4) -> f_178(v61, v62, v63, v64, v65, v72, 1, v69, v78, v70, v71, v66, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) :|: v78 = 1 + v69 && 14 <= v78
f_178(v61, v62, v63, v64, v65, v72, 1, v69, v78, v70, v71, v66, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) -> f_179(v61, v62, v63, v64, v65, v72, 1, v69, v78, v70, v71, v66, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) :|: TRUE
f_179(v61, v62, v63, v64, v65, v72, 1, v69, v78, v70, v71, v66, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) -> f_180(v61, v62, v63, v64, v65, v72, 1, v69, v78, v71, v66, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) :|: 0 = 0
f_180(v61, v62, v63, v64, v65, v72, 1, v69, v78, v71, v66, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) -> f_181(v61, v62, v63, v64, v65, v72, 1, v69, v78, v71, v80, v66, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) :|: 1 + v80 = v71 && 2 + v80 <= 0
f_181(v61, v62, v63, v64, v65, v72, 1, v69, v78, v71, v80, v66, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) -> f_182(v61, v62, v63, v64, v65, v72, 1, v69, v78, v71, v80, v66, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) :|: TRUE
f_182(v61, v62, v63, v64, v65, v72, 1, v69, v78, v71, v80, v66, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) -> f_183(v61, v62, v63, v64, v65, v72, 1, v69, v78, v71, v80, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) :|: 0 = 0
f_183(v61, v62, v63, v64, v65, v72, 1, v69, v78, v71, v80, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) -> f_184(v61, v62, v63, v64, v65, v72, 1, v69, v78, v71, v80, v82, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) :|: 1 + v82 = v72 && 0 <= v82
f_184(v61, v62, v63, v64, v65, v72, 1, v69, v78, v71, v80, v82, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) -> f_185(v61, v62, v63, v64, v65, v72, 1, v69, v78, v71, v80, v82, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) :|: TRUE
f_185(v61, v62, v63, v64, v65, v72, 1, v69, v78, v71, v80, v82, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) -> f_186(v61, v62, v63, v64, v65, v72, 1, v69, v78, v71, v80, v82, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) :|: TRUE
f_186(v61, v62, v63, v64, v65, v72, 1, v69, v78, v71, v80, v82, v73, v74, v75, v76, 0, 3, 2, 13, 4, 14) -> f_169(v61, v62, v63, v64, v65, v72, 1, v69, v78, v71, v80, v82, v73, v74, v75, v76, 0, 3, 12, 13, 4) :|: TRUE
f_169(v61, v62, v63, v64, v65, v66, 1, v68, v69, v70, v71, v72, v73, v74, v75, v76, 0, 3, 12, 13, 4) -> f_170(v61, v62, v63, v64, v65, v72, 1, v68, v69, v70, v71, v66, v73, v74, v75, v76, 0, 3, 12, 13, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_170(v61:0, v62:0, v63:0, v64:0, v65:0, 1 + v82:0, 1, v68:0, v69:0, v70:0, 1 + v80:0, v66:0, v73:0, v74:0, v75:0, v76:0, 0, 3, 12, 13, 4) -> f_170(v61:0, v62:0, v63:0, v64:0, v65:0, v82:0, 1, v69:0, 1 + v69:0, 1 + v80:0, v80:0, 1 + v82:0, v73:0, v74:0, v75:0, v76:0, 0, 3, 12, 13, 4) :|: v66:0 > 1 && v82:0 > -1 && v65:0 > 1 && v69:0 > 12 && v80:0 < -1
Filtered unneeded arguments:
   f_170(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_170(x5, x6, x9, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_170(v65:0, sum~cons_1~v82:0, v69:0, sum~cons_1~v80:0, v66:0) -> f_170(v65:0, v82:0, 1 + v69:0, v80:0, 1 + v82:0) :|: v82:0 > -1 && v66:0 > 1 && v65:0 > 1 && v80:0 < -1 && v69:0 > 12 && sum~cons_1~v82:0 = 1 + v82:0 && sum~cons_1~v80:0 = 1 + v80:0

----------------------------------------

(8)
Obligation:
Rules:
f_170(v65:0, sum~cons_1~v82:0, v69:0, sum~cons_1~v80:0, v66:0) -> f_170(v65:0, v82:0, 1 + v69:0, v80:0, 1 + v82:0) :|: v82:0 > -1 && v66:0 > 1 && v65:0 > 1 && v80:0 < -1 && v69:0 > 12 && sum~cons_1~v82:0 = 1 + v82:0 && sum~cons_1~v80:0 = 1 + v80:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_170(v65:0:0, sum~cons_1~v82:0:0, v69:0:0, sum~cons_1~v80:0:0, v66:0:0) -> f_170(v65:0:0, v82:0:0, 1 + v69:0:0, v80:0:0, 1 + v82:0:0) :|: v80:0:0 < -1 && v69:0:0 > 12 && v65:0:0 > 1 && v66:0:0 > 1 && v82:0:0 > -1 && sum~cons_1~v82:0:0 = 1 + v82:0:0 && sum~cons_1~v80:0:0 = 1 + v80:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_170(x, x1, x2, x3, x4)] = x1

The following rules are decreasing:
f_170(v65:0:0, sum~cons_1~v82:0:0, v69:0:0, sum~cons_1~v80:0:0, v66:0:0) -> f_170(v65:0:0, v82:0:0, 1 + v69:0:0, v80:0:0, 1 + v82:0:0) :|: v80:0:0 < -1 && v69:0:0 > 12 && v65:0:0 > 1 && v66:0:0 > 1 && v82:0:0 > -1 && sum~cons_1~v82:0:0 = 1 + v82:0:0 && sum~cons_1~v80:0:0 = 1 + v80:0:0
The following rules are bounded:
f_170(v65:0:0, sum~cons_1~v82:0:0, v69:0:0, sum~cons_1~v80:0:0, v66:0:0) -> f_170(v65:0:0, v82:0:0, 1 + v69:0:0, v80:0:0, 1 + v82:0:0) :|: v80:0:0 < -1 && v69:0:0 > 12 && v65:0:0 > 1 && v66:0:0 > 1 && v82:0:0 > -1 && sum~cons_1~v82:0:0 = 1 + v82:0:0 && sum~cons_1~v80:0:0 = 1 + v80:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
