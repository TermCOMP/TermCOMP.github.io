YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/MHkxD.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 47 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1709 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 100 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 11 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/MHkxD.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/MHkxD.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "f" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = icmp eq %6 0
		br %7, %8, %10
	8:
		%9 = load %5
		store %9, %3
		br %16
	10:
		%11 = load %4
		%12 = sub i32 %11, 1
		%13 = load %5
		%14 = load %4
		%15 = call i32 @g(i32 %12, i32 %13, i32 %14)
		store %15, %3
		br %16
	16:
		%17 = load %3
		ret %17

*BasicFunctionTypename: "g" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 31
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		%7 = load %4
		%8 = load %5
		%9 = load %6
		%10 = add i32 %8, %9
		%11 = call i32 @f(i32 %7, i32 %10)
		ret %11

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 46
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = load %2
		%7 = icmp sge %6 0
		br %7, %8, %15
	8:
		%9 = load %3
		%10 = icmp sge %9 0
		br %10, %11, %15
	11:
		%12 = load %2
		%13 = load %3
		%14 = call i32 @f(i32 %12, i32 %13)
		br %15
	15:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 33 rulesP rules:
f_295(v98, v99, v109, v100, v101, v102, v103, v104, v105, v110, 0, v107, v108, 3, 1, 4) -> f_296(v98, v99, v109, v111, v100, v101, v102, v103, v104, v105, v110, v112, 0, v107, v108, 3, 1, 4) :|: 1 <= v111 && v112 = 3 + v111 && 4 <= v112
f_296(v98, v99, v109, v111, v100, v101, v102, v103, v104, v105, v110, v112, 0, v107, v108, 3, 1, 4) -> f_297(v98, v99, v109, v111, v113, v100, v101, v102, v103, v104, v105, v110, v112, v114, 0, v107, v108, 3, 1, 4) :|: 1 <= v113 && v114 = 3 + v113 && 4 <= v114
f_297(v98, v99, v109, v111, v113, v100, v101, v102, v103, v104, v105, v110, v112, v114, 0, v107, v108, 3, 1, 4) -> f_298(v98, v99, v109, v111, v113, v100, v101, v102, v103, v104, v105, v110, v112, v114, 0, v107, v108, 3, 1, 4) :|: TRUE
f_298(v98, v99, v109, v111, v113, v100, v101, v102, v103, v104, v105, v110, v112, v114, 0, v107, v108, 3, 1, 4) -> f_299(v98, v99, v109, v111, v113, v100, v101, v102, v103, v104, v105, v110, v112, v114, 0, v107, v108, 3, 1, 4) :|: TRUE
f_299(v98, v99, v109, v111, v113, v100, v101, v102, v103, v104, v105, v110, v112, v114, 0, v107, v108, 3, 1, 4) -> f_300(v98, v99, v109, v111, v113, v100, v101, v102, v103, v104, v105, v110, v112, v114, 0, v107, v108, 3, 1, 4) :|: TRUE
f_300(v98, v99, v109, v111, v113, v100, v101, v102, v103, v104, v105, v110, v112, v114, 0, v107, v108, 3, 1, 4) -> f_301(v98, v99, v109, v111, v113, v100, v101, v102, v103, v104, v105, v110, v112, v114, 0, v107, v108, 3, 1, 4) :|: TRUE
f_301(v98, v99, v109, v111, v113, v100, v101, v102, v103, v104, v105, v110, v112, v114, 0, v107, v108, 3, 1, 4) -> f_302(v98, v99, v109, v111, v113, v100, v101, v102, v103, v104, v105, v110, v112, v114, 0, v107, v108, 3, 1, 4) :|: 0 = 0
f_302(v98, v99, v109, v111, v113, v100, v101, v102, v103, v104, v105, v110, v112, v114, 0, v107, v108, 3, 1, 4) -> f_304(v98, v99, v109, v111, v113, v100, v101, v102, v103, v104, v105, v110, v112, v114, 0, v107, v108, 3, 1, 4) :|: v98 != 0 && 1 <= v107
f_304(v98, v99, v109, v111, v113, v100, v101, v102, v103, v104, v105, v110, v112, v114, 0, v107, v108, 3, 1, 4) -> f_306(v98, v99, v109, v111, v113, 0, v100, v101, v102, v103, v104, v105, v110, v112, v114, v107, v108, 3, 1, 4) :|: 0 = 0
f_306(v98, v99, v109, v111, v113, 0, v100, v101, v102, v103, v104, v105, v110, v112, v114, v107, v108, 3, 1, 4) -> f_308(v98, v99, v109, v111, v113, 0, v100, v101, v102, v103, v104, v105, v110, v112, v114, v107, v108, 3, 1, 4) :|: TRUE
f_308(v98, v99, v109, v111, v113, 0, v100, v101, v102, v103, v104, v105, v110, v112, v114, v107, v108, 3, 1, 4) -> f_310(v98, v99, v109, v111, v113, 0, v100, v101, v102, v103, v104, v105, v110, v112, v114, v107, v108, 3, 1, 4) :|: 0 = 0
f_310(v98, v99, v109, v111, v113, 0, v100, v101, v102, v103, v104, v105, v110, v112, v114, v107, v108, 3, 1, 4) -> f_312(v98, v99, v109, v111, v113, 0, v118, v100, v101, v102, v103, v104, v105, v110, v112, v114, v107, v108, 3, 1, 4) :|: 1 + v118 = v98 && 0 <= v118
f_312(v98, v99, v109, v111, v113, 0, v118, v100, v101, v102, v103, v104, v105, v110, v112, v114, v107, v108, 3, 1, 4) -> f_314(v98, v99, v109, v111, v113, 0, v118, v100, v101, v102, v103, v104, v105, v110, v112, v114, v107, v108, 3, 1, 4) :|: 0 = 0
f_314(v98, v99, v109, v111, v113, 0, v118, v100, v101, v102, v103, v104, v105, v110, v112, v114, v107, v108, 3, 1, 4) -> f_316(v98, v99, v109, v111, v113, 0, v118, v100, v101, v102, v103, v104, v105, v110, v112, v114, v107, v108, 3, 1, 4) :|: 0 = 0
f_316(v98, v99, v109, v111, v113, 0, v118, v100, v101, v102, v103, v104, v105, v110, v112, v114, v107, v108, 3, 1, 4) -> f_318(v118, v99, v98, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, 0, v107, v108, 3, 1, 4) :|: 0 = 0
f_318(v118, v99, v98, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, 0, v107, v108, 3, 1, 4) -> f_320(v118, v99, v98, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, 0, v107, v108, 3, 1, 4) :|: TRUE
f_320(v118, v99, v98, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, 0, v107, v108, 3, 1, 4) -> f_322(v118, v99, v98, v138, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, 0, v107, v108, 3, 1, 4) :|: 1 <= v138 && v139 = 3 + v138 && 4 <= v139
f_322(v118, v99, v98, v138, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, 0, v107, v108, 3, 1, 4) -> f_323(v118, v99, v98, v138, v140, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, 0, v107, v108, 3, 1, 4) :|: 1 <= v140 && v141 = 3 + v140 && 4 <= v141
f_323(v118, v99, v98, v138, v140, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, 0, v107, v108, 3, 1, 4) -> f_324(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) :|: 1 <= v142 && v143 = 3 + v142 && 4 <= v143
f_324(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) -> f_325(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) :|: TRUE
f_325(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) -> f_326(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) :|: TRUE
f_326(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) -> f_327(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) :|: TRUE
f_327(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) -> f_328(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) :|: TRUE
f_328(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) -> f_329(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) :|: TRUE
f_329(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) -> f_330(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) :|: TRUE
f_330(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) -> f_331(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) :|: 0 = 0
f_331(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) -> f_332(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) :|: 0 = 0
f_332(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) -> f_333(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) :|: 0 = 0
f_333(v118, v99, v98, v138, v140, v142, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) -> f_334(v118, v99, v98, v138, v140, v142, v147, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) :|: v147 = v99 + v98 && 1 <= v147
f_334(v118, v99, v98, v138, v140, v142, v147, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v139, v141, v143, 0, v107, v108, 3, 1, 4) -> f_335(v118, v147, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v138, v139, v140, v141, v142, v143, 0, v107, v108, v98, v99, 3, 1, 4) :|: 0 = 0
f_335(v118, v147, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v138, v139, v140, v141, v142, v143, 0, v107, v108, v98, v99, 3, 1, 4) -> f_336(v118, v147, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v138, v139, v140, v141, v142, v143, 0, v107, v108, v98, v99, 3, 1, 4) :|: TRUE
f_336(v118, v147, v100, v101, v102, v103, v104, v105, v109, v110, v111, v112, v113, v114, v138, v139, v140, v141, v142, v143, 0, v107, v108, v98, v99, 3, 1, 4) -> f_294(v118, v147, v100, v101, v102, v103, v104, v105, 0, v107, v108, 3, 1, 4) :|: TRUE
f_294(v98, v99, v100, v101, v102, v103, v104, v105, 0, v107, v108, 3, 1, 4) -> f_295(v98, v99, v109, v100, v101, v102, v103, v104, v105, v110, 0, v107, v108, 3, 1, 4) :|: 1 <= v109 && v110 = 3 + v109 && 4 <= v110
Combined rules. Obtained 1 rulesP rules:
f_295(1 + v118:0, v99:0, v109:0, v100:0, v101:0, v102:0, v103:0, v104:0, v105:0, v110:0, 0, v107:0, v108:0, 3, 1, 4) -> f_295(v118:0, v99:0 + (1 + v118:0), v109:1, v100:0, v101:0, v102:0, v103:0, v104:0, v105:0, 3 + v109:1, 0, v107:0, v108:0, 3, 1, 4) :|: v113:0 > 0 && v111:0 > 0 && v107:0 > 0 && v118:0 > -1 && v138:0 > 0 && v140:0 > 0 && v142:0 > 0 && v99:0 + (1 + v118:0) > 0 && v109:1 > 0
Filtered unneeded arguments:
   f_295(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_295(x1, x2, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_295(sum~cons_1~v118:0, v99:0, v107:0) -> f_295(v118:0, v99:0 + (1 + v118:0), v107:0) :|: v118:0 > -1 && v99:0 + (1 + v118:0) > 0 && v107:0 > 0 && sum~cons_1~v118:0 = 1 + v118:0

----------------------------------------

(8)
Obligation:
Rules:
f_295(sum~cons_1~v118:0, v99:0, v107:0) -> f_295(v118:0, v99:0 + (1 + v118:0), v107:0) :|: v118:0 > -1 && v99:0 + (1 + v118:0) > 0 && v107:0 > 0 && sum~cons_1~v118:0 = 1 + v118:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_295(sum~cons_1~v118:0:0, v99:0:0, v107:0:0) -> f_295(v118:0:0, v99:0:0 + (1 + v118:0:0), v107:0:0) :|: v118:0:0 > -1 && v99:0:0 + (1 + v118:0:0) > 0 && v107:0:0 > 0 && sum~cons_1~v118:0:0 = 1 + v118:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_295(x, x1, x2)] = x

The following rules are decreasing:
f_295(sum~cons_1~v118:0:0, v99:0:0, v107:0:0) -> f_295(v118:0:0, v99:0:0 + (1 + v118:0:0), v107:0:0) :|: v118:0:0 > -1 && v99:0:0 + (1 + v118:0:0) > 0 && v107:0:0 > 0 && sum~cons_1~v118:0:0 = 1 + v118:0:0
The following rules are bounded:
f_295(sum~cons_1~v118:0:0, v99:0:0, v107:0:0) -> f_295(v118:0:0, v99:0:0 + (1 + v118:0:0), v107:0:0) :|: v118:0:0 > -1 && v99:0:0 + (1 + v118:0:0) > 0 && v107:0:0 > 0 && sum~cons_1~v118:0:0 = 1 + v118:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
