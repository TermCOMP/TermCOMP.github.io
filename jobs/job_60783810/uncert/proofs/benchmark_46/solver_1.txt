YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/1S8d6.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 55 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3334 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 63 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 15 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 65 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/1S8d6.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/1S8d6.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %7
		%14 = load %3
		%15 = load %5
		store %14, %15
		%16 = load %4
		%17 = load %6
		store %16, %17
		%18 = load %7
		store 0, %18
		br %19
	19:
		%20 = load %5
		%21 = load %20
		%22 = icmp sge %21 0
		br %22, %23, %46
	23:
		%24 = load %6
		store 0, %24
		br %25
	25:
		%26 = load %6
		%27 = load %26
		%28 = load %5
		%29 = load %28
		%30 = sub i32 %29, 1
		%31 = icmp sle %27 %30
		br %31, %32, %41
	32:
		%33 = load %6
		%34 = load %33
		%35 = add i32 %34, 1
		%36 = load %6
		store %35, %36
		%37 = load %7
		%38 = load %37
		%39 = add i32 %38, 1
		%40 = load %7
		store %39, %40
		br %25
	41:
		%42 = load %5
		%43 = load %42
		%44 = sub i32 %43, 1
		%45 = load %5
		store %44, %45
		br %19
	46:
		%47 = load %7
		%48 = load %47
		ret %48

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 71
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 46 rulesP rules:
f_734(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, v913, 0, v915, v916, v917, v918, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 4, 8) -> f_735(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, 0, v913, v915, v916, v917, v918, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 4, 8) :|: 0 = 0
f_735(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, 0, v913, v915, v916, v917, v918, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 4, 8) -> f_736(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, 0, v913, v915, v916, v917, v918, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 4, 8) :|: 0 = 0
f_736(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, 0, v913, v915, v916, v917, v918, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 4, 8) -> f_737(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, 0, v915, v916, v917, v918, v913, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 4, 8) :|: 0 = 0
f_737(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, 0, v915, v916, v917, v918, v913, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 4, 8) -> f_738(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, 0, v944, v915, v916, v917, v918, v913, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 4, 8) :|: 1 + v944 = v911 && 0 <= 1 + v944
f_738(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, 0, v944, v915, v916, v917, v918, v913, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 4, 8) -> f_739(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, 0, v944, v915, v916, v917, v918, v913, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 2, 4, 8) :|: 0 <= v944 && 1 <= v911 && 2 <= v913 && 2 <= v901 && 2 <= v916 && 1 <= v915 && 2 <= v918 && 1 <= v917
f_739(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, 0, v944, v915, v916, v917, v918, v913, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 2, 4, 8) -> f_741(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, 0, v944, v915, v916, v917, v918, v913, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 2, 4, 8) :|: 0 = 0
f_741(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, 0, v944, v915, v916, v917, v918, v913, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 2, 4, 8) -> f_743(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, 0, v944, v915, v916, v917, v918, v913, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 2, 4, 8) :|: TRUE
f_743(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, 0, v944, v915, v916, v917, v918, v913, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 2, 4, 8) -> f_744(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, 0, v944, v915, v916, v917, v918, v913, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 0, 3, 7, 2, 4, 8) :|: TRUE
f_744(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_746(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_746(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v977, v978, v979, v980, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_748(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v978, v979, v980, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_748(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v978, v979, v980, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_750(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v979, v980, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: v1003 = 1 + v975 && 1 <= v1003
f_750(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v979, v980, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_752(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v979, v980, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_752(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v979, v980, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_754(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v979, v980, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: TRUE
f_754(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v979, v980, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_756(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v979, v980, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_756(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v979, v980, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_758(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v980, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_758(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v980, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_760(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: v1021 = 1 + v980 && 3 <= v1021
f_760(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_762(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_762(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_764(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: TRUE
f_764(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_766(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: TRUE
f_766(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_768(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_768(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v975, v976, v1003, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_770(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_770(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_772(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_772(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_773(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_773(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_774(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: 1 + v976 = v973
f_774(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_775(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: v1003 <= v976 && 1 <= v976 && 2 <= v973 && 3 <= v981 && 3 <= v963 && 3 <= v980 && 4 <= v1021
f_774(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_776(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: v976 < v1003 && v973 = v1003 && v976 = v975
f_775(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_777(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_777(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_779(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: TRUE
f_779(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_744(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v973, 1, v1003, v976, v975, v1003, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) :|: TRUE
f_776(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 0, 3, 7, 2, 4, 8) -> f_778(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) :|: 0 = 0
f_778(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) -> f_780(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) :|: TRUE
f_780(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) -> f_781(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) :|: 0 = 0
f_781(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v981, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) -> f_782(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) :|: 0 = 0
f_782(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) -> f_783(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) :|: 1 + v975 = v1003
f_783(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) -> f_784(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) :|: 0 = 0
f_784(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) -> f_785(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) :|: TRUE
f_785(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) -> f_786(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) :|: TRUE
f_786(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) -> f_787(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) :|: 0 = 0
f_787(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v1003, 1, v975, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) -> f_788(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v975, 1, v1003, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) :|: 0 = 0
f_788(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v975, 1, v1003, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) -> f_789(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v975, 1, v1003, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) :|: 0 = 0
f_789(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v975, 1, v1003, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) -> f_790(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v975, 1, v1003, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) :|: TRUE
f_790(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v975, 1, v1003, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) -> f_791(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v975, 1, v1003, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) :|: 0 = 0
f_791(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v975, 1, v1003, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) -> f_792(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v975, 1, v1003, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) :|: TRUE
f_792(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v975, 1, v1003, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) -> f_793(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v975, 1, v1003, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) :|: TRUE
f_793(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v975, 1, v1003, 0, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 2, 4, 8) -> f_733(v963, v964, v965, v966, v967, v968, v969, v970, v971, v972, v975, 1, v1003, 0, v975, v1003, v980, v1021, v982, v983, v984, v985, v986, v987, v988, v989, v990, v991, 3, 7, 4, 8) :|: TRUE
f_733(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, v913, 0, v915, v916, v917, v918, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 4, 8) -> f_734(v901, v902, v903, v904, v905, v906, v907, v908, v909, v910, v911, 1, v913, 0, v915, v916, v917, v918, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_774(v963:0, v964:0, v965:0, v966:0, v967:0, v968:0, v969:0, v970:0, v971:0, v972:0, 1 + v976:0, 1, v1003:0, v976:0, v975:0, v980:0, v1021:0, v981:0, v982:0, v983:0, v984:0, v985:0, v986:0, v987:0, v988:0, v989:0, v990:0, v991:0, 0, 3, 7, 2, 4, 8) -> f_774(v963:0, v964:0, v965:0, v966:0, v967:0, v968:0, v969:0, v970:0, v971:0, v972:0, 1 + v976:0, 1, 1 + v1003:0, v976:0, v1003:0, v1021:0, 1 + v1021:0, v981:0, v982:0, v983:0, v984:0, v985:0, v986:0, v987:0, v988:0, v989:0, v990:0, v991:0, 0, 3, 7, 2, 4, 8) :|: v1021:0 > 3 && v1003:0 > -1 && v976:0 > 0 && v976:0 >= v1003:0 && v981:0 > 2 && v980:0 > 2 && v963:0 > 2
f_774(v963:0, v964:0, v965:0, v966:0, v967:0, v968:0, v969:0, v970:0, v971:0, v972:0, 1 + (1 + v944:0), 1, 1 + (1 + v944:0), 1 + v944:0, 1 + v944:0, v980:0, v1021:0, v981:0, v982:0, v983:0, v984:0, v985:0, v986:0, v987:0, v988:0, v989:0, v990:0, v991:0, 0, 3, 7, 2, 4, 8) -> f_774(v963:0, v964:0, v965:0, v966:0, v967:0, v968:0, v969:0, v970:0, v971:0, v972:0, 1 + v944:0, 1, 1, v944:0, 0, v1021:0, 1 + v1021:0, 1 + (1 + v944:0), v982:0, v983:0, v984:0, v985:0, v986:0, v987:0, v988:0, v989:0, v990:0, v991:0, 0, 3, 7, 2, 4, 8) :|: v944:0 > -1 && v963:0 > 1 && v1021:0 > 1 && v980:0 > 0 && 1 + v944:0 < 1 + (1 + v944:0)
Filtered unneeded arguments:
   f_774(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34) -> f_774(x1, x11, x13, x14, x15, x16, x17, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_774(v963:0, sum~cons_1~v976:0, v1003:0, v976:0, v975:0, v980:0, v1021:0, v981:0) -> f_774(v963:0, 1 + v976:0, 1 + v1003:0, v976:0, v1003:0, v1021:0, 1 + v1021:0, v981:0) :|: v1003:0 > -1 && v1021:0 > 3 && v976:0 > 0 && v976:0 >= v1003:0 && v981:0 > 2 && v963:0 > 2 && v980:0 > 2 && sum~cons_1~v976:0 = 1 + v976:0
f_774(v963:0, sum~cons_1~sum~cons_1~v944:0, sum~cons_1~sum~cons_1~v944:01, sum~cons_1~v944:0, sum~cons_1~v944:01, v980:0, v1021:0, v981:0) -> f_774(v963:0, 1 + v944:0, 1, v944:0, 0, v1021:0, 1 + v1021:0, 1 + (1 + v944:0)) :|: v963:0 > 1 && v944:0 > -1 && v1021:0 > 1 && 1 + v944:0 < 1 + (1 + v944:0) && v980:0 > 0 && sum~cons_1~sum~cons_1~v944:0 = 1 + (1 + v944:0) && sum~cons_1~sum~cons_1~v944:01 = 1 + (1 + v944:0) && sum~cons_1~v944:0 = 1 + v944:0 && sum~cons_1~v944:01 = 1 + v944:0

----------------------------------------

(9)
Obligation:
Rules:
f_774(v963:0, sum~cons_1~v976:0, v1003:0, v976:0, v975:0, v980:0, v1021:0, v981:0) -> f_774(v963:0, 1 + v976:0, 1 + v1003:0, v976:0, v1003:0, v1021:0, 1 + v1021:0, v981:0) :|: v1003:0 > -1 && v1021:0 > 3 && v976:0 > 0 && v976:0 >= v1003:0 && v981:0 > 2 && v963:0 > 2 && v980:0 > 2 && sum~cons_1~v976:0 = 1 + v976:0
f_774(x, x1, x2, x3, x4, x5, x6, x7) -> f_774(x, 1 + x8, 1, x8, 0, x6, 1 + x6, 1 + (1 + x8)) :|: x > 1 && x8 > -1 && x6 > 1 && 1 + x8 < 1 + (1 + x8) && x5 > 0 && x1 = 1 + (1 + x8) && x2 = 1 + (1 + x8) && x3 = 1 + x8 && x4 = 1 + x8

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_774(v963:0:0, sum~cons_1~v976:0:0, v1003:0:0, v976:0:0, v975:0:0, v980:0:0, v1021:0:0, v981:0:0) -> f_774(v963:0:0, 1 + v976:0:0, 1 + v1003:0:0, v976:0:0, v1003:0:0, v1021:0:0, 1 + v1021:0:0, v981:0:0) :|: v963:0:0 > 2 && v980:0:0 > 2 && v981:0:0 > 2 && v976:0:0 >= v1003:0:0 && v976:0:0 > 0 && v1021:0:0 > 3 && v1003:0:0 > -1 && sum~cons_1~v976:0:0 = 1 + v976:0:0
f_774(x:0, sum~cons_1~sum~cons_1~x8:0, sum~cons_1~sum~cons_1~x8:01, sum~cons_1~x8:0, sum~cons_1~x8:01, x5:0, x6:0, x7:0) -> f_774(x:0, 1 + x8:0, 1, x8:0, 0, x6:0, 1 + x6:0, 1 + (1 + x8:0)) :|: 1 + x8:0 < 1 + (1 + x8:0) && x5:0 > 0 && x6:0 > 1 && x8:0 > -1 && x:0 > 1 && sum~cons_1~sum~cons_1~x8:0 = 1 + (1 + x8:0) && sum~cons_1~sum~cons_1~x8:01 = 1 + (1 + x8:0) && sum~cons_1~x8:0 = 1 + x8:0 && sum~cons_1~x8:01 = 1 + x8:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_774 ] = f_774_4

The following rules are decreasing:
f_774(x:0, sum~cons_1~sum~cons_1~x8:0, sum~cons_1~sum~cons_1~x8:01, sum~cons_1~x8:0, sum~cons_1~x8:01, x5:0, x6:0, x7:0) -> f_774(x:0, 1 + x8:0, 1, x8:0, 0, x6:0, 1 + x6:0, 1 + (1 + x8:0)) :|: 1 + x8:0 < 1 + (1 + x8:0) && x5:0 > 0 && x6:0 > 1 && x8:0 > -1 && x:0 > 1 && sum~cons_1~sum~cons_1~x8:0 = 1 + (1 + x8:0) && sum~cons_1~sum~cons_1~x8:01 = 1 + (1 + x8:0) && sum~cons_1~x8:0 = 1 + x8:0 && sum~cons_1~x8:01 = 1 + x8:0

The following rules are bounded:
f_774(v963:0:0, sum~cons_1~v976:0:0, v1003:0:0, v976:0:0, v975:0:0, v980:0:0, v1021:0:0, v981:0:0) -> f_774(v963:0:0, 1 + v976:0:0, 1 + v1003:0:0, v976:0:0, v1003:0:0, v1021:0:0, 1 + v1021:0:0, v981:0:0) :|: v963:0:0 > 2 && v980:0:0 > 2 && v981:0:0 > 2 && v976:0:0 >= v1003:0:0 && v976:0:0 > 0 && v1021:0:0 > 3 && v1003:0:0 > -1 && sum~cons_1~v976:0:0 = 1 + v976:0:0
f_774(x:0, sum~cons_1~sum~cons_1~x8:0, sum~cons_1~sum~cons_1~x8:01, sum~cons_1~x8:0, sum~cons_1~x8:01, x5:0, x6:0, x7:0) -> f_774(x:0, 1 + x8:0, 1, x8:0, 0, x6:0, 1 + x6:0, 1 + (1 + x8:0)) :|: 1 + x8:0 < 1 + (1 + x8:0) && x5:0 > 0 && x6:0 > 1 && x8:0 > -1 && x:0 > 1 && sum~cons_1~sum~cons_1~x8:0 = 1 + (1 + x8:0) && sum~cons_1~sum~cons_1~x8:01 = 1 + (1 + x8:0) && sum~cons_1~x8:0 = 1 + x8:0 && sum~cons_1~x8:01 = 1 + x8:0


----------------------------------------

(13)
Obligation:
Rules:
f_774(v963:0:0, sum~cons_1~v976:0:0, v1003:0:0, v976:0:0, v975:0:0, v980:0:0, v1021:0:0, v981:0:0) -> f_774(v963:0:0, 1 + v976:0:0, 1 + v1003:0:0, v976:0:0, v1003:0:0, v1021:0:0, 1 + v1021:0:0, v981:0:0) :|: v963:0:0 > 2 && v980:0:0 > 2 && v981:0:0 > 2 && v976:0:0 >= v1003:0:0 && v976:0:0 > 0 && v1021:0:0 > 3 && v1003:0:0 > -1 && sum~cons_1~v976:0:0 = 1 + v976:0:0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_774(v963:0:0:0, sum~cons_1~v976:0:0:0, v1003:0:0:0, v976:0:0:0, v975:0:0:0, v980:0:0:0, v1021:0:0:0, v981:0:0:0) -> f_774(v963:0:0:0, 1 + v976:0:0:0, 1 + v1003:0:0:0, v976:0:0:0, v1003:0:0:0, v1021:0:0:0, 1 + v1021:0:0:0, v981:0:0:0) :|: v1021:0:0:0 > 3 && v1003:0:0:0 > -1 && v976:0:0:0 > 0 && v976:0:0:0 >= v1003:0:0:0 && v981:0:0:0 > 2 && v980:0:0:0 > 2 && v963:0:0:0 > 2 && sum~cons_1~v976:0:0:0 = 1 + v976:0:0:0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_774(x1, x2, x3, x4, x5, x6, x7, x8) -> f_774(x1, x2, x3, x4, x6, x7, x8)

----------------------------------------

(17)
Obligation:
Rules:
f_774(v963:0:0:0, sum~cons_1~v976:0:0:0, v1003:0:0:0, v976:0:0:0, v980:0:0:0, v1021:0:0:0, v981:0:0:0) -> f_774(v963:0:0:0, 1 + v976:0:0:0, 1 + v1003:0:0:0, v976:0:0:0, v1021:0:0:0, 1 + v1021:0:0:0, v981:0:0:0) :|: v1021:0:0:0 > 3 && v1003:0:0:0 > -1 && v976:0:0:0 > 0 && v976:0:0:0 >= v1003:0:0:0 && v981:0:0:0 > 2 && v980:0:0:0 > 2 && v963:0:0:0 > 2 && sum~cons_1~v976:0:0:0 = 1 + v976:0:0:0

----------------------------------------

(18) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_774 ] = -1*f_774_3 + f_774_4

The following rules are decreasing:
f_774(v963:0:0:0, sum~cons_1~v976:0:0:0, v1003:0:0:0, v976:0:0:0, v980:0:0:0, v1021:0:0:0, v981:0:0:0) -> f_774(v963:0:0:0, 1 + v976:0:0:0, 1 + v1003:0:0:0, v976:0:0:0, v1021:0:0:0, 1 + v1021:0:0:0, v981:0:0:0) :|: v1021:0:0:0 > 3 && v1003:0:0:0 > -1 && v976:0:0:0 > 0 && v976:0:0:0 >= v1003:0:0:0 && v981:0:0:0 > 2 && v980:0:0:0 > 2 && v963:0:0:0 > 2 && sum~cons_1~v976:0:0:0 = 1 + v976:0:0:0

The following rules are bounded:
f_774(v963:0:0:0, sum~cons_1~v976:0:0:0, v1003:0:0:0, v976:0:0:0, v980:0:0:0, v1021:0:0:0, v981:0:0:0) -> f_774(v963:0:0:0, 1 + v976:0:0:0, 1 + v1003:0:0:0, v976:0:0:0, v1021:0:0:0, 1 + v1021:0:0:0, v981:0:0:0) :|: v1021:0:0:0 > 3 && v1003:0:0:0 > -1 && v976:0:0:0 > 0 && v976:0:0:0 >= v1003:0:0:0 && v981:0:0:0 > 2 && v980:0:0:0 > 2 && v963:0:0:0 > 2 && sum~cons_1~v976:0:0:0 = 1 + v976:0:0:0


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_498(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 4, 8) -> f_499(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 4, 8) :|: 0 = 0
f_499(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 4, 8) -> f_500(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 4, 8) :|: 0 = 0
f_500(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 4, 8) -> f_501(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 4, 8) :|: 0 = 0
f_501(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 4, 8) -> f_502(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 4, 8) :|: 1 + v186 = v174
f_502(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 4, 8) -> f_503(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) :|: v187 <= v186 && 1 <= v186 && 2 <= v174
f_503(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) -> f_505(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_505(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) -> f_507(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) :|: TRUE
f_507(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) -> f_509(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_509(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) -> f_511(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_511(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) -> f_513(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) :|: v199 = 1 + v187 && 2 <= v199
f_513(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) -> f_515(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_515(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) -> f_517(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) :|: TRUE
f_517(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) -> f_519(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_519(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v185, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) -> f_521(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_521(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) -> f_523(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) :|: v199 = 1 + v187
f_523(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) -> f_525(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_525(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) -> f_527(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) :|: TRUE
f_527(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) -> f_529(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) :|: TRUE
f_529(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 2, 4, 8) -> f_497(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v187, v186, v199, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 4, 8) :|: TRUE
f_497(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 4, 8) -> f_498(v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, 1, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_498(1 + v186:0, v175:0, v176:0, v177:0, v178:0, v179:0, v180:0, v181:0, v182:0, v183:0, 1, v185:0, v186:0, v187:0, v188:0, v189:0, v190:0, v191:0, v192:0, v193:0, v194:0, v195:0, v196:0, v197:0, 0, 3, 7, 4, 8) -> f_498(1 + v186:0, v175:0, v176:0, v177:0, v178:0, v179:0, v180:0, v181:0, v182:0, v183:0, 1, v187:0, v186:0, 1 + v187:0, v188:0, v189:0, v190:0, v191:0, v192:0, v193:0, v194:0, v195:0, v196:0, v197:0, 0, 3, 7, 4, 8) :|: v186:0 > 0 && v187:0 <= v186:0 && v187:0 > 0
Filtered unneeded arguments:
   f_498(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_498(x1, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_498(sum~cons_1~v186:0, v186:0, v187:0) -> f_498(1 + v186:0, v186:0, 1 + v187:0) :|: v187:0 <= v186:0 && v187:0 > 0 && v186:0 > 0 && sum~cons_1~v186:0 = 1 + v186:0

----------------------------------------

(22)
Obligation:
Rules:
f_498(sum~cons_1~v186:0, v186:0, v187:0) -> f_498(1 + v186:0, v186:0, 1 + v187:0) :|: v187:0 <= v186:0 && v187:0 > 0 && v186:0 > 0 && sum~cons_1~v186:0 = 1 + v186:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_498(sum~cons_1~v186:0:0, v186:0:0, v187:0:0) -> f_498(1 + v186:0:0, v186:0:0, 1 + v187:0:0) :|: v187:0:0 <= v186:0:0 && v187:0:0 > 0 && v186:0:0 > 0 && sum~cons_1~v186:0:0 = 1 + v186:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_498(x, x1, x2)] = x1 - x2

The following rules are decreasing:
f_498(sum~cons_1~v186:0:0, v186:0:0, v187:0:0) -> f_498(1 + v186:0:0, v186:0:0, 1 + v187:0:0) :|: v187:0:0 <= v186:0:0 && v187:0:0 > 0 && v186:0:0 > 0 && sum~cons_1~v186:0:0 = 1 + v186:0:0
The following rules are bounded:
f_498(sum~cons_1~v186:0:0, v186:0:0, v187:0:0) -> f_498(1 + v186:0:0, v186:0:0, 1 + v187:0:0) :|: v187:0:0 <= v186:0:0 && v187:0:0 > 0 && v186:0:0 > 0 && sum~cons_1~v186:0:0 = 1 + v186:0:0

----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
