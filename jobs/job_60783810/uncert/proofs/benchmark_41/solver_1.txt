YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/AlN6w.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1669 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 27 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 10 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (17) YES
    (18) LLVM Symbolic Execution SCC
        (19) SCC2IRS [SOUND, 24 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (24) YES
    (25) LLVM Symbolic Execution SCC
        (26) SCC2IRS [SOUND, 23 ms]
        (27) IntTRS
        (28) TerminationGraphProcessor [EQUIVALENT, 3 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/AlN6w.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/AlN6w.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %7
		%12 = load %4
		%13 = load %6
		store %12, %13
		%14 = load %5
		%15 = load %7
		store %14, %15
		br %16
	16:
		%17 = load %6
		%18 = load %17
		%19 = icmp sge %18 0
		br %19, %20, %45
	20:
		%21 = load %7
		store 1, %21
		br %22
	22:
		%23 = load %6
		%24 = load %23
		%25 = load %7
		%26 = load %25
		%27 = icmp sgt %24 %26
		br %27, %28, %40
	28:
		%29 = load %7
		%30 = load %29
		%31 = icmp sle %30 0
		br %31, %32, %35
	32:
		%33 = load %6
		%34 = load %33
		store %34, %3
		br %48
	35:
		%36 = load %7
		%37 = load %36
		%38 = mul i32 2, %37
		%39 = load %7
		store %38, %39
		br %22
	40:
		%41 = load %6
		%42 = load %41
		%43 = sub i32 %42, 1
		%44 = load %6
		store %43, %44
		br %16
	45:
		%46 = load %7
		%47 = load %46
		store %47, %3
		br %48
	48:
		%49 = load %3
		ret %49

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 70
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 49 rulesP rules:
f_663(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, v812, 0, v814, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_664(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v812, v814, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: 0 = 0
f_664(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v812, v814, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_665(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v812, v814, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: 0 = 0
f_665(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v812, v814, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_666(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v812, v814, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: TRUE
f_666(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v812, v814, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_667(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v812, v814, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: 0 = 0
f_667(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v812, v814, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_668(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v814, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: 0 = 0
f_668(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v814, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_669(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: v834 = 2 * v811 && 2 <= v834
f_669(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_670(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: 0 = 0
f_670(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_671(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: TRUE
f_671(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_672(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: TRUE
f_672(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_673(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: 0 = 0
f_673(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_674(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: 0 = 0
f_674(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_675(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: 0 = 0
f_675(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, 0, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_676(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, v811, 0, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: 0 = 0
f_676(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, v811, 0, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_677(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, v811, 0, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: v834 < v809 && 3 <= v809 && 4 <= v815 && 4 <= v800
f_676(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, v811, 0, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_678(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, v811, 0, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: v809 <= v834
f_677(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, v811, 0, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_679(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, v811, 0, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: 0 = 0
f_679(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, v811, 0, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_681(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, v811, 0, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: TRUE
f_681(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, v811, 0, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_662(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, v811, 0, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: TRUE
f_662(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, v812, 0, v814, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_663(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v811, v812, 0, v814, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: 0 = 0
f_678(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, v811, 0, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_680(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, 0, v811, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: 0 = 0
f_680(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, 0, v811, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_682(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, 0, v811, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: TRUE
f_682(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, 0, v811, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) -> f_707(v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, 1, v834, 0, v811, v834, v815, v816, v817, v818, v819, v820, v821, v822, v823, v824, 3, 7, 2, 4, 8) :|: TRUE
f_707(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110, 1, v1112, 0, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) -> f_708(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110, 1, v1112, 0, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) :|: 0 = 0
f_708(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110, 1, v1112, 0, v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) -> f_709(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110, 1, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) :|: 0 = 0
f_709(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110, 1, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) -> f_710(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110, 1, v1112, 0, v1114, v1115, v1126, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) :|: 1 + v1126 = v1110 && 0 <= 1 + v1126
f_710(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110, 1, v1112, 0, v1114, v1115, v1126, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) -> f_711(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110, 1, v1112, 0, v1114, v1115, v1126, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) :|: 0 = 0
f_711(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110, 1, v1112, 0, v1114, v1115, v1126, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) -> f_712(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110, 1, v1112, 0, v1114, v1115, v1126, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) :|: TRUE
f_712(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110, 1, v1112, 0, v1114, v1115, v1126, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) -> f_713(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110, 1, v1112, 0, v1114, v1115, v1126, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) :|: TRUE
f_713(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110, 1, v1112, 0, v1114, v1115, v1126, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) -> f_714(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110, 1, v1112, 0, v1114, v1115, v1126, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) :|: 0 = 0
f_714(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110, 1, v1112, 0, v1114, v1115, v1126, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) -> f_715(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1126, 1, v1110, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) :|: 0 = 0
f_715(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1126, 1, v1110, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) -> f_716(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1126, 1, v1110, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) :|: 0 <= v1126 && 1 <= v1110
f_716(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1126, 1, v1110, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) -> f_718(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1126, 1, v1110, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) :|: 0 = 0
f_718(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1126, 1, v1110, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) -> f_720(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1126, 1, v1110, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) :|: TRUE
f_720(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1126, 1, v1110, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) -> f_722(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1126, 1, v1110, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) :|: 0 = 0
f_722(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1126, 1, v1110, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) -> f_724(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1126, 1, v1110, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) :|: TRUE
f_724(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1126, 1, v1110, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) -> f_726(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1126, 1, v1110, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) :|: TRUE
f_726(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1126, 1, v1110, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) -> f_696(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1126, 1, v1110, v1112, 0, v1114, v1115, v1117, v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125, 3, 7, 2, 4, 8) :|: TRUE
f_696(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, v1007, v1008, 0, v1010, v1011, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) -> f_697(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, v1007, v1008, 0, v1010, v1011, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) :|: 0 = 0
f_697(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, v1007, v1008, 0, v1010, v1011, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) -> f_698(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, v1008, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) :|: 0 = 0
f_698(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, v1008, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) -> f_699(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, v1008, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) :|: 0 = 0
f_699(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, v1008, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) -> f_700(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) :|: 0 = 0
f_700(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) -> f_701(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) :|: 1 < v1005 && 3 <= v1007 && 3 <= v996 && 4 <= v1011 && 2 <= v1010
f_700(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) -> f_702(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) :|: v1005 <= 1 && v1007 <= 2
f_701(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) -> f_703(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, v1010, 0, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) :|: 0 = 0
f_703(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, v1010, 0, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) -> f_705(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, v1010, 0, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) :|: TRUE
f_705(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, v1010, 0, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) -> f_662(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, 1, v1010, 0, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) :|: TRUE
f_702(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) -> f_704(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) :|: 0 = 0
f_704(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) -> f_706(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) :|: TRUE
f_706(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) -> f_707(v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, 1, 1, 0, v1010, v1011, v1007, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, 3, 7, 2, 4, 8) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_663(v800:0, v801:0, v802:0, v803:0, v804:0, v805:0, v806:0, v807:0, v808:0, 1 + v1126:0, 1, v811:0, v812:0, 0, v814:0, v815:0, v816:0, v817:0, v818:0, v819:0, v820:0, v821:0, v822:0, v823:0, v824:0, 3, 7, 2, 4, 8) -> f_700(v800:0, v801:0, v802:0, v803:0, v804:0, v805:0, v806:0, v807:0, v808:0, v1126:0, 1, 0, v811:0, 2 * v811:0, 1 + v1126:0, v816:0, v817:0, v818:0, v819:0, v820:0, v821:0, v822:0, v823:0, v824:0, 3, 7, 2, 4, 8) :|: v1126:0 > -1 && 2 * v811:0 > 1 && 2 * v811:0 >= 1 + v1126:0
f_700(v996:0, v997:0, v998:0, v999:0, v1000:0, v1001:0, v1002:0, v1003:0, v1004:0, v1005:0, 1, 0, v1010:0, v1011:0, v1007:0, v1012:0, v1013:0, v1014:0, v1015:0, v1016:0, v1017:0, v1018:0, v1019:0, v1020:0, 3, 7, 2, 4, 8) -> f_663(v996:0, v997:0, v998:0, v999:0, v1000:0, v1001:0, v1002:0, v1003:0, v1004:0, v1005:0, 1, 1, v1010:0, 0, v1011:0, v1007:0, v1012:0, v1013:0, v1014:0, v1015:0, v1016:0, v1017:0, v1018:0, v1019:0, v1020:0, 3, 7, 2, 4, 8) :|: v1007:0 > 2 && v1005:0 > 1 && v996:0 > 2 && v1010:0 > 1 && v1011:0 > 3
f_663(v800:0, v801:0, v802:0, v803:0, v804:0, v805:0, v806:0, v807:0, v808:0, v809:0, 1, v811:0, v812:0, 0, v814:0, v815:0, v816:0, v817:0, v818:0, v819:0, v820:0, v821:0, v822:0, v823:0, v824:0, 3, 7, 2, 4, 8) -> f_663(v800:0, v801:0, v802:0, v803:0, v804:0, v805:0, v806:0, v807:0, v808:0, v809:0, 1, 2 * v811:0, v811:0, 0, 2 * v811:0, v815:0, v816:0, v817:0, v818:0, v819:0, v820:0, v821:0, v822:0, v823:0, v824:0, 3, 7, 2, 4, 8) :|: 2 * v811:0 > 1 && v809:0 > 2 && v809:0 > 2 * v811:0 && v800:0 > 3 && v815:0 > 3
f_700(v996:0, v997:0, v998:0, v999:0, v1000:0, v1001:0, v1002:0, v1003:0, v1004:0, 1 + v1126:0, 1, 0, v1010:0, v1011:0, v1007:0, v1012:0, v1013:0, v1014:0, v1015:0, v1016:0, v1017:0, v1018:0, v1019:0, v1020:0, 3, 7, 2, 4, 8) -> f_700(v996:0, v997:0, v998:0, v999:0, v1000:0, v1001:0, v1002:0, v1003:0, v1004:0, v1126:0, 1, 0, v1010:0, v1011:0, 1 + v1126:0, v1012:0, v1013:0, v1014:0, v1015:0, v1016:0, v1017:0, v1018:0, v1019:0, v1020:0, 3, 7, 2, 4, 8) :|: v1126:0 > -1 && v1126:0 < 1 && v1007:0 < 3
Filtered unneeded arguments:
   f_663(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_663(x1, x10, x12, x16)
   f_700(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_700(x1, x10, x13, x14, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_663(v800:0, sum~cons_1~v1126:0, v811:0, v815:0) -> f_700(v800:0, v1126:0, v811:0, 2 * v811:0, 1 + v1126:0) :|: 2 * v811:0 > 1 && 2 * v811:0 >= 1 + v1126:0 && v1126:0 > -1 && sum~cons_1~v1126:0 = 1 + v1126:0
f_700(v996:0, v1005:0, v1010:0, v1011:0, v1007:0) -> f_663(v996:0, v1005:0, 1, v1007:0) :|: v1005:0 > 1 && v1007:0 > 2 && v996:0 > 2 && v1011:0 > 3 && v1010:0 > 1
f_663(v800:0, v809:0, v811:0, v815:0) -> f_663(v800:0, v809:0, 2 * v811:0, v815:0) :|: v809:0 > 2 && 2 * v811:0 > 1 && v809:0 > 2 * v811:0 && v815:0 > 3 && v800:0 > 3
f_700(v996:0, sum~cons_1~v1126:0, v1010:0, v1011:0, v1007:0) -> f_700(v996:0, v1126:0, v1010:0, v1011:0, 1 + v1126:0) :|: v1126:0 < 1 && v1007:0 < 3 && v1126:0 > -1 && sum~cons_1~v1126:0 = 1 + v1126:0

----------------------------------------

(9)
Obligation:
Rules:
f_663(v800:0, sum~cons_1~v1126:0, v811:0, v815:0) -> f_700(v800:0, v1126:0, v811:0, 2 * v811:0, 1 + v1126:0) :|: 2 * v811:0 > 1 && 2 * v811:0 >= 1 + v1126:0 && v1126:0 > -1 && sum~cons_1~v1126:0 = 1 + v1126:0
f_700(v996:0, v1005:0, v1010:0, v1011:0, v1007:0) -> f_663(v996:0, v1005:0, 1, v1007:0) :|: v1005:0 > 1 && v1007:0 > 2 && v996:0 > 2 && v1011:0 > 3 && v1010:0 > 1
f_663(x, x1, x2, x3) -> f_663(x, x1, 2 * x2, x3) :|: x1 > 2 && 2 * x2 > 1 && x1 > 2 * x2 && x3 > 3 && x > 3
f_700(x4, x5, x6, x7, x8) -> f_700(x4, x9, x6, x7, 1 + x9) :|: x9 < 1 && x8 < 3 && x9 > -1 && x5 = 1 + x9

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_700(v996:0:0, v1005:0:0, v1010:0:0, v1011:0:0, v1007:0:0) -> f_663(v996:0:0, v1005:0:0, 1, v1007:0:0) :|: v1011:0:0 > 3 && v1010:0:0 > 1 && v996:0:0 > 2 && v1007:0:0 > 2 && v1005:0:0 > 1
f_663(v800:0:0, sum~cons_1~v1126:0:0, v811:0:0, v815:0:0) -> f_700(v800:0:0, v1126:0:0, v811:0:0, 2 * v811:0:0, 1 + v1126:0:0) :|: 2 * v811:0:0 > 1 && 2 * v811:0:0 >= 1 + v1126:0:0 && v1126:0:0 > -1 && sum~cons_1~v1126:0:0 = 1 + v1126:0:0
f_700(x4:0, sum~cons_1~x9:0, x6:0, x7:0, x8:0) -> f_700(x4:0, x9:0, x6:0, x7:0, 1 + x9:0) :|: x9:0 < 1 && x8:0 < 3 && x9:0 > -1 && sum~cons_1~x9:0 = 1 + x9:0
f_663(x:0, x1:0, x2:0, x3:0) -> f_663(x:0, x1:0, 2 * x2:0, x3:0) :|: x3:0 > 3 && x:0 > 3 && x1:0 > 2 * x2:0 && 2 * x2:0 > 1 && x1:0 > 2

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_700 ] = 2*f_700_2 + 1
[ f_663 ] = 2*f_663_2

The following rules are decreasing:
f_700(v996:0:0, v1005:0:0, v1010:0:0, v1011:0:0, v1007:0:0) -> f_663(v996:0:0, v1005:0:0, 1, v1007:0:0) :|: v1011:0:0 > 3 && v1010:0:0 > 1 && v996:0:0 > 2 && v1007:0:0 > 2 && v1005:0:0 > 1
f_663(v800:0:0, sum~cons_1~v1126:0:0, v811:0:0, v815:0:0) -> f_700(v800:0:0, v1126:0:0, v811:0:0, 2 * v811:0:0, 1 + v1126:0:0) :|: 2 * v811:0:0 > 1 && 2 * v811:0:0 >= 1 + v1126:0:0 && v1126:0:0 > -1 && sum~cons_1~v1126:0:0 = 1 + v1126:0:0
f_700(x4:0, sum~cons_1~x9:0, x6:0, x7:0, x8:0) -> f_700(x4:0, x9:0, x6:0, x7:0, 1 + x9:0) :|: x9:0 < 1 && x8:0 < 3 && x9:0 > -1 && sum~cons_1~x9:0 = 1 + x9:0

The following rules are bounded:
f_700(v996:0:0, v1005:0:0, v1010:0:0, v1011:0:0, v1007:0:0) -> f_663(v996:0:0, v1005:0:0, 1, v1007:0:0) :|: v1011:0:0 > 3 && v1010:0:0 > 1 && v996:0:0 > 2 && v1007:0:0 > 2 && v1005:0:0 > 1
f_663(v800:0:0, sum~cons_1~v1126:0:0, v811:0:0, v815:0:0) -> f_700(v800:0:0, v1126:0:0, v811:0:0, 2 * v811:0:0, 1 + v1126:0:0) :|: 2 * v811:0:0 > 1 && 2 * v811:0:0 >= 1 + v1126:0:0 && v1126:0:0 > -1 && sum~cons_1~v1126:0:0 = 1 + v1126:0:0
f_700(x4:0, sum~cons_1~x9:0, x6:0, x7:0, x8:0) -> f_700(x4:0, x9:0, x6:0, x7:0, 1 + x9:0) :|: x9:0 < 1 && x8:0 < 3 && x9:0 > -1 && sum~cons_1~x9:0 = 1 + x9:0
f_663(x:0, x1:0, x2:0, x3:0) -> f_663(x:0, x1:0, 2 * x2:0, x3:0) :|: x3:0 > 3 && x:0 > 3 && x1:0 > 2 * x2:0 && 2 * x2:0 > 1 && x1:0 > 2


----------------------------------------

(13)
Obligation:
Rules:
f_663(x:0, x1:0, x2:0, x3:0) -> f_663(x:0, x1:0, 2 * x2:0, x3:0) :|: x3:0 > 3 && x:0 > 3 && x1:0 > 2 * x2:0 && 2 * x2:0 > 1 && x1:0 > 2

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_663(x:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_663(x:0:0, x1:0:0, 2 * x2:0:0, x3:0:0) :|: 2 * x2:0:0 > 1 && x1:0:0 > 2 && x1:0:0 > 2 * x2:0:0 && x:0:0 > 3 && x3:0:0 > 3

----------------------------------------

(16) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_663(x, x1, x2, x3)] = 13 - 7*x1 + x1^2 - x2

The following rules are decreasing:
f_663(x:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_663(x:0:0, x1:0:0, 2 * x2:0:0, x3:0:0) :|: 2 * x2:0:0 > 1 && x1:0:0 > 2 && x1:0:0 > 2 * x2:0:0 && x:0:0 > 3 && x3:0:0 > 3
The following rules are bounded:
f_663(x:0:0, x1:0:0, x2:0:0, x3:0:0) -> f_663(x:0:0, x1:0:0, 2 * x2:0:0, x3:0:0) :|: 2 * x2:0:0 > 1 && x1:0:0 > 2 && x1:0:0 > 2 * x2:0:0 && x:0:0 > 3 && x3:0:0 > 3

----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
SCC
----------------------------------------

(19) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_464(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v205, 0, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_465(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v205, 0, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: 0 = 0
f_465(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v205, 0, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_466(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v205, 0, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: 0 = 0
f_466(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v205, 0, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_467(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, v205, 0, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: 0 = 0
f_467(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, v205, 0, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_468(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, v205, 0, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: v207 < v195 && 3 <= v195
f_468(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, v205, 0, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_470(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, v205, 0, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: 0 = 0
f_470(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, v205, 0, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_472(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, v205, 0, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: TRUE
f_472(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, v205, 0, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_474(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, v205, 0, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: 0 = 0
f_474(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, v205, 0, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_476(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v205, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: 0 = 0
f_476(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v205, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_478(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v205, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: 0 = 0
f_478(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v205, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_480(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v205, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: TRUE
f_480(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v205, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_482(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v205, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: 0 = 0
f_482(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v205, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_484(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: 0 = 0
f_484(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_486(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v219, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: v219 = 2 * v207 && 4 <= v219
f_486(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v219, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_488(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v219, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: 0 = 0
f_488(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v219, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_490(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v219, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: TRUE
f_490(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v219, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_492(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v219, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: TRUE
f_492(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v219, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_463(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v207, 0, v219, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: TRUE
f_463(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v205, 0, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) -> f_464(v195, v196, v197, v198, v199, v200, v201, v202, v203, 1, v205, 0, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_464(v195:0, v196:0, v197:0, v198:0, v199:0, v200:0, v201:0, v202:0, v203:0, 1, v205:0, 0, v207:0, v208:0, v209:0, v210:0, v211:0, v212:0, v213:0, v214:0, v215:0, v216:0, 3, 7, 2, 4, 8) -> f_464(v195:0, v196:0, v197:0, v198:0, v199:0, v200:0, v201:0, v202:0, v203:0, 1, v207:0, 0, 2 * v207:0, v208:0, v209:0, v210:0, v211:0, v212:0, v213:0, v214:0, v215:0, v216:0, 3, 7, 2, 4, 8) :|: v195:0 > 2 && 3 < 2 * v207:0 && v207:0 < v195:0
Filtered unneeded arguments:
   f_464(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_464(x1, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_464(v195:0, v207:0) -> f_464(v195:0, 2 * v207:0) :|: 3 < 2 * v207:0 && v207:0 < v195:0 && v195:0 > 2

----------------------------------------

(20)
Obligation:
Rules:
f_464(v195:0, v207:0) -> f_464(v195:0, 2 * v207:0) :|: 3 < 2 * v207:0 && v207:0 < v195:0 && v195:0 > 2

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_464(v195:0:0, v207:0:0) -> f_464(v195:0:0, 2 * v207:0:0) :|: 3 < 2 * v207:0:0 && v207:0:0 < v195:0:0 && v195:0:0 > 2

----------------------------------------

(23) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_464(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_464(v195:0:0, v207:0:0) -> f_464(v195:0:0, 2 * v207:0:0) :|: 3 < 2 * v207:0:0 && v207:0:0 < v195:0:0 && v195:0:0 > 2
The following rules are bounded:
f_464(v195:0:0, v207:0:0) -> f_464(v195:0:0, 2 * v207:0:0) :|: 3 < 2 * v207:0:0 && v207:0:0 < v195:0:0 && v195:0:0 > 2

----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
SCC
----------------------------------------

(26) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_345(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, 1, 0, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_347(v28, v29, v30, v31, v32, v33, v34, v35, v36, v40, 1, v37, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: 0 = 0
f_347(v28, v29, v30, v31, v32, v33, v34, v35, v36, v40, 1, v37, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_349(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: 0 <= v40 && v37 = 1 && v40 = 0 && 0 = 0
f_349(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_352(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: 0 = 0
f_352(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_355(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: TRUE
f_355(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_359(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: 0 = 0
f_359(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_363(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: TRUE
f_363(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_367(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: TRUE
f_367(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_371(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: 0 = 0
f_371(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_375(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: 0 = 0
f_375(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_379(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: 0 = 0
f_379(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_383(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: 0 = 0
f_383(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_386(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: 0 = 0
f_386(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_389(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: TRUE
f_389(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_392(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: 0 = 0
f_392(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_395(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: 0 = 0
f_395(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_398(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, -1, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: 0 = 0
f_398(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, -1, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_401(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, -1, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: 0 = 0
f_401(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, -1, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_403(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, -1, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: TRUE
f_403(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, -1, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_405(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, -1, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: TRUE
f_405(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, -1, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_342(1, v29, v30, v31, v32, v33, v34, v35, v36, 0, 1, 0, -1, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: TRUE
f_342(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, 1, 0, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) -> f_345(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, 1, 0, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_345(v28:0, v29:0, v30:0, v31:0, v32:0, v33:0, v34:0, v35:0, v36:0, 1, 1, 0, 0, v41:0, v42:0, v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, 3, 7, 4, 8) -> f_345(1, v29:0, v30:0, v31:0, v32:0, v33:0, v34:0, v35:0, v36:0, 0, 1, 0, -1, v41:0, v42:0, v43:0, v44:0, v45:0, v46:0, v47:0, v48:0, v49:0, 3, 7, 4, 8) :|: TRUE
Filtered unneeded arguments:
   f_345(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26) -> f_345(x10, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_345(cons_1, cons_0) -> f_345(0, -1) :|: TRUE && cons_1 = 1 && cons_0 = 0

----------------------------------------

(27)
Obligation:
Rules:
f_345(cons_1, cons_0) -> f_345(0, -1) :|: TRUE && cons_1 = 1 && cons_0 = 0

----------------------------------------

(28) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(29)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
