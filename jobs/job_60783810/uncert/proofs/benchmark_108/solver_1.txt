YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/CeOl8.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 43 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2027 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 79 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 9 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/CeOl8.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/CeOl8.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cstrnlen" linkageType: EXTERNALLY_VISIBLE returnParam: i64 parameters: (0 *i8, 1 i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 13
	0:
		%3 = alloca *i8, align 8
		%4 = alloca i64, align 8
		%5 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%6 = load %3
		store %6, %5
		br %7
	7:
		%8 = load %4
		%9 = icmp ne %8 0
		br %9, %10, %15
	10:
		%11 = load %5
		%12 = load %11
		%13 = sext i8 %12 to i32
		%14 = icmp ne %13 0
		br %15
	15:
		%16 = phi [0, %7], [%14, %10]
		br %16, %17, %23
	17:
		br %18
	18:
		%19 = load %5
		%20 = getelementptr %19, 1
		store %20, %5
		%21 = load %4
		%22 = add i64 %21, -1
		store %22, %4
		br %7
	23:
		%24 = load %5
		%25 = load %3
		%26 = ptrtoint *i8 %24 to i64
		%27 = ptrtoint *i8 %25 to i64
		%28 = sub i64 %26, %27
		ret %28

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 47
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = load %2
		%8 = icmp slt %7 1
		br %8, %9, %10
	9:
		store 1, %2
		br %10
	10:
		%11 = load %3
		%12 = icmp slt %11 1
		br %12, %13, %14
	13:
		store 1, %3
		br %14
	14:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%15 = load %2
		%16 = sext i32 %15 to i64
		%17 = mul i64 %16, 1
		%18 = alloca i8, numElementsLit: %17, align 16
		store %18, %4
		%19 = load %4
		%20 = load %2
		%21 = sub i32 %20, 1
		%22 = sext i32 %21 to i64
		%23 = getelementptr %19, %22
		store 0, %23
		%24 = load %4
		%25 = load %3
		%26 = sext i32 %25 to i64
		%27 = call i64 @cstrnlen(*i8 %24, i64 %26)
		%28 = trunc i64 %27 to i32
		ret %28


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_602(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1028, v1029, v1030, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_603(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1028, v1029, v1030, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: 0 < v1031 && 2 <= v1026
f_603(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1028, v1029, v1030, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_605(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1028, v1029, v1030, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: 0 = 0
f_605(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1028, v1029, v1030, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_607(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1028, v1029, v1030, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: TRUE
f_607(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1028, v1029, v1030, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_609(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1029, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: 0 = 0
f_609(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1029, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_611(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1029, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: TRUE
f_611(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1029, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_613(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: 0 = 0
f_613(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_615(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: v1105 != 0 && v1030 < v1039 && 4 <= v1039
f_615(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_618(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: 0 = 0
f_618(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_621(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: 0 = 0
f_621(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_624(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: TRUE
f_624(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_627(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: TRUE
f_627(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1028, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_630(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1028, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: 0 = 0
f_630(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1028, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_632(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1244, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1028, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: v1244 = 1 + v1030 && 4 <= v1244
f_632(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1244, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1028, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_634(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1244, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1028, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: TRUE
f_634(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1244, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1028, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_636(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1244, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1028, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: 0 = 0
f_636(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1244, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1028, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_638(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1244, v1247, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1028, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: 1 + v1247 = v1031 && 0 <= v1247
f_638(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1244, v1247, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1028, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_640(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1244, v1247, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1028, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: TRUE
f_640(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1244, v1247, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1028, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_642(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1244, v1247, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1028, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: TRUE
f_642(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1244, v1247, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, v1028, v1029, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_601(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1030, v1105, v1244, v1247, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: TRUE
f_601(v1021, v1022, v1023, v1024, v1025, v1026, 1, v1028, v1029, v1030, v1031, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) -> f_602(v1021, v1022, v1023, v1024, v1025, v1031, 1, v1028, v1029, v1030, v1026, v1032, v1040, v1033, v1041, v1034, v1042, v1035, v1043, v1039, v1044, v1045, v1046, v1048, 0, v1036, v1047, v1049, v1038, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_602(v1021:0, v1022:0, v1023:0, v1024:0, v1025:0, 1 + v1247:0, 1, v1028:0, v1029:0, v1030:0, v1026:0, v1032:0, v1040:0, v1033:0, v1041:0, v1034:0, v1042:0, v1035:0, v1043:0, v1039:0, v1044:0, v1045:0, v1046:0, v1048:0, 0, v1036:0, v1047:0, v1049:0, v1038:0, 3, 7, 2, 4, 8) -> f_602(v1021:0, v1022:0, v1023:0, v1024:0, v1025:0, v1247:0, 1, v1030:0, v1105:0, 1 + v1030:0, 1 + v1247:0, v1032:0, v1040:0, v1033:0, v1041:0, v1034:0, v1042:0, v1035:0, v1043:0, v1039:0, v1044:0, v1045:0, v1046:0, v1048:0, 0, v1036:0, v1047:0, v1049:0, v1038:0, 3, 7, 2, 4, 8) :|: v1026:0 > 1 && v1247:0 > -1 && v1039:0 > v1030:0 && v1105:0 < 0 && v1039:0 > 3 && v1030:0 > 2
f_602(v1021:0, v1022:0, v1023:0, v1024:0, v1025:0, 1 + v1247:0, 1, v1028:0, v1029:0, v1030:0, v1026:0, v1032:0, v1040:0, v1033:0, v1041:0, v1034:0, v1042:0, v1035:0, v1043:0, v1039:0, v1044:0, v1045:0, v1046:0, v1048:0, 0, v1036:0, v1047:0, v1049:0, v1038:0, 3, 7, 2, 4, 8) -> f_602(v1021:0, v1022:0, v1023:0, v1024:0, v1025:0, v1247:0, 1, v1030:0, v1105:0, 1 + v1030:0, 1 + v1247:0, v1032:0, v1040:0, v1033:0, v1041:0, v1034:0, v1042:0, v1035:0, v1043:0, v1039:0, v1044:0, v1045:0, v1046:0, v1048:0, 0, v1036:0, v1047:0, v1049:0, v1038:0, 3, 7, 2, 4, 8) :|: v1026:0 > 1 && v1247:0 > -1 && v1039:0 > v1030:0 && v1105:0 > 0 && v1039:0 > 3 && v1030:0 > 2
Filtered unneeded arguments:
   f_602(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34) -> f_602(x6, x10, x11, x20)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_602(sum~cons_1~v1247:0, v1030:0, v1026:0, v1039:0) -> f_602(v1247:0, 1 + v1030:0, 1 + v1247:0, v1039:0) :|: v1247:0 > -1 && v1026:0 > 1 && v1039:0 > v1030:0 && v1030:0 > 2 && v1039:0 > 3 && sum~cons_1~v1247:0 = 1 + v1247:0

----------------------------------------

(8)
Obligation:
Rules:
f_602(sum~cons_1~v1247:0, v1030:0, v1026:0, v1039:0) -> f_602(v1247:0, 1 + v1030:0, 1 + v1247:0, v1039:0) :|: v1247:0 > -1 && v1026:0 > 1 && v1039:0 > v1030:0 && v1030:0 > 2 && v1039:0 > 3 && sum~cons_1~v1247:0 = 1 + v1247:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_602(sum~cons_1~v1247:0:0, v1030:0:0, v1026:0:0, v1039:0:0) -> f_602(v1247:0:0, 1 + v1030:0:0, 1 + v1247:0:0, v1039:0:0) :|: v1030:0:0 > 2 && v1039:0:0 > 3 && v1039:0:0 > v1030:0:0 && v1026:0:0 > 1 && v1247:0:0 > -1 && sum~cons_1~v1247:0:0 = 1 + v1247:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_602(x, x1, x2, x3)] = -1 + x

The following rules are decreasing:
f_602(sum~cons_1~v1247:0:0, v1030:0:0, v1026:0:0, v1039:0:0) -> f_602(v1247:0:0, 1 + v1030:0:0, 1 + v1247:0:0, v1039:0:0) :|: v1030:0:0 > 2 && v1039:0:0 > 3 && v1039:0:0 > v1030:0:0 && v1026:0:0 > 1 && v1247:0:0 > -1 && sum~cons_1~v1247:0:0 = 1 + v1247:0:0
The following rules are bounded:
f_602(sum~cons_1~v1247:0:0, v1030:0:0, v1026:0:0, v1039:0:0) -> f_602(v1247:0:0, 1 + v1030:0:0, 1 + v1247:0:0, v1039:0:0) :|: v1030:0:0 > 2 && v1039:0:0 > 3 && v1039:0:0 > v1030:0:0 && v1026:0:0 > 1 && v1247:0:0 > -1 && sum~cons_1~v1247:0:0 = 1 + v1247:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
