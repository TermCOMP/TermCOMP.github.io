YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/nKAcM.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 50 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 963 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 3 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 2 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/nKAcM.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/nKAcM.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store 0, %6
		%7 = load %4
		%8 = icmp sle %7 0
		br %8, %12, %9
	9:
		%10 = load %5
		%11 = icmp sle %10 0
		br %11, %12, %16
	12:
		%13 = load %4
		%14 = load %5
		%15 = add i32 %13, %14
		store %15, %3
		br %35
	16:
		br %17
	17:
		%18 = load %4
		%19 = icmp eq %18 0
		%20 = xor i1 %19, 1
		br %20, %21, %33
	21:
		%22 = load %4
		%23 = load %5
		%24 = icmp sgt %22 %23
		br %24, %25, %27
	25:
		%26 = load %5
		store %26, %4
		br %30
	27:
		%28 = load %4
		%29 = sub i32 %28, 1
		store %29, %4
		br %30
	30:
		%31 = load %6
		%32 = add i32 %31, 1
		store %32, %6
		br %17
	33:
		%34 = load %6
		store %34, %3
		br %35
	35:
		%36 = load %3
		ret %36

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 56
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_535(v751, v752, v753, v754, v755, v756, 0, v758, 1, v761, v762, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_537(v751, v752, v753, v754, v755, v756, 0, v758, 1, v761, v771, v762, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: v771 = 1 + v761 && 2 <= v771
f_537(v751, v752, v753, v754, v755, v756, 0, v758, 1, v761, v771, v762, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_539(v751, v752, v753, v754, v755, v756, 0, v758, 1, v761, v771, v762, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: TRUE
f_539(v751, v752, v753, v754, v755, v756, 0, v758, 1, v761, v771, v762, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_541(v751, v752, v753, v754, v755, v756, 0, v758, 1, v761, v771, v762, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: TRUE
f_541(v751, v752, v753, v754, v755, v756, 0, v758, 1, v761, v771, v762, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_543(v751, v752, v753, v754, v755, v756, 0, v762, 1, v758, v761, v771, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: 0 = 0
f_543(v751, v752, v753, v754, v755, v756, 0, v762, 1, v758, v761, v771, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_546(v751, v752, v753, v754, v755, v756, 0, v762, 1, v758, v761, v771, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: v762 != 0 && 2 <= v758 && 3 <= v751 && 2 <= v752
f_546(v751, v752, v753, v754, v755, v756, 0, v762, 1, v758, v761, v771, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_549(v751, v752, v753, v754, v755, v756, 0, v762, 1, v758, v761, v771, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: 0 = 0
f_549(v751, v752, v753, v754, v755, v756, 0, v762, 1, v758, v761, v771, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_551(v751, v752, v753, v754, v755, v756, 0, v762, 1, v758, v761, v771, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: 0 = 0
f_551(v751, v752, v753, v754, v755, v756, 0, v762, 1, v758, v761, v771, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_553(v751, v752, v753, v754, v755, v756, 0, v762, 1, v758, v761, v771, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: TRUE
f_553(v751, v752, v753, v754, v755, v756, 0, v762, 1, v758, v761, v771, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_555(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v758, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: 0 = 0
f_555(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v758, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_557(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v758, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: 0 = 0
f_557(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v758, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_559(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v758, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: 0 = 0
f_559(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v758, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_561(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v758, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: TRUE
f_561(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v758, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_563(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: 0 = 0
f_563(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_564(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v909, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: 1 + v909 = v762 && 0 <= v909
f_564(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v909, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_565(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v909, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: TRUE
f_565(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v909, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_566(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v909, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: TRUE
f_566(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v909, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_533(v751, v752, v753, v754, v755, v756, 0, v762, 1, v761, v771, v909, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: TRUE
f_533(v751, v752, v753, v754, v755, v756, 0, v758, 1, v760, v761, v762, v763, v764, v765, v766, v767, v768, 3, 2, 4) -> f_535(v751, v752, v753, v754, v755, v756, 0, v758, 1, v761, v762, v763, v764, v765, v766, v767, v768, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_535(v751:0, v752:0, v753:0, v754:0, v755:0, v756:0, 0, v758:0, 1, v761:0, 1 + v909:0, v763:0, v764:0, v765:0, v766:0, v767:0, v768:0, 3, 2, 4) -> f_535(v751:0, v752:0, v753:0, v754:0, v755:0, v756:0, 0, 1 + v909:0, 1, 1 + v761:0, v909:0, v763:0, v764:0, v765:0, v766:0, v767:0, v768:0, 3, 2, 4) :|: v761:0 > 0 && v758:0 > 1 && v909:0 > -1 && v751:0 > 2 && v752:0 > 1
Filtered unneeded arguments:
   f_535(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_535(x1, x2, x8, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_535(v751:0, v752:0, v758:0, v761:0, sum~cons_1~v909:0) -> f_535(v751:0, v752:0, 1 + v909:0, 1 + v761:0, v909:0) :|: v758:0 > 1 && v761:0 > 0 && v909:0 > -1 && v752:0 > 1 && v751:0 > 2 && sum~cons_1~v909:0 = 1 + v909:0

----------------------------------------

(9)
Obligation:
Rules:
f_535(v751:0, v752:0, v758:0, v761:0, sum~cons_1~v909:0) -> f_535(v751:0, v752:0, 1 + v909:0, 1 + v761:0, v909:0) :|: v758:0 > 1 && v761:0 > 0 && v909:0 > -1 && v752:0 > 1 && v751:0 > 2 && sum~cons_1~v909:0 = 1 + v909:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_535(v751:0:0, v752:0:0, v758:0:0, v761:0:0, sum~cons_1~v909:0:0) -> f_535(v751:0:0, v752:0:0, 1 + v909:0:0, 1 + v761:0:0, v909:0:0) :|: v752:0:0 > 1 && v751:0:0 > 2 && v909:0:0 > -1 && v761:0:0 > 0 && v758:0:0 > 1 && sum~cons_1~v909:0:0 = 1 + v909:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_535 ] = f_535_5

The following rules are decreasing:
f_535(v751:0:0, v752:0:0, v758:0:0, v761:0:0, sum~cons_1~v909:0:0) -> f_535(v751:0:0, v752:0:0, 1 + v909:0:0, 1 + v761:0:0, v909:0:0) :|: v752:0:0 > 1 && v751:0:0 > 2 && v909:0:0 > -1 && v761:0:0 > 0 && v758:0:0 > 1 && sum~cons_1~v909:0:0 = 1 + v909:0:0

The following rules are bounded:
f_535(v751:0:0, v752:0:0, v758:0:0, v761:0:0, sum~cons_1~v909:0:0) -> f_535(v751:0:0, v752:0:0, 1 + v909:0:0, 1 + v761:0:0, v909:0:0) :|: v752:0:0 > 1 && v751:0:0 > 2 && v909:0:0 > -1 && v761:0:0 > 0 && v758:0:0 > 1 && sum~cons_1~v909:0:0 = 1 + v909:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_497(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 4) -> f_501(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: v685 != 0 && 2 <= v683 && 2 <= v676 && 2 <= v677
f_501(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_505(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: 0 = 0
f_505(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_509(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: 0 = 0
f_509(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_513(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: TRUE
f_513(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_517(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: 0 = 0
f_517(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_521(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: 0 = 0
f_521(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_525(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: 0 = 0
f_525(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_528(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: TRUE
f_528(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_531(v676, v677, v678, v679, v680, v681, 0, v685, 1, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: 0 = 0
f_531(v676, v677, v678, v679, v680, v681, 0, v685, 1, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_534(v676, v677, v678, v679, v680, v681, 0, v685, 1, v769, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: 1 + v769 = v685 && 0 <= v769
f_534(v676, v677, v678, v679, v680, v681, 0, v685, 1, v769, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_536(v676, v677, v678, v679, v680, v681, 0, v685, 1, v769, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: TRUE
f_536(v676, v677, v678, v679, v680, v681, 0, v685, 1, v769, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_538(v676, v677, v678, v679, v680, v681, 0, v685, 1, v769, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: TRUE
f_538(v676, v677, v678, v679, v680, v681, 0, v685, 1, v769, v686, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_540(v676, v677, v678, v679, v680, v681, 0, v685, 1, v769, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: 0 = 0
f_540(v676, v677, v678, v679, v680, v681, 0, v685, 1, v769, v687, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_542(v676, v677, v678, v679, v680, v681, 0, v685, 1, v769, v687, v809, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: v809 = 1 + v687 && 2 <= v809
f_542(v676, v677, v678, v679, v680, v681, 0, v685, 1, v769, v687, v809, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_544(v676, v677, v678, v679, v680, v681, 0, v685, 1, v769, v687, v809, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: TRUE
f_544(v676, v677, v678, v679, v680, v681, 0, v685, 1, v769, v687, v809, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_547(v676, v677, v678, v679, v680, v681, 0, v685, 1, v769, v687, v809, v688, v689, v690, v691, v692, v693, 3, 2, 4) :|: TRUE
f_547(v676, v677, v678, v679, v680, v681, 0, v685, 1, v769, v687, v809, v688, v689, v690, v691, v692, v693, 3, 2, 4) -> f_494(v676, v677, v678, v679, v680, v681, 0, v685, 1, v769, v687, v809, v688, v689, v690, v691, v692, v693, 3, 4) :|: TRUE
f_494(v676, v677, v678, v679, v680, v681, 0, v683, 1, v685, v686, v687, v688, v689, v690, v691, v692, v693, 3, 4) -> f_497(v676, v677, v678, v679, v680, v681, 0, v685, 1, v683, v686, v687, v688, v689, v690, v691, v692, v693, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_497(v676:0, v677:0, v678:0, v679:0, v680:0, v681:0, 0, 1 + v769:0, 1, v683:0, v686:0, v687:0, v688:0, v689:0, v690:0, v691:0, v692:0, v693:0, 3, 4) -> f_497(v676:0, v677:0, v678:0, v679:0, v680:0, v681:0, 0, v769:0, 1, 1 + v769:0, v687:0, 1 + v687:0, v688:0, v689:0, v690:0, v691:0, v692:0, v693:0, 3, 4) :|: v683:0 > 1 && v769:0 > -1 && v676:0 > 1 && v677:0 > 1 && v687:0 > 0
Filtered unneeded arguments:
   f_497(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_497(x1, x2, x8, x10, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_497(v676:0, v677:0, sum~cons_1~v769:0, v683:0, v687:0) -> f_497(v676:0, v677:0, v769:0, 1 + v769:0, 1 + v687:0) :|: v769:0 > -1 && v683:0 > 1 && v676:0 > 1 && v687:0 > 0 && v677:0 > 1 && sum~cons_1~v769:0 = 1 + v769:0

----------------------------------------

(16)
Obligation:
Rules:
f_497(v676:0, v677:0, sum~cons_1~v769:0, v683:0, v687:0) -> f_497(v676:0, v677:0, v769:0, 1 + v769:0, 1 + v687:0) :|: v769:0 > -1 && v683:0 > 1 && v676:0 > 1 && v687:0 > 0 && v677:0 > 1 && sum~cons_1~v769:0 = 1 + v769:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_497(v676:0:0, v677:0:0, sum~cons_1~v769:0:0, v683:0:0, v687:0:0) -> f_497(v676:0:0, v677:0:0, v769:0:0, 1 + v769:0:0, 1 + v687:0:0) :|: v687:0:0 > 0 && v677:0:0 > 1 && v676:0:0 > 1 && v683:0:0 > 1 && v769:0:0 > -1 && sum~cons_1~v769:0:0 = 1 + v769:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_497(x, x1, x2, x3, x4)] = x2

The following rules are decreasing:
f_497(v676:0:0, v677:0:0, sum~cons_1~v769:0:0, v683:0:0, v687:0:0) -> f_497(v676:0:0, v677:0:0, v769:0:0, 1 + v769:0:0, 1 + v687:0:0) :|: v687:0:0 > 0 && v677:0:0 > 1 && v676:0:0 > 1 && v683:0:0 > 1 && v769:0:0 > -1 && sum~cons_1~v769:0:0 = 1 + v769:0:0
The following rules are bounded:
f_497(v676:0:0, v677:0:0, sum~cons_1~v769:0:0, v683:0:0, v687:0:0) -> f_497(v676:0:0, v677:0:0, v769:0:0, 1 + v769:0:0, 1 + v687:0:0) :|: v687:0:0 > 0 && v677:0:0 > 1 && v676:0:0 > 1 && v683:0:0 > 1 && v769:0:0 > -1 && sum~cons_1~v769:0:0 = 1 + v769:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
