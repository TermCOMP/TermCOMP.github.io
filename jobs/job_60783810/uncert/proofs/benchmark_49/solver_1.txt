YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/0TdD7.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 66 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1257 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 99 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (13) IntTRS
        (14) TerminationGraphProcessor [EQUIVALENT, 3 ms]
        (15) IntTRS
        (16) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (21) YES
    (22) LLVM Symbolic Execution SCC
        (23) SCC2IRS [SOUND, 30 ms]
        (24) IntTRS
        (25) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (26) IntTRS
        (27) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (28) YES
    (29) LLVM Symbolic Execution SCC
        (30) SCC2IRS [SOUND, 24 ms]
        (31) IntTRS
        (32) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (33) IntTRS
        (34) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (35) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/0TdD7.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/0TdD7.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		%4 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%5 = alloca i8, numElementsLit: 4, align 16
		%6 = bitcast *i8 %5 to *i32
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%7 = alloca i8, numElementsLit: 4, align 16
		%8 = bitcast *i8 %7 to *i32
		store %8, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %4)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %4
		br %11
	11:
		%12 = load %2
		%13 = load %12
		%14 = icmp sgt %13 0
		br %14, %15, %23
	15:
		%16 = load %3
		%17 = load %16
		%18 = icmp sgt %17 0
		br %18, %19, %23
	19:
		%20 = load %4
		%21 = load %20
		%22 = icmp sgt %21 0
		br %23
	23:
		%24 = phi [0, %15], [0, %11], [%22, %19]
		br %24, %25, %47
	25:
		%26 = call i32 @__VERIFIER_nondet_int()
		%27 = icmp ne %26 0
		br %27, %28, %35
	28:
		%29 = load %2
		%30 = load %29
		%31 = sub i32 %30, 1
		%32 = load %2
		store %31, %32
		%33 = call i32 @__VERIFIER_nondet_int()
		%34 = load %4
		store %33, %34
		br %46
	35:
		%36 = call i32 @__VERIFIER_nondet_int()
		%37 = load %2
		store %36, %37
		%38 = load %3
		%39 = load %38
		%40 = sub i32 %39, 1
		%41 = load %3
		store %40, %41
		%42 = load %4
		%43 = load %42
		%44 = sub i32 %43, 1
		%45 = load %4
		store %44, %45
		br %46
	46:
		br %11
	47:
		%48 = load %1
		ret %48


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 78 rulesP rules:
f_557(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4887, v4888, v4889, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) -> f_560(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4887, v4888, v4889, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_560(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4887, v4888, v4889, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) -> f_562(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4888, v4889, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_562(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4888, v4889, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) -> f_564(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4958, v4889, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) :|: 1 + v4958 = v4882 && 0 <= v4958
f_564(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4958, v4889, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) -> f_566(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4958, v4889, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_566(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4958, v4889, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) -> f_568(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4958, v4889, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) :|: TRUE
f_568(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4958, v4889, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) -> f_570(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4958, v4961, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) :|: TRUE
f_570(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4958, v4961, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) -> f_572(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4958, v4961, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_572(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4958, v4961, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) -> f_574(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4958, v4961, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) :|: TRUE
f_574(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4958, v4961, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) -> f_576(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4958, v4961, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) :|: TRUE
f_576(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4958, v4961, v4890, v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) -> f_477(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882, 1, v4884, v4885, v4886, v4890, v4891, v4892, v4893, v4958, v4961, v4894, v4895, v4896, v4897, v4898, v4899, v4900, 0, 3, 7, 2, 4, 8) :|: TRUE
f_477(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_479(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: TRUE
f_479(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_481(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_481(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2692, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_483(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_483(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_485(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: 0 < v2701 && 2 <= v2692 && 2 <= v2697
f_485(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_488(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_488(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_491(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: TRUE
f_491(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_494(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_494(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_497(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_497(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_500(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_500(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_503(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: TRUE
f_503(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_506(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_506(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2695, v2696, v2697, v2698, v2699, v2700, v2692, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_509(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v2696, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_509(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v2696, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_512(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v2696, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: 0 < v2702
f_512(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v2696, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_516(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v2696, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_516(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v2696, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_520(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v2696, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_520(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v2696, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_524(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v2696, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: TRUE
f_524(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v2696, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_528(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v4048, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: TRUE
f_528(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v4048, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_532(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v4048, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: v4048 != 0
f_528(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v4048, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_533(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, 0, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 3, 7, 2, 4, 8) :|: v4048 = 0
f_532(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v4048, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_536(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v4048, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_536(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v4048, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_540(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v4048, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: TRUE
f_540(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v4048, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) -> f_457(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, v4048, v2692, v2701, v2702, v2697, v2698, v2699, v2700, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 0, 3, 7, 2, 4, 8) :|: TRUE
f_457(v2557, v2558, v2559, v2560, v2561, v2562, v2563, v2564, 1, v2566, v2567, v2568, v2569, v2570, v2571, v2572, v2573, v2574, v2575, v2576, v2577, v2578, v2579, v2580, v2581, v2582, 0, 3, 7, 2, 4, 8) -> f_557(v2557, v2558, v2559, v2560, v2561, v2562, v2563, v2564, 1, v2566, v2567, v2568, v2569, v2570, v2571, v2572, v2573, v2574, v2575, v2576, v2577, v2578, v2579, v2580, v2581, v2582, 0, 3, 7, 2, 4, 8) :|: TRUE
f_533(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, 0, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 3, 7, 2, 4, 8) -> f_537(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, 0, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 3, 7, 2, 4, 8) :|: 0 = 0
f_537(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, 0, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 3, 7, 2, 4, 8) -> f_541(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, 0, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 3, 7, 2, 4, 8) :|: TRUE
f_541(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, 0, v2697, v2698, v2699, v2700, v2692, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 3, 7, 2, 4, 8) -> f_459(v2685, v2686, v2687, v2688, v2689, v2690, v2691, v2701, 1, v2694, v2702, 0, v2692, v2701, v2702, v2697, v2698, v2699, v2700, v2703, v2704, v2705, v2706, v2707, v2708, v2709, 3, 7, 2, 4, 8) :|: TRUE
f_459(v2613, v2614, v2615, v2616, v2617, v2618, v2619, v2620, 1, v2622, v2623, 0, v2625, v2626, v2627, v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, v2636, v2637, v2638, 3, 7, 2, 4, 8) -> f_559(v2613, v2614, v2615, v2616, v2617, v2618, v2619, v2620, 1, v2622, v2623, 0, v2625, v2626, v2627, v2628, v2629, v2630, v2631, v2632, v2633, v2634, v2635, v2636, v2637, v2638, 3, 7, 2, 4, 8) :|: TRUE
f_559(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4946, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_561(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: TRUE
f_561(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_563(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_563(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_565(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: TRUE
f_565(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_567(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_567(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_569(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_569(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_571(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 1 + v4962 = v4940 && 0 <= v4962
f_571(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_573(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_573(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_575(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: TRUE
f_575(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_577(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_577(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_578(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_578(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_579(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 1 + v5027 = v4941 && 0 <= v5027
f_579(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_580(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_580(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_581(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: TRUE
f_581(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_582(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: TRUE
f_582(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_583(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: TRUE
f_583(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_584(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_584(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4938, 1, v4940, v4941, 0, v4943, v4944, v4945, v4957, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_585(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4940, v4941, 0, v4943, v4944, v4945, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_585(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4940, v4941, 0, v4943, v4944, v4945, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_586(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4940, v4941, 0, v4943, v4944, v4945, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 < v4957
f_586(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4940, v4941, 0, v4943, v4944, v4945, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_588(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4940, v4941, 0, v4943, v4944, v4945, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_588(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4940, v4941, 0, v4943, v4944, v4945, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_590(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4940, v4941, 0, v4943, v4944, v4945, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: TRUE
f_590(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4940, v4941, 0, v4943, v4944, v4945, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_593(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4940, v4941, 0, v4943, v4944, v4945, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_593(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4940, v4941, 0, v4943, v4944, v4945, v4962, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_595(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v4941, 0, v4943, v4944, v4945, v4940, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_595(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v4941, 0, v4943, v4944, v4945, v4940, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_597(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v4941, 0, v4943, v4944, v4945, v4940, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 < v4962 && 2 <= v4940
f_597(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v4941, 0, v4943, v4944, v4945, v4940, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_599(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v4941, 0, v4943, v4944, v4945, v4940, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_599(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v4941, 0, v4943, v4944, v4945, v4940, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_601(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v4941, 0, v4943, v4944, v4945, v4940, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: TRUE
f_601(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v4941, 0, v4943, v4944, v4945, v4940, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_604(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v4941, 0, v4943, v4944, v4945, v4940, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_604(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v4941, 0, v4943, v4944, v4945, v4940, v5027, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_606(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v5027, 0, v4943, v4944, v4945, v4940, v4941, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_606(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v5027, 0, v4943, v4944, v4945, v4940, v4941, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_608(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v5027, 0, v4943, v4944, v4945, v4940, v4941, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 < v5027 && 2 <= v4941
f_608(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v5027, 0, v4943, v4944, v4945, v4940, v4941, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_610(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v5027, 0, v4943, v4944, v4945, v4940, v4941, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_610(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v5027, 0, v4943, v4944, v4945, v4940, v4941, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_612(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v5027, 0, v4943, v4944, v4945, v4940, v4941, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: 0 = 0
f_612(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v5027, 0, v4943, v4944, v4945, v4940, v4941, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) -> f_545(v4931, v4932, v4933, v4934, v4935, v4936, v4937, v4957, 1, v4962, v5027, 0, v4943, v4944, v4945, v4940, v4941, v4950, v4951, v4952, v4953, v4954, v4955, v4956, 3, 7, 2, 4, 8) :|: TRUE
f_545(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, 0, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 3, 7, 2, 4, 8) -> f_548(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, 0, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 3, 7, 2, 4, 8) :|: TRUE
f_548(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, 0, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 3, 7, 2, 4, 8) -> f_550(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, v4845, 0, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 3, 7, 2, 4, 8) :|: TRUE
f_550(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, v4845, 0, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 3, 7, 2, 4, 8) -> f_552(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, v4845, 0, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 3, 7, 2, 4, 8) :|: v4845 != 0
f_550(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, v4845, 0, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 3, 7, 2, 4, 8) -> f_553(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, 0, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 3, 7, 2, 4, 8) :|: v4845 = 0
f_552(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, v4845, 0, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 3, 7, 2, 4, 8) -> f_554(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, v4845, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_554(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, v4845, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 0, 3, 7, 2, 4, 8) -> f_556(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, v4845, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 0, 3, 7, 2, 4, 8) :|: TRUE
f_556(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, v4845, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 0, 3, 7, 2, 4, 8) -> f_557(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, v4845, v4410, v4411, v4412, v4405, v4413, v4414, v4408, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 0, 3, 7, 2, 4, 8) :|: TRUE
f_553(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, 0, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 3, 7, 2, 4, 8) -> f_555(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, 0, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 3, 7, 2, 4, 8) :|: 0 = 0
f_555(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, 0, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 3, 7, 2, 4, 8) -> f_558(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, 0, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 3, 7, 2, 4, 8) :|: TRUE
f_558(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, 0, v4410, v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 3, 7, 2, 4, 8) -> f_559(v4398, v4399, v4400, v4401, v4402, v4403, v4404, v4405, 1, v4407, v4408, 0, v4410, v4411, v4412, v4405, v4413, v4414, v4408, v4415, v4416, v4417, v4418, v4419, v4420, v4421, 3, 7, 2, 4, 8) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_557(v4875:0, v4876:0, v4877:0, v4878:0, v4879:0, v4880:0, v4881:0, 1 + v4958:0, 1, v4884:0, v4885:0, v4886:0, v4887:0, v4888:0, v4889:0, v4890:0, v4891:0, v4892:0, v4893:0, v4894:0, v4895:0, v4896:0, v4897:0, v4898:0, v4899:0, v4900:0, 0, 3, 7, 2, 4, 8) -> f_557(v4875:0, v4876:0, v4877:0, v4878:0, v4879:0, v4880:0, v4881:0, v4958:0, 1, v4884:0, v4961:0, v4048:0, 1 + v4958:0, v4958:0, v4961:0, v4890:0, v4891:0, v4892:0, v4893:0, v4894:0, v4895:0, v4896:0, v4897:0, v4898:0, v4899:0, v4900:0, 0, 3, 7, 2, 4, 8) :|: v4958:0 > 0 && v4890:0 > 1 && v4048:0 < 0 && v4961:0 > 0
f_557(v4875:0, v4876:0, v4877:0, v4878:0, v4879:0, v4880:0, v4881:0, 1 + v4958:0, 1, v4884:0, v4885:0, v4886:0, v4887:0, v4888:0, v4889:0, v4890:0, v4891:0, v4892:0, v4893:0, v4894:0, v4895:0, v4896:0, v4897:0, v4898:0, v4899:0, v4900:0, 0, 3, 7, 2, 4, 8) -> f_557(v4875:0, v4876:0, v4877:0, v4878:0, v4879:0, v4880:0, v4881:0, v4958:0, 1, v4884:0, v4961:0, v4048:0, 1 + v4958:0, v4958:0, v4961:0, v4890:0, v4891:0, v4892:0, v4893:0, v4894:0, v4895:0, v4896:0, v4897:0, v4898:0, v4899:0, v4900:0, 0, 3, 7, 2, 4, 8) :|: v4958:0 > 0 && v4890:0 > 1 && v4048:0 > 0 && v4961:0 > 0
f_550(v4398:0, v4399:0, v4400:0, v4401:0, v4402:0, v4403:0, v4404:0, v4405:0, 1, 1 + v4962:0, 1 + v5027:0, 0, 0, v4410:0, v4411:0, v4412:0, v4413:0, v4414:0, v4415:0, v4416:0, v4417:0, v4418:0, v4419:0, v4420:0, v4421:0, 3, 7, 2, 4, 8) -> f_550(v4398:0, v4399:0, v4400:0, v4401:0, v4402:0, v4403:0, v4404:0, v4957:0, 1, v4962:0, v5027:0, v4845:1, 0, v4410:0, v4411:0, v4412:0, 1 + v4962:0, 1 + v5027:0, v4415:0, v4416:0, v4417:0, v4418:0, v4419:0, v4420:0, v4421:0, 3, 7, 2, 4, 8) :|: v4962:0 > 0 && v5027:0 > 0 && v4957:0 > 0
f_550(v4398:0, v4399:0, v4400:0, v4401:0, v4402:0, v4403:0, v4404:0, v4405:0, 1, v4407:0, v4408:0, v4845:0, 0, v4410:0, v4411:0, v4412:0, v4413:0, v4414:0, v4415:0, v4416:0, v4417:0, v4418:0, v4419:0, v4420:0, v4421:0, 3, 7, 2, 4, 8) -> f_557(v4398:0, v4399:0, v4400:0, v4401:0, v4402:0, v4403:0, v4404:0, v4405:0, 1, v4407:0, v4408:0, v4845:0, v4410:0, v4411:0, v4412:0, v4405:0, v4413:0, v4414:0, v4408:0, v4415:0, v4416:0, v4417:0, v4418:0, v4419:0, v4420:0, v4421:0, 0, 3, 7, 2, 4, 8) :|: v4845:0 < 0
f_550(v4398:0, v4399:0, v4400:0, v4401:0, v4402:0, v4403:0, v4404:0, v4405:0, 1, v4407:0, v4408:0, v4845:0, 0, v4410:0, v4411:0, v4412:0, v4413:0, v4414:0, v4415:0, v4416:0, v4417:0, v4418:0, v4419:0, v4420:0, v4421:0, 3, 7, 2, 4, 8) -> f_557(v4398:0, v4399:0, v4400:0, v4401:0, v4402:0, v4403:0, v4404:0, v4405:0, 1, v4407:0, v4408:0, v4845:0, v4410:0, v4411:0, v4412:0, v4405:0, v4413:0, v4414:0, v4408:0, v4415:0, v4416:0, v4417:0, v4418:0, v4419:0, v4420:0, v4421:0, 0, 3, 7, 2, 4, 8) :|: v4845:0 > 0
f_557(v4875:0, v4876:0, v4877:0, v4878:0, v4879:0, v4880:0, v4881:0, 1 + v4958:0, 1, 1 + v4962:0, v4885:0, v4886:0, v4887:0, v4888:0, v4889:0, v4890:0, v4891:0, v4892:0, v4893:0, v4894:0, v4895:0, v4896:0, v4897:0, v4898:0, v4899:0, v4900:0, 0, 3, 7, 2, 4, 8) -> f_550(v4875:0, v4876:0, v4877:0, v4878:0, v4879:0, v4880:0, v4881:0, v4957:0, 1, v4962:0, v5027:0, v4845:0, 0, 1 + v4958:0, v4958:0, 1 + v5027:0, 1 + v4962:0, 1 + v5027:0, v4894:0, v4895:0, v4896:0, v4897:0, v4898:0, v4899:0, v4900:0, 3, 7, 2, 4, 8) :|: v4958:0 > 0 && v4962:0 > 0 && v5027:0 > 0 && v4890:0 > 1 && v4957:0 > 0
Filtered unneeded arguments:
   f_557(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32) -> f_557(x8, x10, x16)
   f_550(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_550(x8, x10, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_557(sum~cons_1~v4958:0, v4884:0, v4890:0) -> f_557(v4958:0, v4884:0, v4890:0) :|: v4958:0 > 0 && v4890:0 > 1 && sum~cons_1~v4958:0 = 1 + v4958:0
f_550(v4405:0, sum~cons_1~v4962:0, sum~cons_1~v5027:0, cons_0) -> f_550(v4957:0, v4962:0, v5027:0, v4845:1) :|: v5027:0 > 0 && v4957:0 > 0 && v4962:0 > 0 && sum~cons_1~v4962:0 = 1 + v4962:0 && sum~cons_1~v5027:0 = 1 + v5027:0 && cons_0 = 0
f_550(v4405:0, v4407:0, v4408:0, v4845:0) -> f_557(v4405:0, v4407:0, v4405:0) :|: v4845:0 < 0
f_550(v4405:0, v4407:0, v4408:0, v4845:0) -> f_557(v4405:0, v4407:0, v4405:0) :|: v4845:0 > 0
f_557(sum~cons_1~v4958:0, sum~cons_1~v4962:0, v4890:0) -> f_550(v4957:0, v4962:0, v5027:0, v4845:0) :|: v4962:0 > 0 && v4958:0 > 0 && v5027:0 > 0 && v4957:0 > 0 && v4890:0 > 1 && sum~cons_1~v4958:0 = 1 + v4958:0 && sum~cons_1~v4962:0 = 1 + v4962:0

----------------------------------------

(9)
Obligation:
Rules:
f_557(sum~cons_1~v4958:0, v4884:0, v4890:0) -> f_557(v4958:0, v4884:0, v4890:0) :|: v4958:0 > 0 && v4890:0 > 1 && sum~cons_1~v4958:0 = 1 + v4958:0
f_550(v4405:0, sum~cons_1~v4962:0, sum~cons_1~v5027:0, cons_0) -> f_550(v4957:0, v4962:0, v5027:0, v4845:1) :|: v5027:0 > 0 && v4957:0 > 0 && v4962:0 > 0 && sum~cons_1~v4962:0 = 1 + v4962:0 && sum~cons_1~v5027:0 = 1 + v5027:0 && cons_0 = 0
f_550(x, x1, x2, x3) -> f_557(x, x1, x) :|: x3 < 0
f_550(x4, x5, x6, x7) -> f_557(x4, x5, x4) :|: x7 > 0
f_557(x8, x9, x10) -> f_550(x11, x12, x13, x14) :|: x12 > 0 && x15 > 0 && x13 > 0 && x11 > 0 && x10 > 1 && x8 = 1 + x15 && x9 = 1 + x12

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_550(v4405:0:0, sum~cons_1~v4962:0:0, sum~cons_1~v5027:0:0, cons_0) -> f_550(v4957:0:0, v4962:0:0, v5027:0:0, v4845:1:0) :|: v5027:0:0 > 0 && v4957:0:0 > 0 && v4962:0:0 > 0 && sum~cons_1~v4962:0:0 = 1 + v4962:0:0 && sum~cons_1~v5027:0:0 = 1 + v5027:0:0 && cons_0 = 0
f_550(x4:0, x5:0, x6:0, x7:0) -> f_557(x4:0, x5:0, x4:0) :|: x7:0 > 0
f_550(x:0, x1:0, x2:0, x3:0) -> f_557(x:0, x1:0, x:0) :|: x3:0 < 0
f_557(sum~cons_1~v4958:0:0, v4884:0:0, v4890:0:0) -> f_557(v4958:0:0, v4884:0:0, v4890:0:0) :|: v4958:0:0 > 0 && v4890:0:0 > 1 && sum~cons_1~v4958:0:0 = 1 + v4958:0:0
f_557(sum~cons_1~x15:0, sum~cons_1~x12:0, x10:0) -> f_550(x11:0, x12:0, x13:0, x14:0) :|: x11:0 > 0 && x10:0 > 1 && x13:0 > 0 && x15:0 > 0 && x12:0 > 0 && sum~cons_1~x15:0 = 1 + x15:0 && sum~cons_1~x12:0 = 1 + x12:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_550(x, x1, x2, x3)] = -1 + x1
[f_557(x4, x5, x6)] = -1 + x5

The following rules are decreasing:
f_550(v4405:0:0, sum~cons_1~v4962:0:0, sum~cons_1~v5027:0:0, cons_0) -> f_550(v4957:0:0, v4962:0:0, v5027:0:0, v4845:1:0) :|: v5027:0:0 > 0 && v4957:0:0 > 0 && v4962:0:0 > 0 && sum~cons_1~v4962:0:0 = 1 + v4962:0:0 && sum~cons_1~v5027:0:0 = 1 + v5027:0:0 && cons_0 = 0
f_557(sum~cons_1~x15:0, sum~cons_1~x12:0, x10:0) -> f_550(x11:0, x12:0, x13:0, x14:0) :|: x11:0 > 0 && x10:0 > 1 && x13:0 > 0 && x15:0 > 0 && x12:0 > 0 && sum~cons_1~x15:0 = 1 + x15:0 && sum~cons_1~x12:0 = 1 + x12:0
The following rules are bounded:
f_550(v4405:0:0, sum~cons_1~v4962:0:0, sum~cons_1~v5027:0:0, cons_0) -> f_550(v4957:0:0, v4962:0:0, v5027:0:0, v4845:1:0) :|: v5027:0:0 > 0 && v4957:0:0 > 0 && v4962:0:0 > 0 && sum~cons_1~v4962:0:0 = 1 + v4962:0:0 && sum~cons_1~v5027:0:0 = 1 + v5027:0:0 && cons_0 = 0
f_557(sum~cons_1~x15:0, sum~cons_1~x12:0, x10:0) -> f_550(x11:0, x12:0, x13:0, x14:0) :|: x11:0 > 0 && x10:0 > 1 && x13:0 > 0 && x15:0 > 0 && x12:0 > 0 && sum~cons_1~x15:0 = 1 + x15:0 && sum~cons_1~x12:0 = 1 + x12:0

----------------------------------------

(13)
Obligation:
Rules:
f_550(x4:0, x5:0, x6:0, x7:0) -> f_557(x4:0, x5:0, x4:0) :|: x7:0 > 0
f_550(x:0, x1:0, x2:0, x3:0) -> f_557(x:0, x1:0, x:0) :|: x3:0 < 0
f_557(sum~cons_1~v4958:0:0, v4884:0:0, v4890:0:0) -> f_557(v4958:0:0, v4884:0:0, v4890:0:0) :|: v4958:0:0 > 0 && v4890:0:0 > 1 && sum~cons_1~v4958:0:0 = 1 + v4958:0:0

----------------------------------------

(14) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(15)
Obligation:
Rules:
f_557(sum~cons_1~v4958:0:0, v4884:0:0, v4890:0:0) -> f_557(v4958:0:0, v4884:0:0, v4890:0:0) :|: v4958:0:0 > 0 && v4890:0:0 > 1 && sum~cons_1~v4958:0:0 = 1 + v4958:0:0

----------------------------------------

(16) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(17)
Obligation:
Rules:
f_557(sum~cons_1~v4958:0:0:0, v4884:0:0:0, v4890:0:0:0) -> f_557(v4958:0:0:0, v4884:0:0:0, v4890:0:0:0) :|: v4958:0:0:0 > 0 && v4890:0:0:0 > 1 && sum~cons_1~v4958:0:0:0 = 1 + v4958:0:0:0

----------------------------------------

(18) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_557(x1, x2, x3) -> f_557(x1, x3)

----------------------------------------

(19)
Obligation:
Rules:
f_557(sum~cons_1~v4958:0:0:0, v4890:0:0:0) -> f_557(v4958:0:0:0, v4890:0:0:0) :|: v4958:0:0:0 > 0 && v4890:0:0:0 > 1 && sum~cons_1~v4958:0:0:0 = 1 + v4958:0:0:0

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_557(x, x1)] = x

The following rules are decreasing:
f_557(sum~cons_1~v4958:0:0:0, v4890:0:0:0) -> f_557(v4958:0:0:0, v4890:0:0:0) :|: v4958:0:0:0 > 0 && v4890:0:0:0 > 1 && sum~cons_1~v4958:0:0:0 = 1 + v4958:0:0:0
The following rules are bounded:
f_557(sum~cons_1~v4958:0:0:0, v4890:0:0:0) -> f_557(v4958:0:0:0, v4890:0:0:0) :|: v4958:0:0:0 > 0 && v4890:0:0:0 > 1 && sum~cons_1~v4958:0:0:0 = 1 + v4958:0:0:0

----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
SCC
----------------------------------------

(23) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 36 rulesP rules:
f_276(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v67, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_279(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v67, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_279(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v67, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_282(v1, v3, v5, v7, v9, v12, v15, v62, 1, v20, v22, 0, v67, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_282(v1, v3, v5, v7, v9, v12, v15, v62, 1, v20, v22, 0, v67, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_284(v1, v3, v5, v7, v9, v12, v15, v62, 1, v20, v22, 0, v67, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 < v62
f_284(v1, v3, v5, v7, v9, v12, v15, v62, 1, v20, v22, 0, v67, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_287(v1, v3, v5, v7, v9, v12, v15, v62, 1, v20, v22, 0, v67, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_287(v1, v3, v5, v7, v9, v12, v15, v62, 1, v20, v22, 0, v67, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_290(v1, v3, v5, v7, v9, v12, v15, v62, 1, v20, v22, 0, v67, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_290(v1, v3, v5, v7, v9, v12, v15, v62, 1, v20, v22, 0, v67, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_293(v1, v3, v5, v7, v9, v12, v15, v62, 1, v20, v22, 0, v67, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_293(v1, v3, v5, v7, v9, v12, v15, v62, 1, v20, v22, 0, v67, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_297(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v22, 0, v20, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_297(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v22, 0, v20, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_301(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v22, 0, v20, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 < v67 && 2 <= v20
f_301(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v22, 0, v20, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_305(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v22, 0, v20, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_305(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v22, 0, v20, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_309(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v22, 0, v20, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_309(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v22, 0, v20, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_313(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v22, 0, v20, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_313(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v22, 0, v20, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_317(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_317(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_321(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 < v70 && 2 <= v22
f_321(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_325(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_325(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_329(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_329(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_333(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_333(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_337(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, v700, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_337(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, v700, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_342(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: v700 = 0
f_342(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_346(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_346(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_350(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_350(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_354(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_354(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_358(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_358(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_362(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_362(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_366(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_366(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v20, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_369(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_369(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_372(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 1 + v780 = v67 && 0 <= v780
f_372(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_375(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_375(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_378(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: TRUE
f_378(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_381(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) :|: 0 = 0
f_381(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v22, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8, 2) -> f_384(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_384(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_387(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v914, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 1 + v914 = v70 && 0 <= v914
f_387(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v914, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_391(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v914, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: 0 = 0
f_391(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v914, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_396(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v914, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_396(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v914, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_401(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v914, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_401(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v914, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_273(v1, v3, v5, v7, v9, v12, v15, v62, 1, v67, v70, 0, v728, v780, v914, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
f_273(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v67, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) -> f_276(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, 0, v62, v67, v70, v2, v4, v6, v8, v10, v13, v16, 3, 7, 4, 8) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_276(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v18:0, 1, v20:0, v22:0, 0, v62:0, 1 + v780:0, 1 + v914:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8) -> f_276(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v62:0, 1, 1 + v780:0, 1 + v914:0, 0, v728:0, v780:0, v914:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 3, 7, 4, 8) :|: v62:0 > 0 && v20:0 > 1 && v780:0 > -1 && v22:0 > 1 && v914:0 > -1
Filtered unneeded arguments:
   f_276(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26) -> f_276(x10, x11, x13, x14, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_276(v20:0, v22:0, v62:0, sum~cons_1~v780:0, sum~cons_1~v914:0) -> f_276(1 + v780:0, 1 + v914:0, v728:0, v780:0, v914:0) :|: v20:0 > 1 && v62:0 > 0 && v780:0 > -1 && v914:0 > -1 && v22:0 > 1 && sum~cons_1~v780:0 = 1 + v780:0 && sum~cons_1~v914:0 = 1 + v914:0

----------------------------------------

(24)
Obligation:
Rules:
f_276(v20:0, v22:0, v62:0, sum~cons_1~v780:0, sum~cons_1~v914:0) -> f_276(1 + v780:0, 1 + v914:0, v728:0, v780:0, v914:0) :|: v20:0 > 1 && v62:0 > 0 && v780:0 > -1 && v914:0 > -1 && v22:0 > 1 && sum~cons_1~v780:0 = 1 + v780:0 && sum~cons_1~v914:0 = 1 + v914:0

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f_276(v20:0:0, v22:0:0, v62:0:0, sum~cons_1~v780:0:0, sum~cons_1~v914:0:0) -> f_276(1 + v780:0:0, 1 + v914:0:0, v728:0:0, v780:0:0, v914:0:0) :|: v914:0:0 > -1 && v22:0:0 > 1 && v780:0:0 > -1 && v62:0:0 > 0 && v20:0:0 > 1 && sum~cons_1~v780:0:0 = 1 + v780:0:0 && sum~cons_1~v914:0:0 = 1 + v914:0:0

----------------------------------------

(27) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_276(x, x1, x2, x3, x4)] = x4

The following rules are decreasing:
f_276(v20:0:0, v22:0:0, v62:0:0, sum~cons_1~v780:0:0, sum~cons_1~v914:0:0) -> f_276(1 + v780:0:0, 1 + v914:0:0, v728:0:0, v780:0:0, v914:0:0) :|: v914:0:0 > -1 && v22:0:0 > 1 && v780:0:0 > -1 && v62:0:0 > 0 && v20:0:0 > 1 && sum~cons_1~v780:0:0 = 1 + v780:0:0 && sum~cons_1~v914:0:0 = 1 + v914:0:0
The following rules are bounded:
f_276(v20:0:0, v22:0:0, v62:0:0, sum~cons_1~v780:0:0, sum~cons_1~v914:0:0) -> f_276(1 + v780:0:0, 1 + v914:0:0, v728:0:0, v780:0:0, v914:0:0) :|: v914:0:0 > -1 && v22:0:0 > 1 && v780:0:0 > -1 && v62:0:0 > 0 && v20:0:0 > 1 && sum~cons_1~v780:0:0 = 1 + v780:0:0 && sum~cons_1~v914:0:0 = 1 + v914:0:0

----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
SCC
----------------------------------------

(30) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 30 rulesP rules:
f_264(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, v61, v63, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_266(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: 0 = 0
f_266(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_268(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 < v63 && 2 <= v18
f_268(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_271(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_271(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_274(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_274(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_277(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_277(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_280(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_280(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_283(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_283(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_286(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_286(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_289(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_289(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v22, v61, v18, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_292(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_292(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_295(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 < v66
f_295(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_299(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_299(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_303(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_303(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_307(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_307(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v61, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_311(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_311(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_315(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: v411 != 0
f_315(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_319(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_319(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_323(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: TRUE
f_323(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_327(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_327(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v18, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8, 2) -> f_331(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: 0 = 0
f_331(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_335(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: 1 + v698 = v63 && 0 <= v698
f_335(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_339(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: 0 = 0
f_339(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_343(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: TRUE
f_343(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_347(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v702, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: TRUE
f_347(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v702, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_351(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v702, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: 0 = 0
f_351(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v702, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_355(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v702, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: TRUE
f_355(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v702, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_359(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v702, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: TRUE
f_359(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v702, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_363(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v702, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: TRUE
f_363(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v702, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_262(v1, v3, v5, v7, v9, v12, v15, v63, 1, v20, v66, v411, v698, v702, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: TRUE
f_262(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, v61, v63, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) -> f_264(v1, v3, v5, v7, v9, v12, v15, v18, 1, v20, v22, v61, v63, v66, v2, v4, v6, v8, v10, v13, v16, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_264(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v18:0, 1, v20:0, v22:0, v61:0, 1 + v698:0, v66:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8) -> f_264(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, 1 + v698:0, 1, v20:0, v66:0, v411:0, v698:0, v702:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8) :|: v18:0 > 1 && v698:0 > -1 && v66:0 > 0 && v411:0 < 0
f_264(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, v18:0, 1, v20:0, v22:0, v61:0, 1 + v698:0, v66:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8) -> f_264(v1:0, v3:0, v5:0, v7:0, v9:0, v12:0, v15:0, 1 + v698:0, 1, v20:0, v66:0, v411:0, v698:0, v702:0, v2:0, v4:0, v6:0, v8:0, v10:0, v13:0, v16:0, 0, 3, 7, 4, 8) :|: v18:0 > 1 && v698:0 > -1 && v66:0 > 0 && v411:0 > 0
Filtered unneeded arguments:
   f_264(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26) -> f_264(x8, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_264(v18:0, sum~cons_1~v698:0, v66:0) -> f_264(1 + v698:0, v698:0, v702:0) :|: v698:0 > -1 && v66:0 > 0 && v18:0 > 1 && sum~cons_1~v698:0 = 1 + v698:0

----------------------------------------

(31)
Obligation:
Rules:
f_264(v18:0, sum~cons_1~v698:0, v66:0) -> f_264(1 + v698:0, v698:0, v702:0) :|: v698:0 > -1 && v66:0 > 0 && v18:0 > 1 && sum~cons_1~v698:0 = 1 + v698:0

----------------------------------------

(32) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(33)
Obligation:
Rules:
f_264(v18:0:0, sum~cons_1~v698:0:0, v66:0:0) -> f_264(1 + v698:0:0, v698:0:0, v702:0:0) :|: v698:0:0 > -1 && v66:0:0 > 0 && v18:0:0 > 1 && sum~cons_1~v698:0:0 = 1 + v698:0:0

----------------------------------------

(34) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_264(x, x1, x2)] = x1

The following rules are decreasing:
f_264(v18:0:0, sum~cons_1~v698:0:0, v66:0:0) -> f_264(1 + v698:0:0, v698:0:0, v702:0:0) :|: v698:0:0 > -1 && v66:0:0 > 0 && v18:0:0 > 1 && sum~cons_1~v698:0:0 = 1 + v698:0:0
The following rules are bounded:
f_264(v18:0:0, sum~cons_1~v698:0:0, v66:0:0) -> f_264(1 + v698:0:0, v698:0:0, v702:0:0) :|: v698:0:0 > -1 && v66:0:0 > 0 && v18:0:0 > 1 && sum~cons_1~v698:0:0 = 1 + v698:0:0

----------------------------------------

(35)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
