YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ZFhXK.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 528 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 32 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/ZFhXK.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/ZFhXK.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		br %9
	9:
		%10 = load %2
		%11 = icmp sle %10 100
		br %11, %12, %16
	12:
		%13 = load %3
		%14 = load %4
		%15 = icmp sle %13 %14
		br %16
	16:
		%17 = phi [0, %9], [%15, %12]
		br %17, %18, %25
	18:
		%19 = load %2
		store %19, %5
		%20 = load %3
		store %20, %2
		%21 = load %5
		%22 = add i32 %21, 1
		store %22, %3
		%23 = load %4
		%24 = add i32 %23, -1
		store %24, %4
		br %9
	25:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_225(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v294, v291, v295, v296, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_226(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v294, v291, v295, v296, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: v293 <= 100
f_226(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v294, v291, v295, v296, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_228(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v294, v291, v295, v296, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: 0 = 0
f_228(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v294, v291, v295, v296, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_230(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v294, v291, v295, v296, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: TRUE
f_230(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v294, v291, v295, v296, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_232(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v294, v291, v296, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: 0 = 0
f_232(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v294, v291, v296, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_234(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: 0 = 0
f_234(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_235(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: v295 <= v296
f_235(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_237(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: 0 = 0
f_237(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_239(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: 0 = 0
f_239(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_241(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: TRUE
f_241(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_243(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: 0 = 0
f_243(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_244(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: TRUE
f_244(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_245(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: 0 = 0
f_245(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_246(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: TRUE
f_246(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v291, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_247(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: 0 = 0
f_247(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_248(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v407, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: v407 = 1 + v293 && v407 <= 101
f_248(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v407, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_249(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v407, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: TRUE
f_249(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v407, v294, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_250(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v407, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: 0 = 0
f_250(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v407, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_251(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v407, v409, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: 1 + v409 = v296
f_251(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v407, v409, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_252(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v407, v409, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: TRUE
f_252(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v407, v409, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_253(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v407, v409, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: TRUE
f_253(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v407, v409, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_224(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v295, v296, v407, v409, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: TRUE
f_224(v283, v284, v285, v286, v287, v288, v289, v290, v291, 1, v293, v294, v295, v296, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) -> f_225(v283, v284, v285, v286, v287, v288, v289, v290, v293, 1, v294, v291, v295, v296, v297, v298, v299, v300, v301, 0, 3, 100, 101, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_225(v283:0, v284:0, v285:0, v286:0, v287:0, v288:0, v289:0, v290:0, v293:0, 1, v294:0, v291:0, v295:0, 1 + v409:0, v297:0, v298:0, v299:0, v300:0, v301:0, 0, 3, 100, 101, 4) -> f_225(v283:0, v284:0, v285:0, v286:0, v287:0, v288:0, v289:0, v290:0, v295:0, 1, 1 + v409:0, v293:0, 1 + v293:0, v409:0, v297:0, v298:0, v299:0, v300:0, v301:0, 0, 3, 100, 101, 4) :|: v293:0 < 101 && v295:0 <= 1 + v409:0
Filtered unneeded arguments:
   f_225(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_225(x9, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_225(v293:0, v295:0, sum~cons_1~v409:0) -> f_225(v295:0, 1 + v293:0, v409:0) :|: v293:0 < 101 && v295:0 <= 1 + v409:0 && sum~cons_1~v409:0 = 1 + v409:0

----------------------------------------

(8)
Obligation:
Rules:
f_225(v293:0, v295:0, sum~cons_1~v409:0) -> f_225(v295:0, 1 + v293:0, v409:0) :|: v293:0 < 101 && v295:0 <= 1 + v409:0 && sum~cons_1~v409:0 = 1 + v409:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_225(v293:0:0, v295:0:0, sum~cons_1~v409:0:0) -> f_225(v295:0:0, 1 + v293:0:0, v409:0:0) :|: v293:0:0 < 101 && v295:0:0 <= 1 + v409:0:0 && sum~cons_1~v409:0:0 = 1 + v409:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_225(x, x1, x2)] = 100 - x - x1 + x2

The following rules are decreasing:
f_225(v293:0:0, v295:0:0, sum~cons_1~v409:0:0) -> f_225(v295:0:0, 1 + v293:0:0, v409:0:0) :|: v293:0:0 < 101 && v295:0:0 <= 1 + v409:0:0 && sum~cons_1~v409:0:0 = 1 + v409:0:0
The following rules are bounded:
f_225(v293:0:0, v295:0:0, sum~cons_1~v409:0:0) -> f_225(v295:0:0, 1 + v293:0:0, v409:0:0) :|: v293:0:0 < 101 && v295:0:0 <= 1 + v409:0:0 && sum~cons_1~v409:0:0 = 1 + v409:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
