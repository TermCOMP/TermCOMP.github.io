YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/IQF7W.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 308 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 2 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 10 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/IQF7W.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/IQF7W.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		store 1, %3
		br %5
	5:
		%6 = load %2
		%7 = icmp sgt %6 0
		br %7, %8, %14
	8:
		%9 = load %2
		%10 = load %3
		%11 = sub i32 %9, %10
		store %11, %2
		%12 = load %3
		%13 = add i32 %12, 1
		store %13, %3
		br %5
	14:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_160(v64, v65, v66, v67, v71, 1, v68, v70, v72, v73, v74, v75, 0, 3, 2, 4) -> f_161(v64, v65, v66, v67, v71, 1, v68, v70, v72, v73, v74, v75, 0, 3, 2, 4) :|: 0 < v71
f_161(v64, v65, v66, v67, v71, 1, v68, v70, v72, v73, v74, v75, 0, 3, 2, 4) -> f_163(v64, v65, v66, v67, v71, 1, v68, v70, v72, v73, v74, v75, 0, 3, 2, 4) :|: 0 = 0
f_163(v64, v65, v66, v67, v71, 1, v68, v70, v72, v73, v74, v75, 0, 3, 2, 4) -> f_165(v64, v65, v66, v67, v71, 1, v68, v70, v72, v73, v74, v75, 0, 3, 2, 4) :|: TRUE
f_165(v64, v65, v66, v67, v71, 1, v68, v70, v72, v73, v74, v75, 0, 3, 2, 4) -> f_167(v64, v65, v66, v67, v71, 1, v70, v72, v73, v74, v75, 0, 3, 2, 4) :|: 0 = 0
f_167(v64, v65, v66, v67, v71, 1, v70, v72, v73, v74, v75, 0, 3, 2, 4) -> f_168(v64, v65, v66, v67, v71, 1, v72, v70, v73, v74, v75, 0, 3, 2, 4) :|: 0 = 0
f_168(v64, v65, v66, v67, v71, 1, v72, v70, v73, v74, v75, 0, 3, 2, 4) -> f_169(v64, v65, v66, v67, v71, 1, v72, v77, v70, v73, v74, v75, 0, 3, 2, 4) :|: v77 + v72 = v71
f_169(v64, v65, v66, v67, v71, 1, v72, v77, v70, v73, v74, v75, 0, 3, 2, 4) -> f_170(v64, v65, v66, v67, v71, 1, v72, v77, v70, v73, v74, v75, 0, 3, 2, 4) :|: TRUE
f_170(v64, v65, v66, v67, v71, 1, v72, v77, v70, v73, v74, v75, 0, 3, 2, 4) -> f_171(v64, v65, v66, v67, v71, 1, v72, v77, v73, v74, v75, 0, 3, 2, 4) :|: 0 = 0
f_171(v64, v65, v66, v67, v71, 1, v72, v77, v73, v74, v75, 0, 3, 2, 4) -> f_172(v64, v65, v66, v67, v71, 1, v72, v77, v79, v73, v74, v75, 0, 3, 2, 4) :|: v79 = 1 + v72 && 3 <= v79
f_172(v64, v65, v66, v67, v71, 1, v72, v77, v79, v73, v74, v75, 0, 3, 2, 4) -> f_173(v64, v65, v66, v67, v71, 1, v72, v77, v79, v73, v74, v75, 0, 3, 2, 4) :|: TRUE
f_173(v64, v65, v66, v67, v71, 1, v72, v77, v79, v73, v74, v75, 0, 3, 2, 4) -> f_174(v64, v65, v66, v67, v71, 1, v72, v77, v79, v73, v74, v75, 0, 3, 2, 4) :|: TRUE
f_174(v64, v65, v66, v67, v71, 1, v72, v77, v79, v73, v74, v75, 0, 3, 2, 4) -> f_159(v64, v65, v66, v67, v71, 1, v72, v77, v79, v73, v74, v75, 0, 3, 2, 4) :|: TRUE
f_159(v64, v65, v66, v67, v68, 1, v70, v71, v72, v73, v74, v75, 0, 3, 2, 4) -> f_160(v64, v65, v66, v67, v71, 1, v68, v70, v72, v73, v74, v75, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_160(v64:0, v65:0, v66:0, v67:0, v77:0 + v72:0, 1, v68:0, v70:0, v72:0, v73:0, v74:0, v75:0, 0, 3, 2, 4) -> f_160(v64:0, v65:0, v66:0, v67:0, v77:0, 1, v77:0 + v72:0, v72:0, 1 + v72:0, v73:0, v74:0, v75:0, 0, 3, 2, 4) :|: v72:0 > 1 && v77:0 + v72:0 > 0
Filtered unneeded arguments:
   f_160(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_160(x5, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_160(sum~v77:0~v72:0, v72:0) -> f_160(v77:0, 1 + v72:0) :|: v72:0 > 1 && v77:0 + v72:0 > 0 && sum~v77:0~v72:0 = v77:0 + v72:0

----------------------------------------

(8)
Obligation:
Rules:
f_160(sum~v77:0~v72:0, v72:0) -> f_160(v77:0, 1 + v72:0) :|: v72:0 > 1 && v77:0 + v72:0 > 0 && sum~v77:0~v72:0 = v77:0 + v72:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_160(sum~v77:0:0~v72:0:0, v72:0:0) -> f_160(v77:0:0, 1 + v72:0:0) :|: v72:0:0 > 1 && v77:0:0 + v72:0:0 > 0 && sum~v77:0:0~v72:0:0 = v77:0:0 + v72:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_160 ] = 1/2*f_160_1

The following rules are decreasing:
f_160(sum~v77:0:0~v72:0:0, v72:0:0) -> f_160(v77:0:0, 1 + v72:0:0) :|: v72:0:0 > 1 && v77:0:0 + v72:0:0 > 0 && sum~v77:0:0~v72:0:0 = v77:0:0 + v72:0:0

The following rules are bounded:
f_160(sum~v77:0:0~v72:0:0, v72:0:0) -> f_160(v77:0:0, 1 + v72:0:0) :|: v72:0:0 > 1 && v77:0:0 + v72:0:0 > 0 && sum~v77:0:0~v72:0:0 = v77:0:0 + v72:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
