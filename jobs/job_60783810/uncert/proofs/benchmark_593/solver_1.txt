YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/NYqym.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 714 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 44 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/NYqym.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/NYqym.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "id" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp eq %4 0
		br %5, %6, %7
	6:
		store 0, %2
		br %12
	7:
		%8 = load %3
		%9 = sub i32 %8, 1
		%10 = call i32 @id(i32 %9)
		%11 = add i32 %10, 1
		store %11, %2
		br %12
	12:
		%13 = load %2
		ret %13

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 25
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		store 10, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %2
		%5 = call i32 @id(i32 %4)
		store %5, %3
		%6 = load %3
		%7 = icmp eq %6 10
		br %7, %8, %10
	8:
		br %9
	9:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		br %10
	10:
		%11 = load %1
		ret %11


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_173(v56, v65, v57, v58, v59, v60, v61, v62, v66, 0, 10, 3, 1, 4) -> f_174(v56, v65, v67, v57, v58, v59, v60, v61, v62, v66, v68, 0, 10, 3, 1, 4) :|: 1 <= v67 && v68 = 3 + v67 && 4 <= v68
f_174(v56, v65, v67, v57, v58, v59, v60, v61, v62, v66, v68, 0, 10, 3, 1, 4) -> f_175(v56, v65, v67, v57, v58, v59, v60, v61, v62, v66, v68, 0, 10, 3, 1, 4) :|: TRUE
f_175(v56, v65, v67, v57, v58, v59, v60, v61, v62, v66, v68, 0, 10, 3, 1, 4) -> f_176(v56, v65, v67, v57, v58, v59, v60, v61, v62, v66, v68, 0, 10, 3, 1, 4) :|: TRUE
f_176(v56, v65, v67, v57, v58, v59, v60, v61, v62, v66, v68, 0, 10, 3, 1, 4) -> f_177(v56, v65, v67, v57, v58, v59, v60, v61, v62, v66, v68, 0, 10, 3, 1, 4) :|: 0 = 0
f_177(v56, v65, v67, v57, v58, v59, v60, v61, v62, v66, v68, 0, 10, 3, 1, 4) -> f_179(v56, v65, v67, v57, v58, v59, v60, v61, v62, v66, v68, 0, 10, 3, 1, 4) :|: v56 != 0
f_179(v56, v65, v67, v57, v58, v59, v60, v61, v62, v66, v68, 0, 10, 3, 1, 4) -> f_181(v56, v65, v67, 0, v57, v58, v59, v60, v61, v62, v66, v68, 10, 3, 1, 4) :|: 0 = 0
f_181(v56, v65, v67, 0, v57, v58, v59, v60, v61, v62, v66, v68, 10, 3, 1, 4) -> f_183(v56, v65, v67, 0, v57, v58, v59, v60, v61, v62, v66, v68, 10, 3, 1, 4) :|: TRUE
f_183(v56, v65, v67, 0, v57, v58, v59, v60, v61, v62, v66, v68, 10, 3, 1, 4) -> f_185(v56, v65, v67, 0, v57, v58, v59, v60, v61, v62, v66, v68, 10, 3, 1, 4) :|: 0 = 0
f_185(v56, v65, v67, 0, v57, v58, v59, v60, v61, v62, v66, v68, 10, 3, 1, 4) -> f_187(v56, v65, v67, 0, v70, v57, v58, v59, v60, v61, v62, v66, v68, 10, 3, 1, 4, 9) :|: 1 + v70 = v56 && 0 <= v70 && v70 <= 9
f_187(v56, v65, v67, 0, v70, v57, v58, v59, v60, v61, v62, v66, v68, 10, 3, 1, 4, 9) -> f_189(v70, v57, v58, v59, v60, v61, v62, v65, v66, v67, v68, 0, 10, v56, 3, 1, 4, 9) :|: 0 = 0
f_189(v70, v57, v58, v59, v60, v61, v62, v65, v66, v67, v68, 0, 10, v56, 3, 1, 4, 9) -> f_191(v70, v57, v58, v59, v60, v61, v62, v65, v66, v67, v68, 0, 10, v56, 3, 1, 4, 9) :|: TRUE
f_191(v70, v57, v58, v59, v60, v61, v62, v65, v66, v67, v68, 0, 10, v56, 3, 1, 4, 9) -> f_172(v70, v57, v58, v59, v60, v61, v62, 0, 10, 3, 1, 4) :|: TRUE
f_172(v56, v57, v58, v59, v60, v61, v62, 0, 10, 3, 1, 4) -> f_173(v56, v65, v57, v58, v59, v60, v61, v62, v66, 0, 10, 3, 1, 4) :|: 1 <= v65 && v66 = 3 + v65 && 4 <= v66
Combined rules. Obtained 1 rulesP rules:
f_173(1 + v70:0, v65:0, v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, v66:0, 0, 10, 3, 1, 4) -> f_173(v70:0, v65:1, v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, 3 + v65:1, 0, 10, 3, 1, 4) :|: v67:0 > 0 && v70:0 > -1 && v70:0 < 10 && v65:1 > 0
Filtered unneeded arguments:
   f_173(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_173(x1)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_173(sum~cons_1~v70:0) -> f_173(v70:0) :|: v70:0 > -1 && v70:0 < 10 && sum~cons_1~v70:0 = 1 + v70:0

----------------------------------------

(8)
Obligation:
Rules:
f_173(sum~cons_1~v70:0) -> f_173(v70:0) :|: v70:0 > -1 && v70:0 < 10 && sum~cons_1~v70:0 = 1 + v70:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_173(sum~cons_1~v70:0:0) -> f_173(v70:0:0) :|: v70:0:0 > -1 && v70:0:0 < 10 && sum~cons_1~v70:0:0 = 1 + v70:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_173(x)] = x

The following rules are decreasing:
f_173(sum~cons_1~v70:0:0) -> f_173(v70:0:0) :|: v70:0:0 > -1 && v70:0:0 < 10 && sum~cons_1~v70:0:0 = 1 + v70:0:0
The following rules are bounded:
f_173(sum~cons_1~v70:0:0) -> f_173(v70:0:0) :|: v70:0:0 > -1 && v70:0:0 < 10 && sum~cons_1~v70:0:0 = 1 + v70:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
