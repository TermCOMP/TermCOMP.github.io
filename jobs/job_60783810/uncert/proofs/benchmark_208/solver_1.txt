YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/6stGb.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 306 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 4 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 69 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/6stGb.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/6stGb.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %3
		br %4
	4:
		%5 = load %2
		%6 = icmp sgt %5 1
		br %6, %7, %10
	7:
		%8 = load %2
		%9 = icmp slt %8 100
		br %10
	10:
		%11 = phi [0, %4], [%9, %7]
		br %11, %12, %18
	12:
		%13 = load %2
		%14 = load %2
		%15 = mul i32 %13, %14
		store %15, %2
		%16 = load %3
		%17 = add i32 %16, 1
		store %17, %3
		br %4
	18:
		%19 = load %3
		ret %19

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 35
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @test_fun(i32 %2)
		ret %3


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_286(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_287(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: 1 < v219
f_287(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_289(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: 0 = 0
f_289(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_291(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: TRUE
f_291(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_293(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: 0 = 0
f_293(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_295(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: v219 < 100
f_295(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_298(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: 0 = 0
f_298(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_301(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: 0 = 0
f_301(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_303(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: TRUE
f_303(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_305(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: 0 = 0
f_305(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_307(v214, v215, v216, v219, 1, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: 0 = 0
f_307(v214, v215, v216, v219, 1, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_309(v214, v215, v216, v219, 1, v249, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: v249 = v219 * v219
f_309(v214, v215, v216, v219, 1, v249, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_310(v214, v215, v216, v219, 1, v249, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: TRUE
f_310(v214, v215, v216, v219, 1, v249, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_311(v214, v215, v216, v219, 1, v249, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: 0 = 0
f_311(v214, v215, v216, v219, 1, v249, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_312(v214, v215, v216, v219, 1, v249, v221, v251, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: v251 = 1 + v221 && 2 <= v251
f_312(v214, v215, v216, v219, 1, v249, v221, v251, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_313(v214, v215, v216, v219, 1, v249, v221, v251, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: TRUE
f_313(v214, v215, v216, v219, 1, v249, v221, v251, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_314(v214, v215, v216, v219, 1, v249, v221, v251, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: TRUE
f_314(v214, v215, v216, v219, 1, v249, v221, v251, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_285(v214, v215, v216, v219, 1, v249, v221, v251, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: TRUE
f_285(v214, v215, v216, v217, 1, v219, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) -> f_286(v214, v215, v216, v219, 1, v217, v220, v221, v222, v223, v224, v225, 0, 3, 2, 99, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_286(v214:0, v215:0, v216:0, v219:0, 1, v217:0, v220:0, v221:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 99, 4) -> f_286(v214:0, v215:0, v216:0, v219:0 * v219:0, 1, v219:0, v221:0, 1 + v221:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 99, 4) :|: v219:0 > 1 && v221:0 > 0 && v219:0 < 100
Filtered unneeded arguments:
   f_286(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_286(x4, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_286(v219:0, v221:0) -> f_286(v219:0 * v219:0, 1 + v221:0) :|: v221:0 > 0 && v219:0 < 100 && v219:0 > 1

----------------------------------------

(8)
Obligation:
Rules:
f_286(v219:0, v221:0) -> f_286(v219:0 * v219:0, 1 + v221:0) :|: v221:0 > 0 && v219:0 < 100 && v219:0 > 1

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_286(v219:0:0, v221:0:0) -> f_286(v219:0:0 * v219:0:0, 1 + v221:0:0) :|: v221:0:0 > 0 && v219:0:0 < 100 && v219:0:0 > 1

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_286 ] = -1/2*f_286_1

The following rules are decreasing:
f_286(v219:0:0, v221:0:0) -> f_286(v219:0:0 * v219:0:0, 1 + v221:0:0) :|: v221:0:0 > 0 && v219:0:0 < 100 && v219:0:0 > 1

The following rules are bounded:
f_286(v219:0:0, v221:0:0) -> f_286(v219:0:0 * v219:0:0, 1 + v221:0:0) :|: v221:0:0 > 0 && v219:0:0 < 100 && v219:0:0 > 1


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
