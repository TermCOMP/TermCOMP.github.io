YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/WgxIT.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1588 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 17 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 22 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 11 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 23 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/WgxIT.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/WgxIT.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		store 0, %2
		br %7
	7:
		%8 = load %3
		%9 = load %4
		%10 = add i32 %8, %9
		%11 = icmp sgt %10 0
		br %11, %12, %29
	12:
		%13 = load %3
		%14 = icmp sgt %13 0
		br %14, %15, %18
	15:
		%16 = load %3
		%17 = sub i32 %16, 1
		store %17, %3
		br %26
	18:
		%19 = load %4
		%20 = icmp sgt %19 0
		br %20, %21, %24
	21:
		%22 = load %4
		%23 = sub i32 %22, 1
		store %23, %4
		br %25
	24:
		br %25
	25:
		br %26
	26:
		%27 = load %2
		%28 = add i32 %27, 1
		store %28, %2
		br %7
	29:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_565(v875, v876, v877, v878, v879, v880, 0, v882, 1, v884, v885, v886, v887, v888, v889, v890, 3, 4) -> f_566(v875, v876, v877, v878, v879, v880, 0, v882, 1, v885, v886, v887, v888, v889, v890, 3, 4) :|: 0 = 0
f_566(v875, v876, v877, v878, v879, v880, 0, v882, 1, v885, v886, v887, v888, v889, v890, 3, 4) -> f_567(v875, v876, v877, v878, v879, v880, 0, v882, 1, v885, v903, v886, v887, v888, v889, v890, 3, 4, 2) :|: v903 = 1 + v885 && 2 <= v903
f_567(v875, v876, v877, v878, v879, v880, 0, v882, 1, v885, v903, v886, v887, v888, v889, v890, 3, 4, 2) -> f_568(v875, v876, v877, v878, v879, v880, 0, v882, 1, v885, v903, v886, v887, v888, v889, v890, 3, 4, 2) :|: TRUE
f_568(v875, v876, v877, v878, v879, v880, 0, v882, 1, v885, v903, v886, v887, v888, v889, v890, 3, 4, 2) -> f_569(v875, v876, v877, v878, v879, v880, 0, v882, 1, v885, v903, v886, v887, v888, v889, v890, 3, 4, 2) :|: TRUE
f_569(v875, v876, v877, v878, v879, v880, 0, v882, 1, v885, v903, v886, v887, v888, v889, v890, 3, 4, 2) -> f_570(v875, v876, v877, v878, v879, v880, 0, v882, 1, v885, v903, v886, v887, v888, v889, v890, 3, 4, 2) :|: 0 = 0
f_570(v875, v876, v877, v878, v879, v880, 0, v882, 1, v885, v903, v886, v887, v888, v889, v890, 3, 4, 2) -> f_571(v875, v876, v877, v878, v879, v880, 0, v886, v882, 1, v885, v903, v887, v888, v889, v890, 3, 4, 2) :|: 0 = 0
f_571(v875, v876, v877, v878, v879, v880, 0, v886, v882, 1, v885, v903, v887, v888, v889, v890, 3, 4, 2) -> f_572(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 4, 2) :|: 0 = 0
f_572(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 4, 2) -> f_573(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) :|: 0 < v886 && 2 <= v882 && 2 <= v880
f_573(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) -> f_575(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) :|: 0 = 0
f_575(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) -> f_577(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) :|: TRUE
f_577(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) -> f_579(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) :|: 0 = 0
f_579(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) -> f_580(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) :|: 0 = 0
f_580(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) -> f_581(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) :|: TRUE
f_581(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) -> f_582(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) :|: 0 = 0
f_582(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) -> f_583(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) :|: 0 = 0
f_583(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) -> f_584(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) :|: TRUE
f_584(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v882, v887, v888, v889, v890, 3, 2, 4) -> f_585(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v887, v888, v889, v890, 3, 2, 4) :|: 0 = 0
f_585(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v887, v888, v889, v890, 3, 2, 4) -> f_586(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v960, v887, v888, v889, v890, 3, 2, 4) :|: 1 + v960 = v886 && 0 <= v960
f_586(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v960, v887, v888, v889, v890, 3, 2, 4) -> f_587(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v960, v887, v888, v889, v890, 3, 2, 4) :|: TRUE
f_587(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v960, v887, v888, v889, v890, 3, 2, 4) -> f_588(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v960, v887, v888, v889, v890, 3, 2, 4) :|: TRUE
f_588(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v960, v887, v888, v889, v890, 3, 2, 4) -> f_564(v875, v876, v877, v878, v879, v880, 0, v886, 1, v885, v903, v960, v887, v888, v889, v890, 3, 4) :|: TRUE
f_564(v875, v876, v877, v878, v879, v880, 0, v882, 1, v884, v885, v886, v887, v888, v889, v890, 3, 4) -> f_565(v875, v876, v877, v878, v879, v880, 0, v882, 1, v884, v885, v886, v887, v888, v889, v890, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_565(v875:0, v876:0, v877:0, v878:0, v879:0, v880:0, 0, v882:0, 1, v884:0, v885:0, 1 + v960:0, v887:0, v888:0, v889:0, v890:0, 3, 4) -> f_565(v875:0, v876:0, v877:0, v878:0, v879:0, v880:0, 0, 1 + v960:0, 1, v885:0, 1 + v885:0, v960:0, v887:0, v888:0, v889:0, v890:0, 3, 4) :|: v885:0 > 0 && v882:0 > 1 && v960:0 > -1 && v880:0 > 1
Filtered unneeded arguments:
   f_565(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_565(x6, x8, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_565(v880:0, v882:0, v885:0, sum~cons_1~v960:0) -> f_565(v880:0, 1 + v960:0, 1 + v885:0, v960:0) :|: v882:0 > 1 && v885:0 > 0 && v880:0 > 1 && v960:0 > -1 && sum~cons_1~v960:0 = 1 + v960:0

----------------------------------------

(9)
Obligation:
Rules:
f_565(v880:0, v882:0, v885:0, sum~cons_1~v960:0) -> f_565(v880:0, 1 + v960:0, 1 + v885:0, v960:0) :|: v882:0 > 1 && v885:0 > 0 && v880:0 > 1 && v960:0 > -1 && sum~cons_1~v960:0 = 1 + v960:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_565(v880:0:0, v882:0:0, v885:0:0, sum~cons_1~v960:0:0) -> f_565(v880:0:0, 1 + v960:0:0, 1 + v885:0:0, v960:0:0) :|: v880:0:0 > 1 && v960:0:0 > -1 && v885:0:0 > 0 && v882:0:0 > 1 && sum~cons_1~v960:0:0 = 1 + v960:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_565(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_565(v880:0:0, v882:0:0, v885:0:0, sum~cons_1~v960:0:0) -> f_565(v880:0:0, 1 + v960:0:0, 1 + v885:0:0, v960:0:0) :|: v880:0:0 > 1 && v960:0:0 > -1 && v885:0:0 > 0 && v882:0:0 > 1 && sum~cons_1~v960:0:0 = 1 + v960:0:0
The following rules are bounded:
f_565(v880:0:0, v882:0:0, v885:0:0, sum~cons_1~v960:0:0) -> f_565(v880:0:0, 1 + v960:0:0, 1 + v885:0:0, v960:0:0) :|: v880:0:0 > 1 && v960:0:0 > -1 && v885:0:0 > 0 && v882:0:0 > 1 && sum~cons_1~v960:0:0 = 1 + v960:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_494(v558, v559, v560, v561, v562, v563, v564, v565, 1, 0, v568, v569, v570, v571, v572, v573, v574, 3, 4) -> f_496(v558, v559, v560, v561, v562, v563, v568, v565, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 4) :|: 0 = 0
f_496(v558, v559, v560, v561, v562, v563, v568, v565, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 4) -> f_498(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 4) :|: v610 = v562 + v568
f_498(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 4) -> f_500(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) :|: 0 < v610 && 1 <= v568 && 2 <= v564 && 2 <= v563
f_500(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) -> f_503(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) :|: 0 = 0
f_503(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) -> f_506(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) :|: TRUE
f_506(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) -> f_510(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) :|: 0 = 0
f_510(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) -> f_513(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) :|: 0 = 0
f_513(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) -> f_516(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) :|: TRUE
f_516(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) -> f_518(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) :|: 0 = 0
f_518(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) -> f_520(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) :|: 0 = 0
f_520(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) -> f_522(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) :|: TRUE
f_522(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v564, v569, v570, v571, v572, v573, v574, 3, 2, 4) -> f_524(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v569, v570, v571, v572, v573, v574, 3, 2, 4) :|: 0 = 0
f_524(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v569, v570, v571, v572, v573, v574, 3, 2, 4) -> f_526(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v569, v570, v571, v572, v573, v574, 3, 2, 4) :|: 1 + v686 = v568 && 0 <= v686
f_526(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v569, v570, v571, v572, v573, v574, 3, 2, 4) -> f_528(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v569, v570, v571, v572, v573, v574, 3, 2, 4) :|: TRUE
f_528(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v569, v570, v571, v572, v573, v574, 3, 2, 4) -> f_530(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v569, v570, v571, v572, v573, v574, 3, 2, 4) :|: TRUE
f_530(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v569, v570, v571, v572, v573, v574, 3, 2, 4) -> f_532(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v569, v570, v571, v572, v573, v574, 3, 2, 4) :|: TRUE
f_532(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v569, v570, v571, v572, v573, v574, 3, 2, 4) -> f_534(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v570, v571, v572, v573, v574, 3, 2, 4) :|: 0 = 0
f_534(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v570, v571, v572, v573, v574, 3, 2, 4) -> f_537(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v570, v761, v571, v572, v573, v574, 3, 2, 4) :|: v761 = 1 + v570 && 2 <= v761
f_537(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v570, v761, v571, v572, v573, v574, 3, 2, 4) -> f_539(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v570, v761, v571, v572, v573, v574, 3, 2, 4) :|: TRUE
f_539(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v570, v761, v571, v572, v573, v574, 3, 2, 4) -> f_541(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v570, v761, v571, v572, v573, v574, 3, 2, 4) :|: TRUE
f_541(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v570, v761, v571, v572, v573, v574, 3, 2, 4) -> f_492(v558, v559, v560, v561, v562, v563, v568, v610, 1, 0, v686, v570, v761, v571, v572, v573, v574, 3, 4) :|: TRUE
f_492(v558, v559, v560, v561, v562, v563, v564, v565, 1, 0, v568, v569, v570, v571, v572, v573, v574, 3, 4) -> f_494(v558, v559, v560, v561, v562, v563, v564, v565, 1, 0, v568, v569, v570, v571, v572, v573, v574, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_494(v558:0, v559:0, v560:0, v561:0, v562:0, v563:0, v564:0, v565:0, 1, 0, 1 + v686:0, v569:0, v570:0, v571:0, v572:0, v573:0, v574:0, 3, 4) -> f_494(v558:0, v559:0, v560:0, v561:0, v562:0, v563:0, 1 + v686:0, v562:0 + (1 + v686:0), 1, 0, v686:0, v570:0, 1 + v570:0, v571:0, v572:0, v573:0, v574:0, 3, 4) :|: v686:0 > -1 && v562:0 + (1 + v686:0) > 0 && v564:0 > 1 && v563:0 > 1 && v570:0 > 0
Filtered unneeded arguments:
   f_494(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_494(x5, x6, x7, x11, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_494(v562:0, v563:0, v564:0, sum~cons_1~v686:0, v570:0) -> f_494(v562:0, v563:0, 1 + v686:0, v686:0, 1 + v570:0) :|: v562:0 + (1 + v686:0) > 0 && v686:0 > -1 && v564:0 > 1 && v570:0 > 0 && v563:0 > 1 && sum~cons_1~v686:0 = 1 + v686:0

----------------------------------------

(16)
Obligation:
Rules:
f_494(v562:0, v563:0, v564:0, sum~cons_1~v686:0, v570:0) -> f_494(v562:0, v563:0, 1 + v686:0, v686:0, 1 + v570:0) :|: v562:0 + (1 + v686:0) > 0 && v686:0 > -1 && v564:0 > 1 && v570:0 > 0 && v563:0 > 1 && sum~cons_1~v686:0 = 1 + v686:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_494(v562:0:0, v563:0:0, v564:0:0, sum~cons_1~v686:0:0, v570:0:0) -> f_494(v562:0:0, v563:0:0, 1 + v686:0:0, v686:0:0, 1 + v570:0:0) :|: v570:0:0 > 0 && v563:0:0 > 1 && v564:0:0 > 1 && v686:0:0 > -1 && v562:0:0 + (1 + v686:0:0) > 0 && sum~cons_1~v686:0:0 = 1 + v686:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_494(x, x1, x2, x3, x4)] = x3

The following rules are decreasing:
f_494(v562:0:0, v563:0:0, v564:0:0, sum~cons_1~v686:0:0, v570:0:0) -> f_494(v562:0:0, v563:0:0, 1 + v686:0:0, v686:0:0, 1 + v570:0:0) :|: v570:0:0 > 0 && v563:0:0 > 1 && v564:0:0 > 1 && v686:0:0 > -1 && v562:0:0 + (1 + v686:0:0) > 0 && sum~cons_1~v686:0:0 = 1 + v686:0:0
The following rules are bounded:
f_494(v562:0:0, v563:0:0, v564:0:0, sum~cons_1~v686:0:0, v570:0:0) -> f_494(v562:0:0, v563:0:0, 1 + v686:0:0, v686:0:0, 1 + v570:0:0) :|: v570:0:0 > 0 && v563:0:0 > 1 && v564:0:0 > 1 && v686:0:0 > -1 && v562:0:0 + (1 + v686:0:0) > 0 && sum~cons_1~v686:0:0 = 1 + v686:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_437(v423, v424, v425, v426, v427, v428, v432, v430, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 4) -> f_439(v423, v424, v425, v426, v427, v428, v432, v430, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 4) :|: 0 = 0
f_439(v423, v424, v425, v426, v427, v428, v432, v430, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 4) -> f_442(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 4) :|: v451 = v432 + v428
f_442(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 4) -> f_445(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 4) :|: 0 < v451
f_445(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 4) -> f_449(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 4) :|: 0 = 0
f_449(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 4) -> f_452(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 4) :|: TRUE
f_452(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 4) -> f_455(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 4) :|: 0 = 0
f_455(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 4) -> f_457(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 2, 4) :|: 0 < v432 && 2 <= v429 && 2 <= v427
f_457(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 2, 4) -> f_460(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 2, 4) :|: 0 = 0
f_460(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 2, 4) -> f_463(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 2, 4) :|: TRUE
f_463(v423, v424, v425, v426, v427, v428, v432, v451, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 2, 4) -> f_466(v423, v424, v425, v426, v427, v428, v432, v451, 1, v433, v434, v435, v436, v437, v438, 0, 3, 2, 4) :|: 0 = 0
f_466(v423, v424, v425, v426, v427, v428, v432, v451, 1, v433, v434, v435, v436, v437, v438, 0, 3, 2, 4) -> f_469(v423, v424, v425, v426, v427, v428, v432, v451, 1, v464, v433, v434, v435, v436, v437, v438, 0, 3, 2, 4) :|: 1 + v464 = v432 && 0 <= v464
f_469(v423, v424, v425, v426, v427, v428, v432, v451, 1, v464, v433, v434, v435, v436, v437, v438, 0, 3, 2, 4) -> f_472(v423, v424, v425, v426, v427, v428, v432, v451, 1, v464, v433, v434, v435, v436, v437, v438, 0, 3, 2, 4) :|: TRUE
f_472(v423, v424, v425, v426, v427, v428, v432, v451, 1, v464, v433, v434, v435, v436, v437, v438, 0, 3, 2, 4) -> f_475(v423, v424, v425, v426, v427, v428, v432, v451, 1, v464, v433, v434, v435, v436, v437, v438, 0, 3, 2, 4) :|: TRUE
f_475(v423, v424, v425, v426, v427, v428, v432, v451, 1, v464, v433, v434, v435, v436, v437, v438, 0, 3, 2, 4) -> f_478(v423, v424, v425, v426, v427, v428, v432, v451, 1, v464, v434, v435, v436, v437, v438, 0, 3, 2, 4) :|: 0 = 0
f_478(v423, v424, v425, v426, v427, v428, v432, v451, 1, v464, v434, v435, v436, v437, v438, 0, 3, 2, 4) -> f_481(v423, v424, v425, v426, v427, v428, v432, v451, 1, v464, v434, v488, v435, v436, v437, v438, 0, 3, 2, 4) :|: v488 = 1 + v434 && 2 <= v488
f_481(v423, v424, v425, v426, v427, v428, v432, v451, 1, v464, v434, v488, v435, v436, v437, v438, 0, 3, 2, 4) -> f_484(v423, v424, v425, v426, v427, v428, v432, v451, 1, v464, v434, v488, v435, v436, v437, v438, 0, 3, 2, 4) :|: TRUE
f_484(v423, v424, v425, v426, v427, v428, v432, v451, 1, v464, v434, v488, v435, v436, v437, v438, 0, 3, 2, 4) -> f_487(v423, v424, v425, v426, v427, v428, v432, v451, 1, v464, v434, v488, v435, v436, v437, v438, 0, 3, 2, 4) :|: TRUE
f_487(v423, v424, v425, v426, v427, v428, v432, v451, 1, v464, v434, v488, v435, v436, v437, v438, 0, 3, 2, 4) -> f_435(v423, v424, v425, v426, v427, v428, v432, v451, 1, v464, v434, v488, v435, v436, v437, v438, 0, 3, 4) :|: TRUE
f_435(v423, v424, v425, v426, v427, v428, v429, v430, 1, v432, v433, v434, v435, v436, v437, v438, 0, 3, 4) -> f_437(v423, v424, v425, v426, v427, v428, v432, v430, 1, v429, v433, v434, v435, v436, v437, v438, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_437(v423:0, v424:0, v425:0, v426:0, v427:0, v428:0, 1 + v464:0, v430:0, 1, v429:0, v433:0, v434:0, v435:0, v436:0, v437:0, v438:0, 0, 3, 4) -> f_437(v423:0, v424:0, v425:0, v426:0, v427:0, v428:0, v464:0, 1 + v464:0 + v428:0, 1, 1 + v464:0, v434:0, 1 + v434:0, v435:0, v436:0, v437:0, v438:0, 0, 3, 4) :|: 1 + v464:0 + v428:0 > 0 && v429:0 > 1 && v464:0 > -1 && v427:0 > 1 && v434:0 > 0
Filtered unneeded arguments:
   f_437(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_437(x5, x6, x7, x10, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_437(v427:0, v428:0, sum~cons_1~v464:0, v429:0, v434:0) -> f_437(v427:0, v428:0, v464:0, 1 + v464:0, 1 + v434:0) :|: v429:0 > 1 && 1 + v464:0 + v428:0 > 0 && v464:0 > -1 && v434:0 > 0 && v427:0 > 1 && sum~cons_1~v464:0 = 1 + v464:0

----------------------------------------

(23)
Obligation:
Rules:
f_437(v427:0, v428:0, sum~cons_1~v464:0, v429:0, v434:0) -> f_437(v427:0, v428:0, v464:0, 1 + v464:0, 1 + v434:0) :|: v429:0 > 1 && 1 + v464:0 + v428:0 > 0 && v464:0 > -1 && v434:0 > 0 && v427:0 > 1 && sum~cons_1~v464:0 = 1 + v464:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_437(v427:0:0, v428:0:0, sum~cons_1~v464:0:0, v429:0:0, v434:0:0) -> f_437(v427:0:0, v428:0:0, v464:0:0, 1 + v464:0:0, 1 + v434:0:0) :|: v434:0:0 > 0 && v427:0:0 > 1 && v464:0:0 > -1 && 1 + v464:0:0 + v428:0:0 > 0 && v429:0:0 > 1 && sum~cons_1~v464:0:0 = 1 + v464:0:0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_437(x, x1, x2, x3, x4)] = -1 + x2

The following rules are decreasing:
f_437(v427:0:0, v428:0:0, sum~cons_1~v464:0:0, v429:0:0, v434:0:0) -> f_437(v427:0:0, v428:0:0, v464:0:0, 1 + v464:0:0, 1 + v434:0:0) :|: v434:0:0 > 0 && v427:0:0 > 1 && v464:0:0 > -1 && 1 + v464:0:0 + v428:0:0 > 0 && v429:0:0 > 1 && sum~cons_1~v464:0:0 = 1 + v464:0:0
The following rules are bounded:
f_437(v427:0:0, v428:0:0, sum~cons_1~v464:0:0, v429:0:0, v434:0:0) -> f_437(v427:0:0, v428:0:0, v464:0:0, 1 + v464:0:0, 1 + v434:0:0) :|: v434:0:0 > 0 && v427:0:0 > 1 && v464:0:0 > -1 && 1 + v464:0:0 + v428:0:0 > 0 && v429:0:0 > 1 && sum~cons_1~v464:0:0 = 1 + v464:0:0

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
