MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/AUczI.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 21 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 289 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
    (7) SCC2IRS [SOUND, 41 ms]
    (8) IntTRS
        (9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (10) IntTRS
        (11) IntTRSPeriodicNontermProof [COMPLETE, 10 ms]
        (12) NO
    (13) SCC2IRS [SOUND, 0 ms]
    (14) IntTRS
        (15) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (16) IntTRS
        (17) IntTRSPeriodicNontermProof [COMPLETE, 10 ms]
        (18) NO
(19) SEGraph to IRS [EQUIVALENT, 79 ms]
(20) IntTRS
    (21) IRSToKoat [EQUIVALENT, 0 ms]
    (22) Koat Problem
    (23) KoAT2 [EQUIVALENT, 428 ms]
    (24) MAYBE
(25) SEGraph to IRS [EQUIVALENT, 79 ms]
(26) IntTRS
    (27) IRSNoOverapproximation [EQUIVALENT, 0 ms]
    (28) IntTRS
    (29) IRSToKoat [EQUIVALENT, 0 ms]
    (30) Koat Problem
    (31) LoAT [EQUIVALENT, 1326 ms]
    (32) MAYBE


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/AUczI.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/AUczI.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = load %2
		%6 = add i32 %5, 42
		store %6, %3
		br %7
	7:
		%8 = load %3
		%9 = icmp sge %8 0
		br %9, %10, %19
	10:
		%11 = load %2
		%12 = mul i32 2, %11
		%13 = load %3
		%14 = sub i32 %12, %13
		store %14, %2
		%15 = load %2
		%16 = load %3
		%17 = add i32 %15, %16
		%18 = sdiv i32 %17, 2
		store %18, %3
		br %7
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_154(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_155(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 <= v50
f_155(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_157(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_157(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_159(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_159(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_161(v40, v41, v42, v43, v44, v50, 1, v49, v48, v45, v51, v52, v53, 0, 3, 42, 4) :|: 0 = 0
f_161(v40, v41, v42, v43, v44, v50, 1, v49, v48, v45, v51, v52, v53, 0, 3, 42, 4) -> f_162(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: v55 = 2 * v49
f_162(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_163(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_163(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_164(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: v56 + v50 = v55
f_164(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_165(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_165(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_166(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_166(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_167(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_167(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_168(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v51, v52, v53, 0, 3, 42, 2, 4) :|: v55 = v56 + v50
f_168(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v51, v52, v53, 0, 3, 42, 2, 4) -> f_169(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: v58 = v55 / 2
f_169(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) -> f_170(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_170(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) -> f_171(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_171(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) -> f_153(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_153(v40, v41, v42, v43, v44, v45, 1, v47, v48, v49, v50, v51, v52, v53, 0, 3, 42, 2, 4) -> f_154(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_154(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, 1, v47:0, v48:0, v45:0, v49:0, v51:0, v52:0, v53:0, 0, 3, 42, 2, 4) -> f_154(v40:0, v41:0, v42:0, v43:0, v44:0, v58:0, 1, v49:0, v56:0 + v50:0, v50:0, v56:0, v51:0, v52:0, v53:0, 0, 3, 42, 2, 4) :|: v50:0 > -1 && v58:0 = (v56:0 + v50:0) / 2 && v56:0 + v50:0 = 2 * v49:0
Filtered unneeded arguments:
   f_154(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_154(x6, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_154(v50:0, v49:0) -> f_154'(v50:0, v49:0) :|: v56:0 + v50:0 = 2 * v49:0 && v50:0 > -1
f_154'(v50:0, v49:0) -> f_154(div, v56:0) :|: v56:0 + v50:0 < 0 && v50:0 > -1 && v56:0 + v50:0 - 2 * div > -2 && v56:0 + v50:0 - 2 * div <= 0 && v56:0 + v50:0 = 2 * v49:0
f_154'(v50:0, v49:0) -> f_154(div, v56:0) :|: v56:0 + v50:0 >= 0 && v50:0 > -1 && v56:0 + v50:0 - 2 * div >= 0 && v56:0 + v50:0 - 2 * div < 2 && v56:0 + v50:0 = 2 * v49:0

----------------------------------------

(8)
Obligation:
Rules:
f_154(v50:0, v49:0) -> f_154'(v50:0, v49:0) :|: v56:0 + v50:0 = 2 * v49:0 && v50:0 > -1
f_154'(x, x1) -> f_154(x2, x3) :|: x3 + x < 0 && x > -1 && x3 + x - 2 * x2 > -2 && x3 + x - 2 * x2 <= 0 && x3 + x = 2 * x1
f_154'(x4, x5) -> f_154(x6, x7) :|: x7 + x4 >= 0 && x4 > -1 && x7 + x4 - 2 * x6 >= 0 && x7 + x4 - 2 * x6 < 2 && x7 + x4 = 2 * x5

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_154(v50:0:0, v49:0:0) -> f_154(x6:0, x7:0) :|: v56:0:0 + v50:0:0 = 2 * v49:0:0 && x7:0 + v50:0:0 = 2 * v49:0:0 && x7:0 + v50:0:0 - 2 * x6:0 < 2 && x7:0 + v50:0:0 - 2 * x6:0 >= 0 && v50:0:0 > -1 && x7:0 + v50:0:0 >= 0
f_154(x, x1) -> f_154(x2, x3) :|: x4 + x = 2 * x1 && x3 + x = 2 * x1 && x3 + x - 2 * x2 <= 0 && x3 + x - 2 * x2 > -2 && x > -1 && x3 + x < 0

----------------------------------------

(11) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v50:0:0, v49:0:0) -> f(1, x6:0, x7:0) :|: pc = 1 && (v56:0:0 + v50:0:0 = 2 * v49:0:0 && x7:0 + v50:0:0 = 2 * v49:0:0 && x7:0 + v50:0:0 - 2 * x6:0 < 2 && x7:0 + v50:0:0 - 2 * x6:0 >= 0 && v50:0:0 > -1 && x7:0 + v50:0:0 >= 0)
f(pc, x, x1) -> f(1, x2, x3) :|: pc = 1 && (x4 + x = 2 * x1 && x3 + x = 2 * x1 && x3 + x - 2 * x2 <= 0 && x3 + x - 2 * x2 > -2 && x > -1 && x3 + x < 0)
Witness term starting non-terminating reduction: f(1, 3, 3)
----------------------------------------

(12)
NO

----------------------------------------

(13) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_154(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_155(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 <= v50
f_155(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_157(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_157(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_159(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_159(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_161(v40, v41, v42, v43, v44, v50, 1, v49, v48, v45, v51, v52, v53, 0, 3, 42, 4) :|: 0 = 0
f_161(v40, v41, v42, v43, v44, v50, 1, v49, v48, v45, v51, v52, v53, 0, 3, 42, 4) -> f_162(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: v55 = 2 * v49
f_162(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_163(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_163(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_164(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: v56 + v50 = v55
f_164(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_165(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_165(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_166(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_166(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_167(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_167(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_168(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v51, v52, v53, 0, 3, 42, 2, 4) :|: v55 = v56 + v50
f_168(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v51, v52, v53, 0, 3, 42, 2, 4) -> f_169(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: v58 = v55 / 2
f_169(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) -> f_170(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_170(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) -> f_171(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_171(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) -> f_153(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: 1 <= v40 && 1 <= v41 && 1 <= v42 && 0 <= 42 + v43 && 0 <= v44 && 0 <= v50 && 4 <= v51 && 4 <= v52 && 4 <= v53 && v40 <= v51 && v41 <= v52 && v42 <= v53
f_153(v40, v41, v42, v43, v44, v45, 1, v47, v48, v49, v50, v51, v52, v53, 0, 3, 42, 2, 4) -> f_154(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_154(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, 1, v47:0, v48:0, v45:0, v49:0, v51:0, v52:0, v53:0, 0, 3, 42, 2, 4) -> f_154(v40:0, v41:0, v42:0, v43:0, v44:0, v58:0, 1, v49:0, v56:0 + v50:0, v50:0, v56:0, v51:0, v52:0, v53:0, 0, 3, 42, 2, 4) :|: v50:0 > -1 && v41:0 > 0 && v40:0 > 0 && v42:0 > 0 && v56:0 + v50:0 = 2 * v49:0 && v43:0 > -43 && v44:0 > -1 && v51:0 > 3 && v52:0 > 3 && v53:0 > 3 && v51:0 >= v40:0 && v58:0 = (v56:0 + v50:0) / 2 && v53:0 >= v42:0 && v52:0 >= v41:0
Filtered unneeded arguments:
   f_154(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_154(x1, x2, x3, x4, x5, x6, x11, x12, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_154(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, v49:0, v51:0, v52:0, v53:0) -> f_154'(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, v49:0, v51:0, v52:0, v53:0) :|: v41:0 > 0 && v50:0 > -1 && v40:0 > 0 && v42:0 > 0 && v56:0 + v50:0 = 2 * v49:0 && v43:0 > -43 && v44:0 > -1 && v51:0 > 3 && v52:0 > 3 && v53:0 > 3 && v51:0 >= v40:0 && v52:0 >= v41:0 && v53:0 >= v42:0
f_154'(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, v49:0, v51:0, v52:0, v53:0) -> f_154(v40:0, v41:0, v42:0, v43:0, v44:0, div, v56:0, v51:0, v52:0, v53:0) :|: v41:0 > 0 && v50:0 > -1 && v40:0 > 0 && v42:0 > 0 && v56:0 + v50:0 = 2 * v49:0 && v43:0 > -43 && v44:0 > -1 && v51:0 > 3 && v52:0 > 3 && v53:0 > 3 && v51:0 >= v40:0 && v56:0 + v50:0 < 0 && v53:0 >= v42:0 && v56:0 + v50:0 - 2 * div > -2 && v56:0 + v50:0 - 2 * div <= 0 && v52:0 >= v41:0
f_154'(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, v49:0, v51:0, v52:0, v53:0) -> f_154(v40:0, v41:0, v42:0, v43:0, v44:0, div, v56:0, v51:0, v52:0, v53:0) :|: v41:0 > 0 && v50:0 > -1 && v40:0 > 0 && v42:0 > 0 && v56:0 + v50:0 = 2 * v49:0 && v43:0 > -43 && v44:0 > -1 && v51:0 > 3 && v52:0 > 3 && v53:0 > 3 && v51:0 >= v40:0 && v56:0 + v50:0 >= 0 && v53:0 >= v42:0 && v56:0 + v50:0 - 2 * div >= 0 && v56:0 + v50:0 - 2 * div < 2 && v52:0 >= v41:0

----------------------------------------

(14)
Obligation:
Rules:
f_154(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, v49:0, v51:0, v52:0, v53:0) -> f_154'(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, v49:0, v51:0, v52:0, v53:0) :|: v41:0 > 0 && v50:0 > -1 && v40:0 > 0 && v42:0 > 0 && v56:0 + v50:0 = 2 * v49:0 && v43:0 > -43 && v44:0 > -1 && v51:0 > 3 && v52:0 > 3 && v53:0 > 3 && v51:0 >= v40:0 && v52:0 >= v41:0 && v53:0 >= v42:0
f_154'(x, x1, x2, x3, x4, x5, x6, x7, x8, x9) -> f_154(x, x1, x2, x3, x4, x10, x11, x7, x8, x9) :|: x1 > 0 && x5 > -1 && x > 0 && x2 > 0 && x11 + x5 = 2 * x6 && x3 > -43 && x4 > -1 && x7 > 3 && x8 > 3 && x9 > 3 && x7 >= x && x11 + x5 < 0 && x9 >= x2 && x11 + x5 - 2 * x10 > -2 && x11 + x5 - 2 * x10 <= 0 && x8 >= x1
f_154'(x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_154(x12, x13, x14, x15, x16, x22, x23, x19, x20, x21) :|: x13 > 0 && x17 > -1 && x12 > 0 && x14 > 0 && x23 + x17 = 2 * x18 && x15 > -43 && x16 > -1 && x19 > 3 && x20 > 3 && x21 > 3 && x19 >= x12 && x23 + x17 >= 0 && x21 >= x14 && x23 + x17 - 2 * x22 >= 0 && x23 + x17 - 2 * x22 < 2 && x20 >= x13

----------------------------------------

(15) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(16)
Obligation:
Rules:
f_154(v40:0:0, v41:0:0, v42:0:0, v43:0:0, v44:0:0, v50:0:0, v49:0:0, v51:0:0, v52:0:0, v53:0:0) -> f_154(v40:0:0, v41:0:0, v42:0:0, v43:0:0, v44:0:0, x10:0, x11:0, v51:0:0, v52:0:0, v53:0:0) :|: v52:0:0 >= v41:0:0 && x11:0 + v50:0:0 - 2 * x10:0 <= 0 && x11:0 + v50:0:0 - 2 * x10:0 > -2 && v53:0:0 >= v42:0:0 && x11:0 + v50:0:0 < 0 && v51:0:0 >= v40:0:0 && v53:0:0 > 3 && v52:0:0 > 3 && v56:0:0 + v50:0:0 = 2 * v49:0:0 && v51:0:0 > 3 && v44:0:0 > -1 && v43:0:0 > -43 && x11:0 + v50:0:0 = 2 * v49:0:0 && v42:0:0 > 0 && v40:0:0 > 0 && v50:0:0 > -1 && v41:0:0 > 0
f_154(x, x1, x2, x3, x4, x5, x6, x7, x8, x9) -> f_154(x, x1, x2, x3, x4, x10, x11, x7, x8, x9) :|: x8 >= x1 && x11 + x5 - 2 * x10 < 2 && x11 + x5 - 2 * x10 >= 0 && x9 >= x2 && x11 + x5 >= 0 && x7 >= x && x9 > 3 && x8 > 3 && x12 + x5 = 2 * x6 && x7 > 3 && x4 > -1 && x3 > -43 && x11 + x5 = 2 * x6 && x2 > 0 && x > 0 && x5 > -1 && x1 > 0

----------------------------------------

(17) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v40:0:0, v41:0:0, v42:0:0, v43:0:0, v44:0:0, v50:0:0, v49:0:0, v51:0:0, v52:0:0, v53:0:0) -> f(1, v40:0:0, v41:0:0, v42:0:0, v43:0:0, v44:0:0, x10:0, x11:0, v51:0:0, v52:0:0, v53:0:0) :|: pc = 1 && (v52:0:0 >= v41:0:0 && x11:0 + v50:0:0 - 2 * x10:0 <= 0 && x11:0 + v50:0:0 - 2 * x10:0 > -2 && v53:0:0 >= v42:0:0 && x11:0 + v50:0:0 < 0 && v51:0:0 >= v40:0:0 && v53:0:0 > 3 && v52:0:0 > 3 && v56:0:0 + v50:0:0 = 2 * v49:0:0 && v51:0:0 > 3 && v44:0:0 > -1 && v43:0:0 > -43 && x11:0 + v50:0:0 = 2 * v49:0:0 && v42:0:0 > 0 && v40:0:0 > 0 && v50:0:0 > -1 && v41:0:0 > 0)
f(pc, x, x1, x2, x3, x4, x5, x6, x7, x8, x9) -> f(1, x, x1, x2, x3, x4, x10, x11, x7, x8, x9) :|: pc = 1 && (x8 >= x1 && x11 + x5 - 2 * x10 < 2 && x11 + x5 - 2 * x10 >= 0 && x9 >= x2 && x11 + x5 >= 0 && x7 >= x && x9 > 3 && x8 > 3 && x12 + x5 = 2 * x6 && x7 > 3 && x4 > -1 && x3 > -43 && x11 + x5 = 2 * x6 && x2 > 0 && x > 0 && x5 > -1 && x1 > 0)
Witness term starting non-terminating reduction: f(1, 32, 32, 32, -11, 31, 31, 31, 34, 34, 34)
----------------------------------------

(18)
NO

----------------------------------------

(19) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 51 rulesP rules:
f_85 -> f_86(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_86(v1, v2, 3, 1, 4) -> f_87(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_87(v1, v3, v2, v4, 3, 1, 4) -> f_88(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_88(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_89(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_89(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_90(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_90(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_91(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_91(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_92(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_92(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_93(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_93(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_94(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: 0 = 0
f_94(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_95(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) :|: v9 = 42 + v7
f_95(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) -> f_96(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) :|: TRUE
f_96(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) -> f_97(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) :|: TRUE
f_97(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) -> f_98(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) :|: 0 = 0
f_98(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) -> f_99(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) :|: 0 <= v9 && 0 <= 42 + v7
f_98(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) -> f_100(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4, 43) :|: v9 < 0 && 43 + v7 <= 0
f_99(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) -> f_101(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 42, 4) :|: 0 = 0
f_100(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4, 43) -> f_102(v1, v3, v5, v7, v9, 0, v2, v4, v6, 3, 42, 1, 4, 43) :|: 0 = 0
f_101(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 42, 4) -> f_103(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 42, 4) :|: TRUE
f_102(v1, v3, v5, v7, v9, 0, v2, v4, v6, 3, 42, 1, 4, 43) -> f_104(v1, v3, v5, v7, v9, 0, v2, v4, v6, 3, 42, 1, 4, 43) :|: TRUE
f_103(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 42, 4) -> f_105(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 42, 4) :|: 0 = 0
f_105(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 42, 4) -> f_106(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: v11 = 2 * v7 && 0 <= 84 + v11
f_106(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_107(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: 0 = 0
f_107(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_108(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: v12 + v9 = v11
f_108(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_109(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: TRUE
f_109(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_110(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: 0 = 0
f_110(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_111(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: 0 = 0
f_111(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_112(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: v11 = v12 + v9
f_112(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_113(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: v7 = v11 / 2
f_113(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_114(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: TRUE
f_114(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_115(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: TRUE
f_115(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_134(v1, v3, v5, v7, v9, v9, 1, v7, v11, v12, v7, v2, v4, v6, 0, 3, 42, 2, 4) :|: TRUE
f_134(v20, v21, v22, v23, v24, v25, 1, v27, v28, v29, v30, v31, v32, v33, 0, 3, 42, 2, 4) -> f_153(v20, v21, v22, v23, v24, v25, 1, v27, v28, v29, v30, v31, v32, v33, 0, 3, 42, 2, 4) :|: TRUE
f_153(v40, v41, v42, v43, v44, v45, 1, v47, v48, v49, v50, v51, v52, v53, 0, 3, 42, 2, 4) -> f_154(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_154(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_155(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 <= v50
f_154(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_156(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: v50 < 0
f_155(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_157(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_156(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_158(v40, v41, v42, v43, v44, v50, 0, v47, v48, v45, v49, v51, v52, v53, 3, 42, 2, 1, 4) :|: 0 = 0
f_157(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_159(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_158(v40, v41, v42, v43, v44, v50, 0, v47, v48, v45, v49, v51, v52, v53, 3, 42, 2, 1, 4) -> f_160(v40, v41, v42, v43, v44, v50, 0, v47, v48, v45, v49, v51, v52, v53, 3, 42, 2, 1, 4) :|: TRUE
f_159(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_161(v40, v41, v42, v43, v44, v50, 1, v49, v48, v45, v51, v52, v53, 0, 3, 42, 4) :|: 0 = 0
f_161(v40, v41, v42, v43, v44, v50, 1, v49, v48, v45, v51, v52, v53, 0, 3, 42, 4) -> f_162(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: v55 = 2 * v49
f_162(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_163(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_163(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_164(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: v56 + v50 = v55
f_164(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_165(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_165(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_166(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_166(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_167(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_167(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_168(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v51, v52, v53, 0, 3, 42, 2, 4) :|: v55 = v56 + v50
f_168(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v51, v52, v53, 0, 3, 42, 2, 4) -> f_169(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: v58 = v55 / 2
f_169(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) -> f_170(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_170(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) -> f_171(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_171(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) -> f_153(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_85 -> f_154(v1:0, v3:0, v5:0, v7:0, 42 + v7:0, v7:0, 1, v7:0, v12:0 + (42 + v7:0), 42 + v7:0, v12:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 0, 3, 42, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > -43 && v12:0 + (42 + v7:0) > -85 && v7:0 = (v12:0 + (42 + v7:0)) / 2 && v12:0 + (42 + v7:0) = 2 * v7:0
f_154(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, 1, v47:0, v48:0, v45:0, v49:0, v51:0, v52:0, v53:0, 0, 3, 42, 2, 4) -> f_160(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, 0, v47:0, v48:0, v45:0, v49:0, v51:0, v52:0, v53:0, 3, 42, 2, 1, 4) :|: v50:0 < 0
f_154(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, 1, v47:0, v48:0, v45:0, v49:0, v51:0, v52:0, v53:0, 0, 3, 42, 2, 4) -> f_154(v40:0, v41:0, v42:0, v43:0, v44:0, v58:0, 1, v49:0, v56:0 + v50:0, v50:0, v56:0, v51:0, v52:0, v53:0, 0, 3, 42, 2, 4) :|: v50:0 > -1 && v58:0 = (v56:0 + v50:0) / 2 && v56:0 + v50:0 = 2 * v49:0
f_85 -> f_104(v1:0, v3:0, v5:0, v7:0, 42 + v7:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 42, 1, 4, 43) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 < -42
Filtered unneeded arguments:
   f_154(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_154(x6, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 8 rules.P rules:
f_85 -> f_85' :|: TRUE
f_85' -> f_154(div, v12:0) :|: v12:0 + (42 + div) > -85 && div > -43 && v12:0 + (42 + div) < 0 && v12:0 + (42 + div) - 2 * div > -2 && v12:0 + (42 + div) - 2 * div <= 0 && v12:0 + (42 + div) = 2 * div
f_85' -> f_154(div, v12:0) :|: v12:0 + (42 + div) >= 0 && div > -43 && v12:0 + (42 + div) - 2 * div >= 0 && v12:0 + (42 + div) - 2 * div < 2 && v12:0 + (42 + div) = 2 * div
f_154(v50:0, v49:0) -> f_160(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, 0, v47:0, v48:0, v45:0, v49:0, v51:0, v52:0, v53:0, 3, 42, 2, 1, 4) :|: v50:0 < 0
f_154(v50:0, v49:0) -> f_154'(v50:0, v49:0) :|: v56:0 + v50:0 = 2 * v49:0 && v50:0 > -1
f_154'(v50:0, v49:0) -> f_154(div, v56:0) :|: v56:0 + v50:0 < 0 && v50:0 > -1 && v56:0 + v50:0 - 2 * div > -2 && v56:0 + v50:0 - 2 * div <= 0 && v56:0 + v50:0 = 2 * v49:0
f_154'(v50:0, v49:0) -> f_154(div, v56:0) :|: v56:0 + v50:0 >= 0 && v50:0 > -1 && v56:0 + v50:0 - 2 * div >= 0 && v56:0 + v50:0 - 2 * div < 2 && v56:0 + v50:0 = 2 * v49:0
f_85 -> f_104(v1:0, v3:0, v5:0, v7:0, 42 + v7:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 42, 1, 4, 43) :|: v1:0 > 0 && v3:0 > 0 && v7:0 < -42 && v5:0 > 0

----------------------------------------

(20)
Obligation:
Rules:
f_85 -> f_85' :|: TRUE
f_85' -> f_154(x, x1) :|: x1 + (42 + x) > -85 && x > -43 && x1 + (42 + x) < 0 && x1 + (42 + x) - 2 * x > -2 && x1 + (42 + x) - 2 * x <= 0 && x1 + (42 + x) = 2 * x
f_85' -> f_154(x2, x3) :|: x3 + (42 + x2) >= 0 && x2 > -43 && x3 + (42 + x2) - 2 * x2 >= 0 && x3 + (42 + x2) - 2 * x2 < 2 && x3 + (42 + x2) = 2 * x2
f_154(v50:0, v49:0) -> f_160(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, 0, v47:0, v48:0, v45:0, v49:0, v51:0, v52:0, v53:0, 3, 42, 2, 1, 4) :|: v50:0 < 0
f_154(x4, x5) -> f_154'(x4, x5) :|: x6 + x4 = 2 * x5 && x4 > -1
f_154'(x7, x8) -> f_154(x9, x10) :|: x10 + x7 < 0 && x7 > -1 && x10 + x7 - 2 * x9 > -2 && x10 + x7 - 2 * x9 <= 0 && x10 + x7 = 2 * x8
f_154'(x11, x12) -> f_154(x13, x14) :|: x14 + x11 >= 0 && x11 > -1 && x14 + x11 - 2 * x13 >= 0 && x14 + x11 - 2 * x13 < 2 && x14 + x11 = 2 * x12
f_85 -> f_104(v1:0, v3:0, v5:0, v7:0, 42 + v7:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 42, 1, 4, 43) :|: v1:0 > 0 && v3:0 > 0 && v7:0 < -42 && v5:0 > 0
Start term: f_85

----------------------------------------

(21) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(22)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_85))
(VAR x160 x162 x161 x46 x164 x47 x163 x48 x166 x49 x165 x42 x168 x43 x167 x44 x45 x169 x40 x41 x39 x151 x150 x35 x153 x36 x152 x37 x155 x38 x154 x31 x157 x32 x156 x33 x159 x34 x158 x30 x70 x140 x68 x142 x69 x141 x144 x143 x64 x146 x65 x145 x66 x148 x67 x147 x60 x61 x149 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x250 x57 x131 x58 x130 x59 x133 x132 x53 x135 x54 x134 x55 x137 x56 x136 x139 x50 x138 x51 x52 x90 x91 x92 x86 x87 x88 x89 x82 x83 x84 x85 x80 x81 x193 x192 x195 x194 x79 x197 x196 x199 x198 x75 x76 x'' x77 x78 x71 x72 x73 x74 k14 k15 k16 k17 k10 k11 k12 k13 x191 x190 x182 x181 x184 x183 x186 x185 x188 x187 x189 x180 x171 x170 x173 x172 x175 x174 x177 x176 x97 x179 x98 x178 x99 x93 x94 x95 x96 x209 x208 k30 x201 x200 x203 x202 x205 k29 x204 x207 x206 k25 k26 k27 k28 k21 k22 k23 k24 k20 k18 k19 x120 x241 x240 x122 x243 x121 x242 x124 x245 x123 x244 x126 x247 x125 x246 x x128 x249 x127 x248 x129 x230 x111 x232 x110 x231 x113 x234 x112 x233 x115 x236 x114 x235 x117 x238 x116 x237 x119 x118 x239 x109 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x221 x7 x27 x220 x20 x102 x223 x21 x101 x222 x22 x104 x225 x23 x103 x224 x106 x227 x1 x105 x226 x108 x229 x107 x228 x219 x' x17 x18 x19 x13 x14 x15 x210 x16 x212 x10 x211 x11 x214 x12 x213 x216 x215 x218 x217)
(RULES
  f_85(x193, x194, x195, x196, x197, x198, x199, x200, x201, x202, x203, x204, x205, x206, x207, x208, x209, x210, x211) -> f_104(k25, k11, k14, k17, 42 + k17, 0, 3 + k25, 3 + k11, 3 + k14, 3, 42, 1, 4, 43, x212, x213, x214, x215, x216) :|: k25 > 0 && k11 > 0 && k17 < -42 && k14 > 0
  f_85'(x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82, x83, x84, x85, x86) -> f_154(k12, k13, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99, x100, x101, x102, x103) :|: k13 + (42 + k12) >= 0 && k12 > -43 && k13 + (42 + k12) - 2 * k12 >= 0 && k13 + (42 + k12) - 2 * k12 < 2 && k13 + (42 + k12) = 2 * k12
  f_85(x155, x156, x157, x158, x159, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x170, x171, x172, x173) -> f_85'(x174, x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, x185, x186, x187, x188, x189, x190, x191, x192) :|: 0 = 0
  f_85'(x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_154(k19, k20, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) :|: k20 + (42 + k19) > -85 && k19 > -43 && k20 + (42 + k19) < 0 && k20 + (42 + k19) - 2 * k19 > -2 && k20 + (42 + k19) - 2 * k19 <= 0 && k20 + (42 + k19) = 2 * k19
  f_154'(k18, k15, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50) -> f_154(k16, k28, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67) :|: k28 + k18 < 0 && k18 > -1 && k28 + k18 - 2 * k16 > -2 && k28 + k18 - 2 * k16 <= 0 && k28 + k18 = 2 * k15
  f_154(k23, k7, x104, x105, x106, x107, x108, x109, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x120) -> f_160(k1, k0, k3, k2, k5, k23, 0, k6, k8, k4, k7, k21, k22, k24, 3, 42, 2, 1, 4) :|: k23 < 0
  f_154'(k29, k30, x217, x218, x219, x220, x221, x222, x223, x224, x225, x226, x227, x228, x229, x230, x231, x232, x233) -> f_154(k26, k27, x234, x235, x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, x246, x247, x248, x249, x250) :|: k27 + k29 >= 0 && k29 > -1 && k27 + k29 - 2 * k26 >= 0 && k27 + k29 - 2 * k26 < 2 && k27 + k29 = 2 * k30
  f_154(k9, k10, x121, x122, x123, x124, x125, x126, x127, x128, x129, x130, x131, x132, x133, x134, x135, x136, x137) -> f_154'(k9, k10, x138, x139, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, x154) :|: x6 + k9 = 2 * k10 && k9 > -1
)

----------------------------------------

(23) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_12023103533929535238.koat 

KoAT2's output was:

MAYBE

----------------------------------------

(24)
MAYBE

----------------------------------------

(25) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 51 rulesP rules:
f_85 -> f_86(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_86(v1, v2, 3, 1, 4) -> f_87(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_87(v1, v3, v2, v4, 3, 1, 4) -> f_88(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_88(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_89(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_89(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_90(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_90(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_91(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_91(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_92(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_92(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_93(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_93(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_94(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: 0 = 0
f_94(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_95(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) :|: v9 = 42 + v7
f_95(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) -> f_96(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) :|: TRUE
f_96(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) -> f_97(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) :|: TRUE
f_97(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) -> f_98(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) :|: 0 = 0
f_98(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) -> f_99(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) :|: 0 <= v9 && 0 <= 42 + v7
f_98(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) -> f_100(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4, 43) :|: v9 < 0 && 43 + v7 <= 0
f_99(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4) -> f_101(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 42, 4) :|: 0 = 0
f_100(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 42, 1, 4, 43) -> f_102(v1, v3, v5, v7, v9, 0, v2, v4, v6, 3, 42, 1, 4, 43) :|: 0 = 0
f_101(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 42, 4) -> f_103(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 42, 4) :|: TRUE
f_102(v1, v3, v5, v7, v9, 0, v2, v4, v6, 3, 42, 1, 4, 43) -> f_104(v1, v3, v5, v7, v9, 0, v2, v4, v6, 3, 42, 1, 4, 43) :|: TRUE
f_103(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 42, 4) -> f_105(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 42, 4) :|: 0 = 0
f_105(v1, v3, v5, v7, v9, 1, v2, v4, v6, 0, 3, 42, 4) -> f_106(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: v11 = 2 * v7 && 0 <= 84 + v11
f_106(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_107(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: 0 = 0
f_107(v1, v3, v5, v7, v9, 1, v11, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_108(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: v12 + v9 = v11
f_108(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_109(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: TRUE
f_109(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_110(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: 0 = 0
f_110(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_111(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: 0 = 0
f_111(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_112(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: v11 = v12 + v9
f_112(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_113(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: v7 = v11 / 2
f_113(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_114(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: TRUE
f_114(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_115(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) :|: TRUE
f_115(v1, v3, v5, v7, v9, 1, v11, v12, v2, v4, v6, 0, 3, 42, 2, 4, 84) -> f_134(v1, v3, v5, v7, v9, v9, 1, v7, v11, v12, v7, v2, v4, v6, 0, 3, 42, 2, 4) :|: TRUE
f_134(v20, v21, v22, v23, v24, v25, 1, v27, v28, v29, v30, v31, v32, v33, 0, 3, 42, 2, 4) -> f_153(v20, v21, v22, v23, v24, v25, 1, v27, v28, v29, v30, v31, v32, v33, 0, 3, 42, 2, 4) :|: TRUE
f_153(v40, v41, v42, v43, v44, v45, 1, v47, v48, v49, v50, v51, v52, v53, 0, 3, 42, 2, 4) -> f_154(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_154(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_155(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 <= v50
f_154(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_156(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: v50 < 0
f_155(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_157(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_156(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_158(v40, v41, v42, v43, v44, v50, 0, v47, v48, v45, v49, v51, v52, v53, 3, 42, 2, 1, 4) :|: 0 = 0
f_157(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_159(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_158(v40, v41, v42, v43, v44, v50, 0, v47, v48, v45, v49, v51, v52, v53, 3, 42, 2, 1, 4) -> f_160(v40, v41, v42, v43, v44, v50, 0, v47, v48, v45, v49, v51, v52, v53, 3, 42, 2, 1, 4) :|: TRUE
f_159(v40, v41, v42, v43, v44, v50, 1, v47, v48, v45, v49, v51, v52, v53, 0, 3, 42, 2, 4) -> f_161(v40, v41, v42, v43, v44, v50, 1, v49, v48, v45, v51, v52, v53, 0, 3, 42, 4) :|: 0 = 0
f_161(v40, v41, v42, v43, v44, v50, 1, v49, v48, v45, v51, v52, v53, 0, 3, 42, 4) -> f_162(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: v55 = 2 * v49
f_162(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_163(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_163(v40, v41, v42, v43, v44, v50, 1, v49, v55, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_164(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: v56 + v50 = v55
f_164(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_165(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_165(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_166(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_166(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v45, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_167(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v48, v51, v52, v53, 0, 3, 42, 2, 4) :|: 0 = 0
f_167(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v48, v51, v52, v53, 0, 3, 42, 2, 4) -> f_168(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v51, v52, v53, 0, 3, 42, 2, 4) :|: v55 = v56 + v50
f_168(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v51, v52, v53, 0, 3, 42, 2, 4) -> f_169(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: v58 = v55 / 2
f_169(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) -> f_170(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_170(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) -> f_171(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
f_171(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) -> f_153(v40, v41, v42, v43, v44, v50, 1, v49, v55, v56, v58, v51, v52, v53, 0, 3, 42, 2, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_85 -> f_154(v1:0, v3:0, v5:0, v7:0, 42 + v7:0, v7:0, 1, v7:0, v12:0 + (42 + v7:0), 42 + v7:0, v12:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 0, 3, 42, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > -43 && v12:0 + (42 + v7:0) > -85 && v7:0 = (v12:0 + (42 + v7:0)) / 2 && v12:0 + (42 + v7:0) = 2 * v7:0
f_154(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, 1, v47:0, v48:0, v45:0, v49:0, v51:0, v52:0, v53:0, 0, 3, 42, 2, 4) -> f_160(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, 0, v47:0, v48:0, v45:0, v49:0, v51:0, v52:0, v53:0, 3, 42, 2, 1, 4) :|: v50:0 < 0
f_154(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, 1, v47:0, v48:0, v45:0, v49:0, v51:0, v52:0, v53:0, 0, 3, 42, 2, 4) -> f_154(v40:0, v41:0, v42:0, v43:0, v44:0, v58:0, 1, v49:0, v56:0 + v50:0, v50:0, v56:0, v51:0, v52:0, v53:0, 0, 3, 42, 2, 4) :|: v50:0 > -1 && v58:0 = (v56:0 + v50:0) / 2 && v56:0 + v50:0 = 2 * v49:0
f_85 -> f_104(v1:0, v3:0, v5:0, v7:0, 42 + v7:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 42, 1, 4, 43) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 < -42
Filtered unneeded arguments:
   f_154(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_154(x6, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 8 rules.P rules:
f_85 -> f_85' :|: TRUE
f_85' -> f_154(div, v12:0) :|: v12:0 + (42 + div) > -85 && div > -43 && v12:0 + (42 + div) < 0 && v12:0 + (42 + div) - 2 * div > -2 && v12:0 + (42 + div) - 2 * div <= 0 && v12:0 + (42 + div) = 2 * div
f_85' -> f_154(div, v12:0) :|: v12:0 + (42 + div) >= 0 && div > -43 && v12:0 + (42 + div) - 2 * div >= 0 && v12:0 + (42 + div) - 2 * div < 2 && v12:0 + (42 + div) = 2 * div
f_154(v50:0, v49:0) -> f_160(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, 0, v47:0, v48:0, v45:0, v49:0, v51:0, v52:0, v53:0, 3, 42, 2, 1, 4) :|: v50:0 < 0
f_154(v50:0, v49:0) -> f_154'(v50:0, v49:0) :|: v56:0 + v50:0 = 2 * v49:0 && v50:0 > -1
f_154'(v50:0, v49:0) -> f_154(div, v56:0) :|: v56:0 + v50:0 < 0 && v50:0 > -1 && v56:0 + v50:0 - 2 * div > -2 && v56:0 + v50:0 - 2 * div <= 0 && v56:0 + v50:0 = 2 * v49:0
f_154'(v50:0, v49:0) -> f_154(div, v56:0) :|: v56:0 + v50:0 >= 0 && v50:0 > -1 && v56:0 + v50:0 - 2 * div >= 0 && v56:0 + v50:0 - 2 * div < 2 && v56:0 + v50:0 = 2 * v49:0
f_85 -> f_104(v1:0, v3:0, v5:0, v7:0, 42 + v7:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 42, 1, 4, 43) :|: v1:0 > 0 && v3:0 > 0 && v7:0 < -42 && v5:0 > 0

----------------------------------------

(26)
Obligation:
Rules:
f_85 -> f_85' :|: TRUE
f_85' -> f_154(x, x1) :|: x1 + (42 + x) > -85 && x > -43 && x1 + (42 + x) < 0 && x1 + (42 + x) - 2 * x > -2 && x1 + (42 + x) - 2 * x <= 0 && x1 + (42 + x) = 2 * x
f_85' -> f_154(x2, x3) :|: x3 + (42 + x2) >= 0 && x2 > -43 && x3 + (42 + x2) - 2 * x2 >= 0 && x3 + (42 + x2) - 2 * x2 < 2 && x3 + (42 + x2) = 2 * x2
f_154(v50:0, v49:0) -> f_160(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, 0, v47:0, v48:0, v45:0, v49:0, v51:0, v52:0, v53:0, 3, 42, 2, 1, 4) :|: v50:0 < 0
f_154(x4, x5) -> f_154'(x4, x5) :|: x6 + x4 = 2 * x5 && x4 > -1
f_154'(x7, x8) -> f_154(x9, x10) :|: x10 + x7 < 0 && x7 > -1 && x10 + x7 - 2 * x9 > -2 && x10 + x7 - 2 * x9 <= 0 && x10 + x7 = 2 * x8
f_154'(x11, x12) -> f_154(x13, x14) :|: x14 + x11 >= 0 && x11 > -1 && x14 + x11 - 2 * x13 >= 0 && x14 + x11 - 2 * x13 < 2 && x14 + x11 = 2 * x12
f_85 -> f_104(v1:0, v3:0, v5:0, v7:0, 42 + v7:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 42, 1, 4, 43) :|: v1:0 > 0 && v3:0 > 0 && v7:0 < -42 && v5:0 > 0
Start term: f_85

----------------------------------------

(27) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination can continue
----------------------------------------

(28)
Obligation:
Rules:
f_85 -> f_85' :|: TRUE
f_85' -> f_154(x, x1) :|: x1 + (42 + x) > -85 && x > -43 && x1 + (42 + x) < 0 && x1 + (42 + x) - 2 * x > -2 && x1 + (42 + x) - 2 * x <= 0 && x1 + (42 + x) = 2 * x
f_85' -> f_154(x2, x3) :|: x3 + (42 + x2) >= 0 && x2 > -43 && x3 + (42 + x2) - 2 * x2 >= 0 && x3 + (42 + x2) - 2 * x2 < 2 && x3 + (42 + x2) = 2 * x2
f_154(v50:0, v49:0) -> f_160(v40:0, v41:0, v42:0, v43:0, v44:0, v50:0, 0, v47:0, v48:0, v45:0, v49:0, v51:0, v52:0, v53:0, 3, 42, 2, 1, 4) :|: v50:0 < 0
f_154(x4, x5) -> f_154'(x4, x5) :|: x6 + x4 = 2 * x5 && x4 > -1
f_154'(x7, x8) -> f_154(x9, x10) :|: x10 + x7 < 0 && x7 > -1 && x10 + x7 - 2 * x9 > -2 && x10 + x7 - 2 * x9 <= 0 && x10 + x7 = 2 * x8
f_154'(x11, x12) -> f_154(x13, x14) :|: x14 + x11 >= 0 && x11 > -1 && x14 + x11 - 2 * x13 >= 0 && x14 + x11 - 2 * x13 < 2 && x14 + x11 = 2 * x12
f_85 -> f_104(v1:0, v3:0, v5:0, v7:0, 42 + v7:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 42, 1, 4, 43) :|: v1:0 > 0 && v3:0 > 0 && v7:0 < -42 && v5:0 > 0
Start term: f_85

----------------------------------------

(29) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(30)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_85))
(VAR x160 x162 x161 x46 x164 x47 x163 x48 x166 x49 x165 x42 x168 x43 x167 x44 x45 x169 x40 x41 x39 x151 x150 x35 x153 x36 x152 x37 x155 x38 x154 x31 x157 x32 x156 x33 x159 x34 x158 x30 x70 x140 x68 x142 x69 x141 x144 x143 x64 x146 x65 x145 x66 x148 x67 x147 x60 x61 x149 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x250 x57 x131 x58 x130 x59 x133 x132 x53 x135 x54 x134 x55 x137 x56 x136 x139 x50 x138 x51 x52 x90 x91 x92 x86 x87 x88 x89 x82 x83 x84 x85 x80 x81 x193 x192 x195 x194 x79 x197 x196 x199 x198 x75 x76 x'' x77 x78 x71 x72 x73 x74 k14 k15 k16 k17 k10 k11 k12 k13 x191 x190 x182 x181 x184 x183 x186 x185 x188 x187 x189 x180 x171 x170 x173 x172 x175 x174 x177 x176 x97 x179 x98 x178 x99 x93 x94 x95 x96 x209 x208 k30 x201 x200 x203 x202 x205 k29 x204 x207 x206 k25 k26 k27 k28 k21 k22 k23 k24 k20 k18 k19 x120 x241 x240 x122 x243 x121 x242 x124 x245 x123 x244 x126 x247 x125 x246 x x128 x249 x127 x248 x129 x230 x111 x232 x110 x231 x113 x234 x112 x233 x115 x236 x114 x235 x117 x238 x116 x237 x119 x118 x239 x109 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x221 x7 x27 x220 x20 x102 x223 x21 x101 x222 x22 x104 x225 x23 x103 x224 x106 x227 x1 x105 x226 x108 x229 x107 x228 x219 x' x17 x18 x19 x13 x14 x15 x210 x16 x212 x10 x211 x11 x214 x12 x213 x216 x215 x218 x217)
(RULES
  f_85(x193, x194, x195, x196, x197, x198, x199, x200, x201, x202, x203, x204, x205, x206, x207, x208, x209, x210, x211) -> f_104(k25, k11, k14, k17, 42 + k17, 0, 3 + k25, 3 + k11, 3 + k14, 3, 42, 1, 4, 43, x212, x213, x214, x215, x216) :|: k25 > 0 && k11 > 0 && k17 < -42 && k14 > 0
  f_85'(x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82, x83, x84, x85, x86) -> f_154(k12, k13, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99, x100, x101, x102, x103) :|: k13 + (42 + k12) >= 0 && k12 > -43 && k13 + (42 + k12) - 2 * k12 >= 0 && k13 + (42 + k12) - 2 * k12 < 2 && k13 + (42 + k12) = 2 * k12
  f_85(x155, x156, x157, x158, x159, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x170, x171, x172, x173) -> f_85'(x174, x175, x176, x177, x178, x179, x180, x181, x182, x183, x184, x185, x186, x187, x188, x189, x190, x191, x192) :|: 0 = 0
  f_85'(x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_154(k19, k20, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) :|: k20 + (42 + k19) > -85 && k19 > -43 && k20 + (42 + k19) < 0 && k20 + (42 + k19) - 2 * k19 > -2 && k20 + (42 + k19) - 2 * k19 <= 0 && k20 + (42 + k19) = 2 * k19
  f_154'(k18, k15, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50) -> f_154(k16, k28, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67) :|: k28 + k18 < 0 && k18 > -1 && k28 + k18 - 2 * k16 > -2 && k28 + k18 - 2 * k16 <= 0 && k28 + k18 = 2 * k15
  f_154(k23, k7, x104, x105, x106, x107, x108, x109, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x120) -> f_160(k1, k0, k3, k2, k5, k23, 0, k6, k8, k4, k7, k21, k22, k24, 3, 42, 2, 1, 4) :|: k23 < 0
  f_154'(k29, k30, x217, x218, x219, x220, x221, x222, x223, x224, x225, x226, x227, x228, x229, x230, x231, x232, x233) -> f_154(k26, k27, x234, x235, x236, x237, x238, x239, x240, x241, x242, x243, x244, x245, x246, x247, x248, x249, x250) :|: k27 + k29 >= 0 && k29 > -1 && k27 + k29 - 2 * k26 >= 0 && k27 + k29 - 2 * k26 < 2 && k27 + k29 = 2 * k30
  f_154(k9, k10, x121, x122, x123, x124, x125, x126, x127, x128, x129, x130, x131, x132, x133, x134, x135, x136, x137) -> f_154'(k9, k10, x138, x139, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x150, x151, x152, x153, x154) :|: x6 + k9 = 2 * k10 && k9 > -1
)

----------------------------------------

(31) LoAT (EQUIVALENT)
LoAT was called with the following command:

/aprove/bin/loat --plain --nonterm --proof-level 3 /tmp/aprove.InputModules.Programs.loat17998511464240975936.koat 

LoAT's output was:


### Pre-processing the ITS problem ###

Initial linear ITS problem
   Start location: f_85
      0: f_85 -> f_104 : k0'=free_2, k1'=free_7, k10'=free_5, k11'=free_3, k12'=42+free_3, k13'=0, k14'=3+free_2, k15'=3+free_7, k16'=3+free_5, k17'=3, k18'=42, k19'=1, k2'=4, k20'=43, k21'=free_1, k22'=free_6, k23'=free_8, k24'=free, k25'=free_4, [ free_2>0 && free_7>0 && free_3<-42 && free_5>0 ], cost: 1
      2: f_85 -> f_85' : x68'=free_46, x69'=free_34, x70'=free_40, x71'=free_44, x72'=free_32, x73'=free_38, x74'=free_30, x75'=free_29, x76'=free_36, x77'=free_42, x78'=free_28, x79'=free_35, x80'=free_41, x81'=free_45, x82'=free_33, x83'=free_39, x84'=free_31, x85'=free_37, x86'=free_43, [ 0==0 ], cost: 1
      1: f_85' -> f_154 : k23'=free_24, k7'=free_12, x104'=free_9, x105'=free_16, x106'=free_21, x107'=free_15, x108'=free_20, x109'=free_26, x110'=free_13, x111'=free_18, x112'=free_23, x113'=free_11, x114'=free_17, x115'=free_22, x116'=free_10, x117'=free_27, x118'=free_14, x119'=free_19, x120'=free_25, [ 42+free_12+free_24>=0 && free_24>-43 && 42+free_12-free_24>=0 && 42+free_12-free_24<2 && 42+free_12+free_24==2*free_24 ], cost: 1
      3: f_85' -> f_154 : k23'=free_64, k7'=free_57, x104'=free_53, x105'=free_61, x106'=free_63, x107'=free_56, x108'=free_51, x109'=free_58, x110'=free_65, x111'=free_49, x112'=free_55, x113'=free_50, x114'=free_54, x115'=free_62, x116'=free_48, x117'=free_60, x118'=free_47, x119'=free_52, x120'=free_59, [ 42+free_64+free_57>-85 && free_64>-43 && 42+free_64+free_57<0 && 42-free_64+free_57>-2 && 42-free_64+free_57<=0 && 42+free_64+free_57==2*free_64 ], cost: 1
      4: f_154' -> f_154 : k23'=free_67, k7'=free_68, x104'=free_69, x105'=free_75, x106'=free_80, x107'=free_84, x108'=free_73, x109'=free_79, x110'=free_83, x111'=free_72, x112'=free_78, x113'=free_71, x114'=free_77, x115'=free_82, x116'=free_70, x117'=free_76, x118'=free_81, x119'=free_66, x120'=free_74, [ free_68+k18<0 && k18>-1 && -2*free_67+free_68+k18>-2 && -2*free_67+free_68+k18<=0 && free_68+k18==2*k15 ], cost: 1
      6: f_154' -> f_154 : k23'=free_102, k7'=free_108, x104'=free_105, x105'=free_111, x106'=free_98, x107'=free_103, x108'=free_109, x109'=free_112, x110'=free_104, x111'=free_110, x112'=free_97, x113'=free_101, x114'=free_107, x115'=free_96, x116'=free_100, x117'=free_106, x118'=free_114, x119'=free_99, x120'=free_113, [ free_108+k18>=0 && k18>-1 && free_108+k18-2*free_102>=0 && free_108+k18-2*free_102<2 && free_108+k18==2*k15 ], cost: 1
      5: f_154 -> f_160 : k0'=free_93, k1'=free_88, k10'=free_90, k11'=free_86, k12'=free_89, k13'=k23, k14'=0, k15'=free_95, k16'=free_91, k17'=free_87, k18'=k7, k19'=free_94, k2'=free_85, k20'=free_92, k21'=3, k22'=42, k23'=2, k24'=1, k25'=4, [ k23<0 ], cost: 1
      7: f_154 -> f_154' : k15'=k7, k18'=k23, x34'=free_121, x35'=free_126, x36'=free_120, x37'=free_125, x38'=free_132, x39'=free_119, x40'=free_123, x41'=free_129, x42'=free_117, x43'=free_122, x44'=free_128, x45'=free_116, x46'=free_127, x47'=free_115, x48'=free_124, x49'=free_130, x50'=free_118, [ k23+free_131==2*k7 && k23>-1 ], cost: 1

Checking for constant complexity:
   The following rule is satisfiable with cost >= 1, yielding constant complexity:
      0: f_85 -> f_104 : k0'=free_2, k1'=free_7, k10'=free_5, k11'=free_3, k12'=42+free_3, k13'=0, k14'=3+free_2, k15'=3+free_7, k16'=3+free_5, k17'=3, k18'=42, k19'=1, k2'=4, k20'=43, k21'=free_1, k22'=free_6, k23'=free_8, k24'=free, k25'=free_4, [ free_2>0 && free_7>0 && free_3<-42 && free_5>0 ], cost: 1

Removed unreachable and leaf rules:
   Start location: f_85
      2: f_85 -> f_85' : x68'=free_46, x69'=free_34, x70'=free_40, x71'=free_44, x72'=free_32, x73'=free_38, x74'=free_30, x75'=free_29, x76'=free_36, x77'=free_42, x78'=free_28, x79'=free_35, x80'=free_41, x81'=free_45, x82'=free_33, x83'=free_39, x84'=free_31, x85'=free_37, x86'=free_43, [ 0==0 ], cost: 1
      1: f_85' -> f_154 : k23'=free_24, k7'=free_12, x104'=free_9, x105'=free_16, x106'=free_21, x107'=free_15, x108'=free_20, x109'=free_26, x110'=free_13, x111'=free_18, x112'=free_23, x113'=free_11, x114'=free_17, x115'=free_22, x116'=free_10, x117'=free_27, x118'=free_14, x119'=free_19, x120'=free_25, [ 42+free_12+free_24>=0 && free_24>-43 && 42+free_12-free_24>=0 && 42+free_12-free_24<2 && 42+free_12+free_24==2*free_24 ], cost: 1
      3: f_85' -> f_154 : k23'=free_64, k7'=free_57, x104'=free_53, x105'=free_61, x106'=free_63, x107'=free_56, x108'=free_51, x109'=free_58, x110'=free_65, x111'=free_49, x112'=free_55, x113'=free_50, x114'=free_54, x115'=free_62, x116'=free_48, x117'=free_60, x118'=free_47, x119'=free_52, x120'=free_59, [ 42+free_64+free_57>-85 && free_64>-43 && 42+free_64+free_57<0 && 42-free_64+free_57>-2 && 42-free_64+free_57<=0 && 42+free_64+free_57==2*free_64 ], cost: 1
      4: f_154' -> f_154 : k23'=free_67, k7'=free_68, x104'=free_69, x105'=free_75, x106'=free_80, x107'=free_84, x108'=free_73, x109'=free_79, x110'=free_83, x111'=free_72, x112'=free_78, x113'=free_71, x114'=free_77, x115'=free_82, x116'=free_70, x117'=free_76, x118'=free_81, x119'=free_66, x120'=free_74, [ free_68+k18<0 && k18>-1 && -2*free_67+free_68+k18>-2 && -2*free_67+free_68+k18<=0 && free_68+k18==2*k15 ], cost: 1
      6: f_154' -> f_154 : k23'=free_102, k7'=free_108, x104'=free_105, x105'=free_111, x106'=free_98, x107'=free_103, x108'=free_109, x109'=free_112, x110'=free_104, x111'=free_110, x112'=free_97, x113'=free_101, x114'=free_107, x115'=free_96, x116'=free_100, x117'=free_106, x118'=free_114, x119'=free_99, x120'=free_113, [ free_108+k18>=0 && k18>-1 && free_108+k18-2*free_102>=0 && free_108+k18-2*free_102<2 && free_108+k18==2*k15 ], cost: 1
      7: f_154 -> f_154' : k15'=k7, k18'=k23, x34'=free_121, x35'=free_126, x36'=free_120, x37'=free_125, x38'=free_132, x39'=free_119, x40'=free_123, x41'=free_129, x42'=free_117, x43'=free_122, x44'=free_128, x45'=free_116, x46'=free_127, x47'=free_115, x48'=free_124, x49'=free_130, x50'=free_118, [ k23+free_131==2*k7 && k23>-1 ], cost: 1

Simplified all rules, resulting in:
   Start location: f_85
      2: f_85 -> f_85' : x68'=free_46, x69'=free_34, x70'=free_40, x71'=free_44, x72'=free_32, x73'=free_38, x74'=free_30, x75'=free_29, x76'=free_36, x77'=free_42, x78'=free_28, x79'=free_35, x80'=free_41, x81'=free_45, x82'=free_33, x83'=free_39, x84'=free_31, x85'=free_37, x86'=free_43, [], cost: 1
      1: f_85' -> f_154 : k23'=free_24, k7'=-42+free_24, x104'=free_9, x105'=free_16, x106'=free_21, x107'=free_15, x108'=free_20, x109'=free_26, x110'=free_13, x111'=free_18, x112'=free_23, x113'=free_11, x114'=free_17, x115'=free_22, x116'=free_10, x117'=free_27, x118'=free_14, x119'=free_19, x120'=free_25, [ 2*free_24>=0 && free_24>-43 ], cost: 1
      3: f_85' -> f_154 : k23'=42+free_57, k7'=free_57, x104'=free_53, x105'=free_61, x106'=free_63, x107'=free_56, x108'=free_51, x109'=free_58, x110'=free_65, x111'=free_49, x112'=free_55, x113'=free_50, x114'=free_54, x115'=free_62, x116'=free_48, x117'=free_60, x118'=free_47, x119'=free_52, x120'=free_59, [ 42+free_57>-43 && 84+2*free_57<0 ], cost: 1
      4: f_154' -> f_154 : k23'=free_67, k7'=-k18+2*k15, x104'=free_69, x105'=free_75, x106'=free_80, x107'=free_84, x108'=free_73, x109'=free_79, x110'=free_83, x111'=free_72, x112'=free_78, x113'=free_71, x114'=free_77, x115'=free_82, x116'=free_70, x117'=free_76, x118'=free_81, x119'=free_66, x120'=free_74, [ 2*k15<0 && k18>-1 && -2*free_67+2*k15>-2 && -2*free_67+2*k15<=0 ], cost: 1
      6: f_154' -> f_154 : k23'=free_102, k7'=-k18+2*k15, x104'=free_105, x105'=free_111, x106'=free_98, x107'=free_103, x108'=free_109, x109'=free_112, x110'=free_104, x111'=free_110, x112'=free_97, x113'=free_101, x114'=free_107, x115'=free_96, x116'=free_100, x117'=free_106, x118'=free_114, x119'=free_99, x120'=free_113, [ 2*k15>=0 && k18>-1 && 2*k15-2*free_102>=0 && 2*k15-2*free_102<2 ], cost: 1
      7: f_154 -> f_154' : k15'=k7, k18'=k23, x34'=free_121, x35'=free_126, x36'=free_120, x37'=free_125, x38'=free_132, x39'=free_119, x40'=free_123, x41'=free_129, x42'=free_117, x43'=free_122, x44'=free_128, x45'=free_116, x46'=free_127, x47'=free_115, x48'=free_124, x49'=free_130, x50'=free_118, [ k23>-1 ], cost: 1

### Simplification by acceleration and chaining ###

Eliminating location f_85' by chaining:
   Chained rules 2 and 1 to new rule 8.
   Chained rules 2 and 3 to new rule 9.

Eliminating location f_154' by chaining:
   Chained rules 7 and 4 to new rule 10.
   Chained rules 7 and 6 to new rule 11.

Eliminated locations (on tree-shaped paths):
   Start location: f_85
      8: f_85 -> f_154 : k23'=free_24, k7'=-42+free_24, x104'=free_9, x105'=free_16, x106'=free_21, x107'=free_15, x108'=free_20, x109'=free_26, x110'=free_13, x111'=free_18, x112'=free_23, x113'=free_11, x114'=free_17, x115'=free_22, x116'=free_10, x117'=free_27, x118'=free_14, x119'=free_19, x120'=free_25, x68'=free_46, x69'=free_34, x70'=free_40, x71'=free_44, x72'=free_32, x73'=free_38, x74'=free_30, x75'=free_29, x76'=free_36, x77'=free_42, x78'=free_28, x79'=free_35, x80'=free_41, x81'=free_45, x82'=free_33, x83'=free_39, x84'=free_31, x85'=free_37, x86'=free_43, [ 2*free_24>=0 && free_24>-43 ], cost: 2
      9: f_85 -> f_154 : k23'=42+free_57, k7'=free_57, x104'=free_53, x105'=free_61, x106'=free_63, x107'=free_56, x108'=free_51, x109'=free_58, x110'=free_65, x111'=free_49, x112'=free_55, x113'=free_50, x114'=free_54, x115'=free_62, x116'=free_48, x117'=free_60, x118'=free_47, x119'=free_52, x120'=free_59, x68'=free_46, x69'=free_34, x70'=free_40, x71'=free_44, x72'=free_32, x73'=free_38, x74'=free_30, x75'=free_29, x76'=free_36, x77'=free_42, x78'=free_28, x79'=free_35, x80'=free_41, x81'=free_45, x82'=free_33, x83'=free_39, x84'=free_31, x85'=free_37, x86'=free_43, [ 42+free_57>-43 && 84+2*free_57<0 ], cost: 2
     10: f_154 -> f_154 : k15'=k7, k18'=k23, k23'=free_67, k7'=2*k7-k23, x104'=free_69, x105'=free_75, x106'=free_80, x107'=free_84, x108'=free_73, x109'=free_79, x110'=free_83, x111'=free_72, x112'=free_78, x113'=free_71, x114'=free_77, x115'=free_82, x116'=free_70, x117'=free_76, x118'=free_81, x119'=free_66, x120'=free_74, x34'=free_121, x35'=free_126, x36'=free_120, x37'=free_125, x38'=free_132, x39'=free_119, x40'=free_123, x41'=free_129, x42'=free_117, x43'=free_122, x44'=free_128, x45'=free_116, x46'=free_127, x47'=free_115, x48'=free_124, x49'=free_130, x50'=free_118, [ k23>-1 && 2*k7<0 && 2*k7-2*free_67>-2 && 2*k7-2*free_67<=0 ], cost: 2
     11: f_154 -> f_154 : k15'=k7, k18'=k23, k23'=free_102, k7'=2*k7-k23, x104'=free_105, x105'=free_111, x106'=free_98, x107'=free_103, x108'=free_109, x109'=free_112, x110'=free_104, x111'=free_110, x112'=free_97, x113'=free_101, x114'=free_107, x115'=free_96, x116'=free_100, x117'=free_106, x118'=free_114, x119'=free_99, x120'=free_113, x34'=free_121, x35'=free_126, x36'=free_120, x37'=free_125, x38'=free_132, x39'=free_119, x40'=free_123, x41'=free_129, x42'=free_117, x43'=free_122, x44'=free_128, x45'=free_116, x46'=free_127, x47'=free_115, x48'=free_124, x49'=free_130, x50'=free_118, [ k23>-1 && 2*k7>=0 && 2*k7-2*free_102>=0 && 2*k7-2*free_102<2 ], cost: 2

Accelerating simple loops of location 3.
   Accelerating the following rules:
     10: f_154 -> f_154 : k15'=k7, k18'=k23, k23'=free_67, k7'=2*k7-k23, x104'=free_69, x105'=free_75, x106'=free_80, x107'=free_84, x108'=free_73, x109'=free_79, x110'=free_83, x111'=free_72, x112'=free_78, x113'=free_71, x114'=free_77, x115'=free_82, x116'=free_70, x117'=free_76, x118'=free_81, x119'=free_66, x120'=free_74, x34'=free_121, x35'=free_126, x36'=free_120, x37'=free_125, x38'=free_132, x39'=free_119, x40'=free_123, x41'=free_129, x42'=free_117, x43'=free_122, x44'=free_128, x45'=free_116, x46'=free_127, x47'=free_115, x48'=free_124, x49'=free_130, x50'=free_118, [ k23>-1 && 2*k7<0 && 2*k7-2*free_67>-2 && 2*k7-2*free_67<=0 ], cost: 2
     11: f_154 -> f_154 : k15'=k7, k18'=k23, k23'=free_102, k7'=2*k7-k23, x104'=free_105, x105'=free_111, x106'=free_98, x107'=free_103, x108'=free_109, x109'=free_112, x110'=free_104, x111'=free_110, x112'=free_97, x113'=free_101, x114'=free_107, x115'=free_96, x116'=free_100, x117'=free_106, x118'=free_114, x119'=free_99, x120'=free_113, x34'=free_121, x35'=free_126, x36'=free_120, x37'=free_125, x38'=free_132, x39'=free_119, x40'=free_123, x41'=free_129, x42'=free_117, x43'=free_122, x44'=free_128, x45'=free_116, x46'=free_127, x47'=free_115, x48'=free_124, x49'=free_130, x50'=free_118, [ k23>-1 && 2*k7>=0 && 2*k7-2*free_102>=0 && 2*k7-2*free_102<2 ], cost: 2

   Failed to prove monotonicity of the guard of rule 10.
   Accelerated rule 11 with non-termination, yielding the new rule 12.

Accelerated all simple loops using metering functions (where possible):
   Start location: f_85
      8: f_85 -> f_154 : k23'=free_24, k7'=-42+free_24, x104'=free_9, x105'=free_16, x106'=free_21, x107'=free_15, x108'=free_20, x109'=free_26, x110'=free_13, x111'=free_18, x112'=free_23, x113'=free_11, x114'=free_17, x115'=free_22, x116'=free_10, x117'=free_27, x118'=free_14, x119'=free_19, x120'=free_25, x68'=free_46, x69'=free_34, x70'=free_40, x71'=free_44, x72'=free_32, x73'=free_38, x74'=free_30, x75'=free_29, x76'=free_36, x77'=free_42, x78'=free_28, x79'=free_35, x80'=free_41, x81'=free_45, x82'=free_33, x83'=free_39, x84'=free_31, x85'=free_37, x86'=free_43, [ 2*free_24>=0 && free_24>-43 ], cost: 2
      9: f_85 -> f_154 : k23'=42+free_57, k7'=free_57, x104'=free_53, x105'=free_61, x106'=free_63, x107'=free_56, x108'=free_51, x109'=free_58, x110'=free_65, x111'=free_49, x112'=free_55, x113'=free_50, x114'=free_54, x115'=free_62, x116'=free_48, x117'=free_60, x118'=free_47, x119'=free_52, x120'=free_59, x68'=free_46, x69'=free_34, x70'=free_40, x71'=free_44, x72'=free_32, x73'=free_38, x74'=free_30, x75'=free_29, x76'=free_36, x77'=free_42, x78'=free_28, x79'=free_35, x80'=free_41, x81'=free_45, x82'=free_33, x83'=free_39, x84'=free_31, x85'=free_37, x86'=free_43, [ 42+free_57>-43 && 84+2*free_57<0 ], cost: 2
     10: f_154 -> f_154 : k15'=k7, k18'=k23, k23'=free_67, k7'=2*k7-k23, x104'=free_69, x105'=free_75, x106'=free_80, x107'=free_84, x108'=free_73, x109'=free_79, x110'=free_83, x111'=free_72, x112'=free_78, x113'=free_71, x114'=free_77, x115'=free_82, x116'=free_70, x117'=free_76, x118'=free_81, x119'=free_66, x120'=free_74, x34'=free_121, x35'=free_126, x36'=free_120, x37'=free_125, x38'=free_132, x39'=free_119, x40'=free_123, x41'=free_129, x42'=free_117, x43'=free_122, x44'=free_128, x45'=free_116, x46'=free_127, x47'=free_115, x48'=free_124, x49'=free_130, x50'=free_118, [ k23>-1 && 2*k7<0 && 2*k7-2*free_67>-2 && 2*k7-2*free_67<=0 ], cost: 2
     11: f_154 -> f_154 : k15'=k7, k18'=k23, k23'=free_102, k7'=2*k7-k23, x104'=free_105, x105'=free_111, x106'=free_98, x107'=free_103, x108'=free_109, x109'=free_112, x110'=free_104, x111'=free_110, x112'=free_97, x113'=free_101, x114'=free_107, x115'=free_96, x116'=free_100, x117'=free_106, x118'=free_114, x119'=free_99, x120'=free_113, x34'=free_121, x35'=free_126, x36'=free_120, x37'=free_125, x38'=free_132, x39'=free_119, x40'=free_123, x41'=free_129, x42'=free_117, x43'=free_122, x44'=free_128, x45'=free_116, x46'=free_127, x47'=free_115, x48'=free_124, x49'=free_130, x50'=free_118, [ k23>-1 && 2*k7>=0 && 2*k7-2*free_102>=0 && 2*k7-2*free_102<2 ], cost: 2
     12: f_154 -> [6] : [ k23>-1 && 2*k7>=0 && 2*k7-2*free_102>=0 && 2*k7-2*free_102<2 && free_102>-1 && 4*k7-2*k23>=0 && 4*k7-2*k23-2*free_102>=0 && 4*k7-2*k23-2*free_102<2 ], cost: NONTERM

Chaining 3 accelerated rules with incoming rules:
   Chained incoming rule 8 with accelerated rule 10 to new rule 13.
   Removing accelerated rule 10.
   Chained incoming rule 8 with accelerated rule 11 to new rule 14.
   Removing accelerated rule 11.
   Removing accelerated rule 12.

Chained accelerated rules (with incoming rules):
   Start location: f_85
      8: f_85 -> f_154 : k23'=free_24, k7'=-42+free_24, x104'=free_9, x105'=free_16, x106'=free_21, x107'=free_15, x108'=free_20, x109'=free_26, x110'=free_13, x111'=free_18, x112'=free_23, x113'=free_11, x114'=free_17, x115'=free_22, x116'=free_10, x117'=free_27, x118'=free_14, x119'=free_19, x120'=free_25, x68'=free_46, x69'=free_34, x70'=free_40, x71'=free_44, x72'=free_32, x73'=free_38, x74'=free_30, x75'=free_29, x76'=free_36, x77'=free_42, x78'=free_28, x79'=free_35, x80'=free_41, x81'=free_45, x82'=free_33, x83'=free_39, x84'=free_31, x85'=free_37, x86'=free_43, [ 2*free_24>=0 && free_24>-43 ], cost: 2
      9: f_85 -> f_154 : k23'=42+free_57, k7'=free_57, x104'=free_53, x105'=free_61, x106'=free_63, x107'=free_56, x108'=free_51, x109'=free_58, x110'=free_65, x111'=free_49, x112'=free_55, x113'=free_50, x114'=free_54, x115'=free_62, x116'=free_48, x117'=free_60, x118'=free_47, x119'=free_52, x120'=free_59, x68'=free_46, x69'=free_34, x70'=free_40, x71'=free_44, x72'=free_32, x73'=free_38, x74'=free_30, x75'=free_29, x76'=free_36, x77'=free_42, x78'=free_28, x79'=free_35, x80'=free_41, x81'=free_45, x82'=free_33, x83'=free_39, x84'=free_31, x85'=free_37, x86'=free_43, [ 42+free_57>-43 && 84+2*free_57<0 ], cost: 2
     13: f_85 -> f_154 : k15'=-42+free_24, k18'=free_24, k23'=free_67, k7'=-84+free_24, x104'=free_69, x105'=free_75, x106'=free_80, x107'=free_84, x108'=free_73, x109'=free_79, x110'=free_83, x111'=free_72, x112'=free_78, x113'=free_71, x114'=free_77, x115'=free_82, x116'=free_70, x117'=free_76, x118'=free_81, x119'=free_66, x120'=free_74, x34'=free_121, x35'=free_126, x36'=free_120, x37'=free_125, x38'=free_132, x39'=free_119, x40'=free_123, x41'=free_129, x42'=free_117, x43'=free_122, x44'=free_128, x45'=free_116, x46'=free_127, x47'=free_115, x48'=free_124, x49'=free_130, x50'=free_118, x68'=free_46, x69'=free_34, x70'=free_40, x71'=free_44, x72'=free_32, x73'=free_38, x74'=free_30, x75'=free_29, x76'=free_36, x77'=free_42, x78'=free_28, x79'=free_35, x80'=free_41, x81'=free_45, x82'=free_33, x83'=free_39, x84'=free_31, x85'=free_37, x86'=free_43, [ 2*free_24>=0 && free_24>-1 && -84+2*free_24<0 && -84-2*free_67+2*free_24>-2 && -84-2*free_67+2*free_24<=0 ], cost: 4
     14: f_85 -> f_154 : k15'=-42+free_24, k18'=free_24, k23'=free_102, k7'=-84+free_24, x104'=free_105, x105'=free_111, x106'=free_98, x107'=free_103, x108'=free_109, x109'=free_112, x110'=free_104, x111'=free_110, x112'=free_97, x113'=free_101, x114'=free_107, x115'=free_96, x116'=free_100, x117'=free_106, x118'=free_114, x119'=free_99, x120'=free_113, x34'=free_121, x35'=free_126, x36'=free_120, x37'=free_125, x38'=free_132, x39'=free_119, x40'=free_123, x41'=free_129, x42'=free_117, x43'=free_122, x44'=free_128, x45'=free_116, x46'=free_127, x47'=free_115, x48'=free_124, x49'=free_130, x50'=free_118, x68'=free_46, x69'=free_34, x70'=free_40, x71'=free_44, x72'=free_32, x73'=free_38, x74'=free_30, x75'=free_29, x76'=free_36, x77'=free_42, x78'=free_28, x79'=free_35, x80'=free_41, x81'=free_45, x82'=free_33, x83'=free_39, x84'=free_31, x85'=free_37, x86'=free_43, [ free_24>-1 && -84+2*free_24>=0 && -84-2*free_102+2*free_24>=0 && -84-2*free_102+2*free_24<2 ], cost: 4

Removed unreachable locations (and leaf rules with constant cost):
   Start location: f_85
     <empty>

### Computing asymptotic complexity ###

Fully simplified ITS problem
   Start location: f_85
     <empty>

Obtained the following overall complexity (w.r.t. the length of the input n):
   Complexity:  Constant
   Cpx degree:  0
   Solved cost: 1
   Rule cost:   1
   Rule guard:  [ free_2>0 && free_7>0 && free_3<-42 && free_5>0 ]

WORST_CASE(Omega(1),?)

----------------------------------------

(32)
MAYBE
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
