YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/xPdvY.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 57 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2043 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 106 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 10 ms]
        (13) AND
            (14) IntTRS
                (15) TerminationGraphProcessor [EQUIVALENT, 3 ms]
                (16) IntTRS
                (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (18) IntTRS
                (19) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (20) IntTRS
                (21) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
                (22) YES
            (23) IntTRS
                (24) TerminationGraphProcessor [EQUIVALENT, 0 ms]
                (25) IntTRS
                (26) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (27) IntTRS
                (28) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (29) IntTRS
                (30) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
                (31) YES
    (32) LLVM Symbolic Execution SCC
        (33) SCC2IRS [SOUND, 69 ms]
        (34) IntTRS
        (35) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (36) IntTRS
        (37) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (38) YES
    (39) LLVM Symbolic Execution SCC
        (40) SCC2IRS [SOUND, 53 ms]
        (41) IntTRS
        (42) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (43) IntTRS
        (44) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (45) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/xPdvY.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/xPdvY.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_String" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i8, align 8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %1
		%4 = load %1
		%5 = icmp slt %4 1
		br %5, %6, %7
	6:
		store 1, %1
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		%8 = load %1
		%9 = sext i32 %8 to i64
		%10 = mul i64 %9, 1
		%11 = call noalias *i8 @malloc(i64 %10)
		store %11, %2
		%12 = load %2
		%13 = load %1
		%14 = sub i32 %13, 1
		%15 = sext i32 %14 to i64
		%16 = getelementptr %12, %15
		store 0, %16
		%17 = load %2
		ret %17

*BasicFunctionTypename: "cstrpbrk" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 36
	0:
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		%6 = alloca *i8, align 8
		%7 = alloca *i8, align 8
		%8 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		%9 = load %4
		store %9, %6
		br %10
	10:
		%11 = load %6
		%12 = load %11
		%13 = sext i8 %12 to i32
		%14 = icmp ne %13 0
		br %14, %15, %50
	15:
		%16 = load %5
		store %16, %7
		%17 = load %6
		%18 = load %17
		%19 = sext i8 %18 to i32
		store %19, %8
		br %20
	20:
		%21 = load %7
		%22 = load %21
		%23 = sext i8 %22 to i32
		%24 = icmp ne %23 0
		br %24, %25, %33
	25:
		%26 = load %7
		%27 = load %26
		%28 = sext i8 %27 to i32
		%29 = load %8
		%30 = trunc i32 %29 to i8
		%31 = sext i8 %30 to i32
		%32 = icmp ne %28 %31
		br %33
	33:
		%34 = phi [0, %20], [%32, %25]
		br %34, %35, %38
	35:
		%36 = load %7
		%37 = getelementptr %36, 1
		store %37, %7
		br %20
	38:
		%39 = load %7
		%40 = load %39
		%41 = sext i8 %40 to i32
		%42 = load %8
		%43 = icmp ne %41 %42
		br %43, %44, %46
	44:
		%45 = load %6
		store %45, %3
		br %51
	46:
		br %47
	47:
		%48 = load %6
		%49 = getelementptr %48, 1
		store %49, %6
		br %10
	50:
		store null, %3
		br %51
	51:
		%52 = load %3
		ret %52

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 94
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call *i8 @__VERIFIER_nondet_String()
		%3 = call *i8 @__VERIFIER_nondet_String()
		%4 = call *i8 @cstrpbrk(*i8 %2, *i8 %3)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 73 rulesP rules:
f_915(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4085, v4084, v4086, v4087, v4088, 0, v4090, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) -> f_918(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4085, v4084, v4086, v4087, v4088, 0, v4090, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) :|: TRUE
f_918(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4085, v4084, v4086, v4087, v4088, 0, v4090, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) -> f_921(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4084, v4085, v4086, v4087, v4088, 0, v4090, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) :|: 0 = 0
f_921(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4084, v4085, v4086, v4087, v4088, 0, v4090, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) -> f_924(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4084, v4085, v4086, v4087, v4088, 0, v4090, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) :|: v4119 != 0 && v4091 < v4095 && 3 <= v4095
f_924(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4084, v4085, v4086, v4087, v4088, 0, v4090, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) -> f_928(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4084, v4085, v4086, v4087, v4088, 0, v4090, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) :|: 0 = 0
f_928(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4084, v4085, v4086, v4087, v4088, 0, v4090, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) -> f_932(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4084, v4085, v4086, v4087, v4088, 0, v4090, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) :|: TRUE
f_932(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4084, v4085, v4086, v4087, v4088, 0, v4090, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) -> f_936(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4085, v4086, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) :|: 0 = 0
f_936(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4085, v4086, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) -> f_940(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4085, v4086, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) :|: 0 = 0
f_940(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4085, v4086, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) -> f_944(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4086, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) :|: 0 = 0
f_944(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4086, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) -> f_947(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4086, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) :|: 0 = 0
f_947(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4086, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) -> f_950(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4519, v4086, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) :|: TRUE
f_950(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4519, v4086, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) -> f_953(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4519, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) :|: 0 = 0
f_953(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4519, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) -> f_957(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4519, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) :|: v4119 != v4519
f_953(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4519, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) -> f_958(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4519, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) :|: v4119 = v4519
f_957(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4519, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) -> f_962(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4519, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) :|: 0 = 0
f_962(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4519, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) -> f_967(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4519, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) :|: 0 = 0
f_967(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4519, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) -> f_968(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4119, v4519, v4084, v4091, v4087, v4088, 0, v4090, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, v4119, 3, 7, 2, 4, 8) :|: TRUE
f_968(v4761, v4762, v4763, v4764, v4765, v4766, v4767, v4768, v4769, v4770, 1, v4772, v4773, v4774, v4775, v4776, v4777, v4778, 0, v4780, v4781, v4782, v4783, v4784, v4785, v4786, v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 3, 7, 2, 4, 8) -> f_973(v4761, v4762, v4763, v4764, v4765, v4766, v4767, v4768, v4769, v4770, 1, v4772, v4773, v4774, v4775, v4776, v4777, v4778, 0, v4780, v4781, v4782, v4783, v4784, v4785, v4786, v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 3, 7, 2, 4, 8) :|: TRUE
f_973(v4761, v4762, v4763, v4764, v4765, v4766, v4767, v4768, v4769, v4770, 1, v4772, v4773, v4774, v4775, v4776, v4777, v4778, 0, v4780, v4781, v4782, v4783, v4784, v4785, v4786, v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794, 3, 7, 2, 4, 8) -> f_978(v4761, v4762, v4763, v4764, v4765, v4766, v4767, v4768, v4769, v4770, 1, v4772, v4773, v4774, v4776, v4777, v4778, 0, v4780, v4781, v4782, v4783, v4784, v4785, v4786, v4787, v4788, v4789, v4790, v4791, v4792, v4775, v4793, v4794, 3, 7, 2, 4, 8) :|: 0 = 0
f_978(v4761, v4762, v4763, v4764, v4765, v4766, v4767, v4768, v4769, v4770, 1, v4772, v4773, v4774, v4776, v4777, v4778, 0, v4780, v4781, v4782, v4783, v4784, v4785, v4786, v4787, v4788, v4789, v4790, v4791, v4792, v4775, v4793, v4794, 3, 7, 2, 4, 8) -> f_983(v4761, v4762, v4763, v4764, v4765, v4766, v4767, v4768, v4769, v4770, 1, v4772, v4773, v4774, v5241, v4777, v4778, 0, v4780, v4781, v4782, v4783, v4784, v4785, v4786, v4787, v4788, v4789, v4790, v4791, v4792, v4775, v4793, v4776, v4794, 3, 7, 2, 4, 8) :|: v5241 = 1 + v4772 && 2 <= v5241
f_983(v4761, v4762, v4763, v4764, v4765, v4766, v4767, v4768, v4769, v4770, 1, v4772, v4773, v4774, v5241, v4777, v4778, 0, v4780, v4781, v4782, v4783, v4784, v4785, v4786, v4787, v4788, v4789, v4790, v4791, v4792, v4775, v4793, v4776, v4794, 3, 7, 2, 4, 8) -> f_988(v4761, v4762, v4763, v4764, v4765, v4766, v4767, v4768, v4769, v4770, 1, v4772, v4773, v4774, v5241, v4777, v4778, 0, v4780, v4781, v4782, v4783, v4784, v4785, v4786, v4787, v4788, v4789, v4790, v4791, v4792, v4775, v4793, v4776, v4794, 3, 7, 2, 4, 8) :|: TRUE
f_988(v4761, v4762, v4763, v4764, v4765, v4766, v4767, v4768, v4769, v4770, 1, v4772, v4773, v4774, v5241, v4777, v4778, 0, v4780, v4781, v4782, v4783, v4784, v4785, v4786, v4787, v4788, v4789, v4790, v4791, v4792, v4775, v4793, v4776, v4794, 3, 7, 2, 4, 8) -> f_991(v4761, v4762, v4763, v4764, v4765, v4766, v4767, v4768, v4769, v4770, 1, v4772, v4773, v4774, v5241, v4777, v4778, 0, v4780, v4781, v4782, v4783, v4784, v4785, v4786, v4787, v4788, v4789, v4790, v4791, v4792, v4775, v4793, v4776, v4794, 3, 7, 2, 4, 8) :|: TRUE
f_991(v4761, v4762, v4763, v4764, v4765, v4766, v4767, v4768, v4769, v4770, 1, v4772, v4773, v4774, v5241, v4777, v4778, 0, v4780, v4781, v4782, v4783, v4784, v4785, v4786, v4787, v4788, v4789, v4790, v4791, v4792, v4775, v4793, v4776, v4794, 3, 7, 2, 4, 8) -> f_913(v4761, v4762, v4763, v4764, v4765, v4766, v4767, v4768, v4769, v4770, 1, v4772, v4773, v4774, v4777, v4778, 0, v4780, v5241, v4781, v4782, v4783, v4784, v4785, v4786, v4787, v4788, v4789, v4790, v4791, v4792, 3, 7, 2, 4, 8) :|: TRUE
f_913(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4084, v4085, v4086, v4087, v4088, 0, v4090, v4091, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) -> f_915(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4085, v4084, v4086, v4087, v4088, 0, v4090, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, 3, 7, 2, 4, 8) :|: 0 = 0
f_958(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4519, v4087, v4088, 0, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) -> f_963(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4519, 0, v4087, v4088, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) :|: 0 = 0
f_963(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4519, 0, v4087, v4088, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) -> f_969(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4519, 0, v4087, v4088, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) :|: 0 = 0
f_969(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4519, 0, v4087, v4088, v4090, v4084, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4085, 3, 7, 2, 4, 8) -> f_1067(v4073, v4074, v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082, 1, v4091, v4519, 0, v4087, v4088, v4090, v4084, v4091, v4092, v4093, v4094, v4095, v4096, v4097, v4098, v4099, v4100, v4101, v4102, v4103, v4519, v4085, 3, 7, 2, 4, 8) :|: TRUE
f_1067(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, v6960, 0, v6962, v6963, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6980, 3, 7, 2, 4, 8) -> f_1068(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, v6960, 0, v6962, v6963, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6980, 3, 7, 2, 4, 8) :|: TRUE
f_1068(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, v6960, 0, v6962, v6963, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6980, 3, 7, 2, 4, 8) -> f_1069(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, v6960, 0, v6963, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6980, 3, 7, 2, 4, 8) :|: 0 = 0
f_1069(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, v6960, 0, v6963, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6980, 3, 7, 2, 4, 8) -> f_1070(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, v6960, 0, v6963, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6980, 3, 7, 2, 4, 8) :|: 0 = 0
f_1070(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, v6960, 0, v6963, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6980, 3, 7, 2, 4, 8) -> f_1071(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, v6960, 0, v6963, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6980, 3, 7, 2, 4, 8) :|: 0 = 0
f_1071(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, v6960, 0, v6963, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6980, 3, 7, 2, 4, 8) -> f_1072(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, v6960, 0, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6980, 3, 7, 2, 4, 8) :|: 0 = 0
f_1072(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, v6960, 0, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6980, 3, 7, 2, 4, 8) -> f_1074(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6980, 3, 7, 2, 4, 8) :|: v6960 = v6957
f_1074(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6980, 3, 7, 2, 4, 8) -> f_1076(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6980, 3, 7, 2, 4, 8) :|: 0 = 0
f_1076(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6980, 3, 7, 2, 4, 8) -> f_1078(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6980, 3, 7, 2, 4, 8) :|: TRUE
f_1078(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6980, 3, 7, 2, 4, 8) -> f_1080(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6980, 3, 7, 2, 4, 8) :|: TRUE
f_1080(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v6964, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6980, 3, 7, 2, 4, 8) -> f_1082(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: 0 = 0
f_1082(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1084(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v7201, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: v7201 = 1 + v6956 && 3 <= v7201
f_1084(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v7201, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1086(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v7201, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: TRUE
f_1086(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v7201, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1088(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v7201, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: TRUE
f_1088(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v6956, v6957, 1, v6959, 0, v7201, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1089(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v6957, 1, v6956, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: 0 = 0
f_1089(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v6957, 1, v6956, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1090(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, v6957, 1, v6956, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: TRUE
f_1090(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, v6957, 1, v6956, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1091(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6956, v6957, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: 0 = 0
f_1091(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6956, v6957, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1092(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6956, v6957, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: v7245 != 0 && v7201 < v6969 && 4 <= v6969
f_1092(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6956, v6957, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1094(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6956, v6957, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: 0 = 0
f_1094(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6956, v6957, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1096(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6956, v6957, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: TRUE
f_1096(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6956, v6957, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1098(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6956, v6957, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: 0 = 0
f_1098(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6956, v6957, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1100(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6956, v6957, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: TRUE
f_1100(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6956, v6957, v6959, 0, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1102(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6957, v6959, 0, v6956, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: 0 = 0
f_1102(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6957, v6959, 0, v6956, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1104(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6957, v6959, 0, v6956, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: 0 = 0
f_1104(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6957, v6959, 0, v6956, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1106(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6959, v6957, 0, v6956, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: 0 = 0
f_1106(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6959, v6957, 0, v6956, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1107(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6959, v6957, 0, v6956, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: TRUE
f_1107(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6959, v6957, 0, v6956, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1108(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6959, v6957, 0, v6956, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) :|: TRUE
f_1108(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6959, v6957, 0, v6956, v6965, v6966, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6979, v6962, v6963, v6964, v6980, 3, 7, 2, 4, 8) -> f_1048(v6948, v6949, v6950, v6951, v6952, v6953, v6954, v6955, v7201, v7245, 1, v6959, v6957, 0, v6965, v6966, v6956, v6967, v6968, v6969, v6970, v6971, v6972, v6973, v6974, v6975, v6976, v6977, v6978, v6980, v6979, 3, 7, 2, 4, 8) :|: TRUE
f_1048(v6505, v6506, v6507, v6508, v6509, v6510, v6511, v6512, v6513, v6514, 1, v6516, v6517, 0, v6519, v6520, v6521, v6522, v6523, v6524, v6525, v6526, v6527, v6528, v6529, v6530, v6531, v6532, v6533, v6534, v6535, 3, 7, 2, 4, 8) -> f_1049(v6505, v6506, v6507, v6508, v6509, v6510, v6511, v6512, v6513, v6514, 1, v6517, v6516, 0, v6519, v6520, v6521, v6522, v6523, v6524, v6525, v6526, v6527, v6528, v6529, v6530, v6531, v6532, v6533, v6534, v6535, 3, 7, 2, 4, 8) :|: 0 = 0
f_1049(v6505, v6506, v6507, v6508, v6509, v6510, v6511, v6512, v6513, v6514, 1, v6517, v6516, 0, v6519, v6520, v6521, v6522, v6523, v6524, v6525, v6526, v6527, v6528, v6529, v6530, v6531, v6532, v6533, v6534, v6535, 3, 7, 2, 4, 8) -> f_1050(v6505, v6506, v6507, v6508, v6509, v6510, v6511, v6512, v6513, v6514, 1, v6533, v6517, v6516, 0, v6519, v6520, v6521, v6522, v6523, v6524, v6525, v6526, v6527, v6528, v6529, v6530, v6531, v6532, v6534, v6535, 3, 7, 2, 4, 8) :|: 0 = 0
f_1050(v6505, v6506, v6507, v6508, v6509, v6510, v6511, v6512, v6513, v6514, 1, v6533, v6517, v6516, 0, v6519, v6520, v6521, v6522, v6523, v6524, v6525, v6526, v6527, v6528, v6529, v6530, v6531, v6532, v6534, v6535, 3, 7, 2, 4, 8) -> f_1051(v6505, v6506, v6507, v6508, v6509, v6510, v6511, v6512, v6513, v6514, 1, v6533, v6516, v6517, 0, v6519, v6520, v6521, v6522, v6523, v6524, v6525, v6526, v6527, v6528, v6529, v6530, v6531, v6532, v6534, v6535, 3, 7, 2, 4, 8) :|: 0 = 0
f_1051(v6505, v6506, v6507, v6508, v6509, v6510, v6511, v6512, v6513, v6514, 1, v6533, v6516, v6517, 0, v6519, v6520, v6521, v6522, v6523, v6524, v6525, v6526, v6527, v6528, v6529, v6530, v6531, v6532, v6534, v6535, 3, 7, 2, 4, 8) -> f_1052(v6505, v6506, v6507, v6508, v6509, v6510, v6511, v6512, v6513, v6514, 1, v6533, v6516, v6517, 0, v6519, v6520, v6521, v6522, v6523, v6524, v6525, v6526, v6527, v6528, v6529, v6530, v6531, v6532, v6534, v6535, 3, 7, 2, 4, 8) :|: 0 = 0
f_1052(v6505, v6506, v6507, v6508, v6509, v6510, v6511, v6512, v6513, v6514, 1, v6533, v6516, v6517, 0, v6519, v6520, v6521, v6522, v6523, v6524, v6525, v6526, v6527, v6528, v6529, v6530, v6531, v6532, v6534, v6535, 3, 7, 2, 4, 8) -> f_1053(v6505, v6506, v6507, v6508, v6509, v6510, v6511, v6512, v6513, v6514, 1, v6533, v6516, v6517, 0, v6519, v6520, v6521, v6522, v6523, v6524, v6525, v6526, v6527, v6528, v6529, v6530, v6531, v6532, v6534, v6535, 3, 7, 2, 4, 8) :|: TRUE
f_1053(v6505, v6506, v6507, v6508, v6509, v6510, v6511, v6512, v6513, v6514, 1, v6533, v6516, v6517, 0, v6519, v6520, v6521, v6522, v6523, v6524, v6525, v6526, v6527, v6528, v6529, v6530, v6531, v6532, v6534, v6535, 3, 7, 2, 4, 8) -> f_1054(v6505, v6506, v6507, v6508, v6509, v6510, v6511, v6512, v6513, v6514, 1, v6533, v6516, v6517, 0, v6519, v6520, v6521, v6522, v6523, v6524, v6525, v6526, v6527, v6528, v6529, v6530, v6531, v6532, v6534, v6535, 3, 7, 2, 4, 8) :|: TRUE
f_1054(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6646, v6647, 0, v6649, v6650, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) -> f_1055(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6647, 0, v6649, v6650, v6646, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1055(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6647, 0, v6649, v6650, v6646, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) -> f_1056(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6647, 0, v6649, v6650, v6646, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1056(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6647, 0, v6649, v6650, v6646, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) -> f_1057(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6647, 0, v6649, v6650, v6646, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1057(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6647, 0, v6649, v6650, v6646, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) -> f_1058(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6647, 0, v6649, v6650, v6646, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1058(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6647, 0, v6649, v6650, v6646, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) -> f_1059(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6665, v6647, 0, v6649, v6650, v6646, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) :|: TRUE
f_1059(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6665, v6647, 0, v6649, v6650, v6646, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) -> f_1060(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6665, 0, v6649, v6650, v6646, v6647, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1060(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6665, 0, v6649, v6650, v6646, v6647, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) -> f_1061(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6665, 0, v6649, v6650, v6646, v6647, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) :|: v6645 != v6665
f_1060(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6665, 0, v6649, v6650, v6646, v6647, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) -> f_1062(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6665, 0, v6649, v6650, v6646, v6647, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) :|: v6645 = v6665
f_1061(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6665, 0, v6649, v6650, v6646, v6647, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) -> f_1063(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6665, 0, v6649, v6650, v6646, v6647, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1063(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6665, 0, v6649, v6650, v6646, v6647, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) -> f_1065(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6665, v6649, v6650, v6646, v6647, 0, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1065(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6645, v6665, v6649, v6650, v6646, v6647, 0, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) -> f_968(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6635, v6645, v6665, v6649, v6650, v6646, v6647, 0, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6645, v6663, v6664, 3, 7, 2, 4, 8) :|: TRUE
f_1062(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6665, 0, v6649, v6650, v6646, v6647, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) -> f_1064(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6665, 0, v6649, v6650, v6646, v6647, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1064(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6665, 0, v6649, v6650, v6646, v6647, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) -> f_1066(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6665, 0, v6649, v6650, v6646, v6647, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) :|: 0 = 0
f_1066(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6665, 0, v6649, v6650, v6646, v6647, v6651, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6663, v6664, 3, 7, 2, 4, 8) -> f_1067(v6634, v6635, v6636, v6637, v6638, v6639, v6640, v6641, v6642, v6643, 1, v6635, v6665, 0, v6646, v6647, v6651, v6649, v6650, v6652, v6653, v6654, v6655, v6656, v6657, v6658, v6659, v6660, v6661, v6662, v6665, v6664, v6663, 3, 7, 2, 4, 8) :|: TRUE
Combined rules. Obtained 12 rulesP rules:
f_915(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, v4081:0, v4082:0, 1, v4091:0, v4085:0, v4084:0, v4086:0, v4087:0, v4088:0, 0, v4090:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4103:0, 3, 7, 2, 4, 8) -> f_915(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, v4081:0, v4082:0, 1, 1 + v4091:0, v4119:0, v4091:0, v4519:0, v4087:0, v4088:0, 0, v4090:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4103:0, 3, 7, 2, 4, 8) :|: v4095:0 > v4091:0 && v4119:0 < 0 && v4095:0 > 2 && v4091:0 > 0 && v4519:0 > v4119:0
f_915(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, v4081:0, v4082:0, 1, v4091:0, v4085:0, v4084:0, v4086:0, v4087:0, v4088:0, 0, v4090:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4103:0, 3, 7, 2, 4, 8) -> f_915(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, v4081:0, v4082:0, 1, 1 + v4091:0, v4119:0, v4091:0, v4519:0, v4087:0, v4088:0, 0, v4090:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4103:0, 3, 7, 2, 4, 8) :|: v4095:0 > v4091:0 && v4119:0 < 0 && v4095:0 > 2 && v4091:0 > 0 && v4519:0 < v4119:0
f_915(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, v4081:0, v4082:0, 1, v4091:0, v4085:0, v4084:0, v4086:0, v4087:0, v4088:0, 0, v4090:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4103:0, 3, 7, 2, 4, 8) -> f_915(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, v4081:0, v4082:0, 1, 1 + v4091:0, v4119:0, v4091:0, v4519:0, v4087:0, v4088:0, 0, v4090:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4103:0, 3, 7, 2, 4, 8) :|: v4095:0 > v4091:0 && v4119:0 > 0 && v4095:0 > 2 && v4091:0 > 0 && v4519:0 > v4119:0
f_915(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, v4081:0, v4082:0, 1, v4091:0, v4085:0, v4084:0, v4086:0, v4087:0, v4088:0, 0, v4090:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4103:0, 3, 7, 2, 4, 8) -> f_915(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, v4081:0, v4082:0, 1, 1 + v4091:0, v4119:0, v4091:0, v4519:0, v4087:0, v4088:0, 0, v4090:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4103:0, 3, 7, 2, 4, 8) :|: v4095:0 > v4091:0 && v4119:0 > 0 && v4095:0 > 2 && v4091:0 > 0 && v4519:0 < v4119:0
f_1060(v6634:0, v6635:0, v6636:0, v6637:0, v6638:0, v6639:0, v6640:0, v6641:0, v6642:0, v6643:0, 1, v6645:0, v6665:0, 0, v6649:0, v6650:0, v6646:0, v6647:0, v6651:0, v6652:0, v6653:0, v6654:0, v6655:0, v6656:0, v6657:0, v6658:0, v6659:0, v6660:0, v6661:0, v6662:0, v6663:0, v6664:0, 3, 7, 2, 4, 8) -> f_915(v6634:0, v6635:0, v6636:0, v6637:0, v6638:0, v6639:0, v6640:0, v6641:0, v6642:0, v6643:0, 1, 1 + v6635:0, v6645:0, v6635:0, v6665:0, v6646:0, v6647:0, 0, v6651:0, v6652:0, v6653:0, v6654:0, v6655:0, v6656:0, v6657:0, v6658:0, v6659:0, v6660:0, v6661:0, v6662:0, v6645:0, 3, 7, 2, 4, 8) :|: v6665:0 > v6645:0 && v6635:0 > 0
f_1060(v6634:0, v6635:0, v6636:0, v6637:0, v6638:0, v6639:0, v6640:0, v6641:0, v6642:0, v6643:0, 1, v6645:0, v6665:0, 0, v6649:0, v6650:0, v6646:0, v6647:0, v6651:0, v6652:0, v6653:0, v6654:0, v6655:0, v6656:0, v6657:0, v6658:0, v6659:0, v6660:0, v6661:0, v6662:0, v6663:0, v6664:0, 3, 7, 2, 4, 8) -> f_915(v6634:0, v6635:0, v6636:0, v6637:0, v6638:0, v6639:0, v6640:0, v6641:0, v6642:0, v6643:0, 1, 1 + v6635:0, v6645:0, v6635:0, v6665:0, v6646:0, v6647:0, 0, v6651:0, v6652:0, v6653:0, v6654:0, v6655:0, v6656:0, v6657:0, v6658:0, v6659:0, v6660:0, v6661:0, v6662:0, v6645:0, 3, 7, 2, 4, 8) :|: v6665:0 < v6645:0 && v6635:0 > 0
f_1060(v6634:0, v6635:0, v6636:0, v6637:0, v6638:0, v6639:0, v6640:0, v6641:0, v6642:0, v6643:0, 1, v6643:0, v6643:0, 0, v6649:0, v6650:0, v6646:0, v6647:0, v6651:0, v6652:0, v6653:0, v6654:0, v6655:0, v6656:0, v6657:0, v6658:0, v6659:0, v6660:0, v6661:0, v6662:0, v6663:0, v6664:0, 3, 7, 2, 4, 8) -> f_1060(v6634:0, v6635:0, v6636:0, v6637:0, v6638:0, v6639:0, v6640:0, v6641:0, 1 + v6642:0, v7245:0, 1, v6643:0, v6665:1, 0, v6649:0, v6650:0, v6635:0, v6643:0, v6642:0, v6652:0, v6653:0, v6654:0, v6655:0, v6656:0, v6657:0, v6658:0, v6659:0, v6660:0, v6661:0, v6662:0, v6663:0, v6664:0, 3, 7, 2, 4, 8) :|: v6642:0 > 1 && v6654:0 > 1 + v6642:0 && v6654:0 > 3 && v7245:0 < 0
f_1060(v6634:0, v6635:0, v6636:0, v6637:0, v6638:0, v6639:0, v6640:0, v6641:0, v6642:0, v6643:0, 1, v6643:0, v6643:0, 0, v6649:0, v6650:0, v6646:0, v6647:0, v6651:0, v6652:0, v6653:0, v6654:0, v6655:0, v6656:0, v6657:0, v6658:0, v6659:0, v6660:0, v6661:0, v6662:0, v6663:0, v6664:0, 3, 7, 2, 4, 8) -> f_1060(v6634:0, v6635:0, v6636:0, v6637:0, v6638:0, v6639:0, v6640:0, v6641:0, 1 + v6642:0, v7245:0, 1, v6643:0, v6665:1, 0, v6649:0, v6650:0, v6635:0, v6643:0, v6642:0, v6652:0, v6653:0, v6654:0, v6655:0, v6656:0, v6657:0, v6658:0, v6659:0, v6660:0, v6661:0, v6662:0, v6663:0, v6664:0, 3, 7, 2, 4, 8) :|: v6642:0 > 1 && v6654:0 > 1 + v6642:0 && v6654:0 > 3 && v7245:0 > 0
f_915(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, v4081:0, v4082:0, 1, v4091:0, v4085:0, v4084:0, v4086:0, v4087:0, v4088:0, 0, v4090:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4103:0, 3, 7, 2, 4, 8) -> f_1060(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, 1 + v4081:0, v7245:0, 1, v4103:0, v6665:0, 0, v4084:0, v4091:0, v4091:0, v4082:0, v4081:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4085:0, v4082:0, 3, 7, 2, 4, 8) :|: v4095:0 > v4091:0 && v4082:0 < 0 && v4095:0 > 2 && v4081:0 > 1 && v4094:0 > 1 + v4081:0 && v4094:0 > 3 && v7245:0 < 0
f_915(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, v4081:0, v4082:0, 1, v4091:0, v4085:0, v4084:0, v4086:0, v4087:0, v4088:0, 0, v4090:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4103:0, 3, 7, 2, 4, 8) -> f_1060(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, 1 + v4081:0, v7245:0, 1, v4103:0, v6665:0, 0, v4084:0, v4091:0, v4091:0, v4082:0, v4081:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4085:0, v4082:0, 3, 7, 2, 4, 8) :|: v4095:0 > v4091:0 && v4082:0 < 0 && v4095:0 > 2 && v4081:0 > 1 && v4094:0 > 1 + v4081:0 && v4094:0 > 3 && v7245:0 > 0
f_915(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, v4081:0, v4082:0, 1, v4091:0, v4085:0, v4084:0, v4086:0, v4087:0, v4088:0, 0, v4090:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4103:0, 3, 7, 2, 4, 8) -> f_1060(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, 1 + v4081:0, v7245:0, 1, v4103:0, v6665:0, 0, v4084:0, v4091:0, v4091:0, v4082:0, v4081:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4085:0, v4082:0, 3, 7, 2, 4, 8) :|: v4095:0 > v4091:0 && v4082:0 > 0 && v4095:0 > 2 && v4081:0 > 1 && v4094:0 > 1 + v4081:0 && v4094:0 > 3 && v7245:0 < 0
f_915(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, v4081:0, v4082:0, 1, v4091:0, v4085:0, v4084:0, v4086:0, v4087:0, v4088:0, 0, v4090:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4103:0, 3, 7, 2, 4, 8) -> f_1060(v4073:0, v4074:0, v4075:0, v4076:0, v4077:0, v4078:0, v4079:0, v4080:0, 1 + v4081:0, v7245:0, 1, v4103:0, v6665:0, 0, v4084:0, v4091:0, v4091:0, v4082:0, v4081:0, v4092:0, v4093:0, v4094:0, v4095:0, v4096:0, v4097:0, v4098:0, v4099:0, v4100:0, v4101:0, v4102:0, v4085:0, v4082:0, 3, 7, 2, 4, 8) :|: v4095:0 > v4091:0 && v4082:0 > 0 && v4095:0 > 2 && v4081:0 > 1 && v4094:0 > 1 + v4081:0 && v4094:0 > 3 && v7245:0 > 0
Filtered unneeded arguments:
   f_915(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36) -> f_915(x2, x9, x10, x12, x22, x23, x31)
   f_1060(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37) -> f_1060(x2, x9, x10, x12, x13, x22, x23)
Removed division, modulo operations, cleaned up constraints. Obtained 9 rules.P rules:
f_915(v4074:0, v4081:0, v4082:0, v4091:0, v4094:0, v4095:0, v4103:0) -> f_915(v4074:0, v4081:0, v4082:0, 1 + v4091:0, v4094:0, v4095:0, v4103:0) :|: v4095:0 > 2 && v4091:0 > 0 && v4095:0 > v4091:0
f_1060(v6635:0, v6642:0, v6643:0, v6645:0, v6665:0, v6654:0, v6655:0) -> f_915(v6635:0, v6642:0, v6643:0, 1 + v6635:0, v6654:0, v6655:0, v6645:0) :|: v6665:0 > v6645:0 && v6635:0 > 0
f_1060(v6635:0, v6642:0, v6643:0, v6645:0, v6665:0, v6654:0, v6655:0) -> f_915(v6635:0, v6642:0, v6643:0, 1 + v6635:0, v6654:0, v6655:0, v6645:0) :|: v6665:0 < v6645:0 && v6635:0 > 0
f_1060(v6635:0, v6642:0, v6643:0, v6643:01, v6643:02, v6654:0, v6655:0) -> f_1060(v6635:0, 1 + v6642:0, v7245:0, v6643:0, v6665:1, v6654:0, v6655:0) :|: v6654:0 > 1 + v6642:0 && v6642:0 > 1 && v7245:0 < 0 && v6654:0 > 3 && v6643:0 = v6643:01 && v6643:0 = v6643:02
f_1060(v6635:0, v6642:0, v6643:0, v6643:01, v6643:02, v6654:0, v6655:0) -> f_1060(v6635:0, 1 + v6642:0, v7245:0, v6643:0, v6665:1, v6654:0, v6655:0) :|: v6654:0 > 1 + v6642:0 && v6642:0 > 1 && v7245:0 > 0 && v6654:0 > 3 && v6643:0 = v6643:01 && v6643:0 = v6643:02
f_915(v4074:0, v4081:0, v4082:0, v4091:0, v4094:0, v4095:0, v4103:0) -> f_1060(v4074:0, 1 + v4081:0, v7245:0, v4103:0, v6665:0, v4094:0, v4095:0) :|: v4082:0 < 0 && v4095:0 > v4091:0 && v4095:0 > 2 && v4081:0 > 1 && v4094:0 > 1 + v4081:0 && v7245:0 < 0 && v4094:0 > 3
f_915(v4074:0, v4081:0, v4082:0, v4091:0, v4094:0, v4095:0, v4103:0) -> f_1060(v4074:0, 1 + v4081:0, v7245:0, v4103:0, v6665:0, v4094:0, v4095:0) :|: v4082:0 < 0 && v4095:0 > v4091:0 && v4095:0 > 2 && v4081:0 > 1 && v4094:0 > 1 + v4081:0 && v7245:0 > 0 && v4094:0 > 3
f_915(v4074:0, v4081:0, v4082:0, v4091:0, v4094:0, v4095:0, v4103:0) -> f_1060(v4074:0, 1 + v4081:0, v7245:0, v4103:0, v6665:0, v4094:0, v4095:0) :|: v4082:0 > 0 && v4095:0 > v4091:0 && v4095:0 > 2 && v4081:0 > 1 && v4094:0 > 1 + v4081:0 && v7245:0 < 0 && v4094:0 > 3
f_915(v4074:0, v4081:0, v4082:0, v4091:0, v4094:0, v4095:0, v4103:0) -> f_1060(v4074:0, 1 + v4081:0, v7245:0, v4103:0, v6665:0, v4094:0, v4095:0) :|: v4082:0 > 0 && v4095:0 > v4091:0 && v4095:0 > 2 && v4081:0 > 1 && v4094:0 > 1 + v4081:0 && v7245:0 > 0 && v4094:0 > 3

----------------------------------------

(9)
Obligation:
Rules:
f_915(v4074:0, v4081:0, v4082:0, v4091:0, v4094:0, v4095:0, v4103:0) -> f_915(v4074:0, v4081:0, v4082:0, 1 + v4091:0, v4094:0, v4095:0, v4103:0) :|: v4095:0 > 2 && v4091:0 > 0 && v4095:0 > v4091:0
f_1060(v6635:0, v6642:0, v6643:0, v6645:0, v6665:0, v6654:0, v6655:0) -> f_915(v6635:0, v6642:0, v6643:0, 1 + v6635:0, v6654:0, v6655:0, v6645:0) :|: v6665:0 > v6645:0 && v6635:0 > 0
f_1060(x, x1, x2, x3, x4, x5, x6) -> f_915(x, x1, x2, 1 + x, x5, x6, x3) :|: x4 < x3 && x > 0
f_1060(x7, x8, x9, x10, x11, x12, x13) -> f_1060(x7, 1 + x8, x14, x9, x15, x12, x13) :|: x12 > 1 + x8 && x8 > 1 && x14 < 0 && x12 > 3 && x9 = x10 && x9 = x11
f_1060(x16, x17, x18, x19, x20, x21, x22) -> f_1060(x16, 1 + x17, x23, x18, x24, x21, x22) :|: x21 > 1 + x17 && x17 > 1 && x23 > 0 && x21 > 3 && x18 = x19 && x18 = x20
f_915(x25, x26, x27, x28, x29, x30, x31) -> f_1060(x25, 1 + x26, x32, x31, x33, x29, x30) :|: x27 < 0 && x30 > x28 && x30 > 2 && x26 > 1 && x29 > 1 + x26 && x32 < 0 && x29 > 3
f_915(x34, x35, x36, x37, x38, x39, x40) -> f_1060(x34, 1 + x35, x41, x40, x42, x38, x39) :|: x36 < 0 && x39 > x37 && x39 > 2 && x35 > 1 && x38 > 1 + x35 && x41 > 0 && x38 > 3
f_915(x43, x44, x45, x46, x47, x48, x49) -> f_1060(x43, 1 + x44, x50, x49, x51, x47, x48) :|: x45 > 0 && x48 > x46 && x48 > 2 && x44 > 1 && x47 > 1 + x44 && x50 < 0 && x47 > 3
f_915(x52, x53, x54, x55, x56, x57, x58) -> f_1060(x52, 1 + x53, x59, x58, x60, x56, x57) :|: x54 > 0 && x57 > x55 && x57 > 2 && x53 > 1 && x56 > 1 + x53 && x59 > 0 && x56 > 3

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_1060(x7:0, x8:0, x10:0, x10:01, x10:02, x12:0, x13:0) -> f_1060(x7:0, 1 + x8:0, x14:0, x10:0, x15:0, x12:0, x13:0) :|: x14:0 < 0 && x12:0 > 3 && x8:0 > 1 && x12:0 > 1 + x8:0 && x10:0 = x10:01 && x10:0 = x10:02
f_915(x52:0, x53:0, x54:0, x55:0, x56:0, x57:0, x58:0) -> f_1060(x52:0, 1 + x53:0, x59:0, x58:0, x60:0, x56:0, x57:0) :|: x59:0 > 0 && x56:0 > 3 && x56:0 > 1 + x53:0 && x53:0 > 1 && x57:0 > 2 && x57:0 > x55:0 && x54:0 > 0
f_915(x34:0, x35:0, x36:0, x37:0, x38:0, x39:0, x40:0) -> f_1060(x34:0, 1 + x35:0, x41:0, x40:0, x42:0, x38:0, x39:0) :|: x41:0 > 0 && x38:0 > 3 && x38:0 > 1 + x35:0 && x35:0 > 1 && x39:0 > 2 && x39:0 > x37:0 && x36:0 < 0
f_1060(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_915(x:0, x1:0, x2:0, 1 + x:0, x5:0, x6:0, x3:0) :|: x4:0 < x3:0 && x:0 > 0
f_915(x43:0, x44:0, x45:0, x46:0, x47:0, x48:0, x49:0) -> f_1060(x43:0, 1 + x44:0, x50:0, x49:0, x51:0, x47:0, x48:0) :|: x50:0 < 0 && x47:0 > 3 && x47:0 > 1 + x44:0 && x44:0 > 1 && x48:0 > 2 && x48:0 > x46:0 && x45:0 > 0
f_915(x25:0, x26:0, x27:0, x28:0, x29:0, x30:0, x31:0) -> f_1060(x25:0, 1 + x26:0, x32:0, x31:0, x33:0, x29:0, x30:0) :|: x32:0 < 0 && x29:0 > 3 && x29:0 > 1 + x26:0 && x26:0 > 1 && x30:0 > 2 && x30:0 > x28:0 && x27:0 < 0
f_915(v4074:0:0, v4081:0:0, v4082:0:0, v4091:0:0, v4094:0:0, v4095:0:0, v4103:0:0) -> f_915(v4074:0:0, v4081:0:0, v4082:0:0, 1 + v4091:0:0, v4094:0:0, v4095:0:0, v4103:0:0) :|: v4095:0:0 > 2 && v4091:0:0 > 0 && v4095:0:0 > v4091:0:0
f_1060(x16:0, x17:0, x18:0, x18:01, x18:02, x21:0, x22:0) -> f_1060(x16:0, 1 + x17:0, x23:0, x18:0, x24:0, x21:0, x22:0) :|: x23:0 > 0 && x21:0 > 3 && x17:0 > 1 && x21:0 > 1 + x17:0 && x18:0 = x18:01 && x18:0 = x18:02
f_1060(v6635:0:0, v6642:0:0, v6643:0:0, v6645:0:0, v6665:0:0, v6654:0:0, v6655:0:0) -> f_915(v6635:0:0, v6642:0:0, v6643:0:0, 1 + v6635:0:0, v6654:0:0, v6655:0:0, v6645:0:0) :|: v6665:0:0 > v6645:0:0 && v6635:0:0 > 0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1060(x, x1, x2, x3, x4, x5, x6)] = -1 - x1 + x5
[f_915(x7, x8, x9, x10, x11, x12, x13)] = -2 + x11 - x8

The following rules are decreasing:
f_1060(x7:0, x8:0, x10:0, x10:01, x10:02, x12:0, x13:0) -> f_1060(x7:0, 1 + x8:0, x14:0, x10:0, x15:0, x12:0, x13:0) :|: x14:0 < 0 && x12:0 > 3 && x8:0 > 1 && x12:0 > 1 + x8:0 && x10:0 = x10:01 && x10:0 = x10:02
f_1060(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_915(x:0, x1:0, x2:0, 1 + x:0, x5:0, x6:0, x3:0) :|: x4:0 < x3:0 && x:0 > 0
f_1060(x16:0, x17:0, x18:0, x18:01, x18:02, x21:0, x22:0) -> f_1060(x16:0, 1 + x17:0, x23:0, x18:0, x24:0, x21:0, x22:0) :|: x23:0 > 0 && x21:0 > 3 && x17:0 > 1 && x21:0 > 1 + x17:0 && x18:0 = x18:01 && x18:0 = x18:02
f_1060(v6635:0:0, v6642:0:0, v6643:0:0, v6645:0:0, v6665:0:0, v6654:0:0, v6655:0:0) -> f_915(v6635:0:0, v6642:0:0, v6643:0:0, 1 + v6635:0:0, v6654:0:0, v6655:0:0, v6645:0:0) :|: v6665:0:0 > v6645:0:0 && v6635:0:0 > 0
The following rules are bounded:
f_1060(x7:0, x8:0, x10:0, x10:01, x10:02, x12:0, x13:0) -> f_1060(x7:0, 1 + x8:0, x14:0, x10:0, x15:0, x12:0, x13:0) :|: x14:0 < 0 && x12:0 > 3 && x8:0 > 1 && x12:0 > 1 + x8:0 && x10:0 = x10:01 && x10:0 = x10:02
f_915(x52:0, x53:0, x54:0, x55:0, x56:0, x57:0, x58:0) -> f_1060(x52:0, 1 + x53:0, x59:0, x58:0, x60:0, x56:0, x57:0) :|: x59:0 > 0 && x56:0 > 3 && x56:0 > 1 + x53:0 && x53:0 > 1 && x57:0 > 2 && x57:0 > x55:0 && x54:0 > 0
f_915(x34:0, x35:0, x36:0, x37:0, x38:0, x39:0, x40:0) -> f_1060(x34:0, 1 + x35:0, x41:0, x40:0, x42:0, x38:0, x39:0) :|: x41:0 > 0 && x38:0 > 3 && x38:0 > 1 + x35:0 && x35:0 > 1 && x39:0 > 2 && x39:0 > x37:0 && x36:0 < 0
f_915(x43:0, x44:0, x45:0, x46:0, x47:0, x48:0, x49:0) -> f_1060(x43:0, 1 + x44:0, x50:0, x49:0, x51:0, x47:0, x48:0) :|: x50:0 < 0 && x47:0 > 3 && x47:0 > 1 + x44:0 && x44:0 > 1 && x48:0 > 2 && x48:0 > x46:0 && x45:0 > 0
f_915(x25:0, x26:0, x27:0, x28:0, x29:0, x30:0, x31:0) -> f_1060(x25:0, 1 + x26:0, x32:0, x31:0, x33:0, x29:0, x30:0) :|: x32:0 < 0 && x29:0 > 3 && x29:0 > 1 + x26:0 && x26:0 > 1 && x30:0 > 2 && x30:0 > x28:0 && x27:0 < 0
f_1060(x16:0, x17:0, x18:0, x18:01, x18:02, x21:0, x22:0) -> f_1060(x16:0, 1 + x17:0, x23:0, x18:0, x24:0, x21:0, x22:0) :|: x23:0 > 0 && x21:0 > 3 && x17:0 > 1 && x21:0 > 1 + x17:0 && x18:0 = x18:01 && x18:0 = x18:02

----------------------------------------

(13)
Complex Obligation (AND)

----------------------------------------

(14)
Obligation:
Rules:
f_915(x52:0, x53:0, x54:0, x55:0, x56:0, x57:0, x58:0) -> f_1060(x52:0, 1 + x53:0, x59:0, x58:0, x60:0, x56:0, x57:0) :|: x59:0 > 0 && x56:0 > 3 && x56:0 > 1 + x53:0 && x53:0 > 1 && x57:0 > 2 && x57:0 > x55:0 && x54:0 > 0
f_915(x34:0, x35:0, x36:0, x37:0, x38:0, x39:0, x40:0) -> f_1060(x34:0, 1 + x35:0, x41:0, x40:0, x42:0, x38:0, x39:0) :|: x41:0 > 0 && x38:0 > 3 && x38:0 > 1 + x35:0 && x35:0 > 1 && x39:0 > 2 && x39:0 > x37:0 && x36:0 < 0
f_915(x43:0, x44:0, x45:0, x46:0, x47:0, x48:0, x49:0) -> f_1060(x43:0, 1 + x44:0, x50:0, x49:0, x51:0, x47:0, x48:0) :|: x50:0 < 0 && x47:0 > 3 && x47:0 > 1 + x44:0 && x44:0 > 1 && x48:0 > 2 && x48:0 > x46:0 && x45:0 > 0
f_915(x25:0, x26:0, x27:0, x28:0, x29:0, x30:0, x31:0) -> f_1060(x25:0, 1 + x26:0, x32:0, x31:0, x33:0, x29:0, x30:0) :|: x32:0 < 0 && x29:0 > 3 && x29:0 > 1 + x26:0 && x26:0 > 1 && x30:0 > 2 && x30:0 > x28:0 && x27:0 < 0
f_915(v4074:0:0, v4081:0:0, v4082:0:0, v4091:0:0, v4094:0:0, v4095:0:0, v4103:0:0) -> f_915(v4074:0:0, v4081:0:0, v4082:0:0, 1 + v4091:0:0, v4094:0:0, v4095:0:0, v4103:0:0) :|: v4095:0:0 > 2 && v4091:0:0 > 0 && v4095:0:0 > v4091:0:0

----------------------------------------

(15) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(16)
Obligation:
Rules:
f_915(v4074:0:0, v4081:0:0, v4082:0:0, v4091:0:0, v4094:0:0, v4095:0:0, v4103:0:0) -> f_915(v4074:0:0, v4081:0:0, v4082:0:0, 1 + v4091:0:0, v4094:0:0, v4095:0:0, v4103:0:0) :|: v4095:0:0 > 2 && v4091:0:0 > 0 && v4095:0:0 > v4091:0:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_915(v4074:0:0:0, v4081:0:0:0, v4082:0:0:0, v4091:0:0:0, v4094:0:0:0, v4095:0:0:0, v4103:0:0:0) -> f_915(v4074:0:0:0, v4081:0:0:0, v4082:0:0:0, 1 + v4091:0:0:0, v4094:0:0:0, v4095:0:0:0, v4103:0:0:0) :|: v4095:0:0:0 > 2 && v4091:0:0:0 > 0 && v4095:0:0:0 > v4091:0:0:0

----------------------------------------

(19) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_915(x1, x2, x3, x4, x5, x6, x7) -> f_915(x4, x6)

----------------------------------------

(20)
Obligation:
Rules:
f_915(v4091:0:0:0, v4095:0:0:0) -> f_915(1 + v4091:0:0:0, v4095:0:0:0) :|: v4095:0:0:0 > 2 && v4091:0:0:0 > 0 && v4095:0:0:0 > v4091:0:0:0

----------------------------------------

(21) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_915(x, x1)] = -x + x1

The following rules are decreasing:
f_915(v4091:0:0:0, v4095:0:0:0) -> f_915(1 + v4091:0:0:0, v4095:0:0:0) :|: v4095:0:0:0 > 2 && v4091:0:0:0 > 0 && v4095:0:0:0 > v4091:0:0:0
The following rules are bounded:
f_915(v4091:0:0:0, v4095:0:0:0) -> f_915(1 + v4091:0:0:0, v4095:0:0:0) :|: v4095:0:0:0 > 2 && v4091:0:0:0 > 0 && v4095:0:0:0 > v4091:0:0:0

----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Rules:
f_1060(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_915(x:0, x1:0, x2:0, 1 + x:0, x5:0, x6:0, x3:0) :|: x4:0 < x3:0 && x:0 > 0
f_915(v4074:0:0, v4081:0:0, v4082:0:0, v4091:0:0, v4094:0:0, v4095:0:0, v4103:0:0) -> f_915(v4074:0:0, v4081:0:0, v4082:0:0, 1 + v4091:0:0, v4094:0:0, v4095:0:0, v4103:0:0) :|: v4095:0:0 > 2 && v4091:0:0 > 0 && v4095:0:0 > v4091:0:0
f_1060(v6635:0:0, v6642:0:0, v6643:0:0, v6645:0:0, v6665:0:0, v6654:0:0, v6655:0:0) -> f_915(v6635:0:0, v6642:0:0, v6643:0:0, 1 + v6635:0:0, v6654:0:0, v6655:0:0, v6645:0:0) :|: v6665:0:0 > v6645:0:0 && v6635:0:0 > 0

----------------------------------------

(24) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(25)
Obligation:
Rules:
f_915(v4074:0:0, v4081:0:0, v4082:0:0, v4091:0:0, v4094:0:0, v4095:0:0, v4103:0:0) -> f_915(v4074:0:0, v4081:0:0, v4082:0:0, 1 + v4091:0:0, v4094:0:0, v4095:0:0, v4103:0:0) :|: v4095:0:0 > 2 && v4091:0:0 > 0 && v4095:0:0 > v4091:0:0

----------------------------------------

(26) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(27)
Obligation:
Rules:
f_915(v4074:0:0:0, v4081:0:0:0, v4082:0:0:0, v4091:0:0:0, v4094:0:0:0, v4095:0:0:0, v4103:0:0:0) -> f_915(v4074:0:0:0, v4081:0:0:0, v4082:0:0:0, 1 + v4091:0:0:0, v4094:0:0:0, v4095:0:0:0, v4103:0:0:0) :|: v4095:0:0:0 > 2 && v4091:0:0:0 > 0 && v4095:0:0:0 > v4091:0:0:0

----------------------------------------

(28) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_915(x1, x2, x3, x4, x5, x6, x7) -> f_915(x4, x6)

----------------------------------------

(29)
Obligation:
Rules:
f_915(v4091:0:0:0, v4095:0:0:0) -> f_915(1 + v4091:0:0:0, v4095:0:0:0) :|: v4095:0:0:0 > 2 && v4091:0:0:0 > 0 && v4095:0:0:0 > v4091:0:0:0

----------------------------------------

(30) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_915(x, x1)] = -1 - x + x1

The following rules are decreasing:
f_915(v4091:0:0:0, v4095:0:0:0) -> f_915(1 + v4091:0:0:0, v4095:0:0:0) :|: v4095:0:0:0 > 2 && v4091:0:0:0 > 0 && v4095:0:0:0 > v4091:0:0:0
The following rules are bounded:
f_915(v4091:0:0:0, v4095:0:0:0) -> f_915(1 + v4091:0:0:0, v4095:0:0:0) :|: v4095:0:0:0 > 2 && v4091:0:0:0 > 0 && v4095:0:0:0 > v4091:0:0:0

----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
SCC
----------------------------------------

(33) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 41 rulesP rules:
f_720(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1952, 1, v1951, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_722(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, v1952, 1, v1951, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: TRUE
f_722(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, v1952, 1, v1951, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_724(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1951, v1952, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_724(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1951, v1952, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_726(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1951, v1952, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: v1977 != 0 && v1955 < v1958 && 3 <= v1958
f_726(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1951, v1952, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_730(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1951, v1952, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_730(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1951, v1952, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_734(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1951, v1952, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: TRUE
f_734(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1951, v1952, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_738(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1951, v1952, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_738(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1951, v1952, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_742(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1951, v1952, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: TRUE
f_742(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1951, v1952, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_746(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_746(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_750(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_750(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_754(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_754(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_757(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: TRUE
f_757(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_761(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: TRUE
f_761(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_765(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_765(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_769(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_769(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_774(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_774(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_779(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_779(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_784(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: TRUE
f_784(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_789(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_789(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_795(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_795(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_797(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_797(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_799(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_799(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_801(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: TRUE
f_801(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_804(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_804(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v1952, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_808(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: v1952 = v2700
f_808(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_812(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_812(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_816(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_816(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_820(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: TRUE
f_820(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_824(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_824(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_828(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_828(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_831(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_831(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_834(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_834(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, v2700, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_838(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: v2700 = v1977
f_838(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_842(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
f_842(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_846(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: TRUE
f_846(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_851(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: TRUE
f_851(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v1951, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_856(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, v1951, 3, 7, 2, 4, 8) :|: 0 = 0
f_856(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, v1951, 3, 7, 2, 4, 8) -> f_861(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v3249, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, v1951, 3, 7, 2, 4, 8) :|: v3249 = 1 + v1955 && 3 <= v3249
f_861(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v3249, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, v1951, 3, 7, 2, 4, 8) -> f_866(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v3249, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, v1951, 3, 7, 2, 4, 8) :|: TRUE
f_866(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v3249, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, v1951, 3, 7, 2, 4, 8) -> f_871(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v3249, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, v1951, 3, 7, 2, 4, 8) :|: TRUE
f_871(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v3249, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, v1951, 3, 7, 2, 4, 8) -> f_718(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1977, 1, 0, v3249, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: TRUE
f_718(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1951, v1952, 1, 0, v1955, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) -> f_720(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1955, v1952, 1, v1951, 0, v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_720(v1943:0, v1944:0, v1945:0, v1946:0, v1947:0, v1948:0, v1949:0, v1950:0, v1955:0, v1952:0, 1, v1951:0, 0, v1956:0, v1957:0, v1958:0, v1959:0, v1960:0, v1961:0, v1962:0, v1963:0, v1964:0, v1965:0, 3, 7, 2, 4, 8) -> f_720(v1943:0, v1944:0, v1945:0, v1946:0, v1947:0, v1948:0, v1949:0, v1950:0, 1 + v1955:0, v1952:0, 1, v1955:0, 0, v1956:0, v1957:0, v1958:0, v1959:0, v1960:0, v1961:0, v1962:0, v1963:0, v1964:0, v1965:0, 3, 7, 2, 4, 8) :|: v1958:0 > v1955:0 && v1952:0 < 0 && v1955:0 > 1 && v1958:0 > 2
f_720(v1943:0, v1944:0, v1945:0, v1946:0, v1947:0, v1948:0, v1949:0, v1950:0, v1955:0, v1952:0, 1, v1951:0, 0, v1956:0, v1957:0, v1958:0, v1959:0, v1960:0, v1961:0, v1962:0, v1963:0, v1964:0, v1965:0, 3, 7, 2, 4, 8) -> f_720(v1943:0, v1944:0, v1945:0, v1946:0, v1947:0, v1948:0, v1949:0, v1950:0, 1 + v1955:0, v1952:0, 1, v1955:0, 0, v1956:0, v1957:0, v1958:0, v1959:0, v1960:0, v1961:0, v1962:0, v1963:0, v1964:0, v1965:0, 3, 7, 2, 4, 8) :|: v1958:0 > v1955:0 && v1952:0 > 0 && v1955:0 > 1 && v1958:0 > 2
Filtered unneeded arguments:
   f_720(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_720(x9, x10, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_720(v1955:0, v1952:0, v1958:0) -> f_720(1 + v1955:0, v1952:0, v1958:0) :|: v1952:0 < 0 && v1958:0 > v1955:0 && v1958:0 > 2 && v1955:0 > 1
f_720(v1955:0, v1952:0, v1958:0) -> f_720(1 + v1955:0, v1952:0, v1958:0) :|: v1952:0 > 0 && v1958:0 > v1955:0 && v1958:0 > 2 && v1955:0 > 1

----------------------------------------

(34)
Obligation:
Rules:
f_720(v1955:0, v1952:0, v1958:0) -> f_720(1 + v1955:0, v1952:0, v1958:0) :|: v1952:0 < 0 && v1958:0 > v1955:0 && v1958:0 > 2 && v1955:0 > 1
f_720(x, x1, x2) -> f_720(1 + x, x1, x2) :|: x1 > 0 && x2 > x && x2 > 2 && x > 1

----------------------------------------

(35) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(36)
Obligation:
Rules:
f_720(x:0, x1:0, x2:0) -> f_720(1 + x:0, x1:0, x2:0) :|: x2:0 > 2 && x:0 > 1 && x:0 < x2:0 && x1:0 > 0
f_720(v1955:0:0, v1952:0:0, v1958:0:0) -> f_720(1 + v1955:0:0, v1952:0:0, v1958:0:0) :|: v1958:0:0 > 2 && v1955:0:0 > 1 && v1958:0:0 > v1955:0:0 && v1952:0:0 < 0

----------------------------------------

(37) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_720(x, x1, x2)] = -x + x2

The following rules are decreasing:
f_720(x:0, x1:0, x2:0) -> f_720(1 + x:0, x1:0, x2:0) :|: x2:0 > 2 && x:0 > 1 && x:0 < x2:0 && x1:0 > 0
f_720(v1955:0:0, v1952:0:0, v1958:0:0) -> f_720(1 + v1955:0:0, v1952:0:0, v1958:0:0) :|: v1958:0:0 > 2 && v1955:0:0 > 1 && v1958:0:0 > v1955:0:0 && v1952:0:0 < 0
The following rules are bounded:
f_720(x:0, x1:0, x2:0) -> f_720(1 + x:0, x1:0, x2:0) :|: x2:0 > 2 && x:0 > 1 && x:0 < x2:0 && x1:0 > 0
f_720(v1955:0:0, v1952:0:0, v1958:0:0) -> f_720(1 + v1955:0:0, v1952:0:0, v1958:0:0) :|: v1958:0:0 > 2 && v1955:0:0 > 1 && v1958:0:0 > v1955:0:0 && v1952:0:0 < 0

----------------------------------------

(38)
YES

----------------------------------------

(39)
Obligation:
SCC
----------------------------------------

(40) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_526(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v708, v707, v709, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) -> f_530(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v708, v707, v709, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) :|: TRUE
f_530(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v708, v707, v709, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) -> f_534(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v707, v708, v709, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_534(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v707, v708, v709, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) -> f_538(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v707, v708, v709, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) :|: v764 != 0 && v710 < v714 && 3 <= v714
f_538(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v707, v708, v709, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) -> f_544(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v707, v708, v709, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_544(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v707, v708, v709, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) -> f_550(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v707, v708, v709, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) :|: TRUE
f_550(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v707, v708, v709, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) -> f_556(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v708, v709, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_556(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v708, v709, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) -> f_562(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v708, v709, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_562(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v708, v709, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) -> f_569(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v709, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_569(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v709, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) -> f_572(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v709, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_572(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v709, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) -> f_575(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v709, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) :|: TRUE
f_575(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v709, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) -> f_578(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_578(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) -> f_582(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) :|: v764 != v1039
f_582(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) -> f_587(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_587(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) -> f_592(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_592(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) -> f_597(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) :|: TRUE
f_597(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v707, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v708, 0, 3, 7, 2, 4, 8) -> f_602(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v707, v708, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_602(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v707, v708, 0, 3, 7, 2, 4, 8) -> f_607(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v1203, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v707, v708, 0, 3, 7, 2, 4, 8) :|: v1203 = 1 + v710 && 3 <= v1203
f_607(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v1203, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v707, v708, 0, 3, 7, 2, 4, 8) -> f_612(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v1203, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v707, v708, 0, 3, 7, 2, 4, 8) :|: TRUE
f_612(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v1203, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v707, v708, 0, 3, 7, 2, 4, 8) -> f_615(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v1203, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v707, v708, 0, 3, 7, 2, 4, 8) :|: TRUE
f_615(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v1203, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v707, v708, 0, 3, 7, 2, 4, 8) -> f_523(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v764, v1039, v1203, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) :|: TRUE
f_523(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v707, v708, v709, v710, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) -> f_526(v697, v698, v699, v700, v701, v702, v703, v704, v705, 1, v710, v708, v707, v709, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 4 rulesP rules:
f_526(v697:0, v698:0, v699:0, v700:0, v701:0, v702:0, v703:0, v704:0, v705:0, 1, v710:0, v708:0, v707:0, v709:0, v711:0, v712:0, v713:0, v714:0, v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, v721:0, 0, 3, 7, 2, 4, 8) -> f_526(v697:0, v698:0, v699:0, v700:0, v701:0, v702:0, v703:0, v704:0, v705:0, 1, 1 + v710:0, v764:0, v710:0, v1039:0, v711:0, v712:0, v713:0, v714:0, v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, v721:0, 0, 3, 7, 2, 4, 8) :|: v714:0 > v710:0 && v764:0 < 0 && v714:0 > 2 && v710:0 > 1 && v764:0 < v1039:0
f_526(v697:0, v698:0, v699:0, v700:0, v701:0, v702:0, v703:0, v704:0, v705:0, 1, v710:0, v708:0, v707:0, v709:0, v711:0, v712:0, v713:0, v714:0, v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, v721:0, 0, 3, 7, 2, 4, 8) -> f_526(v697:0, v698:0, v699:0, v700:0, v701:0, v702:0, v703:0, v704:0, v705:0, 1, 1 + v710:0, v764:0, v710:0, v1039:0, v711:0, v712:0, v713:0, v714:0, v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, v721:0, 0, 3, 7, 2, 4, 8) :|: v714:0 > v710:0 && v764:0 < 0 && v714:0 > 2 && v710:0 > 1 && v764:0 > v1039:0
f_526(v697:0, v698:0, v699:0, v700:0, v701:0, v702:0, v703:0, v704:0, v705:0, 1, v710:0, v708:0, v707:0, v709:0, v711:0, v712:0, v713:0, v714:0, v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, v721:0, 0, 3, 7, 2, 4, 8) -> f_526(v697:0, v698:0, v699:0, v700:0, v701:0, v702:0, v703:0, v704:0, v705:0, 1, 1 + v710:0, v764:0, v710:0, v1039:0, v711:0, v712:0, v713:0, v714:0, v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, v721:0, 0, 3, 7, 2, 4, 8) :|: v714:0 > v710:0 && v764:0 > 0 && v714:0 > 2 && v710:0 > 1 && v764:0 < v1039:0
f_526(v697:0, v698:0, v699:0, v700:0, v701:0, v702:0, v703:0, v704:0, v705:0, 1, v710:0, v708:0, v707:0, v709:0, v711:0, v712:0, v713:0, v714:0, v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, v721:0, 0, 3, 7, 2, 4, 8) -> f_526(v697:0, v698:0, v699:0, v700:0, v701:0, v702:0, v703:0, v704:0, v705:0, 1, 1 + v710:0, v764:0, v710:0, v1039:0, v711:0, v712:0, v713:0, v714:0, v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, v721:0, 0, 3, 7, 2, 4, 8) :|: v714:0 > v710:0 && v764:0 > 0 && v714:0 > 2 && v710:0 > 1 && v764:0 > v1039:0
Filtered unneeded arguments:
   f_526(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_526(x11, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_526(v710:0, v714:0) -> f_526(1 + v710:0, v714:0) :|: v714:0 > 2 && v710:0 > 1 && v714:0 > v710:0

----------------------------------------

(41)
Obligation:
Rules:
f_526(v710:0, v714:0) -> f_526(1 + v710:0, v714:0) :|: v714:0 > 2 && v710:0 > 1 && v714:0 > v710:0

----------------------------------------

(42) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(43)
Obligation:
Rules:
f_526(v710:0:0, v714:0:0) -> f_526(1 + v710:0:0, v714:0:0) :|: v714:0:0 > 2 && v710:0:0 > 1 && v714:0:0 > v710:0:0

----------------------------------------

(44) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_526(x, x1)] = -x + x1

The following rules are decreasing:
f_526(v710:0:0, v714:0:0) -> f_526(1 + v710:0:0, v714:0:0) :|: v714:0:0 > 2 && v710:0:0 > 1 && v714:0:0 > v710:0:0
The following rules are bounded:
f_526(v710:0:0, v714:0:0) -> f_526(1 + v710:0:0, v714:0:0) :|: v714:0:0 > 2 && v710:0:0 > 1 && v714:0:0 > v710:0:0

----------------------------------------

(45)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
