YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/23hxJ.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 227 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [SOUND, 52 ms]
(6) IntTRS
(7) IRSToKoat [EQUIVALENT, 0 ms]
(8) Koat Problem
(9) KoAT2 [EQUIVALENT, 11 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/23hxJ.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/23hxJ.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = icmp sle %6 0
		br %7, %8, %10
	8:
		%9 = load %5
		store %9, %3
		br %21
	10:
		br %11
	11:
		%12 = load %4
		%13 = load %5
		%14 = icmp sgt %12 %13
		br %14, %15, %19
	15:
		%16 = load %5
		%17 = load %4
		%18 = add i32 %16, %17
		store %18, %5
		br %11
	19:
		%20 = load %5
		store %20, %3
		br %21
	21:
		%22 = load %3
		ret %22

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 37
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 64 rulesP rules:
f_107 -> f_108(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_108(v1, v2, 3, 1, 4) -> f_109(v1, v2, 0, 3, 1, 4) :|: TRUE
f_109(v1, v2, 0, 3, 1, 4) -> f_110(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_110(v1, v3, v2, 0, 3, 1, 4) -> f_111(v1, v3, v4, v2, 0, 3, 1, 4) :|: TRUE
f_111(v1, v3, v4, v2, 0, 3, 1, 4) -> f_112(v3, v4, v1, v2, 0, 3, 1, 4) :|: 0 = 0
f_112(v3, v4, v1, v2, 0, 3, 1, 4) -> f_113(v3, v4, v5, v1, v2, v6, 0, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_113(v3, v4, v5, v1, v2, v6, 0, 3, 1, 4) -> f_114(v3, v4, v5, v7, v1, v2, v6, v8, 0, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_114(v3, v4, v5, v7, v1, v2, v6, v8, 0, 3, 1, 4) -> f_115(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: 1 <= v9 && v10 = 3 + v9 && 4 <= v10
f_115(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_116(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_116(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_117(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_117(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_118(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_118(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_119(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_119(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_120(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: 0 = 0
f_120(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_121(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: v3 <= 0
f_120(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_122(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) :|: 0 < v3
f_121(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_123(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_122(v3, v4, v5, v7, v9, v1, v2, v6, v8, v10, 0, 3, 1, 4) -> f_124(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_123(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) -> f_125(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) :|: TRUE
f_124(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_126(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: TRUE
f_125(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) -> f_127(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_126(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_128(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: TRUE
f_127(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) -> f_129(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) :|: TRUE
f_128(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_130(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_129(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) -> f_131(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) :|: TRUE
f_130(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_132(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_131(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) -> f_133(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) :|: 0 = 0
f_132(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_134(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: v4 < v3
f_132(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_135(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: v3 <= v4 && 1 <= v4
f_133(v3, v4, v5, v7, v9, 1, v1, v2, v6, v8, v10, 0, 3, 4) -> f_136(v1, v3, v4, v2, 0, 3, 1, 4) :|: 0 = 0
f_134(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_137(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) :|: 0 = 0
f_135(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_138(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_137(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) -> f_139(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) :|: TRUE
f_138(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_140(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: TRUE
f_139(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) -> f_141(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) :|: 0 = 0
f_140(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_142(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_141(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) -> f_143(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) :|: 0 = 0
f_142(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_144(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: TRUE
f_143(v3, v4, v5, v7, v9, 0, 1, v1, v2, v6, v8, v10, 3, 4) -> f_145(v3, v4, v5, v7, v9, 0, 1, v15, v1, v2, v6, v8, v10, 3, 4) :|: v15 = v4 + v3
f_144(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_146(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: TRUE
f_145(v3, v4, v5, v7, v9, 0, 1, v15, v1, v2, v6, v8, v10, 3, 4) -> f_147(v3, v4, v5, v7, v9, 0, 1, v15, v1, v2, v6, v8, v10, 3, 4) :|: TRUE
f_146(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_148(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_147(v3, v4, v5, v7, v9, 0, 1, v15, v1, v2, v6, v8, v10, 3, 4) -> f_149(v3, v4, v5, v7, v9, 0, 1, v15, v1, v2, v6, v8, v10, 3, 4) :|: TRUE
f_148(v3, v4, v5, v7, v9, 0, v1, v2, v6, v8, v10, 3, 1, 4) -> f_150(v1, v3, v4, v2, 0, 3, 1, 4) :|: 0 = 0
f_149(v3, v4, v5, v7, v9, 0, 1, v15, v1, v2, v6, v8, v10, 3, 4) -> f_168(v3, v4, v5, v7, v9, 0, v4, 1, v15, v1, v2, v6, v8, v10, 3, 4) :|: TRUE
f_168(v21, v22, v23, v24, v25, 0, v27, 1, v29, v30, v31, v32, v33, v34, 3, 4) -> f_186(v21, v22, v23, v24, v25, 0, v27, 1, v29, v30, v31, v32, v33, v34, 3, 4) :|: TRUE
f_186(v39, v40, v41, v42, v43, 0, v45, 1, v47, v48, v49, v50, v51, v52, 3, 4) -> f_187(v39, v40, v41, v42, v43, 0, v45, 1, v47, v48, v49, v50, v51, v52, 3, 4) :|: 0 = 0
f_187(v39, v40, v41, v42, v43, 0, v45, 1, v47, v48, v49, v50, v51, v52, 3, 4) -> f_188(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) :|: 0 = 0
f_188(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) -> f_189(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) :|: v47 < v39 && 1 + v45 <= 0
f_188(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) -> f_190(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) :|: v39 <= v47 && 0 <= v45 && 1 <= v47
f_189(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) -> f_191(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) :|: 0 = 0
f_190(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) -> f_192(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) :|: 0 = 0
f_191(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) -> f_193(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) :|: TRUE
f_192(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) -> f_194(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) :|: TRUE
f_193(v39, v40, v41, v42, v43, 0, v47, 1, v45, v48, v49, v50, v51, v52, 3, 4) -> f_195(v39, v40, v41, v42, v43, 0, v47, 1, v48, v49, v50, v51, v52, 3, 4) :|: 0 = 0
f_194(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) -> f_196(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) :|: 0 = 0
f_195(v39, v40, v41, v42, v43, 0, v47, 1, v48, v49, v50, v51, v52, 3, 4) -> f_197(v39, v40, v41, v42, v43, 0, v47, 1, v48, v49, v50, v51, v52, 3, 4) :|: 0 = 0
f_196(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) -> f_198(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) :|: TRUE
f_197(v39, v40, v41, v42, v43, 0, v47, 1, v48, v49, v50, v51, v52, 3, 4) -> f_199(v39, v40, v41, v42, v43, 0, v47, 1, v54, v48, v49, v50, v51, v52, 3, 4) :|: v54 = v47 + v39
f_198(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) -> f_200(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) :|: TRUE
f_199(v39, v40, v41, v42, v43, 0, v47, 1, v54, v48, v49, v50, v51, v52, 3, 4) -> f_201(v39, v40, v41, v42, v43, 0, v47, 1, v54, v48, v49, v50, v51, v52, 3, 4) :|: TRUE
f_200(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) -> f_202(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) :|: 0 = 0
f_201(v39, v40, v41, v42, v43, 0, v47, 1, v54, v48, v49, v50, v51, v52, 3, 4) -> f_203(v39, v40, v41, v42, v43, 0, v47, 1, v54, v48, v49, v50, v51, v52, 3, 4) :|: TRUE
f_202(v39, v40, v41, v42, v43, 0, v47, v45, v48, v49, v50, v51, v52, 3, 1, 4) -> f_204(v48, v39, v40, v47, v49, 0, 3, 1, 4) :|: 0 = 0
f_203(v39, v40, v41, v42, v43, 0, v47, 1, v54, v48, v49, v50, v51, v52, 3, 4) -> f_186(v39, v40, v41, v42, v43, 0, v47, 1, v54, v48, v49, v50, v51, v52, 3, 4) :|: TRUE
Combined rules. Obtained 5 rulesP rules:
f_107 -> f_150(v1:0, v3:0, v4:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v3:0 > 0 && v4:0 >= v3:0 && v4:0 > 0
f_188(v39:0, v40:0, v41:0, v42:0, v43:0, 0, v47:0, 1, v45:0, v48:0, v49:0, v50:0, v51:0, v52:0, 3, 4) -> f_188(v39:0, v40:0, v41:0, v42:0, v43:0, 0, v47:0 + v39:0, 1, v47:0, v48:0, v49:0, v50:0, v51:0, v52:0, 3, 4) :|: v47:0 < v39:0 && v45:0 < 0
f_107 -> f_188(v3:0, v4:0, v5:0, v7:0, v9:0, 0, v4:0 + v3:0, 1, v4:0, v1:0, 3 + v1:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v4:0 < v3:0 && v3:0 > 0
f_188(v39:0, v40:0, v41:0, v42:0, v43:0, 0, v47:0, 1, v45:0, v48:0, v49:0, v50:0, v51:0, v52:0, 3, 4) -> f_204(v48:0, v39:0, v40:0, v47:0, v49:0, 0, 3, 1, 4) :|: v45:0 > -1 && v47:0 > 0 && v47:0 >= v39:0
f_107 -> f_136(v1:0, v3:0, v4:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v3:0 < 1
Filtered unneeded arguments:
   f_188(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_188(x1, x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_107 -> f_150(v1:0, v3:0, v4:0, 3 + v1:0, 0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v4:0 > 0 && v4:0 >= v3:0
f_188(v39:0, v47:0, v45:0) -> f_188(v39:0, v47:0 + v39:0, v47:0) :|: v47:0 < v39:0 && v45:0 < 0
f_107 -> f_188(v3:0, v4:0 + v3:0, v4:0) :|: v4:0 < v3:0 && v3:0 > 0
f_188(v39:0, v47:0, v45:0) -> f_204(v48:0, v39:0, v40:0, v47:0, v49:0, 0, 3, 1, 4) :|: v47:0 > 0 && v47:0 >= v39:0 && v45:0 > -1
f_107 -> f_136(v1:0, v3:0, v4:0, 3 + v1:0, 0, 3, 1, 4) :|: v1:0 > 0 && v3:0 < 1

----------------------------------------

(6)
Obligation:
Rules:
f_107 -> f_150(v1:0, v3:0, v4:0, 3 + v1:0, 0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v4:0 > 0 && v4:0 >= v3:0
f_188(v39:0, v47:0, v45:0) -> f_188(v39:0, v47:0 + v39:0, v47:0) :|: v47:0 < v39:0 && v45:0 < 0
f_107 -> f_188(x, x1 + x, x1) :|: x1 < x && x > 0
f_188(x2, x3, x4) -> f_204(x5, x2, x6, x3, x7, 0, 3, 1, 4) :|: x3 > 0 && x3 >= x2 && x4 > -1
f_107 -> f_136(x8, x9, x10, 3 + x8, 0, 3, 1, 4) :|: x8 > 0 && x9 < 1
Start term: f_107

----------------------------------------

(7) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(8)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_107))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x x40 x41 x39 x35 x36 x37 x38 x31 x32 x'' x33 x34 x30 k14 k15 k16 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x7 x27 x20 x21 x22 x23 x1 k7 k8 k5 k6 k9 x' k0 k3 k4 k1 k2 x17 x18 x19 x13 x14 x15 x16 x10 x11 x12 x50)
(RULES
  f_107(x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_136(k10, k11, k14, 3 + k10, 0, 3, 1, 4, x25) :|: k10 > 0 && k11 < 1
  f_188(k8, k9, k3, x10, x11, x12, x13, x14, x15) -> f_204(k6, k8, k12, k9, k13, 0, 3, 1, 4) :|: k9 > 0 && k9 >= k8 && k3 > -1
  f_107(x26, x27, x28, x29, x30, x31, x32, x33, x34) -> f_188(k15, k16 + k15, k16, x35, x36, x37, x38, x39, x40) :|: k16 < k15 && k15 > 0
  f_188(k5, k1, k0, x, x', x'', x1, x2, x3) -> f_188(k5, k1 + k5, k1, x4, x5, x6, x7, x8, x9) :|: k1 < k5 && k0 < 0
  f_107(x41, x42, x43, x44, x45, x46, x47, x48, x49) -> f_150(k2, k4, k7, 3 + k2, 0, 3, 1, 4, x50) :|: k4 > 0 && k2 > 0 && k7 > 0 && k7 >= k4
)

----------------------------------------

(9) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_6027214817675803576.koat 

KoAT2's output was:

YES

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
