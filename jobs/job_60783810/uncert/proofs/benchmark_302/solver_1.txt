YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/XlPnM.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 111 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/XlPnM.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/XlPnM.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		br %5
	5:
		%6 = load %2
		%7 = icmp sgt %6 0
		br %7, %8, %13
	8:
		%9 = load %2
		%10 = mul i32 2, %9
		%11 = load %3
		%12 = icmp sle %10 %11
		br %13
	13:
		%14 = phi [0, %5], [%12, %8]
		br %14, %15, %18
	15:
		%16 = load %2
		store %16, %3
		%17 = call i32 @__VERIFIER_nondet_int()
		store %17, %2
		br %5
	18:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_138(v98, v99, v100, v101, v106, 1, v102, v104, v105, v107, v108, v109, 0, 3, 2, 4) -> f_139(v98, v99, v100, v101, v106, 1, v102, v104, v105, v107, v108, v109, 0, 3, 2, 4) :|: 0 < v106
f_139(v98, v99, v100, v101, v106, 1, v102, v104, v105, v107, v108, v109, 0, 3, 2, 4) -> f_141(v98, v99, v100, v101, v106, 1, v102, v104, v105, v107, v108, v109, 0, 3, 2, 4) :|: 0 = 0
f_141(v98, v99, v100, v101, v106, 1, v102, v104, v105, v107, v108, v109, 0, 3, 2, 4) -> f_143(v98, v99, v100, v101, v106, 1, v102, v104, v105, v107, v108, v109, 0, 3, 2, 4) :|: TRUE
f_143(v98, v99, v100, v101, v106, 1, v102, v104, v105, v107, v108, v109, 0, 3, 2, 4) -> f_145(v98, v99, v100, v101, v106, 1, v104, v105, v102, v107, v108, v109, 0, 3, 2, 4) :|: 0 = 0
f_145(v98, v99, v100, v101, v106, 1, v104, v105, v102, v107, v108, v109, 0, 3, 2, 4) -> f_147(v98, v99, v100, v101, v106, 1, v123, v105, v102, v107, v108, v109, 0, 3, 2, 4) :|: v123 = 2 * v106 && 2 <= v123
f_147(v98, v99, v100, v101, v106, 1, v123, v105, v102, v107, v108, v109, 0, 3, 2, 4) -> f_148(v98, v99, v100, v101, v106, 1, v123, v102, v107, v108, v109, 0, 3, 2, 4) :|: 0 = 0
f_148(v98, v99, v100, v101, v106, 1, v123, v102, v107, v108, v109, 0, 3, 2, 4) -> f_149(v98, v99, v100, v101, v106, 1, v123, v102, v107, v108, v109, 0, 3, 2, 4) :|: v123 <= v102 && 2 <= v102
f_149(v98, v99, v100, v101, v106, 1, v123, v102, v107, v108, v109, 0, 3, 2, 4) -> f_151(v98, v99, v100, v101, v106, 1, v123, v102, v107, v108, v109, 0, 3, 2, 4) :|: 0 = 0
f_151(v98, v99, v100, v101, v106, 1, v123, v102, v107, v108, v109, 0, 3, 2, 4) -> f_153(v98, v99, v100, v101, v106, 1, v123, v102, v107, v108, v109, 0, 3, 2, 4) :|: 0 = 0
f_153(v98, v99, v100, v101, v106, 1, v123, v102, v107, v108, v109, 0, 3, 2, 4) -> f_155(v98, v99, v100, v101, v106, 1, v123, v102, v107, v108, v109, 0, 3, 2, 4) :|: TRUE
f_155(v98, v99, v100, v101, v106, 1, v123, v102, v107, v108, v109, 0, 3, 2, 4) -> f_157(v98, v99, v100, v101, v106, 1, v123, v102, v107, v108, v109, 0, 3, 2, 4) :|: 0 = 0
f_157(v98, v99, v100, v101, v106, 1, v123, v102, v107, v108, v109, 0, 3, 2, 4) -> f_158(v98, v99, v100, v101, v106, 1, v123, v102, v107, v108, v109, 0, 3, 2, 4) :|: TRUE
f_158(v98, v99, v100, v101, v106, 1, v123, v102, v107, v108, v109, 0, 3, 2, 4) -> f_159(v98, v99, v100, v101, v106, 1, v123, v102, v169, v107, v108, v109, 0, 3, 2, 4) :|: TRUE
f_159(v98, v99, v100, v101, v106, 1, v123, v102, v169, v107, v108, v109, 0, 3, 2, 4) -> f_160(v98, v99, v100, v101, v106, 1, v123, v102, v169, v107, v108, v109, 0, 3, 2, 4) :|: TRUE
f_160(v98, v99, v100, v101, v106, 1, v123, v102, v169, v107, v108, v109, 0, 3, 2, 4) -> f_161(v98, v99, v100, v101, v106, 1, v123, v102, v169, v107, v108, v109, 0, 3, 2, 4) :|: TRUE
f_161(v98, v99, v100, v101, v106, 1, v123, v102, v169, v107, v108, v109, 0, 3, 2, 4) -> f_137(v98, v99, v100, v101, v106, 1, v123, v102, v169, v107, v108, v109, 0, 3, 2, 4) :|: TRUE
f_137(v98, v99, v100, v101, v102, 1, v104, v105, v106, v107, v108, v109, 0, 3, 2, 4) -> f_138(v98, v99, v100, v101, v106, 1, v102, v104, v105, v107, v108, v109, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_138(v98:0, v99:0, v100:0, v101:0, v106:0, 1, v102:0, v104:0, v105:0, v107:0, v108:0, v109:0, 0, 3, 2, 4) -> f_138(v98:0, v99:0, v100:0, v101:0, v169:0, 1, v106:0, 2 * v106:0, v102:0, v107:0, v108:0, v109:0, 0, 3, 2, 4) :|: v106:0 > 0 && 2 * v106:0 > 1 && v102:0 >= 2 * v106:0 && v102:0 > 1
Filtered unneeded arguments:
   f_138(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_138(x5, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_138(v106:0, v102:0) -> f_138(v169:0, v106:0) :|: 2 * v106:0 > 1 && v106:0 > 0 && v102:0 > 1 && v102:0 >= 2 * v106:0

----------------------------------------

(8)
Obligation:
Rules:
f_138(v106:0, v102:0) -> f_138(v169:0, v106:0) :|: 2 * v106:0 > 1 && v106:0 > 0 && v102:0 > 1 && v102:0 >= 2 * v106:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_138(v106:0:0, v102:0:0) -> f_138(v169:0:0, v106:0:0) :|: v102:0:0 > 1 && v102:0:0 >= 2 * v106:0:0 && v106:0:0 > 0 && 2 * v106:0:0 > 1

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_138(x, x1)] = x1

The following rules are decreasing:
f_138(v106:0:0, v102:0:0) -> f_138(v169:0:0, v106:0:0) :|: v102:0:0 > 1 && v102:0:0 >= 2 * v106:0:0 && v106:0:0 > 0 && 2 * v106:0:0 > 1
The following rules are bounded:
f_138(v106:0:0, v102:0:0) -> f_138(v169:0:0, v106:0:0) :|: v102:0:0 > 1 && v102:0:0 >= 2 * v106:0:0 && v106:0:0 > 0 && 2 * v106:0:0 > 1

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
