YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/esFlQ.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 618 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 49 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 13 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (17) YES
    (18) LLVM Symbolic Execution SCC
        (19) SCC2IRS [SOUND, 4 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (24) YES
    (25) LLVM Symbolic Execution SCC
        (26) SCC2IRS [SOUND, 9 ms]
        (27) IntTRS
        (28) TerminationGraphProcessor [EQUIVALENT, 1 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/esFlQ.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/esFlQ.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		br %5
	5:
		%6 = load %2
		%7 = icmp sge %6 0
		br %7, %8, %19
	8:
		store 1, %3
		br %9
	9:
		%10 = load %2
		%11 = load %3
		%12 = icmp sgt %10 %11
		br %12, %13, %16
	13:
		%14 = load %3
		%15 = mul i32 2, %14
		store %15, %3
		br %9
	16:
		%17 = load %2
		%18 = sub i32 %17, 1
		store %18, %2
		br %5
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 35 rulesP rules:
f_320(v441, v442, v443, v444, v445, 1, v447, v449, v450, v451, v452, v453, 0, 3, 2, 4) -> f_321(v441, v442, v443, v444, v445, 1, v447, v455, v450, v451, v452, v453, 0, 3, 2, 4) :|: v455 = 2 * v447 && 2 <= v455
f_321(v441, v442, v443, v444, v445, 1, v447, v455, v450, v451, v452, v453, 0, 3, 2, 4) -> f_322(v441, v442, v443, v444, v445, 1, v447, v455, v450, v451, v452, v453, 0, 3, 2, 4) :|: TRUE
f_322(v441, v442, v443, v444, v445, 1, v447, v455, v450, v451, v452, v453, 0, 3, 2, 4) -> f_323(v441, v442, v443, v444, v445, 1, v447, v455, v450, v451, v452, v453, 0, 3, 2, 4) :|: TRUE
f_323(v441, v442, v443, v444, v445, 1, v447, v455, v450, v451, v452, v453, 0, 3, 2, 4) -> f_324(v441, v442, v443, v444, v445, 1, v447, v455, v450, v451, v452, v453, 0, 3, 2, 4) :|: 0 = 0
f_324(v441, v442, v443, v444, v445, 1, v447, v455, v450, v451, v452, v453, 0, 3, 2, 4) -> f_325(v441, v442, v443, v444, v445, 1, v455, v447, v450, v451, v452, v453, 0, 3, 2, 4) :|: 0 = 0
f_325(v441, v442, v443, v444, v445, 1, v455, v447, v450, v451, v452, v453, 0, 3, 2, 4) -> f_326(v441, v442, v443, v444, v445, 1, v455, v447, v450, v451, v452, v453, 0, 3, 2, 4) :|: v455 < v445 && 3 <= v445 && 4 <= v450 && 4 <= v444
f_325(v441, v442, v443, v444, v445, 1, v455, v447, v450, v451, v452, v453, 0, 3, 2, 4) -> f_327(v441, v442, v443, v444, v445, 1, v455, v447, v450, v451, v452, v453, 0, 3, 2, 4) :|: v445 <= v455
f_326(v441, v442, v443, v444, v445, 1, v455, v447, v450, v451, v452, v453, 0, 3, 2, 4) -> f_328(v441, v442, v443, v444, v445, 1, v455, v447, v450, v451, v452, v453, 0, 3, 2, 4) :|: 0 = 0
f_328(v441, v442, v443, v444, v445, 1, v455, v447, v450, v451, v452, v453, 0, 3, 2, 4) -> f_330(v441, v442, v443, v444, v445, 1, v455, v447, v450, v451, v452, v453, 0, 3, 2, 4) :|: TRUE
f_330(v441, v442, v443, v444, v445, 1, v455, v447, v450, v451, v452, v453, 0, 3, 2, 4) -> f_319(v441, v442, v443, v444, v445, 1, v455, v447, v455, v450, v451, v452, v453, 0, 3, 2, 4) :|: TRUE
f_319(v441, v442, v443, v444, v445, 1, v447, v448, v449, v450, v451, v452, v453, 0, 3, 2, 4) -> f_320(v441, v442, v443, v444, v445, 1, v447, v449, v450, v451, v452, v453, 0, 3, 2, 4) :|: 0 = 0
f_327(v441, v442, v443, v444, v445, 1, v455, v447, v450, v451, v452, v453, 0, 3, 2, 4) -> f_329(v441, v442, v443, v444, v445, 1, v455, 0, v447, v450, v451, v452, v453, 3, 2, 4) :|: 0 = 0
f_329(v441, v442, v443, v444, v445, 1, v455, 0, v447, v450, v451, v452, v453, 3, 2, 4) -> f_331(v441, v442, v443, v444, v445, 1, v455, 0, v447, v450, v451, v452, v453, 3, 2, 4) :|: TRUE
f_331(v441, v442, v443, v444, v445, 1, v455, 0, v447, v450, v451, v452, v453, 3, 2, 4) -> f_350(v441, v442, v443, v444, v445, 1, v455, 0, v447, v455, v450, v451, v452, v453, 3, 2, 4) :|: TRUE
f_350(v622, v623, v624, v625, v626, 1, v628, 0, v630, v631, v632, v633, v634, v635, 3, 2, 4) -> f_351(v622, v623, v624, v625, v626, 1, v628, 0, v630, v631, v633, v634, v635, 3, 2, 4) :|: 0 = 0
f_351(v622, v623, v624, v625, v626, 1, v628, 0, v630, v631, v633, v634, v635, 3, 2, 4) -> f_352(v622, v623, v624, v625, v626, 1, v628, 0, v630, v631, v636, v633, v634, v635, 3, 2, 4) :|: 1 + v636 = v626 && 0 <= 1 + v636
f_352(v622, v623, v624, v625, v626, 1, v628, 0, v630, v631, v636, v633, v634, v635, 3, 2, 4) -> f_353(v622, v623, v624, v625, v626, 1, v628, 0, v630, v631, v636, v633, v634, v635, 3, 2, 4) :|: TRUE
f_353(v622, v623, v624, v625, v626, 1, v628, 0, v630, v631, v636, v633, v634, v635, 3, 2, 4) -> f_354(v622, v623, v624, v625, v626, 1, v628, 0, v630, v631, v636, v633, v634, v635, 3, 2, 4) :|: TRUE
f_354(v622, v623, v624, v625, v626, 1, v628, 0, v630, v631, v636, v633, v634, v635, 3, 2, 4) -> f_355(v622, v623, v624, v625, v636, 1, v626, v628, 0, v630, v631, v633, v634, v635, 3, 2, 4) :|: 0 = 0
f_355(v622, v623, v624, v625, v636, 1, v626, v628, 0, v630, v631, v633, v634, v635, 3, 2, 4) -> f_356(v622, v623, v624, v625, v636, 1, v626, v628, 0, v630, v631, v633, v634, v635, 3, 2, 4) :|: 0 <= v636 && 1 <= v626
f_356(v622, v623, v624, v625, v636, 1, v626, v628, 0, v630, v631, v633, v634, v635, 3, 2, 4) -> f_358(v622, v623, v624, v625, v636, 1, v626, v628, 0, v630, v631, v633, v634, v635, 3, 2, 4) :|: 0 = 0
f_358(v622, v623, v624, v625, v636, 1, v626, v628, 0, v630, v631, v633, v634, v635, 3, 2, 4) -> f_360(v622, v623, v624, v625, v636, 1, v626, v628, 0, v630, v631, v633, v634, v635, 3, 2, 4) :|: TRUE
f_360(v622, v623, v624, v625, v636, 1, v626, v628, 0, v630, v631, v633, v634, v635, 3, 2, 4) -> f_362(v622, v623, v624, v625, v636, 1, v626, v628, 0, v630, v631, v633, v634, v635, 3, 2, 4) :|: TRUE
f_362(v622, v623, v624, v625, v636, 1, v626, v628, 0, v630, v631, v633, v634, v635, 3, 2, 4) -> f_363(v622, v623, v624, v625, v636, 1, v626, v628, 0, v630, v631, v633, v634, v635, 3, 2, 4) :|: TRUE
f_363(v622, v623, v624, v625, v636, 1, v626, v628, 0, v630, v631, v633, v634, v635, 3, 2, 4) -> f_341(v622, v623, v624, v625, v636, 1, v626, v628, 0, v630, v631, v633, v634, v635, 3, 2, 4) :|: TRUE
f_341(v560, v561, v562, v563, v564, 1, v566, v567, 0, v569, v570, v571, v572, v573, 3, 2, 4) -> f_342(v560, v561, v562, v563, v564, 1, v567, 0, v569, v570, v566, v571, v572, v573, 3, 2, 4) :|: 0 = 0
f_342(v560, v561, v562, v563, v564, 1, v567, 0, v569, v570, v566, v571, v572, v573, 3, 2, 4) -> f_343(v560, v561, v562, v563, v564, 1, 0, v569, v570, v566, v571, v572, v573, 3, 2, 4) :|: 0 = 0
f_343(v560, v561, v562, v563, v564, 1, 0, v569, v570, v566, v571, v572, v573, 3, 2, 4) -> f_344(v560, v561, v562, v563, v564, 1, 0, v569, v570, v566, v571, v572, v573, 3, 2, 4) :|: 1 < v564 && 3 <= v566 && 3 <= v563 && 4 <= v570 && 2 <= v569
f_343(v560, v561, v562, v563, v564, 1, 0, v569, v570, v566, v571, v572, v573, 3, 2, 4) -> f_345(v560, v561, v562, v563, v564, 1, 0, v569, v570, v566, v571, v572, v573, 3, 2, 4) :|: v564 <= 1 && v566 <= 2
f_344(v560, v561, v562, v563, v564, 1, 0, v569, v570, v566, v571, v572, v573, 3, 2, 4) -> f_346(v560, v561, v562, v563, v564, 1, v569, v570, v566, v571, v572, v573, 0, 3, 2, 4) :|: 0 = 0
f_346(v560, v561, v562, v563, v564, 1, v569, v570, v566, v571, v572, v573, 0, 3, 2, 4) -> f_348(v560, v561, v562, v563, v564, 1, v569, v570, v566, v571, v572, v573, 0, 3, 2, 4) :|: TRUE
f_348(v560, v561, v562, v563, v564, 1, v569, v570, v566, v571, v572, v573, 0, 3, 2, 4) -> f_319(v560, v561, v562, v563, v564, 1, 1, v569, v570, v566, v571, v572, v573, 0, 3, 2, 4) :|: TRUE
f_345(v560, v561, v562, v563, v564, 1, 0, v569, v570, v566, v571, v572, v573, 3, 2, 4) -> f_347(v560, v561, v562, v563, v564, 1, 0, v569, v570, v566, v571, v572, v573, 3, 2, 4) :|: 0 = 0
f_347(v560, v561, v562, v563, v564, 1, 0, v569, v570, v566, v571, v572, v573, 3, 2, 4) -> f_349(v560, v561, v562, v563, v564, 1, 0, v569, v570, v566, v571, v572, v573, 3, 2, 4) :|: TRUE
f_349(v560, v561, v562, v563, v564, 1, 0, v569, v570, v566, v571, v572, v573, 3, 2, 4) -> f_350(v560, v561, v562, v563, v564, 1, 1, 0, v569, v570, v566, v571, v572, v573, 3, 2, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_343(v560:0, v561:0, v562:0, v563:0, 1 + v636:0, 1, 0, v569:0, v570:0, v566:0, v571:0, v572:0, v573:0, 3, 2, 4) -> f_343(v560:0, v561:0, v562:0, v563:0, v636:0, 1, 0, v569:0, v570:0, 1 + v636:0, v571:0, v572:0, v573:0, 3, 2, 4) :|: v636:0 > -1 && v636:0 < 1 && v566:0 < 3
f_320(v441:0, v442:0, v443:0, v444:0, v445:0, 1, v447:0, v449:0, v450:0, v451:0, v452:0, v453:0, 0, 3, 2, 4) -> f_320(v441:0, v442:0, v443:0, v444:0, v445:0, 1, 2 * v447:0, 2 * v447:0, v450:0, v451:0, v452:0, v453:0, 0, 3, 2, 4) :|: 2 * v447:0 > 1 && v445:0 > 2 && v445:0 > 2 * v447:0 && v444:0 > 3 && v450:0 > 3
f_320(v441:0, v442:0, v443:0, v444:0, 1 + v636:0, 1, v447:0, v449:0, v450:0, v451:0, v452:0, v453:0, 0, 3, 2, 4) -> f_343(v441:0, v442:0, v443:0, v444:0, v636:0, 1, 0, v447:0, 2 * v447:0, 1 + v636:0, v451:0, v452:0, v453:0, 3, 2, 4) :|: v636:0 > -1 && 2 * v447:0 > 1 && 2 * v447:0 >= 1 + v636:0
f_343(v560:0, v561:0, v562:0, v563:0, v564:0, 1, 0, v569:0, v570:0, v566:0, v571:0, v572:0, v573:0, 3, 2, 4) -> f_320(v560:0, v561:0, v562:0, v563:0, v564:0, 1, 1, v570:0, v566:0, v571:0, v572:0, v573:0, 0, 3, 2, 4) :|: v566:0 > 2 && v564:0 > 1 && v563:0 > 2 && v569:0 > 1 && v570:0 > 3
Filtered unneeded arguments:
   f_343(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_343(x4, x5, x8, x9, x10)
   f_320(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_320(x4, x5, x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_343(v563:0, sum~cons_1~v636:0, v569:0, v570:0, v566:0) -> f_343(v563:0, v636:0, v569:0, v570:0, 1 + v636:0) :|: v636:0 < 1 && v566:0 < 3 && v636:0 > -1 && sum~cons_1~v636:0 = 1 + v636:0
f_320(v444:0, v445:0, v447:0, v450:0) -> f_320(v444:0, v445:0, 2 * v447:0, v450:0) :|: v445:0 > 2 && 2 * v447:0 > 1 && v445:0 > 2 * v447:0 && v450:0 > 3 && v444:0 > 3
f_320(v444:0, sum~cons_1~v636:0, v447:0, v450:0) -> f_343(v444:0, v636:0, v447:0, 2 * v447:0, 1 + v636:0) :|: 2 * v447:0 > 1 && 2 * v447:0 >= 1 + v636:0 && v636:0 > -1 && sum~cons_1~v636:0 = 1 + v636:0
f_343(v563:0, v564:0, v569:0, v570:0, v566:0) -> f_320(v563:0, v564:0, 1, v566:0) :|: v564:0 > 1 && v566:0 > 2 && v563:0 > 2 && v570:0 > 3 && v569:0 > 1

----------------------------------------

(9)
Obligation:
Rules:
f_343(v563:0, sum~cons_1~v636:0, v569:0, v570:0, v566:0) -> f_343(v563:0, v636:0, v569:0, v570:0, 1 + v636:0) :|: v636:0 < 1 && v566:0 < 3 && v636:0 > -1 && sum~cons_1~v636:0 = 1 + v636:0
f_320(v444:0, v445:0, v447:0, v450:0) -> f_320(v444:0, v445:0, 2 * v447:0, v450:0) :|: v445:0 > 2 && 2 * v447:0 > 1 && v445:0 > 2 * v447:0 && v450:0 > 3 && v444:0 > 3
f_320(x, x1, x2, x3) -> f_343(x, x4, x2, 2 * x2, 1 + x4) :|: 2 * x2 > 1 && 2 * x2 >= 1 + x4 && x4 > -1 && x1 = 1 + x4
f_343(x5, x6, x7, x8, x9) -> f_320(x5, x6, 1, x9) :|: x6 > 1 && x9 > 2 && x5 > 2 && x8 > 3 && x7 > 1

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_320(v444:0:0, v445:0:0, v447:0:0, v450:0:0) -> f_320(v444:0:0, v445:0:0, 2 * v447:0:0, v450:0:0) :|: v450:0:0 > 3 && v444:0:0 > 3 && v445:0:0 > 2 * v447:0:0 && 2 * v447:0:0 > 1 && v445:0:0 > 2
f_343(x5:0, x6:0, x7:0, x8:0, x9:0) -> f_320(x5:0, x6:0, 1, x9:0) :|: x8:0 > 3 && x7:0 > 1 && x5:0 > 2 && x9:0 > 2 && x6:0 > 1
f_320(x:0, sum~cons_1~x4:0, x2:0, x3:0) -> f_343(x:0, x4:0, x2:0, 2 * x2:0, 1 + x4:0) :|: 2 * x2:0 > 1 && 2 * x2:0 >= 1 + x4:0 && x4:0 > -1 && sum~cons_1~x4:0 = 1 + x4:0
f_343(v563:0:0, sum~cons_1~v636:0:0, v569:0:0, v570:0:0, v566:0:0) -> f_343(v563:0:0, v636:0:0, v569:0:0, v570:0:0, 1 + v636:0:0) :|: v636:0:0 < 1 && v566:0:0 < 3 && v636:0:0 > -1 && sum~cons_1~v636:0:0 = 1 + v636:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_320 ] = 2*f_320_2
[ f_343 ] = 2*f_343_2 + 1

The following rules are decreasing:
f_343(x5:0, x6:0, x7:0, x8:0, x9:0) -> f_320(x5:0, x6:0, 1, x9:0) :|: x8:0 > 3 && x7:0 > 1 && x5:0 > 2 && x9:0 > 2 && x6:0 > 1
f_320(x:0, sum~cons_1~x4:0, x2:0, x3:0) -> f_343(x:0, x4:0, x2:0, 2 * x2:0, 1 + x4:0) :|: 2 * x2:0 > 1 && 2 * x2:0 >= 1 + x4:0 && x4:0 > -1 && sum~cons_1~x4:0 = 1 + x4:0
f_343(v563:0:0, sum~cons_1~v636:0:0, v569:0:0, v570:0:0, v566:0:0) -> f_343(v563:0:0, v636:0:0, v569:0:0, v570:0:0, 1 + v636:0:0) :|: v636:0:0 < 1 && v566:0:0 < 3 && v636:0:0 > -1 && sum~cons_1~v636:0:0 = 1 + v636:0:0

The following rules are bounded:
f_320(v444:0:0, v445:0:0, v447:0:0, v450:0:0) -> f_320(v444:0:0, v445:0:0, 2 * v447:0:0, v450:0:0) :|: v450:0:0 > 3 && v444:0:0 > 3 && v445:0:0 > 2 * v447:0:0 && 2 * v447:0:0 > 1 && v445:0:0 > 2
f_343(x5:0, x6:0, x7:0, x8:0, x9:0) -> f_320(x5:0, x6:0, 1, x9:0) :|: x8:0 > 3 && x7:0 > 1 && x5:0 > 2 && x9:0 > 2 && x6:0 > 1
f_320(x:0, sum~cons_1~x4:0, x2:0, x3:0) -> f_343(x:0, x4:0, x2:0, 2 * x2:0, 1 + x4:0) :|: 2 * x2:0 > 1 && 2 * x2:0 >= 1 + x4:0 && x4:0 > -1 && sum~cons_1~x4:0 = 1 + x4:0
f_343(v563:0:0, sum~cons_1~v636:0:0, v569:0:0, v570:0:0, v566:0:0) -> f_343(v563:0:0, v636:0:0, v569:0:0, v570:0:0, 1 + v636:0:0) :|: v636:0:0 < 1 && v566:0:0 < 3 && v636:0:0 > -1 && sum~cons_1~v636:0:0 = 1 + v636:0:0


----------------------------------------

(13)
Obligation:
Rules:
f_320(v444:0:0, v445:0:0, v447:0:0, v450:0:0) -> f_320(v444:0:0, v445:0:0, 2 * v447:0:0, v450:0:0) :|: v450:0:0 > 3 && v444:0:0 > 3 && v445:0:0 > 2 * v447:0:0 && 2 * v447:0:0 > 1 && v445:0:0 > 2

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_320(v444:0:0:0, v445:0:0:0, v447:0:0:0, v450:0:0:0) -> f_320(v444:0:0:0, v445:0:0:0, 2 * v447:0:0:0, v450:0:0:0) :|: 2 * v447:0:0:0 > 1 && v445:0:0:0 > 2 && v445:0:0:0 > 2 * v447:0:0:0 && v444:0:0:0 > 3 && v450:0:0:0 > 3

----------------------------------------

(16) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_320(x, x1, x2, x3)] = 13 - 7*x1 + x1^2 - x2

The following rules are decreasing:
f_320(v444:0:0:0, v445:0:0:0, v447:0:0:0, v450:0:0:0) -> f_320(v444:0:0:0, v445:0:0:0, 2 * v447:0:0:0, v450:0:0:0) :|: 2 * v447:0:0:0 > 1 && v445:0:0:0 > 2 && v445:0:0:0 > 2 * v447:0:0:0 && v444:0:0:0 > 3 && v450:0:0:0 > 3
The following rules are bounded:
f_320(v444:0:0:0, v445:0:0:0, v447:0:0:0, v450:0:0:0) -> f_320(v444:0:0:0, v445:0:0:0, 2 * v447:0:0:0, v450:0:0:0) :|: 2 * v447:0:0:0 > 1 && v445:0:0:0 > 2 && v445:0:0:0 > 2 * v447:0:0:0 && v444:0:0:0 > 3 && v450:0:0:0 > 3

----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
SCC
----------------------------------------

(19) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_202(v69, v70, v71, v72, 1, v74, v75, v76, v77, v78, 0, 3, 2, 4) -> f_204(v69, v70, v71, v72, 1, v75, v74, v76, v77, v78, 0, 3, 2, 4) :|: 0 = 0
f_204(v69, v70, v71, v72, 1, v75, v74, v76, v77, v78, 0, 3, 2, 4) -> f_205(v69, v70, v71, v72, 1, v75, v74, v76, v77, v78, 0, 3, 2, 4) :|: v75 < v72 && 3 <= v72
f_205(v69, v70, v71, v72, 1, v75, v74, v76, v77, v78, 0, 3, 2, 4) -> f_207(v69, v70, v71, v72, 1, v75, v74, v76, v77, v78, 0, 3, 2, 4) :|: 0 = 0
f_207(v69, v70, v71, v72, 1, v75, v74, v76, v77, v78, 0, 3, 2, 4) -> f_209(v69, v70, v71, v72, 1, v75, v74, v76, v77, v78, 0, 3, 2, 4) :|: TRUE
f_209(v69, v70, v71, v72, 1, v75, v74, v76, v77, v78, 0, 3, 2, 4) -> f_211(v69, v70, v71, v72, 1, v75, v76, v77, v78, 0, 3, 2, 4) :|: 0 = 0
f_211(v69, v70, v71, v72, 1, v75, v76, v77, v78, 0, 3, 2, 4) -> f_213(v69, v70, v71, v72, 1, v75, v100, v76, v77, v78, 0, 3, 2, 4) :|: v100 = 2 * v75 && 4 <= v100
f_213(v69, v70, v71, v72, 1, v75, v100, v76, v77, v78, 0, 3, 2, 4) -> f_215(v69, v70, v71, v72, 1, v75, v100, v76, v77, v78, 0, 3, 2, 4) :|: TRUE
f_215(v69, v70, v71, v72, 1, v75, v100, v76, v77, v78, 0, 3, 2, 4) -> f_217(v69, v70, v71, v72, 1, v75, v100, v76, v77, v78, 0, 3, 2, 4) :|: TRUE
f_217(v69, v70, v71, v72, 1, v75, v100, v76, v77, v78, 0, 3, 2, 4) -> f_200(v69, v70, v71, v72, 1, v75, v100, v76, v77, v78, 0, 3, 2, 4) :|: TRUE
f_200(v69, v70, v71, v72, 1, v74, v75, v76, v77, v78, 0, 3, 2, 4) -> f_202(v69, v70, v71, v72, 1, v74, v75, v76, v77, v78, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_202(v69:0, v70:0, v71:0, v72:0, 1, v74:0, v75:0, v76:0, v77:0, v78:0, 0, 3, 2, 4) -> f_202(v69:0, v70:0, v71:0, v72:0, 1, v75:0, 2 * v75:0, v76:0, v77:0, v78:0, 0, 3, 2, 4) :|: v72:0 > 2 && 3 < 2 * v75:0 && v75:0 < v72:0
Filtered unneeded arguments:
   f_202(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_202(x4, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_202(v72:0, v75:0) -> f_202(v72:0, 2 * v75:0) :|: 3 < 2 * v75:0 && v75:0 < v72:0 && v72:0 > 2

----------------------------------------

(20)
Obligation:
Rules:
f_202(v72:0, v75:0) -> f_202(v72:0, 2 * v75:0) :|: 3 < 2 * v75:0 && v75:0 < v72:0 && v72:0 > 2

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_202(v72:0:0, v75:0:0) -> f_202(v72:0:0, 2 * v75:0:0) :|: 3 < 2 * v75:0:0 && v75:0:0 < v72:0:0 && v72:0:0 > 2

----------------------------------------

(23) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_202(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_202(v72:0:0, v75:0:0) -> f_202(v72:0:0, 2 * v75:0:0) :|: 3 < 2 * v75:0:0 && v75:0:0 < v72:0:0 && v72:0:0 > 2
The following rules are bounded:
f_202(v72:0:0, v75:0:0) -> f_202(v72:0:0, 2 * v75:0:0) :|: 3 < 2 * v75:0:0 && v75:0:0 < v72:0:0 && v72:0:0 > 2

----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
SCC
----------------------------------------

(26) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_164(v33, v34, v35, v36, v40, 1, v37, 0, v41, v42, v43, 3, 4) -> f_167(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) :|: 0 <= v40 && v37 = 1 && v40 = 0 && 0 = 0
f_167(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) -> f_171(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) :|: 0 = 0
f_171(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) -> f_175(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) :|: TRUE
f_175(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) -> f_178(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) :|: TRUE
f_178(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) -> f_180(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) :|: TRUE
f_180(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) -> f_183(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) :|: 0 = 0
f_183(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) -> f_186(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) :|: 0 = 0
f_186(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) -> f_189(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) :|: 0 = 0
f_189(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) -> f_192(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) :|: TRUE
f_192(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) -> f_195(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) :|: 0 = 0
f_195(v33, v34, v35, 1, 0, v41, v42, v43, 3, 4) -> f_198(v33, v34, v35, 1, 0, -1, v41, v42, v43, 3, 4) :|: 0 = 0
f_198(v33, v34, v35, 1, 0, -1, v41, v42, v43, 3, 4) -> f_201(v33, v34, v35, 1, 0, -1, v41, v42, v43, 3, 4) :|: TRUE
f_201(v33, v34, v35, 1, 0, -1, v41, v42, v43, 3, 4) -> f_203(v33, v34, v35, 1, 0, -1, v41, v42, v43, 3, 4) :|: TRUE
f_203(v33, v34, v35, 1, 0, -1, v41, v42, v43, 3, 4) -> f_161(v33, v34, v35, 1, 0, 1, 0, -1, v41, v42, v43, 3, 4) :|: TRUE
f_161(v33, v34, v35, v36, v37, 1, 0, v40, v41, v42, v43, 3, 4) -> f_164(v33, v34, v35, v36, v40, 1, v37, 0, v41, v42, v43, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_164(v33:0, v34:0, v35:0, v36:0, 0, 1, 1, 0, v41:0, v42:0, v43:0, 3, 4) -> f_164(v33:0, v34:0, v35:0, 1, -1, 1, 0, 0, v41:0, v42:0, v43:0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_164(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) -> f_164(x5, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_164(cons_0, cons_1) -> f_164(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(27)
Obligation:
Rules:
f_164(cons_0, cons_1) -> f_164(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(28) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(29)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
