YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/WMdN5.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1378 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 28 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 31 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 29 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/WMdN5.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/WMdN5.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %5
		store 0, %2
		br %9
	9:
		%10 = load %3
		%11 = load %5
		%12 = icmp sgt %10 %11
		br %12, %13, %28
	13:
		br %14
	14:
		%15 = load %4
		%16 = load %5
		%17 = icmp sgt %15 %16
		br %17, %18, %23
	18:
		%19 = load %4
		%20 = sub i32 %19, 1
		store %20, %4
		%21 = load %2
		%22 = add i32 %21, 1
		store %22, %2
		br %14
	23:
		%24 = load %2
		%25 = add i32 %24, 1
		store %25, %2
		%26 = load %3
		%27 = sub i32 %26, 1
		store %27, %3
		br %9
	28:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_479(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) -> f_480(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) :|: 0 = 0
f_480(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) -> f_481(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) :|: v720 < v729
f_481(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) -> f_483(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) :|: 0 = 0
f_483(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) -> f_485(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) :|: TRUE
f_485(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) -> f_487(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) :|: TRUE
f_487(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) -> f_488(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) :|: 0 = 0
f_488(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) -> f_489(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) :|: 0 = 0
f_489(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) -> f_490(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) :|: 0 = 0
f_490(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) -> f_491(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) :|: TRUE
f_491(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) -> f_492(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) :|: 0 = 0
f_492(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) -> f_493(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v728, v796, v721, v730, v731, v732, v733, v734, 3, 2, 4) :|: v796 = 1 + v728 && 3 <= v796
f_493(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v728, v796, v721, v730, v731, v732, v733, v734, 3, 2, 4) -> f_494(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v728, v796, v721, v730, v731, v732, v733, v734, 3, 2, 4) :|: TRUE
f_494(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v728, v796, v721, v730, v731, v732, v733, v734, 3, 2, 4) -> f_495(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v728, v796, v730, v731, v732, v733, v734, 3, 2, 4) :|: 0 = 0
f_495(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v728, v796, v730, v731, v732, v733, v734, 3, 2, 4) -> f_496(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v728, v796, v798, v730, v731, v732, v733, v734, 3, 2, 4) :|: 1 + v798 = v729
f_496(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v728, v796, v798, v730, v731, v732, v733, v734, 3, 2, 4) -> f_497(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v728, v796, v798, v730, v731, v732, v733, v734, 3, 2, 4) :|: TRUE
f_497(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v728, v796, v798, v730, v731, v732, v733, v734, 3, 2, 4) -> f_498(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v728, v796, v798, v730, v731, v732, v733, v734, 3, 2, 4) :|: TRUE
f_498(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v728, v796, v798, v730, v731, v732, v733, v734, 3, 2, 4) -> f_478(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v728, v796, v798, v730, v731, v732, v733, v734, 3, 2, 4) :|: TRUE
f_478(v713, v714, v715, v716, v717, v718, v719, v720, v721, 1, 0, v724, v725, v726, v727, v728, v729, v730, v731, v732, v733, v734, 3, 2, 4) -> f_479(v713, v714, v715, v716, v717, v718, v719, v720, v729, 1, 0, v724, v725, v726, v727, v728, v721, v730, v731, v732, v733, v734, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_479(v713:0, v714:0, v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, 1 + v798:0, 1, 0, v724:0, v725:0, v726:0, v727:0, v728:0, v721:0, v730:0, v731:0, v732:0, v733:0, v734:0, 3, 2, 4) -> f_479(v713:0, v714:0, v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, v798:0, 1, 0, v724:0, v725:0, v726:0, v728:0, 1 + v728:0, 1 + v798:0, v730:0, v731:0, v732:0, v733:0, v734:0, 3, 2, 4) :|: v728:0 > 1 && v720:0 < 1 + v798:0
Filtered unneeded arguments:
   f_479(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_479(x8, x9, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_479(v720:0, sum~cons_1~v798:0, v728:0) -> f_479(v720:0, v798:0, 1 + v728:0) :|: v728:0 > 1 && v720:0 < 1 + v798:0 && sum~cons_1~v798:0 = 1 + v798:0

----------------------------------------

(9)
Obligation:
Rules:
f_479(v720:0, sum~cons_1~v798:0, v728:0) -> f_479(v720:0, v798:0, 1 + v728:0) :|: v728:0 > 1 && v720:0 < 1 + v798:0 && sum~cons_1~v798:0 = 1 + v798:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_479(v720:0:0, sum~cons_1~v798:0:0, v728:0:0) -> f_479(v720:0:0, v798:0:0, 1 + v728:0:0) :|: v728:0:0 > 1 && v720:0:0 < 1 + v798:0:0 && sum~cons_1~v798:0:0 = 1 + v798:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_479(x, x1, x2)] = -x + x1

The following rules are decreasing:
f_479(v720:0:0, sum~cons_1~v798:0:0, v728:0:0) -> f_479(v720:0:0, v798:0:0, 1 + v728:0:0) :|: v728:0:0 > 1 && v720:0:0 < 1 + v798:0:0 && sum~cons_1~v798:0:0 = 1 + v798:0:0
The following rules are bounded:
f_479(v720:0:0, sum~cons_1~v798:0:0, v728:0:0) -> f_479(v720:0:0, v798:0:0, 1 + v728:0:0) :|: v728:0:0 > 1 && v720:0:0 < 1 + v798:0:0 && sum~cons_1~v798:0:0 = 1 + v798:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_434(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) -> f_436(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) :|: 0 = 0
f_436(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) -> f_438(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) :|: v518 < v524
f_438(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) -> f_442(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) :|: 0 = 0
f_442(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) -> f_445(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) :|: TRUE
f_445(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) -> f_448(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) :|: TRUE
f_448(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) -> f_451(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) :|: 0 = 0
f_451(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) -> f_454(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) :|: 0 = 0
f_454(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) -> f_457(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) :|: 0 = 0
f_457(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) -> f_459(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) :|: TRUE
f_459(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) -> f_461(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v523, v519, v525, v526, v527, v528, v529, 3, 4) :|: 0 = 0
f_461(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v523, v519, v525, v526, v527, v528, v529, 3, 4) -> f_463(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v523, v640, v519, v525, v526, v527, v528, v529, 3, 4, 2) :|: v640 = 1 + v523 && 2 <= v640
f_463(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v523, v640, v519, v525, v526, v527, v528, v529, 3, 4, 2) -> f_465(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v523, v640, v519, v525, v526, v527, v528, v529, 3, 4, 2) :|: TRUE
f_465(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v523, v640, v519, v525, v526, v527, v528, v529, 3, 4, 2) -> f_467(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v523, v640, v525, v526, v527, v528, v529, 3, 4, 2) :|: 0 = 0
f_467(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v523, v640, v525, v526, v527, v528, v529, 3, 4, 2) -> f_469(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v523, v640, v662, v525, v526, v527, v528, v529, 3, 4, 2) :|: 1 + v662 = v524
f_469(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v523, v640, v662, v525, v526, v527, v528, v529, 3, 4, 2) -> f_471(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v523, v640, v662, v525, v526, v527, v528, v529, 3, 4, 2) :|: TRUE
f_471(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v523, v640, v662, v525, v526, v527, v528, v529, 3, 4, 2) -> f_473(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v523, v640, v662, v525, v526, v527, v528, v529, 3, 4, 2) :|: TRUE
f_473(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v523, v640, v662, v525, v526, v527, v528, v529, 3, 4, 2) -> f_432(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v523, v640, v662, v525, v526, v527, v528, v529, 3, 4) :|: TRUE
f_432(v511, v512, v513, v514, v515, v516, v517, v518, v519, 1, 0, v522, v523, v524, v525, v526, v527, v528, v529, 3, 4) -> f_434(v511, v512, v513, v514, v515, v516, v517, v518, v524, 1, 0, v522, v523, v519, v525, v526, v527, v528, v529, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_434(v511:0, v512:0, v513:0, v514:0, v515:0, v516:0, v517:0, v518:0, 1 + v662:0, 1, 0, v522:0, v523:0, v519:0, v525:0, v526:0, v527:0, v528:0, v529:0, 3, 4) -> f_434(v511:0, v512:0, v513:0, v514:0, v515:0, v516:0, v517:0, v518:0, v662:0, 1, 0, v523:0, 1 + v523:0, 1 + v662:0, v525:0, v526:0, v527:0, v528:0, v529:0, 3, 4) :|: v523:0 > 0 && v518:0 < 1 + v662:0
Filtered unneeded arguments:
   f_434(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_434(x8, x9, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_434(v518:0, sum~cons_1~v662:0, v523:0) -> f_434(v518:0, v662:0, 1 + v523:0) :|: v523:0 > 0 && v518:0 < 1 + v662:0 && sum~cons_1~v662:0 = 1 + v662:0

----------------------------------------

(16)
Obligation:
Rules:
f_434(v518:0, sum~cons_1~v662:0, v523:0) -> f_434(v518:0, v662:0, 1 + v523:0) :|: v523:0 > 0 && v518:0 < 1 + v662:0 && sum~cons_1~v662:0 = 1 + v662:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_434(v518:0:0, sum~cons_1~v662:0:0, v523:0:0) -> f_434(v518:0:0, v662:0:0, 1 + v523:0:0) :|: v523:0:0 > 0 && v518:0:0 < 1 + v662:0:0 && sum~cons_1~v662:0:0 = 1 + v662:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_434(x, x1, x2)] = -x + x1

The following rules are decreasing:
f_434(v518:0:0, sum~cons_1~v662:0:0, v523:0:0) -> f_434(v518:0:0, v662:0:0, 1 + v523:0:0) :|: v523:0:0 > 0 && v518:0:0 < 1 + v662:0:0 && sum~cons_1~v662:0:0 = 1 + v662:0:0
The following rules are bounded:
f_434(v518:0:0, sum~cons_1~v662:0:0, v523:0:0) -> f_434(v518:0:0, v662:0:0, 1 + v523:0:0) :|: v523:0:0 > 0 && v518:0:0 < 1 + v662:0:0 && sum~cons_1~v662:0:0 = 1 + v662:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_365(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v318, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) -> f_367(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v318, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) :|: 0 = 0
f_367(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v318, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) -> f_369(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v318, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) :|: v316 < v319
f_369(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v318, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) -> f_372(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v318, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) :|: 0 = 0
f_372(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v318, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) -> f_375(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v318, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) :|: TRUE
f_375(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v318, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) -> f_378(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) :|: 0 = 0
f_378(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) -> f_381(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v353, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) :|: 1 + v353 = v319
f_381(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v353, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) -> f_384(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v353, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) :|: TRUE
f_384(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v353, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) -> f_388(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v353, v321, v322, v323, v324, v325, v326, 0, 3, 4) :|: 0 = 0
f_388(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v353, v321, v322, v323, v324, v325, v326, 0, 3, 4) -> f_391(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v353, v321, v377, v322, v323, v324, v325, v326, 0, 3, 4, 2) :|: v377 = 1 + v321 && 2 <= v377
f_391(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v353, v321, v377, v322, v323, v324, v325, v326, 0, 3, 4, 2) -> f_394(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v353, v321, v377, v322, v323, v324, v325, v326, 0, 3, 4, 2) :|: TRUE
f_394(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v353, v321, v377, v322, v323, v324, v325, v326, 0, 3, 4, 2) -> f_398(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v353, v321, v377, v322, v323, v324, v325, v326, 0, 3, 4, 2) :|: TRUE
f_398(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v353, v321, v377, v322, v323, v324, v325, v326, 0, 3, 4, 2) -> f_363(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v353, v321, v377, v322, v323, v324, v325, v326, 0, 3, 4) :|: TRUE
f_363(v309, v310, v311, v312, v313, v314, v315, v316, 1, v318, v319, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) -> f_365(v309, v310, v311, v312, v313, v314, v315, v316, 1, v319, v318, v320, v321, v322, v323, v324, v325, v326, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_365(v309:0, v310:0, v311:0, v312:0, v313:0, v314:0, v315:0, v316:0, 1, 1 + v353:0, v318:0, v320:0, v321:0, v322:0, v323:0, v324:0, v325:0, v326:0, 0, 3, 4) -> f_365(v309:0, v310:0, v311:0, v312:0, v313:0, v314:0, v315:0, v316:0, 1, v353:0, 1 + v353:0, v321:0, 1 + v321:0, v322:0, v323:0, v324:0, v325:0, v326:0, 0, 3, 4) :|: v321:0 > 0 && v316:0 < 1 + v353:0
Filtered unneeded arguments:
   f_365(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_365(x8, x10, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_365(v316:0, sum~cons_1~v353:0, v321:0) -> f_365(v316:0, v353:0, 1 + v321:0) :|: v321:0 > 0 && v316:0 < 1 + v353:0 && sum~cons_1~v353:0 = 1 + v353:0

----------------------------------------

(23)
Obligation:
Rules:
f_365(v316:0, sum~cons_1~v353:0, v321:0) -> f_365(v316:0, v353:0, 1 + v321:0) :|: v321:0 > 0 && v316:0 < 1 + v353:0 && sum~cons_1~v353:0 = 1 + v353:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_365(v316:0:0, sum~cons_1~v353:0:0, v321:0:0) -> f_365(v316:0:0, v353:0:0, 1 + v321:0:0) :|: v321:0:0 > 0 && v316:0:0 < 1 + v353:0:0 && sum~cons_1~v353:0:0 = 1 + v353:0:0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_365(x, x1, x2)] = -x + x1

The following rules are decreasing:
f_365(v316:0:0, sum~cons_1~v353:0:0, v321:0:0) -> f_365(v316:0:0, v353:0:0, 1 + v321:0:0) :|: v321:0:0 > 0 && v316:0:0 < 1 + v353:0:0 && sum~cons_1~v353:0:0 = 1 + v353:0:0
The following rules are bounded:
f_365(v316:0:0, sum~cons_1~v353:0:0, v321:0:0) -> f_365(v316:0:0, v353:0:0, 1 + v321:0:0) :|: v321:0:0 > 0 && v316:0:0 < 1 + v353:0:0 && sum~cons_1~v353:0:0 = 1 + v353:0:0

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
