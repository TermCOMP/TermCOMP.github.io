YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/8EcSJ.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 51 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1347 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 77 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 53 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 55 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/8EcSJ.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/8EcSJ.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		%4 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%5 = alloca i8, numElementsLit: 4, align 16
		%6 = bitcast *i8 %5 to *i32
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%7 = alloca i8, numElementsLit: 4, align 16
		%8 = bitcast *i8 %7 to *i32
		store %8, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %4)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %4
		%11 = call i32 @__VERIFIER_nondet_int()
		%12 = load %2
		store %11, %12
		%13 = call i32 @__VERIFIER_nondet_int()
		%14 = load %3
		store %13, %14
		%15 = call i32 @__VERIFIER_nondet_int()
		%16 = load %4
		store %15, %16
		br %17
	17:
		%18 = load %2
		%19 = load %18
		%20 = icmp sgt %19 0
		br %20, %21, %29
	21:
		%22 = load %3
		%23 = load %22
		%24 = icmp sgt %23 0
		br %24, %25, %29
	25:
		%26 = load %4
		%27 = load %26
		%28 = icmp sgt %27 0
		br %29
	29:
		%30 = phi [0, %21], [0, %17], [%28, %25]
		br %30, %31, %59
	31:
		%32 = load %3
		%33 = load %32
		%34 = load %2
		%35 = load %34
		%36 = icmp sgt %33 %35
		br %36, %37, %47
	37:
		%38 = load %4
		%39 = load %38
		%40 = load %3
		store %39, %40
		%41 = call i32 @__VERIFIER_nondet_int()
		%42 = load %2
		store %41, %42
		%43 = load %2
		%44 = load %43
		%45 = sub i32 %44, 1
		%46 = load %4
		store %45, %46
		br %58
	47:
		%48 = load %4
		%49 = load %48
		%50 = sub i32 %49, 1
		%51 = load %4
		store %50, %51
		%52 = call i32 @__VERIFIER_nondet_int()
		%53 = load %2
		store %52, %53
		%54 = load %2
		%55 = load %54
		%56 = sub i32 %55, 1
		%57 = load %3
		store %56, %57
		br %58
	58:
		br %17
	59:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 38 rulesP rules:
f_697(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4037, 1, v4039, v4040, 0, v4042, v4043, v4044, v4045, v4046, v4047, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_698(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4037, 1, v4039, v4040, 0, v4042, v4043, v4044, v4045, v4046, v4047, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_698(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4037, 1, v4039, v4040, 0, v4042, v4043, v4044, v4045, v4046, v4047, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_699(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4039, v4040, v4037, 0, v4042, v4043, v4044, v4045, v4047, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_699(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4039, v4040, v4037, 0, v4042, v4043, v4044, v4045, v4047, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_700(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4039, v4040, v4037, 0, v4042, v4043, v4044, v4045, v4047, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 < v4046 && 0 <= v4047
f_700(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4039, v4040, v4037, 0, v4042, v4043, v4044, v4045, v4047, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_702(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4039, v4040, v4037, 0, v4042, v4043, v4044, v4045, v4047, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_702(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4039, v4040, v4037, 0, v4042, v4043, v4044, v4045, v4047, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_704(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4039, v4040, v4037, 0, v4042, v4043, v4044, v4045, v4047, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: TRUE
f_704(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4039, v4040, v4037, 0, v4042, v4043, v4044, v4045, v4047, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_706(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4039, v4040, v4037, 0, v4042, v4043, v4044, v4045, v4047, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_706(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4039, v4040, v4037, 0, v4042, v4043, v4044, v4045, v4047, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_708(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4040, v4039, v4037, 0, v4042, v4043, v4044, v4045, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_708(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4040, v4039, v4037, 0, v4042, v4043, v4044, v4045, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_709(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4040, v4039, v4037, 0, v4042, v4043, v4044, v4045, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 < v4047 && 2 <= v4046
f_709(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4040, v4039, v4037, 0, v4042, v4043, v4044, v4045, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_711(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4040, v4039, v4037, 0, v4042, v4043, v4044, v4045, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_711(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4040, v4039, v4037, 0, v4042, v4043, v4044, v4045, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_713(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4040, v4039, v4037, 0, v4042, v4043, v4044, v4045, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: TRUE
f_713(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4040, v4039, v4037, 0, v4042, v4043, v4044, v4045, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_715(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4040, v4039, v4037, 0, v4042, v4043, v4044, v4045, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_715(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4040, v4039, v4037, 0, v4042, v4043, v4044, v4045, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_717(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4039, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_717(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4039, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_718(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4039, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 < v4045 && 2 <= v4040 && 2 <= v4044 && 3 <= v4043
f_718(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4039, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_720(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4039, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_720(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4039, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_722(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4039, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_722(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4039, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_724(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4039, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: TRUE
f_724(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4039, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_726(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4039, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_726(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4039, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_727(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_727(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_728(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_728(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, v4037, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_729(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_729(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_730(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_730(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_731(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: TRUE
f_731(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_732(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_732(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4040, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_733(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_733(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_734(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 1 + v4932 = v4045 && 0 <= v4932
f_734(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_735(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_735(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_736(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: TRUE
f_736(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_737(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: TRUE
f_737(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_738(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_738(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_739(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: TRUE
f_739(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_740(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_740(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_741(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_741(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_742(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4936, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 1 + v4936 = v4934
f_742(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4936, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_743(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4936, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: 0 = 0
f_743(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4936, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_744(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4936, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: TRUE
f_744(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4936, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_745(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4936, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: TRUE
f_745(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4936, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_696(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4046, 1, v4047, v4045, 0, v4042, v4043, v4044, v4932, v4934, v4936, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: TRUE
f_696(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4037, 1, v4039, v4040, 0, v4042, v4043, v4044, v4045, v4046, v4047, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) -> f_697(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034, v4035, v4036, v4037, 1, v4039, v4040, 0, v4042, v4043, v4044, v4045, v4046, v4047, v4048, v4049, v4050, v4051, v4052, v4053, v4054, 3, 7, 2, 4, 8) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_697(v4027:0, v4028:0, v4029:0, v4030:0, v4031:0, v4032:0, v4033:0, v4034:0, v4035:0, v4036:0, v4037:0, 1, v4039:0, v4040:0, 0, v4042:0, v4043:0, v4044:0, 1 + v4932:0, v4046:0, v4047:0, v4048:0, v4049:0, v4050:0, v4051:0, v4052:0, v4053:0, v4054:0, 3, 7, 2, 4, 8) -> f_697(v4027:0, v4028:0, v4029:0, v4030:0, v4031:0, v4032:0, v4033:0, v4034:0, v4035:0, v4036:0, v4046:0, 1, v4047:0, 1 + v4932:0, 0, v4042:0, v4043:0, v4044:0, v4932:0, 1 + v4936:0, v4936:0, v4048:0, v4049:0, v4050:0, v4051:0, v4052:0, v4053:0, v4054:0, 3, 7, 2, 4, 8) :|: v4046:0 > 1 && v4047:0 > 0 && v4040:0 > 1 && v4932:0 > -1 && v4044:0 > 1 && v4043:0 > 2
Filtered unneeded arguments:
   f_697(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) -> f_697(x14, x17, x18, x19, x20, x21)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_697(v4040:0, v4043:0, v4044:0, sum~cons_1~v4932:0, v4046:0, v4047:0) -> f_697(1 + v4932:0, v4043:0, v4044:0, v4932:0, 1 + v4936:0, v4936:0) :|: v4047:0 > 0 && v4046:0 > 1 && v4040:0 > 1 && v4932:0 > -1 && v4043:0 > 2 && v4044:0 > 1 && sum~cons_1~v4932:0 = 1 + v4932:0

----------------------------------------

(9)
Obligation:
Rules:
f_697(v4040:0, v4043:0, v4044:0, sum~cons_1~v4932:0, v4046:0, v4047:0) -> f_697(1 + v4932:0, v4043:0, v4044:0, v4932:0, 1 + v4936:0, v4936:0) :|: v4047:0 > 0 && v4046:0 > 1 && v4040:0 > 1 && v4932:0 > -1 && v4043:0 > 2 && v4044:0 > 1 && sum~cons_1~v4932:0 = 1 + v4932:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_697(v4040:0:0, v4043:0:0, v4044:0:0, sum~cons_1~v4932:0:0, v4046:0:0, v4047:0:0) -> f_697(1 + v4932:0:0, v4043:0:0, v4044:0:0, v4932:0:0, 1 + v4936:0:0, v4936:0:0) :|: v4043:0:0 > 2 && v4044:0:0 > 1 && v4932:0:0 > -1 && v4040:0:0 > 1 && v4046:0:0 > 1 && v4047:0:0 > 0 && sum~cons_1~v4932:0:0 = 1 + v4932:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_697(x, x1, x2, x3, x4, x5)] = x3

The following rules are decreasing:
f_697(v4040:0:0, v4043:0:0, v4044:0:0, sum~cons_1~v4932:0:0, v4046:0:0, v4047:0:0) -> f_697(1 + v4932:0:0, v4043:0:0, v4044:0:0, v4932:0:0, 1 + v4936:0:0, v4936:0:0) :|: v4043:0:0 > 2 && v4044:0:0 > 1 && v4932:0:0 > -1 && v4040:0:0 > 1 && v4046:0:0 > 1 && v4047:0:0 > 0 && sum~cons_1~v4932:0:0 = 1 + v4932:0:0
The following rules are bounded:
f_697(v4040:0:0, v4043:0:0, v4044:0:0, sum~cons_1~v4932:0:0, v4046:0:0, v4047:0:0) -> f_697(1 + v4932:0:0, v4043:0:0, v4044:0:0, v4932:0:0, 1 + v4936:0:0, v4936:0:0) :|: v4043:0:0 > 2 && v4044:0:0 > 1 && v4932:0:0 > -1 && v4040:0:0 > 1 && v4046:0:0 > 1 && v4047:0:0 > 0 && sum~cons_1~v4932:0:0 = 1 + v4932:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 38 rulesP rules:
f_551(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1655, 1, v1657, v1658, 0, v1660, v1661, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) -> f_554(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1655, 1, v1657, v1658, 0, v1660, v1661, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) :|: 0 = 0
f_554(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1655, 1, v1657, v1658, 0, v1660, v1661, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) -> f_557(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1657, v1658, v1655, 0, v1660, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) :|: 0 = 0
f_557(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1657, v1658, v1655, 0, v1660, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) -> f_560(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1657, v1658, v1655, 0, v1660, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) :|: 0 < v1661 && 0 <= v1662
f_560(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1657, v1658, v1655, 0, v1660, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) -> f_564(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1657, v1658, v1655, 0, v1660, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) :|: 0 = 0
f_564(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1657, v1658, v1655, 0, v1660, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) -> f_567(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1657, v1658, v1655, 0, v1660, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) :|: TRUE
f_567(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1657, v1658, v1655, 0, v1660, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) -> f_571(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1657, v1658, v1655, 0, v1660, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) :|: 0 = 0
f_571(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1657, v1658, v1655, 0, v1660, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) -> f_575(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1658, v1657, v1655, 0, v1660, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) :|: 0 = 0
f_575(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1658, v1657, v1655, 0, v1660, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) -> f_578(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1658, v1657, v1655, 0, v1660, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 < v1662 && 2 <= v1661
f_578(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1658, v1657, v1655, 0, v1660, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_582(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1658, v1657, v1655, 0, v1660, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_582(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1658, v1657, v1655, 0, v1660, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_585(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1658, v1657, v1655, 0, v1660, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: TRUE
f_585(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1658, v1657, v1655, 0, v1660, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_589(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1658, v1657, v1655, 0, v1660, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_589(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1658, v1657, v1655, 0, v1660, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_593(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1657, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_593(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1657, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_596(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1657, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 < v1660 && 2 <= v1658 && 2 <= v1654
f_596(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1657, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_600(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1657, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_600(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1657, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_603(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1657, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_603(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1657, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_606(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1657, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: TRUE
f_606(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1657, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_609(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1657, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_609(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1657, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_611(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_611(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_613(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_613(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, v1655, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_615(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_615(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_617(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_617(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_619(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: TRUE
f_619(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_621(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_621(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v1658, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_623(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_623(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_625(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 1 + v2995 = v1660 && 0 <= v2995
f_625(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_627(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_627(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_629(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: TRUE
f_629(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_631(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: TRUE
f_631(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_633(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_633(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_635(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: TRUE
f_635(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_637(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_637(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_639(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_639(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_641(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v3003, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 1 + v3003 = v2999
f_641(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v3003, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_644(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v3003, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: 0 = 0
f_644(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v3003, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_646(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v3003, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: TRUE
f_646(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v3003, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_648(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v3003, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) :|: TRUE
f_648(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v3003, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 2, 4, 8) -> f_549(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1661, 1, v1662, v1660, 0, v2995, v2999, v3003, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) :|: TRUE
f_549(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1655, 1, v1657, v1658, 0, v1660, v1661, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) -> f_551(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1655, 1, v1657, v1658, 0, v1660, v1661, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, 3, 7, 4, 8) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_551(v1645:0, v1646:0, v1647:0, v1648:0, v1649:0, v1650:0, v1651:0, v1652:0, v1653:0, v1654:0, v1655:0, 1, v1657:0, v1658:0, 0, 1 + v2995:0, v1661:0, v1662:0, v1663:0, v1664:0, v1665:0, v1666:0, v1667:0, v1668:0, v1669:0, 3, 7, 4, 8) -> f_551(v1645:0, v1646:0, v1647:0, v1648:0, v1649:0, v1650:0, v1651:0, v1652:0, v1653:0, v1654:0, v1661:0, 1, v1662:0, 1 + v2995:0, 0, v2995:0, 1 + v3003:0, v3003:0, v1663:0, v1664:0, v1665:0, v1666:0, v1667:0, v1668:0, v1669:0, 3, 7, 4, 8) :|: v1661:0 > 1 && v1662:0 > 0 && v1658:0 > 1 && v2995:0 > -1 && v1654:0 > 1
Filtered unneeded arguments:
   f_551(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_551(x10, x14, x16, x17, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_551(v1654:0, v1658:0, sum~cons_1~v2995:0, v1661:0, v1662:0) -> f_551(v1654:0, 1 + v2995:0, v2995:0, 1 + v3003:0, v3003:0) :|: v1662:0 > 0 && v1661:0 > 1 && v1658:0 > 1 && v1654:0 > 1 && v2995:0 > -1 && sum~cons_1~v2995:0 = 1 + v2995:0

----------------------------------------

(16)
Obligation:
Rules:
f_551(v1654:0, v1658:0, sum~cons_1~v2995:0, v1661:0, v1662:0) -> f_551(v1654:0, 1 + v2995:0, v2995:0, 1 + v3003:0, v3003:0) :|: v1662:0 > 0 && v1661:0 > 1 && v1658:0 > 1 && v1654:0 > 1 && v2995:0 > -1 && sum~cons_1~v2995:0 = 1 + v2995:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_551(v1654:0:0, v1658:0:0, sum~cons_1~v2995:0:0, v1661:0:0, v1662:0:0) -> f_551(v1654:0:0, 1 + v2995:0:0, v2995:0:0, 1 + v3003:0:0, v3003:0:0) :|: v1654:0:0 > 1 && v2995:0:0 > -1 && v1658:0:0 > 1 && v1661:0:0 > 1 && v1662:0:0 > 0 && sum~cons_1~v2995:0:0 = 1 + v2995:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_551(x, x1, x2, x3, x4)] = x2

The following rules are decreasing:
f_551(v1654:0:0, v1658:0:0, sum~cons_1~v2995:0:0, v1661:0:0, v1662:0:0) -> f_551(v1654:0:0, 1 + v2995:0:0, v2995:0:0, 1 + v3003:0:0, v3003:0:0) :|: v1654:0:0 > 1 && v2995:0:0 > -1 && v1658:0:0 > 1 && v1661:0:0 > 1 && v1662:0:0 > 0 && sum~cons_1~v2995:0:0 = 1 + v2995:0:0
The following rules are bounded:
f_551(v1654:0:0, v1658:0:0, sum~cons_1~v2995:0:0, v1661:0:0, v1662:0:0) -> f_551(v1654:0:0, 1 + v2995:0:0, v2995:0:0, 1 + v3003:0:0, v3003:0:0) :|: v1654:0:0 > 1 && v2995:0:0 > -1 && v1658:0:0 > 1 && v1661:0:0 > 1 && v1662:0:0 > 0 && sum~cons_1~v2995:0:0 = 1 + v2995:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 37 rulesP rules:
f_435(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v852, 1, v854, v855, v856, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_438(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v854, v855, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_438(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v854, v855, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_440(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v854, v855, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 < v856 && 0 <= v857
f_440(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v854, v855, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_443(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v854, v855, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_443(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v854, v855, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_446(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v854, v855, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: TRUE
f_446(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v854, v855, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_450(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v854, v855, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_450(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v854, v855, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_454(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v854, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_454(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v854, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_457(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v854, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_457(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v854, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_460(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v854, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: TRUE
f_460(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v854, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_462(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v854, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_462(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v854, v852, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_465(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v854, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_465(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v854, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_468(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v854, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 < v857 && 2 <= v856
f_468(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v854, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_472(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v854, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_472(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v854, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_476(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v854, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_476(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v854, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_479(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v854, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: TRUE
f_479(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v854, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_483(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v854, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_483(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v854, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_486(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_486(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_489(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_489(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v852, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_492(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_492(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_494(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: v856 < v855 && 3 <= v855
f_494(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_497(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_497(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_500(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: TRUE
f_500(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_503(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_503(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_506(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_506(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_509(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_509(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_512(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: TRUE
f_512(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_515(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: TRUE
f_515(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_518(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_518(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_521(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: TRUE
f_521(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_524(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_524(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_527(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_527(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_530(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v1522, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 1 + v1522 = v1514
f_530(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v1522, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_533(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v1522, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_533(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v1522, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_536(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v1522, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: TRUE
f_536(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v1522, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_539(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v1522, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: TRUE
f_539(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v1522, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_542(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v1522, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: TRUE
f_542(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v1522, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_433(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v856, 1, v855, v857, v1514, v1522, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: TRUE
f_433(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v852, 1, v854, v855, v856, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) -> f_435(v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v852, 1, v854, v855, v856, v857, v858, v859, v860, v861, v862, v863, v864, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_435(v842:0, v843:0, v844:0, v845:0, v846:0, v847:0, v848:0, v849:0, v850:0, v851:0, v852:0, 1, v854:0, v855:0, v856:0, v857:0, v858:0, v859:0, v860:0, v861:0, v862:0, v863:0, v864:0, 0, 3, 7, 2, 4, 8) -> f_435(v842:0, v843:0, v844:0, v845:0, v846:0, v847:0, v848:0, v849:0, v850:0, v851:0, v856:0, 1, v855:0, v857:0, 1 + v1522:0, v1522:0, v858:0, v859:0, v860:0, v861:0, v862:0, v863:0, v864:0, 0, 3, 7, 2, 4, 8) :|: v856:0 > 1 && v857:0 > 0 && v856:0 < v855:0 && v855:0 > 2
Filtered unneeded arguments:
   f_435(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_435(x14, x15, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_435(v855:0, v856:0, v857:0) -> f_435(v857:0, 1 + v1522:0, v1522:0) :|: v857:0 > 0 && v856:0 > 1 && v855:0 > 2 && v856:0 < v855:0

----------------------------------------

(23)
Obligation:
Rules:
f_435(v855:0, v856:0, v857:0) -> f_435(v857:0, 1 + v1522:0, v1522:0) :|: v857:0 > 0 && v856:0 > 1 && v855:0 > 2 && v856:0 < v855:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_435(v855:0:0, v856:0:0, v857:0:0) -> f_435(v857:0:0, 1 + v1522:0:0, v1522:0:0) :|: v855:0:0 > 2 && v856:0:0 < v855:0:0 && v856:0:0 > 1 && v857:0:0 > 0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_435(x, x1, x2)] = -1 + x - x1 + x2

The following rules are decreasing:
f_435(v855:0:0, v856:0:0, v857:0:0) -> f_435(v857:0:0, 1 + v1522:0:0, v1522:0:0) :|: v855:0:0 > 2 && v856:0:0 < v855:0:0 && v856:0:0 > 1 && v857:0:0 > 0
The following rules are bounded:
f_435(v855:0:0, v856:0:0, v857:0:0) -> f_435(v857:0:0, 1 + v1522:0:0, v1522:0:0) :|: v855:0:0 > 2 && v856:0:0 < v855:0:0 && v856:0:0 > 1 && v857:0:0 > 0

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
