YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/9CLTH.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 57 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2046 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 52 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/9CLTH.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/9CLTH.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cmemset" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8, 1 i32, 2 i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 11
	0:
		%4 = alloca *i8, align 8
		%5 = alloca i32, align 4
		%6 = alloca i64, align 8
		%7 = alloca *i8, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %6)
		%8 = load %6
		%9 = icmp ne %8 0
		br %9, %10, %22
	10:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %7)
		%11 = load %4
		store %11, %7
		br %12
	12:
		%13 = load %5
		%14 = trunc i32 %13 to i8
		%15 = load %7
		%16 = getelementptr %15, 1
		store %16, %7
		store %14, %15
		br %17
	17:
		%18 = load %6
		%19 = add i64 %18, -1
		store %19, %6
		%20 = icmp ne %19 0
		br %20, %12, %21
	21:
		br %22
	22:
		%23 = load %4
		ret %23

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 48
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		%9 = load %2
		%10 = icmp slt %9 1
		br %10, %11, %12
	11:
		store 1, %2
		br %12
	12:
		%13 = load %3
		%14 = icmp slt %13 1
		br %14, %15, %16
	15:
		store 1, %3
		br %16
	16:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%17 = load %3
		%18 = sext i32 %17 to i64
		%19 = mul i64 %18, 1
		%20 = alloca i8, numElementsLit: %19, align 16
		store %20, %5
		%21 = load %5
		%22 = load %4
		%23 = load %3
		%24 = sext i32 %23 to i64
		%25 = call *i8 @cmemset(*i8 %21, i32 %22, i64 %24)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_495(v798, v799, v800, v801, v802, v803, v804, 1, v806, v807, v808, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, v829, v831, 0, v832, v816, v817, 3, 7, 2, 4, 8) -> f_497(v798, v799, v800, v801, v802, v803, v804, 1, v849, v807, v808, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, v806, v829, v831, 0, v832, v816, v817, 3, 7, 2, 4, 8) :|: TRUE
f_497(v798, v799, v800, v801, v802, v803, v804, 1, v849, v807, v808, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, v806, v829, v831, 0, v832, v816, v817, 3, 7, 2, 4, 8) -> f_499(v798, v799, v800, v801, v802, v803, v804, 1, v849, v808, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, v807, v806, v829, v831, 0, v832, v816, v817, 3, 7, 2, 4, 8) :|: 0 = 0
f_499(v798, v799, v800, v801, v802, v803, v804, 1, v849, v808, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, v807, v806, v829, v831, 0, v832, v816, v817, 3, 7, 2, 4, 8) -> f_501(v798, v799, v800, v801, v802, v803, v804, 1, v849, v808, v850, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, v807, v806, v829, v831, 0, v832, v816, v817, 3, 7, 2, 4, 8) :|: v850 = 1 + v808 && 4 <= v850
f_501(v798, v799, v800, v801, v802, v803, v804, 1, v849, v808, v850, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, v807, v806, v829, v831, 0, v832, v816, v817, 3, 7, 2, 4, 8) -> f_502(v798, v799, v800, v801, v802, v803, v804, 1, v849, v808, v850, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, v807, v806, v829, v831, 0, v832, v816, v817, 3, 7, 2, 4, 8) :|: TRUE
f_502(v798, v799, v800, v801, v802, v803, v804, 1, v849, v808, v850, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, v807, v806, v829, v831, 0, v832, v816, v817, 3, 7, 2, 4, 8) -> f_503(v798, v799, v800, v801, v802, v803, v804, 1, v849, v808, v850, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, v807, v806, v829, v831, 0, v832, v816, v817, 3, 7, 2, 4, 8) :|: TRUE
f_503(v798, v799, v800, v801, v802, v803, v804, 1, v849, v808, v850, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, v807, v806, v829, v831, 0, v832, v816, v817, 3, 7, 2, 4, 8) -> f_504(v798, v799, v800, v801, v802, v803, v804, 1, v849, v808, v850, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, v807, v806, v829, v831, 0, v832, v816, v817, 3, 7, 2, 4, 8) :|: TRUE
f_504(v798, v799, v800, v801, v802, v803, v804, 1, v849, v808, v850, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, v807, v806, v829, v831, 0, v832, v816, v817, 3, 7, 2, 4, 8) -> f_505(v798, v799, v800, v801, v802, v803, v804, 1, v849, v808, v850, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, 0, v832, v954, v957, v941, v942, 3, 7, 2, 4, 8) :|: TRUE
f_505(v923, v924, v925, v926, v927, v928, v929, 1, v931, v932, v933, v934, v935, v936, v944, v937, v945, v938, v946, v939, v947, v940, v948, v949, v950, v951, v952, v953, v955, 0, v956, v954, v957, v941, v942, 3, 7, 2, 4, 8) -> f_506(v923, v924, v925, v926, v927, v928, v929, 1, v931, v932, v933, v935, v936, v944, v937, v945, v938, v946, v939, v947, v940, v948, v949, v950, v951, v952, v953, v955, 0, v956, v954, v957, v941, v942, 3, 7, 2, 4, 8) :|: 0 = 0
f_506(v923, v924, v925, v926, v927, v928, v929, 1, v931, v932, v933, v935, v936, v944, v937, v945, v938, v946, v939, v947, v940, v948, v949, v950, v951, v952, v953, v955, 0, v956, v954, v957, v941, v942, 3, 7, 2, 4, 8) -> f_507(v923, v924, v925, v926, v927, v928, v929, 1, v931, v932, v933, v935, v958, v936, v944, v937, v945, v938, v946, v939, v947, v940, v948, v949, v950, v951, v952, v953, v955, 0, v956, v954, v957, v941, v942, 3, 7, 2, 4, 8) :|: 1 + v958 = v935 && 0 <= v958
f_507(v923, v924, v925, v926, v927, v928, v929, 1, v931, v932, v933, v935, v958, v936, v944, v937, v945, v938, v946, v939, v947, v940, v948, v949, v950, v951, v952, v953, v955, 0, v956, v954, v957, v941, v942, 3, 7, 2, 4, 8) -> f_508(v923, v924, v925, v926, v927, v928, v929, 1, v931, v932, v933, v935, v958, v936, v944, v937, v945, v938, v946, v939, v947, v940, v948, v949, v950, v951, v952, v953, v955, 0, v956, v954, v957, v941, v942, 3, 7, 2, 4, 8) :|: TRUE
f_508(v923, v924, v925, v926, v927, v928, v929, 1, v931, v932, v933, v935, v958, v936, v944, v937, v945, v938, v946, v939, v947, v940, v948, v949, v950, v951, v952, v953, v955, 0, v956, v954, v957, v941, v942, 3, 7, 2, 4, 8) -> f_509(v923, v924, v925, v926, v927, v928, v929, 1, v931, v932, v933, v935, v958, v936, v944, v937, v945, v938, v946, v939, v947, v940, v948, v949, v950, v951, v952, v953, v955, 0, v956, v954, v957, v941, v942, 3, 7, 2, 4, 8) :|: 0 < v958 && 2 <= v935 && 3 <= v949 && 3 <= v925
f_509(v923, v924, v925, v926, v927, v928, v929, 1, v931, v932, v933, v935, v958, v936, v944, v937, v945, v938, v946, v939, v947, v940, v948, v949, v950, v951, v952, v953, v955, 0, v956, v954, v957, v941, v942, 3, 7, 2, 4, 8) -> f_511(v923, v924, v925, v926, v927, v928, v929, 1, v931, v932, v933, v935, v958, v936, v944, v937, v945, v938, v946, v939, v947, v940, v948, v949, v950, v951, v952, v953, v955, 0, v956, v954, v957, v941, v942, 3, 7, 2, 4, 8) :|: 0 = 0
f_511(v923, v924, v925, v926, v927, v928, v929, 1, v931, v932, v933, v935, v958, v936, v944, v937, v945, v938, v946, v939, v947, v940, v948, v949, v950, v951, v952, v953, v955, 0, v956, v954, v957, v941, v942, 3, 7, 2, 4, 8) -> f_513(v923, v924, v925, v926, v927, v928, v929, 1, v931, v932, v933, v935, v958, v936, v944, v937, v945, v938, v946, v939, v947, v940, v948, v949, v950, v951, v952, v953, v955, 0, v956, v954, v957, v941, v942, 3, 7, 2, 4, 8) :|: TRUE
f_513(v923, v924, v925, v926, v927, v928, v929, 1, v931, v932, v933, v935, v958, v936, v944, v937, v945, v938, v946, v939, v947, v940, v948, v949, v950, v951, v952, v953, v955, 0, v956, v954, v957, v941, v942, 3, 7, 2, 4, 8) -> f_493(v923, v924, v925, v926, v927, v928, v929, 1, v931, v932, v933, v935, v958, v936, v944, v937, v945, v938, v946, v939, v947, v940, v948, v949, v950, v951, v952, v953, v955, v829, v831, 0, v956, v816, v817, 3, 7, 2, 4, 8) :|: TRUE
f_493(v798, v799, v800, v801, v802, v803, v804, 1, v806, v807, v808, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, v829, v831, 0, v832, v816, v817, 3, 7, 2, 4, 8) -> f_495(v798, v799, v800, v801, v802, v803, v804, 1, v806, v807, v808, v809, v810, v811, v819, v812, v820, v813, v821, v814, v822, v815, v823, v824, v825, v826, v827, v828, v830, v829, v831, 0, v832, v816, v817, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_495(v798:0, v799:0, v800:0, v801:0, v802:0, v803:0, v804:0, 1, v806:0, v807:0, v808:0, v809:0, 1 + v958:0, v811:0, v819:0, v812:0, v820:0, v813:0, v821:0, v814:0, v822:0, v815:0, v823:0, v824:0, v825:0, v826:0, v827:0, v828:0, v830:0, v829:0, v831:0, 0, v832:0, v816:0, v817:0, 3, 7, 2, 4, 8) -> f_495(v798:0, v799:0, v800:0, v801:0, v802:0, v803:0, v804:0, 1, v849:0, v808:0, 1 + v808:0, 1 + v958:0, v958:0, v811:0, v819:0, v812:0, v820:0, v813:0, v821:0, v814:0, v822:0, v815:0, v823:0, v824:0, v825:0, v826:0, v827:0, v828:0, v830:0, v829:1, v831:1, 0, v832:0, v816:1, v817:1, 3, 7, 2, 4, 8) :|: v958:0 > 0 && v808:0 > 2 && v800:0 > 2 && v824:0 > 2
Filtered unneeded arguments:
   f_495(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40) -> f_495(x3, x11, x13, x24)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_495(v800:0, v808:0, sum~cons_1~v958:0, v824:0) -> f_495(v800:0, 1 + v808:0, v958:0, v824:0) :|: v808:0 > 2 && v958:0 > 0 && v824:0 > 2 && v800:0 > 2 && sum~cons_1~v958:0 = 1 + v958:0

----------------------------------------

(8)
Obligation:
Rules:
f_495(v800:0, v808:0, sum~cons_1~v958:0, v824:0) -> f_495(v800:0, 1 + v808:0, v958:0, v824:0) :|: v808:0 > 2 && v958:0 > 0 && v824:0 > 2 && v800:0 > 2 && sum~cons_1~v958:0 = 1 + v958:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_495(v800:0:0, v808:0:0, sum~cons_1~v958:0:0, v824:0:0) -> f_495(v800:0:0, 1 + v808:0:0, v958:0:0, v824:0:0) :|: v824:0:0 > 2 && v800:0:0 > 2 && v958:0:0 > 0 && v808:0:0 > 2 && sum~cons_1~v958:0:0 = 1 + v958:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_495(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_495(v800:0:0, v808:0:0, sum~cons_1~v958:0:0, v824:0:0) -> f_495(v800:0:0, 1 + v808:0:0, v958:0:0, v824:0:0) :|: v824:0:0 > 2 && v800:0:0 > 2 && v958:0:0 > 0 && v808:0:0 > 2 && sum~cons_1~v958:0:0 = 1 + v958:0:0
The following rules are bounded:
f_495(v800:0:0, v808:0:0, sum~cons_1~v958:0:0, v824:0:0) -> f_495(v800:0:0, 1 + v808:0:0, v958:0:0, v824:0:0) :|: v824:0:0 > 2 && v800:0:0 > 2 && v958:0:0 > 0 && v808:0:0 > 2 && sum~cons_1~v958:0:0 = 1 + v958:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
