YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/CyvT0.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 40 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1534 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 44 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 12 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/CyvT0.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/CyvT0.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %7
		%14 = load %3
		%15 = load %5
		store %14, %15
		%16 = load %4
		%17 = load %6
		store %16, %17
		%18 = load %7
		store 0, %18
		br %19
	19:
		%20 = load %5
		%21 = load %20
		%22 = load %6
		%23 = load %22
		%24 = icmp sgt %21 %23
		br %24, %25, %34
	25:
		%26 = load %5
		%27 = load %26
		%28 = sub i32 %27, 1
		%29 = load %5
		store %28, %29
		%30 = load %7
		%31 = load %30
		%32 = add i32 %31, 1
		%33 = load %7
		store %32, %33
		br %19
	34:
		%35 = load %7
		%36 = load %35
		ret %36

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 56
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_383(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, 1, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) -> f_384(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v192, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) :|: 0 = 0
f_384(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v192, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) -> f_385(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v192, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) :|: 0 = 0
f_385(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v192, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) -> f_386(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v192, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) :|: 0 = 0
f_386(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v192, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) -> f_387(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v192, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) :|: v183 < v194
f_387(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v192, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) -> f_389(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v192, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) :|: 0 = 0
f_389(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v192, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) -> f_391(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v192, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) :|: TRUE
f_391(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v192, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) -> f_393(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v192, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) :|: 0 = 0
f_393(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v192, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) -> f_395(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) :|: 0 = 0
f_395(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) -> f_397(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) :|: 1 + v208 = v194
f_397(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) -> f_399(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) :|: 0 = 0
f_399(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) -> f_400(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) :|: TRUE
f_400(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) -> f_401(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) :|: 0 = 0
f_401(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) -> f_402(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) :|: 0 = 0
f_402(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) -> f_403(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v196, v210, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8, 2) :|: v210 = 1 + v196 && 2 <= v210
f_403(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v196, v210, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8, 2) -> f_404(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v196, v210, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_404(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v196, v210, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8, 2) -> f_405(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v196, v210, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8, 2) :|: TRUE
f_405(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v196, v210, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8, 2) -> f_406(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v196, v210, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8, 2) :|: TRUE
f_406(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v196, v210, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8, 2) -> f_382(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v194, 1, v208, v196, v210, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) :|: TRUE
f_382(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, 1, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) -> f_383(v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, 1, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_383(v182:0, v183:0, v184:0, v185:0, v186:0, v187:0, v188:0, v189:0, v190:0, v191:0, v192:0, 1, 1 + v208:0, v195:0, v196:0, v197:0, v198:0, v199:0, v200:0, v201:0, v202:0, v203:0, v204:0, v205:0, v206:0, 0, 3, 7, 4, 8) -> f_383(v182:0, v183:0, v184:0, v185:0, v186:0, v187:0, v188:0, v189:0, v190:0, v191:0, 1 + v208:0, 1, v208:0, v196:0, 1 + v196:0, v197:0, v198:0, v199:0, v200:0, v201:0, v202:0, v203:0, v204:0, v205:0, v206:0, 0, 3, 7, 4, 8) :|: v196:0 > 0 && v183:0 < 1 + v208:0
Filtered unneeded arguments:
   f_383(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_383(x2, x13, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_383(v183:0, sum~cons_1~v208:0, v196:0) -> f_383(v183:0, v208:0, 1 + v196:0) :|: v196:0 > 0 && v183:0 < 1 + v208:0 && sum~cons_1~v208:0 = 1 + v208:0

----------------------------------------

(8)
Obligation:
Rules:
f_383(v183:0, sum~cons_1~v208:0, v196:0) -> f_383(v183:0, v208:0, 1 + v196:0) :|: v196:0 > 0 && v183:0 < 1 + v208:0 && sum~cons_1~v208:0 = 1 + v208:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_383(v183:0:0, sum~cons_1~v208:0:0, v196:0:0) -> f_383(v183:0:0, v208:0:0, 1 + v196:0:0) :|: v196:0:0 > 0 && v183:0:0 < 1 + v208:0:0 && sum~cons_1~v208:0:0 = 1 + v208:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_383 ] = -1*f_383_1 + f_383_2

The following rules are decreasing:
f_383(v183:0:0, sum~cons_1~v208:0:0, v196:0:0) -> f_383(v183:0:0, v208:0:0, 1 + v196:0:0) :|: v196:0:0 > 0 && v183:0:0 < 1 + v208:0:0 && sum~cons_1~v208:0:0 = 1 + v208:0:0

The following rules are bounded:
f_383(v183:0:0, sum~cons_1~v208:0:0, v196:0:0) -> f_383(v183:0:0, v208:0:0, 1 + v196:0:0) :|: v196:0:0 > 0 && v183:0:0 < 1 + v208:0:0 && sum~cons_1~v208:0:0 = 1 + v208:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
