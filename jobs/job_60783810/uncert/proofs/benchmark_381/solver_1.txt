YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/HYoMv.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 895 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 16 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/HYoMv.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/HYoMv.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 1, %3
		store 10000, %2
		br %4
	4:
		%5 = load %2
		%6 = load %3
		%7 = sub i32 %5, %6
		%8 = icmp sge %7 1
		br %8, %9, %14
	9:
		%10 = load %3
		%11 = add i32 %10, 1
		store %11, %3
		%12 = load %2
		%13 = sub i32 %12, 1
		store %13, %2
		br %4
	14:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_147(v61, v62, v63, v69, v65, v66, 1, v68, v64, v70, v71, v72, 0, 3, 2, 10000, 9999, 4) -> f_148(v61, v62, v63, v69, v68, v66, 1, v65, v64, v70, v71, v72, 0, 3, 2, 10000, 9999, 4) :|: 0 = 0
f_148(v61, v62, v63, v69, v68, v66, 1, v65, v64, v70, v71, v72, 0, 3, 2, 10000, 9999, 4) -> f_149(v61, v62, v63, v69, v68, v74, 1, v65, v64, v70, v71, v72, 0, 3, 2, 10000, 9999, 4, 9997) :|: v74 + v68 = v69 && 0 <= 9999 + v74 && v74 <= 9997
f_149(v61, v62, v63, v69, v68, v74, 1, v65, v64, v70, v71, v72, 0, 3, 2, 10000, 9999, 4, 9997) -> f_150(v61, v62, v63, v69, v68, v74, 1, v65, v64, v70, v71, v72, 0, 3, 4, 10000, 9997, 2, 9998, 9999) :|: 1 <= v74 && v68 <= 9998 && 3 <= v69 && v65 <= 9997 && 4 <= v64
f_150(v61, v62, v63, v69, v68, v74, 1, v65, v64, v70, v71, v72, 0, 3, 4, 10000, 9997, 2, 9998, 9999) -> f_152(v61, v62, v63, v69, v68, v74, 1, v65, v64, v70, v71, v72, 0, 3, 4, 10000, 9997, 2, 9998, 9999) :|: 0 = 0
f_152(v61, v62, v63, v69, v68, v74, 1, v65, v64, v70, v71, v72, 0, 3, 4, 10000, 9997, 2, 9998, 9999) -> f_154(v61, v62, v63, v69, v68, v74, 1, v65, v64, v70, v71, v72, 0, 3, 4, 10000, 9997, 2, 9998, 9999) :|: TRUE
f_154(v61, v62, v63, v69, v68, v74, 1, v65, v64, v70, v71, v72, 0, 3, 4, 10000, 9997, 2, 9998, 9999) -> f_156(v61, v62, v63, v69, v68, v74, 1, v64, v70, v71, v72, 0, 3, 4, 10000, 2, 9998, 9999, 9997) :|: 0 = 0
f_156(v61, v62, v63, v69, v68, v74, 1, v64, v70, v71, v72, 0, 3, 4, 10000, 2, 9998, 9999, 9997) -> f_157(v61, v62, v63, v69, v68, v74, 1, v75, v64, v70, v71, v72, 0, 3, 4, 10000, 2, 9998, 9999, 9997) :|: v75 = 1 + v68 && 3 <= v75 && v75 <= 9999
f_157(v61, v62, v63, v69, v68, v74, 1, v75, v64, v70, v71, v72, 0, 3, 4, 10000, 2, 9998, 9999, 9997) -> f_158(v61, v62, v63, v69, v68, v74, 1, v75, v64, v70, v71, v72, 0, 3, 4, 10000, 2, 9998, 9999, 9997) :|: TRUE
f_158(v61, v62, v63, v69, v68, v74, 1, v75, v64, v70, v71, v72, 0, 3, 4, 10000, 2, 9998, 9999, 9997) -> f_159(v61, v62, v63, v69, v68, v74, 1, v75, v70, v71, v72, 0, 3, 2, 9998, 9999, 4, 9997) :|: 0 = 0
f_159(v61, v62, v63, v69, v68, v74, 1, v75, v70, v71, v72, 0, 3, 2, 9998, 9999, 4, 9997) -> f_160(v61, v62, v63, v69, v68, v74, 1, v75, v77, v70, v71, v72, 0, 3, 2, 9998, 9999, 4, 9997) :|: 1 + v77 = v69 && 2 <= v77 && v77 <= 9998
f_160(v61, v62, v63, v69, v68, v74, 1, v75, v77, v70, v71, v72, 0, 3, 2, 9998, 9999, 4, 9997) -> f_161(v61, v62, v63, v69, v68, v74, 1, v75, v77, v70, v71, v72, 0, 3, 2, 9998, 9999, 4, 9997) :|: TRUE
f_161(v61, v62, v63, v69, v68, v74, 1, v75, v77, v70, v71, v72, 0, 3, 2, 9998, 9999, 4, 9997) -> f_162(v61, v62, v63, v69, v68, v74, 1, v75, v77, v70, v71, v72, 0, 3, 2, 9998, 9999, 4, 9997) :|: TRUE
f_162(v61, v62, v63, v69, v68, v74, 1, v75, v77, v70, v71, v72, 0, 3, 2, 9998, 9999, 4, 9997) -> f_146(v61, v62, v63, v69, v68, v74, 1, v75, v77, v70, v71, v72, 0, 3, 2, 10000, 9999, 4) :|: TRUE
f_146(v61, v62, v63, v64, v65, v66, 1, v68, v69, v70, v71, v72, 0, 3, 2, 10000, 9999, 4) -> f_147(v61, v62, v63, v69, v65, v66, 1, v68, v64, v70, v71, v72, 0, 3, 2, 10000, 9999, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_147(v61:0, v62:0, v63:0, 1 + v77:0, v65:0, v66:0, 1, v68:0, v64:0, v70:0, v71:0, v72:0, 0, 3, 2, 10000, 9999, 4) -> f_147(v61:0, v62:0, v63:0, v77:0, v68:0, v74:0, 1, 1 + v68:0, 1 + v77:0, v70:0, v71:0, v72:0, 0, 3, 2, 10000, 9999, 4) :|: v74:0 > 0 && v68:0 < 9999 && v77:0 > 1 && v74:0 + v68:0 = 1 + v77:0 && v65:0 < 9998 && v74:0 < 9998 && v64:0 > 3 && v68:0 > 1 && v77:0 < 9999
Filtered unneeded arguments:
   f_147(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_147(x4, x5, x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_147(sum~cons_1~v77:0, v65:0, v68:0, v64:0) -> f_147(v77:0, v68:0, 1 + v68:0, 1 + v77:0) :|: v77:0 > 1 && v68:0 < 9999 && v65:0 < 9998 && v64:0 > 3 && v77:0 < 9999 && v68:0 > 1 && sum~cons_1~v77:0 = 1 + v77:0

----------------------------------------

(8)
Obligation:
Rules:
f_147(sum~cons_1~v77:0, v65:0, v68:0, v64:0) -> f_147(v77:0, v68:0, 1 + v68:0, 1 + v77:0) :|: v77:0 > 1 && v68:0 < 9999 && v65:0 < 9998 && v64:0 > 3 && v77:0 < 9999 && v68:0 > 1 && sum~cons_1~v77:0 = 1 + v77:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_147(sum~cons_1~v77:0:0, v65:0:0, v68:0:0, v64:0:0) -> f_147(v77:0:0, v68:0:0, 1 + v68:0:0, 1 + v77:0:0) :|: v77:0:0 < 9999 && v68:0:0 > 1 && v64:0:0 > 3 && v65:0:0 < 9998 && v68:0:0 < 9999 && v77:0:0 > 1 && sum~cons_1~v77:0:0 = 1 + v77:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_147(x, x1, x2, x3)] = x

The following rules are decreasing:
f_147(sum~cons_1~v77:0:0, v65:0:0, v68:0:0, v64:0:0) -> f_147(v77:0:0, v68:0:0, 1 + v68:0:0, 1 + v77:0:0) :|: v77:0:0 < 9999 && v68:0:0 > 1 && v64:0:0 > 3 && v65:0:0 < 9998 && v68:0:0 < 9999 && v77:0:0 > 1 && sum~cons_1~v77:0:0 = 1 + v77:0:0
The following rules are bounded:
f_147(sum~cons_1~v77:0:0, v65:0:0, v68:0:0, v64:0:0) -> f_147(v77:0:0, v68:0:0, 1 + v68:0:0, 1 + v77:0:0) :|: v77:0:0 < 9999 && v68:0:0 > 1 && v64:0:0 > 3 && v65:0:0 < 9998 && v68:0:0 < 9999 && v77:0:0 > 1 && sum~cons_1~v77:0:0 = 1 + v77:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
