YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Bw4tq.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 59 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2232 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 112 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 9 ms]
        (13) AND
            (14) IntTRS
                (15) TerminationGraphProcessor [EQUIVALENT, 4 ms]
                (16) IntTRS
                (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (18) IntTRS
                (19) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (20) IntTRS
                (21) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
                (22) YES
            (23) IntTRS
                (24) TerminationGraphProcessor [EQUIVALENT, 0 ms]
                (25) IntTRS
                (26) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (27) IntTRS
                (28) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (29) IntTRS
                (30) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
                (31) YES
    (32) LLVM Symbolic Execution SCC
        (33) SCC2IRS [SOUND, 62 ms]
        (34) IntTRS
        (35) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (36) IntTRS
        (37) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (38) YES
    (39) LLVM Symbolic Execution SCC
        (40) SCC2IRS [SOUND, 53 ms]
        (41) IntTRS
        (42) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (43) IntTRS
        (44) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (45) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Bw4tq.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Bw4tq.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_String" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i8, align 8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %1
		%4 = load %1
		%5 = icmp slt %4 1
		br %5, %6, %7
	6:
		store 1, %1
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		%8 = load %1
		%9 = sext i32 %8 to i64
		%10 = mul i64 %9, 1
		%11 = call noalias *i8 @malloc(i64 %10)
		store %11, %2
		%12 = load %2
		%13 = load %1
		%14 = sub i32 %13, 1
		%15 = sext i32 %14 to i64
		%16 = getelementptr %12, %15
		store 0, %16
		%17 = load %2
		ret %17

*BasicFunctionTypename: "cstrspn" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 36
	0:
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		%6 = alloca *i8, align 8
		%7 = alloca *i8, align 8
		%8 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		%9 = load %4
		store %9, %6
		br %10
	10:
		%11 = load %6
		%12 = load %11
		%13 = sext i8 %12 to i32
		%14 = icmp ne %13 0
		br %14, %15, %55
	15:
		%16 = load %5
		store %16, %7
		%17 = load %6
		%18 = load %17
		%19 = sext i8 %18 to i32
		store %19, %8
		br %20
	20:
		%21 = load %7
		%22 = load %21
		%23 = sext i8 %22 to i32
		%24 = icmp ne %23 0
		br %24, %25, %33
	25:
		%26 = load %7
		%27 = load %26
		%28 = sext i8 %27 to i32
		%29 = load %8
		%30 = trunc i32 %29 to i8
		%31 = sext i8 %30 to i32
		%32 = icmp ne %28 %31
		br %33
	33:
		%34 = phi [0, %20], [%32, %25]
		br %34, %35, %38
	35:
		%36 = load %7
		%37 = getelementptr %36, 1
		store %37, %7
		br %20
	38:
		%39 = load %7
		%40 = load %39
		%41 = sext i8 %40 to i32
		%42 = load %8
		%43 = icmp ne %41 %42
		br %43, %44, %51
	44:
		%45 = load %6
		%46 = load %4
		%47 = ptrtoint *i8 %45 to i64
		%48 = ptrtoint *i8 %46 to i64
		%49 = sub i64 %47, %48
		%50 = trunc i64 %49 to i32
		store %50, %3
		br %62
	51:
		br %52
	52:
		%53 = load %6
		%54 = getelementptr %53, 1
		store %54, %6
		br %10
	55:
		%56 = load %6
		%57 = load %4
		%58 = ptrtoint *i8 %56 to i64
		%59 = ptrtoint *i8 %57 to i64
		%60 = sub i64 %58, %59
		%61 = trunc i64 %60 to i32
		store %61, %3
		br %62
	62:
		%63 = load %3
		ret %63

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 100
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call *i8 @__VERIFIER_nondet_String()
		%3 = call *i8 @__VERIFIER_nondet_String()
		%4 = call i32 @cstrspn(*i8 %2, *i8 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 73 rulesP rules:
f_1012(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3847, v3846, v3848, v3849, v3850, 0, v3852, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) -> f_1015(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3847, v3846, v3848, v3849, v3850, 0, v3852, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) :|: TRUE
f_1015(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3847, v3846, v3848, v3849, v3850, 0, v3852, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) -> f_1018(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3846, v3847, v3848, v3849, v3850, 0, v3852, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) :|: 0 = 0
f_1018(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3846, v3847, v3848, v3849, v3850, 0, v3852, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) -> f_1021(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3846, v3847, v3848, v3849, v3850, 0, v3852, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) :|: v3881 != 0 && v3853 < v3857 && 3 <= v3857
f_1021(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3846, v3847, v3848, v3849, v3850, 0, v3852, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) -> f_1025(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3846, v3847, v3848, v3849, v3850, 0, v3852, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) :|: 0 = 0
f_1025(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3846, v3847, v3848, v3849, v3850, 0, v3852, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) -> f_1029(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3846, v3847, v3848, v3849, v3850, 0, v3852, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) :|: TRUE
f_1029(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3846, v3847, v3848, v3849, v3850, 0, v3852, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) -> f_1033(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3847, v3848, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) :|: 0 = 0
f_1033(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3847, v3848, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) -> f_1037(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3847, v3848, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) :|: 0 = 0
f_1037(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3847, v3848, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) -> f_1041(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3848, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) :|: 0 = 0
f_1041(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3848, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) -> f_1045(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3848, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) :|: 0 = 0
f_1045(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v3848, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) -> f_1049(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v4217, v3848, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) :|: TRUE
f_1049(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v4217, v3848, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) -> f_1053(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v4217, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) :|: 0 = 0
f_1053(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v4217, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) -> f_1058(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v4217, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) :|: v3881 != v4217
f_1053(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v4217, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) -> f_1059(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v4217, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) :|: v3881 = v4217
f_1058(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v4217, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) -> f_1064(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v4217, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) :|: 0 = 0
f_1064(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v4217, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) -> f_1069(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v4217, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) :|: 0 = 0
f_1069(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v4217, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) -> f_1070(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3881, v4217, v3846, v3853, v3849, v3850, 0, v3852, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, v3881, 3, 7, 2, 4, 8) :|: TRUE
f_1070(v4525, v4526, v4527, v4528, v4529, v4530, v4531, v4532, v4533, v4534, 1, v4536, v4537, v4538, v4539, v4540, v4541, v4542, 0, v4544, v4545, v4546, v4547, v4548, v4549, v4550, v4551, v4552, v4553, v4554, v4555, v4556, v4557, v4558, 3, 7, 2, 4, 8) -> f_1075(v4525, v4526, v4527, v4528, v4529, v4530, v4531, v4532, v4533, v4534, 1, v4536, v4537, v4538, v4539, v4540, v4541, v4542, 0, v4544, v4545, v4546, v4547, v4548, v4549, v4550, v4551, v4552, v4553, v4554, v4555, v4556, v4557, v4558, 3, 7, 2, 4, 8) :|: TRUE
f_1075(v4525, v4526, v4527, v4528, v4529, v4530, v4531, v4532, v4533, v4534, 1, v4536, v4537, v4538, v4539, v4540, v4541, v4542, 0, v4544, v4545, v4546, v4547, v4548, v4549, v4550, v4551, v4552, v4553, v4554, v4555, v4556, v4557, v4558, 3, 7, 2, 4, 8) -> f_1080(v4525, v4526, v4527, v4528, v4529, v4530, v4531, v4532, v4533, v4534, 1, v4536, v4537, v4538, v4540, v4541, v4542, 0, v4544, v4545, v4546, v4547, v4548, v4549, v4550, v4551, v4552, v4553, v4554, v4555, v4556, v4539, v4557, v4558, 3, 7, 2, 4, 8) :|: 0 = 0
f_1080(v4525, v4526, v4527, v4528, v4529, v4530, v4531, v4532, v4533, v4534, 1, v4536, v4537, v4538, v4540, v4541, v4542, 0, v4544, v4545, v4546, v4547, v4548, v4549, v4550, v4551, v4552, v4553, v4554, v4555, v4556, v4539, v4557, v4558, 3, 7, 2, 4, 8) -> f_1085(v4525, v4526, v4527, v4528, v4529, v4530, v4531, v4532, v4533, v4534, 1, v4536, v4537, v4538, v4820, v4541, v4542, 0, v4544, v4545, v4546, v4547, v4548, v4549, v4550, v4551, v4552, v4553, v4554, v4555, v4556, v4539, v4557, v4540, v4558, 3, 7, 2, 4, 8) :|: v4820 = 1 + v4536 && 2 <= v4820
f_1085(v4525, v4526, v4527, v4528, v4529, v4530, v4531, v4532, v4533, v4534, 1, v4536, v4537, v4538, v4820, v4541, v4542, 0, v4544, v4545, v4546, v4547, v4548, v4549, v4550, v4551, v4552, v4553, v4554, v4555, v4556, v4539, v4557, v4540, v4558, 3, 7, 2, 4, 8) -> f_1090(v4525, v4526, v4527, v4528, v4529, v4530, v4531, v4532, v4533, v4534, 1, v4536, v4537, v4538, v4820, v4541, v4542, 0, v4544, v4545, v4546, v4547, v4548, v4549, v4550, v4551, v4552, v4553, v4554, v4555, v4556, v4539, v4557, v4540, v4558, 3, 7, 2, 4, 8) :|: TRUE
f_1090(v4525, v4526, v4527, v4528, v4529, v4530, v4531, v4532, v4533, v4534, 1, v4536, v4537, v4538, v4820, v4541, v4542, 0, v4544, v4545, v4546, v4547, v4548, v4549, v4550, v4551, v4552, v4553, v4554, v4555, v4556, v4539, v4557, v4540, v4558, 3, 7, 2, 4, 8) -> f_1095(v4525, v4526, v4527, v4528, v4529, v4530, v4531, v4532, v4533, v4534, 1, v4536, v4537, v4538, v4820, v4541, v4542, 0, v4544, v4545, v4546, v4547, v4548, v4549, v4550, v4551, v4552, v4553, v4554, v4555, v4556, v4539, v4557, v4540, v4558, 3, 7, 2, 4, 8) :|: TRUE
f_1095(v4525, v4526, v4527, v4528, v4529, v4530, v4531, v4532, v4533, v4534, 1, v4536, v4537, v4538, v4820, v4541, v4542, 0, v4544, v4545, v4546, v4547, v4548, v4549, v4550, v4551, v4552, v4553, v4554, v4555, v4556, v4539, v4557, v4540, v4558, 3, 7, 2, 4, 8) -> f_1010(v4525, v4526, v4527, v4528, v4529, v4530, v4531, v4532, v4533, v4534, 1, v4536, v4537, v4538, v4541, v4542, 0, v4544, v4820, v4545, v4546, v4547, v4548, v4549, v4550, v4551, v4552, v4553, v4554, v4555, v4556, 3, 7, 2, 4, 8) :|: TRUE
f_1010(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3846, v3847, v3848, v3849, v3850, 0, v3852, v3853, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) -> f_1012(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v3847, v3846, v3848, v3849, v3850, 0, v3852, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, 3, 7, 2, 4, 8) :|: 0 = 0
f_1059(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v4217, v3849, v3850, 0, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) -> f_1065(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v4217, 0, v3849, v3850, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) :|: 0 = 0
f_1065(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v4217, 0, v3849, v3850, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) -> f_1071(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v4217, 0, v3849, v3850, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) :|: 0 = 0
f_1071(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v4217, 0, v3849, v3850, v3852, v3846, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3847, 3, 7, 2, 4, 8) -> f_1191(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842, v3843, v3844, 1, v3853, v4217, 0, v3849, v3850, v3852, v3846, v3853, v3854, v3855, v3856, v3857, v3858, v3859, v3860, v3861, v3862, v3863, v3864, v3865, v4217, v3847, 3, 7, 2, 4, 8) :|: TRUE
f_1191(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, v6742, 0, v6744, v6745, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6762, 3, 7, 2, 4, 8) -> f_1192(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, v6742, 0, v6744, v6745, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6762, 3, 7, 2, 4, 8) :|: TRUE
f_1192(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, v6742, 0, v6744, v6745, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6762, 3, 7, 2, 4, 8) -> f_1193(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, v6742, 0, v6745, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6762, 3, 7, 2, 4, 8) :|: 0 = 0
f_1193(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, v6742, 0, v6745, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6762, 3, 7, 2, 4, 8) -> f_1194(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, v6742, 0, v6745, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6762, 3, 7, 2, 4, 8) :|: 0 = 0
f_1194(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, v6742, 0, v6745, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6762, 3, 7, 2, 4, 8) -> f_1195(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, v6742, 0, v6745, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6762, 3, 7, 2, 4, 8) :|: 0 = 0
f_1195(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, v6742, 0, v6745, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6762, 3, 7, 2, 4, 8) -> f_1196(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, v6742, 0, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6762, 3, 7, 2, 4, 8) :|: 0 = 0
f_1196(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, v6742, 0, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6762, 3, 7, 2, 4, 8) -> f_1198(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6762, 3, 7, 2, 4, 8) :|: v6742 = v6739
f_1198(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6762, 3, 7, 2, 4, 8) -> f_1200(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6762, 3, 7, 2, 4, 8) :|: 0 = 0
f_1200(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6762, 3, 7, 2, 4, 8) -> f_1202(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6762, 3, 7, 2, 4, 8) :|: TRUE
f_1202(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6762, 3, 7, 2, 4, 8) -> f_1204(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6762, 3, 7, 2, 4, 8) :|: TRUE
f_1204(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6746, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6762, 3, 7, 2, 4, 8) -> f_1206(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: 0 = 0
f_1206(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1208(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6905, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: v6905 = 1 + v6738 && 3 <= v6905
f_1208(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6905, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1210(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6905, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: TRUE
f_1210(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6905, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1212(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6905, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: TRUE
f_1212(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6738, v6739, 1, v6741, 0, v6905, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1214(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6739, 1, v6738, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: 0 = 0
f_1214(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6739, 1, v6738, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1216(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, v6739, 1, v6738, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: TRUE
f_1216(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, v6739, 1, v6738, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1218(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6738, v6739, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: 0 = 0
f_1218(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6738, v6739, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1220(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6738, v6739, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: v6952 != 0 && v6905 < v6751 && 4 <= v6751
f_1220(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6738, v6739, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1223(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6738, v6739, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: 0 = 0
f_1223(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6738, v6739, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1225(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6738, v6739, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: TRUE
f_1225(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6738, v6739, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1227(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6738, v6739, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: 0 = 0
f_1227(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6738, v6739, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1229(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6738, v6739, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: TRUE
f_1229(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6738, v6739, v6741, 0, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1231(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6739, v6741, 0, v6738, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: 0 = 0
f_1231(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6739, v6741, 0, v6738, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1233(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6739, v6741, 0, v6738, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: 0 = 0
f_1233(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6739, v6741, 0, v6738, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1235(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6741, v6739, 0, v6738, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: 0 = 0
f_1235(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6741, v6739, 0, v6738, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1237(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6741, v6739, 0, v6738, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: TRUE
f_1237(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6741, v6739, 0, v6738, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1239(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6741, v6739, 0, v6738, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) :|: TRUE
f_1239(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6741, v6739, 0, v6738, v6747, v6748, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6761, v6744, v6745, v6746, v6762, 3, 7, 2, 4, 8) -> f_1168(v6730, v6731, v6732, v6733, v6734, v6735, v6736, v6737, v6905, v6952, 1, v6741, v6739, 0, v6747, v6748, v6738, v6749, v6750, v6751, v6752, v6753, v6754, v6755, v6756, v6757, v6758, v6759, v6760, v6762, v6761, 3, 7, 2, 4, 8) :|: TRUE
f_1168(v6135, v6136, v6137, v6138, v6139, v6140, v6141, v6142, v6143, v6144, 1, v6146, v6147, 0, v6149, v6150, v6151, v6152, v6153, v6154, v6155, v6156, v6157, v6158, v6159, v6160, v6161, v6162, v6163, v6164, v6165, 3, 7, 2, 4, 8) -> f_1170(v6135, v6136, v6137, v6138, v6139, v6140, v6141, v6142, v6143, v6144, 1, v6147, v6146, 0, v6149, v6150, v6151, v6152, v6153, v6154, v6155, v6156, v6157, v6158, v6159, v6160, v6161, v6162, v6163, v6164, v6165, 3, 7, 2, 4, 8) :|: 0 = 0
f_1170(v6135, v6136, v6137, v6138, v6139, v6140, v6141, v6142, v6143, v6144, 1, v6147, v6146, 0, v6149, v6150, v6151, v6152, v6153, v6154, v6155, v6156, v6157, v6158, v6159, v6160, v6161, v6162, v6163, v6164, v6165, 3, 7, 2, 4, 8) -> f_1172(v6135, v6136, v6137, v6138, v6139, v6140, v6141, v6142, v6143, v6144, 1, v6163, v6147, v6146, 0, v6149, v6150, v6151, v6152, v6153, v6154, v6155, v6156, v6157, v6158, v6159, v6160, v6161, v6162, v6164, v6165, 3, 7, 2, 4, 8) :|: 0 = 0
f_1172(v6135, v6136, v6137, v6138, v6139, v6140, v6141, v6142, v6143, v6144, 1, v6163, v6147, v6146, 0, v6149, v6150, v6151, v6152, v6153, v6154, v6155, v6156, v6157, v6158, v6159, v6160, v6161, v6162, v6164, v6165, 3, 7, 2, 4, 8) -> f_1174(v6135, v6136, v6137, v6138, v6139, v6140, v6141, v6142, v6143, v6144, 1, v6163, v6146, v6147, 0, v6149, v6150, v6151, v6152, v6153, v6154, v6155, v6156, v6157, v6158, v6159, v6160, v6161, v6162, v6164, v6165, 3, 7, 2, 4, 8) :|: 0 = 0
f_1174(v6135, v6136, v6137, v6138, v6139, v6140, v6141, v6142, v6143, v6144, 1, v6163, v6146, v6147, 0, v6149, v6150, v6151, v6152, v6153, v6154, v6155, v6156, v6157, v6158, v6159, v6160, v6161, v6162, v6164, v6165, 3, 7, 2, 4, 8) -> f_1176(v6135, v6136, v6137, v6138, v6139, v6140, v6141, v6142, v6143, v6144, 1, v6163, v6146, v6147, 0, v6149, v6150, v6151, v6152, v6153, v6154, v6155, v6156, v6157, v6158, v6159, v6160, v6161, v6162, v6164, v6165, 3, 7, 2, 4, 8) :|: 0 = 0
f_1176(v6135, v6136, v6137, v6138, v6139, v6140, v6141, v6142, v6143, v6144, 1, v6163, v6146, v6147, 0, v6149, v6150, v6151, v6152, v6153, v6154, v6155, v6156, v6157, v6158, v6159, v6160, v6161, v6162, v6164, v6165, 3, 7, 2, 4, 8) -> f_1177(v6135, v6136, v6137, v6138, v6139, v6140, v6141, v6142, v6143, v6144, 1, v6163, v6146, v6147, 0, v6149, v6150, v6151, v6152, v6153, v6154, v6155, v6156, v6157, v6158, v6159, v6160, v6161, v6162, v6164, v6165, 3, 7, 2, 4, 8) :|: TRUE
f_1177(v6135, v6136, v6137, v6138, v6139, v6140, v6141, v6142, v6143, v6144, 1, v6163, v6146, v6147, 0, v6149, v6150, v6151, v6152, v6153, v6154, v6155, v6156, v6157, v6158, v6159, v6160, v6161, v6162, v6164, v6165, 3, 7, 2, 4, 8) -> f_1178(v6135, v6136, v6137, v6138, v6139, v6140, v6141, v6142, v6143, v6144, 1, v6163, v6146, v6147, 0, v6149, v6150, v6151, v6152, v6153, v6154, v6155, v6156, v6157, v6158, v6159, v6160, v6161, v6162, v6164, v6165, 3, 7, 2, 4, 8) :|: TRUE
f_1178(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6428, v6429, 0, v6431, v6432, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) -> f_1179(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6429, 0, v6431, v6432, v6428, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) :|: 0 = 0
f_1179(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6429, 0, v6431, v6432, v6428, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) -> f_1180(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6429, 0, v6431, v6432, v6428, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) :|: 0 = 0
f_1180(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6429, 0, v6431, v6432, v6428, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) -> f_1181(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6429, 0, v6431, v6432, v6428, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) :|: 0 = 0
f_1181(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6429, 0, v6431, v6432, v6428, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) -> f_1182(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6429, 0, v6431, v6432, v6428, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) :|: 0 = 0
f_1182(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6429, 0, v6431, v6432, v6428, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) -> f_1183(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6447, v6429, 0, v6431, v6432, v6428, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) :|: TRUE
f_1183(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6447, v6429, 0, v6431, v6432, v6428, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) -> f_1184(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6447, 0, v6431, v6432, v6428, v6429, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) :|: 0 = 0
f_1184(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6447, 0, v6431, v6432, v6428, v6429, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) -> f_1185(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6447, 0, v6431, v6432, v6428, v6429, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) :|: v6427 != v6447
f_1184(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6447, 0, v6431, v6432, v6428, v6429, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) -> f_1186(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6447, 0, v6431, v6432, v6428, v6429, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) :|: v6427 = v6447
f_1185(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6447, 0, v6431, v6432, v6428, v6429, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) -> f_1187(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6447, 0, v6431, v6432, v6428, v6429, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) :|: 0 = 0
f_1187(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6447, 0, v6431, v6432, v6428, v6429, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) -> f_1189(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6447, v6431, v6432, v6428, v6429, 0, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) :|: 0 = 0
f_1189(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6427, v6447, v6431, v6432, v6428, v6429, 0, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) -> f_1070(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6417, v6427, v6447, v6431, v6432, v6428, v6429, 0, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6427, v6445, v6446, 3, 7, 2, 4, 8) :|: TRUE
f_1186(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6447, 0, v6431, v6432, v6428, v6429, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) -> f_1188(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6447, 0, v6431, v6432, v6428, v6429, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) :|: 0 = 0
f_1188(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6447, 0, v6431, v6432, v6428, v6429, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) -> f_1190(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6447, 0, v6431, v6432, v6428, v6429, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) :|: 0 = 0
f_1190(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6447, 0, v6431, v6432, v6428, v6429, v6433, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6445, v6446, 3, 7, 2, 4, 8) -> f_1191(v6416, v6417, v6418, v6419, v6420, v6421, v6422, v6423, v6424, v6425, 1, v6417, v6447, 0, v6428, v6429, v6433, v6431, v6432, v6434, v6435, v6436, v6437, v6438, v6439, v6440, v6441, v6442, v6443, v6444, v6447, v6446, v6445, 3, 7, 2, 4, 8) :|: TRUE
Combined rules. Obtained 12 rulesP rules:
f_1012(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, v3843:0, v3844:0, 1, v3853:0, v3847:0, v3846:0, v3848:0, v3849:0, v3850:0, 0, v3852:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3865:0, 3, 7, 2, 4, 8) -> f_1184(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, 1 + v3843:0, v6952:0, 1, v3865:0, v6447:0, 0, v3846:0, v3853:0, v3853:0, v3844:0, v3843:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3847:0, v3844:0, 3, 7, 2, 4, 8) :|: v3857:0 > v3853:0 && v3844:0 < 0 && v3857:0 > 2 && v3843:0 > 1 && v3856:0 > 1 + v3843:0 && v3856:0 > 3 && v6952:0 < 0
f_1012(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, v3843:0, v3844:0, 1, v3853:0, v3847:0, v3846:0, v3848:0, v3849:0, v3850:0, 0, v3852:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3865:0, 3, 7, 2, 4, 8) -> f_1184(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, 1 + v3843:0, v6952:0, 1, v3865:0, v6447:0, 0, v3846:0, v3853:0, v3853:0, v3844:0, v3843:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3847:0, v3844:0, 3, 7, 2, 4, 8) :|: v3857:0 > v3853:0 && v3844:0 < 0 && v3857:0 > 2 && v3843:0 > 1 && v3856:0 > 1 + v3843:0 && v3856:0 > 3 && v6952:0 > 0
f_1012(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, v3843:0, v3844:0, 1, v3853:0, v3847:0, v3846:0, v3848:0, v3849:0, v3850:0, 0, v3852:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3865:0, 3, 7, 2, 4, 8) -> f_1184(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, 1 + v3843:0, v6952:0, 1, v3865:0, v6447:0, 0, v3846:0, v3853:0, v3853:0, v3844:0, v3843:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3847:0, v3844:0, 3, 7, 2, 4, 8) :|: v3857:0 > v3853:0 && v3844:0 > 0 && v3857:0 > 2 && v3843:0 > 1 && v3856:0 > 1 + v3843:0 && v3856:0 > 3 && v6952:0 < 0
f_1012(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, v3843:0, v3844:0, 1, v3853:0, v3847:0, v3846:0, v3848:0, v3849:0, v3850:0, 0, v3852:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3865:0, 3, 7, 2, 4, 8) -> f_1184(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, 1 + v3843:0, v6952:0, 1, v3865:0, v6447:0, 0, v3846:0, v3853:0, v3853:0, v3844:0, v3843:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3847:0, v3844:0, 3, 7, 2, 4, 8) :|: v3857:0 > v3853:0 && v3844:0 > 0 && v3857:0 > 2 && v3843:0 > 1 && v3856:0 > 1 + v3843:0 && v3856:0 > 3 && v6952:0 > 0
f_1184(v6416:0, v6417:0, v6418:0, v6419:0, v6420:0, v6421:0, v6422:0, v6423:0, v6424:0, v6425:0, 1, v6425:0, v6425:0, 0, v6431:0, v6432:0, v6428:0, v6429:0, v6433:0, v6434:0, v6435:0, v6436:0, v6437:0, v6438:0, v6439:0, v6440:0, v6441:0, v6442:0, v6443:0, v6444:0, v6445:0, v6446:0, 3, 7, 2, 4, 8) -> f_1184(v6416:0, v6417:0, v6418:0, v6419:0, v6420:0, v6421:0, v6422:0, v6423:0, 1 + v6424:0, v6952:0, 1, v6425:0, v6447:1, 0, v6431:0, v6432:0, v6417:0, v6425:0, v6424:0, v6434:0, v6435:0, v6436:0, v6437:0, v6438:0, v6439:0, v6440:0, v6441:0, v6442:0, v6443:0, v6444:0, v6445:0, v6446:0, 3, 7, 2, 4, 8) :|: v6424:0 > 1 && v6436:0 > 1 + v6424:0 && v6436:0 > 3 && v6952:0 < 0
f_1184(v6416:0, v6417:0, v6418:0, v6419:0, v6420:0, v6421:0, v6422:0, v6423:0, v6424:0, v6425:0, 1, v6425:0, v6425:0, 0, v6431:0, v6432:0, v6428:0, v6429:0, v6433:0, v6434:0, v6435:0, v6436:0, v6437:0, v6438:0, v6439:0, v6440:0, v6441:0, v6442:0, v6443:0, v6444:0, v6445:0, v6446:0, 3, 7, 2, 4, 8) -> f_1184(v6416:0, v6417:0, v6418:0, v6419:0, v6420:0, v6421:0, v6422:0, v6423:0, 1 + v6424:0, v6952:0, 1, v6425:0, v6447:1, 0, v6431:0, v6432:0, v6417:0, v6425:0, v6424:0, v6434:0, v6435:0, v6436:0, v6437:0, v6438:0, v6439:0, v6440:0, v6441:0, v6442:0, v6443:0, v6444:0, v6445:0, v6446:0, 3, 7, 2, 4, 8) :|: v6424:0 > 1 && v6436:0 > 1 + v6424:0 && v6436:0 > 3 && v6952:0 > 0
f_1184(v6416:0, v6417:0, v6418:0, v6419:0, v6420:0, v6421:0, v6422:0, v6423:0, v6424:0, v6425:0, 1, v6427:0, v6447:0, 0, v6431:0, v6432:0, v6428:0, v6429:0, v6433:0, v6434:0, v6435:0, v6436:0, v6437:0, v6438:0, v6439:0, v6440:0, v6441:0, v6442:0, v6443:0, v6444:0, v6445:0, v6446:0, 3, 7, 2, 4, 8) -> f_1012(v6416:0, v6417:0, v6418:0, v6419:0, v6420:0, v6421:0, v6422:0, v6423:0, v6424:0, v6425:0, 1, 1 + v6417:0, v6427:0, v6417:0, v6447:0, v6428:0, v6429:0, 0, v6433:0, v6434:0, v6435:0, v6436:0, v6437:0, v6438:0, v6439:0, v6440:0, v6441:0, v6442:0, v6443:0, v6444:0, v6427:0, 3, 7, 2, 4, 8) :|: v6447:0 > v6427:0 && v6417:0 > 0
f_1184(v6416:0, v6417:0, v6418:0, v6419:0, v6420:0, v6421:0, v6422:0, v6423:0, v6424:0, v6425:0, 1, v6427:0, v6447:0, 0, v6431:0, v6432:0, v6428:0, v6429:0, v6433:0, v6434:0, v6435:0, v6436:0, v6437:0, v6438:0, v6439:0, v6440:0, v6441:0, v6442:0, v6443:0, v6444:0, v6445:0, v6446:0, 3, 7, 2, 4, 8) -> f_1012(v6416:0, v6417:0, v6418:0, v6419:0, v6420:0, v6421:0, v6422:0, v6423:0, v6424:0, v6425:0, 1, 1 + v6417:0, v6427:0, v6417:0, v6447:0, v6428:0, v6429:0, 0, v6433:0, v6434:0, v6435:0, v6436:0, v6437:0, v6438:0, v6439:0, v6440:0, v6441:0, v6442:0, v6443:0, v6444:0, v6427:0, 3, 7, 2, 4, 8) :|: v6447:0 < v6427:0 && v6417:0 > 0
f_1012(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, v3843:0, v3844:0, 1, v3853:0, v3847:0, v3846:0, v3848:0, v3849:0, v3850:0, 0, v3852:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3865:0, 3, 7, 2, 4, 8) -> f_1012(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, v3843:0, v3844:0, 1, 1 + v3853:0, v3881:0, v3853:0, v4217:0, v3849:0, v3850:0, 0, v3852:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3865:0, 3, 7, 2, 4, 8) :|: v3857:0 > v3853:0 && v3881:0 < 0 && v3857:0 > 2 && v3853:0 > 0 && v4217:0 > v3881:0
f_1012(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, v3843:0, v3844:0, 1, v3853:0, v3847:0, v3846:0, v3848:0, v3849:0, v3850:0, 0, v3852:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3865:0, 3, 7, 2, 4, 8) -> f_1012(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, v3843:0, v3844:0, 1, 1 + v3853:0, v3881:0, v3853:0, v4217:0, v3849:0, v3850:0, 0, v3852:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3865:0, 3, 7, 2, 4, 8) :|: v3857:0 > v3853:0 && v3881:0 < 0 && v3857:0 > 2 && v3853:0 > 0 && v4217:0 < v3881:0
f_1012(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, v3843:0, v3844:0, 1, v3853:0, v3847:0, v3846:0, v3848:0, v3849:0, v3850:0, 0, v3852:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3865:0, 3, 7, 2, 4, 8) -> f_1012(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, v3843:0, v3844:0, 1, 1 + v3853:0, v3881:0, v3853:0, v4217:0, v3849:0, v3850:0, 0, v3852:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3865:0, 3, 7, 2, 4, 8) :|: v3857:0 > v3853:0 && v3881:0 > 0 && v3857:0 > 2 && v3853:0 > 0 && v4217:0 > v3881:0
f_1012(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, v3843:0, v3844:0, 1, v3853:0, v3847:0, v3846:0, v3848:0, v3849:0, v3850:0, 0, v3852:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3865:0, 3, 7, 2, 4, 8) -> f_1012(v3835:0, v3836:0, v3837:0, v3838:0, v3839:0, v3840:0, v3841:0, v3842:0, v3843:0, v3844:0, 1, 1 + v3853:0, v3881:0, v3853:0, v4217:0, v3849:0, v3850:0, 0, v3852:0, v3854:0, v3855:0, v3856:0, v3857:0, v3858:0, v3859:0, v3860:0, v3861:0, v3862:0, v3863:0, v3864:0, v3865:0, 3, 7, 2, 4, 8) :|: v3857:0 > v3853:0 && v3881:0 > 0 && v3857:0 > 2 && v3853:0 > 0 && v4217:0 < v3881:0
Filtered unneeded arguments:
   f_1012(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36) -> f_1012(x2, x9, x10, x12, x22, x23, x31)
   f_1184(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37) -> f_1184(x2, x9, x10, x12, x13, x22, x23)
Removed division, modulo operations, cleaned up constraints. Obtained 9 rules.P rules:
f_1012(v3836:0, v3843:0, v3844:0, v3853:0, v3856:0, v3857:0, v3865:0) -> f_1184(v3836:0, 1 + v3843:0, v6952:0, v3865:0, v6447:0, v3856:0, v3857:0) :|: v3844:0 < 0 && v3857:0 > v3853:0 && v3857:0 > 2 && v3843:0 > 1 && v3856:0 > 1 + v3843:0 && v6952:0 < 0 && v3856:0 > 3
f_1012(v3836:0, v3843:0, v3844:0, v3853:0, v3856:0, v3857:0, v3865:0) -> f_1184(v3836:0, 1 + v3843:0, v6952:0, v3865:0, v6447:0, v3856:0, v3857:0) :|: v3844:0 < 0 && v3857:0 > v3853:0 && v3857:0 > 2 && v3843:0 > 1 && v3856:0 > 1 + v3843:0 && v6952:0 > 0 && v3856:0 > 3
f_1012(v3836:0, v3843:0, v3844:0, v3853:0, v3856:0, v3857:0, v3865:0) -> f_1184(v3836:0, 1 + v3843:0, v6952:0, v3865:0, v6447:0, v3856:0, v3857:0) :|: v3844:0 > 0 && v3857:0 > v3853:0 && v3857:0 > 2 && v3843:0 > 1 && v3856:0 > 1 + v3843:0 && v6952:0 < 0 && v3856:0 > 3
f_1012(v3836:0, v3843:0, v3844:0, v3853:0, v3856:0, v3857:0, v3865:0) -> f_1184(v3836:0, 1 + v3843:0, v6952:0, v3865:0, v6447:0, v3856:0, v3857:0) :|: v3844:0 > 0 && v3857:0 > v3853:0 && v3857:0 > 2 && v3843:0 > 1 && v3856:0 > 1 + v3843:0 && v6952:0 > 0 && v3856:0 > 3
f_1184(v6417:0, v6424:0, v6425:0, v6425:01, v6425:02, v6436:0, v6437:0) -> f_1184(v6417:0, 1 + v6424:0, v6952:0, v6425:0, v6447:1, v6436:0, v6437:0) :|: v6436:0 > 1 + v6424:0 && v6424:0 > 1 && v6952:0 < 0 && v6436:0 > 3 && v6425:0 = v6425:01 && v6425:0 = v6425:02
f_1184(v6417:0, v6424:0, v6425:0, v6425:01, v6425:02, v6436:0, v6437:0) -> f_1184(v6417:0, 1 + v6424:0, v6952:0, v6425:0, v6447:1, v6436:0, v6437:0) :|: v6436:0 > 1 + v6424:0 && v6424:0 > 1 && v6952:0 > 0 && v6436:0 > 3 && v6425:0 = v6425:01 && v6425:0 = v6425:02
f_1184(v6417:0, v6424:0, v6425:0, v6427:0, v6447:0, v6436:0, v6437:0) -> f_1012(v6417:0, v6424:0, v6425:0, 1 + v6417:0, v6436:0, v6437:0, v6427:0) :|: v6447:0 > v6427:0 && v6417:0 > 0
f_1184(v6417:0, v6424:0, v6425:0, v6427:0, v6447:0, v6436:0, v6437:0) -> f_1012(v6417:0, v6424:0, v6425:0, 1 + v6417:0, v6436:0, v6437:0, v6427:0) :|: v6447:0 < v6427:0 && v6417:0 > 0
f_1012(v3836:0, v3843:0, v3844:0, v3853:0, v3856:0, v3857:0, v3865:0) -> f_1012(v3836:0, v3843:0, v3844:0, 1 + v3853:0, v3856:0, v3857:0, v3865:0) :|: v3857:0 > 2 && v3853:0 > 0 && v3857:0 > v3853:0

----------------------------------------

(9)
Obligation:
Rules:
f_1012(v3836:0, v3843:0, v3844:0, v3853:0, v3856:0, v3857:0, v3865:0) -> f_1184(v3836:0, 1 + v3843:0, v6952:0, v3865:0, v6447:0, v3856:0, v3857:0) :|: v3844:0 < 0 && v3857:0 > v3853:0 && v3857:0 > 2 && v3843:0 > 1 && v3856:0 > 1 + v3843:0 && v6952:0 < 0 && v3856:0 > 3
f_1012(x, x1, x2, x3, x4, x5, x6) -> f_1184(x, 1 + x1, x7, x6, x8, x4, x5) :|: x2 < 0 && x5 > x3 && x5 > 2 && x1 > 1 && x4 > 1 + x1 && x7 > 0 && x4 > 3
f_1012(x9, x10, x11, x12, x13, x14, x15) -> f_1184(x9, 1 + x10, x16, x15, x17, x13, x14) :|: x11 > 0 && x14 > x12 && x14 > 2 && x10 > 1 && x13 > 1 + x10 && x16 < 0 && x13 > 3
f_1012(x18, x19, x20, x21, x22, x23, x24) -> f_1184(x18, 1 + x19, x25, x24, x26, x22, x23) :|: x20 > 0 && x23 > x21 && x23 > 2 && x19 > 1 && x22 > 1 + x19 && x25 > 0 && x22 > 3
f_1184(x27, x28, x29, x30, x31, x32, x33) -> f_1184(x27, 1 + x28, x34, x29, x35, x32, x33) :|: x32 > 1 + x28 && x28 > 1 && x34 < 0 && x32 > 3 && x29 = x30 && x29 = x31
f_1184(x36, x37, x38, x39, x40, x41, x42) -> f_1184(x36, 1 + x37, x43, x38, x44, x41, x42) :|: x41 > 1 + x37 && x37 > 1 && x43 > 0 && x41 > 3 && x38 = x39 && x38 = x40
f_1184(x45, x46, x47, x48, x49, x50, x51) -> f_1012(x45, x46, x47, 1 + x45, x50, x51, x48) :|: x49 > x48 && x45 > 0
f_1184(x52, x53, x54, x55, x56, x57, x58) -> f_1012(x52, x53, x54, 1 + x52, x57, x58, x55) :|: x56 < x55 && x52 > 0
f_1012(x59, x60, x61, x62, x63, x64, x65) -> f_1012(x59, x60, x61, 1 + x62, x63, x64, x65) :|: x64 > 2 && x62 > 0 && x64 > x62

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_1184(x36:0, x37:0, x38:0, x38:01, x38:02, x41:0, x42:0) -> f_1184(x36:0, 1 + x37:0, x43:0, x38:0, x44:0, x41:0, x42:0) :|: x43:0 > 0 && x41:0 > 3 && x37:0 > 1 && x41:0 > 1 + x37:0 && x38:0 = x38:01 && x38:0 = x38:02
f_1012(v3836:0:0, v3843:0:0, v3844:0:0, v3853:0:0, v3856:0:0, v3857:0:0, v3865:0:0) -> f_1184(v3836:0:0, 1 + v3843:0:0, v6952:0:0, v3865:0:0, v6447:0:0, v3856:0:0, v3857:0:0) :|: v6952:0:0 < 0 && v3856:0:0 > 3 && v3856:0:0 > 1 + v3843:0:0 && v3843:0:0 > 1 && v3857:0:0 > 2 && v3857:0:0 > v3853:0:0 && v3844:0:0 < 0
f_1012(x9:0, x10:0, x11:0, x12:0, x13:0, x14:0, x15:0) -> f_1184(x9:0, 1 + x10:0, x16:0, x15:0, x17:0, x13:0, x14:0) :|: x16:0 < 0 && x13:0 > 3 && x13:0 > 1 + x10:0 && x10:0 > 1 && x14:0 > 2 && x14:0 > x12:0 && x11:0 > 0
f_1184(x45:0, x46:0, x47:0, x48:0, x49:0, x50:0, x51:0) -> f_1012(x45:0, x46:0, x47:0, 1 + x45:0, x50:0, x51:0, x48:0) :|: x49:0 > x48:0 && x45:0 > 0
f_1012(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_1184(x:0, 1 + x1:0, x7:0, x6:0, x8:0, x4:0, x5:0) :|: x7:0 > 0 && x4:0 > 3 && x4:0 > 1 + x1:0 && x1:0 > 1 && x5:0 > 2 && x5:0 > x3:0 && x2:0 < 0
f_1184(x27:0, x28:0, x29:0, x29:01, x29:02, x32:0, x33:0) -> f_1184(x27:0, 1 + x28:0, x34:0, x29:0, x35:0, x32:0, x33:0) :|: x34:0 < 0 && x32:0 > 3 && x28:0 > 1 && x32:0 > 1 + x28:0 && x29:0 = x29:01 && x29:0 = x29:02
f_1012(x59:0, x60:0, x61:0, x62:0, x63:0, x64:0, x65:0) -> f_1012(x59:0, x60:0, x61:0, 1 + x62:0, x63:0, x64:0, x65:0) :|: x64:0 > 2 && x62:0 > 0 && x64:0 > x62:0
f_1184(x52:0, x53:0, x54:0, x55:0, x56:0, x57:0, x58:0) -> f_1012(x52:0, x53:0, x54:0, 1 + x52:0, x57:0, x58:0, x55:0) :|: x56:0 < x55:0 && x52:0 > 0
f_1012(x18:0, x19:0, x20:0, x21:0, x22:0, x23:0, x24:0) -> f_1184(x18:0, 1 + x19:0, x25:0, x24:0, x26:0, x22:0, x23:0) :|: x25:0 > 0 && x22:0 > 3 && x22:0 > 1 + x19:0 && x19:0 > 1 && x23:0 > 2 && x23:0 > x21:0 && x20:0 > 0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1184(x, x1, x2, x3, x4, x5, x6)] = -1 - x1 + x5
[f_1012(x7, x8, x9, x10, x11, x12, x13)] = -2 + x11 - x8

The following rules are decreasing:
f_1184(x36:0, x37:0, x38:0, x38:01, x38:02, x41:0, x42:0) -> f_1184(x36:0, 1 + x37:0, x43:0, x38:0, x44:0, x41:0, x42:0) :|: x43:0 > 0 && x41:0 > 3 && x37:0 > 1 && x41:0 > 1 + x37:0 && x38:0 = x38:01 && x38:0 = x38:02
f_1184(x45:0, x46:0, x47:0, x48:0, x49:0, x50:0, x51:0) -> f_1012(x45:0, x46:0, x47:0, 1 + x45:0, x50:0, x51:0, x48:0) :|: x49:0 > x48:0 && x45:0 > 0
f_1184(x27:0, x28:0, x29:0, x29:01, x29:02, x32:0, x33:0) -> f_1184(x27:0, 1 + x28:0, x34:0, x29:0, x35:0, x32:0, x33:0) :|: x34:0 < 0 && x32:0 > 3 && x28:0 > 1 && x32:0 > 1 + x28:0 && x29:0 = x29:01 && x29:0 = x29:02
f_1184(x52:0, x53:0, x54:0, x55:0, x56:0, x57:0, x58:0) -> f_1012(x52:0, x53:0, x54:0, 1 + x52:0, x57:0, x58:0, x55:0) :|: x56:0 < x55:0 && x52:0 > 0
The following rules are bounded:
f_1184(x36:0, x37:0, x38:0, x38:01, x38:02, x41:0, x42:0) -> f_1184(x36:0, 1 + x37:0, x43:0, x38:0, x44:0, x41:0, x42:0) :|: x43:0 > 0 && x41:0 > 3 && x37:0 > 1 && x41:0 > 1 + x37:0 && x38:0 = x38:01 && x38:0 = x38:02
f_1012(v3836:0:0, v3843:0:0, v3844:0:0, v3853:0:0, v3856:0:0, v3857:0:0, v3865:0:0) -> f_1184(v3836:0:0, 1 + v3843:0:0, v6952:0:0, v3865:0:0, v6447:0:0, v3856:0:0, v3857:0:0) :|: v6952:0:0 < 0 && v3856:0:0 > 3 && v3856:0:0 > 1 + v3843:0:0 && v3843:0:0 > 1 && v3857:0:0 > 2 && v3857:0:0 > v3853:0:0 && v3844:0:0 < 0
f_1012(x9:0, x10:0, x11:0, x12:0, x13:0, x14:0, x15:0) -> f_1184(x9:0, 1 + x10:0, x16:0, x15:0, x17:0, x13:0, x14:0) :|: x16:0 < 0 && x13:0 > 3 && x13:0 > 1 + x10:0 && x10:0 > 1 && x14:0 > 2 && x14:0 > x12:0 && x11:0 > 0
f_1012(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_1184(x:0, 1 + x1:0, x7:0, x6:0, x8:0, x4:0, x5:0) :|: x7:0 > 0 && x4:0 > 3 && x4:0 > 1 + x1:0 && x1:0 > 1 && x5:0 > 2 && x5:0 > x3:0 && x2:0 < 0
f_1184(x27:0, x28:0, x29:0, x29:01, x29:02, x32:0, x33:0) -> f_1184(x27:0, 1 + x28:0, x34:0, x29:0, x35:0, x32:0, x33:0) :|: x34:0 < 0 && x32:0 > 3 && x28:0 > 1 && x32:0 > 1 + x28:0 && x29:0 = x29:01 && x29:0 = x29:02
f_1012(x18:0, x19:0, x20:0, x21:0, x22:0, x23:0, x24:0) -> f_1184(x18:0, 1 + x19:0, x25:0, x24:0, x26:0, x22:0, x23:0) :|: x25:0 > 0 && x22:0 > 3 && x22:0 > 1 + x19:0 && x19:0 > 1 && x23:0 > 2 && x23:0 > x21:0 && x20:0 > 0

----------------------------------------

(13)
Complex Obligation (AND)

----------------------------------------

(14)
Obligation:
Rules:
f_1012(v3836:0:0, v3843:0:0, v3844:0:0, v3853:0:0, v3856:0:0, v3857:0:0, v3865:0:0) -> f_1184(v3836:0:0, 1 + v3843:0:0, v6952:0:0, v3865:0:0, v6447:0:0, v3856:0:0, v3857:0:0) :|: v6952:0:0 < 0 && v3856:0:0 > 3 && v3856:0:0 > 1 + v3843:0:0 && v3843:0:0 > 1 && v3857:0:0 > 2 && v3857:0:0 > v3853:0:0 && v3844:0:0 < 0
f_1012(x9:0, x10:0, x11:0, x12:0, x13:0, x14:0, x15:0) -> f_1184(x9:0, 1 + x10:0, x16:0, x15:0, x17:0, x13:0, x14:0) :|: x16:0 < 0 && x13:0 > 3 && x13:0 > 1 + x10:0 && x10:0 > 1 && x14:0 > 2 && x14:0 > x12:0 && x11:0 > 0
f_1012(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_1184(x:0, 1 + x1:0, x7:0, x6:0, x8:0, x4:0, x5:0) :|: x7:0 > 0 && x4:0 > 3 && x4:0 > 1 + x1:0 && x1:0 > 1 && x5:0 > 2 && x5:0 > x3:0 && x2:0 < 0
f_1012(x59:0, x60:0, x61:0, x62:0, x63:0, x64:0, x65:0) -> f_1012(x59:0, x60:0, x61:0, 1 + x62:0, x63:0, x64:0, x65:0) :|: x64:0 > 2 && x62:0 > 0 && x64:0 > x62:0
f_1012(x18:0, x19:0, x20:0, x21:0, x22:0, x23:0, x24:0) -> f_1184(x18:0, 1 + x19:0, x25:0, x24:0, x26:0, x22:0, x23:0) :|: x25:0 > 0 && x22:0 > 3 && x22:0 > 1 + x19:0 && x19:0 > 1 && x23:0 > 2 && x23:0 > x21:0 && x20:0 > 0

----------------------------------------

(15) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(16)
Obligation:
Rules:
f_1012(x59:0, x60:0, x61:0, x62:0, x63:0, x64:0, x65:0) -> f_1012(x59:0, x60:0, x61:0, 1 + x62:0, x63:0, x64:0, x65:0) :|: x64:0 > 2 && x62:0 > 0 && x64:0 > x62:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_1012(x59:0:0, x60:0:0, x61:0:0, x62:0:0, x63:0:0, x64:0:0, x65:0:0) -> f_1012(x59:0:0, x60:0:0, x61:0:0, 1 + x62:0:0, x63:0:0, x64:0:0, x65:0:0) :|: x64:0:0 > 2 && x62:0:0 > 0 && x64:0:0 > x62:0:0

----------------------------------------

(19) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1012(x1, x2, x3, x4, x5, x6, x7) -> f_1012(x4, x6)

----------------------------------------

(20)
Obligation:
Rules:
f_1012(x62:0:0, x64:0:0) -> f_1012(1 + x62:0:0, x64:0:0) :|: x64:0:0 > 2 && x62:0:0 > 0 && x64:0:0 > x62:0:0

----------------------------------------

(21) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1012(x, x1)] = -1 - x + x1

The following rules are decreasing:
f_1012(x62:0:0, x64:0:0) -> f_1012(1 + x62:0:0, x64:0:0) :|: x64:0:0 > 2 && x62:0:0 > 0 && x64:0:0 > x62:0:0
The following rules are bounded:
f_1012(x62:0:0, x64:0:0) -> f_1012(1 + x62:0:0, x64:0:0) :|: x64:0:0 > 2 && x62:0:0 > 0 && x64:0:0 > x62:0:0

----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Rules:
f_1184(x45:0, x46:0, x47:0, x48:0, x49:0, x50:0, x51:0) -> f_1012(x45:0, x46:0, x47:0, 1 + x45:0, x50:0, x51:0, x48:0) :|: x49:0 > x48:0 && x45:0 > 0
f_1012(x59:0, x60:0, x61:0, x62:0, x63:0, x64:0, x65:0) -> f_1012(x59:0, x60:0, x61:0, 1 + x62:0, x63:0, x64:0, x65:0) :|: x64:0 > 2 && x62:0 > 0 && x64:0 > x62:0
f_1184(x52:0, x53:0, x54:0, x55:0, x56:0, x57:0, x58:0) -> f_1012(x52:0, x53:0, x54:0, 1 + x52:0, x57:0, x58:0, x55:0) :|: x56:0 < x55:0 && x52:0 > 0

----------------------------------------

(24) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(25)
Obligation:
Rules:
f_1012(x59:0, x60:0, x61:0, x62:0, x63:0, x64:0, x65:0) -> f_1012(x59:0, x60:0, x61:0, 1 + x62:0, x63:0, x64:0, x65:0) :|: x64:0 > 2 && x62:0 > 0 && x64:0 > x62:0

----------------------------------------

(26) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(27)
Obligation:
Rules:
f_1012(x59:0:0, x60:0:0, x61:0:0, x62:0:0, x63:0:0, x64:0:0, x65:0:0) -> f_1012(x59:0:0, x60:0:0, x61:0:0, 1 + x62:0:0, x63:0:0, x64:0:0, x65:0:0) :|: x64:0:0 > 2 && x62:0:0 > 0 && x64:0:0 > x62:0:0

----------------------------------------

(28) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_1012(x1, x2, x3, x4, x5, x6, x7) -> f_1012(x4, x6)

----------------------------------------

(29)
Obligation:
Rules:
f_1012(x62:0:0, x64:0:0) -> f_1012(1 + x62:0:0, x64:0:0) :|: x64:0:0 > 2 && x62:0:0 > 0 && x64:0:0 > x62:0:0

----------------------------------------

(30) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1012(x, x1)] = -x + x1

The following rules are decreasing:
f_1012(x62:0:0, x64:0:0) -> f_1012(1 + x62:0:0, x64:0:0) :|: x64:0:0 > 2 && x62:0:0 > 0 && x64:0:0 > x62:0:0
The following rules are bounded:
f_1012(x62:0:0, x64:0:0) -> f_1012(1 + x62:0:0, x64:0:0) :|: x64:0:0 > 2 && x62:0:0 > 0 && x64:0:0 > x62:0:0

----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
SCC
----------------------------------------

(33) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 41 rulesP rules:
f_799(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1825, 1, v1824, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_801(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, v1825, 1, v1824, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: TRUE
f_801(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, v1825, 1, v1824, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_803(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1824, v1825, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_803(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1824, v1825, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_805(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1824, v1825, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: v1850 != 0 && v1828 < v1831 && 3 <= v1831
f_805(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1824, v1825, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_809(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1824, v1825, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_809(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1824, v1825, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_813(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1824, v1825, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: TRUE
f_813(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1824, v1825, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_817(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1824, v1825, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_817(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1824, v1825, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_821(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1824, v1825, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: TRUE
f_821(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1824, v1825, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_825(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_825(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_829(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_829(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_833(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_833(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_837(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: TRUE
f_837(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_842(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: TRUE
f_842(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_847(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_847(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_852(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_852(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_858(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_858(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_864(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_864(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_869(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: TRUE
f_869(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_874(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_874(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_880(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_880(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_882(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_882(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_884(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_884(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_886(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: TRUE
f_886(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_889(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_889(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v1825, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_893(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: v1825 = v2522
f_893(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_897(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_897(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_901(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_901(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_905(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: TRUE
f_905(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_909(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_909(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_913(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_913(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_917(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_917(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_921(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_921(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, v2522, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_926(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: v2522 = v1850
f_926(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_931(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
f_931(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_936(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: TRUE
f_936(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_942(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: TRUE
f_942(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v1824, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_947(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, v1824, 3, 7, 2, 4, 8) :|: 0 = 0
f_947(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, v1824, 3, 7, 2, 4, 8) -> f_952(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v3019, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, v1824, 3, 7, 2, 4, 8) :|: v3019 = 1 + v1828 && 3 <= v3019
f_952(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v3019, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, v1824, 3, 7, 2, 4, 8) -> f_957(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v3019, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, v1824, 3, 7, 2, 4, 8) :|: TRUE
f_957(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v3019, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, v1824, 3, 7, 2, 4, 8) -> f_962(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v3019, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, v1824, 3, 7, 2, 4, 8) :|: TRUE
f_962(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v3019, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, v1824, 3, 7, 2, 4, 8) -> f_797(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1850, 1, 0, v3019, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: TRUE
f_797(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1824, v1825, 1, 0, v1828, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) -> f_799(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823, v1828, v1825, 1, v1824, 0, v1829, v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837, v1838, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_799(v1816:0, v1817:0, v1818:0, v1819:0, v1820:0, v1821:0, v1822:0, v1823:0, v1828:0, v1825:0, 1, v1824:0, 0, v1829:0, v1830:0, v1831:0, v1832:0, v1833:0, v1834:0, v1835:0, v1836:0, v1837:0, v1838:0, 3, 7, 2, 4, 8) -> f_799(v1816:0, v1817:0, v1818:0, v1819:0, v1820:0, v1821:0, v1822:0, v1823:0, 1 + v1828:0, v1825:0, 1, v1828:0, 0, v1829:0, v1830:0, v1831:0, v1832:0, v1833:0, v1834:0, v1835:0, v1836:0, v1837:0, v1838:0, 3, 7, 2, 4, 8) :|: v1831:0 > v1828:0 && v1825:0 < 0 && v1828:0 > 1 && v1831:0 > 2
f_799(v1816:0, v1817:0, v1818:0, v1819:0, v1820:0, v1821:0, v1822:0, v1823:0, v1828:0, v1825:0, 1, v1824:0, 0, v1829:0, v1830:0, v1831:0, v1832:0, v1833:0, v1834:0, v1835:0, v1836:0, v1837:0, v1838:0, 3, 7, 2, 4, 8) -> f_799(v1816:0, v1817:0, v1818:0, v1819:0, v1820:0, v1821:0, v1822:0, v1823:0, 1 + v1828:0, v1825:0, 1, v1828:0, 0, v1829:0, v1830:0, v1831:0, v1832:0, v1833:0, v1834:0, v1835:0, v1836:0, v1837:0, v1838:0, 3, 7, 2, 4, 8) :|: v1831:0 > v1828:0 && v1825:0 > 0 && v1828:0 > 1 && v1831:0 > 2
Filtered unneeded arguments:
   f_799(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_799(x9, x10, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_799(v1828:0, v1825:0, v1831:0) -> f_799(1 + v1828:0, v1825:0, v1831:0) :|: v1825:0 < 0 && v1831:0 > v1828:0 && v1831:0 > 2 && v1828:0 > 1
f_799(v1828:0, v1825:0, v1831:0) -> f_799(1 + v1828:0, v1825:0, v1831:0) :|: v1825:0 > 0 && v1831:0 > v1828:0 && v1831:0 > 2 && v1828:0 > 1

----------------------------------------

(34)
Obligation:
Rules:
f_799(v1828:0, v1825:0, v1831:0) -> f_799(1 + v1828:0, v1825:0, v1831:0) :|: v1825:0 < 0 && v1831:0 > v1828:0 && v1831:0 > 2 && v1828:0 > 1
f_799(x, x1, x2) -> f_799(1 + x, x1, x2) :|: x1 > 0 && x2 > x && x2 > 2 && x > 1

----------------------------------------

(35) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(36)
Obligation:
Rules:
f_799(v1828:0:0, v1825:0:0, v1831:0:0) -> f_799(1 + v1828:0:0, v1825:0:0, v1831:0:0) :|: v1831:0:0 > 2 && v1828:0:0 > 1 && v1831:0:0 > v1828:0:0 && v1825:0:0 < 0
f_799(x:0, x1:0, x2:0) -> f_799(1 + x:0, x1:0, x2:0) :|: x2:0 > 2 && x:0 > 1 && x:0 < x2:0 && x1:0 > 0

----------------------------------------

(37) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_799(x, x1, x2)] = -x + x2

The following rules are decreasing:
f_799(v1828:0:0, v1825:0:0, v1831:0:0) -> f_799(1 + v1828:0:0, v1825:0:0, v1831:0:0) :|: v1831:0:0 > 2 && v1828:0:0 > 1 && v1831:0:0 > v1828:0:0 && v1825:0:0 < 0
f_799(x:0, x1:0, x2:0) -> f_799(1 + x:0, x1:0, x2:0) :|: x2:0 > 2 && x:0 > 1 && x:0 < x2:0 && x1:0 > 0
The following rules are bounded:
f_799(v1828:0:0, v1825:0:0, v1831:0:0) -> f_799(1 + v1828:0:0, v1825:0:0, v1831:0:0) :|: v1831:0:0 > 2 && v1828:0:0 > 1 && v1831:0:0 > v1828:0:0 && v1825:0:0 < 0
f_799(x:0, x1:0, x2:0) -> f_799(1 + x:0, x1:0, x2:0) :|: x2:0 > 2 && x:0 > 1 && x:0 < x2:0 && x1:0 > 0

----------------------------------------

(38)
YES

----------------------------------------

(39)
Obligation:
SCC
----------------------------------------

(40) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 21 rulesP rules:
f_583(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v654, v653, v655, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) -> f_587(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v654, v653, v655, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) :|: TRUE
f_587(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v654, v653, v655, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) -> f_591(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v653, v654, v655, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_591(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v653, v654, v655, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) -> f_595(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v653, v654, v655, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) :|: v710 != 0 && v656 < v660 && 3 <= v660
f_595(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v653, v654, v655, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) -> f_601(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v653, v654, v655, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_601(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v653, v654, v655, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) -> f_607(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v653, v654, v655, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) :|: TRUE
f_607(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v653, v654, v655, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) -> f_613(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v654, v655, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_613(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v654, v655, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) -> f_619(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v654, v655, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_619(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v654, v655, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) -> f_626(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v655, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_626(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v655, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) -> f_629(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v655, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_629(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v655, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) -> f_632(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v655, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) :|: TRUE
f_632(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v655, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) -> f_635(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_635(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) -> f_639(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) :|: v710 != v958
f_639(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) -> f_644(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_644(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) -> f_649(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_649(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) -> f_654(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) :|: TRUE
f_654(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v653, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v654, 0, 3, 7, 2, 4, 8) -> f_659(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v653, v654, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_659(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v653, v654, 0, 3, 7, 2, 4, 8) -> f_664(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v1072, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v653, v654, 0, 3, 7, 2, 4, 8) :|: v1072 = 1 + v656 && 3 <= v1072
f_664(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v1072, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v653, v654, 0, 3, 7, 2, 4, 8) -> f_669(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v1072, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v653, v654, 0, 3, 7, 2, 4, 8) :|: TRUE
f_669(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v1072, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v653, v654, 0, 3, 7, 2, 4, 8) -> f_674(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v1072, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v653, v654, 0, 3, 7, 2, 4, 8) :|: TRUE
f_674(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v1072, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v653, v654, 0, 3, 7, 2, 4, 8) -> f_580(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v710, v958, v1072, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) :|: TRUE
f_580(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v653, v654, v655, v656, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) -> f_583(v643, v644, v645, v646, v647, v648, v649, v650, v651, 1, v656, v654, v653, v655, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 4 rulesP rules:
f_583(v643:0, v644:0, v645:0, v646:0, v647:0, v648:0, v649:0, v650:0, v651:0, 1, v656:0, v654:0, v653:0, v655:0, v657:0, v658:0, v659:0, v660:0, v661:0, v662:0, v663:0, v664:0, v665:0, v666:0, v667:0, 0, 3, 7, 2, 4, 8) -> f_583(v643:0, v644:0, v645:0, v646:0, v647:0, v648:0, v649:0, v650:0, v651:0, 1, 1 + v656:0, v710:0, v656:0, v958:0, v657:0, v658:0, v659:0, v660:0, v661:0, v662:0, v663:0, v664:0, v665:0, v666:0, v667:0, 0, 3, 7, 2, 4, 8) :|: v660:0 > v656:0 && v710:0 < 0 && v660:0 > 2 && v656:0 > 1 && v958:0 > v710:0
f_583(v643:0, v644:0, v645:0, v646:0, v647:0, v648:0, v649:0, v650:0, v651:0, 1, v656:0, v654:0, v653:0, v655:0, v657:0, v658:0, v659:0, v660:0, v661:0, v662:0, v663:0, v664:0, v665:0, v666:0, v667:0, 0, 3, 7, 2, 4, 8) -> f_583(v643:0, v644:0, v645:0, v646:0, v647:0, v648:0, v649:0, v650:0, v651:0, 1, 1 + v656:0, v710:0, v656:0, v958:0, v657:0, v658:0, v659:0, v660:0, v661:0, v662:0, v663:0, v664:0, v665:0, v666:0, v667:0, 0, 3, 7, 2, 4, 8) :|: v660:0 > v656:0 && v710:0 < 0 && v660:0 > 2 && v656:0 > 1 && v958:0 < v710:0
f_583(v643:0, v644:0, v645:0, v646:0, v647:0, v648:0, v649:0, v650:0, v651:0, 1, v656:0, v654:0, v653:0, v655:0, v657:0, v658:0, v659:0, v660:0, v661:0, v662:0, v663:0, v664:0, v665:0, v666:0, v667:0, 0, 3, 7, 2, 4, 8) -> f_583(v643:0, v644:0, v645:0, v646:0, v647:0, v648:0, v649:0, v650:0, v651:0, 1, 1 + v656:0, v710:0, v656:0, v958:0, v657:0, v658:0, v659:0, v660:0, v661:0, v662:0, v663:0, v664:0, v665:0, v666:0, v667:0, 0, 3, 7, 2, 4, 8) :|: v660:0 > v656:0 && v710:0 > 0 && v660:0 > 2 && v656:0 > 1 && v958:0 > v710:0
f_583(v643:0, v644:0, v645:0, v646:0, v647:0, v648:0, v649:0, v650:0, v651:0, 1, v656:0, v654:0, v653:0, v655:0, v657:0, v658:0, v659:0, v660:0, v661:0, v662:0, v663:0, v664:0, v665:0, v666:0, v667:0, 0, 3, 7, 2, 4, 8) -> f_583(v643:0, v644:0, v645:0, v646:0, v647:0, v648:0, v649:0, v650:0, v651:0, 1, 1 + v656:0, v710:0, v656:0, v958:0, v657:0, v658:0, v659:0, v660:0, v661:0, v662:0, v663:0, v664:0, v665:0, v666:0, v667:0, 0, 3, 7, 2, 4, 8) :|: v660:0 > v656:0 && v710:0 > 0 && v660:0 > 2 && v656:0 > 1 && v958:0 < v710:0
Filtered unneeded arguments:
   f_583(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_583(x11, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_583(v656:0, v660:0) -> f_583(1 + v656:0, v660:0) :|: v660:0 > 2 && v656:0 > 1 && v660:0 > v656:0

----------------------------------------

(41)
Obligation:
Rules:
f_583(v656:0, v660:0) -> f_583(1 + v656:0, v660:0) :|: v660:0 > 2 && v656:0 > 1 && v660:0 > v656:0

----------------------------------------

(42) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(43)
Obligation:
Rules:
f_583(v656:0:0, v660:0:0) -> f_583(1 + v656:0:0, v660:0:0) :|: v660:0:0 > 2 && v656:0:0 > 1 && v660:0:0 > v656:0:0

----------------------------------------

(44) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_583(x, x1)] = -x + x1

The following rules are decreasing:
f_583(v656:0:0, v660:0:0) -> f_583(1 + v656:0:0, v660:0:0) :|: v660:0:0 > 2 && v656:0:0 > 1 && v660:0:0 > v656:0:0
The following rules are bounded:
f_583(v656:0:0, v660:0:0) -> f_583(1 + v656:0:0, v660:0:0) :|: v660:0:0 > 2 && v656:0:0 > 1 && v660:0:0 > v656:0:0

----------------------------------------

(45)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
