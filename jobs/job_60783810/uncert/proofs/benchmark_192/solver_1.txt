YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/a06mE.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1292 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 16 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 8 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 11 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/a06mE.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/a06mE.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		store 0, %7
		br %8
	8:
		%9 = load %4
		%10 = load %6
		%11 = icmp sgt %9 %10
		br %11, %16, %12
	12:
		%13 = load %5
		%14 = load %6
		%15 = icmp sgt %13 %14
		br %16
	16:
		%17 = phi [1, %8], [%15, %12]
		br %17, %18, %37
	18:
		%19 = load %4
		%20 = load %6
		%21 = icmp sgt %19 %20
		br %21, %22, %25
	22:
		%23 = load %4
		%24 = sub i32 %23, 1
		store %24, %4
		br %34
	25:
		%26 = load %5
		%27 = load %6
		%28 = icmp sgt %26 %27
		br %28, %29, %32
	29:
		%30 = load %5
		%31 = sub i32 %30, 1
		store %31, %5
		br %33
	32:
		br %33
	33:
		br %34
	34:
		%35 = load %7
		%36 = add i32 %35, 1
		store %36, %7
		br %8
	37:
		%38 = load %7
		ret %38

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 57
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @test_fun(i32 %2, i32 %3, i32 %4)
		ret %5


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 28 rulesP rules:
f_748(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2681, v2682, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4) -> f_750(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4) :|: 0 = 0
f_750(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4) -> f_752(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: v2740 = 1 + v2682 && 2 <= v2740
f_752(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_754(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: TRUE
f_754(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_756(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: TRUE
f_756(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_758(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: 0 = 0
f_758(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_759(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: 0 = 0
f_759(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_760(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: 0 = 0
f_760(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_761(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: TRUE
f_761(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_762(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: 0 = 0
f_762(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_763(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: 0 = 0
f_763(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_764(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: v2673 < v2684
f_764(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_766(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: 0 = 0
f_766(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_768(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: 0 = 0
f_768(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_770(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: TRUE
f_770(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_772(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: 0 = 0
f_772(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_774(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: 0 = 0
f_774(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_776(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: 0 = 0
f_776(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_777(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: TRUE
f_777(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_778(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: 0 = 0
f_778(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_779(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: 0 = 0
f_779(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_780(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: 0 = 0
f_780(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_781(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: TRUE
f_781(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2683, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_782(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: 0 = 0
f_782(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_783(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v3029, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: 1 + v3029 = v2684
f_783(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v3029, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_784(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v3029, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: TRUE
f_784(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v3029, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_785(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v3029, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) :|: TRUE
f_785(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v3029, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4, 2) -> f_746(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2682, v2740, v2684, v3029, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4) :|: TRUE
f_746(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2681, v2682, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4) -> f_748(v2671, v2672, v2673, v2674, v2675, v2676, v2677, 0, 1, v2680, v2681, v2682, v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_748(v2671:0, v2672:0, v2673:0, v2674:0, v2675:0, v2676:0, v2677:0, 0, 1, v2680:0, v2681:0, v2682:0, v2683:0, 1 + v3029:0, v2685:0, v2686:0, v2687:0, v2688:0, v2689:0, v2690:0, 3, 4) -> f_748(v2671:0, v2672:0, v2673:0, v2674:0, v2675:0, v2676:0, v2677:0, 0, 1, v2680:0, v2682:0, 1 + v2682:0, 1 + v3029:0, v3029:0, v2685:0, v2686:0, v2687:0, v2688:0, v2689:0, v2690:0, 3, 4) :|: v2673:0 < 1 + v3029:0 && v2682:0 > 0
Filtered unneeded arguments:
   f_748(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_748(x3, x12, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_748(v2673:0, v2682:0, sum~cons_1~v3029:0) -> f_748(v2673:0, 1 + v2682:0, v3029:0) :|: v2673:0 < 1 + v3029:0 && v2682:0 > 0 && sum~cons_1~v3029:0 = 1 + v3029:0

----------------------------------------

(9)
Obligation:
Rules:
f_748(v2673:0, v2682:0, sum~cons_1~v3029:0) -> f_748(v2673:0, 1 + v2682:0, v3029:0) :|: v2673:0 < 1 + v3029:0 && v2682:0 > 0 && sum~cons_1~v3029:0 = 1 + v3029:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_748(v2673:0:0, v2682:0:0, sum~cons_1~v3029:0:0) -> f_748(v2673:0:0, 1 + v2682:0:0, v3029:0:0) :|: v2673:0:0 < 1 + v3029:0:0 && v2682:0:0 > 0 && sum~cons_1~v3029:0:0 = 1 + v3029:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_748 ] = -1*f_748_1 + f_748_3

The following rules are decreasing:
f_748(v2673:0:0, v2682:0:0, sum~cons_1~v3029:0:0) -> f_748(v2673:0:0, 1 + v2682:0:0, v3029:0:0) :|: v2673:0:0 < 1 + v3029:0:0 && v2682:0:0 > 0 && sum~cons_1~v3029:0:0 = 1 + v3029:0:0

The following rules are bounded:
f_748(v2673:0:0, v2682:0:0, sum~cons_1~v3029:0:0) -> f_748(v2673:0:0, 1 + v2682:0:0, v3029:0:0) :|: v2673:0:0 < 1 + v3029:0:0 && v2682:0:0 > 0 && sum~cons_1~v3029:0:0 = 1 + v3029:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 28 rulesP rules:
f_692(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2262, 1, v2264, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_694(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2262, 1, v2264, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 0 = 0
f_694(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2262, 1, v2264, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_696(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2262, 1, v2264, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 0 = 0
f_696(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2262, 1, v2264, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_698(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2262, 1, v2264, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: TRUE
f_698(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2262, 1, v2264, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_700(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 0 = 0
f_700(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_702(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 0 = 0
f_702(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_705(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: v2256 < v2264
f_705(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_709(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 0 = 0
f_709(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_713(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 0 = 0
f_713(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_717(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: TRUE
f_717(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_721(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 0 = 0
f_721(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_725(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 0 = 0
f_725(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_728(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 0 = 0
f_728(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_730(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: TRUE
f_730(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_732(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 0 = 0
f_732(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_734(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 0 = 0
f_734(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_736(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 0 = 0
f_736(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_738(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: TRUE
f_738(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2262, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_740(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 0 = 0
f_740(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_742(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 1 + v2668 = v2264
f_742(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_744(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: TRUE
f_744(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_747(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: TRUE
f_747(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_749(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: TRUE
f_749(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_751(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 0 = 0
f_751(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_753(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2266, v2741, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4, 2) :|: v2741 = 1 + v2266 && 2 <= v2741
f_753(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2266, v2741, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4, 2) -> f_755(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2266, v2741, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4, 2) :|: TRUE
f_755(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2266, v2741, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4, 2) -> f_757(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2266, v2741, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4, 2) :|: TRUE
f_757(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2266, v2741, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4, 2) -> f_690(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2264, 1, v2668, v2266, v2741, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: TRUE
f_690(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2262, 1, v2264, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) -> f_692(v2254, v2255, v2256, v2257, v2258, v2259, v2260, 0, v2262, 1, v2264, v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_692(v2254:0, v2255:0, v2256:0, v2257:0, v2258:0, v2259:0, v2260:0, 0, v2262:0, 1, 1 + v2668:0, v2265:0, v2266:0, v2267:0, v2268:0, v2269:0, v2270:0, v2271:0, v2272:0, 3, 4) -> f_692(v2254:0, v2255:0, v2256:0, v2257:0, v2258:0, v2259:0, v2260:0, 0, 1 + v2668:0, 1, v2668:0, v2266:0, 1 + v2266:0, v2267:0, v2268:0, v2269:0, v2270:0, v2271:0, v2272:0, 3, 4) :|: v2266:0 > 0 && v2256:0 < 1 + v2668:0
Filtered unneeded arguments:
   f_692(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_692(x3, x11, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_692(v2256:0, sum~cons_1~v2668:0, v2266:0) -> f_692(v2256:0, v2668:0, 1 + v2266:0) :|: v2266:0 > 0 && v2256:0 < 1 + v2668:0 && sum~cons_1~v2668:0 = 1 + v2668:0

----------------------------------------

(16)
Obligation:
Rules:
f_692(v2256:0, sum~cons_1~v2668:0, v2266:0) -> f_692(v2256:0, v2668:0, 1 + v2266:0) :|: v2266:0 > 0 && v2256:0 < 1 + v2668:0 && sum~cons_1~v2668:0 = 1 + v2668:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_692(v2256:0:0, sum~cons_1~v2668:0:0, v2266:0:0) -> f_692(v2256:0:0, v2668:0:0, 1 + v2266:0:0) :|: v2266:0:0 > 0 && v2256:0:0 < 1 + v2668:0:0 && sum~cons_1~v2668:0:0 = 1 + v2668:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_692(x, x1, x2)] = -x + x1

The following rules are decreasing:
f_692(v2256:0:0, sum~cons_1~v2668:0:0, v2266:0:0) -> f_692(v2256:0:0, v2668:0:0, 1 + v2266:0:0) :|: v2266:0:0 > 0 && v2256:0:0 < 1 + v2668:0:0 && sum~cons_1~v2668:0:0 = 1 + v2668:0:0
The following rules are bounded:
f_692(v2256:0:0, sum~cons_1~v2668:0:0, v2266:0:0) -> f_692(v2256:0:0, v2668:0:0, 1 + v2266:0:0) :|: v2266:0:0 > 0 && v2256:0:0 < 1 + v2668:0:0 && sum~cons_1~v2668:0:0 = 1 + v2668:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_537(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_540(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: 0 = 0
f_540(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_542(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: v1308 < v1315
f_542(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_545(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: 0 = 0
f_545(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_548(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: 0 = 0
f_548(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_551(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: TRUE
f_551(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_554(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: 0 = 0
f_554(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_557(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: 0 = 0
f_557(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_562(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: 0 = 0
f_562(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_567(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: TRUE
f_567(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_572(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: 0 = 0
f_572(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_577(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1583, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: 1 + v1583 = v1315
f_577(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1583, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_582(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1583, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: TRUE
f_582(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1583, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_587(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1583, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: TRUE
f_587(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1583, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_590(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1583, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: 0 = 0
f_590(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1583, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_593(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1583, v1317, v1601, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4, 2) :|: v1601 = 1 + v1317 && 2 <= v1601
f_593(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1583, v1317, v1601, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4, 2) -> f_596(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1583, v1317, v1601, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4, 2) :|: TRUE
f_596(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1583, v1317, v1601, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4, 2) -> f_599(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1583, v1317, v1601, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4, 2) :|: TRUE
f_599(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1583, v1317, v1601, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4, 2) -> f_535(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1583, v1317, v1601, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: TRUE
f_535(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, 1, v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) -> f_537(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1315, 1, v1313, v1316, v1317, v1318, v1319, v1320, v1321, v1322, v1323, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_537(v1306:0, v1307:0, v1308:0, v1309:0, v1310:0, v1311:0, v1312:0, 1 + v1583:0, 1, v1313:0, v1316:0, v1317:0, v1318:0, v1319:0, v1320:0, v1321:0, v1322:0, v1323:0, 0, 3, 4) -> f_537(v1306:0, v1307:0, v1308:0, v1309:0, v1310:0, v1311:0, v1312:0, v1583:0, 1, 1 + v1583:0, v1317:0, 1 + v1317:0, v1318:0, v1319:0, v1320:0, v1321:0, v1322:0, v1323:0, 0, 3, 4) :|: v1317:0 > 0 && v1308:0 < 1 + v1583:0
Filtered unneeded arguments:
   f_537(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_537(x3, x8, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_537(v1308:0, sum~cons_1~v1583:0, v1317:0) -> f_537(v1308:0, v1583:0, 1 + v1317:0) :|: v1317:0 > 0 && v1308:0 < 1 + v1583:0 && sum~cons_1~v1583:0 = 1 + v1583:0

----------------------------------------

(23)
Obligation:
Rules:
f_537(v1308:0, sum~cons_1~v1583:0, v1317:0) -> f_537(v1308:0, v1583:0, 1 + v1317:0) :|: v1317:0 > 0 && v1308:0 < 1 + v1583:0 && sum~cons_1~v1583:0 = 1 + v1583:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_537(v1308:0:0, sum~cons_1~v1583:0:0, v1317:0:0) -> f_537(v1308:0:0, v1583:0:0, 1 + v1317:0:0) :|: v1317:0:0 > 0 && v1308:0:0 < 1 + v1583:0:0 && sum~cons_1~v1583:0:0 = 1 + v1583:0:0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_537(x, x1, x2)] = -x + x1

The following rules are decreasing:
f_537(v1308:0:0, sum~cons_1~v1583:0:0, v1317:0:0) -> f_537(v1308:0:0, v1583:0:0, 1 + v1317:0:0) :|: v1317:0:0 > 0 && v1308:0:0 < 1 + v1583:0:0 && sum~cons_1~v1583:0:0 = 1 + v1583:0:0
The following rules are bounded:
f_537(v1308:0:0, sum~cons_1~v1583:0:0, v1317:0:0) -> f_537(v1308:0:0, v1583:0:0, 1 + v1317:0:0) :|: v1317:0:0 > 0 && v1308:0:0 < 1 + v1583:0:0 && sum~cons_1~v1583:0:0 = 1 + v1583:0:0

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
