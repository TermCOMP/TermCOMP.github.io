YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/IQ9Wv.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 49 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 858 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 11 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/IQ9Wv.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/IQ9Wv.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		store 0, %7
		br %8
	8:
		%9 = load %4
		%10 = load %6
		%11 = icmp sgt %9 %10
		br %11, %12, %16
	12:
		%13 = load %5
		%14 = load %6
		%15 = icmp sgt %13 %14
		br %16
	16:
		%17 = phi [0, %8], [%15, %12]
		br %17, %18, %25
	18:
		%19 = load %4
		%20 = sub i32 %19, 1
		store %20, %4
		%21 = load %5
		%22 = sub i32 %21, 1
		store %22, %5
		%23 = load %7
		%24 = add i32 %23, 1
		store %24, %7
		br %8
	25:
		%26 = load %7
		ret %26

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 43
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @test_fun(i32 %2, i32 %3, i32 %4)
		ret %5


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_354(v640, v641, v642, v643, v644, v645, v646, v650, 1, v649, v647, v651, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_355(v640, v641, v642, v643, v644, v645, v646, v650, 1, v649, v647, v651, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: 0 = 0
f_355(v640, v641, v642, v643, v644, v645, v646, v650, 1, v649, v647, v651, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_356(v640, v641, v642, v643, v644, v645, v646, v650, 1, v649, v647, v651, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: v642 < v650
f_356(v640, v641, v642, v643, v644, v645, v646, v650, 1, v649, v647, v651, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_358(v640, v641, v642, v643, v644, v645, v646, v650, 1, v649, v647, v651, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: 0 = 0
f_358(v640, v641, v642, v643, v644, v645, v646, v650, 1, v649, v647, v651, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_360(v640, v641, v642, v643, v644, v645, v646, v650, 1, v649, v647, v651, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: TRUE
f_360(v640, v641, v642, v643, v644, v645, v646, v650, 1, v649, v647, v651, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_362(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v647, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: 0 = 0
f_362(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v647, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_364(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v647, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: 0 = 0
f_364(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v647, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_366(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v647, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: v642 < v651
f_366(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v647, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_369(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v647, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: 0 = 0
f_369(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v647, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_371(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v647, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: 0 = 0
f_371(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v647, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_373(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v647, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: TRUE
f_373(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v647, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_375(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: 0 = 0
f_375(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_377(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: 1 + v759 = v650
f_377(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_379(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: TRUE
f_379(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v649, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_380(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: 0 = 0
f_380(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_381(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v761, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: 1 + v761 = v651
f_381(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v761, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_382(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v761, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: TRUE
f_382(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v761, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_383(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v761, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: 0 = 0
f_383(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v761, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_384(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v761, v653, v763, v654, v655, v656, v657, v658, v659, 0, 3, 4, 2) :|: v763 = 1 + v653 && 2 <= v763
f_384(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v761, v653, v763, v654, v655, v656, v657, v658, v659, 0, 3, 4, 2) -> f_385(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v761, v653, v763, v654, v655, v656, v657, v658, v659, 0, 3, 4, 2) :|: TRUE
f_385(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v761, v653, v763, v654, v655, v656, v657, v658, v659, 0, 3, 4, 2) -> f_386(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v761, v653, v763, v654, v655, v656, v657, v658, v659, 0, 3, 4, 2) :|: TRUE
f_386(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v761, v653, v763, v654, v655, v656, v657, v658, v659, 0, 3, 4, 2) -> f_353(v640, v641, v642, v643, v644, v645, v646, v650, 1, v651, v759, v761, v653, v763, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: TRUE
f_353(v640, v641, v642, v643, v644, v645, v646, v647, 1, v649, v650, v651, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) -> f_354(v640, v641, v642, v643, v644, v645, v646, v650, 1, v649, v647, v651, v652, v653, v654, v655, v656, v657, v658, v659, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_354(v640:0, v641:0, v642:0, v643:0, v644:0, v645:0, v646:0, 1 + v759:0, 1, v649:0, v647:0, 1 + v761:0, v652:0, v653:0, v654:0, v655:0, v656:0, v657:0, v658:0, v659:0, 0, 3, 4) -> f_354(v640:0, v641:0, v642:0, v643:0, v644:0, v645:0, v646:0, v759:0, 1, 1 + v761:0, 1 + v759:0, v761:0, v653:0, 1 + v653:0, v654:0, v655:0, v656:0, v657:0, v658:0, v659:0, 0, 3, 4) :|: v642:0 < 1 + v759:0 && v653:0 > 0 && v642:0 < 1 + v761:0
Filtered unneeded arguments:
   f_354(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_354(x3, x8, x12, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_354(v642:0, sum~cons_1~v759:0, sum~cons_1~v761:0, v653:0) -> f_354(v642:0, v759:0, v761:0, 1 + v653:0) :|: v653:0 > 0 && v642:0 < 1 + v761:0 && v642:0 < 1 + v759:0 && sum~cons_1~v759:0 = 1 + v759:0 && sum~cons_1~v761:0 = 1 + v761:0

----------------------------------------

(8)
Obligation:
Rules:
f_354(v642:0, sum~cons_1~v759:0, sum~cons_1~v761:0, v653:0) -> f_354(v642:0, v759:0, v761:0, 1 + v653:0) :|: v653:0 > 0 && v642:0 < 1 + v761:0 && v642:0 < 1 + v759:0 && sum~cons_1~v759:0 = 1 + v759:0 && sum~cons_1~v761:0 = 1 + v761:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_354(v642:0:0, sum~cons_1~v759:0:0, sum~cons_1~v761:0:0, v653:0:0) -> f_354(v642:0:0, v759:0:0, v761:0:0, 1 + v653:0:0) :|: v653:0:0 > 0 && v642:0:0 < 1 + v761:0:0 && v642:0:0 < 1 + v759:0:0 && sum~cons_1~v759:0:0 = 1 + v759:0:0 && sum~cons_1~v761:0:0 = 1 + v761:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_354 ] = -1*f_354_1 + f_354_3

The following rules are decreasing:
f_354(v642:0:0, sum~cons_1~v759:0:0, sum~cons_1~v761:0:0, v653:0:0) -> f_354(v642:0:0, v759:0:0, v761:0:0, 1 + v653:0:0) :|: v653:0:0 > 0 && v642:0:0 < 1 + v761:0:0 && v642:0:0 < 1 + v759:0:0 && sum~cons_1~v759:0:0 = 1 + v759:0:0 && sum~cons_1~v761:0:0 = 1 + v761:0:0

The following rules are bounded:
f_354(v642:0:0, sum~cons_1~v759:0:0, sum~cons_1~v761:0:0, v653:0:0) -> f_354(v642:0:0, v759:0:0, v761:0:0, 1 + v653:0:0) :|: v653:0:0 > 0 && v642:0:0 < 1 + v761:0:0 && v642:0:0 < 1 + v759:0:0 && sum~cons_1~v759:0:0 = 1 + v759:0:0 && sum~cons_1~v761:0:0 = 1 + v761:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
