YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/KrWcR.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 186 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 33 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 1 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 12 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/KrWcR.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/KrWcR.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sge %7 0
		br %8, %9, %12
	9:
		%10 = load %3
		%11 = icmp sge %10 1
		br %12
	12:
		%13 = phi [0, %6], [%11, %9]
		br %13, %14, %19
	14:
		%15 = load %2
		%16 = load %3
		%17 = sub i32 %15, %16
		store %17, %2
		%18 = call i32 @__VERIFIER_nondet_int()
		store %18, %3
		br %6
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_146(v101, v102, v103, v104, v105, v109, 1, v108, v106, v110, v111, v112, v113, 0, 3, 4) -> f_147(v101, v102, v103, v104, v105, v109, 1, v108, v106, v110, v111, v112, v113, 0, 3, 4) :|: 0 <= v109 && 1 <= v106
f_147(v101, v102, v103, v104, v105, v109, 1, v108, v106, v110, v111, v112, v113, 0, 3, 4) -> f_149(v101, v102, v103, v104, v105, v109, 1, v108, v106, v110, v111, v112, v113, 0, 3, 4) :|: 0 = 0
f_149(v101, v102, v103, v104, v105, v109, 1, v108, v106, v110, v111, v112, v113, 0, 3, 4) -> f_151(v101, v102, v103, v104, v105, v109, 1, v108, v106, v110, v111, v112, v113, 0, 3, 4) :|: TRUE
f_151(v101, v102, v103, v104, v105, v109, 1, v108, v106, v110, v111, v112, v113, 0, 3, 4) -> f_153(v101, v102, v103, v104, v105, v109, 1, v110, v106, v108, v111, v112, v113, 0, 3, 4) :|: 0 = 0
f_153(v101, v102, v103, v104, v105, v109, 1, v110, v106, v108, v111, v112, v113, 0, 3, 4) -> f_155(v101, v102, v103, v104, v105, v109, 1, v110, v106, v108, v111, v112, v113, 0, 3, 4) :|: 1 <= v110
f_155(v101, v102, v103, v104, v105, v109, 1, v110, v106, v108, v111, v112, v113, 0, 3, 4) -> f_157(v101, v102, v103, v104, v105, v109, 1, v110, v106, v108, v111, v112, v113, 0, 3, 4) :|: 0 = 0
f_157(v101, v102, v103, v104, v105, v109, 1, v110, v106, v108, v111, v112, v113, 0, 3, 4) -> f_159(v101, v102, v103, v104, v105, v109, 1, v110, v106, v108, v111, v112, v113, 0, 3, 4) :|: 0 = 0
f_159(v101, v102, v103, v104, v105, v109, 1, v110, v106, v108, v111, v112, v113, 0, 3, 4) -> f_161(v101, v102, v103, v104, v105, v109, 1, v110, v106, v108, v111, v112, v113, 0, 3, 4) :|: TRUE
f_161(v101, v102, v103, v104, v105, v109, 1, v110, v106, v108, v111, v112, v113, 0, 3, 4) -> f_163(v101, v102, v103, v104, v105, v109, 1, v110, v108, v111, v112, v113, 0, 3, 4) :|: 0 = 0
f_163(v101, v102, v103, v104, v105, v109, 1, v110, v108, v111, v112, v113, 0, 3, 4) -> f_164(v101, v102, v103, v104, v105, v109, 1, v110, v111, v112, v113, 0, 3, 4) :|: 0 = 0
f_164(v101, v102, v103, v104, v105, v109, 1, v110, v111, v112, v113, 0, 3, 4) -> f_165(v101, v102, v103, v104, v105, v109, 1, v110, v174, v111, v112, v113, 0, 3, 4) :|: v174 + v110 = v109
f_165(v101, v102, v103, v104, v105, v109, 1, v110, v174, v111, v112, v113, 0, 3, 4) -> f_166(v101, v102, v103, v104, v105, v109, 1, v110, v174, v111, v112, v113, 0, 3, 4) :|: TRUE
f_166(v101, v102, v103, v104, v105, v109, 1, v110, v174, v111, v112, v113, 0, 3, 4) -> f_167(v101, v102, v103, v104, v105, v109, 1, v110, v174, v176, v111, v112, v113, 0, 3, 4) :|: TRUE
f_167(v101, v102, v103, v104, v105, v109, 1, v110, v174, v176, v111, v112, v113, 0, 3, 4) -> f_168(v101, v102, v103, v104, v105, v109, 1, v110, v174, v176, v111, v112, v113, 0, 3, 4) :|: TRUE
f_168(v101, v102, v103, v104, v105, v109, 1, v110, v174, v176, v111, v112, v113, 0, 3, 4) -> f_169(v101, v102, v103, v104, v105, v109, 1, v110, v174, v176, v111, v112, v113, 0, 3, 4) :|: TRUE
f_169(v101, v102, v103, v104, v105, v109, 1, v110, v174, v176, v111, v112, v113, 0, 3, 4) -> f_145(v101, v102, v103, v104, v105, v109, 1, v110, v174, v176, v111, v112, v113, 0, 3, 4) :|: TRUE
f_145(v101, v102, v103, v104, v105, v106, 1, v108, v109, v110, v111, v112, v113, 0, 3, 4) -> f_146(v101, v102, v103, v104, v105, v109, 1, v108, v106, v110, v111, v112, v113, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_146(v101:0, v102:0, v103:0, v104:0, v105:0, v174:0 + v110:0, 1, v108:0, v106:0, v110:0, v111:0, v112:0, v113:0, 0, 3, 4) -> f_146(v101:0, v102:0, v103:0, v104:0, v105:0, v174:0, 1, v110:0, v174:0 + v110:0, v176:0, v111:0, v112:0, v113:0, 0, 3, 4) :|: v106:0 > 0 && v110:0 > 0 && v174:0 + v110:0 > -1
Filtered unneeded arguments:
   f_146(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_146(x6, x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_146(sum~v174:0~v110:0, v106:0, v110:0) -> f_146(v174:0, v174:0 + v110:0, v176:0) :|: v110:0 > 0 && v174:0 + v110:0 > -1 && v106:0 > 0 && sum~v174:0~v110:0 = v174:0 + v110:0

----------------------------------------

(8)
Obligation:
Rules:
f_146(sum~v174:0~v110:0, v106:0, v110:0) -> f_146(v174:0, v174:0 + v110:0, v176:0) :|: v110:0 > 0 && v174:0 + v110:0 > -1 && v106:0 > 0 && sum~v174:0~v110:0 = v174:0 + v110:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_146(sum~v174:0:0~v110:0:0, v106:0:0, v110:0:0) -> f_146(v174:0:0, v174:0:0 + v110:0:0, v176:0:0) :|: v110:0:0 > 0 && v174:0:0 + v110:0:0 > -1 && v106:0:0 > 0 && sum~v174:0:0~v110:0:0 = v174:0:0 + v110:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_146 ] = f_146_1

The following rules are decreasing:
f_146(sum~v174:0:0~v110:0:0, v106:0:0, v110:0:0) -> f_146(v174:0:0, v174:0:0 + v110:0:0, v176:0:0) :|: v110:0:0 > 0 && v174:0:0 + v110:0:0 > -1 && v106:0:0 > 0 && sum~v174:0:0~v110:0:0 = v174:0:0 + v110:0:0

The following rules are bounded:
f_146(sum~v174:0:0~v110:0:0, v106:0:0, v110:0:0) -> f_146(v174:0:0, v174:0:0 + v110:0:0, v176:0:0) :|: v110:0:0 > 0 && v174:0:0 + v110:0:0 > -1 && v106:0:0 > 0 && sum~v174:0:0~v110:0:0 = v174:0:0 + v110:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
