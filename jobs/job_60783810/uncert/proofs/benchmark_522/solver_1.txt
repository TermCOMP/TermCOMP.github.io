YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/1BbuI.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 69 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 270 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 3 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 8 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/1BbuI.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/1BbuI.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sgt %7 0
		br %8, %9, %12
	9:
		%10 = load %3
		%11 = icmp sgt %10 0
		br %12
	12:
		%13 = phi [0, %6], [%11, %9]
		br %13, %14, %35
	14:
		%15 = load %2
		%16 = load %3
		%17 = icmp sgt %15 %16
		br %17, %18, %26
	18:
		br %19
	19:
		%20 = load %2
		%21 = icmp sgt %20 0
		br %21, %22, %25
	22:
		%23 = load %2
		%24 = sub i32 %23, 1
		store %24, %2
		br %19
	25:
		br %34
	26:
		br %27
	27:
		%28 = load %3
		%29 = icmp sgt %28 0
		br %29, %30, %33
	30:
		%31 = load %3
		%32 = sub i32 %31, 1
		store %32, %3
		br %27
	33:
		br %34
	34:
		br %6
	35:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 9 rulesP rules:
f_242(v69, v70, v71, v72, v73, 1, 0, v77, v76, v78, v79, v80, 3, 4) -> f_245(v69, v70, v71, v72, v73, 1, 0, v77, v76, v78, v79, v80, 3, 2, 4) :|: 0 < v77 && 2 <= v76 && 2 <= v73
f_245(v69, v70, v71, v72, v73, 1, 0, v77, v76, v78, v79, v80, 3, 2, 4) -> f_249(v69, v70, v71, v72, v73, 1, 0, v77, v76, v78, v79, v80, 3, 2, 4) :|: 0 = 0
f_249(v69, v70, v71, v72, v73, 1, 0, v77, v76, v78, v79, v80, 3, 2, 4) -> f_253(v69, v70, v71, v72, v73, 1, 0, v77, v76, v78, v79, v80, 3, 2, 4) :|: TRUE
f_253(v69, v70, v71, v72, v73, 1, 0, v77, v76, v78, v79, v80, 3, 2, 4) -> f_257(v69, v70, v71, v72, v73, 1, 0, v77, v78, v79, v80, 3, 2, 4) :|: 0 = 0
f_257(v69, v70, v71, v72, v73, 1, 0, v77, v78, v79, v80, 3, 2, 4) -> f_261(v69, v70, v71, v72, v73, 1, 0, v77, v86, v78, v79, v80, 3, 2, 4) :|: 1 + v86 = v77 && 0 <= v86
f_261(v69, v70, v71, v72, v73, 1, 0, v77, v86, v78, v79, v80, 3, 2, 4) -> f_265(v69, v70, v71, v72, v73, 1, 0, v77, v86, v78, v79, v80, 3, 2, 4) :|: TRUE
f_265(v69, v70, v71, v72, v73, 1, 0, v77, v86, v78, v79, v80, 3, 2, 4) -> f_268(v69, v70, v71, v72, v73, 1, 0, v77, v86, v78, v79, v80, 3, 2, 4) :|: TRUE
f_268(v69, v70, v71, v72, v73, 1, 0, v77, v86, v78, v79, v80, 3, 2, 4) -> f_239(v69, v70, v71, v72, v73, 1, 0, v77, v86, v78, v79, v80, 3, 4) :|: TRUE
f_239(v69, v70, v71, v72, v73, 1, 0, v76, v77, v78, v79, v80, 3, 4) -> f_242(v69, v70, v71, v72, v73, 1, 0, v77, v76, v78, v79, v80, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_242(v69:0, v70:0, v71:0, v72:0, v73:0, 1, 0, 1 + v86:0, v76:0, v78:0, v79:0, v80:0, 3, 4) -> f_242(v69:0, v70:0, v71:0, v72:0, v73:0, 1, 0, v86:0, 1 + v86:0, v78:0, v79:0, v80:0, 3, 4) :|: v76:0 > 1 && v86:0 > -1 && v73:0 > 1
Filtered unneeded arguments:
   f_242(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_242(x5, x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_242(v73:0, sum~cons_1~v86:0, v76:0) -> f_242(v73:0, v86:0, 1 + v86:0) :|: v86:0 > -1 && v73:0 > 1 && v76:0 > 1 && sum~cons_1~v86:0 = 1 + v86:0

----------------------------------------

(9)
Obligation:
Rules:
f_242(v73:0, sum~cons_1~v86:0, v76:0) -> f_242(v73:0, v86:0, 1 + v86:0) :|: v86:0 > -1 && v73:0 > 1 && v76:0 > 1 && sum~cons_1~v86:0 = 1 + v86:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_242(v73:0:0, sum~cons_1~v86:0:0, v76:0:0) -> f_242(v73:0:0, v86:0:0, 1 + v86:0:0) :|: v86:0:0 > -1 && v73:0:0 > 1 && v76:0:0 > 1 && sum~cons_1~v86:0:0 = 1 + v86:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_242(x, x1, x2)] = x1

The following rules are decreasing:
f_242(v73:0:0, sum~cons_1~v86:0:0, v76:0:0) -> f_242(v73:0:0, v86:0:0, 1 + v86:0:0) :|: v86:0:0 > -1 && v73:0:0 > 1 && v76:0:0 > 1 && sum~cons_1~v86:0:0 = 1 + v86:0:0
The following rules are bounded:
f_242(v73:0:0, sum~cons_1~v86:0:0, v76:0:0) -> f_242(v73:0:0, v86:0:0, 1 + v86:0:0) :|: v86:0:0 > -1 && v73:0:0 > 1 && v76:0:0 > 1 && sum~cons_1~v86:0:0 = 1 + v86:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 9 rulesP rules:
f_237(v56, v57, v58, v59, v60, 1, v63, v62, v64, v65, v66, 0, 3, 2, 4) -> f_240(v56, v57, v58, v59, v60, 1, v63, v62, v64, v65, v66, 0, 3, 2, 4) :|: 0 < v63 && 2 <= v62
f_240(v56, v57, v58, v59, v60, 1, v63, v62, v64, v65, v66, 0, 3, 2, 4) -> f_243(v56, v57, v58, v59, v60, 1, v63, v62, v64, v65, v66, 0, 3, 2, 4) :|: 0 = 0
f_243(v56, v57, v58, v59, v60, 1, v63, v62, v64, v65, v66, 0, 3, 2, 4) -> f_247(v56, v57, v58, v59, v60, 1, v63, v62, v64, v65, v66, 0, 3, 2, 4) :|: TRUE
f_247(v56, v57, v58, v59, v60, 1, v63, v62, v64, v65, v66, 0, 3, 2, 4) -> f_251(v56, v57, v58, v59, v60, 1, v63, v64, v65, v66, 0, 3, 2, 4) :|: 0 = 0
f_251(v56, v57, v58, v59, v60, 1, v63, v64, v65, v66, 0, 3, 2, 4) -> f_255(v56, v57, v58, v59, v60, 1, v63, v81, v64, v65, v66, 0, 3, 2, 4) :|: 1 + v81 = v63 && 0 <= v81
f_255(v56, v57, v58, v59, v60, 1, v63, v81, v64, v65, v66, 0, 3, 2, 4) -> f_259(v56, v57, v58, v59, v60, 1, v63, v81, v64, v65, v66, 0, 3, 2, 4) :|: TRUE
f_259(v56, v57, v58, v59, v60, 1, v63, v81, v64, v65, v66, 0, 3, 2, 4) -> f_263(v56, v57, v58, v59, v60, 1, v63, v81, v64, v65, v66, 0, 3, 2, 4) :|: TRUE
f_263(v56, v57, v58, v59, v60, 1, v63, v81, v64, v65, v66, 0, 3, 2, 4) -> f_234(v56, v57, v58, v59, v60, 1, v63, v81, v64, v65, v66, 0, 3, 2, 4) :|: TRUE
f_234(v56, v57, v58, v59, v60, 1, v62, v63, v64, v65, v66, 0, 3, 2, 4) -> f_237(v56, v57, v58, v59, v60, 1, v63, v62, v64, v65, v66, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_237(v56:0, v57:0, v58:0, v59:0, v60:0, 1, 1 + v81:0, v62:0, v64:0, v65:0, v66:0, 0, 3, 2, 4) -> f_237(v56:0, v57:0, v58:0, v59:0, v60:0, 1, v81:0, 1 + v81:0, v64:0, v65:0, v66:0, 0, 3, 2, 4) :|: v62:0 > 1 && v81:0 > -1
Filtered unneeded arguments:
   f_237(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_237(x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_237(sum~cons_1~v81:0, v62:0) -> f_237(v81:0, 1 + v81:0) :|: v62:0 > 1 && v81:0 > -1 && sum~cons_1~v81:0 = 1 + v81:0

----------------------------------------

(16)
Obligation:
Rules:
f_237(sum~cons_1~v81:0, v62:0) -> f_237(v81:0, 1 + v81:0) :|: v62:0 > 1 && v81:0 > -1 && sum~cons_1~v81:0 = 1 + v81:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_237(sum~cons_1~v81:0:0, v62:0:0) -> f_237(v81:0:0, 1 + v81:0:0) :|: v62:0:0 > 1 && v81:0:0 > -1 && sum~cons_1~v81:0:0 = 1 + v81:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_237(x, x1)] = x

The following rules are decreasing:
f_237(sum~cons_1~v81:0:0, v62:0:0) -> f_237(v81:0:0, 1 + v81:0:0) :|: v62:0:0 > 1 && v81:0:0 > -1 && sum~cons_1~v81:0:0 = 1 + v81:0:0
The following rules are bounded:
f_237(sum~cons_1~v81:0:0, v62:0:0) -> f_237(v81:0:0, 1 + v81:0:0) :|: v62:0:0 > 1 && v81:0:0 > -1 && sum~cons_1~v81:0:0 = 1 + v81:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
