YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/JGP6k.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 303 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 0 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 6 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 0 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/JGP6k.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/JGP6k.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sgt %7 0
		br %8, %9, %23
	9:
		%10 = load %3
		%11 = icmp sgt %10 0
		br %11, %12, %17
	12:
		%13 = load %2
		%14 = load %3
		%15 = sub i32 %13, %14
		%16 = sub i32 %15, 1
		store %16, %2
		br %22
	17:
		%18 = load %2
		%19 = load %3
		%20 = add i32 %18, %19
		%21 = sub i32 %20, 1
		store %21, %2
		br %22
	22:
		br %6
	23:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_173(v58, v59, v60, v61, v62, v66, 1, v63, v65, v67, v68, v69, 0, 3, 4) -> f_175(v58, v59, v60, v61, v62, v66, 1, v63, v65, v67, v68, v69, 0, 3, 2, 4) :|: 0 < v66 && 2 <= v65 && 3 <= v63
f_175(v58, v59, v60, v61, v62, v66, 1, v63, v65, v67, v68, v69, 0, 3, 2, 4) -> f_179(v58, v59, v60, v61, v62, v66, 1, v63, v65, v67, v68, v69, 0, 3, 2, 4) :|: 0 = 0
f_179(v58, v59, v60, v61, v62, v66, 1, v63, v65, v67, v68, v69, 0, 3, 2, 4) -> f_183(v58, v59, v60, v61, v62, v66, 1, v63, v65, v67, v68, v69, 0, 3, 2, 4) :|: TRUE
f_183(v58, v59, v60, v61, v62, v66, 1, v63, v65, v67, v68, v69, 0, 3, 2, 4) -> f_187(v58, v59, v60, v61, v62, v66, 1, v63, v65, v67, v68, v69, 0, 3, 2, 4) :|: 0 = 0
f_187(v58, v59, v60, v61, v62, v66, 1, v63, v65, v67, v68, v69, 0, 3, 2, 4) -> f_189(v58, v59, v60, v61, v62, v66, 1, v63, v65, v67, v68, v69, 0, 3, 2, 4) :|: 0 = 0
f_189(v58, v59, v60, v61, v62, v66, 1, v63, v65, v67, v68, v69, 0, 3, 2, 4) -> f_191(v58, v59, v60, v61, v62, v66, 1, v63, v65, v67, v68, v69, 0, 3, 2, 4) :|: TRUE
f_191(v58, v59, v60, v61, v62, v66, 1, v63, v65, v67, v68, v69, 0, 3, 2, 4) -> f_193(v58, v59, v60, v61, v62, v66, 1, v65, v67, v68, v69, 0, 3, 2, 4) :|: 0 = 0
f_193(v58, v59, v60, v61, v62, v66, 1, v65, v67, v68, v69, 0, 3, 2, 4) -> f_195(v58, v59, v60, v61, v62, v66, 1, v65, v67, v68, v69, 0, 3, 2, 4) :|: 0 = 0
f_195(v58, v59, v60, v61, v62, v66, 1, v65, v67, v68, v69, 0, 3, 2, 4) -> f_197(v58, v59, v60, v61, v62, v66, 1, v83, v67, v68, v69, 0, 3, 4) :|: v83 + v62 = v66
f_197(v58, v59, v60, v61, v62, v66, 1, v83, v67, v68, v69, 0, 3, 4) -> f_199(v58, v59, v60, v61, v62, v66, 1, v83, v85, v67, v68, v69, 0, 3, 4) :|: 1 + v85 = v83
f_199(v58, v59, v60, v61, v62, v66, 1, v83, v85, v67, v68, v69, 0, 3, 4) -> f_201(v58, v59, v60, v61, v62, v66, 1, v83, v85, v67, v68, v69, 0, 3, 4) :|: TRUE
f_201(v58, v59, v60, v61, v62, v66, 1, v83, v85, v67, v68, v69, 0, 3, 4) -> f_203(v58, v59, v60, v61, v62, v66, 1, v83, v85, v67, v68, v69, 0, 3, 4) :|: TRUE
f_203(v58, v59, v60, v61, v62, v66, 1, v83, v85, v67, v68, v69, 0, 3, 4) -> f_205(v58, v59, v60, v61, v62, v66, 1, v83, v85, v67, v68, v69, 0, 3, 4) :|: TRUE
f_205(v58, v59, v60, v61, v62, v66, 1, v83, v85, v67, v68, v69, 0, 3, 4) -> f_171(v58, v59, v60, v61, v62, v66, 1, v83, v85, v67, v68, v69, 0, 3, 4) :|: 1 <= v58 && 1 <= v59 && 1 <= v60 && 1 <= v61 && 1 <= v62 && 1 <= v66 && 4 <= v67 && 4 <= v68 && 4 <= v69 && v58 <= v67 && v59 <= v68 && v60 <= v69
f_171(v58, v59, v60, v61, v62, v63, 1, v65, v66, v67, v68, v69, 0, 3, 4) -> f_173(v58, v59, v60, v61, v62, v66, 1, v63, v65, v67, v68, v69, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_173(v58:0, v59:0, v60:0, v61:0, v62:0, 1 + v85:0 + v62:0, 1, v63:0, v65:0, v67:0, v68:0, v69:0, 0, 3, 4) -> f_173(v58:0, v59:0, v60:0, v61:0, v62:0, v85:0, 1, 1 + v85:0 + v62:0, 1 + v85:0, v67:0, v68:0, v69:0, 0, 3, 4) :|: v65:0 > 1 && 1 + v85:0 + v62:0 > 0 && v63:0 > 2 && v59:0 > 0 && v58:0 > 0 && v60:0 > 0 && v61:0 > 0 && v62:0 > 0 && v67:0 > 3 && v68:0 > 3 && v69:0 > 3 && v67:0 >= v58:0 && v69:0 >= v60:0 && v68:0 >= v59:0
Filtered unneeded arguments:
   f_173(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_173(x1, x2, x3, x4, x5, x6, x8, x9, x10, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_173(v58:0, v59:0, v60:0, v61:0, v62:0, sum~sum~cons_1~v85:0~v62:0, v63:0, v65:0, v67:0, v68:0, v69:0) -> f_173(v58:0, v59:0, v60:0, v61:0, v62:0, v85:0, 1 + v85:0 + v62:0, 1 + v85:0, v67:0, v68:0, v69:0) :|: 1 + v85:0 + v62:0 > 0 && v65:0 > 1 && v63:0 > 2 && v59:0 > 0 && v58:0 > 0 && v60:0 > 0 && v61:0 > 0 && v62:0 > 0 && v67:0 > 3 && v68:0 > 3 && v69:0 > 3 && v67:0 >= v58:0 && v68:0 >= v59:0 && v69:0 >= v60:0 && sum~sum~cons_1~v85:0~v62:0 = 1 + v85:0 + v62:0

----------------------------------------

(9)
Obligation:
Rules:
f_173(v58:0, v59:0, v60:0, v61:0, v62:0, sum~sum~cons_1~v85:0~v62:0, v63:0, v65:0, v67:0, v68:0, v69:0) -> f_173(v58:0, v59:0, v60:0, v61:0, v62:0, v85:0, 1 + v85:0 + v62:0, 1 + v85:0, v67:0, v68:0, v69:0) :|: 1 + v85:0 + v62:0 > 0 && v65:0 > 1 && v63:0 > 2 && v59:0 > 0 && v58:0 > 0 && v60:0 > 0 && v61:0 > 0 && v62:0 > 0 && v67:0 > 3 && v68:0 > 3 && v69:0 > 3 && v67:0 >= v58:0 && v68:0 >= v59:0 && v69:0 >= v60:0 && sum~sum~cons_1~v85:0~v62:0 = 1 + v85:0 + v62:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_173(v58:0:0, v59:0:0, v60:0:0, v61:0:0, v62:0:0, sum~sum~cons_1~v85:0:0~v62:0:0, v63:0:0, v65:0:0, v67:0:0, v68:0:0, v69:0:0) -> f_173(v58:0:0, v59:0:0, v60:0:0, v61:0:0, v62:0:0, v85:0:0, 1 + v85:0:0 + v62:0:0, 1 + v85:0:0, v67:0:0, v68:0:0, v69:0:0) :|: v68:0:0 >= v59:0:0 && v69:0:0 >= v60:0:0 && v67:0:0 >= v58:0:0 && v69:0:0 > 3 && v68:0:0 > 3 && v67:0:0 > 3 && v62:0:0 > 0 && v61:0:0 > 0 && v60:0:0 > 0 && v58:0:0 > 0 && v59:0:0 > 0 && v63:0:0 > 2 && v65:0:0 > 1 && 1 + v85:0:0 + v62:0:0 > 0 && sum~sum~cons_1~v85:0:0~v62:0:0 = 1 + v85:0:0 + v62:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_173 ] = 1/2*f_173_6

The following rules are decreasing:
f_173(v58:0:0, v59:0:0, v60:0:0, v61:0:0, v62:0:0, sum~sum~cons_1~v85:0:0~v62:0:0, v63:0:0, v65:0:0, v67:0:0, v68:0:0, v69:0:0) -> f_173(v58:0:0, v59:0:0, v60:0:0, v61:0:0, v62:0:0, v85:0:0, 1 + v85:0:0 + v62:0:0, 1 + v85:0:0, v67:0:0, v68:0:0, v69:0:0) :|: v68:0:0 >= v59:0:0 && v69:0:0 >= v60:0:0 && v67:0:0 >= v58:0:0 && v69:0:0 > 3 && v68:0:0 > 3 && v67:0:0 > 3 && v62:0:0 > 0 && v61:0:0 > 0 && v60:0:0 > 0 && v58:0:0 > 0 && v59:0:0 > 0 && v63:0:0 > 2 && v65:0:0 > 1 && 1 + v85:0:0 + v62:0:0 > 0 && sum~sum~cons_1~v85:0:0~v62:0:0 = 1 + v85:0:0 + v62:0:0

The following rules are bounded:
f_173(v58:0:0, v59:0:0, v60:0:0, v61:0:0, v62:0:0, sum~sum~cons_1~v85:0:0~v62:0:0, v63:0:0, v65:0:0, v67:0:0, v68:0:0, v69:0:0) -> f_173(v58:0:0, v59:0:0, v60:0:0, v61:0:0, v62:0:0, v85:0:0, 1 + v85:0:0 + v62:0:0, 1 + v85:0:0, v67:0:0, v68:0:0, v69:0:0) :|: v68:0:0 >= v59:0:0 && v69:0:0 >= v60:0:0 && v67:0:0 >= v58:0:0 && v69:0:0 > 3 && v68:0:0 > 3 && v67:0:0 > 3 && v62:0:0 > 0 && v61:0:0 > 0 && v60:0:0 > 0 && v58:0:0 > 0 && v59:0:0 > 0 && v63:0:0 > 2 && v65:0:0 > 1 && 1 + v85:0:0 + v62:0:0 > 0 && sum~sum~cons_1~v85:0:0~v62:0:0 = 1 + v85:0:0 + v62:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_172(v38, v39, v40, v41, v42, v43, 1, 0, v46, v47, v48, v49, v50, 3, 4) -> f_174(v38, v39, v40, v41, v42, v47, 1, 0, v43, v46, v48, v49, v50, 3, 4) :|: 0 = 0
f_174(v38, v39, v40, v41, v42, v47, 1, 0, v43, v46, v48, v49, v50, 3, 4) -> f_177(v38, v39, v40, v41, v42, v47, 1, 0, v43, v46, v48, v49, v50, 3, 2, 4) :|: 0 < v47 && 2 <= v46 && 2 <= v43
f_177(v38, v39, v40, v41, v42, v47, 1, 0, v43, v46, v48, v49, v50, 3, 2, 4) -> f_181(v38, v39, v40, v41, v42, v47, 1, 0, v43, v46, v48, v49, v50, 3, 2, 4) :|: 0 = 0
f_181(v38, v39, v40, v41, v42, v47, 1, 0, v43, v46, v48, v49, v50, 3, 2, 4) -> f_185(v38, v39, v40, v41, v42, v47, 1, 0, v43, v46, v48, v49, v50, 3, 2, 4) :|: TRUE
f_185(v38, v39, v40, v41, v42, v47, 1, 0, v43, v46, v48, v49, v50, 3, 2, 4) -> f_188(v38, v39, v40, v41, v42, v47, 1, 0, v43, v46, v48, v49, v50, 3, 2, 4) :|: 0 = 0
f_188(v38, v39, v40, v41, v42, v47, 1, 0, v43, v46, v48, v49, v50, 3, 2, 4) -> f_190(v38, v39, v40, v41, v42, v47, 1, 0, v43, v46, v48, v49, v50, 3, 2, 4) :|: 0 = 0
f_190(v38, v39, v40, v41, v42, v47, 1, 0, v43, v46, v48, v49, v50, 3, 2, 4) -> f_192(v38, v39, v40, v41, v42, v47, 1, 0, v43, v46, v48, v49, v50, 3, 2, 4) :|: TRUE
f_192(v38, v39, v40, v41, v42, v47, 1, 0, v43, v46, v48, v49, v50, 3, 2, 4) -> f_194(v38, v39, v40, v41, v42, v47, 1, 0, v46, v48, v49, v50, 3, 2, 4) :|: 0 = 0
f_194(v38, v39, v40, v41, v42, v47, 1, 0, v46, v48, v49, v50, 3, 2, 4) -> f_196(v38, v39, v40, v41, v42, v47, 1, 0, v46, v48, v49, v50, 3, 2, 4) :|: 0 = 0
f_196(v38, v39, v40, v41, v42, v47, 1, 0, v46, v48, v49, v50, 3, 2, 4) -> f_198(v38, v39, v40, v41, v42, v47, 1, 0, v84, v48, v49, v50, 3, 4) :|: v84 = v47 + v42
f_198(v38, v39, v40, v41, v42, v47, 1, 0, v84, v48, v49, v50, 3, 4) -> f_200(v38, v39, v40, v41, v42, v47, 1, 0, v84, v86, v48, v49, v50, 3, 4) :|: 1 + v86 = v84
f_200(v38, v39, v40, v41, v42, v47, 1, 0, v84, v86, v48, v49, v50, 3, 4) -> f_202(v38, v39, v40, v41, v42, v47, 1, 0, v84, v86, v48, v49, v50, 3, 4) :|: TRUE
f_202(v38, v39, v40, v41, v42, v47, 1, 0, v84, v86, v48, v49, v50, 3, 4) -> f_204(v38, v39, v40, v41, v42, v47, 1, 0, v84, v86, v48, v49, v50, 3, 4) :|: TRUE
f_204(v38, v39, v40, v41, v42, v47, 1, 0, v84, v86, v48, v49, v50, 3, 4) -> f_169(v38, v39, v40, v41, v42, v47, 1, 0, v84, v86, v48, v49, v50, 3, 4) :|: 1 <= v38 && 1 <= v39 && 1 <= v40 && 1 <= v41 && v42 <= 0 && 1 <= v47 && 4 <= v48 && 4 <= v49 && 4 <= v50 && v38 <= v48 && v39 <= v49 && v40 <= v50
f_169(v38, v39, v40, v41, v42, v43, 1, 0, v46, v47, v48, v49, v50, 3, 4) -> f_172(v38, v39, v40, v41, v42, v43, 1, 0, v46, v47, v48, v49, v50, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_172(v38:0, v39:0, v40:0, v41:0, v42:0, v43:0, 1, 0, v46:0, v47:0, v48:0, v49:0, v50:0, 3, 4) -> f_172(v38:0, v39:0, v40:0, v41:0, v42:0, v47:0, 1, 0, 1 + v86:0, v86:0, v48:0, v49:0, v50:0, 3, 4) :|: v46:0 > 1 && v47:0 > 0 && v43:0 > 1 && v39:0 > 0 && v38:0 > 0 && v40:0 > 0 && v41:0 > 0 && v42:0 < 1 && v48:0 > 3 && v49:0 > 3 && v50:0 > 3 && v47:0 + v42:0 = 1 + v86:0 && v48:0 >= v38:0 && v50:0 >= v40:0 && v49:0 >= v39:0
Filtered unneeded arguments:
   f_172(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_172(x1, x2, x3, x4, x5, x6, x9, x10, x11, x12, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_172(v38:0, v39:0, v40:0, v41:0, v42:0, v43:0, v46:0, v47:0, v48:0, v49:0, v50:0) -> f_172(v38:0, v39:0, v40:0, v41:0, v42:0, v47:0, 1 + v86:0, v86:0, v48:0, v49:0, v50:0) :|: v47:0 > 0 && v46:0 > 1 && v43:0 > 1 && v39:0 > 0 && v38:0 > 0 && v40:0 > 0 && v41:0 > 0 && v42:0 < 1 && v48:0 > 3 && v49:0 > 3 && v50:0 > 3 && v47:0 + v42:0 = 1 + v86:0 && v48:0 >= v38:0 && v49:0 >= v39:0 && v50:0 >= v40:0

----------------------------------------

(16)
Obligation:
Rules:
f_172(v38:0, v39:0, v40:0, v41:0, v42:0, v43:0, v46:0, v47:0, v48:0, v49:0, v50:0) -> f_172(v38:0, v39:0, v40:0, v41:0, v42:0, v47:0, 1 + v86:0, v86:0, v48:0, v49:0, v50:0) :|: v47:0 > 0 && v46:0 > 1 && v43:0 > 1 && v39:0 > 0 && v38:0 > 0 && v40:0 > 0 && v41:0 > 0 && v42:0 < 1 && v48:0 > 3 && v49:0 > 3 && v50:0 > 3 && v47:0 + v42:0 = 1 + v86:0 && v48:0 >= v38:0 && v49:0 >= v39:0 && v50:0 >= v40:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_172(v38:0:0, v39:0:0, v40:0:0, v41:0:0, v42:0:0, v43:0:0, v46:0:0, v47:0:0, v48:0:0, v49:0:0, v50:0:0) -> f_172(v38:0:0, v39:0:0, v40:0:0, v41:0:0, v42:0:0, v47:0:0, 1 + v86:0:0, v86:0:0, v48:0:0, v49:0:0, v50:0:0) :|: v49:0:0 >= v39:0:0 && v50:0:0 >= v40:0:0 && v48:0:0 >= v38:0:0 && v47:0:0 + v42:0:0 = 1 + v86:0:0 && v50:0:0 > 3 && v49:0:0 > 3 && v48:0:0 > 3 && v42:0:0 < 1 && v41:0:0 > 0 && v40:0:0 > 0 && v38:0:0 > 0 && v39:0:0 > 0 && v43:0:0 > 1 && v46:0:0 > 1 && v47:0:0 > 0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_172(x, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)] = x7

The following rules are decreasing:
f_172(v38:0:0, v39:0:0, v40:0:0, v41:0:0, v42:0:0, v43:0:0, v46:0:0, v47:0:0, v48:0:0, v49:0:0, v50:0:0) -> f_172(v38:0:0, v39:0:0, v40:0:0, v41:0:0, v42:0:0, v47:0:0, 1 + v86:0:0, v86:0:0, v48:0:0, v49:0:0, v50:0:0) :|: v49:0:0 >= v39:0:0 && v50:0:0 >= v40:0:0 && v48:0:0 >= v38:0:0 && v47:0:0 + v42:0:0 = 1 + v86:0:0 && v50:0:0 > 3 && v49:0:0 > 3 && v48:0:0 > 3 && v42:0:0 < 1 && v41:0:0 > 0 && v40:0:0 > 0 && v38:0:0 > 0 && v39:0:0 > 0 && v43:0:0 > 1 && v46:0:0 > 1 && v47:0:0 > 0
The following rules are bounded:
f_172(v38:0:0, v39:0:0, v40:0:0, v41:0:0, v42:0:0, v43:0:0, v46:0:0, v47:0:0, v48:0:0, v49:0:0, v50:0:0) -> f_172(v38:0:0, v39:0:0, v40:0:0, v41:0:0, v42:0:0, v47:0:0, 1 + v86:0:0, v86:0:0, v48:0:0, v49:0:0, v50:0:0) :|: v49:0:0 >= v39:0:0 && v50:0:0 >= v40:0:0 && v48:0:0 >= v38:0:0 && v47:0:0 + v42:0:0 = 1 + v86:0:0 && v50:0:0 > 3 && v49:0:0 > 3 && v48:0:0 > 3 && v42:0:0 < 1 && v41:0:0 > 0 && v40:0:0 > 0 && v38:0:0 > 0 && v39:0:0 > 0 && v43:0:0 > 1 && v46:0:0 > 1 && v47:0:0 > 0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
