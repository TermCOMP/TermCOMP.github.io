YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/mypV0.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 45 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2315 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 82 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/mypV0.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/mypV0.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %7
		%14 = load %3
		%15 = load %5
		store %14, %15
		%16 = load %4
		%17 = load %6
		store %16, %17
		%18 = load %7
		store 0, %18
		br %19
	19:
		%20 = load %5
		%21 = load %20
		%22 = icmp sgt %21 0
		br %22, %23, %27
	23:
		%24 = load %6
		%25 = load %24
		%26 = icmp sgt %25 0
		br %27
	27:
		%28 = phi [0, %19], [%26, %23]
		br %28, %29, %42
	29:
		%30 = load %5
		%31 = load %30
		%32 = sub i32 %31, 1
		%33 = load %5
		store %32, %33
		%34 = load %6
		%35 = load %34
		%36 = sub i32 %35, 1
		%37 = load %6
		store %36, %37
		%38 = load %7
		%39 = load %38
		%40 = add i32 %39, 1
		%41 = load %7
		store %40, %41
		br %19
	42:
		%43 = load %7
		%44 = load %43
		ret %44

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 64
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 28 rulesP rules:
f_529(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v639, 1, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 4, 8) -> f_530(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v641, v639, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 4, 8) :|: 0 = 0
f_530(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v641, v639, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 4, 8) -> f_531(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v641, v639, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 < v642 && 2 <= v639 && 2 <= v629
f_531(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v641, v639, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_533(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v641, v639, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_533(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v641, v639, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_535(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v641, v639, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: TRUE
f_535(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v641, v639, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_537(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v641, v639, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_537(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v641, v639, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_539(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v639, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_539(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v639, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_541(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v639, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 < v643 && 2 <= v641 && 2 <= v630
f_541(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v639, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_544(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v639, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_544(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v639, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_547(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v639, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_547(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v639, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_549(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v639, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: TRUE
f_549(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v639, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_551(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v639, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_551(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v639, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_553(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_553(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_555(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 1 + v725 = v642 && 0 <= v725
f_555(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_557(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_557(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_558(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: TRUE
f_558(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_559(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_559(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v641, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_560(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_560(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_561(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 1 + v727 = v643 && 0 <= v727
f_561(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_562(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_562(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_563(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: TRUE
f_563(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_564(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_564(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_565(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_565(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_566(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v645, v729, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: v729 = 1 + v645 && 2 <= v729
f_566(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v645, v729, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_567(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v645, v729, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_567(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v645, v729, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_568(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v645, v729, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: TRUE
f_568(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v645, v729, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_569(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v645, v729, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) :|: TRUE
f_569(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v645, v729, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 2, 4, 8) -> f_528(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v642, 1, v643, v725, v727, v645, v729, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 4, 8) :|: TRUE
f_528(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v639, 1, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 4, 8) -> f_529(v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v639, 1, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_529(v629:0, v630:0, v631:0, v632:0, v633:0, v634:0, v635:0, v636:0, v637:0, v638:0, v639:0, 1, v641:0, 1 + v725:0, 1 + v727:0, v644:0, v645:0, v646:0, v647:0, v648:0, v649:0, v650:0, v651:0, v652:0, v653:0, v654:0, v655:0, 0, 3, 7, 4, 8) -> f_529(v629:0, v630:0, v631:0, v632:0, v633:0, v634:0, v635:0, v636:0, v637:0, v638:0, 1 + v725:0, 1, 1 + v727:0, v725:0, v727:0, v645:0, 1 + v645:0, v646:0, v647:0, v648:0, v649:0, v650:0, v651:0, v652:0, v653:0, v654:0, v655:0, 0, 3, 7, 4, 8) :|: v639:0 > 1 && v725:0 > -1 && v629:0 > 1 && v641:0 > 1 && v727:0 > -1 && v630:0 > 1 && v645:0 > 0
Filtered unneeded arguments:
   f_529(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32) -> f_529(x1, x2, x11, x13, x14, x15, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_529(v629:0, v630:0, v639:0, v641:0, sum~cons_1~v725:0, sum~cons_1~v727:0, v645:0) -> f_529(v629:0, v630:0, 1 + v725:0, 1 + v727:0, v725:0, v727:0, 1 + v645:0) :|: v725:0 > -1 && v639:0 > 1 && v629:0 > 1 && v641:0 > 1 && v727:0 > -1 && v645:0 > 0 && v630:0 > 1 && sum~cons_1~v725:0 = 1 + v725:0 && sum~cons_1~v727:0 = 1 + v727:0

----------------------------------------

(8)
Obligation:
Rules:
f_529(v629:0, v630:0, v639:0, v641:0, sum~cons_1~v725:0, sum~cons_1~v727:0, v645:0) -> f_529(v629:0, v630:0, 1 + v725:0, 1 + v727:0, v725:0, v727:0, 1 + v645:0) :|: v725:0 > -1 && v639:0 > 1 && v629:0 > 1 && v641:0 > 1 && v727:0 > -1 && v645:0 > 0 && v630:0 > 1 && sum~cons_1~v725:0 = 1 + v725:0 && sum~cons_1~v727:0 = 1 + v727:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_529(v629:0:0, v630:0:0, v639:0:0, v641:0:0, sum~cons_1~v725:0:0, sum~cons_1~v727:0:0, v645:0:0) -> f_529(v629:0:0, v630:0:0, 1 + v725:0:0, 1 + v727:0:0, v725:0:0, v727:0:0, 1 + v645:0:0) :|: v645:0:0 > 0 && v630:0:0 > 1 && v727:0:0 > -1 && v641:0:0 > 1 && v629:0:0 > 1 && v639:0:0 > 1 && v725:0:0 > -1 && sum~cons_1~v725:0:0 = 1 + v725:0:0 && sum~cons_1~v727:0:0 = 1 + v727:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_529(x, x1, x2, x3, x4, x5, x6)] = x4

The following rules are decreasing:
f_529(v629:0:0, v630:0:0, v639:0:0, v641:0:0, sum~cons_1~v725:0:0, sum~cons_1~v727:0:0, v645:0:0) -> f_529(v629:0:0, v630:0:0, 1 + v725:0:0, 1 + v727:0:0, v725:0:0, v727:0:0, 1 + v645:0:0) :|: v645:0:0 > 0 && v630:0:0 > 1 && v727:0:0 > -1 && v641:0:0 > 1 && v629:0:0 > 1 && v639:0:0 > 1 && v725:0:0 > -1 && sum~cons_1~v725:0:0 = 1 + v725:0:0 && sum~cons_1~v727:0:0 = 1 + v727:0:0
The following rules are bounded:
f_529(v629:0:0, v630:0:0, v639:0:0, v641:0:0, sum~cons_1~v725:0:0, sum~cons_1~v727:0:0, v645:0:0) -> f_529(v629:0:0, v630:0:0, 1 + v725:0:0, 1 + v727:0:0, v725:0:0, v727:0:0, 1 + v645:0:0) :|: v645:0:0 > 0 && v630:0:0 > 1 && v727:0:0 > -1 && v641:0:0 > 1 && v629:0:0 > 1 && v639:0:0 > 1 && v725:0:0 > -1 && sum~cons_1~v725:0:0 = 1 + v725:0:0 && sum~cons_1~v727:0:0 = 1 + v727:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
