YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/am453.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1288 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 40 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/am453.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/am453.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.stacksave" returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.stackrestore" returnParam: BasicVoidType parameters: (*i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *i8, align 8
		%4 = alloca i64, align 8
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %2
		%8 = load %2
		%9 = icmp slt %8 1
		br %9, %10, %11
	10:
		store 0, %1
		br %38
	11:
		%12 = load %2
		%13 = zext i32 %12 to i64
		%14 = call *i8 @llvm.stacksave()
		store %14, %3
		%15 = alloca i32, numElementsLit: %13, align 16
		store %13, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %15)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store 0, %6
		br %16
	16:
		%17 = load %6
		%18 = load %2
		%19 = icmp slt %17 %18
		br %19, %20, %36
	20:
		%21 = load %6
		%22 = sext i32 %21 to i64
		%23 = getelementptr %15, %22
		%24 = load %23
		%25 = icmp slt %24 0
		br %25, %26, %27
	26:
		br %36
	27:
		%28 = load %6
		%29 = load %5
		%30 = add i32 %28, %29
		%31 = load %6
		%32 = sext i32 %31 to i64
		%33 = getelementptr %15, %32
		%34 = load %33
		%35 = add i32 %30, %34
		store %35, %6
		br %16
	36:
		store 0, %1
		%37 = load %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.stackrestore(*i8 %37)
		br %38
	38:
		%39 = load %1
		ret %39


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 23 rulesP rules:
f_315(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v154, v156, v157, v158, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 8) -> f_316(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v154, v156, v157, v158, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 8) :|: 0 = 0
f_316(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v154, v156, v157, v158, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 8) -> f_317(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v154, v156, v157, v158, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8) :|: v159 < v150 && 2 <= v150 && 8 <= v166
f_317(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v154, v156, v157, v158, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8) -> f_319(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v154, v156, v157, v158, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8) :|: 0 = 0
f_319(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v154, v156, v157, v158, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8) -> f_321(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v154, v156, v157, v158, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8) :|: TRUE
f_321(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v154, v156, v157, v158, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8) -> f_323(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v154, v156, v157, v158, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8) :|: 0 = 0
f_323(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v154, v156, v157, v158, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8) -> f_325(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v156, v157, v154, v158, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8) :|: 0 = 0
f_325(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v156, v157, v154, v158, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8) -> f_327(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v157, v154, v158, v156, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) :|: v168 = v153 + 4 * v159 && 5 <= v168
f_327(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v157, v154, v158, v156, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) -> f_329(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v154, v158, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) :|: TRUE
f_329(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v154, v158, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) -> f_332(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v154, v158, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) :|: 0 <= v169
f_332(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v154, v158, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) -> f_335(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v154, v158, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) :|: 0 = 0
f_335(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v154, v158, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) -> f_337(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v154, v158, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) :|: TRUE
f_337(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v154, v158, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) -> f_339(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v158, v154, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) :|: 0 = 0
f_339(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v158, v154, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) -> f_341(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v158, v154, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) :|: 0 = 0
f_341(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v158, v154, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) -> f_343(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v154, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) :|: v192 = 1 + v159 && 2 <= v192
f_343(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v154, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) -> f_345(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v154, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) :|: 0 = 0
f_345(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v154, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) -> f_347(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) :|: 0 = 0
f_347(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v156, v157, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 2, 8, 5) -> f_349(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v157, v160, v161, v162, v163, v164, v165, v166, v167, v156, 3, 7, 4, 2, 8, 5) :|: v168 = v153 + 4 * v159
f_349(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v157, v160, v161, v162, v163, v164, v165, v166, v167, v156, 3, 7, 4, 2, 8, 5) -> f_350(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v160, v161, v162, v163, v164, v165, v166, v167, v156, v157, 3, 7, 4, 2, 8, 5) :|: 0 = 0
f_350(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v160, v161, v162, v163, v164, v165, v166, v167, v156, v157, 3, 7, 4, 2, 8, 5) -> f_351(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v214, v160, v161, v162, v163, v164, v165, v166, v167, v156, v157, 3, 7, 4, 2, 8, 5) :|: v214 = v192 + v169 && 2 <= v214
f_351(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v214, v160, v161, v162, v163, v164, v165, v166, v167, v156, v157, 3, 7, 4, 2, 8, 5) -> f_352(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v214, v160, v161, v162, v163, v164, v165, v166, v167, v156, v157, 3, 7, 4, 2, 8, 5) :|: TRUE
f_352(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v214, v160, v161, v162, v163, v164, v165, v166, v167, v156, v157, 3, 7, 4, 2, 8, 5) -> f_353(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v214, v160, v161, v162, v163, v164, v165, v166, v167, v156, v157, 3, 7, 4, 2, 8, 5) :|: TRUE
f_353(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v214, v160, v161, v162, v163, v164, v165, v166, v167, v156, v157, 3, 7, 4, 2, 8, 5) -> f_314(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v168, v169, v192, v214, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 8) :|: TRUE
f_314(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v154, 1, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 8) -> f_315(v144, v145, v146, v147, v148, v149, v150, 0, v152, v153, v159, 1, v154, v156, v157, v158, v160, v161, v162, v163, v164, v165, v166, v167, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_315(v144:0, v145:0, v146:0, v147:0, v148:0, v149:0, v150:0, 0, v152:0, v153:0, v159:0, 1, v154:0, v156:0, v157:0, v158:0, v160:0, v161:0, v162:0, v163:0, v164:0, v165:0, v166:0, v167:0, 3, 7, 4, 8) -> f_315(v144:0, v145:0, v146:0, v147:0, v148:0, v149:0, v150:0, 0, v152:0, v153:0, 1 + v159:0 + v169:0, 1, v159:0, v153:0 + 4 * v159:0, v169:0, 1 + v159:0, v160:0, v161:0, v162:0, v163:0, v164:0, v165:0, v166:0, v167:0, 3, 7, 4, 8) :|: v150:0 > 1 && v159:0 < v150:0 && v166:0 > 7 && v153:0 + 4 * v159:0 > 4 && v169:0 > -1 && 1 + v159:0 + v169:0 > 1 && v159:0 > 0
Filtered unneeded arguments:
   f_315(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_315(x7, x10, x11, x23)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_315(v150:0, v153:0, v159:0, v166:0) -> f_315(v150:0, v153:0, 1 + v159:0 + v169:0, v166:0) :|: v159:0 < v150:0 && v150:0 > 1 && v166:0 > 7 && v153:0 + 4 * v159:0 > 4 && v169:0 > -1 && v159:0 > 0 && 1 + v159:0 + v169:0 > 1

----------------------------------------

(8)
Obligation:
Rules:
f_315(v150:0, v153:0, v159:0, v166:0) -> f_315(v150:0, v153:0, 1 + v159:0 + v169:0, v166:0) :|: v159:0 < v150:0 && v150:0 > 1 && v166:0 > 7 && v153:0 + 4 * v159:0 > 4 && v169:0 > -1 && v159:0 > 0 && 1 + v159:0 + v169:0 > 1

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_315(v150:0:0, v153:0:0, v159:0:0, v166:0:0) -> f_315(v150:0:0, v153:0:0, 1 + v159:0:0 + v169:0:0, v166:0:0) :|: v159:0:0 > 0 && 1 + v159:0:0 + v169:0:0 > 1 && v169:0:0 > -1 && v153:0:0 + 4 * v159:0:0 > 4 && v166:0:0 > 7 && v150:0:0 > 1 && v159:0:0 < v150:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_315(x, x1, x2, x3)] = -1 + x - x2

The following rules are decreasing:
f_315(v150:0:0, v153:0:0, v159:0:0, v166:0:0) -> f_315(v150:0:0, v153:0:0, 1 + v159:0:0 + v169:0:0, v166:0:0) :|: v159:0:0 > 0 && 1 + v159:0:0 + v169:0:0 > 1 && v169:0:0 > -1 && v153:0:0 + 4 * v159:0:0 > 4 && v166:0:0 > 7 && v150:0:0 > 1 && v159:0:0 < v150:0:0
The following rules are bounded:
f_315(v150:0:0, v153:0:0, v159:0:0, v166:0:0) -> f_315(v150:0:0, v153:0:0, 1 + v159:0:0 + v169:0:0, v166:0:0) :|: v159:0:0 > 0 && 1 + v159:0:0 + v169:0:0 > 1 && v169:0:0 > -1 && v153:0:0 + 4 * v159:0:0 > 4 && v166:0:0 > 7 && v150:0:0 > 1 && v159:0:0 < v150:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
