YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/b4HI5.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 62 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1739 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 29 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 30 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/b4HI5.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/b4HI5.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "subxy" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		store 0, %6
		%8 = load %4
		store %8, %7
		%9 = load %5
		%10 = icmp sle %9 0
		br %10, %14, %11
	11:
		%12 = load %4
		%13 = icmp sle %12 0
		br %13, %14, %15
	14:
		store 0, %3
		br %36
	15:
		br %16
	16:
		%17 = load %7
		%18 = icmp sgt %17 0
		br %18, %19, %24
	19:
		%20 = load %7
		%21 = add i32 %20, -1
		store %21, %7
		%22 = load %6
		%23 = add i32 %22, 1
		store %23, %6
		br %16
	24:
		br %25
	25:
		%26 = load %7
		%27 = load %5
		%28 = icmp slt %26 %27
		br %28, %29, %34
	29:
		%30 = load %7
		%31 = add i32 %30, 1
		store %31, %7
		%32 = load %6
		%33 = add i32 %32, -1
		store %33, %6
		br %25
	34:
		%35 = load %6
		store %35, %3
		br %36
	36:
		%37 = load %3
		ret %37

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 52
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = load %2
		%7 = load %3
		%8 = call i32 @subxy(i32 %6, i32 %7)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_494(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v453, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 4) -> f_495(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v453, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 4) :|: 0 = 0
f_495(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v453, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 4) -> f_496(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v453, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) :|: v454 < v443 && 2 <= v443
f_496(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v453, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) -> f_498(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v453, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) :|: 0 = 0
f_498(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v453, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) -> f_500(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v453, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) :|: TRUE
f_500(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v453, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) -> f_502(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) :|: 0 = 0
f_502(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) -> f_504(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v479, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) :|: v479 = 1 + v454 && 2 <= v479
f_504(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v479, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) -> f_506(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v479, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) :|: TRUE
f_506(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v479, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) -> f_508(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v479, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) :|: 0 = 0
f_508(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v479, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) -> f_510(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v479, v456, v482, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) :|: 1 + v482 = v456
f_510(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v479, v456, v482, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) -> f_512(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v479, v456, v482, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) :|: TRUE
f_512(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v479, v456, v482, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) -> f_513(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v479, v456, v482, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) :|: TRUE
f_513(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v479, v456, v482, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 2, 4) -> f_493(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v479, v456, v482, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 4) :|: TRUE
f_493(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v453, v454, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 4) -> f_494(v442, v443, v444, v445, v446, v447, v448, 0, 1, v451, v452, v454, v453, v455, v456, v457, v460, v458, v461, v459, v462, v463, v464, v465, v466, v467, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_494(v442:0, v443:0, v444:0, v445:0, v446:0, v447:0, v448:0, 0, 1, v451:0, v452:0, v454:0, v453:0, v455:0, 1 + v482:0, v457:0, v460:0, v458:0, v461:0, v459:0, v462:0, v463:0, v464:0, v465:0, v466:0, v467:0, 3, 4) -> f_494(v442:0, v443:0, v444:0, v445:0, v446:0, v447:0, v448:0, 0, 1, v451:0, v452:0, 1 + v454:0, v454:0, 1 + v482:0, v482:0, v457:0, v460:0, v458:0, v461:0, v459:0, v462:0, v463:0, v464:0, v465:0, v466:0, v467:0, 3, 4) :|: v443:0 > 1 && v454:0 > 0 && v454:0 < v443:0
Filtered unneeded arguments:
   f_494(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_494(x2, x12, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_494(v443:0, v454:0, sum~cons_1~v482:0) -> f_494(v443:0, 1 + v454:0, v482:0) :|: v454:0 > 0 && v454:0 < v443:0 && v443:0 > 1 && sum~cons_1~v482:0 = 1 + v482:0

----------------------------------------

(9)
Obligation:
Rules:
f_494(v443:0, v454:0, sum~cons_1~v482:0) -> f_494(v443:0, 1 + v454:0, v482:0) :|: v454:0 > 0 && v454:0 < v443:0 && v443:0 > 1 && sum~cons_1~v482:0 = 1 + v482:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_494(v443:0:0, v454:0:0, sum~cons_1~v482:0:0) -> f_494(v443:0:0, 1 + v454:0:0, v482:0:0) :|: v454:0:0 > 0 && v454:0:0 < v443:0:0 && v443:0:0 > 1 && sum~cons_1~v482:0:0 = 1 + v482:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_494 ] = -1*f_494_2 + f_494_1

The following rules are decreasing:
f_494(v443:0:0, v454:0:0, sum~cons_1~v482:0:0) -> f_494(v443:0:0, 1 + v454:0:0, v482:0:0) :|: v454:0:0 > 0 && v454:0:0 < v443:0:0 && v443:0:0 > 1 && sum~cons_1~v482:0:0 = 1 + v482:0:0

The following rules are bounded:
f_494(v443:0:0, v454:0:0, sum~cons_1~v482:0:0) -> f_494(v443:0:0, 1 + v454:0:0, v482:0:0) :|: v454:0:0 > 0 && v454:0:0 < v443:0:0 && v443:0:0 > 1 && sum~cons_1~v482:0:0 = 1 + v482:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_363(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v148, v151, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 4) -> f_364(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v148, v151, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) :|: 0 < v150 && 2 <= v148 && 2 <= v140
f_364(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v148, v151, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) -> f_366(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v148, v151, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) :|: 0 = 0
f_366(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v148, v151, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) -> f_368(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v148, v151, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) :|: TRUE
f_368(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v148, v151, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) -> f_370(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v151, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) :|: 0 = 0
f_370(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v151, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) -> f_372(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v164, v151, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) :|: 1 + v164 = v150 && 0 <= v164
f_372(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v164, v151, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) -> f_374(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v164, v151, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) :|: TRUE
f_374(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v164, v151, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) -> f_376(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v164, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) :|: 0 = 0
f_376(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v164, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) -> f_378(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v164, v152, v166, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) :|: v166 = 1 + v152 && 2 <= v166
f_378(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v164, v152, v166, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) -> f_380(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v164, v152, v166, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) :|: TRUE
f_380(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v164, v152, v166, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) -> f_382(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v164, v152, v166, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) :|: TRUE
f_382(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v164, v152, v166, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 2, 4) -> f_362(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v164, v152, v166, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 4) :|: TRUE
f_362(v140, v141, v142, v143, v144, v145, v146, 0, v148, 1, v150, v151, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 4) -> f_363(v140, v141, v142, v143, v144, v145, v146, 0, v150, 1, v148, v151, v152, v153, v156, v154, v157, v155, v158, v159, v160, v161, v162, v163, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_363(v140:0, v141:0, v142:0, v143:0, v144:0, v145:0, v146:0, 0, 1 + v164:0, 1, v148:0, v151:0, v152:0, v153:0, v156:0, v154:0, v157:0, v155:0, v158:0, v159:0, v160:0, v161:0, v162:0, v163:0, 3, 4) -> f_363(v140:0, v141:0, v142:0, v143:0, v144:0, v145:0, v146:0, 0, v164:0, 1, 1 + v164:0, v152:0, 1 + v152:0, v153:0, v156:0, v154:0, v157:0, v155:0, v158:0, v159:0, v160:0, v161:0, v162:0, v163:0, 3, 4) :|: v148:0 > 1 && v164:0 > -1 && v140:0 > 1 && v152:0 > 0
Filtered unneeded arguments:
   f_363(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26) -> f_363(x1, x9, x11, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_363(v140:0, sum~cons_1~v164:0, v148:0, v152:0) -> f_363(v140:0, v164:0, 1 + v164:0, 1 + v152:0) :|: v164:0 > -1 && v148:0 > 1 && v152:0 > 0 && v140:0 > 1 && sum~cons_1~v164:0 = 1 + v164:0

----------------------------------------

(16)
Obligation:
Rules:
f_363(v140:0, sum~cons_1~v164:0, v148:0, v152:0) -> f_363(v140:0, v164:0, 1 + v164:0, 1 + v152:0) :|: v164:0 > -1 && v148:0 > 1 && v152:0 > 0 && v140:0 > 1 && sum~cons_1~v164:0 = 1 + v164:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_363(v140:0:0, sum~cons_1~v164:0:0, v148:0:0, v152:0:0) -> f_363(v140:0:0, v164:0:0, 1 + v164:0:0, 1 + v152:0:0) :|: v152:0:0 > 0 && v140:0:0 > 1 && v148:0:0 > 1 && v164:0:0 > -1 && sum~cons_1~v164:0:0 = 1 + v164:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_363(x, x1, x2, x3)] = -1 + x1

The following rules are decreasing:
f_363(v140:0:0, sum~cons_1~v164:0:0, v148:0:0, v152:0:0) -> f_363(v140:0:0, v164:0:0, 1 + v164:0:0, 1 + v152:0:0) :|: v152:0:0 > 0 && v140:0:0 > 1 && v148:0:0 > 1 && v164:0:0 > -1 && sum~cons_1~v164:0:0 = 1 + v164:0:0
The following rules are bounded:
f_363(v140:0:0, sum~cons_1~v164:0:0, v148:0:0, v152:0:0) -> f_363(v140:0:0, v164:0:0, 1 + v164:0:0, 1 + v152:0:0) :|: v152:0:0 > 0 && v140:0:0 > 1 && v148:0:0 > 1 && v164:0:0 > -1 && sum~cons_1~v164:0:0 = 1 + v164:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
