YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/BT9W3.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 46 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3133 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 63 ms]
(8) IntTRS
(9) RankingReductionPairProof [EQUIVALENT, 5 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/BT9W3.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/BT9W3.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca *i32, align 8
		%8 = alloca *i32, align 8
		%9 = alloca *i32, align 8
		%10 = alloca *i32, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%11 = alloca i8, numElementsLit: 4, align 16
		%12 = bitcast *i8 %11 to *i32
		store %12, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %8)
		%13 = alloca i8, numElementsLit: 4, align 16
		%14 = bitcast *i8 %13 to *i32
		store %14, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %9)
		%15 = alloca i8, numElementsLit: 4, align 16
		%16 = bitcast *i8 %15 to *i32
		store %16, %9
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %10)
		%17 = alloca i8, numElementsLit: 4, align 16
		%18 = bitcast *i8 %17 to *i32
		store %18, %10
		%19 = load %4
		%20 = load %7
		store %19, %20
		%21 = load %5
		%22 = load %8
		store %21, %22
		%23 = load %6
		%24 = load %9
		store %23, %24
		%25 = load %10
		store 0, %25
		br %26
	26:
		%27 = load %7
		%28 = load %27
		%29 = load %8
		%30 = load %29
		%31 = load %9
		%32 = load %31
		%33 = add i32 %30, %32
		%34 = icmp sgt %28 %33
		br %34, %35, %48
	35:
		%36 = load %8
		%37 = load %36
		%38 = add i32 %37, 1
		%39 = load %8
		store %38, %39
		%40 = load %9
		%41 = load %40
		%42 = add i32 %41, 1
		%43 = load %9
		store %42, %43
		%44 = load %10
		%45 = load %44
		%46 = add i32 %45, 1
		%47 = load %10
		store %46, %47
		br %26
	48:
		%49 = load %10
		%50 = load %49
		ret %50

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 72
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @test_fun(i32 %2, i32 %3, i32 %4)
		ret %5


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 27 rulesP rules:
f_511(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, 1, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_512(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, 1, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: 0 = 0
f_512(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, 1, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_513(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, 1, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: 0 = 0
f_513(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, 1, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_514(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v278, v279, 1, v277, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: 0 = 0
f_514(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v278, v279, 1, v277, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_515(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v278, v279, 1, v277, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: 0 = 0
f_515(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v278, v279, 1, v277, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_516(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v279, 1, v277, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: 0 = 0
f_516(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v279, 1, v277, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_517(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v277, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: v299 = v281 + v282
f_517(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v277, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_518(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v277, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: v299 < v263
f_518(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v277, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_520(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v277, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: 0 = 0
f_520(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v277, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_522(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v277, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: TRUE
f_522(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v277, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_524(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v277, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: 0 = 0
f_524(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v277, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_526(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: 0 = 0
f_526(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_528(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: v300 = 1 + v281
f_528(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_530(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: 0 = 0
f_530(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_531(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: TRUE
f_531(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_532(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: 0 = 0
f_532(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v278, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_533(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: 0 = 0
f_533(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_534(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: v302 = 1 + v282
f_534(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_535(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: 0 = 0
f_535(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_536(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: TRUE
f_536(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_537(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: 0 = 0
f_537(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_538(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: 0 = 0
f_538(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_539(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v284, v304, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8, 2) :|: v304 = 1 + v284 && 2 <= v304
f_539(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v284, v304, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8, 2) -> f_540(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v284, v304, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_540(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v284, v304, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8, 2) -> f_541(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v284, v304, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8, 2) :|: TRUE
f_541(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v284, v304, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8, 2) -> f_542(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v284, v304, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8, 2) :|: TRUE
f_542(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v284, v304, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8, 2) -> f_510(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v281, v282, v299, 1, v300, v302, v284, v304, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: TRUE
f_510(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, 1, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) -> f_511(v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, 1, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_511(v263:0, v264:0, v265:0, v266:0, v267:0, v268:0, v269:0, v270:0, v271:0, v272:0, v273:0, v274:0, v275:0, v276:0, v277:0, v278:0, v279:0, 1, v281:0, v282:0, v283:0, v284:0, v285:0, v286:0, v287:0, v288:0, v289:0, v290:0, v291:0, v292:0, v293:0, v294:0, v295:0, v296:0, v297:0, 0, 3, 7, 4, 8) -> f_511(v263:0, v264:0, v265:0, v266:0, v267:0, v268:0, v269:0, v270:0, v271:0, v272:0, v273:0, v274:0, v275:0, v276:0, v281:0, v282:0, v281:0 + v282:0, 1, 1 + v281:0, 1 + v282:0, v284:0, 1 + v284:0, v285:0, v286:0, v287:0, v288:0, v289:0, v290:0, v291:0, v292:0, v293:0, v294:0, v295:0, v296:0, v297:0, 0, 3, 7, 4, 8) :|: v284:0 > 0 && v281:0 + v282:0 < v263:0
Filtered unneeded arguments:
   f_511(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40) -> f_511(x1, x19, x20, x22)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_511(v263:0, v281:0, v282:0, v284:0) -> f_511(v263:0, 1 + v281:0, 1 + v282:0, 1 + v284:0) :|: v284:0 > 0 && v281:0 + v282:0 < v263:0

----------------------------------------

(8)
Obligation:
Rules:
f_511(v263:0, v281:0, v282:0, v284:0) -> f_511(v263:0, 1 + v281:0, 1 + v282:0, 1 + v284:0) :|: v284:0 > 0 && v281:0 + v282:0 < v263:0

----------------------------------------

(9) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_511 ] = -1/2*f_511_2 + -1/2*f_511_3 + 1/2*f_511_1

The following rules are decreasing:
f_511(v263:0, v281:0, v282:0, v284:0) -> f_511(v263:0, 1 + v281:0, 1 + v282:0, 1 + v284:0) :|: v284:0 > 0 && v281:0 + v282:0 < v263:0

The following rules are bounded:
f_511(v263:0, v281:0, v282:0, v284:0) -> f_511(v263:0, 1 + v281:0, 1 + v282:0, 1 + v284:0) :|: v284:0 > 0 && v281:0 + v282:0 < v263:0


----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
