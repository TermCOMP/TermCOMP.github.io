YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/pjasx.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 599 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 2 ms]
(8) IntTRS
(9) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/pjasx.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/pjasx.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		store 0, %2
		br %7
	7:
		%8 = load %3
		%9 = load %4
		%10 = icmp sgt %8 %9
		br %10, %11, %18
	11:
		%12 = load %3
		%13 = add i32 %12, 1
		store %13, %3
		%14 = load %4
		%15 = add i32 %14, 2
		store %15, %4
		%16 = load %2
		%17 = add i32 %16, 1
		store %17, %2
		br %7
	18:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_219(v117, v118, v119, v120, v121, v122, v126, v124, 1, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) -> f_220(v117, v118, v119, v120, v121, v122, v126, v127, 1, v123, v124, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) :|: 0 = 0
f_220(v117, v118, v119, v120, v121, v122, v126, v127, 1, v123, v124, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) -> f_221(v117, v118, v119, v120, v121, v122, v126, v127, 1, v123, v124, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) :|: v127 < v126
f_221(v117, v118, v119, v120, v121, v122, v126, v127, 1, v123, v124, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) -> f_223(v117, v118, v119, v120, v121, v122, v126, v127, 1, v123, v124, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) :|: 0 = 0
f_223(v117, v118, v119, v120, v121, v122, v126, v127, 1, v123, v124, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) -> f_225(v117, v118, v119, v120, v121, v122, v126, v127, 1, v123, v124, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) :|: TRUE
f_225(v117, v118, v119, v120, v121, v122, v126, v127, 1, v123, v124, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) -> f_227(v117, v118, v119, v120, v121, v122, v126, v127, 1, v124, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) :|: 0 = 0
f_227(v117, v118, v119, v120, v121, v122, v126, v127, 1, v124, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) -> f_228(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v124, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) :|: v135 = 1 + v126
f_228(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v124, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) -> f_229(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v124, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) :|: TRUE
f_229(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v124, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) -> f_230(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v128, v129, v130, v131, v132, v133, 0, 3, 4) :|: 0 = 0
f_230(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v128, v129, v130, v131, v132, v133, 0, 3, 4) -> f_231(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v137, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) :|: v137 = 2 + v127
f_231(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v137, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) -> f_232(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v137, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) :|: TRUE
f_232(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v137, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) -> f_233(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v137, v129, v130, v131, v132, v133, 0, 3, 2, 4) :|: 0 = 0
f_233(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v137, v129, v130, v131, v132, v133, 0, 3, 2, 4) -> f_234(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v137, v129, v139, v130, v131, v132, v133, 0, 3, 2, 4) :|: v139 = 1 + v129 && 2 <= v139
f_234(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v137, v129, v139, v130, v131, v132, v133, 0, 3, 2, 4) -> f_235(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v137, v129, v139, v130, v131, v132, v133, 0, 3, 2, 4) :|: TRUE
f_235(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v137, v129, v139, v130, v131, v132, v133, 0, 3, 2, 4) -> f_236(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v137, v129, v139, v130, v131, v132, v133, 0, 3, 2, 4) :|: TRUE
f_236(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v137, v129, v139, v130, v131, v132, v133, 0, 3, 2, 4) -> f_218(v117, v118, v119, v120, v121, v122, v126, v127, 1, v135, v137, v129, v139, v130, v131, v132, v133, 0, 3, 2, 4) :|: TRUE
f_218(v117, v118, v119, v120, v121, v122, v123, v124, 1, v126, v127, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) -> f_219(v117, v118, v119, v120, v121, v122, v126, v124, 1, v123, v127, v128, v129, v130, v131, v132, v133, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_219(v117:0, v118:0, v119:0, v120:0, v121:0, v122:0, v126:0, v124:0, 1, v123:0, v127:0, v128:0, v129:0, v130:0, v131:0, v132:0, v133:0, 0, 3, 2, 4) -> f_219(v117:0, v118:0, v119:0, v120:0, v121:0, v122:0, 1 + v126:0, v127:0, 1, v126:0, 2 + v127:0, v129:0, 1 + v129:0, v130:0, v131:0, v132:0, v133:0, 0, 3, 2, 4) :|: v129:0 > 0 && v127:0 < v126:0
Filtered unneeded arguments:
   f_219(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_219(x7, x11, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_219(v126:0, v127:0, v129:0) -> f_219(1 + v126:0, 2 + v127:0, 1 + v129:0) :|: v129:0 > 0 && v127:0 < v126:0

----------------------------------------

(8)
Obligation:
Rules:
f_219(v126:0, v127:0, v129:0) -> f_219(1 + v126:0, 2 + v127:0, 1 + v129:0) :|: v129:0 > 0 && v127:0 < v126:0

----------------------------------------

(9) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_219(x, x1, x2)] = x - x1

The following rules are decreasing:
f_219(v126:0, v127:0, v129:0) -> f_219(1 + v126:0, 2 + v127:0, 1 + v129:0) :|: v129:0 > 0 && v127:0 < v126:0
The following rules are bounded:
f_219(v126:0, v127:0, v129:0) -> f_219(1 + v126:0, 2 + v127:0, 1 + v129:0) :|: v129:0 > 0 && v127:0 < v126:0

----------------------------------------

(10)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
