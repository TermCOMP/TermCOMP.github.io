YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/1u7n3.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 42 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2808 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 42 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 25 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/1u7n3.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/1u7n3.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%5 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store null, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%6 = call noalias *i8 @malloc(i64 16)
		%7 = bitcast *i8 %6 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %7, %4
		%8 = load %2
		%9 = load %4
		%10 = getelementptr %9, 0, 0
		store %8, %10
		%11 = load %3
		%12 = load %4
		%13 = getelementptr %12, 0, 1
		store %11, %13
		%14 = load %4
		store %14, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 1, %5
		br %15
	15:
		%16 = load %5
		%17 = load %2
		%18 = icmp slt %16 %17
		br %18, %19, %32
	19:
		%20 = call noalias *i8 @malloc(i64 16)
		%21 = bitcast *i8 %20 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %21, %4
		%22 = call i32 (...)* @__VERIFIER_nondet_int()
		%23 = load %4
		%24 = getelementptr %23, 0, 0
		store %22, %24
		%25 = load %3
		%26 = load %4
		%27 = getelementptr %26, 0, 1
		store %25, %27
		%28 = load %4
		store %28, %3
		br %29
	29:
		%30 = load %5
		%31 = add i32 %30, 1
		store %31, %5
		br %15
	32:
		%33 = load %4
		ret %33

*BasicFunctionTypename: "search" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 63
	0:
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca i32, align 4
		%5 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %5)
		%6 = load %3
		store %6, %5
		br %7
	7:
		%8 = load %5
		%9 = getelementptr %8, 0, 0
		%10 = load %9
		%11 = load %4
		%12 = icmp ne %10 %11
		br %12, %13, %17
	13:
		%14 = load %5
		%15 = getelementptr %14, 0, 1
		%16 = load %15
		store %16, %5
		br %7
	17:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 85
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %7, %8
	7:
		store 0, %1
		br %13
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		%9 = load %2
		%10 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %9)
		store %10, %3
		%11 = load %3
		%12 = load %2
		Unnamed Call-Instruction = call BasicVoidType @search(*BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %11, i32 %12)
		store 0, %1
		br %13
	13:
		%14 = load %1
		ret %14


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_775(v473, v474, v475, v476, v477, v482, v478, v479, 1, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v498, v500, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) -> f_776(v473, v474, v475, v476, v477, v482, v479, 1, v478, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v498, v500, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) :|: 0 = 0
f_776(v473, v474, v475, v476, v477, v482, v479, 1, v478, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v498, v500, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) -> f_777(v473, v474, v475, v476, v477, v482, v500, 1, v478, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v479, v498, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) :|: 0 = 0
f_777(v473, v474, v475, v476, v477, v482, v500, 1, v478, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v479, v498, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) -> f_778(v473, v474, v475, v476, v477, v482, v500, 1, v478, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v479, v498, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) :|: 0 = 0
f_778(v473, v474, v475, v476, v477, v482, v500, 1, v478, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v479, v498, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) -> f_779(v473, v474, v475, v476, v477, v482, v500, 1, v478, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v479, v498, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) :|: v500 != v474 && 2 <= v499 && 1 <= v501
f_779(v473, v474, v475, v476, v477, v482, v500, 1, v478, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v479, v498, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) -> f_781(v473, v474, v475, v476, v477, v482, v500, 1, v478, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v479, v498, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) :|: 0 = 0
f_781(v473, v474, v475, v476, v477, v482, v500, 1, v478, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v479, v498, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) -> f_783(v473, v474, v475, v476, v477, v482, v500, 1, v478, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v479, v498, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) :|: TRUE
f_783(v473, v474, v475, v476, v477, v482, v500, 1, v478, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v479, v498, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) -> f_785(v473, v474, v475, v476, v477, v482, v500, 1, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v479, v498, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) :|: 0 = 0
f_785(v473, v474, v475, v476, v477, v482, v500, 1, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v479, v498, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) -> f_793(v473, v474, v475, v476, v477, v482, v500, 1, v508, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v512, v481, 0, v495, v501, v511, v509, v497, v498, 3, 7, 15, 4, 8, 2, 9, 16, v510, v513) :|: v508 = 8 + v482 && 1 + v510 = v499 && v512 = 15 + v482 && v513 = 1 + v496 && 9 <= v508 && 16 <= v512 && 1 <= v510 && 0 <= v513
f_793(v473, v474, v475, v476, v477, v482, v500, 1, v508, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v512, v481, 0, v495, v501, v511, v509, v497, v498, 3, 7, 15, 4, 8, 2, 9, 16, v510, v513) -> f_795(v473, v474, v475, v476, v477, v482, v500, 1, v508, v501, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v512, v481, 0, v495, v511, v509, v497, v498, 3, 7, 15, 4, 8, 2, 9, 16, v510, v513) :|: 0 = 0
f_795(v473, v474, v475, v476, v477, v482, v500, 1, v508, v501, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v512, v481, 0, v495, v511, v509, v497, v498, 3, 7, 15, 4, 8, 2, 9, 16, v510, v513) -> f_797(v473, v474, v475, v476, v477, v482, v500, 1, v508, v501, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v512, 0, v495, v511, v509, v497, v498, 3, 7, 15, 4, 8, 2, 16, 9, v510, v513) :|: TRUE
f_797(v473, v474, v475, v476, v477, v482, v500, 1, v508, v501, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v512, 0, v495, v511, v509, v497, v498, 3, 7, 15, 4, 8, 2, 16, 9, v510, v513) -> f_799(v473, v474, v475, v476, v477, v482, v500, 1, v508, v501, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v512, 0, v495, v511, v509, v497, v498, 3, 7, 15, 4, 8, 2, 16, 9, v510, v513) :|: TRUE
f_799(v473, v474, v475, v476, v477, v482, v500, 1, v508, v501, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v512, 0, v495, v511, v509, v497, v498, 3, 7, 15, 4, 8, 2, 16, 9, v510, v513) -> f_774(v473, v474, v475, v476, v477, v482, v500, 1, v508, v501, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v498, v511, v509, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v513, v510) :|: TRUE
f_774(v473, v474, v475, v476, v477, v478, v479, 1, v481, v482, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v498, v500, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) -> f_775(v473, v474, v475, v476, v477, v482, v478, v479, 1, v481, v483, v487, v484, v488, v485, v489, v490, v491, v492, v493, v494, v497, v498, v500, v501, 0, v495, 3, 7, 15, 4, 8, 2, 9, 16, v496, v499) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_775(v473:0, v474:0, v475:0, v476:0, v477:0, v482:0, v478:0, v479:0, 1, v481:0, v483:0, v487:0, v484:0, v488:0, v485:0, v489:0, v490:0, v491:0, v492:0, v493:0, v494:0, v497:0, v498:0, v500:0, v501:0, 0, v495:0, 3, 7, 15, 4, 8, 2, 9, 16, v496:0, 1 + v510:0) -> f_775(v473:0, v474:0, v475:0, v476:0, v477:0, v501:0, v482:0, v500:0, 1, 8 + v482:0, v483:0, v487:0, v484:0, v488:0, v485:0, v489:0, v490:0, v491:0, v492:0, v493:0, v494:0, v497:0, v498:0, v511:0, v509:0, 0, v495:0, 3, 7, 15, 4, 8, 2, 9, 16, 1 + v496:0, v510:0) :|: v510:0 > 0 && v500:0 < v474:0 && v501:0 > 0 && v482:0 > 0 && v496:0 > -2
f_775(v473:0, v474:0, v475:0, v476:0, v477:0, v482:0, v478:0, v479:0, 1, v481:0, v483:0, v487:0, v484:0, v488:0, v485:0, v489:0, v490:0, v491:0, v492:0, v493:0, v494:0, v497:0, v498:0, v500:0, v501:0, 0, v495:0, 3, 7, 15, 4, 8, 2, 9, 16, v496:0, 1 + v510:0) -> f_775(v473:0, v474:0, v475:0, v476:0, v477:0, v501:0, v482:0, v500:0, 1, 8 + v482:0, v483:0, v487:0, v484:0, v488:0, v485:0, v489:0, v490:0, v491:0, v492:0, v493:0, v494:0, v497:0, v498:0, v511:0, v509:0, 0, v495:0, 3, 7, 15, 4, 8, 2, 9, 16, 1 + v496:0, v510:0) :|: v510:0 > 0 && v500:0 > v474:0 && v501:0 > 0 && v482:0 > 0 && v496:0 > -2
Filtered unneeded arguments:
   f_775(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37) -> f_775(x2, x6, x24, x25, x36, x37)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_775(v474:0, v482:0, v500:0, v501:0, v496:0, sum~cons_1~v510:0) -> f_775(v474:0, v501:0, v511:0, v509:0, 1 + v496:0, v510:0) :|: v500:0 < v474:0 && v510:0 > 0 && v501:0 > 0 && v496:0 > -2 && v482:0 > 0 && sum~cons_1~v510:0 = 1 + v510:0
f_775(v474:0, v482:0, v500:0, v501:0, v496:0, sum~cons_1~v510:0) -> f_775(v474:0, v501:0, v511:0, v509:0, 1 + v496:0, v510:0) :|: v500:0 > v474:0 && v510:0 > 0 && v501:0 > 0 && v496:0 > -2 && v482:0 > 0 && sum~cons_1~v510:0 = 1 + v510:0

----------------------------------------

(9)
Obligation:
Rules:
f_775(v474:0, v482:0, v500:0, v501:0, v496:0, sum~cons_1~v510:0) -> f_775(v474:0, v501:0, v511:0, v509:0, 1 + v496:0, v510:0) :|: v500:0 < v474:0 && v510:0 > 0 && v501:0 > 0 && v496:0 > -2 && v482:0 > 0 && sum~cons_1~v510:0 = 1 + v510:0
f_775(x, x1, x2, x3, x4, x5) -> f_775(x, x3, x6, x7, 1 + x4, x8) :|: x2 > x && x8 > 0 && x3 > 0 && x4 > -2 && x1 > 0 && x5 = 1 + x8

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_775(x:0, x1:0, x2:0, x3:0, x4:0, sum~cons_1~x8:0) -> f_775(x:0, x3:0, x6:0, x7:0, 1 + x4:0, x8:0) :|: x4:0 > -2 && x1:0 > 0 && x3:0 > 0 && x8:0 > 0 && x:0 < x2:0 && sum~cons_1~x8:0 = 1 + x8:0
f_775(v474:0:0, v482:0:0, v500:0:0, v501:0:0, v496:0:0, sum~cons_1~v510:0:0) -> f_775(v474:0:0, v501:0:0, v511:0:0, v509:0:0, 1 + v496:0:0, v510:0:0) :|: v496:0:0 > -2 && v482:0:0 > 0 && v501:0:0 > 0 && v510:0:0 > 0 && v500:0:0 < v474:0:0 && sum~cons_1~v510:0:0 = 1 + v510:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_775 ] = f_775_6

The following rules are decreasing:
f_775(x:0, x1:0, x2:0, x3:0, x4:0, sum~cons_1~x8:0) -> f_775(x:0, x3:0, x6:0, x7:0, 1 + x4:0, x8:0) :|: x4:0 > -2 && x1:0 > 0 && x3:0 > 0 && x8:0 > 0 && x:0 < x2:0 && sum~cons_1~x8:0 = 1 + x8:0
f_775(v474:0:0, v482:0:0, v500:0:0, v501:0:0, v496:0:0, sum~cons_1~v510:0:0) -> f_775(v474:0:0, v501:0:0, v511:0:0, v509:0:0, 1 + v496:0:0, v510:0:0) :|: v496:0:0 > -2 && v482:0:0 > 0 && v501:0:0 > 0 && v510:0:0 > 0 && v500:0:0 < v474:0:0 && sum~cons_1~v510:0:0 = 1 + v510:0:0

The following rules are bounded:
f_775(x:0, x1:0, x2:0, x3:0, x4:0, sum~cons_1~x8:0) -> f_775(x:0, x3:0, x6:0, x7:0, 1 + x4:0, x8:0) :|: x4:0 > -2 && x1:0 > 0 && x3:0 > 0 && x8:0 > 0 && x:0 < x2:0 && sum~cons_1~x8:0 = 1 + x8:0
f_775(v474:0:0, v482:0:0, v500:0:0, v501:0:0, v496:0:0, sum~cons_1~v510:0:0) -> f_775(v474:0:0, v501:0:0, v511:0:0, v509:0:0, 1 + v496:0:0, v510:0:0) :|: v496:0:0 > -2 && v482:0:0 > 0 && v501:0:0 > 0 && v510:0:0 > 0 && v500:0:0 < v474:0:0 && sum~cons_1~v510:0:0 = 1 + v510:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_655(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v303, v304, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 2, 9, 16) -> f_656(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v303, v304, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 2, 9, 16) :|: 0 = 0
f_656(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v303, v304, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 2, 9, 16) -> f_657(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v303, v304, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 9, 2, 16) :|: v307 < v293 && 3 <= v293
f_657(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v303, v304, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 9, 2, 16) -> f_659(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v303, v304, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 9, 2, 16) :|: 0 = 0
f_659(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v303, v304, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 9, 2, 16) -> f_661(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v303, v304, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 9, 2, 16) :|: TRUE
f_661(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v303, v304, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 9, 2, 16) -> f_663(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v303, v304, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, 3, 7, 15, 4, 8, 9, 2, 16) :|: v320 = 15 + v319 && v319 % 4 = 0 && 16 <= v320
f_663(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v303, v304, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, 3, 7, 15, 4, 8, 9, 2, 16) -> f_665(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v304, v303, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, 3, 7, 15, 4, 8, 9, 2, 16) :|: 0 = 0
f_665(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v304, v303, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, 3, 7, 15, 4, 8, 9, 2, 16) -> f_667(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v304, v303, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, 3, 7, 15, 4, 8, 9, 2, 16) :|: TRUE
f_667(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v304, v303, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, 3, 7, 15, 4, 8, 9, 2, 16) -> f_669(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, v304, 3, 7, 15, 4, 8, 9, 2, 16) :|: TRUE
f_669(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, v304, 3, 7, 15, 4, 8, 9, 2, 16) -> f_671(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, v304, 3, 7, 15, 4, 8, 9, 2, 16) :|: 0 = 0
f_671(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, v304, 3, 7, 15, 4, 8, 9, 2, 16) -> f_673(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v305, v303, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, v304, 3, 7, 15, 4, 8, 9, 2, 16) :|: 0 = 0
f_673(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v305, v303, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, v304, 3, 7, 15, 4, 8, 9, 2, 16) -> f_675(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v305, v303, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, v304, 3, 7, 15, 4, 8, 9, 2, 16) :|: TRUE
f_675(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v305, v303, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, v304, 3, 7, 15, 4, 8, 9, 2, 16) -> f_677(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, v304, v305, 3, 7, 15, 4, 8, 9, 2, 16) :|: 0 = 0
f_677(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, v304, v305, 3, 7, 15, 4, 8, 9, 2, 16) -> f_679(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, v304, v305, 3, 7, 15, 4, 8, 9, 2, 16) :|: 0 = 0
f_679(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, v304, v305, 3, 7, 15, 4, 8, 9, 2, 16) -> f_681(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, v304, v305, 3, 7, 15, 4, 8, 9, 2, 16) :|: v331 = 8 + v319 && 9 <= v331
f_681(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, v320, v304, v305, 3, 7, 15, 4, 8, 9, 2, 16) -> f_683(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, v334, 9, 2, 16) :|: v334 = 1 + v307 && 3 <= v334
f_683(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, v334, 9, 2, 16) -> f_685(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, v334, 9, 2, 16) :|: 0 = 0
f_685(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, v334, 9, 2, 16) -> f_687(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, v334, 9, 2, 16) :|: TRUE
f_687(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, v334, 9, 2, 16) -> f_689(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, v334, 9, 2, 16) :|: TRUE
f_689(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, v334, 9, 2, 16) -> f_691(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, v334, 9, 2, 16) :|: 0 = 0
f_691(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, v334, 9, 2, 16) -> f_693(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v334, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 9, 2, 16) :|: v334 = 1 + v307
f_693(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v334, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 9, 2, 16) -> f_695(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v334, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 9, 2, 16) :|: TRUE
f_695(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v334, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 9, 2, 16) -> f_697(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v334, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 9, 2, 16) :|: TRUE
f_697(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v334, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 9, 2, 16) -> f_654(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v319, v323, v303, v331, v334, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 2, 9, 16) :|: TRUE
f_654(v293, v294, v295, v296, v297, v298, 0, v300, v301, 1, v303, v304, v305, v306, v307, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 2, 9, 16) -> f_655(v293, v294, v295, v296, v297, v298, 0, v300, v307, 1, v303, v304, v305, v306, v301, v308, v311, v309, v312, v310, v313, v314, v315, v316, v317, v318, 3, 7, 15, 4, 8, 2, 9, 16) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_655(v293:0, v294:0, v295:0, v296:0, v297:0, v298:0, 0, v300:0, v307:0, 1, v303:0, v304:0, v305:0, v306:0, v301:0, v308:0, v311:0, v309:0, v312:0, v310:0, v313:0, v314:0, v315:0, v316:0, v317:0, v318:0, 3, 7, 15, 4, 8, 2, 9, 16) -> f_655(v293:0, v294:0, v295:0, v296:0, v297:0, v298:0, 0, v300:0, 1 + v307:0, 1, v319:0, v323:0, v303:0, 8 + v319:0, v307:0, v308:0, v311:0, v309:0, v312:0, v310:0, v313:0, v314:0, v315:0, v316:0, v317:0, v318:0, 3, 7, 15, 4, 8, 2, 9, 16) :|: v293:0 > 2 && v307:0 < v293:0 && v319:0 % 4 = 0 && v319:0 > 0 && v307:0 > 1
Filtered unneeded arguments:
   f_655(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34) -> f_655(x1, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_655(v293:0, v307:0) -> f_655(v293:0, 1 + v307:0) :|: v307:0 < v293:0 && v307:0 > 1 && v293:0 > 2

----------------------------------------

(16)
Obligation:
Rules:
f_655(v293:0, v307:0) -> f_655(v293:0, 1 + v307:0) :|: v307:0 < v293:0 && v307:0 > 1 && v293:0 > 2

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_655(v293:0:0, v307:0:0) -> f_655(v293:0:0, 1 + v307:0:0) :|: v307:0:0 < v293:0:0 && v307:0:0 > 1 && v293:0:0 > 2

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_655(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_655(v293:0:0, v307:0:0) -> f_655(v293:0:0, 1 + v307:0:0) :|: v307:0:0 < v293:0:0 && v307:0:0 > 1 && v293:0:0 > 2
The following rules are bounded:
f_655(v293:0:0, v307:0:0) -> f_655(v293:0:0, 1 + v307:0:0) :|: v307:0:0 < v293:0:0 && v307:0:0 > 1 && v293:0:0 > 2

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
