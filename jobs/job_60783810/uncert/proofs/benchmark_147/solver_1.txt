MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/4D7TN.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 57 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/4D7TN.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/4D7TN.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "free" returnParam: BasicVoidType parameters: (*i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "lis" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%3 = alloca *i32, align 8
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca i32, align 4
		%8 = alloca i32, align 4
		%9 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %9)
		store 0, %9
		%10 = load %4
		%11 = sext i32 %10 to i64
		%12 = mul i64 4, %11
		%13 = call noalias *i8 @malloc(i64 %12)
		%14 = bitcast *i8 %13 to *i32
		store %14, %5
		%15 = load %4
		%16 = sext i32 %15 to i64
		%17 = mul i64 4, %16
		%18 = call noalias *i8 @malloc(i64 %17)
		%19 = bitcast *i8 %18 to *i32
		store %19, %6
		store 0, %7
		br %20
	20:
		%21 = load %7
		%22 = load %4
		%23 = icmp slt %21 %22
		br %23, %24, %37
	24:
		%25 = load %5
		%26 = load %7
		%27 = sext i32 %26 to i64
		%28 = getelementptr %25, %27
		store 1, %28
		%29 = load %7
		%30 = load %6
		%31 = load %7
		%32 = sext i32 %31 to i64
		%33 = getelementptr %30, %32
		store %29, %33
		br %34
	34:
		%35 = load %7
		%36 = add i32 %35, 1
		store %36, %7
		br %20
	37:
		store 1, %7
		br %38
	38:
		%39 = load %7
		%40 = load %4
		%41 = icmp slt %39 %40
		br %41, %42, %96
	42:
		store 0, %8
		br %43
	43:
		%44 = load %8
		%45 = load %7
		%46 = icmp slt %44 %45
		br %46, %47, %92
	47:
		%48 = load %3
		%49 = load %7
		%50 = sext i32 %49 to i64
		%51 = getelementptr %48, %50
		%52 = load %51
		%53 = load %3
		%54 = load %8
		%55 = sext i32 %54 to i64
		%56 = getelementptr %53, %55
		%57 = load %56
		%58 = icmp sgt %52 %57
		br %58, %59, %88
	59:
		%60 = load %5
		%61 = load %7
		%62 = sext i32 %61 to i64
		%63 = getelementptr %60, %62
		%64 = load %63
		%65 = load %5
		%66 = load %8
		%67 = sext i32 %66 to i64
		%68 = getelementptr %65, %67
		%69 = load %68
		%70 = add i32 %69, 1
		%71 = icmp slt %64 %70
		br %71, %72, %88
	72:
		%73 = load %5
		%74 = load %8
		%75 = sext i32 %74 to i64
		%76 = getelementptr %73, %75
		%77 = load %76
		%78 = add i32 %77, 1
		%79 = load %5
		%80 = load %7
		%81 = sext i32 %80 to i64
		%82 = getelementptr %79, %81
		store %78, %82
		%83 = load %8
		%84 = load %6
		%85 = load %7
		%86 = sext i32 %85 to i64
		%87 = getelementptr %84, %86
		store %83, %87
		br %88
	88:
		br %89
	89:
		%90 = load %8
		%91 = add i32 %90, 1
		store %91, %8
		br %43
	92:
		br %93
	93:
		%94 = load %7
		%95 = add i32 %94, 1
		store %95, %7
		br %38
	96:
		store 0, %7
		br %97
	97:
		%98 = load %7
		%99 = load %4
		%100 = icmp slt %98 %99
		br %100, %101, %119
	101:
		%102 = load %9
		%103 = load %5
		%104 = load %7
		%105 = sext i32 %104 to i64
		%106 = getelementptr %103, %105
		%107 = load %106
		%108 = icmp slt %102 %107
		br %108, %109, %115
	109:
		%110 = load %5
		%111 = load %7
		%112 = sext i32 %111 to i64
		%113 = getelementptr %110, %112
		%114 = load %113
		store %114, %9
		br %115
	115:
		br %116
	116:
		%117 = load %7
		%118 = add i32 %117, 1
		store %118, %7
		br %97
	119:
		%120 = load %5
		%121 = bitcast *i32 %120 to *i8
		Unnamed Call-Instruction = call BasicVoidType @free(*i8 %121)
		%122 = load %6
		%123 = bitcast *i32 %122 to *i8
		Unnamed Call-Instruction = call BasicVoidType @free(*i8 %123)
		%124 = load %9
		ret %124

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 135
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %3
		%5 = load %2
		%6 = load %3
		%7 = call i32 @lis(*i32 %5, i32 %6)
		ret %7


Analyze Termination of all function calls matching the pattern:
main()Aborted 1756892241Exec. 4, LLVMToSEGraph with some error. Reason: java.lang.ClassCastException: class aprove.InputModules.Programs.llvm.internalStructures.memory.LLVMIntervalMemoryInvariant cannot be cast to class aprove.InputModules.Programs.llvm.internalStructures.memory.LLVMSimpleMemoryInvariant (aprove.InputModules.Programs.llvm.internalStructures.memory.LLVMIntervalMemoryInvariant and aprove.InputModules.Programs.llvm.internalStructures.memory.LLVMSimpleMemoryInvariant are in unnamed module of loader 'app').
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicStateFactory.handleArrayIndices(LLVMHeuristicStateFactory.java:1966)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicStateFactory.merge(LLVMHeuristicStateFactory.java:5014)
            aprove.InputModules.Programs.llvm.states.LLVMAbstractStateFactory.tryToFindBetterGeneralizationResult(LLVMAbstractStateFactory.java:1515)
            aprove.InputModules.Programs.llvm.states.LLVMAbstractStateFactory.merge(LLVMAbstractStateFactory.java:781)
            aprove.InputModules.Programs.llvm.segraph.graphConstructionSteps.LLVMStandardStep.addNodeToPCListAndGeneralize(LLVMStandardStep.java:266)
            aprove.InputModules.Programs.llvm.segraph.graphConstructionSteps.LLVMStandardStep.checkInvariantsAndAttemptGeneralization(LLVMStandardStep.java:418)
            aprove.InputModules.Programs.llvm.segraph.graphConstructionSteps.LLVMStandardStep.perform(LLVMStandardStep.java:121)
            aprove.InputModules.Programs.llvm.segraph.LLVMSEGraph.executeStepAndPutSucessorStepsInQueue(LLVMSEGraph.java:1087)
            aprove.InputModules.Programs.llvm.segraph.LLVMSEGraph.buildFullGraph(LLVMSEGraph.java:243)
