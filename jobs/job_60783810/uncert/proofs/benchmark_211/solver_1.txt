YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ORcmj.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2082 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 95 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 21 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/ORcmj.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/ORcmj.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "fibonacci" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp slt %4 1
		br %5, %6, %7
	6:
		store 0, %2
		br %19
	7:
		%8 = load %3
		%9 = icmp eq %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %19
	11:
		%12 = load %3
		%13 = sub i32 %12, 1
		%14 = call i32 @fibonacci(i32 %13)
		%15 = load %3
		%16 = sub i32 %15, 2
		%17 = call i32 @fibonacci(i32 %16)
		%18 = add i32 %14, %17
		store %18, %2
		br %19
	19:
		%20 = load %2
		ret %20

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 36
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %7, %8
	7:
		store 0, %1
		br %16
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%9 = load %2
		%10 = call i32 @fibonacci(i32 %9)
		store %10, %3
		%11 = load %3
		%12 = icmp sge %11 1
		br %12, %13, %14
	13:
		store 0, %1
		br %16
	14:
		br %15
	15:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	16:
		%17 = load %1
		ret %17


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 49 rulesP rules:
f_274(v97, v106, v98, v99, v100, v101, v102, v103, v107, 0, v105, 3, 1, 4) -> f_275(v97, v106, v108, v98, v99, v100, v101, v102, v103, v107, v109, 0, v105, 3, 1, 4) :|: 1 <= v108 && v109 = 3 + v108 && 4 <= v109
f_275(v97, v106, v108, v98, v99, v100, v101, v102, v103, v107, v109, 0, v105, 3, 1, 4) -> f_276(v97, v106, v108, v98, v99, v100, v101, v102, v103, v107, v109, 0, v105, 3, 1, 4) :|: TRUE
f_276(v97, v106, v108, v98, v99, v100, v101, v102, v103, v107, v109, 0, v105, 3, 1, 4) -> f_277(v97, v106, v108, v98, v99, v100, v101, v102, v103, v107, v109, 0, v105, 3, 1, 4) :|: TRUE
f_277(v97, v106, v108, v98, v99, v100, v101, v102, v103, v107, v109, 0, v105, 3, 1, 4) -> f_278(v97, v106, v108, v98, v99, v100, v101, v102, v103, v107, v109, 0, v105, 3, 1, 4) :|: 0 = 0
f_278(v97, v106, v108, v98, v99, v100, v101, v102, v103, v107, v109, 0, v105, 3, 1, 4) -> f_280(v97, v106, v108, v98, v99, v100, v101, v102, v103, v107, v109, 0, v105, 3, 1, 4) :|: 1 <= v97
f_280(v97, v106, v108, v98, v99, v100, v101, v102, v103, v107, v109, 0, v105, 3, 1, 4) -> f_282(v97, v106, v108, 0, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 4) :|: 0 = 0
f_282(v97, v106, v108, 0, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 4) -> f_284(v97, v106, v108, 0, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 4) :|: TRUE
f_284(v97, v106, v108, 0, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 4) -> f_286(v97, v106, v108, 0, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 4) :|: 0 = 0
f_286(v97, v106, v108, 0, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 4) -> f_289(v97, v106, v108, 0, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 2, 1, 4) :|: v97 != 1 && 2 <= v97 && 2 <= v105
f_289(v97, v106, v108, 0, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 2, 1, 4) -> f_292(v97, v106, v108, 0, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 2, 1, 4) :|: 0 = 0
f_292(v97, v106, v108, 0, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 2, 1, 4) -> f_295(v97, v106, v108, 0, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 2, 1, 4) :|: TRUE
f_295(v97, v106, v108, 0, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 2, 1, 4) -> f_297(v97, v106, v108, 0, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 2, 1, 4) :|: 0 = 0
f_297(v97, v106, v108, 0, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 2, 1, 4) -> f_299(v97, v106, v108, 0, v122, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) :|: 1 + v122 = v97 && 1 <= v122
f_299(v97, v106, v108, 0, v122, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) -> f_301(v122, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) :|: 0 = 0
f_301(v122, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) -> f_303(v122, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) :|: TRUE
f_301(v122, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) -> f_307(1, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, 2, 3, 4) :|: TRUE
f_301(v122, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) -> f_636(v122, v1212, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) :|: TRUE
f_301(v122, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) -> f_663(v122, v1309, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) :|: TRUE
f_301(v122, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) -> f_700(v122, v1439, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) :|: TRUE
f_301(v122, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) -> f_737(v122, v1439, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) :|: TRUE
f_301(v122, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) -> f_757(v122, v1439, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) :|: TRUE
f_303(v122, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) -> f_273(v122, v98, v99, v100, v101, v102, v103, 0, v105, 3, 1, 4) :|: TRUE
f_273(v97, v98, v99, v100, v101, v102, v103, 0, v105, 3, 1, 4) -> f_274(v97, v106, v98, v99, v100, v101, v102, v103, v107, 0, v105, 3, 1, 4) :|: 1 <= v106 && v107 = 3 + v106 && 4 <= v107
f_307(1, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, 2, 3, 4) -> f_309(2, v106, v108, 0, 1, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 4) :|: 0 = 0
f_309(2, v106, v108, 0, 1, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 4) -> f_311(2, v106, v108, 0, 1, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 4) :|: 0 = 0
f_311(2, v106, v108, 0, 1, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 4) -> f_313(2, v106, v108, 0, 1, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 4) :|: 0 = 0
f_313(2, v106, v108, 0, 1, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 4) -> f_315(0, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, v105, 2, 1, 3, 4) :|: 0 = 0
f_315(0, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, v105, 2, 1, 3, 4) -> f_317(0, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, v105, 2, 3, 1, 4) :|: TRUE
f_317(0, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, v105, 2, 3, 1, 4) -> f_273(0, v98, v99, v100, v101, v102, v103, 0, v105, 3, 1, 4) :|: TRUE
f_636(v122, v1212, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) -> f_643(v97, v106, v108, 0, v122, v1212, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) :|: 0 = 0
f_643(v97, v106, v108, 0, v122, v1212, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) -> f_646(v97, v106, v108, 0, v122, v1212, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) :|: 0 = 0
f_646(v97, v106, v108, 0, v122, v1212, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) -> f_649(v97, v106, v108, 0, v122, v1212, v1227, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) :|: 2 + v1227 = v97 && 0 <= v1227
f_649(v97, v106, v108, 0, v122, v1212, v1227, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) -> f_652(v1227, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, v122, v1212, 3, 1, 2, 4) :|: 0 = 0
f_652(v1227, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, v122, v1212, 3, 1, 2, 4) -> f_655(v1227, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 2, 1, 4) :|: TRUE
f_655(v1227, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 2, 1, 4) -> f_273(v1227, v98, v99, v100, v101, v102, v103, 0, v105, 3, 1, 4) :|: TRUE
f_663(v122, v1309, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) -> f_670(v97, v106, v108, 0, v122, v1309, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) :|: 0 = 0
f_670(v97, v106, v108, 0, v122, v1309, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) -> f_676(v97, v106, v108, 0, v122, v1309, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) :|: 0 = 0
f_676(v97, v106, v108, 0, v122, v1309, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) -> f_682(v97, v106, v108, 0, v122, v1309, v1329, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) :|: 2 + v1329 = v97 && 0 <= v1329
f_682(v97, v106, v108, 0, v122, v1309, v1329, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) -> f_688(v1329, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, v122, v1309, 3, 1, 2, 4) :|: 0 = 0
f_688(v1329, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, v122, v1309, 3, 1, 2, 4) -> f_694(v1329, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 2, 1, 4) :|: TRUE
f_694(v1329, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 2, 1, 4) -> f_273(v1329, v98, v99, v100, v101, v102, v103, 0, v105, 3, 1, 4) :|: TRUE
f_700(v122, v1439, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) -> f_707(v97, v106, v108, 0, v122, v1439, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) :|: 0 = 0
f_707(v97, v106, v108, 0, v122, v1439, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) -> f_714(v97, v106, v108, 0, v122, v1439, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) :|: 0 = 0
f_714(v97, v106, v108, 0, v122, v1439, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) -> f_721(v97, v106, v108, 0, v122, v1439, v1499, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) :|: 2 + v1499 = v97 && 0 <= v1499
f_721(v97, v106, v108, 0, v122, v1439, v1499, v98, v99, v100, v101, v102, v103, v107, v109, v105, 3, 1, 2, 4) -> f_728(v1499, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, v122, v1439, 3, 1, 2, 4) :|: 0 = 0
f_728(v1499, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, v122, v1439, 3, 1, 2, 4) -> f_735(v1499, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 2, 1, 4) :|: TRUE
f_735(v1499, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 2, 1, 4) -> f_273(v1499, v98, v99, v100, v101, v102, v103, 0, v105, 3, 1, 4) :|: TRUE
f_737(v122, v1439, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) -> f_700(v122, v1439, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) :|: TRUE
f_757(v122, v1439, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) -> f_737(v122, v1439, v98, v99, v100, v101, v102, v103, v106, v107, v108, v109, 0, v105, v97, 3, 1, 2, 4) :|: TRUE
Combined rules. Obtained 3 rulesP rules:
f_274(2 + v1227:0, v106:0, v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, v107:0, 0, v105:0, 3, 1, 4) -> f_274(v1227:0, v106:1, v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, 3 + v106:1, 0, v105:0, 3, 1, 4) :|: v1227:0 > -1 && v108:0 > 0 && v105:0 > 1 && v122:0 > 0 && 2 + v1227:0 = 1 + v122:0 && v106:1 > 0
f_274(1 + v122:0, v106:0, v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, v107:0, 0, v105:0, 3, 1, 4) -> f_274(0, v106:1, v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, 3 + v106:1, 0, v105:0, 3, 1, 4) :|: v122:0 > 0 && v108:0 > 0 && v105:0 > 1 && v106:1 > 0
f_274(1 + v122:0, v106:0, v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, v107:0, 0, v105:0, 3, 1, 4) -> f_274(v122:0, v106:1, v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, 3 + v106:1, 0, v105:0, 3, 1, 4) :|: v122:0 > 0 && v108:0 > 0 && v105:0 > 1 && v106:1 > 0
Filtered unneeded arguments:
   f_274(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_274(x1, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_274(sum~cons_2~v1227:0, v105:0) -> f_274(v1227:0, v105:0) :|: v1227:0 > -1 && v105:0 > 1 && sum~cons_2~v1227:0 = 2 + v1227:0
f_274(sum~cons_1~v122:0, v105:0) -> f_274(0, v105:0) :|: v122:0 > 0 && v105:0 > 1 && sum~cons_1~v122:0 = 1 + v122:0
f_274(sum~cons_1~v122:0, v105:0) -> f_274(v122:0, v105:0) :|: v122:0 > 0 && v105:0 > 1 && sum~cons_1~v122:0 = 1 + v122:0

----------------------------------------

(8)
Obligation:
Rules:
f_274(sum~cons_2~v1227:0, v105:0) -> f_274(v1227:0, v105:0) :|: v1227:0 > -1 && v105:0 > 1 && sum~cons_2~v1227:0 = 2 + v1227:0
f_274(x, x1) -> f_274(0, x1) :|: x2 > 0 && x1 > 1 && x = 1 + x2
f_274(x3, x4) -> f_274(x5, x4) :|: x5 > 0 && x4 > 1 && x3 = 1 + x5

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(10)
Obligation:
Rules:
f_274(sum~cons_2~v1227:0, v105:0) -> f_274(v1227:0, v105:0) :|: v1227:0 > -1 && v105:0 > 1 && sum~cons_2~v1227:0 = 2 + v1227:0
f_274(x3, x4) -> f_274(x5, x4) :|: x5 > 0 && x4 > 1 && x3 = 1 + x5

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_274(sum~cons_2~v1227:0:0, v105:0:0) -> f_274(v1227:0:0, v105:0:0) :|: v1227:0:0 > -1 && v105:0:0 > 1 && sum~cons_2~v1227:0:0 = 2 + v1227:0:0
f_274(sum~cons_1~x5:0, x4:0) -> f_274(x5:0, x4:0) :|: x5:0 > 0 && x4:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0

----------------------------------------

(13) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_274(x, x1)] = x

The following rules are decreasing:
f_274(sum~cons_2~v1227:0:0, v105:0:0) -> f_274(v1227:0:0, v105:0:0) :|: v1227:0:0 > -1 && v105:0:0 > 1 && sum~cons_2~v1227:0:0 = 2 + v1227:0:0
f_274(sum~cons_1~x5:0, x4:0) -> f_274(x5:0, x4:0) :|: x5:0 > 0 && x4:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0
The following rules are bounded:
f_274(sum~cons_2~v1227:0:0, v105:0:0) -> f_274(v1227:0:0, v105:0:0) :|: v1227:0:0 > -1 && v105:0:0 > 1 && sum~cons_2~v1227:0:0 = 2 + v1227:0:0
f_274(sum~cons_1~x5:0, x4:0) -> f_274(x5:0, x4:0) :|: x5:0 > 0 && x4:0 > 1 && sum~cons_1~x5:0 = 1 + x5:0

----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
