YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/t3gKj.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 56 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3399 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 171 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) IntTRS
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IntTRS
(15) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
(16) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/t3gKj.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/t3gKj.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "a" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = icmp sle %6 0
		br %7, %8, %11
	8:
		%9 = load %5
		%10 = add i32 %9, 1
		store %10, %3
		br %26
	11:
		%12 = load %5
		%13 = icmp sle %12 0
		br %13, %14, %18
	14:
		%15 = load %4
		%16 = sub i32 %15, 1
		%17 = call i32 @a(i32 %16, i32 1)
		store %17, %3
		br %26
	18:
		%19 = load %4
		%20 = sub i32 %19, 1
		%21 = load %4
		%22 = load %5
		%23 = sub i32 %22, 1
		%24 = call i32 @a(i32 %21, i32 %23)
		%25 = call i32 @a(i32 %20, i32 %24)
		store %25, %3
		br %26
	26:
		%27 = load %3
		ret %27

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 44
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = load %2
		%7 = icmp sge %6 0
		br %7, %8, %15
	8:
		%9 = load %3
		%10 = icmp sge %9 0
		br %10, %11, %15
	11:
		%12 = load %2
		%13 = load %3
		%14 = call i32 @a(i32 %12, i32 %13)
		br %15
	15:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 88 rulesP rules:
f_274(v85, v86, v97, v87, v88, v89, v90, v91, v92, v98, 0, v94, v95, 3, 1, 4) -> f_275(v85, v86, v97, v99, v87, v88, v89, v90, v91, v92, v98, v100, 0, v94, v95, 3, 1, 4) :|: 1 <= v99 && v100 = 3 + v99 && 4 <= v100
f_275(v85, v86, v97, v99, v87, v88, v89, v90, v91, v92, v98, v100, 0, v94, v95, 3, 1, 4) -> f_276(v85, v86, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, 0, v94, v95, 3, 1, 4) :|: 1 <= v101 && v102 = 3 + v101 && 4 <= v102
f_276(v85, v86, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, 0, v94, v95, 3, 1, 4) -> f_277(v85, v86, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, 0, v94, v95, 3, 1, 4) :|: TRUE
f_277(v85, v86, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, 0, v94, v95, 3, 1, 4) -> f_278(v85, v86, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, 0, v94, v95, 3, 1, 4) :|: TRUE
f_278(v85, v86, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, 0, v94, v95, 3, 1, 4) -> f_279(v85, v86, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, 0, v94, v95, 3, 1, 4) :|: TRUE
f_279(v85, v86, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, 0, v94, v95, 3, 1, 4) -> f_280(v85, v86, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, 0, v94, v95, 3, 1, 4) :|: TRUE
f_280(v85, v86, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, 0, v94, v95, 3, 1, 4) -> f_281(v85, v86, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, 0, v94, v95, 3, 1, 4) :|: 0 = 0
f_281(v85, v86, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, 0, v94, v95, 3, 1, 4) -> f_283(v85, v86, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, 0, v94, v95, 3, 1, 4) :|: 0 < v85 && 1 <= v94
f_283(v85, v86, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, 0, v94, v95, 3, 1, 4) -> f_285(v85, v86, v97, v99, v101, 0, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) :|: 0 = 0
f_285(v85, v86, v97, v99, v101, 0, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_287(v85, v86, v97, v99, v101, 0, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) :|: TRUE
f_287(v85, v86, v97, v99, v101, 0, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_289(v85, v86, v97, v99, v101, 0, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) :|: 0 = 0
f_289(v85, v86, v97, v99, v101, 0, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_291(v85, 0, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) :|: v86 <= 0
f_289(v85, v86, v97, v99, v101, 0, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_292(v85, v86, v97, v99, v101, 0, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) :|: 0 < v86
f_291(v85, 0, v97, v99, v101, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_294(v85, 0, v97, v99, v101, 1, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4) :|: 0 = 0
f_294(v85, 0, v97, v99, v101, 1, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4) -> f_297(v85, 0, v97, v99, v101, 1, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4) :|: TRUE
f_297(v85, 0, v97, v99, v101, 1, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4) -> f_300(v85, 0, v97, v99, v101, 1, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4) :|: 0 = 0
f_300(v85, 0, v97, v99, v101, 1, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4) -> f_303(v85, 0, v97, v99, v101, 1, v123, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4) :|: 1 + v123 = v85 && 0 <= v123
f_303(v85, 0, v97, v99, v101, 1, v123, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4) -> f_306(v123, 1, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 3, 4) :|: 0 = 0
f_306(v123, 1, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 3, 4) -> f_309(v123, 1, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 3, 4) :|: TRUE
f_309(v123, 1, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 3, 4) -> f_272(v123, 1, v87, v88, v89, v90, v91, v92, 0, v94, v95, 3, 1, 4) :|: TRUE
f_272(v85, v86, v87, v88, v89, v90, v91, v92, 0, v94, v95, 3, 1, 4) -> f_274(v85, v86, v97, v87, v88, v89, v90, v91, v92, v98, 0, v94, v95, 3, 1, 4) :|: 1 <= v97 && v98 = 3 + v97 && 4 <= v98
f_292(v85, v86, v97, v99, v101, 0, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_295(v85, v86, v97, v99, v101, 0, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) :|: 0 = 0
f_295(v85, v86, v97, v99, v101, 0, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_298(v85, v86, v97, v99, v101, 0, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) :|: TRUE
f_298(v85, v86, v97, v99, v101, 0, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_301(v85, v86, v97, v99, v101, 0, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) :|: 0 = 0
f_301(v85, v86, v97, v99, v101, 0, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_304(v85, v86, v97, v99, v101, 0, v124, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) :|: 1 + v124 = v85 && 0 <= v124
f_304(v85, v86, v97, v99, v101, 0, v124, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_307(v85, v86, v97, v99, v101, 0, v124, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) :|: 0 = 0
f_307(v85, v86, v97, v99, v101, 0, v124, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_310(v85, v86, v97, v99, v101, 0, v124, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) :|: 0 = 0
f_310(v85, v86, v97, v99, v101, 0, v124, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_311(v85, v86, v97, v99, v101, 0, v124, v140, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) :|: 1 + v140 = v86 && 0 <= v140
f_311(v85, v86, v97, v99, v101, 0, v124, v140, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) :|: 0 = 0
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_315(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, 3, 1, 4) :|: TRUE
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_433(v85, 0, v952, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) :|: TRUE
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_471(v85, 0, v1194, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) :|: TRUE
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_508(v85, 0, v1464, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) :|: TRUE
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_556(v85, 0, v1747, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) :|: TRUE
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_611(v85, 0, v1747, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) :|: TRUE
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_621(v85, v140, v2145, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) :|: TRUE
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_663(v85, 0, v2392, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) :|: TRUE
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_712(v85, 0, v2392, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) :|: TRUE
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_720(v85, v140, v2810, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) :|: TRUE
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_764(v85, 0, v3149, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) :|: TRUE
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_773(v85, v140, v3250, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) :|: TRUE
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_810(v85, v140, v3250, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) :|: TRUE
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_833(v85, 0, v3149, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) :|: TRUE
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_843(v85, v140, v3250, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) :|: TRUE
f_313(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_871(v85, v140, v3250, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) :|: TRUE
f_315(v85, v140, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, 3, 1, 4) -> f_272(v85, v140, v87, v88, v89, v90, v91, v92, 0, v94, v95, 3, 1, 4) :|: TRUE
f_433(v85, 0, v952, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) -> f_438(v85, 1, v97, v99, v101, 0, v124, v952, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4, 2) :|: 0 = 0
f_438(v85, 1, v97, v99, v101, 0, v124, v952, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4, 2) -> f_440(v124, v952, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) :|: 0 = 0
f_440(v124, v952, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) -> f_441(v124, v952, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) :|: TRUE
f_441(v124, v952, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) -> f_272(v124, v952, v87, v88, v89, v90, v91, v92, 0, v94, v95, 3, 1, 4) :|: TRUE
f_471(v85, 0, v1194, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) -> f_480(v85, 1, v97, v99, v101, 0, v124, v1194, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4, 2) :|: 0 = 0
f_480(v85, 1, v97, v99, v101, 0, v124, v1194, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4, 2) -> f_486(v124, v1194, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) :|: 0 = 0
f_486(v124, v1194, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) -> f_491(v124, v1194, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) :|: TRUE
f_491(v124, v1194, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) -> f_272(v124, v1194, v87, v88, v89, v90, v91, v92, 0, v94, v95, 3, 1, 4) :|: TRUE
f_508(v85, 0, v1464, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) -> f_520(v85, 1, v97, v99, v101, 0, v124, v1464, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4, 2) :|: 0 = 0
f_520(v85, 1, v97, v99, v101, 0, v124, v1464, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4, 2) -> f_528(v124, v1464, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) :|: 0 = 0
f_528(v124, v1464, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) -> f_539(v124, v1464, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) :|: TRUE
f_539(v124, v1464, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) -> f_272(v124, v1464, v87, v88, v89, v90, v91, v92, 0, v94, v95, 3, 1, 4) :|: TRUE
f_556(v85, 0, v1747, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) -> f_572(v85, 1, v97, v99, v101, 0, v124, v1747, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4, 2) :|: 0 = 0
f_572(v85, 1, v97, v99, v101, 0, v124, v1747, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4, 2) -> f_584(v124, v1747, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) :|: 0 = 0
f_584(v124, v1747, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) -> f_600(v124, v1747, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) :|: TRUE
f_600(v124, v1747, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) -> f_272(v124, v1747, v87, v88, v89, v90, v91, v92, 0, v94, v95, 3, 1, 4) :|: TRUE
f_611(v85, 0, v1747, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) -> f_556(v85, 0, v1747, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) :|: TRUE
f_621(v85, v140, v2145, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_629(v85, v86, v97, v99, v101, 0, v124, v140, v2145, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) :|: 0 = 0
f_629(v85, v86, v97, v99, v101, 0, v124, v140, v2145, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_637(v124, v2145, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, v86, v140, 3, 1, 4) :|: 0 = 0
f_637(v124, v2145, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, v86, v140, 3, 1, 4) -> f_644(v124, v2145, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, v86, 3, 1, 4) :|: TRUE
f_644(v124, v2145, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, v86, 3, 1, 4) -> f_272(v124, v2145, v87, v88, v89, v90, v91, v92, 0, v94, v95, 3, 1, 4) :|: TRUE
f_663(v85, 0, v2392, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) -> f_679(v85, 1, v97, v99, v101, 0, v124, v2392, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4, 2) :|: 0 = 0
f_679(v85, 1, v97, v99, v101, 0, v124, v2392, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4, 2) -> f_691(v124, v2392, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) :|: 0 = 0
f_691(v124, v2392, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) -> f_701(v124, v2392, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) :|: TRUE
f_701(v124, v2392, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) -> f_272(v124, v2392, v87, v88, v89, v90, v91, v92, 0, v94, v95, 3, 1, 4) :|: TRUE
f_712(v85, 0, v2392, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) -> f_663(v85, 0, v2392, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) :|: TRUE
f_720(v85, v140, v2810, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_735(v85, v86, v97, v99, v101, 0, v124, v140, v2810, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) :|: 0 = 0
f_735(v85, v86, v97, v99, v101, 0, v124, v140, v2810, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_745(v124, v2810, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, v86, v140, 3, 1, 4) :|: 0 = 0
f_745(v124, v2810, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, v86, v140, 3, 1, 4) -> f_754(v124, v2810, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, v86, 3, 1, 4) :|: TRUE
f_754(v124, v2810, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, v86, 3, 1, 4) -> f_272(v124, v2810, v87, v88, v89, v90, v91, v92, 0, v94, v95, 3, 1, 4) :|: TRUE
f_764(v85, 0, v3149, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) -> f_782(v85, 1, v97, v99, v101, 0, v124, v3149, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4, 2) :|: 0 = 0
f_782(v85, 1, v97, v99, v101, 0, v124, v3149, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 4, 2) -> f_796(v124, v3149, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) :|: 0 = 0
f_796(v124, v3149, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) -> f_818(v124, v3149, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) :|: TRUE
f_818(v124, v3149, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, 1, 3, 4, 2) -> f_272(v124, v3149, v87, v88, v89, v90, v91, v92, 0, v94, v95, 3, 1, 4) :|: TRUE
f_773(v85, v140, v3250, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_788(v85, v86, v97, v99, v101, 0, v124, v140, v3250, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) :|: 0 = 0
f_788(v85, v86, v97, v99, v101, 0, v124, v140, v3250, v87, v88, v89, v90, v91, v92, v98, v100, v102, v94, v95, 3, 1, 4) -> f_801(v124, v3250, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, v86, v140, 3, 1, 4) :|: 0 = 0
f_801(v124, v3250, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, v86, v140, 3, 1, 4) -> f_822(v124, v3250, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, v86, 3, 1, 4) :|: TRUE
f_822(v124, v3250, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v85, v86, 3, 1, 4) -> f_272(v124, v3250, v87, v88, v89, v90, v91, v92, 0, v94, v95, 3, 1, 4) :|: TRUE
f_810(v85, v140, v3250, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_773(v85, v140, v3250, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) :|: TRUE
f_833(v85, 0, v3149, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) -> f_764(v85, 0, v3149, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, v94, v95, 1, v124, 3, 4, 2) :|: TRUE
f_843(v85, v140, v3250, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_810(v85, v140, v3250, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) :|: TRUE
f_871(v85, v140, v3250, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) -> f_843(v85, v140, v3250, v87, v88, v89, v90, v91, v92, v97, v98, v99, v100, v101, v102, 0, v94, v95, v86, v124, 3, 1, 4) :|: TRUE
Combined rules. Obtained 3 rulesP rules:
f_274(1 + v124:0, 1 + v140:0, v97:0, v87:0, v88:0, v89:0, v90:0, v91:0, v92:0, v98:0, 0, v94:0, v95:0, 3, 1, 4) -> f_274(v124:0, v3250:0, v97:1, v87:0, v88:0, v89:0, v90:0, v91:0, v92:0, 3 + v97:1, 0, v94:0, v95:0, 3, 1, 4) :|: v101:0 > 0 && v99:0 > 0 && v94:0 > 0 && v124:0 > -1 && v140:0 > -1 && v97:1 > 0
f_274(1 + v123:0, v86:0, v97:0, v87:0, v88:0, v89:0, v90:0, v91:0, v92:0, v98:0, 0, v94:0, v95:0, 3, 1, 4) -> f_274(v123:0, 1, v97:1, v87:0, v88:0, v89:0, v90:0, v91:0, v92:0, 3 + v97:1, 0, v94:0, v95:0, 3, 1, 4) :|: v101:0 > 0 && v99:0 > 0 && v94:0 > 0 && v123:0 > -1 && v86:0 < 1 && v97:1 > 0
f_274(1 + v124:0, 1 + v140:0, v97:0, v87:0, v88:0, v89:0, v90:0, v91:0, v92:0, v98:0, 0, v94:0, v95:0, 3, 1, 4) -> f_274(1 + v124:0, v140:0, v97:1, v87:0, v88:0, v89:0, v90:0, v91:0, v92:0, 3 + v97:1, 0, v94:0, v95:0, 3, 1, 4) :|: v101:0 > 0 && v99:0 > 0 && v94:0 > 0 && v124:0 > -1 && v140:0 > -1 && v97:1 > 0
Filtered unneeded arguments:
   f_274(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_274(x1, x2, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_274(sum~cons_1~v124:0, sum~cons_1~v140:0, v94:0) -> f_274(v124:0, v3250:0, v94:0) :|: v124:0 > -1 && v140:0 > -1 && v94:0 > 0 && sum~cons_1~v124:0 = 1 + v124:0 && sum~cons_1~v140:0 = 1 + v140:0
f_274(sum~cons_1~v123:0, v86:0, v94:0) -> f_274(v123:0, 1, v94:0) :|: v123:0 > -1 && v86:0 < 1 && v94:0 > 0 && sum~cons_1~v123:0 = 1 + v123:0
f_274(sum~cons_1~v124:0, sum~cons_1~v140:0, v94:0) -> f_274(1 + v124:0, v140:0, v94:0) :|: v124:0 > -1 && v140:0 > -1 && v94:0 > 0 && sum~cons_1~v124:0 = 1 + v124:0 && sum~cons_1~v140:0 = 1 + v140:0

----------------------------------------

(8)
Obligation:
Rules:
f_274(sum~cons_1~v124:0, sum~cons_1~v140:0, v94:0) -> f_274(v124:0, v3250:0, v94:0) :|: v124:0 > -1 && v140:0 > -1 && v94:0 > 0 && sum~cons_1~v124:0 = 1 + v124:0 && sum~cons_1~v140:0 = 1 + v140:0
f_274(x, x1, x2) -> f_274(x3, 1, x2) :|: x3 > -1 && x1 < 1 && x2 > 0 && x = 1 + x3
f_274(x4, x5, x6) -> f_274(1 + x7, x8, x6) :|: x7 > -1 && x8 > -1 && x6 > 0 && x4 = 1 + x7 && x5 = 1 + x8

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_274(sum~cons_1~v124:0:0, sum~cons_1~v140:0:0, v94:0:0) -> f_274(v124:0:0, v3250:0:0, v94:0:0) :|: v124:0:0 > -1 && v140:0:0 > -1 && v94:0:0 > 0 && sum~cons_1~v124:0:0 = 1 + v124:0:0 && sum~cons_1~v140:0:0 = 1 + v140:0:0
f_274(sum~cons_1~x7:0, sum~cons_1~x8:0, x6:0) -> f_274(1 + x7:0, x8:0, x6:0) :|: x7:0 > -1 && x8:0 > -1 && x6:0 > 0 && sum~cons_1~x7:0 = 1 + x7:0 && sum~cons_1~x8:0 = 1 + x8:0
f_274(sum~cons_1~x3:0, x1:0, x2:0) -> f_274(x3:0, 1, x2:0) :|: x3:0 > -1 && x1:0 < 1 && x2:0 > 0 && sum~cons_1~x3:0 = 1 + x3:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_274(x, x1, x2)] = x

The following rules are decreasing:
f_274(sum~cons_1~v124:0:0, sum~cons_1~v140:0:0, v94:0:0) -> f_274(v124:0:0, v3250:0:0, v94:0:0) :|: v124:0:0 > -1 && v140:0:0 > -1 && v94:0:0 > 0 && sum~cons_1~v124:0:0 = 1 + v124:0:0 && sum~cons_1~v140:0:0 = 1 + v140:0:0
f_274(sum~cons_1~x3:0, x1:0, x2:0) -> f_274(x3:0, 1, x2:0) :|: x3:0 > -1 && x1:0 < 1 && x2:0 > 0 && sum~cons_1~x3:0 = 1 + x3:0
The following rules are bounded:
f_274(sum~cons_1~v124:0:0, sum~cons_1~v140:0:0, v94:0:0) -> f_274(v124:0:0, v3250:0:0, v94:0:0) :|: v124:0:0 > -1 && v140:0:0 > -1 && v94:0:0 > 0 && sum~cons_1~v124:0:0 = 1 + v124:0:0 && sum~cons_1~v140:0:0 = 1 + v140:0:0
f_274(sum~cons_1~x7:0, sum~cons_1~x8:0, x6:0) -> f_274(1 + x7:0, x8:0, x6:0) :|: x7:0 > -1 && x8:0 > -1 && x6:0 > 0 && sum~cons_1~x7:0 = 1 + x7:0 && sum~cons_1~x8:0 = 1 + x8:0
f_274(sum~cons_1~x3:0, x1:0, x2:0) -> f_274(x3:0, 1, x2:0) :|: x3:0 > -1 && x1:0 < 1 && x2:0 > 0 && sum~cons_1~x3:0 = 1 + x3:0

----------------------------------------

(12)
Obligation:
Rules:
f_274(sum~cons_1~x7:0, sum~cons_1~x8:0, x6:0) -> f_274(1 + x7:0, x8:0, x6:0) :|: x7:0 > -1 && x8:0 > -1 && x6:0 > 0 && sum~cons_1~x7:0 = 1 + x7:0 && sum~cons_1~x8:0 = 1 + x8:0

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f_274(sum~cons_1~x7:0:0, sum~cons_1~x8:0:0, x6:0:0) -> f_274(1 + x7:0:0, x8:0:0, x6:0:0) :|: x7:0:0 > -1 && x8:0:0 > -1 && x6:0:0 > 0 && sum~cons_1~x7:0:0 = 1 + x7:0:0 && sum~cons_1~x8:0:0 = 1 + x8:0:0

----------------------------------------

(15) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_274(x, x1, x2)] = x1

The following rules are decreasing:
f_274(sum~cons_1~x7:0:0, sum~cons_1~x8:0:0, x6:0:0) -> f_274(1 + x7:0:0, x8:0:0, x6:0:0) :|: x7:0:0 > -1 && x8:0:0 > -1 && x6:0:0 > 0 && sum~cons_1~x7:0:0 = 1 + x7:0:0 && sum~cons_1~x8:0:0 = 1 + x8:0:0
The following rules are bounded:
f_274(sum~cons_1~x7:0:0, sum~cons_1~x8:0:0, x6:0:0) -> f_274(1 + x7:0:0, x8:0:0, x6:0:0) :|: x7:0:0 > -1 && x8:0:0 > -1 && x6:0:0 > 0 && sum~cons_1~x7:0:0 = 1 + x7:0:0 && sum~cons_1~x8:0:0 = 1 + x8:0:0

----------------------------------------

(16)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
