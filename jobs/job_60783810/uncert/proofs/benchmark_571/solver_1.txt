MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/DNsxT.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/DNsxT.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/DNsxT.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list_head --> BasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head)

struct.node --> BasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head))

Global variables:

Name: gl_list initVal: {@gl_list,@gl_list} type: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) addrSpace: null alignment: 8 threadLocal: false constant: false linkageType: null section: null

Function declarations and definitions:

*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "abort" returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "free" returnParam: BasicVoidType parameters: (*i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 29
	0:
		%1 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @gl_read()
		Unnamed Call-Instruction = call BasicVoidType @inspect(*BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) @gl_list)
		Unnamed Call-Instruction = call BasicVoidType @gl_sort()
		Unnamed Call-Instruction = call BasicVoidType @inspect(*BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) @gl_list)
		Unnamed Call-Instruction = call BasicVoidType @gl_destroy()
		ret 0

*BasicFunctionTypename: "inspect" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 38
	0:
		%2 = alloca *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), align 8
		%3 = alloca *BasicTypeName typeName: struct.nodeBasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head)), align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %2)
		br %4
	4:
		%5 = load %2
		%6 = icmp ne %5 null
		br %6, %8, %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %8
	8:
		br %9
	9:
		br %10
	10:
		%11 = load %2
		%12 = getelementptr %11, 0, 0
		%13 = load %12
		%14 = load %2
		%15 = icmp ne %13 %14
		br %15, %17, %16
	16:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %17
	17:
		br %18
	18:
		br %19
	19:
		%20 = load %2
		%21 = getelementptr %20, 0, 1
		%22 = load %21
		%23 = load %2
		%24 = icmp ne %22 %23
		br %24, %26, %25
	25:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %26
	26:
		br %27
	27:
		%28 = load %2
		%29 = getelementptr %28, 0, 1
		%30 = load %29
		store %30, %2
		br %31
	31:
		%32 = load %2
		%33 = icmp ne %32 null
		br %33, %35, %34
	34:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %35
	35:
		br %36
	36:
		br %37
	37:
		%38 = load %2
		%39 = getelementptr %38, 0, 0
		%40 = load %39
		%41 = load %2
		%42 = icmp ne %40 %41
		br %42, %44, %43
	43:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %44
	44:
		br %45
	45:
		br %46
	46:
		%47 = load %2
		%48 = getelementptr %47, 0, 1
		%49 = load %48
		%50 = load %2
		%51 = icmp ne %49 %50
		br %51, %53, %52
	52:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %53
	53:
		br %54
	54:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.nodeBasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head)) %3)
		%55 = load %2
		%56 = bitcast *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %55 to *i8
		%57 = getelementptr %56, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMBinaryConstExpr@3149ebd3
		%58 = bitcast *i8 %57 to *BasicTypeName typeName: struct.nodeBasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head))
		store %58, %3
		br %59
	59:
		%60 = load %3
		%61 = icmp ne %60 null
		br %61, %63, %62
	62:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %63
	63:
		br %64
	64:
		br %65
	65:
		%66 = load %3
		%67 = getelementptr %66, 0, 2
		%68 = getelementptr %67, 0, 0
		%69 = load %68
		%70 = load %3
		%71 = getelementptr %70, 0, 2
		%72 = icmp eq %69 %71
		br %72, %74, %73
	73:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %74
	74:
		br %75
	75:
		br %76
	76:
		%77 = load %3
		%78 = getelementptr %77, 0, 2
		%79 = getelementptr %78, 0, 1
		%80 = load %79
		%81 = load %3
		%82 = getelementptr %81, 0, 2
		%83 = icmp eq %80 %82
		br %83, %85, %84
	84:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %85
	85:
		br %86
	86:
		br %87
	87:
		%88 = load %3
		%89 = getelementptr %88, 0, 2
		%90 = getelementptr %89, 0, 0
		%91 = load %90
		%92 = load %3
		%93 = getelementptr %92, 0, 1
		%94 = icmp ne %91 %93
		br %94, %96, %95
	95:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %96
	96:
		br %97
	97:
		br %98
	98:
		%99 = load %3
		%100 = getelementptr %99, 0, 2
		%101 = getelementptr %100, 0, 1
		%102 = load %101
		%103 = load %3
		%104 = getelementptr %103, 0, 1
		%105 = icmp ne %102 %104
		br %105, %107, %106
	106:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %107
	107:
		br %108
	108:
		br %109
	109:
		%110 = load %3
		%111 = load %2
		%112 = bitcast *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %111 to *BasicTypeName typeName: struct.nodeBasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head))
		%113 = icmp ne %110 %112
		br %113, %115, %114
	114:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %115
	115:
		br %116
	116:
		br %117
	117:
		%118 = load %3
		%119 = load %3
		%120 = getelementptr %119, 0, 1
		%121 = bitcast *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %120 to *BasicTypeName typeName: struct.nodeBasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head))
		%122 = icmp ne %118 %121
		br %122, %124, %123
	123:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %124
	124:
		br %125
	125:
		br %126
	126:
		%127 = load %3
		%128 = load %3
		%129 = getelementptr %128, 0, 0
		%130 = bitcast *i32 %129 to *BasicTypeName typeName: struct.nodeBasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head))
		%131 = icmp eq %127 %130
		br %131, %133, %132
	132:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %133
	133:
		br %134
	134:
		br %135
	135:
		%136 = load %2
		%137 = load %3
		%138 = getelementptr %137, 0, 1
		%139 = getelementptr %138, 0, 0
		%140 = load %139
		%141 = getelementptr %140, 0, 1
		%142 = load %141
		%143 = icmp eq %136 %142
		br %143, %145, %144
	144:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %145
	145:
		br %146
	146:
		br %147
	147:
		%148 = load %2
		%149 = load %3
		%150 = getelementptr %149, 0, 1
		%151 = getelementptr %150, 0, 1
		%152 = load %151
		%153 = getelementptr %152, 0, 0
		%154 = load %153
		%155 = icmp eq %148 %154
		br %155, %157, %156
	156:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %157
	157:
		br %158
	158:
		%159 = load %2
		%160 = getelementptr %159, 0, 0
		%161 = load %160
		store %161, %2
		br %162
	162:
		%163 = load %3
		%164 = getelementptr %163, 0, 1
		%165 = load %2
		%166 = icmp ne %164 %165
		br %166, %167, %172
	167:
		br %168
	168:
		%169 = load %2
		%170 = getelementptr %169, 0, 0
		%171 = load %170
		store %171, %2
		br %162
	172:
		br %173
	173:
		%174 = load %2
		%175 = bitcast *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %174 to *i8
		%176 = getelementptr %175, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMBinaryConstExpr@778f927f
		%177 = bitcast *i8 %176 to *BasicTypeName typeName: struct.nodeBasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head))
		%178 = load %3
		%179 = icmp eq %177 %178
		br %179, %181, %180
	180:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %181
	181:
		br %182
	182:
		ret void

*BasicFunctionTypename: "gl_read" linkageType: INTERNAL returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 252
	0:
		br %1
	1:
		%2 = call i32 @__VERIFIER_nondet_int()
		Unnamed Call-Instruction = call BasicVoidType @gl_insert(i32 %2)
		br %3
	3:
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = icmp ne %4 0
		br %5, %1, %6
	6:
		ret void

*BasicFunctionTypename: "gl_insert" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 264
	0:
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.nodeBasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head)), align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.nodeBasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head)) %3)
		%4 = call noalias *i8 @malloc(i64 40)
		%5 = bitcast *i8 %4 to *BasicTypeName typeName: struct.nodeBasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head))
		store %5, %3
		%6 = load %3
		%7 = icmp ne %6 null
		br %7, %9, %8
	8:
		Unnamed Call-Instruction = call BasicVoidType @abort()
		unreachable
	9:
		%10 = load %2
		%11 = load %3
		%12 = getelementptr %11, 0, 0
		store %10, %12
		%13 = load %3
		%14 = getelementptr %13, 0, 1
		Unnamed Call-Instruction = call BasicVoidType @list_add(*BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %14, *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) @gl_list)
		br %15
	15:
		%16 = load %3
		%17 = getelementptr %16, 0, 2
		%18 = load %3
		%19 = getelementptr %18, 0, 2
		%20 = getelementptr %19, 0, 0
		store %17, %20
		%21 = load %3
		%22 = getelementptr %21, 0, 2
		%23 = load %3
		%24 = getelementptr %23, 0, 2
		%25 = getelementptr %24, 0, 1
		store %22, %25
		br %26
	26:
		ret void

*BasicFunctionTypename: "list_add" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), 1 *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 299
	0:
		%3 = alloca *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), align 8
		%4 = alloca *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %4)
		%5 = load %3
		%6 = load %4
		%7 = load %4
		%8 = getelementptr %7, 0, 0
		%9 = load %8
		Unnamed Call-Instruction = call BasicVoidType @__list_add(*BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %5, *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %6, *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %9)
		ret void

*BasicFunctionTypename: "__list_add" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), 1 *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), 2 *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 312
	0:
		%4 = alloca *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), align 8
		%5 = alloca *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), align 8
		%6 = alloca *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %6)
		%7 = load %4
		%8 = load %6
		%9 = getelementptr %8, 0, 1
		store %7, %9
		%10 = load %6
		%11 = load %4
		%12 = getelementptr %11, 0, 0
		store %10, %12
		%13 = load %5
		%14 = load %4
		%15 = getelementptr %14, 0, 1
		store %13, %15
		%16 = load %4
		%17 = load %5
		%18 = getelementptr %17, 0, 0
		store %16, %18
		ret void

*BasicFunctionTypename: "fail" linkageType: INTERNAL returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 338
	0:
		br %1
	1:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable

*BasicFunctionTypename: "gl_sort" linkageType: INTERNAL returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 343
	0:
		br %1
	1:
		%2 = call zeroext i1 @gl_sort_pass()
		br %2, %3, %4
	3:
		br %1
	4:
		ret void

*BasicFunctionTypename: "gl_sort_pass" linkageType: INTERNAL returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 349
	0:
		%1 = alloca i8, align 1
		%2 = alloca *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), align 8
		%3 = alloca *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), align 8
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %2)
		%6 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@77e82096
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %3)
		br %7
	7:
		%8 = load %2
		%9 = getelementptr %8, 0, 0
		%10 = load %9
		store %10, %3
		%11 = icmp ne @gl_list %10
		br %11, %12, %25
	12:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%13 = load %2
		%14 = call i32 @val_from_node(*BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %13)
		store %14, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%15 = load %3
		%16 = call i32 @val_from_node(*BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %15)
		store %16, %5
		%17 = load %4
		%18 = load %5
		%19 = icmp sle %17 %18
		br %19, %20, %22
	20:
		%21 = load %3
		store %21, %2
		br %7
	22:
		store 1, %1
		%23 = load %2
		%24 = load %3
		Unnamed Call-Instruction = call BasicVoidType @list_move(*BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %23, *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %24)
		br %7
	25:
		%26 = load %1
		%27 = trunc i8 %26 to i1
		ret %27

*BasicFunctionTypename: "val_from_node" linkageType: INTERNAL returnParam: i32 parameters: (0 *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 392
	0:
		%2 = alloca *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), align 8
		%3 = alloca *BasicTypeName typeName: struct.nodeBasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head)), align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.nodeBasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head)) %3)
		%4 = load %2
		%5 = bitcast *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %4 to *i8
		%6 = getelementptr %5, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMBinaryConstExpr@dfbe847
		%7 = bitcast *i8 %6 to *BasicTypeName typeName: struct.nodeBasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head))
		store %7, %3
		%8 = load %3
		%9 = getelementptr %8, 0, 0
		%10 = load %9
		ret %10

*BasicFunctionTypename: "list_move" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), 1 *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 406
	0:
		%3 = alloca *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), align 8
		%4 = alloca *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %4)
		%5 = load %3
		%6 = getelementptr %5, 0, 1
		%7 = load %6
		%8 = load %3
		%9 = getelementptr %8, 0, 0
		%10 = load %9
		Unnamed Call-Instruction = call BasicVoidType @__list_del(*BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %7, *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %10)
		%11 = load %3
		%12 = load %4
		Unnamed Call-Instruction = call BasicVoidType @list_add(*BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %11, *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %12)
		ret void

*BasicFunctionTypename: "__list_del" linkageType: INTERNAL returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), 1 *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 420
	0:
		%3 = alloca *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), align 8
		%4 = alloca *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %4)
		%5 = load %3
		%6 = load %4
		%7 = getelementptr %6, 0, 1
		store %5, %7
		%8 = load %4
		%9 = load %3
		%10 = getelementptr %9, 0, 0
		store %8, %10
		ret void

*BasicFunctionTypename: "gl_destroy" linkageType: INTERNAL returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 434
	0:
		%1 = alloca *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), align 8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %1)
		br %2
	2:
		%3 = load aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@6bbc67c9
		store %3, %1
		%4 = icmp ne @gl_list %3
		br %4, %5, %14
	5:
		%6 = load %1
		%7 = getelementptr %6, 0, 0
		%8 = load %7
		store %8, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMGetElementPtrConstExpr@60ab1cab
		%9 = load %1
		%10 = bitcast *BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head) %9 to *i8
		%11 = getelementptr %10, aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMBinaryConstExpr@56716cb8
		%12 = bitcast *i8 %11 to *BasicTypeName typeName: struct.nodeBasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head))
		%13 = bitcast *BasicTypeName typeName: struct.nodeBasicStructureType(elementType: i32, elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head), elementType: BasicTypeName typeName: struct.list_headBasicStructureType(elementType: *struct.list_head, elementType: *struct.list_head)) %12 to *i8
		Unnamed Call-Instruction = call BasicVoidType @free(*i8 %13)
		br %2
	14:
		ret void


Analyze Termination of all function calls matching the pattern:
main()/hpcwork/ff862203/termcomp25/benchmarks/DNsxT.c:52:75: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;
                                                                          ^
/hpcwork/ff862203/termcomp25/benchmarks/DNsxT.c:55:36: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
                                   ^
/hpcwork/ff862203/termcomp25/benchmarks/DNsxT.c:57:36: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
                                   ^
/hpcwork/ff862203/termcomp25/benchmarks/DNsxT.c:59:36: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
