YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/5qxWf.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 66 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2955 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 56 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/5qxWf.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/5qxWf.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%4 = alloca i8, numElementsLit: 4, align 16
		%5 = bitcast *i8 %4 to *i32
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%6 = alloca i8, numElementsLit: 4, align 16
		%7 = bitcast *i8 %6 to *i32
		store %7, %3
		%8 = load %3
		store 1, %8
		%9 = load %2
		store 10000, %9
		br %10
	10:
		%11 = load %2
		%12 = load %11
		%13 = load %3
		%14 = load %13
		%15 = sub i32 %12, %14
		%16 = icmp sge %15 1
		br %16, %17, %25
	17:
		%18 = load %3
		%19 = load %18
		%20 = add i32 %19, 1
		store %20, %18
		br %21
	21:
		%22 = load %2
		%23 = load %22
		%24 = add i32 %23, -1
		store %24, %22
		br %10
	25:
		%26 = load %1
		ret %26


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_269(v123, v124, v125, v126, v127, v128, v129, v130, 1, v132, v133, v134, v135, v136, v137, v138, 0, 3, 7, 2, 10000, 9999, 4, 8) -> f_270(v123, v124, v125, v126, v127, v133, v129, v130, 1, v132, v128, v134, v135, v136, v137, v138, 0, 3, 7, 2, 10000, 9999, 4, 8) :|: 0 = 0
f_270(v123, v124, v125, v126, v127, v133, v129, v130, 1, v132, v128, v134, v135, v136, v137, v138, 0, 3, 7, 2, 10000, 9999, 4, 8) -> f_271(v123, v124, v125, v126, v127, v133, v129, v130, 1, v132, v128, v134, v135, v136, v137, v138, 0, 3, 7, 2, 10000, 9999, 4, 8) :|: 0 = 0
f_271(v123, v124, v125, v126, v127, v133, v129, v130, 1, v132, v128, v134, v135, v136, v137, v138, 0, 3, 7, 2, 10000, 9999, 4, 8) -> f_272(v123, v124, v125, v126, v127, v133, v132, v130, 1, v129, v128, v134, v135, v136, v137, v138, 0, 3, 7, 2, 10000, 9999, 4, 8) :|: 0 = 0
f_272(v123, v124, v125, v126, v127, v133, v132, v130, 1, v129, v128, v134, v135, v136, v137, v138, 0, 3, 7, 2, 10000, 9999, 4, 8) -> f_273(v123, v124, v125, v126, v127, v133, v132, v140, 1, v129, v128, v134, v135, v136, v137, v138, 0, 3, 7, 2, 10000, 9999, 4, 8, 9997) :|: v140 + v132 = v133 && 0 <= 9999 + v140 && v140 <= 9997
f_273(v123, v124, v125, v126, v127, v133, v132, v140, 1, v129, v128, v134, v135, v136, v137, v138, 0, 3, 7, 2, 10000, 9999, 4, 8, 9997) -> f_274(v123, v124, v125, v126, v127, v133, v132, v140, 1, v129, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 9997, 2, 9998, 9999, 8) :|: 1 <= v140 && v132 <= 9998 && 3 <= v133 && v129 <= 9997 && 4 <= v128
f_274(v123, v124, v125, v126, v127, v133, v132, v140, 1, v129, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 9997, 2, 9998, 9999, 8) -> f_276(v123, v124, v125, v126, v127, v133, v132, v140, 1, v129, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 9997, 2, 9998, 9999, 8) :|: 0 = 0
f_276(v123, v124, v125, v126, v127, v133, v132, v140, 1, v129, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 9997, 2, 9998, 9999, 8) -> f_278(v123, v124, v125, v126, v127, v133, v132, v140, 1, v129, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 9997, 2, 9998, 9999, 8) :|: TRUE
f_278(v123, v124, v125, v126, v127, v133, v132, v140, 1, v129, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 9997, 2, 9998, 9999, 8) -> f_280(v123, v124, v125, v126, v127, v133, v132, v140, 1, v129, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 9997, 2, 9998, 9999, 8) :|: 0 = 0
f_280(v123, v124, v125, v126, v127, v133, v132, v140, 1, v129, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 9997, 2, 9998, 9999, 8) -> f_282(v123, v124, v125, v126, v127, v133, v132, v140, 1, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 2, 9998, 9999, 8, 9997) :|: 0 = 0
f_282(v123, v124, v125, v126, v127, v133, v132, v140, 1, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 2, 9998, 9999, 8, 9997) -> f_283(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 2, 9998, 9999, 8, 9997) :|: v141 = 1 + v132 && 3 <= v141 && v141 <= 9999
f_283(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 2, 9998, 9999, 8, 9997) -> f_284(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 2, 9998, 9999, 8, 9997) :|: TRUE
f_284(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 2, 9998, 9999, 8, 9997) -> f_285(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 2, 9998, 9999, 8, 9997) :|: TRUE
f_285(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 2, 9998, 9999, 8, 9997) -> f_286(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 2, 9998, 9999, 8, 9997) :|: 0 = 0
f_286(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v128, v134, v135, v136, v137, v138, 0, 3, 7, 4, 10000, 2, 9998, 9999, 8, 9997) -> f_287(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v134, v135, v136, v137, v138, 0, 3, 7, 2, 9998, 9999, 4, 8, 9997) :|: 0 = 0
f_287(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v134, v135, v136, v137, v138, 0, 3, 7, 2, 9998, 9999, 4, 8, 9997) -> f_288(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v143, v134, v135, v136, v137, v138, 0, 3, 7, 2, 9998, 9999, 4, 8, 9997) :|: 1 + v143 = v133 && 2 <= v143 && v143 <= 9998
f_288(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v143, v134, v135, v136, v137, v138, 0, 3, 7, 2, 9998, 9999, 4, 8, 9997) -> f_289(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v143, v134, v135, v136, v137, v138, 0, 3, 7, 2, 9998, 9999, 4, 8, 9997) :|: TRUE
f_289(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v143, v134, v135, v136, v137, v138, 0, 3, 7, 2, 9998, 9999, 4, 8, 9997) -> f_290(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v143, v134, v135, v136, v137, v138, 0, 3, 7, 2, 9998, 9999, 4, 8, 9997) :|: TRUE
f_290(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v143, v134, v135, v136, v137, v138, 0, 3, 7, 2, 9998, 9999, 4, 8, 9997) -> f_268(v123, v124, v125, v126, v127, v133, v132, v140, 1, v141, v143, v134, v135, v136, v137, v138, 0, 3, 7, 2, 10000, 9999, 4, 8) :|: TRUE
f_268(v123, v124, v125, v126, v127, v128, v129, v130, 1, v132, v133, v134, v135, v136, v137, v138, 0, 3, 7, 2, 10000, 9999, 4, 8) -> f_269(v123, v124, v125, v126, v127, v128, v129, v130, 1, v132, v133, v134, v135, v136, v137, v138, 0, 3, 7, 2, 10000, 9999, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_269(v123:0, v124:0, v125:0, v126:0, v127:0, v128:0, v129:0, v130:0, 1, v132:0, 1 + v143:0, v134:0, v135:0, v136:0, v137:0, v138:0, 0, 3, 7, 2, 10000, 9999, 4, 8) -> f_269(v123:0, v124:0, v125:0, v126:0, v127:0, 1 + v143:0, v132:0, v140:0, 1, 1 + v132:0, v143:0, v134:0, v135:0, v136:0, v137:0, v138:0, 0, 3, 7, 2, 10000, 9999, 4, 8) :|: v140:0 > 0 && v132:0 < 9999 && v143:0 > 1 && v140:0 + v132:0 = 1 + v143:0 && v129:0 < 9998 && v140:0 < 9998 && v128:0 > 3 && v132:0 > 1 && v143:0 < 9999
Filtered unneeded arguments:
   f_269(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_269(x6, x7, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_269(v128:0, v129:0, v132:0, sum~cons_1~v143:0) -> f_269(1 + v143:0, v132:0, 1 + v132:0, v143:0) :|: v143:0 > 1 && v132:0 < 9999 && v129:0 < 9998 && v128:0 > 3 && v143:0 < 9999 && v132:0 > 1 && sum~cons_1~v143:0 = 1 + v143:0

----------------------------------------

(8)
Obligation:
Rules:
f_269(v128:0, v129:0, v132:0, sum~cons_1~v143:0) -> f_269(1 + v143:0, v132:0, 1 + v132:0, v143:0) :|: v143:0 > 1 && v132:0 < 9999 && v129:0 < 9998 && v128:0 > 3 && v143:0 < 9999 && v132:0 > 1 && sum~cons_1~v143:0 = 1 + v143:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_269(v128:0:0, v129:0:0, v132:0:0, sum~cons_1~v143:0:0) -> f_269(1 + v143:0:0, v132:0:0, 1 + v132:0:0, v143:0:0) :|: v143:0:0 < 9999 && v132:0:0 > 1 && v128:0:0 > 3 && v129:0:0 < 9998 && v132:0:0 < 9999 && v143:0:0 > 1 && sum~cons_1~v143:0:0 = 1 + v143:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_269(x, x1, x2, x3)] = x3

The following rules are decreasing:
f_269(v128:0:0, v129:0:0, v132:0:0, sum~cons_1~v143:0:0) -> f_269(1 + v143:0:0, v132:0:0, 1 + v132:0:0, v143:0:0) :|: v143:0:0 < 9999 && v132:0:0 > 1 && v128:0:0 > 3 && v129:0:0 < 9998 && v132:0:0 < 9999 && v143:0:0 > 1 && sum~cons_1~v143:0:0 = 1 + v143:0:0
The following rules are bounded:
f_269(v128:0:0, v129:0:0, v132:0:0, sum~cons_1~v143:0:0) -> f_269(1 + v143:0:0, v132:0:0, 1 + v132:0:0, v143:0:0) :|: v143:0:0 < 9999 && v132:0:0 > 1 && v128:0:0 > 3 && v129:0:0 < 9998 && v132:0:0 < 9999 && v143:0:0 > 1 && sum~cons_1~v143:0:0 = 1 + v143:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
