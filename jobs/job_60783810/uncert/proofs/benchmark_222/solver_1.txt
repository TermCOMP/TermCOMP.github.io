YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/lZP7y.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 5041 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 21 ms]
        (9) IntTRS
        (10) TerminationGraphProcessor [EQUIVALENT, 7 ms]
        (11) IntTRS
        (12) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (13) IntTRS
        (14) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (15) YES
    (16) LLVM Symbolic Execution SCC
        (17) SCC2IRS [SOUND, 32 ms]
        (18) IntTRS
        (19) TerminationGraphProcessor [EQUIVALENT, 6 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (24) YES
    (25) LLVM Symbolic Execution SCC
        (26) SCC2IRS [SOUND, 30 ms]
        (27) IntTRS
        (28) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (29) IntTRS
        (30) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (31) YES
    (32) LLVM Symbolic Execution SCC
        (33) SCC2IRS [SOUND, 31 ms]
        (34) IntTRS
        (35) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (36) IntTRS
        (37) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (38) YES
    (39) LLVM Symbolic Execution SCC
        (40) SCC2IRS [SOUND, 33 ms]
        (41) IntTRS
        (42) TerminationGraphProcessor [EQUIVALENT, 7 ms]
        (43) IntTRS
        (44) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (45) IntTRS
        (46) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (47) YES
    (48) LLVM Symbolic Execution SCC
        (49) SCC2IRS [SOUND, 274 ms]
        (50) IntTRS
        (51) TerminationGraphProcessor [EQUIVALENT, 67 ms]
        (52) IntTRS
        (53) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (54) IntTRS
        (55) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (56) IntTRS
        (57) TerminationGraphProcessor [EQUIVALENT, 0 ms]
        (58) YES
    (59) LLVM Symbolic Execution SCC
        (60) SCC2IRS [SOUND, 3 ms]
        (61) IntTRS
        (62) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (63) IntTRS
        (64) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (65) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/lZP7y.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/lZP7y.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "f" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store 0, %6
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %8
	8:
		%9 = load %5
		%10 = load %3
		%11 = icmp slt %9 %10
		br %11, %12, %20
	12:
		%13 = load %5
		%14 = add i32 %13, 1
		store %14, %5
		%15 = load %5
		%16 = srem i32 %15, 2
		%17 = icmp ne %16 0
		br %17, %18, %19
	18:
		br %8
	19:
		br %21
	20:
		br %21
	21:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %22
	22:
		%23 = load %6
		%24 = load %4
		%25 = icmp slt %23 %24
		br %25, %26, %34
	26:
		%27 = load %6
		%28 = add i32 %27, 1
		store %28, %6
		%29 = load %5
		%30 = srem i32 %29, 2
		%31 = icmp ne %30 0
		br %31, %32, %33
	32:
		br %22
	33:
		br %7
	34:
		%35 = load %5
		%36 = load %6
		%37 = add i32 %35, %36
		ret %37

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 59
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @f(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 7 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_1857(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1859(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 0 = 0
f_1859(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1861(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 0 = 0
f_1861(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1863(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: v6540 < v6317 && 3 <= v6317
f_1863(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1866(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 0 = 0
f_1866(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1869(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
f_1869(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1872(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 0 = 0
f_1872(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1875(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6889, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: v6889 = 1 + v6540 && 3 <= v6889
f_1875(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6889, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1877(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6889, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
f_1877(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6889, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1879(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6889, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 0 = 0
f_1879(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6889, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1881(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6889, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 1 = v6316 - v6316 / 2 * 2 && 0 < 1
f_1881(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6889, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1882(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6889, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 0 = 0
f_1882(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6889, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1883(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6889, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
f_1883(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6889, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1854(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6540, 1, v6889, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
f_1854(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1857(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_1857(v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, v6321:0, 0, v6323:0, v6326:0, 1, v6540:0, v6327:0, v6328:0, v6329:0, v6330:0, v6331:0, v6332:0, 3, 2, 4) -> f_1857(v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, v6321:0, 0, v6323:0, v6540:0, 1, 1 + v6540:0, v6327:0, v6328:0, v6329:0, v6330:0, v6331:0, v6332:0, 3, 2, 4) :|: v6317:0 > 2 && v6540:0 < v6317:0 && v6316:0 - v6316:0 / 2 * 2 = 1 && v6540:0 > 1
Filtered unneeded arguments:
   f_1857(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_1857(x1, x2, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_1857(v6316:0, v6317:0, v6540:0) -> f_1857'(v6316:0, v6317:0, v6540:0) :|: v6540:0 < v6317:0 && v6317:0 > 2 && v6540:0 > 1 && v6316:0 - 2 * div = 1
f_1857'(v6316:0, v6317:0, v6540:0) -> f_1857(v6316:0, v6317:0, 1 + v6540:0) :|: v6540:0 < v6317:0 && v6317:0 > 2 && v6316:0 - 2 * div = 1 && v6316:0 < 0 && v6540:0 > 1 && v6316:0 - 2 * div <= 0 && v6316:0 - 2 * div > -2
f_1857'(v6316:0, v6317:0, v6540:0) -> f_1857(v6316:0, v6317:0, 1 + v6540:0) :|: v6540:0 < v6317:0 && v6317:0 > 2 && v6316:0 - 2 * div = 1 && v6316:0 > -1 && v6540:0 > 1 && v6316:0 - 2 * div < 2 && v6316:0 - 2 * div >= 0

----------------------------------------

(9)
Obligation:
Rules:
f_1857(x, x1, x2) -> f_1857'(x, x1, x2) :|: x2 < x1 && x1 > 2 && x2 > 1 && x - 2 * x3 = 1
f_1857'(x4, x5, x6) -> f_1857(x4, x5, 1 + x6) :|: x6 < x5 && x5 > 2 && x4 - 2 * x7 = 1 && x4 < 0 && x6 > 1 && x4 - 2 * x7 <= 0 && x4 - 2 * x7 > -2
f_1857'(x8, x9, x10) -> f_1857(x8, x9, 1 + x10) :|: x10 < x9 && x9 > 2 && x8 - 2 * x11 = 1 && x8 > -1 && x10 > 1 && x8 - 2 * x11 < 2 && x8 - 2 * x11 >= 0

----------------------------------------

(10) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(11)
Obligation:
Rules:
f_1857(x, x1, x2) -> f_1857'(x, x1, x2) :|: x2 < x1 && x1 > 2 && x2 > 1 && x - 2 * x3 = 1
f_1857'(x8, x9, x10) -> f_1857(x8, x9, 1 + x10) :|: x10 < x9 && x9 > 2 && x8 - 2 * x11 = 1 && x8 > -1 && x10 > 1 && x8 - 2 * x11 < 2 && x8 - 2 * x11 >= 0

----------------------------------------

(12) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(13)
Obligation:
Rules:
f_1857(x:0, x1:0, x2:0) -> f_1857(x:0, x1:0, 1 + x2:0) :|: x:0 - 2 * x11:0 >= 0 && x:0 - 2 * x3:0 = 1 && x:0 - 2 * x11:0 < 2 && x2:0 > 1 && x:0 > -1 && x:0 - 2 * x11:0 = 1 && x1:0 > 2 && x2:0 < x1:0

----------------------------------------

(14) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1857(x, x1, x2)] = -1 + x1 - x2

The following rules are decreasing:
f_1857(x:0, x1:0, x2:0) -> f_1857(x:0, x1:0, 1 + x2:0) :|: x:0 - 2 * x11:0 >= 0 && x:0 - 2 * x3:0 = 1 && x:0 - 2 * x11:0 < 2 && x2:0 > 1 && x:0 > -1 && x:0 - 2 * x11:0 = 1 && x1:0 > 2 && x2:0 < x1:0
The following rules are bounded:
f_1857(x:0, x1:0, x2:0) -> f_1857(x:0, x1:0, 1 + x2:0) :|: x:0 - 2 * x11:0 >= 0 && x:0 - 2 * x3:0 = 1 && x:0 - 2 * x11:0 < 2 && x2:0 > 1 && x:0 > -1 && x:0 - 2 * x11:0 = 1 && x1:0 > 2 && x2:0 < x1:0

----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
SCC
----------------------------------------

(17) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_1815(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6372, v6373, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) -> f_1817(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6372, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) :|: 0 = 0
f_1817(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6372, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) -> f_1820(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6372, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) :|: 0 = 0
f_1820(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6372, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) -> f_1823(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6372, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) :|: v6373 < v6363 && 3 <= v6363
f_1823(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6372, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) -> f_1827(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6372, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) :|: 0 = 0
f_1827(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6372, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) -> f_1831(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6372, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) :|: TRUE
f_1831(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6372, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) -> f_1835(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) :|: 0 = 0
f_1835(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) -> f_1839(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6543, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) :|: v6543 = 1 + v6373 && 3 <= v6543
f_1839(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6543, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) -> f_1843(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6543, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) :|: TRUE
f_1843(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6543, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) -> f_1846(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6543, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) :|: 0 = 0
f_1846(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6543, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) -> f_1850(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6543, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) :|: 1 = v6370 - v6370 / 2 * 2 && 0 < 1
f_1850(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6543, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) -> f_1853(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6543, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) :|: 0 = 0
f_1853(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6543, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) -> f_1856(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6543, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) :|: TRUE
f_1856(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6543, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) -> f_1813(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6373, v6543, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) :|: TRUE
f_1813(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6372, v6373, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) -> f_1815(v6362, v6363, v6364, v6365, v6366, v6367, v6368, 1, v6370, 0, v6372, v6373, v6374, v6375, v6376, v6377, v6378, v6379, 3, 2, 5, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_1815(v6362:0, v6363:0, v6364:0, v6365:0, v6366:0, v6367:0, v6368:0, 1, v6370:0, 0, v6372:0, v6373:0, v6374:0, v6375:0, v6376:0, v6377:0, v6378:0, v6379:0, 3, 2, 5, 4) -> f_1815(v6362:0, v6363:0, v6364:0, v6365:0, v6366:0, v6367:0, v6368:0, 1, v6370:0, 0, v6373:0, 1 + v6373:0, v6374:0, v6375:0, v6376:0, v6377:0, v6378:0, v6379:0, 3, 2, 5, 4) :|: v6363:0 > 2 && v6373:0 < v6363:0 && v6370:0 - v6370:0 / 2 * 2 = 1 && v6373:0 > 1
Filtered unneeded arguments:
   f_1815(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_1815(x2, x9, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_1815(v6363:0, v6370:0, v6373:0) -> f_1815'(v6363:0, v6370:0, v6373:0) :|: v6373:0 < v6363:0 && v6363:0 > 2 && v6373:0 > 1 && v6370:0 - 2 * div = 1
f_1815'(v6363:0, v6370:0, v6373:0) -> f_1815(v6363:0, v6370:0, 1 + v6373:0) :|: v6373:0 < v6363:0 && v6363:0 > 2 && v6370:0 - 2 * div = 1 && v6370:0 < 0 && v6373:0 > 1 && v6370:0 - 2 * div <= 0 && v6370:0 - 2 * div > -2
f_1815'(v6363:0, v6370:0, v6373:0) -> f_1815(v6363:0, v6370:0, 1 + v6373:0) :|: v6373:0 < v6363:0 && v6363:0 > 2 && v6370:0 - 2 * div = 1 && v6370:0 > -1 && v6373:0 > 1 && v6370:0 - 2 * div < 2 && v6370:0 - 2 * div >= 0

----------------------------------------

(18)
Obligation:
Rules:
f_1815(x, x1, x2) -> f_1815'(x, x1, x2) :|: x2 < x && x > 2 && x2 > 1 && x1 - 2 * x3 = 1
f_1815'(x4, x5, x6) -> f_1815(x4, x5, 1 + x6) :|: x6 < x4 && x4 > 2 && x5 - 2 * x7 = 1 && x5 < 0 && x6 > 1 && x5 - 2 * x7 <= 0 && x5 - 2 * x7 > -2
f_1815'(x8, x9, x10) -> f_1815(x8, x9, 1 + x10) :|: x10 < x8 && x8 > 2 && x9 - 2 * x11 = 1 && x9 > -1 && x10 > 1 && x9 - 2 * x11 < 2 && x9 - 2 * x11 >= 0

----------------------------------------

(19) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(20)
Obligation:
Rules:
f_1815(x, x1, x2) -> f_1815'(x, x1, x2) :|: x2 < x && x > 2 && x2 > 1 && x1 - 2 * x3 = 1
f_1815'(x8, x9, x10) -> f_1815(x8, x9, 1 + x10) :|: x10 < x8 && x8 > 2 && x9 - 2 * x11 = 1 && x9 > -1 && x10 > 1 && x9 - 2 * x11 < 2 && x9 - 2 * x11 >= 0

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_1815(x:0, x1:0, x2:0) -> f_1815(x:0, x1:0, 1 + x2:0) :|: x1:0 - 2 * x11:0 >= 0 && x1:0 - 2 * x3:0 = 1 && x1:0 - 2 * x11:0 < 2 && x2:0 > 1 && x1:0 > -1 && x1:0 - 2 * x11:0 = 1 && x:0 > 2 && x:0 > x2:0

----------------------------------------

(23) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1815(x, x1, x2)] = -1 + x - x2

The following rules are decreasing:
f_1815(x:0, x1:0, x2:0) -> f_1815(x:0, x1:0, 1 + x2:0) :|: x1:0 - 2 * x11:0 >= 0 && x1:0 - 2 * x3:0 = 1 && x1:0 - 2 * x11:0 < 2 && x2:0 > 1 && x1:0 > -1 && x1:0 - 2 * x11:0 = 1 && x:0 > 2 && x:0 > x2:0
The following rules are bounded:
f_1815(x:0, x1:0, x2:0) -> f_1815(x:0, x1:0, 1 + x2:0) :|: x1:0 - 2 * x11:0 >= 0 && x1:0 - 2 * x3:0 = 1 && x1:0 - 2 * x11:0 < 2 && x2:0 > 1 && x1:0 > -1 && x1:0 - 2 * x11:0 = 1 && x:0 > 2 && x:0 > x2:0

----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
SCC
----------------------------------------

(26) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_1807(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6324, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1809(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6324, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
f_1809(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6324, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1811(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6324, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
f_1811(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6324, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1814(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6324, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 0 = 0
f_1814(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6324, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1816(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6324, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 0 = 0
f_1816(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6324, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1818(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6324, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: v6326 < v6317 && 2 <= v6317
f_1818(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6324, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1821(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6324, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 0 = 0
f_1821(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6324, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1825(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6324, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
f_1825(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6324, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1829(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 0 = 0
f_1829(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1833(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: v6540 = 1 + v6326 && 2 <= v6540
f_1833(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1837(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
f_1837(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1841(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 0 = 0
f_1841(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1845(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6546, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: v6546 = v6316 - v6316 / 2 * 2 && v6546 < 2 && 0 <= v6546
f_1845(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6546, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1849(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: v6546 = 0
f_1849(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1852(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 0 = 0
f_1852(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1855(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
f_1855(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1858(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
f_1858(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1860(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
f_1860(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1862(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
f_1862(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1865(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 0 = 0
f_1865(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1868(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 0 = 0
f_1868(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1871(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: 0 = 0
f_1871(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1874(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
f_1874(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1804(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6326, 1, v6540, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
f_1804(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6324, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) -> f_1807(v6316, v6317, v6318, v6319, v6320, v6321, 0, v6323, v6324, 1, v6326, v6327, v6328, v6329, v6330, v6331, v6332, 3, 2, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_1807(v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, v6321:0, 0, v6323:0, v6324:0, 1, v6326:0, v6327:0, v6328:0, v6329:0, v6330:0, v6331:0, v6332:0, 3, 2, 4) -> f_1807(v6316:0, v6317:0, v6318:0, v6319:0, v6320:0, v6321:0, 0, v6323:0, v6326:0, 1, 1 + v6326:0, v6327:0, v6328:0, v6329:0, v6330:0, v6331:0, v6332:0, 3, 2, 4) :|: v6317:0 > 1 && v6326:0 < v6317:0 && v6316:0 - v6316:0 / 2 * 2 = 0 && v6326:0 > 0
Filtered unneeded arguments:
   f_1807(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_1807(x1, x2, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_1807(v6316:0, v6317:0, v6326:0) -> f_1807'(v6316:0, v6317:0, v6326:0) :|: v6326:0 < v6317:0 && v6317:0 > 1 && v6326:0 > 0 && v6316:0 - 2 * div = 0
f_1807'(v6316:0, v6317:0, v6326:0) -> f_1807(v6316:0, v6317:0, 1 + v6326:0) :|: v6326:0 < v6317:0 && v6317:0 > 1 && v6316:0 - 2 * div = 0 && v6316:0 < 0 && v6326:0 > 0 && v6316:0 - 2 * div <= 0 && v6316:0 - 2 * div > -2
f_1807'(v6316:0, v6317:0, v6326:0) -> f_1807(v6316:0, v6317:0, 1 + v6326:0) :|: v6326:0 < v6317:0 && v6317:0 > 1 && v6316:0 - 2 * div = 0 && v6316:0 > -1 && v6326:0 > 0 && v6316:0 - 2 * div < 2 && v6316:0 - 2 * div >= 0

----------------------------------------

(27)
Obligation:
Rules:
f_1807(x, x1, x2) -> f_1807'(x, x1, x2) :|: x2 < x1 && x1 > 1 && x2 > 0 && x - 2 * x3 = 0
f_1807'(x4, x5, x6) -> f_1807(x4, x5, 1 + x6) :|: x6 < x5 && x5 > 1 && x4 - 2 * x7 = 0 && x4 < 0 && x6 > 0 && x4 - 2 * x7 <= 0 && x4 - 2 * x7 > -2
f_1807'(x8, x9, x10) -> f_1807(x8, x9, 1 + x10) :|: x10 < x9 && x9 > 1 && x8 - 2 * x11 = 0 && x8 > -1 && x10 > 0 && x8 - 2 * x11 < 2 && x8 - 2 * x11 >= 0

----------------------------------------

(28) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(29)
Obligation:
Rules:
f_1807(x:0, x1:0, x2:0) -> f_1807(x:0, x1:0, 1 + x2:0) :|: x:0 - 2 * x7:0 > -2 && x:0 - 2 * x3:0 = 0 && x:0 - 2 * x7:0 <= 0 && x2:0 > 0 && x:0 < 0 && x:0 - 2 * x7:0 = 0 && x1:0 > 1 && x2:0 < x1:0
f_1807(x, x1, x2) -> f_1807(x, x1, 1 + x2) :|: x - 2 * x3 >= 0 && x - 2 * x4 = 0 && x - 2 * x3 < 2 && x2 > 0 && x > -1 && x - 2 * x3 = 0 && x1 > 1 && x2 < x1

----------------------------------------

(30) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1807 ] = -1*f_1807_3 + f_1807_2

The following rules are decreasing:
f_1807(x:0, x1:0, x2:0) -> f_1807(x:0, x1:0, 1 + x2:0) :|: x:0 - 2 * x7:0 > -2 && x:0 - 2 * x3:0 = 0 && x:0 - 2 * x7:0 <= 0 && x2:0 > 0 && x:0 < 0 && x:0 - 2 * x7:0 = 0 && x1:0 > 1 && x2:0 < x1:0
f_1807(x, x1, x2) -> f_1807(x, x1, 1 + x2) :|: x - 2 * x3 >= 0 && x - 2 * x4 = 0 && x - 2 * x3 < 2 && x2 > 0 && x > -1 && x - 2 * x3 = 0 && x1 > 1 && x2 < x1

The following rules are bounded:
f_1807(x:0, x1:0, x2:0) -> f_1807(x:0, x1:0, 1 + x2:0) :|: x:0 - 2 * x7:0 > -2 && x:0 - 2 * x3:0 = 0 && x:0 - 2 * x7:0 <= 0 && x2:0 > 0 && x:0 < 0 && x:0 - 2 * x7:0 = 0 && x1:0 > 1 && x2:0 < x1:0
f_1807(x, x1, x2) -> f_1807(x, x1, 1 + x2) :|: x - 2 * x3 >= 0 && x - 2 * x4 = 0 && x - 2 * x3 < 2 && x2 > 0 && x > -1 && x - 2 * x3 = 0 && x1 > 1 && x2 < x1


----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
SCC
----------------------------------------

(33) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_1570(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1573(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: TRUE
f_1573(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1576(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: TRUE
f_1576(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1579(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: 0 = 0
f_1579(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1582(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: 0 = 0
f_1582(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1585(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: 0 = 0
f_1585(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1588(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: TRUE
f_1588(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1593(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: TRUE
f_1593(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1598(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: TRUE
f_1598(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1603(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: TRUE
f_1603(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1604(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: TRUE
f_1604(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4832, v4833, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) -> f_1609(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v4832, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) :|: 0 = 0
f_1609(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v4832, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) -> f_1614(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v4832, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) :|: 0 = 0
f_1614(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v4832, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) -> f_1619(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v4832, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) :|: v4833 < v4824 && 3 <= v4824
f_1619(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v4832, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) -> f_1626(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v4832, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) :|: 0 = 0
f_1626(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v4832, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) -> f_1632(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v4832, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) :|: TRUE
f_1632(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v4832, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) -> f_1640(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) :|: 0 = 0
f_1640(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) -> f_1648(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v5044, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) :|: v5044 = 1 + v4833 && 3 <= v5044
f_1648(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v5044, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) -> f_1656(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v5044, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) :|: TRUE
f_1656(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v5044, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) -> f_1664(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v5044, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) :|: 0 = 0
f_1664(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v5044, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) -> f_1672(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v5044, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) :|: 0 = v4823 - v4823 / 2 * 2 && 0 < 2
f_1672(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v5044, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) -> f_1679(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v5044, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) :|: 0 = 0
f_1679(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v5044, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) -> f_1688(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v5044, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) :|: TRUE
f_1688(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v5044, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) -> f_1566(v4823, v4824, v4825, v4826, v4827, v4828, 0, v4830, 1, v4833, v5044, v4834, v4835, v4836, v4837, v4838, v4839, 3, 2, 4) :|: TRUE
f_1566(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1570(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_1570(v4362:0, v4363:0, v4364:0, v4365:0, v4366:0, v4367:0, 0, v4369:0, 1, v4372:0, v4536:0, v4373:0, v4374:0, v4375:0, v4376:0, v4377:0, v4378:0, 3, 2, 4) -> f_1570(v4362:0, v4363:0, v4364:0, v4365:0, v4366:0, v4367:0, 0, v4369:0, 1, v4536:0, 1 + v4536:0, v4373:0, v4374:0, v4375:0, v4376:0, v4377:0, v4378:0, 3, 2, 4) :|: v4363:0 > 2 && v4536:0 < v4363:0 && v4362:0 - v4362:0 / 2 * 2 = 0 && v4536:0 > 1
Filtered unneeded arguments:
   f_1570(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_1570(x1, x2, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_1570(v4362:0, v4363:0, v4536:0) -> f_1570'(v4362:0, v4363:0, v4536:0) :|: v4536:0 < v4363:0 && v4363:0 > 2 && v4536:0 > 1 && v4362:0 - 2 * div = 0
f_1570'(v4362:0, v4363:0, v4536:0) -> f_1570(v4362:0, v4363:0, 1 + v4536:0) :|: v4536:0 < v4363:0 && v4363:0 > 2 && v4362:0 - 2 * div = 0 && v4362:0 < 0 && v4536:0 > 1 && v4362:0 - 2 * div <= 0 && v4362:0 - 2 * div > -2
f_1570'(v4362:0, v4363:0, v4536:0) -> f_1570(v4362:0, v4363:0, 1 + v4536:0) :|: v4536:0 < v4363:0 && v4363:0 > 2 && v4362:0 - 2 * div = 0 && v4362:0 > -1 && v4536:0 > 1 && v4362:0 - 2 * div < 2 && v4362:0 - 2 * div >= 0

----------------------------------------

(34)
Obligation:
Rules:
f_1570(x, x1, x2) -> f_1570'(x, x1, x2) :|: x2 < x1 && x1 > 2 && x2 > 1 && x - 2 * x3 = 0
f_1570'(x4, x5, x6) -> f_1570(x4, x5, 1 + x6) :|: x6 < x5 && x5 > 2 && x4 - 2 * x7 = 0 && x4 < 0 && x6 > 1 && x4 - 2 * x7 <= 0 && x4 - 2 * x7 > -2
f_1570'(x8, x9, x10) -> f_1570(x8, x9, 1 + x10) :|: x10 < x9 && x9 > 2 && x8 - 2 * x11 = 0 && x8 > -1 && x10 > 1 && x8 - 2 * x11 < 2 && x8 - 2 * x11 >= 0

----------------------------------------

(35) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(36)
Obligation:
Rules:
f_1570(x:0, x1:0, x2:0) -> f_1570(x:0, x1:0, 1 + x2:0) :|: x:0 - 2 * x11:0 >= 0 && x:0 - 2 * x3:0 = 0 && x:0 - 2 * x11:0 < 2 && x2:0 > 1 && x:0 > -1 && x:0 - 2 * x11:0 = 0 && x1:0 > 2 && x2:0 < x1:0
f_1570(x, x1, x2) -> f_1570(x, x1, 1 + x2) :|: x - 2 * x3 > -2 && x - 2 * x4 = 0 && x - 2 * x3 <= 0 && x2 > 1 && x < 0 && x - 2 * x3 = 0 && x1 > 2 && x2 < x1

----------------------------------------

(37) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1570 ] = -1*f_1570_3 + f_1570_2

The following rules are decreasing:
f_1570(x:0, x1:0, x2:0) -> f_1570(x:0, x1:0, 1 + x2:0) :|: x:0 - 2 * x11:0 >= 0 && x:0 - 2 * x3:0 = 0 && x:0 - 2 * x11:0 < 2 && x2:0 > 1 && x:0 > -1 && x:0 - 2 * x11:0 = 0 && x1:0 > 2 && x2:0 < x1:0
f_1570(x, x1, x2) -> f_1570(x, x1, 1 + x2) :|: x - 2 * x3 > -2 && x - 2 * x4 = 0 && x - 2 * x3 <= 0 && x2 > 1 && x < 0 && x - 2 * x3 = 0 && x1 > 2 && x2 < x1

The following rules are bounded:
f_1570(x:0, x1:0, x2:0) -> f_1570(x:0, x1:0, 1 + x2:0) :|: x:0 - 2 * x11:0 >= 0 && x:0 - 2 * x3:0 = 0 && x:0 - 2 * x11:0 < 2 && x2:0 > 1 && x:0 > -1 && x:0 - 2 * x11:0 = 0 && x1:0 > 2 && x2:0 < x1:0
f_1570(x, x1, x2) -> f_1570(x, x1, 1 + x2) :|: x - 2 * x3 > -2 && x - 2 * x4 = 0 && x - 2 * x3 <= 0 && x2 > 1 && x < 0 && x - 2 * x3 = 0 && x1 > 2 && x2 < x1


----------------------------------------

(38)
YES

----------------------------------------

(39)
Obligation:
SCC
----------------------------------------

(40) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_1514(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4371, v4373, v4374, v4375, v4376, v4377, v4378, 3, 4) -> f_1519(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4371, v4373, v4374, v4375, v4376, v4377, v4378, 3, 4) :|: 0 = 0
f_1519(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4371, v4373, v4374, v4375, v4376, v4377, v4378, 3, 4) -> f_1524(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4371, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: v4372 < v4363 && 2 <= v4363
f_1524(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4371, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1529(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4371, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: 0 = 0
f_1529(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4371, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1535(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4371, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: TRUE
f_1535(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4371, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1541(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: 0 = 0
f_1541(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1547(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: v4536 = 1 + v4372 && 2 <= v4536
f_1547(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1550(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: TRUE
f_1550(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1553(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: 0 = 0
f_1553(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1556(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4547, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: v4547 = v4362 - v4362 / 2 * 2 && v4547 < 2 && 0 <= v4547
f_1556(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4547, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1558(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: 0 < v4547
f_1558(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1561(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: 0 = 0
f_1561(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1565(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: TRUE
f_1565(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1569(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) :|: TRUE
f_1569(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 2, 4) -> f_1509(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4536, v4373, v4374, v4375, v4376, v4377, v4378, 3, 4) :|: TRUE
f_1509(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4371, v4372, v4373, v4374, v4375, v4376, v4377, v4378, 3, 4) -> f_1514(v4362, v4363, v4364, v4365, v4366, v4367, 0, v4369, 1, v4372, v4371, v4373, v4374, v4375, v4376, v4377, v4378, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_1514(v4362:0, v4363:0, v4364:0, v4365:0, v4366:0, v4367:0, 0, v4369:0, 1, v4372:0, v4371:0, v4373:0, v4374:0, v4375:0, v4376:0, v4377:0, v4378:0, 3, 4) -> f_1514(v4362:0, v4363:0, v4364:0, v4365:0, v4366:0, v4367:0, 0, v4369:0, 1, 1 + v4372:0, v4372:0, v4373:0, v4374:0, v4375:0, v4376:0, v4377:0, v4378:0, 3, 4) :|: v4362:0 - v4362:0 / 2 * 2 > 0 && v4363:0 > 1 && v4372:0 < v4363:0 && v4362:0 - v4362:0 / 2 * 2 < 2 && v4372:0 > 0
Filtered unneeded arguments:
   f_1514(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_1514(x1, x2, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_1514(v4362:0, v4363:0, v4372:0) -> f_1514'(v4362:0, v4363:0, v4372:0) :|: v4363:0 > 1 && v4362:0 - 2 * div > 0 && v4372:0 < v4363:0 && v4372:0 > 0 && v4362:0 - 2 * div1 < 2
f_1514'(v4362:0, v4363:0, v4372:0) -> f_1514(v4362:0, v4363:0, 1 + v4372:0) :|: v4362:0 - 2 * div > 0 && v4363:0 > 1 && v4372:0 < v4363:0 && v4362:0 - 2 * div1 < 2 && v4362:0 > -1 && v4372:0 > 0 && v4362:0 < 0 && v4362:0 - 2 * div < 2 && v4362:0 - 2 * div1 <= 0 && v4362:0 - 2 * div1 > -2
f_1514'(v4362:0, v4363:0, v4372:0) -> f_1514(v4362:0, v4363:0, 1 + v4372:0) :|: v4362:0 - 2 * div > 0 && v4363:0 > 1 && v4372:0 < v4363:0 && v4362:0 - 2 * div1 < 2 && v4362:0 > -1 && v4372:0 > 0 && v4362:0 - 2 * div < 2 && v4362:0 - 2 * div1 >= 0

----------------------------------------

(41)
Obligation:
Rules:
f_1514(x, x1, x2) -> f_1514'(x, x1, x2) :|: x1 > 1 && x - 2 * x3 > 0 && x2 < x1 && x2 > 0 && x - 2 * x4 < 2
f_1514'(x5, x6, x7) -> f_1514(x5, x6, 1 + x7) :|: x5 - 2 * x8 > 0 && x6 > 1 && x7 < x6 && x5 - 2 * x9 < 2 && x5 > -1 && x7 > 0 && x5 < 0 && x5 - 2 * x8 < 2 && x5 - 2 * x9 <= 0 && x5 - 2 * x9 > -2
f_1514'(x10, x11, x12) -> f_1514(x10, x11, 1 + x12) :|: x10 - 2 * x13 > 0 && x11 > 1 && x12 < x11 && x10 - 2 * x14 < 2 && x10 > -1 && x12 > 0 && x10 - 2 * x13 < 2 && x10 - 2 * x14 >= 0

----------------------------------------

(42) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(43)
Obligation:
Rules:
f_1514(x, x1, x2) -> f_1514'(x, x1, x2) :|: x1 > 1 && x - 2 * x3 > 0 && x2 < x1 && x2 > 0 && x - 2 * x4 < 2
f_1514'(x10, x11, x12) -> f_1514(x10, x11, 1 + x12) :|: x10 - 2 * x13 > 0 && x11 > 1 && x12 < x11 && x10 - 2 * x14 < 2 && x10 > -1 && x12 > 0 && x10 - 2 * x13 < 2 && x10 - 2 * x14 >= 0

----------------------------------------

(44) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(45)
Obligation:
Rules:
f_1514(x:0, x1:0, x2:0) -> f_1514(x:0, x1:0, 1 + x2:0) :|: x:0 - 2 * x14:0 >= 0 && x:0 - 2 * x4:0 < 2 && x:0 - 2 * x13:0 < 2 && x2:0 > 0 && x:0 - 2 * x3:0 > 0 && x:0 > -1 && x:0 - 2 * x14:0 < 2 && x2:0 < x1:0 && x1:0 > 1 && x:0 - 2 * x13:0 > 0

----------------------------------------

(46) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1514(x, x1, x2)] = -1 + x1 - x2

The following rules are decreasing:
f_1514(x:0, x1:0, x2:0) -> f_1514(x:0, x1:0, 1 + x2:0) :|: x:0 - 2 * x14:0 >= 0 && x:0 - 2 * x4:0 < 2 && x:0 - 2 * x13:0 < 2 && x2:0 > 0 && x:0 - 2 * x3:0 > 0 && x:0 > -1 && x:0 - 2 * x14:0 < 2 && x2:0 < x1:0 && x1:0 > 1 && x:0 - 2 * x13:0 > 0
The following rules are bounded:
f_1514(x:0, x1:0, x2:0) -> f_1514(x:0, x1:0, 1 + x2:0) :|: x:0 - 2 * x14:0 >= 0 && x:0 - 2 * x4:0 < 2 && x:0 - 2 * x13:0 < 2 && x2:0 > 0 && x:0 - 2 * x3:0 > 0 && x:0 > -1 && x:0 - 2 * x14:0 < 2 && x2:0 < x1:0 && x1:0 > 1 && x:0 - 2 * x13:0 > 0

----------------------------------------

(47)
YES

----------------------------------------

(48)
Obligation:
SCC
----------------------------------------

(49) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 54 rulesP rules:
f_1621(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v4526, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1628(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v4526, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: 0 = 0
f_1628(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v4526, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1634(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v4526, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1634(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v4526, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1642(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v4528, v4529, v4526, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: 0 = 0
f_1642(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v4528, v4529, v4526, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1650(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, v4528, v4529, v4526, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: v5045 = 1 + v4697 && 4 <= v5045
f_1650(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, v4528, v4529, v4526, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1658(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, v4528, v4529, v4526, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1658(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, v4528, v4529, v4526, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1666(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, v4528, v4529, v4526, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: 0 = 0
f_1666(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, v4528, v4529, v4526, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1673(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, 0, v4528, v4529, v4526, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: 0 = v5045 - v5045 / 2 * 2 && 0 < 2
f_1673(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, 0, v4528, v4529, v4526, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1680(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, 0, v4528, v4529, v4526, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: 0 = 0
f_1680(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, 0, v4528, v4529, v4526, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1689(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, 0, v4528, v4529, v4526, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1689(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, 0, v4528, v4529, v4526, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1696(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, 0, v4528, v4529, v4526, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1696(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, 0, v4528, v4529, v4526, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1703(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, 0, v4528, v4529, v4526, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1703(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, 0, v4528, v4529, v4526, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1711(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, 0, v4528, v4529, v4526, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1711(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, 0, v4528, v4529, v4526, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1712(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v5045, 0, v4528, v4529, v4526, v4530, v4531, v4532, v4533, v4534, v4535, 3, 4, 2) :|: TRUE
f_1712(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5679, v5680, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) -> f_1716(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5679, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) :|: 0 = 0
f_1716(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5679, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) -> f_1720(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5679, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) :|: 0 = 0
f_1720(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5679, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) -> f_1724(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5679, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) :|: v5680 < v5670 && 2 <= v5670
f_1724(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5679, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) -> f_1728(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5679, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) :|: 0 = 0
f_1728(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5679, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) -> f_1732(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5679, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) :|: TRUE
f_1732(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5679, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) -> f_1737(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) :|: 0 = 0
f_1737(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) -> f_1741(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5774, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) :|: v5774 = 1 + v5680 && 2 <= v5774
f_1741(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5774, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) -> f_1745(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5774, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) :|: TRUE
f_1745(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5774, v5681, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) -> f_1749(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5774, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) :|: 0 = 0
f_1749(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5774, v5682, v5683, v5684, v5685, v5686, v5687, 3, 4, 2) -> f_1753(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5774, v5803, v5682, v5683, v5684, v5685, v5686, v5687, 3, 2, 4) :|: v5803 = v5677 - v5677 / 2 * 2 && v5803 < 2 && 0 <= v5803
f_1753(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5774, v5803, v5682, v5683, v5684, v5685, v5686, v5687, 3, 2, 4) -> f_1757(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5774, v5682, v5683, v5684, v5685, v5686, v5687, 3, 2, 4) :|: v5803 = 0
f_1757(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5774, v5682, v5683, v5684, v5685, v5686, v5687, 3, 2, 4) -> f_1761(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5774, v5682, v5683, v5684, v5685, v5686, v5687, 3, 2, 4) :|: 0 = 0
f_1761(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5774, v5682, v5683, v5684, v5685, v5686, v5687, 3, 2, 4) -> f_1764(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5774, v5682, v5683, v5684, v5685, v5686, v5687, 3, 2, 4) :|: TRUE
f_1764(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5774, v5682, v5683, v5684, v5685, v5686, v5687, 3, 2, 4) -> f_1546(v5669, v5670, v5671, v5672, v5673, v5674, v5675, 1, v5677, 0, v5680, v5774, v5682, v5683, v5684, v5685, v5686, v5687, 3, 2, 4) :|: TRUE
f_1546(v4518, v4519, v4520, v4521, v4522, v4523, v4524, 1, v4526, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1549(v4518, v4519, v4520, v4521, v4522, v4523, v4524, 1, v4526, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1549(v4518, v4519, v4520, v4521, v4522, v4523, v4524, 1, v4526, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1552(v4518, v4519, v4520, v4521, v4522, v4523, v4524, 1, v4526, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1552(v4518, v4519, v4520, v4521, v4522, v4523, v4524, 1, v4526, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1555(v4518, v4519, v4520, v4521, v4522, v4523, v4524, 1, v4526, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1555(v4518, v4519, v4520, v4521, v4522, v4523, v4524, 1, v4526, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1557(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4524, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: 0 = 0
f_1557(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4524, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1560(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4524, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: 0 = 0
f_1560(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4524, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1563(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4524, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: v4526 < v4518 && 3 <= v4518
f_1563(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4524, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1567(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4524, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: 0 = 0
f_1567(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4524, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1571(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4524, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1571(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4524, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1574(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: 0 = 0
f_1574(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1577(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: v4697 = 1 + v4526 && 3 <= v4697
f_1577(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1580(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1580(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1583(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: 0 = 0
f_1583(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1586(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, v4714, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: v4714 = v4697 - v4697 / 2 * 2 && v4714 < 2 && 0 <= v4714
f_1586(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, v4714, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1589(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: 0 < v4714
f_1586(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, v4714, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1590(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: v4714 = 0 && 4 <= v4697 && 3 <= v4526 && 4 <= v4518
f_1589(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1594(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: 0 = 0
f_1594(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1599(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1599(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1605(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1605(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1610(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v4526, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: 0 = 0
f_1610(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v4526, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1615(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v4526, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: 0 = 0
f_1615(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v4526, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1621(v4518, v4519, v4520, v4521, v4522, v4523, v4697, 1, v4526, v4528, v4529, 0, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: v4697 < v4518 && 4 <= v4518
f_1590(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1595(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: 0 = 0
f_1595(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1600(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1600(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1606(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1606(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1611(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1611(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1616(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) :|: TRUE
f_1616(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4530, v4531, v4532, v4533, v4534, v4535, 3, 2, 4) -> f_1712(v4518, v4519, v4520, v4521, v4522, v4523, v4526, 1, v4697, 0, v4528, v4529, v4526, v4530, v4531, v4532, v4533, v4534, v4535, 3, 4, 2) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_1586(v4518:0, v4519:0, v4520:0, v4521:0, v4522:0, v4523:0, v4526:0, 1, v4697:0, v4714:0, 0, v4528:0, v4529:0, v4530:0, v4531:0, v4532:0, v4533:0, v4534:0, v4535:0, 3, 2, 4) -> f_1586(v4518:0, v4519:0, v4520:0, v4521:0, v4522:0, v4523:0, 1 + v4697:0, 1, 1 + (1 + v4697:0), 1 + (1 + v4697:0) - (1 + (1 + v4697:0)) / 2 * 2, 0, v4529:0, 1 + v4529:0, v4530:0, v4531:0, v4532:0, v4533:0, v4534:0, v4535:0, 3, 2, 4) :|: v4697:0 > 2 && v4518:0 > 1 + v4697:0 && v4518:0 > 3 && 1 + v4697:0 - (1 + v4697:0) / 2 * 2 = 0 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4714:0 > 0 && 1 + (1 + v4697:0) - (1 + (1 + v4697:0)) / 2 * 2 > -1 && 2 > 1 + (1 + v4697:0) - (1 + (1 + v4697:0)) / 2 * 2
f_1586(v4518:0, v4519:0, v4520:0, v4521:0, v4522:0, v4523:0, v4526:0, 1, v4697:0, 0, 0, v4528:0, v4529:0, v4530:0, v4531:0, v4532:0, v4533:0, v4534:0, v4535:0, 3, 2, 4) -> f_1586(v4518:0, v4519:0, v4520:0, v4521:0, v4522:0, v4523:0, v4697:0, 1, 1 + v4697:0, 1 + v4697:0 - (1 + v4697:0) / 2 * 2, 0, v4529:0, 1 + v4529:0, v4530:0, v4531:0, v4532:0, v4533:0, v4534:0, v4535:0, 3, 2, 4) :|: v4697:0 > 3 && v4518:0 > 3 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4697:0 - v4697:0 / 2 * 2 = 0 && v4697:0 < v4518:0 && v4526:0 > 2 && 1 + v4697:0 - (1 + v4697:0) / 2 * 2 > -1 && 2 > 1 + v4697:0 - (1 + v4697:0) / 2 * 2
Filtered unneeded arguments:
   f_1586(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_1586(x1, x2, x7, x9, x10, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 20 rules.P rules:
f_1586(v4518:0, v4519:0, v4526:0, v4697:0, v4714:0, v4529:0) -> f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, v4714:0, v4529:0) :|: v4518:0 > 1 + v4697:0 && v4697:0 > 2 && v4518:0 > 3 && 1 + v4697:0 - 2 * div = 0 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4714:0 > 0 && 2 > 1 + (1 + v4697:0) - 2 * div2 && 1 + (1 + v4697:0) - 2 * div1 > -1
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, v4714:0, v4529:0) -> f_1586(v4518:0, v4519:0, 1 + v4697:0, 1 + (1 + v4697:0), 1 + (1 + v4697:0) - 2 * div3, 1 + v4529:0) :|: 1 + (1 + v4697:0) - 2 * div1 > -1 && v4518:0 > 1 + v4697:0 && v4697:0 > 2 && v4518:0 > 3 && 1 + v4697:0 - 2 * div = 0 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4714:0 > 0 && 2 > 1 + (1 + v4697:0) - 2 * div2 && v4697:0 < -1 && 1 + v4697:0 - 2 * div > -2 && v4697:0 < -2 && 1 + v4697:0 - 2 * div <= 0 && 1 + (1 + v4697:0) - 2 * div1 <= 0 && 1 + (1 + v4697:0) - 2 * div2 > -2 && 1 + (1 + v4697:0) - 2 * div2 <= 0 && 1 + (1 + v4697:0) - 2 * div3 <= 0 && 1 + (1 + v4697:0) - 2 * div3 > -2
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, v4714:0, v4529:0) -> f_1586(v4518:0, v4519:0, 1 + v4697:0, 1 + (1 + v4697:0), 1 + (1 + v4697:0) - 2 * div3, 1 + v4529:0) :|: v4697:0 > 2 && 1 + (1 + v4697:0) - 2 * div1 > -1 && v4518:0 > 1 + v4697:0 && v4518:0 > 3 && 1 + v4697:0 - 2 * div = 0 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4714:0 > 0 && 2 > 1 + (1 + v4697:0) - 2 * div2 && v4697:0 < -1 && 1 + v4697:0 - 2 * div > -2 && v4697:0 < -2 && 1 + v4697:0 - 2 * div <= 0 && 1 + (1 + v4697:0) - 2 * div1 <= 0 && 1 + (1 + v4697:0) - 2 * div2 > -2 && 1 + (1 + v4697:0) - 2 * div2 <= 0 && 2 > 1 + (1 + v4697:0) - 2 * div3 && 1 + (1 + v4697:0) - 2 * div3 >= 0
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, v4714:0, v4529:0) -> f_1586(v4518:0, v4519:0, 1 + v4697:0, 1 + (1 + v4697:0), 1 + (1 + v4697:0) - 2 * div3, 1 + v4529:0) :|: v4697:0 > 2 && 1 + (1 + v4697:0) - 2 * div1 > -1 && v4518:0 > 1 + v4697:0 && v4518:0 > 3 && 1 + v4697:0 - 2 * div = 0 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4714:0 > 0 && 2 > 1 + (1 + v4697:0) - 2 * div2 && v4697:0 < -1 && 1 + v4697:0 - 2 * div > -2 && v4697:0 < -2 && 1 + v4697:0 - 2 * div <= 0 && 1 + (1 + v4697:0) - 2 * div1 <= 0 && 1 + (1 + v4697:0) - 2 * div2 >= 0 && 1 + (1 + v4697:0) - 2 * div3 <= 0 && 1 + (1 + v4697:0) - 2 * div3 > -2
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, v4714:0, v4529:0) -> f_1586(v4518:0, v4519:0, 1 + v4697:0, 1 + (1 + v4697:0), 1 + (1 + v4697:0) - 2 * div3, 1 + v4529:0) :|: v4697:0 > 2 && 1 + (1 + v4697:0) - 2 * div1 >= 0 && v4518:0 > 1 + v4697:0 && v4518:0 > 3 && 1 + v4697:0 - 2 * div = 0 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4714:0 > 0 && 2 > 1 + (1 + v4697:0) - 2 * div2 && v4697:0 < -1 && 1 + v4697:0 - 2 * div > -2 && 1 + v4697:0 - 2 * div <= 0 && v4697:0 < -2 && 2 > 1 + (1 + v4697:0) - 2 * div1 && 1 + (1 + v4697:0) - 2 * div2 > -2 && 1 + (1 + v4697:0) - 2 * div2 <= 0 && 1 + (1 + v4697:0) - 2 * div3 <= 0 && 1 + (1 + v4697:0) - 2 * div3 > -2
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, v4714:0, v4529:0) -> f_1586(v4518:0, v4519:0, 1 + v4697:0, 1 + (1 + v4697:0), 1 + (1 + v4697:0) - 2 * div3, 1 + v4529:0) :|: v4697:0 > 2 && 1 + (1 + v4697:0) - 2 * div1 > -1 && v4518:0 > 1 + v4697:0 && v4518:0 > 3 && 1 + v4697:0 - 2 * div = 0 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4714:0 > 0 && 2 > 1 + (1 + v4697:0) - 2 * div2 && v4697:0 < -1 && 1 + v4697:0 - 2 * div > -2 && v4697:0 < -2 && 1 + v4697:0 - 2 * div <= 0 && 1 + (1 + v4697:0) - 2 * div1 <= 0 && 1 + (1 + v4697:0) - 2 * div2 >= 0 && 2 > 1 + (1 + v4697:0) - 2 * div3 && 1 + (1 + v4697:0) - 2 * div3 >= 0
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, v4714:0, v4529:0) -> f_1586(v4518:0, v4519:0, 1 + v4697:0, 1 + (1 + v4697:0), 1 + (1 + v4697:0) - 2 * div3, 1 + v4529:0) :|: v4697:0 > 2 && 1 + (1 + v4697:0) - 2 * div1 >= 0 && v4518:0 > 1 + v4697:0 && v4518:0 > 3 && 1 + v4697:0 - 2 * div = 0 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4714:0 > 0 && 2 > 1 + (1 + v4697:0) - 2 * div2 && v4697:0 < -1 && 1 + v4697:0 - 2 * div > -2 && 1 + v4697:0 - 2 * div <= 0 && v4697:0 < -2 && 2 > 1 + (1 + v4697:0) - 2 * div1 && 1 + (1 + v4697:0) - 2 * div2 > -2 && 1 + (1 + v4697:0) - 2 * div2 <= 0 && 2 > 1 + (1 + v4697:0) - 2 * div3 && 1 + (1 + v4697:0) - 2 * div3 >= 0
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, v4714:0, v4529:0) -> f_1586(v4518:0, v4519:0, 1 + v4697:0, 1 + (1 + v4697:0), 1 + (1 + v4697:0) - 2 * div3, 1 + v4529:0) :|: v4697:0 > 2 && 1 + (1 + v4697:0) - 2 * div1 >= 0 && v4518:0 > 1 + v4697:0 && v4518:0 > 3 && 1 + v4697:0 - 2 * div = 0 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4714:0 > 0 && 2 > 1 + (1 + v4697:0) - 2 * div2 && v4697:0 < -1 && 1 + v4697:0 - 2 * div > -2 && 1 + v4697:0 - 2 * div <= 0 && 2 > 1 + (1 + v4697:0) - 2 * div1 && 1 + (1 + v4697:0) - 2 * div2 >= 0 && v4697:0 < -2 && 1 + (1 + v4697:0) - 2 * div3 <= 0 && 1 + (1 + v4697:0) - 2 * div3 > -2
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, v4714:0, v4529:0) -> f_1586(v4518:0, v4519:0, 1 + v4697:0, 1 + (1 + v4697:0), 1 + (1 + v4697:0) - 2 * div3, 1 + v4529:0) :|: v4697:0 > 2 && 1 + (1 + v4697:0) - 2 * div1 >= 0 && v4518:0 > 1 + v4697:0 && v4518:0 > 3 && 1 + v4697:0 - 2 * div = 0 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4714:0 > 0 && 2 > 1 + (1 + v4697:0) - 2 * div2 && v4697:0 < -1 && 1 + v4697:0 - 2 * div > -2 && 1 + v4697:0 - 2 * div <= 0 && 2 > 1 + (1 + v4697:0) - 2 * div1 && 1 + (1 + v4697:0) - 2 * div2 >= 0 && 2 > 1 + (1 + v4697:0) - 2 * div3 && 1 + (1 + v4697:0) - 2 * div3 >= 0
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, v4714:0, v4529:0) -> f_1586(v4518:0, v4519:0, 1 + v4697:0, 1 + (1 + v4697:0), 1 + (1 + v4697:0) - 2 * div3, 1 + v4529:0) :|: v4697:0 > 2 && 1 + (1 + v4697:0) - 2 * div1 >= 0 && v4518:0 > 1 + v4697:0 && v4518:0 > 3 && 1 + v4697:0 - 2 * div = 0 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4714:0 > 0 && 2 > 1 + (1 + v4697:0) - 2 * div2 && 1 + v4697:0 - 2 * div >= 0 && 2 > 1 + v4697:0 - 2 * div && 2 > 1 + (1 + v4697:0) - 2 * div1 && 1 + (1 + v4697:0) - 2 * div2 >= 0 && 2 > 1 + (1 + v4697:0) - 2 * div3 && 1 + (1 + v4697:0) - 2 * div3 >= 0
f_1586(v4518:0, v4519:0, v4526:0, v4697:0, cons_0, v4529:0) -> f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, 0, v4529:0) :|: v4518:0 > 3 && v4697:0 > 3 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4697:0 - 2 * div = 0 && v4697:0 < v4518:0 && v4526:0 > 2 && 2 > 1 + v4697:0 - 2 * div2 && 1 + v4697:0 - 2 * div1 > -1 && cons_0 = 0
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, cons_0, v4529:0) -> f_1586(v4518:0, v4519:0, v4697:0, 1 + v4697:0, 1 + v4697:0 - 2 * div3, 1 + v4529:0) :|: 1 + v4697:0 - 2 * div1 > -1 && v4518:0 > 3 && v4697:0 > 3 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4697:0 - 2 * div = 0 && v4697:0 < v4518:0 && v4526:0 > 2 && 2 > 1 + v4697:0 - 2 * div2 && v4697:0 < 0 && v4697:0 - 2 * div > -2 && v4697:0 < -1 && v4697:0 - 2 * div <= 0 && 1 + v4697:0 - 2 * div1 <= 0 && 1 + v4697:0 - 2 * div2 > -2 && 1 + v4697:0 - 2 * div2 <= 0 && 1 + v4697:0 - 2 * div3 <= 0 && 1 + v4697:0 - 2 * div3 > -2 && cons_0 = 0
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, cons_0, v4529:0) -> f_1586(v4518:0, v4519:0, v4697:0, 1 + v4697:0, 1 + v4697:0 - 2 * div3, 1 + v4529:0) :|: v4697:0 > 3 && 1 + v4697:0 - 2 * div1 > -1 && v4518:0 > 3 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4697:0 - 2 * div = 0 && v4697:0 < v4518:0 && v4526:0 > 2 && 2 > 1 + v4697:0 - 2 * div2 && v4697:0 < 0 && v4697:0 - 2 * div > -2 && v4697:0 < -1 && v4697:0 - 2 * div <= 0 && 1 + v4697:0 - 2 * div1 <= 0 && 1 + v4697:0 - 2 * div2 > -2 && 1 + v4697:0 - 2 * div2 <= 0 && 2 > 1 + v4697:0 - 2 * div3 && 1 + v4697:0 - 2 * div3 >= 0 && cons_0 = 0
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, cons_0, v4529:0) -> f_1586(v4518:0, v4519:0, v4697:0, 1 + v4697:0, 1 + v4697:0 - 2 * div3, 1 + v4529:0) :|: v4697:0 > 3 && 1 + v4697:0 - 2 * div1 > -1 && v4518:0 > 3 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4697:0 - 2 * div = 0 && v4697:0 < v4518:0 && v4526:0 > 2 && 2 > 1 + v4697:0 - 2 * div2 && v4697:0 < 0 && v4697:0 - 2 * div > -2 && v4697:0 < -1 && v4697:0 - 2 * div <= 0 && 1 + v4697:0 - 2 * div1 <= 0 && 1 + v4697:0 - 2 * div2 >= 0 && 1 + v4697:0 - 2 * div3 <= 0 && 1 + v4697:0 - 2 * div3 > -2 && cons_0 = 0
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, cons_0, v4529:0) -> f_1586(v4518:0, v4519:0, v4697:0, 1 + v4697:0, 1 + v4697:0 - 2 * div3, 1 + v4529:0) :|: v4697:0 > 3 && 1 + v4697:0 - 2 * div1 >= 0 && v4518:0 > 3 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4697:0 - 2 * div = 0 && v4697:0 < v4518:0 && v4526:0 > 2 && 2 > 1 + v4697:0 - 2 * div2 && v4697:0 < 0 && v4697:0 - 2 * div > -2 && v4697:0 - 2 * div <= 0 && v4697:0 < -1 && 2 > 1 + v4697:0 - 2 * div1 && 1 + v4697:0 - 2 * div2 > -2 && 1 + v4697:0 - 2 * div2 <= 0 && 1 + v4697:0 - 2 * div3 <= 0 && 1 + v4697:0 - 2 * div3 > -2 && cons_0 = 0
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, cons_0, v4529:0) -> f_1586(v4518:0, v4519:0, v4697:0, 1 + v4697:0, 1 + v4697:0 - 2 * div3, 1 + v4529:0) :|: v4697:0 > 3 && 1 + v4697:0 - 2 * div1 > -1 && v4518:0 > 3 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4697:0 - 2 * div = 0 && v4697:0 < v4518:0 && v4526:0 > 2 && 2 > 1 + v4697:0 - 2 * div2 && v4697:0 < 0 && v4697:0 - 2 * div > -2 && v4697:0 < -1 && v4697:0 - 2 * div <= 0 && 1 + v4697:0 - 2 * div1 <= 0 && 1 + v4697:0 - 2 * div2 >= 0 && 2 > 1 + v4697:0 - 2 * div3 && 1 + v4697:0 - 2 * div3 >= 0 && cons_0 = 0
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, cons_0, v4529:0) -> f_1586(v4518:0, v4519:0, v4697:0, 1 + v4697:0, 1 + v4697:0 - 2 * div3, 1 + v4529:0) :|: v4697:0 > 3 && 1 + v4697:0 - 2 * div1 >= 0 && v4518:0 > 3 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4697:0 - 2 * div = 0 && v4697:0 < v4518:0 && v4526:0 > 2 && 2 > 1 + v4697:0 - 2 * div2 && v4697:0 < 0 && v4697:0 - 2 * div > -2 && v4697:0 - 2 * div <= 0 && v4697:0 < -1 && 2 > 1 + v4697:0 - 2 * div1 && 1 + v4697:0 - 2 * div2 > -2 && 1 + v4697:0 - 2 * div2 <= 0 && 2 > 1 + v4697:0 - 2 * div3 && 1 + v4697:0 - 2 * div3 >= 0 && cons_0 = 0
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, cons_0, v4529:0) -> f_1586(v4518:0, v4519:0, v4697:0, 1 + v4697:0, 1 + v4697:0 - 2 * div3, 1 + v4529:0) :|: v4697:0 > 3 && 1 + v4697:0 - 2 * div1 >= 0 && v4518:0 > 3 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4697:0 - 2 * div = 0 && v4697:0 < v4518:0 && v4526:0 > 2 && 2 > 1 + v4697:0 - 2 * div2 && v4697:0 < 0 && v4697:0 - 2 * div > -2 && v4697:0 - 2 * div <= 0 && 2 > 1 + v4697:0 - 2 * div1 && 1 + v4697:0 - 2 * div2 >= 0 && v4697:0 < -1 && 1 + v4697:0 - 2 * div3 <= 0 && 1 + v4697:0 - 2 * div3 > -2 && cons_0 = 0
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, cons_0, v4529:0) -> f_1586(v4518:0, v4519:0, v4697:0, 1 + v4697:0, 1 + v4697:0 - 2 * div3, 1 + v4529:0) :|: v4697:0 > 3 && 1 + v4697:0 - 2 * div1 >= 0 && v4518:0 > 3 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4697:0 - 2 * div = 0 && v4697:0 < v4518:0 && v4526:0 > 2 && 2 > 1 + v4697:0 - 2 * div2 && v4697:0 < 0 && v4697:0 - 2 * div > -2 && v4697:0 - 2 * div <= 0 && 2 > 1 + v4697:0 - 2 * div1 && 1 + v4697:0 - 2 * div2 >= 0 && 2 > 1 + v4697:0 - 2 * div3 && 1 + v4697:0 - 2 * div3 >= 0 && cons_0 = 0
f_1586'(v4518:0, v4519:0, v4526:0, v4697:0, cons_0, v4529:0) -> f_1586(v4518:0, v4519:0, v4697:0, 1 + v4697:0, 1 + v4697:0 - 2 * div3, 1 + v4529:0) :|: v4697:0 > 3 && 1 + v4697:0 - 2 * div1 >= 0 && v4518:0 > 3 && v4519:0 > 1 && v4529:0 < v4519:0 && v4529:0 > 0 && v4697:0 - 2 * div = 0 && v4697:0 < v4518:0 && v4526:0 > 2 && 2 > 1 + v4697:0 - 2 * div2 && v4697:0 - 2 * div >= 0 && v4697:0 - 2 * div < 2 && 2 > 1 + v4697:0 - 2 * div1 && 1 + v4697:0 - 2 * div2 >= 0 && 2 > 1 + v4697:0 - 2 * div3 && 1 + v4697:0 - 2 * div3 >= 0 && cons_0 = 0

----------------------------------------

(50)
Obligation:
Rules:
f_1586(x, x1, x2, x3, x4, x5) -> f_1586'(x, x1, x2, x3, x4, x5) :|: x > 1 + x3 && x3 > 2 && x > 3 && 1 + x3 - 2 * x6 = 0 && x1 > 1 && x5 < x1 && x5 > 0 && x4 > 0 && 2 > 1 + (1 + x3) - 2 * x7 && 1 + (1 + x3) - 2 * x8 > -1
f_1586'(x9, x10, x11, x12, x13, x14) -> f_1586(x9, x10, 1 + x12, 1 + (1 + x12), 1 + (1 + x12) - 2 * x15, 1 + x14) :|: 1 + (1 + x12) - 2 * x16 > -1 && x9 > 1 + x12 && x12 > 2 && x9 > 3 && 1 + x12 - 2 * x17 = 0 && x10 > 1 && x14 < x10 && x14 > 0 && x13 > 0 && 2 > 1 + (1 + x12) - 2 * x18 && x12 < -1 && 1 + x12 - 2 * x17 > -2 && x12 < -2 && 1 + x12 - 2 * x17 <= 0 && 1 + (1 + x12) - 2 * x16 <= 0 && 1 + (1 + x12) - 2 * x18 > -2 && 1 + (1 + x12) - 2 * x18 <= 0 && 1 + (1 + x12) - 2 * x15 <= 0 && 1 + (1 + x12) - 2 * x15 > -2
f_1586'(x19, x20, x21, x22, x23, x24) -> f_1586(x19, x20, 1 + x22, 1 + (1 + x22), 1 + (1 + x22) - 2 * x25, 1 + x24) :|: x22 > 2 && 1 + (1 + x22) - 2 * x26 > -1 && x19 > 1 + x22 && x19 > 3 && 1 + x22 - 2 * x27 = 0 && x20 > 1 && x24 < x20 && x24 > 0 && x23 > 0 && 2 > 1 + (1 + x22) - 2 * x28 && x22 < -1 && 1 + x22 - 2 * x27 > -2 && x22 < -2 && 1 + x22 - 2 * x27 <= 0 && 1 + (1 + x22) - 2 * x26 <= 0 && 1 + (1 + x22) - 2 * x28 > -2 && 1 + (1 + x22) - 2 * x28 <= 0 && 2 > 1 + (1 + x22) - 2 * x25 && 1 + (1 + x22) - 2 * x25 >= 0
f_1586'(x29, x30, x31, x32, x33, x34) -> f_1586(x29, x30, 1 + x32, 1 + (1 + x32), 1 + (1 + x32) - 2 * x35, 1 + x34) :|: x32 > 2 && 1 + (1 + x32) - 2 * x36 > -1 && x29 > 1 + x32 && x29 > 3 && 1 + x32 - 2 * x37 = 0 && x30 > 1 && x34 < x30 && x34 > 0 && x33 > 0 && 2 > 1 + (1 + x32) - 2 * x38 && x32 < -1 && 1 + x32 - 2 * x37 > -2 && x32 < -2 && 1 + x32 - 2 * x37 <= 0 && 1 + (1 + x32) - 2 * x36 <= 0 && 1 + (1 + x32) - 2 * x38 >= 0 && 1 + (1 + x32) - 2 * x35 <= 0 && 1 + (1 + x32) - 2 * x35 > -2
f_1586'(x39, x40, x41, x42, x43, x44) -> f_1586(x39, x40, 1 + x42, 1 + (1 + x42), 1 + (1 + x42) - 2 * x45, 1 + x44) :|: x42 > 2 && 1 + (1 + x42) - 2 * x46 >= 0 && x39 > 1 + x42 && x39 > 3 && 1 + x42 - 2 * x47 = 0 && x40 > 1 && x44 < x40 && x44 > 0 && x43 > 0 && 2 > 1 + (1 + x42) - 2 * x48 && x42 < -1 && 1 + x42 - 2 * x47 > -2 && 1 + x42 - 2 * x47 <= 0 && x42 < -2 && 2 > 1 + (1 + x42) - 2 * x46 && 1 + (1 + x42) - 2 * x48 > -2 && 1 + (1 + x42) - 2 * x48 <= 0 && 1 + (1 + x42) - 2 * x45 <= 0 && 1 + (1 + x42) - 2 * x45 > -2
f_1586'(x49, x50, x51, x52, x53, x54) -> f_1586(x49, x50, 1 + x52, 1 + (1 + x52), 1 + (1 + x52) - 2 * x55, 1 + x54) :|: x52 > 2 && 1 + (1 + x52) - 2 * x56 > -1 && x49 > 1 + x52 && x49 > 3 && 1 + x52 - 2 * x57 = 0 && x50 > 1 && x54 < x50 && x54 > 0 && x53 > 0 && 2 > 1 + (1 + x52) - 2 * x58 && x52 < -1 && 1 + x52 - 2 * x57 > -2 && x52 < -2 && 1 + x52 - 2 * x57 <= 0 && 1 + (1 + x52) - 2 * x56 <= 0 && 1 + (1 + x52) - 2 * x58 >= 0 && 2 > 1 + (1 + x52) - 2 * x55 && 1 + (1 + x52) - 2 * x55 >= 0
f_1586'(x59, x60, x61, x62, x63, x64) -> f_1586(x59, x60, 1 + x62, 1 + (1 + x62), 1 + (1 + x62) - 2 * x65, 1 + x64) :|: x62 > 2 && 1 + (1 + x62) - 2 * x66 >= 0 && x59 > 1 + x62 && x59 > 3 && 1 + x62 - 2 * x67 = 0 && x60 > 1 && x64 < x60 && x64 > 0 && x63 > 0 && 2 > 1 + (1 + x62) - 2 * x68 && x62 < -1 && 1 + x62 - 2 * x67 > -2 && 1 + x62 - 2 * x67 <= 0 && x62 < -2 && 2 > 1 + (1 + x62) - 2 * x66 && 1 + (1 + x62) - 2 * x68 > -2 && 1 + (1 + x62) - 2 * x68 <= 0 && 2 > 1 + (1 + x62) - 2 * x65 && 1 + (1 + x62) - 2 * x65 >= 0
f_1586'(x69, x70, x71, x72, x73, x74) -> f_1586(x69, x70, 1 + x72, 1 + (1 + x72), 1 + (1 + x72) - 2 * x75, 1 + x74) :|: x72 > 2 && 1 + (1 + x72) - 2 * x76 >= 0 && x69 > 1 + x72 && x69 > 3 && 1 + x72 - 2 * x77 = 0 && x70 > 1 && x74 < x70 && x74 > 0 && x73 > 0 && 2 > 1 + (1 + x72) - 2 * x78 && x72 < -1 && 1 + x72 - 2 * x77 > -2 && 1 + x72 - 2 * x77 <= 0 && 2 > 1 + (1 + x72) - 2 * x76 && 1 + (1 + x72) - 2 * x78 >= 0 && x72 < -2 && 1 + (1 + x72) - 2 * x75 <= 0 && 1 + (1 + x72) - 2 * x75 > -2
f_1586'(x79, x80, x81, x82, x83, x84) -> f_1586(x79, x80, 1 + x82, 1 + (1 + x82), 1 + (1 + x82) - 2 * x85, 1 + x84) :|: x82 > 2 && 1 + (1 + x82) - 2 * x86 >= 0 && x79 > 1 + x82 && x79 > 3 && 1 + x82 - 2 * x87 = 0 && x80 > 1 && x84 < x80 && x84 > 0 && x83 > 0 && 2 > 1 + (1 + x82) - 2 * x88 && x82 < -1 && 1 + x82 - 2 * x87 > -2 && 1 + x82 - 2 * x87 <= 0 && 2 > 1 + (1 + x82) - 2 * x86 && 1 + (1 + x82) - 2 * x88 >= 0 && 2 > 1 + (1 + x82) - 2 * x85 && 1 + (1 + x82) - 2 * x85 >= 0
f_1586'(x89, x90, x91, x92, x93, x94) -> f_1586(x89, x90, 1 + x92, 1 + (1 + x92), 1 + (1 + x92) - 2 * x95, 1 + x94) :|: x92 > 2 && 1 + (1 + x92) - 2 * x96 >= 0 && x89 > 1 + x92 && x89 > 3 && 1 + x92 - 2 * x97 = 0 && x90 > 1 && x94 < x90 && x94 > 0 && x93 > 0 && 2 > 1 + (1 + x92) - 2 * x98 && 1 + x92 - 2 * x97 >= 0 && 2 > 1 + x92 - 2 * x97 && 2 > 1 + (1 + x92) - 2 * x96 && 1 + (1 + x92) - 2 * x98 >= 0 && 2 > 1 + (1 + x92) - 2 * x95 && 1 + (1 + x92) - 2 * x95 >= 0
f_1586(x99, x100, x101, x102, x103, x104) -> f_1586'(x99, x100, x101, x102, 0, x104) :|: x99 > 3 && x102 > 3 && x100 > 1 && x104 < x100 && x104 > 0 && x102 - 2 * x105 = 0 && x102 < x99 && x101 > 2 && 2 > 1 + x102 - 2 * x106 && 1 + x102 - 2 * x107 > -1 && x103 = 0
f_1586'(x108, x109, x110, x111, x112, x113) -> f_1586(x108, x109, x111, 1 + x111, 1 + x111 - 2 * x114, 1 + x113) :|: 1 + x111 - 2 * x115 > -1 && x108 > 3 && x111 > 3 && x109 > 1 && x113 < x109 && x113 > 0 && x111 - 2 * x116 = 0 && x111 < x108 && x110 > 2 && 2 > 1 + x111 - 2 * x117 && x111 < 0 && x111 - 2 * x116 > -2 && x111 < -1 && x111 - 2 * x116 <= 0 && 1 + x111 - 2 * x115 <= 0 && 1 + x111 - 2 * x117 > -2 && 1 + x111 - 2 * x117 <= 0 && 1 + x111 - 2 * x114 <= 0 && 1 + x111 - 2 * x114 > -2 && x112 = 0
f_1586'(x118, x119, x120, x121, x122, x123) -> f_1586(x118, x119, x121, 1 + x121, 1 + x121 - 2 * x124, 1 + x123) :|: x121 > 3 && 1 + x121 - 2 * x125 > -1 && x118 > 3 && x119 > 1 && x123 < x119 && x123 > 0 && x121 - 2 * x126 = 0 && x121 < x118 && x120 > 2 && 2 > 1 + x121 - 2 * x127 && x121 < 0 && x121 - 2 * x126 > -2 && x121 < -1 && x121 - 2 * x126 <= 0 && 1 + x121 - 2 * x125 <= 0 && 1 + x121 - 2 * x127 > -2 && 1 + x121 - 2 * x127 <= 0 && 2 > 1 + x121 - 2 * x124 && 1 + x121 - 2 * x124 >= 0 && x122 = 0
f_1586'(x128, x129, x130, x131, x132, x133) -> f_1586(x128, x129, x131, 1 + x131, 1 + x131 - 2 * x134, 1 + x133) :|: x131 > 3 && 1 + x131 - 2 * x135 > -1 && x128 > 3 && x129 > 1 && x133 < x129 && x133 > 0 && x131 - 2 * x136 = 0 && x131 < x128 && x130 > 2 && 2 > 1 + x131 - 2 * x137 && x131 < 0 && x131 - 2 * x136 > -2 && x131 < -1 && x131 - 2 * x136 <= 0 && 1 + x131 - 2 * x135 <= 0 && 1 + x131 - 2 * x137 >= 0 && 1 + x131 - 2 * x134 <= 0 && 1 + x131 - 2 * x134 > -2 && x132 = 0
f_1586'(x138, x139, x140, x141, x142, x143) -> f_1586(x138, x139, x141, 1 + x141, 1 + x141 - 2 * x144, 1 + x143) :|: x141 > 3 && 1 + x141 - 2 * x145 >= 0 && x138 > 3 && x139 > 1 && x143 < x139 && x143 > 0 && x141 - 2 * x146 = 0 && x141 < x138 && x140 > 2 && 2 > 1 + x141 - 2 * x147 && x141 < 0 && x141 - 2 * x146 > -2 && x141 - 2 * x146 <= 0 && x141 < -1 && 2 > 1 + x141 - 2 * x145 && 1 + x141 - 2 * x147 > -2 && 1 + x141 - 2 * x147 <= 0 && 1 + x141 - 2 * x144 <= 0 && 1 + x141 - 2 * x144 > -2 && x142 = 0
f_1586'(x148, x149, x150, x151, x152, x153) -> f_1586(x148, x149, x151, 1 + x151, 1 + x151 - 2 * x154, 1 + x153) :|: x151 > 3 && 1 + x151 - 2 * x155 > -1 && x148 > 3 && x149 > 1 && x153 < x149 && x153 > 0 && x151 - 2 * x156 = 0 && x151 < x148 && x150 > 2 && 2 > 1 + x151 - 2 * x157 && x151 < 0 && x151 - 2 * x156 > -2 && x151 < -1 && x151 - 2 * x156 <= 0 && 1 + x151 - 2 * x155 <= 0 && 1 + x151 - 2 * x157 >= 0 && 2 > 1 + x151 - 2 * x154 && 1 + x151 - 2 * x154 >= 0 && x152 = 0
f_1586'(x158, x159, x160, x161, x162, x163) -> f_1586(x158, x159, x161, 1 + x161, 1 + x161 - 2 * x164, 1 + x163) :|: x161 > 3 && 1 + x161 - 2 * x165 >= 0 && x158 > 3 && x159 > 1 && x163 < x159 && x163 > 0 && x161 - 2 * x166 = 0 && x161 < x158 && x160 > 2 && 2 > 1 + x161 - 2 * x167 && x161 < 0 && x161 - 2 * x166 > -2 && x161 - 2 * x166 <= 0 && x161 < -1 && 2 > 1 + x161 - 2 * x165 && 1 + x161 - 2 * x167 > -2 && 1 + x161 - 2 * x167 <= 0 && 2 > 1 + x161 - 2 * x164 && 1 + x161 - 2 * x164 >= 0 && x162 = 0
f_1586'(x168, x169, x170, x171, x172, x173) -> f_1586(x168, x169, x171, 1 + x171, 1 + x171 - 2 * x174, 1 + x173) :|: x171 > 3 && 1 + x171 - 2 * x175 >= 0 && x168 > 3 && x169 > 1 && x173 < x169 && x173 > 0 && x171 - 2 * x176 = 0 && x171 < x168 && x170 > 2 && 2 > 1 + x171 - 2 * x177 && x171 < 0 && x171 - 2 * x176 > -2 && x171 - 2 * x176 <= 0 && 2 > 1 + x171 - 2 * x175 && 1 + x171 - 2 * x177 >= 0 && x171 < -1 && 1 + x171 - 2 * x174 <= 0 && 1 + x171 - 2 * x174 > -2 && x172 = 0
f_1586'(x178, x179, x180, x181, x182, x183) -> f_1586(x178, x179, x181, 1 + x181, 1 + x181 - 2 * x184, 1 + x183) :|: x181 > 3 && 1 + x181 - 2 * x185 >= 0 && x178 > 3 && x179 > 1 && x183 < x179 && x183 > 0 && x181 - 2 * x186 = 0 && x181 < x178 && x180 > 2 && 2 > 1 + x181 - 2 * x187 && x181 < 0 && x181 - 2 * x186 > -2 && x181 - 2 * x186 <= 0 && 2 > 1 + x181 - 2 * x185 && 1 + x181 - 2 * x187 >= 0 && 2 > 1 + x181 - 2 * x184 && 1 + x181 - 2 * x184 >= 0 && x182 = 0
f_1586'(x188, x189, x190, x191, x192, x193) -> f_1586(x188, x189, x191, 1 + x191, 1 + x191 - 2 * x194, 1 + x193) :|: x191 > 3 && 1 + x191 - 2 * x195 >= 0 && x188 > 3 && x189 > 1 && x193 < x189 && x193 > 0 && x191 - 2 * x196 = 0 && x191 < x188 && x190 > 2 && 2 > 1 + x191 - 2 * x197 && x191 - 2 * x196 >= 0 && x191 - 2 * x196 < 2 && 2 > 1 + x191 - 2 * x195 && 1 + x191 - 2 * x197 >= 0 && 2 > 1 + x191 - 2 * x194 && 1 + x191 - 2 * x194 >= 0 && x192 = 0

----------------------------------------

(51) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(52)
Obligation:
Rules:
f_1586(x, x1, x2, x3, x4, x5) -> f_1586'(x, x1, x2, x3, x4, x5) :|: x > 1 + x3 && x3 > 2 && x > 3 && 1 + x3 - 2 * x6 = 0 && x1 > 1 && x5 < x1 && x5 > 0 && x4 > 0 && 2 > 1 + (1 + x3) - 2 * x7 && 1 + (1 + x3) - 2 * x8 > -1
f_1586'(x89, x90, x91, x92, x93, x94) -> f_1586(x89, x90, 1 + x92, 1 + (1 + x92), 1 + (1 + x92) - 2 * x95, 1 + x94) :|: x92 > 2 && 1 + (1 + x92) - 2 * x96 >= 0 && x89 > 1 + x92 && x89 > 3 && 1 + x92 - 2 * x97 = 0 && x90 > 1 && x94 < x90 && x94 > 0 && x93 > 0 && 2 > 1 + (1 + x92) - 2 * x98 && 1 + x92 - 2 * x97 >= 0 && 2 > 1 + x92 - 2 * x97 && 2 > 1 + (1 + x92) - 2 * x96 && 1 + (1 + x92) - 2 * x98 >= 0 && 2 > 1 + (1 + x92) - 2 * x95 && 1 + (1 + x92) - 2 * x95 >= 0
f_1586'(x188, x189, x190, x191, x192, x193) -> f_1586(x188, x189, x191, 1 + x191, 1 + x191 - 2 * x194, 1 + x193) :|: x191 > 3 && 1 + x191 - 2 * x195 >= 0 && x188 > 3 && x189 > 1 && x193 < x189 && x193 > 0 && x191 - 2 * x196 = 0 && x191 < x188 && x190 > 2 && 2 > 1 + x191 - 2 * x197 && x191 - 2 * x196 >= 0 && x191 - 2 * x196 < 2 && 2 > 1 + x191 - 2 * x195 && 1 + x191 - 2 * x197 >= 0 && 2 > 1 + x191 - 2 * x194 && 1 + x191 - 2 * x194 >= 0 && x192 = 0
f_1586(x99, x100, x101, x102, x103, x104) -> f_1586'(x99, x100, x101, x102, 0, x104) :|: x99 > 3 && x102 > 3 && x100 > 1 && x104 < x100 && x104 > 0 && x102 - 2 * x105 = 0 && x102 < x99 && x101 > 2 && 2 > 1 + x102 - 2 * x106 && 1 + x102 - 2 * x107 > -1 && x103 = 0

----------------------------------------

(53) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(54)
Obligation:
Rules:
f_1586(x:0, x1:0, x2:0, x3:0, x4:0, x5:0) -> f_1586'(x:0, x1:0, x2:0, x3:0, x4:0, x5:0) :|: 2 > 1 + (1 + x3:0) - 2 * x7:0 && 1 + (1 + x3:0) - 2 * x8:0 > -1 && x4:0 > 0 && x5:0 > 0 && x5:0 < x1:0 && x1:0 > 1 && 1 + x3:0 - 2 * x6:0 = 0 && x:0 > 3 && x3:0 > 2 && x:0 > 1 + x3:0
f_1586'(x89:0, x90:0, x91:0, x92:0, x93:0, x94:0) -> f_1586(x89:0, x90:0, 1 + x92:0, 1 + (1 + x92:0), 1 + (1 + x92:0) - 2 * x95:0, 1 + x94:0) :|: 2 > 1 + (1 + x92:0) - 2 * x95:0 && 1 + (1 + x92:0) - 2 * x95:0 >= 0 && 1 + (1 + x92:0) - 2 * x98:0 >= 0 && 2 > 1 + (1 + x92:0) - 2 * x96:0 && 2 > 1 + x92:0 - 2 * x97:0 && 1 + x92:0 - 2 * x97:0 >= 0 && 2 > 1 + (1 + x92:0) - 2 * x98:0 && x93:0 > 0 && x94:0 > 0 && x94:0 < x90:0 && x90:0 > 1 && 1 + x92:0 - 2 * x97:0 = 0 && x89:0 > 3 && x89:0 > 1 + x92:0 && 1 + (1 + x92:0) - 2 * x96:0 >= 0 && x92:0 > 2
f_1586'(x188:0, x189:0, x190:0, x191:0, cons_0, x193:0) -> f_1586(x188:0, x189:0, x191:0, 1 + x191:0, 1 + x191:0 - 2 * x194:0, 1 + x193:0) :|: 2 > 1 + x191:0 - 2 * x194:0 && 1 + x191:0 - 2 * x194:0 >= 0 && 1 + x191:0 - 2 * x197:0 >= 0 && 2 > 1 + x191:0 - 2 * x195:0 && x191:0 - 2 * x196:0 < 2 && x191:0 - 2 * x196:0 >= 0 && 2 > 1 + x191:0 - 2 * x197:0 && x190:0 > 2 && x191:0 < x188:0 && x191:0 - 2 * x196:0 = 0 && x193:0 > 0 && x193:0 < x189:0 && x189:0 > 1 && x188:0 > 3 && 1 + x191:0 - 2 * x195:0 >= 0 && x191:0 > 3 && cons_0 = 0
f_1586(x, x1, x2, x3, x4, x5) -> f_1586'(x, x1, x2, x3, 0, x5) :|: 2 > 1 + x3 - 2 * x6 && 1 + x3 - 2 * x7 > -1 && x2 > 2 && x > x3 && x3 - 2 * x8 = 0 && x5 > 0 && x5 < x1 && x1 > 1 && x3 > 3 && x > 3 && x4 = 0

----------------------------------------

(55) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_1586(x, x1, x2, x3, x4, x5)] = -1 + x1 - x5
[f_1586'(x6, x7, x8, x9, x10, x11)] = -1 - x11 + x7

The following rules are decreasing:
f_1586'(x89:0, x90:0, x91:0, x92:0, x93:0, x94:0) -> f_1586(x89:0, x90:0, 1 + x92:0, 1 + (1 + x92:0), 1 + (1 + x92:0) - 2 * x95:0, 1 + x94:0) :|: 2 > 1 + (1 + x92:0) - 2 * x95:0 && 1 + (1 + x92:0) - 2 * x95:0 >= 0 && 1 + (1 + x92:0) - 2 * x98:0 >= 0 && 2 > 1 + (1 + x92:0) - 2 * x96:0 && 2 > 1 + x92:0 - 2 * x97:0 && 1 + x92:0 - 2 * x97:0 >= 0 && 2 > 1 + (1 + x92:0) - 2 * x98:0 && x93:0 > 0 && x94:0 > 0 && x94:0 < x90:0 && x90:0 > 1 && 1 + x92:0 - 2 * x97:0 = 0 && x89:0 > 3 && x89:0 > 1 + x92:0 && 1 + (1 + x92:0) - 2 * x96:0 >= 0 && x92:0 > 2
f_1586'(x188:0, x189:0, x190:0, x191:0, cons_0, x193:0) -> f_1586(x188:0, x189:0, x191:0, 1 + x191:0, 1 + x191:0 - 2 * x194:0, 1 + x193:0) :|: 2 > 1 + x191:0 - 2 * x194:0 && 1 + x191:0 - 2 * x194:0 >= 0 && 1 + x191:0 - 2 * x197:0 >= 0 && 2 > 1 + x191:0 - 2 * x195:0 && x191:0 - 2 * x196:0 < 2 && x191:0 - 2 * x196:0 >= 0 && 2 > 1 + x191:0 - 2 * x197:0 && x190:0 > 2 && x191:0 < x188:0 && x191:0 - 2 * x196:0 = 0 && x193:0 > 0 && x193:0 < x189:0 && x189:0 > 1 && x188:0 > 3 && 1 + x191:0 - 2 * x195:0 >= 0 && x191:0 > 3 && cons_0 = 0
The following rules are bounded:
f_1586(x:0, x1:0, x2:0, x3:0, x4:0, x5:0) -> f_1586'(x:0, x1:0, x2:0, x3:0, x4:0, x5:0) :|: 2 > 1 + (1 + x3:0) - 2 * x7:0 && 1 + (1 + x3:0) - 2 * x8:0 > -1 && x4:0 > 0 && x5:0 > 0 && x5:0 < x1:0 && x1:0 > 1 && 1 + x3:0 - 2 * x6:0 = 0 && x:0 > 3 && x3:0 > 2 && x:0 > 1 + x3:0
f_1586'(x89:0, x90:0, x91:0, x92:0, x93:0, x94:0) -> f_1586(x89:0, x90:0, 1 + x92:0, 1 + (1 + x92:0), 1 + (1 + x92:0) - 2 * x95:0, 1 + x94:0) :|: 2 > 1 + (1 + x92:0) - 2 * x95:0 && 1 + (1 + x92:0) - 2 * x95:0 >= 0 && 1 + (1 + x92:0) - 2 * x98:0 >= 0 && 2 > 1 + (1 + x92:0) - 2 * x96:0 && 2 > 1 + x92:0 - 2 * x97:0 && 1 + x92:0 - 2 * x97:0 >= 0 && 2 > 1 + (1 + x92:0) - 2 * x98:0 && x93:0 > 0 && x94:0 > 0 && x94:0 < x90:0 && x90:0 > 1 && 1 + x92:0 - 2 * x97:0 = 0 && x89:0 > 3 && x89:0 > 1 + x92:0 && 1 + (1 + x92:0) - 2 * x96:0 >= 0 && x92:0 > 2
f_1586'(x188:0, x189:0, x190:0, x191:0, cons_0, x193:0) -> f_1586(x188:0, x189:0, x191:0, 1 + x191:0, 1 + x191:0 - 2 * x194:0, 1 + x193:0) :|: 2 > 1 + x191:0 - 2 * x194:0 && 1 + x191:0 - 2 * x194:0 >= 0 && 1 + x191:0 - 2 * x197:0 >= 0 && 2 > 1 + x191:0 - 2 * x195:0 && x191:0 - 2 * x196:0 < 2 && x191:0 - 2 * x196:0 >= 0 && 2 > 1 + x191:0 - 2 * x197:0 && x190:0 > 2 && x191:0 < x188:0 && x191:0 - 2 * x196:0 = 0 && x193:0 > 0 && x193:0 < x189:0 && x189:0 > 1 && x188:0 > 3 && 1 + x191:0 - 2 * x195:0 >= 0 && x191:0 > 3 && cons_0 = 0
f_1586(x, x1, x2, x3, x4, x5) -> f_1586'(x, x1, x2, x3, 0, x5) :|: 2 > 1 + x3 - 2 * x6 && 1 + x3 - 2 * x7 > -1 && x2 > 2 && x > x3 && x3 - 2 * x8 = 0 && x5 > 0 && x5 < x1 && x1 > 1 && x3 > 3 && x > 3 && x4 = 0

----------------------------------------

(56)
Obligation:
Rules:
f_1586(x:0, x1:0, x2:0, x3:0, x4:0, x5:0) -> f_1586'(x:0, x1:0, x2:0, x3:0, x4:0, x5:0) :|: 2 > 1 + (1 + x3:0) - 2 * x7:0 && 1 + (1 + x3:0) - 2 * x8:0 > -1 && x4:0 > 0 && x5:0 > 0 && x5:0 < x1:0 && x1:0 > 1 && 1 + x3:0 - 2 * x6:0 = 0 && x:0 > 3 && x3:0 > 2 && x:0 > 1 + x3:0
f_1586(x, x1, x2, x3, x4, x5) -> f_1586'(x, x1, x2, x3, 0, x5) :|: 2 > 1 + x3 - 2 * x6 && 1 + x3 - 2 * x7 > -1 && x2 > 2 && x > x3 && x3 - 2 * x8 = 0 && x5 > 0 && x5 < x1 && x1 > 1 && x3 > 3 && x > 3 && x4 = 0

----------------------------------------

(57) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(58)
YES

----------------------------------------

(59)
Obligation:
SCC
----------------------------------------

(60) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 23 rulesP rules:
f_883(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) -> f_890(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) :|: TRUE
f_890(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) -> f_898(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) :|: 0 = 0
f_898(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) -> f_905(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) :|: 0 = 0
f_905(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) -> f_914(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) :|: 0 = 0
f_914(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) -> f_923(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) :|: TRUE
f_923(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) -> f_931(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) :|: TRUE
f_931(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) -> f_939(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) :|: TRUE
f_939(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) -> f_947(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) :|: TRUE
f_947(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) -> f_954(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v1601, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) :|: 0 = 0
f_954(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v1601, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) -> f_963(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v1601, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) :|: 0 = 0
f_963(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v1601, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) -> f_971(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v1601, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) :|: v1603 < v1595 && 2 <= v1595
f_971(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v1601, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) -> f_980(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v1601, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) :|: 0 = 0
f_980(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v1601, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) -> f_987(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v1601, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) :|: TRUE
f_987(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v1601, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) -> f_990(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) :|: 0 = 0
f_990(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) -> f_993(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v2061, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) :|: v2061 = 1 + v1603 && 2 <= v2061
f_993(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v2061, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) -> f_996(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v2061, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) :|: TRUE
f_996(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v2061, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) -> f_999(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v2061, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) :|: 0 = 0
f_999(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v2061, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) -> f_1002(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v2061, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) :|: 0 = 0 && 0 < 2
f_1002(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v2061, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) -> f_1005(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v2061, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) :|: 0 = 0
f_1005(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v2061, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) -> f_1008(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v2061, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) :|: TRUE
f_1008(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v2061, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) -> f_1011(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v2061, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) :|: TRUE
f_1011(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v2061, v1604, v1605, v1606, v1607, v1608, v1609, 3, 2, 4) -> f_876(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1603, 1, v2061, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) :|: TRUE
f_876(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) -> f_883(v1594, v1595, v1596, v1597, v1598, v1599, 0, v1601, 1, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_883(v1594:0, v1595:0, v1596:0, v1597:0, v1598:0, v1599:0, 0, v1601:0, 1, v1603:0, v1604:0, v1605:0, v1606:0, v1607:0, v1608:0, v1609:0, 3, 4) -> f_883(v1594:0, v1595:0, v1596:0, v1597:0, v1598:0, v1599:0, 0, v1603:0, 1, 1 + v1603:0, v1604:0, v1605:0, v1606:0, v1607:0, v1608:0, v1609:0, 3, 4) :|: v1595:0 > 1 && v1603:0 > 0 && v1603:0 < v1595:0
Filtered unneeded arguments:
   f_883(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_883(x2, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_883(v1595:0, v1603:0) -> f_883(v1595:0, 1 + v1603:0) :|: v1603:0 > 0 && v1603:0 < v1595:0 && v1595:0 > 1

----------------------------------------

(61)
Obligation:
Rules:
f_883(v1595:0, v1603:0) -> f_883(v1595:0, 1 + v1603:0) :|: v1603:0 > 0 && v1603:0 < v1595:0 && v1595:0 > 1

----------------------------------------

(62) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(63)
Obligation:
Rules:
f_883(v1595:0:0, v1603:0:0) -> f_883(v1595:0:0, 1 + v1603:0:0) :|: v1603:0:0 > 0 && v1603:0:0 < v1595:0:0 && v1595:0:0 > 1

----------------------------------------

(64) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_883(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_883(v1595:0:0, v1603:0:0) -> f_883(v1595:0:0, 1 + v1603:0:0) :|: v1603:0:0 > 0 && v1603:0:0 < v1595:0:0 && v1595:0:0 > 1
The following rules are bounded:
f_883(v1595:0:0, v1603:0:0) -> f_883(v1595:0:0, 1 + v1603:0:0) :|: v1603:0:0 > 0 && v1603:0:0 < v1595:0:0 && v1595:0:0 > 1

----------------------------------------

(65)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
