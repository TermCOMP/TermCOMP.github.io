YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/mR9q2.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 51 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2725 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 38 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 5 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 39 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/mR9q2.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/mR9q2.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%5 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store null, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%6 = call noalias *i8 @malloc(i64 16)
		%7 = bitcast *i8 %6 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %7, %4
		%8 = load %4
		%9 = getelementptr %8, 0, 0
		store 0, %9
		%10 = load %3
		%11 = load %4
		%12 = getelementptr %11, 0, 1
		store %10, %12
		%13 = load %4
		store %13, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 1, %5
		br %14
	14:
		%15 = load %5
		%16 = load %2
		%17 = icmp slt %15 %16
		br %17, %18, %31
	18:
		%19 = call noalias *i8 @malloc(i64 16)
		%20 = bitcast *i8 %19 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %20, %4
		%21 = call i32 (...)* @__VERIFIER_nondet_int()
		%22 = load %4
		%23 = getelementptr %22, 0, 0
		store %21, %23
		%24 = load %3
		%25 = load %4
		%26 = getelementptr %25, 0, 1
		store %24, %26
		%27 = load %4
		store %27, %3
		br %28
	28:
		%29 = load %5
		%30 = add i32 %29, 1
		store %30, %5
		br %14
	31:
		%32 = load %4
		ret %32

*BasicFunctionTypename: "search" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 62
	0:
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca i32, align 4
		%5 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %5)
		%6 = load %3
		store %6, %5
		br %7
	7:
		%8 = load %5
		%9 = getelementptr %8, 0, 0
		%10 = load %9
		%11 = load %4
		%12 = icmp ne %10 %11
		br %12, %13, %17
	13:
		%14 = load %5
		%15 = getelementptr %14, 0, 1
		%16 = load %15
		store %16, %5
		br %7
	17:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 84
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %7, %8
	7:
		store 0, %1
		br %12
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		%9 = load %2
		%10 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %9)
		store %10, %3
		%11 = load %3
		Unnamed Call-Instruction = call BasicVoidType @search(*BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %11, i32 0)
		store 0, %1
		br %12
	12:
		%13 = load %1
		ret %13


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_766(v466, 0, v468, v469, v470, v475, v471, v472, 1, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v491, v493, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) -> f_767(v466, 0, v468, v469, v470, v475, v472, 1, v471, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v491, v493, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) :|: 0 = 0
f_767(v466, 0, v468, v469, v470, v475, v472, 1, v471, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v491, v493, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) -> f_768(v466, 0, v468, v469, v470, v475, v493, 1, v471, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v472, v491, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) :|: 0 = 0
f_768(v466, 0, v468, v469, v470, v475, v493, 1, v471, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v472, v491, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) -> f_769(v466, 0, v468, v469, v470, v475, v493, 1, v471, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v472, v491, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) :|: 0 = 0
f_769(v466, 0, v468, v469, v470, v475, v493, 1, v471, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v472, v491, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) -> f_770(v466, 0, v468, v469, v470, v475, v493, 1, v471, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v472, v491, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) :|: v493 != 0 && 2 <= v492 && 1 <= v494
f_770(v466, 0, v468, v469, v470, v475, v493, 1, v471, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v472, v491, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) -> f_772(v466, 0, v468, v469, v470, v475, v493, 1, v471, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v472, v491, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) :|: 0 = 0
f_772(v466, 0, v468, v469, v470, v475, v493, 1, v471, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v472, v491, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) -> f_774(v466, 0, v468, v469, v470, v475, v493, 1, v471, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v472, v491, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) :|: TRUE
f_774(v466, 0, v468, v469, v470, v475, v493, 1, v471, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v472, v491, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) -> f_776(v466, 0, v468, v469, v470, v475, v493, 1, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v472, v491, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) :|: 0 = 0
f_776(v466, 0, v468, v469, v470, v475, v493, 1, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v472, v491, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) -> f_784(v466, 0, v468, v469, v470, v475, v493, 1, v501, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v505, v474, v479, v488, v494, v504, v502, v490, v491, 3, 7, 15, 4, 8, 9, 2, 16, v503, v506) :|: v501 = 8 + v475 && v505 = 15 + v475 && 1 + v503 = v492 && v506 = 1 + v489 && 9 <= v501 && 16 <= v505 && 1 <= v503 && 0 <= v506
f_784(v466, 0, v468, v469, v470, v475, v493, 1, v501, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v505, v474, v479, v488, v494, v504, v502, v490, v491, 3, 7, 15, 4, 8, 9, 2, 16, v503, v506) -> f_786(v466, 0, v468, v469, v470, v475, v493, 1, v501, v494, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v505, v474, v479, v488, v504, v502, v490, v491, 3, 7, 15, 4, 8, 9, 2, 16, v503, v506) :|: 0 = 0
f_786(v466, 0, v468, v469, v470, v475, v493, 1, v501, v494, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v505, v474, v479, v488, v504, v502, v490, v491, 3, 7, 15, 4, 8, 9, 2, 16, v503, v506) -> f_788(v466, 0, v468, v469, v470, v475, v493, 1, v501, v494, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v505, v479, v488, v504, v502, v490, v491, 3, 7, 15, 4, 8, 2, 16, 9, v503, v506) :|: TRUE
f_788(v466, 0, v468, v469, v470, v475, v493, 1, v501, v494, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v505, v479, v488, v504, v502, v490, v491, 3, 7, 15, 4, 8, 2, 16, 9, v503, v506) -> f_790(v466, 0, v468, v469, v470, v475, v493, 1, v501, v494, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v505, v479, v488, v504, v502, v490, v491, 3, 7, 15, 4, 8, 2, 16, 9, v503, v506) :|: TRUE
f_790(v466, 0, v468, v469, v470, v475, v493, 1, v501, v494, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v505, v479, v488, v504, v502, v490, v491, 3, 7, 15, 4, 8, 2, 16, 9, v503, v506) -> f_765(v466, 0, v468, v469, v470, v475, v493, 1, v501, v494, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v491, v504, v502, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v506, v503) :|: TRUE
f_765(v466, 0, v468, v469, v470, v471, v472, 1, v474, v475, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v491, v493, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) -> f_766(v466, 0, v468, v469, v470, v475, v471, v472, 1, v474, v476, v480, v477, v481, v478, v482, v483, v484, v485, v486, v487, v490, v491, v493, v494, v479, v488, 3, 7, 15, 4, 8, 9, 2, 16, v489, v492) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_766(v466:0, 0, v468:0, v469:0, v470:0, v475:0, v471:0, v472:0, 1, v474:0, v476:0, v480:0, v477:0, v481:0, v478:0, v482:0, v483:0, v484:0, v485:0, v486:0, v487:0, v490:0, v491:0, v493:0, v494:0, v479:0, v488:0, 3, 7, 15, 4, 8, 9, 2, 16, v489:0, 1 + v503:0) -> f_766(v466:0, 0, v468:0, v469:0, v470:0, v494:0, v475:0, v493:0, 1, 8 + v475:0, v476:0, v480:0, v477:0, v481:0, v478:0, v482:0, v483:0, v484:0, v485:0, v486:0, v487:0, v490:0, v491:0, v504:0, v502:0, v479:0, v488:0, 3, 7, 15, 4, 8, 9, 2, 16, 1 + v489:0, v503:0) :|: v503:0 > 0 && v493:0 < 0 && v494:0 > 0 && v475:0 > 0 && v489:0 > -2
f_766(v466:0, 0, v468:0, v469:0, v470:0, v475:0, v471:0, v472:0, 1, v474:0, v476:0, v480:0, v477:0, v481:0, v478:0, v482:0, v483:0, v484:0, v485:0, v486:0, v487:0, v490:0, v491:0, v493:0, v494:0, v479:0, v488:0, 3, 7, 15, 4, 8, 9, 2, 16, v489:0, 1 + v503:0) -> f_766(v466:0, 0, v468:0, v469:0, v470:0, v494:0, v475:0, v493:0, 1, 8 + v475:0, v476:0, v480:0, v477:0, v481:0, v478:0, v482:0, v483:0, v484:0, v485:0, v486:0, v487:0, v490:0, v491:0, v504:0, v502:0, v479:0, v488:0, 3, 7, 15, 4, 8, 9, 2, 16, 1 + v489:0, v503:0) :|: v503:0 > 0 && v493:0 > 0 && v494:0 > 0 && v475:0 > 0 && v489:0 > -2
Filtered unneeded arguments:
   f_766(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37) -> f_766(x6, x24, x25, x36, x37)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_766(v475:0, v493:0, v494:0, v489:0, sum~cons_1~v503:0) -> f_766(v494:0, v504:0, v502:0, 1 + v489:0, v503:0) :|: v493:0 < 0 && v503:0 > 0 && v494:0 > 0 && v489:0 > -2 && v475:0 > 0 && sum~cons_1~v503:0 = 1 + v503:0
f_766(v475:0, v493:0, v494:0, v489:0, sum~cons_1~v503:0) -> f_766(v494:0, v504:0, v502:0, 1 + v489:0, v503:0) :|: v493:0 > 0 && v503:0 > 0 && v494:0 > 0 && v489:0 > -2 && v475:0 > 0 && sum~cons_1~v503:0 = 1 + v503:0

----------------------------------------

(9)
Obligation:
Rules:
f_766(v475:0, v493:0, v494:0, v489:0, sum~cons_1~v503:0) -> f_766(v494:0, v504:0, v502:0, 1 + v489:0, v503:0) :|: v493:0 < 0 && v503:0 > 0 && v494:0 > 0 && v489:0 > -2 && v475:0 > 0 && sum~cons_1~v503:0 = 1 + v503:0
f_766(x, x1, x2, x3, x4) -> f_766(x2, x5, x6, 1 + x3, x7) :|: x1 > 0 && x7 > 0 && x2 > 0 && x3 > -2 && x > 0 && x4 = 1 + x7

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_766(x:0, x1:0, x2:0, x3:0, sum~cons_1~x7:0) -> f_766(x2:0, x5:0, x6:0, 1 + x3:0, x7:0) :|: x3:0 > -2 && x:0 > 0 && x2:0 > 0 && x7:0 > 0 && x1:0 > 0 && sum~cons_1~x7:0 = 1 + x7:0
f_766(v475:0:0, v493:0:0, v494:0:0, v489:0:0, sum~cons_1~v503:0:0) -> f_766(v494:0:0, v504:0:0, v502:0:0, 1 + v489:0:0, v503:0:0) :|: v489:0:0 > -2 && v475:0:0 > 0 && v494:0:0 > 0 && v503:0:0 > 0 && v493:0:0 < 0 && sum~cons_1~v503:0:0 = 1 + v503:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_766 ] = f_766_5

The following rules are decreasing:
f_766(x:0, x1:0, x2:0, x3:0, sum~cons_1~x7:0) -> f_766(x2:0, x5:0, x6:0, 1 + x3:0, x7:0) :|: x3:0 > -2 && x:0 > 0 && x2:0 > 0 && x7:0 > 0 && x1:0 > 0 && sum~cons_1~x7:0 = 1 + x7:0
f_766(v475:0:0, v493:0:0, v494:0:0, v489:0:0, sum~cons_1~v503:0:0) -> f_766(v494:0:0, v504:0:0, v502:0:0, 1 + v489:0:0, v503:0:0) :|: v489:0:0 > -2 && v475:0:0 > 0 && v494:0:0 > 0 && v503:0:0 > 0 && v493:0:0 < 0 && sum~cons_1~v503:0:0 = 1 + v503:0:0

The following rules are bounded:
f_766(x:0, x1:0, x2:0, x3:0, sum~cons_1~x7:0) -> f_766(x2:0, x5:0, x6:0, 1 + x3:0, x7:0) :|: x3:0 > -2 && x:0 > 0 && x2:0 > 0 && x7:0 > 0 && x1:0 > 0 && sum~cons_1~x7:0 = 1 + x7:0
f_766(v475:0:0, v493:0:0, v494:0:0, v489:0:0, sum~cons_1~v503:0:0) -> f_766(v494:0:0, v504:0:0, v502:0:0, 1 + v489:0:0, v503:0:0) :|: v489:0:0 > -2 && v475:0:0 > 0 && v494:0:0 > 0 && v503:0:0 > 0 && v493:0:0 < 0 && sum~cons_1~v503:0:0 = 1 + v503:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_647(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v297, v298, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 2, 9, 16) -> f_648(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v297, v298, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 2, 9, 16) :|: 0 = 0
f_648(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v297, v298, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 2, 9, 16) -> f_649(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v297, v298, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 9, 2, 16) :|: v301 < v287 && 3 <= v287
f_649(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v297, v298, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 9, 2, 16) -> f_651(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v297, v298, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 9, 2, 16) :|: 0 = 0
f_651(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v297, v298, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 9, 2, 16) -> f_653(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v297, v298, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 9, 2, 16) :|: TRUE
f_653(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v297, v298, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 9, 2, 16) -> f_655(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v297, v298, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, 3, 7, 15, 4, 8, 9, 2, 16) :|: v314 = 15 + v313 && v313 % 4 = 0 && 16 <= v314
f_655(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v297, v298, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, 3, 7, 15, 4, 8, 9, 2, 16) -> f_657(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v298, v297, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, 3, 7, 15, 4, 8, 9, 2, 16) :|: 0 = 0
f_657(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v298, v297, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, 3, 7, 15, 4, 8, 9, 2, 16) -> f_659(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v298, v297, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, 3, 7, 15, 4, 8, 9, 2, 16) :|: TRUE
f_659(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v298, v297, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, 3, 7, 15, 4, 8, 9, 2, 16) -> f_661(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, v298, 3, 7, 15, 4, 8, 9, 2, 16) :|: TRUE
f_661(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, v298, 3, 7, 15, 4, 8, 9, 2, 16) -> f_663(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, v298, 3, 7, 15, 4, 8, 9, 2, 16) :|: 0 = 0
f_663(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, v298, 3, 7, 15, 4, 8, 9, 2, 16) -> f_665(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v299, v297, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, v298, 3, 7, 15, 4, 8, 9, 2, 16) :|: 0 = 0
f_665(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v299, v297, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, v298, 3, 7, 15, 4, 8, 9, 2, 16) -> f_667(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v299, v297, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, v298, 3, 7, 15, 4, 8, 9, 2, 16) :|: TRUE
f_667(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v299, v297, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, v298, 3, 7, 15, 4, 8, 9, 2, 16) -> f_669(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, v298, v299, 3, 7, 15, 4, 8, 9, 2, 16) :|: 0 = 0
f_669(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, v298, v299, 3, 7, 15, 4, 8, 9, 2, 16) -> f_671(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, v298, v299, 3, 7, 15, 4, 8, 9, 2, 16) :|: 0 = 0
f_671(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, v298, v299, 3, 7, 15, 4, 8, 9, 2, 16) -> f_673(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, v298, v299, 3, 7, 15, 4, 8, 9, 2, 16) :|: v326 = 8 + v313 && 9 <= v326
f_673(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, v314, v298, v299, 3, 7, 15, 4, 8, 9, 2, 16) -> f_675(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, v328, 9, 2, 16) :|: v328 = 1 + v301 && 3 <= v328
f_675(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, v328, 9, 2, 16) -> f_677(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, v328, 9, 2, 16) :|: 0 = 0
f_677(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, v328, 9, 2, 16) -> f_679(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, v328, 9, 2, 16) :|: TRUE
f_679(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, v328, 9, 2, 16) -> f_681(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, v328, 9, 2, 16) :|: TRUE
f_681(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, v328, 9, 2, 16) -> f_683(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, v328, 9, 2, 16) :|: 0 = 0
f_683(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, v328, 9, 2, 16) -> f_685(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v328, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 9, 2, 16) :|: v328 = 1 + v301
f_685(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v328, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 9, 2, 16) -> f_687(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v328, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 9, 2, 16) :|: TRUE
f_687(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v328, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 9, 2, 16) -> f_689(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v328, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 9, 2, 16) :|: TRUE
f_689(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v328, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 9, 2, 16) -> f_646(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v313, v317, v297, v326, v328, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 2, 9, 16) :|: TRUE
f_646(v287, v288, v289, v290, v291, v292, 0, v294, v295, 1, v297, v298, v299, v300, v301, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 2, 9, 16) -> f_647(v287, v288, v289, v290, v291, v292, 0, v294, v301, 1, v297, v298, v299, v300, v295, v302, v305, v303, v306, v304, v307, v308, v309, v310, v311, v312, 3, 7, 15, 4, 8, 2, 9, 16) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_647(v287:0, v288:0, v289:0, v290:0, v291:0, v292:0, 0, v294:0, v301:0, 1, v297:0, v298:0, v299:0, v300:0, v295:0, v302:0, v305:0, v303:0, v306:0, v304:0, v307:0, v308:0, v309:0, v310:0, v311:0, v312:0, 3, 7, 15, 4, 8, 2, 9, 16) -> f_647(v287:0, v288:0, v289:0, v290:0, v291:0, v292:0, 0, v294:0, 1 + v301:0, 1, v313:0, v317:0, v297:0, 8 + v313:0, v301:0, v302:0, v305:0, v303:0, v306:0, v304:0, v307:0, v308:0, v309:0, v310:0, v311:0, v312:0, 3, 7, 15, 4, 8, 2, 9, 16) :|: v287:0 > 2 && v301:0 < v287:0 && v313:0 % 4 = 0 && v313:0 > 0 && v301:0 > 1
Filtered unneeded arguments:
   f_647(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34) -> f_647(x1, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_647(v287:0, v301:0) -> f_647(v287:0, 1 + v301:0) :|: v301:0 < v287:0 && v301:0 > 1 && v287:0 > 2

----------------------------------------

(16)
Obligation:
Rules:
f_647(v287:0, v301:0) -> f_647(v287:0, 1 + v301:0) :|: v301:0 < v287:0 && v301:0 > 1 && v287:0 > 2

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_647(v287:0:0, v301:0:0) -> f_647(v287:0:0, 1 + v301:0:0) :|: v301:0:0 < v287:0:0 && v301:0:0 > 1 && v287:0:0 > 2

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_647(x, x1)] = x - x1

The following rules are decreasing:
f_647(v287:0:0, v301:0:0) -> f_647(v287:0:0, 1 + v301:0:0) :|: v301:0:0 < v287:0:0 && v301:0:0 > 1 && v287:0:0 > 2
The following rules are bounded:
f_647(v287:0:0, v301:0:0) -> f_647(v287:0:0, 1 + v301:0:0) :|: v301:0:0 < v287:0:0 && v301:0:0 > 1 && v287:0:0 > 2

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
