YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zZRAV.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1084 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 22 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 10 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 34 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 21 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/zZRAV.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/zZRAV.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %4
		store 0, %2
		br %7
	7:
		%8 = load %3
		%9 = icmp sgt %8 0
		br %9, %10, %24
	10:
		br %11
	11:
		%12 = load %4
		%13 = icmp sgt %12 0
		br %13, %14, %19
	14:
		%15 = load %4
		%16 = sub i32 %15, 1
		store %16, %4
		%17 = load %2
		%18 = add i32 %17, 1
		store %18, %2
		br %11
	19:
		%20 = load %3
		%21 = sub i32 %20, 1
		store %21, %3
		%22 = load %2
		%23 = add i32 %22, 1
		store %23, %2
		br %7
	24:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_433(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_434(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) :|: 0 < v569 && 2 <= v564 && 2 <= v562
f_434(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_436(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) :|: 0 = 0
f_436(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_438(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) :|: TRUE
f_438(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_440(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) :|: TRUE
f_440(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_441(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) :|: 0 = 0
f_441(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_442(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) :|: 0 = 0
f_442(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_443(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) :|: TRUE
f_443(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_444(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v570, v571, v572, v573, v574, v575, 3, 2, 4) :|: 0 = 0
f_444(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_445(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v610, v570, v571, v572, v573, v574, v575, 3, 2, 4) :|: 1 + v610 = v569 && 0 <= v610
f_445(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v610, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_446(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v610, v570, v571, v572, v573, v574, v575, 3, 2, 4) :|: TRUE
f_446(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v610, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_447(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v610, v571, v572, v573, v574, v575, 3, 2, 4) :|: 0 = 0
f_447(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v610, v571, v572, v573, v574, v575, 3, 2, 4) -> f_448(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v610, v571, v612, v572, v573, v574, v575, 3, 2, 4) :|: v612 = 1 + v571 && 3 <= v612
f_448(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v610, v571, v612, v572, v573, v574, v575, 3, 2, 4) -> f_449(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v610, v571, v612, v572, v573, v574, v575, 3, 2, 4) :|: TRUE
f_449(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v610, v571, v612, v572, v573, v574, v575, 3, 2, 4) -> f_450(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v610, v571, v612, v572, v573, v574, v575, 3, 2, 4) :|: TRUE
f_450(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v610, v571, v612, v572, v573, v574, v575, 3, 2, 4) -> f_432(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v610, v571, v612, v572, v573, v574, v575, 3, 2, 4) :|: TRUE
f_432(v558, v559, v560, v561, v562, v563, v564, 1, 0, v567, v568, v569, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_433(v558, v559, v560, v561, v562, v563, v569, 1, 0, v567, v568, v564, v570, v571, v572, v573, v574, v575, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_433(v558:0, v559:0, v560:0, v561:0, v562:0, v563:0, 1 + v610:0, 1, 0, v567:0, v568:0, v564:0, v570:0, v571:0, v572:0, v573:0, v574:0, v575:0, 3, 2, 4) -> f_433(v558:0, v559:0, v560:0, v561:0, v562:0, v563:0, v610:0, 1, 0, v567:0, v568:0, 1 + v610:0, v571:0, 1 + v571:0, v572:0, v573:0, v574:0, v575:0, 3, 2, 4) :|: v564:0 > 1 && v610:0 > -1 && v562:0 > 1 && v571:0 > 1
Filtered unneeded arguments:
   f_433(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_433(x5, x7, x12, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_433(v562:0, sum~cons_1~v610:0, v564:0, v571:0) -> f_433(v562:0, v610:0, 1 + v610:0, 1 + v571:0) :|: v610:0 > -1 && v564:0 > 1 && v571:0 > 1 && v562:0 > 1 && sum~cons_1~v610:0 = 1 + v610:0

----------------------------------------

(9)
Obligation:
Rules:
f_433(v562:0, sum~cons_1~v610:0, v564:0, v571:0) -> f_433(v562:0, v610:0, 1 + v610:0, 1 + v571:0) :|: v610:0 > -1 && v564:0 > 1 && v571:0 > 1 && v562:0 > 1 && sum~cons_1~v610:0 = 1 + v610:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_433(v562:0:0, sum~cons_1~v610:0:0, v564:0:0, v571:0:0) -> f_433(v562:0:0, v610:0:0, 1 + v610:0:0, 1 + v571:0:0) :|: v571:0:0 > 1 && v562:0:0 > 1 && v564:0:0 > 1 && v610:0:0 > -1 && sum~cons_1~v610:0:0 = 1 + v610:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_433(x, x1, x2, x3)] = -1 + x1

The following rules are decreasing:
f_433(v562:0:0, sum~cons_1~v610:0:0, v564:0:0, v571:0:0) -> f_433(v562:0:0, v610:0:0, 1 + v610:0:0, 1 + v571:0:0) :|: v571:0:0 > 1 && v562:0:0 > 1 && v564:0:0 > 1 && v610:0:0 > -1 && sum~cons_1~v610:0:0 = 1 + v610:0:0
The following rules are bounded:
f_433(v562:0:0, sum~cons_1~v610:0:0, v564:0:0, v571:0:0) -> f_433(v562:0:0, v610:0:0, 1 + v610:0:0, 1 + v571:0:0) :|: v571:0:0 > 1 && v562:0:0 > 1 && v564:0:0 > 1 && v610:0:0 > -1 && sum~cons_1~v610:0:0 = 1 + v610:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_390(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 4) -> f_392(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: 0 < v406 && 2 <= v403 && 2 <= v401
f_392(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_395(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: 0 = 0
f_395(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_398(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: TRUE
f_398(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_401(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: TRUE
f_401(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_404(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: 0 = 0
f_404(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_406(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: 0 = 0
f_406(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_409(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: TRUE
f_409(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_412(v397, v398, v399, v400, v401, v402, v406, 1, 0, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: 0 = 0
f_412(v397, v398, v399, v400, v401, v402, v406, 1, 0, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_415(v397, v398, v399, v400, v401, v402, v406, 1, 0, v492, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: 1 + v492 = v406 && 0 <= v492
f_415(v397, v398, v399, v400, v401, v402, v406, 1, 0, v492, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_417(v397, v398, v399, v400, v401, v402, v406, 1, 0, v492, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: TRUE
f_417(v397, v398, v399, v400, v401, v402, v406, 1, 0, v492, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_419(v397, v398, v399, v400, v401, v402, v406, 1, 0, v492, v408, v409, v410, v411, v412, 3, 2, 4) :|: 0 = 0
f_419(v397, v398, v399, v400, v401, v402, v406, 1, 0, v492, v408, v409, v410, v411, v412, 3, 2, 4) -> f_421(v397, v398, v399, v400, v401, v402, v406, 1, 0, v492, v408, v506, v409, v410, v411, v412, 3, 2, 4) :|: v506 = 1 + v408 && 2 <= v506
f_421(v397, v398, v399, v400, v401, v402, v406, 1, 0, v492, v408, v506, v409, v410, v411, v412, 3, 2, 4) -> f_423(v397, v398, v399, v400, v401, v402, v406, 1, 0, v492, v408, v506, v409, v410, v411, v412, 3, 2, 4) :|: TRUE
f_423(v397, v398, v399, v400, v401, v402, v406, 1, 0, v492, v408, v506, v409, v410, v411, v412, 3, 2, 4) -> f_425(v397, v398, v399, v400, v401, v402, v406, 1, 0, v492, v408, v506, v409, v410, v411, v412, 3, 2, 4) :|: TRUE
f_425(v397, v398, v399, v400, v401, v402, v406, 1, 0, v492, v408, v506, v409, v410, v411, v412, 3, 2, 4) -> f_388(v397, v398, v399, v400, v401, v402, v406, 1, 0, v492, v408, v506, v409, v410, v411, v412, 3, 4) :|: TRUE
f_388(v397, v398, v399, v400, v401, v402, v403, 1, 0, v406, v407, v408, v409, v410, v411, v412, 3, 4) -> f_390(v397, v398, v399, v400, v401, v402, v406, 1, 0, v403, v407, v408, v409, v410, v411, v412, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_390(v397:0, v398:0, v399:0, v400:0, v401:0, v402:0, 1 + v492:0, 1, 0, v403:0, v407:0, v408:0, v409:0, v410:0, v411:0, v412:0, 3, 4) -> f_390(v397:0, v398:0, v399:0, v400:0, v401:0, v402:0, v492:0, 1, 0, 1 + v492:0, v408:0, 1 + v408:0, v409:0, v410:0, v411:0, v412:0, 3, 4) :|: v403:0 > 1 && v492:0 > -1 && v401:0 > 1 && v408:0 > 0
Filtered unneeded arguments:
   f_390(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_390(x5, x7, x10, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_390(v401:0, sum~cons_1~v492:0, v403:0, v408:0) -> f_390(v401:0, v492:0, 1 + v492:0, 1 + v408:0) :|: v492:0 > -1 && v403:0 > 1 && v408:0 > 0 && v401:0 > 1 && sum~cons_1~v492:0 = 1 + v492:0

----------------------------------------

(16)
Obligation:
Rules:
f_390(v401:0, sum~cons_1~v492:0, v403:0, v408:0) -> f_390(v401:0, v492:0, 1 + v492:0, 1 + v408:0) :|: v492:0 > -1 && v403:0 > 1 && v408:0 > 0 && v401:0 > 1 && sum~cons_1~v492:0 = 1 + v492:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_390(v401:0:0, sum~cons_1~v492:0:0, v403:0:0, v408:0:0) -> f_390(v401:0:0, v492:0:0, 1 + v492:0:0, 1 + v408:0:0) :|: v408:0:0 > 0 && v401:0:0 > 1 && v403:0:0 > 1 && v492:0:0 > -1 && sum~cons_1~v492:0:0 = 1 + v492:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_390 ] = f_390_2

The following rules are decreasing:
f_390(v401:0:0, sum~cons_1~v492:0:0, v403:0:0, v408:0:0) -> f_390(v401:0:0, v492:0:0, 1 + v492:0:0, 1 + v408:0:0) :|: v408:0:0 > 0 && v401:0:0 > 1 && v403:0:0 > 1 && v492:0:0 > -1 && sum~cons_1~v492:0:0 = 1 + v492:0:0

The following rules are bounded:
f_390(v401:0:0, sum~cons_1~v492:0:0, v403:0:0, v408:0:0) -> f_390(v401:0:0, v492:0:0, 1 + v492:0:0, 1 + v408:0:0) :|: v408:0:0 > 0 && v401:0:0 > 1 && v403:0:0 > 1 && v492:0:0 > -1 && sum~cons_1~v492:0:0 = 1 + v492:0:0


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_331(v245, v246, v247, v248, v249, v250, 1, v253, v252, v254, v255, v256, v257, v258, v259, 0, 3, 4) -> f_333(v245, v246, v247, v248, v249, v250, 1, v253, v252, v254, v255, v256, v257, v258, v259, 0, 3, 2, 4) :|: 0 < v253 && 2 <= v252 && 2 <= v250
f_333(v245, v246, v247, v248, v249, v250, 1, v253, v252, v254, v255, v256, v257, v258, v259, 0, 3, 2, 4) -> f_336(v245, v246, v247, v248, v249, v250, 1, v253, v252, v254, v255, v256, v257, v258, v259, 0, 3, 2, 4) :|: 0 = 0
f_336(v245, v246, v247, v248, v249, v250, 1, v253, v252, v254, v255, v256, v257, v258, v259, 0, 3, 2, 4) -> f_339(v245, v246, v247, v248, v249, v250, 1, v253, v252, v254, v255, v256, v257, v258, v259, 0, 3, 2, 4) :|: TRUE
f_339(v245, v246, v247, v248, v249, v250, 1, v253, v252, v254, v255, v256, v257, v258, v259, 0, 3, 2, 4) -> f_342(v245, v246, v247, v248, v249, v250, 1, v253, v254, v255, v256, v257, v258, v259, 0, 3, 2, 4) :|: 0 = 0
f_342(v245, v246, v247, v248, v249, v250, 1, v253, v254, v255, v256, v257, v258, v259, 0, 3, 2, 4) -> f_346(v245, v246, v247, v248, v249, v250, 1, v253, v294, v254, v255, v256, v257, v258, v259, 0, 3, 2, 4) :|: 1 + v294 = v253 && 0 <= v294
f_346(v245, v246, v247, v248, v249, v250, 1, v253, v294, v254, v255, v256, v257, v258, v259, 0, 3, 2, 4) -> f_349(v245, v246, v247, v248, v249, v250, 1, v253, v294, v254, v255, v256, v257, v258, v259, 0, 3, 2, 4) :|: TRUE
f_349(v245, v246, v247, v248, v249, v250, 1, v253, v294, v254, v255, v256, v257, v258, v259, 0, 3, 2, 4) -> f_353(v245, v246, v247, v248, v249, v250, 1, v253, v294, v255, v256, v257, v258, v259, 0, 3, 2, 4) :|: 0 = 0
f_353(v245, v246, v247, v248, v249, v250, 1, v253, v294, v255, v256, v257, v258, v259, 0, 3, 2, 4) -> f_357(v245, v246, v247, v248, v249, v250, 1, v253, v294, v255, v298, v256, v257, v258, v259, 0, 3, 2, 4) :|: v298 = 1 + v255 && 2 <= v298
f_357(v245, v246, v247, v248, v249, v250, 1, v253, v294, v255, v298, v256, v257, v258, v259, 0, 3, 2, 4) -> f_361(v245, v246, v247, v248, v249, v250, 1, v253, v294, v255, v298, v256, v257, v258, v259, 0, 3, 2, 4) :|: TRUE
f_361(v245, v246, v247, v248, v249, v250, 1, v253, v294, v255, v298, v256, v257, v258, v259, 0, 3, 2, 4) -> f_364(v245, v246, v247, v248, v249, v250, 1, v253, v294, v255, v298, v256, v257, v258, v259, 0, 3, 2, 4) :|: TRUE
f_364(v245, v246, v247, v248, v249, v250, 1, v253, v294, v255, v298, v256, v257, v258, v259, 0, 3, 2, 4) -> f_329(v245, v246, v247, v248, v249, v250, 1, v253, v294, v255, v298, v256, v257, v258, v259, 0, 3, 4) :|: TRUE
f_329(v245, v246, v247, v248, v249, v250, 1, v252, v253, v254, v255, v256, v257, v258, v259, 0, 3, 4) -> f_331(v245, v246, v247, v248, v249, v250, 1, v253, v252, v254, v255, v256, v257, v258, v259, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_331(v245:0, v246:0, v247:0, v248:0, v249:0, v250:0, 1, 1 + v294:0, v252:0, v254:0, v255:0, v256:0, v257:0, v258:0, v259:0, 0, 3, 4) -> f_331(v245:0, v246:0, v247:0, v248:0, v249:0, v250:0, 1, v294:0, 1 + v294:0, v255:0, 1 + v255:0, v256:0, v257:0, v258:0, v259:0, 0, 3, 4) :|: v252:0 > 1 && v294:0 > -1 && v250:0 > 1 && v255:0 > 0
Filtered unneeded arguments:
   f_331(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_331(x6, x8, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_331(v250:0, sum~cons_1~v294:0, v252:0, v255:0) -> f_331(v250:0, v294:0, 1 + v294:0, 1 + v255:0) :|: v294:0 > -1 && v252:0 > 1 && v255:0 > 0 && v250:0 > 1 && sum~cons_1~v294:0 = 1 + v294:0

----------------------------------------

(23)
Obligation:
Rules:
f_331(v250:0, sum~cons_1~v294:0, v252:0, v255:0) -> f_331(v250:0, v294:0, 1 + v294:0, 1 + v255:0) :|: v294:0 > -1 && v252:0 > 1 && v255:0 > 0 && v250:0 > 1 && sum~cons_1~v294:0 = 1 + v294:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_331(v250:0:0, sum~cons_1~v294:0:0, v252:0:0, v255:0:0) -> f_331(v250:0:0, v294:0:0, 1 + v294:0:0, 1 + v255:0:0) :|: v255:0:0 > 0 && v250:0:0 > 1 && v252:0:0 > 1 && v294:0:0 > -1 && sum~cons_1~v294:0:0 = 1 + v294:0:0

----------------------------------------

(26) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_331 ] = f_331_2

The following rules are decreasing:
f_331(v250:0:0, sum~cons_1~v294:0:0, v252:0:0, v255:0:0) -> f_331(v250:0:0, v294:0:0, 1 + v294:0:0, 1 + v255:0:0) :|: v255:0:0 > 0 && v250:0:0 > 1 && v252:0:0 > 1 && v294:0:0 > -1 && sum~cons_1~v294:0:0 = 1 + v294:0:0

The following rules are bounded:
f_331(v250:0:0, sum~cons_1~v294:0:0, v252:0:0, v255:0:0) -> f_331(v250:0:0, v294:0:0, 1 + v294:0:0, 1 + v255:0:0) :|: v255:0:0 > 0 && v250:0:0 > 1 && v252:0:0 > 1 && v294:0:0 > -1 && sum~cons_1~v294:0:0 = 1 + v294:0:0


----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
