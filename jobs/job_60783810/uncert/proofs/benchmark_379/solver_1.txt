YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/gLyWK.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 911 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 0 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 11 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 0 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 7 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/gLyWK.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/gLyWK.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		br %8
	8:
		%9 = load %3
		%10 = icmp sgt %9 0
		br %10, %11, %14
	11:
		%12 = load %2
		%13 = icmp sgt %12 0
		br %14
	14:
		%15 = phi [0, %8], [%13, %11]
		br %15, %16, %35
	16:
		%17 = load %3
		store %17, %4
		%18 = load %2
		store %18, %5
		br %19
	19:
		%20 = load %5
		%21 = load %3
		%22 = icmp sge %20 %21
		br %22, %23, %26
	23:
		%24 = load %3
		%25 = icmp sgt %24 0
		br %26
	26:
		%27 = phi [0, %19], [%25, %23]
		br %27, %28, %32
	28:
		%29 = load %5
		%30 = load %3
		%31 = sub i32 %29, %30
		store %31, %5
		br %19
	32:
		%33 = load %5
		store %33, %3
		%34 = load %4
		store %34, %2
		br %8
	35:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 47 rulesP rules:
f_414(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1088, v1086, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_417(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1088, v1086, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: 0 = 0
f_417(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1088, v1086, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_419(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1088, v1086, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: TRUE
f_419(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1088, v1086, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_421(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, v1088, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: 0 = 0
f_421(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, v1088, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_422(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, v1088, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: 0 = 0
f_422(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, v1088, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_423(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, v1088, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: 0 = 0
f_423(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, v1088, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_424(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, v1088, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: TRUE
f_424(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, v1088, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_425(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, v1088, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: 0 = 0
f_425(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, v1088, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_426(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, v1088, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: TRUE
f_426(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, v1088, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_427(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: 0 = 0
f_427(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_428(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: TRUE
f_428(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_429(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: TRUE
f_429(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_430(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1086, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: v1090 < v1086 && 1 <= v1079 && 1 <= v1080 && 1 <= v1081 && 1 <= v1082 && 1 <= v1083 && 1 <= v1084 && 2 <= v1085 && 1 <= v1090 && 2 <= v1086 && 3 <= v1089 && 4 <= v1091 && 4 <= v1092 && 4 <= v1093 && 4 <= v1094 && 4 <= v1095 && v1079 <= v1091 && v1080 <= v1092 && v1081 <= v1093 && v1082 <= v1094 && v1083 <= v1095
f_430(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, 0, v1560, v1561, v1562, v1563, v1564, v1565, 3, 2, 4) -> f_431(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, 0, v1560, v1561, v1562, v1563, v1564, v1565, 3, 2, 4) :|: 0 = 0
f_431(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, 0, v1560, v1561, v1562, v1563, v1564, v1565, 3, 2, 4) -> f_432(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, 0, v1560, v1561, v1562, v1563, v1564, v1565, 3, 2, 4) :|: 0 = 0
f_432(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, 0, v1560, v1561, v1562, v1563, v1564, v1565, 3, 2, 4) -> f_433(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, 0, v1560, v1561, v1562, v1563, v1564, v1565, 3, 2, 4) :|: 0 = 0
f_433(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, 0, v1560, v1561, v1562, v1563, v1564, v1565, 3, 2, 4) -> f_434(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, 0, v1560, v1561, v1562, v1563, v1564, v1565, 3, 2, 4) :|: TRUE
f_434(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, 0, v1560, v1561, v1562, v1563, v1564, v1565, 3, 2, 4) -> f_435(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, 0, v1560, v1561, v1562, v1563, v1564, v1565, 3, 2, 4) :|: 0 = 0
f_435(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, 0, v1560, v1561, v1562, v1563, v1564, v1565, 3, 2, 4) -> f_436(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, 0, v1560, v1561, v1562, v1563, v1564, v1565, 3, 2, 4) :|: 0 = 0
f_436(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, 0, v1560, v1561, v1562, v1563, v1564, v1565, 3, 2, 4) -> f_437(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, v1560, v1561, v1562, v1563, v1564, v1565, 0, 3, 2, 4) :|: 0 = 0
f_437(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, v1560, v1561, v1562, v1563, v1564, v1565, 0, 3, 2, 4) -> f_403(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556, 1, v1558, v1558, v1560, v1558, v1556, v1561, v1562, v1563, v1564, v1565, 0, 3, 2, 4) :|: v1556 <= v1558 && v1556 <= v1558 && v1556 <= v1556 && 1 <= v1549 && 1 <= v1550 && 1 <= v1551 && 1 <= v1552 && 1 <= v1553 && 1 <= v1554 && 2 <= v1555 && 1 <= v1556 && 2 <= v1558 && 1 <= v1558 && 2 <= v1560 && 1 <= v1558 && 1 <= v1556 && 4 <= v1561 && 4 <= v1562 && 4 <= v1563 && 4 <= v1564 && 4 <= v1565 && v1549 <= v1561 && v1550 <= v1562 && v1551 <= v1563 && v1552 <= v1564 && v1553 <= v1565
f_403(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261, 1, v1263, v1264, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, 0, 3, 2, 4) -> f_405(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261, 1, v1263, v1264, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, 0, 3, 2, 4) :|: TRUE
f_405(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261, 1, v1263, v1264, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, 0, 3, 2, 4) -> f_407(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261, 1, v1263, v1264, v1266, v1267, v1268, v1269, v1270, v1271, v1272, 0, 3, 2, 4) :|: 0 = 0
f_407(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261, 1, v1263, v1264, v1266, v1267, v1268, v1269, v1270, v1271, v1272, 0, 3, 2, 4) -> f_409(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261, 1, v1263, v1264, v1267, v1268, v1269, v1270, v1271, v1272, 0, 3, 2, 4) :|: 0 = 0
f_409(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261, 1, v1263, v1264, v1267, v1268, v1269, v1270, v1271, v1272, 0, 3, 2, 4) -> f_411(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261, 1, v1263, v1264, v1328, v1268, v1269, v1270, v1271, v1272, 0, 3, 2, 4) :|: v1328 + v1261 = v1264 && 0 <= v1328
f_411(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261, 1, v1263, v1264, v1328, v1268, v1269, v1270, v1271, v1272, 0, 3, 2, 4) -> f_413(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261, 1, v1263, v1264, v1328, v1268, v1269, v1270, v1271, v1272, 0, 3, 2, 4) :|: TRUE
f_413(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261, 1, v1263, v1264, v1328, v1268, v1269, v1270, v1271, v1272, 0, 3, 2, 4) -> f_416(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261, 1, v1263, v1264, v1328, v1268, v1269, v1270, v1271, v1272, 0, 3, 2, 4) :|: TRUE
f_416(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261, 1, v1263, v1264, v1328, v1268, v1269, v1270, v1271, v1272, 0, 3, 2, 4) -> f_389(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261, 1, v1263, v1264, v1328, v1268, v1269, v1270, v1271, v1272, 0, 3, 2, 4) :|: 1 <= v1254 && 1 <= v1255 && 1 <= v1256 && 1 <= v1257 && 1 <= v1258 && 1 <= v1259 && 2 <= v1260 && 1 <= v1261 && 2 <= v1263 && 1 <= v1264 && 0 <= v1328 && 4 <= v1268 && 4 <= v1269 && 4 <= v1270 && 4 <= v1271 && 4 <= v1272 && v1254 <= v1268 && v1255 <= v1269 && v1256 <= v1270 && v1257 <= v1271 && v1258 <= v1272
f_389(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) -> f_390(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) :|: 0 = 0
f_390(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) -> f_391(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) :|: 0 = 0
f_391(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) -> f_392(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) :|: v1086 <= v1090 && 1 <= v1090 && 2 <= v1089
f_391(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) -> f_393(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) :|: v1090 < v1086
f_392(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) -> f_394(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) :|: 0 = 0
f_394(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) -> f_396(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) :|: TRUE
f_396(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) -> f_398(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) :|: 0 = 0
f_398(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) -> f_400(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) :|: 0 = 0
f_400(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) -> f_402(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) :|: 0 = 0
f_402(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) -> f_403(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1086, v1090, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) :|: v1086 <= v1090 && v1086 <= v1086 && v1086 <= v1090 && 1 <= v1079 && 1 <= v1080 && 1 <= v1081 && 1 <= v1082 && 1 <= v1083 && 1 <= v1084 && 2 <= v1085 && 1 <= v1086 && 2 <= v1088 && 1 <= v1090 && 2 <= v1089 && 1 <= v1086 && 1 <= v1090 && 4 <= v1091 && 4 <= v1092 && 4 <= v1093 && 4 <= v1094 && 4 <= v1095 && v1079 <= v1091 && v1080 <= v1092 && v1081 <= v1093 && v1082 <= v1094 && v1083 <= v1095
f_393(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, v1089, v1091, v1092, v1093, v1094, v1095, 0, 3, 2, 4) -> f_395(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: 0 = 0
f_395(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_397(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: 0 = 0
f_397(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_399(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: TRUE
f_399(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_401(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: 0 = 0
f_401(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_404(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: TRUE
f_404(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_406(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: 0 = 0
f_406(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_408(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: TRUE
f_408(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_410(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: TRUE
f_410(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, 1, v1088, v1090, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_412(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1088, v1086, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: 0 = 0
f_412(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1088, v1086, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) -> f_414(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1090, 1, v1088, v1086, 0, v1089, v1091, v1092, v1093, v1094, v1095, 3, 2, 4) :|: 0 < v1090 && 3 <= v1089 && 2 <= v1086
Combined rules. Obtained 2 rulesP rules:
f_391(v1079:0, v1080:0, v1081:0, v1082:0, v1083:0, v1084:0, v1085:0, v1328:0 + v1090:0, 1, v1088:0, v1090:0, v1089:0, v1091:0, v1092:0, v1093:0, v1094:0, v1095:0, 0, 3, 2, 4) -> f_391(v1079:0, v1080:0, v1081:0, v1082:0, v1083:0, v1084:0, v1085:0, v1090:0, 1, v1328:0 + v1090:0, v1328:0, v1328:0 + v1090:0, v1091:0, v1092:0, v1093:0, v1094:0, v1095:0, 0, 3, 2, 4) :|: v1328:0 + v1090:0 > v1090:0 && v1328:0 + v1090:0 > 1 && v1089:0 > 2 && v1079:0 > 0 && v1080:0 > 0 && v1081:0 > 0 && v1082:0 > 0 && v1083:0 > 0 && v1084:0 > 0 && v1085:0 > 1 && v1090:0 > 0 && v1091:0 > 3 && v1092:0 > 3 && v1093:0 > 3 && v1094:0 > 3 && v1095:0 > 3 && v1091:0 >= v1079:0 && v1092:0 >= v1080:0 && v1093:0 >= v1081:0 && v1094:0 >= v1082:0 && v1095:0 >= v1083:0 && v1328:0 > -1
f_391(v1079:0, v1080:0, v1081:0, v1082:0, v1083:0, v1084:0, v1085:0, v1086:0, 1, v1088:0, v1328:0 + v1086:0, v1089:0, v1091:0, v1092:0, v1093:0, v1094:0, v1095:0, 0, 3, 2, 4) -> f_391(v1079:0, v1080:0, v1081:0, v1082:0, v1083:0, v1084:0, v1085:0, v1086:0, 1, v1088:0, v1328:0, v1328:0 + v1086:0, v1091:0, v1092:0, v1093:0, v1094:0, v1095:0, 0, 3, 2, 4) :|: v1328:0 + v1086:0 >= v1086:0 && v1079:0 > 0 && v1080:0 > 0 && v1081:0 > 0 && v1082:0 > 0 && v1083:0 > 0 && v1084:0 > 0 && v1085:0 > 1 && v1086:0 > 0 && v1088:0 > 1 && v1328:0 + v1086:0 > 0 && v1089:0 > 1 && v1091:0 > 3 && v1092:0 > 3 && v1093:0 > 3 && v1094:0 > 3 && v1095:0 > 3 && v1328:0 > -1 && v1091:0 >= v1079:0 && v1092:0 >= v1080:0 && v1093:0 >= v1081:0 && v1094:0 >= v1082:0 && v1095:0 >= v1083:0
Filtered unneeded arguments:
   f_391(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_391(x1, x2, x3, x4, x5, x6, x7, x8, x10, x11, x12, x13, x14, x15, x16, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_391(v1079:0, v1080:0, v1081:0, v1082:0, v1083:0, v1084:0, v1085:0, sum~v1328:0~v1090:0, v1088:0, v1090:0, v1089:0, v1091:0, v1092:0, v1093:0, v1094:0, v1095:0) -> f_391(v1079:0, v1080:0, v1081:0, v1082:0, v1083:0, v1084:0, v1085:0, v1090:0, v1328:0 + v1090:0, v1328:0, v1328:0 + v1090:0, v1091:0, v1092:0, v1093:0, v1094:0, v1095:0) :|: v1328:0 + v1090:0 > 1 && v1328:0 + v1090:0 > v1090:0 && v1089:0 > 2 && v1079:0 > 0 && v1080:0 > 0 && v1081:0 > 0 && v1082:0 > 0 && v1083:0 > 0 && v1084:0 > 0 && v1085:0 > 1 && v1090:0 > 0 && v1091:0 > 3 && v1092:0 > 3 && v1093:0 > 3 && v1094:0 > 3 && v1095:0 > 3 && v1091:0 >= v1079:0 && v1092:0 >= v1080:0 && v1093:0 >= v1081:0 && v1094:0 >= v1082:0 && v1328:0 > -1 && v1095:0 >= v1083:0 && sum~v1328:0~v1090:0 = v1328:0 + v1090:0
f_391(v1079:0, v1080:0, v1081:0, v1082:0, v1083:0, v1084:0, v1085:0, v1086:0, v1088:0, sum~v1328:0~v1086:0, v1089:0, v1091:0, v1092:0, v1093:0, v1094:0, v1095:0) -> f_391(v1079:0, v1080:0, v1081:0, v1082:0, v1083:0, v1084:0, v1085:0, v1086:0, v1088:0, v1328:0, v1328:0 + v1086:0, v1091:0, v1092:0, v1093:0, v1094:0, v1095:0) :|: v1079:0 > 0 && v1328:0 + v1086:0 >= v1086:0 && v1080:0 > 0 && v1081:0 > 0 && v1082:0 > 0 && v1083:0 > 0 && v1084:0 > 0 && v1085:0 > 1 && v1086:0 > 0 && v1088:0 > 1 && v1328:0 + v1086:0 > 0 && v1089:0 > 1 && v1091:0 > 3 && v1092:0 > 3 && v1093:0 > 3 && v1094:0 > 3 && v1095:0 > 3 && v1328:0 > -1 && v1091:0 >= v1079:0 && v1092:0 >= v1080:0 && v1093:0 >= v1081:0 && v1095:0 >= v1083:0 && v1094:0 >= v1082:0 && sum~v1328:0~v1086:0 = v1328:0 + v1086:0

----------------------------------------

(9)
Obligation:
Rules:
f_391(v1079:0, v1080:0, v1081:0, v1082:0, v1083:0, v1084:0, v1085:0, sum~v1328:0~v1090:0, v1088:0, v1090:0, v1089:0, v1091:0, v1092:0, v1093:0, v1094:0, v1095:0) -> f_391(v1079:0, v1080:0, v1081:0, v1082:0, v1083:0, v1084:0, v1085:0, v1090:0, v1328:0 + v1090:0, v1328:0, v1328:0 + v1090:0, v1091:0, v1092:0, v1093:0, v1094:0, v1095:0) :|: v1328:0 + v1090:0 > 1 && v1328:0 + v1090:0 > v1090:0 && v1089:0 > 2 && v1079:0 > 0 && v1080:0 > 0 && v1081:0 > 0 && v1082:0 > 0 && v1083:0 > 0 && v1084:0 > 0 && v1085:0 > 1 && v1090:0 > 0 && v1091:0 > 3 && v1092:0 > 3 && v1093:0 > 3 && v1094:0 > 3 && v1095:0 > 3 && v1091:0 >= v1079:0 && v1092:0 >= v1080:0 && v1093:0 >= v1081:0 && v1094:0 >= v1082:0 && v1328:0 > -1 && v1095:0 >= v1083:0 && sum~v1328:0~v1090:0 = v1328:0 + v1090:0
f_391(x, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_391(x, x1, x2, x3, x4, x5, x6, x7, x8, x16, x16 + x7, x11, x12, x13, x14, x15) :|: x > 0 && x16 + x7 >= x7 && x1 > 0 && x2 > 0 && x3 > 0 && x4 > 0 && x5 > 0 && x6 > 1 && x7 > 0 && x8 > 1 && x16 + x7 > 0 && x10 > 1 && x11 > 3 && x12 > 3 && x13 > 3 && x14 > 3 && x15 > 3 && x16 > -1 && x11 >= x && x12 >= x1 && x13 >= x2 && x15 >= x4 && x14 >= x3 && x9 = x16 + x7

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_391(v1079:0:0, v1080:0:0, v1081:0:0, v1082:0:0, v1083:0:0, v1084:0:0, v1085:0:0, sum~v1328:0:0~v1090:0:0, v1088:0:0, v1090:0:0, v1089:0:0, v1091:0:0, v1092:0:0, v1093:0:0, v1094:0:0, v1095:0:0) -> f_391(v1079:0:0, v1080:0:0, v1081:0:0, v1082:0:0, v1083:0:0, v1084:0:0, v1085:0:0, v1090:0:0, v1328:0:0 + v1090:0:0, v1328:0:0, v1328:0:0 + v1090:0:0, v1091:0:0, v1092:0:0, v1093:0:0, v1094:0:0, v1095:0:0) :|: v1328:0:0 > -1 && v1095:0:0 >= v1083:0:0 && v1094:0:0 >= v1082:0:0 && v1093:0:0 >= v1081:0:0 && v1092:0:0 >= v1080:0:0 && v1091:0:0 >= v1079:0:0 && v1095:0:0 > 3 && v1094:0:0 > 3 && v1093:0:0 > 3 && v1092:0:0 > 3 && v1091:0:0 > 3 && v1090:0:0 > 0 && v1085:0:0 > 1 && v1084:0:0 > 0 && v1083:0:0 > 0 && v1082:0:0 > 0 && v1081:0:0 > 0 && v1080:0:0 > 0 && v1079:0:0 > 0 && v1089:0:0 > 2 && v1328:0:0 + v1090:0:0 > v1090:0:0 && v1328:0:0 + v1090:0:0 > 1 && sum~v1328:0:0~v1090:0:0 = v1328:0:0 + v1090:0:0
f_391(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, sum~x16:0~x7:0, x10:0, x11:0, x12:0, x13:0, x14:0, x15:0) -> f_391(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, x16:0, x16:0 + x7:0, x11:0, x12:0, x13:0, x14:0, x15:0) :|: x4:0 <= x15:0 && x3:0 <= x14:0 && x2:0 <= x13:0 && x1:0 <= x12:0 && x:0 <= x11:0 && x16:0 > -1 && x15:0 > 3 && x14:0 > 3 && x13:0 > 3 && x12:0 > 3 && x11:0 > 3 && x10:0 > 1 && x16:0 + x7:0 > 0 && x8:0 > 1 && x7:0 > 0 && x6:0 > 1 && x5:0 > 0 && x4:0 > 0 && x3:0 > 0 && x2:0 > 0 && x1:0 > 0 && x7:0 <= x16:0 + x7:0 && x:0 > 0 && sum~x16:0~x7:0 = x16:0 + x7:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_391 ] = f_391_10 + f_391_8

The following rules are decreasing:
f_391(v1079:0:0, v1080:0:0, v1081:0:0, v1082:0:0, v1083:0:0, v1084:0:0, v1085:0:0, sum~v1328:0:0~v1090:0:0, v1088:0:0, v1090:0:0, v1089:0:0, v1091:0:0, v1092:0:0, v1093:0:0, v1094:0:0, v1095:0:0) -> f_391(v1079:0:0, v1080:0:0, v1081:0:0, v1082:0:0, v1083:0:0, v1084:0:0, v1085:0:0, v1090:0:0, v1328:0:0 + v1090:0:0, v1328:0:0, v1328:0:0 + v1090:0:0, v1091:0:0, v1092:0:0, v1093:0:0, v1094:0:0, v1095:0:0) :|: v1328:0:0 > -1 && v1095:0:0 >= v1083:0:0 && v1094:0:0 >= v1082:0:0 && v1093:0:0 >= v1081:0:0 && v1092:0:0 >= v1080:0:0 && v1091:0:0 >= v1079:0:0 && v1095:0:0 > 3 && v1094:0:0 > 3 && v1093:0:0 > 3 && v1092:0:0 > 3 && v1091:0:0 > 3 && v1090:0:0 > 0 && v1085:0:0 > 1 && v1084:0:0 > 0 && v1083:0:0 > 0 && v1082:0:0 > 0 && v1081:0:0 > 0 && v1080:0:0 > 0 && v1079:0:0 > 0 && v1089:0:0 > 2 && v1328:0:0 + v1090:0:0 > v1090:0:0 && v1328:0:0 + v1090:0:0 > 1 && sum~v1328:0:0~v1090:0:0 = v1328:0:0 + v1090:0:0
f_391(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, sum~x16:0~x7:0, x10:0, x11:0, x12:0, x13:0, x14:0, x15:0) -> f_391(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, x16:0, x16:0 + x7:0, x11:0, x12:0, x13:0, x14:0, x15:0) :|: x4:0 <= x15:0 && x3:0 <= x14:0 && x2:0 <= x13:0 && x1:0 <= x12:0 && x:0 <= x11:0 && x16:0 > -1 && x15:0 > 3 && x14:0 > 3 && x13:0 > 3 && x12:0 > 3 && x11:0 > 3 && x10:0 > 1 && x16:0 + x7:0 > 0 && x8:0 > 1 && x7:0 > 0 && x6:0 > 1 && x5:0 > 0 && x4:0 > 0 && x3:0 > 0 && x2:0 > 0 && x1:0 > 0 && x7:0 <= x16:0 + x7:0 && x:0 > 0 && sum~x16:0~x7:0 = x16:0 + x7:0

The following rules are bounded:
f_391(v1079:0:0, v1080:0:0, v1081:0:0, v1082:0:0, v1083:0:0, v1084:0:0, v1085:0:0, sum~v1328:0:0~v1090:0:0, v1088:0:0, v1090:0:0, v1089:0:0, v1091:0:0, v1092:0:0, v1093:0:0, v1094:0:0, v1095:0:0) -> f_391(v1079:0:0, v1080:0:0, v1081:0:0, v1082:0:0, v1083:0:0, v1084:0:0, v1085:0:0, v1090:0:0, v1328:0:0 + v1090:0:0, v1328:0:0, v1328:0:0 + v1090:0:0, v1091:0:0, v1092:0:0, v1093:0:0, v1094:0:0, v1095:0:0) :|: v1328:0:0 > -1 && v1095:0:0 >= v1083:0:0 && v1094:0:0 >= v1082:0:0 && v1093:0:0 >= v1081:0:0 && v1092:0:0 >= v1080:0:0 && v1091:0:0 >= v1079:0:0 && v1095:0:0 > 3 && v1094:0:0 > 3 && v1093:0:0 > 3 && v1092:0:0 > 3 && v1091:0:0 > 3 && v1090:0:0 > 0 && v1085:0:0 > 1 && v1084:0:0 > 0 && v1083:0:0 > 0 && v1082:0:0 > 0 && v1081:0:0 > 0 && v1080:0:0 > 0 && v1079:0:0 > 0 && v1089:0:0 > 2 && v1328:0:0 + v1090:0:0 > v1090:0:0 && v1328:0:0 + v1090:0:0 > 1 && sum~v1328:0:0~v1090:0:0 = v1328:0:0 + v1090:0:0
f_391(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, sum~x16:0~x7:0, x10:0, x11:0, x12:0, x13:0, x14:0, x15:0) -> f_391(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, x16:0, x16:0 + x7:0, x11:0, x12:0, x13:0, x14:0, x15:0) :|: x4:0 <= x15:0 && x3:0 <= x14:0 && x2:0 <= x13:0 && x1:0 <= x12:0 && x:0 <= x11:0 && x16:0 > -1 && x15:0 > 3 && x14:0 > 3 && x13:0 > 3 && x12:0 > 3 && x11:0 > 3 && x10:0 > 1 && x16:0 + x7:0 > 0 && x8:0 > 1 && x7:0 > 0 && x6:0 > 1 && x5:0 > 0 && x4:0 > 0 && x3:0 > 0 && x2:0 > 0 && x1:0 > 0 && x7:0 <= x16:0 + x7:0 && x:0 > 0 && sum~x16:0~x7:0 = x16:0 + x7:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_253(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 4) -> f_255(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 4) :|: 0 = 0
f_255(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 4) -> f_257(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 2, 4) :|: v104 <= v107 && 1 <= v107 && 2 <= v106
f_257(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 2, 4) -> f_260(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 2, 4) :|: 0 = 0
f_260(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 2, 4) -> f_263(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 2, 4) :|: TRUE
f_263(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 2, 4) -> f_266(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 2, 4) :|: 0 = 0
f_266(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 2, 4) -> f_269(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 2, 4) :|: 0 = 0
f_269(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 2, 4) -> f_272(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 2, 4) :|: 0 = 0
f_272(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 2, 4) -> f_275(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 2, 4) :|: TRUE
f_275(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 2, 4) -> f_278(v98, v99, v100, v101, v102, v103, v104, 1, v107, v108, v109, v110, v111, v112, 0, 3, 4) :|: 0 = 0
f_278(v98, v99, v100, v101, v102, v103, v104, 1, v107, v108, v109, v110, v111, v112, 0, 3, 4) -> f_281(v98, v99, v100, v101, v102, v103, v104, 1, v107, v108, v109, v110, v111, v112, 0, 3, 4) :|: 0 = 0
f_281(v98, v99, v100, v101, v102, v103, v104, 1, v107, v108, v109, v110, v111, v112, 0, 3, 4) -> f_285(v98, v99, v100, v101, v102, v103, v104, 1, v107, v214, v108, v109, v110, v111, v112, 0, 3, 4) :|: v214 + v104 = v107 && 0 <= v214
f_285(v98, v99, v100, v101, v102, v103, v104, 1, v107, v214, v108, v109, v110, v111, v112, 0, 3, 4) -> f_289(v98, v99, v100, v101, v102, v103, v104, 1, v107, v214, v108, v109, v110, v111, v112, 0, 3, 4) :|: TRUE
f_289(v98, v99, v100, v101, v102, v103, v104, 1, v107, v214, v108, v109, v110, v111, v112, 0, 3, 4) -> f_294(v98, v99, v100, v101, v102, v103, v104, 1, v107, v214, v108, v109, v110, v111, v112, 0, 3, 4) :|: TRUE
f_294(v98, v99, v100, v101, v102, v103, v104, 1, v107, v214, v108, v109, v110, v111, v112, 0, 3, 4) -> f_251(v98, v99, v100, v101, v102, v103, v104, 1, v107, v214, v108, v109, v110, v111, v112, 0, 3, 4) :|: 1 <= v98 && 1 <= v99 && 1 <= v100 && 1 <= v101 && 1 <= v102 && 1 <= v103 && 1 <= v104 && 1 <= v107 && 0 <= v214 && 4 <= v108 && 4 <= v109 && 4 <= v110 && 4 <= v111 && 4 <= v112 && v98 <= v108 && v99 <= v109 && v100 <= v110 && v101 <= v111 && v102 <= v112
f_251(v98, v99, v100, v101, v102, v103, v104, 1, v106, v107, v108, v109, v110, v111, v112, 0, 3, 4) -> f_253(v98, v99, v100, v101, v102, v103, v104, 1, v107, v106, v108, v109, v110, v111, v112, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_253(v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, v104:0, 1, v214:0 + v104:0, v106:0, v108:0, v109:0, v110:0, v111:0, v112:0, 0, 3, 4) -> f_253(v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, v104:0, 1, v214:0, v214:0 + v104:0, v108:0, v109:0, v110:0, v111:0, v112:0, 0, 3, 4) :|: v99:0 > 0 && v98:0 > 0 && v100:0 > 0 && v101:0 > 0 && v102:0 > 0 && v103:0 > 0 && v214:0 + v104:0 > 0 && v214:0 + v104:0 >= v104:0 && v104:0 > 0 && v106:0 > 1 && v214:0 > -1 && v108:0 > 3 && v109:0 > 3 && v110:0 > 3 && v111:0 > 3 && v112:0 > 3 && v98:0 <= v108:0 && v99:0 <= v109:0 && v110:0 >= v100:0 && v112:0 >= v102:0 && v111:0 >= v101:0
Filtered unneeded arguments:
   f_253(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_253(x1, x2, x3, x4, x5, x6, x7, x9, x10, x11, x12, x13, x14, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_253(v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, v104:0, sum~v214:0~v104:0, v106:0, v108:0, v109:0, v110:0, v111:0, v112:0) -> f_253(v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, v104:0, v214:0, v214:0 + v104:0, v108:0, v109:0, v110:0, v111:0, v112:0) :|: v98:0 > 0 && v99:0 > 0 && v100:0 > 0 && v101:0 > 0 && v102:0 > 0 && v103:0 > 0 && v214:0 + v104:0 > 0 && v214:0 + v104:0 >= v104:0 && v104:0 > 0 && v106:0 > 1 && v214:0 > -1 && v108:0 > 3 && v109:0 > 3 && v110:0 > 3 && v111:0 > 3 && v112:0 > 3 && v98:0 <= v108:0 && v99:0 <= v109:0 && v110:0 >= v100:0 && v111:0 >= v101:0 && v112:0 >= v102:0 && sum~v214:0~v104:0 = v214:0 + v104:0

----------------------------------------

(16)
Obligation:
Rules:
f_253(v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, v104:0, sum~v214:0~v104:0, v106:0, v108:0, v109:0, v110:0, v111:0, v112:0) -> f_253(v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, v104:0, v214:0, v214:0 + v104:0, v108:0, v109:0, v110:0, v111:0, v112:0) :|: v98:0 > 0 && v99:0 > 0 && v100:0 > 0 && v101:0 > 0 && v102:0 > 0 && v103:0 > 0 && v214:0 + v104:0 > 0 && v214:0 + v104:0 >= v104:0 && v104:0 > 0 && v106:0 > 1 && v214:0 > -1 && v108:0 > 3 && v109:0 > 3 && v110:0 > 3 && v111:0 > 3 && v112:0 > 3 && v98:0 <= v108:0 && v99:0 <= v109:0 && v110:0 >= v100:0 && v111:0 >= v101:0 && v112:0 >= v102:0 && sum~v214:0~v104:0 = v214:0 + v104:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_253(v98:0:0, v99:0:0, v100:0:0, v101:0:0, v102:0:0, v103:0:0, v104:0:0, sum~v214:0:0~v104:0:0, v106:0:0, v108:0:0, v109:0:0, v110:0:0, v111:0:0, v112:0:0) -> f_253(v98:0:0, v99:0:0, v100:0:0, v101:0:0, v102:0:0, v103:0:0, v104:0:0, v214:0:0, v214:0:0 + v104:0:0, v108:0:0, v109:0:0, v110:0:0, v111:0:0, v112:0:0) :|: v111:0:0 >= v101:0:0 && v112:0:0 >= v102:0:0 && v110:0:0 >= v100:0:0 && v99:0:0 <= v109:0:0 && v98:0:0 <= v108:0:0 && v112:0:0 > 3 && v111:0:0 > 3 && v110:0:0 > 3 && v109:0:0 > 3 && v108:0:0 > 3 && v214:0:0 > -1 && v106:0:0 > 1 && v104:0:0 > 0 && v214:0:0 + v104:0:0 >= v104:0:0 && v214:0:0 + v104:0:0 > 0 && v103:0:0 > 0 && v102:0:0 > 0 && v101:0:0 > 0 && v100:0:0 > 0 && v99:0:0 > 0 && v98:0:0 > 0 && sum~v214:0:0~v104:0:0 = v214:0:0 + v104:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_253 ] = f_253_8

The following rules are decreasing:
f_253(v98:0:0, v99:0:0, v100:0:0, v101:0:0, v102:0:0, v103:0:0, v104:0:0, sum~v214:0:0~v104:0:0, v106:0:0, v108:0:0, v109:0:0, v110:0:0, v111:0:0, v112:0:0) -> f_253(v98:0:0, v99:0:0, v100:0:0, v101:0:0, v102:0:0, v103:0:0, v104:0:0, v214:0:0, v214:0:0 + v104:0:0, v108:0:0, v109:0:0, v110:0:0, v111:0:0, v112:0:0) :|: v111:0:0 >= v101:0:0 && v112:0:0 >= v102:0:0 && v110:0:0 >= v100:0:0 && v99:0:0 <= v109:0:0 && v98:0:0 <= v108:0:0 && v112:0:0 > 3 && v111:0:0 > 3 && v110:0:0 > 3 && v109:0:0 > 3 && v108:0:0 > 3 && v214:0:0 > -1 && v106:0:0 > 1 && v104:0:0 > 0 && v214:0:0 + v104:0:0 >= v104:0:0 && v214:0:0 + v104:0:0 > 0 && v103:0:0 > 0 && v102:0:0 > 0 && v101:0:0 > 0 && v100:0:0 > 0 && v99:0:0 > 0 && v98:0:0 > 0 && sum~v214:0:0~v104:0:0 = v214:0:0 + v104:0:0

The following rules are bounded:
f_253(v98:0:0, v99:0:0, v100:0:0, v101:0:0, v102:0:0, v103:0:0, v104:0:0, sum~v214:0:0~v104:0:0, v106:0:0, v108:0:0, v109:0:0, v110:0:0, v111:0:0, v112:0:0) -> f_253(v98:0:0, v99:0:0, v100:0:0, v101:0:0, v102:0:0, v103:0:0, v104:0:0, v214:0:0, v214:0:0 + v104:0:0, v108:0:0, v109:0:0, v110:0:0, v111:0:0, v112:0:0) :|: v111:0:0 >= v101:0:0 && v112:0:0 >= v102:0:0 && v110:0:0 >= v100:0:0 && v99:0:0 <= v109:0:0 && v98:0:0 <= v108:0:0 && v112:0:0 > 3 && v111:0:0 > 3 && v110:0:0 > 3 && v109:0:0 > 3 && v108:0:0 > 3 && v214:0:0 > -1 && v106:0:0 > 1 && v104:0:0 > 0 && v214:0:0 + v104:0:0 >= v104:0:0 && v214:0:0 + v104:0:0 > 0 && v103:0:0 > 0 && v102:0:0 > 0 && v101:0:0 > 0 && v100:0:0 > 0 && v99:0:0 > 0 && v98:0:0 > 0 && sum~v214:0:0~v104:0:0 = v214:0:0 + v104:0:0


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
