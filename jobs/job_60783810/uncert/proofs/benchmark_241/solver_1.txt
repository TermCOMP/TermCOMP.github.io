YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/SxODe.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 54 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 947 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 34 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/SxODe.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/SxODe.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%3 = alloca i32, align 4
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = load %3
		%6 = icmp eq %5 0
		br %6, %7, %8
	7:
		store null, %2
		br %20
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%9 = call noalias *i8 @malloc(i64 16)
		%10 = bitcast *i8 %9 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %10, %4
		%11 = call i32 (...)* @__VERIFIER_nondet_int()
		%12 = load %4
		%13 = getelementptr %12, 0, 0
		store %11, %13
		%14 = load %3
		%15 = sub i32 %14, 1
		%16 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %15)
		%17 = load %4
		%18 = getelementptr %17, 0, 1
		store %16, %18
		%19 = load %4
		store %19, %2
		br %20
	20:
		%21 = load %2
		ret %21

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 40
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %7, %8
	7:
		store 0, %1
		br %11
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		%9 = load %2
		%10 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %9)
		store %10, %3
		store 0, %1
		br %11
	11:
		%12 = load %1
		ret %12


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_225(v56, v65, v57, v58, v59, v60, v61, v62, v66, 0, v64, 3, 7, 1, 4, 8) -> f_226(v56, v65, v67, v57, v58, v59, v60, v61, v62, v66, v68, 0, v64, 3, 7, 1, 4, 8) :|: 1 <= v67 && v68 = 3 + v67 && 4 <= v68
f_226(v56, v65, v67, v57, v58, v59, v60, v61, v62, v66, v68, 0, v64, 3, 7, 1, 4, 8) -> f_227(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) :|: 1 <= v69 && v70 = 7 + v69 && 8 <= v70
f_227(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) -> f_228(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) :|: TRUE
f_228(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) -> f_229(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) :|: TRUE
f_229(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) -> f_230(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) :|: 0 = 0
f_230(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) -> f_232(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) :|: v56 != 0
f_232(v56, v65, v67, v69, v57, v58, v59, v60, v61, v62, v66, v68, v70, 0, v64, 3, 7, 1, 4, 8) -> f_234(v56, v65, v67, v69, 0, v57, v58, v59, v60, v61, v62, v66, v68, v70, v64, 3, 7, 1, 4, 8) :|: 0 = 0
f_234(v56, v65, v67, v69, 0, v57, v58, v59, v60, v61, v62, v66, v68, v70, v64, 3, 7, 1, 4, 8) -> f_236(v56, v65, v67, v69, 0, v57, v58, v59, v60, v61, v62, v66, v68, v70, v64, 3, 7, 1, 4, 8) :|: TRUE
f_236(v56, v65, v67, v69, 0, v57, v58, v59, v60, v61, v62, v66, v68, v70, v64, 3, 7, 1, 4, 8) -> f_238(v56, v65, v67, v69, 0, v57, v58, v59, v60, v61, v62, v66, v68, v70, v64, 3, 7, 1, 4, 8) :|: TRUE
f_238(v56, v65, v67, v69, 0, v57, v58, v59, v60, v61, v62, v66, v68, v70, v64, 3, 7, 1, 4, 8) -> f_240(v56, v65, v67, v69, 0, v72, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: v73 = 15 + v72 && v72 % 4 = 0 && 16 <= v73
f_240(v56, v65, v67, v69, 0, v72, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_242(v56, v65, v67, v69, 0, v72, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: 0 = 0
f_242(v56, v65, v67, v69, 0, v72, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_244(v56, v65, v67, v69, 0, v72, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: TRUE
f_244(v56, v65, v67, v69, 0, v72, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_245(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: TRUE
f_245(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_246(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: 0 = 0
f_246(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_247(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: 0 = 0
f_247(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_248(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: TRUE
f_248(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_249(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: 0 = 0
f_249(v56, v65, v67, v69, 0, v72, v88, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_250(v56, v65, v67, v69, 0, v72, v88, v90, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) :|: 1 + v90 = v56 && 0 <= v90
f_250(v56, v65, v67, v69, 0, v72, v88, v90, v57, v58, v59, v60, v61, v62, v66, v68, v70, v73, v64, 3, 7, 15, 4, 1, 8, 16) -> f_251(v90, v57, v58, v59, v60, v61, v62, v65, v66, v67, v68, v69, v70, v72, v73, 0, v64, v56, v88, 3, 7, 15, 4, 1, 8, 16) :|: 0 = 0
f_251(v90, v57, v58, v59, v60, v61, v62, v65, v66, v67, v68, v69, v70, v72, v73, 0, v64, v56, v88, 3, 7, 15, 4, 1, 8, 16) -> f_252(v90, v57, v58, v59, v60, v61, v62, v65, v66, v67, v68, v69, v70, v72, v73, 0, v64, v56, v88, 3, 7, 15, 4, 1, 8, 16) :|: TRUE
f_252(v90, v57, v58, v59, v60, v61, v62, v65, v66, v67, v68, v69, v70, v72, v73, 0, v64, v56, v88, 3, 7, 15, 4, 1, 8, 16) -> f_224(v90, v57, v58, v59, v60, v61, v62, 0, v64, 3, 7, 1, 4, 8) :|: TRUE
f_224(v56, v57, v58, v59, v60, v61, v62, 0, v64, 3, 7, 1, 4, 8) -> f_225(v56, v65, v57, v58, v59, v60, v61, v62, v66, 0, v64, 3, 7, 1, 4, 8) :|: 1 <= v65 && v66 = 7 + v65 && 8 <= v66
Combined rules. Obtained 1 rulesP rules:
f_225(1 + v90:0, v65:0, v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, v66:0, 0, v64:0, 3, 7, 1, 4, 8) -> f_225(v90:0, v65:1, v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, 7 + v65:1, 0, v64:0, 3, 7, 1, 4, 8) :|: v69:0 > 0 && v67:0 > 0 && v90:0 > -1 && v72:0 % 4 = 0 && v72:0 > 0 && v65:1 > 0
Filtered unneeded arguments:
   f_225(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_225(x1)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_225(sum~cons_1~v90:0) -> f_225(v90:0) :|: v90:0 > -1 && sum~cons_1~v90:0 = 1 + v90:0

----------------------------------------

(8)
Obligation:
Rules:
f_225(sum~cons_1~v90:0) -> f_225(v90:0) :|: v90:0 > -1 && sum~cons_1~v90:0 = 1 + v90:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_225(sum~cons_1~v90:0:0) -> f_225(v90:0:0) :|: v90:0:0 > -1 && sum~cons_1~v90:0:0 = 1 + v90:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_225(x)] = x

The following rules are decreasing:
f_225(sum~cons_1~v90:0:0) -> f_225(v90:0:0) :|: v90:0:0 > -1 && sum~cons_1~v90:0:0 = 1 + v90:0:0
The following rules are bounded:
f_225(sum~cons_1~v90:0:0) -> f_225(v90:0:0) :|: v90:0:0 > -1 && sum~cons_1~v90:0:0 = 1 + v90:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
