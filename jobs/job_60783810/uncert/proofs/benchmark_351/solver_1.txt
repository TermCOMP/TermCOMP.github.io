YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/CHzxc.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 292 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 37 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 17 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/CHzxc.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/CHzxc.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		br %7
	7:
		%8 = load %2
		%9 = icmp sge %8 0
		br %9, %10, %13
	10:
		%11 = load %3
		%12 = icmp sge %11 0
		br %13
	13:
		%14 = phi [0, %7], [%12, %10]
		br %14, %15, %21
	15:
		%16 = load %2
		store %16, %4
		%17 = load %3
		%18 = sub i32 %17, 1
		store %18, %2
		%19 = load %4
		%20 = sub i32 %19, 1
		store %20, %3
		br %7
	21:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_164(v117, v118, v119, v120, v121, v122, v126, 1, v125, v123, v127, v128, v129, v130, v131, 0, 3, 4) -> f_165(v117, v118, v119, v120, v121, v122, v126, 1, v125, v123, v127, v128, v129, v130, v131, 0, 3, 4) :|: 0 <= v126 && 1 <= v125
f_165(v117, v118, v119, v120, v121, v122, v126, 1, v125, v123, v127, v128, v129, v130, v131, 0, 3, 4) -> f_167(v117, v118, v119, v120, v121, v122, v126, 1, v125, v123, v127, v128, v129, v130, v131, 0, 3, 4) :|: 0 = 0
f_167(v117, v118, v119, v120, v121, v122, v126, 1, v125, v123, v127, v128, v129, v130, v131, 0, 3, 4) -> f_169(v117, v118, v119, v120, v121, v122, v126, 1, v125, v123, v127, v128, v129, v130, v131, 0, 3, 4) :|: TRUE
f_169(v117, v118, v119, v120, v121, v122, v126, 1, v125, v123, v127, v128, v129, v130, v131, 0, 3, 4) -> f_171(v117, v118, v119, v120, v121, v122, v126, 1, v127, v123, v125, v128, v129, v130, v131, 0, 3, 4) :|: 0 = 0
f_171(v117, v118, v119, v120, v121, v122, v126, 1, v127, v123, v125, v128, v129, v130, v131, 0, 3, 4) -> f_173(v117, v118, v119, v120, v121, v122, v126, 1, v127, v123, v125, v128, v129, v130, v131, 0, 3, 4) :|: 0 <= v127 && 1 <= v123
f_173(v117, v118, v119, v120, v121, v122, v126, 1, v127, v123, v125, v128, v129, v130, v131, 0, 3, 4) -> f_175(v117, v118, v119, v120, v121, v122, v126, 1, v127, v123, v125, v128, v129, v130, v131, 0, 3, 4) :|: 0 = 0
f_175(v117, v118, v119, v120, v121, v122, v126, 1, v127, v123, v125, v128, v129, v130, v131, 0, 3, 4) -> f_177(v117, v118, v119, v120, v121, v122, v126, 1, v127, v123, v125, v128, v129, v130, v131, 0, 3, 4) :|: 0 = 0
f_177(v117, v118, v119, v120, v121, v122, v126, 1, v127, v123, v125, v128, v129, v130, v131, 0, 3, 4) -> f_179(v117, v118, v119, v120, v121, v122, v126, 1, v127, v123, v125, v128, v129, v130, v131, 0, 3, 4) :|: TRUE
f_179(v117, v118, v119, v120, v121, v122, v126, 1, v127, v123, v125, v128, v129, v130, v131, 0, 3, 4) -> f_181(v117, v118, v119, v120, v121, v122, v126, 1, v127, v125, v123, v128, v129, v130, v131, 0, 3, 4) :|: 0 = 0
f_181(v117, v118, v119, v120, v121, v122, v126, 1, v127, v125, v123, v128, v129, v130, v131, 0, 3, 4) -> f_182(v117, v118, v119, v120, v121, v122, v126, 1, v127, v125, v123, v128, v129, v130, v131, 0, 3, 4) :|: TRUE
f_182(v117, v118, v119, v120, v121, v122, v126, 1, v127, v125, v123, v128, v129, v130, v131, 0, 3, 4) -> f_183(v117, v118, v119, v120, v121, v122, v126, 1, v127, v123, v128, v129, v130, v131, 0, 3, 4) :|: 0 = 0
f_183(v117, v118, v119, v120, v121, v122, v126, 1, v127, v123, v128, v129, v130, v131, 0, 3, 4) -> f_184(v117, v118, v119, v120, v121, v122, v126, 1, v127, v205, v123, v128, v129, v130, v131, 0, 3, 4) :|: 1 + v205 = v127 && 0 <= 1 + v205
f_184(v117, v118, v119, v120, v121, v122, v126, 1, v127, v205, v123, v128, v129, v130, v131, 0, 3, 4) -> f_185(v117, v118, v119, v120, v121, v122, v126, 1, v127, v205, v123, v128, v129, v130, v131, 0, 3, 4) :|: TRUE
f_185(v117, v118, v119, v120, v121, v122, v126, 1, v127, v205, v123, v128, v129, v130, v131, 0, 3, 4) -> f_186(v117, v118, v119, v120, v121, v122, v126, 1, v127, v205, v128, v129, v130, v131, 0, 3, 4) :|: 0 = 0
f_186(v117, v118, v119, v120, v121, v122, v126, 1, v127, v205, v128, v129, v130, v131, 0, 3, 4) -> f_187(v117, v118, v119, v120, v121, v122, v126, 1, v127, v205, v207, v128, v129, v130, v131, 0, 3, 4) :|: 1 + v207 = v126 && 0 <= 1 + v207
f_187(v117, v118, v119, v120, v121, v122, v126, 1, v127, v205, v207, v128, v129, v130, v131, 0, 3, 4) -> f_188(v117, v118, v119, v120, v121, v122, v126, 1, v127, v205, v207, v128, v129, v130, v131, 0, 3, 4) :|: TRUE
f_188(v117, v118, v119, v120, v121, v122, v126, 1, v127, v205, v207, v128, v129, v130, v131, 0, 3, 4) -> f_189(v117, v118, v119, v120, v121, v122, v126, 1, v127, v205, v207, v128, v129, v130, v131, 0, 3, 4) :|: TRUE
f_189(v117, v118, v119, v120, v121, v122, v126, 1, v127, v205, v207, v128, v129, v130, v131, 0, 3, 4) -> f_163(v117, v118, v119, v120, v121, v122, v126, 1, v127, v205, v207, v128, v129, v130, v131, 0, 3, 4) :|: TRUE
f_163(v117, v118, v119, v120, v121, v122, v123, 1, v125, v126, v127, v128, v129, v130, v131, 0, 3, 4) -> f_164(v117, v118, v119, v120, v121, v122, v126, 1, v125, v123, v127, v128, v129, v130, v131, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_164(v117:0, v118:0, v119:0, v120:0, v121:0, v122:0, 1 + v207:0, 1, v125:0, v123:0, 1 + v205:0, v128:0, v129:0, v130:0, v131:0, 0, 3, 4) -> f_164(v117:0, v118:0, v119:0, v120:0, v121:0, v122:0, v205:0, 1, 1 + v205:0, 1 + v207:0, v207:0, v128:0, v129:0, v130:0, v131:0, 0, 3, 4) :|: v125:0 > 0 && v207:0 > -2 && v123:0 > 0 && v205:0 > -2
Filtered unneeded arguments:
   f_164(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_164(x7, x9, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_164(sum~cons_1~v207:0, v125:0, v123:0, sum~cons_1~v205:0) -> f_164(v205:0, 1 + v205:0, 1 + v207:0, v207:0) :|: v207:0 > -2 && v125:0 > 0 && v205:0 > -2 && v123:0 > 0 && sum~cons_1~v207:0 = 1 + v207:0 && sum~cons_1~v205:0 = 1 + v205:0

----------------------------------------

(8)
Obligation:
Rules:
f_164(sum~cons_1~v207:0, v125:0, v123:0, sum~cons_1~v205:0) -> f_164(v205:0, 1 + v205:0, 1 + v207:0, v207:0) :|: v207:0 > -2 && v125:0 > 0 && v205:0 > -2 && v123:0 > 0 && sum~cons_1~v207:0 = 1 + v207:0 && sum~cons_1~v205:0 = 1 + v205:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_164(sum~cons_1~v207:0:0, v125:0:0, v123:0:0, sum~cons_1~v205:0:0) -> f_164(v205:0:0, 1 + v205:0:0, 1 + v207:0:0, v207:0:0) :|: v205:0:0 > -2 && v123:0:0 > 0 && v125:0:0 > 0 && v207:0:0 > -2 && sum~cons_1~v207:0:0 = 1 + v207:0:0 && sum~cons_1~v205:0:0 = 1 + v205:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_164 ] = 1/2*f_164_4 + 1/2*f_164_1

The following rules are decreasing:
f_164(sum~cons_1~v207:0:0, v125:0:0, v123:0:0, sum~cons_1~v205:0:0) -> f_164(v205:0:0, 1 + v205:0:0, 1 + v207:0:0, v207:0:0) :|: v205:0:0 > -2 && v123:0:0 > 0 && v125:0:0 > 0 && v207:0:0 > -2 && sum~cons_1~v207:0:0 = 1 + v207:0:0 && sum~cons_1~v205:0:0 = 1 + v205:0:0

The following rules are bounded:
f_164(sum~cons_1~v207:0:0, v125:0:0, v123:0:0, sum~cons_1~v205:0:0) -> f_164(v205:0:0, 1 + v205:0:0, 1 + v207:0:0, v207:0:0) :|: v205:0:0 > -2 && v123:0:0 > 0 && v125:0:0 > 0 && v207:0:0 > -2 && sum~cons_1~v207:0:0 = 1 + v207:0:0 && sum~cons_1~v205:0:0 = 1 + v205:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
