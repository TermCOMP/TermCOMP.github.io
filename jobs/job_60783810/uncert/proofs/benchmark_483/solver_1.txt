YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/NaKp2.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 681 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 23 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 10 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (17) YES
    (18) LLVM Symbolic Execution SCC
        (19) SCC2IRS [SOUND, 17 ms]
        (20) IntTRS
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IntTRS
        (23) RankingReductionPairProof [EQUIVALENT, 10 ms]
        (24) YES
    (25) LLVM Symbolic Execution SCC
        (26) SCC2IRS [SOUND, 18 ms]
        (27) IntTRS
        (28) TerminationGraphProcessor [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/NaKp2.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/NaKp2.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sge %7 0
		br %8, %9, %20
	9:
		store 1, %3
		br %10
	10:
		%11 = load %3
		%12 = load %2
		%13 = icmp slt %11 %12
		br %13, %14, %17
	14:
		%15 = load %3
		%16 = mul i32 2, %15
		store %16, %3
		br %10
	17:
		%18 = load %2
		%19 = sub i32 %18, 1
		store %19, %2
		br %6
	20:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 35 rulesP rules:
f_328(v487, v488, v489, v490, v491, v492, 1, v494, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_329(v487, v488, v489, v490, v491, v492, 1, v494, v502, v497, v498, v499, v500, 0, 3, 2, 4) :|: v502 = 2 * v494 && 2 <= v502
f_329(v487, v488, v489, v490, v491, v492, 1, v494, v502, v497, v498, v499, v500, 0, 3, 2, 4) -> f_330(v487, v488, v489, v490, v491, v492, 1, v494, v502, v497, v498, v499, v500, 0, 3, 2, 4) :|: TRUE
f_330(v487, v488, v489, v490, v491, v492, 1, v494, v502, v497, v498, v499, v500, 0, 3, 2, 4) -> f_331(v487, v488, v489, v490, v491, v492, 1, v494, v502, v497, v498, v499, v500, 0, 3, 2, 4) :|: TRUE
f_331(v487, v488, v489, v490, v491, v492, 1, v494, v502, v497, v498, v499, v500, 0, 3, 2, 4) -> f_332(v487, v488, v489, v490, v491, v492, 1, v502, v494, v497, v498, v499, v500, 0, 3, 2, 4) :|: 0 = 0
f_332(v487, v488, v489, v490, v491, v492, 1, v502, v494, v497, v498, v499, v500, 0, 3, 2, 4) -> f_333(v487, v488, v489, v490, v491, v492, 1, v502, v494, v497, v498, v499, v500, 0, 3, 2, 4) :|: 0 = 0
f_333(v487, v488, v489, v490, v491, v492, 1, v502, v494, v497, v498, v499, v500, 0, 3, 2, 4) -> f_334(v487, v488, v489, v490, v491, v492, 1, v502, v494, v497, v498, v499, v500, 0, 3, 2, 4) :|: v502 < v492 && 3 <= v492 && 4 <= v497 && 4 <= v490
f_333(v487, v488, v489, v490, v491, v492, 1, v502, v494, v497, v498, v499, v500, 0, 3, 2, 4) -> f_335(v487, v488, v489, v490, v491, v492, 1, v502, v494, v497, v498, v499, v500, 0, 3, 2, 4) :|: v492 <= v502
f_334(v487, v488, v489, v490, v491, v492, 1, v502, v494, v497, v498, v499, v500, 0, 3, 2, 4) -> f_336(v487, v488, v489, v490, v491, v492, 1, v502, v494, v497, v498, v499, v500, 0, 3, 2, 4) :|: 0 = 0
f_336(v487, v488, v489, v490, v491, v492, 1, v502, v494, v497, v498, v499, v500, 0, 3, 2, 4) -> f_338(v487, v488, v489, v490, v491, v492, 1, v502, v494, v497, v498, v499, v500, 0, 3, 2, 4) :|: TRUE
f_338(v487, v488, v489, v490, v491, v492, 1, v502, v494, v497, v498, v499, v500, 0, 3, 2, 4) -> f_327(v487, v488, v489, v490, v491, v492, 1, v502, v494, v502, v497, v498, v499, v500, 0, 3, 2, 4) :|: TRUE
f_327(v487, v488, v489, v490, v491, v492, 1, v494, v495, v496, v497, v498, v499, v500, 0, 3, 2, 4) -> f_328(v487, v488, v489, v490, v491, v492, 1, v494, v496, v497, v498, v499, v500, 0, 3, 2, 4) :|: 0 = 0
f_335(v487, v488, v489, v490, v491, v492, 1, v502, v494, v497, v498, v499, v500, 0, 3, 2, 4) -> f_337(v487, v488, v489, v490, v491, v492, 1, v502, 0, v494, v497, v498, v499, v500, 3, 2, 4) :|: 0 = 0
f_337(v487, v488, v489, v490, v491, v492, 1, v502, 0, v494, v497, v498, v499, v500, 3, 2, 4) -> f_339(v487, v488, v489, v490, v491, v492, 1, v502, 0, v494, v497, v498, v499, v500, 3, 2, 4) :|: TRUE
f_339(v487, v488, v489, v490, v491, v492, 1, v502, 0, v494, v497, v498, v499, v500, 3, 2, 4) -> f_358(v487, v488, v489, v490, v491, v492, 1, v502, 0, v494, v502, v497, v498, v499, v500, 3, 2, 4) :|: TRUE
f_358(v686, v687, v688, v689, v690, v691, 1, v693, 0, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_359(v686, v687, v688, v689, v690, v691, 1, v693, 0, v695, v696, v698, v699, v700, 3, 2, 4) :|: 0 = 0
f_359(v686, v687, v688, v689, v690, v691, 1, v693, 0, v695, v696, v698, v699, v700, 3, 2, 4) -> f_360(v686, v687, v688, v689, v690, v691, 1, v693, 0, v695, v696, v701, v698, v699, v700, 3, 2, 4) :|: 1 + v701 = v691 && 0 <= 1 + v701
f_360(v686, v687, v688, v689, v690, v691, 1, v693, 0, v695, v696, v701, v698, v699, v700, 3, 2, 4) -> f_361(v686, v687, v688, v689, v690, v691, 1, v693, 0, v695, v696, v701, v698, v699, v700, 3, 2, 4) :|: TRUE
f_361(v686, v687, v688, v689, v690, v691, 1, v693, 0, v695, v696, v701, v698, v699, v700, 3, 2, 4) -> f_362(v686, v687, v688, v689, v690, v691, 1, v693, 0, v695, v696, v701, v698, v699, v700, 3, 2, 4) :|: TRUE
f_362(v686, v687, v688, v689, v690, v691, 1, v693, 0, v695, v696, v701, v698, v699, v700, 3, 2, 4) -> f_363(v686, v687, v688, v689, v690, v701, 1, v693, v691, 0, v695, v696, v698, v699, v700, 3, 2, 4) :|: 0 = 0
f_363(v686, v687, v688, v689, v690, v701, 1, v693, v691, 0, v695, v696, v698, v699, v700, 3, 2, 4) -> f_364(v686, v687, v688, v689, v690, v701, 1, v693, v691, 0, v695, v696, v698, v699, v700, 3, 2, 4) :|: 0 <= v701 && 1 <= v691
f_364(v686, v687, v688, v689, v690, v701, 1, v693, v691, 0, v695, v696, v698, v699, v700, 3, 2, 4) -> f_366(v686, v687, v688, v689, v690, v701, 1, v693, v691, 0, v695, v696, v698, v699, v700, 3, 2, 4) :|: 0 = 0
f_366(v686, v687, v688, v689, v690, v701, 1, v693, v691, 0, v695, v696, v698, v699, v700, 3, 2, 4) -> f_368(v686, v687, v688, v689, v690, v701, 1, v693, v691, 0, v695, v696, v698, v699, v700, 3, 2, 4) :|: TRUE
f_368(v686, v687, v688, v689, v690, v701, 1, v693, v691, 0, v695, v696, v698, v699, v700, 3, 2, 4) -> f_370(v686, v687, v688, v689, v690, v701, 1, v693, v691, 0, v695, v696, v698, v699, v700, 3, 2, 4) :|: TRUE
f_370(v686, v687, v688, v689, v690, v701, 1, v693, v691, 0, v695, v696, v698, v699, v700, 3, 2, 4) -> f_371(v686, v687, v688, v689, v690, v701, 1, v693, v691, 0, v695, v696, v698, v699, v700, 3, 2, 4) :|: TRUE
f_371(v686, v687, v688, v689, v690, v701, 1, v693, v691, 0, v695, v696, v698, v699, v700, 3, 2, 4) -> f_349(v686, v687, v688, v689, v690, v701, 1, v693, v691, 0, v695, v696, v698, v699, v700, 3, 2, 4) :|: TRUE
f_349(v617, v618, v619, v620, v621, v622, 1, v624, v625, 0, v627, v628, v629, v630, v631, 3, 2, 4) -> f_350(v617, v618, v619, v620, v621, v622, 1, v625, 0, v627, v628, v629, v630, v631, 3, 2, 4) :|: 0 = 0
f_350(v617, v618, v619, v620, v621, v622, 1, v625, 0, v627, v628, v629, v630, v631, 3, 2, 4) -> f_351(v617, v618, v619, v620, v621, v622, 1, 0, v627, v628, v625, v629, v630, v631, 3, 2, 4) :|: 0 = 0
f_351(v617, v618, v619, v620, v621, v622, 1, 0, v627, v628, v625, v629, v630, v631, 3, 2, 4) -> f_352(v617, v618, v619, v620, v621, v622, 1, 0, v627, v628, v625, v629, v630, v631, 3, 2, 4) :|: 1 < v622 && 3 <= v625 && 3 <= v620 && 4 <= v628 && 2 <= v627
f_351(v617, v618, v619, v620, v621, v622, 1, 0, v627, v628, v625, v629, v630, v631, 3, 2, 4) -> f_353(v617, v618, v619, v620, v621, v622, 1, 0, v627, v628, v625, v629, v630, v631, 3, 2, 4) :|: v622 <= 1 && v625 <= 2
f_352(v617, v618, v619, v620, v621, v622, 1, 0, v627, v628, v625, v629, v630, v631, 3, 2, 4) -> f_354(v617, v618, v619, v620, v621, v622, 1, v627, v628, v625, v629, v630, v631, 0, 3, 2, 4) :|: 0 = 0
f_354(v617, v618, v619, v620, v621, v622, 1, v627, v628, v625, v629, v630, v631, 0, 3, 2, 4) -> f_356(v617, v618, v619, v620, v621, v622, 1, v627, v628, v625, v629, v630, v631, 0, 3, 2, 4) :|: TRUE
f_356(v617, v618, v619, v620, v621, v622, 1, v627, v628, v625, v629, v630, v631, 0, 3, 2, 4) -> f_327(v617, v618, v619, v620, v621, v622, 1, 1, v627, v628, v625, v629, v630, v631, 0, 3, 2, 4) :|: TRUE
f_353(v617, v618, v619, v620, v621, v622, 1, 0, v627, v628, v625, v629, v630, v631, 3, 2, 4) -> f_355(v617, v618, v619, v620, v621, v622, 1, 0, v627, v628, v625, v629, v630, v631, 3, 2, 4) :|: 0 = 0
f_355(v617, v618, v619, v620, v621, v622, 1, 0, v627, v628, v625, v629, v630, v631, 3, 2, 4) -> f_357(v617, v618, v619, v620, v621, v622, 1, 0, v627, v628, v625, v629, v630, v631, 3, 2, 4) :|: TRUE
f_357(v617, v618, v619, v620, v621, v622, 1, 0, v627, v628, v625, v629, v630, v631, 3, 2, 4) -> f_358(v617, v618, v619, v620, v621, v622, 1, 1, 0, v627, v628, v625, v629, v630, v631, 3, 2, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_351(v617:0, v618:0, v619:0, v620:0, v621:0, 1 + v701:0, 1, 0, v627:0, v628:0, v625:0, v629:0, v630:0, v631:0, 3, 2, 4) -> f_351(v617:0, v618:0, v619:0, v620:0, v621:0, v701:0, 1, 0, v627:0, v628:0, 1 + v701:0, v629:0, v630:0, v631:0, 3, 2, 4) :|: v701:0 > -1 && v701:0 < 1 && v625:0 < 3
f_328(v487:0, v488:0, v489:0, v490:0, v491:0, v492:0, 1, v494:0, v496:0, v497:0, v498:0, v499:0, v500:0, 0, 3, 2, 4) -> f_328(v487:0, v488:0, v489:0, v490:0, v491:0, v492:0, 1, 2 * v494:0, 2 * v494:0, v497:0, v498:0, v499:0, v500:0, 0, 3, 2, 4) :|: 2 * v494:0 > 1 && v492:0 > 2 && v492:0 > 2 * v494:0 && v490:0 > 3 && v497:0 > 3
f_351(v617:0, v618:0, v619:0, v620:0, v621:0, v622:0, 1, 0, v627:0, v628:0, v625:0, v629:0, v630:0, v631:0, 3, 2, 4) -> f_328(v617:0, v618:0, v619:0, v620:0, v621:0, v622:0, 1, 1, v628:0, v625:0, v629:0, v630:0, v631:0, 0, 3, 2, 4) :|: v625:0 > 2 && v622:0 > 1 && v620:0 > 2 && v627:0 > 1 && v628:0 > 3
f_328(v487:0, v488:0, v489:0, v490:0, v491:0, 1 + v701:0, 1, v494:0, v496:0, v497:0, v498:0, v499:0, v500:0, 0, 3, 2, 4) -> f_351(v487:0, v488:0, v489:0, v490:0, v491:0, v701:0, 1, 0, v494:0, 2 * v494:0, 1 + v701:0, v498:0, v499:0, v500:0, 3, 2, 4) :|: v701:0 > -1 && 2 * v494:0 > 1 && 2 * v494:0 >= 1 + v701:0
Filtered unneeded arguments:
   f_351(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_351(x4, x6, x9, x10, x11)
   f_328(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_328(x4, x6, x8, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_351(v620:0, sum~cons_1~v701:0, v627:0, v628:0, v625:0) -> f_351(v620:0, v701:0, v627:0, v628:0, 1 + v701:0) :|: v701:0 < 1 && v625:0 < 3 && v701:0 > -1 && sum~cons_1~v701:0 = 1 + v701:0
f_328(v490:0, v492:0, v494:0, v497:0) -> f_328(v490:0, v492:0, 2 * v494:0, v497:0) :|: v492:0 > 2 && 2 * v494:0 > 1 && v492:0 > 2 * v494:0 && v497:0 > 3 && v490:0 > 3
f_351(v620:0, v622:0, v627:0, v628:0, v625:0) -> f_328(v620:0, v622:0, 1, v625:0) :|: v622:0 > 1 && v625:0 > 2 && v620:0 > 2 && v628:0 > 3 && v627:0 > 1
f_328(v490:0, sum~cons_1~v701:0, v494:0, v497:0) -> f_351(v490:0, v701:0, v494:0, 2 * v494:0, 1 + v701:0) :|: 2 * v494:0 > 1 && 2 * v494:0 >= 1 + v701:0 && v701:0 > -1 && sum~cons_1~v701:0 = 1 + v701:0

----------------------------------------

(9)
Obligation:
Rules:
f_351(v620:0, sum~cons_1~v701:0, v627:0, v628:0, v625:0) -> f_351(v620:0, v701:0, v627:0, v628:0, 1 + v701:0) :|: v701:0 < 1 && v625:0 < 3 && v701:0 > -1 && sum~cons_1~v701:0 = 1 + v701:0
f_328(v490:0, v492:0, v494:0, v497:0) -> f_328(v490:0, v492:0, 2 * v494:0, v497:0) :|: v492:0 > 2 && 2 * v494:0 > 1 && v492:0 > 2 * v494:0 && v497:0 > 3 && v490:0 > 3
f_351(x, x1, x2, x3, x4) -> f_328(x, x1, 1, x4) :|: x1 > 1 && x4 > 2 && x > 2 && x3 > 3 && x2 > 1
f_328(x5, x6, x7, x8) -> f_351(x5, x9, x7, 2 * x7, 1 + x9) :|: 2 * x7 > 1 && 2 * x7 >= 1 + x9 && x9 > -1 && x6 = 1 + x9

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_351(v620:0:0, sum~cons_1~v701:0:0, v627:0:0, v628:0:0, v625:0:0) -> f_351(v620:0:0, v701:0:0, v627:0:0, v628:0:0, 1 + v701:0:0) :|: v701:0:0 < 1 && v625:0:0 < 3 && v701:0:0 > -1 && sum~cons_1~v701:0:0 = 1 + v701:0:0
f_328(v490:0:0, v492:0:0, v494:0:0, v497:0:0) -> f_328(v490:0:0, v492:0:0, 2 * v494:0:0, v497:0:0) :|: v497:0:0 > 3 && v490:0:0 > 3 && v492:0:0 > 2 * v494:0:0 && 2 * v494:0:0 > 1 && v492:0:0 > 2
f_328(x5:0, sum~cons_1~x9:0, x7:0, x8:0) -> f_351(x5:0, x9:0, x7:0, 2 * x7:0, 1 + x9:0) :|: 2 * x7:0 > 1 && 2 * x7:0 >= 1 + x9:0 && x9:0 > -1 && sum~cons_1~x9:0 = 1 + x9:0
f_351(x:0, x1:0, x2:0, x3:0, x4:0) -> f_328(x:0, x1:0, 1, x4:0) :|: x3:0 > 3 && x2:0 > 1 && x:0 > 2 && x4:0 > 2 && x1:0 > 1

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_351 ] = 2*f_351_2
[ f_328 ] = 2*f_328_2 + -1

The following rules are decreasing:
f_351(v620:0:0, sum~cons_1~v701:0:0, v627:0:0, v628:0:0, v625:0:0) -> f_351(v620:0:0, v701:0:0, v627:0:0, v628:0:0, 1 + v701:0:0) :|: v701:0:0 < 1 && v625:0:0 < 3 && v701:0:0 > -1 && sum~cons_1~v701:0:0 = 1 + v701:0:0
f_328(x5:0, sum~cons_1~x9:0, x7:0, x8:0) -> f_351(x5:0, x9:0, x7:0, 2 * x7:0, 1 + x9:0) :|: 2 * x7:0 > 1 && 2 * x7:0 >= 1 + x9:0 && x9:0 > -1 && sum~cons_1~x9:0 = 1 + x9:0
f_351(x:0, x1:0, x2:0, x3:0, x4:0) -> f_328(x:0, x1:0, 1, x4:0) :|: x3:0 > 3 && x2:0 > 1 && x:0 > 2 && x4:0 > 2 && x1:0 > 1

The following rules are bounded:
f_351(v620:0:0, sum~cons_1~v701:0:0, v627:0:0, v628:0:0, v625:0:0) -> f_351(v620:0:0, v701:0:0, v627:0:0, v628:0:0, 1 + v701:0:0) :|: v701:0:0 < 1 && v625:0:0 < 3 && v701:0:0 > -1 && sum~cons_1~v701:0:0 = 1 + v701:0:0
f_328(v490:0:0, v492:0:0, v494:0:0, v497:0:0) -> f_328(v490:0:0, v492:0:0, 2 * v494:0:0, v497:0:0) :|: v497:0:0 > 3 && v490:0:0 > 3 && v492:0:0 > 2 * v494:0:0 && 2 * v494:0:0 > 1 && v492:0:0 > 2
f_328(x5:0, sum~cons_1~x9:0, x7:0, x8:0) -> f_351(x5:0, x9:0, x7:0, 2 * x7:0, 1 + x9:0) :|: 2 * x7:0 > 1 && 2 * x7:0 >= 1 + x9:0 && x9:0 > -1 && sum~cons_1~x9:0 = 1 + x9:0
f_351(x:0, x1:0, x2:0, x3:0, x4:0) -> f_328(x:0, x1:0, 1, x4:0) :|: x3:0 > 3 && x2:0 > 1 && x:0 > 2 && x4:0 > 2 && x1:0 > 1


----------------------------------------

(13)
Obligation:
Rules:
f_328(v490:0:0, v492:0:0, v494:0:0, v497:0:0) -> f_328(v490:0:0, v492:0:0, 2 * v494:0:0, v497:0:0) :|: v497:0:0 > 3 && v490:0:0 > 3 && v492:0:0 > 2 * v494:0:0 && 2 * v494:0:0 > 1 && v492:0:0 > 2

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_328(v490:0:0:0, v492:0:0:0, v494:0:0:0, v497:0:0:0) -> f_328(v490:0:0:0, v492:0:0:0, 2 * v494:0:0:0, v497:0:0:0) :|: 2 * v494:0:0:0 > 1 && v492:0:0:0 > 2 && v492:0:0:0 > 2 * v494:0:0:0 && v490:0:0:0 > 3 && v497:0:0:0 > 3

----------------------------------------

(16) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_328 ] = -1*f_328_3 + 1/2*f_328_2

The following rules are decreasing:
f_328(v490:0:0:0, v492:0:0:0, v494:0:0:0, v497:0:0:0) -> f_328(v490:0:0:0, v492:0:0:0, 2 * v494:0:0:0, v497:0:0:0) :|: 2 * v494:0:0:0 > 1 && v492:0:0:0 > 2 && v492:0:0:0 > 2 * v494:0:0:0 && v490:0:0:0 > 3 && v497:0:0:0 > 3

The following rules are bounded:
f_328(v490:0:0:0, v492:0:0:0, v494:0:0:0, v497:0:0:0) -> f_328(v490:0:0:0, v492:0:0:0, 2 * v494:0:0:0, v497:0:0:0) :|: 2 * v494:0:0:0 > 1 && v492:0:0:0 > 2 && v492:0:0:0 > 2 * v494:0:0:0 && v490:0:0:0 > 3 && v497:0:0:0 > 3


----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
SCC
----------------------------------------

(19) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_210(v75, v76, v77, v78, v79, 1, v82, v81, v83, v84, v85, 0, 3, 2, 4) -> f_212(v75, v76, v77, v78, v79, 1, v82, v81, v83, v84, v85, 0, 3, 2, 4) :|: 0 = 0
f_212(v75, v76, v77, v78, v79, 1, v82, v81, v83, v84, v85, 0, 3, 2, 4) -> f_213(v75, v76, v77, v78, v79, 1, v82, v81, v83, v84, v85, 0, 3, 2, 4) :|: v82 < v78 && 3 <= v78
f_213(v75, v76, v77, v78, v79, 1, v82, v81, v83, v84, v85, 0, 3, 2, 4) -> f_215(v75, v76, v77, v78, v79, 1, v82, v81, v83, v84, v85, 0, 3, 2, 4) :|: 0 = 0
f_215(v75, v76, v77, v78, v79, 1, v82, v81, v83, v84, v85, 0, 3, 2, 4) -> f_217(v75, v76, v77, v78, v79, 1, v82, v81, v83, v84, v85, 0, 3, 2, 4) :|: TRUE
f_217(v75, v76, v77, v78, v79, 1, v82, v81, v83, v84, v85, 0, 3, 2, 4) -> f_219(v75, v76, v77, v78, v79, 1, v82, v83, v84, v85, 0, 3, 2, 4) :|: 0 = 0
f_219(v75, v76, v77, v78, v79, 1, v82, v83, v84, v85, 0, 3, 2, 4) -> f_221(v75, v76, v77, v78, v79, 1, v82, v109, v83, v84, v85, 0, 3, 2, 4) :|: v109 = 2 * v82 && 4 <= v109
f_221(v75, v76, v77, v78, v79, 1, v82, v109, v83, v84, v85, 0, 3, 2, 4) -> f_223(v75, v76, v77, v78, v79, 1, v82, v109, v83, v84, v85, 0, 3, 2, 4) :|: TRUE
f_223(v75, v76, v77, v78, v79, 1, v82, v109, v83, v84, v85, 0, 3, 2, 4) -> f_225(v75, v76, v77, v78, v79, 1, v82, v109, v83, v84, v85, 0, 3, 2, 4) :|: TRUE
f_225(v75, v76, v77, v78, v79, 1, v82, v109, v83, v84, v85, 0, 3, 2, 4) -> f_208(v75, v76, v77, v78, v79, 1, v82, v109, v83, v84, v85, 0, 3, 2, 4) :|: TRUE
f_208(v75, v76, v77, v78, v79, 1, v81, v82, v83, v84, v85, 0, 3, 2, 4) -> f_210(v75, v76, v77, v78, v79, 1, v82, v81, v83, v84, v85, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_210(v75:0, v76:0, v77:0, v78:0, v79:0, 1, v82:0, v81:0, v83:0, v84:0, v85:0, 0, 3, 2, 4) -> f_210(v75:0, v76:0, v77:0, v78:0, v79:0, 1, 2 * v82:0, v82:0, v83:0, v84:0, v85:0, 0, 3, 2, 4) :|: v78:0 > 2 && 3 < 2 * v82:0 && v82:0 < v78:0
Filtered unneeded arguments:
   f_210(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_210(x4, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_210(v78:0, v82:0) -> f_210(v78:0, 2 * v82:0) :|: 3 < 2 * v82:0 && v82:0 < v78:0 && v78:0 > 2

----------------------------------------

(20)
Obligation:
Rules:
f_210(v78:0, v82:0) -> f_210(v78:0, 2 * v82:0) :|: 3 < 2 * v82:0 && v82:0 < v78:0 && v78:0 > 2

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f_210(v78:0:0, v82:0:0) -> f_210(v78:0:0, 2 * v82:0:0) :|: 3 < 2 * v82:0:0 && v82:0:0 < v78:0:0 && v78:0:0 > 2

----------------------------------------

(23) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_210 ] = -1/2*f_210_2 + 1/2*f_210_1

The following rules are decreasing:
f_210(v78:0:0, v82:0:0) -> f_210(v78:0:0, 2 * v82:0:0) :|: 3 < 2 * v82:0:0 && v82:0:0 < v78:0:0 && v78:0:0 > 2

The following rules are bounded:
f_210(v78:0:0, v82:0:0) -> f_210(v78:0:0, 2 * v82:0:0) :|: 3 < 2 * v82:0:0 && v82:0:0 < v78:0:0 && v78:0:0 > 2


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
SCC
----------------------------------------

(26) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_172(v37, v38, v39, v40, v41, v45, 1, v42, 0, v46, v47, v48, 3, 4) -> f_175(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: 0 <= v45 && v42 = 1 && v45 = 0 && 0 = 0
f_175(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_179(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: 0 = 0
f_179(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_183(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: TRUE
f_183(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_186(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: TRUE
f_186(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_188(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: TRUE
f_188(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_191(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: 0 = 0
f_191(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_194(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: 0 = 0
f_194(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_197(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: 0 = 0
f_197(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_200(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: TRUE
f_200(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_203(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) :|: 0 = 0
f_203(v37, v38, v39, 1, v41, 0, v46, v47, v48, 3, 4) -> f_206(v37, v38, v39, 1, v41, 0, -1, v46, v47, v48, 3, 4) :|: 0 = 0
f_206(v37, v38, v39, 1, v41, 0, -1, v46, v47, v48, 3, 4) -> f_209(v37, v38, v39, 1, v41, 0, -1, v46, v47, v48, 3, 4) :|: TRUE
f_209(v37, v38, v39, 1, v41, 0, -1, v46, v47, v48, 3, 4) -> f_211(v37, v38, v39, 1, v41, 0, -1, v46, v47, v48, 3, 4) :|: TRUE
f_211(v37, v38, v39, 1, v41, 0, -1, v46, v47, v48, 3, 4) -> f_169(v37, v38, v39, 1, v41, 0, 1, 0, -1, v46, v47, v48, 3, 4) :|: TRUE
f_169(v37, v38, v39, v40, v41, v42, 1, 0, v45, v46, v47, v48, 3, 4) -> f_172(v37, v38, v39, v40, v41, v45, 1, v42, 0, v46, v47, v48, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_172(v37:0, v38:0, v39:0, v40:0, v41:0, 0, 1, 1, 0, v46:0, v47:0, v48:0, 3, 4) -> f_172(v37:0, v38:0, v39:0, 1, v41:0, -1, 1, 0, 0, v46:0, v47:0, v48:0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_172(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_172(x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_172(cons_0, cons_1) -> f_172(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(27)
Obligation:
Rules:
f_172(cons_0, cons_1) -> f_172(-1, 0) :|: TRUE && cons_0 = 0 && cons_1 = 1

----------------------------------------

(28) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(29)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
