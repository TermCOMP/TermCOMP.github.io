YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Q4f8y.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 384 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 38 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Q4f8y.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Q4f8y.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		%8 = load %3
		%9 = load %4
		%10 = icmp ne %8 %9
		br %10, %11, %12
	11:
		store 0, %1
		br %24
	12:
		br %13
	13:
		%14 = load %2
		%15 = icmp sge %14 0
		br %15, %16, %23
	16:
		%17 = load %2
		%18 = load %3
		%19 = add i32 %17, %18
		%20 = load %4
		%21 = sub i32 %19, %20
		%22 = sub i32 %21, 1
		store %22, %2
		br %13
	23:
		store 0, %1
		br %24
	24:
		%25 = load %1
		ret %25


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_195(v48, v49, v50, v51, v52, v53, 0, v58, 1, v55, v57, v59, v60, v61, v62, 3, 4) -> f_196(v48, v49, v50, v51, v52, v53, 0, v58, 1, v55, v57, v59, v60, v61, v62, 3, 4) :|: 0 <= v58 && 1 <= v55 && 1 <= v52
f_196(v48, v49, v50, v51, v52, v53, 0, v58, 1, v55, v57, v59, v60, v61, v62, 3, 4) -> f_198(v48, v49, v50, v51, v52, v53, 0, v58, 1, v55, v57, v59, v60, v61, v62, 3, 4) :|: 0 = 0
f_198(v48, v49, v50, v51, v52, v53, 0, v58, 1, v55, v57, v59, v60, v61, v62, 3, 4) -> f_200(v48, v49, v50, v51, v52, v53, 0, v58, 1, v55, v57, v59, v60, v61, v62, 3, 4) :|: TRUE
f_200(v48, v49, v50, v51, v52, v53, 0, v58, 1, v55, v57, v59, v60, v61, v62, 3, 4) -> f_202(v48, v49, v50, v51, v52, v53, 0, v58, 1, v57, v55, v59, v60, v61, v62, 3, 4) :|: 0 = 0
f_202(v48, v49, v50, v51, v52, v53, 0, v58, 1, v57, v55, v59, v60, v61, v62, 3, 4) -> f_204(v48, v49, v50, v51, v52, v53, 0, v58, 1, v57, v55, v59, v60, v61, v62, 3, 4) :|: 0 = 0
f_204(v48, v49, v50, v51, v52, v53, 0, v58, 1, v57, v55, v59, v60, v61, v62, 3, 4) -> f_206(v48, v49, v50, v51, v52, v53, 0, v58, 1, v67, v55, v59, v60, v61, v62, 3, 4) :|: v67 = v58 + v53
f_206(v48, v49, v50, v51, v52, v53, 0, v58, 1, v67, v55, v59, v60, v61, v62, 3, 4) -> f_208(v48, v49, v50, v51, v52, v53, 0, v58, 1, v67, v55, v59, v60, v61, v62, 3, 4) :|: 0 = 0
f_208(v48, v49, v50, v51, v52, v53, 0, v58, 1, v67, v55, v59, v60, v61, v62, 3, 4) -> f_209(v48, v49, v50, v51, v52, v53, 0, v58, 1, v67, v59, v60, v61, v62, 3, 4) :|: v58 + v53 = v67
f_209(v48, v49, v50, v51, v52, v53, 0, v58, 1, v67, v59, v60, v61, v62, 3, 4) -> f_210(v48, v49, v50, v51, v52, v53, 0, v58, 1, v67, v68, v59, v60, v61, v62, 3, 4) :|: 1 + v68 = v58 && 0 <= 1 + v68
f_210(v48, v49, v50, v51, v52, v53, 0, v58, 1, v67, v68, v59, v60, v61, v62, 3, 4) -> f_211(v48, v49, v50, v51, v52, v53, 0, v58, 1, v67, v68, v59, v60, v61, v62, 3, 4) :|: TRUE
f_211(v48, v49, v50, v51, v52, v53, 0, v58, 1, v67, v68, v59, v60, v61, v62, 3, 4) -> f_212(v48, v49, v50, v51, v52, v53, 0, v58, 1, v67, v68, v59, v60, v61, v62, 3, 4) :|: TRUE
f_212(v48, v49, v50, v51, v52, v53, 0, v58, 1, v67, v68, v59, v60, v61, v62, 3, 4) -> f_194(v48, v49, v50, v51, v52, v53, 0, v58, 1, v67, v68, v59, v60, v61, v62, 3, 4) :|: TRUE
f_194(v48, v49, v50, v51, v52, v53, 0, v55, 1, v57, v58, v59, v60, v61, v62, 3, 4) -> f_195(v48, v49, v50, v51, v52, v53, 0, v58, 1, v55, v57, v59, v60, v61, v62, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_195(v48:0, v49:0, v50:0, v51:0, v52:0, v53:0, 0, 1 + v68:0, 1, v55:0, v57:0, v59:0, v60:0, v61:0, v62:0, 3, 4) -> f_195(v48:0, v49:0, v50:0, v51:0, v52:0, v53:0, 0, v68:0, 1, 1 + v68:0, 1 + v68:0 + v53:0, v59:0, v60:0, v61:0, v62:0, 3, 4) :|: v55:0 > 0 && v68:0 > -2 && v52:0 > 0
Filtered unneeded arguments:
   f_195(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_195(x5, x8, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_195(v52:0, sum~cons_1~v68:0, v55:0) -> f_195(v52:0, v68:0, 1 + v68:0) :|: v68:0 > -2 && v52:0 > 0 && v55:0 > 0 && sum~cons_1~v68:0 = 1 + v68:0

----------------------------------------

(8)
Obligation:
Rules:
f_195(v52:0, sum~cons_1~v68:0, v55:0) -> f_195(v52:0, v68:0, 1 + v68:0) :|: v68:0 > -2 && v52:0 > 0 && v55:0 > 0 && sum~cons_1~v68:0 = 1 + v68:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_195(v52:0:0, sum~cons_1~v68:0:0, v55:0:0) -> f_195(v52:0:0, v68:0:0, 1 + v68:0:0) :|: v68:0:0 > -2 && v52:0:0 > 0 && v55:0:0 > 0 && sum~cons_1~v68:0:0 = 1 + v68:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_195(x, x1, x2)] = x1

The following rules are decreasing:
f_195(v52:0:0, sum~cons_1~v68:0:0, v55:0:0) -> f_195(v52:0:0, v68:0:0, 1 + v68:0:0) :|: v68:0:0 > -2 && v52:0:0 > 0 && v55:0:0 > 0 && sum~cons_1~v68:0:0 = 1 + v68:0:0
The following rules are bounded:
f_195(v52:0:0, sum~cons_1~v68:0:0, v55:0:0) -> f_195(v52:0:0, v68:0:0, 1 + v68:0:0) :|: v68:0:0 > -2 && v52:0:0 > 0 && v55:0:0 > 0 && sum~cons_1~v68:0:0 = 1 + v68:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
