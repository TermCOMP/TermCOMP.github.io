YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/gAv7H.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 61 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 4338 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 30 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 27 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 31 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/gAv7H.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/gAv7H.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca *i32, align 8
		%8 = alloca *i32, align 8
		%9 = alloca *i32, align 8
		%10 = alloca *i32, align 8
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%11 = alloca i8, numElementsLit: 4, align 16
		%12 = bitcast *i8 %11 to *i32
		store %12, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %8)
		%13 = alloca i8, numElementsLit: 4, align 16
		%14 = bitcast *i8 %13 to *i32
		store %14, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %9)
		%15 = alloca i8, numElementsLit: 4, align 16
		%16 = bitcast *i8 %15 to *i32
		store %16, %9
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %10)
		%17 = alloca i8, numElementsLit: 4, align 16
		%18 = bitcast *i8 %17 to *i32
		store %18, %10
		%19 = load %4
		%20 = load %7
		store %19, %20
		%21 = load %5
		%22 = load %8
		store %21, %22
		%23 = load %6
		%24 = load %9
		store %23, %24
		%25 = load %10
		store 0, %25
		br %26
	26:
		%27 = load %7
		%28 = load %27
		%29 = load %9
		%30 = load %29
		%31 = icmp sgt %28 %30
		br %31, %32, %57
	32:
		br %33
	33:
		%34 = load %8
		%35 = load %34
		%36 = load %9
		%37 = load %36
		%38 = icmp sgt %35 %37
		br %38, %39, %48
	39:
		%40 = load %8
		%41 = load %40
		%42 = sub i32 %41, 1
		%43 = load %8
		store %42, %43
		%44 = load %10
		%45 = load %44
		%46 = add i32 %45, 1
		%47 = load %10
		store %46, %47
		br %33
	48:
		%49 = load %10
		%50 = load %49
		%51 = add i32 %50, 1
		%52 = load %10
		store %51, %52
		%53 = load %7
		%54 = load %53
		%55 = sub i32 %54, 1
		%56 = load %7
		store %55, %56
		br %26
	57:
		%58 = load %10
		%59 = load %58
		ret %59

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 83
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @test_fun(i32 %2, i32 %3, i32 %4)
		ret %5


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_868(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, 1, 0, v1262, v1263, v1264, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_869(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
f_869(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_870(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
f_870(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_871(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
f_871(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_872(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: v1247 < v1267
f_872(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_874(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
f_874(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_876(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: TRUE
f_876(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_878(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: TRUE
f_878(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_880(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
f_880(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_882(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
f_882(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_884(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
f_884(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_885(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
f_885(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_886(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
f_886(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_887(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: TRUE
f_887(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_888(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
f_888(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1265, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_889(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
f_889(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_890(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: v1378 = 1 + v1266 && 3 <= v1378
f_890(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_891(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
f_891(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_892(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: TRUE
f_892(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_893(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
f_893(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1259, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_894(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
f_894(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_895(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1380, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 1 + v1380 = v1267
f_895(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1380, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_896(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1380, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
f_896(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1380, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_897(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1380, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: TRUE
f_897(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1380, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_898(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1380, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: TRUE
f_898(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1380, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_867(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1267, 1, 0, v1262, v1263, v1264, v1266, v1378, v1380, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: TRUE
f_867(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, 1, 0, v1262, v1263, v1264, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) -> f_868(v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, v1259, 1, 0, v1262, v1263, v1264, v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_868(v1245:0, v1246:0, v1247:0, v1248:0, v1249:0, v1250:0, v1251:0, v1252:0, v1253:0, v1254:0, v1255:0, v1256:0, v1257:0, v1258:0, v1259:0, 1, 0, v1262:0, v1263:0, v1264:0, v1265:0, v1266:0, 1 + v1380:0, v1268:0, v1269:0, v1270:0, v1271:0, v1272:0, v1273:0, v1274:0, v1275:0, v1276:0, v1277:0, v1278:0, v1279:0, v1280:0, 3, 7, 2, 4, 8) -> f_868(v1245:0, v1246:0, v1247:0, v1248:0, v1249:0, v1250:0, v1251:0, v1252:0, v1253:0, v1254:0, v1255:0, v1256:0, v1257:0, v1258:0, 1 + v1380:0, 1, 0, v1262:0, v1263:0, v1264:0, v1266:0, 1 + v1266:0, v1380:0, v1268:0, v1269:0, v1270:0, v1271:0, v1272:0, v1273:0, v1274:0, v1275:0, v1276:0, v1277:0, v1278:0, v1279:0, v1280:0, 3, 7, 2, 4, 8) :|: v1266:0 > 1 && v1247:0 < 1 + v1380:0
Filtered unneeded arguments:
   f_868(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41) -> f_868(x3, x22, x23)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_868(v1247:0, v1266:0, sum~cons_1~v1380:0) -> f_868(v1247:0, 1 + v1266:0, v1380:0) :|: v1266:0 > 1 && v1247:0 < 1 + v1380:0 && sum~cons_1~v1380:0 = 1 + v1380:0

----------------------------------------

(9)
Obligation:
Rules:
f_868(v1247:0, v1266:0, sum~cons_1~v1380:0) -> f_868(v1247:0, 1 + v1266:0, v1380:0) :|: v1266:0 > 1 && v1247:0 < 1 + v1380:0 && sum~cons_1~v1380:0 = 1 + v1380:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_868(v1247:0:0, v1266:0:0, sum~cons_1~v1380:0:0) -> f_868(v1247:0:0, 1 + v1266:0:0, v1380:0:0) :|: v1266:0:0 > 1 && v1247:0:0 < 1 + v1380:0:0 && sum~cons_1~v1380:0:0 = 1 + v1380:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_868(x, x1, x2)] = -x + x2

The following rules are decreasing:
f_868(v1247:0:0, v1266:0:0, sum~cons_1~v1380:0:0) -> f_868(v1247:0:0, 1 + v1266:0:0, v1380:0:0) :|: v1266:0:0 > 1 && v1247:0:0 < 1 + v1380:0:0 && sum~cons_1~v1380:0:0 = 1 + v1380:0:0
The following rules are bounded:
f_868(v1247:0:0, v1266:0:0, sum~cons_1~v1380:0:0) -> f_868(v1247:0:0, 1 + v1266:0:0, v1380:0:0) :|: v1266:0:0 > 1 && v1247:0:0 < 1 + v1380:0:0 && sum~cons_1~v1380:0:0 = 1 + v1380:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_805(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v945, 1, 0, v948, v949, v950, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_807(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: 0 = 0
f_807(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_809(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: 0 = 0
f_809(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_811(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: 0 = 0
f_811(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_813(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: v933 < v950
f_813(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_817(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: 0 = 0
f_817(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_821(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: TRUE
f_821(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_825(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: TRUE
f_825(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_829(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: 0 = 0
f_829(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_833(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: 0 = 0
f_833(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_837(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: 0 = 0
f_837(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_839(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: 0 = 0
f_839(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_841(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: 0 = 0
f_841(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_843(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: TRUE
f_843(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_845(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: 0 = 0
f_845(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v948, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_847(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: 0 = 0
f_847(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_849(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) :|: v1166 = 1 + v949 && 2 <= v1166
f_849(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) -> f_851(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) :|: 0 = 0
f_851(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) -> f_853(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) :|: TRUE
f_853(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) -> f_855(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) :|: 0 = 0
f_855(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v945, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) -> f_857(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) :|: 0 = 0
f_857(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) -> f_859(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v1170, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) :|: 1 + v1170 = v950
f_859(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v1170, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) -> f_861(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v1170, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) :|: 0 = 0
f_861(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v1170, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) -> f_863(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v1170, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) :|: TRUE
f_863(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v1170, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) -> f_865(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v1170, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) :|: TRUE
f_865(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v1170, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8, 2) -> f_802(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v950, 1, 0, v949, v1166, v1170, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: TRUE
f_802(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v945, 1, 0, v948, v949, v950, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) -> f_805(v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, v944, v945, 1, 0, v948, v949, v950, v951, v952, v953, v954, v955, v956, v957, v958, v959, v960, v961, v962, v963, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_805(v931:0, v932:0, v933:0, v934:0, v935:0, v936:0, v937:0, v938:0, v939:0, v940:0, v941:0, v942:0, v943:0, v944:0, v945:0, 1, 0, v948:0, v949:0, 1 + v1170:0, v951:0, v952:0, v953:0, v954:0, v955:0, v956:0, v957:0, v958:0, v959:0, v960:0, v961:0, v962:0, v963:0, 3, 7, 4, 8) -> f_805(v931:0, v932:0, v933:0, v934:0, v935:0, v936:0, v937:0, v938:0, v939:0, v940:0, v941:0, v942:0, v943:0, v944:0, 1 + v1170:0, 1, 0, v949:0, 1 + v949:0, v1170:0, v951:0, v952:0, v953:0, v954:0, v955:0, v956:0, v957:0, v958:0, v959:0, v960:0, v961:0, v962:0, v963:0, 3, 7, 4, 8) :|: v949:0 > 0 && v933:0 < 1 + v1170:0
Filtered unneeded arguments:
   f_805(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37) -> f_805(x3, x19, x20)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_805(v933:0, v949:0, sum~cons_1~v1170:0) -> f_805(v933:0, 1 + v949:0, v1170:0) :|: v949:0 > 0 && v933:0 < 1 + v1170:0 && sum~cons_1~v1170:0 = 1 + v1170:0

----------------------------------------

(16)
Obligation:
Rules:
f_805(v933:0, v949:0, sum~cons_1~v1170:0) -> f_805(v933:0, 1 + v949:0, v1170:0) :|: v949:0 > 0 && v933:0 < 1 + v1170:0 && sum~cons_1~v1170:0 = 1 + v1170:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_805(v933:0:0, v949:0:0, sum~cons_1~v1170:0:0) -> f_805(v933:0:0, 1 + v949:0:0, v1170:0:0) :|: v949:0:0 > 0 && v933:0:0 < 1 + v1170:0:0 && sum~cons_1~v1170:0:0 = 1 + v1170:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_805(x, x1, x2)] = -x + x2

The following rules are decreasing:
f_805(v933:0:0, v949:0:0, sum~cons_1~v1170:0:0) -> f_805(v933:0:0, 1 + v949:0:0, v1170:0:0) :|: v949:0:0 > 0 && v933:0:0 < 1 + v1170:0:0 && sum~cons_1~v1170:0:0 = 1 + v1170:0:0
The following rules are bounded:
f_805(v933:0:0, v949:0:0, sum~cons_1~v1170:0:0) -> f_805(v933:0:0, 1 + v949:0:0, v1170:0:0) :|: v949:0:0 > 0 && v933:0:0 < 1 + v1170:0:0 && sum~cons_1~v1170:0:0 = 1 + v1170:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_689(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v636, v637, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) -> f_692(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v636, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) :|: 0 = 0
f_692(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v636, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) -> f_695(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v636, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) :|: 0 = 0
f_695(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v636, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) -> f_697(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v636, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) :|: 0 = 0
f_697(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v636, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) -> f_699(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v636, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) :|: v623 < v637
f_699(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v636, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) -> f_702(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v636, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) :|: 0 = 0
f_702(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v636, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) -> f_705(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v636, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) :|: TRUE
f_705(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v636, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) -> f_708(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v636, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) :|: 0 = 0
f_708(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v636, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) -> f_711(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) :|: 0 = 0
f_711(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) -> f_714(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) :|: 1 + v687 = v637
f_714(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) -> f_717(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) :|: 0 = 0
f_717(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) -> f_720(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) :|: TRUE
f_720(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) -> f_723(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) :|: 0 = 0
f_723(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) -> f_726(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) :|: 0 = 0
f_726(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) -> f_729(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v639, v693, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8, 2) :|: v693 = 1 + v639 && 2 <= v693
f_729(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v639, v693, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8, 2) -> f_732(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v639, v693, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_732(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v639, v693, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8, 2) -> f_735(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v639, v693, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8, 2) :|: TRUE
f_735(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v639, v693, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8, 2) -> f_739(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v639, v693, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8, 2) :|: TRUE
f_739(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v639, v693, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8, 2) -> f_686(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v637, v687, v639, v693, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) :|: TRUE
f_686(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v636, v637, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) -> f_689(v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, 1, v636, v637, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_689(v621:0, v622:0, v623:0, v624:0, v625:0, v626:0, v627:0, v628:0, v629:0, v630:0, v631:0, v632:0, v633:0, v634:0, 1, v636:0, 1 + v687:0, v638:0, v639:0, v640:0, v641:0, v642:0, v643:0, v644:0, v645:0, v646:0, v647:0, v648:0, v649:0, v650:0, v651:0, v652:0, 0, 3, 7, 4, 8) -> f_689(v621:0, v622:0, v623:0, v624:0, v625:0, v626:0, v627:0, v628:0, v629:0, v630:0, v631:0, v632:0, v633:0, v634:0, 1, 1 + v687:0, v687:0, v639:0, 1 + v639:0, v640:0, v641:0, v642:0, v643:0, v644:0, v645:0, v646:0, v647:0, v648:0, v649:0, v650:0, v651:0, v652:0, 0, 3, 7, 4, 8) :|: v639:0 > 0 && v623:0 < 1 + v687:0
Filtered unneeded arguments:
   f_689(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37) -> f_689(x3, x17, x19)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_689(v623:0, sum~cons_1~v687:0, v639:0) -> f_689(v623:0, v687:0, 1 + v639:0) :|: v639:0 > 0 && v623:0 < 1 + v687:0 && sum~cons_1~v687:0 = 1 + v687:0

----------------------------------------

(23)
Obligation:
Rules:
f_689(v623:0, sum~cons_1~v687:0, v639:0) -> f_689(v623:0, v687:0, 1 + v639:0) :|: v639:0 > 0 && v623:0 < 1 + v687:0 && sum~cons_1~v687:0 = 1 + v687:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_689(v623:0:0, sum~cons_1~v687:0:0, v639:0:0) -> f_689(v623:0:0, v687:0:0, 1 + v639:0:0) :|: v639:0:0 > 0 && v623:0:0 < 1 + v687:0:0 && sum~cons_1~v687:0:0 = 1 + v687:0:0

----------------------------------------

(26) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_689 ] = -1*f_689_1 + f_689_2

The following rules are decreasing:
f_689(v623:0:0, sum~cons_1~v687:0:0, v639:0:0) -> f_689(v623:0:0, v687:0:0, 1 + v639:0:0) :|: v639:0:0 > 0 && v623:0:0 < 1 + v687:0:0 && sum~cons_1~v687:0:0 = 1 + v687:0:0

The following rules are bounded:
f_689(v623:0:0, sum~cons_1~v687:0:0, v639:0:0) -> f_689(v623:0:0, v687:0:0, 1 + v639:0:0) :|: v639:0:0 > 0 && v623:0:0 < 1 + v687:0:0 && sum~cons_1~v687:0:0 = 1 + v687:0:0


----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
