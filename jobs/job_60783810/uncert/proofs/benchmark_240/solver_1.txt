YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/d2cS9.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 36 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1725 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 59 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/d2cS9.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/d2cS9.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%5 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store null, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%6 = load %3
		store %6, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %7
	7:
		%8 = load %5
		%9 = load %2
		%10 = icmp slt %8 %9
		br %10, %11, %24
	11:
		%12 = call noalias *i8 @malloc(i64 16)
		%13 = bitcast *i8 %12 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %13, %3
		%14 = call i32 (...)* @__VERIFIER_nondet_int()
		%15 = load %3
		%16 = getelementptr %15, 0, 0
		store %14, %16
		%17 = load %4
		%18 = load %3
		%19 = getelementptr %18, 0, 1
		store %17, %19
		%20 = load %3
		store %20, %4
		br %21
	21:
		%22 = load %5
		%23 = add i32 %22, 1
		store %23, %5
		br %7
	24:
		%25 = load %3
		ret %25

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 53
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		%5 = load %2
		%6 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %5)
		store %6, %3
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_390(v210, v211, v212, v213, v214, 0, v222, 1, v218, v219, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 9) -> f_391(v210, v211, v212, v213, v214, 0, v222, 1, v218, v219, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 9) :|: 0 = 0
f_391(v210, v211, v212, v213, v214, 0, v222, 1, v218, v219, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 9) -> f_392(v210, v211, v212, v213, v214, 0, v222, 1, v218, v219, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 2, 9) :|: v222 < v210 && 2 <= v210
f_392(v210, v211, v212, v213, v214, 0, v222, 1, v218, v219, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 2, 9) -> f_394(v210, v211, v212, v213, v214, 0, v222, 1, v218, v219, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 2, 9) :|: 0 = 0
f_394(v210, v211, v212, v213, v214, 0, v222, 1, v218, v219, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 2, 9) -> f_396(v210, v211, v212, v213, v214, 0, v222, 1, v218, v219, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 2, 9) :|: TRUE
f_396(v210, v211, v212, v213, v214, 0, v222, 1, v218, v219, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 2, 9) -> f_398(v210, v211, v212, v213, v214, 0, v222, 1, v234, v218, v219, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v233, 3, 7, 4, 8, 15, 2, 9, 16) :|: v235 = 15 + v234 && v234 % 4 = 0 && 16 <= v235
f_398(v210, v211, v212, v213, v214, 0, v222, 1, v234, v218, v219, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v233, 3, 7, 4, 8, 15, 2, 9, 16) -> f_400(v210, v211, v212, v213, v214, 0, v222, 1, v234, v219, v218, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v233, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_400(v210, v211, v212, v213, v214, 0, v222, 1, v234, v219, v218, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v233, 3, 7, 4, 8, 15, 2, 9, 16) -> f_402(v210, v211, v212, v213, v214, 0, v222, 1, v234, v219, v218, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v233, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_402(v210, v211, v212, v213, v214, 0, v222, 1, v234, v219, v218, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v233, 3, 7, 4, 8, 15, 2, 9, 16) -> f_404(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v219, v233, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_404(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v219, v233, 3, 7, 4, 8, 15, 2, 9, 16) -> f_405(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v219, v233, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_405(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v219, v233, 3, 7, 4, 8, 15, 2, 9, 16) -> f_406(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v220, v218, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v219, v233, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_406(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v220, v218, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v219, v233, 3, 7, 4, 8, 15, 2, 9, 16) -> f_407(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v220, v218, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v219, v233, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_407(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v220, v218, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v219, v233, 3, 7, 4, 8, 15, 2, 9, 16) -> f_408(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v219, v233, v220, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_408(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v219, v233, v220, 3, 7, 4, 8, 15, 2, 9, 16) -> f_409(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v219, v233, v220, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_409(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v219, v233, v220, 3, 7, 4, 8, 15, 2, 9, 16) -> f_410(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v219, v233, v220, 3, 7, 4, 15, 8, 2, 16, 9) :|: v240 = 8 + v234 && 9 <= v240
f_410(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v235, v219, v233, v220, 3, 7, 4, 15, 8, 2, 16, 9) -> f_411(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, v242, 2, 9) :|: v242 = 1 + v222 && 2 <= v242
f_411(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, v242, 2, 9) -> f_412(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, v242, 2, 9) :|: 0 = 0
f_412(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, v242, 2, 9) -> f_413(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, v242, 2, 9) :|: TRUE
f_413(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, v242, 2, 9) -> f_414(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, v242, 2, 9) :|: TRUE
f_414(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, v242, 2, 9) -> f_415(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, v242, 2, 9) :|: 0 = 0
f_415(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, v242, 2, 9) -> f_416(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v242, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 2, 9) :|: v242 = 1 + v222
f_416(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v242, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 2, 9) -> f_417(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v242, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 2, 9) :|: TRUE
f_417(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v242, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 2, 9) -> f_418(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v242, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 2, 9) :|: TRUE
f_418(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v242, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 2, 9) -> f_389(v210, v211, v212, v213, v214, 0, v222, 1, v234, v238, v218, v240, v242, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 9) :|: TRUE
f_389(v210, v211, v212, v213, v214, 0, v216, 1, v218, v219, v220, v221, v222, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 9) -> f_390(v210, v211, v212, v213, v214, 0, v222, 1, v218, v219, v220, v221, v216, v223, v226, v224, v227, v225, v228, v229, v230, v231, v232, v233, 3, 7, 4, 8, 9) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_390(v210:0, v211:0, v212:0, v213:0, v214:0, 0, v222:0, 1, v218:0, v219:0, v220:0, v221:0, v216:0, v223:0, v226:0, v224:0, v227:0, v225:0, v228:0, v229:0, v230:0, v231:0, v232:0, v233:0, 3, 7, 4, 8, 9) -> f_390(v210:0, v211:0, v212:0, v213:0, v214:0, 0, 1 + v222:0, 1, v234:0, v238:0, v218:0, 8 + v234:0, v222:0, v223:0, v226:0, v224:0, v227:0, v225:0, v228:0, v229:0, v230:0, v231:0, v232:0, v233:0, 3, 7, 4, 8, 9) :|: v210:0 > 1 && v222:0 < v210:0 && v234:0 % 4 = 0 && v234:0 > 0 && v222:0 > 0
Filtered unneeded arguments:
   f_390(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29) -> f_390(x1, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_390(v210:0, v222:0) -> f_390(v210:0, 1 + v222:0) :|: v222:0 < v210:0 && v222:0 > 0 && v210:0 > 1

----------------------------------------

(8)
Obligation:
Rules:
f_390(v210:0, v222:0) -> f_390(v210:0, 1 + v222:0) :|: v222:0 < v210:0 && v222:0 > 0 && v210:0 > 1

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_390(v210:0:0, v222:0:0) -> f_390(v210:0:0, 1 + v222:0:0) :|: v222:0:0 < v210:0:0 && v222:0:0 > 0 && v210:0:0 > 1

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_390(x, x1)] = x - x1

The following rules are decreasing:
f_390(v210:0:0, v222:0:0) -> f_390(v210:0:0, 1 + v222:0:0) :|: v222:0:0 < v210:0:0 && v222:0:0 > 0 && v210:0:0 > 1
The following rules are bounded:
f_390(v210:0:0, v222:0:0) -> f_390(v210:0:0, 1 + v222:0:0) :|: v222:0:0 < v210:0:0 && v222:0:0 > 0 && v210:0:0 > 1

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
