YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/aVTvX.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1098 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 26 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 29 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/aVTvX.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/aVTvX.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		store 0, %4
		%8 = load %2
		store %8, %5
		%9 = load %3
		%10 = icmp sgt %9 0
		br %10, %11, %34
	11:
		%12 = load %2
		%13 = icmp sgt %12 0
		br %13, %14, %34
	14:
		br %15
	15:
		%16 = load %5
		%17 = icmp sgt %16 0
		br %17, %18, %23
	18:
		%19 = load %5
		%20 = sub i32 %19, 1
		store %20, %5
		%21 = load %4
		%22 = add i32 %21, 1
		store %22, %4
		br %15
	23:
		br %24
	24:
		%25 = load %5
		%26 = load %3
		%27 = icmp slt %25 %26
		br %27, %28, %33
	28:
		%29 = load %5
		%30 = add i32 %29, 1
		store %30, %5
		%31 = load %4
		%32 = sub i32 %31, 1
		store %32, %4
		br %24
	33:
		br %34
	34:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_407(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v405, v407, v408, v409, v410, v411, v412, v413, 3, 4) -> f_408(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v405, v407, v408, v409, v410, v411, v412, v413, 3, 4) :|: 0 = 0
f_408(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v405, v407, v408, v409, v410, v411, v412, v413, 3, 4) -> f_409(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v405, v407, v408, v409, v410, v411, v412, v413, 3, 2, 4) :|: v406 < v400 && 2 <= v400
f_409(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v405, v407, v408, v409, v410, v411, v412, v413, 3, 2, 4) -> f_411(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v405, v407, v408, v409, v410, v411, v412, v413, 3, 2, 4) :|: 0 = 0
f_411(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v405, v407, v408, v409, v410, v411, v412, v413, 3, 2, 4) -> f_413(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v405, v407, v408, v409, v410, v411, v412, v413, 3, 2, 4) :|: TRUE
f_413(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v405, v407, v408, v409, v410, v411, v412, v413, 3, 2, 4) -> f_415(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v407, v408, v409, v410, v411, v412, v413, 3, 2, 4) :|: 0 = 0
f_415(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v407, v408, v409, v410, v411, v412, v413, 3, 2, 4) -> f_417(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v430, v407, v408, v409, v410, v411, v412, v413, 3, 2, 4) :|: v430 = 1 + v406 && 2 <= v430
f_417(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v430, v407, v408, v409, v410, v411, v412, v413, 3, 2, 4) -> f_418(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v430, v407, v408, v409, v410, v411, v412, v413, 3, 2, 4) :|: TRUE
f_418(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v430, v407, v408, v409, v410, v411, v412, v413, 3, 2, 4) -> f_419(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v430, v408, v409, v410, v411, v412, v413, 3, 2, 4) :|: 0 = 0
f_419(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v430, v408, v409, v410, v411, v412, v413, 3, 2, 4) -> f_420(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v430, v408, v432, v409, v410, v411, v412, v413, 3, 2, 4) :|: 1 + v432 = v408
f_420(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v430, v408, v432, v409, v410, v411, v412, v413, 3, 2, 4) -> f_421(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v430, v408, v432, v409, v410, v411, v412, v413, 3, 2, 4) :|: TRUE
f_421(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v430, v408, v432, v409, v410, v411, v412, v413, 3, 2, 4) -> f_422(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v430, v408, v432, v409, v410, v411, v412, v413, 3, 2, 4) :|: TRUE
f_422(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v430, v408, v432, v409, v410, v411, v412, v413, 3, 2, 4) -> f_406(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v430, v408, v432, v409, v410, v411, v412, v413, 3, 4) :|: TRUE
f_406(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v405, v406, v407, v408, v409, v410, v411, v412, v413, 3, 4) -> f_407(v394, v395, v396, v397, v398, v399, v400, 1, 0, v403, v404, v406, v405, v407, v408, v409, v410, v411, v412, v413, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_407(v394:0, v395:0, v396:0, v397:0, v398:0, v399:0, v400:0, 1, 0, v403:0, v404:0, v406:0, v405:0, v407:0, 1 + v432:0, v409:0, v410:0, v411:0, v412:0, v413:0, 3, 4) -> f_407(v394:0, v395:0, v396:0, v397:0, v398:0, v399:0, v400:0, 1, 0, v403:0, v404:0, 1 + v406:0, v406:0, 1 + v432:0, v432:0, v409:0, v410:0, v411:0, v412:0, v413:0, 3, 4) :|: v400:0 > 1 && v406:0 > 0 && v406:0 < v400:0
Filtered unneeded arguments:
   f_407(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_407(x7, x12, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_407(v400:0, v406:0, sum~cons_1~v432:0) -> f_407(v400:0, 1 + v406:0, v432:0) :|: v406:0 > 0 && v406:0 < v400:0 && v400:0 > 1 && sum~cons_1~v432:0 = 1 + v432:0

----------------------------------------

(9)
Obligation:
Rules:
f_407(v400:0, v406:0, sum~cons_1~v432:0) -> f_407(v400:0, 1 + v406:0, v432:0) :|: v406:0 > 0 && v406:0 < v400:0 && v400:0 > 1 && sum~cons_1~v432:0 = 1 + v432:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_407(v400:0:0, v406:0:0, sum~cons_1~v432:0:0) -> f_407(v400:0:0, 1 + v406:0:0, v432:0:0) :|: v406:0:0 > 0 && v406:0:0 < v400:0:0 && v400:0:0 > 1 && sum~cons_1~v432:0:0 = 1 + v432:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_407 ] = -1*f_407_2 + f_407_1

The following rules are decreasing:
f_407(v400:0:0, v406:0:0, sum~cons_1~v432:0:0) -> f_407(v400:0:0, 1 + v406:0:0, v432:0:0) :|: v406:0:0 > 0 && v406:0:0 < v400:0:0 && v400:0:0 > 1 && sum~cons_1~v432:0:0 = 1 + v432:0:0

The following rules are bounded:
f_407(v400:0:0, v406:0:0, sum~cons_1~v432:0:0) -> f_407(v400:0:0, 1 + v406:0:0, v432:0:0) :|: v406:0:0 > 0 && v406:0:0 < v400:0:0 && v400:0:0 > 1 && sum~cons_1~v432:0:0 = 1 + v432:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_296(v108, v109, v110, v111, v112, v113, v114, 1, v117, v116, v118, v119, v120, v121, v122, v123, v124, 0, 3, 4) -> f_297(v108, v109, v110, v111, v112, v113, v114, 1, v117, v116, v118, v119, v120, v121, v122, v123, v124, 0, 3, 2, 4) :|: 0 < v117 && 2 <= v116 && 2 <= v113
f_297(v108, v109, v110, v111, v112, v113, v114, 1, v117, v116, v118, v119, v120, v121, v122, v123, v124, 0, 3, 2, 4) -> f_299(v108, v109, v110, v111, v112, v113, v114, 1, v117, v116, v118, v119, v120, v121, v122, v123, v124, 0, 3, 2, 4) :|: 0 = 0
f_299(v108, v109, v110, v111, v112, v113, v114, 1, v117, v116, v118, v119, v120, v121, v122, v123, v124, 0, 3, 2, 4) -> f_301(v108, v109, v110, v111, v112, v113, v114, 1, v117, v116, v118, v119, v120, v121, v122, v123, v124, 0, 3, 2, 4) :|: TRUE
f_301(v108, v109, v110, v111, v112, v113, v114, 1, v117, v116, v118, v119, v120, v121, v122, v123, v124, 0, 3, 2, 4) -> f_303(v108, v109, v110, v111, v112, v113, v114, 1, v117, v118, v119, v120, v121, v122, v123, v124, 0, 3, 2, 4) :|: 0 = 0
f_303(v108, v109, v110, v111, v112, v113, v114, 1, v117, v118, v119, v120, v121, v122, v123, v124, 0, 3, 2, 4) -> f_305(v108, v109, v110, v111, v112, v113, v114, 1, v117, v126, v118, v119, v120, v121, v122, v123, v124, 0, 3, 2, 4) :|: 1 + v126 = v117 && 0 <= v126
f_305(v108, v109, v110, v111, v112, v113, v114, 1, v117, v126, v118, v119, v120, v121, v122, v123, v124, 0, 3, 2, 4) -> f_307(v108, v109, v110, v111, v112, v113, v114, 1, v117, v126, v118, v119, v120, v121, v122, v123, v124, 0, 3, 2, 4) :|: TRUE
f_307(v108, v109, v110, v111, v112, v113, v114, 1, v117, v126, v118, v119, v120, v121, v122, v123, v124, 0, 3, 2, 4) -> f_309(v108, v109, v110, v111, v112, v113, v114, 1, v117, v126, v119, v120, v121, v122, v123, v124, 0, 3, 2, 4) :|: 0 = 0
f_309(v108, v109, v110, v111, v112, v113, v114, 1, v117, v126, v119, v120, v121, v122, v123, v124, 0, 3, 2, 4) -> f_311(v108, v109, v110, v111, v112, v113, v114, 1, v117, v126, v119, v128, v120, v121, v122, v123, v124, 0, 3, 2, 4) :|: v128 = 1 + v119 && 2 <= v128
f_311(v108, v109, v110, v111, v112, v113, v114, 1, v117, v126, v119, v128, v120, v121, v122, v123, v124, 0, 3, 2, 4) -> f_313(v108, v109, v110, v111, v112, v113, v114, 1, v117, v126, v119, v128, v120, v121, v122, v123, v124, 0, 3, 2, 4) :|: TRUE
f_313(v108, v109, v110, v111, v112, v113, v114, 1, v117, v126, v119, v128, v120, v121, v122, v123, v124, 0, 3, 2, 4) -> f_315(v108, v109, v110, v111, v112, v113, v114, 1, v117, v126, v119, v128, v120, v121, v122, v123, v124, 0, 3, 2, 4) :|: TRUE
f_315(v108, v109, v110, v111, v112, v113, v114, 1, v117, v126, v119, v128, v120, v121, v122, v123, v124, 0, 3, 2, 4) -> f_295(v108, v109, v110, v111, v112, v113, v114, 1, v117, v126, v119, v128, v120, v121, v122, v123, v124, 0, 3, 4) :|: TRUE
f_295(v108, v109, v110, v111, v112, v113, v114, 1, v116, v117, v118, v119, v120, v121, v122, v123, v124, 0, 3, 4) -> f_296(v108, v109, v110, v111, v112, v113, v114, 1, v117, v116, v118, v119, v120, v121, v122, v123, v124, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_296(v108:0, v109:0, v110:0, v111:0, v112:0, v113:0, v114:0, 1, 1 + v126:0, v116:0, v118:0, v119:0, v120:0, v121:0, v122:0, v123:0, v124:0, 0, 3, 4) -> f_296(v108:0, v109:0, v110:0, v111:0, v112:0, v113:0, v114:0, 1, v126:0, 1 + v126:0, v119:0, 1 + v119:0, v120:0, v121:0, v122:0, v123:0, v124:0, 0, 3, 4) :|: v116:0 > 1 && v126:0 > -1 && v113:0 > 1 && v119:0 > 0
Filtered unneeded arguments:
   f_296(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_296(x6, x9, x10, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_296(v113:0, sum~cons_1~v126:0, v116:0, v119:0) -> f_296(v113:0, v126:0, 1 + v126:0, 1 + v119:0) :|: v126:0 > -1 && v116:0 > 1 && v119:0 > 0 && v113:0 > 1 && sum~cons_1~v126:0 = 1 + v126:0

----------------------------------------

(16)
Obligation:
Rules:
f_296(v113:0, sum~cons_1~v126:0, v116:0, v119:0) -> f_296(v113:0, v126:0, 1 + v126:0, 1 + v119:0) :|: v126:0 > -1 && v116:0 > 1 && v119:0 > 0 && v113:0 > 1 && sum~cons_1~v126:0 = 1 + v126:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_296(v113:0:0, sum~cons_1~v126:0:0, v116:0:0, v119:0:0) -> f_296(v113:0:0, v126:0:0, 1 + v126:0:0, 1 + v119:0:0) :|: v119:0:0 > 0 && v113:0:0 > 1 && v116:0:0 > 1 && v126:0:0 > -1 && sum~cons_1~v126:0:0 = 1 + v126:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_296 ] = f_296_2

The following rules are decreasing:
f_296(v113:0:0, sum~cons_1~v126:0:0, v116:0:0, v119:0:0) -> f_296(v113:0:0, v126:0:0, 1 + v126:0:0, 1 + v119:0:0) :|: v119:0:0 > 0 && v113:0:0 > 1 && v116:0:0 > 1 && v126:0:0 > -1 && sum~cons_1~v126:0:0 = 1 + v126:0:0

The following rules are bounded:
f_296(v113:0:0, sum~cons_1~v126:0:0, v116:0:0, v119:0:0) -> f_296(v113:0:0, v126:0:0, 1 + v126:0:0, 1 + v119:0:0) :|: v119:0:0 > 0 && v113:0:0 > 1 && v116:0:0 > 1 && v126:0:0 > -1 && sum~cons_1~v126:0:0 = 1 + v126:0:0


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
