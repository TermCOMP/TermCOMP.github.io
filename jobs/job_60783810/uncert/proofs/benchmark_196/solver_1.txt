YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Elh9j.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1390 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 23 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 22 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 31 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Elh9j.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Elh9j.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32, 2 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		store 0, %7
		br %8
	8:
		%9 = load %4
		%10 = load %6
		%11 = icmp sgt %9 %10
		br %11, %12, %27
	12:
		br %13
	13:
		%14 = load %5
		%15 = load %6
		%16 = icmp sgt %14 %15
		br %16, %17, %22
	17:
		%18 = load %5
		%19 = sub i32 %18, 1
		store %19, %5
		%20 = load %7
		%21 = add i32 %20, 1
		store %21, %7
		br %13
	22:
		%23 = load %7
		%24 = add i32 %23, 1
		store %24, %7
		%25 = load %4
		%26 = sub i32 %25, 1
		store %26, %4
		br %8
	27:
		%28 = load %7
		ret %28

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 48
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = call i32 @test_fun(i32 %2, i32 %3, i32 %4)
		ret %5


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_508(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_509(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: 0 = 0
f_509(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_510(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: v681 < v694
f_510(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_512(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: 0 = 0
f_512(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_514(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: TRUE
f_514(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_516(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: TRUE
f_516(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_518(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: 0 = 0
f_518(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_520(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: 0 = 0
f_520(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_521(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: 0 = 0
f_521(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_522(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: TRUE
f_522(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_523(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: 0 = 0
f_523(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_524(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v693, v756, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: v756 = 1 + v693 && 3 <= v756
f_524(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v693, v756, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_525(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v693, v756, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: TRUE
f_525(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v693, v756, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_526(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v693, v756, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: 0 = 0
f_526(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v693, v756, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_527(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v693, v756, v758, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: 1 + v758 = v694
f_527(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v693, v756, v758, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_528(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v693, v756, v758, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: TRUE
f_528(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v693, v756, v758, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_529(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v693, v756, v758, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: TRUE
f_529(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v693, v756, v758, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_507(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v693, v756, v758, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: TRUE
f_507(v679, v680, v681, v682, v683, v684, v685, v686, 1, 0, v689, v690, v691, v692, v693, v694, v695, v696, v697, v698, v699, v700, 3, 2, 4) -> f_508(v679, v680, v681, v682, v683, v684, v685, v694, 1, 0, v689, v690, v691, v692, v693, v686, v695, v696, v697, v698, v699, v700, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_508(v679:0, v680:0, v681:0, v682:0, v683:0, v684:0, v685:0, 1 + v758:0, 1, 0, v689:0, v690:0, v691:0, v692:0, v693:0, v686:0, v695:0, v696:0, v697:0, v698:0, v699:0, v700:0, 3, 2, 4) -> f_508(v679:0, v680:0, v681:0, v682:0, v683:0, v684:0, v685:0, v758:0, 1, 0, v689:0, v690:0, v691:0, v693:0, 1 + v693:0, 1 + v758:0, v695:0, v696:0, v697:0, v698:0, v699:0, v700:0, 3, 2, 4) :|: v693:0 > 1 && v681:0 < 1 + v758:0
Filtered unneeded arguments:
   f_508(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_508(x3, x8, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_508(v681:0, sum~cons_1~v758:0, v693:0) -> f_508(v681:0, v758:0, 1 + v693:0) :|: v693:0 > 1 && v681:0 < 1 + v758:0 && sum~cons_1~v758:0 = 1 + v758:0

----------------------------------------

(9)
Obligation:
Rules:
f_508(v681:0, sum~cons_1~v758:0, v693:0) -> f_508(v681:0, v758:0, 1 + v693:0) :|: v693:0 > 1 && v681:0 < 1 + v758:0 && sum~cons_1~v758:0 = 1 + v758:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_508(v681:0:0, sum~cons_1~v758:0:0, v693:0:0) -> f_508(v681:0:0, v758:0:0, 1 + v693:0:0) :|: v693:0:0 > 1 && v681:0:0 < 1 + v758:0:0 && sum~cons_1~v758:0:0 = 1 + v758:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_508 ] = -1*f_508_1 + f_508_2

The following rules are decreasing:
f_508(v681:0:0, sum~cons_1~v758:0:0, v693:0:0) -> f_508(v681:0:0, v758:0:0, 1 + v693:0:0) :|: v693:0:0 > 1 && v681:0:0 < 1 + v758:0:0 && sum~cons_1~v758:0:0 = 1 + v758:0:0

The following rules are bounded:
f_508(v681:0:0, sum~cons_1~v758:0:0, v693:0:0) -> f_508(v681:0:0, v758:0:0, 1 + v693:0:0) :|: v693:0:0 > 1 && v681:0:0 < 1 + v758:0:0 && sum~cons_1~v758:0:0 = 1 + v758:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_459(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) -> f_461(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) :|: 0 = 0
f_461(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) -> f_463(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) :|: v491 < v501
f_463(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) -> f_467(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) :|: 0 = 0
f_467(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) -> f_470(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) :|: TRUE
f_470(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) -> f_473(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) :|: TRUE
f_473(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) -> f_477(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) :|: 0 = 0
f_477(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) -> f_481(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) :|: 0 = 0
f_481(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) -> f_484(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) :|: 0 = 0
f_484(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) -> f_487(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) :|: TRUE
f_487(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) -> f_490(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) :|: 0 = 0
f_490(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) -> f_492(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v500, v610, v496, v502, v503, v504, v505, v506, v507, 3, 4, 2) :|: v610 = 1 + v500 && 2 <= v610
f_492(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v500, v610, v496, v502, v503, v504, v505, v506, v507, 3, 4, 2) -> f_494(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v500, v610, v496, v502, v503, v504, v505, v506, v507, 3, 4, 2) :|: TRUE
f_494(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v500, v610, v496, v502, v503, v504, v505, v506, v507, 3, 4, 2) -> f_496(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v500, v610, v502, v503, v504, v505, v506, v507, 3, 4, 2) :|: 0 = 0
f_496(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v500, v610, v502, v503, v504, v505, v506, v507, 3, 4, 2) -> f_498(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v500, v610, v630, v502, v503, v504, v505, v506, v507, 3, 4, 2) :|: 1 + v630 = v501
f_498(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v500, v610, v630, v502, v503, v504, v505, v506, v507, 3, 4, 2) -> f_500(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v500, v610, v630, v502, v503, v504, v505, v506, v507, 3, 4, 2) :|: TRUE
f_500(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v500, v610, v630, v502, v503, v504, v505, v506, v507, 3, 4, 2) -> f_502(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v500, v610, v630, v502, v503, v504, v505, v506, v507, 3, 4, 2) :|: TRUE
f_502(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v500, v610, v630, v502, v503, v504, v505, v506, v507, 3, 4, 2) -> f_457(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v500, v610, v630, v502, v503, v504, v505, v506, v507, 3, 4) :|: TRUE
f_457(v489, v490, v491, v492, v493, v494, v495, v496, 1, 0, v499, v500, v501, v502, v503, v504, v505, v506, v507, 3, 4) -> f_459(v489, v490, v491, v492, v493, v494, v495, v501, 1, 0, v499, v500, v496, v502, v503, v504, v505, v506, v507, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_459(v489:0, v490:0, v491:0, v492:0, v493:0, v494:0, v495:0, 1 + v630:0, 1, 0, v499:0, v500:0, v496:0, v502:0, v503:0, v504:0, v505:0, v506:0, v507:0, 3, 4) -> f_459(v489:0, v490:0, v491:0, v492:0, v493:0, v494:0, v495:0, v630:0, 1, 0, v500:0, 1 + v500:0, 1 + v630:0, v502:0, v503:0, v504:0, v505:0, v506:0, v507:0, 3, 4) :|: v500:0 > 0 && v491:0 < 1 + v630:0
Filtered unneeded arguments:
   f_459(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_459(x3, x8, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_459(v491:0, sum~cons_1~v630:0, v500:0) -> f_459(v491:0, v630:0, 1 + v500:0) :|: v500:0 > 0 && v491:0 < 1 + v630:0 && sum~cons_1~v630:0 = 1 + v630:0

----------------------------------------

(16)
Obligation:
Rules:
f_459(v491:0, sum~cons_1~v630:0, v500:0) -> f_459(v491:0, v630:0, 1 + v500:0) :|: v500:0 > 0 && v491:0 < 1 + v630:0 && sum~cons_1~v630:0 = 1 + v630:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_459(v491:0:0, sum~cons_1~v630:0:0, v500:0:0) -> f_459(v491:0:0, v630:0:0, 1 + v500:0:0) :|: v500:0:0 > 0 && v491:0:0 < 1 + v630:0:0 && sum~cons_1~v630:0:0 = 1 + v630:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_459 ] = -1*f_459_1 + f_459_2

The following rules are decreasing:
f_459(v491:0:0, sum~cons_1~v630:0:0, v500:0:0) -> f_459(v491:0:0, v630:0:0, 1 + v500:0:0) :|: v500:0:0 > 0 && v491:0:0 < 1 + v630:0:0 && sum~cons_1~v630:0:0 = 1 + v630:0:0

The following rules are bounded:
f_459(v491:0:0, sum~cons_1~v630:0:0, v500:0:0) -> f_459(v491:0:0, v630:0:0, 1 + v500:0:0) :|: v500:0:0 > 0 && v491:0:0 < 1 + v630:0:0 && sum~cons_1~v630:0:0 = 1 + v630:0:0


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_386(v298, v299, v300, v301, v302, v303, v304, 1, v307, v306, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) -> f_388(v298, v299, v300, v301, v302, v303, v304, 1, v307, v306, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) :|: 0 = 0
f_388(v298, v299, v300, v301, v302, v303, v304, 1, v307, v306, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) -> f_390(v298, v299, v300, v301, v302, v303, v304, 1, v307, v306, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) :|: v300 < v307
f_390(v298, v299, v300, v301, v302, v303, v304, 1, v307, v306, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) -> f_393(v298, v299, v300, v301, v302, v303, v304, 1, v307, v306, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) :|: 0 = 0
f_393(v298, v299, v300, v301, v302, v303, v304, 1, v307, v306, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) -> f_396(v298, v299, v300, v301, v302, v303, v304, 1, v307, v306, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) :|: TRUE
f_396(v298, v299, v300, v301, v302, v303, v304, 1, v307, v306, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) -> f_399(v298, v299, v300, v301, v302, v303, v304, 1, v307, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) :|: 0 = 0
f_399(v298, v299, v300, v301, v302, v303, v304, 1, v307, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) -> f_402(v298, v299, v300, v301, v302, v303, v304, 1, v307, v340, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) :|: 1 + v340 = v307
f_402(v298, v299, v300, v301, v302, v303, v304, 1, v307, v340, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) -> f_405(v298, v299, v300, v301, v302, v303, v304, 1, v307, v340, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) :|: TRUE
f_405(v298, v299, v300, v301, v302, v303, v304, 1, v307, v340, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) -> f_409(v298, v299, v300, v301, v302, v303, v304, 1, v307, v340, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) :|: 0 = 0
f_409(v298, v299, v300, v301, v302, v303, v304, 1, v307, v340, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) -> f_412(v298, v299, v300, v301, v302, v303, v304, 1, v307, v340, v309, v364, v310, v311, v312, v313, v314, v315, 0, 3, 4, 2) :|: v364 = 1 + v309 && 2 <= v364
f_412(v298, v299, v300, v301, v302, v303, v304, 1, v307, v340, v309, v364, v310, v311, v312, v313, v314, v315, 0, 3, 4, 2) -> f_415(v298, v299, v300, v301, v302, v303, v304, 1, v307, v340, v309, v364, v310, v311, v312, v313, v314, v315, 0, 3, 4, 2) :|: TRUE
f_415(v298, v299, v300, v301, v302, v303, v304, 1, v307, v340, v309, v364, v310, v311, v312, v313, v314, v315, 0, 3, 4, 2) -> f_419(v298, v299, v300, v301, v302, v303, v304, 1, v307, v340, v309, v364, v310, v311, v312, v313, v314, v315, 0, 3, 4, 2) :|: TRUE
f_419(v298, v299, v300, v301, v302, v303, v304, 1, v307, v340, v309, v364, v310, v311, v312, v313, v314, v315, 0, 3, 4, 2) -> f_384(v298, v299, v300, v301, v302, v303, v304, 1, v307, v340, v309, v364, v310, v311, v312, v313, v314, v315, 0, 3, 4) :|: TRUE
f_384(v298, v299, v300, v301, v302, v303, v304, 1, v306, v307, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) -> f_386(v298, v299, v300, v301, v302, v303, v304, 1, v307, v306, v308, v309, v310, v311, v312, v313, v314, v315, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_386(v298:0, v299:0, v300:0, v301:0, v302:0, v303:0, v304:0, 1, 1 + v340:0, v306:0, v308:0, v309:0, v310:0, v311:0, v312:0, v313:0, v314:0, v315:0, 0, 3, 4) -> f_386(v298:0, v299:0, v300:0, v301:0, v302:0, v303:0, v304:0, 1, v340:0, 1 + v340:0, v309:0, 1 + v309:0, v310:0, v311:0, v312:0, v313:0, v314:0, v315:0, 0, 3, 4) :|: v309:0 > 0 && v300:0 < 1 + v340:0
Filtered unneeded arguments:
   f_386(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_386(x3, x9, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_386(v300:0, sum~cons_1~v340:0, v309:0) -> f_386(v300:0, v340:0, 1 + v309:0) :|: v309:0 > 0 && v300:0 < 1 + v340:0 && sum~cons_1~v340:0 = 1 + v340:0

----------------------------------------

(23)
Obligation:
Rules:
f_386(v300:0, sum~cons_1~v340:0, v309:0) -> f_386(v300:0, v340:0, 1 + v309:0) :|: v309:0 > 0 && v300:0 < 1 + v340:0 && sum~cons_1~v340:0 = 1 + v340:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_386(v300:0:0, sum~cons_1~v340:0:0, v309:0:0) -> f_386(v300:0:0, v340:0:0, 1 + v309:0:0) :|: v309:0:0 > 0 && v300:0:0 < 1 + v340:0:0 && sum~cons_1~v340:0:0 = 1 + v340:0:0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_386(x, x1, x2)] = -x + x1

The following rules are decreasing:
f_386(v300:0:0, sum~cons_1~v340:0:0, v309:0:0) -> f_386(v300:0:0, v340:0:0, 1 + v309:0:0) :|: v309:0:0 > 0 && v300:0:0 < 1 + v340:0:0 && sum~cons_1~v340:0:0 = 1 + v340:0:0
The following rules are bounded:
f_386(v300:0:0, sum~cons_1~v340:0:0, v309:0:0) -> f_386(v300:0:0, v340:0:0, 1 + v309:0:0) :|: v309:0:0 > 0 && v300:0:0 < 1 + v340:0:0 && sum~cons_1~v340:0:0 = 1 + v340:0:0

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
