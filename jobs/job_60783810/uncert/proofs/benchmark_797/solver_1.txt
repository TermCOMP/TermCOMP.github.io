MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/hW7Ey.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 98 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
    (7) SCC2IRS [SOUND, 14 ms]
    (8) IntTRS
        (9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (10) IntTRS
        (11) IntTRSPeriodicNontermProof [COMPLETE, 8 ms]
        (12) NO
    (13) SCC2IRS [SOUND, 0 ms]
    (14) IntTRS
        (15) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (16) IntTRS
        (17) IntTRSPeriodicNontermProof [COMPLETE, 5 ms]
        (18) NO
(19) SEGraph to IRS [SOUND, 18 ms]
(20) IntTRS
    (21) IRSToKoat [EQUIVALENT, 0 ms]
    (22) Koat Problem
    (23) KoAT2 [EQUIVALENT, 155 ms]
    (24) MAYBE
(25) SEGraph to IRS [SOUND, 18 ms]
(26) IntTRS
    (27) IRSNoOverapproximation [EQUIVALENT, 0 ms]
    (28) MAYBE


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/hW7Ey.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/hW7Ey.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca [1048 x i32], align 16
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[1048 x i32] %2)
		br %3
	3:
		%4 = getelementptr %2, 0, 2
		%5 = load %4
		%6 = icmp sge %5 0
		br %6, %7, %14
	7:
		%8 = getelementptr %2, 0, 2
		%9 = load %8
		%10 = sub i32 %9, 1
		%11 = getelementptr %2, 0, 2
		store %10, %11
		%12 = call i32 @__VERIFIER_nondet_int()
		%13 = getelementptr %2, 0, 2
		store %12, %13
		br %3
	14:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_84(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_85(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_85(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_86(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 <= v10
f_86(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_88(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_88(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_90(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_90(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_92(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_92(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_93(v1, v3, v5, v10, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_93(v1, v3, v5, v10, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_94(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 1 + v12 = v10 && 0 <= 1 + v12
f_94(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_95(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_95(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_96(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_96(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_97(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_97(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_98(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_98(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_99(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_99(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_100(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_100(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_83(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_83(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_84(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
Combined rules. Obtained 1 rulesP rules:
f_84(v1:0, v3:0, 8 + v3:0, v6:0, 1, v8:0, 1 + v12:0, v2:0, v4:0, 0, 3, 4191, 8, 4, 4192, 9) -> f_84(v1:0, v3:0, 8 + v3:0, 1 + v12:0, 1, v12:0, v14:0, v2:0, v4:0, 0, 3, 4191, 8, 4, 4192, 9) :|: v12:0 > -2
Filtered unneeded arguments:
   f_84(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_84(x2, x3, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_84(v3:0, sum~cons_8~v3:0, sum~cons_1~v12:0) -> f_84(v3:0, 8 + v3:0, v14:0) :|: v12:0 > -2 && sum~cons_8~v3:0 = 8 + v3:0 && sum~cons_1~v12:0 = 1 + v12:0

----------------------------------------

(8)
Obligation:
Rules:
f_84(v3:0, sum~cons_8~v3:0, sum~cons_1~v12:0) -> f_84(v3:0, 8 + v3:0, v14:0) :|: v12:0 > -2 && sum~cons_8~v3:0 = 8 + v3:0 && sum~cons_1~v12:0 = 1 + v12:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_84(v3:0:0, sum~cons_8~v3:0:0, sum~cons_1~v12:0:0) -> f_84(v3:0:0, 8 + v3:0:0, v14:0:0) :|: v12:0:0 > -2 && sum~cons_8~v3:0:0 = 8 + v3:0:0 && sum~cons_1~v12:0:0 = 1 + v12:0:0

----------------------------------------

(11) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v3:0:0, sum~cons_8~v3:0:0, sum~cons_1~v12:0:0) -> f(1, v3:0:0, 8 + v3:0:0, v14:0:0) :|: pc = 1 && (v12:0:0 > -2 && sum~cons_8~v3:0:0 = 8 + v3:0:0 && sum~cons_1~v12:0:0 = 1 + v12:0:0)
Witness term starting non-terminating reduction: f(1, -8, 0, 3)
----------------------------------------

(12)
NO

----------------------------------------

(13) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_84(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_85(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_85(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_86(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 <= v10
f_86(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_88(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_88(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_90(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_90(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_92(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_92(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_93(v1, v3, v5, v10, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_93(v1, v3, v5, v10, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_94(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 1 + v12 = v10 && 0 <= 1 + v12
f_94(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_95(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_95(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_96(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_96(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_97(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_97(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_98(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_98(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_99(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_99(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_100(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_100(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_83(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 1 <= v1 && 4 <= v2 && 1 <= v3 && 4192 <= v4 && 9 <= v5 && 0 <= v10 && 0 <= 1 + v12 && v1 <= v2 && v3 <= v4
f_83(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_84(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
Combined rules. Obtained 1 rulesP rules:
f_84(v1:0, v3:0, 8 + v3:0, v6:0, 1, v8:0, 1 + v12:0, v2:0, v4:0, 0, 3, 4191, 8, 4, 4192, 9) -> f_84(v1:0, v3:0, 8 + v3:0, 1 + v12:0, 1, v12:0, v14:0, v2:0, v4:0, 0, 3, 4191, 8, 4, 4192, 9) :|: v12:0 > -2 && v2:0 > 3 && v1:0 > 0 && v3:0 > 0 && v4:0 > 4191 && v4:0 >= v3:0 && v2:0 >= v1:0
Filtered unneeded arguments:
   f_84(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_84(x1, x2, x3, x7, x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_84(v1:0, v3:0, sum~cons_8~v3:0, sum~cons_1~v12:0, v2:0, v4:0) -> f_84(v1:0, v3:0, 8 + v3:0, v14:0, v2:0, v4:0) :|: v2:0 > 3 && v12:0 > -2 && v1:0 > 0 && v3:0 > 0 && v4:0 > 4191 && v2:0 >= v1:0 && v4:0 >= v3:0 && sum~cons_8~v3:0 = 8 + v3:0 && sum~cons_1~v12:0 = 1 + v12:0

----------------------------------------

(14)
Obligation:
Rules:
f_84(v1:0, v3:0, sum~cons_8~v3:0, sum~cons_1~v12:0, v2:0, v4:0) -> f_84(v1:0, v3:0, 8 + v3:0, v14:0, v2:0, v4:0) :|: v2:0 > 3 && v12:0 > -2 && v1:0 > 0 && v3:0 > 0 && v4:0 > 4191 && v2:0 >= v1:0 && v4:0 >= v3:0 && sum~cons_8~v3:0 = 8 + v3:0 && sum~cons_1~v12:0 = 1 + v12:0

----------------------------------------

(15) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(16)
Obligation:
Rules:
f_84(v1:0:0, v3:0:0, sum~cons_8~v3:0:0, sum~cons_1~v12:0:0, v2:0:0, v4:0:0) -> f_84(v1:0:0, v3:0:0, 8 + v3:0:0, v14:0:0, v2:0:0, v4:0:0) :|: v2:0:0 >= v1:0:0 && v4:0:0 >= v3:0:0 && v4:0:0 > 4191 && v3:0:0 > 0 && v1:0:0 > 0 && v12:0:0 > -2 && v2:0:0 > 3 && sum~cons_8~v3:0:0 = 8 + v3:0:0 && sum~cons_1~v12:0:0 = 1 + v12:0:0

----------------------------------------

(17) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v1:0:0, v3:0:0, sum~cons_8~v3:0:0, sum~cons_1~v12:0:0, v2:0:0, v4:0:0) -> f(1, v1:0:0, v3:0:0, 8 + v3:0:0, v14:0:0, v2:0:0, v4:0:0) :|: pc = 1 && (v2:0:0 >= v1:0:0 && v4:0:0 >= v3:0:0 && v4:0:0 > 4191 && v3:0:0 > 0 && v1:0:0 > 0 && v12:0:0 > -2 && v2:0:0 > 3 && sum~cons_8~v3:0:0 = 8 + v3:0:0 && sum~cons_1~v12:0:0 = 1 + v12:0:0)
Witness term starting non-terminating reduction: f(1, 2048, 2040, 2048, 8191, 6022, 4198)
----------------------------------------

(18)
NO

----------------------------------------

(19) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 40 rulesP rules:
f_61 -> f_62(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_62(v1, v2, 3, 1, 4) -> f_63(v1, v3, v2, v4, 3, 4191, 1, 4, 4192) :|: 1 <= v3 && v4 = 4191 + v3 && 4192 <= v4
f_63(v1, v3, v2, v4, 3, 4191, 1, 4, 4192) -> f_64(v1, v3, v2, v4, 0, 3, 4191, 1, 4, 4192) :|: TRUE
f_64(v1, v3, v2, v4, 0, 3, 4191, 1, 4, 4192) -> f_65(v1, v3, v2, v4, 0, 3, 4191, 1, 4, 4192) :|: TRUE
f_65(v1, v3, v2, v4, 0, 3, 4191, 1, 4, 4192) -> f_66(v1, v3, v2, v4, 0, 3, 4191, 1, 4, 4192) :|: TRUE
f_66(v1, v3, v2, v4, 0, 3, 4191, 1, 4, 4192) -> f_67(v1, v3, v5, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) :|: v5 = 8 + v3 && 9 <= v5
f_67(v1, v3, v5, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) -> f_68(v1, v3, v5, v6, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) :|: TRUE
f_68(v1, v3, v5, v6, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) -> f_69(v1, v3, v5, v6, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) :|: 0 <= v6
f_68(v1, v3, v5, v6, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) -> f_70(v1, v3, v5, v6, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) :|: v6 < 0
f_69(v1, v3, v5, v6, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) -> f_71(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_70(v1, v3, v5, v6, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) -> f_72(v1, v3, v5, v6, 0, v2, v4, 3, 4191, 8, 1, 4, 4192, 9) :|: 0 = 0
f_71(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_73(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_72(v1, v3, v5, v6, 0, v2, v4, 3, 4191, 8, 1, 4, 4192, 9) -> f_74(v1, v3, v5, v6, 0, v2, v4, 3, 4191, 8, 1, 4, 4192, 9) :|: TRUE
f_73(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_75(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_75(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_76(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_76(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_77(v1, v3, v5, v6, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 1 + v8 = v6 && 0 <= 1 + v8
f_77(v1, v3, v5, v6, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_78(v1, v3, v5, v6, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_78(v1, v3, v5, v6, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_79(v1, v3, v5, v6, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_79(v1, v3, v5, v6, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_80(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_80(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_81(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_81(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_82(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_82(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_83(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_83(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_84(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_84(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_85(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_85(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_86(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 <= v10
f_85(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_87(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v10 < 0
f_86(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_88(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_87(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_89(v1, v3, v5, v10, 0, v6, v8, v2, v4, 3, 4191, 8, 1, 4, 4192, 9) :|: 0 = 0
f_88(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_90(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_89(v1, v3, v5, v10, 0, v6, v8, v2, v4, 3, 4191, 8, 1, 4, 4192, 9) -> f_91(v1, v3, v5, v10, 0, v6, v8, v2, v4, 3, 4191, 8, 1, 4, 4192, 9) :|: TRUE
f_90(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_92(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_92(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_93(v1, v3, v5, v10, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_93(v1, v3, v5, v10, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_94(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 1 + v12 = v10 && 0 <= 1 + v12
f_94(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_95(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_95(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_96(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_96(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_97(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_97(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_98(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_98(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_99(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_99(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_100(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_100(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_83(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_61 -> f_85(v1:0, v3:0, 8 + v3:0, v10:0, 1, 1 + v8:0, v8:0, 3 + v1:0, 4191 + v3:0, 0, 3, 4191, 8, 4, 4192, 9) :|: v3:0 > 0 && v1:0 > 0 && v8:0 > -2
f_85(v1:0, v3:0, v5:0, v10:0, 1, v6:0, v8:0, v2:0, v4:0, 0, 3, 4191, 8, 4, 4192, 9) -> f_91(v1:0, v3:0, v5:0, v10:0, 0, v6:0, v8:0, v2:0, v4:0, 3, 4191, 8, 1, 4, 4192, 9) :|: v10:0 < 0
f_61 -> f_74(v1:0, v3:0, 8 + v3:0, v6:0, 0, 3 + v1:0, 4191 + v3:0, 3, 4191, 8, 1, 4, 4192, 9) :|: v3:0 > 0 && v1:0 > 0 && v6:0 < 0
f_85(v1:0, v3:0, 8 + v3:0, 1 + v12:0, 1, v6:0, v8:0, v2:0, v4:0, 0, 3, 4191, 8, 4, 4192, 9) -> f_85(v1:0, v3:0, 8 + v3:0, v14:0, 1, 1 + v12:0, v12:0, v2:0, v4:0, 0, 3, 4191, 8, 4, 4192, 9) :|: v12:0 > -2
Filtered unneeded arguments:
   f_85(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_85(x2, x3, x4)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_61 -> f_85(v3:0, 8 + v3:0, v10:0) :|: v3:0 > 0
f_85(v3:0, v5:0, v10:0) -> f_91(v1:0, v3:0, v5:0, v10:0, 0, v6:0, v8:0, v2:0, v4:0, 3, 4191, 8, 1, 4, 4192, 9) :|: v10:0 < 0
f_61 -> f_74(v1:0, v3:0, 8 + v3:0, v6:0, 0, 3 + v1:0, 4191 + v3:0, 3, 4191, 8, 1, 4, 4192, 9) :|: v1:0 > 0 && v6:0 < 0 && v3:0 > 0
f_85(v3:0, sum~cons_8~v3:0, sum~cons_1~v12:0) -> f_85(v3:0, 8 + v3:0, v14:0) :|: v12:0 > -2 && sum~cons_8~v3:0 = 8 + v3:0 && sum~cons_1~v12:0 = 1 + v12:0

----------------------------------------

(20)
Obligation:
Rules:
f_61 -> f_85(v3:0, 8 + v3:0, v10:0) :|: v3:0 > 0
f_85(x, x1, x2) -> f_91(x3, x, x1, x2, 0, x4, x5, x6, x7, 3, 4191, 8, 1, 4, 4192, 9) :|: x2 < 0
f_61 -> f_74(x8, x9, 8 + x9, x10, 0, 3 + x8, 4191 + x9, 3, 4191, 8, 1, 4, 4192, 9) :|: x8 > 0 && x10 < 0 && x9 > 0
f_85(x11, x12, x13) -> f_85(x11, 8 + x11, x14) :|: x15 > -2 && x12 = 8 + x11 && x13 = 1 + x15
Start term: f_61

----------------------------------------

(21) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(22)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_61))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x40 x41 x39 x35 x36 x37 x38 x31 x32 x33 x34 x30 x70 x68 x69 x64 x65 x66 x67 x60 x61 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x58 x59 x53 x54 x55 x56 x50 x51 x52 x x82 x83 x80 x81 x79 x75 x76 x'' x77 x78 x71 x72 x73 x74 k14 k15 k16 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x7 x27 x20 x21 x22 x23 x1 x' x17 x18 x19 x13 x14 x15 x16 x10 x11 x12)
(RULES
  f_85(k13, k14, k7, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41) -> f_85(k13, 8 + k13, k9, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54) :|: x15 > -2 && k14 = 8 + k13 && k7 = 1 + x15
  f_85(k15, k16, k4, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_91(k5, k15, k16, k4, 0, k1, k3, k10, k11, 3, 4191, 8, 1, 4, 4192, 9) :|: k4 < 0
  f_61(x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) -> f_74(k6, k8, 8 + k8, k12, 0, 3 + k6, 4191 + k8, 3, 4191, 8, 1, 4, 4192, 9, x14, x15) :|: k6 > 0 && k12 < 0 && k8 > 0
  f_61(x55, x56, x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x70) -> f_85(k2, 8 + k2, k0, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82, x83) :|: k2 > 0
)

----------------------------------------

(23) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_4843151472937124429.koat 

KoAT2's output was:

MAYBE

----------------------------------------

(24)
MAYBE

----------------------------------------

(25) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 40 rulesP rules:
f_61 -> f_62(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_62(v1, v2, 3, 1, 4) -> f_63(v1, v3, v2, v4, 3, 4191, 1, 4, 4192) :|: 1 <= v3 && v4 = 4191 + v3 && 4192 <= v4
f_63(v1, v3, v2, v4, 3, 4191, 1, 4, 4192) -> f_64(v1, v3, v2, v4, 0, 3, 4191, 1, 4, 4192) :|: TRUE
f_64(v1, v3, v2, v4, 0, 3, 4191, 1, 4, 4192) -> f_65(v1, v3, v2, v4, 0, 3, 4191, 1, 4, 4192) :|: TRUE
f_65(v1, v3, v2, v4, 0, 3, 4191, 1, 4, 4192) -> f_66(v1, v3, v2, v4, 0, 3, 4191, 1, 4, 4192) :|: TRUE
f_66(v1, v3, v2, v4, 0, 3, 4191, 1, 4, 4192) -> f_67(v1, v3, v5, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) :|: v5 = 8 + v3 && 9 <= v5
f_67(v1, v3, v5, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) -> f_68(v1, v3, v5, v6, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) :|: TRUE
f_68(v1, v3, v5, v6, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) -> f_69(v1, v3, v5, v6, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) :|: 0 <= v6
f_68(v1, v3, v5, v6, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) -> f_70(v1, v3, v5, v6, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) :|: v6 < 0
f_69(v1, v3, v5, v6, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) -> f_71(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_70(v1, v3, v5, v6, v2, v4, 0, 3, 4191, 8, 1, 4, 4192, 9) -> f_72(v1, v3, v5, v6, 0, v2, v4, 3, 4191, 8, 1, 4, 4192, 9) :|: 0 = 0
f_71(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_73(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_72(v1, v3, v5, v6, 0, v2, v4, 3, 4191, 8, 1, 4, 4192, 9) -> f_74(v1, v3, v5, v6, 0, v2, v4, 3, 4191, 8, 1, 4, 4192, 9) :|: TRUE
f_73(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_75(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_75(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_76(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_76(v1, v3, v5, v6, 1, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_77(v1, v3, v5, v6, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 1 + v8 = v6 && 0 <= 1 + v8
f_77(v1, v3, v5, v6, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_78(v1, v3, v5, v6, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_78(v1, v3, v5, v6, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_79(v1, v3, v5, v6, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_79(v1, v3, v5, v6, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_80(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_80(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_81(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_81(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_82(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_82(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_83(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_83(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_84(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_84(v1, v3, v5, v6, 1, v8, v10, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_85(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_85(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_86(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 <= v10
f_85(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_87(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v10 < 0
f_86(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_88(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_87(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_89(v1, v3, v5, v10, 0, v6, v8, v2, v4, 3, 4191, 8, 1, 4, 4192, 9) :|: 0 = 0
f_88(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_90(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_89(v1, v3, v5, v10, 0, v6, v8, v2, v4, 3, 4191, 8, 1, 4, 4192, 9) -> f_91(v1, v3, v5, v10, 0, v6, v8, v2, v4, 3, 4191, 8, 1, 4, 4192, 9) :|: TRUE
f_90(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_92(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_92(v1, v3, v5, v10, 1, v6, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_93(v1, v3, v5, v10, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 0 = 0
f_93(v1, v3, v5, v10, 1, v8, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_94(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: 1 + v12 = v10 && 0 <= 1 + v12
f_94(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_95(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_95(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_96(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_96(v1, v3, v5, v10, 1, v12, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_97(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_97(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_98(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: v5 = 8 + v3
f_98(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_99(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_99(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_100(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
f_100(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) -> f_83(v1, v3, v5, v10, 1, v12, v14, v2, v4, 0, 3, 4191, 8, 4, 4192, 9) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_61 -> f_85(v1:0, v3:0, 8 + v3:0, v10:0, 1, 1 + v8:0, v8:0, 3 + v1:0, 4191 + v3:0, 0, 3, 4191, 8, 4, 4192, 9) :|: v3:0 > 0 && v1:0 > 0 && v8:0 > -2
f_85(v1:0, v3:0, v5:0, v10:0, 1, v6:0, v8:0, v2:0, v4:0, 0, 3, 4191, 8, 4, 4192, 9) -> f_91(v1:0, v3:0, v5:0, v10:0, 0, v6:0, v8:0, v2:0, v4:0, 3, 4191, 8, 1, 4, 4192, 9) :|: v10:0 < 0
f_61 -> f_74(v1:0, v3:0, 8 + v3:0, v6:0, 0, 3 + v1:0, 4191 + v3:0, 3, 4191, 8, 1, 4, 4192, 9) :|: v3:0 > 0 && v1:0 > 0 && v6:0 < 0
f_85(v1:0, v3:0, 8 + v3:0, 1 + v12:0, 1, v6:0, v8:0, v2:0, v4:0, 0, 3, 4191, 8, 4, 4192, 9) -> f_85(v1:0, v3:0, 8 + v3:0, v14:0, 1, 1 + v12:0, v12:0, v2:0, v4:0, 0, 3, 4191, 8, 4, 4192, 9) :|: v12:0 > -2
Filtered unneeded arguments:
   f_85(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_85(x2, x3, x4)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_61 -> f_85(v3:0, 8 + v3:0, v10:0) :|: v3:0 > 0
f_85(v3:0, v5:0, v10:0) -> f_91(v1:0, v3:0, v5:0, v10:0, 0, v6:0, v8:0, v2:0, v4:0, 3, 4191, 8, 1, 4, 4192, 9) :|: v10:0 < 0
f_61 -> f_74(v1:0, v3:0, 8 + v3:0, v6:0, 0, 3 + v1:0, 4191 + v3:0, 3, 4191, 8, 1, 4, 4192, 9) :|: v1:0 > 0 && v6:0 < 0 && v3:0 > 0
f_85(v3:0, sum~cons_8~v3:0, sum~cons_1~v12:0) -> f_85(v3:0, 8 + v3:0, v14:0) :|: v12:0 > -2 && sum~cons_8~v3:0 = 8 + v3:0 && sum~cons_1~v12:0 = 1 + v12:0

----------------------------------------

(26)
Obligation:
Rules:
f_61 -> f_85(v3:0, 8 + v3:0, v10:0) :|: v3:0 > 0
f_85(x, x1, x2) -> f_91(x3, x, x1, x2, 0, x4, x5, x6, x7, 3, 4191, 8, 1, 4, 4192, 9) :|: x2 < 0
f_61 -> f_74(x8, x9, 8 + x9, x10, 0, 3 + x8, 4191 + x9, 3, 4191, 8, 1, 4, 4192, 9) :|: x8 > 0 && x10 < 0 && x9 > 0
f_85(x11, x12, x13) -> f_85(x11, 8 + x11, x14) :|: x15 > -2 && x12 = 8 + x11 && x13 = 1 + x15
Start term: f_61

----------------------------------------

(27) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination is aborted since the IRSProblem over-approximates
----------------------------------------

(28)
MAYBE
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
