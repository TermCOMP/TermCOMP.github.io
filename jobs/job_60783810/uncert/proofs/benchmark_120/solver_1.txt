YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/iW3LV.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 50 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 848 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 86 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 79 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/iW3LV.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/iW3LV.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		%4 = alloca *i32, align 8
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%7 = alloca i8, numElementsLit: 4, align 16
		%8 = bitcast *i8 %7 to *i32
		store %8, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %4)
		%11 = alloca i8, numElementsLit: 4, align 16
		%12 = bitcast *i8 %11 to *i32
		store %12, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%13 = alloca i8, numElementsLit: 4, align 16
		%14 = bitcast *i8 %13 to *i32
		store %14, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%15 = alloca i8, numElementsLit: 4, align 16
		%16 = bitcast *i8 %15 to *i32
		store %16, %6
		%17 = call i32 @__VERIFIER_nondet_int()
		%18 = icmp ne %17 0
		br %18, %19, %21
	19:
		%20 = load %2
		store 1, %20
		br %23
	21:
		%22 = load %2
		store -1, %22
		br %23
	23:
		br %24
	24:
		%25 = load %3
		%26 = load %25
		%27 = icmp slt %26 100
		br %27, %28, %32
	28:
		%29 = load %4
		%30 = load %29
		%31 = icmp slt %30 100
		br %32
	32:
		%33 = phi [0, %24], [%31, %28]
		br %33, %34, %47
	34:
		%35 = load %3
		%36 = load %35
		%37 = load %2
		%38 = load %37
		%39 = add i32 %36, %38
		%40 = load %3
		store %39, %40
		%41 = load %4
		%42 = load %41
		%43 = load %2
		%44 = load %43
		%45 = sub i32 %42, %44
		%46 = load %4
		store %45, %46
		br %24
	47:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_305(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v31, 1, v35, -1, v190, v194, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98, 100) -> f_307(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v35, v31, -1, v194, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98, 100) :|: 0 = 0
f_307(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v35, v31, -1, v194, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98, 100) -> f_310(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v35, v31, -1, v194, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98, 100) :|: 0 = 0
f_310(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v35, v31, -1, v194, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98, 100) -> f_313(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v35, v31, -1, v194, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98, 100) :|: TRUE
f_313(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v35, v31, -1, v194, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98, 100) -> f_316(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v35, v31, -1, v194, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98, 100) :|: 0 = 0
f_316(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v35, v31, -1, v194, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98, 100) -> f_319(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, v31, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98, 100) :|: 0 = 0
f_319(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, v31, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98, 100) -> f_321(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, v31, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98) :|: v194 < 100 && v35 <= 98
f_321(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, v31, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98) -> f_324(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, v31, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98) :|: 0 = 0
f_324(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, v31, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98) -> f_327(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, v31, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98) :|: 0 = 0
f_327(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, v31, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98) -> f_330(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, v31, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98) :|: TRUE
f_330(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, v31, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98) -> f_333(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, v31, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98) :|: 0 = 0
f_333(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, v31, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98) -> f_335(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99) :|: 0 = 0
f_335(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99) -> f_337(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99) :|: 0 = 0
f_337(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99) -> f_339(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99) :|: 0 = 0
f_339(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99) -> f_341(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97) :|: 1 + v732 = v190 && v732 <= 97
f_341(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97) -> f_343(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97) :|: 0 = 0
f_343(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97) -> f_345(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97) :|: TRUE
f_345(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97) -> f_347(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97) :|: 0 = 0
f_347(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v35, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97) -> f_349(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97) :|: 0 = 0
f_349(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97) -> f_351(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97) :|: 0 = 0
f_351(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97) -> f_353(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97) :|: 0 = 0
f_353(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97) -> f_355(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v736, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97, 100) :|: v736 = 1 + v194 && v736 <= 100
f_355(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v736, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97, 100) -> f_357(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v736, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97, 100) :|: 0 = 0
f_357(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v736, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97, 100) -> f_359(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v736, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97, 100) :|: TRUE
f_359(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v736, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97, 100) -> f_361(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v736, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97, 100) :|: TRUE
f_361(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v736, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 98, 99, 97, 100) -> f_303(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v190, 1, v194, -1, v732, v736, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98, 100) :|: TRUE
f_303(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v31, 1, v35, -1, v190, v194, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98, 100) -> f_305(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, 0, v31, 1, v35, -1, v190, v194, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 3, 7, 4, 8, 99, 98, 100) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_305(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v16:0, v19:0, v22:0, v25:0, 0, v31:0, 1, v35:0, -1, 1 + v732:0, v194:0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0, v14:0, v17:0, v20:0, v23:0, v26:0, 3, 7, 4, 8, 99, 98, 100) -> f_305(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v16:0, v19:0, v22:0, v25:0, 0, 1 + v732:0, 1, v194:0, -1, v732:0, 1 + v194:0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0, v14:0, v17:0, v20:0, v23:0, v26:0, 3, 7, 4, 8, 99, 98, 100) :|: v35:0 < 99 && v194:0 < 100 && v732:0 < 98
Filtered unneeded arguments:
   f_305(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36) -> f_305(x15, x17, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_305(v35:0, sum~cons_1~v732:0, v194:0) -> f_305(v194:0, v732:0, 1 + v194:0) :|: v194:0 < 100 && v732:0 < 98 && v35:0 < 99 && sum~cons_1~v732:0 = 1 + v732:0

----------------------------------------

(9)
Obligation:
Rules:
f_305(v35:0, sum~cons_1~v732:0, v194:0) -> f_305(v194:0, v732:0, 1 + v194:0) :|: v194:0 < 100 && v732:0 < 98 && v35:0 < 99 && sum~cons_1~v732:0 = 1 + v732:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_305(v35:0:0, sum~cons_1~v732:0:0, v194:0:0) -> f_305(v194:0:0, v732:0:0, 1 + v194:0:0) :|: v194:0:0 < 100 && v732:0:0 < 98 && v35:0:0 < 99 && sum~cons_1~v732:0:0 = 1 + v732:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_305(x, x1, x2)] = 99 - x2

The following rules are decreasing:
f_305(v35:0:0, sum~cons_1~v732:0:0, v194:0:0) -> f_305(v194:0:0, v732:0:0, 1 + v194:0:0) :|: v194:0:0 < 100 && v732:0:0 < 98 && v35:0:0 < 99 && sum~cons_1~v732:0:0 = 1 + v732:0:0
The following rules are bounded:
f_305(v35:0:0, sum~cons_1~v732:0:0, v194:0:0) -> f_305(v194:0:0, v732:0:0, 1 + v194:0:0) :|: v194:0:0 < 100 && v732:0:0 < 98 && v35:0:0 < 99 && sum~cons_1~v732:0:0 = 1 + v732:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_304(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v29, v33, v189, v193, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 100, 98) -> f_306(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v33, v29, v193, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 100, 98) :|: 0 = 0
f_306(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v33, v29, v193, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 100, 98) -> f_308(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v33, v29, v193, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) :|: v189 < 100 && v29 <= 98
f_308(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v33, v29, v193, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) -> f_311(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v33, v29, v193, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) :|: 0 = 0
f_311(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v33, v29, v193, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) -> f_314(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v33, v29, v193, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) :|: TRUE
f_314(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v33, v29, v193, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) -> f_317(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v33, v29, v193, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) :|: 0 = 0
f_317(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v33, v29, v193, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) -> f_320(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) :|: 0 = 0
f_320(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) -> f_323(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) :|: 0 = 0
f_323(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) -> f_326(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) :|: 0 = 0
f_326(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) -> f_329(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) :|: TRUE
f_329(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) -> f_332(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) :|: 0 = 0
f_332(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v29, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 98, 99) -> f_334(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98) :|: 0 = 0
f_334(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98) -> f_336(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98) :|: 0 = 0
f_336(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98) -> f_338(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98) :|: 0 = 0
f_338(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98) -> f_340(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100) :|: v731 = 1 + v189 && v731 <= 100
f_340(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100) -> f_342(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100) :|: 0 = 0
f_342(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100) -> f_344(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100) :|: TRUE
f_344(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100) -> f_346(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100) :|: 0 = 0
f_346(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v33, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100) -> f_348(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100) :|: 0 = 0
f_348(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100) -> f_350(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100) :|: 0 = 0
f_350(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100) -> f_352(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100) :|: 0 = 0
f_352(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100) -> f_354(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v735, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100, 97) :|: 1 + v735 = v193 && v735 <= 97
f_354(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v735, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100, 97) -> f_356(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v735, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100, 97) :|: 0 = 0
f_356(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v735, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100, 97) -> f_358(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v735, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100, 97) :|: TRUE
f_358(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v735, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100, 97) -> f_360(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v735, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100, 97) :|: TRUE
f_360(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v735, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 98, 100, 97) -> f_302(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v189, v193, v731, v735, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 100, 98) :|: TRUE
f_302(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v29, v33, v189, v193, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 100, 98) -> f_304(v1, v3, v5, v7, v9, v11, v13, v16, v19, v22, v25, v28, 1, v29, v33, v189, v193, v2, v4, v6, v8, v10, v12, v14, v17, v20, v23, v26, 0, 3, 7, 4, 8, 99, 100, 98) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_304(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v16:0, v19:0, v22:0, v25:0, v28:0, 1, v29:0, v33:0, v189:0, 1 + v735:0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0, v14:0, v17:0, v20:0, v23:0, v26:0, 0, 3, 7, 4, 8, 99, 100, 98) -> f_304(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v16:0, v19:0, v22:0, v25:0, v28:0, 1, v189:0, 1 + v735:0, 1 + v189:0, v735:0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0, v14:0, v17:0, v20:0, v23:0, v26:0, 0, 3, 7, 4, 8, 99, 100, 98) :|: v29:0 < 99 && v189:0 < 100 && v735:0 < 98
Filtered unneeded arguments:
   f_304(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36) -> f_304(x14, x16, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_304(v29:0, v189:0, sum~cons_1~v735:0) -> f_304(v189:0, 1 + v189:0, v735:0) :|: v189:0 < 100 && v735:0 < 98 && v29:0 < 99 && sum~cons_1~v735:0 = 1 + v735:0

----------------------------------------

(16)
Obligation:
Rules:
f_304(v29:0, v189:0, sum~cons_1~v735:0) -> f_304(v189:0, 1 + v189:0, v735:0) :|: v189:0 < 100 && v735:0 < 98 && v29:0 < 99 && sum~cons_1~v735:0 = 1 + v735:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_304(v29:0:0, v189:0:0, sum~cons_1~v735:0:0) -> f_304(v189:0:0, 1 + v189:0:0, v735:0:0) :|: v189:0:0 < 100 && v735:0:0 < 98 && v29:0:0 < 99 && sum~cons_1~v735:0:0 = 1 + v735:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_304(x, x1, x2)] = 99 - x1

The following rules are decreasing:
f_304(v29:0:0, v189:0:0, sum~cons_1~v735:0:0) -> f_304(v189:0:0, 1 + v189:0:0, v735:0:0) :|: v189:0:0 < 100 && v735:0:0 < 98 && v29:0:0 < 99 && sum~cons_1~v735:0:0 = 1 + v735:0:0
The following rules are bounded:
f_304(v29:0:0, v189:0:0, sum~cons_1~v735:0:0) -> f_304(v189:0:0, 1 + v189:0:0, v735:0:0) :|: v189:0:0 < 100 && v735:0:0 < 98 && v29:0:0 < 99 && sum~cons_1~v735:0:0 = 1 + v735:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
