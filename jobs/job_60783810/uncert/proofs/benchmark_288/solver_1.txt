YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/TP5mC.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3476 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) IntTRS
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IntTRS
(15) RankingReductionPairProof [EQUIVALENT, 6 ms]
(16) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/TP5mC.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/TP5mC.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		%9 = call i32 @__VERIFIER_nondet_int()
		store %9, %5
		%10 = load %2
		%11 = icmp sge %10 1
		br %11, %12, %30
	12:
		store 0, %3
		br %13
	13:
		%14 = load %3
		%15 = load %5
		%16 = icmp slt %14 %15
		br %16, %17, %29
	17:
		store 0, %4
		br %18
	18:
		%19 = load %4
		%20 = load %3
		%21 = icmp sle %19 %20
		br %21, %22, %26
	22:
		%23 = load %4
		%24 = load %2
		%25 = add i32 %23, %24
		store %25, %4
		br %18
	26:
		%27 = load %3
		%28 = add i32 %27, 1
		store %28, %3
		br %13
	29:
		br %30
	30:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 31 rulesP rules:
f_411(v913, v914, v915, v916, v917, v918, v919, v920, v921, 1, v923, 0, v925, v927, v924, v928, v929, v930, v931, v932, 3, 2, 4) -> f_412(v913, v914, v915, v916, v917, v918, v919, v920, v921, 1, v923, 0, v927, v924, v925, v928, v929, v930, v931, v932, 3, 2, 4) :|: 0 = 0
f_412(v913, v914, v915, v916, v917, v918, v919, v920, v921, 1, v923, 0, v927, v924, v925, v928, v929, v930, v931, v932, 3, 2, 4) -> f_413(v913, v914, v915, v916, v917, v918, v919, v920, v921, 1, v923, 0, v927, v924, v925, v928, v929, v930, v931, v932, 3, 2, 4) :|: 0 = 0
f_413(v913, v914, v915, v916, v917, v918, v919, v920, v921, 1, v923, 0, v927, v924, v925, v928, v929, v930, v931, v932, 3, 2, 4) -> f_414(v913, v914, v915, v916, v917, v918, v919, v920, v921, 1, v923, 0, v927, v924, v925, v928, v929, v930, v931, v932, 3, 2, 4) :|: TRUE
f_414(v913, v914, v915, v916, v917, v918, v919, v920, v921, 1, v923, 0, v927, v924, v925, v928, v929, v930, v931, v932, 3, 2, 4) -> f_415(v913, v914, v915, v916, v917, v918, v919, v920, v921, 1, v923, 0, v927, v924, v925, v928, v929, v930, v931, v932, 0, 3, 2, 4) :|: v923 < v921 && v927 < v923 && 0 <= v923 && 1 <= v913 && 1 <= v914 && 1 <= v915 && 1 <= v916 && 1 <= v917 && 1 <= v918 && 2 <= v921 && 1 <= v923 && 0 <= 0 && 0 <= v927 && 1 <= v924 && 0 <= v925 && 4 <= v928 && 4 <= v929 && 4 <= v930 && 4 <= v931 && 4 <= v932 && v913 <= v928 && v914 <= v929 && v915 <= v930 && v916 <= v931 && v917 <= v932
f_415(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v957, v958, v959, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) -> f_416(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v957, v959, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) :|: 0 = 0
f_416(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v957, v959, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) -> f_417(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v957, v959, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) :|: 0 = 0
f_417(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v957, v959, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) -> f_418(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v957, v967, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) :|: v967 = v957 + v951 && 1 <= v967
f_418(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v957, v967, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) -> f_419(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v957, v967, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) :|: TRUE
f_419(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v957, v967, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) -> f_420(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v957, v967, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) :|: TRUE
f_420(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v957, v967, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) -> f_421(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, v957, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) :|: 0 = 0
f_421(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, v957, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) -> f_422(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, v957, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) :|: 0 = 0
f_422(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, v957, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) -> f_423(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, v957, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) :|: v967 <= v956
f_422(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, v957, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) -> f_424(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, v957, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) :|: v956 < v967 && 2 <= v967
f_423(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, v957, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) -> f_425(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, v957, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) :|: 0 = 0
f_425(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, v957, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) -> f_427(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, v957, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) :|: TRUE
f_427(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, v957, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) -> f_415(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, v957, v967, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) :|: v956 < v954 && v957 < v956 && v967 <= v956 && 1 <= v946 && 1 <= v947 && 1 <= v948 && 1 <= v949 && 1 <= v950 && 1 <= v951 && 2 <= v954 && 1 <= v956 && 0 <= v967 && 0 <= v957 && 1 <= v967 && 0 <= v960 && 4 <= v961 && 4 <= v962 && 4 <= v963 && 4 <= v964 && 4 <= v965 && v946 <= v961 && v947 <= v962 && v948 <= v963 && v949 <= v964 && v950 <= v965
f_424(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, v957, v960, v961, v962, v963, v964, v965, 0, 3, 2, 4) -> f_426(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, 0, v957, v960, v961, v962, v963, v964, v965, 3, 2, 4) :|: 0 = 0
f_426(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, 0, v957, v960, v961, v962, v963, v964, v965, 3, 2, 4) -> f_428(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, 0, v957, v960, v961, v962, v963, v964, v965, 3, 2, 4) :|: TRUE
f_428(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, 0, v957, v960, v961, v962, v963, v964, v965, 3, 2, 4) -> f_429(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, 0, v957, v961, v962, v963, v964, v965, 3, 2, 4) :|: 0 = 0
f_429(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, 0, v957, v961, v962, v963, v964, v965, 3, 2, 4) -> f_430(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, 0, v957, v1016, v961, v962, v963, v964, v965, 3, 2, 4) :|: v1016 = 1 + v956 && 2 <= v1016
f_430(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, 0, v957, v1016, v961, v962, v963, v964, v965, 3, 2, 4) -> f_431(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, 0, v957, v1016, v961, v962, v963, v964, v965, 3, 2, 4) :|: TRUE
f_431(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, 0, v957, v1016, v961, v962, v963, v964, v965, 3, 2, 4) -> f_432(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, 0, v957, v1016, v961, v962, v963, v964, v965, 3, 2, 4) :|: TRUE
f_432(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v956, v967, 0, v957, v1016, v961, v962, v963, v964, v965, 3, 2, 4) -> f_433(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v1016, v967, v956, 0, v957, v961, v962, v963, v964, v965, 3, 2, 4) :|: 0 = 0
f_433(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v1016, v967, v956, 0, v957, v961, v962, v963, v964, v965, 3, 2, 4) -> f_434(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v1016, v967, v956, 0, v957, v961, v962, v963, v964, v965, 3, 2, 4) :|: 0 = 0
f_434(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v1016, v967, v956, 0, v957, v961, v962, v963, v964, v965, 3, 2, 4) -> f_435(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v1016, v967, v956, 0, v957, v961, v962, v963, v964, v965, 3, 4, 2) :|: v1016 < v954 && 3 <= v954
f_435(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v1016, v967, v956, 0, v957, v961, v962, v963, v964, v965, 3, 4, 2) -> f_437(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v1016, v967, v956, 0, v957, v961, v962, v963, v964, v965, 3, 4, 2) :|: 0 = 0
f_437(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v1016, v967, v956, 0, v957, v961, v962, v963, v964, v965, 3, 4, 2) -> f_439(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v1016, v967, v956, 0, v957, v961, v962, v963, v964, v965, 3, 4, 2) :|: TRUE
f_439(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v1016, v967, v956, 0, v957, v961, v962, v963, v964, v965, 3, 4, 2) -> f_441(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v1016, v967, v956, 0, v957, v961, v962, v963, v964, v965, 3, 4, 2) :|: TRUE
f_441(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v1016, v967, v956, 0, v957, v961, v962, v963, v964, v965, 3, 4, 2) -> f_443(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v1016, v967, v956, 0, v957, v961, v962, v963, v964, v965, 3, 4, 2) :|: TRUE
f_443(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v1016, v967, v956, 0, v957, v961, v962, v963, v964, v965, 3, 4, 2) -> f_410(v946, v947, v948, v949, v950, v951, v952, v953, v954, 1, v1016, v967, v956, 0, v957, v961, v962, v963, v964, v965, 3, 2, 4) :|: v1016 < v954 && v957 < v1016 && v1016 <= v967 && 1 <= v946 && 1 <= v947 && 1 <= v948 && 1 <= v949 && 1 <= v950 && 1 <= v951 && 2 <= v954 && 1 <= v1016 && 1 <= v967 && 0 <= v956 && 0 <= v957 && 4 <= v961 && 4 <= v962 && 4 <= v963 && 4 <= v964 && 4 <= v965 && v946 <= v961 && v947 <= v962 && v948 <= v963 && v949 <= v964 && v950 <= v965
f_410(v913, v914, v915, v916, v917, v918, v919, v920, v921, 1, v923, v924, v925, 0, v927, v928, v929, v930, v931, v932, 3, 2, 4) -> f_411(v913, v914, v915, v916, v917, v918, v919, v920, v921, 1, v923, 0, v925, v927, v924, v928, v929, v930, v931, v932, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_422(v946:0, v947:0, v948:0, v949:0, v950:0, v951:0, v952:0, v953:0, v954:0, 1, v956:0, v967:0, v957:0, v960:0, v961:0, v962:0, v963:0, v964:0, v965:0, 0, 3, 2, 4) -> f_422(v946:0, v947:0, v948:0, v949:0, v950:0, v951:0, v952:0, v953:0, v954:0, 1, 1 + v956:0, v951:0, 0, v956:0, v961:0, v962:0, v963:0, v964:0, v965:0, 0, 3, 2, 4) :|: v956:0 > 0 && v967:0 > 1 && v954:0 > 2 && v957:0 < 1 + v956:0 && v954:0 > 1 + v956:0 && v946:0 > 0 && v947:0 > 0 && v948:0 > 0 && v949:0 > 0 && v950:0 > 0 && v951:0 > 0 && v967:0 >= 1 + v956:0 && v957:0 > -1 && v961:0 > 3 && v962:0 > 3 && v963:0 > 3 && v967:0 > v956:0 && v964:0 > 3 && v965:0 > 3 && v961:0 >= v946:0 && v962:0 >= v947:0 && v963:0 >= v948:0 && v964:0 >= v949:0 && v965:0 >= v950:0
f_422(v946:0, v947:0, v948:0, v949:0, v950:0, v951:0, v952:0, v953:0, v954:0, 1, v956:0, v967:0, v957:0, v960:0, v961:0, v962:0, v963:0, v964:0, v965:0, 0, 3, 2, 4) -> f_422(v946:0, v947:0, v948:0, v949:0, v950:0, v951:0, v952:0, v953:0, v954:0, 1, v956:0, v967:0 + v951:0, v967:0, v960:0, v961:0, v962:0, v963:0, v964:0, v965:0, 0, 3, 2, 4) :|: v967:0 > 0 && v957:0 < v956:0 && v956:0 < v954:0 && v967:0 <= v956:0 && v946:0 > 0 && v947:0 > 0 && v948:0 > 0 && v949:0 > 0 && v950:0 > 0 && v951:0 > 0 && v954:0 > 1 && v956:0 > 0 && v957:0 > -1 && v960:0 > -1 && v961:0 > 3 && v962:0 > 3 && v963:0 > 3 && v964:0 > 3 && v965:0 > 3 && v961:0 >= v946:0 && v962:0 >= v947:0 && v963:0 >= v948:0 && v964:0 >= v949:0 && v965:0 >= v950:0 && v967:0 + v951:0 > 0
Filtered unneeded arguments:
   f_422(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_422(x1, x2, x3, x4, x5, x6, x9, x11, x12, x13, x14, x15, x16, x17, x18, x19)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_422(v946:0, v947:0, v948:0, v949:0, v950:0, v951:0, v954:0, v956:0, v967:0, v957:0, v960:0, v961:0, v962:0, v963:0, v964:0, v965:0) -> f_422(v946:0, v947:0, v948:0, v949:0, v950:0, v951:0, v954:0, 1 + v956:0, v951:0, 0, v956:0, v961:0, v962:0, v963:0, v964:0, v965:0) :|: v967:0 > 1 && v956:0 > 0 && v954:0 > 2 && v957:0 < 1 + v956:0 && v954:0 > 1 + v956:0 && v946:0 > 0 && v947:0 > 0 && v948:0 > 0 && v949:0 > 0 && v950:0 > 0 && v951:0 > 0 && v967:0 >= 1 + v956:0 && v957:0 > -1 && v961:0 > 3 && v962:0 > 3 && v963:0 > 3 && v967:0 > v956:0 && v964:0 > 3 && v965:0 > 3 && v961:0 >= v946:0 && v962:0 >= v947:0 && v963:0 >= v948:0 && v965:0 >= v950:0 && v964:0 >= v949:0
f_422(v946:0, v947:0, v948:0, v949:0, v950:0, v951:0, v954:0, v956:0, v967:0, v957:0, v960:0, v961:0, v962:0, v963:0, v964:0, v965:0) -> f_422(v946:0, v947:0, v948:0, v949:0, v950:0, v951:0, v954:0, v956:0, v967:0 + v951:0, v967:0, v960:0, v961:0, v962:0, v963:0, v964:0, v965:0) :|: v957:0 < v956:0 && v967:0 > 0 && v956:0 < v954:0 && v967:0 <= v956:0 && v946:0 > 0 && v947:0 > 0 && v948:0 > 0 && v949:0 > 0 && v950:0 > 0 && v951:0 > 0 && v954:0 > 1 && v956:0 > 0 && v957:0 > -1 && v960:0 > -1 && v961:0 > 3 && v962:0 > 3 && v963:0 > 3 && v964:0 > 3 && v965:0 > 3 && v961:0 >= v946:0 && v962:0 >= v947:0 && v963:0 >= v948:0 && v964:0 >= v949:0 && v967:0 + v951:0 > 0 && v965:0 >= v950:0

----------------------------------------

(8)
Obligation:
Rules:
f_422(v946:0, v947:0, v948:0, v949:0, v950:0, v951:0, v954:0, v956:0, v967:0, v957:0, v960:0, v961:0, v962:0, v963:0, v964:0, v965:0) -> f_422(v946:0, v947:0, v948:0, v949:0, v950:0, v951:0, v954:0, 1 + v956:0, v951:0, 0, v956:0, v961:0, v962:0, v963:0, v964:0, v965:0) :|: v967:0 > 1 && v956:0 > 0 && v954:0 > 2 && v957:0 < 1 + v956:0 && v954:0 > 1 + v956:0 && v946:0 > 0 && v947:0 > 0 && v948:0 > 0 && v949:0 > 0 && v950:0 > 0 && v951:0 > 0 && v967:0 >= 1 + v956:0 && v957:0 > -1 && v961:0 > 3 && v962:0 > 3 && v963:0 > 3 && v967:0 > v956:0 && v964:0 > 3 && v965:0 > 3 && v961:0 >= v946:0 && v962:0 >= v947:0 && v963:0 >= v948:0 && v965:0 >= v950:0 && v964:0 >= v949:0
f_422(x, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_422(x, x1, x2, x3, x4, x5, x6, x7, x8 + x5, x8, x10, x11, x12, x13, x14, x15) :|: x9 < x7 && x8 > 0 && x7 < x6 && x8 <= x7 && x > 0 && x1 > 0 && x2 > 0 && x3 > 0 && x4 > 0 && x5 > 0 && x6 > 1 && x7 > 0 && x9 > -1 && x10 > -1 && x11 > 3 && x12 > 3 && x13 > 3 && x14 > 3 && x15 > 3 && x11 >= x && x12 >= x1 && x13 >= x2 && x14 >= x3 && x8 + x5 > 0 && x15 >= x4

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_422(v946:0:0, v947:0:0, v948:0:0, v949:0:0, v950:0:0, v951:0:0, v954:0:0, v956:0:0, v967:0:0, v957:0:0, v960:0:0, v961:0:0, v962:0:0, v963:0:0, v964:0:0, v965:0:0) -> f_422(v946:0:0, v947:0:0, v948:0:0, v949:0:0, v950:0:0, v951:0:0, v954:0:0, 1 + v956:0:0, v951:0:0, 0, v956:0:0, v961:0:0, v962:0:0, v963:0:0, v964:0:0, v965:0:0) :|: v965:0:0 >= v950:0:0 && v964:0:0 >= v949:0:0 && v963:0:0 >= v948:0:0 && v962:0:0 >= v947:0:0 && v961:0:0 >= v946:0:0 && v965:0:0 > 3 && v964:0:0 > 3 && v967:0:0 > v956:0:0 && v963:0:0 > 3 && v962:0:0 > 3 && v961:0:0 > 3 && v957:0:0 > -1 && v967:0:0 >= 1 + v956:0:0 && v951:0:0 > 0 && v950:0:0 > 0 && v949:0:0 > 0 && v948:0:0 > 0 && v947:0:0 > 0 && v946:0:0 > 0 && v954:0:0 > 1 + v956:0:0 && v957:0:0 < 1 + v956:0:0 && v954:0:0 > 2 && v956:0:0 > 0 && v967:0:0 > 1
f_422(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, x9:0, x10:0, x11:0, x12:0, x13:0, x14:0, x15:0) -> f_422(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0 + x5:0, x8:0, x10:0, x11:0, x12:0, x13:0, x14:0, x15:0) :|: x8:0 + x5:0 > 0 && x4:0 <= x15:0 && x3:0 <= x14:0 && x2:0 <= x13:0 && x1:0 <= x12:0 && x:0 <= x11:0 && x15:0 > 3 && x14:0 > 3 && x13:0 > 3 && x12:0 > 3 && x11:0 > 3 && x10:0 > -1 && x9:0 > -1 && x7:0 > 0 && x6:0 > 1 && x5:0 > 0 && x4:0 > 0 && x3:0 > 0 && x2:0 > 0 && x1:0 > 0 && x:0 > 0 && x8:0 <= x7:0 && x7:0 < x6:0 && x8:0 > 0 && x9:0 < x7:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_422(x, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15)] = -52 + x + x1 + x2 + x3 + x4 + 16*x6 - x7

The following rules are decreasing:
f_422(v946:0:0, v947:0:0, v948:0:0, v949:0:0, v950:0:0, v951:0:0, v954:0:0, v956:0:0, v967:0:0, v957:0:0, v960:0:0, v961:0:0, v962:0:0, v963:0:0, v964:0:0, v965:0:0) -> f_422(v946:0:0, v947:0:0, v948:0:0, v949:0:0, v950:0:0, v951:0:0, v954:0:0, 1 + v956:0:0, v951:0:0, 0, v956:0:0, v961:0:0, v962:0:0, v963:0:0, v964:0:0, v965:0:0) :|: v965:0:0 >= v950:0:0 && v964:0:0 >= v949:0:0 && v963:0:0 >= v948:0:0 && v962:0:0 >= v947:0:0 && v961:0:0 >= v946:0:0 && v965:0:0 > 3 && v964:0:0 > 3 && v967:0:0 > v956:0:0 && v963:0:0 > 3 && v962:0:0 > 3 && v961:0:0 > 3 && v957:0:0 > -1 && v967:0:0 >= 1 + v956:0:0 && v951:0:0 > 0 && v950:0:0 > 0 && v949:0:0 > 0 && v948:0:0 > 0 && v947:0:0 > 0 && v946:0:0 > 0 && v954:0:0 > 1 + v956:0:0 && v957:0:0 < 1 + v956:0:0 && v954:0:0 > 2 && v956:0:0 > 0 && v967:0:0 > 1
The following rules are bounded:
f_422(v946:0:0, v947:0:0, v948:0:0, v949:0:0, v950:0:0, v951:0:0, v954:0:0, v956:0:0, v967:0:0, v957:0:0, v960:0:0, v961:0:0, v962:0:0, v963:0:0, v964:0:0, v965:0:0) -> f_422(v946:0:0, v947:0:0, v948:0:0, v949:0:0, v950:0:0, v951:0:0, v954:0:0, 1 + v956:0:0, v951:0:0, 0, v956:0:0, v961:0:0, v962:0:0, v963:0:0, v964:0:0, v965:0:0) :|: v965:0:0 >= v950:0:0 && v964:0:0 >= v949:0:0 && v963:0:0 >= v948:0:0 && v962:0:0 >= v947:0:0 && v961:0:0 >= v946:0:0 && v965:0:0 > 3 && v964:0:0 > 3 && v967:0:0 > v956:0:0 && v963:0:0 > 3 && v962:0:0 > 3 && v961:0:0 > 3 && v957:0:0 > -1 && v967:0:0 >= 1 + v956:0:0 && v951:0:0 > 0 && v950:0:0 > 0 && v949:0:0 > 0 && v948:0:0 > 0 && v947:0:0 > 0 && v946:0:0 > 0 && v954:0:0 > 1 + v956:0:0 && v957:0:0 < 1 + v956:0:0 && v954:0:0 > 2 && v956:0:0 > 0 && v967:0:0 > 1

----------------------------------------

(12)
Obligation:
Rules:
f_422(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, x9:0, x10:0, x11:0, x12:0, x13:0, x14:0, x15:0) -> f_422(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0 + x5:0, x8:0, x10:0, x11:0, x12:0, x13:0, x14:0, x15:0) :|: x8:0 + x5:0 > 0 && x4:0 <= x15:0 && x3:0 <= x14:0 && x2:0 <= x13:0 && x1:0 <= x12:0 && x:0 <= x11:0 && x15:0 > 3 && x14:0 > 3 && x13:0 > 3 && x12:0 > 3 && x11:0 > 3 && x10:0 > -1 && x9:0 > -1 && x7:0 > 0 && x6:0 > 1 && x5:0 > 0 && x4:0 > 0 && x3:0 > 0 && x2:0 > 0 && x1:0 > 0 && x:0 > 0 && x8:0 <= x7:0 && x7:0 < x6:0 && x8:0 > 0 && x9:0 < x7:0

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f_422(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0, x5:0:0, x6:0:0, x7:0:0, x8:0:0, x9:0:0, x10:0:0, x11:0:0, x12:0:0, x13:0:0, x14:0:0, x15:0:0) -> f_422(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0, x5:0:0, x6:0:0, x7:0:0, x8:0:0 + x5:0:0, x8:0:0, x10:0:0, x11:0:0, x12:0:0, x13:0:0, x14:0:0, x15:0:0) :|: x8:0:0 > 0 && x9:0:0 < x7:0:0 && x7:0:0 < x6:0:0 && x8:0:0 <= x7:0:0 && x:0:0 > 0 && x1:0:0 > 0 && x2:0:0 > 0 && x3:0:0 > 0 && x4:0:0 > 0 && x5:0:0 > 0 && x6:0:0 > 1 && x7:0:0 > 0 && x9:0:0 > -1 && x10:0:0 > -1 && x11:0:0 > 3 && x12:0:0 > 3 && x13:0:0 > 3 && x14:0:0 > 3 && x15:0:0 > 3 && x:0:0 <= x11:0:0 && x1:0:0 <= x12:0:0 && x2:0:0 <= x13:0:0 && x3:0:0 <= x14:0:0 && x4:0:0 <= x15:0:0 && x8:0:0 + x5:0:0 > 0

----------------------------------------

(15) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_422 ] = -1*f_422_9 + f_422_8

The following rules are decreasing:
f_422(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0, x5:0:0, x6:0:0, x7:0:0, x8:0:0, x9:0:0, x10:0:0, x11:0:0, x12:0:0, x13:0:0, x14:0:0, x15:0:0) -> f_422(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0, x5:0:0, x6:0:0, x7:0:0, x8:0:0 + x5:0:0, x8:0:0, x10:0:0, x11:0:0, x12:0:0, x13:0:0, x14:0:0, x15:0:0) :|: x8:0:0 > 0 && x9:0:0 < x7:0:0 && x7:0:0 < x6:0:0 && x8:0:0 <= x7:0:0 && x:0:0 > 0 && x1:0:0 > 0 && x2:0:0 > 0 && x3:0:0 > 0 && x4:0:0 > 0 && x5:0:0 > 0 && x6:0:0 > 1 && x7:0:0 > 0 && x9:0:0 > -1 && x10:0:0 > -1 && x11:0:0 > 3 && x12:0:0 > 3 && x13:0:0 > 3 && x14:0:0 > 3 && x15:0:0 > 3 && x:0:0 <= x11:0:0 && x1:0:0 <= x12:0:0 && x2:0:0 <= x13:0:0 && x3:0:0 <= x14:0:0 && x4:0:0 <= x15:0:0 && x8:0:0 + x5:0:0 > 0

The following rules are bounded:
f_422(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0, x5:0:0, x6:0:0, x7:0:0, x8:0:0, x9:0:0, x10:0:0, x11:0:0, x12:0:0, x13:0:0, x14:0:0, x15:0:0) -> f_422(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0, x5:0:0, x6:0:0, x7:0:0, x8:0:0 + x5:0:0, x8:0:0, x10:0:0, x11:0:0, x12:0:0, x13:0:0, x14:0:0, x15:0:0) :|: x8:0:0 > 0 && x9:0:0 < x7:0:0 && x7:0:0 < x6:0:0 && x8:0:0 <= x7:0:0 && x:0:0 > 0 && x1:0:0 > 0 && x2:0:0 > 0 && x3:0:0 > 0 && x4:0:0 > 0 && x5:0:0 > 0 && x6:0:0 > 1 && x7:0:0 > 0 && x9:0:0 > -1 && x10:0:0 > -1 && x11:0:0 > 3 && x12:0:0 > 3 && x13:0:0 > 3 && x14:0:0 > 3 && x15:0:0 > 3 && x:0:0 <= x11:0:0 && x1:0:0 <= x12:0:0 && x2:0:0 <= x13:0:0 && x3:0:0 <= x14:0:0 && x4:0:0 <= x15:0:0 && x8:0:0 + x5:0:0 > 0


----------------------------------------

(16)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
