YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/JYc3D.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 496 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 71 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 17 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/JYc3D.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/JYc3D.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sge %7 0
		br %8, %9, %23
	9:
		%10 = load %2
		%11 = load %3
		%12 = add i32 %10, %11
		store %12, %2
		%13 = load %3
		%14 = icmp sge %13 0
		br %14, %15, %19
	15:
		%16 = load %3
		%17 = sub i32 0, %16
		%18 = sub i32 %17, 1
		store %18, %3
		br %22
	19:
		%20 = load %3
		%21 = sub i32 0, %20
		store %21, %3
		br %22
	22:
		br %6
	23:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 34 rulesP rules:
f_209(v179, v180, v181, v182, v183, v184, 1, v186, v187, 0, v189, v190, v191, v192, v193, v194, 3, 4) -> f_210(v179, v180, v181, v182, v183, v187, 1, v184, v186, 0, v189, v190, v191, v192, v193, v194, 3, 4) :|: 0 = 0
f_210(v179, v180, v181, v182, v183, v187, 1, v184, v186, 0, v189, v190, v191, v192, v193, v194, 3, 4) -> f_211(v179, v180, v181, v182, v183, v187, 1, v184, v186, 0, v189, v190, v191, v192, v193, v194, 3, 4) :|: 0 <= v187 && 1 <= v184
f_211(v179, v180, v181, v182, v183, v187, 1, v184, v186, 0, v189, v190, v191, v192, v193, v194, 3, 4) -> f_213(v179, v180, v181, v182, v183, v187, 1, v184, v186, 0, v189, v190, v191, v192, v193, v194, 3, 4) :|: 0 = 0
f_213(v179, v180, v181, v182, v183, v187, 1, v184, v186, 0, v189, v190, v191, v192, v193, v194, 3, 4) -> f_215(v179, v180, v181, v182, v183, v187, 1, v184, v186, 0, v189, v190, v191, v192, v193, v194, 3, 4) :|: TRUE
f_215(v179, v180, v181, v182, v183, v187, 1, v184, v186, 0, v189, v190, v191, v192, v193, v194, 3, 4) -> f_217(v179, v180, v181, v182, v183, v187, 1, v186, 0, v189, v190, v191, v192, v193, v194, 3, 4) :|: 0 = 0
f_217(v179, v180, v181, v182, v183, v187, 1, v186, 0, v189, v190, v191, v192, v193, v194, 3, 4) -> f_218(v179, v180, v181, v182, v183, v187, 1, v191, v186, 0, v189, v190, v192, v193, v194, 3, 4) :|: 0 = 0
f_218(v179, v180, v181, v182, v183, v187, 1, v191, v186, 0, v189, v190, v192, v193, v194, 3, 4) -> f_219(v179, v180, v181, v182, v183, v187, 1, v191, v266, v186, 0, v189, v190, v192, v193, v194, 3, 4) :|: v266 = v187 + v191 && 1 <= v266
f_219(v179, v180, v181, v182, v183, v187, 1, v191, v266, v186, 0, v189, v190, v192, v193, v194, 3, 4) -> f_220(v179, v180, v181, v182, v183, v187, 1, v191, v266, v186, 0, v189, v190, v192, v193, v194, 3, 4) :|: TRUE
f_220(v179, v180, v181, v182, v183, v187, 1, v191, v266, v186, 0, v189, v190, v192, v193, v194, 3, 4) -> f_221(v179, v180, v181, v182, v183, v187, 1, v191, v266, 0, v189, v190, v186, v192, v193, v194, 3, 4) :|: 0 = 0
f_221(v179, v180, v181, v182, v183, v187, 1, v191, v266, 0, v189, v190, v186, v192, v193, v194, 3, 4) -> f_222(v179, v180, v181, v182, v183, v187, 1, v191, v266, v189, v190, v186, v192, v193, v194, 0, 3, 4) :|: 0 = 0
f_222(v179, v180, v181, v182, v183, v187, 1, v191, v266, v189, v190, v186, v192, v193, v194, 0, 3, 4) -> f_223(v179, v180, v181, v182, v183, v187, 1, v191, v266, v189, v190, v186, v192, v193, v194, 0, 3, 4) :|: TRUE
f_223(v179, v180, v181, v182, v183, v187, 1, v191, v266, v189, v190, v186, v192, v193, v194, 0, 3, 4) -> f_224(v179, v180, v181, v182, v183, v187, 1, v191, v266, v190, v186, v192, v193, v194, 0, 3, 4) :|: 0 = 0
f_224(v179, v180, v181, v182, v183, v187, 1, v191, v266, v190, v186, v192, v193, v194, 0, 3, 4) -> f_225(v179, v180, v181, v182, v183, v187, 1, v191, v266, v278, v192, v193, v194, 0, 3, 4) :|: v278 + v191 = 0 && v186 = v278
f_225(v179, v180, v181, v182, v183, v187, 1, v191, v266, v278, v192, v193, v194, 0, 3, 4) -> f_226(v179, v180, v181, v182, v183, v187, 1, v191, v266, v278, v279, v192, v193, v194, 0, 3, 4, 2) :|: 1 + v279 = v278 && 2 + v279 <= 0
f_226(v179, v180, v181, v182, v183, v187, 1, v191, v266, v278, v279, v192, v193, v194, 0, 3, 4, 2) -> f_227(v179, v180, v181, v182, v183, v187, 1, v191, v266, v278, v279, v192, v193, v194, 0, 3, 4, 2) :|: TRUE
f_227(v179, v180, v181, v182, v183, v187, 1, v191, v266, v278, v279, v192, v193, v194, 0, 3, 4, 2) -> f_228(v179, v180, v181, v182, v183, v187, 1, v191, v266, v278, v279, v192, v193, v194, 0, 3, 4, 2) :|: TRUE
f_228(v179, v180, v181, v182, v183, v187, 1, v191, v266, v278, v279, v192, v193, v194, 0, 3, 4, 2) -> f_229(v179, v180, v181, v182, v183, v187, 1, v191, v266, v278, v279, v192, v193, v194, 0, 3, 2, 4) :|: TRUE
f_229(v292, v293, v294, v295, v296, v297, 1, v299, v300, v301, v302, v303, v304, v305, 0, 3, 2, 4) -> f_230(v292, v293, v294, v295, v296, v297, 1, v299, v300, v301, v302, v303, v304, v305, 0, 3, 2, 4) :|: TRUE
f_230(v292, v293, v294, v295, v296, v297, 1, v299, v300, v301, v302, v303, v304, v305, 0, 3, 2, 4) -> f_231(v292, v293, v294, v295, v296, v300, 1, v297, v299, v301, v302, v303, v304, v305, 0, 3, 2, 4) :|: 0 = 0
f_231(v292, v293, v294, v295, v296, v300, 1, v297, v299, v301, v302, v303, v304, v305, 0, 3, 2, 4) -> f_232(v292, v293, v294, v295, v296, v300, 1, v297, v299, v301, v302, v303, v304, v305, 0, 3, 2, 4) :|: 0 = 0
f_232(v292, v293, v294, v295, v296, v300, 1, v297, v299, v301, v302, v303, v304, v305, 0, 3, 2, 4) -> f_233(v292, v293, v294, v295, v296, v300, 1, v297, v299, v301, v302, v303, v304, v305, 0, 3, 2, 4) :|: TRUE
f_233(v292, v293, v294, v295, v296, v300, 1, v297, v299, v301, v302, v303, v304, v305, 0, 3, 2, 4) -> f_234(v292, v293, v294, v295, v296, v300, 1, v299, v301, v302, v303, v304, v305, 0, 3, 2, 4) :|: 0 = 0
f_234(v292, v293, v294, v295, v296, v300, 1, v299, v301, v302, v303, v304, v305, 0, 3, 2, 4) -> f_235(v292, v293, v294, v295, v296, v300, 1, v302, v299, v301, v303, v304, v305, 0, 3, 2, 4) :|: 0 = 0
f_235(v292, v293, v294, v295, v296, v300, 1, v302, v299, v301, v303, v304, v305, 0, 3, 2, 4) -> f_236(v292, v293, v294, v295, v296, v300, 1, v302, v374, v299, v301, v303, v304, v305, 0, 3, 2, 4) :|: v374 = v300 + v302
f_236(v292, v293, v294, v295, v296, v300, 1, v302, v374, v299, v301, v303, v304, v305, 0, 3, 2, 4) -> f_237(v292, v293, v294, v295, v296, v300, 1, v302, v374, v299, v301, v303, v304, v305, 0, 3, 2, 4) :|: TRUE
f_237(v292, v293, v294, v295, v296, v300, 1, v302, v374, v299, v301, v303, v304, v305, 0, 3, 2, 4) -> f_238(v292, v293, v294, v295, v296, v300, 1, v302, v374, v301, v299, v303, v304, v305, 0, 3, 2, 4) :|: 0 = 0
f_238(v292, v293, v294, v295, v296, v300, 1, v302, v374, v301, v299, v303, v304, v305, 0, 3, 2, 4) -> f_239(v292, v293, v294, v295, v296, v300, 1, v302, v374, 0, v301, v299, v303, v304, v305, 3, 2, 4) :|: 0 = 0
f_239(v292, v293, v294, v295, v296, v300, 1, v302, v374, 0, v301, v299, v303, v304, v305, 3, 2, 4) -> f_240(v292, v293, v294, v295, v296, v300, 1, v302, v374, 0, v301, v299, v303, v304, v305, 3, 2, 4) :|: TRUE
f_240(v292, v293, v294, v295, v296, v300, 1, v302, v374, 0, v301, v299, v303, v304, v305, 3, 2, 4) -> f_241(v292, v293, v294, v295, v296, v300, 1, v302, v374, 0, v299, v301, v303, v304, v305, 3, 2, 4) :|: 0 = 0
f_241(v292, v293, v294, v295, v296, v300, 1, v302, v374, 0, v299, v301, v303, v304, v305, 3, 2, 4) -> f_242(v292, v293, v294, v295, v296, v300, 1, v302, v374, 0, v380, v299, v301, v303, v304, v305, 3, 2, 4) :|: v380 + v302 = 0 && 2 <= v380
f_242(v292, v293, v294, v295, v296, v300, 1, v302, v374, 0, v380, v299, v301, v303, v304, v305, 3, 2, 4) -> f_243(v292, v293, v294, v295, v296, v300, 1, v302, v374, 0, v380, v299, v301, v303, v304, v305, 3, 2, 4) :|: TRUE
f_243(v292, v293, v294, v295, v296, v300, 1, v302, v374, 0, v380, v299, v301, v303, v304, v305, 3, 2, 4) -> f_244(v292, v293, v294, v295, v296, v300, 1, v302, v374, 0, v380, v299, v301, v303, v304, v305, 3, 2, 4) :|: TRUE
f_244(v292, v293, v294, v295, v296, v300, 1, v302, v374, 0, v380, v299, v301, v303, v304, v305, 3, 2, 4) -> f_208(v292, v293, v294, v295, v296, v300, 1, v302, v374, 0, v299, v301, v380, v303, v304, v305, 3, 4) :|: TRUE
f_208(v179, v180, v181, v182, v183, v184, 1, v186, v187, 0, v189, v190, v191, v192, v193, v194, 3, 4) -> f_209(v179, v180, v181, v182, v183, v184, 1, v186, v187, 0, v189, v190, v191, v192, v193, v194, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_209(v179:0, v180:0, v181:0, v182:0, v183:0, v184:0, 1, 1 + v279:0, v187:0, 0, v189:0, v190:0, v191:0, v192:0, v193:0, v194:0, 3, 4) -> f_209(v179:0, v180:0, v181:0, v182:0, v183:0, v187:0 + v191:0, 1, v279:0, v187:0 + v191:0 + v279:0, 0, v191:0, 1 + v279:0, v380:0, v192:0, v193:0, v194:0, 3, 4) :|: v184:0 > 0 && v187:0 > -1 && v187:0 + v191:0 > 0 && 1 + v279:0 + v191:0 = 0 && v279:0 < -1 && v380:0 + v279:0 = 0 && v380:0 > 1
Filtered unneeded arguments:
   f_209(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_209(x6, x8, x9, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_209(v184:0, sum~cons_1~v279:0, v187:0, v191:0) -> f_209(v187:0 + v191:0, v279:0, v187:0 + v191:0 + v279:0, v380:0) :|: v187:0 > -1 && v184:0 > 0 && v187:0 + v191:0 > 0 && 1 + v279:0 + v191:0 = 0 && v279:0 < -1 && v380:0 > 1 && v380:0 + v279:0 = 0 && sum~cons_1~v279:0 = 1 + v279:0

----------------------------------------

(8)
Obligation:
Rules:
f_209(v184:0, sum~cons_1~v279:0, v187:0, v191:0) -> f_209(v187:0 + v191:0, v279:0, v187:0 + v191:0 + v279:0, v380:0) :|: v187:0 > -1 && v184:0 > 0 && v187:0 + v191:0 > 0 && 1 + v279:0 + v191:0 = 0 && v279:0 < -1 && v380:0 > 1 && v380:0 + v279:0 = 0 && sum~cons_1~v279:0 = 1 + v279:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_209(v184:0:0, sum~cons_1~v279:0:0, v187:0:0, v191:0:0) -> f_209(v187:0:0 + v191:0:0, v279:0:0, v187:0:0 + v191:0:0 + v279:0:0, v380:0:0) :|: v380:0:0 > 1 && v380:0:0 + v279:0:0 = 0 && v279:0:0 < -1 && 1 + v279:0:0 + v191:0:0 = 0 && v187:0:0 + v191:0:0 > 0 && v184:0:0 > 0 && v187:0:0 > -1 && sum~cons_1~v279:0:0 = 1 + v279:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_209 ] = f_209_3 + f_209_4 + f_209_2

The following rules are decreasing:
f_209(v184:0:0, sum~cons_1~v279:0:0, v187:0:0, v191:0:0) -> f_209(v187:0:0 + v191:0:0, v279:0:0, v187:0:0 + v191:0:0 + v279:0:0, v380:0:0) :|: v380:0:0 > 1 && v380:0:0 + v279:0:0 = 0 && v279:0:0 < -1 && 1 + v279:0:0 + v191:0:0 = 0 && v187:0:0 + v191:0:0 > 0 && v184:0:0 > 0 && v187:0:0 > -1 && sum~cons_1~v279:0:0 = 1 + v279:0:0

The following rules are bounded:
f_209(v184:0:0, sum~cons_1~v279:0:0, v187:0:0, v191:0:0) -> f_209(v187:0:0 + v191:0:0, v279:0:0, v187:0:0 + v191:0:0 + v279:0:0, v380:0:0) :|: v380:0:0 > 1 && v380:0:0 + v279:0:0 = 0 && v279:0:0 < -1 && 1 + v279:0:0 + v191:0:0 = 0 && v187:0:0 + v191:0:0 > 0 && v184:0:0 > 0 && v187:0:0 > -1 && sum~cons_1~v279:0:0 = 1 + v279:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
