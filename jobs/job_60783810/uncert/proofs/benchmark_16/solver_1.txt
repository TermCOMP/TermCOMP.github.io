YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/u2Iq1.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 44 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1943 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 30 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/u2Iq1.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/u2Iq1.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %7
		%14 = load %3
		%15 = load %5
		store %14, %15
		%16 = load %4
		%17 = load %6
		store %16, %17
		%18 = load %7
		store 0, %18
		br %19
	19:
		%20 = load %5
		%21 = load %20
		%22 = load %6
		%23 = load %22
		%24 = icmp sgt %21 %23
		br %24, %25, %38
	25:
		%26 = load %5
		%27 = load %26
		%28 = sub i32 %27, 1
		%29 = load %5
		store %28, %29
		%30 = load %6
		%31 = load %30
		%32 = add i32 %31, 1
		%33 = load %6
		store %32, %33
		%34 = load %7
		%35 = load %34
		%36 = add i32 %35, 1
		%37 = load %7
		store %36, %37
		br %19
	38:
		%39 = load %7
		%40 = load %39
		ret %40

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 61
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_433(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, 1, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_434(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v217, 1, v216, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: 0 = 0
f_434(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v217, 1, v216, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_435(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v217, 1, v216, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: 0 = 0
f_435(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v217, 1, v216, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_436(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v216, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: 0 = 0
f_436(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v216, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_437(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v216, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: v220 < v219
f_437(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v216, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_439(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v216, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: 0 = 0
f_439(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v216, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_441(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v216, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: TRUE
f_441(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v216, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_443(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v216, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: 0 = 0
f_443(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v216, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_445(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: 0 = 0
f_445(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_447(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: 1 + v234 = v219
f_447(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_449(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: 0 = 0
f_449(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_450(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: TRUE
f_450(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_451(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: 0 = 0
f_451(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v217, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_452(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: 0 = 0
f_452(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_453(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: v236 = 1 + v220
f_453(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_454(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: 0 = 0
f_454(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_455(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: TRUE
f_455(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_456(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: 0 = 0
f_456(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_457(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: 0 = 0
f_457(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_458(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v222, v238, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8, 2) :|: v238 = 1 + v222 && 2 <= v238
f_458(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v222, v238, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8, 2) -> f_459(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v222, v238, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_459(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v222, v238, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8, 2) -> f_460(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v222, v238, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8, 2) :|: TRUE
f_460(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v222, v238, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8, 2) -> f_461(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v222, v238, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8, 2) :|: TRUE
f_461(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v222, v238, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8, 2) -> f_432(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v219, v220, 1, v234, v236, v222, v238, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: TRUE
f_432(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, 1, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) -> f_433(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, 1, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_433(v206:0, v207:0, v208:0, v209:0, v210:0, v211:0, v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, 1, 1 + v234:0, v220:0, v221:0, v222:0, v223:0, v224:0, v225:0, v226:0, v227:0, v228:0, v229:0, v230:0, v231:0, v232:0, 0, 3, 7, 4, 8) -> f_433(v206:0, v207:0, v208:0, v209:0, v210:0, v211:0, v212:0, v213:0, v214:0, v215:0, 1 + v234:0, v220:0, 1, v234:0, 1 + v220:0, v222:0, 1 + v222:0, v223:0, v224:0, v225:0, v226:0, v227:0, v228:0, v229:0, v230:0, v231:0, v232:0, 0, 3, 7, 4, 8) :|: v222:0 > 0 && v220:0 < 1 + v234:0
Filtered unneeded arguments:
   f_433(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32) -> f_433(x14, x15, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_433(sum~cons_1~v234:0, v220:0, v222:0) -> f_433(v234:0, 1 + v220:0, 1 + v222:0) :|: v222:0 > 0 && v220:0 < 1 + v234:0 && sum~cons_1~v234:0 = 1 + v234:0

----------------------------------------

(8)
Obligation:
Rules:
f_433(sum~cons_1~v234:0, v220:0, v222:0) -> f_433(v234:0, 1 + v220:0, 1 + v222:0) :|: v222:0 > 0 && v220:0 < 1 + v234:0 && sum~cons_1~v234:0 = 1 + v234:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_433(sum~cons_1~v234:0:0, v220:0:0, v222:0:0) -> f_433(v234:0:0, 1 + v220:0:0, 1 + v222:0:0) :|: v222:0:0 > 0 && v220:0:0 < 1 + v234:0:0 && sum~cons_1~v234:0:0 = 1 + v234:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_433(x, x1, x2)] = x - x1

The following rules are decreasing:
f_433(sum~cons_1~v234:0:0, v220:0:0, v222:0:0) -> f_433(v234:0:0, 1 + v220:0:0, 1 + v222:0:0) :|: v222:0:0 > 0 && v220:0:0 < 1 + v234:0:0 && sum~cons_1~v234:0:0 = 1 + v234:0:0
The following rules are bounded:
f_433(sum~cons_1~v234:0:0, v220:0:0, v222:0:0) -> f_433(v234:0:0, 1 + v220:0:0, 1 + v222:0:0) :|: v222:0:0 > 0 && v220:0:0 < 1 + v234:0:0 && sum~cons_1~v234:0:0 = 1 + v234:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
