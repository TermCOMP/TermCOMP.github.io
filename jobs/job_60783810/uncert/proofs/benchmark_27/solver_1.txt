YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/PI93O.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 60 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2842 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 54 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 78 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 35 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) RankingReductionPairProof [EQUIVALENT, 9 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/PI93O.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/PI93O.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %7
		%14 = load %3
		%15 = load %5
		store %14, %15
		%16 = load %4
		%17 = load %6
		store %16, %17
		%18 = load %7
		store 0, %18
		br %19
	19:
		%20 = load %5
		%21 = load %20
		%22 = icmp sgt %21 0
		br %22, %27, %23
	23:
		%24 = load %6
		%25 = load %24
		%26 = icmp sgt %25 0
		br %27
	27:
		%28 = phi [1, %19], [%26, %23]
		br %28, %29, %54
	29:
		%30 = load %5
		%31 = load %30
		%32 = icmp sgt %31 0
		br %32, %33, %38
	33:
		%34 = load %5
		%35 = load %34
		%36 = sub i32 %35, 1
		%37 = load %5
		store %36, %37
		br %49
	38:
		%39 = load %6
		%40 = load %39
		%41 = icmp sgt %40 0
		br %41, %42, %47
	42:
		%43 = load %6
		%44 = load %43
		%45 = sub i32 %44, 1
		%46 = load %6
		store %45, %46
		br %48
	47:
		br %48
	48:
		br %49
	49:
		%50 = load %7
		%51 = load %50
		%52 = add i32 %51, 1
		%53 = load %7
		store %52, %53
		br %19
	54:
		%55 = load %7
		%56 = load %55
		ret %56

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 78
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 32 rulesP rules:
f_1019(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8) -> f_1021(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8) :|: 0 = 0
f_1021(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8) -> f_1023(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8) :|: 0 = 0
f_1023(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8) -> f_1025(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) :|: v1490 = 1 + v1464 && 2 <= v1490
f_1025(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) -> f_1027(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) :|: 0 = 0
f_1027(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) -> f_1029(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) :|: TRUE
f_1029(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) -> f_1031(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) :|: TRUE
f_1031(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) -> f_1033(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) :|: 0 = 0
f_1033(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) -> f_1035(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) :|: 0 = 0
f_1035(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) -> f_1036(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) :|: 0 = 0
f_1036(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) -> f_1037(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) :|: TRUE
f_1037(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) -> f_1038(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) :|: 0 = 0
f_1038(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) -> f_1039(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) :|: 0 = 0
f_1039(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8, 2) -> f_1040(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: 0 < v1466 && 2 <= v1465 && 2 <= v1452
f_1040(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1042(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: 0 = 0
f_1042(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1044(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: 0 = 0
f_1044(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1046(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: TRUE
f_1046(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1048(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: 0 = 0
f_1048(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1050(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: 0 = 0
f_1050(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1052(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: 0 = 0
f_1052(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1054(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: TRUE
f_1054(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1055(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: 0 = 0
f_1055(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1056(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: 0 = 0
f_1056(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1057(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: 0 = 0
f_1057(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1058(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: TRUE
f_1058(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1059(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: 0 = 0
f_1059(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1465, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1060(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: 0 = 0
f_1060(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1061(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1622, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: 1 + v1622 = v1466 && 0 <= v1622
f_1061(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1622, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1062(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1622, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: 0 = 0
f_1062(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1622, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1063(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1622, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: TRUE
f_1063(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1622, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1064(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1622, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) :|: TRUE
f_1064(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1622, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 2, 4, 8) -> f_1017(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1464, v1490, v1466, v1622, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8) :|: TRUE
f_1017(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8) -> f_1019(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, 0, 1, v1463, v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, v1475, v1476, 3, 7, 4, 8) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_1019(v1451:0, v1452:0, v1453:0, v1454:0, v1455:0, v1456:0, v1457:0, v1458:0, v1459:0, v1460:0, 0, 1, v1463:0, v1464:0, v1465:0, 1 + v1622:0, v1467:0, v1468:0, v1469:0, v1470:0, v1471:0, v1472:0, v1473:0, v1474:0, v1475:0, v1476:0, 3, 7, 4, 8) -> f_1019(v1451:0, v1452:0, v1453:0, v1454:0, v1455:0, v1456:0, v1457:0, v1458:0, v1459:0, v1460:0, 0, 1, v1464:0, 1 + v1464:0, 1 + v1622:0, v1622:0, v1467:0, v1468:0, v1469:0, v1470:0, v1471:0, v1472:0, v1473:0, v1474:0, v1475:0, v1476:0, 3, 7, 4, 8) :|: v1464:0 > 0 && v1465:0 > 1 && v1622:0 > -1 && v1452:0 > 1
Filtered unneeded arguments:
   f_1019(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_1019(x2, x14, x15, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_1019(v1452:0, v1464:0, v1465:0, sum~cons_1~v1622:0) -> f_1019(v1452:0, 1 + v1464:0, 1 + v1622:0, v1622:0) :|: v1465:0 > 1 && v1464:0 > 0 && v1452:0 > 1 && v1622:0 > -1 && sum~cons_1~v1622:0 = 1 + v1622:0

----------------------------------------

(9)
Obligation:
Rules:
f_1019(v1452:0, v1464:0, v1465:0, sum~cons_1~v1622:0) -> f_1019(v1452:0, 1 + v1464:0, 1 + v1622:0, v1622:0) :|: v1465:0 > 1 && v1464:0 > 0 && v1452:0 > 1 && v1622:0 > -1 && sum~cons_1~v1622:0 = 1 + v1622:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_1019(v1452:0:0, v1464:0:0, v1465:0:0, sum~cons_1~v1622:0:0) -> f_1019(v1452:0:0, 1 + v1464:0:0, 1 + v1622:0:0, v1622:0:0) :|: v1452:0:0 > 1 && v1622:0:0 > -1 && v1464:0:0 > 0 && v1465:0:0 > 1 && sum~cons_1~v1622:0:0 = 1 + v1622:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_1019 ] = f_1019_4

The following rules are decreasing:
f_1019(v1452:0:0, v1464:0:0, v1465:0:0, sum~cons_1~v1622:0:0) -> f_1019(v1452:0:0, 1 + v1464:0:0, 1 + v1622:0:0, v1622:0:0) :|: v1452:0:0 > 1 && v1622:0:0 > -1 && v1464:0:0 > 0 && v1465:0:0 > 1 && sum~cons_1~v1622:0:0 = 1 + v1622:0:0

The following rules are bounded:
f_1019(v1452:0:0, v1464:0:0, v1465:0:0, sum~cons_1~v1622:0:0) -> f_1019(v1452:0:0, 1 + v1464:0:0, 1 + v1622:0:0, v1622:0:0) :|: v1452:0:0 > 1 && v1622:0:0 > -1 && v1464:0:0 > 0 && v1465:0:0 > 1 && sum~cons_1~v1622:0:0 = 1 + v1622:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 32 rulesP rules:
f_959(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1301, 1, v1303, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 4, 8) -> f_961(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1301, 1, v1303, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 4, 8) :|: 0 = 0
f_961(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1301, 1, v1303, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 4, 8) -> f_963(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1301, 1, v1303, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 4, 8) :|: 0 = 0
f_963(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1301, 1, v1303, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 4, 8) -> f_965(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1301, 1, v1303, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 4, 8) :|: TRUE
f_965(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1301, 1, v1303, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 4, 8) -> f_967(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1301, 1, v1303, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 4, 8) :|: 0 = 0
f_967(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1301, 1, v1303, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 4, 8) -> f_970(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 4, 8) :|: 0 = 0
f_970(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 4, 8) -> f_973(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 0 < v1303 && 2 <= v1301 && 2 <= v1291
f_973(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_977(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 0 = 0
f_977(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_981(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 0 = 0
f_981(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_985(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: TRUE
f_985(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_989(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 0 = 0
f_989(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_993(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 0 = 0
f_993(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_996(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 0 = 0
f_996(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_999(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: TRUE
f_999(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1001(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 0 = 0
f_1001(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1003(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 0 = 0
f_1003(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1005(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 0 = 0
f_1005(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1007(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: TRUE
f_1007(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1009(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 0 = 0
f_1009(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1301, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1011(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 0 = 0
f_1011(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1013(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 1 + v1449 = v1303 && 0 <= v1449
f_1013(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1015(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 0 = 0
f_1015(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1018(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: TRUE
f_1018(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1020(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: TRUE
f_1020(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1022(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: TRUE
f_1022(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1024(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 0 = 0
f_1024(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1026(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 0 = 0
f_1026(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1028(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1305, v1491, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: v1491 = 1 + v1305 && 2 <= v1491
f_1028(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1305, v1491, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1030(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1305, v1491, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: 0 = 0
f_1030(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1305, v1491, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1032(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1305, v1491, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: TRUE
f_1032(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1305, v1491, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_1034(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1305, v1491, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) :|: TRUE
f_1034(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1305, v1491, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 2, 4, 8) -> f_957(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1303, 1, v1449, v1305, v1491, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 4, 8) :|: TRUE
f_957(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1301, 1, v1303, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 4, 8) -> f_959(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298, v1299, 0, v1301, 1, v1303, v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314, v1315, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_959(v1290:0, v1291:0, v1292:0, v1293:0, v1294:0, v1295:0, v1296:0, v1297:0, v1298:0, v1299:0, 0, v1301:0, 1, 1 + v1449:0, v1304:0, v1305:0, v1306:0, v1307:0, v1308:0, v1309:0, v1310:0, v1311:0, v1312:0, v1313:0, v1314:0, v1315:0, 3, 7, 4, 8) -> f_959(v1290:0, v1291:0, v1292:0, v1293:0, v1294:0, v1295:0, v1296:0, v1297:0, v1298:0, v1299:0, 0, 1 + v1449:0, 1, v1449:0, v1305:0, 1 + v1305:0, v1306:0, v1307:0, v1308:0, v1309:0, v1310:0, v1311:0, v1312:0, v1313:0, v1314:0, v1315:0, 3, 7, 4, 8) :|: v1301:0 > 1 && v1449:0 > -1 && v1291:0 > 1 && v1305:0 > 0
Filtered unneeded arguments:
   f_959(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_959(x2, x12, x14, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_959(v1291:0, v1301:0, sum~cons_1~v1449:0, v1305:0) -> f_959(v1291:0, 1 + v1449:0, v1449:0, 1 + v1305:0) :|: v1449:0 > -1 && v1301:0 > 1 && v1305:0 > 0 && v1291:0 > 1 && sum~cons_1~v1449:0 = 1 + v1449:0

----------------------------------------

(16)
Obligation:
Rules:
f_959(v1291:0, v1301:0, sum~cons_1~v1449:0, v1305:0) -> f_959(v1291:0, 1 + v1449:0, v1449:0, 1 + v1305:0) :|: v1449:0 > -1 && v1301:0 > 1 && v1305:0 > 0 && v1291:0 > 1 && sum~cons_1~v1449:0 = 1 + v1449:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_959(v1291:0:0, v1301:0:0, sum~cons_1~v1449:0:0, v1305:0:0) -> f_959(v1291:0:0, 1 + v1449:0:0, v1449:0:0, 1 + v1305:0:0) :|: v1305:0:0 > 0 && v1291:0:0 > 1 && v1301:0:0 > 1 && v1449:0:0 > -1 && sum~cons_1~v1449:0:0 = 1 + v1449:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_959(x, x1, x2, x3)] = x2

The following rules are decreasing:
f_959(v1291:0:0, v1301:0:0, sum~cons_1~v1449:0:0, v1305:0:0) -> f_959(v1291:0:0, 1 + v1449:0:0, v1449:0:0, 1 + v1305:0:0) :|: v1305:0:0 > 0 && v1291:0:0 > 1 && v1301:0:0 > 1 && v1449:0:0 > -1 && sum~cons_1~v1449:0:0 = 1 + v1449:0:0
The following rules are bounded:
f_959(v1291:0:0, v1301:0:0, sum~cons_1~v1449:0:0, v1305:0:0) -> f_959(v1291:0:0, 1 + v1449:0:0, v1449:0:0, 1 + v1305:0:0) :|: v1305:0:0 > 0 && v1291:0:0 > 1 && v1301:0:0 > 1 && v1449:0:0 > -1 && sum~cons_1~v1449:0:0 = 1 + v1449:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 23 rulesP rules:
f_778(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v724, 1, v726, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 4, 8) -> f_780(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 4, 8) :|: 0 = 0
f_780(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 4, 8) -> f_783(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: 0 < v726 && 2 <= v724 && 2 <= v714
f_783(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_786(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_786(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_789(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_789(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_792(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: TRUE
f_792(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_795(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_795(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_798(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_798(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_802(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_802(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_807(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: TRUE
f_807(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_812(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_812(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v724, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_817(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_817(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_822(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: 1 + v817 = v726 && 0 <= v817
f_822(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_827(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_827(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_832(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: TRUE
f_832(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_836(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: TRUE
f_836(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_839(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_839(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_842(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_842(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_845(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v728, v819, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: v819 = 1 + v728 && 2 <= v819
f_845(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v728, v819, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_848(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v728, v819, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_848(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v728, v819, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_851(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v728, v819, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: TRUE
f_851(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v728, v819, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_854(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v728, v819, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) :|: TRUE
f_854(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v728, v819, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 2, 4, 8) -> f_776(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v726, 1, v817, v728, v819, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 4, 8) :|: TRUE
f_776(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v724, 1, v726, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 4, 8) -> f_778(v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v724, 1, v726, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, 0, 3, 7, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_778(v714:0, v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, v721:0, v722:0, v723:0, v724:0, 1, 1 + v817:0, v727:0, v728:0, v729:0, v730:0, v731:0, v732:0, v733:0, v734:0, v735:0, v736:0, v737:0, v738:0, 0, 3, 7, 4, 8) -> f_778(v714:0, v715:0, v716:0, v717:0, v718:0, v719:0, v720:0, v721:0, v722:0, v723:0, 1 + v817:0, 1, v817:0, v728:0, 1 + v728:0, v729:0, v730:0, v731:0, v732:0, v733:0, v734:0, v735:0, v736:0, v737:0, v738:0, 0, 3, 7, 4, 8) :|: v724:0 > 1 && v817:0 > -1 && v714:0 > 1 && v728:0 > 0
Filtered unneeded arguments:
   f_778(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_778(x1, x11, x13, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_778(v714:0, v724:0, sum~cons_1~v817:0, v728:0) -> f_778(v714:0, 1 + v817:0, v817:0, 1 + v728:0) :|: v817:0 > -1 && v724:0 > 1 && v728:0 > 0 && v714:0 > 1 && sum~cons_1~v817:0 = 1 + v817:0

----------------------------------------

(23)
Obligation:
Rules:
f_778(v714:0, v724:0, sum~cons_1~v817:0, v728:0) -> f_778(v714:0, 1 + v817:0, v817:0, 1 + v728:0) :|: v817:0 > -1 && v724:0 > 1 && v728:0 > 0 && v714:0 > 1 && sum~cons_1~v817:0 = 1 + v817:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_778(v714:0:0, v724:0:0, sum~cons_1~v817:0:0, v728:0:0) -> f_778(v714:0:0, 1 + v817:0:0, v817:0:0, 1 + v728:0:0) :|: v728:0:0 > 0 && v714:0:0 > 1 && v724:0:0 > 1 && v817:0:0 > -1 && sum~cons_1~v817:0:0 = 1 + v817:0:0

----------------------------------------

(26) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_778 ] = f_778_3

The following rules are decreasing:
f_778(v714:0:0, v724:0:0, sum~cons_1~v817:0:0, v728:0:0) -> f_778(v714:0:0, 1 + v817:0:0, v817:0:0, 1 + v728:0:0) :|: v728:0:0 > 0 && v714:0:0 > 1 && v724:0:0 > 1 && v817:0:0 > -1 && sum~cons_1~v817:0:0 = 1 + v817:0:0

The following rules are bounded:
f_778(v714:0:0, v724:0:0, sum~cons_1~v817:0:0, v728:0:0) -> f_778(v714:0:0, 1 + v817:0:0, v817:0:0, 1 + v728:0:0) :|: v728:0:0 > 0 && v714:0:0 > 1 && v724:0:0 > 1 && v817:0:0 > -1 && sum~cons_1~v817:0:0 = 1 + v817:0:0


----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
