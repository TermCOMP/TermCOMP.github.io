YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/utQgm.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3357 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 34 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 48 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/utQgm.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/utQgm.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		%4 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%5 = alloca i8, numElementsLit: 4, align 16
		%6 = bitcast *i8 %5 to *i32
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%7 = alloca i8, numElementsLit: 4, align 16
		%8 = bitcast *i8 %7 to *i32
		store %8, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %4)
		%9 = alloca i8, numElementsLit: 4, align 16
		%10 = bitcast *i8 %9 to *i32
		store %10, %4
		%11 = load %4
		store 0, %11
		%12 = load %2
		store 0, %12
		br %13
	13:
		%14 = load %2
		%15 = load %14
		%16 = icmp slt %15 10
		br %16, %17, %39
	17:
		%18 = load %3
		store 3, %18
		br %19
	19:
		%20 = load %3
		%21 = load %20
		%22 = icmp slt %21 12
		br %22, %23, %34
	23:
		%24 = load %3
		%25 = load %24
		%26 = sub i32 %25, 1
		store %26, %24
		%27 = load %4
		%28 = load %27
		%29 = add i32 %28, 1
		store %29, %27
		br %30
	30:
		%31 = load %3
		%32 = load %31
		%33 = add i32 %32, 2
		store %33, %31
		br %19
	34:
		br %35
	35:
		%36 = load %2
		%37 = load %36
		%38 = add i32 %37, 1
		store %38, %36
		br %13
	39:
		%40 = load %4
		%41 = load %40
		ret %41


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 43 rulesP rules:
f_786(v1602, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 1, 12, 0, 11, 10, v1615, v1616, v1617, v1618, v1619, v1620, v1621, v1622, v1623, v1624, 3, 7, 9, 8, 4) -> f_787(v1602, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 1, 3, 0, 11, 10, v1615, v1616, 12, v1617, v1618, v1619, v1620, v1621, v1622, v1623, v1624, 7, 9, 8, 4) :|: 0 = 0
f_787(v1602, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 1, 3, 0, 11, 10, v1615, v1616, 12, v1617, v1618, v1619, v1620, v1621, v1622, v1623, v1624, 7, 9, 8, 4) -> f_788(v1602, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 1, 3, 11, 10, v1615, v1616, 12, v1617, v1618, v1619, v1620, v1621, v1622, v1623, v1624, 0, 7, 9, 8, 4) :|: 0 = 0
f_788(v1602, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 1, 3, 11, 10, v1615, v1616, 12, v1617, v1618, v1619, v1620, v1621, v1622, v1623, v1624, 0, 7, 9, 8, 4) -> f_789(v1602, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 1, 3, 11, 10, v1615, v1616, 12, v1617, v1618, v1619, v1620, v1621, v1622, v1623, v1624, 0, 7, 9, 8, 4) :|: TRUE
f_789(v1602, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 1, 3, 11, 10, v1615, v1616, 12, v1617, v1618, v1619, v1620, v1621, v1622, v1623, v1624, 0, 7, 9, 8, 4) -> f_790(v1602, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 1, 3, 11, 10, v1615, v1616, 12, v1617, v1618, v1619, v1620, v1621, v1622, v1623, v1624, 0, 3, 7, 2, 5, 9, 11, 10, 8, 4, 12) :|: TRUE
f_790(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1661, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 5, 9, 11, 10, 8, 4, 12) -> f_791(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1661, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 5, 9, 11, 10, 8, 4, 12) :|: 0 = 0
f_791(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1661, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 5, 9, 11, 10, 8, 4, 12) -> f_792(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 5, 9, 11, 10, 8, 4, 12) :|: 0 = 0
f_792(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 5, 9, 11, 10, 8, 4, 12) -> f_793(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1663, v1664, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 5, 9, 11, 10, 8, 4, 12) :|: 1 + v1675 = v1660 && 2 <= v1675 && v1675 <= 10
f_793(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1663, v1664, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 5, 9, 11, 10, 8, 4, 12) -> f_794(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1663, v1664, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 5, 9, 11, 10, 8, 4, 12) :|: TRUE
f_794(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1663, v1664, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 5, 9, 11, 10, 8, 4, 12) -> f_795(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1663, v1664, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 5, 9, 11, 10, 8, 4, 12) :|: 0 = 0
f_795(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1663, v1664, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 5, 9, 11, 10, 8, 4, 12) -> f_796(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 10, 4, 12, 8) :|: 0 = 0
f_796(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 10, 4, 12, 8) -> f_797(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 10, 4, 12, 8) :|: v1677 = 1 + v1664 && 10 <= v1677
f_797(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 10, 4, 12, 8) -> f_798(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 10, 4, 12, 8) :|: TRUE
f_798(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 10, 4, 12, 8) -> f_799(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 10, 4, 12, 8) :|: TRUE
f_799(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 10, 4, 12, 8) -> f_800(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 10, 4, 12, 8) :|: 0 = 0
f_800(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1662, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 10, 4, 12, 8) -> f_801(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 6, 9, 11, 4, 12, 8, 2, 10) :|: 0 = 0
f_801(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1665, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 6, 9, 11, 4, 12, 8, 2, 10) -> f_802(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1686, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 8, 4, 10, 12) :|: v1686 = 2 + v1675 && 4 <= v1686 && v1686 <= 12
f_802(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1686, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 8, 4, 10, 12) -> f_803(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1686, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 8, 4, 10, 12) :|: TRUE
f_803(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1686, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 8, 4, 10, 12) -> f_804(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1686, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 8, 4, 10, 12) :|: TRUE
f_804(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1686, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 8, 4, 10, 12) -> f_805(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1686, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 8, 4, 10, 12) :|: 0 = 0
f_805(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1660, v1675, v1664, v1677, v1686, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 8, 4, 10, 12) -> f_806(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1686, v1660, v1675, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 8, 4, 10, 12) :|: 0 = 0
f_806(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1686, v1660, v1675, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 8, 4, 10, 12) -> f_807(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1686, v1660, v1675, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 10, 8, 4, 11) :|: v1686 < 12 && v1675 <= 9 && v1660 <= 10
f_806(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1686, v1660, v1675, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 11, 8, 4, 10, 12) -> f_808(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 11, 10, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 9, 17, 8, 4, 18) :|: 12 <= v1686 && v1675 = 10 && v1686 = 12 && 0 = 0 && v1660 = 11
f_807(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1686, v1660, v1675, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 10, 8, 4, 11) -> f_809(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1686, v1660, v1675, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 10, 8, 4, 11) :|: 0 = 0
f_809(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1686, v1660, v1675, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 10, 8, 4, 11) -> f_811(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1686, v1660, v1675, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 10, 8, 4, 11) :|: TRUE
f_811(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1686, v1660, v1675, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 6, 9, 10, 8, 4, 11) -> f_790(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, v1686, v1660, v1675, v1664, v1677, v1686, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 2, 5, 9, 11, 10, 8, 4, 12) :|: TRUE
f_808(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 11, 10, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 0, 3, 7, 9, 17, 8, 4, 18) -> f_810(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 8, 4, 18) :|: 0 = 0
f_810(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 8, 4, 18) -> f_812(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 8, 4, 18) :|: TRUE
f_812(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 8, 4, 18) -> f_813(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 8, 4, 18) :|: TRUE
f_813(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 8, 4, 18) -> f_814(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 8, 4, 18) :|: 0 = 0
f_814(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 8, 4, 18) -> f_815(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 4, 8, 18) :|: 0 = 0
f_815(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 4, 8, 18) -> f_816(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1764, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 4, 8, 18, 2) :|: v1764 = 1 + v1658 && 2 <= v1764 && v1764 <= 10
f_816(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1764, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 4, 8, 18, 2) -> f_817(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1764, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 4, 8, 18, 2) :|: TRUE
f_817(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1764, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 4, 8, 18, 2) -> f_818(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1764, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 4, 8, 18, 2) :|: TRUE
f_818(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1764, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 4, 8, 18, 2) -> f_819(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1764, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 4, 8, 18, 2) :|: 0 = 0
f_819(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658, 1, 12, 0, 11, 10, v1664, v1677, v1764, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 4, 8, 18, 2) -> f_820(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1764, 1, 12, 0, 11, 10, v1664, v1677, v1658, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 4, 8, 18, 2) :|: 0 = 0
f_820(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1764, 1, 12, 0, 11, 10, v1664, v1677, v1658, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 17, 4, 8, 18, 2) -> f_821(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1764, 1, 12, 0, 11, 10, v1664, v1677, v1658, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 8, 17, 4, 18, 2, 9) :|: v1764 < 10 && v1658 <= 8
f_821(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1764, 1, 12, 0, 11, 10, v1664, v1677, v1658, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 8, 17, 4, 18, 2, 9) -> f_823(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1764, 1, 12, 0, 11, 10, v1664, v1677, v1658, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 8, 17, 4, 18, 2, 9) :|: 0 = 0
f_823(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1764, 1, 12, 0, 11, 10, v1664, v1677, v1658, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 8, 17, 4, 18, 2, 9) -> f_825(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1764, 1, 12, 0, 11, 10, v1664, v1677, v1658, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 8, 17, 4, 18, 2, 9) :|: TRUE
f_825(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1764, 1, 12, 0, 11, 10, v1664, v1677, v1658, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 8, 17, 4, 18, 2, 9) -> f_827(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1764, 1, 12, 0, 11, 10, v1664, v1677, v1658, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 8, 17, 4, 18, 2, 9) :|: 0 = 0
f_827(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1764, 1, 12, 0, 11, 10, v1664, v1677, v1658, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 8, 17, 4, 18, 2, 9) -> f_829(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1764, 1, 12, 0, 11, 10, v1664, v1677, v1658, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 8, 17, 4, 18, 2, 9) :|: TRUE
f_829(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1764, 1, 12, 0, 11, 10, v1664, v1677, v1658, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 8, 17, 4, 18, 2, 9) -> f_831(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1764, 1, 12, 0, 11, 10, v1664, v1677, v1658, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 8, 17, 4, 18, 2, 9) :|: TRUE
f_831(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1764, 1, 12, 0, 11, 10, v1664, v1677, v1658, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 8, 17, 4, 18, 2, 9) -> f_785(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1764, 1, 12, 0, 11, 10, v1664, v1677, v1658, v1667, v1668, v1669, v1670, v1671, v1672, v1673, 3, 7, 9, 8, 4) :|: TRUE
f_785(v1602, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 1, 12, 0, 11, 10, v1615, v1616, v1617, v1618, v1619, v1620, v1621, v1622, v1623, v1624, 3, 7, 9, 8, 4) -> f_786(v1602, v1603, v1604, v1605, v1606, v1607, v1608, v1609, 1, 12, 0, 11, 10, v1615, v1616, v1617, v1618, v1619, v1620, v1621, v1622, v1623, v1624, 3, 7, 9, 8, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_806(v1651:0, v1652:0, v1653:0, v1654:0, v1655:0, v1656:0, v1657:0, v1658:0, 1, 12, 11, 10, v1664:0, v1677:0, v1666:0, v1667:0, v1668:0, v1669:0, v1670:0, v1671:0, v1672:0, v1673:0, 0, 3, 7, 2, 6, 9, 11, 8, 4, 10, 12) -> f_806(v1651:0, v1652:0, v1653:0, v1654:0, v1655:0, v1656:0, v1657:0, 1 + v1658:0, 1, 4, 3, 2, v1677:0, 1 + v1677:0, v1658:0, v1667:0, v1668:0, v1669:0, v1670:0, v1671:0, v1672:0, v1673:0, 0, 3, 7, 2, 6, 9, 11, 8, 4, 10, 12) :|: v1658:0 > 0 && v1658:0 < 10 && v1677:0 > 8 && v1658:0 < 9
f_806(v1651:0, v1652:0, v1653:0, v1654:0, v1655:0, v1656:0, v1657:0, v1658:0, 1, 1 + v1675:1, v1660:0, v1675:0, v1664:0, v1677:0, v1666:0, v1667:0, v1668:0, v1669:0, v1670:0, v1671:0, v1672:0, v1673:0, 0, 3, 7, 2, 6, 9, 11, 8, 4, 10, 12) -> f_806(v1651:0, v1652:0, v1653:0, v1654:0, v1655:0, v1656:0, v1657:0, v1658:0, 1, 2 + v1675:1, 1 + v1675:1, v1675:1, v1677:0, 1 + v1677:0, v1666:0, v1667:0, v1668:0, v1669:0, v1670:0, v1671:0, v1672:0, v1673:0, 0, 3, 7, 2, 6, 9, 11, 8, 4, 10, 12) :|: v1675:1 > 1 && v1675:1 < 11 && v1677:0 > 8 && v1675:0 < 10 && v1660:0 < 11
Filtered unneeded arguments:
   f_806(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) -> f_806(x8, x10, x11, x12, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_806(v1658:0, cons_12, cons_11, cons_10, v1677:0) -> f_806(1 + v1658:0, 4, 3, 2, 1 + v1677:0) :|: v1658:0 < 10 && v1658:0 > 0 && v1658:0 < 9 && v1677:0 > 8 && cons_12 = 12 && cons_11 = 11 && cons_10 = 10
f_806(v1658:0, sum~cons_1~v1675:1, v1660:0, v1675:0, v1677:0) -> f_806(v1658:0, 2 + v1675:1, 1 + v1675:1, v1675:1, 1 + v1677:0) :|: v1675:1 < 11 && v1675:1 > 1 && v1677:0 > 8 && v1660:0 < 11 && v1675:0 < 10 && sum~cons_1~v1675:1 = 1 + v1675:1

----------------------------------------

(9)
Obligation:
Rules:
f_806(v1658:0, cons_12, cons_11, cons_10, v1677:0) -> f_806(1 + v1658:0, 4, 3, 2, 1 + v1677:0) :|: v1658:0 < 10 && v1658:0 > 0 && v1658:0 < 9 && v1677:0 > 8 && cons_12 = 12 && cons_11 = 11 && cons_10 = 10
f_806(x, x1, x2, x3, x4) -> f_806(x, 2 + x5, 1 + x5, x5, 1 + x4) :|: x5 < 11 && x5 > 1 && x4 > 8 && x2 < 11 && x3 < 10 && x1 = 1 + x5

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_806(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_806(x:0, 2 + x5:0, 1 + x5:0, x5:0, 1 + x4:0) :|: x2:0 < 11 && x3:0 < 10 && x4:0 > 8 && x5:0 > 1 && x5:0 < 11 && sum~cons_1~x5:0 = 1 + x5:0
f_806(v1658:0:0, cons_12, cons_11, cons_10, v1677:0:0) -> f_806(1 + v1658:0:0, 4, 3, 2, 1 + v1677:0:0) :|: v1658:0:0 < 9 && v1677:0:0 > 8 && v1658:0:0 > 0 && v1658:0:0 < 10 && cons_12 = 12 && cons_11 = 11 && cons_10 = 10

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_806(x, x1, x2, x3, x4)] = 83 - 10*x - x1 + x4

The following rules are decreasing:
f_806(v1658:0:0, cons_12, cons_11, cons_10, v1677:0:0) -> f_806(1 + v1658:0:0, 4, 3, 2, 1 + v1677:0:0) :|: v1658:0:0 < 9 && v1677:0:0 > 8 && v1658:0:0 > 0 && v1658:0:0 < 10 && cons_12 = 12 && cons_11 = 11 && cons_10 = 10
The following rules are bounded:
f_806(v1658:0:0, cons_12, cons_11, cons_10, v1677:0:0) -> f_806(1 + v1658:0:0, 4, 3, 2, 1 + v1677:0:0) :|: v1658:0:0 < 9 && v1677:0:0 > 8 && v1658:0:0 > 0 && v1658:0:0 < 10 && cons_12 = 12 && cons_11 = 11 && cons_10 = 10

----------------------------------------

(13)
Obligation:
Rules:
f_806(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_806(x:0, 2 + x5:0, 1 + x5:0, x5:0, 1 + x4:0) :|: x2:0 < 11 && x3:0 < 10 && x4:0 > 8 && x5:0 > 1 && x5:0 < 11 && sum~cons_1~x5:0 = 1 + x5:0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_806(x:0:0, sum~cons_1~x5:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_806(x:0:0, 2 + x5:0:0, 1 + x5:0:0, x5:0:0, 1 + x4:0:0) :|: x5:0:0 > 1 && x5:0:0 < 11 && x4:0:0 > 8 && x3:0:0 < 10 && x2:0:0 < 11 && sum~cons_1~x5:0:0 = 1 + x5:0:0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_806(x1, x2, x3, x4, x5) -> f_806(x2, x3, x4, x5)

----------------------------------------

(17)
Obligation:
Rules:
f_806(sum~cons_1~x5:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_806(2 + x5:0:0, 1 + x5:0:0, x5:0:0, 1 + x4:0:0) :|: x5:0:0 > 1 && x5:0:0 < 11 && x4:0:0 > 8 && x3:0:0 < 10 && x2:0:0 < 11 && sum~cons_1~x5:0:0 = 1 + x5:0:0

----------------------------------------

(18) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_806 ] = -1*f_806_1

The following rules are decreasing:
f_806(sum~cons_1~x5:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_806(2 + x5:0:0, 1 + x5:0:0, x5:0:0, 1 + x4:0:0) :|: x5:0:0 > 1 && x5:0:0 < 11 && x4:0:0 > 8 && x3:0:0 < 10 && x2:0:0 < 11 && sum~cons_1~x5:0:0 = 1 + x5:0:0

The following rules are bounded:
f_806(sum~cons_1~x5:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_806(2 + x5:0:0, 1 + x5:0:0, x5:0:0, 1 + x4:0:0) :|: x5:0:0 > 1 && x5:0:0 < 11 && x4:0:0 > 8 && x3:0:0 < 10 && x2:0:0 < 11 && sum~cons_1~x5:0:0 = 1 + x5:0:0


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_384(v198, v199, v200, v201, v202, v203, v204, 0, 1, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 11, 10, 8, 9, 4, 12) -> f_385(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v207, v208, v209, v210, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 11, 10, 8, 9, 4, 12) :|: 0 = 0
f_385(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v207, v208, v209, v210, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 11, 10, 8, 9, 4, 12) -> f_386(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v207, v208, v209, v210, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 10, 9, 8, 4, 11) :|: v211 < 12 && v208 <= 9 && v207 <= 10 && v209 <= 7 && v210 <= 8
f_386(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v207, v208, v209, v210, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 10, 9, 8, 4, 11) -> f_388(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v207, v208, v209, v210, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 10, 9, 8, 4, 11) :|: 0 = 0
f_388(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v207, v208, v209, v210, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 10, 9, 8, 4, 11) -> f_390(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v207, v208, v209, v210, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 10, 9, 8, 4, 11) :|: TRUE
f_390(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v207, v208, v209, v210, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 10, 9, 8, 4, 11) -> f_392(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v207, v208, v209, v210, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 10, 9, 8, 4, 11) :|: 0 = 0
f_392(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v207, v208, v209, v210, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 10, 9, 8, 4, 11) -> f_394(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v208, v209, v210, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11) :|: 0 = 0
f_394(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v208, v209, v210, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11) -> f_396(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v209, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) :|: 1 + v229 = v211 && 3 <= v229 && v229 <= 10
f_396(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v209, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) -> f_398(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v209, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) :|: TRUE
f_398(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v209, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) -> f_400(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v209, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) :|: 0 = 0
f_400(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v209, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) -> f_402(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) :|: 0 = 0
f_402(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) -> f_404(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) :|: v208 = 1 + v210
f_404(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) -> f_406(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) :|: TRUE
f_406(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) -> f_408(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) :|: TRUE
f_408(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) -> f_410(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) :|: 0 = 0
f_410(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) -> f_412(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) :|: 0 = 0
f_412(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10) -> f_414(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v232, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10, 5, 12) :|: v232 = 2 + v229 && 5 <= v232 && v232 <= 12
f_414(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v232, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10, 5, 12) -> f_416(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v232, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10, 5, 12) :|: TRUE
f_416(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v232, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10, 5, 12) -> f_418(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v232, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10, 5, 12) :|: TRUE
f_418(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v232, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 9, 8, 4, 11, 10, 5, 12) -> f_383(v198, v199, v200, v201, v202, v203, v204, 0, 1, v211, v229, v210, v208, v232, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 11, 10, 8, 9, 4, 12) :|: TRUE
f_383(v198, v199, v200, v201, v202, v203, v204, 0, 1, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 11, 10, 8, 9, 4, 12) -> f_384(v198, v199, v200, v201, v202, v203, v204, 0, 1, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, 3, 7, 2, 11, 10, 8, 9, 4, 12) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_384(v198:0, v199:0, v200:0, v201:0, v202:0, v203:0, v204:0, 0, 1, v207:0, 1 + v210:0, v209:0, v210:0, 1 + v229:0, v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, 3, 7, 2, 11, 10, 8, 9, 4, 12) -> f_384(v198:0, v199:0, v200:0, v201:0, v202:0, v203:0, v204:0, 0, 1, 1 + v229:0, v229:0, v210:0, 1 + v210:0, 2 + v229:0, v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, 3, 7, 2, 11, 10, 8, 9, 4, 12) :|: v210:0 < 9 && v229:0 < 11 && v207:0 < 11 && v209:0 < 8 && v229:0 > 2
Filtered unneeded arguments:
   f_384(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_384(x10, x11, x12, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_384(v207:0, sum~cons_1~v210:0, v209:0, v210:0, sum~cons_1~v229:0) -> f_384(1 + v229:0, v229:0, v210:0, 1 + v210:0, 2 + v229:0) :|: v229:0 < 11 && v210:0 < 9 && v207:0 < 11 && v229:0 > 2 && v209:0 < 8 && sum~cons_1~v210:0 = 1 + v210:0 && sum~cons_1~v229:0 = 1 + v229:0

----------------------------------------

(22)
Obligation:
Rules:
f_384(v207:0, sum~cons_1~v210:0, v209:0, v210:0, sum~cons_1~v229:0) -> f_384(1 + v229:0, v229:0, v210:0, 1 + v210:0, 2 + v229:0) :|: v229:0 < 11 && v210:0 < 9 && v207:0 < 11 && v229:0 > 2 && v209:0 < 8 && sum~cons_1~v210:0 = 1 + v210:0 && sum~cons_1~v229:0 = 1 + v229:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_384(v207:0:0, sum~cons_1~v210:0:0, v209:0:0, v210:0:0, sum~cons_1~v229:0:0) -> f_384(1 + v229:0:0, v229:0:0, v210:0:0, 1 + v210:0:0, 2 + v229:0:0) :|: v229:0:0 > 2 && v209:0:0 < 8 && v207:0:0 < 11 && v210:0:0 < 9 && v229:0:0 < 11 && sum~cons_1~v210:0:0 = 1 + v210:0:0 && sum~cons_1~v229:0:0 = 1 + v229:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_384(x, x1, x2, x3, x4)] = 8 - x3

The following rules are decreasing:
f_384(v207:0:0, sum~cons_1~v210:0:0, v209:0:0, v210:0:0, sum~cons_1~v229:0:0) -> f_384(1 + v229:0:0, v229:0:0, v210:0:0, 1 + v210:0:0, 2 + v229:0:0) :|: v229:0:0 > 2 && v209:0:0 < 8 && v207:0:0 < 11 && v210:0:0 < 9 && v229:0:0 < 11 && sum~cons_1~v210:0:0 = 1 + v210:0:0 && sum~cons_1~v229:0:0 = 1 + v229:0:0
The following rules are bounded:
f_384(v207:0:0, sum~cons_1~v210:0:0, v209:0:0, v210:0:0, sum~cons_1~v229:0:0) -> f_384(1 + v229:0:0, v229:0:0, v210:0:0, 1 + v210:0:0, 2 + v229:0:0) :|: v229:0:0 > 2 && v209:0:0 < 8 && v207:0:0 < 11 && v210:0:0 < 9 && v229:0:0 < 11 && sum~cons_1~v210:0:0 = 1 + v210:0:0 && sum~cons_1~v229:0:0 = 1 + v229:0:0

----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
