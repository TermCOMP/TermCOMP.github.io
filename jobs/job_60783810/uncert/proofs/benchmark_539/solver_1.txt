YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/43psW.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1685 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 10 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 10 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) RankingReductionPairProof [EQUIVALENT, 9 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 9 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/43psW.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/43psW.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store 0, %4
		store 0, %2
		br %5
	5:
		%6 = load %2
		%7 = icmp slt %6 10
		br %7, %8, %22
	8:
		store 3, %3
		br %9
	9:
		%10 = load %3
		%11 = icmp slt %10 12
		br %11, %12, %19
	12:
		%13 = load %3
		%14 = sub i32 %13, 1
		store %14, %3
		%15 = load %4
		%16 = add i32 %15, 1
		store %16, %4
		%17 = load %3
		%18 = add i32 %17, 2
		store %18, %3
		br %9
	19:
		%20 = load %2
		%21 = add i32 %20, 1
		store %21, %2
		br %5
	22:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 33 rulesP rules:
f_499(v968, v969, v970, v971, v972, 1, 3, 0, 11, 10, v978, v979, 12, v980, v981, v982, v983, v984, 9, 8, 4) -> f_500(v968, v969, v970, v971, v972, 1, 3, 11, 10, v978, v979, 12, v980, v981, v982, v983, v984, 0, 9, 8, 4) :|: 0 = 0
f_500(v968, v969, v970, v971, v972, 1, 3, 11, 10, v978, v979, 12, v980, v981, v982, v983, v984, 0, 9, 8, 4) -> f_501(v968, v969, v970, v971, v972, 1, 3, 11, 10, v978, v979, 12, v980, v981, v982, v983, v984, 0, 9, 8, 4) :|: TRUE
f_501(v968, v969, v970, v971, v972, 1, 3, 11, 10, v978, v979, 12, v980, v981, v982, v983, v984, 0, 9, 8, 4) -> f_502(v968, v969, v970, v971, v972, 1, 3, 11, 10, v978, v979, 12, v980, v981, v982, v983, v984, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) :|: TRUE
f_502(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) -> f_503(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) :|: 0 = 0
f_503(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) -> f_504(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1014, v1015, v1013, v1016, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) :|: 1 + v1023 = v1011 && 2 <= v1023 && v1023 <= 10
f_504(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1014, v1015, v1013, v1016, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) -> f_505(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1014, v1015, v1013, v1016, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) :|: TRUE
f_505(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1014, v1015, v1013, v1016, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) -> f_506(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1015, v1013, v1016, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 11, 10, 4, 12, 8) :|: 0 = 0
f_506(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1015, v1013, v1016, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 11, 10, 4, 12, 8) -> f_507(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1015, v1025, v1013, v1016, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 11, 10, 4, 12, 8) :|: v1025 = 1 + v1015 && 10 <= v1025
f_507(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1015, v1025, v1013, v1016, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 11, 10, 4, 12, 8) -> f_508(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1015, v1025, v1013, v1016, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 11, 10, 4, 12, 8) :|: TRUE
f_508(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1015, v1025, v1013, v1016, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 11, 10, 4, 12, 8) -> f_509(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1015, v1025, v1016, v1017, v1018, v1019, v1020, v1021, 0, 3, 6, 9, 11, 4, 12, 8, 2, 10) :|: 0 = 0
f_509(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1015, v1025, v1016, v1017, v1018, v1019, v1020, v1021, 0, 3, 6, 9, 11, 4, 12, 8, 2, 10) -> f_510(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1015, v1025, v1027, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) :|: v1027 = 2 + v1023 && 4 <= v1027 && v1027 <= 12
f_510(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1015, v1025, v1027, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) -> f_511(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1015, v1025, v1027, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) :|: TRUE
f_511(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1015, v1025, v1027, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) -> f_512(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1015, v1025, v1027, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) :|: TRUE
f_512(v1005, v1006, v1007, v1008, v1009, 1, v1011, v1023, v1015, v1025, v1027, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) -> f_513(v1005, v1006, v1007, v1008, v1009, 1, v1027, v1011, v1023, v1015, v1025, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) :|: 0 = 0
f_513(v1005, v1006, v1007, v1008, v1009, 1, v1027, v1011, v1023, v1015, v1025, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) -> f_514(v1005, v1006, v1007, v1008, v1009, 1, v1027, v1011, v1023, v1015, v1025, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 10, 8, 4, 11) :|: v1027 < 12 && v1023 <= 9 && v1011 <= 10
f_513(v1005, v1006, v1007, v1008, v1009, 1, v1027, v1011, v1023, v1015, v1025, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) -> f_515(v1005, v1006, v1007, v1008, v1009, 1, 12, 11, 10, v1015, v1025, v1017, v1018, v1019, v1020, v1021, 0, 3, 9, 17, 8, 4, 18) :|: 12 <= v1027 && v1023 = 10 && v1027 = 12 && 0 = 0 && v1011 = 11
f_514(v1005, v1006, v1007, v1008, v1009, 1, v1027, v1011, v1023, v1015, v1025, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 10, 8, 4, 11) -> f_516(v1005, v1006, v1007, v1008, v1009, 1, v1027, v1011, v1023, v1015, v1025, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 10, 8, 4, 11) :|: 0 = 0
f_516(v1005, v1006, v1007, v1008, v1009, 1, v1027, v1011, v1023, v1015, v1025, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 10, 8, 4, 11) -> f_518(v1005, v1006, v1007, v1008, v1009, 1, v1027, v1011, v1023, v1015, v1025, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 10, 8, 4, 11) :|: TRUE
f_518(v1005, v1006, v1007, v1008, v1009, 1, v1027, v1011, v1023, v1015, v1025, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 6, 9, 10, 8, 4, 11) -> f_502(v1005, v1006, v1007, v1008, v1009, 1, v1027, v1011, v1023, v1015, v1025, v1027, v1017, v1018, v1019, v1020, v1021, 0, 3, 2, 5, 9, 11, 10, 8, 4, 12) :|: TRUE
f_515(v1005, v1006, v1007, v1008, v1009, 1, 12, 11, 10, v1015, v1025, v1017, v1018, v1019, v1020, v1021, 0, 3, 9, 17, 8, 4, 18) -> f_517(v1005, v1006, v1007, v1008, v1009, 1, 12, 0, 11, 10, v1015, v1025, v1017, v1018, v1019, v1020, v1021, 3, 9, 17, 8, 4, 18) :|: 0 = 0
f_517(v1005, v1006, v1007, v1008, v1009, 1, 12, 0, 11, 10, v1015, v1025, v1017, v1018, v1019, v1020, v1021, 3, 9, 17, 8, 4, 18) -> f_519(v1005, v1006, v1007, v1008, v1009, 1, 12, 0, 11, 10, v1015, v1025, v1017, v1018, v1019, v1020, v1021, 3, 9, 17, 8, 4, 18) :|: TRUE
f_519(v1005, v1006, v1007, v1008, v1009, 1, 12, 0, 11, 10, v1015, v1025, v1017, v1018, v1019, v1020, v1021, 3, 9, 17, 8, 4, 18) -> f_520(v1005, v1006, v1007, v1008, v1009, 1, 12, 0, 11, 10, v1015, v1025, v1018, v1019, v1020, v1021, 3, 9, 17, 4, 18) :|: 0 = 0
f_520(v1005, v1006, v1007, v1008, v1009, 1, 12, 0, 11, 10, v1015, v1025, v1018, v1019, v1020, v1021, 3, 9, 17, 4, 18) -> f_521(v1005, v1006, v1007, v1008, v1009, 1, 12, 0, 11, 10, v1015, v1025, v1080, v1018, v1019, v1020, v1021, 3, 9, 17, 4, 18, 2) :|: v1080 = 1 + v1009 && 2 <= v1080 && v1080 <= 10
f_521(v1005, v1006, v1007, v1008, v1009, 1, 12, 0, 11, 10, v1015, v1025, v1080, v1018, v1019, v1020, v1021, 3, 9, 17, 4, 18, 2) -> f_522(v1005, v1006, v1007, v1008, v1009, 1, 12, 0, 11, 10, v1015, v1025, v1080, v1018, v1019, v1020, v1021, 3, 9, 17, 4, 18, 2) :|: TRUE
f_522(v1005, v1006, v1007, v1008, v1009, 1, 12, 0, 11, 10, v1015, v1025, v1080, v1018, v1019, v1020, v1021, 3, 9, 17, 4, 18, 2) -> f_523(v1005, v1006, v1007, v1008, v1009, 1, 12, 0, 11, 10, v1015, v1025, v1080, v1018, v1019, v1020, v1021, 3, 9, 17, 4, 18, 2) :|: TRUE
f_523(v1005, v1006, v1007, v1008, v1009, 1, 12, 0, 11, 10, v1015, v1025, v1080, v1018, v1019, v1020, v1021, 3, 9, 17, 4, 18, 2) -> f_524(v1005, v1006, v1007, v1008, v1080, 1, 12, 0, 11, 10, v1015, v1025, v1009, v1018, v1019, v1020, v1021, 3, 9, 17, 4, 18, 2) :|: 0 = 0
f_524(v1005, v1006, v1007, v1008, v1080, 1, 12, 0, 11, 10, v1015, v1025, v1009, v1018, v1019, v1020, v1021, 3, 9, 17, 4, 18, 2) -> f_525(v1005, v1006, v1007, v1008, v1080, 1, 12, 0, 11, 10, v1015, v1025, v1009, v1018, v1019, v1020, v1021, 3, 8, 17, 4, 18, 2, 9) :|: v1080 < 10 && v1009 <= 8
f_525(v1005, v1006, v1007, v1008, v1080, 1, 12, 0, 11, 10, v1015, v1025, v1009, v1018, v1019, v1020, v1021, 3, 8, 17, 4, 18, 2, 9) -> f_527(v1005, v1006, v1007, v1008, v1080, 1, 12, 0, 11, 10, v1015, v1025, v1009, v1018, v1019, v1020, v1021, 3, 8, 17, 4, 18, 2, 9) :|: 0 = 0
f_527(v1005, v1006, v1007, v1008, v1080, 1, 12, 0, 11, 10, v1015, v1025, v1009, v1018, v1019, v1020, v1021, 3, 8, 17, 4, 18, 2, 9) -> f_529(v1005, v1006, v1007, v1008, v1080, 1, 12, 0, 11, 10, v1015, v1025, v1009, v1018, v1019, v1020, v1021, 3, 8, 17, 4, 18, 2, 9) :|: TRUE
f_529(v1005, v1006, v1007, v1008, v1080, 1, 12, 0, 11, 10, v1015, v1025, v1009, v1018, v1019, v1020, v1021, 3, 8, 17, 4, 18, 2, 9) -> f_531(v1005, v1006, v1007, v1008, v1080, 1, 12, 0, 11, 10, v1015, v1025, v1009, v1018, v1019, v1020, v1021, 3, 8, 17, 4, 18, 2, 9) :|: TRUE
f_531(v1005, v1006, v1007, v1008, v1080, 1, 12, 0, 11, 10, v1015, v1025, v1009, v1018, v1019, v1020, v1021, 3, 8, 17, 4, 18, 2, 9) -> f_532(v1005, v1006, v1007, v1008, v1080, 1, 12, 0, 11, 10, v1015, v1025, v1009, v1018, v1019, v1020, v1021, 3, 8, 17, 4, 18, 2, 9) :|: TRUE
f_532(v1005, v1006, v1007, v1008, v1080, 1, 12, 0, 11, 10, v1015, v1025, v1009, v1018, v1019, v1020, v1021, 3, 8, 17, 4, 18, 2, 9) -> f_498(v1005, v1006, v1007, v1008, v1080, 1, 12, 0, 11, 10, v1015, v1025, v1009, v1018, v1019, v1020, v1021, 3, 9, 8, 4) :|: TRUE
f_498(v968, v969, v970, v971, v972, 1, 12, 0, 11, 10, v978, v979, v980, v981, v982, v983, v984, 3, 9, 8, 4) -> f_499(v968, v969, v970, v971, v972, 1, 3, 0, 11, 10, v978, v979, 12, v980, v981, v982, v983, v984, 9, 8, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_513(v1005:0, v1006:0, v1007:0, v1008:0, v1009:0, 1, 12, 11, 10, v1015:0, v1025:0, v1017:0, v1018:0, v1019:0, v1020:0, v1021:0, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) -> f_513(v1005:0, v1006:0, v1007:0, v1008:0, 1 + v1009:0, 1, 4, 3, 2, v1025:0, 1 + v1025:0, v1009:0, v1018:0, v1019:0, v1020:0, v1021:0, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) :|: v1009:0 > 0 && v1009:0 < 10 && v1025:0 > 8 && v1009:0 < 9
f_513(v1005:0, v1006:0, v1007:0, v1008:0, v1009:0, 1, 1 + v1023:1, v1011:0, v1023:0, v1015:0, v1025:0, v1017:0, v1018:0, v1019:0, v1020:0, v1021:0, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) -> f_513(v1005:0, v1006:0, v1007:0, v1008:0, v1009:0, 1, 2 + v1023:1, 1 + v1023:1, v1023:1, v1025:0, 1 + v1025:0, v1017:0, v1018:0, v1019:0, v1020:0, v1021:0, 0, 3, 2, 6, 9, 11, 8, 4, 10, 12) :|: v1023:1 > 1 && v1023:1 < 11 && v1025:0 > 8 && v1023:0 < 10 && v1011:0 < 11
Filtered unneeded arguments:
   f_513(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26) -> f_513(x5, x7, x8, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_513(v1009:0, cons_12, cons_11, cons_10, v1025:0) -> f_513(1 + v1009:0, 4, 3, 2, 1 + v1025:0) :|: v1009:0 < 10 && v1009:0 > 0 && v1009:0 < 9 && v1025:0 > 8 && cons_12 = 12 && cons_11 = 11 && cons_10 = 10
f_513(v1009:0, sum~cons_1~v1023:1, v1011:0, v1023:0, v1025:0) -> f_513(v1009:0, 2 + v1023:1, 1 + v1023:1, v1023:1, 1 + v1025:0) :|: v1023:1 < 11 && v1023:1 > 1 && v1025:0 > 8 && v1011:0 < 11 && v1023:0 < 10 && sum~cons_1~v1023:1 = 1 + v1023:1

----------------------------------------

(9)
Obligation:
Rules:
f_513(v1009:0, cons_12, cons_11, cons_10, v1025:0) -> f_513(1 + v1009:0, 4, 3, 2, 1 + v1025:0) :|: v1009:0 < 10 && v1009:0 > 0 && v1009:0 < 9 && v1025:0 > 8 && cons_12 = 12 && cons_11 = 11 && cons_10 = 10
f_513(x, x1, x2, x3, x4) -> f_513(x, 2 + x5, 1 + x5, x5, 1 + x4) :|: x5 < 11 && x5 > 1 && x4 > 8 && x2 < 11 && x3 < 10 && x1 = 1 + x5

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_513(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_513(x:0, 2 + x5:0, 1 + x5:0, x5:0, 1 + x4:0) :|: x2:0 < 11 && x3:0 < 10 && x4:0 > 8 && x5:0 > 1 && x5:0 < 11 && sum~cons_1~x5:0 = 1 + x5:0
f_513(v1009:0:0, cons_12, cons_11, cons_10, v1025:0:0) -> f_513(1 + v1009:0:0, 4, 3, 2, 1 + v1025:0:0) :|: v1009:0:0 < 9 && v1025:0:0 > 8 && v1009:0:0 > 0 && v1009:0:0 < 10 && cons_12 = 12 && cons_11 = 11 && cons_10 = 10

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_513(x, x1, x2, x3, x4)] = 3992 - 709*x + 8*x*x1 - 8*x*x4 + 36*x^2 - 56*x1 - x1*x4 - x1^2 + 76*x4

The following rules are decreasing:
f_513(v1009:0:0, cons_12, cons_11, cons_10, v1025:0:0) -> f_513(1 + v1009:0:0, 4, 3, 2, 1 + v1025:0:0) :|: v1009:0:0 < 9 && v1025:0:0 > 8 && v1009:0:0 > 0 && v1009:0:0 < 10 && cons_12 = 12 && cons_11 = 11 && cons_10 = 10
The following rules are bounded:
f_513(v1009:0:0, cons_12, cons_11, cons_10, v1025:0:0) -> f_513(1 + v1009:0:0, 4, 3, 2, 1 + v1025:0:0) :|: v1009:0:0 < 9 && v1025:0:0 > 8 && v1009:0:0 > 0 && v1009:0:0 < 10 && cons_12 = 12 && cons_11 = 11 && cons_10 = 10

----------------------------------------

(13)
Obligation:
Rules:
f_513(x:0, sum~cons_1~x5:0, x2:0, x3:0, x4:0) -> f_513(x:0, 2 + x5:0, 1 + x5:0, x5:0, 1 + x4:0) :|: x2:0 < 11 && x3:0 < 10 && x4:0 > 8 && x5:0 > 1 && x5:0 < 11 && sum~cons_1~x5:0 = 1 + x5:0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_513(x:0:0, sum~cons_1~x5:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_513(x:0:0, 2 + x5:0:0, 1 + x5:0:0, x5:0:0, 1 + x4:0:0) :|: x5:0:0 > 1 && x5:0:0 < 11 && x4:0:0 > 8 && x3:0:0 < 10 && x2:0:0 < 11 && sum~cons_1~x5:0:0 = 1 + x5:0:0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_513(x1, x2, x3, x4, x5) -> f_513(x2, x3, x4, x5)

----------------------------------------

(17)
Obligation:
Rules:
f_513(sum~cons_1~x5:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_513(2 + x5:0:0, 1 + x5:0:0, x5:0:0, 1 + x4:0:0) :|: x5:0:0 > 1 && x5:0:0 < 11 && x4:0:0 > 8 && x3:0:0 < 10 && x2:0:0 < 11 && sum~cons_1~x5:0:0 = 1 + x5:0:0

----------------------------------------

(18) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_513 ] = -1*f_513_1

The following rules are decreasing:
f_513(sum~cons_1~x5:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_513(2 + x5:0:0, 1 + x5:0:0, x5:0:0, 1 + x4:0:0) :|: x5:0:0 > 1 && x5:0:0 < 11 && x4:0:0 > 8 && x3:0:0 < 10 && x2:0:0 < 11 && sum~cons_1~x5:0:0 = 1 + x5:0:0

The following rules are bounded:
f_513(sum~cons_1~x5:0:0, x2:0:0, x3:0:0, x4:0:0) -> f_513(2 + x5:0:0, 1 + x5:0:0, x5:0:0, 1 + x4:0:0) :|: x5:0:0 > 1 && x5:0:0 < 11 && x4:0:0 > 8 && x3:0:0 < 10 && x2:0:0 < 11 && sum~cons_1~x5:0:0 = 1 + x5:0:0


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_231(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 11, 10, 8, 9, 4, 12) -> f_232(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 10, 9, 7, 8, 4, 11) :|: v120 < 12 && v117 <= 9 && v116 <= 10 && v118 <= 7 && v119 <= 8
f_232(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 10, 9, 7, 8, 4, 11) -> f_234(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 10, 9, 7, 8, 4, 11) :|: 0 = 0
f_234(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 10, 9, 7, 8, 4, 11) -> f_236(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 10, 9, 7, 8, 4, 11) :|: TRUE
f_236(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 10, 9, 7, 8, 4, 11) -> f_238(v110, v111, v112, v113, 0, 1, v120, v117, v118, v119, v121, v122, v123, v124, 3, 2, 9, 7, 8, 4, 11) :|: 0 = 0
f_238(v110, v111, v112, v113, 0, 1, v120, v117, v118, v119, v121, v122, v123, v124, 3, 2, 9, 7, 8, 4, 11) -> f_240(v110, v111, v112, v113, 0, 1, v120, v132, v118, v119, v117, v121, v122, v123, v124, 3, 2, 9, 7, 8, 4, 11, 10) :|: 1 + v132 = v120 && 3 <= v132 && v132 <= 10
f_240(v110, v111, v112, v113, 0, 1, v120, v132, v118, v119, v117, v121, v122, v123, v124, 3, 2, 9, 7, 8, 4, 11, 10) -> f_242(v110, v111, v112, v113, 0, 1, v120, v132, v118, v119, v117, v121, v122, v123, v124, 3, 2, 9, 7, 8, 4, 11, 10) :|: TRUE
f_242(v110, v111, v112, v113, 0, 1, v120, v132, v118, v119, v117, v121, v122, v123, v124, 3, 2, 9, 7, 8, 4, 11, 10) -> f_244(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) :|: 0 = 0
f_244(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) -> f_246(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) :|: v117 = 1 + v119
f_246(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) -> f_248(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) :|: TRUE
f_248(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) -> f_250(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) :|: 0 = 0
f_250(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10) -> f_252(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v135, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10, 5, 12) :|: v135 = 2 + v132 && 5 <= v135 && v135 <= 12
f_252(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v135, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10, 5, 12) -> f_254(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v135, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10, 5, 12) :|: TRUE
f_254(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v135, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10, 5, 12) -> f_256(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v135, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10, 5, 12) :|: TRUE
f_256(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v135, v121, v122, v123, v124, 3, 2, 9, 8, 4, 11, 10, 5, 12) -> f_230(v110, v111, v112, v113, 0, 1, v120, v132, v119, v117, v135, v121, v122, v123, v124, 3, 2, 11, 10, 8, 9, 4, 12) :|: TRUE
f_230(v110, v111, v112, v113, 0, 1, v116, v117, v118, v119, v120, v121, v122, v123, v124, 3, 2, 11, 10, 8, 9, 4, 12) -> f_231(v110, v111, v112, v113, 0, 1, v120, v116, v117, v118, v119, v121, v122, v123, v124, 3, 2, 11, 10, 8, 9, 4, 12) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_231(v110:0, v111:0, v112:0, v113:0, 0, 1, 1 + v132:0, v116:0, 1 + v119:0, v118:0, v119:0, v121:0, v122:0, v123:0, v124:0, 3, 2, 11, 10, 8, 9, 4, 12) -> f_231(v110:0, v111:0, v112:0, v113:0, 0, 1, 2 + v132:0, 1 + v132:0, v132:0, v119:0, 1 + v119:0, v121:0, v122:0, v123:0, v124:0, 3, 2, 11, 10, 8, 9, 4, 12) :|: v119:0 < 9 && v132:0 < 11 && v116:0 < 11 && v118:0 < 8 && v132:0 > 2
Filtered unneeded arguments:
   f_231(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_231(x7, x8, x9, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_231(sum~cons_1~v132:0, v116:0, sum~cons_1~v119:0, v118:0, v119:0) -> f_231(2 + v132:0, 1 + v132:0, v132:0, v119:0, 1 + v119:0) :|: v132:0 < 11 && v119:0 < 9 && v116:0 < 11 && v132:0 > 2 && v118:0 < 8 && sum~cons_1~v132:0 = 1 + v132:0 && sum~cons_1~v119:0 = 1 + v119:0

----------------------------------------

(22)
Obligation:
Rules:
f_231(sum~cons_1~v132:0, v116:0, sum~cons_1~v119:0, v118:0, v119:0) -> f_231(2 + v132:0, 1 + v132:0, v132:0, v119:0, 1 + v119:0) :|: v132:0 < 11 && v119:0 < 9 && v116:0 < 11 && v132:0 > 2 && v118:0 < 8 && sum~cons_1~v132:0 = 1 + v132:0 && sum~cons_1~v119:0 = 1 + v119:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_231(sum~cons_1~v132:0:0, v116:0:0, sum~cons_1~v119:0:0, v118:0:0, v119:0:0) -> f_231(2 + v132:0:0, 1 + v132:0:0, v132:0:0, v119:0:0, 1 + v119:0:0) :|: v132:0:0 > 2 && v118:0:0 < 8 && v116:0:0 < 11 && v119:0:0 < 9 && v132:0:0 < 11 && sum~cons_1~v132:0:0 = 1 + v132:0:0 && sum~cons_1~v119:0:0 = 1 + v119:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_231(x, x1, x2, x3, x4)] = 8 - x4

The following rules are decreasing:
f_231(sum~cons_1~v132:0:0, v116:0:0, sum~cons_1~v119:0:0, v118:0:0, v119:0:0) -> f_231(2 + v132:0:0, 1 + v132:0:0, v132:0:0, v119:0:0, 1 + v119:0:0) :|: v132:0:0 > 2 && v118:0:0 < 8 && v116:0:0 < 11 && v119:0:0 < 9 && v132:0:0 < 11 && sum~cons_1~v132:0:0 = 1 + v132:0:0 && sum~cons_1~v119:0:0 = 1 + v119:0:0
The following rules are bounded:
f_231(sum~cons_1~v132:0:0, v116:0:0, sum~cons_1~v119:0:0, v118:0:0, v119:0:0) -> f_231(2 + v132:0:0, 1 + v132:0:0, v132:0:0, v119:0:0, 1 + v119:0:0) :|: v132:0:0 > 2 && v118:0:0 < 8 && v116:0:0 < 11 && v119:0:0 < 9 && v132:0:0 < 11 && sum~cons_1~v132:0:0 = 1 + v132:0:0 && sum~cons_1~v119:0:0 = 1 + v119:0:0

----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
