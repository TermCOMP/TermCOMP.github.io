MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/WzElC.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/WzElC.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/WzElC.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		store 0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%6 = load %3
		store %6, %4
		br %7
	7:
		%8 = load %4
		%9 = icmp sge %8 0
		br %9, %10, %13
	10:
		%11 = load %2
		%12 = icmp sge %11 0
		br %13
	13:
		%14 = phi [0, %7], [%12, %10]
		br %14, %15, %37
	15:
		%16 = call i32 @__VERIFIER_nondet_int()
		%17 = icmp ne %16 0
		br %17, %18, %34
	18:
		br %19
	19:
		%20 = load %2
		%21 = load %3
		%22 = icmp sle %20 %21
		br %22, %23, %26
	23:
		%24 = call i32 @__VERIFIER_nondet_int()
		%25 = icmp ne %24 0
		br %26
	26:
		%27 = phi [0, %19], [%25, %23]
		br %27, %28, %31
	28:
		%29 = load %2
		%30 = add i32 %29, 1
		store %30, %2
		br %19
	31:
		%32 = load %4
		%33 = add i32 %32, -1
		store %33, %4
		br %34
	34:
		%35 = load %2
		%36 = add i32 %35, -1
		store %36, %2
		br %7
	37:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()Aborted 1756892682Exec. 4, LLVMToSEGraph with some error. Reason: java.lang.IllegalStateException: Adding two weak inequalities would result in an equation - but this should have been detected earlier!.
            aprove.InputModules.Programs.llvm.internalStructures.expressions.relations.LLVMHeuristicRelationSet.addRelation(LLVMHeuristicRelationSet.java:278)
            aprove.InputModules.Programs.llvm.internalStructures.expressions.relations.LLVMHeuristicRelationSet.restrictRelationsToRefs(LLVMHeuristicRelationSet.java:1004)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicState.restrictToUsedReferences(LLVMHeuristicState.java:2743)
            aprove.InputModules.Programs.llvm.states.LLVMHeuristicState.postProcess(LLVMHeuristicState.java:3220)
            aprove.InputModules.Programs.llvm.states.LLVMAbstractState.postProcessAfterEvaluation(LLVMAbstractState.java:1445)
            aprove.InputModules.Programs.llvm.states.LLVMAbstractState.evaluate(LLVMAbstractState.java:534)
            aprove.InputModules.Programs.llvm.segraph.graphConstructionSteps.LLVMStandardStep.perform(LLVMStandardStep.java:98)
            aprove.InputModules.Programs.llvm.segraph.LLVMSEGraph.executeStepAndPutSucessorStepsInQueue(LLVMSEGraph.java:1087)
            aprove.InputModules.Programs.llvm.segraph.LLVMSEGraph.buildFullGraph(LLVMSEGraph.java:243)
