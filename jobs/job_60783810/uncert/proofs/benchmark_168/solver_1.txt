YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Pd0m1.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 49 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1728 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 24 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Pd0m1.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Pd0m1.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "strlen_rec" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%2 = alloca i32, align 4
		%3 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%4 = load %3
		%5 = load %4
		%6 = sext i8 %5 to i32
		%7 = icmp eq %6 0
		br %7, %8, %9
	8:
		store 0, %2
		br %14
	9:
		%10 = load %3
		%11 = getelementptr %10, 1
		%12 = call i32 @strlen_rec(*i8 %11)
		%13 = add i32 1, %12
		store %13, %2
		br %14
	14:
		%15 = load %2
		ret %15

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 31
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %7, %8
	7:
		store 1, %2
		br %8
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%9 = load %2
		%10 = sext i32 %9 to i64
		%11 = mul i64 %10, 1
		%12 = alloca i8, numElementsLit: %11, align 16
		store %12, %3
		%13 = load %3
		%14 = load %2
		%15 = sub i32 %14, 1
		%16 = sext i32 %15 to i64
		%17 = getelementptr %13, %16
		store 0, %17
		%18 = load %3
		%19 = call i32 @strlen_rec(*i8 %18)
		%20 = load %1
		ret %20


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_247(v106, v117, v107, v108, v109, v110, v111, v112, v113, v114, v118, 0, v116, 3, 7, 1, 4, 8) -> f_248(v106, v117, v119, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, 0, v116, 3, 7, 1, 4, 8) :|: 1 <= v119 && v120 = 7 + v119 && 8 <= v120
f_248(v106, v117, v119, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, 0, v116, 3, 7, 1, 4, 8) -> f_249(v106, v117, v119, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, 0, v116, 3, 7, 1, 4, 8) :|: TRUE
f_249(v106, v117, v119, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, 0, v116, 3, 7, 1, 4, 8) -> f_250(v106, v117, v119, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, 0, v116, 3, 7, 1, 4, 8) :|: TRUE
f_250(v106, v117, v119, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, 0, v116, 3, 7, 1, 4, 8) -> f_251(v106, v117, v119, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, 0, v116, 3, 7, 1, 4, 8) :|: 0 = 0
f_251(v106, v117, v119, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, 0, v116, 3, 7, 1, 4, 8) -> f_252(v106, v117, v119, v122, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, 0, v116, 3, 7, 1, 4, 8) :|: TRUE
f_252(v106, v117, v119, v122, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, 0, v116, 3, 7, 1, 4, 8) -> f_253(v106, v117, v119, v122, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, 0, v116, 3, 7, 1, 4, 8) :|: 0 = 0
f_253(v106, v117, v119, v122, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, 0, v116, 3, 7, 1, 4, 8) -> f_255(v106, v117, v119, v122, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, 0, v116, 3, 7, 1, 2, 4, 8) :|: v122 != 0 && v106 < v108 && 2 <= v108
f_255(v106, v117, v119, v122, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, 0, v116, 3, 7, 1, 2, 4, 8) -> f_257(v106, v117, v119, v122, 0, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, v116, 3, 7, 1, 2, 4, 8) :|: 0 = 0
f_257(v106, v117, v119, v122, 0, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, v116, 3, 7, 1, 2, 4, 8) -> f_259(v106, v117, v119, v122, 0, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, v116, 3, 7, 1, 2, 4, 8) :|: TRUE
f_259(v106, v117, v119, v122, 0, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, v116, 3, 7, 1, 2, 4, 8) -> f_261(v106, v117, v119, v122, 0, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, v116, 3, 7, 1, 2, 4, 8) :|: 0 = 0
f_261(v106, v117, v119, v122, 0, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, v116, 3, 7, 1, 2, 4, 8) -> f_263(v106, v117, v119, v122, 0, v124, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, v116, 3, 7, 1, 2, 4, 8) :|: v124 = 1 + v106 && 2 <= v124
f_263(v106, v117, v119, v122, 0, v124, v107, v108, v109, v110, v111, v112, v113, v114, v118, v120, v116, 3, 7, 1, 2, 4, 8) -> f_265(v124, v107, v108, v109, v110, v111, v112, v113, v114, v117, v118, v119, v120, 0, v116, v106, v122, 3, 7, 1, 2, 4, 8) :|: 0 = 0
f_265(v124, v107, v108, v109, v110, v111, v112, v113, v114, v117, v118, v119, v120, 0, v116, v106, v122, 3, 7, 1, 2, 4, 8) -> f_268(v124, v107, v108, v109, v110, v111, v112, v113, v114, v117, v118, v119, v120, 0, v116, v106, v122, 3, 7, 1, 2, 4, 8) :|: TRUE
f_268(v124, v107, v108, v109, v110, v111, v112, v113, v114, v117, v118, v119, v120, 0, v116, v106, v122, 3, 7, 1, 2, 4, 8) -> f_244(v124, v107, v108, v109, v110, v111, v112, v113, v114, 0, v116, 3, 7, 1, 4, 8) :|: TRUE
f_244(v106, v107, v108, v109, v110, v111, v112, v113, v114, 0, v116, 3, 7, 1, 4, 8) -> f_247(v106, v117, v107, v108, v109, v110, v111, v112, v113, v114, v118, 0, v116, 3, 7, 1, 4, 8) :|: 1 <= v117 && v118 = 3 + v117 && 4 <= v118
Combined rules. Obtained 2 rulesP rules:
f_247(v106:0, v117:0, v107:0, v108:0, v109:0, v110:0, v111:0, v112:0, v113:0, v114:0, v118:0, 0, v116:0, 3, 7, 1, 4, 8) -> f_247(1 + v106:0, v117:1, v107:0, v108:0, v109:0, v110:0, v111:0, v112:0, v113:0, v114:0, 3 + v117:1, 0, v116:0, 3, 7, 1, 4, 8) :|: v119:0 > 0 && v108:0 > v106:0 && v122:0 < 0 && v108:0 > 1 && v106:0 > 0 && v117:1 > 0
f_247(v106:0, v117:0, v107:0, v108:0, v109:0, v110:0, v111:0, v112:0, v113:0, v114:0, v118:0, 0, v116:0, 3, 7, 1, 4, 8) -> f_247(1 + v106:0, v117:1, v107:0, v108:0, v109:0, v110:0, v111:0, v112:0, v113:0, v114:0, 3 + v117:1, 0, v116:0, 3, 7, 1, 4, 8) :|: v119:0 > 0 && v108:0 > v106:0 && v122:0 > 0 && v108:0 > 1 && v106:0 > 0 && v117:1 > 0
Filtered unneeded arguments:
   f_247(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_247(x1, x4)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_247(v106:0, v108:0) -> f_247(1 + v106:0, v108:0) :|: v108:0 > 1 && v106:0 > 0 && v108:0 > v106:0

----------------------------------------

(8)
Obligation:
Rules:
f_247(v106:0, v108:0) -> f_247(1 + v106:0, v108:0) :|: v108:0 > 1 && v106:0 > 0 && v108:0 > v106:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_247(v106:0:0, v108:0:0) -> f_247(1 + v106:0:0, v108:0:0) :|: v108:0:0 > 1 && v106:0:0 > 0 && v108:0:0 > v106:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_247(x, x1)] = -x + x1

The following rules are decreasing:
f_247(v106:0:0, v108:0:0) -> f_247(1 + v106:0:0, v108:0:0) :|: v108:0:0 > 1 && v106:0:0 > 0 && v108:0:0 > v106:0:0
The following rules are bounded:
f_247(v106:0:0, v108:0:0) -> f_247(1 + v106:0:0, v108:0:0) :|: v108:0:0 > 1 && v106:0:0 > 0 && v108:0:0 > v106:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
