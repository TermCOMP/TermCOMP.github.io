MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/c7fX0.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 306 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
    (7) SCC2IRS [SOUND, 26 ms]
    (8) IntTRS
        (9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (10) IntTRS
        (11) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (12) IntTRS
        (13) IntTRSPeriodicNontermProof [COMPLETE, 8 ms]
        (14) NO
    (15) SCC2IRS [SOUND, 0 ms]
    (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) IntTRSPeriodicNontermProof [COMPLETE, 5 ms]
        (20) NO
(21) SEGraph to IRS [SOUND, 110 ms]
(22) IntTRS
    (23) IRSToKoat [EQUIVALENT, 0 ms]
    (24) Koat Problem
    (25) KoAT2 [EQUIVALENT, 93 ms]
    (26) MAYBE
(27) SEGraph to IRS [SOUND, 114 ms]
(28) IntTRS
    (29) IRSNoOverapproximation [EQUIVALENT, 0 ms]
    (30) MAYBE


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/c7fX0.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/c7fX0.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "delete" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%5 = load %4
		store 0, %5
		%6 = load %3
		%7 = icmp ult null %6
		br %7, %8, %23
	8:
		%9 = load %3
		%10 = load %4
		%11 = icmp ult %9 %10
		br %11, %12, %23
	12:
		br %13
	13:
		%14 = load %3
		%15 = load %14
		%16 = sext i8 %15 to i32
		%17 = icmp ne %16 0
		br %17, %18, %22
	18:
		%19 = load %3
		store 0, %19
		%20 = load %3
		%21 = getelementptr %20, 1
		store %21, %3
		br %13
	22:
		br %23
	23:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 40
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i8, align 8
		%3 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		%4 = load %2
		%5 = load %3
		Unnamed Call-Instruction = call BasicVoidType @delete(*i8 %4, *i8 %5)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_192(v55, v56, v57, v58, v59, 1, v61, v65, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_193(v55, v56, v57, v58, v59, 1, v61, v65, v74, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_193(v55, v56, v57, v58, v59, 1, v61, v65, v74, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_194(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
f_194(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_195(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: v74 != 0
f_195(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_197(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
f_197(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_199(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_199(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_201(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
f_201(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_203(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) :|: TRUE
f_203(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) -> f_205(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) :|: TRUE
f_205(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) -> f_206(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) :|: v93 = 1 + v91 && 1 <= v93
f_206(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) -> f_207(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_207(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_208(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_208(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_191(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_191(v55, v56, v57, v58, v59, 1, v61, v62, v63, v64, v65, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_192(v55, v56, v57, v58, v59, 1, v61, v65, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_192(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, v65:0, v63:0, v62:0, v64:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) -> f_192(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, 1 + v91:0, v74:0, v65:0, v91:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) :|: v91:0 > -1 && v74:0 < 0
f_192(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, v65:0, v63:0, v62:0, v64:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) -> f_192(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, 1 + v91:0, v74:0, v65:0, v91:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) :|: v91:0 > -1 && v74:0 > 0
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_192(v55:0, v56:0, v57:0, v58:0, v59:0, cons_1, v61:0, v65:0, v63:0, v62:0, v64:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, cons_3, cons_7, cons_0, cons_2, cons_4, cons_8) -> f_192(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, 1 + v91:0, v74:0, v65:0, v91:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) :|: v91:0 > -1 && v74:0 < 0 && cons_1 = 1 && cons_3 = 3 && cons_7 = 7 && cons_0 = 0 && cons_2 = 2 && cons_4 = 4 && cons_8 = 8
f_192(v55:0, v56:0, v57:0, v58:0, v59:0, cons_1, v61:0, v65:0, v63:0, v62:0, v64:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, cons_3, cons_7, cons_0, cons_2, cons_4, cons_8) -> f_192(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, 1 + v91:0, v74:0, v65:0, v91:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) :|: v91:0 > -1 && v74:0 > 0 && cons_1 = 1 && cons_3 = 3 && cons_7 = 7 && cons_0 = 0 && cons_2 = 2 && cons_4 = 4 && cons_8 = 8

----------------------------------------

(8)
Obligation:
Rules:
f_192(v55:0, v56:0, v57:0, v58:0, v59:0, cons_1, v61:0, v65:0, v63:0, v62:0, v64:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, cons_3, cons_7, cons_0, cons_2, cons_4, cons_8) -> f_192(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, 1 + v91:0, v74:0, v65:0, v91:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) :|: v91:0 > -1 && v74:0 < 0 && cons_1 = 1 && cons_3 = 3 && cons_7 = 7 && cons_0 = 0 && cons_2 = 2 && cons_4 = 4 && cons_8 = 8
f_192(x, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_192(x, x1, x2, x3, x4, 1, x6, 1 + x25, x26, x7, x25, x11, x12, x13, x14, x15, x16, x17, x18, 3, 7, 0, 2, 4, 8) :|: x25 > -1 && x26 > 0 && x5 = 1 && x19 = 3 && x20 = 7 && x21 = 0 && x22 = 2 && x23 = 4 && x24 = 8

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_192(x:0, x1:0, x2:0, x3:0, x4:0, cons_1, x6:0, x7:0, x8:0, x9:0, x10:0, x11:0, x12:0, x13:0, x14:0, x15:0, x16:0, x17:0, x18:0, cons_3, cons_7, cons_0, cons_2, cons_4, cons_8) -> f_192(x:0, x1:0, x2:0, x3:0, x4:0, 1, x6:0, 1 + x25:0, x26:0, x7:0, x25:0, x11:0, x12:0, x13:0, x14:0, x15:0, x16:0, x17:0, x18:0, 3, 7, 0, 2, 4, 8) :|: x25:0 > -1 && x26:0 > 0 && cons_1 = 1 && cons_3 = 3 && cons_7 = 7 && cons_0 = 0 && cons_2 = 2 && cons_4 = 4 && cons_8 = 8
f_192(x, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_192(x, x1, x2, x3, x4, 1, x6, 1 + x25, x26, x7, x25, x11, x12, x13, x14, x15, x16, x17, x18, 3, 7, 0, 2, 4, 8) :|: x25 > -1 && x26 < 0 && x5 = 1 && x19 = 3 && x20 = 7 && x21 = 0 && x22 = 2 && x23 = 4 && x24 = 8

----------------------------------------

(11) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_192(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_192(x6, x20, x21, x22, x23, x24, x25)

----------------------------------------

(12)
Obligation:
Rules:
f_192(cons_1, cons_3, cons_7, cons_0, cons_2, cons_4, cons_8) -> f_192(1, 3, 7, 0, 2, 4, 8) :|: x25:0 > -1 && x26:0 > 0 && cons_1 = 1 && cons_3 = 3 && cons_7 = 7 && cons_0 = 0 && cons_2 = 2 && cons_4 = 4 && cons_8 = 8
f_192(x5, x19, x20, x21, x22, x23, x24) -> f_192(1, 3, 7, 0, 2, 4, 8) :|: x25 > -1 && x26 < 0 && x5 = 1 && x19 = 3 && x20 = 7 && x21 = 0 && x22 = 2 && x23 = 4 && x24 = 8

----------------------------------------

(13) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, cons_1, cons_3, cons_7, cons_0, cons_2, cons_4, cons_8) -> f(1, 1, 3, 7, 0, 2, 4, 8) :|: pc = 1 && (x25:0 > -1 && x26:0 > 0 && cons_1 = 1 && cons_3 = 3 && cons_7 = 7 && cons_0 = 0 && cons_2 = 2 && cons_4 = 4 && cons_8 = 8)
f(pc, x5, x19, x20, x21, x22, x23, x24) -> f(1, 1, 3, 7, 0, 2, 4, 8) :|: pc = 1 && (x25 > -1 && x26 < 0 && x5 = 1 && x19 = 3 && x20 = 7 && x21 = 0 && x22 = 2 && x23 = 4 && x24 = 8)
Witness term starting non-terminating reduction: f(1, 1, 3, 7, 0, 2, 4, 8)
----------------------------------------

(14)
NO

----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_192(v55, v56, v57, v58, v59, 1, v61, v65, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_193(v55, v56, v57, v58, v59, 1, v61, v65, v74, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_193(v55, v56, v57, v58, v59, 1, v61, v65, v74, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_194(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
f_194(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_195(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: v74 != 0
f_195(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_197(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
f_197(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_199(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_199(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_201(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
f_201(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_203(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) :|: TRUE
f_203(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) -> f_205(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) :|: TRUE
f_205(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) -> f_206(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) :|: v93 = 1 + v91 && 1 <= v93
f_206(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) -> f_207(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_207(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_208(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_208(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_191(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: v59 < v61 && 0 <= v55 && 0 <= v56 && 1 <= v57 && 1 <= v58 && 1 <= v59 && 2 <= v61 && 1 <= v65 && 0 <= v91 && 1 <= v93 && 1 <= v66 && 1 <= v67 && 1 <= v68 && 4 <= v69 && 8 <= v70 && 8 <= v71 && 8 <= v72 && 8 <= v73 && v66 <= v69 && v67 <= v70 && v68 <= v71 && v57 <= v72 && v58 <= v73
f_191(v55, v56, v57, v58, v59, 1, v61, v62, v63, v64, v65, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_192(v55, v56, v57, v58, v59, 1, v61, v65, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_192(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, v65:0, v63:0, v62:0, v64:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) -> f_192(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, 1 + v91:0, v74:0, v65:0, v91:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) :|: v55:0 > -1 && v61:0 > v59:0 && v56:0 > -1 && v57:0 > 0 && v58:0 > 0 && v59:0 > 0 && v61:0 > 1 && v65:0 > 0 && v91:0 > -1 && v66:0 > 0 && v67:0 > 0 && v68:0 > 0 && v69:0 > 3 && v70:0 > 7 && v74:0 < 0 && v71:0 > 7 && v72:0 > 7 && v73:0 > 7 && v69:0 >= v66:0 && v70:0 >= v67:0 && v71:0 >= v68:0 && v73:0 >= v58:0 && v72:0 >= v57:0
f_192(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, v65:0, v63:0, v62:0, v64:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) -> f_192(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, 1 + v91:0, v74:0, v65:0, v91:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) :|: v55:0 > -1 && v61:0 > v59:0 && v56:0 > -1 && v57:0 > 0 && v58:0 > 0 && v59:0 > 0 && v61:0 > 1 && v65:0 > 0 && v91:0 > -1 && v66:0 > 0 && v67:0 > 0 && v68:0 > 0 && v69:0 > 3 && v70:0 > 7 && v74:0 > 0 && v71:0 > 7 && v72:0 > 7 && v73:0 > 7 && v69:0 >= v66:0 && v70:0 >= v67:0 && v71:0 >= v68:0 && v73:0 >= v58:0 && v72:0 >= v57:0
Filtered unneeded arguments:
   f_192(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_192(x1, x2, x3, x4, x5, x7, x8, x12, x13, x14, x15, x16, x17, x18, x19)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_192(v55:0, v56:0, v57:0, v58:0, v59:0, v61:0, v65:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0) -> f_192(v55:0, v56:0, v57:0, v58:0, v59:0, v61:0, 1 + v91:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0) :|: v61:0 > v59:0 && v55:0 > -1 && v56:0 > -1 && v57:0 > 0 && v58:0 > 0 && v59:0 > 0 && v61:0 > 1 && v65:0 > 0 && v91:0 > -1 && v66:0 > 0 && v67:0 > 0 && v68:0 > 0 && v69:0 > 3 && v70:0 > 7 && v71:0 > 7 && v72:0 > 7 && v73:0 > 7 && v69:0 >= v66:0 && v70:0 >= v67:0 && v71:0 >= v68:0 && v72:0 >= v57:0 && v73:0 >= v58:0

----------------------------------------

(16)
Obligation:
Rules:
f_192(v55:0, v56:0, v57:0, v58:0, v59:0, v61:0, v65:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0) -> f_192(v55:0, v56:0, v57:0, v58:0, v59:0, v61:0, 1 + v91:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0) :|: v61:0 > v59:0 && v55:0 > -1 && v56:0 > -1 && v57:0 > 0 && v58:0 > 0 && v59:0 > 0 && v61:0 > 1 && v65:0 > 0 && v91:0 > -1 && v66:0 > 0 && v67:0 > 0 && v68:0 > 0 && v69:0 > 3 && v70:0 > 7 && v71:0 > 7 && v72:0 > 7 && v73:0 > 7 && v69:0 >= v66:0 && v70:0 >= v67:0 && v71:0 >= v68:0 && v72:0 >= v57:0 && v73:0 >= v58:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_192(v55:0:0, v56:0:0, v57:0:0, v58:0:0, v59:0:0, v61:0:0, v65:0:0, v66:0:0, v69:0:0, v67:0:0, v70:0:0, v68:0:0, v71:0:0, v72:0:0, v73:0:0) -> f_192(v55:0:0, v56:0:0, v57:0:0, v58:0:0, v59:0:0, v61:0:0, 1 + v91:0:0, v66:0:0, v69:0:0, v67:0:0, v70:0:0, v68:0:0, v71:0:0, v72:0:0, v73:0:0) :|: v72:0:0 >= v57:0:0 && v73:0:0 >= v58:0:0 && v71:0:0 >= v68:0:0 && v70:0:0 >= v67:0:0 && v69:0:0 >= v66:0:0 && v73:0:0 > 7 && v72:0:0 > 7 && v71:0:0 > 7 && v70:0:0 > 7 && v69:0:0 > 3 && v68:0:0 > 0 && v67:0:0 > 0 && v66:0:0 > 0 && v91:0:0 > -1 && v65:0:0 > 0 && v61:0:0 > 1 && v59:0:0 > 0 && v58:0:0 > 0 && v57:0:0 > 0 && v56:0:0 > -1 && v55:0:0 > -1 && v61:0:0 > v59:0:0

----------------------------------------

(19) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v55:0:0, v56:0:0, v57:0:0, v58:0:0, v59:0:0, v61:0:0, v65:0:0, v66:0:0, v69:0:0, v67:0:0, v70:0:0, v68:0:0, v71:0:0, v72:0:0, v73:0:0) -> f(1, v55:0:0, v56:0:0, v57:0:0, v58:0:0, v59:0:0, v61:0:0, 1 + v91:0:0, v66:0:0, v69:0:0, v67:0:0, v70:0:0, v68:0:0, v71:0:0, v72:0:0, v73:0:0) :|: pc = 1 && (v72:0:0 >= v57:0:0 && v73:0:0 >= v58:0:0 && v71:0:0 >= v68:0:0 && v70:0:0 >= v67:0:0 && v69:0:0 >= v66:0:0 && v73:0:0 > 7 && v72:0:0 > 7 && v71:0:0 > 7 && v70:0:0 > 7 && v69:0:0 > 3 && v68:0:0 > 0 && v67:0:0 > 0 && v66:0:0 > 0 && v91:0:0 > -1 && v65:0:0 > 0 && v61:0:0 > 1 && v59:0:0 > 0 && v58:0:0 > 0 && v57:0:0 > 0 && v56:0:0 > -1 && v55:0:0 > -1 && v61:0:0 > v59:0:0)
Witness term starting non-terminating reduction: f(1, 0, 0, 1, 1, 14, 15, 1, 1, 17, 1, 19, 1, 19, 19, 19)
----------------------------------------

(20)
NO

----------------------------------------

(21) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 71 rulesP rules:
f_121 -> f_122(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_122(v1, v2, 3, 1, 4) -> f_123(v1, v3, v2, v4, 3, 7, 1, 4, 8) :|: 1 <= v3 && v4 = 7 + v3 && 8 <= v4
f_123(v1, v3, v2, v4, 3, 7, 1, 4, 8) -> f_124(v1, v3, v5, v2, v4, v6, 3, 7, 1, 4, 8) :|: 1 <= v5 && v6 = 7 + v5 && 8 <= v6
f_124(v1, v3, v5, v2, v4, v6, 3, 7, 1, 4, 8) -> f_125(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_125(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_126(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_126(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_127(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_127(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_128(v1, v3, v5, v7, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_128(v1, v3, v5, v7, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_129(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_129(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_130(v7, v9, v1, v2, v3, v4, v5, v6, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_130(v7, v9, v1, v2, v3, v4, v5, v6, 0, 3, 7, 1, 4, 8) -> f_131(v7, v9, v11, v1, v2, v3, v4, v5, v6, v12, 0, 3, 7, 1, 4, 8) :|: 1 <= v11 && v12 = 7 + v11 && 8 <= v12
f_131(v7, v9, v11, v1, v2, v3, v4, v5, v6, v12, 0, 3, 7, 1, 4, 8) -> f_132(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: 1 <= v13 && v14 = 7 + v13 && 8 <= v14
f_132(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_133(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_133(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_134(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_134(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_135(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_135(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_136(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_136(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_137(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_137(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_138(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_138(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_139(v7, v9, v11, v13, v17, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_139(v7, v9, v11, v13, v17, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_140(v7, v9, v11, v13, v17, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: 0 < v17
f_139(v7, v9, v11, v13, v17, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_141(v7, v9, v11, v13, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 1, 4, 8) :|: v17 <= 0
f_140(v7, v9, v11, v13, v17, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_142(v7, v9, v11, v13, v17, 1, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) :|: 0 = 0
f_141(v7, v9, v11, v13, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 1, 4, 8) -> f_143(v7, v9, v11, v13, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 1, 4, 8) :|: 0 = 0
f_142(v7, v9, v11, v13, v17, 1, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) -> f_144(v7, v9, v11, v13, v17, 1, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) :|: TRUE
f_143(v7, v9, v11, v13, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 1, 4, 8) -> f_145(v7, v9, v11, v13, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 1, 4, 8) :|: TRUE
f_144(v7, v9, v11, v13, v17, 1, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) -> f_146(v7, v9, v11, v13, v17, 1, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) :|: 0 = 0
f_145(v7, v9, v11, v13, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 1, 4, 8) -> f_147(v1, v3, v5, v7, v9, v2, v4, v6, 3, 7, 1, 4, 8, 0) :|: TRUE
f_146(v7, v9, v11, v13, v17, 1, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) -> f_148(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) :|: TRUE
f_148(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) -> f_149(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: v17 < v19 && 2 <= v19
f_148(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) -> f_150(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) :|: v19 <= v17
f_149(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_151(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_150(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) -> f_152(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8) :|: 0 = 0
f_151(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_153(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: TRUE
f_152(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8) -> f_154(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8) :|: TRUE
f_153(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_155(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: TRUE
f_154(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8) -> f_156(v1, v3, v5, v7, v9, v2, v4, v6, 3, 7, 1, 4, 8, 0) :|: TRUE
f_155(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_157(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_157(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_158(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: TRUE
f_158(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_159(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_159(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_160(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: v21 != 0
f_159(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_161(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) :|: v21 = 0
f_160(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_162(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_161(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) -> f_163(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) :|: 0 = 0
f_162(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_164(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: TRUE
f_163(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) -> f_165(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) :|: TRUE
f_164(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_166(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_165(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) -> f_167(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) :|: TRUE
f_166(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_168(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: TRUE
f_167(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) -> f_169(v1, v3, v5, v7, v9, v2, v4, v6, 3, 7, 1, 4, 8, 0) :|: TRUE
f_168(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_170(v7, v9, v11, v13, v17, 1, v19, v21, v30, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: TRUE
f_170(v7, v9, v11, v13, v17, 1, v19, v21, v30, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_171(v7, v9, v11, v13, v17, 1, v19, v21, v30, v32, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: v32 = 1 + v30 && 1 <= v32
f_171(v7, v9, v11, v13, v17, 1, v19, v21, v30, v32, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_172(v7, v9, v11, v13, v17, 1, v19, v21, v30, v32, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 0, 4, 8, 2) :|: TRUE
f_172(v7, v9, v11, v13, v17, 1, v19, v21, v30, v32, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 0, 4, 8, 2) -> f_173(v7, v9, v11, v13, v17, 1, v19, v21, v30, v32, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 0, 4, 8, 2) :|: TRUE
f_173(v7, v9, v11, v13, v17, 1, v19, v21, v30, v32, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 0, 4, 8, 2) -> f_191(v7, v9, v11, v13, v17, 1, v19, v17, v21, v30, v32, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 0, 2, 4, 8) :|: TRUE
f_191(v55, v56, v57, v58, v59, 1, v61, v62, v63, v64, v65, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_192(v55, v56, v57, v58, v59, 1, v61, v65, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
f_192(v55, v56, v57, v58, v59, 1, v61, v65, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_193(v55, v56, v57, v58, v59, 1, v61, v65, v74, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_193(v55, v56, v57, v58, v59, 1, v61, v65, v74, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_194(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
f_194(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_195(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: v74 != 0
f_194(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_196(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) :|: v74 = 0
f_195(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_197(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
f_196(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) -> f_198(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) :|: 0 = 0
f_197(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_199(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_198(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) -> f_200(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) :|: TRUE
f_199(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_201(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
f_200(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) -> f_202(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) :|: TRUE
f_201(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_203(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) :|: TRUE
f_202(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) -> f_204(v66, v67, v68, v55, v56, v69, v70, v71, 3, 7, 0, 1, 4, 8) :|: TRUE
f_203(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) -> f_205(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) :|: TRUE
f_205(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) -> f_206(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) :|: v93 = 1 + v91 && 1 <= v93
f_206(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) -> f_207(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_207(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_208(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_208(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_191(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
Combined rules. Obtained 8 rulesP rules:
f_121 -> f_147(v1:0, v3:0, v5:0, v7:0, v9:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v17:0 < 1
f_194(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, v65:0, 0, v62:0, v64:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) -> f_204(v66:0, v67:0, v68:0, v55:0, v56:0, v69:0, v70:0, v71:0, 3, 7, 0, 1, 4, 8) :|: TRUE
f_121 -> f_169(v1:0, v3:0, v5:0, v7:0, v9:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v17:0 > 0 && v19:0 > v17:0 && v19:0 > 1
f_121 -> f_156(v1:0, v3:0, v5:0, v7:0, v9:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v19:0 <= v17:0 && v17:0 > 0
f_121 -> f_194(v7:0, v9:0, v11:0, v13:0, v17:0, 1, v19:0, 1 + v30:0, v74:0, v17:0, v30:0, v1:0, 3 + v1:0, v3:0, 7 + v3:0, v5:0, 7 + v5:0, 7 + v11:0, 7 + v13:0, 3, 7, 0, 2, 4, 8) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v17:0 > 0 && v19:0 > 1 && v19:0 > v17:0 && v30:0 > -1 && v21:0 < 0
f_121 -> f_194(v7:0, v9:0, v11:0, v13:0, v17:0, 1, v19:0, 1 + v30:0, v74:0, v17:0, v30:0, v1:0, 3 + v1:0, v3:0, 7 + v3:0, v5:0, 7 + v5:0, 7 + v11:0, 7 + v13:0, 3, 7, 0, 2, 4, 8) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v17:0 > 0 && v19:0 > 1 && v19:0 > v17:0 && v30:0 > -1 && v21:0 > 0
f_194(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, v65:0, v74:0, v62:0, v64:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) -> f_194(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, 1 + v91:0, v74:1, v65:0, v91:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) :|: v91:0 > -1 && v74:0 < 0
f_194(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, v65:0, v74:0, v62:0, v64:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) -> f_194(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, 1 + v91:0, v74:1, v65:0, v91:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) :|: v91:0 > -1 && v74:0 > 0
Filtered unneeded arguments:
   f_194(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_194(x9)
Removed division, modulo operations, cleaned up constraints. Obtained 7 rules.P rules:
f_121 -> f_147(v1:0, v3:0, v5:0, v7:0, v9:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v1:0 > 0 && v5:0 > 0 && v3:0 > 0
f_194(cons_0) -> f_204(v66:0, v67:0, v68:0, v55:0, v56:0, v69:0, v70:0, v71:0, 3, 7, 0, 1, 4, 8) :|: TRUE && cons_0 = 0
f_121 -> f_169(v1:0, v3:0, v5:0, v7:0, v9:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v1:0 > 0 && v5:0 > 0 && v3:0 > 0
f_121 -> f_156(v1:0, v3:0, v5:0, v7:0, v9:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v1:0 > 0 && v5:0 > 0 && v3:0 > 0
f_121 -> f_194(v74:0) :|: TRUE
f_194(v74:0) -> f_194(v74:1) :|: v74:0 < 0
f_194(v74:0) -> f_194(v74:1) :|: v74:0 > 0

----------------------------------------

(22)
Obligation:
Rules:
f_121 -> f_147(v1:0, v3:0, v5:0, v7:0, v9:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v1:0 > 0 && v5:0 > 0 && v3:0 > 0
f_194(cons_0) -> f_204(v66:0, v67:0, v68:0, v55:0, v56:0, v69:0, v70:0, v71:0, 3, 7, 0, 1, 4, 8) :|: TRUE && cons_0 = 0
f_121 -> f_169(x, x1, x2, x3, x4, 3 + x, 7 + x1, 7 + x2, 3, 7, 1, 4, 8, 0) :|: x > 0 && x2 > 0 && x1 > 0
f_121 -> f_156(x5, x6, x7, x8, x9, 3 + x5, 7 + x6, 7 + x7, 3, 7, 1, 4, 8, 0) :|: x5 > 0 && x7 > 0 && x6 > 0
f_121 -> f_194(v74:0) :|: TRUE
f_194(x10) -> f_194(x11) :|: x10 < 0
f_194(x12) -> f_194(x13) :|: x12 > 0
Start term: f_121

----------------------------------------

(23) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(24)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_121))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x40 x41 k25 k26 k27 k28 k21 k22 k23 k24 k20 x39 x35 x36 x37 x38 x31 x32 x33 x34 k18 k19 x30 x70 x68 x69 x64 x65 x66 x67 x60 x61 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x131 x58 x130 x59 x53 x54 x55 x56 x50 x51 x52 x90 x91 x92 x120 x122 x121 x86 x124 x87 x123 x88 x126 x89 x125 x x82 x128 x83 x127 x84 x85 x129 x80 x81 x79 x111 x110 x75 x113 x76 x112 x'' x77 x115 x78 x114 x71 x117 x72 x116 x73 x119 x74 x118 k14 k15 x109 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x7 x27 x20 x102 x21 x101 x22 x104 x23 x103 x106 x1 x105 x108 x107 x' x17 x18 x19 x13 x14 x15 x16 x97 x10 x98 x11 x99 x12 x93 x94 x95 x96)
(RULES
  f_194(k28, x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10) -> f_194(k25, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) :|: k28 > 0
  f_121(x77, x78, x79, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x90) -> f_194(k19, x91, x92, x93, x94, x95, x96, x97, x98, x99, x100, x101, x102, x103) :|: 0 = 0
  f_121(x118, x119, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x130, x131) -> f_147(k24, k5, k8, k11, k14, 3 + k24, 7 + k5, 7 + k8, 3, 7, 1, 4, 8, 0) :|: k24 > 0 && k8 > 0 && k5 > 0
  f_194(k23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36) -> f_204(k0, k1, k2, k21, k22, k3, k18, k20, 3, 7, 0, 1, 4, 8) :|: 0 = 0 && k23 = 0
  f_121(x104, x105, x106, x107, x108, x109, x110, x111, x112, x113, x114, x115, x116, x117) -> f_169(k16, k17, k7, k9, k4, 3 + k16, 7 + k17, 7 + k7, 3, 7, 1, 4, 8, 0) :|: k16 > 0 && k7 > 0 && k17 > 0
  f_194(k26, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63) -> f_194(k27, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76) :|: k26 < 0
  f_121(x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50) -> f_156(k6, k13, k15, k10, k12, 3 + k6, 7 + k13, 7 + k15, 3, 7, 1, 4, 8, 0) :|: k6 > 0 && k15 > 0 && k13 > 0
)

----------------------------------------

(25) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_11614616764081266688.koat 

KoAT2's output was:

MAYBE

----------------------------------------

(26)
MAYBE

----------------------------------------

(27) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 71 rulesP rules:
f_121 -> f_122(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_122(v1, v2, 3, 1, 4) -> f_123(v1, v3, v2, v4, 3, 7, 1, 4, 8) :|: 1 <= v3 && v4 = 7 + v3 && 8 <= v4
f_123(v1, v3, v2, v4, 3, 7, 1, 4, 8) -> f_124(v1, v3, v5, v2, v4, v6, 3, 7, 1, 4, 8) :|: 1 <= v5 && v6 = 7 + v5 && 8 <= v6
f_124(v1, v3, v5, v2, v4, v6, 3, 7, 1, 4, 8) -> f_125(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_125(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_126(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_126(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_127(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_127(v1, v3, v5, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_128(v1, v3, v5, v7, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_128(v1, v3, v5, v7, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_129(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 7, 1, 4, 8) :|: TRUE
f_129(v1, v3, v5, v7, v9, v2, v4, v6, 0, 3, 7, 1, 4, 8) -> f_130(v7, v9, v1, v2, v3, v4, v5, v6, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_130(v7, v9, v1, v2, v3, v4, v5, v6, 0, 3, 7, 1, 4, 8) -> f_131(v7, v9, v11, v1, v2, v3, v4, v5, v6, v12, 0, 3, 7, 1, 4, 8) :|: 1 <= v11 && v12 = 7 + v11 && 8 <= v12
f_131(v7, v9, v11, v1, v2, v3, v4, v5, v6, v12, 0, 3, 7, 1, 4, 8) -> f_132(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: 1 <= v13 && v14 = 7 + v13 && 8 <= v14
f_132(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_133(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_133(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_134(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_134(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_135(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_135(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_136(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_136(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_137(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: 0 = 0
f_137(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_138(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_138(v7, v9, v11, v13, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_139(v7, v9, v11, v13, v17, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: TRUE
f_139(v7, v9, v11, v13, v17, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_140(v7, v9, v11, v13, v17, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) :|: 0 < v17
f_139(v7, v9, v11, v13, v17, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_141(v7, v9, v11, v13, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 1, 4, 8) :|: v17 <= 0
f_140(v7, v9, v11, v13, v17, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 1, 4, 8) -> f_142(v7, v9, v11, v13, v17, 1, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) :|: 0 = 0
f_141(v7, v9, v11, v13, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 1, 4, 8) -> f_143(v7, v9, v11, v13, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 1, 4, 8) :|: 0 = 0
f_142(v7, v9, v11, v13, v17, 1, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) -> f_144(v7, v9, v11, v13, v17, 1, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) :|: TRUE
f_143(v7, v9, v11, v13, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 1, 4, 8) -> f_145(v7, v9, v11, v13, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 1, 4, 8) :|: TRUE
f_144(v7, v9, v11, v13, v17, 1, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) -> f_146(v7, v9, v11, v13, v17, 1, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) :|: 0 = 0
f_145(v7, v9, v11, v13, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 1, 4, 8) -> f_147(v1, v3, v5, v7, v9, v2, v4, v6, 3, 7, 1, 4, 8, 0) :|: TRUE
f_146(v7, v9, v11, v13, v17, 1, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) -> f_148(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) :|: TRUE
f_148(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) -> f_149(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: v17 < v19 && 2 <= v19
f_148(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) -> f_150(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) :|: v19 <= v17
f_149(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_151(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_150(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8) -> f_152(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8) :|: 0 = 0
f_151(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_153(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: TRUE
f_152(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8) -> f_154(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8) :|: TRUE
f_153(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_155(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: TRUE
f_154(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8) -> f_156(v1, v3, v5, v7, v9, v2, v4, v6, 3, 7, 1, 4, 8, 0) :|: TRUE
f_155(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_157(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_157(v7, v9, v11, v13, v17, 1, v19, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_158(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: TRUE
f_158(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_159(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_159(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_160(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: v21 != 0
f_159(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_161(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) :|: v21 = 0
f_160(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_162(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_161(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) -> f_163(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) :|: 0 = 0
f_162(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_164(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: TRUE
f_163(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) -> f_165(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) :|: TRUE
f_164(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_166(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: 0 = 0
f_165(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) -> f_167(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) :|: TRUE
f_166(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_168(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: TRUE
f_167(v7, v9, v11, v13, v17, 1, v19, 0, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 4, 8, 2) -> f_169(v1, v3, v5, v7, v9, v2, v4, v6, 3, 7, 1, 4, 8, 0) :|: TRUE
f_168(v7, v9, v11, v13, v17, 1, v19, v21, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_170(v7, v9, v11, v13, v17, 1, v19, v21, v30, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: TRUE
f_170(v7, v9, v11, v13, v17, 1, v19, v21, v30, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_171(v7, v9, v11, v13, v17, 1, v19, v21, v30, v32, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) :|: v32 = 1 + v30 && 1 <= v32
f_171(v7, v9, v11, v13, v17, 1, v19, v21, v30, v32, v1, v2, v3, v4, v5, v6, v12, v14, 0, 3, 7, 4, 8, 2) -> f_172(v7, v9, v11, v13, v17, 1, v19, v21, v30, v32, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 0, 4, 8, 2) :|: TRUE
f_172(v7, v9, v11, v13, v17, 1, v19, v21, v30, v32, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 0, 4, 8, 2) -> f_173(v7, v9, v11, v13, v17, 1, v19, v21, v30, v32, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 0, 4, 8, 2) :|: TRUE
f_173(v7, v9, v11, v13, v17, 1, v19, v21, v30, v32, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 0, 4, 8, 2) -> f_191(v7, v9, v11, v13, v17, 1, v19, v17, v21, v30, v32, v1, v2, v3, v4, v5, v6, v12, v14, 3, 7, 0, 2, 4, 8) :|: TRUE
f_191(v55, v56, v57, v58, v59, 1, v61, v62, v63, v64, v65, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_192(v55, v56, v57, v58, v59, 1, v61, v65, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
f_192(v55, v56, v57, v58, v59, 1, v61, v65, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_193(v55, v56, v57, v58, v59, 1, v61, v65, v74, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_193(v55, v56, v57, v58, v59, 1, v61, v65, v74, v63, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_194(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
f_194(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_195(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: v74 != 0
f_194(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_196(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) :|: v74 = 0
f_195(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_197(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
f_196(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) -> f_198(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) :|: 0 = 0
f_197(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_199(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_198(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) -> f_200(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) :|: TRUE
f_199(v55, v56, v57, v58, v59, 1, v61, v65, v74, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_201(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: 0 = 0
f_200(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) -> f_202(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) :|: TRUE
f_201(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_203(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) :|: TRUE
f_202(v55, v56, v57, v58, v59, 1, v61, v65, 0, v62, v64, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 2, 4, 8) -> f_204(v66, v67, v68, v55, v56, v69, v70, v71, 3, 7, 0, 1, 4, 8) :|: TRUE
f_203(v55, v56, v57, v58, v59, 1, v61, v65, v74, v64, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) -> f_205(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) :|: TRUE
f_205(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) -> f_206(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) :|: v93 = 1 + v91 && 1 <= v93
f_206(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 0, 3, 7, 2, 4, 8) -> f_207(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_207(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_208(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
f_208(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) -> f_191(v55, v56, v57, v58, v59, 1, v61, v65, v74, v91, v93, v66, v69, v67, v70, v68, v71, v72, v73, 3, 7, 0, 2, 4, 8) :|: TRUE
Combined rules. Obtained 8 rulesP rules:
f_121 -> f_147(v1:0, v3:0, v5:0, v7:0, v9:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v17:0 < 1
f_194(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, v65:0, 0, v62:0, v64:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) -> f_204(v66:0, v67:0, v68:0, v55:0, v56:0, v69:0, v70:0, v71:0, 3, 7, 0, 1, 4, 8) :|: TRUE
f_121 -> f_169(v1:0, v3:0, v5:0, v7:0, v9:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v17:0 > 0 && v19:0 > v17:0 && v19:0 > 1
f_121 -> f_156(v1:0, v3:0, v5:0, v7:0, v9:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v19:0 <= v17:0 && v17:0 > 0
f_121 -> f_194(v7:0, v9:0, v11:0, v13:0, v17:0, 1, v19:0, 1 + v30:0, v74:0, v17:0, v30:0, v1:0, 3 + v1:0, v3:0, 7 + v3:0, v5:0, 7 + v5:0, 7 + v11:0, 7 + v13:0, 3, 7, 0, 2, 4, 8) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v17:0 > 0 && v19:0 > 1 && v19:0 > v17:0 && v30:0 > -1 && v21:0 < 0
f_121 -> f_194(v7:0, v9:0, v11:0, v13:0, v17:0, 1, v19:0, 1 + v30:0, v74:0, v17:0, v30:0, v1:0, 3 + v1:0, v3:0, 7 + v3:0, v5:0, 7 + v5:0, 7 + v11:0, 7 + v13:0, 3, 7, 0, 2, 4, 8) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v11:0 > 0 && v13:0 > 0 && v17:0 > 0 && v19:0 > 1 && v19:0 > v17:0 && v30:0 > -1 && v21:0 > 0
f_194(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, v65:0, v74:0, v62:0, v64:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) -> f_194(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, 1 + v91:0, v74:1, v65:0, v91:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) :|: v91:0 > -1 && v74:0 < 0
f_194(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, v65:0, v74:0, v62:0, v64:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) -> f_194(v55:0, v56:0, v57:0, v58:0, v59:0, 1, v61:0, 1 + v91:0, v74:1, v65:0, v91:0, v66:0, v69:0, v67:0, v70:0, v68:0, v71:0, v72:0, v73:0, 3, 7, 0, 2, 4, 8) :|: v91:0 > -1 && v74:0 > 0
Filtered unneeded arguments:
   f_194(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_194(x9)
Removed division, modulo operations, cleaned up constraints. Obtained 7 rules.P rules:
f_121 -> f_147(v1:0, v3:0, v5:0, v7:0, v9:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v1:0 > 0 && v5:0 > 0 && v3:0 > 0
f_194(cons_0) -> f_204(v66:0, v67:0, v68:0, v55:0, v56:0, v69:0, v70:0, v71:0, 3, 7, 0, 1, 4, 8) :|: TRUE && cons_0 = 0
f_121 -> f_169(v1:0, v3:0, v5:0, v7:0, v9:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v1:0 > 0 && v5:0 > 0 && v3:0 > 0
f_121 -> f_156(v1:0, v3:0, v5:0, v7:0, v9:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v1:0 > 0 && v5:0 > 0 && v3:0 > 0
f_121 -> f_194(v74:0) :|: TRUE
f_194(v74:0) -> f_194(v74:1) :|: v74:0 < 0
f_194(v74:0) -> f_194(v74:1) :|: v74:0 > 0

----------------------------------------

(28)
Obligation:
Rules:
f_121 -> f_147(v1:0, v3:0, v5:0, v7:0, v9:0, 3 + v1:0, 7 + v3:0, 7 + v5:0, 3, 7, 1, 4, 8, 0) :|: v1:0 > 0 && v5:0 > 0 && v3:0 > 0
f_194(cons_0) -> f_204(v66:0, v67:0, v68:0, v55:0, v56:0, v69:0, v70:0, v71:0, 3, 7, 0, 1, 4, 8) :|: TRUE && cons_0 = 0
f_121 -> f_169(x, x1, x2, x3, x4, 3 + x, 7 + x1, 7 + x2, 3, 7, 1, 4, 8, 0) :|: x > 0 && x2 > 0 && x1 > 0
f_121 -> f_156(x5, x6, x7, x8, x9, 3 + x5, 7 + x6, 7 + x7, 3, 7, 1, 4, 8, 0) :|: x5 > 0 && x7 > 0 && x6 > 0
f_121 -> f_194(v74:0) :|: TRUE
f_194(x10) -> f_194(x11) :|: x10 < 0
f_194(x12) -> f_194(x13) :|: x12 > 0
Start term: f_121

----------------------------------------

(29) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination is aborted since the IRSProblem over-approximates
----------------------------------------

(30)
MAYBE
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
