YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/TIYLP.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 27 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1231 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 39 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 0 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/TIYLP.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/TIYLP.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @random()
		%8 = sub i32 0, %7
		%9 = call i32 @random()
		%10 = sub i32 0, %9
		Unnamed Call-Instruction = call BasicVoidType @loop(i32 %8, i32 %10)
		ret 0

*BasicFunctionTypename: "loop" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 27
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = load %3
		%6 = load %4
		%7 = icmp sgt %5 %6
		br %7, %8, %16
	8:
		%9 = load %4
		%10 = load %3
		%11 = add i32 %9, %10
		store %11, %4
		%12 = load %3
		%13 = add i32 %12, 1
		store %13, %3
		%14 = load %3
		%15 = load %4
		Unnamed Call-Instruction = call BasicVoidType @loop(i32 %14, i32 %15)
		br %16
	16:
		ret void

*BasicFunctionTypename: "random" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 52
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %2
		%4 = load %2
		%5 = icmp slt %4 0
		br %5, %6, %9
	6:
		%7 = load %2
		%8 = sub i32 0, %7
		store %8, %1
		br %11
	9:
		%10 = load %2
		store %10, %1
		br %11
	11:
		%12 = load %1
		ret %12


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 23 rulesP rules:
f_397(v312, v313, v323, v314, v315, v316, v317, v318, v319, v324, v320, v321, v322, 3, 1, 4) -> f_398(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) :|: 1 <= v325 && v326 = 3 + v325 && 4 <= v326
f_398(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) -> f_399(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) :|: TRUE
f_399(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) -> f_400(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) :|: TRUE
f_400(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) -> f_401(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) :|: TRUE
f_401(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) -> f_402(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) :|: TRUE
f_402(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) -> f_403(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) :|: 0 = 0
f_403(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) -> f_404(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) :|: 0 = 0
f_404(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) -> f_405(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) :|: v313 < v312
f_405(v312, v313, v323, v325, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 1, 4) -> f_407(v312, v313, v323, v325, 1, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) :|: 0 = 0
f_407(v312, v313, v323, v325, 1, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) -> f_409(v312, v313, v323, v325, 1, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) :|: TRUE
f_409(v312, v313, v323, v325, 1, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) -> f_411(v312, v313, v323, v325, 1, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) :|: 0 = 0
f_411(v312, v313, v323, v325, 1, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) -> f_414(v312, v313, v323, v325, 1, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) :|: 0 = 0
f_414(v312, v313, v323, v325, 1, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) -> f_417(v312, v313, v323, v325, 1, v359, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) :|: v359 = v313 + v312
f_417(v312, v313, v323, v325, 1, v359, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) -> f_418(v312, v313, v323, v325, 1, v359, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) :|: TRUE
f_418(v312, v313, v323, v325, 1, v359, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) -> f_419(v312, v313, v323, v325, 1, v359, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) :|: 0 = 0
f_419(v312, v313, v323, v325, 1, v359, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) -> f_420(v312, v313, v323, v325, 1, v359, v361, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) :|: v361 = 1 + v312
f_420(v312, v313, v323, v325, 1, v359, v361, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) -> f_421(v312, v313, v323, v325, 1, v359, v361, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) :|: TRUE
f_421(v312, v313, v323, v325, 1, v359, v361, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) -> f_422(v312, v313, v323, v325, 1, v359, v361, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) :|: 0 = 0
f_422(v312, v313, v323, v325, 1, v359, v361, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) -> f_423(v312, v313, v323, v325, 1, v359, v361, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) :|: 0 = 0
f_423(v312, v313, v323, v325, 1, v359, v361, v314, v315, v316, v317, v318, v319, v324, v326, v320, v321, v322, 3, 4) -> f_424(v361, v359, v314, v315, v316, v317, v318, v319, v323, v324, v325, v326, v320, v321, v322, v312, v313, 1, 3, 4) :|: 0 = 0
f_424(v361, v359, v314, v315, v316, v317, v318, v319, v323, v324, v325, v326, v320, v321, v322, v312, v313, 1, 3, 4) -> f_425(v361, v359, v314, v315, v316, v317, v318, v319, v323, v324, v325, v326, v320, v321, v322, 3, 1, 4) :|: TRUE
f_425(v361, v359, v314, v315, v316, v317, v318, v319, v323, v324, v325, v326, v320, v321, v322, 3, 1, 4) -> f_396(v361, v359, v314, v315, v316, v317, v318, v319, v320, v321, v322, 3, 1, 4) :|: TRUE
f_396(v312, v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, 3, 1, 4) -> f_397(v312, v313, v323, v314, v315, v316, v317, v318, v319, v324, v320, v321, v322, 3, 1, 4) :|: 1 <= v323 && v324 = 3 + v323 && 4 <= v324
Combined rules. Obtained 1 rulesP rules:
f_397(v312:0, v313:0, v323:0, v314:0, v315:0, v316:0, v317:0, v318:0, v319:0, v324:0, v320:0, v321:0, v322:0, 3, 1, 4) -> f_397(1 + v312:0, v313:0 + v312:0, v323:1, v314:0, v315:0, v316:0, v317:0, v318:0, v319:0, 3 + v323:1, v320:0, v321:0, v322:0, 3, 1, 4) :|: v325:0 > 0 && v313:0 < v312:0 && v323:1 > 0
Filtered unneeded arguments:
   f_397(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_397(x1, x2)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_397(v312:0, v313:0) -> f_397(1 + v312:0, v313:0 + v312:0) :|: v313:0 < v312:0

----------------------------------------

(8)
Obligation:
Rules:
f_397(v312:0, v313:0) -> f_397(1 + v312:0, v313:0 + v312:0) :|: v313:0 < v312:0

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

f_397(v312:0, v313:0) -> f_397(1 + v312:0, v313:0 + v312:0) :|: v313:0 < v312:0
has been transformed into
f_397(v312:0, v313:0) -> f_397(1 + v312:0, v313:0 + v312:0) :|: v313:0 = x5 + x4 && (v312:0 = 1 + x4 && v313:0 < v312:0) && x5 < x4.


f_397(v312:0, v313:0) -> f_397(1 + v312:0, v313:0 + v312:0) :|: v313:0 = x5 + x4 && (v312:0 = 1 + x4 && v313:0 < v312:0) && x5 < x4 and 
f_397(v312:0, v313:0) -> f_397(1 + v312:0, v313:0 + v312:0) :|: v313:0 = x5 + x4 && (v312:0 = 1 + x4 && v313:0 < v312:0) && x5 < x4
have been merged into the new rule
f_397(x14, x15) -> f_397(1 + (1 + x14), x15 + x14 + (1 + x14)) :|: x15 = x16 + x17 && (x14 = 1 + x17 && x15 < x14) && x16 < x17 && (x15 + x14 = x18 + x19 && (1 + x14 = 1 + x19 && x15 + x14 < 1 + x14) && x18 < x19)


----------------------------------------

(10)
Obligation:
Rules:
f_397(x20, x21) -> f_397(2 + x20, x21 + 2 * x20 + 1) :|: TRUE && x21 + -1 * x22 + -1 * x23 = 0 && x20 + -1 * x23 = 1 && x21 + -1 * x20 <= -1 && x22 + -1 * x23 <= -1 && x21 + x20 + -1 * x24 + -1 * x25 = 0 && x20 + -1 * x25 = 0 && x21 <= 0 && x24 + -1 * x25 <= -1

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_397(x20:0, x21:0) -> f_397(2 + x20:0, x21:0 + 2 * x20:0 + 1) :|: x21:0 < 1 && x24:0 + -1 * x25:0 <= -1 && x20:0 + -1 * x25:0 = 0 && x21:0 + x20:0 + -1 * x24:0 + -1 * x25:0 = 0 && x22:0 + -1 * x23:0 <= -1 && x21:0 + -1 * x20:0 <= -1 && x21:0 + -1 * x22:0 + -1 * x23:0 = 0 && x20:0 + -1 * x23:0 = 1

----------------------------------------

(13) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_397(x, x1)] = 1 - 2*x + x^2 - 2*x1

The following rules are decreasing:
f_397(x20:0, x21:0) -> f_397(2 + x20:0, x21:0 + 2 * x20:0 + 1) :|: x21:0 < 1 && x24:0 + -1 * x25:0 <= -1 && x20:0 + -1 * x25:0 = 0 && x21:0 + x20:0 + -1 * x24:0 + -1 * x25:0 = 0 && x22:0 + -1 * x23:0 <= -1 && x21:0 + -1 * x20:0 <= -1 && x21:0 + -1 * x22:0 + -1 * x23:0 = 0 && x20:0 + -1 * x23:0 = 1
The following rules are bounded:
f_397(x20:0, x21:0) -> f_397(2 + x20:0, x21:0 + 2 * x20:0 + 1) :|: x21:0 < 1 && x24:0 + -1 * x25:0 <= -1 && x20:0 + -1 * x25:0 = 0 && x21:0 + x20:0 + -1 * x24:0 + -1 * x25:0 = 0 && x22:0 + -1 * x23:0 <= -1 && x21:0 + -1 * x20:0 <= -1 && x21:0 + -1 * x22:0 + -1 * x23:0 = 0 && x20:0 + -1 * x23:0 = 1

----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
