NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/lwc0x.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 68 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 182 ms]
(4) LLVM Symbolic Execution Graph
(5) SEGraph to IRS [EQUIVALENT, 69 ms]
(6) IntTRS
(7) IRSNoOverapproximation [EQUIVALENT, 0 ms]
(8) IntTRS
(9) IRSToKoat [EQUIVALENT, 0 ms]
(10) Koat Problem
(11) LoAT [COMPLETE, 210 ms]
(12) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/lwc0x.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/lwc0x.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 (...)* @__VERIFIER_nondet_int()
		store %3, %2
		br %4
	4:
		%5 = load %2
		%6 = icmp sge %5 0
		br %6, %7, %10
	7:
		%8 = load %2
		%9 = icmp sle %8 10
		br %10
	10:
		%11 = phi [0, %4], [%9, %7]
		br %11, %12, %17
	12:
		%13 = load %2
		%14 = mul i32 2, %13
		%15 = add i32 %14, 1
		%16 = sdiv i32 %15, 2
		store %16, %2
		br %4
	17:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 55 rulesP rules:
f_70 -> f_71(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_71(v1, v2, 3, 1, 4) -> f_72(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_72(v1, v3, v2, v4, 3, 1, 4) -> f_73(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_73(v1, v3, v2, v4, 0, 3, 1, 4) -> f_74(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_74(v1, v3, v2, v4, 0, 3, 1, 4) -> f_75(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_75(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_76(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_76(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_77(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_77(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_78(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: 0 = 0
f_78(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_79(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: 0 <= v5
f_78(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_80(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: v5 < 0
f_79(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_81(v1, v3, v5, 1, v2, v4, 0, 3, 4) :|: 0 = 0
f_80(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_82(v1, v3, v5, 0, v2, v4, 3, 1, 4) :|: 0 = 0
f_81(v1, v3, v5, 1, v2, v4, 0, 3, 4) -> f_83(v1, v3, v5, 1, v2, v4, 0, 3, 4) :|: TRUE
f_82(v1, v3, v5, 0, v2, v4, 3, 1, 4) -> f_84(v1, v3, v5, 0, v2, v4, 3, 1, 4) :|: 0 = 0
f_83(v1, v3, v5, 1, v2, v4, 0, 3, 4) -> f_85(v1, v3, v5, 1, v2, v4, 0, 3, 4) :|: 0 = 0
f_84(v1, v3, v5, 0, v2, v4, 3, 1, 4) -> f_86(v1, v3, v5, 0, v2, v4, 3, 1, 4) :|: TRUE
f_85(v1, v3, v5, 1, v2, v4, 0, 3, 4) -> f_87(v1, v3, v5, 1, v2, v4, 0, 3, 4, 10) :|: v5 <= 10
f_85(v1, v3, v5, 1, v2, v4, 0, 3, 4) -> f_88(v1, v3, v5, 1, v2, v4, 0, 3, 4, 11) :|: 10 < v5
f_87(v1, v3, v5, 1, v2, v4, 0, 3, 4, 10) -> f_89(v1, v3, v5, 1, v2, v4, 0, 3, 4, 10) :|: 0 = 0
f_88(v1, v3, v5, 1, v2, v4, 0, 3, 4, 11) -> f_90(v1, v3, v5, 1, 0, v2, v4, 3, 4, 11) :|: 0 = 0
f_89(v1, v3, v5, 1, v2, v4, 0, 3, 4, 10) -> f_91(v1, v3, v5, 1, v2, v4, 0, 3, 4, 10) :|: 0 = 0
f_90(v1, v3, v5, 1, 0, v2, v4, 3, 4, 11) -> f_92(v1, v3, v5, 1, 0, v2, v4, 3, 4, 11) :|: 0 = 0
f_91(v1, v3, v5, 1, v2, v4, 0, 3, 4, 10) -> f_93(v1, v3, v5, 1, v2, v4, 0, 3, 4, 10) :|: TRUE
f_92(v1, v3, v5, 1, 0, v2, v4, 3, 4, 11) -> f_94(v1, v3, v5, 1, 0, v2, v4, 3, 4, 11) :|: TRUE
f_93(v1, v3, v5, 1, v2, v4, 0, 3, 4, 10) -> f_95(v1, v3, v5, 1, v2, v4, 0, 3, 4, 10) :|: 0 = 0
f_95(v1, v3, v5, 1, v2, v4, 0, 3, 4, 10) -> f_96(v1, v3, v5, 1, v9, v2, v4, 0, 3, 2, 4, 10, 20) :|: v9 = 2 * v5 && 0 <= v9 && v9 <= 20
f_96(v1, v3, v5, 1, v9, v2, v4, 0, 3, 2, 4, 10, 20) -> f_97(v1, v3, v5, 1, v9, v10, v2, v4, 0, 3, 2, 4, 10, 20, 21) :|: v10 = 1 + v9 && 1 <= v10 && v10 <= 21
f_97(v1, v3, v5, 1, v9, v10, v2, v4, 0, 3, 2, 4, 10, 20, 21) -> f_98(v1, v3, v5, 1, v9, v10, v11, v2, v4, 0, 3, 2, 4, 10, 20, 21) :|: v11 = v10 / 2
f_98(v1, v3, v5, 1, v9, v10, v11, v2, v4, 0, 3, 2, 4, 10, 20, 21) -> f_99(v1, v3, v5, 1, v9, v10, v11, v2, v4, 0, 3, 2, 4, 10, 20, 21) :|: TRUE
f_99(v1, v3, v5, 1, v9, v10, v11, v2, v4, 0, 3, 2, 4, 10, 20, 21) -> f_100(v1, v3, v5, 1, v9, v10, v11, v2, v4, 0, 3, 2, 4, 10, 20, 21) :|: TRUE
f_100(v1, v3, v5, 1, v9, v10, v11, v2, v4, 0, 3, 2, 4, 10, 20, 21) -> f_124(v1, v3, v5, v5, 1, v9, v10, v11, v2, v4, 0, 3, 2, 10, 20, 21, 4) :|: TRUE
f_124(v66, v67, v68, v69, 1, v71, v72, v73, v74, v75, 0, 3, 2, 10, 20, 21, 4) -> f_125(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) :|: 0 = 0
f_125(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) -> f_126(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) :|: 0 <= v73
f_125(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) -> f_127(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) :|: v73 < 0
f_126(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) -> f_128(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) :|: 0 = 0
f_127(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) -> f_129(v66, v67, v68, v73, 0, v69, 1, v71, v72, v74, v75, 3, 2, 10, 20, 21, 4) :|: 0 = 0
f_128(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) -> f_130(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) :|: TRUE
f_129(v66, v67, v68, v73, 0, v69, 1, v71, v72, v74, v75, 3, 2, 10, 20, 21, 4) -> f_131(v66, v67, v68, v73, 0, v69, 1, v71, v72, v74, v75, 3, 2, 10, 20, 21, 4) :|: 0 = 0
f_130(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) -> f_132(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) :|: 0 = 0
f_131(v66, v67, v68, v73, 0, v69, 1, v71, v72, v74, v75, 3, 2, 10, 20, 21, 4) -> f_133(v66, v67, v68, v73, 0, v69, 1, v71, v72, v74, v75, 3, 2, 10, 20, 21, 4) :|: TRUE
f_132(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) -> f_134(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) :|: v73 <= 10
f_132(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) -> f_135(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 11, 4) :|: 10 < v73
f_134(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) -> f_136(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) :|: 0 = 0
f_135(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 11, 4) -> f_137(v66, v67, v68, v73, 1, 0, v69, v71, v72, v74, v75, 3, 2, 10, 20, 21, 11, 4) :|: 0 = 0
f_136(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) -> f_138(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) :|: 0 = 0
f_137(v66, v67, v68, v73, 1, 0, v69, v71, v72, v74, v75, 3, 2, 10, 20, 21, 11, 4) -> f_139(v66, v67, v68, v73, 1, 0, v69, v71, v72, v74, v75, 3, 2, 10, 20, 21, 11, 4) :|: 0 = 0
f_138(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) -> f_140(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) :|: TRUE
f_139(v66, v67, v68, v73, 1, 0, v69, v71, v72, v74, v75, 3, 2, 10, 20, 21, 11, 4) -> f_141(v66, v67, v68, v73, 1, 0, v69, v71, v72, v74, v75, 3, 2, 10, 20, 21, 11, 4) :|: TRUE
f_140(v66, v67, v68, v73, 1, v69, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) -> f_142(v66, v67, v68, v73, 1, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) :|: 0 = 0
f_142(v66, v67, v68, v73, 1, v71, v72, v74, v75, 0, 3, 2, 10, 20, 21, 4) -> f_143(v66, v67, v68, v73, 1, v109, v72, v74, v75, 0, 3, 2, 10, 21, 4, 20) :|: v109 = 2 * v73 && 0 <= v109 && v109 <= 20
f_143(v66, v67, v68, v73, 1, v109, v72, v74, v75, 0, 3, 2, 10, 21, 4, 20) -> f_144(v66, v67, v68, v73, 1, v109, v110, v74, v75, 0, 3, 2, 10, 4, 20, 21) :|: v110 = 1 + v109 && 1 <= v110 && v110 <= 21
f_144(v66, v67, v68, v73, 1, v109, v110, v74, v75, 0, 3, 2, 10, 4, 20, 21) -> f_145(v66, v67, v68, v73, 1, v109, v110, v111, v74, v75, 0, 3, 2, 10, 4, 20, 21) :|: v111 = v110 / 2
f_145(v66, v67, v68, v73, 1, v109, v110, v111, v74, v75, 0, 3, 2, 10, 4, 20, 21) -> f_146(v66, v67, v68, v73, 1, v109, v110, v111, v74, v75, 0, 3, 2, 10, 4, 20, 21) :|: TRUE
f_146(v66, v67, v68, v73, 1, v109, v110, v111, v74, v75, 0, 3, 2, 10, 4, 20, 21) -> f_147(v66, v67, v68, v73, 1, v109, v110, v111, v74, v75, 0, 3, 2, 10, 4, 20, 21) :|: TRUE
f_147(v66, v67, v68, v73, 1, v109, v110, v111, v74, v75, 0, 3, 2, 10, 4, 20, 21) -> f_124(v66, v67, v68, v73, 1, v109, v110, v111, v74, v75, 0, 3, 2, 10, 20, 21, 4) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_70 -> f_94(v1:0, v3:0, v5:0, 1, 0, 3 + v1:0, 3 + v3:0, 3, 4, 11) :|: v5:0 > 10 && v3:0 > 0 && v1:0 > 0
f_70 -> f_86(v1:0, v3:0, v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 < 0
f_125(v66:0, v67:0, v68:0, v73:0, 1, v69:0, v71:0, v72:0, v74:0, v75:0, 0, 3, 2, 10, 20, 21, 4) -> f_125(v66:0, v67:0, v68:0, v111:0, 1, v73:0, 2 * v73:0, 1 + 2 * v73:0, v74:0, v75:0, 0, 3, 2, 10, 20, 21, 4) :|: v73:0 > -1 && v73:0 < 11 && 2 * v73:0 > -1 && 21 > 2 * v73:0 && v111:0 = (1 + 2 * v73:0) / 2
f_70 -> f_125(v1:0, v3:0, v5:0, v11:0, 1, v5:0, 2 * v5:0, 1 + 2 * v5:0, 3 + v1:0, 3 + v3:0, 0, 3, 2, 10, 20, 21, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > -1 && v5:0 < 11 && 2 * v5:0 > -1 && 21 > 2 * v5:0 && v11:0 = (1 + 2 * v5:0) / 2
f_125(v66:0, v67:0, v68:0, v73:0, 1, v69:0, v71:0, v72:0, v74:0, v75:0, 0, 3, 2, 10, 20, 21, 4) -> f_141(v66:0, v67:0, v68:0, v73:0, 1, 0, v69:0, v71:0, v72:0, v74:0, v75:0, 3, 2, 10, 20, 21, 11, 4) :|: v73:0 > 10
f_125(v66:0, v67:0, v68:0, v73:0, 1, v69:0, v71:0, v72:0, v74:0, v75:0, 0, 3, 2, 10, 20, 21, 4) -> f_133(v66:0, v67:0, v68:0, v73:0, 0, v69:0, 1, v71:0, v72:0, v74:0, v75:0, 3, 2, 10, 20, 21, 4) :|: v73:0 < 0
Filtered unneeded arguments:
   f_125(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_125(x3, x4, x6, x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 8 rules.P rules:
f_70 -> f_94(v1:0, v3:0, v5:0, 1, 0, 3 + v1:0, 3 + v3:0, 3, 4, 11) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 10
f_70 -> f_86(v1:0, v3:0, v5:0, 0, 3 + v1:0, 3 + v3:0, 3, 1, 4) :|: v1:0 > 0 && v5:0 < 0 && v3:0 > 0
f_125(v68:0, v73:0, v69:0, v71:0, v72:0) -> f_125'(v68:0, v73:0, v69:0, v71:0, v72:0) :|: v73:0 < 11 && v73:0 > -1 && 21 > 2 * v73:0 && 2 * v73:0 > -1
f_125'(v68:0, v73:0, v69:0, v71:0, v72:0) -> f_125(v68:0, div, v73:0, 2 * v73:0, 1 + 2 * v73:0) :|: 2 * v73:0 > -1 && v73:0 < 11 && v73:0 > -1 && 21 > 2 * v73:0 && 2 > 1 + 2 * v73:0 - 2 * div && 1 + 2 * v73:0 - 2 * div >= 0
f_70 -> f_70' :|: TRUE
f_70' -> f_125(v5:0, div, v5:0, 2 * v5:0, 1 + 2 * v5:0) :|: 2 * v5:0 > -1 && v5:0 < 11 && v5:0 > -1 && 21 > 2 * v5:0 && 2 > 1 + 2 * v5:0 - 2 * div && 1 + 2 * v5:0 - 2 * div >= 0
f_125(v68:0, v73:0, v69:0, v71:0, v72:0) -> f_141(v66:0, v67:0, v68:0, v73:0, 1, 0, v69:0, v71:0, v72:0, v74:0, v75:0, 3, 2, 10, 20, 21, 11, 4) :|: v73:0 > 10
f_125(v68:0, v73:0, v69:0, v71:0, v72:0) -> f_133(v66:0, v67:0, v68:0, v73:0, 0, v69:0, 1, v71:0, v72:0, v74:0, v75:0, 3, 2, 10, 20, 21, 4) :|: v73:0 < 0

----------------------------------------

(6)
Obligation:
Rules:
f_70 -> f_94(v1:0, v3:0, v5:0, 1, 0, 3 + v1:0, 3 + v3:0, 3, 4, 11) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 10
f_70 -> f_86(x, x1, x2, 0, 3 + x, 3 + x1, 3, 1, 4) :|: x > 0 && x2 < 0 && x1 > 0
f_125(v68:0, v73:0, v69:0, v71:0, v72:0) -> f_125'(v68:0, v73:0, v69:0, v71:0, v72:0) :|: v73:0 < 11 && v73:0 > -1 && 21 > 2 * v73:0 && 2 * v73:0 > -1
f_125'(x3, x4, x5, x6, x7) -> f_125(x3, x8, x4, 2 * x4, 1 + 2 * x4) :|: 2 * x4 > -1 && x4 < 11 && x4 > -1 && 21 > 2 * x4 && 2 > 1 + 2 * x4 - 2 * x8 && 1 + 2 * x4 - 2 * x8 >= 0
f_70 -> f_70' :|: TRUE
f_70' -> f_125(x9, x10, x9, 2 * x9, 1 + 2 * x9) :|: 2 * x9 > -1 && x9 < 11 && x9 > -1 && 21 > 2 * x9 && 2 > 1 + 2 * x9 - 2 * x10 && 1 + 2 * x9 - 2 * x10 >= 0
f_125(x11, x12, x13, x14, x15) -> f_141(x16, x17, x11, x12, 1, 0, x13, x14, x15, x18, x19, 3, 2, 10, 20, 21, 11, 4) :|: x12 > 10
f_125(x20, x21, x22, x23, x24) -> f_133(x25, x26, x20, x21, 0, x22, 1, x23, x24, x27, x28, 3, 2, 10, 20, 21, 4) :|: x21 < 0
Start term: f_70

----------------------------------------

(7) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination can continue
----------------------------------------

(8)
Obligation:
Rules:
f_70 -> f_94(v1:0, v3:0, v5:0, 1, 0, 3 + v1:0, 3 + v3:0, 3, 4, 11) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 10
f_70 -> f_86(x, x1, x2, 0, 3 + x, 3 + x1, 3, 1, 4) :|: x > 0 && x2 < 0 && x1 > 0
f_125(v68:0, v73:0, v69:0, v71:0, v72:0) -> f_125'(v68:0, v73:0, v69:0, v71:0, v72:0) :|: v73:0 < 11 && v73:0 > -1 && 21 > 2 * v73:0 && 2 * v73:0 > -1
f_125'(x3, x4, x5, x6, x7) -> f_125(x3, x8, x4, 2 * x4, 1 + 2 * x4) :|: 2 * x4 > -1 && x4 < 11 && x4 > -1 && 21 > 2 * x4 && 2 > 1 + 2 * x4 - 2 * x8 && 1 + 2 * x4 - 2 * x8 >= 0
f_70 -> f_70' :|: TRUE
f_70' -> f_125(x9, x10, x9, 2 * x9, 1 + 2 * x9) :|: 2 * x9 > -1 && x9 < 11 && x9 > -1 && 21 > 2 * x9 && 2 > 1 + 2 * x9 - 2 * x10 && 1 + 2 * x9 - 2 * x10 >= 0
f_125(x11, x12, x13, x14, x15) -> f_141(x16, x17, x11, x12, 1, 0, x13, x14, x15, x18, x19, 3, 2, 10, 20, 21, 11, 4) :|: x12 > 10
f_125(x20, x21, x22, x23, x24) -> f_133(x25, x26, x20, x21, 0, x22, 1, x23, x24, x27, x28, 3, 2, 10, 20, 21, 4) :|: x21 < 0
Start term: f_70

----------------------------------------

(9) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(10)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_70))
(VAR x160 x162 x161 x46 x164 x47 x163 x48 x166 x49 x165 x42 x168 x43 x167 x44 x45 x169 x40 x41 x39 x151 x150 x35 x153 x36 x152 x37 x155 x38 x154 x31 x157 x32 x156 x33 x159 x34 x158 x30 x70 x140 x68 x142 x69 x141 x144 x143 x64 x146 x65 x145 x66 x148 x67 x147 x60 x61 x149 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x131 x58 x130 x59 x133 x132 x53 x135 x54 x134 x55 x137 x56 x136 x139 x50 x138 x51 x52 x90 x91 x92 x86 x87 x88 x89 x82 x83 x84 x85 x80 x81 x193 x192 x195 x194 x79 x196 x75 x76 x'' x77 x78 x71 x72 x73 x74 k14 k15 k16 k17 k10 k11 k12 k13 x191 x190 x182 x181 x184 x183 x186 x185 x188 x187 x189 x180 x171 x170 x173 x172 x175 x174 x177 x176 x97 x179 x98 x178 x99 x93 x94 x95 x96 k36 k32 k33 k34 k35 k30 k31 k29 k25 k26 k27 k28 k21 k22 k23 k24 k20 k18 k19 x120 x122 x121 x124 x123 x126 x125 x x128 x127 x129 x111 x110 x113 x112 x115 x114 x117 x116 x119 x118 x109 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x7 x27 x20 x102 x21 x101 x22 x104 x23 x103 x106 x1 x105 x108 x107 x' x17 x18 x19 x13 x14 x15 x16 x10 x11 x12)
(RULES
  f_70(x79, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96) -> f_86(k21, k22, k6, 0, 3 + k21, 3 + k22, 3, 1, 4, x97, x98, x99, x100, x101, x102, x103, x104, x105) :|: k21 > 0 && k6 < 0 && k22 > 0
  f_125(k17, k18, k19, k20, k10, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77) -> f_133(k12, k14, k17, k18, 0, k19, 1, k20, k10, k16, k3, 3, 2, 10, 20, 21, 4, x78) :|: k18 < 0
  f_70(x132, x133, x134, x135, x136, x137, x138, x139, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149) -> f_94(k26, k4, k7, 1, 0, 3 + k26, 3 + k4, 3, 4, 11, x150, x151, x152, x153, x154, x155, x156, x157) :|: k4 > 0 && k26 > 0 && k7 > 10
  f_125(k35, k36, k30, k31, k32, x184, x185, x186, x187, x188, x189, x190, x191, x192, x193, x194, x195, x196) -> f_141(k33, k27, k35, k36, 1, 0, k30, k31, k32, k28, k29, 3, 2, 10, 20, 21, 11, 4) :|: k36 > 10
  f_125'(k8, k2, k5, k13, k15, x106, x107, x108, x109, x110, x111, x112, x113, x114, x115, x116, x117, x118) -> f_125(k8, k9, k2, 2 * k2, 1 + 2 * k2, x119, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x130, x131) :|: 2 * k2 > -1 && k2 < 11 && k2 > -1 && 21 > 2 * k2 && 2 > 1 + 2 * k2 - 2 * k9 && 1 + 2 * k2 - 2 * k9 >= 0
  f_70(x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46) -> f_70'(x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64) :|: 0 = 0
  f_70'(x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_125(k11, k34, k11, 2 * k11, 1 + 2 * k11, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) :|: 2 * k11 > -1 && k11 < 11 && k11 > -1 && 21 > 2 * k11 && 2 > 1 + 2 * k11 - 2 * k34 && 1 + 2 * k11 - 2 * k34 >= 0
  f_125(k0, k23, k1, k25, k24, x158, x159, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x170) -> f_125'(k0, k23, k1, k25, k24, x171, x172, x173, x174, x175, x176, x177, x178, x179, x180, x181, x182, x183) :|: k23 < 11 && k23 > -1 && 21 > 2 * k23 && 2 * k23 > -1
)

----------------------------------------

(11) LoAT (COMPLETE)
LoAT was called with the following command:

/aprove/bin/loat --plain --nonterm --proof-level 3 /tmp/aprove.InputModules.Programs.loat3410310376552283713.koat 

LoAT's output was:


### Pre-processing the ITS problem ###

Initial linear ITS problem
   Start location: f_70
      0: f_70 -> f_86 : k0'=free_9, k1'=free_2, k10'=free_10, k11'=0, k12'=3+free_9, k13'=3+free_2, k14'=3, k15'=1, k16'=4, k17'=free_6, k18'=free_11, k19'=free_3, k2'=free_8, k20'=free_1, k21'=free_5, k22'=free_7, k23'=free, k24'=free_4, [ free_9>0 && free_10<0 && free_2>0 ], cost: 1
      2: f_70 -> f_94 : k0'=free_23, k1'=free_21, k10'=free_19, k11'=1, k12'=0, k13'=3+free_23, k14'=3+free_21, k15'=3, k16'=4, k17'=11, k18'=free_26, k19'=free_18, k2'=free_22, k20'=free_25, k21'=free_17, k22'=free_20, k23'=free_24, k24'=free_27, [ free_21>0 && free_23>0 && free_19>10 ], cost: 1
      5: f_70 -> f_70' : x'=free_57, x_'=free_63, x__'=free_51, x1'=free_62, x10'=free_55, x11'=free_47, x12'=free_53, x13'=free_58, x14'=free_46, x15'=free_52, x2'=free_50, x3'=free_56, x4'=free_60, x5'=free_48, x6'=free_54, x7'=free_59, x8'=free_61, x9'=free_49, [ 0==0 ], cost: 1
      1: f_125 -> f_133 : k0'=free_15, k1'=free_13, k10'=k17, k11'=k18, k12'=0, k13'=k19, k14'=1, k15'=k20, k16'=k10, k17'=free_12, k18'=free_14, k19'=3, k2'=2, k20'=10, k21'=20, k22'=21, k23'=4, k24'=free_16, [ k18<0 ], cost: 1
      3: f_125 -> f_141 : k0'=free_31, k1'=free_30, k10'=k17, k11'=k18, k12'=1, k13'=0, k14'=k19, k15'=k20, k16'=k10, k17'=free_28, k18'=free_29, k19'=3, k2'=2, k20'=10, k21'=20, k22'=21, k23'=11, k24'=4, [ k18>10 ], cost: 1
      7: f_125 -> f_125' : k13'=k20, k15'=k10, k2'=k18, k5'=k19, k8'=k17, x106'=free_90, x107'=free_82, x108'=free_85, x109'=free_89, x110'=free_81, x111'=free_80, x112'=free_84, x113'=free_88, x114'=free_79, x115'=free_87, x116'=free_91, x117'=free_83, x118'=free_86, [ k18<11 && k18>-1 && 21>2*k18 && 2*k18>-1 ], cost: 1
      4: f_125' -> f_125 : k10'=1+2*k2, k17'=k8, k18'=free_44, k19'=k2, k20'=2*k2, x65'=free_40, x66'=free_36, x67'=free_39, x68'=free_45, x69'=free_35, x70'=free_38, x71'=free_43, x72'=free_34, x73'=free_37, x74'=free_42, x75'=free_33, x76'=free_41, x77'=free_32, [ 2*k2>-1 && k2<11 && k2>-1 && 21>2*k2 && 2>1-2*free_44+2*k2 && 1-2*free_44+2*k2>=0 ], cost: 1
      6: f_70' -> f_125 : k10'=1+2*free_72, k17'=free_72, k18'=free_67, k19'=free_72, k20'=2*free_72, x65'=free_78, x66'=free_68, x67'=free_69, x68'=free_75, x69'=free_73, x70'=free_77, x71'=free_65, x72'=free_71, x73'=free_76, x74'=free_64, x75'=free_70, x76'=free_74, x77'=free_66, [ 2*free_72>-1 && free_72<11 && free_72>-1 && 21>2*free_72 && 2>1-2*free_67+2*free_72 && 1-2*free_67+2*free_72>=0 ], cost: 1

Checking for constant complexity:
   The following rule is satisfiable with cost >= 1, yielding constant complexity:
      0: f_70 -> f_86 : k0'=free_9, k1'=free_2, k10'=free_10, k11'=0, k12'=3+free_9, k13'=3+free_2, k14'=3, k15'=1, k16'=4, k17'=free_6, k18'=free_11, k19'=free_3, k2'=free_8, k20'=free_1, k21'=free_5, k22'=free_7, k23'=free, k24'=free_4, [ free_9>0 && free_10<0 && free_2>0 ], cost: 1

Removed unreachable and leaf rules:
   Start location: f_70
      5: f_70 -> f_70' : x'=free_57, x_'=free_63, x__'=free_51, x1'=free_62, x10'=free_55, x11'=free_47, x12'=free_53, x13'=free_58, x14'=free_46, x15'=free_52, x2'=free_50, x3'=free_56, x4'=free_60, x5'=free_48, x6'=free_54, x7'=free_59, x8'=free_61, x9'=free_49, [ 0==0 ], cost: 1
      7: f_125 -> f_125' : k13'=k20, k15'=k10, k2'=k18, k5'=k19, k8'=k17, x106'=free_90, x107'=free_82, x108'=free_85, x109'=free_89, x110'=free_81, x111'=free_80, x112'=free_84, x113'=free_88, x114'=free_79, x115'=free_87, x116'=free_91, x117'=free_83, x118'=free_86, [ k18<11 && k18>-1 && 21>2*k18 && 2*k18>-1 ], cost: 1
      4: f_125' -> f_125 : k10'=1+2*k2, k17'=k8, k18'=free_44, k19'=k2, k20'=2*k2, x65'=free_40, x66'=free_36, x67'=free_39, x68'=free_45, x69'=free_35, x70'=free_38, x71'=free_43, x72'=free_34, x73'=free_37, x74'=free_42, x75'=free_33, x76'=free_41, x77'=free_32, [ 2*k2>-1 && k2<11 && k2>-1 && 21>2*k2 && 2>1-2*free_44+2*k2 && 1-2*free_44+2*k2>=0 ], cost: 1
      6: f_70' -> f_125 : k10'=1+2*free_72, k17'=free_72, k18'=free_67, k19'=free_72, k20'=2*free_72, x65'=free_78, x66'=free_68, x67'=free_69, x68'=free_75, x69'=free_73, x70'=free_77, x71'=free_65, x72'=free_71, x73'=free_76, x74'=free_64, x75'=free_70, x76'=free_74, x77'=free_66, [ 2*free_72>-1 && free_72<11 && free_72>-1 && 21>2*free_72 && 2>1-2*free_67+2*free_72 && 1-2*free_67+2*free_72>=0 ], cost: 1

Simplified all rules, resulting in:
   Start location: f_70
      5: f_70 -> f_70' : x'=free_57, x_'=free_63, x__'=free_51, x1'=free_62, x10'=free_55, x11'=free_47, x12'=free_53, x13'=free_58, x14'=free_46, x15'=free_52, x2'=free_50, x3'=free_56, x4'=free_60, x5'=free_48, x6'=free_54, x7'=free_59, x8'=free_61, x9'=free_49, [], cost: 1
      7: f_125 -> f_125' : k13'=k20, k15'=k10, k2'=k18, k5'=k19, k8'=k17, x106'=free_90, x107'=free_82, x108'=free_85, x109'=free_89, x110'=free_81, x111'=free_80, x112'=free_84, x113'=free_88, x114'=free_79, x115'=free_87, x116'=free_91, x117'=free_83, x118'=free_86, [ k18<11 && k18>-1 ], cost: 1
      4: f_125' -> f_125 : k10'=1+2*k2, k17'=k8, k18'=free_44, k19'=k2, k20'=2*k2, x65'=free_40, x66'=free_36, x67'=free_39, x68'=free_45, x69'=free_35, x70'=free_38, x71'=free_43, x72'=free_34, x73'=free_37, x74'=free_42, x75'=free_33, x76'=free_41, x77'=free_32, [ 2*k2>-1 && k2<11 && 2>1-2*free_44+2*k2 && 1-2*free_44+2*k2>=0 ], cost: 1
      6: f_70' -> f_125 : k10'=1+2*free_72, k17'=free_72, k18'=free_67, k19'=free_72, k20'=2*free_72, x65'=free_78, x66'=free_68, x67'=free_69, x68'=free_75, x69'=free_73, x70'=free_77, x71'=free_65, x72'=free_71, x73'=free_76, x74'=free_64, x75'=free_70, x76'=free_74, x77'=free_66, [ 2*free_72>-1 && free_72<11 && 2>1-2*free_67+2*free_72 && 1-2*free_67+2*free_72>=0 ], cost: 1

### Simplification by acceleration and chaining ###

Eliminating location f_70' by chaining:
   Chained rules 5 and 6 to new rule 8.

Eliminating location f_125' by chaining:
   Chained rules 7 and 4 to new rule 9.

Eliminated locations (on linear paths):
   Start location: f_70
      8: f_70 -> f_125 : k10'=1+2*free_72, k17'=free_72, k18'=free_67, k19'=free_72, k20'=2*free_72, x'=free_57, x_'=free_63, x__'=free_51, x1'=free_62, x10'=free_55, x11'=free_47, x12'=free_53, x13'=free_58, x14'=free_46, x15'=free_52, x2'=free_50, x3'=free_56, x4'=free_60, x5'=free_48, x6'=free_54, x65'=free_78, x66'=free_68, x67'=free_69, x68'=free_75, x69'=free_73, x7'=free_59, x70'=free_77, x71'=free_65, x72'=free_71, x73'=free_76, x74'=free_64, x75'=free_70, x76'=free_74, x77'=free_66, x8'=free_61, x9'=free_49, [ 2*free_72>-1 && free_72<11 && 2>1-2*free_67+2*free_72 && 1-2*free_67+2*free_72>=0 ], cost: 2
      9: f_125 -> f_125 : k10'=1+2*k18, k13'=k20, k15'=k10, k17'=k17, k18'=free_44, k19'=k18, k2'=k18, k20'=2*k18, k5'=k19, k8'=k17, x106'=free_90, x107'=free_82, x108'=free_85, x109'=free_89, x110'=free_81, x111'=free_80, x112'=free_84, x113'=free_88, x114'=free_79, x115'=free_87, x116'=free_91, x117'=free_83, x118'=free_86, x65'=free_40, x66'=free_36, x67'=free_39, x68'=free_45, x69'=free_35, x70'=free_38, x71'=free_43, x72'=free_34, x73'=free_37, x74'=free_42, x75'=free_33, x76'=free_41, x77'=free_32, [ k18<11 && k18>-1 && 2*k18>-1 && 2>1-2*free_44+2*k18 && 1-2*free_44+2*k18>=0 ], cost: 2

Accelerating simple loops of location 1.
   Simplified some of the simple loops (and removed duplicate rules).
   Accelerating the following rules:
      9: f_125 -> f_125 : k10'=1+2*k18, k13'=k20, k15'=k10, k18'=free_44, k19'=k18, k2'=k18, k20'=2*k18, k5'=k19, k8'=k17, x106'=free_90, x107'=free_82, x108'=free_85, x109'=free_89, x110'=free_81, x111'=free_80, x112'=free_84, x113'=free_88, x114'=free_79, x115'=free_87, x116'=free_91, x117'=free_83, x118'=free_86, x65'=free_40, x66'=free_36, x67'=free_39, x68'=free_45, x69'=free_35, x70'=free_38, x71'=free_43, x72'=free_34, x73'=free_37, x74'=free_42, x75'=free_33, x76'=free_41, x77'=free_32, [ k18<11 && k18>-1 && 2*k18>-1 && 2>1-2*free_44+2*k18 && 1-2*free_44+2*k18>=0 ], cost: 2

   Accelerated rule 9 with non-termination, yielding the new rule 10.
   Removing the simple loops: 9.

Accelerated all simple loops using metering functions (where possible):
   Start location: f_70
      8: f_70 -> f_125 : k10'=1+2*free_72, k17'=free_72, k18'=free_67, k19'=free_72, k20'=2*free_72, x'=free_57, x_'=free_63, x__'=free_51, x1'=free_62, x10'=free_55, x11'=free_47, x12'=free_53, x13'=free_58, x14'=free_46, x15'=free_52, x2'=free_50, x3'=free_56, x4'=free_60, x5'=free_48, x6'=free_54, x65'=free_78, x66'=free_68, x67'=free_69, x68'=free_75, x69'=free_73, x7'=free_59, x70'=free_77, x71'=free_65, x72'=free_71, x73'=free_76, x74'=free_64, x75'=free_70, x76'=free_74, x77'=free_66, x8'=free_61, x9'=free_49, [ 2*free_72>-1 && free_72<11 && 2>1-2*free_67+2*free_72 && 1-2*free_67+2*free_72>=0 ], cost: 2
     10: f_125 -> [8] : [ k18<11 && k18>-1 && 2*k18>-1 && 2>1-2*free_44+2*k18 && 1-2*free_44+2*k18>=0 ], cost: NONTERM

Chaining 1 accelerated rules with incoming rules:
   Chained incoming rule 8 with accelerated rule 10 to new rule 11.
   Removing accelerated rule 10.

Chained accelerated rules (with incoming rules):
   Start location: f_70
      8: f_70 -> f_125 : k10'=1+2*free_72, k17'=free_72, k18'=free_67, k19'=free_72, k20'=2*free_72, x'=free_57, x_'=free_63, x__'=free_51, x1'=free_62, x10'=free_55, x11'=free_47, x12'=free_53, x13'=free_58, x14'=free_46, x15'=free_52, x2'=free_50, x3'=free_56, x4'=free_60, x5'=free_48, x6'=free_54, x65'=free_78, x66'=free_68, x67'=free_69, x68'=free_75, x69'=free_73, x7'=free_59, x70'=free_77, x71'=free_65, x72'=free_71, x73'=free_76, x74'=free_64, x75'=free_70, x76'=free_74, x77'=free_66, x8'=free_61, x9'=free_49, [ 2*free_72>-1 && free_72<11 && 2>1-2*free_67+2*free_72 && 1-2*free_67+2*free_72>=0 ], cost: 2
     11: f_70 -> [8] : [ 2*free_72>-1 && free_72<11 && 2>1-2*free_67+2*free_72 && 1-2*free_67+2*free_72>=0 && free_67<11 && free_67>-1 && 2*free_67>-1 && 2>1-2*free_44+2*free_67 && 1-2*free_44+2*free_67>=0 ], cost: NONTERM

Removed unreachable locations (and leaf rules with constant cost):
   Start location: f_70
     11: f_70 -> [8] : [ 2*free_72>-1 && free_72<11 && 2>1-2*free_67+2*free_72 && 1-2*free_67+2*free_72>=0 && free_67<11 && free_67>-1 && 2*free_67>-1 && 2>1-2*free_44+2*free_67 && 1-2*free_44+2*free_67>=0 ], cost: NONTERM

### Computing asymptotic complexity ###

Fully simplified ITS problem
   Start location: f_70
     11: f_70 -> [8] : [ 2*free_72>-1 && free_72<11 && 2>1-2*free_67+2*free_72 && 1-2*free_67+2*free_72>=0 && free_67<11 && free_67>-1 && 2*free_67>-1 && 2>1-2*free_44+2*free_67 && 1-2*free_44+2*free_67>=0 ], cost: NONTERM

Computing asymptotic complexity for rule 11
   Guard is satisfiable, yielding nontermination
   Resulting cost NONTERM has complexity: Nonterm

Found new complexity Nonterm.

Obtained the following overall complexity (w.r.t. the length of the input n):
   Complexity:  Nonterm
   Cpx degree:  Nonterm
   Solved cost: NONTERM
   Rule cost:   NONTERM
   Rule guard:  [ 2*free_72>-1 && free_72<11 && 2>1-2*free_67+2*free_72 && 1-2*free_67+2*free_72>=0 && 2>1-2*free_44+2*free_67 && 1-2*free_44+2*free_67>=0 ]

NO


The final guard is:
(*(2, free_72) > (-1));(free_72 < 11);(2 > +(-(1, *(2, free_67)), *(2, free_72)));(+(-(1, *(2, free_67)), *(2, free_72)) >= 0);(2 > +(-(1, *(2, free_44)), *(2, free_67)));(+(-(1, *(2, free_44)), *(2, free_67)) >= 0);

Z3 found a model for the final guard:
{free_44=2, free_67=2, free_72=2}

Try to generate a witness via retracing LoAT's simplifications:
  AssertionError: null
No witness generated
----------------------------------------

(12)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
Truth value repropagation in proof tree changed value to NO
