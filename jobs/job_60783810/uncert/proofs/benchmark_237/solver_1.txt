YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/nRgPQ.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 46 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3013 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 62 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 56 ms]
        (16) IntTRS
        (17) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (18) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/nRgPQ.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/nRgPQ.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.list --> BasicStructureType(elementType: i32, elementType: *struct.list)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "init_list" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 18
	0:
		%2 = alloca i32, align 4
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%5 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store null, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%6 = load %3
		store %6, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %7
	7:
		%8 = load %5
		%9 = load %2
		%10 = icmp slt %8 %9
		br %10, %11, %24
	11:
		%12 = call noalias *i8 @malloc(i64 16)
		%13 = bitcast *i8 %12 to *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		store %13, %3
		%14 = load %5
		%15 = load %3
		%16 = getelementptr %15, 0, 0
		store %14, %16
		%17 = load %4
		%18 = load %3
		%19 = getelementptr %18, 0, 1
		store %17, %19
		%20 = load %3
		store %20, %4
		br %21
	21:
		%22 = load %5
		%23 = add i32 %22, 1
		store %23, %5
		br %7
	24:
		%25 = load %3
		ret %25

*BasicFunctionTypename: "search" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 57
	0:
		%3 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		%4 = alloca i32, align 4
		%5 = alloca i64, align 8
		%6 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %5)
		%7 = load %3
		%8 = getelementptr %7, 0, 1
		%9 = bitcast **BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %8 to *i8
		%10 = load %3
		%11 = getelementptr %10, 0, 0
		%12 = bitcast *i32 %11 to *i8
		%13 = ptrtoint *i8 %9 to i64
		%14 = ptrtoint *i8 %12 to i64
		%15 = sub i64 %13, %14
		store %15, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %6)
		%16 = load %3
		%17 = bitcast *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %16 to *i8
		store %17, %6
		br %18
	18:
		%19 = load %6
		%20 = bitcast *i8 %19 to *i32
		%21 = load %20
		%22 = load %4
		%23 = icmp ne %21 %22
		br %23, %24, %31
	24:
		%25 = load %6
		%26 = load %5
		%27 = getelementptr %25, %26
		%28 = bitcast *i8 %27 to **BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list)
		%29 = load %28
		%30 = bitcast *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %29 to *i8
		store %30, %6
		br %18
	31:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 95
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 (...)* @__VERIFIER_nondet_int()
		store %5, %2
		%6 = load %2
		%7 = icmp slt %6 1
		br %7, %8, %9
	8:
		store 0, %1
		br %23
	9:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%10 = call i32 (...)* @__VERIFIER_nondet_int()
		store %10, %3
		%11 = load %3
		%12 = icmp slt %11 1
		br %12, %17, %13
	13:
		%14 = load %3
		%15 = load %2
		%16 = icmp sge %14 %15
		br %16, %17, %18
	17:
		store 0, %1
		br %23
	18:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %4)
		%19 = load %2
		%20 = call *BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) @init_list(i32 %19)
		store %20, %4
		%21 = load %4
		%22 = load %3
		Unnamed Call-Instruction = call BasicVoidType @search(*BasicTypeName typeName: struct.listBasicStructureType(elementType: i32, elementType: *struct.list) %21, i32 %22)
		store 0, %1
		br %23
	23:
		%24 = load %1
		ret %24


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_843(v495, v496, v497, v498, v499, v500, v501, 8, v507, v503, v504, 1, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v525, v522, 0, v526, v512, 3, 7, 4, 9, 2, v524) -> f_844(v495, v496, v497, v498, v499, v500, v501, 8, v507, v504, 1, v503, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v525, v522, 0, v526, v512, 3, 7, 4, 9, 2, v524) :|: 0 = 0
f_844(v495, v496, v497, v498, v499, v500, v501, 8, v507, v504, 1, v503, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v525, v522, 0, v526, v512, 3, 7, 4, 9, 2, v524) -> f_845(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v503, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v504, v525, 0, v526, v512, 3, 7, 4, 9, 2, v524) :|: 0 = 0
f_845(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v503, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v504, v525, 0, v526, v512, 3, 7, 4, 9, 2, v524) -> f_846(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v503, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v504, v525, 0, v526, v512, 3, 7, 4, 9, 2, v524) :|: 0 = 0
f_846(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v503, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v504, v525, 0, v526, v512, 3, 7, 4, 9, 2, v524) -> f_847(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v503, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v504, v525, 0, v526, v512, 3, 7, 4, 9, 2, v524) :|: v496 < v522 && 2 <= v522 && 3 <= v504 && 3 <= v523 && 4 <= v512
f_847(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v503, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v504, v525, 0, v526, v512, 3, 7, 4, 9, 2, v524) -> f_849(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v503, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v504, v525, 0, v526, v512, 3, 7, 4, 9, 2, v524) :|: 0 = 0
f_849(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v503, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v504, v525, 0, v526, v512, 3, 7, 4, 9, 2, v524) -> f_851(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v503, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v504, v525, 0, v526, v512, 3, 7, 4, 9, 2, v524) :|: TRUE
f_851(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v503, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v504, v525, 0, v526, v512, 3, 7, 4, 9, 2, v524) -> f_853(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v504, v525, 0, v526, v512, 3, 7, 4, 9, 2, v524) :|: 0 = 0
f_853(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v504, v525, 0, v526, v512, 3, 7, 4, 9, 2, v524) -> f_855(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v504, v525, 0, v526, v512, 3, 7, 4, 9, 2, v524) :|: 0 = 0
f_855(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v504, v525, 0, v526, v512, 3, 7, 4, 9, 2, v524) -> f_863(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v527, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v531, 0, v512, v526, v530, v528, v523, v525, 3, 7, 4, 15, 9, 2, 16, v532) :|: v527 = 8 + v507 && 1 + v529 = v504 && v531 = 15 + v507 && v532 = 1 + v524 && 1 + v530 = v522 && 9 <= v527 && 1 <= v530 && 16 <= v531 && 1 <= v528 && 2 <= v532 && v529 = v522
f_863(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v527, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v531, 0, v512, v526, v530, v528, v523, v525, 3, 7, 4, 15, 9, 2, 16, v532) -> f_865(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v527, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v531, v506, 0, v512, v526, v530, v528, v523, v525, 3, 7, 4, 15, 9, 2, 16, v532) :|: 0 = 0
f_865(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v527, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v531, v506, 0, v512, v526, v530, v528, v523, v525, 3, 7, 4, 15, 9, 2, 16, v532) -> f_867(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v527, v526, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v531, v506, 0, v512, v530, v528, v523, v525, 3, 7, 4, 15, 9, 2, 16, v532) :|: 0 = 0
f_867(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v527, v526, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v531, v506, 0, v512, v530, v528, v523, v525, 3, 7, 4, 15, 9, 2, 16, v532) -> f_868(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v527, v526, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v531, v506, 0, v512, v530, v528, v523, v525, 3, 7, 4, 15, 9, 2, 16, v532) :|: 0 = 0
f_868(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v527, v526, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v531, v506, 0, v512, v530, v528, v523, v525, 3, 7, 4, 15, 9, 2, 16, v532) -> f_869(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v527, v526, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v531, 0, v512, v530, v528, v523, v525, 3, 7, 4, 15, 9, 2, 16, v532) :|: TRUE
f_869(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v527, v526, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v531, 0, v512, v530, v528, v523, v525, 3, 7, 4, 15, 9, 2, 16, v532) -> f_870(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v527, v526, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v531, 0, v512, v530, v528, v523, v525, 3, 7, 4, 15, 9, 2, 16, v532) :|: TRUE
f_870(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v527, v526, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v531, 0, v512, v530, v528, v523, v525, 3, 7, 4, 15, 9, 2, 16, v532) -> f_842(v495, v496, v497, v498, v499, v500, v501, 8, v507, v522, 1, v527, v526, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v525, v530, 0, v528, v512, 3, 7, 4, 9, 2, v532) :|: TRUE
f_842(v495, v496, v497, v498, v499, v500, v501, 8, v503, v504, 1, v506, v507, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v525, v522, 0, v526, v512, 3, 7, 4, 9, 2, v524) -> f_843(v495, v496, v497, v498, v499, v500, v501, 8, v507, v503, v504, 1, v506, v508, v514, v509, v515, v510, v516, v511, v517, v518, v519, v520, v521, v523, v525, v522, 0, v526, v512, 3, 7, 4, 9, 2, v524) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_843(v495:0, v496:0, v497:0, v498:0, v499:0, v500:0, v501:0, 8, v507:0, v503:0, 1 + (1 + v530:0), 1, v506:0, v508:0, v514:0, v509:0, v515:0, v510:0, v516:0, v511:0, v517:0, v518:0, v519:0, v520:0, v521:0, v523:0, v525:0, 1 + v530:0, 0, v526:0, v512:0, 3, 7, 4, 9, 2, v524:0) -> f_843(v495:0, v496:0, v497:0, v498:0, v499:0, v500:0, v501:0, 8, v526:0, v507:0, 1 + v530:0, 1, 8 + v507:0, v508:0, v514:0, v509:0, v515:0, v510:0, v516:0, v511:0, v517:0, v518:0, v519:0, v520:0, v521:0, v523:0, v525:0, v530:0, 0, v528:0, v512:0, 3, 7, 4, 9, 2, 1 + v524:0) :|: v530:0 > 0 && v496:0 < 1 + v530:0 && v523:0 > 2 && v507:0 > 0 && v512:0 > 3 && v524:0 > 0 && v528:0 > 0
Filtered unneeded arguments:
   f_843(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37) -> f_843(x2, x9, x11, x26, x28, x30, x31, x37)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_843(v496:0, v507:0, sum~cons_1~sum~cons_1~v530:0, v523:0, sum~cons_1~v530:0, v526:0, v512:0, v524:0) -> f_843(v496:0, v526:0, 1 + v530:0, v523:0, v530:0, v528:0, v512:0, 1 + v524:0) :|: v496:0 < 1 + v530:0 && v530:0 > 0 && v523:0 > 2 && v507:0 > 0 && v512:0 > 3 && v528:0 > 0 && v524:0 > 0 && sum~cons_1~sum~cons_1~v530:0 = 1 + (1 + v530:0) && sum~cons_1~v530:0 = 1 + v530:0

----------------------------------------

(9)
Obligation:
Rules:
f_843(v496:0, v507:0, sum~cons_1~sum~cons_1~v530:0, v523:0, sum~cons_1~v530:0, v526:0, v512:0, v524:0) -> f_843(v496:0, v526:0, 1 + v530:0, v523:0, v530:0, v528:0, v512:0, 1 + v524:0) :|: v496:0 < 1 + v530:0 && v530:0 > 0 && v523:0 > 2 && v507:0 > 0 && v512:0 > 3 && v528:0 > 0 && v524:0 > 0 && sum~cons_1~sum~cons_1~v530:0 = 1 + (1 + v530:0) && sum~cons_1~v530:0 = 1 + v530:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_843(v496:0:0, v507:0:0, sum~cons_1~sum~cons_1~v530:0:0, v523:0:0, sum~cons_1~v530:0:0, v526:0:0, v512:0:0, v524:0:0) -> f_843(v496:0:0, v526:0:0, 1 + v530:0:0, v523:0:0, v530:0:0, v528:0:0, v512:0:0, 1 + v524:0:0) :|: v528:0:0 > 0 && v524:0:0 > 0 && v512:0:0 > 3 && v507:0:0 > 0 && v523:0:0 > 2 && v530:0:0 > 0 && v496:0:0 < 1 + v530:0:0 && sum~cons_1~sum~cons_1~v530:0:0 = 1 + (1 + v530:0:0) && sum~cons_1~v530:0:0 = 1 + v530:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_843(x, x1, x2, x3, x4, x5, x6, x7)] = x2

The following rules are decreasing:
f_843(v496:0:0, v507:0:0, sum~cons_1~sum~cons_1~v530:0:0, v523:0:0, sum~cons_1~v530:0:0, v526:0:0, v512:0:0, v524:0:0) -> f_843(v496:0:0, v526:0:0, 1 + v530:0:0, v523:0:0, v530:0:0, v528:0:0, v512:0:0, 1 + v524:0:0) :|: v528:0:0 > 0 && v524:0:0 > 0 && v512:0:0 > 3 && v507:0:0 > 0 && v523:0:0 > 2 && v530:0:0 > 0 && v496:0:0 < 1 + v530:0:0 && sum~cons_1~sum~cons_1~v530:0:0 = 1 + (1 + v530:0:0) && sum~cons_1~v530:0:0 = 1 + v530:0:0
The following rules are bounded:
f_843(v496:0:0, v507:0:0, sum~cons_1~sum~cons_1~v530:0:0, v523:0:0, sum~cons_1~v530:0:0, v526:0:0, v512:0:0, v524:0:0) -> f_843(v496:0:0, v526:0:0, 1 + v530:0:0, v523:0:0, v530:0:0, v528:0:0, v512:0:0, 1 + v524:0:0) :|: v528:0:0 > 0 && v524:0:0 > 0 && v512:0:0 > 3 && v507:0:0 > 0 && v523:0:0 > 2 && v530:0:0 > 0 && v496:0:0 < 1 + v530:0:0 && sum~cons_1~sum~cons_1~v530:0:0 = 1 + (1 + v530:0:0) && sum~cons_1~v530:0:0 = 1 + v530:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_701(v303, v304, v305, v306, v307, 0, v314, 1, v311, v309, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) -> f_702(v303, v304, v305, v306, v307, 0, v314, 1, v311, v309, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) :|: 0 = 0
f_702(v303, v304, v305, v306, v307, 0, v314, 1, v311, v309, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) -> f_703(v303, v304, v305, v306, v307, 0, v314, 1, v311, v309, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) :|: v314 < v303
f_703(v303, v304, v305, v306, v307, 0, v314, 1, v311, v309, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) -> f_705(v303, v304, v305, v306, v307, 0, v314, 1, v311, v309, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) :|: 0 = 0
f_705(v303, v304, v305, v306, v307, 0, v314, 1, v311, v309, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) -> f_707(v303, v304, v305, v306, v307, 0, v314, 1, v311, v309, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) :|: TRUE
f_707(v303, v304, v305, v306, v307, 0, v314, 1, v311, v309, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) -> f_709(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v309, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v319, 3, 7, 4, 8, 15, 2, 9, 16) :|: v329 = 15 + v328 && v328 % 4 = 0 && 16 <= v329
f_709(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v309, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v319, 3, 7, 4, 8, 15, 2, 9, 16) -> f_711(v303, v304, v305, v306, v307, 0, v314, 1, v328, v309, v311, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v319, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_711(v303, v304, v305, v306, v307, 0, v314, 1, v328, v309, v311, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v319, 3, 7, 4, 8, 15, 2, 9, 16) -> f_713(v303, v304, v305, v306, v307, 0, v314, 1, v328, v309, v311, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v319, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_713(v303, v304, v305, v306, v307, 0, v314, 1, v328, v309, v311, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v319, 3, 7, 4, 8, 15, 2, 9, 16) -> f_715(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v312, v313, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v319, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_715(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v312, v313, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v319, 3, 7, 4, 8, 15, 2, 9, 16) -> f_717(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v312, v313, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v319, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_717(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v312, v313, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v319, 3, 7, 4, 8, 15, 2, 9, 16) -> f_719(v303, v304, v305, v306, v307, 0, v314, 1, v328, v312, v311, v313, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v319, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_719(v303, v304, v305, v306, v307, 0, v314, 1, v328, v312, v311, v313, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v319, 3, 7, 4, 8, 15, 2, 9, 16) -> f_721(v303, v304, v305, v306, v307, 0, v314, 1, v328, v312, v311, v313, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v319, 3, 7, 4, 8, 15, 2, 9, 16) :|: TRUE
f_721(v303, v304, v305, v306, v307, 0, v314, 1, v328, v312, v311, v313, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v319, 3, 7, 4, 8, 15, 2, 9, 16) -> f_723(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v313, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v312, v319, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_723(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v313, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v312, v319, 3, 7, 4, 8, 15, 2, 9, 16) -> f_725(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v313, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v312, v319, 3, 7, 4, 8, 15, 2, 9, 16) :|: 0 = 0
f_725(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v313, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v312, v319, 3, 7, 4, 8, 15, 2, 9, 16) -> f_727(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v312, v319, 3, 7, 4, 15, 8, 2, 16, 9) :|: v339 = 8 + v328 && 9 <= v339
f_727(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v329, v312, v319, 3, 7, 4, 15, 8, 2, 16, 9) -> f_729(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, v343, 2, 9) :|: v343 = 1 + v314 && 2 <= v343
f_729(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, v343, 2, 9) -> f_731(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, v343, 2, 9) :|: 0 = 0
f_731(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, v343, 2, 9) -> f_733(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, v343, 2, 9) :|: TRUE
f_733(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, v343, 2, 9) -> f_735(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, v343, 2, 9) :|: TRUE
f_735(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v309, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, v343, 2, 9) -> f_737(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, v343, 2, 9) :|: 0 = 0
f_737(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, v343, 2, 9) -> f_739(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v343, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) :|: v343 = 1 + v314
f_739(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v343, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) -> f_741(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v343, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) :|: TRUE
f_741(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v343, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) -> f_749(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v343, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) :|: TRUE
f_749(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v343, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) -> f_700(v303, v304, v305, v306, v307, 0, v314, 1, v328, v311, v339, v343, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) :|: TRUE
f_700(v303, v304, v305, v306, v307, 0, v309, 1, v311, v312, v313, v314, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) -> f_701(v303, v304, v305, v306, v307, 0, v314, 1, v311, v309, v312, v313, v315, v320, v316, v321, v317, v322, v318, v323, v324, v325, v326, v327, v319, 3, 7, 4, 8, 2, 9) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_701(v303:0, v304:0, v305:0, v306:0, v307:0, 0, v314:0, 1, v311:0, v309:0, v312:0, v313:0, v315:0, v320:0, v316:0, v321:0, v317:0, v322:0, v318:0, v323:0, v324:0, v325:0, v326:0, v327:0, v319:0, 3, 7, 4, 8, 2, 9) -> f_701(v303:0, v304:0, v305:0, v306:0, v307:0, 0, 1 + v314:0, 1, v328:0, v314:0, v311:0, 8 + v328:0, v315:0, v320:0, v316:0, v321:0, v317:0, v322:0, v318:0, v323:0, v324:0, v325:0, v326:0, v327:0, v319:0, 3, 7, 4, 8, 2, 9) :|: v314:0 < v303:0 && v328:0 % 4 = 0 && v328:0 > 0 && v314:0 > 0
Filtered unneeded arguments:
   f_701(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_701(x1, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_701(v303:0, v314:0) -> f_701(v303:0, 1 + v314:0) :|: v314:0 < v303:0 && v314:0 > 0

----------------------------------------

(16)
Obligation:
Rules:
f_701(v303:0, v314:0) -> f_701(v303:0, 1 + v314:0) :|: v314:0 < v303:0 && v314:0 > 0

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_701(x, x1)] = -1 + x - x1

The following rules are decreasing:
f_701(v303:0, v314:0) -> f_701(v303:0, 1 + v314:0) :|: v314:0 < v303:0 && v314:0 > 0
The following rules are bounded:
f_701(v303:0, v314:0) -> f_701(v303:0, 1 + v314:0) :|: v314:0 < v303:0 && v314:0 > 0

----------------------------------------

(18)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
