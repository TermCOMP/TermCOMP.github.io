MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/f4opO.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 84 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/f4opO.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/f4opO.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_long" returnParam: i64 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "ssl3_accept" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		%8 = alloca i32, align 4
		%9 = alloca i32, align 4
		%10 = alloca i32, align 4
		%11 = alloca i32, align 4
		%12 = alloca i32, align 4
		%13 = alloca i32, align 4
		%14 = alloca i32, align 4
		%15 = alloca i32, align 4
		%16 = alloca i32, align 4
		%17 = alloca i32, align 4
		%18 = alloca i32, align 4
		%19 = alloca i32, align 4
		%20 = alloca i32, align 4
		%21 = alloca i32, align 4
		%22 = alloca i32, align 4
		%23 = alloca i32, align 4
		%24 = alloca i32, align 4
		%25 = alloca i32, align 4
		%26 = alloca i32, align 4
		%27 = alloca i32, align 4
		%28 = alloca i32, align 4
		%29 = alloca i32, align 4
		%30 = alloca i32, align 4
		%31 = alloca i32, align 4
		%32 = alloca i32, align 4
		%33 = alloca i32, align 4
		%34 = alloca i32, align 4
		%35 = alloca i64, align 8
		%36 = alloca i64, align 8
		%37 = alloca i64, align 8
		%38 = alloca i32, align 4
		%39 = alloca i64, align 8
		%40 = alloca i32, align 4
		%41 = alloca i32, align 4
		%42 = alloca i32, align 4
		%43 = alloca i32, align 4
		%44 = alloca i32, align 4
		%45 = alloca i32, align 4
		%46 = alloca i32, align 4
		%47 = alloca i32, align 4
		%48 = alloca i32, align 4
		%49 = alloca i32, align 4
		%50 = alloca i32, align 4
		%51 = alloca i32, align 4
		%52 = alloca i64, align 8
		%53 = alloca i32, align 4
		%54 = alloca i32, align 4
		%55 = alloca i32, align 4
		%56 = alloca i32, align 4
		%57 = alloca i64, align 8
		%58 = alloca i64, align 8
		%59 = alloca i64, align 8
		%60 = alloca i64, align 8
		%61 = alloca i32, align 4
		%62 = alloca i64, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%63 = call i32 @__VERIFIER_nondet_int()
		store %63, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%64 = call i32 @__VERIFIER_nondet_int()
		store %64, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %8)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %9)
		%65 = call i32 @__VERIFIER_nondet_int()
		store %65, %9
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %10)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %11)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %12)
		%66 = call i32 @__VERIFIER_nondet_int()
		store %66, %12
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %13)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %14)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %15)
		%67 = call i32 @__VERIFIER_nondet_int()
		store %67, %15
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %16)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %17)
		%68 = call i32 @__VERIFIER_nondet_int()
		store %68, %17
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %18)
		%69 = call i32 @__VERIFIER_nondet_int()
		store %69, %18
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %19)
		%70 = call i32 @__VERIFIER_nondet_int()
		store %70, %19
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %20)
		%71 = call i32 @__VERIFIER_nondet_int()
		store %71, %20
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %21)
		%72 = call i32 @__VERIFIER_nondet_int()
		store %72, %21
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %22)
		%73 = call i32 @__VERIFIER_nondet_int()
		store %73, %22
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %23)
		%74 = call i32 @__VERIFIER_nondet_int()
		store %74, %23
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %24)
		%75 = call i32 @__VERIFIER_nondet_int()
		store %75, %24
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %25)
		%76 = call i32 @__VERIFIER_nondet_int()
		store %76, %25
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %26)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %27)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %28)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %29)
		%77 = call i32 @__VERIFIER_nondet_int()
		store %77, %29
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %30)
		%78 = call i32 @__VERIFIER_nondet_int()
		store %78, %30
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %31)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %32)
		%79 = call i32 @__VERIFIER_nondet_int()
		store %79, %32
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %33)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %34)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %35)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %36)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %37)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %38)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %39)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %40)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %41)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %42)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %43)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %44)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %45)
		%80 = call i32 @__VERIFIER_nondet_int()
		store %80, %45
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %46)
		%81 = call i32 @__VERIFIER_nondet_int()
		store %81, %46
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %47)
		%82 = call i32 @__VERIFIER_nondet_int()
		store %82, %47
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %48)
		%83 = call i32 @__VERIFIER_nondet_int()
		store %83, %48
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %49)
		%84 = call i32 @__VERIFIER_nondet_int()
		store %84, %49
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %50)
		%85 = call i32 @__VERIFIER_nondet_int()
		store %85, %50
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %51)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %52)
		%86 = call i64 @__VERIFIER_nondet_long()
		store %86, %52
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %53)
		%87 = call i32 @__VERIFIER_nondet_int()
		store %87, %53
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %54)
		%88 = call i32 @__VERIFIER_nondet_int()
		store %88, %54
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %55)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %56)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %57)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %58)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %59)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %60)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %61)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %62)
		store 0, %27
		%89 = load %3
		store %89, %6
		store 0, %55
		%90 = call i32 @__VERIFIER_nondet_int()
		%91 = sext i32 %90 to i64
		store %91, %37
		%92 = load %37
		store %92, %36
		store 0, %38
		store -1, %40
		store 0, %43
		store 0, %44
		%93 = load %4
		%94 = icmp ne %93 0
		br %94, %95, %97
	95:
		%96 = load %4
		store %96, %38
		br %103
	97:
		%98 = load %22
		%99 = icmp ne %98 0
		br %99, %100, %102
	100:
		%101 = load %22
		store %101, %38
		br %102
	102:
		br %103
	103:
		%104 = load %5
		%105 = add i32 %104, 1
		store %105, %5
		%106 = load %45
		%107 = add i32 %106, 12288
		%108 = icmp ne %107 0
		br %108, %109, %115
	109:
		%110 = load %46
		%111 = add i32 %110, 16384
		%112 = icmp ne %111 0
		br %112, %113, %114
	113:
		br %114
	114:
		br %115
	115:
		%116 = load %17
		%117 = icmp eq %116 0
		br %117, %118, %119
	118:
		store -1, %2
		br %702
	119:
		br %120
	120:
		br %121
	121:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%122 = load %6
		store %122, %42
		%123 = load %6
		%124 = icmp eq %123 12292
		br %124, %125, %126
	125:
		br %265
	126:
		%127 = load %6
		%128 = icmp eq %127 16384
		br %128, %129, %130
	129:
		br %266
	130:
		%131 = load %6
		%132 = icmp eq %131 8192
		br %132, %133, %134
	133:
		br %267
	134:
		%135 = load %6
		%136 = icmp eq %135 24576
		br %136, %137, %138
	137:
		br %268
	138:
		%139 = load %6
		%140 = icmp eq %139 8195
		br %140, %141, %142
	141:
		br %269
	142:
		%143 = load %6
		%144 = icmp eq %143 8480
		br %144, %145, %146
	145:
		br %311
	146:
		%147 = load %6
		%148 = icmp eq %147 8481
		br %148, %149, %150
	149:
		br %312
	150:
		%151 = load %6
		%152 = icmp eq %151 8482
		br %152, %153, %154
	153:
		br %318
	154:
		%155 = load %6
		%156 = icmp eq %155 8464
		br %156, %157, %158
	157:
		br %319
	158:
		%159 = load %6
		%160 = icmp eq %159 8465
		br %160, %161, %162
	161:
		br %320
	162:
		%163 = load %6
		%164 = icmp eq %163 8466
		br %164, %165, %166
	165:
		br %321
	166:
		%167 = load %6
		%168 = icmp eq %167 8496
		br %168, %169, %170
	169:
		br %331
	170:
		%171 = load %6
		%172 = icmp eq %171 8497
		br %172, %173, %174
	173:
		br %332
	174:
		%175 = load %6
		%176 = icmp eq %175 8512
		br %176, %177, %178
	177:
		br %347
	178:
		%179 = load %6
		%180 = icmp eq %179 8513
		br %180, %181, %182
	181:
		br %348
	182:
		%183 = load %6
		%184 = icmp eq %183 8528
		br %184, %185, %186
	185:
		br %362
	186:
		%187 = load %6
		%188 = icmp eq %187 8529
		br %188, %189, %190
	189:
		br %363
	190:
		%191 = load %6
		%192 = icmp eq %191 8544
		br %192, %193, %194
	193:
		br %426
	194:
		%195 = load %6
		%196 = icmp eq %195 8545
		br %196, %197, %198
	197:
		br %427
	198:
		%199 = load %6
		%200 = icmp eq %199 8560
		br %200, %201, %202
	201:
		br %466
	202:
		%203 = load %6
		%204 = icmp eq %203 8561
		br %204, %205, %206
	205:
		br %467
	206:
		%207 = load %6
		%208 = icmp eq %207 8448
		br %208, %209, %210
	209:
		br %473
	210:
		%211 = load %6
		%212 = icmp eq %211 8576
		br %212, %213, %214
	213:
		br %484
	214:
		%215 = load %6
		%216 = icmp eq %215 8577
		br %216, %217, %218
	217:
		br %485
	218:
		%219 = load %6
		%220 = icmp eq %219 8592
		br %220, %221, %222
	221:
		br %501
	222:
		%223 = load %6
		%224 = icmp eq %223 8593
		br %224, %225, %226
	225:
		br %502
	226:
		%227 = load %6
		%228 = icmp eq %227 8608
		br %228, %229, %230
	229:
		br %508
	230:
		%231 = load %6
		%232 = icmp eq %231 8609
		br %232, %233, %234
	233:
		br %509
	234:
		%235 = load %6
		%236 = icmp eq %235 8640
		br %236, %237, %238
	237:
		br %515
	238:
		%239 = load %6
		%240 = icmp eq %239 8641
		br %240, %241, %242
	241:
		br %516
	242:
		%243 = load %6
		%244 = icmp eq %243 8656
		br %244, %245, %246
	245:
		br %541
	246:
		%247 = load %6
		%248 = icmp eq %247 8657
		br %248, %249, %250
	249:
		br %542
	250:
		%251 = load %6
		%252 = icmp eq %251 8672
		br %252, %253, %254
	253:
		br %571
	254:
		%255 = load %6
		%256 = icmp eq %255 8673
		br %256, %257, %258
	257:
		br %572
	258:
		%259 = load %6
		%260 = icmp eq %259 3
		br %260, %261, %262
	261:
		br %597
	262:
		br %608
	263:
		br 0, %264, %609
	264:
		br %265
	265:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 1, %7
		br %266
	266:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %267
	267:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %268
	268:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %269
	269:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 1, %8
		%270 = load %38
		%271 = icmp ne %270 0
		br %271, %272, %273
	272:
		br %273
	273:
		%274 = load %9
		%275 = mul i32 %274, 8
		store %275, %56
		%276 = load %56
		%277 = icmp ne %276 3
		br %277, %278, %279
	278:
		store -1, %2
		br %702
	279:
		store 8192, %10
		%280 = load %14
		%281 = icmp eq %280 0
		br %281, %282, %293
	282:
		%283 = call i32 @__VERIFIER_nondet_int()
		store %283, %34
		%284 = load %34
		%285 = icmp eq %284 0
		br %285, %286, %287
	286:
		store -1, %40
		br %693
	287:
		%288 = load %47
		%289 = icmp ne %288 0
		br %289, %291, %290
	290:
		store -1, %40
		br %693
	291:
		%292 = load %34
		store %292, %14
		br %293
	293:
		%294 = load %48
		%295 = icmp ne %294 0
		br %295, %297, %296
	296:
		store -1, %40
		br %693
	297:
		store 0, %11
		%298 = load %6
		%299 = icmp ne %298 12292
		br %299, %300, %307
	300:
		%301 = load %49
		%302 = icmp ne %301 0
		br %302, %304, %303
	303:
		store -1, %40
		br %693
	304:
		store 8464, %6
		%305 = load %24
		%306 = add i32 %305, 1
		store %306, %24
		br %310
	307:
		%308 = load %23
		%309 = add i32 %308, 1
		store %309, %23
		store 8480, %6
		br %310
	310:
		br %610
	311:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %312
	312:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 0, %16
		%313 = call i32 @__VERIFIER_nondet_int()
		store %313, %40
		%314 = load %40
		%315 = icmp sle %314 0
		br %315, %316, %317
	316:
		br %693
	317:
		store 8482, %31
		store 8448, %6
		store 0, %11
		br %610
	318:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 3, %6
		br %610
	319:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %320
	320:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %321
	321:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 0, %16
		%322 = call i32 @__VERIFIER_nondet_int()
		store %322, %40
		%323 = load %55
		%324 = icmp eq %323 0
		br %324, %325, %326
	325:
		store 1, %55
		br %326
	326:
		%327 = load %40
		%328 = icmp sle %327 0
		br %328, %329, %330
	329:
		br %693
	330:
		store 1, %44
		store 8496, %6
		store 0, %11
		br %610
	331:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %332
	332:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%333 = call i32 @__VERIFIER_nondet_int()
		store %333, %40
		%334 = load %55
		%335 = icmp eq %334 1
		br %335, %336, %337
	336:
		store 2, %55
		br %337
	337:
		%338 = load %40
		%339 = icmp sle %338 0
		br %339, %340, %341
	340:
		br %693
	341:
		%342 = load %12
		%343 = icmp ne %342 0
		br %343, %344, %345
	344:
		store 8656, %6
		br %346
	345:
		store 8512, %6
		br %346
	346:
		store 0, %11
		br %610
	347:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %348
	348:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%349 = load %30
		%350 = sext i32 %349 to i64
		store %350, %57
		%351 = load %57
		%352 = add i64 %351, 256
		%353 = icmp ne %352 0
		br %353, %354, %355
	354:
		store 1, %43
		br %361
	355:
		%356 = call i32 @__VERIFIER_nondet_int()
		store %356, %40
		%357 = load %40
		%358 = icmp sle %357 0
		br %358, %359, %360
	359:
		br %693
	360:
		br %361
	361:
		store 8528, %6
		store 0, %11
		br %610
	362:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %363
	363:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%364 = load %30
		%365 = sext i32 %364 to i64
		store %365, %35
		%366 = load %18
		%367 = sext i32 %366 to i64
		store %367, %58
		%368 = load %58
		%369 = add i64 %368, 2097152
		%370 = icmp ne %369 0
		br %370, %371, %372
	371:
		store 1, %28
		br %373
	372:
		store 0, %28
		br %373
	373:
		%374 = load %28
		%375 = icmp ne %374 0
		br %375, %376, %377
	376:
		br %411
	377:
		%378 = load %35
		%379 = add i64 %378, 30
		%380 = icmp ne %379 0
		br %380, %381, %382
	381:
		br %411
	382:
		%383 = load %35
		%384 = add i64 %383, 1
		%385 = icmp ne %384 0
		br %385, %386, %422
	386:
		%387 = load %21
		%388 = icmp eq %387 0
		br %388, %389, %390
	389:
		br %411
	390:
		%391 = load %32
		%392 = sext i32 %391 to i64
		store %392, %59
		%393 = load %59
		%394 = add i64 %393, 2
		%395 = icmp ne %394 0
		br %395, %396, %419
	396:
		%397 = load %32
		%398 = sext i32 %397 to i64
		store %398, %60
		%399 = load %60
		%400 = add i64 %399, 4
		%401 = icmp ne %400 0
		br %401, %402, %403
	402:
		store 512, %51
		br %404
	403:
		store 1024, %51
		br %404
	404:
		%405 = load %50
		%406 = mul i32 %405, 8
		store %406, %61
		%407 = load %61
		%408 = load %51
		%409 = icmp sgt %407 %408
		br %409, %410, %417
	410:
		br %411
	411:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%412 = call i32 @__VERIFIER_nondet_int()
		store %412, %40
		%413 = load %40
		%414 = icmp sle %413 0
		br %414, %415, %416
	415:
		br %693
	416:
		br %418
	417:
		store 1, %43
		br %418
	418:
		br %420
	419:
		store 1, %43
		br %420
	420:
		br %421
	421:
		br %423
	422:
		store 1, %43
		br %423
	423:
		br %424
	424:
		br %425
	425:
		store 8544, %6
		store 0, %11
		br %610
	426:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %427
	427:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%428 = load %19
		%429 = add i32 %428, 1
		%430 = icmp ne %429 0
		br %430, %431, %464
	431:
		%432 = load %20
		%433 = icmp ne %432 0
		br %433, %434, %441
	434:
		%435 = load %19
		%436 = add i32 %435, 4
		%437 = icmp ne %436 0
		br %437, %438, %439
	438:
		store 1, %43
		store 0, %26
		store 8560, %6
		br %440
	439:
		br %442
	440:
		br %463
	441:
		br %442
	442:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%443 = load %30
		%444 = sext i32 %443 to i64
		store %444, %62
		%445 = load %62
		%446 = add i64 %445, 256
		%447 = icmp ne %446 0
		br %447, %448, %455
	448:
		%449 = load %19
		%450 = add i32 %449, 2
		%451 = icmp ne %450 0
		br %451, %452, %453
	452:
		br %456
	453:
		store 1, %43
		store 0, %26
		store 8560, %6
		br %454
	454:
		br %462
	455:
		br %456
	456:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 1, %26
		%457 = call i32 @__VERIFIER_nondet_int()
		store %457, %40
		%458 = load %40
		%459 = icmp sle %458 0
		br %459, %460, %461
	460:
		br %693
	461:
		store 8448, %6
		store 8576, %31
		store 0, %11
		br %462
	462:
		br %463
	463:
		br %465
	464:
		store 1, %43
		store 0, %26
		store 8560, %6
		br %465
	465:
		br %610
	466:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %467
	467:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%468 = call i32 @__VERIFIER_nondet_int()
		store %468, %40
		%469 = load %40
		%470 = icmp sle %469 0
		br %470, %471, %472
	471:
		br %693
	472:
		store 8576, %31
		store 8448, %6
		store 0, %11
		br %610
	473:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%474 = load %39
		%475 = icmp sgt %474 0
		br %475, %476, %482
	476:
		store 2, %13
		%477 = load %52
		store %477, %39
		%478 = load %39
		%479 = icmp sle %478 0
		br %479, %480, %481
	480:
		store -1, %40
		br %693
	481:
		store 1, %13
		br %482
	482:
		%483 = load %31
		store %483, %6
		br %610
	484:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %485
	485:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%486 = call i32 @__VERIFIER_nondet_int()
		store %486, %40
		%487 = load %40
		%488 = icmp sle %487 0
		br %488, %489, %490
	489:
		br %693
	490:
		%491 = load %40
		%492 = icmp eq %491 2
		br %492, %493, %494
	493:
		store 8466, %6
		br %500
	494:
		%495 = call i32 @__VERIFIER_nondet_int()
		store %495, %40
		%496 = load %40
		%497 = icmp sle %496 0
		br %497, %498, %499
	498:
		br %693
	499:
		store 0, %11
		store 8592, %6
		br %500
	500:
		br %610
	501:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %502
	502:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%503 = call i32 @__VERIFIER_nondet_int()
		store %503, %40
		%504 = load %40
		%505 = icmp sle %504 0
		br %505, %506, %507
	506:
		br %693
	507:
		store 8608, %6
		store 0, %11
		br %610
	508:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %509
	509:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%510 = call i32 @__VERIFIER_nondet_int()
		store %510, %40
		%511 = load %40
		%512 = icmp sle %511 0
		br %512, %513, %514
	513:
		br %693
	514:
		store 8640, %6
		store 0, %11
		br %610
	515:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %516
	516:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%517 = call i32 @__VERIFIER_nondet_int()
		store %517, %40
		%518 = load %55
		%519 = icmp eq %518 4
		br %519, %520, %521
	520:
		store 5, %55
		br %531
	521:
		%522 = load %55
		%523 = icmp eq %522 7
		br %523, %524, %525
	524:
		store 8, %55
		br %530
	525:
		%526 = load %55
		%527 = icmp eq %526 10
		br %527, %528, %529
	528:
		br %701
	529:
		br %530
	530:
		br %531
	531:
		%532 = load %40
		%533 = icmp sle %532 0
		br %533, %534, %535
	534:
		br %693
	535:
		%536 = load %12
		%537 = icmp ne %536 0
		br %537, %538, %539
	538:
		store 3, %6
		br %540
	539:
		store 8656, %6
		br %540
	540:
		store 0, %11
		br %610
	541:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %542
	542:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%543 = load %29
		store %543, %33
		%544 = load %53
		%545 = icmp ne %544 0
		br %545, %547, %546
	546:
		store -1, %40
		br %693
	547:
		%548 = call i32 @__VERIFIER_nondet_int()
		store %548, %40
		%549 = load %55
		%550 = icmp eq %549 2
		br %550, %551, %552
	551:
		store 3, %55
		br %562
	552:
		%553 = load %55
		%554 = icmp eq %553 5
		br %554, %555, %556
	555:
		store 6, %55
		br %561
	556:
		%557 = load %55
		%558 = icmp eq %557 8
		br %558, %559, %560
	559:
		store 9, %55
		br %560
	560:
		br %561
	561:
		br %562
	562:
		%563 = load %40
		%564 = icmp sle %563 0
		br %564, %565, %566
	565:
		br %693
	566:
		store 8672, %6
		store 0, %11
		%567 = load %54
		%568 = icmp ne %567 0
		br %568, %570, %569
	569:
		store -1, %40
		br %693
	570:
		br %610
	571:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %572
	572:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%573 = call i32 @__VERIFIER_nondet_int()
		store %573, %40
		%574 = load %55
		%575 = icmp eq %574 3
		br %575, %576, %577
	576:
		store 4, %55
		br %587
	577:
		%578 = load %55
		%579 = icmp eq %578 6
		br %579, %580, %581
	580:
		store 7, %55
		br %586
	581:
		%582 = load %55
		%583 = icmp eq %582 9
		br %583, %584, %585
	584:
		store 10, %55
		br %585
	585:
		br %586
	586:
		br %587
	587:
		%588 = load %40
		%589 = icmp sle %588 0
		br %589, %590, %591
	590:
		br %693
	591:
		store 8448, %6
		%592 = load %12
		%593 = icmp ne %592 0
		br %593, %594, %595
	594:
		store 8640, %31
		br %596
	595:
		store 3, %31
		br %596
	596:
		store 0, %11
		br %610
	597:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store 0, %14
		store 0, %11
		%598 = load %44
		%599 = icmp ne %598 0
		br %599, %600, %607
	600:
		store 0, %7
		%601 = load %25
		%602 = add i32 %601, 1
		store %602, %25
		%603 = load %38
		%604 = icmp ne %603 0
		br %604, %605, %606
	605:
		br %606
	606:
		br %607
	607:
		store 1, %40
		br %693
	608:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		store -1, %40
		br %693
	609:
		br %610
	610:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %611
	611:
		br %612
	612:
		br %613
	613:
		br %614
	614:
		br %615
	615:
		br %616
	616:
		br %617
	617:
		br %618
	618:
		br %619
	619:
		br %620
	620:
		br %621
	621:
		br %622
	622:
		br %623
	623:
		br %624
	624:
		br %625
	625:
		br %626
	626:
		br %627
	627:
		br %628
	628:
		br %629
	629:
		br %630
	630:
		br %631
	631:
		br %632
	632:
		br %633
	633:
		br %634
	634:
		br %635
	635:
		br %636
	636:
		br %637
	637:
		br %638
	638:
		br %639
	639:
		br %640
	640:
		br %641
	641:
		br %642
	642:
		br %643
	643:
		br %644
	644:
		br %645
	645:
		br %646
	646:
		%647 = load %27
		%648 = icmp ne %647 0
		br %648, %691, %649
	649:
		%650 = load %43
		%651 = icmp ne %650 0
		br %651, %690, %652
	652:
		%653 = load %45
		%654 = icmp ne %653 -12288
		br %654, %655, %668
	655:
		%656 = load %6
		%657 = icmp ne %656 8656
		br %657, %658, %667
	658:
		%659 = load %46
		%660 = icmp ne %659 -16384
		br %660, %661, %666
	661:
		%662 = load %42
		%663 = icmp eq %662 8496
		br %663, %664, %665
	664:
		br %701
	665:
		br %666
	666:
		br %667
	667:
		br %668
	668:
		%669 = load %15
		%670 = icmp ne %669 0
		br %670, %671, %677
	671:
		%672 = call i32 @__VERIFIER_nondet_int()
		store %672, %40
		%673 = load %40
		%674 = icmp sle %673 0
		br %674, %675, %676
	675:
		br %693
	676:
		br %677
	677:
		%678 = load %38
		%679 = icmp ne %678 0
		br %679, %680, %689
	680:
		%681 = load %6
		%682 = load %42
		%683 = icmp ne %681 %682
		br %683, %684, %688
	684:
		%685 = load %6
		store %685, %41
		%686 = load %42
		store %686, %6
		%687 = load %41
		store %687, %6
		br %688
	688:
		br %689
	689:
		br %690
	690:
		br %691
	691:
		store 0, %43
		br %120
	692:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %693
	693:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%694 = load %5
		%695 = add i32 %694, -1
		store %695, %5
		%696 = load %38
		%697 = icmp ne %696 0
		br %697, %698, %699
	698:
		br %699
	699:
		%700 = load %40
		store %700, %2
		br %702
	701:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	702:
		%703 = load %2
		ret %703

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1175
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 8464, %2
		%4 = load %2
		%5 = call i32 @ssl3_accept(i32 %4)
		store %5, %3
		%6 = load %3
		ret %6


Analyze Termination of all function calls matching the pattern:
main()Instruction count:985
Aborted 1756892651Exec. 4, LLVMToSEGraph with some error. Reason: InconsistentStateException [integerState=vals:
{v4953=[1,+inf){-inf,+inf}, v4954=[1,+inf){-inf,+inf}, v4955=[1,+inf){-inf,+inf}, v4956=[1,+inf){-inf,+inf}, v4957=[1,+inf){-inf,+inf}, v4958=[1,+inf){-inf,+inf}, v4959=[1,+inf){-inf,+inf}, v4960=[1,+inf){-inf,+inf}, v4961=[1,+inf){-inf,+inf}, v4962=[1,+inf){-inf,+inf}, v4963=[1,+inf){-inf,+inf}, v4964=[1,+inf){-inf,+inf}, v4965=[1,+inf){-inf,+inf}, v4966=[1,+inf){-inf,+inf}, v4967=[1,+inf){-inf,+inf}, v4968=[1,+inf){-inf,+inf}, v4969=[1,+inf){-inf,+inf}, v4970=[1,+inf){-inf,+inf}, v4971=[1,+inf){-inf,+inf}, v4972=[1,+inf){-inf,+inf}, v4973=[1,+inf){-inf,+inf}, v4974=[1,+inf){-inf,+inf}, v4975=[1,+inf){-inf,+inf}, v4976=[1,+inf){-inf,+inf}, v4977=[1,+inf){-inf,+inf}, v4978=[1,+inf){-inf,+inf}, v4979=[1,+inf){-inf,+inf}, v4980=[1,+inf){-inf,+inf}, v4981=[1,+inf){-inf,+inf}, v4982=[1,+inf){-inf,+inf}, v4983=[1,+inf){-inf,+inf}, v4984=[1,+inf){-inf,+inf}, v4985=[1,+inf){-inf,+inf}, v4986=[1,+inf){-inf,+inf}, v4987=[1,+inf){-inf,+inf}, v4988=[1,+inf){-inf,+inf}, v4989=[1,+inf){-inf,+inf}, v4990=[1,+inf){-inf,+inf}, v4991=[1,+inf){-inf,+inf}, v4992=[1,+inf){-inf,+inf}, v4993=[1,+inf){-inf,+inf}, v4994=[1,+inf){-inf,+inf}, v4995=[1,+inf){-inf,+inf}, v4996=[1,+inf){-inf,+inf}, v4997=[1,+inf){-inf,+inf}, v4998=[1,+inf){-inf,+inf}, v4999=[1,+inf){-inf,+inf}, v5000=[1,+inf){-inf,+inf}, v5001=[1,+inf){-inf,+inf}, v5002=[1,+inf){-inf,+inf}, v5003=[1,+inf){-inf,+inf}, v5004=[1,+inf){-inf,+inf}, v5005=[1,+inf){-inf,+inf}, v5006=[1,+inf){-inf,+inf}, v5007=[1,+inf){-inf,+inf}, v5008=[4,+inf){0,+inf}, v5009=[4,+inf){0,+inf}, v5010=[4,+inf){0,+inf}, v5011=[4,+inf){0,+inf}, v5012=[4,+inf){0,+inf}, v5013=[4,+inf){0,+inf}, v5014=[4,+inf){0,+inf}, v5015=[4,+inf){0,+inf}, v5016=[4,+inf){0,+inf}, v5017=[4,+inf){0,+inf}, v5018=[4,+inf){0,+inf}, v5019=[4,+inf){0,+inf}, v5020=[4,+inf){0,+inf}, v5021=[4,+inf){0,+inf}, v5022=[4,+inf){0,+inf}, v5023=[4,+inf){0,+inf}, v5024=[4,+inf){0,+inf}, v5025=[4,+inf){0,+inf}, v5026=[4,+inf){0,+inf}, v5027=[4,+inf){0,+inf}, v5028=[4,+inf){0,+inf}, v5029=[4,+inf){0,+inf}, v5030=[4,+inf){0,+inf}, v5031=[4,+inf){0,+inf}, v5032=[4,+inf){0,+inf}, v5033=[4,+inf){0,+inf}, v5034=[4,+inf){0,+inf}, v5035=[4,+inf){0,+inf}, v5036=[4,+inf){0,+inf}, v5037=[8,+inf){0,+inf}, v5038=[4,+inf){0,+inf}, v5039=[8,+inf){0,+inf}, v5040=[4,+inf){0,+inf}, v5041=[4,+inf){0,+inf}, v5042=[4,+inf){0,+inf}, v5043=[4,+inf){0,+inf}, v5044=[4,+inf){0,+inf}, v5045=[4,+inf){0,+inf}, v5046=[4,+inf){0,+inf}, v5047=[4,+inf){0,+inf}, v5048=[4,+inf){0,+inf}, v5049=[4,+inf){0,+inf}, v5050=[4,+inf){0,+inf}, v5051=[4,+inf){0,+inf}, v5052=[8,+inf){0,+inf}, v5053=[4,+inf){0,+inf}, v5054=[4,+inf){0,+inf}, v5055=[4,+inf){0,+inf}, v5056=[4,+inf){0,+inf}, v5057=[8,+inf){0,+inf}, v5058=[8,+inf){0,+inf}, v5059=[8,+inf){0,+inf}, v5060=[8,+inf){0,+inf}, v5061=[4,+inf){0,+inf}, v5062=[8,+inf){0,+inf}, v5063=#, v5064=[8192,+inf)(l1), v5066=#, v5067=#, v5068=#, v5069=#, v5070=#, v5071=#, v5072=#, v5073=#, v5074=#, v5075=#, v5077=#, v5078=#, v5079=#, v5080=#, v5081=[-1,+inf)\{0}{-inf,+inf}, v5082=[0,1](u1), v5083=#, v5084=#, v5085=#, v5086=#, v5087=#, v5088=#, v5089=#, v5090=#, v5091=#, v5092=[0,+inf)}
associations:
{v4953=0, v5008=0, v4954=1, v5009=1, v4955=2, v5010=2, v4956=3, v5011=3, v4957=4, v5012=4, v4958=5, v5013=5, v4959=6, v5014=6, v4960=7, v5015=7, v4961=8, v5016=8, v4962=9, v5017=9, v4963=10, v5018=10, v4964=11, v5019=11, v4965=12, v5020=12, v4966=13, v5021=13, v4967=14, v5022=14, v4968=15, v5023=15, v4969=16, v5024=16, v4970=17, v5025=17, v4971=18, v5026=18, v4972=19, v5027=19, v4973=20, v5028=20, v4974=21, v5029=21, v4975=22, v5030=22, v4976=23, v5031=23, v4977=24, v5032=24, v4978=25, v5033=25, v4979=26, v5034=26, v4980=27, v5035=27, v4981=28, v5036=28, v4982=29, v5037=29, v4983=30, v5038=30, v4984=31, v5039=31, v4985=32, v5040=32, v4986=33, v5041=33, v4987=34, v5042=34, v4988=35, v5043=35, v4989=36, v5044=36, v4990=37, v5045=37, v4991=38, v5046=38, v4992=39, v5047=39, v4993=40, v5048=40, v4994=41, v5049=41, v4995=42, v5050=42, v4996=43, v5051=43, v4997=44, v5052=44, v4998=45, v5053=45, v4999=46, v5054=46, v5000=47, v5055=47, v5001=48, v5056=48, v5002=49, v5057=49, v5003=50, v5058=50, v5004=51, v5059=51, v5005=52, v5060=52, v5006=53, v5061=53, v5007=54, v5062=54}
association offsets:
{v4953=3, v5008=0, v4954=3, v5009=0, v4955=3, v5010=0, v4956=3, v5011=0, v4957=3, v5012=0, v4958=3, v5013=0, v4959=3, v5014=0, v4960=3, v5015=0, v4961=3, v5016=0, v4962=3, v5017=0, v4963=3, v5018=0, v4964=3, v5019=0, v4965=3, v5020=0, v4966=3, v5021=0, v4967=3, v5022=0, v4968=3, v5023=0, v4969=3, v5024=0, v4970=3, v5025=0, v4971=3, v5026=0, v4972=3, v5027=0, v4973=3, v5028=0, v4974=3, v5029=0, v4975=3, v5030=0, v4976=3, v5031=0, v4977=3, v5032=0, v4978=3, v5033=0, v4979=3, v5034=0, v4980=3, v5035=0, v4981=3, v5036=0, v4982=7, v5037=0, v4983=3, v5038=0, v4984=7, v5039=0, v4985=3, v5040=0, v4986=3, v5041=0, v4987=3, v5042=0, v4988=3, v5043=0, v4989=3, v5044=0, v4990=3, v5045=0, v4991=3, v5046=0, v4992=3, v5047=0, v4993=3, v5048=0, v4994=3, v5049=0, v4995=3, v5050=0, v4996=3, v5051=0, v4997=7, v5052=0, v4998=3, v5053=0, v4999=3, v5054=0, v5000=3, v5055=0, v5001=3, v5056=0, v5002=7, v5057=0, v5003=7, v5058=0, v5004=7, v5059=0, v5005=7, v5060=0, v5006=3, v5061=0, v5007=7, v5062=0}
rels:
undirected inequalities:
[]
