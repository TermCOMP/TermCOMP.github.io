YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/NRTi7.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1494 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 41 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 37 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 0 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 12 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/NRTi7.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/NRTi7.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %6
	6:
		%7 = load %3
		%8 = load %4
		%9 = add i32 %7, %8
		%10 = icmp sgt %9 0
		br %10, %11, %28
	11:
		%12 = load %3
		%13 = icmp sgt %12 0
		br %13, %14, %17
	14:
		%15 = load %3
		%16 = sub i32 %15, 1
		store %16, %3
		br %25
	17:
		%18 = load %4
		%19 = icmp sgt %18 0
		br %19, %20, %23
	20:
		%21 = load %4
		%22 = sub i32 %21, 1
		store %22, %4
		br %24
	23:
		br %24
	24:
		br %25
	25:
		%26 = load %5
		%27 = add i32 %26, 1
		store %27, %5
		br %6
	28:
		%29 = load %5
		ret %29

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 50
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_606(v624, v625, v626, v627, v628, 0, v630, 1, v632, v633, v634, v635, v636, v637, v638, v639, 3, 4) -> f_607(v624, v625, v626, v627, v628, 0, v630, 1, v633, v634, v635, v636, v637, v638, v639, 3, 4) :|: 0 = 0
f_607(v624, v625, v626, v627, v628, 0, v630, 1, v633, v634, v635, v636, v637, v638, v639, 3, 4) -> f_608(v624, v625, v626, v627, v628, 0, v630, 1, v633, v640, v634, v635, v636, v637, v638, v639, 3, 4, 2) :|: v640 = 1 + v633 && 2 <= v640
f_608(v624, v625, v626, v627, v628, 0, v630, 1, v633, v640, v634, v635, v636, v637, v638, v639, 3, 4, 2) -> f_609(v624, v625, v626, v627, v628, 0, v630, 1, v633, v640, v634, v635, v636, v637, v638, v639, 3, 4, 2) :|: TRUE
f_609(v624, v625, v626, v627, v628, 0, v630, 1, v633, v640, v634, v635, v636, v637, v638, v639, 3, 4, 2) -> f_610(v624, v625, v626, v627, v628, 0, v630, 1, v633, v640, v634, v635, v636, v637, v638, v639, 3, 4, 2) :|: TRUE
f_610(v624, v625, v626, v627, v628, 0, v630, 1, v633, v640, v634, v635, v636, v637, v638, v639, 3, 4, 2) -> f_611(v624, v625, v626, v627, v628, 0, v630, 1, v633, v640, v634, v635, v636, v637, v638, v639, 3, 4, 2) :|: 0 = 0
f_611(v624, v625, v626, v627, v628, 0, v630, 1, v633, v640, v634, v635, v636, v637, v638, v639, 3, 4, 2) -> f_612(v624, v625, v626, v627, v628, 0, v634, v630, 1, v633, v640, v635, v636, v637, v638, v639, 3, 4, 2) :|: 0 = 0
f_612(v624, v625, v626, v627, v628, 0, v634, v630, 1, v633, v640, v635, v636, v637, v638, v639, 3, 4, 2) -> f_613(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 4, 2) :|: 0 = 0
f_613(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 4, 2) -> f_614(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) :|: 0 < v634 && 2 <= v630 && 2 <= v625
f_614(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) -> f_616(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) :|: 0 = 0
f_616(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) -> f_618(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) :|: TRUE
f_618(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) -> f_620(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) :|: 0 = 0
f_620(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) -> f_622(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) :|: 0 = 0
f_622(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) -> f_624(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) :|: TRUE
f_624(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) -> f_625(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) :|: 0 = 0
f_625(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) -> f_626(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) :|: 0 = 0
f_626(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) -> f_627(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) :|: TRUE
f_627(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v630, v635, v636, v637, v638, v639, 3, 2, 4) -> f_628(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v635, v636, v637, v638, v639, 3, 2, 4) :|: 0 = 0
f_628(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v635, v636, v637, v638, v639, 3, 2, 4) -> f_629(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v669, v635, v636, v637, v638, v639, 3, 2, 4) :|: 1 + v669 = v634 && 0 <= v669
f_629(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v669, v635, v636, v637, v638, v639, 3, 2, 4) -> f_630(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v669, v635, v636, v637, v638, v639, 3, 2, 4) :|: TRUE
f_630(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v669, v635, v636, v637, v638, v639, 3, 2, 4) -> f_631(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v669, v635, v636, v637, v638, v639, 3, 2, 4) :|: TRUE
f_631(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v669, v635, v636, v637, v638, v639, 3, 2, 4) -> f_605(v624, v625, v626, v627, v628, 0, v634, 1, v633, v640, v669, v635, v636, v637, v638, v639, 3, 4) :|: TRUE
f_605(v624, v625, v626, v627, v628, 0, v630, 1, v632, v633, v634, v635, v636, v637, v638, v639, 3, 4) -> f_606(v624, v625, v626, v627, v628, 0, v630, 1, v632, v633, v634, v635, v636, v637, v638, v639, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_606(v624:0, v625:0, v626:0, v627:0, v628:0, 0, v630:0, 1, v632:0, v633:0, 1 + v669:0, v635:0, v636:0, v637:0, v638:0, v639:0, 3, 4) -> f_606(v624:0, v625:0, v626:0, v627:0, v628:0, 0, 1 + v669:0, 1, v633:0, 1 + v633:0, v669:0, v635:0, v636:0, v637:0, v638:0, v639:0, 3, 4) :|: v633:0 > 0 && v630:0 > 1 && v669:0 > -1 && v625:0 > 1
Filtered unneeded arguments:
   f_606(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_606(x2, x7, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_606(v625:0, v630:0, v633:0, sum~cons_1~v669:0) -> f_606(v625:0, 1 + v669:0, 1 + v633:0, v669:0) :|: v630:0 > 1 && v633:0 > 0 && v625:0 > 1 && v669:0 > -1 && sum~cons_1~v669:0 = 1 + v669:0

----------------------------------------

(9)
Obligation:
Rules:
f_606(v625:0, v630:0, v633:0, sum~cons_1~v669:0) -> f_606(v625:0, 1 + v669:0, 1 + v633:0, v669:0) :|: v630:0 > 1 && v633:0 > 0 && v625:0 > 1 && v669:0 > -1 && sum~cons_1~v669:0 = 1 + v669:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_606(v625:0:0, v630:0:0, v633:0:0, sum~cons_1~v669:0:0) -> f_606(v625:0:0, 1 + v669:0:0, 1 + v633:0:0, v669:0:0) :|: v625:0:0 > 1 && v669:0:0 > -1 && v633:0:0 > 0 && v630:0:0 > 1 && sum~cons_1~v669:0:0 = 1 + v669:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_606 ] = f_606_4

The following rules are decreasing:
f_606(v625:0:0, v630:0:0, v633:0:0, sum~cons_1~v669:0:0) -> f_606(v625:0:0, 1 + v669:0:0, 1 + v633:0:0, v669:0:0) :|: v625:0:0 > 1 && v669:0:0 > -1 && v633:0:0 > 0 && v630:0:0 > 1 && sum~cons_1~v669:0:0 = 1 + v669:0:0

The following rules are bounded:
f_606(v625:0:0, v630:0:0, v633:0:0, sum~cons_1~v669:0:0) -> f_606(v625:0:0, 1 + v669:0:0, 1 + v633:0:0, v669:0:0) :|: v625:0:0 > 1 && v669:0:0 > -1 && v633:0:0 > 0 && v630:0:0 > 1 && sum~cons_1~v669:0:0 = 1 + v669:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_529(v396, v397, v398, v399, v400, v401, v402, 1, 0, v405, v406, v407, v408, v409, v410, v411, v412, 3, 4) -> f_531(v396, v397, v398, v399, v400, v405, v402, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 4) :|: 0 = 0
f_531(v396, v397, v398, v399, v400, v405, v402, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 4) -> f_533(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 4) :|: v445 = v396 + v405
f_533(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 4) -> f_535(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: 0 < v445 && 1 <= v405 && 2 <= v401 && 2 <= v397
f_535(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_538(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: 0 = 0
f_538(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_541(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: TRUE
f_541(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_545(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: 0 = 0
f_545(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_549(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: 0 = 0
f_549(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_553(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: TRUE
f_553(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_556(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: 0 = 0
f_556(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_559(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: 0 = 0
f_559(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_561(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: TRUE
f_561(v396, v397, v398, v399, v400, v405, v445, 1, 0, v401, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_563(v396, v397, v398, v399, v400, v405, v445, 1, 0, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: 0 = 0
f_563(v396, v397, v398, v399, v400, v405, v445, 1, 0, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_565(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: 1 + v493 = v405 && 0 <= v493
f_565(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_567(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: TRUE
f_567(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_569(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: TRUE
f_569(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_571(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: TRUE
f_571(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v406, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_573(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v407, v408, v409, v410, v411, v412, 3, 2, 4) :|: 0 = 0
f_573(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v407, v408, v409, v410, v411, v412, 3, 2, 4) -> f_576(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v407, v552, v408, v409, v410, v411, v412, 3, 2, 4) :|: v552 = 1 + v407 && 2 <= v552
f_576(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v407, v552, v408, v409, v410, v411, v412, 3, 2, 4) -> f_578(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v407, v552, v408, v409, v410, v411, v412, 3, 2, 4) :|: TRUE
f_578(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v407, v552, v408, v409, v410, v411, v412, 3, 2, 4) -> f_580(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v407, v552, v408, v409, v410, v411, v412, 3, 2, 4) :|: TRUE
f_580(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v407, v552, v408, v409, v410, v411, v412, 3, 2, 4) -> f_527(v396, v397, v398, v399, v400, v405, v445, 1, 0, v493, v407, v552, v408, v409, v410, v411, v412, 3, 4) :|: TRUE
f_527(v396, v397, v398, v399, v400, v401, v402, 1, 0, v405, v406, v407, v408, v409, v410, v411, v412, 3, 4) -> f_529(v396, v397, v398, v399, v400, v401, v402, 1, 0, v405, v406, v407, v408, v409, v410, v411, v412, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_529(v396:0, v397:0, v398:0, v399:0, v400:0, v401:0, v402:0, 1, 0, 1 + v493:0, v406:0, v407:0, v408:0, v409:0, v410:0, v411:0, v412:0, 3, 4) -> f_529(v396:0, v397:0, v398:0, v399:0, v400:0, 1 + v493:0, v396:0 + (1 + v493:0), 1, 0, v493:0, v407:0, 1 + v407:0, v408:0, v409:0, v410:0, v411:0, v412:0, 3, 4) :|: v493:0 > -1 && v396:0 + (1 + v493:0) > 0 && v401:0 > 1 && v397:0 > 1 && v407:0 > 0
Filtered unneeded arguments:
   f_529(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_529(x1, x2, x6, x10, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_529(v396:0, v397:0, v401:0, sum~cons_1~v493:0, v407:0) -> f_529(v396:0, v397:0, 1 + v493:0, v493:0, 1 + v407:0) :|: v396:0 + (1 + v493:0) > 0 && v493:0 > -1 && v401:0 > 1 && v407:0 > 0 && v397:0 > 1 && sum~cons_1~v493:0 = 1 + v493:0

----------------------------------------

(16)
Obligation:
Rules:
f_529(v396:0, v397:0, v401:0, sum~cons_1~v493:0, v407:0) -> f_529(v396:0, v397:0, 1 + v493:0, v493:0, 1 + v407:0) :|: v396:0 + (1 + v493:0) > 0 && v493:0 > -1 && v401:0 > 1 && v407:0 > 0 && v397:0 > 1 && sum~cons_1~v493:0 = 1 + v493:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_529(v396:0:0, v397:0:0, v401:0:0, sum~cons_1~v493:0:0, v407:0:0) -> f_529(v396:0:0, v397:0:0, 1 + v493:0:0, v493:0:0, 1 + v407:0:0) :|: v407:0:0 > 0 && v397:0:0 > 1 && v401:0:0 > 1 && v493:0:0 > -1 && v396:0:0 + (1 + v493:0:0) > 0 && sum~cons_1~v493:0:0 = 1 + v493:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_529(x, x1, x2, x3, x4)] = x3

The following rules are decreasing:
f_529(v396:0:0, v397:0:0, v401:0:0, sum~cons_1~v493:0:0, v407:0:0) -> f_529(v396:0:0, v397:0:0, 1 + v493:0:0, v493:0:0, 1 + v407:0:0) :|: v407:0:0 > 0 && v397:0:0 > 1 && v401:0:0 > 1 && v493:0:0 > -1 && v396:0:0 + (1 + v493:0:0) > 0 && sum~cons_1~v493:0:0 = 1 + v493:0:0
The following rules are bounded:
f_529(v396:0:0, v397:0:0, v401:0:0, sum~cons_1~v493:0:0, v407:0:0) -> f_529(v396:0:0, v397:0:0, 1 + v493:0:0, v493:0:0, 1 + v407:0:0) :|: v407:0:0 > 0 && v397:0:0 > 1 && v401:0:0 > 1 && v493:0:0 > -1 && v396:0:0 + (1 + v493:0:0) > 0 && sum~cons_1~v493:0:0 = 1 + v493:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_468(v295, v296, v297, v298, v299, v303, v301, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 4) -> f_470(v295, v296, v297, v298, v299, v303, v301, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 4) :|: 0 = 0
f_470(v295, v296, v297, v298, v299, v303, v301, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 4) -> f_473(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 4) :|: v322 = v303 + v296
f_473(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 4) -> f_476(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 4) :|: 0 < v322
f_476(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 4) -> f_480(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 4) :|: 0 = 0
f_480(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 4) -> f_484(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 4) :|: TRUE
f_484(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 4) -> f_488(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 4) :|: 0 = 0
f_488(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 4) -> f_491(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) :|: 0 < v303 && 2 <= v300 && 2 <= v295
f_491(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) -> f_495(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) :|: 0 = 0
f_495(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) -> f_498(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) :|: TRUE
f_498(v295, v296, v297, v298, v299, v303, v322, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) -> f_501(v295, v296, v297, v298, v299, v303, v322, 1, v304, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) :|: 0 = 0
f_501(v295, v296, v297, v298, v299, v303, v322, 1, v304, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) -> f_504(v295, v296, v297, v298, v299, v303, v322, 1, v323, v304, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) :|: 1 + v323 = v303 && 0 <= v323
f_504(v295, v296, v297, v298, v299, v303, v322, 1, v323, v304, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) -> f_507(v295, v296, v297, v298, v299, v303, v322, 1, v323, v304, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) :|: TRUE
f_507(v295, v296, v297, v298, v299, v303, v322, 1, v323, v304, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) -> f_510(v295, v296, v297, v298, v299, v303, v322, 1, v323, v304, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) :|: TRUE
f_510(v295, v296, v297, v298, v299, v303, v322, 1, v323, v304, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) -> f_513(v295, v296, v297, v298, v299, v303, v322, 1, v323, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) :|: 0 = 0
f_513(v295, v296, v297, v298, v299, v303, v322, 1, v323, v305, v306, v307, v308, v309, v310, 0, 3, 2, 4) -> f_516(v295, v296, v297, v298, v299, v303, v322, 1, v323, v305, v334, v306, v307, v308, v309, v310, 0, 3, 2, 4) :|: v334 = 1 + v305 && 2 <= v334
f_516(v295, v296, v297, v298, v299, v303, v322, 1, v323, v305, v334, v306, v307, v308, v309, v310, 0, 3, 2, 4) -> f_519(v295, v296, v297, v298, v299, v303, v322, 1, v323, v305, v334, v306, v307, v308, v309, v310, 0, 3, 2, 4) :|: TRUE
f_519(v295, v296, v297, v298, v299, v303, v322, 1, v323, v305, v334, v306, v307, v308, v309, v310, 0, 3, 2, 4) -> f_522(v295, v296, v297, v298, v299, v303, v322, 1, v323, v305, v334, v306, v307, v308, v309, v310, 0, 3, 2, 4) :|: TRUE
f_522(v295, v296, v297, v298, v299, v303, v322, 1, v323, v305, v334, v306, v307, v308, v309, v310, 0, 3, 2, 4) -> f_466(v295, v296, v297, v298, v299, v303, v322, 1, v323, v305, v334, v306, v307, v308, v309, v310, 0, 3, 4) :|: TRUE
f_466(v295, v296, v297, v298, v299, v300, v301, 1, v303, v304, v305, v306, v307, v308, v309, v310, 0, 3, 4) -> f_468(v295, v296, v297, v298, v299, v303, v301, 1, v300, v304, v305, v306, v307, v308, v309, v310, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_468(v295:0, v296:0, v297:0, v298:0, v299:0, 1 + v323:0, v301:0, 1, v300:0, v304:0, v305:0, v306:0, v307:0, v308:0, v309:0, v310:0, 0, 3, 4) -> f_468(v295:0, v296:0, v297:0, v298:0, v299:0, v323:0, 1 + v323:0 + v296:0, 1, 1 + v323:0, v305:0, 1 + v305:0, v306:0, v307:0, v308:0, v309:0, v310:0, 0, 3, 4) :|: 1 + v323:0 + v296:0 > 0 && v300:0 > 1 && v323:0 > -1 && v295:0 > 1 && v305:0 > 0
Filtered unneeded arguments:
   f_468(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_468(x1, x2, x6, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_468(v295:0, v296:0, sum~cons_1~v323:0, v300:0, v305:0) -> f_468(v295:0, v296:0, v323:0, 1 + v323:0, 1 + v305:0) :|: v300:0 > 1 && 1 + v323:0 + v296:0 > 0 && v323:0 > -1 && v305:0 > 0 && v295:0 > 1 && sum~cons_1~v323:0 = 1 + v323:0

----------------------------------------

(23)
Obligation:
Rules:
f_468(v295:0, v296:0, sum~cons_1~v323:0, v300:0, v305:0) -> f_468(v295:0, v296:0, v323:0, 1 + v323:0, 1 + v305:0) :|: v300:0 > 1 && 1 + v323:0 + v296:0 > 0 && v323:0 > -1 && v305:0 > 0 && v295:0 > 1 && sum~cons_1~v323:0 = 1 + v323:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_468(v295:0:0, v296:0:0, sum~cons_1~v323:0:0, v300:0:0, v305:0:0) -> f_468(v295:0:0, v296:0:0, v323:0:0, 1 + v323:0:0, 1 + v305:0:0) :|: v305:0:0 > 0 && v295:0:0 > 1 && v323:0:0 > -1 && 1 + v323:0:0 + v296:0:0 > 0 && v300:0:0 > 1 && sum~cons_1~v323:0:0 = 1 + v323:0:0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_468(x, x1, x2, x3, x4)] = -1 + x2

The following rules are decreasing:
f_468(v295:0:0, v296:0:0, sum~cons_1~v323:0:0, v300:0:0, v305:0:0) -> f_468(v295:0:0, v296:0:0, v323:0:0, 1 + v323:0:0, 1 + v305:0:0) :|: v305:0:0 > 0 && v295:0:0 > 1 && v323:0:0 > -1 && 1 + v323:0:0 + v296:0:0 > 0 && v300:0:0 > 1 && sum~cons_1~v323:0:0 = 1 + v323:0:0
The following rules are bounded:
f_468(v295:0:0, v296:0:0, sum~cons_1~v323:0:0, v300:0:0, v305:0:0) -> f_468(v295:0:0, v296:0:0, v323:0:0, 1 + v323:0:0, 1 + v305:0:0) :|: v305:0:0 > 0 && v295:0:0 > 1 && v323:0:0 > -1 && 1 + v323:0:0 + v296:0:0 > 0 && v300:0:0 > 1 && sum~cons_1~v323:0:0 = 1 + v323:0:0

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
