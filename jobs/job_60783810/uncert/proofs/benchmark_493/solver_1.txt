YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/0qTSJ.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 305 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 17 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 6 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 29 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/0qTSJ.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/0qTSJ.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %2
		store 5, %3
		br %4
	4:
		%5 = load %2
		%6 = icmp slt %5 100
		br %6, %7, %10
	7:
		%8 = load %2
		%9 = add i32 %8, 1
		store %9, %2
		br %4
	10:
		br %11
	11:
		%12 = load %3
		%13 = icmp slt %12 21
		br %13, %14, %17
	14:
		%15 = load %3
		%16 = add i32 %15, 3
		store %16, %3
		br %11
	17:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 9 rulesP rules:
f_192(v135, v136, v137, 100, 0, 99, v143, 1, v141, v144, v145, v146, 3, 5, 20, 8, 23, 4) -> f_193(v135, v136, v137, 100, 0, 99, v143, 1, v141, v144, v145, v146, 3, 5, 17, 8, 20, 4) :|: v143 < 21 && v141 <= 17
f_193(v135, v136, v137, 100, 0, 99, v143, 1, v141, v144, v145, v146, 3, 5, 17, 8, 20, 4) -> f_195(v135, v136, v137, 100, 0, 99, v143, 1, v141, v144, v145, v146, 3, 5, 17, 8, 20, 4) :|: 0 = 0
f_195(v135, v136, v137, 100, 0, 99, v143, 1, v141, v144, v145, v146, 3, 5, 17, 8, 20, 4) -> f_197(v135, v136, v137, 100, 0, 99, v143, 1, v141, v144, v145, v146, 3, 5, 17, 8, 20, 4) :|: TRUE
f_197(v135, v136, v137, 100, 0, 99, v143, 1, v141, v144, v145, v146, 3, 5, 17, 8, 20, 4) -> f_199(v135, v136, v137, 100, 0, 99, v143, 1, v144, v145, v146, 3, 8, 20, 4) :|: 0 = 0
f_199(v135, v136, v137, 100, 0, 99, v143, 1, v144, v145, v146, 3, 8, 20, 4) -> f_200(v135, v136, v137, 100, 0, 99, v143, 1, v147, v144, v145, v146, 3, 8, 20, 4, 11, 23) :|: v147 = 3 + v143 && 11 <= v147 && v147 <= 23
f_200(v135, v136, v137, 100, 0, 99, v143, 1, v147, v144, v145, v146, 3, 8, 20, 4, 11, 23) -> f_201(v135, v136, v137, 100, 0, 99, v143, 1, v147, v144, v145, v146, 3, 8, 20, 4, 11, 23) :|: TRUE
f_201(v135, v136, v137, 100, 0, 99, v143, 1, v147, v144, v145, v146, 3, 8, 20, 4, 11, 23) -> f_202(v135, v136, v137, 100, 0, 99, v143, 1, v147, v144, v145, v146, 3, 8, 20, 4, 11, 23) :|: TRUE
f_202(v135, v136, v137, 100, 0, 99, v143, 1, v147, v144, v145, v146, 3, 8, 20, 4, 11, 23) -> f_191(v135, v136, v137, 100, 0, 99, v143, 1, v147, v144, v145, v146, 3, 5, 20, 8, 23, 4) :|: TRUE
f_191(v135, v136, v137, 100, 0, 99, v141, 1, v143, v144, v145, v146, 3, 5, 20, 8, 23, 4) -> f_192(v135, v136, v137, 100, 0, 99, v143, 1, v141, v144, v145, v146, 3, 5, 20, 8, 23, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_192(v135:0, v136:0, v137:0, 100, 0, 99, v143:0, 1, v141:0, v144:0, v145:0, v146:0, 3, 5, 20, 8, 23, 4) -> f_192(v135:0, v136:0, v137:0, 100, 0, 99, 3 + v143:0, 1, v143:0, v144:0, v145:0, v146:0, 3, 5, 20, 8, 23, 4) :|: v141:0 < 18 && v143:0 < 21 && v143:0 > 7
Filtered unneeded arguments:
   f_192(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_192(x7, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_192(v143:0, v141:0) -> f_192(3 + v143:0, v143:0) :|: v143:0 < 21 && v143:0 > 7 && v141:0 < 18

----------------------------------------

(9)
Obligation:
Rules:
f_192(v143:0, v141:0) -> f_192(3 + v143:0, v143:0) :|: v143:0 < 21 && v143:0 > 7 && v141:0 < 18

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_192(v143:0:0, v141:0:0) -> f_192(3 + v143:0:0, v143:0:0) :|: v143:0:0 < 21 && v143:0:0 > 7 && v141:0:0 < 18

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_192 ] = -1/3*f_192_1

The following rules are decreasing:
f_192(v143:0:0, v141:0:0) -> f_192(3 + v143:0:0, v143:0:0) :|: v143:0:0 < 21 && v143:0:0 > 7 && v141:0:0 < 18

The following rules are bounded:
f_192(v143:0:0, v141:0:0) -> f_192(3 + v143:0:0, v143:0:0) :|: v143:0:0 < 21 && v143:0:0 > 7 && v141:0:0 < 18


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 9 rulesP rules:
f_149(v59, v60, v61, v64, 1, v62, v65, v66, v67, 0, 5, 3, 99, 100, 4) -> f_150(v59, v60, v61, v64, 1, v62, v65, v66, v67, 0, 5, 3, 98, 99, 4) :|: v64 < 100 && v62 <= 98
f_150(v59, v60, v61, v64, 1, v62, v65, v66, v67, 0, 5, 3, 98, 99, 4) -> f_152(v59, v60, v61, v64, 1, v62, v65, v66, v67, 0, 5, 3, 98, 99, 4) :|: 0 = 0
f_152(v59, v60, v61, v64, 1, v62, v65, v66, v67, 0, 5, 3, 98, 99, 4) -> f_154(v59, v60, v61, v64, 1, v62, v65, v66, v67, 0, 5, 3, 98, 99, 4) :|: TRUE
f_154(v59, v60, v61, v64, 1, v62, v65, v66, v67, 0, 5, 3, 98, 99, 4) -> f_156(v59, v60, v61, v64, 1, v65, v66, v67, 0, 5, 3, 99, 4) :|: 0 = 0
f_156(v59, v60, v61, v64, 1, v65, v66, v67, 0, 5, 3, 99, 4) -> f_158(v59, v60, v61, v64, 1, v70, v65, v66, v67, 0, 5, 3, 99, 4, 2, 100) :|: v70 = 1 + v64 && 2 <= v70 && v70 <= 100
f_158(v59, v60, v61, v64, 1, v70, v65, v66, v67, 0, 5, 3, 99, 4, 2, 100) -> f_160(v59, v60, v61, v64, 1, v70, v65, v66, v67, 0, 5, 3, 99, 4, 2, 100) :|: TRUE
f_160(v59, v60, v61, v64, 1, v70, v65, v66, v67, 0, 5, 3, 99, 4, 2, 100) -> f_162(v59, v60, v61, v64, 1, v70, v65, v66, v67, 0, 5, 3, 99, 4, 2, 100) :|: TRUE
f_162(v59, v60, v61, v64, 1, v70, v65, v66, v67, 0, 5, 3, 99, 4, 2, 100) -> f_148(v59, v60, v61, v64, 1, v70, v65, v66, v67, 0, 5, 3, 99, 100, 4) :|: TRUE
f_148(v59, v60, v61, v62, 1, v64, v65, v66, v67, 0, 5, 3, 99, 100, 4) -> f_149(v59, v60, v61, v64, 1, v62, v65, v66, v67, 0, 5, 3, 99, 100, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_149(v59:0, v60:0, v61:0, v64:0, 1, v62:0, v65:0, v66:0, v67:0, 0, 5, 3, 99, 100, 4) -> f_149(v59:0, v60:0, v61:0, 1 + v64:0, 1, v64:0, v65:0, v66:0, v67:0, 0, 5, 3, 99, 100, 4) :|: v62:0 < 99 && v64:0 < 100 && v64:0 > 0
Filtered unneeded arguments:
   f_149(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_149(x4, x6)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_149(v64:0, v62:0) -> f_149(1 + v64:0, v64:0) :|: v64:0 < 100 && v64:0 > 0 && v62:0 < 99

----------------------------------------

(16)
Obligation:
Rules:
f_149(v64:0, v62:0) -> f_149(1 + v64:0, v64:0) :|: v64:0 < 100 && v64:0 > 0 && v62:0 < 99

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_149(v64:0:0, v62:0:0) -> f_149(1 + v64:0:0, v64:0:0) :|: v64:0:0 < 100 && v64:0:0 > 0 && v62:0:0 < 99

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_149 ] = -1*f_149_1

The following rules are decreasing:
f_149(v64:0:0, v62:0:0) -> f_149(1 + v64:0:0, v64:0:0) :|: v64:0:0 < 100 && v64:0:0 > 0 && v62:0:0 < 99

The following rules are bounded:
f_149(v64:0:0, v62:0:0) -> f_149(1 + v64:0:0, v64:0:0) :|: v64:0:0 < 100 && v64:0:0 > 0 && v62:0:0 < 99


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
