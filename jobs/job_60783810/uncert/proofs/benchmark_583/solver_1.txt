MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/nIS7B.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 63 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/nIS7B.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/nIS7B.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

struct.slave_item --> BasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item)

struct.master_item --> BasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item)

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "malloc" returnParam: *i8 noalias parameters: (i64) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "abort" returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "free" returnParam: BasicVoidType parameters: (*i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "alloc_or_die_slave" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item) parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca *BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item), align 8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item) %1)
		%2 = call noalias *i8 @malloc(i64 16)
		%3 = bitcast *i8 %2 to *BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item)
		store %3, %1
		%4 = load %1
		%5 = icmp ne %4 null
		br %5, %7, %6
	6:
		Unnamed Call-Instruction = call BasicVoidType @abort()
		unreachable
	7:
		%8 = load %1
		%9 = getelementptr %8, 0, 0
		store null, %9
		%10 = load %1
		%11 = getelementptr %10, 0, 1
		store null, %11
		%12 = load %1
		ret %12

*BasicFunctionTypename: "alloc_or_die_master" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 33
	0:
		%1 = alloca *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item), align 8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %1)
		%2 = call noalias *i8 @malloc(i64 24)
		%3 = bitcast *i8 %2 to *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item)
		store %3, %1
		%4 = load %1
		%5 = icmp ne %4 null
		br %5, %7, %6
	6:
		Unnamed Call-Instruction = call BasicVoidType @abort()
		unreachable
	7:
		%8 = load %1
		%9 = getelementptr %8, 0, 0
		store null, %9
		%10 = load %1
		%11 = getelementptr %10, 0, 1
		store null, %11
		%12 = load %1
		%13 = getelementptr %12, 0, 2
		store null, %13
		%14 = load %1
		ret %14

*BasicFunctionTypename: "dll_insert_slave" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 **BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 60
	0:
		%2 = alloca **BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item), align 8
		%3 = alloca *BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item), align 8
		%4 = alloca *BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item), align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(***BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item) %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item) %3)
		%5 = call *BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item) @alloc_or_die_slave()
		store %5, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item) %4)
		%6 = load %2
		%7 = load %6
		store %7, %4
		%8 = load %4
		%9 = load %3
		%10 = getelementptr %9, 0, 0
		store %8, %10
		%11 = load %4
		%12 = icmp ne %11 null
		br %12, %13, %17
	13:
		%14 = load %3
		%15 = load %4
		%16 = getelementptr %15, 0, 1
		store %14, %16
		br %17
	17:
		%18 = load %3
		%19 = load %2
		store %18, %19
		ret void

*BasicFunctionTypename: "dll_create_generic" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *BasicFunctionType varArgs: truereturnType: BasicVoidTypeparamTypes: ()) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 88
	0:
		%2 = alloca *BasicFunctionType varArgs: truereturnType: BasicVoidTypeparamTypes: (), align 8
		%3 = alloca *i8, align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicFunctionType varArgs: truereturnType: BasicVoidTypeparamTypes: () %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store null, %3
		%4 = load %2
		%5 = bitcast *BasicFunctionType varArgs: truereturnType: BasicVoidTypeparamTypes: () %4 to *BasicFunctionType varArgs: truereturnType: BasicVoidTypeparamTypes: (**i8)
		Unnamed Call-Instruction = call BasicVoidType (**i8,...)* %5(**i8 %3)
		%6 = load %2
		%7 = bitcast *BasicFunctionType varArgs: truereturnType: BasicVoidTypeparamTypes: () %6 to *BasicFunctionType varArgs: truereturnType: BasicVoidTypeparamTypes: (**i8)
		Unnamed Call-Instruction = call BasicVoidType (**i8,...)* %7(**i8 %3)
		br %8
	8:
		%9 = call i32 @__VERIFIER_nondet_int()
		%10 = icmp ne %9 0
		br %10, %11, %14
	11:
		%12 = load %2
		%13 = bitcast *BasicFunctionType varArgs: truereturnType: BasicVoidTypeparamTypes: () %12 to *BasicFunctionType varArgs: truereturnType: BasicVoidTypeparamTypes: (**i8)
		Unnamed Call-Instruction = call BasicVoidType (**i8,...)* %13(**i8 %3)
		br %8
	14:
		%15 = load %3
		ret %15

*BasicFunctionTypename: "dll_create_slave" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item) parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 107
	0:
		%1 = call *i8 @dll_create_generic(*BasicFunctionType varArgs: truereturnType: BasicVoidTypeparamTypes: () aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMConversionConstExpr@4c7ec51b)
		%2 = bitcast *i8 %1 to *BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item)
		ret %2

*BasicFunctionTypename: "dll_destroy_slave" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 110
	0:
		%2 = alloca *BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item), align 8
		%3 = alloca *BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item), align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item) %2)
		br %4
	4:
		%5 = load %2
		%6 = icmp ne %5 null
		br %6, %7, %14
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item) %3)
		%8 = load %2
		%9 = getelementptr %8, 0, 0
		%10 = load %9
		store %10, %3
		%11 = load %2
		%12 = bitcast *BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item) %11 to *i8
		Unnamed Call-Instruction = call BasicVoidType @free(*i8 %12)
		%13 = load %3
		store %13, %2
		br %4
	14:
		ret void

*BasicFunctionTypename: "dll_destroy_nested_lists" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 129
	0:
		%2 = alloca *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item), align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %2)
		br %3
	3:
		%4 = load %2
		%5 = icmp ne %4 null
		br %5, %6, %13
	6:
		%7 = load %2
		%8 = getelementptr %7, 0, 2
		%9 = load %8
		Unnamed Call-Instruction = call BasicVoidType @dll_destroy_slave(*BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item) %9)
		%10 = load %2
		%11 = getelementptr %10, 0, 0
		%12 = load %11
		store %12, %2
		br %3
	13:
		ret void

*BasicFunctionTypename: "dll_reinit_nested_lists" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 146
	0:
		%2 = alloca *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item), align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %2)
		br %3
	3:
		%4 = load %2
		%5 = icmp ne %4 null
		br %5, %6, %12
	6:
		%7 = load %2
		%8 = getelementptr %7, 0, 2
		store null, %8
		%9 = load %2
		%10 = getelementptr %9, 0, 0
		%11 = load %10
		store %11, %2
		br %3
	12:
		ret void

*BasicFunctionTypename: "dll_destroy_master" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 161
	0:
		%2 = alloca *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item), align 8
		%3 = alloca *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item), align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %2)
		br %4
	4:
		%5 = load %2
		%6 = icmp ne %5 null
		br %6, %7, %14
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %3)
		%8 = load %2
		%9 = getelementptr %8, 0, 0
		%10 = load %9
		store %10, %3
		%11 = load %2
		%12 = bitcast *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %11 to *i8
		Unnamed Call-Instruction = call BasicVoidType @free(*i8 %12)
		%13 = load %3
		store %13, %2
		br %4
	14:
		ret void

*BasicFunctionTypename: "dll_insert_master" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 **BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 178
	0:
		%2 = alloca **BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item), align 8
		%3 = alloca *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item), align 8
		%4 = alloca *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item), align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(***BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %3)
		%5 = call *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) @alloc_or_die_master()
		store %5, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %4)
		%6 = load %2
		%7 = load %6
		store %7, %4
		%8 = load %4
		%9 = load %3
		%10 = getelementptr %9, 0, 0
		store %8, %10
		%11 = load %4
		%12 = icmp ne %11 null
		br %12, %13, %17
	13:
		%14 = load %3
		%15 = load %4
		%16 = getelementptr %15, 0, 1
		store %14, %16
		br %17
	17:
		%18 = call *BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item) @dll_create_slave()
		%19 = load %3
		%20 = getelementptr %19, 0, 2
		store %18, %20
		%21 = load %3
		%22 = load %2
		store %21, %22
		ret void

*BasicFunctionTypename: "dll_create_master" linkageType: EXTERNALLY_VISIBLE returnParam: *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 210
	0:
		%1 = call *i8 @dll_create_generic(*BasicFunctionType varArgs: truereturnType: BasicVoidTypeparamTypes: () aprove.InputModules.Programs.llvm.internalStructures.literals.const_expr.LLVMConversionConstExpr@210473e7)
		%2 = bitcast *i8 %1 to *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item)
		ret %2

*BasicFunctionTypename: "inspect_base" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 213
	0:
		%2 = alloca *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item), align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %2)
		br %3
	3:
		%4 = load %2
		%5 = icmp ne %4 null
		br %5, %7, %6
	6:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %7
	7:
		br %8
	8:
		br %9
	9:
		%10 = load %2
		%11 = getelementptr %10, 0, 0
		%12 = load %11
		%13 = icmp ne %12 null
		br %13, %15, %14
	14:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %15
	15:
		br %16
	16:
		br %17
	17:
		%18 = load %2
		%19 = getelementptr %18, 0, 1
		%20 = load %19
		%21 = icmp ne %20 null
		br %21, %22, %23
	22:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %23
	23:
		br %24
	24:
		%25 = load %2
		%26 = getelementptr %25, 0, 0
		%27 = load %26
		store %27, %2
		br %28
	28:
		%29 = load %2
		%30 = icmp ne %29 null
		br %30, %31, %65
	31:
		br %32
	32:
		%33 = load %2
		%34 = getelementptr %33, 0, 1
		%35 = load %34
		%36 = icmp ne %35 null
		br %36, %38, %37
	37:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %38
	38:
		br %39
	39:
		br %40
	40:
		%41 = load %2
		%42 = getelementptr %41, 0, 1
		%43 = load %42
		%44 = getelementptr %43, 0, 0
		%45 = load %44
		%46 = icmp ne %45 null
		br %46, %48, %47
	47:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %48
	48:
		br %49
	49:
		br %50
	50:
		%51 = load %2
		%52 = getelementptr %51, 0, 1
		%53 = load %52
		%54 = getelementptr %53, 0, 0
		%55 = load %54
		%56 = load %2
		%57 = icmp eq %55 %56
		br %57, %59, %58
	58:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %59
	59:
		br %60
	60:
		br %61
	61:
		%62 = load %2
		%63 = getelementptr %62, 0, 0
		%64 = load %63
		store %64, %2
		br %28
	65:
		ret void

*BasicFunctionTypename: "fail" linkageType: INTERNAL returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 288
	0:
		br %1
	1:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable

*BasicFunctionTypename: "inspect_full" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 295
	0:
		%2 = alloca *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item), align 8
		%3 = alloca *BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item), align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %2)
		%4 = load %2
		Unnamed Call-Instruction = call BasicVoidType @inspect_base(*BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %4)
		br %5
	5:
		%6 = load %2
		%7 = icmp ne %6 null
		br %7, %8, %79
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.slave_itemBasicStructureType(elementType: *struct.slave_item, elementType: *struct.slave_item) %3)
		%9 = load %2
		%10 = getelementptr %9, 0, 2
		%11 = load %10
		store %11, %3
		br %12
	12:
		%13 = load %3
		%14 = icmp ne %13 null
		br %14, %16, %15
	15:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %16
	16:
		br %17
	17:
		br %18
	18:
		%19 = load %3
		%20 = getelementptr %19, 0, 0
		%21 = load %20
		%22 = icmp ne %21 null
		br %22, %24, %23
	23:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %24
	24:
		br %25
	25:
		br %26
	26:
		%27 = load %3
		%28 = getelementptr %27, 0, 1
		%29 = load %28
		%30 = icmp ne %29 null
		br %30, %31, %32
	31:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %32
	32:
		br %33
	33:
		%34 = load %3
		%35 = getelementptr %34, 0, 0
		%36 = load %35
		store %36, %3
		br %37
	37:
		%38 = load %3
		%39 = icmp ne %38 null
		br %39, %40, %74
	40:
		br %41
	41:
		%42 = load %3
		%43 = getelementptr %42, 0, 1
		%44 = load %43
		%45 = icmp ne %44 null
		br %45, %47, %46
	46:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %47
	47:
		br %48
	48:
		br %49
	49:
		%50 = load %3
		%51 = getelementptr %50, 0, 1
		%52 = load %51
		%53 = getelementptr %52, 0, 0
		%54 = load %53
		%55 = icmp ne %54 null
		br %55, %57, %56
	56:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %57
	57:
		br %58
	58:
		br %59
	59:
		%60 = load %3
		%61 = getelementptr %60, 0, 1
		%62 = load %61
		%63 = getelementptr %62, 0, 0
		%64 = load %63
		%65 = load %3
		%66 = icmp eq %64 %65
		br %66, %68, %67
	67:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %68
	68:
		br %69
	69:
		br %70
	70:
		%71 = load %3
		%72 = getelementptr %71, 0, 0
		%73 = load %72
		store %73, %3
		br %37
	74:
		br %75
	75:
		%76 = load %2
		%77 = getelementptr %76, 0, 0
		%78 = load %77
		store %78, %2
		br %5
	79:
		ret void

*BasicFunctionTypename: "inspect_dangling" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 389
	0:
		%2 = alloca *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item), align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %2)
		%3 = load %2
		Unnamed Call-Instruction = call BasicVoidType @inspect_base(*BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %3)
		br %4
	4:
		%5 = load %2
		%6 = icmp ne %5 null
		br %6, %7, %20
	7:
		br %8
	8:
		%9 = load %2
		%10 = getelementptr %9, 0, 2
		%11 = load %10
		%12 = icmp ne %11 null
		br %12, %14, %13
	13:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %14
	14:
		br %15
	15:
		br %16
	16:
		%17 = load %2
		%18 = getelementptr %17, 0, 0
		%19 = load %18
		store %19, %2
		br %4
	20:
		ret void

*BasicFunctionTypename: "inspect_init" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item)) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 415
	0:
		%2 = alloca *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item), align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %2)
		%3 = load %2
		Unnamed Call-Instruction = call BasicVoidType @inspect_base(*BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %3)
		br %4
	4:
		%5 = load %2
		%6 = icmp ne %5 null
		br %6, %7, %20
	7:
		br %8
	8:
		%9 = load %2
		%10 = getelementptr %9, 0, 2
		%11 = load %10
		%12 = icmp ne %11 null
		br %12, %13, %14
	13:
		Unnamed Call-Instruction = call BasicVoidType @fail()
		br %14
	14:
		br %15
	15:
		br %16
	16:
		%17 = load %2
		%18 = getelementptr %17, 0, 0
		%19 = load %18
		store %19, %2
		br %4
	20:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 440
	0:
		%1 = alloca i32, align 4
		%2 = alloca *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item), align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %2)
		%3 = call *BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) @dll_create_master()
		store %3, %2
		%4 = load %2
		Unnamed Call-Instruction = call BasicVoidType @inspect_full(*BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %4)
		%5 = load %2
		Unnamed Call-Instruction = call BasicVoidType @dll_destroy_nested_lists(*BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %5)
		%6 = load %2
		Unnamed Call-Instruction = call BasicVoidType @inspect_dangling(*BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %6)
		%7 = load %2
		Unnamed Call-Instruction = call BasicVoidType @dll_reinit_nested_lists(*BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %7)
		%8 = load %2
		Unnamed Call-Instruction = call BasicVoidType @inspect_init(*BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %8)
		%9 = load %2
		Unnamed Call-Instruction = call BasicVoidType @dll_destroy_master(*BasicTypeName typeName: struct.master_itemBasicStructureType(elementType: *struct.master_item, elementType: *struct.master_item, elementType: *struct.slave_item) %9)
		ret 0


Analyze Termination of all function calls matching the pattern:
main()/hpcwork/ff862203/termcomp25/benchmarks/nIS7B.c:47:75: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;
                                                                          ^
/hpcwork/ff862203/termcomp25/benchmarks/nIS7B.c:50:36: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
                                   ^
/hpcwork/ff862203/termcomp25/benchmarks/nIS7B.c:52:36: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
                                   ^
/hpcwork/ff862203/termcomp25/benchmarks/nIS7B.c:54:36: warning: unknown attribute '__leaf__' ignored [-Wunknown-attributes]
