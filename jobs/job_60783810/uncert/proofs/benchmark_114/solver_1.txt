YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/w4STq.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 30 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3311 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 57 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/w4STq.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/w4STq.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "sumOfThirdBytes" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 *i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%3 = alloca *i32, align 8
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %7)
		store 0, %6
		store 0, %5
		br %8
	8:
		%9 = load %5
		%10 = load %4
		%11 = icmp slt %9 %10
		br %11, %12, %28
	12:
		%13 = load %3
		%14 = load %5
		%15 = sext i32 %14 to i64
		%16 = getelementptr %13, %15
		%17 = bitcast *i32 %16 to *i8
		store %17, %7
		%18 = load %7
		%19 = getelementptr %18, 2
		store %19, %7
		%20 = load %6
		%21 = load %7
		%22 = load %21
		%23 = sext i8 %22 to i32
		%24 = add i32 %20, %23
		store %24, %6
		br %25
	25:
		%26 = load %5
		%27 = add i32 %26, 1
		store %27, %5
		br %8
	28:
		%29 = load %6
		ret %29

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 55
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		%5 = load %2
		%6 = icmp slt %5 1
		br %6, %7, %8
	7:
		store 1, %2
		br %8
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%9 = load %2
		%10 = sext i32 %9 to i64
		%11 = mul i64 %10, 4
		%12 = alloca i8, numElementsLit: %11, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %3
		%14 = load %3
		%15 = load %2
		%16 = call i32 @sumOfThirdBytes(*i32 %14, i32 %15)
		ret %16


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 26 rulesP rules:
f_557(v416, v417, v418, v419, v420, v421, v422, v423, 1, v425, v426, v427, v428, v429, v430, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8) -> f_558(v416, v417, v418, v419, v420, v421, v422, v423, 1, v425, v426, v427, v428, v429, v430, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8) :|: 0 = 0
f_558(v416, v417, v418, v419, v420, v421, v422, v423, 1, v425, v426, v427, v428, v429, v430, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8) -> f_559(v416, v417, v418, v419, v420, v421, v422, v423, 1, v426, v427, v428, v429, v430, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8) :|: 0 = 0
f_559(v416, v417, v418, v419, v420, v421, v422, v423, 1, v426, v427, v428, v429, v430, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8) -> f_560(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v426, v427, v428, v429, v430, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: v449 = v416 + 4 * v423 && 5 <= v449
f_560(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v426, v427, v428, v429, v430, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_561(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v426, v427, v428, v429, v430, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_561(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v426, v427, v428, v429, v430, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_562(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v426, v427, v428, v429, v430, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: TRUE
f_562(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v426, v427, v428, v429, v430, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_563(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v427, v428, v429, v430, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_563(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v427, v428, v429, v430, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_564(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v428, v427, v429, v430, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: v451 = 2 + v449 && 7 <= v451
f_564(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v428, v427, v429, v430, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_565(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v428, v427, v429, v430, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: TRUE
f_565(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v428, v427, v429, v430, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_566(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v427, v429, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_566(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v427, v429, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_567(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v429, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_567(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v429, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_568(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v429, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: TRUE
f_568(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v429, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_569(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_569(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_570(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v455, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: v455 = v430 + v453
f_570(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v455, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_571(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v455, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: TRUE
f_571(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v455, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_572(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v455, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: TRUE
f_572(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v455, v425, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_573(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v455, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_573(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v455, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_574(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v455, v458, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: v458 = 1 + v423 && 2 <= v458
f_574(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v455, v458, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_575(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v455, v458, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: TRUE
f_575(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v455, v458, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_576(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v455, v458, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: TRUE
f_576(v416, v417, v418, v419, v420, v421, v422, v423, 1, v449, v451, v430, v453, v455, v458, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_577(v416, v417, v418, v419, v420, v421, v422, v458, 1, v423, v449, v451, v430, v453, v455, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_577(v416, v417, v418, v419, v420, v421, v422, v458, 1, v423, v449, v451, v430, v453, v455, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_578(v416, v417, v418, v419, v420, v421, v422, v458, 1, v423, v449, v451, v430, v453, v455, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) :|: 0 = 0
f_578(v416, v417, v418, v419, v420, v421, v422, v458, 1, v423, v449, v451, v430, v453, v455, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 5) -> f_579(v416, v417, v418, v419, v420, v421, v422, v458, 1, v423, v449, v451, v430, v453, v455, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 12, 5) :|: v458 < v417 && 3 <= v417 && 12 <= v440
f_579(v416, v417, v418, v419, v420, v421, v422, v458, 1, v423, v449, v451, v430, v453, v455, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 12, 5) -> f_581(v416, v417, v418, v419, v420, v421, v422, v458, 1, v423, v449, v451, v430, v453, v455, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 12, 5) :|: 0 = 0
f_581(v416, v417, v418, v419, v420, v421, v422, v458, 1, v423, v449, v451, v430, v453, v455, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 12, 5) -> f_583(v416, v417, v418, v419, v420, v421, v422, v458, 1, v423, v449, v451, v430, v453, v455, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 12, 5) :|: TRUE
f_583(v416, v417, v418, v419, v420, v421, v422, v458, 1, v423, v449, v451, v430, v453, v455, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, v427, v429, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8, 12, 5) -> f_556(v416, v417, v418, v419, v420, v421, v422, v458, 1, v423, v449, v451, v430, v453, v455, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8) :|: TRUE
f_556(v416, v417, v418, v419, v420, v421, v422, v423, 1, v425, v426, v427, v428, v429, v430, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8) -> f_557(v416, v417, v418, v419, v420, v421, v422, v423, 1, v425, v426, v427, v428, v429, v430, v431, v437, v432, v438, v433, v439, v440, v441, v442, v443, v444, v445, 0, v446, v448, v434, v435, v436, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_557(v416:0, v417:0, v418:0, v419:0, v420:0, v421:0, v422:0, v423:0, 1, v425:0, v426:0, v427:0, v428:0, v429:0, v430:0, v431:0, v437:0, v432:0, v438:0, v433:0, v439:0, v440:0, v441:0, v442:0, v443:0, v444:0, v445:0, 0, v446:0, v448:0, v434:0, v435:0, v436:0, 3, 7, 2, 4, 8) -> f_557(v416:0, v417:0, v418:0, v419:0, v420:0, v421:0, v422:0, 1 + v423:0, 1, v423:0, v416:0 + 4 * v423:0, 2 + (v416:0 + 4 * v423:0), v430:0, v453:0, v430:0 + v453:0, v431:0, v437:0, v432:0, v438:0, v433:0, v439:0, v440:0, v441:0, v442:0, v443:0, v444:0, v445:0, 0, v446:0, v448:0, v434:0, v435:0, v436:0, 3, 7, 2, 4, 8) :|: v416:0 + 4 * v423:0 > 4 && v423:0 > 0 && v417:0 > 2 && v440:0 > 11 && v417:0 > 1 + v423:0
Filtered unneeded arguments:
   f_557(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38) -> f_557(x1, x2, x8, x22)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_557(v416:0, v417:0, v423:0, v440:0) -> f_557(v416:0, v417:0, 1 + v423:0, v440:0) :|: v423:0 > 0 && v416:0 + 4 * v423:0 > 4 && v417:0 > 2 && v417:0 > 1 + v423:0 && v440:0 > 11

----------------------------------------

(8)
Obligation:
Rules:
f_557(v416:0, v417:0, v423:0, v440:0) -> f_557(v416:0, v417:0, 1 + v423:0, v440:0) :|: v423:0 > 0 && v416:0 + 4 * v423:0 > 4 && v417:0 > 2 && v417:0 > 1 + v423:0 && v440:0 > 11

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_557(v416:0:0, v417:0:0, v423:0:0, v440:0:0) -> f_557(v416:0:0, v417:0:0, 1 + v423:0:0, v440:0:0) :|: v417:0:0 > 1 + v423:0:0 && v440:0:0 > 11 && v417:0:0 > 2 && v416:0:0 + 4 * v423:0:0 > 4 && v423:0:0 > 0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_557(x, x1, x2, x3)] = -2 + x1 - x2

The following rules are decreasing:
f_557(v416:0:0, v417:0:0, v423:0:0, v440:0:0) -> f_557(v416:0:0, v417:0:0, 1 + v423:0:0, v440:0:0) :|: v417:0:0 > 1 + v423:0:0 && v440:0:0 > 11 && v417:0:0 > 2 && v416:0:0 + 4 * v423:0:0 > 4 && v423:0:0 > 0
The following rules are bounded:
f_557(v416:0:0, v417:0:0, v423:0:0, v440:0:0) -> f_557(v416:0:0, v417:0:0, 1 + v423:0:0, v440:0:0) :|: v417:0:0 > 1 + v423:0:0 && v440:0:0 > 11 && v417:0:0 > 2 && v416:0:0 + 4 * v423:0:0 > 4 && v423:0:0 > 0

----------------------------------------

(12)
YES
/hpcwork/ff862203/termcomp25/benchmarks/w4STq.c:11:11: warning: incompatible pointer types assigning to 'char *' from 'int *' [-Wincompatible-pointer-types]
        p = &(numbers[i]);
          ^ ~~~~~~~~~~~~~
1 warning generated.

Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
