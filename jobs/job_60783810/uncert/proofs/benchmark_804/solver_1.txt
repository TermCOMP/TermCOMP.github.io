YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ZgoUQ.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 43 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2420 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 84 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 12 ms]
        (13) IntTRS
        (14) TerminationGraphProcessor [EQUIVALENT, 2 ms]
        (15) AND
            (16) IntTRS
                (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (18) IntTRS
                (19) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (20) IntTRS
                (21) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
                (22) YES
            (23) IntTRS
                (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (25) IntTRS
                (26) RankingReductionPairProof [EQUIVALENT, 3 ms]
                (27) YES
    (28) LLVM Symbolic Execution SCC
        (29) SCC2IRS [SOUND, 45 ms]
        (30) IntTRS
        (31) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (32) IntTRS
        (33) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (34) YES
    (35) LLVM Symbolic Execution SCC
        (36) SCC2IRS [SOUND, 32 ms]
        (37) IntTRS
        (38) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (39) IntTRS
        (40) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (41) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/ZgoUQ.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/ZgoUQ.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca [1048 x i32], align 16
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[1048 x i32] %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %3
		br %4
	4:
		%5 = load %3
		%6 = sext i32 %5 to i64
		%7 = getelementptr %2, 0, %6
		%8 = load %7
		%9 = icmp sge %8 0
		br %9, %10, %13
	10:
		%11 = load %3
		%12 = icmp slt %11 1048
		br %13
	13:
		%14 = phi [0, %4], [%12, %10]
		br %14, %15, %28
	15:
		%16 = call i32 @__VERIFIER_nondet_int()
		%17 = icmp ne %16 0
		br %17, %18, %21
	18:
		%19 = load %3
		%20 = add i32 %19, 1
		store %20, %3
		br %27
	21:
		%22 = load %3
		%23 = sext i32 %22 to i64
		%24 = getelementptr %2, 0, %23
		%25 = load %24
		%26 = add i32 %25, -1
		store %26, %24
		br %27
	27:
		br %4
	28:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 62 rulesP rules:
f_561(v1221, v1222, v1223, v1229, v1279, v1280, 1, 0, v1224, v1578, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_563(v1221, v1222, v1223, v1229, v1279, v1280, 1, 0, v1224, v1578, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_563(v1221, v1222, v1223, v1229, v1279, v1280, 1, 0, v1224, v1578, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_565(v1221, v1222, v1223, v1229, v1279, v1280, 1, 0, v1224, v1578, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_565(v1221, v1222, v1223, v1229, v1279, v1280, 1, 0, v1224, v1578, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_567(v1221, v1222, v1223, v1229, v1279, v1280, 1, 0, v1224, v1578, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v1279 = v1222 + 4 * v1229
f_567(v1221, v1222, v1223, v1229, v1279, v1280, 1, 0, v1224, v1578, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_569(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_569(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_572(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 <= v1578 && 1 <= v1280
f_572(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_576(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_576(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_580(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_580(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_584(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_584(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_588(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_588(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_591(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_591(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_594(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_594(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_597(v1221, v1222, v1223, v1229, v1279, v1578, 1, v2035, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_597(v1221, v1222, v1223, v1229, v1279, v1578, 1, v2035, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_599(v1221, v1222, v1223, v1229, v1279, v1578, 1, v2035, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v2035 != 0
f_597(v1221, v1222, v1223, v1229, v1279, v1578, 1, v2035, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_600(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v2035 = 0
f_599(v1221, v1222, v1223, v1229, v1279, v1578, 1, v2035, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_603(v1221, v1222, v1223, v1229, v1279, v1578, 1, v2035, v1224, v1280, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_603(v1221, v1222, v1223, v1229, v1279, v1578, 1, v2035, v1224, v1280, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_607(v1221, v1222, v1223, v1229, v1279, v1578, 1, v2035, v1224, v1280, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_607(v1221, v1222, v1223, v1229, v1279, v1578, 1, v2035, v1224, v1280, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_656(v1221, v1222, v1223, v1229, v1279, v1578, 1, v2035, v1224, v1229, v1279, v1280, v1578, v1230, v1231, v1232, 0, v1234, v2555, v2558, 3, 4191, 4, 1047, 5, 1046, 4192) :|: TRUE
f_656(v2539, v2540, v2541, v2542, v2543, v2544, 1, v2546, v2547, v2548, v2549, v2550, v2551, v2552, v2553, v2554, 0, v2557, v2555, v2558, 3, 4191, 4, 1047, 5, 1046, 4192) -> f_658(v2539, v2540, v2541, v2542, v2543, v2544, 1, v2546, v2548, v2549, v2550, v2551, v2552, v2553, v2554, 0, v2557, v2555, v2558, 3, 4191, 4, 1047, 5, 4192) :|: 0 = 0
f_658(v2539, v2540, v2541, v2542, v2543, v2544, 1, v2546, v2548, v2549, v2550, v2551, v2552, v2553, v2554, 0, v2557, v2555, v2558, 3, 4191, 4, 1047, 5, 4192) -> f_660(v2539, v2540, v2541, v2542, v2543, v2544, 1, v2546, v2580, v2548, v2549, v2550, v2551, v2552, v2553, v2554, 0, v2557, v2555, v2558, 3, 4191, 4, 1047, 5, 4192, 2, 1048) :|: v2580 = 1 + v2542 && 2 <= v2580 && v2580 <= 1048
f_660(v2539, v2540, v2541, v2542, v2543, v2544, 1, v2546, v2580, v2548, v2549, v2550, v2551, v2552, v2553, v2554, 0, v2557, v2555, v2558, 3, 4191, 4, 1047, 5, 4192, 2, 1048) -> f_662(v2539, v2540, v2541, v2542, v2543, v2544, 1, v2546, v2580, v2548, v2549, v2550, v2551, v2552, v2553, v2554, 0, v2557, v2555, v2558, 3, 4191, 4, 1047, 5, 4192, 2, 1048) :|: TRUE
f_662(v2539, v2540, v2541, v2542, v2543, v2544, 1, v2546, v2580, v2548, v2549, v2550, v2551, v2552, v2553, v2554, 0, v2557, v2555, v2558, 3, 4191, 4, 1047, 5, 4192, 2, 1048) -> f_664(v2539, v2540, v2541, v2542, v2543, v2544, 1, v2546, v2580, v2548, v2549, v2550, v2551, v2552, v2553, v2554, 0, v2557, v2555, v2558, 3, 4191, 4, 1047, 5, 4192, 2, 1048) :|: TRUE
f_664(v2539, v2540, v2541, v2542, v2543, v2544, 1, v2546, v2580, v2548, v2549, v2550, v2551, v2552, v2553, v2554, 0, v2557, v2555, v2558, 3, 4191, 4, 1047, 5, 4192, 2, 1048) -> f_624(v2539, v2540, v2541, v2542, v2543, v2544, 1, v2546, v2548, v2549, v2550, v2551, v2580, v2552, v2553, v2554, 0, v2557, 3, 4191, 4, 1047, 1048, 4192) :|: TRUE
f_624(v2136, v2137, v2138, v2139, v2140, v2141, 1, v2143, v2144, v2145, v2146, v2147, v2148, v2149, v2150, v2151, 0, v2153, 3, 4191, 4, 1047, 1048, 4192) -> f_626(v2136, v2137, v2138, v2139, v2140, v2141, 1, v2143, v2144, v2145, v2146, v2147, v2148, v2149, v2150, v2151, 0, v2153, 3, 4191, 4, 1047, 1048, 4192) :|: TRUE
f_626(v2136, v2137, v2138, v2139, v2140, v2141, 1, v2143, v2144, v2145, v2146, v2147, v2148, v2149, v2150, v2151, 0, v2153, 3, 4191, 4, 1047, 1048, 4192) -> f_628(v2136, v2137, v2138, v2148, v2139, v2140, v2141, 1, v2143, v2144, v2145, v2146, v2147, v2149, v2150, v2151, 0, v2153, 3, 4191, 4, 1047, 1048, 4192) :|: 0 = 0
f_628(v2136, v2137, v2138, v2148, v2139, v2140, v2141, 1, v2143, v2144, v2145, v2146, v2147, v2149, v2150, v2151, 0, v2153, 3, 4191, 4, 1047, 1048, 4192) -> f_630(v2136, v2137, v2138, v2148, v2140, v2141, 1, v2139, v2143, v2144, v2145, v2146, v2147, v2149, v2150, v2151, 0, v2153, 3, 4191, 4, 1047, 1048, 4192) :|: 0 = 0
f_630(v2136, v2137, v2138, v2148, v2140, v2141, 1, v2139, v2143, v2144, v2145, v2146, v2147, v2149, v2150, v2151, 0, v2153, 3, 4191, 4, 1047, 1048, 4192) -> f_632(v2136, v2137, v2138, v2148, v2225, v2141, 1, v2139, v2143, v2144, v2145, v2146, v2147, v2149, v2150, v2151, 0, v2153, v2140, 3, 4191, 4, 1047, 1048, 4192, 5) :|: v2225 = v2137 + 4 * v2148 && 5 <= v2225
f_632(v2136, v2137, v2138, v2148, v2225, v2141, 1, v2139, v2143, v2144, v2145, v2146, v2147, v2149, v2150, v2151, 0, v2153, v2140, 3, 4191, 4, 1047, 1048, 4192, 5) -> f_633(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2139, v2143, v2144, v2145, v2146, v2147, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1047, 1048, 4192, 5) :|: TRUE
f_633(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2139, v2143, v2144, v2145, v2146, v2147, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1047, 1048, 4192, 5) -> f_634(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2139, v2143, v2144, v2145, v2146, v2147, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1047, 1048, 4192, 5) :|: 0 <= v2226
f_634(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2139, v2143, v2144, v2145, v2146, v2147, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1047, 1048, 4192, 5) -> f_636(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2139, v2143, v2144, v2145, v2146, v2147, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1047, 1048, 4192, 5) :|: 0 = 0
f_636(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2139, v2143, v2144, v2145, v2146, v2147, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1047, 1048, 4192, 5) -> f_638(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2139, v2143, v2144, v2145, v2146, v2147, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1047, 1048, 4192, 5) :|: TRUE
f_638(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2139, v2143, v2144, v2145, v2146, v2147, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1047, 1048, 4192, 5) -> f_640(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2143, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1047, 1048, 4192, 5) :|: 0 = 0
f_640(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2143, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1047, 1048, 4192, 5) -> f_642(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2143, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v2148 < 1048 && v2139 <= 1046
f_642(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2143, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_644(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2143, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_644(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2143, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_646(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2143, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_646(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2143, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_648(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2143, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_648(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2143, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_650(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2517, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_650(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2517, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_651(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2517, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v2517 != 0
f_650(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2517, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_652(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v2517 = 0
f_651(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2517, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_653(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2517, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_653(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2517, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_655(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2517, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_655(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2517, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, 0, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_656(v2136, v2137, v2138, v2148, v2225, v2226, 1, v2517, v2139, v2144, v2145, v2146, v2147, v2149, v2150, v2151, 0, v2153, v2555, v2558, 3, 4191, 4, 1047, 5, 1046, 4192) :|: TRUE
f_652(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_654(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_654(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_657(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_657(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_659(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_659(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2144, v2145, v2146, v2147, v2139, v2149, v2150, v2151, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_661(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2145, v2146, v2147, v2139, v2149, v2150, v2151, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_661(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2145, v2146, v2147, v2139, v2149, v2150, v2151, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_663(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2146, v2147, v2139, v2149, v2150, v2151, v2153, v2145, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v2225 = v2137 + 4 * v2148
f_663(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2146, v2147, v2139, v2149, v2150, v2151, v2153, v2145, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_665(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2147, v2139, v2149, v2150, v2151, v2153, v2145, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_665(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2147, v2139, v2149, v2150, v2151, v2153, v2145, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_666(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2625, v2139, v2149, v2150, v2151, v2153, v2145, v2147, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 1 + v2625 = v2226 && 0 <= 1 + v2625
f_666(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2625, v2139, v2149, v2150, v2151, v2153, v2145, v2147, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_667(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2625, v2139, v2149, v2150, v2151, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_667(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2625, v2139, v2149, v2150, v2151, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_668(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2625, v2139, v2149, v2150, v2151, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_668(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2625, v2139, v2149, v2150, v2151, v2153, v2140, v2141, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_559(v2136, v2137, v2138, v2148, v2225, v2226, 1, 0, v2139, v2625, v2149, v2150, v2151, v2153, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_559(v1221, v1222, v1223, v1229, v1279, v1280, 1, 0, v1224, v1578, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_561(v1221, v1222, v1223, v1229, v1279, v1280, 1, 0, v1224, v1578, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_600(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_604(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_604(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_608(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_608(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_612(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_612(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_616(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_616(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_620(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v1279 = v1222 + 4 * v1229
f_620(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1280, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_625(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_625(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_627(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v2187, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 1 + v2187 = v1578 && 0 <= 1 + v2187
f_627(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v2187, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_629(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v2187, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_629(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v2187, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_631(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v2187, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_631(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v2187, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_559(v1221, v1222, v1223, v1229, v1279, v1578, 1, 0, v1224, v2187, v1230, v1231, v1232, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_561(v1221:0, v1222:0, v1223:0, v1229:0, v1222:0 + 4 * v1229:0, v1280:0, 1, 0, v1224:0, v1578:0, v1230:0, v1231:0, v1232:0, v1234:0, v1225:0, v1226:0, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_650(v1221:0, v1222:0, v1223:0, 1 + v1229:0, v1222:0 + 4 * (1 + v1229:0), v2226:0, 1, v2517:0, v1229:0, v1222:0 + 4 * v1229:0, v1280:0, v1578:0, v1229:0, v1230:0, v1231:0, v1232:0, 0, v1234:0, v1222:0 + 4 * v1229:0, v1578:0, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v1280:0 > 0 && v1578:0 > -1 && v2035:0 < 0 && v1229:0 > 0 && v1229:0 < 1048 && v1222:0 + 4 * (1 + v1229:0) > 4 && v2226:0 > -1 && v1229:0 < 1047
f_561(v1221:0, v1222:0, v1223:0, v1229:0, v1222:0 + 4 * v1229:0, v1280:0, 1, 0, v1224:0, v1578:0, v1230:0, v1231:0, v1232:0, v1234:0, v1225:0, v1226:0, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_650(v1221:0, v1222:0, v1223:0, 1 + v1229:0, v1222:0 + 4 * (1 + v1229:0), v2226:0, 1, v2517:0, v1229:0, v1222:0 + 4 * v1229:0, v1280:0, v1578:0, v1229:0, v1230:0, v1231:0, v1232:0, 0, v1234:0, v1222:0 + 4 * v1229:0, v1578:0, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v1280:0 > 0 && v1578:0 > -1 && v2035:0 > 0 && v1229:0 > 0 && v1229:0 < 1048 && v1222:0 + 4 * (1 + v1229:0) > 4 && v2226:0 > -1 && v1229:0 < 1047
f_650(v2136:0, v2137:0, v2138:0, v2148:0, v2225:0, v2226:0, 1, v2517:0, v2144:0, v2145:0, v2146:0, v2147:0, v2139:0, v2149:0, v2150:0, v2151:0, 0, v2153:0, v2140:0, v2141:0, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_650(v2136:0, v2137:0, v2138:0, 1 + v2148:0, v2137:0 + 4 * (1 + v2148:0), v2226:1, 1, v2517:1, v2144:0, v2145:0, v2146:0, v2147:0, v2148:0, v2149:0, v2150:0, v2151:0, 0, v2153:0, v2225:0, v2226:0, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v2148:0 > 0 && v2148:0 < 1048 && v2137:0 + 4 * (1 + v2148:0) > 4 && v2226:1 > -1 && v2148:0 < 1047 && v2517:0 < 0
f_650(v2136:0, v2137:0, v2138:0, v2148:0, v2225:0, v2226:0, 1, v2517:0, v2144:0, v2145:0, v2146:0, v2147:0, v2139:0, v2149:0, v2150:0, v2151:0, 0, v2153:0, v2140:0, v2141:0, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_650(v2136:0, v2137:0, v2138:0, 1 + v2148:0, v2137:0 + 4 * (1 + v2148:0), v2226:1, 1, v2517:1, v2144:0, v2145:0, v2146:0, v2147:0, v2148:0, v2149:0, v2150:0, v2151:0, 0, v2153:0, v2225:0, v2226:0, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v2148:0 > 0 && v2148:0 < 1048 && v2137:0 + 4 * (1 + v2148:0) > 4 && v2226:1 > -1 && v2148:0 < 1047 && v2517:0 > 0
f_650(v2136:0, v2137:0, v2138:0, v2148:0, v2137:0 + 4 * v2148:0, 1 + v2625:0, 1, 0, v2144:0, v2145:0, v2146:0, v2147:0, v2139:0, v2149:0, v2150:0, v2151:0, 0, v2153:0, v2140:0, v2141:0, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_561(v2136:0, v2137:0, v2138:0, v2148:0, v2137:0 + 4 * v2148:0, 1 + v2625:0, 1, 0, v2139:0, v2625:0, v2149:0, v2150:0, v2151:0, v2153:0, v1225:0, v1226:0, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v2625:0 > -2
f_561(v1221:0, v1222:0, v1223:0, v1229:0, v1222:0 + 4 * v1229:0, v1280:0, 1, 0, v1224:0, 1 + v2187:0, v1230:0, v1231:0, v1232:0, v1234:0, v1225:0, v1226:0, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_561(v1221:0, v1222:0, v1223:0, v1229:0, v1222:0 + 4 * v1229:0, 1 + v2187:0, 1, 0, v1224:0, v2187:0, v1230:0, v1231:0, v1232:0, v1234:0, v1225:0, v1226:0, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v1280:0 > 0 && v2187:0 > -2
Filtered unneeded arguments:
   f_561(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_561(x2, x4, x5, x6, x10)
   f_650(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_650(x2, x4, x5, x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_561(v1222:0, v1229:0, sum~v1222:0~times~cons_4~v1229:0, v1280:0, v1578:0) -> f_650(v1222:0, 1 + v1229:0, v1222:0 + (4 + 4 * v1229:0), v2226:0, v2517:0) :|: v1578:0 > -1 && v1280:0 > 0 && v1229:0 > 0 && v1229:0 < 1048 && v1222:0 + (4 + 4 * v1229:0) > 4 && v1229:0 < 1047 && v2226:0 > -1 && sum~v1222:0~times~cons_4~v1229:0 = v1222:0 + 4 * v1229:0
f_650(v2137:0, v2148:0, v2225:0, v2226:0, v2517:0) -> f_650(v2137:0, 1 + v2148:0, v2137:0 + (4 + 4 * v2148:0), v2226:1, v2517:1) :|: v2148:0 < 1048 && v2148:0 > 0 && v2137:0 + (4 + 4 * v2148:0) > 4 && v2226:1 > -1 && v2517:0 < 0 && v2148:0 < 1047
f_650(v2137:0, v2148:0, v2225:0, v2226:0, v2517:0) -> f_650(v2137:0, 1 + v2148:0, v2137:0 + (4 + 4 * v2148:0), v2226:1, v2517:1) :|: v2148:0 < 1048 && v2148:0 > 0 && v2137:0 + (4 + 4 * v2148:0) > 4 && v2226:1 > -1 && v2517:0 > 0 && v2148:0 < 1047
f_650(v2137:0, v2148:0, sum~v2137:0~times~cons_4~v2148:0, sum~cons_1~v2625:0, cons_0) -> f_561(v2137:0, v2148:0, v2137:0 + 4 * v2148:0, 1 + v2625:0, v2625:0) :|: v2625:0 > -2 && sum~v2137:0~times~cons_4~v2148:0 = v2137:0 + 4 * v2148:0 && sum~cons_1~v2625:0 = 1 + v2625:0 && cons_0 = 0
f_561(v1222:0, v1229:0, sum~v1222:0~times~cons_4~v1229:0, v1280:0, sum~cons_1~v2187:0) -> f_561(v1222:0, v1229:0, v1222:0 + 4 * v1229:0, 1 + v2187:0, v2187:0) :|: v1280:0 > 0 && v2187:0 > -2 && sum~v1222:0~times~cons_4~v1229:0 = v1222:0 + 4 * v1229:0 && sum~cons_1~v2187:0 = 1 + v2187:0

----------------------------------------

(9)
Obligation:
Rules:
f_561(v1222:0, v1229:0, sum~v1222:0~times~cons_4~v1229:0, v1280:0, v1578:0) -> f_650(v1222:0, 1 + v1229:0, v1222:0 + (4 + 4 * v1229:0), v2226:0, v2517:0) :|: v1578:0 > -1 && v1280:0 > 0 && v1229:0 > 0 && v1229:0 < 1048 && v1222:0 + (4 + 4 * v1229:0) > 4 && v1229:0 < 1047 && v2226:0 > -1 && sum~v1222:0~times~cons_4~v1229:0 = v1222:0 + 4 * v1229:0
f_650(x, x1, x2, x3, x4) -> f_650(x, 1 + x1, x + (4 + 4 * x1), x5, x6) :|: x1 < 1048 && x1 > 0 && x + (4 + 4 * x1) > 4 && x5 > -1 && x4 < 0 && x1 < 1047
f_650(x7, x8, x9, x10, x11) -> f_650(x7, 1 + x8, x7 + (4 + 4 * x8), x12, x13) :|: x8 < 1048 && x8 > 0 && x7 + (4 + 4 * x8) > 4 && x12 > -1 && x11 > 0 && x8 < 1047
f_650(v2137:0, v2148:0, sum~v2137:0~times~cons_4~v2148:0, sum~cons_1~v2625:0, cons_0) -> f_561(v2137:0, v2148:0, v2137:0 + 4 * v2148:0, 1 + v2625:0, v2625:0) :|: v2625:0 > -2 && sum~v2137:0~times~cons_4~v2148:0 = v2137:0 + 4 * v2148:0 && sum~cons_1~v2625:0 = 1 + v2625:0 && cons_0 = 0
f_561(x14, x15, x16, x17, x18) -> f_561(x14, x15, x14 + 4 * x15, 1 + x19, x19) :|: x17 > 0 && x19 > -2 && x16 = x14 + 4 * x15 && x18 = 1 + x19

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_650(x7:0, x8:0, x9:0, x10:0, x11:0) -> f_650(x7:0, 1 + x8:0, x7:0 + (4 + 4 * x8:0), x12:0, x13:0) :|: x11:0 > 0 && x8:0 < 1047 && x12:0 > -1 && x7:0 + (4 + 4 * x8:0) > 4 && x8:0 > 0 && x8:0 < 1048
f_561(x14:0, x15:0, sum~x14:0~times~cons_4~x15:0, x17:0, sum~cons_1~x19:0) -> f_561(x14:0, x15:0, x14:0 + 4 * x15:0, 1 + x19:0, x19:0) :|: x17:0 > 0 && x19:0 > -2 && sum~x14:0~times~cons_4~x15:0 = x14:0 + 4 * x15:0 && sum~cons_1~x19:0 = 1 + x19:0
f_561(v1222:0:0, v1229:0:0, sum~v1222:0:0~times~cons_4~v1229:0:0, v1280:0:0, v1578:0:0) -> f_650(v1222:0:0, 1 + v1229:0:0, v1222:0:0 + (4 + 4 * v1229:0:0), v2226:0:0, v2517:0:0) :|: v1229:0:0 < 1047 && v2226:0:0 > -1 && v1222:0:0 + (4 + 4 * v1229:0:0) > 4 && v1229:0:0 < 1048 && v1229:0:0 > 0 && v1280:0:0 > 0 && v1578:0:0 > -1 && sum~v1222:0:0~times~cons_4~v1229:0:0 = v1222:0:0 + 4 * v1229:0:0
f_650(x:0, x1:0, x2:0, x3:0, x4:0) -> f_650(x:0, 1 + x1:0, x:0 + (4 + 4 * x1:0), x5:0, x6:0) :|: x4:0 < 0 && x1:0 < 1047 && x5:0 > -1 && x:0 + (4 + 4 * x1:0) > 4 && x1:0 > 0 && x1:0 < 1048
f_650(v2137:0:0, v2148:0:0, sum~v2137:0:0~times~cons_4~v2148:0:0, sum~cons_1~v2625:0:0, cons_0) -> f_561(v2137:0:0, v2148:0:0, v2137:0:0 + 4 * v2148:0:0, 1 + v2625:0:0, v2625:0:0) :|: v2625:0:0 > -2 && sum~v2137:0:0~times~cons_4~v2148:0:0 = v2137:0:0 + 4 * v2148:0:0 && sum~cons_1~v2625:0:0 = 1 + v2625:0:0 && cons_0 = 0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_650 ] = -2*f_650_2 + 4*f_650_1
[ f_561 ] = 4*f_561_1 + -2*f_561_2 + -1

The following rules are decreasing:
f_650(x7:0, x8:0, x9:0, x10:0, x11:0) -> f_650(x7:0, 1 + x8:0, x7:0 + (4 + 4 * x8:0), x12:0, x13:0) :|: x11:0 > 0 && x8:0 < 1047 && x12:0 > -1 && x7:0 + (4 + 4 * x8:0) > 4 && x8:0 > 0 && x8:0 < 1048
f_561(v1222:0:0, v1229:0:0, sum~v1222:0:0~times~cons_4~v1229:0:0, v1280:0:0, v1578:0:0) -> f_650(v1222:0:0, 1 + v1229:0:0, v1222:0:0 + (4 + 4 * v1229:0:0), v2226:0:0, v2517:0:0) :|: v1229:0:0 < 1047 && v2226:0:0 > -1 && v1222:0:0 + (4 + 4 * v1229:0:0) > 4 && v1229:0:0 < 1048 && v1229:0:0 > 0 && v1280:0:0 > 0 && v1578:0:0 > -1 && sum~v1222:0:0~times~cons_4~v1229:0:0 = v1222:0:0 + 4 * v1229:0:0
f_650(x:0, x1:0, x2:0, x3:0, x4:0) -> f_650(x:0, 1 + x1:0, x:0 + (4 + 4 * x1:0), x5:0, x6:0) :|: x4:0 < 0 && x1:0 < 1047 && x5:0 > -1 && x:0 + (4 + 4 * x1:0) > 4 && x1:0 > 0 && x1:0 < 1048
f_650(v2137:0:0, v2148:0:0, sum~v2137:0:0~times~cons_4~v2148:0:0, sum~cons_1~v2625:0:0, cons_0) -> f_561(v2137:0:0, v2148:0:0, v2137:0:0 + 4 * v2148:0:0, 1 + v2625:0:0, v2625:0:0) :|: v2625:0:0 > -2 && sum~v2137:0:0~times~cons_4~v2148:0:0 = v2137:0:0 + 4 * v2148:0:0 && sum~cons_1~v2625:0:0 = 1 + v2625:0:0 && cons_0 = 0

The following rules are bounded:
f_561(v1222:0:0, v1229:0:0, sum~v1222:0:0~times~cons_4~v1229:0:0, v1280:0:0, v1578:0:0) -> f_650(v1222:0:0, 1 + v1229:0:0, v1222:0:0 + (4 + 4 * v1229:0:0), v2226:0:0, v2517:0:0) :|: v1229:0:0 < 1047 && v2226:0:0 > -1 && v1222:0:0 + (4 + 4 * v1229:0:0) > 4 && v1229:0:0 < 1048 && v1229:0:0 > 0 && v1280:0:0 > 0 && v1578:0:0 > -1 && sum~v1222:0:0~times~cons_4~v1229:0:0 = v1222:0:0 + 4 * v1229:0:0
f_650(x:0, x1:0, x2:0, x3:0, x4:0) -> f_650(x:0, 1 + x1:0, x:0 + (4 + 4 * x1:0), x5:0, x6:0) :|: x4:0 < 0 && x1:0 < 1047 && x5:0 > -1 && x:0 + (4 + 4 * x1:0) > 4 && x1:0 > 0 && x1:0 < 1048


----------------------------------------

(13)
Obligation:
Rules:
f_650(x7:0, x8:0, x9:0, x10:0, x11:0) -> f_650(x7:0, 1 + x8:0, x7:0 + (4 + 4 * x8:0), x12:0, x13:0) :|: x11:0 > 0 && x8:0 < 1047 && x12:0 > -1 && x7:0 + (4 + 4 * x8:0) > 4 && x8:0 > 0 && x8:0 < 1048
f_561(x14:0, x15:0, sum~x14:0~times~cons_4~x15:0, x17:0, sum~cons_1~x19:0) -> f_561(x14:0, x15:0, x14:0 + 4 * x15:0, 1 + x19:0, x19:0) :|: x17:0 > 0 && x19:0 > -2 && sum~x14:0~times~cons_4~x15:0 = x14:0 + 4 * x15:0 && sum~cons_1~x19:0 = 1 + x19:0
f_650(v2137:0:0, v2148:0:0, sum~v2137:0:0~times~cons_4~v2148:0:0, sum~cons_1~v2625:0:0, cons_0) -> f_561(v2137:0:0, v2148:0:0, v2137:0:0 + 4 * v2148:0:0, 1 + v2625:0:0, v2625:0:0) :|: v2625:0:0 > -2 && sum~v2137:0:0~times~cons_4~v2148:0:0 = v2137:0:0 + 4 * v2148:0:0 && sum~cons_1~v2625:0:0 = 1 + v2625:0:0 && cons_0 = 0

----------------------------------------

(14) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained 2 non-trivial SCCs.

----------------------------------------

(15)
Complex Obligation (AND)

----------------------------------------

(16)
Obligation:
Rules:
f_650(x7:0, x8:0, x9:0, x10:0, x11:0) -> f_650(x7:0, 1 + x8:0, x7:0 + (4 + 4 * x8:0), x12:0, x13:0) :|: x11:0 > 0 && x8:0 < 1047 && x12:0 > -1 && x7:0 + (4 + 4 * x8:0) > 4 && x8:0 > 0 && x8:0 < 1048

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_650(x7:0:0, x8:0:0, x9:0:0, x10:0:0, x11:0:0) -> f_650(x7:0:0, 1 + x8:0:0, x7:0:0 + (4 + 4 * x8:0:0), x12:0:0, x13:0:0) :|: x8:0:0 > 0 && x8:0:0 < 1048 && x7:0:0 + (4 + 4 * x8:0:0) > 4 && x12:0:0 > -1 && x8:0:0 < 1047 && x11:0:0 > 0

----------------------------------------

(19) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_650(x1, x2, x3, x4, x5) -> f_650(x1, x2, x5)

----------------------------------------

(20)
Obligation:
Rules:
f_650(x7:0:0, x8:0:0, x11:0:0) -> f_650(x7:0:0, 1 + x8:0:0, x13:0:0) :|: x8:0:0 > 0 && x8:0:0 < 1048 && x7:0:0 + (4 + 4 * x8:0:0) > 4 && x12:0:0 > -1 && x8:0:0 < 1047 && x11:0:0 > 0

----------------------------------------

(21) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_650(x, x1, x2)] = 1046 - x1

The following rules are decreasing:
f_650(x7:0:0, x8:0:0, x11:0:0) -> f_650(x7:0:0, 1 + x8:0:0, x13:0:0) :|: x8:0:0 > 0 && x8:0:0 < 1048 && x7:0:0 + (4 + 4 * x8:0:0) > 4 && x12:0:0 > -1 && x8:0:0 < 1047 && x11:0:0 > 0
The following rules are bounded:
f_650(x7:0:0, x8:0:0, x11:0:0) -> f_650(x7:0:0, 1 + x8:0:0, x13:0:0) :|: x8:0:0 > 0 && x8:0:0 < 1048 && x7:0:0 + (4 + 4 * x8:0:0) > 4 && x12:0:0 > -1 && x8:0:0 < 1047 && x11:0:0 > 0

----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Rules:
f_561(x14:0, x15:0, sum~x14:0~times~cons_4~x15:0, x17:0, sum~cons_1~x19:0) -> f_561(x14:0, x15:0, x14:0 + 4 * x15:0, 1 + x19:0, x19:0) :|: x17:0 > 0 && x19:0 > -2 && sum~x14:0~times~cons_4~x15:0 = x14:0 + 4 * x15:0 && sum~cons_1~x19:0 = 1 + x19:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_561(x14:0:0, x15:0:0, sum~x14:0:0~times~cons_4~x15:0:0, x17:0:0, sum~cons_1~x19:0:0) -> f_561(x14:0:0, x15:0:0, x14:0:0 + 4 * x15:0:0, 1 + x19:0:0, x19:0:0) :|: x17:0:0 > 0 && x19:0:0 > -2 && sum~x14:0:0~times~cons_4~x15:0:0 = x14:0:0 + 4 * x15:0:0 && sum~cons_1~x19:0:0 = 1 + x19:0:0

----------------------------------------

(26) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_561 ] = f_561_5

The following rules are decreasing:
f_561(x14:0:0, x15:0:0, sum~x14:0:0~times~cons_4~x15:0:0, x17:0:0, sum~cons_1~x19:0:0) -> f_561(x14:0:0, x15:0:0, x14:0:0 + 4 * x15:0:0, 1 + x19:0:0, x19:0:0) :|: x17:0:0 > 0 && x19:0:0 > -2 && sum~x14:0:0~times~cons_4~x15:0:0 = x14:0:0 + 4 * x15:0:0 && sum~cons_1~x19:0:0 = 1 + x19:0:0

The following rules are bounded:
f_561(x14:0:0, x15:0:0, sum~x14:0:0~times~cons_4~x15:0:0, x17:0:0, sum~cons_1~x19:0:0) -> f_561(x14:0:0, x15:0:0, x14:0:0 + 4 * x15:0:0, 1 + x19:0:0, x19:0:0) :|: x17:0:0 > 0 && x19:0:0 > -2 && sum~x14:0:0~times~cons_4~x15:0:0 = x14:0:0 + 4 * x15:0:0 && sum~cons_1~x19:0:0 = 1 + x19:0:0


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
SCC
----------------------------------------

(29) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_483(v1221, v1222, v1223, v1229, v1224, v1225, v1226, 1, v1228, v1230, v1231, v1232, 0, v1234, 3, 4191, 4, 1047, 1048, 4192) -> f_486(v1221, v1222, v1223, v1229, v1225, v1226, 1, v1224, v1228, v1230, v1231, v1232, 0, v1234, 3, 4191, 4, 1047, 1048, 4192) :|: 0 = 0
f_486(v1221, v1222, v1223, v1229, v1225, v1226, 1, v1224, v1228, v1230, v1231, v1232, 0, v1234, 3, 4191, 4, 1047, 1048, 4192) -> f_488(v1221, v1222, v1223, v1229, v1279, v1226, 1, v1224, v1228, v1230, v1231, v1232, 0, v1234, v1225, 3, 4191, 4, 1047, 1048, 4192, 5) :|: v1279 = v1222 + 4 * v1229 && 5 <= v1279
f_488(v1221, v1222, v1223, v1229, v1279, v1226, 1, v1224, v1228, v1230, v1231, v1232, 0, v1234, v1225, 3, 4191, 4, 1047, 1048, 4192, 5) -> f_490(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1224, v1228, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 1048, 4192, 5) :|: TRUE
f_490(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1224, v1228, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 1048, 4192, 5) -> f_492(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1224, v1228, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 1048, 4192, 5) :|: 0 <= v1280
f_492(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1224, v1228, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 1048, 4192, 5) -> f_495(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1224, v1228, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 1048, 4192, 5) :|: 0 = 0
f_495(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1224, v1228, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 1048, 4192, 5) -> f_498(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1224, v1228, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 1048, 4192, 5) :|: TRUE
f_498(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1224, v1228, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 1048, 4192, 5) -> f_502(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1228, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 1048, 4192, 5) :|: 0 = 0
f_502(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1228, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 1048, 4192, 5) -> f_506(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1228, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v1229 < 1048 && v1224 <= 1046
f_506(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1228, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_510(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1228, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_510(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1228, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_514(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1228, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_514(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1228, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_518(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1228, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_518(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1228, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_522(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_522(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_525(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: v1401 != 0
f_525(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_529(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: 0 = 0
f_529(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_532(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) :|: TRUE
f_532(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1224, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1046, 1047, 4192, 5) -> f_536(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 4192, 5) :|: 0 = 0
f_536(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 4192, 5) -> f_540(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1510, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 4192, 5, 2, 1048) :|: v1510 = 1 + v1229 && 2 <= v1510 && v1510 <= 1048
f_540(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1510, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 4192, 5, 2, 1048) -> f_544(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1510, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 4192, 5, 2, 1048) :|: TRUE
f_544(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1510, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 4192, 5, 2, 1048) -> f_548(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1510, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 4192, 5, 2, 1048) :|: TRUE
f_548(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1510, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 4192, 5, 2, 1048) -> f_552(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1510, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 4192, 5, 2, 1048) :|: TRUE
f_552(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1510, v1230, v1231, v1232, 0, v1234, v1225, v1226, 3, 4191, 4, 1047, 4192, 5, 2, 1048) -> f_480(v1221, v1222, v1223, v1229, v1279, v1280, 1, v1401, v1510, v1230, v1231, v1232, 0, v1234, 3, 4191, 4, 1047, 1048, 4192) :|: TRUE
f_480(v1221, v1222, v1223, v1224, v1225, v1226, 1, v1228, v1229, v1230, v1231, v1232, 0, v1234, 3, 4191, 4, 1047, 1048, 4192) -> f_483(v1221, v1222, v1223, v1229, v1224, v1225, v1226, 1, v1228, v1230, v1231, v1232, 0, v1234, 3, 4191, 4, 1047, 1048, 4192) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_483(v1221:0, v1222:0, v1223:0, v1229:0, v1224:0, v1225:0, v1226:0, 1, v1228:0, v1230:0, v1231:0, v1232:0, 0, v1234:0, 3, 4191, 4, 1047, 1048, 4192) -> f_483(v1221:0, v1222:0, v1223:0, 1 + v1229:0, v1229:0, v1222:0 + 4 * v1229:0, v1280:0, 1, v1401:0, v1230:0, v1231:0, v1232:0, 0, v1234:0, 3, 4191, 4, 1047, 1048, 4192) :|: v1222:0 + 4 * v1229:0 > 4 && v1280:0 > -1 && v1224:0 < 1047 && v1229:0 < 1048 && v1401:0 < 0 && v1229:0 > 0
f_483(v1221:0, v1222:0, v1223:0, v1229:0, v1224:0, v1225:0, v1226:0, 1, v1228:0, v1230:0, v1231:0, v1232:0, 0, v1234:0, 3, 4191, 4, 1047, 1048, 4192) -> f_483(v1221:0, v1222:0, v1223:0, 1 + v1229:0, v1229:0, v1222:0 + 4 * v1229:0, v1280:0, 1, v1401:0, v1230:0, v1231:0, v1232:0, 0, v1234:0, 3, 4191, 4, 1047, 1048, 4192) :|: v1222:0 + 4 * v1229:0 > 4 && v1280:0 > -1 && v1224:0 < 1047 && v1229:0 < 1048 && v1401:0 > 0 && v1229:0 > 0
Filtered unneeded arguments:
   f_483(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_483(x2, x4, x5)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_483(v1222:0, v1229:0, v1224:0) -> f_483(v1222:0, 1 + v1229:0, v1229:0) :|: v1224:0 < 1047 && v1222:0 + 4 * v1229:0 > 4 && v1229:0 > 0 && v1229:0 < 1048

----------------------------------------

(30)
Obligation:
Rules:
f_483(v1222:0, v1229:0, v1224:0) -> f_483(v1222:0, 1 + v1229:0, v1229:0) :|: v1224:0 < 1047 && v1222:0 + 4 * v1229:0 > 4 && v1229:0 > 0 && v1229:0 < 1048

----------------------------------------

(31) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(32)
Obligation:
Rules:
f_483(v1222:0:0, v1229:0:0, v1224:0:0) -> f_483(v1222:0:0, 1 + v1229:0:0, v1229:0:0) :|: v1229:0:0 > 0 && v1229:0:0 < 1048 && v1222:0:0 + 4 * v1229:0:0 > 4 && v1224:0:0 < 1047

----------------------------------------

(33) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_483 ] = -1*f_483_2

The following rules are decreasing:
f_483(v1222:0:0, v1229:0:0, v1224:0:0) -> f_483(v1222:0:0, 1 + v1229:0:0, v1229:0:0) :|: v1229:0:0 > 0 && v1229:0:0 < 1048 && v1222:0:0 + 4 * v1229:0:0 > 4 && v1224:0:0 < 1047

The following rules are bounded:
f_483(v1222:0:0, v1229:0:0, v1224:0:0) -> f_483(v1222:0:0, 1 + v1229:0:0, v1229:0:0) :|: v1229:0:0 > 0 && v1229:0:0 < 1048 && v1222:0:0 + 4 * v1229:0:0 > 4 && v1224:0:0 < 1047


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
SCC
----------------------------------------

(36) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 24 rulesP rules:
f_155(v1, v3, v5, 0, v7, 1, v10, v2, v4, v6, 3, 4191, 4, 4192) -> f_157(v1, v3, v5, 0, v7, 1, v10, v2, v4, v6, 3, 4191, 4, 4192) :|: 0 = 0
f_157(v1, v3, v5, 0, v7, 1, v10, v2, v4, v6, 3, 4191, 4, 4192) -> f_160(v1, v3, v5, 0, v7, 1, v10, v2, v4, v6, 3, 4191, 4, 4192) :|: 0 = 0
f_160(v1, v3, v5, 0, v7, 1, v10, v2, v4, v6, 3, 4191, 4, 4192) -> f_163(v1, v3, v5, 0, v7, 1, v10, v2, v4, v6, 3, 4191, 4, 4192) :|: 0 = 0
f_163(v1, v3, v5, 0, v7, 1, v10, v2, v4, v6, 3, 4191, 4, 4192) -> f_166(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) :|: 0 = 0
f_166(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) -> f_169(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) :|: 0 <= v10 && 1 <= v7
f_169(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) -> f_172(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) :|: 0 = 0
f_172(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) -> f_175(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) :|: TRUE
f_175(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) -> f_178(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) :|: 0 = 0
f_178(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) -> f_181(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) :|: 0 = 0
f_181(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) -> f_184(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) :|: 0 = 0
f_184(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) -> f_187(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) :|: TRUE
f_187(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) -> f_190(v1, v3, v5, 0, v10, 1, v95, v7, v2, v4, v6, 3, 4191, 4, 4192) :|: TRUE
f_190(v1, v3, v5, 0, v10, 1, v95, v7, v2, v4, v6, 3, 4191, 4, 4192) -> f_194(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) :|: v95 = 0
f_194(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) -> f_198(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) :|: 0 = 0
f_198(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) -> f_202(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) :|: TRUE
f_202(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) -> f_206(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) :|: 0 = 0
f_206(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) -> f_210(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) :|: 0 = 0
f_210(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) -> f_213(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) :|: 0 = 0
f_213(v1, v3, v5, 0, v10, 1, v7, v2, v4, v6, 3, 4191, 4, 4192) -> f_216(v1, v3, v5, 0, v10, 1, v2, v4, v6, 3, 4191, 4, 4192) :|: 0 = 0
f_216(v1, v3, v5, 0, v10, 1, v2, v4, v6, 3, 4191, 4, 4192) -> f_219(v1, v3, v5, 0, v10, 1, v151, v2, v4, v6, 3, 4191, 4, 4192) :|: 1 + v151 = v10 && 0 <= 1 + v151
f_219(v1, v3, v5, 0, v10, 1, v151, v2, v4, v6, 3, 4191, 4, 4192) -> f_222(v1, v3, v5, 0, v10, 1, v151, v2, v4, v6, 3, 4191, 4, 4192) :|: TRUE
f_222(v1, v3, v5, 0, v10, 1, v151, v2, v4, v6, 3, 4191, 4, 4192) -> f_226(v1, v3, v5, 0, v10, 1, v151, v2, v4, v6, 3, 4191, 4, 4192) :|: TRUE
f_226(v1, v3, v5, 0, v10, 1, v151, v2, v4, v6, 3, 4191, 4, 4192) -> f_153(v1, v3, v5, 0, v10, 1, v151, v2, v4, v6, 3, 4191, 4, 4192) :|: TRUE
f_153(v1, v3, v5, 0, v7, 1, v10, v2, v4, v6, 3, 4191, 4, 4192) -> f_155(v1, v3, v5, 0, v7, 1, v10, v2, v4, v6, 3, 4191, 4, 4192) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_155(v1:0, v3:0, v5:0, 0, v7:0, 1, 1 + v151:0, v2:0, v4:0, v6:0, 3, 4191, 4, 4192) -> f_155(v1:0, v3:0, v5:0, 0, 1 + v151:0, 1, v151:0, v2:0, v4:0, v6:0, 3, 4191, 4, 4192) :|: v7:0 > 0 && v151:0 > -2
Filtered unneeded arguments:
   f_155(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_155(x5, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_155(v7:0, sum~cons_1~v151:0) -> f_155(1 + v151:0, v151:0) :|: v7:0 > 0 && v151:0 > -2 && sum~cons_1~v151:0 = 1 + v151:0

----------------------------------------

(37)
Obligation:
Rules:
f_155(v7:0, sum~cons_1~v151:0) -> f_155(1 + v151:0, v151:0) :|: v7:0 > 0 && v151:0 > -2 && sum~cons_1~v151:0 = 1 + v151:0

----------------------------------------

(38) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(39)
Obligation:
Rules:
f_155(v7:0:0, sum~cons_1~v151:0:0) -> f_155(1 + v151:0:0, v151:0:0) :|: v7:0:0 > 0 && v151:0:0 > -2 && sum~cons_1~v151:0:0 = 1 + v151:0:0

----------------------------------------

(40) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_155(x, x1)] = x1

The following rules are decreasing:
f_155(v7:0:0, sum~cons_1~v151:0:0) -> f_155(1 + v151:0:0, v151:0:0) :|: v7:0:0 > 0 && v151:0:0 > -2 && sum~cons_1~v151:0:0 = 1 + v151:0:0
The following rules are bounded:
f_155(v7:0:0, sum~cons_1~v151:0:0) -> f_155(1 + v151:0:0, v151:0:0) :|: v7:0:0 > 0 && v151:0:0 > -2 && sum~cons_1~v151:0:0 = 1 + v151:0:0

----------------------------------------

(41)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
