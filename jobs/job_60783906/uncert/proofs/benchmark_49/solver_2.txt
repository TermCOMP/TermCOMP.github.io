MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/1xWwz.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Quasi decreasingness of the given CTRS could not be shown:

(0) CTRS
(1) CTRSToQTRSProof [SOUND, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (16) YES
    (17) QDP
        (18) UsableRulesProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) QDP
        (23) NonTerminationLoopProof [COMPLETE, 0 ms]
        (24) NO


----------------------------------------

(0)
Obligation:
Conditional term rewrite system:
The TRS R consists of the following rules:

   m(x, 0) -> x
   m(0, y) -> 0
   m(s(x), s(y)) -> m(x, y)
   greater(s(x), s(y)) -> greater(x, y)
   greater(s(x), 0) -> true
   leq(s(x), s(y)) -> leq(x, y)
   leq(0, x) -> true

The conditional TRS C consists of the following conditional rules:

   div(x, y) -> pair(0, y) <= greater(y, x) -> true
   div(x, y) -> pair(s(q), r) <= leq(y, x) -> true, div(m(x, y), y) -> pair(q, r)


----------------------------------------

(1) CTRSToQTRSProof (SOUND)
The conditional rules have been transormed into unconditional rules according to [CTRS,AAECCNOC].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   div(x, y) -> U1(greater(y, x), y)
   U1(true, y) -> pair(0, y)
   div(x, y) -> U2(leq(y, x), x, y)
   U2(true, x, y) -> U3(div(m(x, y), y))
   U3(pair(q, r)) -> pair(s(q), r)
   m(x, 0) -> x
   m(0, y) -> 0
   m(s(x), s(y)) -> m(x, y)
   greater(s(x), s(y)) -> greater(x, y)
   greater(s(x), 0) -> true
   leq(s(x), s(y)) -> leq(x, y)
   leq(0, x) -> true

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(x, y) -> U1^1(greater(y, x), y)
   DIV(x, y) -> GREATER(y, x)
   DIV(x, y) -> U2^1(leq(y, x), x, y)
   DIV(x, y) -> LEQ(y, x)
   U2^1(true, x, y) -> U3^1(div(m(x, y), y))
   U2^1(true, x, y) -> DIV(m(x, y), y)
   U2^1(true, x, y) -> M(x, y)
   M(s(x), s(y)) -> M(x, y)
   GREATER(s(x), s(y)) -> GREATER(x, y)
   LEQ(s(x), s(y)) -> LEQ(x, y)

The TRS R consists of the following rules:

   div(x, y) -> U1(greater(y, x), y)
   U1(true, y) -> pair(0, y)
   div(x, y) -> U2(leq(y, x), x, y)
   U2(true, x, y) -> U3(div(m(x, y), y))
   U3(pair(q, r)) -> pair(s(q), r)
   m(x, 0) -> x
   m(0, y) -> 0
   m(s(x), s(y)) -> m(x, y)
   greater(s(x), s(y)) -> greater(x, y)
   greater(s(x), 0) -> true
   leq(s(x), s(y)) -> leq(x, y)
   leq(0, x) -> true

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LEQ(s(x), s(y)) -> LEQ(x, y)

The TRS R consists of the following rules:

   div(x, y) -> U1(greater(y, x), y)
   U1(true, y) -> pair(0, y)
   div(x, y) -> U2(leq(y, x), x, y)
   U2(true, x, y) -> U3(div(m(x, y), y))
   U3(pair(q, r)) -> pair(s(q), r)
   m(x, 0) -> x
   m(0, y) -> 0
   m(s(x), s(y)) -> m(x, y)
   greater(s(x), s(y)) -> greater(x, y)
   greater(s(x), 0) -> true
   leq(s(x), s(y)) -> leq(x, y)
   leq(0, x) -> true

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LEQ(s(x), s(y)) -> LEQ(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LEQ(s(x), s(y)) -> LEQ(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GREATER(s(x), s(y)) -> GREATER(x, y)

The TRS R consists of the following rules:

   div(x, y) -> U1(greater(y, x), y)
   U1(true, y) -> pair(0, y)
   div(x, y) -> U2(leq(y, x), x, y)
   U2(true, x, y) -> U3(div(m(x, y), y))
   U3(pair(q, r)) -> pair(s(q), r)
   m(x, 0) -> x
   m(0, y) -> 0
   m(s(x), s(y)) -> m(x, y)
   greater(s(x), s(y)) -> greater(x, y)
   greater(s(x), 0) -> true
   leq(s(x), s(y)) -> leq(x, y)
   leq(0, x) -> true

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GREATER(s(x), s(y)) -> GREATER(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GREATER(s(x), s(y)) -> GREATER(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(16)
YES

----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   M(s(x), s(y)) -> M(x, y)

The TRS R consists of the following rules:

   div(x, y) -> U1(greater(y, x), y)
   U1(true, y) -> pair(0, y)
   div(x, y) -> U2(leq(y, x), x, y)
   U2(true, x, y) -> U3(div(m(x, y), y))
   U3(pair(q, r)) -> pair(s(q), r)
   m(x, 0) -> x
   m(0, y) -> 0
   m(s(x), s(y)) -> m(x, y)
   greater(s(x), s(y)) -> greater(x, y)
   greater(s(x), 0) -> true
   leq(s(x), s(y)) -> leq(x, y)
   leq(0, x) -> true

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   M(s(x), s(y)) -> M(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*M(s(x), s(y)) -> M(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(x, y) -> U2^1(leq(y, x), x, y)
   U2^1(true, x, y) -> DIV(m(x, y), y)

The TRS R consists of the following rules:

   div(x, y) -> U1(greater(y, x), y)
   U1(true, y) -> pair(0, y)
   div(x, y) -> U2(leq(y, x), x, y)
   U2(true, x, y) -> U3(div(m(x, y), y))
   U3(pair(q, r)) -> pair(s(q), r)
   m(x, 0) -> x
   m(0, y) -> 0
   m(s(x), s(y)) -> m(x, y)
   greater(s(x), s(y)) -> greater(x, y)
   greater(s(x), 0) -> true
   leq(s(x), s(y)) -> leq(x, y)
   leq(0, x) -> true

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = U2^1(leq(0, x), x', y') evaluates to  t =U2^1(leq(y', m(x', y')), m(x', y'), y')

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [x / m(x', 0), x' / m(x', 0)]
* Semiunifier: [y' / 0]

--------------------------------------------------------------------------------
Rewriting sequence

U2^1(leq(0, x), x', 0) -> U2^1(true, x', 0)
with rule leq(0, x'') -> true at position [0] and matcher [x'' / x]

U2^1(true, x', 0) -> DIV(m(x', 0), 0)
with rule U2^1(true, x'', y') -> DIV(m(x'', y'), y') at position [] and matcher [x'' / x', y' / 0]

DIV(m(x', 0), 0) -> U2^1(leq(0, m(x', 0)), m(x', 0), 0)
with rule DIV(x, y) -> U2^1(leq(y, x), x, y)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(24)
NO
