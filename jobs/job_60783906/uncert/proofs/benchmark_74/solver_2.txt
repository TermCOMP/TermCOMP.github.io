MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/OIY8r.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Quasi decreasingness of the given CTRS could not be shown:

(0) CTRS
(1) CTRSToQTRSProof [SOUND, 0 ms]
(2) QTRS
(3) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) UsableRulesProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) NonTerminationLoopProof [COMPLETE, 0 ms]
        (15) NO
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) NonTerminationLoopProof [COMPLETE, 0 ms]
        (22) NO


----------------------------------------

(0)
Obligation:
Conditional term rewrite system:
The TRS R consists of the following rules:

   a -> f(a)

The conditional TRS C consists of the following conditional rules:

   f(x) -> b <= f(x) -> z, x -> z


----------------------------------------

(1) CTRSToQTRSProof (SOUND)
The conditional rules have been transormed into unconditional rules according to [CTRS,AAECCNOC].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(x) -> U1(f(x), x)
   U1(z, x) -> U2(x)
   U2(z) -> b
   a -> f(a)

Q is empty.

----------------------------------------

(3) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(x) -> U1(f(x), x)
   U1(z, x) -> U2(x)
   U2(z) -> b
   a -> f(a)

The set Q consists of the following terms:

   f(x0)
   U1(x0, x1)
   U2(x0)
   a


----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x) -> U1^1(f(x), x)
   F(x) -> F(x)
   U1^1(z, x) -> U2^1(x)
   A -> F(a)
   A -> A

The TRS R consists of the following rules:

   f(x) -> U1(f(x), x)
   U1(z, x) -> U2(x)
   U2(z) -> b
   a -> f(a)

The set Q consists of the following terms:

   f(x0)
   U1(x0, x1)
   U2(x0)
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x) -> F(x)

The TRS R consists of the following rules:

   f(x) -> U1(f(x), x)
   U1(z, x) -> U2(x)
   U2(z) -> b
   a -> f(a)

The set Q consists of the following terms:

   f(x0)
   U1(x0, x1)
   U2(x0)
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x) -> F(x)

R is empty.
The set Q consists of the following terms:

   f(x0)
   U1(x0, x1)
   U2(x0)
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(x0)
   U1(x0, x1)
   U2(x0)
   a


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x) -> F(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F(x) evaluates to  t =F(x)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F(x) to F(x).




----------------------------------------

(15)
NO

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A -> A

The TRS R consists of the following rules:

   f(x) -> U1(f(x), x)
   U1(z, x) -> U2(x)
   U2(z) -> b
   a -> f(a)

The set Q consists of the following terms:

   f(x0)
   U1(x0, x1)
   U2(x0)
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A -> A

R is empty.
The set Q consists of the following terms:

   f(x0)
   U1(x0, x1)
   U2(x0)
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(x0)
   U1(x0, x1)
   U2(x0)
   a


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A -> A

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = A evaluates to  t =A

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from A to A.




----------------------------------------

(22)
NO
