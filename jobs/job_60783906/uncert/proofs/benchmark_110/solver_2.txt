MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/yCOCT.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Quasi decreasingness of the given CTRS could not be shown:

(0) CTRS
(1) CTRSToQTRSProof [SOUND, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 24 ms]
(4) QTRS
(5) AAECC Innermost [EQUIVALENT, 0 ms]
(6) QTRS
(7) DependencyPairsProof [EQUIVALENT, 0 ms]
(8) QDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) AND
    (11) QDP
        (12) UsableRulesProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QReductionProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) NonTerminationLoopProof [COMPLETE, 0 ms]
        (17) NO
    (18) QDP
        (19) MNOCProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) NonLoopProof [COMPLETE, 5 ms]
        (22) NO


----------------------------------------

(0)
Obligation:
Conditional term rewrite system:
The TRS R consists of the following rules:

   f(x) -> g(a)
   g(x) -> f(x)

The conditional TRS C consists of the following conditional rules:

   a -> b <= a -> c, b -> c


----------------------------------------

(1) CTRSToQTRSProof (SOUND)
The conditional rules have been transormed into unconditional rules according to [CTRS,AAECCNOC].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a -> U1(a)
   U1(c) -> U2(b)
   U2(c) -> b
   f(x) -> g(a)
   g(x) -> f(x)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = x_1
   POL(U2(x_1)) = 2*x_1
   POL(a) = 0
   POL(b) = 0
   POL(c) = 2
   POL(f(x_1)) = 2*x_1
   POL(g(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U1(c) -> U2(b)
   U2(c) -> b




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a -> U1(a)
   f(x) -> g(a)
   g(x) -> f(x)

Q is empty.

----------------------------------------

(5) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   a -> U1(a)

The TRS R 2 is 
   f(x) -> g(a)
   g(x) -> f(x)

The signature Sigma is {f_1, g_1}
----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a -> U1(a)
   f(x) -> g(a)
   g(x) -> f(x)

The set Q consists of the following terms:

   a
   f(x0)
   g(x0)


----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A -> A
   F(x) -> G(a)
   F(x) -> A
   G(x) -> F(x)

The TRS R consists of the following rules:

   a -> U1(a)
   f(x) -> g(a)
   g(x) -> f(x)

The set Q consists of the following terms:

   a
   f(x0)
   g(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(10)
Complex Obligation (AND)

----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A -> A

The TRS R consists of the following rules:

   a -> U1(a)
   f(x) -> g(a)
   g(x) -> f(x)

The set Q consists of the following terms:

   a
   f(x0)
   g(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A -> A

R is empty.
The set Q consists of the following terms:

   a
   f(x0)
   g(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   a
   f(x0)
   g(x0)


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A -> A

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = A evaluates to  t =A

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from A to A.




----------------------------------------

(17)
NO

----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x) -> G(a)
   G(x) -> F(x)

The TRS R consists of the following rules:

   a -> U1(a)
   f(x) -> g(a)
   g(x) -> f(x)

The set Q consists of the following terms:

   a
   f(x0)
   g(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x) -> G(a)
   G(x) -> F(x)

The TRS R consists of the following rules:

   a -> U1(a)
   f(x) -> g(a)
   g(x) -> f(x)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) NonLoopProof (COMPLETE)
By Theorem 8 [NONLOOP] we deduce infiniteness of the QDP.
We apply the theorem with m = 1, b = 0, 
?' = [ ], and ?' = [x0 / a] on the rule
G(a)[ ]^n[ ] -> G(a)[ ]^n[x0 / a]
This rule is correct for the QDP as the following derivation shows:

G(a)[ ]^n[ ] -> G(a)[ ]^n[x0 / a]
    by Equivalency by Simplifying Mu with mu1: [x0 / a] mu2: [ ]
    intermediate steps: Instantiate mu
    G(x0)[ ]^n[ ] -> G(a)[ ]^n[ ]
        by Narrowing at position: []
        intermediate steps: Instantiation
        G(x)[ ]^n[ ] -> F(x)[ ]^n[ ]
            by Rule from TRS P

        intermediate steps: Instantiation - Instantiation
        F(x)[ ]^n[ ] -> G(a)[ ]^n[ ]
            by Rule from TRS P
----------------------------------------

(22)
NO
