YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/AxP0e.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Quasi decreasingness of the given CTRS could be proven:

(0) CTRS
(1) CTRSToQTRSProof [SOUND, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (16) YES
    (17) QDP
        (18) QDPOrderProof [EQUIVALENT, 31 ms]
        (19) QDP
        (20) DependencyGraphProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QDPOrderProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) DependencyGraphProof [EQUIVALENT, 0 ms]
        (25) TRUE


----------------------------------------

(0)
Obligation:
Conditional term rewrite system:
The TRS R consists of the following rules:

   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   gcd(x, x) -> x
   gcd(s(x), 0) -> s(x)
   gcd(0, s(y)) -> s(y)

The conditional TRS C consists of the following conditional rules:

   gcd(s(x), s(y)) -> gcd(minus(x, y), s(y)) <= less(y, x) -> true
   gcd(s(x), s(y)) -> gcd(s(x), minus(y, x)) <= less(x, y) -> true


----------------------------------------

(1) CTRSToQTRSProof (SOUND)
The conditional rules have been transormed into unconditional rules according to [CTRS,AAECCNOC].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   gcd(s(x), s(y)) -> U1(less(y, x), x, y)
   U1(true, x, y) -> gcd(minus(x, y), s(y))
   gcd(s(x), s(y)) -> U2(less(x, y), x, y)
   U2(true, x, y) -> gcd(s(x), minus(y, x))
   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   gcd(x, x) -> x
   gcd(s(x), 0) -> s(x)
   gcd(0, s(y)) -> s(y)

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GCD(s(x), s(y)) -> U1^1(less(y, x), x, y)
   GCD(s(x), s(y)) -> LESS(y, x)
   U1^1(true, x, y) -> GCD(minus(x, y), s(y))
   U1^1(true, x, y) -> MINUS(x, y)
   GCD(s(x), s(y)) -> U2^1(less(x, y), x, y)
   GCD(s(x), s(y)) -> LESS(x, y)
   U2^1(true, x, y) -> GCD(s(x), minus(y, x))
   U2^1(true, x, y) -> MINUS(y, x)
   LESS(s(x), s(y)) -> LESS(x, y)
   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   gcd(s(x), s(y)) -> U1(less(y, x), x, y)
   U1(true, x, y) -> gcd(minus(x, y), s(y))
   gcd(s(x), s(y)) -> U2(less(x, y), x, y)
   U2(true, x, y) -> gcd(s(x), minus(y, x))
   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   gcd(x, x) -> x
   gcd(s(x), 0) -> s(x)
   gcd(0, s(y)) -> s(y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   gcd(s(x), s(y)) -> U1(less(y, x), x, y)
   U1(true, x, y) -> gcd(minus(x, y), s(y))
   gcd(s(x), s(y)) -> U2(less(x, y), x, y)
   U2(true, x, y) -> gcd(s(x), minus(y, x))
   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   gcd(x, x) -> x
   gcd(s(x), 0) -> s(x)
   gcd(0, s(y)) -> s(y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS(s(x), s(y)) -> LESS(x, y)

The TRS R consists of the following rules:

   gcd(s(x), s(y)) -> U1(less(y, x), x, y)
   U1(true, x, y) -> gcd(minus(x, y), s(y))
   gcd(s(x), s(y)) -> U2(less(x, y), x, y)
   U2(true, x, y) -> gcd(s(x), minus(y, x))
   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   gcd(x, x) -> x
   gcd(s(x), 0) -> s(x)
   gcd(0, s(y)) -> s(y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS(s(x), s(y)) -> LESS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LESS(s(x), s(y)) -> LESS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(16)
YES

----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1^1(true, x, y) -> GCD(minus(x, y), s(y))
   GCD(s(x), s(y)) -> U1^1(less(y, x), x, y)
   GCD(s(x), s(y)) -> U2^1(less(x, y), x, y)
   U2^1(true, x, y) -> GCD(s(x), minus(y, x))

The TRS R consists of the following rules:

   gcd(s(x), s(y)) -> U1(less(y, x), x, y)
   U1(true, x, y) -> gcd(minus(x, y), s(y))
   gcd(s(x), s(y)) -> U2(less(x, y), x, y)
   U2(true, x, y) -> gcd(s(x), minus(y, x))
   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   gcd(x, x) -> x
   gcd(s(x), 0) -> s(x)
   gcd(0, s(y)) -> s(y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U1^1(true, x, y) -> GCD(minus(x, y), s(y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
U1^1(x1, x2, x3)  =  U1^1(x2)

true  =  true

GCD(x1, x2)  =  x1

minus(x1, x2)  =  minus(x1)

s(x1)  =  s(x1)

less(x1, x2)  =  less

U2^1(x1, x2, x3)  =  U2^1(x2)

0  =  0

false  =  false


Recursive path order with status [RPO].
Quasi-Precedence: [U1^1_1, s_1, less, U2^1_1, 0, false] > [true, minus_1]

Status: U1^1_1: [1]
true: multiset status
minus_1: multiset status
s_1: [1]
less: multiset status
U2^1_1: [1]
0: multiset status
false: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)


----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GCD(s(x), s(y)) -> U1^1(less(y, x), x, y)
   GCD(s(x), s(y)) -> U2^1(less(x, y), x, y)
   U2^1(true, x, y) -> GCD(s(x), minus(y, x))

The TRS R consists of the following rules:

   gcd(s(x), s(y)) -> U1(less(y, x), x, y)
   U1(true, x, y) -> gcd(minus(x, y), s(y))
   gcd(s(x), s(y)) -> U2(less(x, y), x, y)
   U2(true, x, y) -> gcd(s(x), minus(y, x))
   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   gcd(x, x) -> x
   gcd(s(x), 0) -> s(x)
   gcd(0, s(y)) -> s(y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GCD(s(x), s(y)) -> U2^1(less(x, y), x, y)
   U2^1(true, x, y) -> GCD(s(x), minus(y, x))

The TRS R consists of the following rules:

   gcd(s(x), s(y)) -> U1(less(y, x), x, y)
   U1(true, x, y) -> gcd(minus(x, y), s(y))
   gcd(s(x), s(y)) -> U2(less(x, y), x, y)
   U2(true, x, y) -> gcd(s(x), minus(y, x))
   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   gcd(x, x) -> x
   gcd(s(x), 0) -> s(x)
   gcd(0, s(y)) -> s(y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   GCD(s(x), s(y)) -> U2^1(less(x, y), x, y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
GCD(x1, x2)  =  x2

s(x1)  =  s(x1)

U2^1(x1, x2, x3)  =  x3

minus(x1, x2)  =  x1

0  =  0


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   0=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2^1(true, x, y) -> GCD(s(x), minus(y, x))

The TRS R consists of the following rules:

   gcd(s(x), s(y)) -> U1(less(y, x), x, y)
   U1(true, x, y) -> gcd(minus(x, y), s(y))
   gcd(s(x), s(y)) -> U2(less(x, y), x, y)
   U2(true, x, y) -> gcd(s(x), minus(y, x))
   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   gcd(x, x) -> x
   gcd(s(x), 0) -> s(x)
   gcd(0, s(y)) -> s(y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(25)
TRUE
