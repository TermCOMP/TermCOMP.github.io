YES

Problem 1: 

(VAR vu95NonEmpty x y ys zs1 zs2)
(RULES
le(num0,y) -> ftrue
le(s(x),num0) -> ffalse
le(s(x),s(y)) -> le(x,y)
split(x,cons(y,ys)) -> tp2(cons(y,zs1),zs2) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ffalse
split(x,cons(y,ys)) -> tp2(zs1,cons(y,zs2)) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ftrue
split(x,nil) -> tp2(nil,nil)
)


Problem 1: 
Valid CTRS Processor:
-> Rules:
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 split(x,cons(y,ys)) -> tp2(cons(y,zs1),zs2) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ffalse
 split(x,cons(y,ys)) -> tp2(zs1,cons(y,zs2)) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ftrue
 split(x,nil) -> tp2(nil,nil)
-> The system is a deterministic 3-CTRS.

Problem 1: 

2D Dependency Pair Processor:

Conditional Termination Problem 1:
-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
-> QPairs:
 Empty
-> Rules:
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 split(x,cons(y,ys)) -> tp2(cons(y,zs1),zs2) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ffalse
 split(x,cons(y,ys)) -> tp2(zs1,cons(y,zs2)) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ftrue
 split(x,nil) -> tp2(nil,nil)

Conditional Termination Problem 2:
-> Pairs:
 SPLIT(x,cons(y,ys)) -> LE(x,y) | split(x,ys) ->* tp2(zs1,zs2)
 SPLIT(x,cons(y,ys)) -> SPLIT(x,ys)
-> QPairs:
 LE(s(x),s(y)) -> LE(x,y)
-> Rules:
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 split(x,cons(y,ys)) -> tp2(cons(y,zs1),zs2) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ffalse
 split(x,cons(y,ys)) -> tp2(zs1,cons(y,zs2)) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ftrue
 split(x,nil) -> tp2(nil,nil)


The problem is decomposed in 2 subproblems.

Problem 1.1: 

SCC Processor:
-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
-> QPairs:
 Empty
-> Rules:
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 split(x,cons(y,ys)) -> tp2(cons(y,zs1),zs2) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ffalse
 split(x,cons(y,ys)) -> tp2(zs1,cons(y,zs2)) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ftrue
 split(x,nil) -> tp2(nil,nil)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
-> QPairs:
 Empty
->->-> Rules:
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 split(x,cons(y,ys)) -> tp2(cons(y,zs1),zs2) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ffalse
 split(x,cons(y,ys)) -> tp2(zs1,cons(y,zs2)) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ftrue
 split(x,nil) -> tp2(nil,nil)

Problem 1.1: 

Subterm Processor:
-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
-> QPairs:
 Empty
-> Rules:
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 split(x,cons(y,ys)) -> tp2(cons(y,zs1),zs2) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ffalse
 split(x,cons(y,ys)) -> tp2(zs1,cons(y,zs2)) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ftrue
 split(x,nil) -> tp2(nil,nil)
->Projection:
 pi(LE) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> QPairs:
 Empty
-> Rules:
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 split(x,cons(y,ys)) -> tp2(cons(y,zs1),zs2) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ffalse
 split(x,cons(y,ys)) -> tp2(zs1,cons(y,zs2)) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ftrue
 split(x,nil) -> tp2(nil,nil)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

SCC Processor:
-> Pairs:
 SPLIT(x,cons(y,ys)) -> LE(x,y) | split(x,ys) ->* tp2(zs1,zs2)
 SPLIT(x,cons(y,ys)) -> SPLIT(x,ys)
-> QPairs:
 LE(s(x),s(y)) -> LE(x,y)
-> Rules:
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 split(x,cons(y,ys)) -> tp2(cons(y,zs1),zs2) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ffalse
 split(x,cons(y,ys)) -> tp2(zs1,cons(y,zs2)) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ftrue
 split(x,nil) -> tp2(nil,nil)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 SPLIT(x,cons(y,ys)) -> SPLIT(x,ys)
-> QPairs:
 Empty
->->-> Rules:
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 split(x,cons(y,ys)) -> tp2(cons(y,zs1),zs2) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ffalse
 split(x,cons(y,ys)) -> tp2(zs1,cons(y,zs2)) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ftrue
 split(x,nil) -> tp2(nil,nil)

Problem 1.2: 

Subterm Processor:
-> Pairs:
 SPLIT(x,cons(y,ys)) -> SPLIT(x,ys)
-> QPairs:
 Empty
-> Rules:
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 split(x,cons(y,ys)) -> tp2(cons(y,zs1),zs2) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ffalse
 split(x,cons(y,ys)) -> tp2(zs1,cons(y,zs2)) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ftrue
 split(x,nil) -> tp2(nil,nil)
->Projection:
 pi(SPLIT) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> QPairs:
 Empty
-> Rules:
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 split(x,cons(y,ys)) -> tp2(cons(y,zs1),zs2) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ffalse
 split(x,cons(y,ys)) -> tp2(zs1,cons(y,zs2)) | split(x,ys) ->* tp2(zs1,zs2), le(x,y) ->* ftrue
 split(x,nil) -> tp2(nil,nil)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
