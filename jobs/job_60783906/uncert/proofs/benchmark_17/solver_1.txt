YES

Problem 1: 

(VAR vu95NonEmpty x y)
(RULES
add(num0,y) -> y
add(s(x),y) -> s(add(x,y))
gcd(add(x,y),y) -> gcd(x,y)
gcd(num0,x) -> x
gcd(x,num0) -> x
gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
gcd(y,add(x,y)) -> gcd(x,y)
)


Problem 1: 
Valid CTRS Processor:
-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)
-> The system is a 2-CTRS.

Problem 1: 

2D Dependency Pair Processor:

Conditional Termination Problem 1:
-> Pairs:
 ADD(s(x),y) -> ADD(x,y)
 GCD(add(x,y),y) -> GCD(x,y)
 GCD(x,y) -> GCD(y,x) | leq(y,x) ->* ffalse
 GCD(y,add(x,y)) -> GCD(x,y)
-> QPairs:
 Empty
-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)

Conditional Termination Problem 2:
-> Pairs:
 Empty
-> QPairs:
 Empty
-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)


The problem is decomposed in 2 subproblems.

Problem 1.1: 

SCC Processor:
-> Pairs:
 ADD(s(x),y) -> ADD(x,y)
 GCD(add(x,y),y) -> GCD(x,y)
 GCD(x,y) -> GCD(y,x) | leq(y,x) ->* ffalse
 GCD(y,add(x,y)) -> GCD(x,y)
-> QPairs:
 Empty
-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 GCD(add(x,y),y) -> GCD(x,y)
 GCD(x,y) -> GCD(y,x) | leq(y,x) ->* ffalse
 GCD(y,add(x,y)) -> GCD(x,y)
-> QPairs:
 Empty
->->-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)
->->Cycle:
->->-> Pairs:
 ADD(s(x),y) -> ADD(x,y)
-> QPairs:
 Empty
->->-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)


The problem is decomposed in 2 subproblems.

Problem 1.1.1: 

Removal Triple Processor:
-> Pairs:
 GCD(add(x,y),y) -> GCD(x,y)
 GCD(x,y) -> GCD(y,x) | leq(y,x) ->* ffalse
 GCD(y,add(x,y)) -> GCD(x,y)
-> QPairs:
 Empty
-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)
-> Usable rules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[add](X1,X2) = 2.X1 + 2
[gcd](X1,X2) = 0
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 0
[leq](X1,X2) = 0
[s](X) = 0
[ADD](X1,X2) = 0
[GCD](X1,X2) = 2.X1 + 2.X2

Problem 1.1.1: 

SCC Processor:
-> Pairs:
 GCD(x,y) -> GCD(y,x) | leq(y,x) ->* ffalse
 GCD(y,add(x,y)) -> GCD(x,y)
-> QPairs:
 Empty
-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 GCD(x,y) -> GCD(y,x) | leq(y,x) ->* ffalse
 GCD(y,add(x,y)) -> GCD(x,y)
-> QPairs:
 Empty
->->-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)

Problem 1.1.1: 

Removal Triple Processor:
-> Pairs:
 GCD(x,y) -> GCD(y,x) | leq(y,x) ->* ffalse
 GCD(y,add(x,y)) -> GCD(x,y)
-> QPairs:
 Empty
-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)
-> Usable rules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[add](X1,X2) = X1 + 1
[gcd](X1,X2) = 0
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 0
[leq](X1,X2) = 0
[s](X) = 0
[ADD](X1,X2) = 0
[GCD](X1,X2) = 2.X1 + 2.X2

Problem 1.1.1: 

SCC Processor:
-> Pairs:
 GCD(x,y) -> GCD(y,x) | leq(y,x) ->* ffalse
-> QPairs:
 Empty
-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 GCD(x,y) -> GCD(y,x) | leq(y,x) ->* ffalse
-> QPairs:
 Empty
->->-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)

Problem 1.1.1: 

Semantic Removal Triple Processor:
-> Pairs:
 GCD(x,y) -> GCD(y,x) | leq(y,x) ->* ffalse
-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)
-> Needed rules:
 Empty
-> Usable rules:
 Empty
->Mace4 Output:
 ============================== Mace4 =================================
Mace4 (64) version 2009-11A, November 2009.
Process 58 was started by ff862203 on r23m0027.hpc.itc.rwth-aachen.de,
Wed Sep  3 11:34:44 2025
The command was "./mace4 -c -f /tmp/mace422-10.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /tmp/mace422-10.in

assign(max_seconds,20).

formulas(assumptions).
arrowStar_s0(x,x) # label(reflexivity).
arrow_s0(x,y) & arrowStar_s0(y,z) -> arrowStar_s0(x,z) # label(compatibility).
gtrsim_s0(x,y) & sqsupset_s0(y,z) -> sqsupset_s0(x,z) # label(compatibility).
succeq_s0(x,y) & sqsupset_s0(y,z) -> sqsupset_s0(x,z) # label(compatibility).
gtrsim_s0(x,y) & succeq_s0(y,z) -> gtrsim_s0(x,z) # label(compatibility).
arrow_s0(x1,y) -> arrow_s0(f2(x1,x2),f2(y,x2)) # label(congruence).
arrow_s0(x2,y) -> arrow_s0(f2(x1,x2),f2(x1,y)) # label(congruence).
arrow_s0(x1,y) -> arrow_s0(f3(x1,x2),f3(y,x2)) # label(congruence).
arrow_s0(x2,y) -> arrow_s0(f3(x1,x2),f3(x1,y)) # label(congruence).
arrow_s0(x1,y) -> arrow_s0(f7(x1,x2),f7(y,x2)) # label(congruence).
arrow_s0(x2,y) -> arrow_s0(f7(x1,x2),f7(x1,y)) # label(congruence).
arrow_s0(x1,y) -> arrow_s0(f8(x1),f8(y)) # label(congruence).
arrow_s0(x1,y) -> arrow_s0(f13(x1,x2),f13(y,x2)) # label(congruence).
arrow_s0(x2,y) -> arrow_s0(f13(x1,x2),f13(x1,y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f2(x1,x2),f2(y,x2)) # label(congruence).
arrowN_s0(x2,y) -> arrowN_s0(f2(x1,x2),f2(x1,y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f3(x1,x2),f3(y,x2)) # label(congruence).
arrowN_s0(x2,y) -> arrowN_s0(f3(x1,x2),f3(x1,y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f7(x1,x2),f7(y,x2)) # label(congruence).
arrowN_s0(x2,y) -> arrowN_s0(f7(x1,x2),f7(x1,y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f8(x1),f8(y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f11(x1,x2),f11(y,x2)) # label(congruence).
arrowN_s0(x2,y) -> arrowN_s0(f11(x1,x2),f11(x1,y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f12(x1,x2),f12(y,x2)) # label(congruence).
arrowN_s0(x2,y) -> arrowN_s0(f12(x1,x2),f12(x1,y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f13(x1,x2),f13(y,x2)) # label(congruence).
arrowN_s0(x2,y) -> arrowN_s0(f13(x1,x2),f13(x1,y)) # label(congruence).
arrow_s0(f13(x3,x4),x3) # label(replacement).
arrow_s0(f13(x3,x4),x4) # label(replacement).
arrowN_s0(f13(x3,x4),x3) # label(replacement).
arrowN_s0(f13(x3,x4),x4) # label(replacement).
arrowN_s0(x,y) -> gtrsim_s0(x,y) # label(inclusion).
arrowStar_s0(f7(x2,x1),f6) -> sqsupset_s0(f12(x1,x2),f12(x2,x1)) # label(replacement).
sqsupset_s0(x,y) -> sqsupsetStar_s0(x,y) # label(inclusion).
sqsupset_s0(x,y) & sqsupsetStar_s0(y,z) -> sqsupsetStar_s0(x,z) # label(compatibility).
end_of_list.

formulas(goals).
(exists x sqsupsetStar_s0(x,x)) # label(wellfoundedness).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 arrow_s0(x,y) & arrowStar_s0(y,z) -> arrowStar_s0(x,z) # label(compatibility) # label(non_clause).  [assumption].
2 gtrsim_s0(x,y) & sqsupset_s0(y,z) -> sqsupset_s0(x,z) # label(compatibility) # label(non_clause).  [assumption].
3 succeq_s0(x,y) & sqsupset_s0(y,z) -> sqsupset_s0(x,z) # label(compatibility) # label(non_clause).  [assumption].
4 gtrsim_s0(x,y) & succeq_s0(y,z) -> gtrsim_s0(x,z) # label(compatibility) # label(non_clause).  [assumption].
5 arrow_s0(x1,y) -> arrow_s0(f2(x1,x2),f2(y,x2)) # label(congruence) # label(non_clause).  [assumption].
6 arrow_s0(x2,y) -> arrow_s0(f2(x1,x2),f2(x1,y)) # label(congruence) # label(non_clause).  [assumption].
7 arrow_s0(x1,y) -> arrow_s0(f3(x1,x2),f3(y,x2)) # label(congruence) # label(non_clause).  [assumption].
8 arrow_s0(x2,y) -> arrow_s0(f3(x1,x2),f3(x1,y)) # label(congruence) # label(non_clause).  [assumption].
9 arrow_s0(x1,y) -> arrow_s0(f7(x1,x2),f7(y,x2)) # label(congruence) # label(non_clause).  [assumption].
10 arrow_s0(x2,y) -> arrow_s0(f7(x1,x2),f7(x1,y)) # label(congruence) # label(non_clause).  [assumption].
11 arrow_s0(x1,y) -> arrow_s0(f8(x1),f8(y)) # label(congruence) # label(non_clause).  [assumption].
12 arrow_s0(x1,y) -> arrow_s0(f13(x1,x2),f13(y,x2)) # label(congruence) # label(non_clause).  [assumption].
13 arrow_s0(x2,y) -> arrow_s0(f13(x1,x2),f13(x1,y)) # label(congruence) # label(non_clause).  [assumption].
14 arrowN_s0(x1,y) -> arrowN_s0(f2(x1,x2),f2(y,x2)) # label(congruence) # label(non_clause).  [assumption].
15 arrowN_s0(x2,y) -> arrowN_s0(f2(x1,x2),f2(x1,y)) # label(congruence) # label(non_clause).  [assumption].
16 arrowN_s0(x1,y) -> arrowN_s0(f3(x1,x2),f3(y,x2)) # label(congruence) # label(non_clause).  [assumption].
17 arrowN_s0(x2,y) -> arrowN_s0(f3(x1,x2),f3(x1,y)) # label(congruence) # label(non_clause).  [assumption].
18 arrowN_s0(x1,y) -> arrowN_s0(f7(x1,x2),f7(y,x2)) # label(congruence) # label(non_clause).  [assumption].
19 arrowN_s0(x2,y) -> arrowN_s0(f7(x1,x2),f7(x1,y)) # label(congruence) # label(non_clause).  [assumption].
20 arrowN_s0(x1,y) -> arrowN_s0(f8(x1),f8(y)) # label(congruence) # label(non_clause).  [assumption].
21 arrowN_s0(x1,y) -> arrowN_s0(f11(x1,x2),f11(y,x2)) # label(congruence) # label(non_clause).  [assumption].
22 arrowN_s0(x2,y) -> arrowN_s0(f11(x1,x2),f11(x1,y)) # label(congruence) # label(non_clause).  [assumption].
23 arrowN_s0(x1,y) -> arrowN_s0(f12(x1,x2),f12(y,x2)) # label(congruence) # label(non_clause).  [assumption].
24 arrowN_s0(x2,y) -> arrowN_s0(f12(x1,x2),f12(x1,y)) # label(congruence) # label(non_clause).  [assumption].
25 arrowN_s0(x1,y) -> arrowN_s0(f13(x1,x2),f13(y,x2)) # label(congruence) # label(non_clause).  [assumption].
26 arrowN_s0(x2,y) -> arrowN_s0(f13(x1,x2),f13(x1,y)) # label(congruence) # label(non_clause).  [assumption].
27 arrowN_s0(x,y) -> gtrsim_s0(x,y) # label(inclusion) # label(non_clause).  [assumption].
28 arrowStar_s0(f7(x2,x1),f6) -> sqsupset_s0(f12(x1,x2),f12(x2,x1)) # label(replacement) # label(non_clause).  [assumption].
29 sqsupset_s0(x,y) -> sqsupsetStar_s0(x,y) # label(inclusion) # label(non_clause).  [assumption].
30 sqsupset_s0(x,y) & sqsupsetStar_s0(y,z) -> sqsupsetStar_s0(x,z) # label(compatibility) # label(non_clause).  [assumption].
31 (exists x sqsupsetStar_s0(x,x)) # label(wellfoundedness) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
arrowStar_s0(x,x) # label(reflexivity).
-arrow_s0(x,y) | -arrowStar_s0(y,z) | arrowStar_s0(x,z) # label(compatibility).
-gtrsim_s0(x,y) | -sqsupset_s0(y,z) | sqsupset_s0(x,z) # label(compatibility).
-succeq_s0(x,y) | -sqsupset_s0(y,z) | sqsupset_s0(x,z) # label(compatibility).
-gtrsim_s0(x,y) | -succeq_s0(y,z) | gtrsim_s0(x,z) # label(compatibility).
-arrow_s0(x,y) | arrow_s0(f2(x,z),f2(y,z)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f2(z,x),f2(z,y)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f3(x,z),f3(y,z)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f3(z,x),f3(z,y)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f7(x,z),f7(y,z)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f7(z,x),f7(z,y)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f8(x),f8(y)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f13(x,z),f13(y,z)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f13(z,x),f13(z,y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f2(x,z),f2(y,z)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f2(z,x),f2(z,y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f3(x,z),f3(y,z)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f3(z,x),f3(z,y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f7(x,z),f7(y,z)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f7(z,x),f7(z,y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f8(x),f8(y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f11(x,z),f11(y,z)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f11(z,x),f11(z,y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f12(x,z),f12(y,z)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f12(z,x),f12(z,y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f13(x,z),f13(y,z)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f13(z,x),f13(z,y)) # label(congruence).
arrow_s0(f13(x,y),x) # label(replacement).
arrow_s0(f13(x,y),y) # label(replacement).
arrowN_s0(f13(x,y),x) # label(replacement).
arrowN_s0(f13(x,y),y) # label(replacement).
-arrowN_s0(x,y) | gtrsim_s0(x,y) # label(inclusion).
-arrowStar_s0(f7(x,y),f6) | sqsupset_s0(f12(y,x),f12(x,y)) # label(replacement).
-sqsupset_s0(x,y) | sqsupsetStar_s0(x,y) # label(inclusion).
-sqsupset_s0(x,y) | -sqsupsetStar_s0(y,z) | sqsupsetStar_s0(x,z) # label(compatibility).
-sqsupsetStar_s0(x,x) # label(wellfoundedness).
end_of_list.

============================== end of clauses for search =============

% There are no natural numbers in the input.

============================== DOMAIN SIZE 2 =========================

============================== MODEL =================================

interpretation( 2, [number=1, seconds=0], [

        function(f6, [ 0 ]),

        function(f8(_), [ 0, 0 ]),

        function(f11(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f12(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f13(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f2(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f3(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f7(_,_), [
			   1, 1,
			   1, 1 ]),

        relation(arrowN_s0(_,_), [
			   1, 1,
			   0, 1 ]),

        relation(arrowStar_s0(_,_), [
			   1, 1,
			   0, 1 ]),

        relation(arrow_s0(_,_), [
			   1, 1,
			   0, 1 ]),

        relation(gtrsim_s0(_,_), [
			   1, 1,
			   0, 1 ]),

        relation(sqsupsetStar_s0(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(sqsupset_s0(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(succeq_s0(_,_), [
			   0, 0,
			   0, 0 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.00 seconds).
Ground clauses: seen=240, kept=236.
Selections=27, assignments=27, propagations=28, current_models=1.
Rewrite_terms=368, rewrite_bools=376, indexes=29.
Rules_from_neg_clauses=7, cross_offs=7.

============================== end of statistics =====================

User_CPU=0.00, System_CPU=0.00, Wall_clock=0.

Exiting with 1 model.

Process 58 exit (max_models) Wed Sep  3 11:34:44 2025
The process finished Wed Sep  3 11:34:44 2025


Mace4 cooked interpretation:

% number = 1
% seconds = 0

% Interpretation of size 2

f6 = 0.

f8(0) = 0.
f8(1) = 0.

f11(0,0) = 0.
f11(0,1) = 0.
f11(1,0) = 0.
f11(1,1) = 0.

f12(0,0) = 0.
f12(0,1) = 0.
f12(1,0) = 0.
f12(1,1) = 0.

f13(0,0) = 0.
f13(0,1) = 0.
f13(1,0) = 0.
f13(1,1) = 0.

f2(0,0) = 0.
f2(0,1) = 0.
f2(1,0) = 0.
f2(1,1) = 0.

f3(0,0) = 0.
f3(0,1) = 0.
f3(1,0) = 0.
f3(1,1) = 0.

f7(0,0) = 1.
f7(0,1) = 1.
f7(1,0) = 1.
f7(1,1) = 1.

  arrowN_s0(0,0).
  arrowN_s0(0,1).
- arrowN_s0(1,0).
  arrowN_s0(1,1).

  arrowStar_s0(0,0).
  arrowStar_s0(0,1).
- arrowStar_s0(1,0).
  arrowStar_s0(1,1).

  arrow_s0(0,0).
  arrow_s0(0,1).
- arrow_s0(1,0).
  arrow_s0(1,1).

  gtrsim_s0(0,0).
  gtrsim_s0(0,1).
- gtrsim_s0(1,0).
  gtrsim_s0(1,1).

- sqsupsetStar_s0(0,0).
- sqsupsetStar_s0(0,1).
- sqsupsetStar_s0(1,0).
- sqsupsetStar_s0(1,1).

- sqsupset_s0(0,0).
- sqsupset_s0(0,1).
- sqsupset_s0(1,0).
- sqsupset_s0(1,1).

- succeq_s0(0,0).
- succeq_s0(0,1).
- succeq_s0(1,0).
- succeq_s0(1,1).


Problem 1.1.1: 

SCC Processor:
-> Pairs:
 Empty
-> QPairs:
 Empty
-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.1.2: 

Subterm Processor:
-> Pairs:
 ADD(s(x),y) -> ADD(x,y)
-> QPairs:
 Empty
-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)
->Projection:
 pi(ADD) = 1

Problem 1.1.2: 

SCC Processor:
-> Pairs:
 Empty
-> QPairs:
 Empty
-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> QPairs:
 Empty
-> Rules:
 add(num0,y) -> y
 add(s(x),y) -> s(add(x,y))
 gcd(add(x,y),y) -> gcd(x,y)
 gcd(num0,x) -> x
 gcd(x,num0) -> x
 gcd(x,y) -> gcd(y,x) | leq(y,x) ->* ffalse
 gcd(y,add(x,y)) -> gcd(x,y)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
