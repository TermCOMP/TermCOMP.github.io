YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/xtyDD.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Quasi decreasingness of the given CTRS could be proven:

(0) CTRS
(1) CTRSToQTRSProof [SOUND, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (16) YES


----------------------------------------

(0)
Obligation:
Conditional term rewrite system:
The TRS R consists of the following rules:

   gcd(add(x, y), y) -> gcd(x, y)
   gcd(y, add(x, y)) -> gcd(x, y)
   gcd(x, 0) -> x
   gcd(0, x) -> x
   add(0, y) -> y
   add(s(x), y) -> s(add(x, y))

The conditional TRS C consists of the following conditional rules:

   gcd(x, y) -> gcd(y, x) <= leq(y, x) -> false


----------------------------------------

(1) CTRSToQTRSProof (SOUND)
The conditional rules have been transormed into unconditional rules according to [CTRS,AAECCNOC].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   gcd(x, y) -> U1(leq(y, x), x, y)
   U1(false, x, y) -> gcd(y, x)
   gcd(add(x, y), y) -> gcd(x, y)
   gcd(y, add(x, y)) -> gcd(x, y)
   gcd(x, 0) -> x
   gcd(0, x) -> x
   add(0, y) -> y
   add(s(x), y) -> s(add(x, y))

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GCD(x, y) -> U1^1(leq(y, x), x, y)
   U1^1(false, x, y) -> GCD(y, x)
   GCD(add(x, y), y) -> GCD(x, y)
   GCD(y, add(x, y)) -> GCD(x, y)
   ADD(s(x), y) -> ADD(x, y)

The TRS R consists of the following rules:

   gcd(x, y) -> U1(leq(y, x), x, y)
   U1(false, x, y) -> gcd(y, x)
   gcd(add(x, y), y) -> gcd(x, y)
   gcd(y, add(x, y)) -> gcd(x, y)
   gcd(x, 0) -> x
   gcd(0, x) -> x
   add(0, y) -> y
   add(s(x), y) -> s(add(x, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 2 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(x), y) -> ADD(x, y)

The TRS R consists of the following rules:

   gcd(x, y) -> U1(leq(y, x), x, y)
   U1(false, x, y) -> gcd(y, x)
   gcd(add(x, y), y) -> gcd(x, y)
   gcd(y, add(x, y)) -> gcd(x, y)
   gcd(x, 0) -> x
   gcd(0, x) -> x
   add(0, y) -> y
   add(s(x), y) -> s(add(x, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(x), y) -> ADD(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADD(s(x), y) -> ADD(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GCD(y, add(x, y)) -> GCD(x, y)
   GCD(add(x, y), y) -> GCD(x, y)

The TRS R consists of the following rules:

   gcd(x, y) -> U1(leq(y, x), x, y)
   U1(false, x, y) -> gcd(y, x)
   gcd(add(x, y), y) -> gcd(x, y)
   gcd(y, add(x, y)) -> gcd(x, y)
   gcd(x, 0) -> x
   gcd(0, x) -> x
   add(0, y) -> y
   add(s(x), y) -> s(add(x, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GCD(y, add(x, y)) -> GCD(x, y)
   GCD(add(x, y), y) -> GCD(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GCD(y, add(x, y)) -> GCD(x, y)
The graph contains the following edges 2 > 1, 1 >= 2, 2 > 2


*GCD(add(x, y), y) -> GCD(x, y)
The graph contains the following edges 1 > 1, 1 > 2, 2 >= 2


----------------------------------------

(16)
YES
