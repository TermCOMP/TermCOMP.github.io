YES

Problem 1: 

(VAR vu95NonEmpty l x y)
(RULES
le(num0,s(x)) -> ftrue
le(s(x),s(y)) -> le(x,y)
le(x,num0) -> ffalse
min(cons(x,nil)) -> x
min(cons(x,l)) -> min(l) | le(x,min(l)) ->* ffalse
min(cons(x,l)) -> min(l) | min(l) ->* x
min(cons(x,l)) -> x | le(x,min(l)) ->* ftrue
)


Problem 1: 
Valid CTRS Processor:
-> Rules:
 le(num0,s(x)) -> ftrue
 le(s(x),s(y)) -> le(x,y)
 le(x,num0) -> ffalse
 min(cons(x,nil)) -> x
 min(cons(x,l)) -> min(l) | le(x,min(l)) ->* ffalse
 min(cons(x,l)) -> min(l) | min(l) ->* x
 min(cons(x,l)) -> x | le(x,min(l)) ->* ftrue
-> The system is a 2-CTRS.

Problem 1: 

2D Dependency Pair Processor:

Conditional Termination Problem 1:
-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
 MIN(cons(x,l)) -> MIN(l) | le(x,min(l)) ->* ffalse
 MIN(cons(x,l)) -> MIN(l) | min(l) ->* x
-> QPairs:
 Empty
-> Rules:
 le(num0,s(x)) -> ftrue
 le(s(x),s(y)) -> le(x,y)
 le(x,num0) -> ffalse
 min(cons(x,nil)) -> x
 min(cons(x,l)) -> min(l) | le(x,min(l)) ->* ffalse
 min(cons(x,l)) -> min(l) | min(l) ->* x
 min(cons(x,l)) -> x | le(x,min(l)) ->* ftrue

Conditional Termination Problem 2:
-> Pairs:
 MIN(cons(x,l)) -> LE(x,min(l))
 MIN(cons(x,l)) -> MIN(l)
-> QPairs:
 LE(s(x),s(y)) -> LE(x,y)
 MIN(cons(x,l)) -> MIN(l) | le(x,min(l)) ->* ffalse
 MIN(cons(x,l)) -> MIN(l) | min(l) ->* x
-> Rules:
 le(num0,s(x)) -> ftrue
 le(s(x),s(y)) -> le(x,y)
 le(x,num0) -> ffalse
 min(cons(x,nil)) -> x
 min(cons(x,l)) -> min(l) | le(x,min(l)) ->* ffalse
 min(cons(x,l)) -> min(l) | min(l) ->* x
 min(cons(x,l)) -> x | le(x,min(l)) ->* ftrue


The problem is decomposed in 2 subproblems.

Problem 1.1: 

SCC Processor:
-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
 MIN(cons(x,l)) -> MIN(l) | le(x,min(l)) ->* ffalse
 MIN(cons(x,l)) -> MIN(l) | min(l) ->* x
-> QPairs:
 Empty
-> Rules:
 le(num0,s(x)) -> ftrue
 le(s(x),s(y)) -> le(x,y)
 le(x,num0) -> ffalse
 min(cons(x,nil)) -> x
 min(cons(x,l)) -> min(l) | le(x,min(l)) ->* ffalse
 min(cons(x,l)) -> min(l) | min(l) ->* x
 min(cons(x,l)) -> x | le(x,min(l)) ->* ftrue
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MIN(cons(x,l)) -> MIN(l) | le(x,min(l)) ->* ffalse
 MIN(cons(x,l)) -> MIN(l) | min(l) ->* x
-> QPairs:
 Empty
->->-> Rules:
 le(num0,s(x)) -> ftrue
 le(s(x),s(y)) -> le(x,y)
 le(x,num0) -> ffalse
 min(cons(x,nil)) -> x
 min(cons(x,l)) -> min(l) | le(x,min(l)) ->* ffalse
 min(cons(x,l)) -> min(l) | min(l) ->* x
 min(cons(x,l)) -> x | le(x,min(l)) ->* ftrue
->->Cycle:
->->-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
-> QPairs:
 Empty
->->-> Rules:
 le(num0,s(x)) -> ftrue
 le(s(x),s(y)) -> le(x,y)
 le(x,num0) -> ffalse
 min(cons(x,nil)) -> x
 min(cons(x,l)) -> min(l) | le(x,min(l)) ->* ffalse
 min(cons(x,l)) -> min(l) | min(l) ->* x
 min(cons(x,l)) -> x | le(x,min(l)) ->* ftrue


The problem is decomposed in 2 subproblems.

Problem 1.1.1: 

Subterm Processor:
-> Pairs:
 MIN(cons(x,l)) -> MIN(l) | le(x,min(l)) ->* ffalse
 MIN(cons(x,l)) -> MIN(l) | min(l) ->* x
-> QPairs:
 Empty
-> Rules:
 le(num0,s(x)) -> ftrue
 le(s(x),s(y)) -> le(x,y)
 le(x,num0) -> ffalse
 min(cons(x,nil)) -> x
 min(cons(x,l)) -> min(l) | le(x,min(l)) ->* ffalse
 min(cons(x,l)) -> min(l) | min(l) ->* x
 min(cons(x,l)) -> x | le(x,min(l)) ->* ftrue
->Projection:
 pi(MIN) = 1

Problem 1.1.1: 

SCC Processor:
-> Pairs:
 Empty
-> QPairs:
 Empty
-> Rules:
 le(num0,s(x)) -> ftrue
 le(s(x),s(y)) -> le(x,y)
 le(x,num0) -> ffalse
 min(cons(x,nil)) -> x
 min(cons(x,l)) -> min(l) | le(x,min(l)) ->* ffalse
 min(cons(x,l)) -> min(l) | min(l) ->* x
 min(cons(x,l)) -> x | le(x,min(l)) ->* ftrue
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.1.2: 

Subterm Processor:
-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
-> QPairs:
 Empty
-> Rules:
 le(num0,s(x)) -> ftrue
 le(s(x),s(y)) -> le(x,y)
 le(x,num0) -> ffalse
 min(cons(x,nil)) -> x
 min(cons(x,l)) -> min(l) | le(x,min(l)) ->* ffalse
 min(cons(x,l)) -> min(l) | min(l) ->* x
 min(cons(x,l)) -> x | le(x,min(l)) ->* ftrue
->Projection:
 pi(LE) = 1

Problem 1.1.2: 

SCC Processor:
-> Pairs:
 Empty
-> QPairs:
 Empty
-> Rules:
 le(num0,s(x)) -> ftrue
 le(s(x),s(y)) -> le(x,y)
 le(x,num0) -> ffalse
 min(cons(x,nil)) -> x
 min(cons(x,l)) -> min(l) | le(x,min(l)) ->* ffalse
 min(cons(x,l)) -> min(l) | min(l) ->* x
 min(cons(x,l)) -> x | le(x,min(l)) ->* ftrue
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

SCC Processor:
-> Pairs:
 MIN(cons(x,l)) -> LE(x,min(l))
 MIN(cons(x,l)) -> MIN(l)
-> QPairs:
 LE(s(x),s(y)) -> LE(x,y)
 MIN(cons(x,l)) -> MIN(l) | le(x,min(l)) ->* ffalse
 MIN(cons(x,l)) -> MIN(l) | min(l) ->* x
-> Rules:
 le(num0,s(x)) -> ftrue
 le(s(x),s(y)) -> le(x,y)
 le(x,num0) -> ffalse
 min(cons(x,nil)) -> x
 min(cons(x,l)) -> min(l) | le(x,min(l)) ->* ffalse
 min(cons(x,l)) -> min(l) | min(l) ->* x
 min(cons(x,l)) -> x | le(x,min(l)) ->* ftrue
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MIN(cons(x,l)) -> MIN(l)
-> QPairs:
 MIN(cons(x,l)) -> MIN(l) | le(x,min(l)) ->* ffalse
 MIN(cons(x,l)) -> MIN(l) | min(l) ->* x
->->-> Rules:
 le(num0,s(x)) -> ftrue
 le(s(x),s(y)) -> le(x,y)
 le(x,num0) -> ffalse
 min(cons(x,nil)) -> x
 min(cons(x,l)) -> min(l) | le(x,min(l)) ->* ffalse
 min(cons(x,l)) -> min(l) | min(l) ->* x
 min(cons(x,l)) -> x | le(x,min(l)) ->* ftrue

Problem 1.2: 

Subterm Processor:
-> Pairs:
 MIN(cons(x,l)) -> MIN(l)
-> QPairs:
 MIN(cons(x,l)) -> MIN(l) | le(x,min(l)) ->* ffalse
 MIN(cons(x,l)) -> MIN(l) | min(l) ->* x
-> Rules:
 le(num0,s(x)) -> ftrue
 le(s(x),s(y)) -> le(x,y)
 le(x,num0) -> ffalse
 min(cons(x,nil)) -> x
 min(cons(x,l)) -> min(l) | le(x,min(l)) ->* ffalse
 min(cons(x,l)) -> min(l) | min(l) ->* x
 min(cons(x,l)) -> x | le(x,min(l)) ->* ftrue
->Projection:
 pi(MIN) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> QPairs:
 Empty
-> Rules:
 le(num0,s(x)) -> ftrue
 le(s(x),s(y)) -> le(x,y)
 le(x,num0) -> ffalse
 min(cons(x,nil)) -> x
 min(cons(x,l)) -> min(l) | le(x,min(l)) ->* ffalse
 min(cons(x,l)) -> min(l) | min(l) ->* x
 min(cons(x,l)) -> x | le(x,min(l)) ->* ftrue
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
