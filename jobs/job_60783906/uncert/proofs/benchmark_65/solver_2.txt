MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/bIS1U.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Quasi decreasingness of the given CTRS could not be shown:

(0) CTRS
(1) CTRSToQTRSProof [SOUND, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 28 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 0 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 0 ms]
(8) QTRS
(9) QTRSRRRProof [EQUIVALENT, 0 ms]
(10) QTRS
(11) QTRSRRRProof [EQUIVALENT, 0 ms]
(12) QTRS
(13) AAECC Innermost [EQUIVALENT, 0 ms]
(14) QTRS
(15) DependencyPairsProof [EQUIVALENT, 0 ms]
(16) QDP
(17) DependencyGraphProof [EQUIVALENT, 0 ms]
(18) AND
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QReductionProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (25) YES
    (26) QDP
        (27) UsableRulesProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) QReductionProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) TransformationProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) TransformationProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) NonTerminationLoopProof [COMPLETE, 0 ms]
        (36) NO


----------------------------------------

(0)
Obligation:
Conditional term rewrite system:
The TRS R consists of the following rules:

   up(x) -> x
   down(x) -> x
   up(x) -> up(s(x))
   down(s(x)) -> down(x)

The conditional TRS C consists of the following conditional rules:

   between(x, y, z) -> true <= up(x) -> y, down(z) -> y


----------------------------------------

(1) CTRSToQTRSProof (SOUND)
The conditional rules have been transormed into unconditional rules according to [CTRS,AAECCNOC].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   between(x, y, z) -> U1(up(x), z)
   U1(y, z) -> U2(down(z))
   U2(y) -> true
   up(x) -> x
   down(x) -> x
   up(x) -> up(s(x))
   down(s(x)) -> down(x)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(U2(x_1)) = x_1
   POL(between(x_1, x_2, x_3)) = 2 + 2*x_1 + x_2 + 2*x_3
   POL(down(x_1)) = 2 + 2*x_1
   POL(s(x_1)) = x_1
   POL(true) = 0
   POL(up(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   down(x) -> x




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   between(x, y, z) -> U1(up(x), z)
   U1(y, z) -> U2(down(z))
   U2(y) -> true
   up(x) -> x
   up(x) -> up(s(x))
   down(s(x)) -> down(x)

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1, x_2)) = x_1 + 2*x_2
   POL(U2(x_1)) = x_1
   POL(between(x_1, x_2, x_3)) = 2 + x_1 + x_2 + 2*x_3
   POL(down(x_1)) = 2*x_1
   POL(s(x_1)) = x_1
   POL(true) = 0
   POL(up(x_1)) = 2 + x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   up(x) -> x




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   between(x, y, z) -> U1(up(x), z)
   U1(y, z) -> U2(down(z))
   U2(y) -> true
   up(x) -> up(s(x))
   down(s(x)) -> down(x)

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(U2(x_1)) = 2 + x_1
   POL(between(x_1, x_2, x_3)) = 2 + 2*x_1 + x_2 + 2*x_3
   POL(down(x_1)) = 2*x_1
   POL(s(x_1)) = x_1
   POL(true) = 0
   POL(up(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U2(y) -> true




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   between(x, y, z) -> U1(up(x), z)
   U1(y, z) -> U2(down(z))
   up(x) -> up(s(x))
   down(s(x)) -> down(x)

Q is empty.

----------------------------------------

(9) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(U2(x_1)) = x_1
   POL(between(x_1, x_2, x_3)) = 2 + 2*x_1 + x_2 + 2*x_3
   POL(down(x_1)) = x_1
   POL(s(x_1)) = x_1
   POL(up(x_1)) = 1 + 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U1(y, z) -> U2(down(z))




----------------------------------------

(10)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   between(x, y, z) -> U1(up(x), z)
   up(x) -> up(s(x))
   down(s(x)) -> down(x)

Q is empty.

----------------------------------------

(11) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1, x_2)) = x_1 + x_2
   POL(between(x_1, x_2, x_3)) = 2 + x_1 + x_2 + x_3
   POL(down(x_1)) = 2*x_1
   POL(s(x_1)) = x_1
   POL(up(x_1)) = 1 + x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   between(x, y, z) -> U1(up(x), z)




----------------------------------------

(12)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   up(x) -> up(s(x))
   down(s(x)) -> down(x)

Q is empty.

----------------------------------------

(13) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is none

The TRS R 2 is 
   up(x) -> up(s(x))
   down(s(x)) -> down(x)

The signature Sigma is {up_1, down_1}
----------------------------------------

(14)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   up(x) -> up(s(x))
   down(s(x)) -> down(x)

The set Q consists of the following terms:

   up(x0)
   down(s(x0))


----------------------------------------

(15) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   UP(x) -> UP(s(x))
   DOWN(s(x)) -> DOWN(x)

The TRS R consists of the following rules:

   up(x) -> up(s(x))
   down(s(x)) -> down(x)

The set Q consists of the following terms:

   up(x0)
   down(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(18)
Complex Obligation (AND)

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOWN(s(x)) -> DOWN(x)

The TRS R consists of the following rules:

   up(x) -> up(s(x))
   down(s(x)) -> down(x)

The set Q consists of the following terms:

   up(x0)
   down(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOWN(s(x)) -> DOWN(x)

R is empty.
The set Q consists of the following terms:

   up(x0)
   down(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   up(x0)
   down(s(x0))


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOWN(s(x)) -> DOWN(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DOWN(s(x)) -> DOWN(x)
The graph contains the following edges 1 > 1


----------------------------------------

(25)
YES

----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   UP(x) -> UP(s(x))

The TRS R consists of the following rules:

   up(x) -> up(s(x))
   down(s(x)) -> down(x)

The set Q consists of the following terms:

   up(x0)
   down(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   UP(x) -> UP(s(x))

R is empty.
The set Q consists of the following terms:

   up(x0)
   down(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   up(x0)
   down(s(x0))


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   UP(x) -> UP(s(x))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule UP(x) -> UP(s(x)) we obtained the following new rules [LPAR04]:

   (UP(s(z0)) -> UP(s(s(z0))),UP(s(z0)) -> UP(s(s(z0))))


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   UP(s(z0)) -> UP(s(s(z0)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule UP(s(z0)) -> UP(s(s(z0))) we obtained the following new rules [LPAR04]:

   (UP(s(s(z0))) -> UP(s(s(s(z0)))),UP(s(s(z0))) -> UP(s(s(s(z0)))))


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   UP(s(s(z0))) -> UP(s(s(s(z0))))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = UP(s(s(z0))) evaluates to  t =UP(s(s(s(z0))))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0 / s(z0)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from UP(s(s(z0))) to UP(s(s(s(z0)))).




----------------------------------------

(36)
NO
