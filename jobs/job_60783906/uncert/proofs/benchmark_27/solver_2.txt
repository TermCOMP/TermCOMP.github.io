MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/K1vbs.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Quasi decreasingness of the given CTRS could not be shown:

(0) CTRS
(1) CTRSToQTRSProof [SOUND, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 27 ms]
(4) QTRS
(5) AAECC Innermost [EQUIVALENT, 0 ms]
(6) QTRS
(7) DependencyPairsProof [EQUIVALENT, 0 ms]
(8) QDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) QDP
(11) QReductionProof [EQUIVALENT, 0 ms]
(12) QDP
(13) TransformationProof [EQUIVALENT, 0 ms]
(14) QDP
(15) NonTerminationLoopProof [COMPLETE, 0 ms]
(16) NO


----------------------------------------

(0)
Obligation:
Conditional term rewrite system:
The TRS R consists of the following rules:

   odd(0) -> false
   even(0) -> true
   eq(x, x) -> eq(T, T)

The conditional TRS C consists of the following conditional rules:

   odd(s(x)) -> true <= eq(even(x), true) -> eq(T, T)
   odd(s(x)) -> false <= eq(even(x), false) -> eq(T, T)
   even(s(x)) -> true <= eq(odd(x), true) -> eq(T, T)
   even(s(x)) -> false <= eq(odd(x), false) -> eq(T, T)


----------------------------------------

(1) CTRSToQTRSProof (SOUND)
The conditional rules have been transormed into unconditional rules according to [CTRS,AAECCNOC].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   odd(s(x)) -> U1(eq(even(x), true))
   U1(eq(T, T)) -> true
   odd(s(x)) -> U2(eq(even(x), false))
   U2(eq(T, T)) -> false
   even(s(x)) -> U3(eq(odd(x), true))
   U3(eq(T, T)) -> true
   even(s(x)) -> U4(eq(odd(x), false))
   U4(eq(T, T)) -> false
   odd(0) -> false
   even(0) -> true
   eq(x, x) -> eq(T, T)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(T) = 0
   POL(U1(x_1)) = 2 + x_1
   POL(U2(x_1)) = 2 + x_1
   POL(U3(x_1)) = 2 + x_1
   POL(U4(x_1)) = 2 + x_1
   POL(eq(x_1, x_2)) = x_1 + x_2
   POL(even(x_1)) = 2 + 2*x_1
   POL(false) = 1
   POL(odd(x_1)) = 2 + 2*x_1
   POL(s(x_1)) = 2 + 2*x_1
   POL(true) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   odd(s(x)) -> U1(eq(even(x), true))
   U1(eq(T, T)) -> true
   odd(s(x)) -> U2(eq(even(x), false))
   U2(eq(T, T)) -> false
   even(s(x)) -> U3(eq(odd(x), true))
   U3(eq(T, T)) -> true
   even(s(x)) -> U4(eq(odd(x), false))
   U4(eq(T, T)) -> false
   odd(0) -> false
   even(0) -> true




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   eq(x, x) -> eq(T, T)

Q is empty.

----------------------------------------

(5) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is none

The TRS R 2 is 
   eq(x, x) -> eq(T, T)

The signature Sigma is {eq_2}
----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   eq(x, x) -> eq(T, T)

The set Q consists of the following terms:

   eq(x0, x0)


----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(x, x) -> EQ(T, T)

The TRS R consists of the following rules:

   eq(x, x) -> eq(T, T)

The set Q consists of the following terms:

   eq(x0, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(x, x) -> EQ(T, T)

R is empty.
The set Q consists of the following terms:

   eq(x0, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(x0, x0)


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(x, x) -> EQ(T, T)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule EQ(x, x) -> EQ(T, T) we obtained the following new rules [LPAR04]:

   (EQ(T, T) -> EQ(T, T),EQ(T, T) -> EQ(T, T))


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(T, T) -> EQ(T, T)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = EQ(T, T) evaluates to  t =EQ(T, T)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from EQ(T, T) to EQ(T, T).




----------------------------------------

(16)
NO
