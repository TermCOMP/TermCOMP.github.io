YES

Problem 1: 

(VAR vu95NonEmpty a au954 l lu39 l1 l1u952 l2 l2u951 lu953 lu955 x xu950 y)
(RULES
append(l1u952,l2u951) -> matchu950(l1u952,l2u951,l1u952)
matchu950(l1u952,l2u951,Cons(x,l)) -> Cons(x,append(l,l2u951))
matchu950(l1u952,l2u951,Nil) -> l2u951
matchu951(au954,lu953,Cons(x,lu39)) -> matchu952(x,lu39,au954,lu953,part(au954,lu39))
matchu951(au954,lu953,Nil) -> Pair(Nil,Nil)
matchu952(x,lu39,au954,lu953,Pair(l1,l2)) -> matchu953(l1,l2,x,lu39,au954,lu953,test(au954,x))
matchu953(l1,l2,x,lu39,au954,lu953,False) -> Pair(Cons(x,l1),l2)
matchu953(l1,l2,x,lu39,au954,lu953,True) -> Pair(l1,Cons(x,l2))
matchu954(lu955,Cons(a,lu39)) -> matchu955(a,lu39,lu955,part(a,lu39))
matchu954(lu955,Nil) -> Nil
matchu955(a,lu39,lu955,Pair(l1,l2)) -> append(quick(l1),Cons(a,quick(l2)))
part(au954,lu953) -> matchu951(au954,lu953,lu953)
quick(lu955) -> matchu954(lu955,lu955)
test(xu950,y) -> False
test(xu950,y) -> True
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 APPEND(l1u952,l2u951) -> MATCHU950(l1u952,l2u951,l1u952)
 MATCHU950(l1u952,l2u951,Cons(x,l)) -> APPEND(l,l2u951)
 MATCHU951(au954,lu953,Cons(x,lu39)) -> MATCHU952(x,lu39,au954,lu953,part(au954,lu39))
 MATCHU951(au954,lu953,Cons(x,lu39)) -> PART(au954,lu39)
 MATCHU952(x,lu39,au954,lu953,Pair(l1,l2)) -> MATCHU953(l1,l2,x,lu39,au954,lu953,test(au954,x))
 MATCHU952(x,lu39,au954,lu953,Pair(l1,l2)) -> TEST(au954,x)
 MATCHU954(lu955,Cons(a,lu39)) -> MATCHU955(a,lu39,lu955,part(a,lu39))
 MATCHU954(lu955,Cons(a,lu39)) -> PART(a,lu39)
 MATCHU955(a,lu39,lu955,Pair(l1,l2)) -> APPEND(quick(l1),Cons(a,quick(l2)))
 MATCHU955(a,lu39,lu955,Pair(l1,l2)) -> QUICK(l1)
 MATCHU955(a,lu39,lu955,Pair(l1,l2)) -> QUICK(l2)
 PART(au954,lu953) -> MATCHU951(au954,lu953,lu953)
 QUICK(lu955) -> MATCHU954(lu955,lu955)
-> Rules:
 append(l1u952,l2u951) -> matchu950(l1u952,l2u951,l1u952)
 matchu950(l1u952,l2u951,Cons(x,l)) -> Cons(x,append(l,l2u951))
 matchu950(l1u952,l2u951,Nil) -> l2u951
 matchu951(au954,lu953,Cons(x,lu39)) -> matchu952(x,lu39,au954,lu953,part(au954,lu39))
 matchu951(au954,lu953,Nil) -> Pair(Nil,Nil)
 matchu952(x,lu39,au954,lu953,Pair(l1,l2)) -> matchu953(l1,l2,x,lu39,au954,lu953,test(au954,x))
 matchu953(l1,l2,x,lu39,au954,lu953,False) -> Pair(Cons(x,l1),l2)
 matchu953(l1,l2,x,lu39,au954,lu953,True) -> Pair(l1,Cons(x,l2))
 matchu954(lu955,Cons(a,lu39)) -> matchu955(a,lu39,lu955,part(a,lu39))
 matchu954(lu955,Nil) -> Nil
 matchu955(a,lu39,lu955,Pair(l1,l2)) -> append(quick(l1),Cons(a,quick(l2)))
 part(au954,lu953) -> matchu951(au954,lu953,lu953)
 quick(lu955) -> matchu954(lu955,lu955)
 test(xu950,y) -> False
 test(xu950,y) -> True

Problem 1: 

SCC Processor:
-> Pairs:
 APPEND(l1u952,l2u951) -> MATCHU950(l1u952,l2u951,l1u952)
 MATCHU950(l1u952,l2u951,Cons(x,l)) -> APPEND(l,l2u951)
 MATCHU951(au954,lu953,Cons(x,lu39)) -> MATCHU952(x,lu39,au954,lu953,part(au954,lu39))
 MATCHU951(au954,lu953,Cons(x,lu39)) -> PART(au954,lu39)
 MATCHU952(x,lu39,au954,lu953,Pair(l1,l2)) -> MATCHU953(l1,l2,x,lu39,au954,lu953,test(au954,x))
 MATCHU952(x,lu39,au954,lu953,Pair(l1,l2)) -> TEST(au954,x)
 MATCHU954(lu955,Cons(a,lu39)) -> MATCHU955(a,lu39,lu955,part(a,lu39))
 MATCHU954(lu955,Cons(a,lu39)) -> PART(a,lu39)
 MATCHU955(a,lu39,lu955,Pair(l1,l2)) -> APPEND(quick(l1),Cons(a,quick(l2)))
 MATCHU955(a,lu39,lu955,Pair(l1,l2)) -> QUICK(l1)
 MATCHU955(a,lu39,lu955,Pair(l1,l2)) -> QUICK(l2)
 PART(au954,lu953) -> MATCHU951(au954,lu953,lu953)
 QUICK(lu955) -> MATCHU954(lu955,lu955)
-> Rules:
 append(l1u952,l2u951) -> matchu950(l1u952,l2u951,l1u952)
 matchu950(l1u952,l2u951,Cons(x,l)) -> Cons(x,append(l,l2u951))
 matchu950(l1u952,l2u951,Nil) -> l2u951
 matchu951(au954,lu953,Cons(x,lu39)) -> matchu952(x,lu39,au954,lu953,part(au954,lu39))
 matchu951(au954,lu953,Nil) -> Pair(Nil,Nil)
 matchu952(x,lu39,au954,lu953,Pair(l1,l2)) -> matchu953(l1,l2,x,lu39,au954,lu953,test(au954,x))
 matchu953(l1,l2,x,lu39,au954,lu953,False) -> Pair(Cons(x,l1),l2)
 matchu953(l1,l2,x,lu39,au954,lu953,True) -> Pair(l1,Cons(x,l2))
 matchu954(lu955,Cons(a,lu39)) -> matchu955(a,lu39,lu955,part(a,lu39))
 matchu954(lu955,Nil) -> Nil
 matchu955(a,lu39,lu955,Pair(l1,l2)) -> append(quick(l1),Cons(a,quick(l2)))
 part(au954,lu953) -> matchu951(au954,lu953,lu953)
 quick(lu955) -> matchu954(lu955,lu955)
 test(xu950,y) -> False
 test(xu950,y) -> True
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MATCHU951(au954,lu953,Cons(x,lu39)) -> PART(au954,lu39)
 PART(au954,lu953) -> MATCHU951(au954,lu953,lu953)
->->-> Rules:
 append(l1u952,l2u951) -> matchu950(l1u952,l2u951,l1u952)
 matchu950(l1u952,l2u951,Cons(x,l)) -> Cons(x,append(l,l2u951))
 matchu950(l1u952,l2u951,Nil) -> l2u951
 matchu951(au954,lu953,Cons(x,lu39)) -> matchu952(x,lu39,au954,lu953,part(au954,lu39))
 matchu951(au954,lu953,Nil) -> Pair(Nil,Nil)
 matchu952(x,lu39,au954,lu953,Pair(l1,l2)) -> matchu953(l1,l2,x,lu39,au954,lu953,test(au954,x))
 matchu953(l1,l2,x,lu39,au954,lu953,False) -> Pair(Cons(x,l1),l2)
 matchu953(l1,l2,x,lu39,au954,lu953,True) -> Pair(l1,Cons(x,l2))
 matchu954(lu955,Cons(a,lu39)) -> matchu955(a,lu39,lu955,part(a,lu39))
 matchu954(lu955,Nil) -> Nil
 matchu955(a,lu39,lu955,Pair(l1,l2)) -> append(quick(l1),Cons(a,quick(l2)))
 part(au954,lu953) -> matchu951(au954,lu953,lu953)
 quick(lu955) -> matchu954(lu955,lu955)
 test(xu950,y) -> False
 test(xu950,y) -> True
->->Cycle:
->->-> Pairs:
 APPEND(l1u952,l2u951) -> MATCHU950(l1u952,l2u951,l1u952)
 MATCHU950(l1u952,l2u951,Cons(x,l)) -> APPEND(l,l2u951)
->->-> Rules:
 append(l1u952,l2u951) -> matchu950(l1u952,l2u951,l1u952)
 matchu950(l1u952,l2u951,Cons(x,l)) -> Cons(x,append(l,l2u951))
 matchu950(l1u952,l2u951,Nil) -> l2u951
 matchu951(au954,lu953,Cons(x,lu39)) -> matchu952(x,lu39,au954,lu953,part(au954,lu39))
 matchu951(au954,lu953,Nil) -> Pair(Nil,Nil)
 matchu952(x,lu39,au954,lu953,Pair(l1,l2)) -> matchu953(l1,l2,x,lu39,au954,lu953,test(au954,x))
 matchu953(l1,l2,x,lu39,au954,lu953,False) -> Pair(Cons(x,l1),l2)
 matchu953(l1,l2,x,lu39,au954,lu953,True) -> Pair(l1,Cons(x,l2))
 matchu954(lu955,Cons(a,lu39)) -> matchu955(a,lu39,lu955,part(a,lu39))
 matchu954(lu955,Nil) -> Nil
 matchu955(a,lu39,lu955,Pair(l1,l2)) -> append(quick(l1),Cons(a,quick(l2)))
 part(au954,lu953) -> matchu951(au954,lu953,lu953)
 quick(lu955) -> matchu954(lu955,lu955)
 test(xu950,y) -> False
 test(xu950,y) -> True
->->Cycle:
->->-> Pairs:
 MATCHU954(lu955,Cons(a,lu39)) -> MATCHU955(a,lu39,lu955,part(a,lu39))
 MATCHU955(a,lu39,lu955,Pair(l1,l2)) -> QUICK(l1)
 MATCHU955(a,lu39,lu955,Pair(l1,l2)) -> QUICK(l2)
 QUICK(lu955) -> MATCHU954(lu955,lu955)
->->-> Rules:
 append(l1u952,l2u951) -> matchu950(l1u952,l2u951,l1u952)
 matchu950(l1u952,l2u951,Cons(x,l)) -> Cons(x,append(l,l2u951))
 matchu950(l1u952,l2u951,Nil) -> l2u951
 matchu951(au954,lu953,Cons(x,lu39)) -> matchu952(x,lu39,au954,lu953,part(au954,lu39))
 matchu951(au954,lu953,Nil) -> Pair(Nil,Nil)
 matchu952(x,lu39,au954,lu953,Pair(l1,l2)) -> matchu953(l1,l2,x,lu39,au954,lu953,test(au954,x))
 matchu953(l1,l2,x,lu39,au954,lu953,False) -> Pair(Cons(x,l1),l2)
 matchu953(l1,l2,x,lu39,au954,lu953,True) -> Pair(l1,Cons(x,l2))
 matchu954(lu955,Cons(a,lu39)) -> matchu955(a,lu39,lu955,part(a,lu39))
 matchu954(lu955,Nil) -> Nil
 matchu955(a,lu39,lu955,Pair(l1,l2)) -> append(quick(l1),Cons(a,quick(l2)))
 part(au954,lu953) -> matchu951(au954,lu953,lu953)
 quick(lu955) -> matchu954(lu955,lu955)
 test(xu950,y) -> False
 test(xu950,y) -> True


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 MATCHU951(au954,lu953,Cons(x,lu39)) -> PART(au954,lu39)
 PART(au954,lu953) -> MATCHU951(au954,lu953,lu953)
-> Rules:
 append(l1u952,l2u951) -> matchu950(l1u952,l2u951,l1u952)
 matchu950(l1u952,l2u951,Cons(x,l)) -> Cons(x,append(l,l2u951))
 matchu950(l1u952,l2u951,Nil) -> l2u951
 matchu951(au954,lu953,Cons(x,lu39)) -> matchu952(x,lu39,au954,lu953,part(au954,lu39))
 matchu951(au954,lu953,Nil) -> Pair(Nil,Nil)
 matchu952(x,lu39,au954,lu953,Pair(l1,l2)) -> matchu953(l1,l2,x,lu39,au954,lu953,test(au954,x))
 matchu953(l1,l2,x,lu39,au954,lu953,False) -> Pair(Cons(x,l1),l2)
 matchu953(l1,l2,x,lu39,au954,lu953,True) -> Pair(l1,Cons(x,l2))
 matchu954(lu955,Cons(a,lu39)) -> matchu955(a,lu39,lu955,part(a,lu39))
 matchu954(lu955,Nil) -> Nil
 matchu955(a,lu39,lu955,Pair(l1,l2)) -> append(quick(l1),Cons(a,quick(l2)))
 part(au954,lu953) -> matchu951(au954,lu953,lu953)
 quick(lu955) -> matchu954(lu955,lu955)
 test(xu950,y) -> False
 test(xu950,y) -> True
->Projection:
 pi(MATCHU951) = 3
 pi(PART) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 PART(au954,lu953) -> MATCHU951(au954,lu953,lu953)
-> Rules:
 append(l1u952,l2u951) -> matchu950(l1u952,l2u951,l1u952)
 matchu950(l1u952,l2u951,Cons(x,l)) -> Cons(x,append(l,l2u951))
 matchu950(l1u952,l2u951,Nil) -> l2u951
 matchu951(au954,lu953,Cons(x,lu39)) -> matchu952(x,lu39,au954,lu953,part(au954,lu39))
 matchu951(au954,lu953,Nil) -> Pair(Nil,Nil)
 matchu952(x,lu39,au954,lu953,Pair(l1,l2)) -> matchu953(l1,l2,x,lu39,au954,lu953,test(au954,x))
 matchu953(l1,l2,x,lu39,au954,lu953,False) -> Pair(Cons(x,l1),l2)
 matchu953(l1,l2,x,lu39,au954,lu953,True) -> Pair(l1,Cons(x,l2))
 matchu954(lu955,Cons(a,lu39)) -> matchu955(a,lu39,lu955,part(a,lu39))
 matchu954(lu955,Nil) -> Nil
 matchu955(a,lu39,lu955,Pair(l1,l2)) -> append(quick(l1),Cons(a,quick(l2)))
 part(au954,lu953) -> matchu951(au954,lu953,lu953)
 quick(lu955) -> matchu954(lu955,lu955)
 test(xu950,y) -> False
 test(xu950,y) -> True
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 APPEND(l1u952,l2u951) -> MATCHU950(l1u952,l2u951,l1u952)
 MATCHU950(l1u952,l2u951,Cons(x,l)) -> APPEND(l,l2u951)
-> Rules:
 append(l1u952,l2u951) -> matchu950(l1u952,l2u951,l1u952)
 matchu950(l1u952,l2u951,Cons(x,l)) -> Cons(x,append(l,l2u951))
 matchu950(l1u952,l2u951,Nil) -> l2u951
 matchu951(au954,lu953,Cons(x,lu39)) -> matchu952(x,lu39,au954,lu953,part(au954,lu39))
 matchu951(au954,lu953,Nil) -> Pair(Nil,Nil)
 matchu952(x,lu39,au954,lu953,Pair(l1,l2)) -> matchu953(l1,l2,x,lu39,au954,lu953,test(au954,x))
 matchu953(l1,l2,x,lu39,au954,lu953,False) -> Pair(Cons(x,l1),l2)
 matchu953(l1,l2,x,lu39,au954,lu953,True) -> Pair(l1,Cons(x,l2))
 matchu954(lu955,Cons(a,lu39)) -> matchu955(a,lu39,lu955,part(a,lu39))
 matchu954(lu955,Nil) -> Nil
 matchu955(a,lu39,lu955,Pair(l1,l2)) -> append(quick(l1),Cons(a,quick(l2)))
 part(au954,lu953) -> matchu951(au954,lu953,lu953)
 quick(lu955) -> matchu954(lu955,lu955)
 test(xu950,y) -> False
 test(xu950,y) -> True
->Projection:
 pi(APPEND) = 1
 pi(MATCHU950) = 3

Problem 1.2: 

SCC Processor:
-> Pairs:
 APPEND(l1u952,l2u951) -> MATCHU950(l1u952,l2u951,l1u952)
-> Rules:
 append(l1u952,l2u951) -> matchu950(l1u952,l2u951,l1u952)
 matchu950(l1u952,l2u951,Cons(x,l)) -> Cons(x,append(l,l2u951))
 matchu950(l1u952,l2u951,Nil) -> l2u951
 matchu951(au954,lu953,Cons(x,lu39)) -> matchu952(x,lu39,au954,lu953,part(au954,lu39))
 matchu951(au954,lu953,Nil) -> Pair(Nil,Nil)
 matchu952(x,lu39,au954,lu953,Pair(l1,l2)) -> matchu953(l1,l2,x,lu39,au954,lu953,test(au954,x))
 matchu953(l1,l2,x,lu39,au954,lu953,False) -> Pair(Cons(x,l1),l2)
 matchu953(l1,l2,x,lu39,au954,lu953,True) -> Pair(l1,Cons(x,l2))
 matchu954(lu955,Cons(a,lu39)) -> matchu955(a,lu39,lu955,part(a,lu39))
 matchu954(lu955,Nil) -> Nil
 matchu955(a,lu39,lu955,Pair(l1,l2)) -> append(quick(l1),Cons(a,quick(l2)))
 part(au954,lu953) -> matchu951(au954,lu953,lu953)
 quick(lu955) -> matchu954(lu955,lu955)
 test(xu950,y) -> False
 test(xu950,y) -> True
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Reduction Pair Processor:
-> Pairs:
 MATCHU954(lu955,Cons(a,lu39)) -> MATCHU955(a,lu39,lu955,part(a,lu39))
 MATCHU955(a,lu39,lu955,Pair(l1,l2)) -> QUICK(l1)
 MATCHU955(a,lu39,lu955,Pair(l1,l2)) -> QUICK(l2)
 QUICK(lu955) -> MATCHU954(lu955,lu955)
-> Rules:
 append(l1u952,l2u951) -> matchu950(l1u952,l2u951,l1u952)
 matchu950(l1u952,l2u951,Cons(x,l)) -> Cons(x,append(l,l2u951))
 matchu950(l1u952,l2u951,Nil) -> l2u951
 matchu951(au954,lu953,Cons(x,lu39)) -> matchu952(x,lu39,au954,lu953,part(au954,lu39))
 matchu951(au954,lu953,Nil) -> Pair(Nil,Nil)
 matchu952(x,lu39,au954,lu953,Pair(l1,l2)) -> matchu953(l1,l2,x,lu39,au954,lu953,test(au954,x))
 matchu953(l1,l2,x,lu39,au954,lu953,False) -> Pair(Cons(x,l1),l2)
 matchu953(l1,l2,x,lu39,au954,lu953,True) -> Pair(l1,Cons(x,l2))
 matchu954(lu955,Cons(a,lu39)) -> matchu955(a,lu39,lu955,part(a,lu39))
 matchu954(lu955,Nil) -> Nil
 matchu955(a,lu39,lu955,Pair(l1,l2)) -> append(quick(l1),Cons(a,quick(l2)))
 part(au954,lu953) -> matchu951(au954,lu953,lu953)
 quick(lu955) -> matchu954(lu955,lu955)
 test(xu950,y) -> False
 test(xu950,y) -> True
-> Usable rules:
 matchu951(au954,lu953,Cons(x,lu39)) -> matchu952(x,lu39,au954,lu953,part(au954,lu39))
 matchu951(au954,lu953,Nil) -> Pair(Nil,Nil)
 matchu952(x,lu39,au954,lu953,Pair(l1,l2)) -> matchu953(l1,l2,x,lu39,au954,lu953,test(au954,x))
 matchu953(l1,l2,x,lu39,au954,lu953,False) -> Pair(Cons(x,l1),l2)
 matchu953(l1,l2,x,lu39,au954,lu953,True) -> Pair(l1,Cons(x,l2))
 part(au954,lu953) -> matchu951(au954,lu953,lu953)
 test(xu950,y) -> False
 test(xu950,y) -> True
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[append](X1,X2) = 0
[matchu950](X1,X2,X3) = 0
[matchu951](X1,X2,X3) = 2.X3 + 2
[matchu952](X1,X2,X3,X4,X5) = 2.X1 + 2.X5 + 2
[matchu953](X1,X2,X3,X4,X5,X6,X7) = 2.X1 + 2.X2 + 2.X3 + 2.X7 + 2
[matchu954](X1,X2) = 0
[matchu955](X1,X2,X3,X4) = 0
[part](X1,X2) = 2.X2 + 2
[quick](X) = 0
[test](X1,X2) = 1
[Cons](X1,X2) = 2.X1 + 2.X2 + 2
[False] = 1
[Nil] = 0
[Pair](X1,X2) = X1 + X2 + 2
[True] = 1
[fSNonEmpty] = 0
[APPEND](X1,X2) = 0
[MATCHU950](X1,X2,X3) = 0
[MATCHU951](X1,X2,X3) = 0
[MATCHU952](X1,X2,X3,X4,X5) = 0
[MATCHU953](X1,X2,X3,X4,X5,X6,X7) = 0
[MATCHU954](X1,X2) = 2.X2 + 2
[MATCHU955](X1,X2,X3,X4) = 2.X4 + 1
[PART](X1,X2) = 0
[QUICK](X) = 2.X + 2
[TEST](X1,X2) = 0

Problem 1.3: 

SCC Processor:
-> Pairs:
 MATCHU955(a,lu39,lu955,Pair(l1,l2)) -> QUICK(l1)
 MATCHU955(a,lu39,lu955,Pair(l1,l2)) -> QUICK(l2)
 QUICK(lu955) -> MATCHU954(lu955,lu955)
-> Rules:
 append(l1u952,l2u951) -> matchu950(l1u952,l2u951,l1u952)
 matchu950(l1u952,l2u951,Cons(x,l)) -> Cons(x,append(l,l2u951))
 matchu950(l1u952,l2u951,Nil) -> l2u951
 matchu951(au954,lu953,Cons(x,lu39)) -> matchu952(x,lu39,au954,lu953,part(au954,lu39))
 matchu951(au954,lu953,Nil) -> Pair(Nil,Nil)
 matchu952(x,lu39,au954,lu953,Pair(l1,l2)) -> matchu953(l1,l2,x,lu39,au954,lu953,test(au954,x))
 matchu953(l1,l2,x,lu39,au954,lu953,False) -> Pair(Cons(x,l1),l2)
 matchu953(l1,l2,x,lu39,au954,lu953,True) -> Pair(l1,Cons(x,l2))
 matchu954(lu955,Cons(a,lu39)) -> matchu955(a,lu39,lu955,part(a,lu39))
 matchu954(lu955,Nil) -> Nil
 matchu955(a,lu39,lu955,Pair(l1,l2)) -> append(quick(l1),Cons(a,quick(l2)))
 part(au954,lu953) -> matchu951(au954,lu953,lu953)
 quick(lu955) -> matchu954(lu955,lu955)
 test(xu950,y) -> False
 test(xu950,y) -> True
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
