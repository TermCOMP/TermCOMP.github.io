YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/sa5I2.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Quasi decreasingness of the given CTRS could be proven:

(0) CTRS
(1) CTRSToQTRSProof [SOUND, 0 ms]
(2) QTRS
(3) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) UsableRulesProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) QDP
        (24) UsableRulesProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QReductionProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) QDP
        (31) UsableRulesProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QReductionProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) QDPOrderProof [EQUIVALENT, 1 ms]
        (36) QDP
        (37) PisEmptyProof [EQUIVALENT, 0 ms]
        (38) YES


----------------------------------------

(0)
Obligation:
Conditional term rewrite system:
The TRS R consists of the following rules:

   le(0, x) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, x) -> x
   app(cons(x, xs), ys) -> cons(x, app(xs, ys))
   split(x, nil) -> pair(nil, nil)
   qsort(nil) -> nil

The conditional TRS C consists of the following conditional rules:

   split(x, cons(y, ys)) -> pair(xs, cons(y, zs)) <= split(x, ys) -> pair(xs, zs), le(x, y) -> true
   split(x, cons(y, ys)) -> pair(cons(y, xs), zs) <= split(x, ys) -> pair(xs, zs), le(x, y) -> false
   qsort(cons(x, xs)) -> app(qsort(ys), cons(x, qsort(zs))) <= split(x, xs) -> pair(ys, zs)


----------------------------------------

(1) CTRSToQTRSProof (SOUND)
The conditional rules have been transormed into unconditional rules according to [CTRS,AAECCNOC].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   split(x, cons(y, ys)) -> U1(split(x, ys), x, y)
   U1(pair(xs, zs), x, y) -> U2(le(x, y), y, xs, zs)
   U2(false, y, xs, zs) -> pair(cons(y, xs), zs)
   U2(true, y, xs, zs) -> pair(xs, cons(y, zs))
   qsort(cons(x, xs)) -> U3(split(x, xs), x)
   U3(pair(ys, zs), x) -> app(qsort(ys), cons(x, qsort(zs)))
   le(0, x) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, x) -> x
   app(cons(x, xs), ys) -> cons(x, app(xs, ys))
   split(x, nil) -> pair(nil, nil)
   qsort(nil) -> nil

Q is empty.

----------------------------------------

(3) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   split(x, cons(y, ys)) -> U1(split(x, ys), x, y)
   U1(pair(xs, zs), x, y) -> U2(le(x, y), y, xs, zs)
   U2(false, y, xs, zs) -> pair(cons(y, xs), zs)
   U2(true, y, xs, zs) -> pair(xs, cons(y, zs))
   qsort(cons(x, xs)) -> U3(split(x, xs), x)
   U3(pair(ys, zs), x) -> app(qsort(ys), cons(x, qsort(zs)))
   le(0, x) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, x) -> x
   app(cons(x, xs), ys) -> cons(x, app(xs, ys))
   split(x, nil) -> pair(nil, nil)
   qsort(nil) -> nil

The set Q consists of the following terms:

   split(x0, cons(x1, x2))
   U1(pair(x0, x1), x2, x3)
   U2(false, x0, x1, x2)
   U2(true, x0, x1, x2)
   qsort(cons(x0, x1))
   U3(pair(x0, x1), x2)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   split(x0, nil)
   qsort(nil)


----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLIT(x, cons(y, ys)) -> U1^1(split(x, ys), x, y)
   SPLIT(x, cons(y, ys)) -> SPLIT(x, ys)
   U1^1(pair(xs, zs), x, y) -> U2^1(le(x, y), y, xs, zs)
   U1^1(pair(xs, zs), x, y) -> LE(x, y)
   QSORT(cons(x, xs)) -> U3^1(split(x, xs), x)
   QSORT(cons(x, xs)) -> SPLIT(x, xs)
   U3^1(pair(ys, zs), x) -> APP(qsort(ys), cons(x, qsort(zs)))
   U3^1(pair(ys, zs), x) -> QSORT(ys)
   U3^1(pair(ys, zs), x) -> QSORT(zs)
   LE(s(x), s(y)) -> LE(x, y)
   APP(cons(x, xs), ys) -> APP(xs, ys)

The TRS R consists of the following rules:

   split(x, cons(y, ys)) -> U1(split(x, ys), x, y)
   U1(pair(xs, zs), x, y) -> U2(le(x, y), y, xs, zs)
   U2(false, y, xs, zs) -> pair(cons(y, xs), zs)
   U2(true, y, xs, zs) -> pair(xs, cons(y, zs))
   qsort(cons(x, xs)) -> U3(split(x, xs), x)
   U3(pair(ys, zs), x) -> app(qsort(ys), cons(x, qsort(zs)))
   le(0, x) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, x) -> x
   app(cons(x, xs), ys) -> cons(x, app(xs, ys))
   split(x, nil) -> pair(nil, nil)
   qsort(nil) -> nil

The set Q consists of the following terms:

   split(x0, cons(x1, x2))
   U1(pair(x0, x1), x2, x3)
   U2(false, x0, x1, x2)
   U2(true, x0, x1, x2)
   qsort(cons(x0, x1))
   U3(pair(x0, x1), x2)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   split(x0, nil)
   qsort(nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 5 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(x, xs), ys) -> APP(xs, ys)

The TRS R consists of the following rules:

   split(x, cons(y, ys)) -> U1(split(x, ys), x, y)
   U1(pair(xs, zs), x, y) -> U2(le(x, y), y, xs, zs)
   U2(false, y, xs, zs) -> pair(cons(y, xs), zs)
   U2(true, y, xs, zs) -> pair(xs, cons(y, zs))
   qsort(cons(x, xs)) -> U3(split(x, xs), x)
   U3(pair(ys, zs), x) -> app(qsort(ys), cons(x, qsort(zs)))
   le(0, x) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, x) -> x
   app(cons(x, xs), ys) -> cons(x, app(xs, ys))
   split(x, nil) -> pair(nil, nil)
   qsort(nil) -> nil

The set Q consists of the following terms:

   split(x0, cons(x1, x2))
   U1(pair(x0, x1), x2, x3)
   U2(false, x0, x1, x2)
   U2(true, x0, x1, x2)
   qsort(cons(x0, x1))
   U3(pair(x0, x1), x2)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   split(x0, nil)
   qsort(nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(x, xs), ys) -> APP(xs, ys)

R is empty.
The set Q consists of the following terms:

   split(x0, cons(x1, x2))
   U1(pair(x0, x1), x2, x3)
   U2(false, x0, x1, x2)
   U2(true, x0, x1, x2)
   qsort(cons(x0, x1))
   U3(pair(x0, x1), x2)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   split(x0, nil)
   qsort(nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   split(x0, cons(x1, x2))
   U1(pair(x0, x1), x2, x3)
   U2(false, x0, x1, x2)
   U2(true, x0, x1, x2)
   qsort(cons(x0, x1))
   U3(pair(x0, x1), x2)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   split(x0, nil)
   qsort(nil)


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(x, xs), ys) -> APP(xs, ys)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(cons(x, xs), ys) -> APP(xs, ys)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

The TRS R consists of the following rules:

   split(x, cons(y, ys)) -> U1(split(x, ys), x, y)
   U1(pair(xs, zs), x, y) -> U2(le(x, y), y, xs, zs)
   U2(false, y, xs, zs) -> pair(cons(y, xs), zs)
   U2(true, y, xs, zs) -> pair(xs, cons(y, zs))
   qsort(cons(x, xs)) -> U3(split(x, xs), x)
   U3(pair(ys, zs), x) -> app(qsort(ys), cons(x, qsort(zs)))
   le(0, x) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, x) -> x
   app(cons(x, xs), ys) -> cons(x, app(xs, ys))
   split(x, nil) -> pair(nil, nil)
   qsort(nil) -> nil

The set Q consists of the following terms:

   split(x0, cons(x1, x2))
   U1(pair(x0, x1), x2, x3)
   U2(false, x0, x1, x2)
   U2(true, x0, x1, x2)
   qsort(cons(x0, x1))
   U3(pair(x0, x1), x2)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   split(x0, nil)
   qsort(nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
The set Q consists of the following terms:

   split(x0, cons(x1, x2))
   U1(pair(x0, x1), x2, x3)
   U2(false, x0, x1, x2)
   U2(true, x0, x1, x2)
   qsort(cons(x0, x1))
   U3(pair(x0, x1), x2)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   split(x0, nil)
   qsort(nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   split(x0, cons(x1, x2))
   U1(pair(x0, x1), x2, x3)
   U2(false, x0, x1, x2)
   U2(true, x0, x1, x2)
   qsort(cons(x0, x1))
   U3(pair(x0, x1), x2)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   split(x0, nil)
   qsort(nil)


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(x), s(y)) -> LE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLIT(x, cons(y, ys)) -> SPLIT(x, ys)

The TRS R consists of the following rules:

   split(x, cons(y, ys)) -> U1(split(x, ys), x, y)
   U1(pair(xs, zs), x, y) -> U2(le(x, y), y, xs, zs)
   U2(false, y, xs, zs) -> pair(cons(y, xs), zs)
   U2(true, y, xs, zs) -> pair(xs, cons(y, zs))
   qsort(cons(x, xs)) -> U3(split(x, xs), x)
   U3(pair(ys, zs), x) -> app(qsort(ys), cons(x, qsort(zs)))
   le(0, x) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, x) -> x
   app(cons(x, xs), ys) -> cons(x, app(xs, ys))
   split(x, nil) -> pair(nil, nil)
   qsort(nil) -> nil

The set Q consists of the following terms:

   split(x0, cons(x1, x2))
   U1(pair(x0, x1), x2, x3)
   U2(false, x0, x1, x2)
   U2(true, x0, x1, x2)
   qsort(cons(x0, x1))
   U3(pair(x0, x1), x2)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   split(x0, nil)
   qsort(nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLIT(x, cons(y, ys)) -> SPLIT(x, ys)

R is empty.
The set Q consists of the following terms:

   split(x0, cons(x1, x2))
   U1(pair(x0, x1), x2, x3)
   U2(false, x0, x1, x2)
   U2(true, x0, x1, x2)
   qsort(cons(x0, x1))
   U3(pair(x0, x1), x2)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   split(x0, nil)
   qsort(nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   split(x0, cons(x1, x2))
   U1(pair(x0, x1), x2, x3)
   U2(false, x0, x1, x2)
   U2(true, x0, x1, x2)
   qsort(cons(x0, x1))
   U3(pair(x0, x1), x2)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   split(x0, nil)
   qsort(nil)


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLIT(x, cons(y, ys)) -> SPLIT(x, ys)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SPLIT(x, cons(y, ys)) -> SPLIT(x, ys)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QSORT(cons(x, xs)) -> U3^1(split(x, xs), x)
   U3^1(pair(ys, zs), x) -> QSORT(ys)
   U3^1(pair(ys, zs), x) -> QSORT(zs)

The TRS R consists of the following rules:

   split(x, cons(y, ys)) -> U1(split(x, ys), x, y)
   U1(pair(xs, zs), x, y) -> U2(le(x, y), y, xs, zs)
   U2(false, y, xs, zs) -> pair(cons(y, xs), zs)
   U2(true, y, xs, zs) -> pair(xs, cons(y, zs))
   qsort(cons(x, xs)) -> U3(split(x, xs), x)
   U3(pair(ys, zs), x) -> app(qsort(ys), cons(x, qsort(zs)))
   le(0, x) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, x) -> x
   app(cons(x, xs), ys) -> cons(x, app(xs, ys))
   split(x, nil) -> pair(nil, nil)
   qsort(nil) -> nil

The set Q consists of the following terms:

   split(x0, cons(x1, x2))
   U1(pair(x0, x1), x2, x3)
   U2(false, x0, x1, x2)
   U2(true, x0, x1, x2)
   qsort(cons(x0, x1))
   U3(pair(x0, x1), x2)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   split(x0, nil)
   qsort(nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QSORT(cons(x, xs)) -> U3^1(split(x, xs), x)
   U3^1(pair(ys, zs), x) -> QSORT(ys)
   U3^1(pair(ys, zs), x) -> QSORT(zs)

The TRS R consists of the following rules:

   split(x, cons(y, ys)) -> U1(split(x, ys), x, y)
   split(x, nil) -> pair(nil, nil)
   U1(pair(xs, zs), x, y) -> U2(le(x, y), y, xs, zs)
   le(0, x) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   U2(false, y, xs, zs) -> pair(cons(y, xs), zs)
   U2(true, y, xs, zs) -> pair(xs, cons(y, zs))

The set Q consists of the following terms:

   split(x0, cons(x1, x2))
   U1(pair(x0, x1), x2, x3)
   U2(false, x0, x1, x2)
   U2(true, x0, x1, x2)
   qsort(cons(x0, x1))
   U3(pair(x0, x1), x2)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   split(x0, nil)
   qsort(nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   qsort(cons(x0, x1))
   U3(pair(x0, x1), x2)
   app(nil, x0)
   app(cons(x0, x1), x2)
   qsort(nil)


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QSORT(cons(x, xs)) -> U3^1(split(x, xs), x)
   U3^1(pair(ys, zs), x) -> QSORT(ys)
   U3^1(pair(ys, zs), x) -> QSORT(zs)

The TRS R consists of the following rules:

   split(x, cons(y, ys)) -> U1(split(x, ys), x, y)
   split(x, nil) -> pair(nil, nil)
   U1(pair(xs, zs), x, y) -> U2(le(x, y), y, xs, zs)
   le(0, x) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   U2(false, y, xs, zs) -> pair(cons(y, xs), zs)
   U2(true, y, xs, zs) -> pair(xs, cons(y, zs))

The set Q consists of the following terms:

   split(x0, cons(x1, x2))
   U1(pair(x0, x1), x2, x3)
   U2(false, x0, x1, x2)
   U2(true, x0, x1, x2)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   split(x0, nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QSORT(cons(x, xs)) -> U3^1(split(x, xs), x)
   U3^1(pair(ys, zs), x) -> QSORT(ys)
   U3^1(pair(ys, zs), x) -> QSORT(zs)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U3^1_2(x_1, x_2) ) = max{0, 2x_1 - 1}
POL( split_2(x_1, x_2) ) = x_2 + 2
POL( cons_2(x_1, x_2) ) = x_2 + 2
POL( U1_3(x_1, ..., x_3) ) = x_1 + 2
POL( nil ) = 0
POL( pair_2(x_1, x_2) ) = x_1 + x_2 + 2
POL( U2_4(x_1, ..., x_4) ) = 2x_1 + x_3 + x_4
POL( le_2(x_1, x_2) ) = 2
POL( 0 ) = 0
POL( true ) = 2
POL( s_1(x_1) ) = 2x_1 + 2
POL( false ) = 2
POL( QSORT_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   split(x, cons(y, ys)) -> U1(split(x, ys), x, y)
   split(x, nil) -> pair(nil, nil)
   U1(pair(xs, zs), x, y) -> U2(le(x, y), y, xs, zs)
   le(0, x) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   U2(false, y, xs, zs) -> pair(cons(y, xs), zs)
   U2(true, y, xs, zs) -> pair(xs, cons(y, zs))


----------------------------------------

(36)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   split(x, cons(y, ys)) -> U1(split(x, ys), x, y)
   split(x, nil) -> pair(nil, nil)
   U1(pair(xs, zs), x, y) -> U2(le(x, y), y, xs, zs)
   le(0, x) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   U2(false, y, xs, zs) -> pair(cons(y, xs), zs)
   U2(true, y, xs, zs) -> pair(xs, cons(y, zs))

The set Q consists of the following terms:

   split(x0, cons(x1, x2))
   U1(pair(x0, x1), x2, x3)
   U2(false, x0, x1, x2)
   U2(true, x0, x1, x2)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   split(x0, nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(38)
YES
