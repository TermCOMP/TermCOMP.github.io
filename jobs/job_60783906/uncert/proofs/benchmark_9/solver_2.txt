MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/qfIQF.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Quasi decreasingness of the given CTRS could not be shown:

(0) CTRS
(1) CTRSToQTRSProof [SOUND, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 18 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) MNOCProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) UsableRulesProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QReductionProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) NonTerminationLoopProof [COMPLETE, 0 ms]
        (17) NO
    (18) QDP
        (19) MNOCProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QReductionProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) NonTerminationLoopProof [COMPLETE, 0 ms]
        (26) NO


----------------------------------------

(0)
Obligation:
Conditional term rewrite system:
The TRS R consists of the following rules:

   f(x, x) -> a
   a -> b
   b -> a

The conditional TRS C consists of the following conditional rules:

   g(x) -> a <= g(x) -> b


----------------------------------------

(1) CTRSToQTRSProof (SOUND)
The conditional rules have been transormed into unconditional rules according to [CTRS,AAECCNOC].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   g(x) -> U1(g(x))
   U1(b) -> a
   f(x, x) -> a
   a -> b
   b -> a

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
g/1)YES(
U1/1)YES(
b/0)
a/0)
f/2(YES,YES)

Quasi precedence:
f_2 > [b, a]


Status:
b: multiset status
a: multiset status
f_2: [1,2]

With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f(x, x) -> a




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   g(x) -> U1(g(x))
   U1(b) -> a
   a -> b
   b -> a

Q is empty.

----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(x) -> U1^1(g(x))
   G(x) -> G(x)
   U1^1(b) -> A
   A -> B
   B -> A

The TRS R consists of the following rules:

   g(x) -> U1(g(x))
   U1(b) -> a
   a -> b
   b -> a

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 2 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B -> A
   A -> B

The TRS R consists of the following rules:

   g(x) -> U1(g(x))
   U1(b) -> a
   a -> b
   b -> a

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B -> A
   A -> B

The TRS R consists of the following rules:

   g(x) -> U1(g(x))
   U1(b) -> a
   a -> b
   b -> a

The set Q consists of the following terms:

   g(x0)
   a
   b

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B -> A
   A -> B

R is empty.
The set Q consists of the following terms:

   g(x0)
   a
   b

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   g(x0)
   a
   b


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B -> A
   A -> B

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = A evaluates to  t =A

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

A -> B
with rule A -> B at position [] and matcher [ ]

B -> A
with rule B -> A

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(17)
NO

----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(x) -> G(x)

The TRS R consists of the following rules:

   g(x) -> U1(g(x))
   U1(b) -> a
   a -> b
   b -> a

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(x) -> G(x)

The TRS R consists of the following rules:

   g(x) -> U1(g(x))
   U1(b) -> a
   a -> b
   b -> a

The set Q consists of the following terms:

   g(x0)
   a
   b

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(x) -> G(x)

R is empty.
The set Q consists of the following terms:

   g(x0)
   a
   b

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   g(x0)
   a
   b


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(x) -> G(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = G(x) evaluates to  t =G(x)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from G(x) to G(x).




----------------------------------------

(26)
NO
