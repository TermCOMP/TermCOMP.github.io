YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/PPd1s.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Quasi decreasingness of the given CTRS could be proven:

(0) CTRS
(1) CTRSToQTRSProof [SOUND, 0 ms]
(2) QTRS
(3) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) UsableRulesProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) QDP
        (24) UsableRulesProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QReductionProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPOrderProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) DependencyGraphProof [EQUIVALENT, 0 ms]
        (31) TRUE


----------------------------------------

(0)
Obligation:
Conditional term rewrite system:
The TRS R consists of the following rules:

   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quotrem(0, s(y)) -> pair(0, 0)

The conditional TRS C consists of the following conditional rules:

   quotrem(s(x), s(y)) -> pair(0, s(x)) <= less(x, y) -> true
   quotrem(s(x), s(y)) -> pair(s(q), r) <= less(x, y) -> false, quotrem(minus(x, y), s(y)) -> pair(q, r)


----------------------------------------

(1) CTRSToQTRSProof (SOUND)
The conditional rules have been transormed into unconditional rules according to [CTRS,AAECCNOC].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   quotrem(s(x), s(y)) -> U1(less(x, y), x, y)
   U1(true, x, y) -> pair(0, s(x))
   U1(false, x, y) -> U2(quotrem(minus(x, y), s(y)))
   U2(pair(q, r)) -> pair(s(q), r)
   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quotrem(0, s(y)) -> pair(0, 0)

Q is empty.

----------------------------------------

(3) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   quotrem(s(x), s(y)) -> U1(less(x, y), x, y)
   U1(true, x, y) -> pair(0, s(x))
   U1(false, x, y) -> U2(quotrem(minus(x, y), s(y)))
   U2(pair(q, r)) -> pair(s(q), r)
   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quotrem(0, s(y)) -> pair(0, 0)

The set Q consists of the following terms:

   quotrem(s(x0), s(x1))
   U1(true, x0, x1)
   U1(false, x0, x1)
   U2(pair(x0, x1))
   less(x0, 0)
   less(0, s(x0))
   less(s(x0), s(x1))
   minus(0, s(x0))
   minus(x0, 0)
   minus(s(x0), s(x1))
   quotrem(0, s(x0))


----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOTREM(s(x), s(y)) -> U1^1(less(x, y), x, y)
   QUOTREM(s(x), s(y)) -> LESS(x, y)
   U1^1(false, x, y) -> U2^1(quotrem(minus(x, y), s(y)))
   U1^1(false, x, y) -> QUOTREM(minus(x, y), s(y))
   U1^1(false, x, y) -> MINUS(x, y)
   LESS(s(x), s(y)) -> LESS(x, y)
   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   quotrem(s(x), s(y)) -> U1(less(x, y), x, y)
   U1(true, x, y) -> pair(0, s(x))
   U1(false, x, y) -> U2(quotrem(minus(x, y), s(y)))
   U2(pair(q, r)) -> pair(s(q), r)
   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quotrem(0, s(y)) -> pair(0, 0)

The set Q consists of the following terms:

   quotrem(s(x0), s(x1))
   U1(true, x0, x1)
   U1(false, x0, x1)
   U2(pair(x0, x1))
   less(x0, 0)
   less(0, s(x0))
   less(s(x0), s(x1))
   minus(0, s(x0))
   minus(x0, 0)
   minus(s(x0), s(x1))
   quotrem(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 3 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   quotrem(s(x), s(y)) -> U1(less(x, y), x, y)
   U1(true, x, y) -> pair(0, s(x))
   U1(false, x, y) -> U2(quotrem(minus(x, y), s(y)))
   U2(pair(q, r)) -> pair(s(q), r)
   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quotrem(0, s(y)) -> pair(0, 0)

The set Q consists of the following terms:

   quotrem(s(x0), s(x1))
   U1(true, x0, x1)
   U1(false, x0, x1)
   U2(pair(x0, x1))
   less(x0, 0)
   less(0, s(x0))
   less(s(x0), s(x1))
   minus(0, s(x0))
   minus(x0, 0)
   minus(s(x0), s(x1))
   quotrem(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
The set Q consists of the following terms:

   quotrem(s(x0), s(x1))
   U1(true, x0, x1)
   U1(false, x0, x1)
   U2(pair(x0, x1))
   less(x0, 0)
   less(0, s(x0))
   less(s(x0), s(x1))
   minus(0, s(x0))
   minus(x0, 0)
   minus(s(x0), s(x1))
   quotrem(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quotrem(s(x0), s(x1))
   U1(true, x0, x1)
   U1(false, x0, x1)
   U2(pair(x0, x1))
   less(x0, 0)
   less(0, s(x0))
   less(s(x0), s(x1))
   minus(0, s(x0))
   minus(x0, 0)
   minus(s(x0), s(x1))
   quotrem(0, s(x0))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS(s(x), s(y)) -> LESS(x, y)

The TRS R consists of the following rules:

   quotrem(s(x), s(y)) -> U1(less(x, y), x, y)
   U1(true, x, y) -> pair(0, s(x))
   U1(false, x, y) -> U2(quotrem(minus(x, y), s(y)))
   U2(pair(q, r)) -> pair(s(q), r)
   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quotrem(0, s(y)) -> pair(0, 0)

The set Q consists of the following terms:

   quotrem(s(x0), s(x1))
   U1(true, x0, x1)
   U1(false, x0, x1)
   U2(pair(x0, x1))
   less(x0, 0)
   less(0, s(x0))
   less(s(x0), s(x1))
   minus(0, s(x0))
   minus(x0, 0)
   minus(s(x0), s(x1))
   quotrem(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS(s(x), s(y)) -> LESS(x, y)

R is empty.
The set Q consists of the following terms:

   quotrem(s(x0), s(x1))
   U1(true, x0, x1)
   U1(false, x0, x1)
   U2(pair(x0, x1))
   less(x0, 0)
   less(0, s(x0))
   less(s(x0), s(x1))
   minus(0, s(x0))
   minus(x0, 0)
   minus(s(x0), s(x1))
   quotrem(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quotrem(s(x0), s(x1))
   U1(true, x0, x1)
   U1(false, x0, x1)
   U2(pair(x0, x1))
   less(x0, 0)
   less(0, s(x0))
   less(s(x0), s(x1))
   minus(0, s(x0))
   minus(x0, 0)
   minus(s(x0), s(x1))
   quotrem(0, s(x0))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS(s(x), s(y)) -> LESS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LESS(s(x), s(y)) -> LESS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1^1(false, x, y) -> QUOTREM(minus(x, y), s(y))
   QUOTREM(s(x), s(y)) -> U1^1(less(x, y), x, y)

The TRS R consists of the following rules:

   quotrem(s(x), s(y)) -> U1(less(x, y), x, y)
   U1(true, x, y) -> pair(0, s(x))
   U1(false, x, y) -> U2(quotrem(minus(x, y), s(y)))
   U2(pair(q, r)) -> pair(s(q), r)
   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quotrem(0, s(y)) -> pair(0, 0)

The set Q consists of the following terms:

   quotrem(s(x0), s(x1))
   U1(true, x0, x1)
   U1(false, x0, x1)
   U2(pair(x0, x1))
   less(x0, 0)
   less(0, s(x0))
   less(s(x0), s(x1))
   minus(0, s(x0))
   minus(x0, 0)
   minus(s(x0), s(x1))
   quotrem(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1^1(false, x, y) -> QUOTREM(minus(x, y), s(y))
   QUOTREM(s(x), s(y)) -> U1^1(less(x, y), x, y)

The TRS R consists of the following rules:

   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   quotrem(s(x0), s(x1))
   U1(true, x0, x1)
   U1(false, x0, x1)
   U2(pair(x0, x1))
   less(x0, 0)
   less(0, s(x0))
   less(s(x0), s(x1))
   minus(0, s(x0))
   minus(x0, 0)
   minus(s(x0), s(x1))
   quotrem(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quotrem(s(x0), s(x1))
   U1(true, x0, x1)
   U1(false, x0, x1)
   U2(pair(x0, x1))
   quotrem(0, s(x0))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1^1(false, x, y) -> QUOTREM(minus(x, y), s(y))
   QUOTREM(s(x), s(y)) -> U1^1(less(x, y), x, y)

The TRS R consists of the following rules:

   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   less(x0, 0)
   less(0, s(x0))
   less(s(x0), s(x1))
   minus(0, s(x0))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUOTREM(s(x), s(y)) -> U1^1(less(x, y), x, y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
U1^1(x1, x2, x3)  =  x2

QUOTREM(x1, x2)  =  x1

minus(x1, x2)  =  x1

s(x1)  =  s(x1)

0  =  0


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   0=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1^1(false, x, y) -> QUOTREM(minus(x, y), s(y))

The TRS R consists of the following rules:

   less(x, 0) -> false
   less(0, s(x)) -> true
   less(s(x), s(y)) -> less(x, y)
   minus(0, s(y)) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   less(x0, 0)
   less(0, s(x0))
   less(s(x0), s(x1))
   minus(0, s(x0))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(31)
TRUE
