YES

Problem 1: 

(VAR vu95NonEmpty q r x y)
(RULES
less(num0,s(x)) -> ftrue
less(s(x),s(y)) -> less(x,y)
less(x,num0) -> ffalse
minus(num0,s(y)) -> num0
minus(s(x),s(y)) -> minus(x,y)
minus(x,num0) -> x
quotrem(num0,s(y)) -> pair(num0,num0)
quotrem(s(x),s(y)) -> pair(num0,s(x)) | less(x,y) ->* ftrue
quotrem(s(x),s(y)) -> pair(s(q),r) | less(x,y) ->* ffalse, quotrem(minus(x,y),s(y)) ->* pair(q,r)
)


Problem 1: 
Valid CTRS Processor:
-> Rules:
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quotrem(num0,s(y)) -> pair(num0,num0)
 quotrem(s(x),s(y)) -> pair(num0,s(x)) | less(x,y) ->* ftrue
 quotrem(s(x),s(y)) -> pair(s(q),r) | less(x,y) ->* ffalse, quotrem(minus(x,y),s(y)) ->* pair(q,r)
-> The system is a deterministic 3-CTRS.

Problem 1: 

2D Dependency Pair Processor:

Conditional Termination Problem 1:
-> Pairs:
 LESS(s(x),s(y)) -> LESS(x,y)
 MINUS(s(x),s(y)) -> MINUS(x,y)
-> QPairs:
 Empty
-> Rules:
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quotrem(num0,s(y)) -> pair(num0,num0)
 quotrem(s(x),s(y)) -> pair(num0,s(x)) | less(x,y) ->* ftrue
 quotrem(s(x),s(y)) -> pair(s(q),r) | less(x,y) ->* ffalse, quotrem(minus(x,y),s(y)) ->* pair(q,r)

Conditional Termination Problem 2:
-> Pairs:
 QUOTREM(s(x),s(y)) -> LESS(x,y)
 QUOTREM(s(x),s(y)) -> MINUS(x,y) | less(x,y) ->* ffalse
 QUOTREM(s(x),s(y)) -> QUOTREM(minus(x,y),s(y)) | less(x,y) ->* ffalse
-> QPairs:
 LESS(s(x),s(y)) -> LESS(x,y)
 MINUS(s(x),s(y)) -> MINUS(x,y)
-> Rules:
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quotrem(num0,s(y)) -> pair(num0,num0)
 quotrem(s(x),s(y)) -> pair(num0,s(x)) | less(x,y) ->* ftrue
 quotrem(s(x),s(y)) -> pair(s(q),r) | less(x,y) ->* ffalse, quotrem(minus(x,y),s(y)) ->* pair(q,r)


The problem is decomposed in 2 subproblems.

Problem 1.1: 

SCC Processor:
-> Pairs:
 LESS(s(x),s(y)) -> LESS(x,y)
 MINUS(s(x),s(y)) -> MINUS(x,y)
-> QPairs:
 Empty
-> Rules:
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quotrem(num0,s(y)) -> pair(num0,num0)
 quotrem(s(x),s(y)) -> pair(num0,s(x)) | less(x,y) ->* ftrue
 quotrem(s(x),s(y)) -> pair(s(q),r) | less(x,y) ->* ffalse, quotrem(minus(x,y),s(y)) ->* pair(q,r)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MINUS(s(x),s(y)) -> MINUS(x,y)
-> QPairs:
 Empty
->->-> Rules:
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quotrem(num0,s(y)) -> pair(num0,num0)
 quotrem(s(x),s(y)) -> pair(num0,s(x)) | less(x,y) ->* ftrue
 quotrem(s(x),s(y)) -> pair(s(q),r) | less(x,y) ->* ffalse, quotrem(minus(x,y),s(y)) ->* pair(q,r)
->->Cycle:
->->-> Pairs:
 LESS(s(x),s(y)) -> LESS(x,y)
-> QPairs:
 Empty
->->-> Rules:
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quotrem(num0,s(y)) -> pair(num0,num0)
 quotrem(s(x),s(y)) -> pair(num0,s(x)) | less(x,y) ->* ftrue
 quotrem(s(x),s(y)) -> pair(s(q),r) | less(x,y) ->* ffalse, quotrem(minus(x,y),s(y)) ->* pair(q,r)


The problem is decomposed in 2 subproblems.

Problem 1.1.1: 

Subterm Processor:
-> Pairs:
 MINUS(s(x),s(y)) -> MINUS(x,y)
-> QPairs:
 Empty
-> Rules:
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quotrem(num0,s(y)) -> pair(num0,num0)
 quotrem(s(x),s(y)) -> pair(num0,s(x)) | less(x,y) ->* ftrue
 quotrem(s(x),s(y)) -> pair(s(q),r) | less(x,y) ->* ffalse, quotrem(minus(x,y),s(y)) ->* pair(q,r)
->Projection:
 pi(MINUS) = 1

Problem 1.1.1: 

SCC Processor:
-> Pairs:
 Empty
-> QPairs:
 Empty
-> Rules:
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quotrem(num0,s(y)) -> pair(num0,num0)
 quotrem(s(x),s(y)) -> pair(num0,s(x)) | less(x,y) ->* ftrue
 quotrem(s(x),s(y)) -> pair(s(q),r) | less(x,y) ->* ffalse, quotrem(minus(x,y),s(y)) ->* pair(q,r)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.1.2: 

Subterm Processor:
-> Pairs:
 LESS(s(x),s(y)) -> LESS(x,y)
-> QPairs:
 Empty
-> Rules:
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quotrem(num0,s(y)) -> pair(num0,num0)
 quotrem(s(x),s(y)) -> pair(num0,s(x)) | less(x,y) ->* ftrue
 quotrem(s(x),s(y)) -> pair(s(q),r) | less(x,y) ->* ffalse, quotrem(minus(x,y),s(y)) ->* pair(q,r)
->Projection:
 pi(LESS) = 1

Problem 1.1.2: 

SCC Processor:
-> Pairs:
 Empty
-> QPairs:
 Empty
-> Rules:
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quotrem(num0,s(y)) -> pair(num0,num0)
 quotrem(s(x),s(y)) -> pair(num0,s(x)) | less(x,y) ->* ftrue
 quotrem(s(x),s(y)) -> pair(s(q),r) | less(x,y) ->* ffalse, quotrem(minus(x,y),s(y)) ->* pair(q,r)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

SCC Processor:
-> Pairs:
 QUOTREM(s(x),s(y)) -> LESS(x,y)
 QUOTREM(s(x),s(y)) -> MINUS(x,y) | less(x,y) ->* ffalse
 QUOTREM(s(x),s(y)) -> QUOTREM(minus(x,y),s(y)) | less(x,y) ->* ffalse
-> QPairs:
 LESS(s(x),s(y)) -> LESS(x,y)
 MINUS(s(x),s(y)) -> MINUS(x,y)
-> Rules:
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quotrem(num0,s(y)) -> pair(num0,num0)
 quotrem(s(x),s(y)) -> pair(num0,s(x)) | less(x,y) ->* ftrue
 quotrem(s(x),s(y)) -> pair(s(q),r) | less(x,y) ->* ffalse, quotrem(minus(x,y),s(y)) ->* pair(q,r)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 QUOTREM(s(x),s(y)) -> QUOTREM(minus(x,y),s(y)) | less(x,y) ->* ffalse
-> QPairs:
 Empty
->->-> Rules:
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quotrem(num0,s(y)) -> pair(num0,num0)
 quotrem(s(x),s(y)) -> pair(num0,s(x)) | less(x,y) ->* ftrue
 quotrem(s(x),s(y)) -> pair(s(q),r) | less(x,y) ->* ffalse, quotrem(minus(x,y),s(y)) ->* pair(q,r)

Problem 1.2: 

Removal Triple Processor:
-> Pairs:
 QUOTREM(s(x),s(y)) -> QUOTREM(minus(x,y),s(y)) | less(x,y) ->* ffalse
-> QPairs:
 Empty
-> Rules:
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quotrem(num0,s(y)) -> pair(num0,num0)
 quotrem(s(x),s(y)) -> pair(num0,s(x)) | less(x,y) ->* ftrue
 quotrem(s(x),s(y)) -> pair(s(q),r) | less(x,y) ->* ffalse, quotrem(minus(x,y),s(y)) ->* pair(q,r)
-> Usable rules:
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[less](X1,X2) = 2.X1 + X2 + 2
[minus](X1,X2) = 2.X1
[quotrem](X1,X2) = 0
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 1
[pair](X1,X2) = 0
[s](X) = 2.X + 2
[ftrue] = 0
[LESS](X1,X2) = 0
[MINUS](X1,X2) = 0
[QUOTREM](X1,X2) = X1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> QPairs:
 Empty
-> Rules:
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quotrem(num0,s(y)) -> pair(num0,num0)
 quotrem(s(x),s(y)) -> pair(num0,s(x)) | less(x,y) ->* ftrue
 quotrem(s(x),s(y)) -> pair(s(q),r) | less(x,y) ->* ffalse, quotrem(minus(x,y),s(y)) ->* pair(q,r)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
