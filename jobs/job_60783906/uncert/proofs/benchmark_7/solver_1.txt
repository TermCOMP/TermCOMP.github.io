YES

Problem 1: 

(VAR vu95NonEmpty x)
(RULES
p(q(x)) -> p(r(x))
q(h(x)) -> r(x)
r(x) -> r(h(x)) | s(x) ->* num0
s(x) -> num1
)


Problem 1: 
Valid CTRS Processor:
-> Rules:
 p(q(x)) -> p(r(x))
 q(h(x)) -> r(x)
 r(x) -> r(h(x)) | s(x) ->* num0
 s(x) -> num1
-> The system is a 2-CTRS.

Problem 1: 

2D Dependency Pair Processor:

Conditional Termination Problem 1:
-> Pairs:
 P(q(x)) -> P(r(x))
 P(q(x)) -> R(x)
 Q(h(x)) -> R(x)
 R(x) -> R(h(x)) | s(x) ->* num0
-> QPairs:
 Empty
-> Rules:
 p(q(x)) -> p(r(x))
 q(h(x)) -> r(x)
 r(x) -> r(h(x)) | s(x) ->* num0
 s(x) -> num1

Conditional Termination Problem 2:
-> Pairs:
 R(x) -> S(x)
-> QPairs:
 Empty
-> Rules:
 p(q(x)) -> p(r(x))
 q(h(x)) -> r(x)
 r(x) -> r(h(x)) | s(x) ->* num0
 s(x) -> num1


The problem is decomposed in 2 subproblems.

Problem 1.1: 

SCC Processor:
-> Pairs:
 P(q(x)) -> P(r(x))
 P(q(x)) -> R(x)
 Q(h(x)) -> R(x)
 R(x) -> R(h(x)) | s(x) ->* num0
-> QPairs:
 Empty
-> Rules:
 p(q(x)) -> p(r(x))
 q(h(x)) -> r(x)
 r(x) -> r(h(x)) | s(x) ->* num0
 s(x) -> num1
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 R(x) -> R(h(x)) | s(x) ->* num0
-> QPairs:
 Empty
->->-> Rules:
 p(q(x)) -> p(r(x))
 q(h(x)) -> r(x)
 r(x) -> r(h(x)) | s(x) ->* num0
 s(x) -> num1
->->Cycle:
->->-> Pairs:
 P(q(x)) -> P(r(x))
-> QPairs:
 Empty
->->-> Rules:
 p(q(x)) -> p(r(x))
 q(h(x)) -> r(x)
 r(x) -> r(h(x)) | s(x) ->* num0
 s(x) -> num1


The problem is decomposed in 2 subproblems.

Problem 1.1.1: 

Semantic Removal Triple Processor:
-> Pairs:
 R(x) -> R(h(x)) | s(x) ->* num0
-> Rules:
 p(q(x)) -> p(r(x))
 q(h(x)) -> r(x)
 r(x) -> r(h(x)) | s(x) ->* num0
 s(x) -> num1
-> Needed rules:
 Empty
-> Usable rules:
 s(x) -> num1
->Mace4 Output:
 ============================== Mace4 =================================
Mace4 (64) version 2009-11A, November 2009.
Process 33 was started by ff862203 on r23m0027.hpc.itc.rwth-aachen.de,
Wed Sep  3 11:34:43 2025
The command was "./mace4 -c -f /tmp/mace422-2.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /tmp/mace422-2.in

assign(max_seconds,20).

formulas(assumptions).
arrowStar_s0(x,x) # label(reflexivity).
arrow_s0(x,y) & arrowStar_s0(y,z) -> arrowStar_s0(x,z) # label(compatibility).
gtrsim_s0(x,y) & sqsupset_s0(y,z) -> sqsupset_s0(x,z) # label(compatibility).
succeq_s0(x,y) & sqsupset_s0(y,z) -> sqsupset_s0(x,z) # label(compatibility).
gtrsim_s0(x,y) & succeq_s0(y,z) -> gtrsim_s0(x,z) # label(compatibility).
arrow_s0(x1,y) -> arrow_s0(f2(x1),f2(y)) # label(congruence).
arrow_s0(x1,y) -> arrow_s0(f3(x1),f3(y)) # label(congruence).
arrow_s0(x1,y) -> arrow_s0(f4(x1),f4(y)) # label(congruence).
arrow_s0(x1,y) -> arrow_s0(f5(x1),f5(y)) # label(congruence).
arrow_s0(x1,y) -> arrow_s0(f9(x1),f9(y)) # label(congruence).
arrow_s0(x1,y) -> arrow_s0(f16(x1,x2),f16(y,x2)) # label(congruence).
arrow_s0(x2,y) -> arrow_s0(f16(x1,x2),f16(x1,y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f2(x1),f2(y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f3(x1),f3(y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f4(x1),f4(y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f5(x1),f5(y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f9(x1),f9(y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f12(x1),f12(y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f13(x1),f13(y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f14(x1),f14(y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f15(x1),f15(y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f16(x1,x2),f16(y,x2)) # label(congruence).
arrowN_s0(x2,y) -> arrowN_s0(f16(x1,x2),f16(x1,y)) # label(congruence).
arrow_s0(f5(x1),f7) # label(replacement).
arrow_s0(f16(x2,x3),x2) # label(replacement).
arrow_s0(f16(x2,x3),x3) # label(replacement).
arrowN_s0(f16(x2,x3),x2) # label(replacement).
arrowN_s0(f16(x2,x3),x3) # label(replacement).
arrowN_s0(x,y) -> gtrsim_s0(x,y) # label(inclusion).
arrowStar_s0(f5(x1),f6) -> sqsupset_s0(f14(x1),f14(f9(x1))) # label(replacement).
sqsupset_s0(x,y) -> sqsupsetStar_s0(x,y) # label(inclusion).
sqsupset_s0(x,y) & sqsupsetStar_s0(y,z) -> sqsupsetStar_s0(x,z) # label(compatibility).
end_of_list.

formulas(goals).
(exists x sqsupsetStar_s0(x,x)) # label(wellfoundedness).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 arrow_s0(x,y) & arrowStar_s0(y,z) -> arrowStar_s0(x,z) # label(compatibility) # label(non_clause).  [assumption].
2 gtrsim_s0(x,y) & sqsupset_s0(y,z) -> sqsupset_s0(x,z) # label(compatibility) # label(non_clause).  [assumption].
3 succeq_s0(x,y) & sqsupset_s0(y,z) -> sqsupset_s0(x,z) # label(compatibility) # label(non_clause).  [assumption].
4 gtrsim_s0(x,y) & succeq_s0(y,z) -> gtrsim_s0(x,z) # label(compatibility) # label(non_clause).  [assumption].
5 arrow_s0(x1,y) -> arrow_s0(f2(x1),f2(y)) # label(congruence) # label(non_clause).  [assumption].
6 arrow_s0(x1,y) -> arrow_s0(f3(x1),f3(y)) # label(congruence) # label(non_clause).  [assumption].
7 arrow_s0(x1,y) -> arrow_s0(f4(x1),f4(y)) # label(congruence) # label(non_clause).  [assumption].
8 arrow_s0(x1,y) -> arrow_s0(f5(x1),f5(y)) # label(congruence) # label(non_clause).  [assumption].
9 arrow_s0(x1,y) -> arrow_s0(f9(x1),f9(y)) # label(congruence) # label(non_clause).  [assumption].
10 arrow_s0(x1,y) -> arrow_s0(f16(x1,x2),f16(y,x2)) # label(congruence) # label(non_clause).  [assumption].
11 arrow_s0(x2,y) -> arrow_s0(f16(x1,x2),f16(x1,y)) # label(congruence) # label(non_clause).  [assumption].
12 arrowN_s0(x1,y) -> arrowN_s0(f2(x1),f2(y)) # label(congruence) # label(non_clause).  [assumption].
13 arrowN_s0(x1,y) -> arrowN_s0(f3(x1),f3(y)) # label(congruence) # label(non_clause).  [assumption].
14 arrowN_s0(x1,y) -> arrowN_s0(f4(x1),f4(y)) # label(congruence) # label(non_clause).  [assumption].
15 arrowN_s0(x1,y) -> arrowN_s0(f5(x1),f5(y)) # label(congruence) # label(non_clause).  [assumption].
16 arrowN_s0(x1,y) -> arrowN_s0(f9(x1),f9(y)) # label(congruence) # label(non_clause).  [assumption].
17 arrowN_s0(x1,y) -> arrowN_s0(f12(x1),f12(y)) # label(congruence) # label(non_clause).  [assumption].
18 arrowN_s0(x1,y) -> arrowN_s0(f13(x1),f13(y)) # label(congruence) # label(non_clause).  [assumption].
19 arrowN_s0(x1,y) -> arrowN_s0(f14(x1),f14(y)) # label(congruence) # label(non_clause).  [assumption].
20 arrowN_s0(x1,y) -> arrowN_s0(f15(x1),f15(y)) # label(congruence) # label(non_clause).  [assumption].
21 arrowN_s0(x1,y) -> arrowN_s0(f16(x1,x2),f16(y,x2)) # label(congruence) # label(non_clause).  [assumption].
22 arrowN_s0(x2,y) -> arrowN_s0(f16(x1,x2),f16(x1,y)) # label(congruence) # label(non_clause).  [assumption].
23 arrowN_s0(x,y) -> gtrsim_s0(x,y) # label(inclusion) # label(non_clause).  [assumption].
24 arrowStar_s0(f5(x1),f6) -> sqsupset_s0(f14(x1),f14(f9(x1))) # label(replacement) # label(non_clause).  [assumption].
25 sqsupset_s0(x,y) -> sqsupsetStar_s0(x,y) # label(inclusion) # label(non_clause).  [assumption].
26 sqsupset_s0(x,y) & sqsupsetStar_s0(y,z) -> sqsupsetStar_s0(x,z) # label(compatibility) # label(non_clause).  [assumption].
27 (exists x sqsupsetStar_s0(x,x)) # label(wellfoundedness) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
arrowStar_s0(x,x) # label(reflexivity).
-arrow_s0(x,y) | -arrowStar_s0(y,z) | arrowStar_s0(x,z) # label(compatibility).
-gtrsim_s0(x,y) | -sqsupset_s0(y,z) | sqsupset_s0(x,z) # label(compatibility).
-succeq_s0(x,y) | -sqsupset_s0(y,z) | sqsupset_s0(x,z) # label(compatibility).
-gtrsim_s0(x,y) | -succeq_s0(y,z) | gtrsim_s0(x,z) # label(compatibility).
-arrow_s0(x,y) | arrow_s0(f2(x),f2(y)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f3(x),f3(y)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f4(x),f4(y)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f5(x),f5(y)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f9(x),f9(y)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f16(x,z),f16(y,z)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f16(z,x),f16(z,y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f2(x),f2(y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f3(x),f3(y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f4(x),f4(y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f5(x),f5(y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f9(x),f9(y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f12(x),f12(y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f13(x),f13(y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f14(x),f14(y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f15(x),f15(y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f16(x,z),f16(y,z)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f16(z,x),f16(z,y)) # label(congruence).
arrow_s0(f5(x),f7) # label(replacement).
arrow_s0(f16(x,y),x) # label(replacement).
arrow_s0(f16(x,y),y) # label(replacement).
arrowN_s0(f16(x,y),x) # label(replacement).
arrowN_s0(f16(x,y),y) # label(replacement).
-arrowN_s0(x,y) | gtrsim_s0(x,y) # label(inclusion).
-arrowStar_s0(f5(x),f6) | sqsupset_s0(f14(x),f14(f9(x))) # label(replacement).
-sqsupset_s0(x,y) | sqsupsetStar_s0(x,y) # label(inclusion).
-sqsupset_s0(x,y) | -sqsupsetStar_s0(y,z) | sqsupsetStar_s0(x,z) # label(compatibility).
-sqsupsetStar_s0(x,x) # label(wellfoundedness).
end_of_list.

============================== end of clauses for search =============

% There are no natural numbers in the input.

============================== DOMAIN SIZE 2 =========================

============================== MODEL =================================

interpretation( 2, [number=1, seconds=0], [

        function(f6, [ 0 ]),

        function(f7, [ 1 ]),

        function(f12(_), [ 0, 0 ]),

        function(f13(_), [ 0, 0 ]),

        function(f14(_), [ 0, 1 ]),

        function(f15(_), [ 0, 0 ]),

        function(f2(_), [ 0, 0 ]),

        function(f3(_), [ 0, 0 ]),

        function(f4(_), [ 0, 0 ]),

        function(f5(_), [ 0, 1 ]),

        function(f9(_), [ 1, 1 ]),

        function(f16(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(arrowN_s0(_,_), [
			   1, 1,
			   0, 1 ]),

        relation(arrowStar_s0(_,_), [
			   1, 1,
			   0, 1 ]),

        relation(arrow_s0(_,_), [
			   1, 1,
			   0, 1 ]),

        relation(gtrsim_s0(_,_), [
			   1, 1,
			   0, 1 ]),

        relation(sqsupsetStar_s0(_,_), [
			   0, 1,
			   0, 0 ]),

        relation(sqsupset_s0(_,_), [
			   0, 1,
			   0, 0 ]),

        relation(succeq_s0(_,_), [
			   0, 0,
			   0, 0 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=160, kept=156.
Selections=532, assignments=1045, propagations=4959, current_models=1.
Rewrite_terms=15314, rewrite_bools=25971, indexes=3527.
Rules_from_neg_clauses=1478, cross_offs=1478.

============================== end of statistics =====================

User_CPU=0.01, System_CPU=0.00, Wall_clock=0.

Exiting with 1 model.

Process 33 exit (max_models) Wed Sep  3 11:34:43 2025
The process finished Wed Sep  3 11:34:43 2025


Mace4 cooked interpretation:

% number = 1
% seconds = 0

% Interpretation of size 2

f6 = 0.

f7 = 1.

f12(0) = 0.
f12(1) = 0.

f13(0) = 0.
f13(1) = 0.

f14(0) = 0.
f14(1) = 1.

f15(0) = 0.
f15(1) = 0.

f2(0) = 0.
f2(1) = 0.

f3(0) = 0.
f3(1) = 0.

f4(0) = 0.
f4(1) = 0.

f5(0) = 0.
f5(1) = 1.

f9(0) = 1.
f9(1) = 1.

f16(0,0) = 0.
f16(0,1) = 0.
f16(1,0) = 0.
f16(1,1) = 0.

  arrowN_s0(0,0).
  arrowN_s0(0,1).
- arrowN_s0(1,0).
  arrowN_s0(1,1).

  arrowStar_s0(0,0).
  arrowStar_s0(0,1).
- arrowStar_s0(1,0).
  arrowStar_s0(1,1).

  arrow_s0(0,0).
  arrow_s0(0,1).
- arrow_s0(1,0).
  arrow_s0(1,1).

  gtrsim_s0(0,0).
  gtrsim_s0(0,1).
- gtrsim_s0(1,0).
  gtrsim_s0(1,1).

- sqsupsetStar_s0(0,0).
  sqsupsetStar_s0(0,1).
- sqsupsetStar_s0(1,0).
- sqsupsetStar_s0(1,1).

- sqsupset_s0(0,0).
  sqsupset_s0(0,1).
- sqsupset_s0(1,0).
- sqsupset_s0(1,1).

- succeq_s0(0,0).
- succeq_s0(0,1).
- succeq_s0(1,0).
- succeq_s0(1,1).


Problem 1.1.1: 

SCC Processor:
-> Pairs:
 Empty
-> QPairs:
 Empty
-> Rules:
 p(q(x)) -> p(r(x))
 q(h(x)) -> r(x)
 r(x) -> r(h(x)) | s(x) ->* num0
 s(x) -> num1
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.1.2: 

Removal Triple Processor:
-> Pairs:
 P(q(x)) -> P(r(x))
-> QPairs:
 Empty
-> Rules:
 p(q(x)) -> p(r(x))
 q(h(x)) -> r(x)
 r(x) -> r(h(x)) | s(x) ->* num0
 s(x) -> num1
-> Usable rules:
 r(x) -> r(h(x)) | s(x) ->* num0
 s(x) -> num1
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[p](X) = 0
[q](X) = 2.X + 2
[r](X) = 0
[s](X) = 0
[num0] = 0
[num1] = 0
[fSNonEmpty] = 0
[h](X) = 0
[P](X) = 2.X
[Q](X) = 0
[R](X) = 0
[S](X) = 0

Problem 1.1.2: 

SCC Processor:
-> Pairs:
 Empty
-> QPairs:
 Empty
-> Rules:
 p(q(x)) -> p(r(x))
 q(h(x)) -> r(x)
 r(x) -> r(h(x)) | s(x) ->* num0
 s(x) -> num1
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

SCC Processor:
-> Pairs:
 R(x) -> S(x)
-> QPairs:
 Empty
-> Rules:
 p(q(x)) -> p(r(x))
 q(h(x)) -> r(x)
 r(x) -> r(h(x)) | s(x) ->* num0
 s(x) -> num1
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
