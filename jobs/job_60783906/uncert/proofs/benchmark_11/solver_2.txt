MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/AeDOD.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Quasi decreasingness of the given CTRS could not be shown:

(0) CTRS
(1) CTRSToQTRSProof [SOUND, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) QDP
(7) NonTerminationLoopProof [COMPLETE, 59 ms]
(8) NO


----------------------------------------

(0)
Obligation:
Conditional term rewrite system:
The TRS R consists of the following rules:

   App(App(App(S, x), y), z) -> App(App(x, z), App(y, z))
   App(App(K, x), y) -> x
   App(I, x) -> x
   App(App(App(C, T), x), y) -> x
   App(App(App(C, F), x), y) -> y

The conditional TRS C consists of the following conditional rules:

   App(App(App(C, z), x), y) -> x <= x -> y
   App(App(App(C, z), x), y) -> y <= x -> y


----------------------------------------

(1) CTRSToQTRSProof (SOUND)
The conditional rules have been transormed into unconditional rules according to [CTRS,AAECCNOC].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   App(App(App(C, z), x), y) -> U1(x, x, y)
   U1(y, x, y) -> y
   U1(y, x, y) -> x
   App(App(App(S, x), y), z) -> App(App(x, z), App(y, z))
   App(App(K, x), y) -> x
   App(I, x) -> x
   App(App(App(C, T), x), y) -> x
   App(App(App(C, F), x), y) -> y

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(App(App(C, z), x), y) -> U1^1(x, x, y)
   APP(App(App(S, x), y), z) -> APP(App(x, z), App(y, z))
   APP(App(App(S, x), y), z) -> APP(x, z)
   APP(App(App(S, x), y), z) -> APP(y, z)

The TRS R consists of the following rules:

   App(App(App(C, z), x), y) -> U1(x, x, y)
   U1(y, x, y) -> y
   U1(y, x, y) -> x
   App(App(App(S, x), y), z) -> App(App(x, z), App(y, z))
   App(App(K, x), y) -> x
   App(I, x) -> x
   App(App(App(C, T), x), y) -> x
   App(App(App(C, F), x), y) -> y

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(App(App(S, x), y), z) -> APP(x, z)
   APP(App(App(S, x), y), z) -> APP(App(x, z), App(y, z))
   APP(App(App(S, x), y), z) -> APP(y, z)

The TRS R consists of the following rules:

   App(App(App(C, z), x), y) -> U1(x, x, y)
   U1(y, x, y) -> y
   U1(y, x, y) -> x
   App(App(App(S, x), y), z) -> App(App(x, z), App(y, z))
   App(App(K, x), y) -> x
   App(I, x) -> x
   App(App(App(C, T), x), y) -> x
   App(App(App(C, F), x), y) -> y

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = APP(App(App(S, x'), App(App(S, x), y)), App(I, x'')) evaluates to  t =APP(App(x, x''), App(y, x''))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [x / App(S, x'), y / I, x'' / App(App(S, App(S, x')), I)]

--------------------------------------------------------------------------------
Rewriting sequence

APP(App(App(S, x'), App(App(S, App(S, x')), I)), App(I, App(App(S, App(S, x')), I))) -> APP(App(App(S, x'), App(App(S, App(S, x')), I)), App(App(S, App(S, x')), I))
with rule App(I, x'') -> x'' at position [1] and matcher [x'' / App(App(S, App(S, x')), I)]

APP(App(App(S, x'), App(App(S, App(S, x')), I)), App(App(S, App(S, x')), I)) -> APP(App(App(S, App(S, x')), I), App(App(S, App(S, x')), I))
with rule APP(App(App(S, x''), y'), z') -> APP(y', z') at position [] and matcher [x'' / x', y' / App(App(S, App(S, x')), I), z' / App(App(S, App(S, x')), I)]

APP(App(App(S, App(S, x')), I), App(App(S, App(S, x')), I)) -> APP(App(App(S, x'), App(App(S, App(S, x')), I)), App(I, App(App(S, App(S, x')), I)))
with rule APP(App(App(S, x), y), z) -> APP(App(x, z), App(y, z))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(8)
NO
