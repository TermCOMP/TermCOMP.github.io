YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/XfREV.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 142 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 54 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 20 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) FilterProof [EQUIVALENT, 0 ms]
(16) IntTRS
(17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(18) IntTRS
(19) RankingReductionPairProof [EQUIVALENT, 0 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package example_2;


public class Test {

	public static int divBy(int x){
		int r = 0;
		int y;
		while (x > 0) {
			y = 2;
			x = x/y;
			r = r + x;
		}
		return r;
	}

	public static void main(String[] args) {
		if (args.length > 0) {
		        int x = args[0].length();
			int r = divBy(x);
			// System.out.println("Result: " + r);
		}
		// else System.out.println("Error: Incorrect call");
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package example_2;


public class Test {

	public static int divBy(int x){
		int r = 0;
		int y;
		while (x > 0) {
			y = 2;
			x = x/y;
			r = r + x;
		}
		return r;
	}

	public static void main(String[] args) {
		if (args.length > 0) {
		        int x = args[0].length();
			int r = divBy(x);
			// System.out.println("Result: " + r);
		}
		// else System.out.println("Error: Incorrect call");
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
example_2.Test.main([Ljava/lang/String;)V: Graph of 67 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: example_2.Test.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 15 IRulesP rules:
f3574_0_divBy_LE(EOS(STATIC_3574), i550, i550) -> f3581_0_divBy_LE(EOS(STATIC_3581), i550, i550) :|: TRUE
f3581_0_divBy_LE(EOS(STATIC_3581), i550, i550) -> f3588_0_divBy_ConstantStackPush(EOS(STATIC_3588), i550) :|: i550 > 0
f3588_0_divBy_ConstantStackPush(EOS(STATIC_3588), i550) -> f3596_0_divBy_Store(EOS(STATIC_3596), i550, 2) :|: TRUE
f3596_0_divBy_Store(EOS(STATIC_3596), i550, matching1) -> f3602_0_divBy_Load(EOS(STATIC_3602), i550, 2) :|: TRUE && matching1 = 2
f3602_0_divBy_Load(EOS(STATIC_3602), i550, matching1) -> f3609_0_divBy_Load(EOS(STATIC_3609), 2, i550) :|: TRUE && matching1 = 2
f3609_0_divBy_Load(EOS(STATIC_3609), matching1, i550) -> f3614_0_divBy_IntArithmetic(EOS(STATIC_3614), i550, 2) :|: TRUE && matching1 = 2
f3614_0_divBy_IntArithmetic(EOS(STATIC_3614), i550, matching1) -> f3619_0_divBy_Store(EOS(STATIC_3619), i554) :|: i554 = i550 / 2 && i550 >= 1 && i554 < i550 && matching1 = 2
f3619_0_divBy_Store(EOS(STATIC_3619), i554) -> f3621_0_divBy_Load(EOS(STATIC_3621), i554) :|: TRUE
f3621_0_divBy_Load(EOS(STATIC_3621), i554) -> f3625_0_divBy_Load(EOS(STATIC_3625), i554) :|: TRUE
f3625_0_divBy_Load(EOS(STATIC_3625), i554) -> f3627_0_divBy_IntArithmetic(EOS(STATIC_3627), i554, i554) :|: TRUE
f3627_0_divBy_IntArithmetic(EOS(STATIC_3627), i554, i554) -> f3631_0_divBy_Store(EOS(STATIC_3631), i554) :|: i554 >= 0
f3631_0_divBy_Store(EOS(STATIC_3631), i554) -> f3632_0_divBy_JMP(EOS(STATIC_3632), i554) :|: TRUE
f3632_0_divBy_JMP(EOS(STATIC_3632), i554) -> f3893_0_divBy_Load(EOS(STATIC_3893), i554) :|: TRUE
f3893_0_divBy_Load(EOS(STATIC_3893), i554) -> f3553_0_divBy_Load(EOS(STATIC_3553), i554) :|: TRUE
f3553_0_divBy_Load(EOS(STATIC_3553), i496) -> f3574_0_divBy_LE(EOS(STATIC_3574), i496, i496) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f3574_0_divBy_LE(EOS(STATIC_3574), i550:0, i550:0) -> f3574_0_divBy_LE'(EOS(STATIC_3574), i550:0, i550:0) :|: i550:0 > 0 && div > -1 && i550:0 > div
f3574_0_divBy_LE'(EOS(STATIC_3574), i550:0, i550:0) -> f3574_0_divBy_LE(EOS(STATIC_3574), div, div) :|: i550:0 > 0 && i550:0 > div && div > -1 && i550:0 - 2 * div < 2 && i550:0 - 2 * div > -2
Filtered constant ground arguments:
   f3574_0_divBy_LE(x1, x2, x3) -> f3574_0_divBy_LE(x2, x3)
   f3574_0_divBy_LE'(x1, x2, x3) -> f3574_0_divBy_LE'(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f3574_0_divBy_LE(x1, x2) -> f3574_0_divBy_LE(x2)
   f3574_0_divBy_LE'(x1, x2) -> f3574_0_divBy_LE'(x2)
Finished conversion. Obtained 2 rules.P rules:
f3574_0_divBy_LE(i550:0) -> f3574_0_divBy_LE'(i550:0) :|: div > -1 && i550:0 > div && i550:0 > 0
f3574_0_divBy_LE'(i550:0) -> f3574_0_divBy_LE(div) :|: i550:0 > div && i550:0 > 0 && div > -1 && i550:0 - 2 * div > -2 && i550:0 - 2 * div < 2

----------------------------------------

(8)
Obligation:
Rules:
f3574_0_divBy_LE(x) -> f3574_0_divBy_LE'(x) :|: x1 > -1 && x > x1 && x > 0
f3574_0_divBy_LE'(x2) -> f3574_0_divBy_LE(x3) :|: x2 > x3 && x2 > 0 && x3 > -1 && x2 - 2 * x3 > -2 && x2 - 2 * x3 < 2

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f3574_0_divBy_LE(x) -> f3574_0_divBy_LE'(x) :|: x1 > -1 && x > x1 && x > 0
f3574_0_divBy_LE'(x2) -> f3574_0_divBy_LE(x3) :|: x2 > x3 && x2 > 0 && x3 > -1 && x2 - 2 * x3 > -2 && x2 - 2 * x3 < 2

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3574_0_divBy_LE(x) -> f3574_0_divBy_LE'(x) :|: x1 > -1 && x > x1 && x > 0
(2) f3574_0_divBy_LE'(x2) -> f3574_0_divBy_LE(x3) :|: x2 > x3 && x2 > 0 && x3 > -1 && x2 - 2 * x3 > -2 && x2 - 2 * x3 < 2

Arcs:
(1) -> (2)
(2) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f3574_0_divBy_LE(x) -> f3574_0_divBy_LE'(x) :|: x1 > -1 && x > x1 && x > 0
(2) f3574_0_divBy_LE'(x2) -> f3574_0_divBy_LE(x3) :|: x2 > x3 && x2 > 0 && x3 > -1 && x2 - 2 * x3 > -2 && x2 - 2 * x3 < 2

Arcs:
(1) -> (2)
(2) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f3574_0_divBy_LE(x:0) -> f3574_0_divBy_LE(x3:0) :|: x:0 - 2 * x3:0 < 2 && x1:0 > -1 && x:0 > x1:0 && x:0 - 2 * x3:0 > -2 && x3:0 > -1 && x:0 > 0 && x:0 > x3:0

----------------------------------------

(15) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f3574_0_divBy_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f3574_0_divBy_LE(x:0) -> f3574_0_divBy_LE(x3:0) :|: x:0 - 2 * x3:0 < 2 && x1:0 > -1 && x:0 > x1:0 && x:0 - 2 * x3:0 > -2 && x3:0 > -1 && x:0 > 0 && x:0 > x3:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f3574_0_divBy_LE(x:0:0) -> f3574_0_divBy_LE(x3:0:0) :|: x:0:0 > 0 && x:0:0 > x3:0:0 && x3:0:0 > -1 && x:0:0 - 2 * x3:0:0 > -2 && x:0:0 > x1:0:0 && x1:0:0 > -1 && x:0:0 - 2 * x3:0:0 < 2

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f3574_0_divBy_LE ] = f3574_0_divBy_LE_1

The following rules are decreasing:
f3574_0_divBy_LE(x:0:0) -> f3574_0_divBy_LE(x3:0:0) :|: x:0:0 > 0 && x:0:0 > x3:0:0 && x3:0:0 > -1 && x:0:0 - 2 * x3:0:0 > -2 && x:0:0 > x1:0:0 && x1:0:0 > -1 && x:0:0 - 2 * x3:0:0 < 2

The following rules are bounded:
f3574_0_divBy_LE(x:0:0) -> f3574_0_divBy_LE(x3:0:0) :|: x:0:0 > 0 && x:0:0 > x3:0:0 && x3:0:0 > -1 && x:0:0 - 2 * x3:0:0 > -2 && x:0:0 > x1:0:0 && x1:0:0 > -1 && x:0:0 - 2 * x3:0:0 < 2


----------------------------------------

(20)
YES
