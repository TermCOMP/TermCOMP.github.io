YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/CbSC2.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 211 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 96 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 71 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 49 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 14 ms]
(18) IntTRS
(19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(20) IntTRS
(21) RankingReductionPairProof [EQUIVALENT, 2 ms]
(22) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Test2 {
    public static void main(String[] args) {
	iter(args.length, args.length % 5, args.length % 4);
    }

    private static void iter(int x, int y, int z) {
	while (x + y + 3 * z >= 0) {
	    if (x > y)
		x--;
	    else if (y > z) {
		x++;
		y -= 2;
	    }
	    else if (y <= z) {
		x = add(x, 1);
		y = add(y, 1);
		z = z - 1;
	    }
	}
    }

    private static int add(int v, int w) {
	return v + w;
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Test2 {
    public static void main(String[] args) {
	iter(args.length, args.length % 5, args.length % 4);
    }

    private static void iter(int x, int y, int z) {
	while (x + y + 3 * z >= 0) {
	    if (x > y)
		x--;
	    else if (y > z) {
		x++;
		y -= 2;
	    }
	    else if (y <= z) {
		x = add(x, 1);
		y = add(y, 1);
		z = z - 1;
	    }
	}
    }

    private static int add(int v, int w) {
	return v + w;
    }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Test2.main([Ljava/lang/String;)V: Graph of 76 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Test2.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 54 IRulesP rules:
f1753_0_iter_Load(EOS(STATIC_1753), i439, i440, i441, i439) -> f1755_0_iter_IntArithmetic(EOS(STATIC_1755), i439, i440, i441, i439, i440) :|: TRUE
f1755_0_iter_IntArithmetic(EOS(STATIC_1755), i439, i440, i441, i439, i440) -> f1759_0_iter_ConstantStackPush(EOS(STATIC_1759), i439, i440, i441, i439 + i440) :|: TRUE
f1759_0_iter_ConstantStackPush(EOS(STATIC_1759), i439, i440, i441, i448) -> f1762_0_iter_Load(EOS(STATIC_1762), i439, i440, i441, i448, 3) :|: TRUE
f1762_0_iter_Load(EOS(STATIC_1762), i439, i440, i441, i448, matching1) -> f1763_0_iter_IntArithmetic(EOS(STATIC_1763), i439, i440, i441, i448, 3, i441) :|: TRUE && matching1 = 3
f1763_0_iter_IntArithmetic(EOS(STATIC_1763), i439, i440, i441, i448, matching1, i441) -> f1764_0_iter_IntArithmetic(EOS(STATIC_1764), i439, i440, i441, i448, 3 * i441) :|: TRUE && matching1 = 3
f1764_0_iter_IntArithmetic(EOS(STATIC_1764), i439, i440, i441, i448, i449) -> f1765_0_iter_LT(EOS(STATIC_1765), i439, i440, i441, i448 + i449) :|: TRUE
f1765_0_iter_LT(EOS(STATIC_1765), i439, i440, i441, i452) -> f1767_0_iter_LT(EOS(STATIC_1767), i439, i440, i441, i452) :|: TRUE
f1767_0_iter_LT(EOS(STATIC_1767), i439, i440, i441, i452) -> f1769_0_iter_Load(EOS(STATIC_1769), i439, i440, i441) :|: i452 >= 0
f1769_0_iter_Load(EOS(STATIC_1769), i439, i440, i441) -> f1792_0_iter_Load(EOS(STATIC_1792), i439, i440, i441, i439) :|: TRUE
f1792_0_iter_Load(EOS(STATIC_1792), i439, i440, i441, i439) -> f1794_0_iter_LE(EOS(STATIC_1794), i439, i440, i441, i439, i440) :|: TRUE
f1794_0_iter_LE(EOS(STATIC_1794), i439, i440, i441, i439, i440) -> f1799_0_iter_LE(EOS(STATIC_1799), i439, i440, i441, i439, i440) :|: i439 <= i440
f1794_0_iter_LE(EOS(STATIC_1794), i439, i440, i441, i439, i440) -> f1800_0_iter_LE(EOS(STATIC_1800), i439, i440, i441, i439, i440) :|: i439 > i440
f1799_0_iter_LE(EOS(STATIC_1799), i439, i440, i441, i439, i440) -> f1802_0_iter_Load(EOS(STATIC_1802), i439, i440, i441) :|: i439 <= i440
f1802_0_iter_Load(EOS(STATIC_1802), i439, i440, i441) -> f1832_0_iter_Load(EOS(STATIC_1832), i439, i440, i441, i440) :|: TRUE
f1832_0_iter_Load(EOS(STATIC_1832), i439, i440, i441, i440) -> f1834_0_iter_LE(EOS(STATIC_1834), i439, i440, i441, i440, i441) :|: TRUE
f1834_0_iter_LE(EOS(STATIC_1834), i439, i440, i441, i440, i441) -> f1850_0_iter_LE(EOS(STATIC_1850), i439, i440, i441, i440, i441) :|: i440 <= i441
f1834_0_iter_LE(EOS(STATIC_1834), i439, i440, i441, i440, i441) -> f1851_0_iter_LE(EOS(STATIC_1851), i439, i440, i441, i440, i441) :|: i440 > i441
f1850_0_iter_LE(EOS(STATIC_1850), i439, i440, i441, i440, i441) -> f1853_0_iter_Load(EOS(STATIC_1853), i439, i440, i441) :|: i440 <= i441
f1853_0_iter_Load(EOS(STATIC_1853), i439, i440, i441) -> f1856_0_iter_Load(EOS(STATIC_1856), i439, i440, i441, i440) :|: TRUE
f1856_0_iter_Load(EOS(STATIC_1856), i439, i440, i441, i440) -> f1861_0_iter_GT(EOS(STATIC_1861), i439, i440, i441, i440, i441) :|: TRUE
f1861_0_iter_GT(EOS(STATIC_1861), i439, i440, i441, i440, i441) -> f1870_0_iter_GT(EOS(STATIC_1870), i439, i440, i441, i440, i441) :|: i440 <= i441
f1870_0_iter_GT(EOS(STATIC_1870), i439, i440, i441, i440, i441) -> f1933_0_iter_Load(EOS(STATIC_1933), i439, i440, i441) :|: i440 <= i441
f1933_0_iter_Load(EOS(STATIC_1933), i439, i440, i441) -> f1934_0_iter_ConstantStackPush(EOS(STATIC_1934), i440, i441, i439) :|: TRUE
f1934_0_iter_ConstantStackPush(EOS(STATIC_1934), i440, i441, i439) -> f1937_0_iter_InvokeMethod(EOS(STATIC_1937), i440, i441, i439, 1) :|: TRUE
f1937_0_iter_InvokeMethod(EOS(STATIC_1937), i440, i441, i439, matching1) -> f1940_0_add_Load(EOS(STATIC_1940), i440, i441, i439, 1) :|: TRUE && matching1 = 1
f1940_0_add_Load(EOS(STATIC_1940), i440, i441, i439, matching1) -> f1942_0_add_Load(EOS(STATIC_1942), i440, i441, 1, i439) :|: TRUE && matching1 = 1
f1942_0_add_Load(EOS(STATIC_1942), i440, i441, matching1, i439) -> f1944_0_add_IntArithmetic(EOS(STATIC_1944), i440, i441, i439, 1) :|: TRUE && matching1 = 1
f1944_0_add_IntArithmetic(EOS(STATIC_1944), i440, i441, i439, matching1) -> f1945_0_add_Return(EOS(STATIC_1945), i440, i441, i439 + 1) :|: TRUE && matching1 = 1
f1945_0_add_Return(EOS(STATIC_1945), i440, i441, i491) -> f1946_0_iter_Store(EOS(STATIC_1946), i440, i441, i491) :|: TRUE
f1946_0_iter_Store(EOS(STATIC_1946), i440, i441, i491) -> f1949_0_iter_Load(EOS(STATIC_1949), i491, i440, i441) :|: TRUE
f1949_0_iter_Load(EOS(STATIC_1949), i491, i440, i441) -> f1950_0_iter_ConstantStackPush(EOS(STATIC_1950), i491, i441, i440) :|: TRUE
f1950_0_iter_ConstantStackPush(EOS(STATIC_1950), i491, i441, i440) -> f1951_0_iter_InvokeMethod(EOS(STATIC_1951), i491, i441, i440, 1) :|: TRUE
f1951_0_iter_InvokeMethod(EOS(STATIC_1951), i491, i441, i440, matching1) -> f1952_0_add_Load(EOS(STATIC_1952), i491, i441, i440, 1) :|: TRUE && matching1 = 1
f1952_0_add_Load(EOS(STATIC_1952), i491, i441, i440, matching1) -> f1953_0_add_Load(EOS(STATIC_1953), i491, i441, 1, i440) :|: TRUE && matching1 = 1
f1953_0_add_Load(EOS(STATIC_1953), i491, i441, matching1, i440) -> f1954_0_add_IntArithmetic(EOS(STATIC_1954), i491, i441, i440, 1) :|: TRUE && matching1 = 1
f1954_0_add_IntArithmetic(EOS(STATIC_1954), i491, i441, i440, matching1) -> f1956_0_add_Return(EOS(STATIC_1956), i491, i441, i440 + 1) :|: TRUE && matching1 = 1
f1956_0_add_Return(EOS(STATIC_1956), i491, i441, i495) -> f1957_0_iter_Store(EOS(STATIC_1957), i491, i441, i495) :|: TRUE
f1957_0_iter_Store(EOS(STATIC_1957), i491, i441, i495) -> f1958_0_iter_Load(EOS(STATIC_1958), i491, i495, i441) :|: TRUE
f1958_0_iter_Load(EOS(STATIC_1958), i491, i495, i441) -> f1959_0_iter_ConstantStackPush(EOS(STATIC_1959), i491, i495, i441) :|: TRUE
f1959_0_iter_ConstantStackPush(EOS(STATIC_1959), i491, i495, i441) -> f1962_0_iter_IntArithmetic(EOS(STATIC_1962), i491, i495, i441, 1) :|: TRUE
f1962_0_iter_IntArithmetic(EOS(STATIC_1962), i491, i495, i441, matching1) -> f1964_0_iter_Store(EOS(STATIC_1964), i491, i495, i441 - 1) :|: TRUE && matching1 = 1
f1964_0_iter_Store(EOS(STATIC_1964), i491, i495, i498) -> f1965_0_iter_JMP(EOS(STATIC_1965), i491, i495, i498) :|: TRUE
f1965_0_iter_JMP(EOS(STATIC_1965), i491, i495, i498) -> f1981_0_iter_Load(EOS(STATIC_1981), i491, i495, i498) :|: TRUE
f1981_0_iter_Load(EOS(STATIC_1981), i491, i495, i498) -> f1744_0_iter_Load(EOS(STATIC_1744), i491, i495, i498) :|: TRUE
f1744_0_iter_Load(EOS(STATIC_1744), i439, i440, i441) -> f1753_0_iter_Load(EOS(STATIC_1753), i439, i440, i441, i439) :|: TRUE
f1851_0_iter_LE(EOS(STATIC_1851), i439, i440, i441, i440, i441) -> f1854_0_iter_Inc(EOS(STATIC_1854), i439, i440, i441) :|: i440 > i441
f1854_0_iter_Inc(EOS(STATIC_1854), i439, i440, i441) -> f1859_0_iter_Inc(EOS(STATIC_1859), i439 + 1, i440, i441) :|: TRUE
f1859_0_iter_Inc(EOS(STATIC_1859), i471, i440, i441) -> f1864_0_iter_JMP(EOS(STATIC_1864), i471, i440 + -2, i441) :|: TRUE
f1864_0_iter_JMP(EOS(STATIC_1864), i471, i473, i441) -> f1899_0_iter_Load(EOS(STATIC_1899), i471, i473, i441) :|: TRUE
f1899_0_iter_Load(EOS(STATIC_1899), i471, i473, i441) -> f1744_0_iter_Load(EOS(STATIC_1744), i471, i473, i441) :|: TRUE
f1800_0_iter_LE(EOS(STATIC_1800), i439, i440, i441, i439, i440) -> f1831_0_iter_Inc(EOS(STATIC_1831), i439, i440, i441) :|: i439 > i440
f1831_0_iter_Inc(EOS(STATIC_1831), i439, i440, i441) -> f1833_0_iter_JMP(EOS(STATIC_1833), i439 + -1, i440, i441) :|: TRUE
f1833_0_iter_JMP(EOS(STATIC_1833), i465, i440, i441) -> f1847_0_iter_Load(EOS(STATIC_1847), i465, i440, i441) :|: TRUE
f1847_0_iter_Load(EOS(STATIC_1847), i465, i440, i441) -> f1744_0_iter_Load(EOS(STATIC_1744), i465, i440, i441) :|: TRUE
Combined rules. Obtained 3 IRulesP rules:
f1753_0_iter_Load(EOS(STATIC_1753), i439:0, i440:0, i441:0, i439:0) -> f1753_0_iter_Load(EOS(STATIC_1753), i439:0 + 1, i440:0 + 1, i441:0 - 1, i439:0 + 1) :|: i439:0 + i440:0 + 3 * i441:0 >= 0 && i440:0 >= i439:0 && i441:0 >= i440:0
f1753_0_iter_Load(EOS(STATIC_1753), i439:0, i440:0, i441:0, i439:0) -> f1753_0_iter_Load(EOS(STATIC_1753), i439:0 - 1, i440:0, i441:0, i439:0 - 1) :|: i439:0 + i440:0 + 3 * i441:0 >= 0 && i440:0 < i439:0
f1753_0_iter_Load(EOS(STATIC_1753), i439:0, i440:0, i441:0, i439:0) -> f1753_0_iter_Load(EOS(STATIC_1753), i439:0 + 1, i440:0 - 2, i441:0, i439:0 + 1) :|: i439:0 + i440:0 + 3 * i441:0 >= 0 && i440:0 >= i439:0 && i441:0 < i440:0
Filtered constant ground arguments:
   f1753_0_iter_Load(x1, x2, x3, x4, x5) -> f1753_0_iter_Load(x2, x3, x4, x5)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f1753_0_iter_Load(x1, x2, x3, x4) -> f1753_0_iter_Load(x2, x3, x4)
Finished conversion. Obtained 3 rules.P rules:
f1753_0_iter_Load(i440:0, i441:0, i439:0) -> f1753_0_iter_Load(i440:0 + 1, i441:0 - 1, i439:0 + 1) :|: i440:0 >= i439:0 && i441:0 >= i440:0 && i439:0 + i440:0 + 3 * i441:0 >= 0
f1753_0_iter_Load(i440:0, i441:0, i439:0) -> f1753_0_iter_Load(i440:0, i441:0, i439:0 - 1) :|: i439:0 + i440:0 + 3 * i441:0 >= 0 && i440:0 < i439:0
f1753_0_iter_Load(i440:0, i441:0, i439:0) -> f1753_0_iter_Load(i440:0 - 2, i441:0, i439:0 + 1) :|: i440:0 >= i439:0 && i441:0 < i440:0 && i439:0 + i440:0 + 3 * i441:0 >= 0

----------------------------------------

(8)
Obligation:
Rules:
f1753_0_iter_Load(i440:0, i441:0, i439:0) -> f1753_0_iter_Load(i440:0 + 1, i441:0 - 1, i439:0 + 1) :|: i440:0 >= i439:0 && i441:0 >= i440:0 && i439:0 + i440:0 + 3 * i441:0 >= 0
f1753_0_iter_Load(x, x1, x2) -> f1753_0_iter_Load(x, x1, x2 - 1) :|: x2 + x + 3 * x1 >= 0 && x < x2
f1753_0_iter_Load(x3, x4, x5) -> f1753_0_iter_Load(x3 - 2, x4, x5 + 1) :|: x3 >= x5 && x4 < x3 && x5 + x3 + 3 * x4 >= 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f1753_0_iter_Load(i440:0, i441:0, i439:0) -> f1753_0_iter_Load(arith, arith1, arith2) :|: i440:0 >= i439:0 && i441:0 >= i440:0 && i439:0 + i440:0 + 3 * i441:0 >= 0 && arith = i440:0 + 1 && arith1 = i441:0 - 1 && arith2 = i439:0 + 1
f1753_0_iter_Load(x6, x7, x8) -> f1753_0_iter_Load(x6, x7, x9) :|: x8 + x6 + 3 * x7 >= 0 && x6 < x8 && x9 = x8 - 1
f1753_0_iter_Load(x10, x11, x12) -> f1753_0_iter_Load(x13, x11, x14) :|: x10 >= x12 && x11 < x10 && x12 + x10 + 3 * x11 >= 0 && x13 = x10 - 2 && x14 = x12 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f1753_0_iter_Load(i440:0, i441:0, i439:0) -> f1753_0_iter_Load(arith, arith1, arith2) :|: i440:0 >= i439:0 && i441:0 >= i440:0 && i439:0 + i440:0 + 3 * i441:0 >= 0 && arith = i440:0 + 1 && arith1 = i441:0 - 1 && arith2 = i439:0 + 1
(2) f1753_0_iter_Load(x6, x7, x8) -> f1753_0_iter_Load(x6, x7, x9) :|: x8 + x6 + 3 * x7 >= 0 && x6 < x8 && x9 = x8 - 1
(3) f1753_0_iter_Load(x10, x11, x12) -> f1753_0_iter_Load(x13, x11, x14) :|: x10 >= x12 && x11 < x10 && x12 + x10 + 3 * x11 >= 0 && x13 = x10 - 2 && x14 = x12 + 1

Arcs:
(1) -> (1), (3)
(2) -> (1), (2), (3)
(3) -> (1), (2), (3)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f1753_0_iter_Load(i440:0, i441:0, i439:0) -> f1753_0_iter_Load(arith, arith1, arith2) :|: i440:0 >= i439:0 && i441:0 >= i440:0 && i439:0 + i440:0 + 3 * i441:0 >= 0 && arith = i440:0 + 1 && arith1 = i441:0 - 1 && arith2 = i439:0 + 1
(2) f1753_0_iter_Load(x6, x7, x8) -> f1753_0_iter_Load(x6, x7, x9) :|: x8 + x6 + 3 * x7 >= 0 && x6 < x8 && x9 = x8 - 1
(3) f1753_0_iter_Load(x10, x11, x12) -> f1753_0_iter_Load(x13, x11, x14) :|: x10 >= x12 && x11 < x10 && x12 + x10 + 3 * x11 >= 0 && x13 = x10 - 2 && x14 = x12 + 1

Arcs:
(1) -> (1), (3)
(2) -> (1), (2), (3)
(3) -> (1), (2), (3)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f1753_0_iter_Load(i440:0:0, i441:0:0, i439:0:0) -> f1753_0_iter_Load(i440:0:0 + 1, i441:0:0 - 1, i439:0:0 + 1) :|: i440:0:0 >= i439:0:0 && i441:0:0 >= i440:0:0 && i439:0:0 + i440:0:0 + 3 * i441:0:0 >= 0
f1753_0_iter_Load(x6:0, x7:0, x8:0) -> f1753_0_iter_Load(x6:0, x7:0, x8:0 - 1) :|: x8:0 + x6:0 + 3 * x7:0 >= 0 && x8:0 > x6:0
f1753_0_iter_Load(x10:0, x11:0, x12:0) -> f1753_0_iter_Load(x10:0 - 2, x11:0, x12:0 + 1) :|: x12:0 <= x10:0 && x11:0 < x10:0 && x12:0 + x10:0 + 3 * x11:0 >= 0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f1753_0_iter_Load(INTEGER, INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f1753_0_iter_Load(i440:0:0, i441:0:0, i439:0:0) -> f1753_0_iter_Load(c, c1, c2) :|: c2 = i439:0:0 + 1 && (c1 = i441:0:0 - 1 && c = i440:0:0 + 1) && (i440:0:0 >= i439:0:0 && i441:0:0 >= i440:0:0 && i439:0:0 + i440:0:0 + 3 * i441:0:0 >= 0)
f1753_0_iter_Load(x6:0, x7:0, x8:0) -> f1753_0_iter_Load(x6:0, x7:0, c3) :|: c3 = x8:0 - 1 && (x8:0 + x6:0 + 3 * x7:0 >= 0 && x8:0 > x6:0)
f1753_0_iter_Load(x10:0, x11:0, x12:0) -> f1753_0_iter_Load(c4, x11:0, c5) :|: c5 = x12:0 + 1 && c4 = x10:0 - 2 && (x12:0 <= x10:0 && x11:0 < x10:0 && x12:0 + x10:0 + 3 * x11:0 >= 0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f1753_0_iter_Load(x, x1, x2)] = x + 3*x1 + x2

The following rules are decreasing:
f1753_0_iter_Load(i440:0:0, i441:0:0, i439:0:0) -> f1753_0_iter_Load(c, c1, c2) :|: c2 = i439:0:0 + 1 && (c1 = i441:0:0 - 1 && c = i440:0:0 + 1) && (i440:0:0 >= i439:0:0 && i441:0:0 >= i440:0:0 && i439:0:0 + i440:0:0 + 3 * i441:0:0 >= 0)
f1753_0_iter_Load(x6:0, x7:0, x8:0) -> f1753_0_iter_Load(x6:0, x7:0, c3) :|: c3 = x8:0 - 1 && (x8:0 + x6:0 + 3 * x7:0 >= 0 && x8:0 > x6:0)
f1753_0_iter_Load(x10:0, x11:0, x12:0) -> f1753_0_iter_Load(c4, x11:0, c5) :|: c5 = x12:0 + 1 && c4 = x10:0 - 2 && (x12:0 <= x10:0 && x11:0 < x10:0 && x12:0 + x10:0 + 3 * x11:0 >= 0)
The following rules are bounded:
f1753_0_iter_Load(i440:0:0, i441:0:0, i439:0:0) -> f1753_0_iter_Load(c, c1, c2) :|: c2 = i439:0:0 + 1 && (c1 = i441:0:0 - 1 && c = i440:0:0 + 1) && (i440:0:0 >= i439:0:0 && i441:0:0 >= i440:0:0 && i439:0:0 + i440:0:0 + 3 * i441:0:0 >= 0)

----------------------------------------

(18)
Obligation:
Rules:
f1753_0_iter_Load(x6:0, x7:0, x8:0) -> f1753_0_iter_Load(x6:0, x7:0, c3) :|: c3 = x8:0 - 1 && (x8:0 + x6:0 + 3 * x7:0 >= 0 && x8:0 > x6:0)
f1753_0_iter_Load(x10:0, x11:0, x12:0) -> f1753_0_iter_Load(c4, x11:0, c5) :|: c5 = x12:0 + 1 && c4 = x10:0 - 2 && (x12:0 <= x10:0 && x11:0 < x10:0 && x12:0 + x10:0 + 3 * x11:0 >= 0)

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f1753_0_iter_Load(x, x1, x2)] = -1 + x - x1

The following rules are decreasing:
f1753_0_iter_Load(x10:0, x11:0, x12:0) -> f1753_0_iter_Load(c4, x11:0, c5) :|: c5 = x12:0 + 1 && c4 = x10:0 - 2 && (x12:0 <= x10:0 && x11:0 < x10:0 && x12:0 + x10:0 + 3 * x11:0 >= 0)
The following rules are bounded:
f1753_0_iter_Load(x10:0, x11:0, x12:0) -> f1753_0_iter_Load(c4, x11:0, c5) :|: c5 = x12:0 + 1 && c4 = x10:0 - 2 && (x12:0 <= x10:0 && x11:0 < x10:0 && x12:0 + x10:0 + 3 * x11:0 >= 0)

----------------------------------------

(20)
Obligation:
Rules:
f1753_0_iter_Load(x6:0, x7:0, x8:0) -> f1753_0_iter_Load(x6:0, x7:0, c3) :|: c3 = x8:0 - 1 && (x8:0 + x6:0 + 3 * x7:0 >= 0 && x8:0 > x6:0)

----------------------------------------

(21) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f1753_0_iter_Load ] = f1753_0_iter_Load_3 + -1*f1753_0_iter_Load_1

The following rules are decreasing:
f1753_0_iter_Load(x6:0, x7:0, x8:0) -> f1753_0_iter_Load(x6:0, x7:0, c3) :|: c3 = x8:0 - 1 && (x8:0 + x6:0 + 3 * x7:0 >= 0 && x8:0 > x6:0)

The following rules are bounded:
f1753_0_iter_Load(x6:0, x7:0, x8:0) -> f1753_0_iter_Load(x6:0, x7:0, c3) :|: c3 = x8:0 - 1 && (x8:0 + x6:0 + 3 * x7:0 >= 0 && x8:0 > x6:0)


----------------------------------------

(22)
YES
