NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/GevZO.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 227 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.factorial;

public class Factorial {
	public static int factorial(int j) {
		int i = 1;
		int fac = 1;
		while (fac != j) {
			fac = fac * i;
			i++;
		}
		return (i-1);
	}
}


package simple.factorial;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Factorial.factorial(args.length);
	}

}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.factorial;

public class Factorial {
	public static int factorial(int j) {
		int i = 1;
		int fac = 1;
		while (fac != j) {
			fac = fac * i;
			i++;
		}
		return (i-1);
	}
}


package simple.factorial;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Factorial.factorial(args.length);
	}

}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<simple.factorial.Main.main||0: load ADDR args||args: a18|| ->
	a18([java.lang.String...]): length 0 -->{java.lang.Object...}
YES:  (JL1)
1:<simple.factorial.Main.main||1: arraylength|| - ||a18>
	a18([java.lang.String...]): length 0 -->{java.lang.Object...}
YES:  (JL1)
2:<simple.factorial.Main.main||2: simple.factorial.Factorial.factorial(I)I|| - ||0>
YES:  (JL1)
3:<simple.factorial.Factorial.factorial||0: push 1||j: 0|| ->
<simple.factorial.Main.main||2: simple.factorial.Factorial.factorial|| - || ->
YES:  (JL1)
4:<simple.factorial.Factorial.factorial||1: store INT to i||j: 0||1>
<simple.factorial.Main.main||2: simple.factorial.Factorial.factorial|| - || ->
YES:  (JL1)
5:<simple.factorial.Factorial.factorial||2: push 1||j: 0, i: 1|| ->
<simple.factorial.Main.main||2: simple.factorial.Factorial.factorial|| - || ->
YES:  (JL1)
6:<simple.factorial.Factorial.factorial||3: store INT to fac||j: 0, i: 1||1>
<simple.factorial.Main.main||2: simple.factorial.Factorial.factorial|| - || ->
YES:  (JL1)
7:<simple.factorial.Factorial.factorial||4: load INT fac||j: 0, i: 1, fac: 1|| ->
<simple.factorial.Main.main||2: simple.factorial.Factorial.factorial|| - || ->
YES:  (JL1)
Start state of loop: 

<simple.factorial.Factorial.factorial||4: load INT fac||j: i27, i: i39, fac: i40|| ->
[a7(lv_0_0)]
<simple.factorial.Main.main||2: simple.factorial.Factorial.factorial|| - || ->
	i27: [0,+inf)
	i39: [1,+inf)(l3)
	i40: [1,+inf)(l2)
	a7([java.lang.String...]): length i27 -->{java.lang.Object...}
YES:  (JL1)


In the loop head node, references [i40, i27, i39] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((0 <= initial_i27 and 1 <= initial_i39 and 1 <= initial_i40) and ((((path1_i44 = (path1_i40 * path1_i39) and path1_i45 = (path1_i39 + 1) and path1_i27 = res_i27 and path1_i45 = res_i39 and path1_i44 = res_i40 and path1_i27 = initial_i27 and path1_i39 = initial_i39 and path1_i40 = initial_i40) and (path1_i40 != path1_i27 and path1_i40 > path1_i27)) or ((path1_i44 = (path1_i40 * path1_i39) and path1_i45 = (path1_i39 + 1) and path1_i27 = res_i27 and path1_i45 = res_i39 and path1_i44 = res_i40 and path1_i27 = initial_i27 and path1_i39 = initial_i39 and path1_i40 = initial_i40) and (path1_i40 != path1_i27 and path1_i40 > path1_i27))) and (((res1_i44 = (res1_i40 * res1_i39) and res1_i45 = (res1_i39 + 1) and res_i27 = res1_i27 and res_i39 = res1_i39 and res_i40 = res1_i40) and !(res1_i40 != res1_i27 and res1_i40 > res1_i27)) and ((res1_i44 = (res1_i40 * res1_i39) and res1_i45 = (res1_i39 + 1) and res_i27 = res1_i27 and res_i39 = res1_i39 and res_i40 = res1_i40) and !(res1_i40 != res1_i27 and res1_i40 > res1_i27)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
