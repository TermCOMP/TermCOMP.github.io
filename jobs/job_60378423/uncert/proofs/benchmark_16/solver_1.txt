YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/4gJd6.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 139 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 61 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 18 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 24 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(18) IntTRS
(19) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class GCD4 {
  public static int mod(int a, int b) {
    while(a>=b && b > 0) {
      a -= b;
    }
    return a;
  }

  public static int gcd(int a, int b) {
    int tmp;
    while(b > 0 && a > 0) {
      tmp = b;
      b = mod(a, b);
      a = tmp;
    }
    return a;
  }

  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    gcd(x, y);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class GCD4 {
  public static int mod(int a, int b) {
    while(a>=b && b > 0) {
      a -= b;
    }
    return a;
  }

  public static int gcd(int a, int b) {
    int tmp;
    while(b > 0 && a > 0) {
      tmp = b;
      b = mod(a, b);
      a = tmp;
    }
    return a;
  }

  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    gcd(x, y);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
GCD4.main([Ljava/lang/String;)V: Graph of 211 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: GCD4.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 33 IRulesP rules:
f451_0_gcd_LE(EOS(STATIC_451), i52, i59, i59) -> f453_0_gcd_LE(EOS(STATIC_453), i52, i59, i59) :|: TRUE
f453_0_gcd_LE(EOS(STATIC_453), i52, i59, i59) -> f455_0_gcd_Load(EOS(STATIC_455), i52, i59) :|: i59 > 0
f455_0_gcd_Load(EOS(STATIC_455), i52, i59) -> f457_0_gcd_LE(EOS(STATIC_457), i52, i59, i52) :|: TRUE
f457_0_gcd_LE(EOS(STATIC_457), i60, i59, i60) -> f460_0_gcd_LE(EOS(STATIC_460), i60, i59, i60) :|: TRUE
f460_0_gcd_LE(EOS(STATIC_460), i60, i59, i60) -> f464_0_gcd_Load(EOS(STATIC_464), i60, i59) :|: i60 > 0
f464_0_gcd_Load(EOS(STATIC_464), i60, i59) -> f470_0_gcd_Store(EOS(STATIC_470), i60, i59, i59) :|: TRUE
f470_0_gcd_Store(EOS(STATIC_470), i60, i59, i59) -> f472_0_gcd_Load(EOS(STATIC_472), i60, i59, i59) :|: TRUE
f472_0_gcd_Load(EOS(STATIC_472), i60, i59, i59) -> f476_0_gcd_Load(EOS(STATIC_476), i59, i59, i60) :|: TRUE
f476_0_gcd_Load(EOS(STATIC_476), i59, i59, i60) -> f477_0_gcd_InvokeMethod(EOS(STATIC_477), i59, i60, i59) :|: TRUE
f477_0_gcd_InvokeMethod(EOS(STATIC_477), i59, i60, i59) -> f478_0_mod_Load(EOS(STATIC_478), i59, i60, i59) :|: TRUE
f478_0_mod_Load(EOS(STATIC_478), i59, i60, i59) -> f539_0_mod_Load(EOS(STATIC_539), i59, i60, i59) :|: TRUE
f539_0_mod_Load(EOS(STATIC_539), i59, i68, i59) -> f543_0_mod_Load(EOS(STATIC_543), i59, i68, i59, i68) :|: TRUE
f543_0_mod_Load(EOS(STATIC_543), i59, i68, i59, i68) -> f544_0_mod_LT(EOS(STATIC_544), i59, i68, i59, i68, i59) :|: TRUE
f544_0_mod_LT(EOS(STATIC_544), i59, i68, i59, i68, i59) -> f550_0_mod_LT(EOS(STATIC_550), i59, i68, i59, i68, i59) :|: i68 < i59
f544_0_mod_LT(EOS(STATIC_544), i59, i68, i59, i68, i59) -> f551_0_mod_LT(EOS(STATIC_551), i59, i68, i59, i68, i59) :|: i68 >= i59
f550_0_mod_LT(EOS(STATIC_550), i59, i68, i59, i68, i59) -> f552_0_mod_Load(EOS(STATIC_552), i59, i68) :|: i68 < i59
f552_0_mod_Load(EOS(STATIC_552), i59, i68) -> f554_0_mod_Return(EOS(STATIC_554), i59, i68) :|: TRUE
f554_0_mod_Return(EOS(STATIC_554), i59, i68) -> f558_0_gcd_Store(EOS(STATIC_558), i59, i68) :|: TRUE
f558_0_gcd_Store(EOS(STATIC_558), i59, i68) -> f563_0_gcd_Load(EOS(STATIC_563), i68, i59) :|: TRUE
f563_0_gcd_Load(EOS(STATIC_563), i68, i59) -> f566_0_gcd_Store(EOS(STATIC_566), i68, i59) :|: TRUE
f566_0_gcd_Store(EOS(STATIC_566), i68, i59) -> f568_0_gcd_JMP(EOS(STATIC_568), i59, i68) :|: TRUE
f568_0_gcd_JMP(EOS(STATIC_568), i59, i68) -> f580_0_gcd_Load(EOS(STATIC_580), i59, i68) :|: TRUE
f580_0_gcd_Load(EOS(STATIC_580), i59, i68) -> f450_0_gcd_Load(EOS(STATIC_450), i59, i68) :|: TRUE
f450_0_gcd_Load(EOS(STATIC_450), i52, i53) -> f451_0_gcd_LE(EOS(STATIC_451), i52, i53, i53) :|: TRUE
f551_0_mod_LT(EOS(STATIC_551), i59, i68, i59, i68, i59) -> f553_0_mod_Load(EOS(STATIC_553), i59, i68, i59) :|: i68 >= i59
f553_0_mod_Load(EOS(STATIC_553), i59, i68, i59) -> f556_0_mod_LE(EOS(STATIC_556), i59, i68, i59, i59) :|: TRUE
f556_0_mod_LE(EOS(STATIC_556), i59, i68, i59, i59) -> f561_0_mod_Load(EOS(STATIC_561), i59, i68, i59) :|: i59 > 0
f561_0_mod_Load(EOS(STATIC_561), i59, i68, i59) -> f565_0_mod_Load(EOS(STATIC_565), i59, i59, i68) :|: TRUE
f565_0_mod_Load(EOS(STATIC_565), i59, i59, i68) -> f567_0_mod_IntArithmetic(EOS(STATIC_567), i59, i59, i68, i59) :|: TRUE
f567_0_mod_IntArithmetic(EOS(STATIC_567), i59, i59, i68, i59) -> f572_0_mod_Store(EOS(STATIC_572), i59, i59, i68 - i59) :|: i68 > 0 && i59 > 0
f572_0_mod_Store(EOS(STATIC_572), i59, i59, i72) -> f581_0_mod_JMP(EOS(STATIC_581), i59, i72, i59) :|: TRUE
f581_0_mod_JMP(EOS(STATIC_581), i59, i72, i59) -> f583_0_mod_Load(EOS(STATIC_583), i59, i72, i59) :|: TRUE
f583_0_mod_Load(EOS(STATIC_583), i59, i72, i59) -> f539_0_mod_Load(EOS(STATIC_539), i59, i72, i59) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f544_0_mod_LT(EOS(STATIC_544), i59:0, i68:0, i59:0, i68:0, i59:0) -> f544_0_mod_LT(EOS(STATIC_544), i68:0, i59:0, i68:0, i59:0, i68:0) :|: i68:0 > 0 && i59:0 > 0 && i68:0 < i59:0
f544_0_mod_LT(EOS(STATIC_544), i59:0, i68:0, i59:0, i68:0, i59:0) -> f544_0_mod_LT(EOS(STATIC_544), i59:0, i68:0 - i59:0, i59:0, i68:0 - i59:0, i59:0) :|: i68:0 >= i59:0 && i59:0 > 0 && i68:0 > 0
Filtered constant ground arguments:
   f544_0_mod_LT(x1, x2, x3, x4, x5, x6) -> f544_0_mod_LT(x2, x3, x4, x5, x6)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f544_0_mod_LT(x1, x2, x3, x4, x5) -> f544_0_mod_LT(x4, x5)
Finished conversion. Obtained 2 rules.P rules:
f544_0_mod_LT(i68:0, i59:0) -> f544_0_mod_LT(i59:0, i68:0) :|: i59:0 > 0 && i68:0 < i59:0 && i68:0 > 0
f544_0_mod_LT(i68:0, i59:0) -> f544_0_mod_LT(i68:0 - i59:0, i59:0) :|: i59:0 > 0 && i68:0 > 0 && i68:0 >= i59:0

----------------------------------------

(8)
Obligation:
Rules:
f544_0_mod_LT(i68:0, i59:0) -> f544_0_mod_LT(i59:0, i68:0) :|: i59:0 > 0 && i68:0 < i59:0 && i68:0 > 0
f544_0_mod_LT(x, x1) -> f544_0_mod_LT(x - x1, x1) :|: x1 > 0 && x > 0 && x >= x1

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f544_0_mod_LT(i68:0, i59:0) -> f544_0_mod_LT(i59:0, i68:0) :|: i59:0 > 0 && i68:0 < i59:0 && i68:0 > 0
f544_0_mod_LT(x, x1) -> f544_0_mod_LT(arith, x1) :|: x1 > 0 && x > 0 && x >= x1 && arith = x - x1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f544_0_mod_LT(i68:0, i59:0) -> f544_0_mod_LT(i59:0, i68:0) :|: i59:0 > 0 && i68:0 < i59:0 && i68:0 > 0
(2) f544_0_mod_LT(x, x1) -> f544_0_mod_LT(arith, x1) :|: x1 > 0 && x > 0 && x >= x1 && arith = x - x1

Arcs:
(1) -> (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f544_0_mod_LT(i68:0, i59:0) -> f544_0_mod_LT(i59:0, i68:0) :|: i59:0 > 0 && i68:0 < i59:0 && i68:0 > 0
(2) f544_0_mod_LT(x, x1) -> f544_0_mod_LT(arith, x1) :|: x1 > 0 && x > 0 && x >= x1 && arith = x - x1

Arcs:
(1) -> (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f544_0_mod_LT(i68:0:0, i59:0:0) -> f544_0_mod_LT(i59:0:0, i68:0:0) :|: i59:0:0 > 0 && i68:0:0 < i59:0:0 && i68:0:0 > 0
f544_0_mod_LT(x:0, x1:0) -> f544_0_mod_LT(x:0 - x1:0, x1:0) :|: x1:0 > 0 && x:0 > 0 && x:0 >= x1:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f544_0_mod_LT(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f544_0_mod_LT(i68:0:0, i59:0:0) -> f544_0_mod_LT(i59:0:0, i68:0:0) :|: i59:0:0 > 0 && i68:0:0 < i59:0:0 && i68:0:0 > 0
f544_0_mod_LT(x:0, x1:0) -> f544_0_mod_LT(c, x1:0) :|: c = x:0 - x1:0 && (x1:0 > 0 && x:0 > 0 && x:0 >= x1:0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f544_0_mod_LT(x, x1)] = x1

The following rules are decreasing:
f544_0_mod_LT(i68:0:0, i59:0:0) -> f544_0_mod_LT(i59:0:0, i68:0:0) :|: i59:0:0 > 0 && i68:0:0 < i59:0:0 && i68:0:0 > 0
The following rules are bounded:
f544_0_mod_LT(i68:0:0, i59:0:0) -> f544_0_mod_LT(i59:0:0, i68:0:0) :|: i59:0:0 > 0 && i68:0:0 < i59:0:0 && i68:0:0 > 0
f544_0_mod_LT(x:0, x1:0) -> f544_0_mod_LT(c, x1:0) :|: c = x:0 - x1:0 && (x1:0 > 0 && x:0 > 0 && x:0 >= x1:0)

----------------------------------------

(18)
Obligation:
Rules:
f544_0_mod_LT(x:0, x1:0) -> f544_0_mod_LT(c, x1:0) :|: c = x:0 - x1:0 && (x1:0 > 0 && x:0 > 0 && x:0 >= x1:0)

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f544_0_mod_LT(x, x1)] = x

The following rules are decreasing:
f544_0_mod_LT(x:0, x1:0) -> f544_0_mod_LT(c, x1:0) :|: c = x:0 - x1:0 && (x1:0 > 0 && x:0 > 0 && x:0 >= x1:0)
The following rules are bounded:
f544_0_mod_LT(x:0, x1:0) -> f544_0_mod_LT(c, x1:0) :|: c = x:0 - x1:0 && (x1:0 > 0 && x:0 > 0 && x:0 >= x1:0)

----------------------------------------

(20)
YES
