YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/EsRpv.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 161 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) JBCTerminationSCC
        (8) SCCToIRSProof [SOUND, 8 ms]
        (9) IRSwT
        (10) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (11) IRSwT
        (12) IRSwTTerminationDigraphProof [EQUIVALENT, 4 ms]
        (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) TempFilterProof [SOUND, 4 ms]
        (17) IntTRS
        (18) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) JBCTerminationSCC
        (21) SCCToIRSProof [SOUND, 13 ms]
        (22) IRSwT
        (23) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (24) IRSwT
        (25) IRSwTTerminationDigraphProof [EQUIVALENT, 4 ms]
        (26) IRSwT
        (27) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (28) IRSwT
        (29) TempFilterProof [SOUND, 3 ms]
        (30) IntTRS
        (31) RankingReductionPairProof [EQUIVALENT, 1 ms]
        (32) YES
    (33) JBCTerminationSCC
        (34) SCCToIRSProof [SOUND, 7 ms]
        (35) IRSwT
        (36) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (37) IRSwT
        (38) IRSwTTerminationDigraphProof [EQUIVALENT, 3 ms]
        (39) IRSwT
        (40) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (41) IRSwT
        (42) TempFilterProof [SOUND, 3 ms]
        (43) IntTRS
        (44) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (45) YES
    (46) JBCTerminationSCC
        (47) SCCToIRSProof [SOUND, 7 ms]
        (48) IRSwT
        (49) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (50) IRSwT
        (51) IRSwTTerminationDigraphProof [EQUIVALENT, 3 ms]
        (52) IRSwT
        (53) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (54) IRSwT
        (55) TempFilterProof [SOUND, 7 ms]
        (56) IntTRS
        (57) RankingReductionPairProof [EQUIVALENT, 5 ms]
        (58) YES
    (59) JBCTerminationSCC
        (60) SCCToIRSProof [SOUND, 11 ms]
        (61) IRSwT
        (62) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (63) IRSwT
        (64) IRSwTTerminationDigraphProof [EQUIVALENT, 4 ms]
        (65) IRSwT
        (66) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (67) IRSwT
        (68) TempFilterProof [SOUND, 3 ms]
        (69) IntTRS
        (70) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (71) YES
    (72) JBCTerminationSCC
        (73) SCCToIRSProof [SOUND, 7 ms]
        (74) IRSwT
        (75) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (76) IRSwT
        (77) IRSwTTerminationDigraphProof [EQUIVALENT, 2 ms]
        (78) IRSwT
        (79) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (80) IRSwT
        (81) TempFilterProof [SOUND, 4 ms]
        (82) IntTRS
        (83) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (84) YES
    (85) JBCTerminationSCC
        (86) SCCToIRSProof [SOUND, 25 ms]
        (87) IRSwT
        (88) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (89) IRSwT
        (90) IRSwTTerminationDigraphProof [EQUIVALENT, 2 ms]
        (91) IRSwT
        (92) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (93) IRSwT
        (94) TempFilterProof [SOUND, 6 ms]
        (95) IntTRS
        (96) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (97) YES
    (98) JBCTerminationSCC
        (99) SCCToIRSProof [SOUND, 5 ms]
        (100) IRSwT
        (101) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (102) IRSwT
        (103) IRSwTTerminationDigraphProof [EQUIVALENT, 6 ms]
        (104) IRSwT
        (105) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (106) IRSwT
        (107) TempFilterProof [SOUND, 3 ms]
        (108) IntTRS
        (109) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (110) YES
    (111) JBCTerminationSCC
        (112) SCCToIRSProof [SOUND, 6 ms]
        (113) IRSwT
        (114) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (115) IRSwT
        (116) IRSwTTerminationDigraphProof [EQUIVALENT, 2 ms]
        (117) IRSwT
        (118) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (119) IRSwT
        (120) TempFilterProof [SOUND, 4 ms]
        (121) IntTRS
        (122) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (123) YES
    (124) JBCTerminationSCC
        (125) SCCToIRSProof [SOUND, 8 ms]
        (126) IRSwT
        (127) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (128) IRSwT
        (129) IRSwTTerminationDigraphProof [EQUIVALENT, 4 ms]
        (130) IRSwT
        (131) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (132) IRSwT
        (133) TempFilterProof [SOUND, 11 ms]
        (134) IntTRS
        (135) RankingReductionPairProof [EQUIVALENT, 9 ms]
        (136) YES
    (137) JBCTerminationSCC
        (138) SCCToIRSProof [SOUND, 10 ms]
        (139) IRSwT
        (140) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (141) IRSwT
        (142) IRSwTTerminationDigraphProof [EQUIVALENT, 2 ms]
        (143) IRSwT
        (144) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (145) IRSwT
        (146) TempFilterProof [SOUND, 3 ms]
        (147) IntTRS
        (148) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (149) YES
    (150) JBCTerminationSCC
        (151) SCCToIRSProof [SOUND, 6 ms]
        (152) IRSwT
        (153) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (154) IRSwT
        (155) IRSwTTerminationDigraphProof [EQUIVALENT, 4 ms]
        (156) IRSwT
        (157) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (158) IRSwT
        (159) TempFilterProof [SOUND, 9 ms]
        (160) IntTRS
        (161) RankingReductionPairProof [EQUIVALENT, 1 ms]
        (162) YES
    (163) JBCTerminationSCC
        (164) SCCToIRSProof [SOUND, 14 ms]
        (165) IRSwT
        (166) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (167) IRSwT
        (168) IRSwTTerminationDigraphProof [EQUIVALENT, 12 ms]
        (169) IRSwT
        (170) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (171) IRSwT
        (172) TempFilterProof [SOUND, 13 ms]
        (173) IntTRS
        (174) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (175) IntTRS
        (176) RankingReductionPairProof [EQUIVALENT, 2 ms]
        (177) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Test9 {
    public static void main(String[] args) {
	long l = args.length;

	while (l > 0) {
	    for (int i = (int) l ; i < 100; i++)
		test(i);
	    l--;
	}
    }

    private static void test(int i) {
	int j, k, l, m;

	for (j = i; j > 0; j--);
	for (k = i; k > 0; k--);
	for (l = i; l > 0; l--);
	for (m = i; m > 0; m--);
	for (j = i; j > 0; j--);
	for (k = i; k > 0; k--);
	for (l = i; l > 0; l--);
	for (m = i; m > 0; m--);
	for (j = i; j > 0; j--);
	for (k = i; k > 0; k--);
	for (l = i; l > 0; l--);
	for (m = i; m > 0; m--);
    }
}


----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Test9 {
    public static void main(String[] args) {
	long l = args.length;

	while (l > 0) {
	    for (int i = (int) l ; i < 100; i++)
		test(i);
	    l--;
	}
    }

    private static void test(int i) {
	int j, k, l, m;

	for (j = i; j > 0; j--);
	for (k = i; k > 0; k--);
	for (l = i; l > 0; l--);
	for (m = i; m > 0; m--);
	for (j = i; j > 0; j--);
	for (k = i; k > 0; k--);
	for (l = i; l > 0; l--);
	for (m = i; m > 0; m--);
	for (j = i; j > 0; j--);
	for (k = i; k > 0; k--);
	for (l = i; l > 0; l--);
	for (m = i; m > 0; m--);
    }
}


----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Test9.main([Ljava/lang/String;)V: Graph of 36 nodes with 1 SCC.



Test9.test(I)V: Graph of 122 nodes with 12 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 13 SCCss.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Test9.test(I)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(8) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 6 IRulesP rules:
f3937_0_test_LE(EOS(STATIC_3937), i959, i959) -> f3945_0_test_LE(EOS(STATIC_3945), i959, i959) :|: TRUE
f3945_0_test_LE(EOS(STATIC_3945), i959, i959) -> f3950_0_test_Inc(EOS(STATIC_3950), i959) :|: i959 > 0
f3950_0_test_Inc(EOS(STATIC_3950), i959) -> f4030_0_test_JMP(EOS(STATIC_4030), i959 + -1) :|: TRUE
f4030_0_test_JMP(EOS(STATIC_4030), i973) -> f4284_0_test_Load(EOS(STATIC_4284), i973) :|: TRUE
f4284_0_test_Load(EOS(STATIC_4284), i973) -> f3930_0_test_Load(EOS(STATIC_3930), i973) :|: TRUE
f3930_0_test_Load(EOS(STATIC_3930), i949) -> f3937_0_test_LE(EOS(STATIC_3937), i949, i949) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f3937_0_test_LE(EOS(STATIC_3937), i959:0, i959:0) -> f3937_0_test_LE(EOS(STATIC_3937), i959:0 - 1, i959:0 - 1) :|: i959:0 > 0
Filtered constant ground arguments:
   f3937_0_test_LE(x1, x2, x3) -> f3937_0_test_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f3937_0_test_LE(x1, x2) -> f3937_0_test_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f3937_0_test_LE(i959:0) -> f3937_0_test_LE(i959:0 - 1) :|: i959:0 > 0

----------------------------------------

(9)
Obligation:
Rules:
f3937_0_test_LE(i959:0) -> f3937_0_test_LE(i959:0 - 1) :|: i959:0 > 0

----------------------------------------

(10) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(11)
Obligation:
Rules:
f3937_0_test_LE(i959:0) -> f3937_0_test_LE(arith) :|: i959:0 > 0 && arith = i959:0 - 1

----------------------------------------

(12) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3937_0_test_LE(i959:0) -> f3937_0_test_LE(arith) :|: i959:0 > 0 && arith = i959:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f3937_0_test_LE(i959:0) -> f3937_0_test_LE(arith) :|: i959:0 > 0 && arith = i959:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f3937_0_test_LE(i959:0:0) -> f3937_0_test_LE(i959:0:0 - 1) :|: i959:0:0 > 0

----------------------------------------

(16) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3937_0_test_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(17)
Obligation:
Rules:
f3937_0_test_LE(i959:0:0) -> f3937_0_test_LE(c) :|: c = i959:0:0 - 1 && i959:0:0 > 0

----------------------------------------

(18) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f3937_0_test_LE ] = f3937_0_test_LE_1

The following rules are decreasing:
f3937_0_test_LE(i959:0:0) -> f3937_0_test_LE(c) :|: c = i959:0:0 - 1 && i959:0:0 > 0

The following rules are bounded:
f3937_0_test_LE(i959:0:0) -> f3937_0_test_LE(c) :|: c = i959:0:0 - 1 && i959:0:0 > 0


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Test9.test(I)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(21) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 6 IRulesP rules:
f3785_0_test_LE(EOS(STATIC_3785), i921, i921) -> f3790_0_test_LE(EOS(STATIC_3790), i921, i921) :|: TRUE
f3790_0_test_LE(EOS(STATIC_3790), i921, i921) -> f3796_0_test_Inc(EOS(STATIC_3796), i921) :|: i921 > 0
f3796_0_test_Inc(EOS(STATIC_3796), i921) -> f3800_0_test_JMP(EOS(STATIC_3800), i921 + -1) :|: TRUE
f3800_0_test_JMP(EOS(STATIC_3800), i925) -> f3871_0_test_Load(EOS(STATIC_3871), i925) :|: TRUE
f3871_0_test_Load(EOS(STATIC_3871), i925) -> f3782_0_test_Load(EOS(STATIC_3782), i925) :|: TRUE
f3782_0_test_Load(EOS(STATIC_3782), i913) -> f3785_0_test_LE(EOS(STATIC_3785), i913, i913) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f3785_0_test_LE(EOS(STATIC_3785), i921:0, i921:0) -> f3785_0_test_LE(EOS(STATIC_3785), i921:0 - 1, i921:0 - 1) :|: i921:0 > 0
Filtered constant ground arguments:
   f3785_0_test_LE(x1, x2, x3) -> f3785_0_test_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f3785_0_test_LE(x1, x2) -> f3785_0_test_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f3785_0_test_LE(i921:0) -> f3785_0_test_LE(i921:0 - 1) :|: i921:0 > 0

----------------------------------------

(22)
Obligation:
Rules:
f3785_0_test_LE(i921:0) -> f3785_0_test_LE(i921:0 - 1) :|: i921:0 > 0

----------------------------------------

(23) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(24)
Obligation:
Rules:
f3785_0_test_LE(i921:0) -> f3785_0_test_LE(arith) :|: i921:0 > 0 && arith = i921:0 - 1

----------------------------------------

(25) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3785_0_test_LE(i921:0) -> f3785_0_test_LE(arith) :|: i921:0 > 0 && arith = i921:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(26)
Obligation:

Termination digraph:
Nodes:
(1) f3785_0_test_LE(i921:0) -> f3785_0_test_LE(arith) :|: i921:0 > 0 && arith = i921:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(27) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(28)
Obligation:
Rules:
f3785_0_test_LE(i921:0:0) -> f3785_0_test_LE(i921:0:0 - 1) :|: i921:0:0 > 0

----------------------------------------

(29) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3785_0_test_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(30)
Obligation:
Rules:
f3785_0_test_LE(i921:0:0) -> f3785_0_test_LE(c) :|: c = i921:0:0 - 1 && i921:0:0 > 0

----------------------------------------

(31) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f3785_0_test_LE ] = f3785_0_test_LE_1

The following rules are decreasing:
f3785_0_test_LE(i921:0:0) -> f3785_0_test_LE(c) :|: c = i921:0:0 - 1 && i921:0:0 > 0

The following rules are bounded:
f3785_0_test_LE(i921:0:0) -> f3785_0_test_LE(c) :|: c = i921:0:0 - 1 && i921:0:0 > 0


----------------------------------------

(32)
YES

----------------------------------------

(33)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Test9.test(I)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(34) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 6 IRulesP rules:
f3638_0_test_LE(EOS(STATIC_3638), i884, i884) -> f3643_0_test_LE(EOS(STATIC_3643), i884, i884) :|: TRUE
f3643_0_test_LE(EOS(STATIC_3643), i884, i884) -> f3648_0_test_Inc(EOS(STATIC_3648), i884) :|: i884 > 0
f3648_0_test_Inc(EOS(STATIC_3648), i884) -> f3670_0_test_JMP(EOS(STATIC_3670), i884 + -1) :|: TRUE
f3670_0_test_JMP(EOS(STATIC_3670), i891) -> f3731_0_test_Load(EOS(STATIC_3731), i891) :|: TRUE
f3731_0_test_Load(EOS(STATIC_3731), i891) -> f3634_0_test_Load(EOS(STATIC_3634), i891) :|: TRUE
f3634_0_test_Load(EOS(STATIC_3634), i878) -> f3638_0_test_LE(EOS(STATIC_3638), i878, i878) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f3638_0_test_LE(EOS(STATIC_3638), i884:0, i884:0) -> f3638_0_test_LE(EOS(STATIC_3638), i884:0 - 1, i884:0 - 1) :|: i884:0 > 0
Filtered constant ground arguments:
   f3638_0_test_LE(x1, x2, x3) -> f3638_0_test_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f3638_0_test_LE(x1, x2) -> f3638_0_test_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f3638_0_test_LE(i884:0) -> f3638_0_test_LE(i884:0 - 1) :|: i884:0 > 0

----------------------------------------

(35)
Obligation:
Rules:
f3638_0_test_LE(i884:0) -> f3638_0_test_LE(i884:0 - 1) :|: i884:0 > 0

----------------------------------------

(36) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(37)
Obligation:
Rules:
f3638_0_test_LE(i884:0) -> f3638_0_test_LE(arith) :|: i884:0 > 0 && arith = i884:0 - 1

----------------------------------------

(38) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3638_0_test_LE(i884:0) -> f3638_0_test_LE(arith) :|: i884:0 > 0 && arith = i884:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(39)
Obligation:

Termination digraph:
Nodes:
(1) f3638_0_test_LE(i884:0) -> f3638_0_test_LE(arith) :|: i884:0 > 0 && arith = i884:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(40) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(41)
Obligation:
Rules:
f3638_0_test_LE(i884:0:0) -> f3638_0_test_LE(i884:0:0 - 1) :|: i884:0:0 > 0

----------------------------------------

(42) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3638_0_test_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(43)
Obligation:
Rules:
f3638_0_test_LE(i884:0:0) -> f3638_0_test_LE(c) :|: c = i884:0:0 - 1 && i884:0:0 > 0

----------------------------------------

(44) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f3638_0_test_LE ] = f3638_0_test_LE_1

The following rules are decreasing:
f3638_0_test_LE(i884:0:0) -> f3638_0_test_LE(c) :|: c = i884:0:0 - 1 && i884:0:0 > 0

The following rules are bounded:
f3638_0_test_LE(i884:0:0) -> f3638_0_test_LE(c) :|: c = i884:0:0 - 1 && i884:0:0 > 0


----------------------------------------

(45)
YES

----------------------------------------

(46)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Test9.test(I)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(47) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 6 IRulesP rules:
f3509_0_test_LE(EOS(STATIC_3509), i839, i839) -> f3514_0_test_LE(EOS(STATIC_3514), i839, i839) :|: TRUE
f3514_0_test_LE(EOS(STATIC_3514), i839, i839) -> f3516_0_test_Inc(EOS(STATIC_3516), i839) :|: i839 > 0
f3516_0_test_Inc(EOS(STATIC_3516), i839) -> f3522_0_test_JMP(EOS(STATIC_3522), i839 + -1) :|: TRUE
f3522_0_test_JMP(EOS(STATIC_3522), i841) -> f3595_0_test_Load(EOS(STATIC_3595), i841) :|: TRUE
f3595_0_test_Load(EOS(STATIC_3595), i841) -> f3504_0_test_Load(EOS(STATIC_3504), i841) :|: TRUE
f3504_0_test_Load(EOS(STATIC_3504), i831) -> f3509_0_test_LE(EOS(STATIC_3509), i831, i831) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f3509_0_test_LE(EOS(STATIC_3509), i839:0, i839:0) -> f3509_0_test_LE(EOS(STATIC_3509), i839:0 - 1, i839:0 - 1) :|: i839:0 > 0
Filtered constant ground arguments:
   f3509_0_test_LE(x1, x2, x3) -> f3509_0_test_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f3509_0_test_LE(x1, x2) -> f3509_0_test_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f3509_0_test_LE(i839:0) -> f3509_0_test_LE(i839:0 - 1) :|: i839:0 > 0

----------------------------------------

(48)
Obligation:
Rules:
f3509_0_test_LE(i839:0) -> f3509_0_test_LE(i839:0 - 1) :|: i839:0 > 0

----------------------------------------

(49) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(50)
Obligation:
Rules:
f3509_0_test_LE(i839:0) -> f3509_0_test_LE(arith) :|: i839:0 > 0 && arith = i839:0 - 1

----------------------------------------

(51) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3509_0_test_LE(i839:0) -> f3509_0_test_LE(arith) :|: i839:0 > 0 && arith = i839:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(52)
Obligation:

Termination digraph:
Nodes:
(1) f3509_0_test_LE(i839:0) -> f3509_0_test_LE(arith) :|: i839:0 > 0 && arith = i839:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(53) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(54)
Obligation:
Rules:
f3509_0_test_LE(i839:0:0) -> f3509_0_test_LE(i839:0:0 - 1) :|: i839:0:0 > 0

----------------------------------------

(55) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3509_0_test_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(56)
Obligation:
Rules:
f3509_0_test_LE(i839:0:0) -> f3509_0_test_LE(c) :|: c = i839:0:0 - 1 && i839:0:0 > 0

----------------------------------------

(57) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f3509_0_test_LE ] = f3509_0_test_LE_1

The following rules are decreasing:
f3509_0_test_LE(i839:0:0) -> f3509_0_test_LE(c) :|: c = i839:0:0 - 1 && i839:0:0 > 0

The following rules are bounded:
f3509_0_test_LE(i839:0:0) -> f3509_0_test_LE(c) :|: c = i839:0:0 - 1 && i839:0:0 > 0


----------------------------------------

(58)
YES

----------------------------------------

(59)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Test9.test(I)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(60) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 6 IRulesP rules:
f3361_0_test_LE(EOS(STATIC_3361), i802, i802) -> f3372_0_test_LE(EOS(STATIC_3372), i802, i802) :|: TRUE
f3372_0_test_LE(EOS(STATIC_3372), i802, i802) -> f3379_0_test_Inc(EOS(STATIC_3379), i802) :|: i802 > 0
f3379_0_test_Inc(EOS(STATIC_3379), i802) -> f3383_0_test_JMP(EOS(STATIC_3383), i802 + -1) :|: TRUE
f3383_0_test_JMP(EOS(STATIC_3383), i804) -> f3455_0_test_Load(EOS(STATIC_3455), i804) :|: TRUE
f3455_0_test_Load(EOS(STATIC_3455), i804) -> f3348_0_test_Load(EOS(STATIC_3348), i804) :|: TRUE
f3348_0_test_Load(EOS(STATIC_3348), i787) -> f3361_0_test_LE(EOS(STATIC_3361), i787, i787) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f3361_0_test_LE(EOS(STATIC_3361), i802:0, i802:0) -> f3361_0_test_LE(EOS(STATIC_3361), i802:0 - 1, i802:0 - 1) :|: i802:0 > 0
Filtered constant ground arguments:
   f3361_0_test_LE(x1, x2, x3) -> f3361_0_test_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f3361_0_test_LE(x1, x2) -> f3361_0_test_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f3361_0_test_LE(i802:0) -> f3361_0_test_LE(i802:0 - 1) :|: i802:0 > 0

----------------------------------------

(61)
Obligation:
Rules:
f3361_0_test_LE(i802:0) -> f3361_0_test_LE(i802:0 - 1) :|: i802:0 > 0

----------------------------------------

(62) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(63)
Obligation:
Rules:
f3361_0_test_LE(i802:0) -> f3361_0_test_LE(arith) :|: i802:0 > 0 && arith = i802:0 - 1

----------------------------------------

(64) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3361_0_test_LE(i802:0) -> f3361_0_test_LE(arith) :|: i802:0 > 0 && arith = i802:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(65)
Obligation:

Termination digraph:
Nodes:
(1) f3361_0_test_LE(i802:0) -> f3361_0_test_LE(arith) :|: i802:0 > 0 && arith = i802:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(66) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(67)
Obligation:
Rules:
f3361_0_test_LE(i802:0:0) -> f3361_0_test_LE(i802:0:0 - 1) :|: i802:0:0 > 0

----------------------------------------

(68) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3361_0_test_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(69)
Obligation:
Rules:
f3361_0_test_LE(i802:0:0) -> f3361_0_test_LE(c) :|: c = i802:0:0 - 1 && i802:0:0 > 0

----------------------------------------

(70) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f3361_0_test_LE ] = f3361_0_test_LE_1

The following rules are decreasing:
f3361_0_test_LE(i802:0:0) -> f3361_0_test_LE(c) :|: c = i802:0:0 - 1 && i802:0:0 > 0

The following rules are bounded:
f3361_0_test_LE(i802:0:0) -> f3361_0_test_LE(c) :|: c = i802:0:0 - 1 && i802:0:0 > 0


----------------------------------------

(71)
YES

----------------------------------------

(72)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Test9.test(I)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(73) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 6 IRulesP rules:
f3225_0_test_LE(EOS(STATIC_3225), i767, i767) -> f3229_0_test_LE(EOS(STATIC_3229), i767, i767) :|: TRUE
f3229_0_test_LE(EOS(STATIC_3229), i767, i767) -> f3234_0_test_Inc(EOS(STATIC_3234), i767) :|: i767 > 0
f3234_0_test_Inc(EOS(STATIC_3234), i767) -> f3240_0_test_JMP(EOS(STATIC_3240), i767 + -1) :|: TRUE
f3240_0_test_JMP(EOS(STATIC_3240), i768) -> f3313_0_test_Load(EOS(STATIC_3313), i768) :|: TRUE
f3313_0_test_Load(EOS(STATIC_3313), i768) -> f3220_0_test_Load(EOS(STATIC_3220), i768) :|: TRUE
f3220_0_test_Load(EOS(STATIC_3220), i761) -> f3225_0_test_LE(EOS(STATIC_3225), i761, i761) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f3225_0_test_LE(EOS(STATIC_3225), i767:0, i767:0) -> f3225_0_test_LE(EOS(STATIC_3225), i767:0 - 1, i767:0 - 1) :|: i767:0 > 0
Filtered constant ground arguments:
   f3225_0_test_LE(x1, x2, x3) -> f3225_0_test_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f3225_0_test_LE(x1, x2) -> f3225_0_test_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f3225_0_test_LE(i767:0) -> f3225_0_test_LE(i767:0 - 1) :|: i767:0 > 0

----------------------------------------

(74)
Obligation:
Rules:
f3225_0_test_LE(i767:0) -> f3225_0_test_LE(i767:0 - 1) :|: i767:0 > 0

----------------------------------------

(75) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(76)
Obligation:
Rules:
f3225_0_test_LE(i767:0) -> f3225_0_test_LE(arith) :|: i767:0 > 0 && arith = i767:0 - 1

----------------------------------------

(77) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3225_0_test_LE(i767:0) -> f3225_0_test_LE(arith) :|: i767:0 > 0 && arith = i767:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(78)
Obligation:

Termination digraph:
Nodes:
(1) f3225_0_test_LE(i767:0) -> f3225_0_test_LE(arith) :|: i767:0 > 0 && arith = i767:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(79) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(80)
Obligation:
Rules:
f3225_0_test_LE(i767:0:0) -> f3225_0_test_LE(i767:0:0 - 1) :|: i767:0:0 > 0

----------------------------------------

(81) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3225_0_test_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(82)
Obligation:
Rules:
f3225_0_test_LE(i767:0:0) -> f3225_0_test_LE(c) :|: c = i767:0:0 - 1 && i767:0:0 > 0

----------------------------------------

(83) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f3225_0_test_LE ] = f3225_0_test_LE_1

The following rules are decreasing:
f3225_0_test_LE(i767:0:0) -> f3225_0_test_LE(c) :|: c = i767:0:0 - 1 && i767:0:0 > 0

The following rules are bounded:
f3225_0_test_LE(i767:0:0) -> f3225_0_test_LE(c) :|: c = i767:0:0 - 1 && i767:0:0 > 0


----------------------------------------

(84)
YES

----------------------------------------

(85)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Test9.test(I)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(86) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 6 IRulesP rules:
f3121_0_test_LE(EOS(STATIC_3121), i742, i742) -> f3126_0_test_LE(EOS(STATIC_3126), i742, i742) :|: TRUE
f3126_0_test_LE(EOS(STATIC_3126), i742, i742) -> f3130_0_test_Inc(EOS(STATIC_3130), i742) :|: i742 > 0
f3130_0_test_Inc(EOS(STATIC_3130), i742) -> f3136_0_test_JMP(EOS(STATIC_3136), i742 + -1) :|: TRUE
f3136_0_test_JMP(EOS(STATIC_3136), i743) -> f3191_0_test_Load(EOS(STATIC_3191), i743) :|: TRUE
f3191_0_test_Load(EOS(STATIC_3191), i743) -> f3117_0_test_Load(EOS(STATIC_3117), i743) :|: TRUE
f3117_0_test_Load(EOS(STATIC_3117), i735) -> f3121_0_test_LE(EOS(STATIC_3121), i735, i735) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f3121_0_test_LE(EOS(STATIC_3121), i742:0, i742:0) -> f3121_0_test_LE(EOS(STATIC_3121), i742:0 - 1, i742:0 - 1) :|: i742:0 > 0
Filtered constant ground arguments:
   f3121_0_test_LE(x1, x2, x3) -> f3121_0_test_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f3121_0_test_LE(x1, x2) -> f3121_0_test_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f3121_0_test_LE(i742:0) -> f3121_0_test_LE(i742:0 - 1) :|: i742:0 > 0

----------------------------------------

(87)
Obligation:
Rules:
f3121_0_test_LE(i742:0) -> f3121_0_test_LE(i742:0 - 1) :|: i742:0 > 0

----------------------------------------

(88) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(89)
Obligation:
Rules:
f3121_0_test_LE(i742:0) -> f3121_0_test_LE(arith) :|: i742:0 > 0 && arith = i742:0 - 1

----------------------------------------

(90) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3121_0_test_LE(i742:0) -> f3121_0_test_LE(arith) :|: i742:0 > 0 && arith = i742:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(91)
Obligation:

Termination digraph:
Nodes:
(1) f3121_0_test_LE(i742:0) -> f3121_0_test_LE(arith) :|: i742:0 > 0 && arith = i742:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(92) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(93)
Obligation:
Rules:
f3121_0_test_LE(i742:0:0) -> f3121_0_test_LE(i742:0:0 - 1) :|: i742:0:0 > 0

----------------------------------------

(94) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3121_0_test_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(95)
Obligation:
Rules:
f3121_0_test_LE(i742:0:0) -> f3121_0_test_LE(c) :|: c = i742:0:0 - 1 && i742:0:0 > 0

----------------------------------------

(96) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f3121_0_test_LE ] = f3121_0_test_LE_1

The following rules are decreasing:
f3121_0_test_LE(i742:0:0) -> f3121_0_test_LE(c) :|: c = i742:0:0 - 1 && i742:0:0 > 0

The following rules are bounded:
f3121_0_test_LE(i742:0:0) -> f3121_0_test_LE(c) :|: c = i742:0:0 - 1 && i742:0:0 > 0


----------------------------------------

(97)
YES

----------------------------------------

(98)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Test9.test(I)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(99) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 6 IRulesP rules:
f2989_0_test_LE(EOS(STATIC_2989), i713, i713) -> f2994_0_test_LE(EOS(STATIC_2994), i713, i713) :|: TRUE
f2994_0_test_LE(EOS(STATIC_2994), i713, i713) -> f2999_0_test_Inc(EOS(STATIC_2999), i713) :|: i713 > 0
f2999_0_test_Inc(EOS(STATIC_2999), i713) -> f3004_0_test_JMP(EOS(STATIC_3004), i713 + -1) :|: TRUE
f3004_0_test_JMP(EOS(STATIC_3004), i714) -> f3084_0_test_Load(EOS(STATIC_3084), i714) :|: TRUE
f3084_0_test_Load(EOS(STATIC_3084), i714) -> f2985_0_test_Load(EOS(STATIC_2985), i714) :|: TRUE
f2985_0_test_Load(EOS(STATIC_2985), i708) -> f2989_0_test_LE(EOS(STATIC_2989), i708, i708) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f2989_0_test_LE(EOS(STATIC_2989), i713:0, i713:0) -> f2989_0_test_LE(EOS(STATIC_2989), i713:0 - 1, i713:0 - 1) :|: i713:0 > 0
Filtered constant ground arguments:
   f2989_0_test_LE(x1, x2, x3) -> f2989_0_test_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f2989_0_test_LE(x1, x2) -> f2989_0_test_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f2989_0_test_LE(i713:0) -> f2989_0_test_LE(i713:0 - 1) :|: i713:0 > 0

----------------------------------------

(100)
Obligation:
Rules:
f2989_0_test_LE(i713:0) -> f2989_0_test_LE(i713:0 - 1) :|: i713:0 > 0

----------------------------------------

(101) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(102)
Obligation:
Rules:
f2989_0_test_LE(i713:0) -> f2989_0_test_LE(arith) :|: i713:0 > 0 && arith = i713:0 - 1

----------------------------------------

(103) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2989_0_test_LE(i713:0) -> f2989_0_test_LE(arith) :|: i713:0 > 0 && arith = i713:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(104)
Obligation:

Termination digraph:
Nodes:
(1) f2989_0_test_LE(i713:0) -> f2989_0_test_LE(arith) :|: i713:0 > 0 && arith = i713:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(105) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(106)
Obligation:
Rules:
f2989_0_test_LE(i713:0:0) -> f2989_0_test_LE(i713:0:0 - 1) :|: i713:0:0 > 0

----------------------------------------

(107) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2989_0_test_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(108)
Obligation:
Rules:
f2989_0_test_LE(i713:0:0) -> f2989_0_test_LE(c) :|: c = i713:0:0 - 1 && i713:0:0 > 0

----------------------------------------

(109) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f2989_0_test_LE ] = f2989_0_test_LE_1

The following rules are decreasing:
f2989_0_test_LE(i713:0:0) -> f2989_0_test_LE(c) :|: c = i713:0:0 - 1 && i713:0:0 > 0

The following rules are bounded:
f2989_0_test_LE(i713:0:0) -> f2989_0_test_LE(c) :|: c = i713:0:0 - 1 && i713:0:0 > 0


----------------------------------------

(110)
YES

----------------------------------------

(111)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Test9.test(I)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(112) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 6 IRulesP rules:
f2889_0_test_LE(EOS(STATIC_2889), i687, i687) -> f2894_0_test_LE(EOS(STATIC_2894), i687, i687) :|: TRUE
f2894_0_test_LE(EOS(STATIC_2894), i687, i687) -> f2901_0_test_Inc(EOS(STATIC_2901), i687) :|: i687 > 0
f2901_0_test_Inc(EOS(STATIC_2901), i687) -> f2908_0_test_JMP(EOS(STATIC_2908), i687 + -1) :|: TRUE
f2908_0_test_JMP(EOS(STATIC_2908), i689) -> f2957_0_test_Load(EOS(STATIC_2957), i689) :|: TRUE
f2957_0_test_Load(EOS(STATIC_2957), i689) -> f2871_0_test_Load(EOS(STATIC_2871), i689) :|: TRUE
f2871_0_test_Load(EOS(STATIC_2871), i681) -> f2889_0_test_LE(EOS(STATIC_2889), i681, i681) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f2889_0_test_LE(EOS(STATIC_2889), i687:0, i687:0) -> f2889_0_test_LE(EOS(STATIC_2889), i687:0 - 1, i687:0 - 1) :|: i687:0 > 0
Filtered constant ground arguments:
   f2889_0_test_LE(x1, x2, x3) -> f2889_0_test_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f2889_0_test_LE(x1, x2) -> f2889_0_test_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f2889_0_test_LE(i687:0) -> f2889_0_test_LE(i687:0 - 1) :|: i687:0 > 0

----------------------------------------

(113)
Obligation:
Rules:
f2889_0_test_LE(i687:0) -> f2889_0_test_LE(i687:0 - 1) :|: i687:0 > 0

----------------------------------------

(114) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(115)
Obligation:
Rules:
f2889_0_test_LE(i687:0) -> f2889_0_test_LE(arith) :|: i687:0 > 0 && arith = i687:0 - 1

----------------------------------------

(116) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2889_0_test_LE(i687:0) -> f2889_0_test_LE(arith) :|: i687:0 > 0 && arith = i687:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(117)
Obligation:

Termination digraph:
Nodes:
(1) f2889_0_test_LE(i687:0) -> f2889_0_test_LE(arith) :|: i687:0 > 0 && arith = i687:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(118) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(119)
Obligation:
Rules:
f2889_0_test_LE(i687:0:0) -> f2889_0_test_LE(i687:0:0 - 1) :|: i687:0:0 > 0

----------------------------------------

(120) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2889_0_test_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(121)
Obligation:
Rules:
f2889_0_test_LE(i687:0:0) -> f2889_0_test_LE(c) :|: c = i687:0:0 - 1 && i687:0:0 > 0

----------------------------------------

(122) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f2889_0_test_LE ] = f2889_0_test_LE_1

The following rules are decreasing:
f2889_0_test_LE(i687:0:0) -> f2889_0_test_LE(c) :|: c = i687:0:0 - 1 && i687:0:0 > 0

The following rules are bounded:
f2889_0_test_LE(i687:0:0) -> f2889_0_test_LE(c) :|: c = i687:0:0 - 1 && i687:0:0 > 0


----------------------------------------

(123)
YES

----------------------------------------

(124)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Test9.test(I)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(125) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 6 IRulesP rules:
f2747_0_test_LE(EOS(STATIC_2747), i654, i654) -> f2749_0_test_LE(EOS(STATIC_2749), i654, i654) :|: TRUE
f2749_0_test_LE(EOS(STATIC_2749), i654, i654) -> f2751_0_test_Inc(EOS(STATIC_2751), i654) :|: i654 > 0
f2751_0_test_Inc(EOS(STATIC_2751), i654) -> f2753_0_test_JMP(EOS(STATIC_2753), i654 + -1) :|: TRUE
f2753_0_test_JMP(EOS(STATIC_2753), i655) -> f2831_0_test_Load(EOS(STATIC_2831), i655) :|: TRUE
f2831_0_test_Load(EOS(STATIC_2831), i655) -> f2746_0_test_Load(EOS(STATIC_2746), i655) :|: TRUE
f2746_0_test_Load(EOS(STATIC_2746), i652) -> f2747_0_test_LE(EOS(STATIC_2747), i652, i652) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f2747_0_test_LE(EOS(STATIC_2747), i654:0, i654:0) -> f2747_0_test_LE(EOS(STATIC_2747), i654:0 - 1, i654:0 - 1) :|: i654:0 > 0
Filtered constant ground arguments:
   f2747_0_test_LE(x1, x2, x3) -> f2747_0_test_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f2747_0_test_LE(x1, x2) -> f2747_0_test_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f2747_0_test_LE(i654:0) -> f2747_0_test_LE(i654:0 - 1) :|: i654:0 > 0

----------------------------------------

(126)
Obligation:
Rules:
f2747_0_test_LE(i654:0) -> f2747_0_test_LE(i654:0 - 1) :|: i654:0 > 0

----------------------------------------

(127) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(128)
Obligation:
Rules:
f2747_0_test_LE(i654:0) -> f2747_0_test_LE(arith) :|: i654:0 > 0 && arith = i654:0 - 1

----------------------------------------

(129) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2747_0_test_LE(i654:0) -> f2747_0_test_LE(arith) :|: i654:0 > 0 && arith = i654:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(130)
Obligation:

Termination digraph:
Nodes:
(1) f2747_0_test_LE(i654:0) -> f2747_0_test_LE(arith) :|: i654:0 > 0 && arith = i654:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(131) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(132)
Obligation:
Rules:
f2747_0_test_LE(i654:0:0) -> f2747_0_test_LE(i654:0:0 - 1) :|: i654:0:0 > 0

----------------------------------------

(133) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2747_0_test_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(134)
Obligation:
Rules:
f2747_0_test_LE(i654:0:0) -> f2747_0_test_LE(c) :|: c = i654:0:0 - 1 && i654:0:0 > 0

----------------------------------------

(135) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f2747_0_test_LE ] = f2747_0_test_LE_1

The following rules are decreasing:
f2747_0_test_LE(i654:0:0) -> f2747_0_test_LE(c) :|: c = i654:0:0 - 1 && i654:0:0 > 0

The following rules are bounded:
f2747_0_test_LE(i654:0:0) -> f2747_0_test_LE(c) :|: c = i654:0:0 - 1 && i654:0:0 > 0


----------------------------------------

(136)
YES

----------------------------------------

(137)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Test9.test(I)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(138) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 6 IRulesP rules:
f2733_0_test_LE(EOS(STATIC_2733), i648, i648) -> f2735_0_test_LE(EOS(STATIC_2735), i648, i648) :|: TRUE
f2735_0_test_LE(EOS(STATIC_2735), i648, i648) -> f2737_0_test_Inc(EOS(STATIC_2737), i648) :|: i648 > 0
f2737_0_test_Inc(EOS(STATIC_2737), i648) -> f2739_0_test_JMP(EOS(STATIC_2739), i648 + -1) :|: TRUE
f2739_0_test_JMP(EOS(STATIC_2739), i649) -> f2741_0_test_Load(EOS(STATIC_2741), i649) :|: TRUE
f2741_0_test_Load(EOS(STATIC_2741), i649) -> f2730_0_test_Load(EOS(STATIC_2730), i649) :|: TRUE
f2730_0_test_Load(EOS(STATIC_2730), i638) -> f2733_0_test_LE(EOS(STATIC_2733), i638, i638) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f2733_0_test_LE(EOS(STATIC_2733), i648:0, i648:0) -> f2733_0_test_LE(EOS(STATIC_2733), i648:0 - 1, i648:0 - 1) :|: i648:0 > 0
Filtered constant ground arguments:
   f2733_0_test_LE(x1, x2, x3) -> f2733_0_test_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f2733_0_test_LE(x1, x2) -> f2733_0_test_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f2733_0_test_LE(i648:0) -> f2733_0_test_LE(i648:0 - 1) :|: i648:0 > 0

----------------------------------------

(139)
Obligation:
Rules:
f2733_0_test_LE(i648:0) -> f2733_0_test_LE(i648:0 - 1) :|: i648:0 > 0

----------------------------------------

(140) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(141)
Obligation:
Rules:
f2733_0_test_LE(i648:0) -> f2733_0_test_LE(arith) :|: i648:0 > 0 && arith = i648:0 - 1

----------------------------------------

(142) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2733_0_test_LE(i648:0) -> f2733_0_test_LE(arith) :|: i648:0 > 0 && arith = i648:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(143)
Obligation:

Termination digraph:
Nodes:
(1) f2733_0_test_LE(i648:0) -> f2733_0_test_LE(arith) :|: i648:0 > 0 && arith = i648:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(144) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(145)
Obligation:
Rules:
f2733_0_test_LE(i648:0:0) -> f2733_0_test_LE(i648:0:0 - 1) :|: i648:0:0 > 0

----------------------------------------

(146) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2733_0_test_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(147)
Obligation:
Rules:
f2733_0_test_LE(i648:0:0) -> f2733_0_test_LE(c) :|: c = i648:0:0 - 1 && i648:0:0 > 0

----------------------------------------

(148) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f2733_0_test_LE ] = f2733_0_test_LE_1

The following rules are decreasing:
f2733_0_test_LE(i648:0:0) -> f2733_0_test_LE(c) :|: c = i648:0:0 - 1 && i648:0:0 > 0

The following rules are bounded:
f2733_0_test_LE(i648:0:0) -> f2733_0_test_LE(c) :|: c = i648:0:0 - 1 && i648:0:0 > 0


----------------------------------------

(149)
YES

----------------------------------------

(150)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Test9.test(I)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(151) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 6 IRulesP rules:
f2582_0_test_LE(EOS(STATIC_2582), i608, i608) -> f2589_0_test_LE(EOS(STATIC_2589), i608, i608) :|: TRUE
f2589_0_test_LE(EOS(STATIC_2589), i608, i608) -> f2594_0_test_Inc(EOS(STATIC_2594), i608) :|: i608 > 0
f2594_0_test_Inc(EOS(STATIC_2594), i608) -> f2600_0_test_JMP(EOS(STATIC_2600), i608 + -1) :|: TRUE
f2600_0_test_JMP(EOS(STATIC_2600), i610) -> f2693_0_test_Load(EOS(STATIC_2693), i610) :|: TRUE
f2693_0_test_Load(EOS(STATIC_2693), i610) -> f2574_0_test_Load(EOS(STATIC_2574), i610) :|: TRUE
f2574_0_test_Load(EOS(STATIC_2574), i595) -> f2582_0_test_LE(EOS(STATIC_2582), i595, i595) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f2582_0_test_LE(EOS(STATIC_2582), i608:0, i608:0) -> f2582_0_test_LE(EOS(STATIC_2582), i608:0 - 1, i608:0 - 1) :|: i608:0 > 0
Filtered constant ground arguments:
   f2582_0_test_LE(x1, x2, x3) -> f2582_0_test_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f2582_0_test_LE(x1, x2) -> f2582_0_test_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f2582_0_test_LE(i608:0) -> f2582_0_test_LE(i608:0 - 1) :|: i608:0 > 0

----------------------------------------

(152)
Obligation:
Rules:
f2582_0_test_LE(i608:0) -> f2582_0_test_LE(i608:0 - 1) :|: i608:0 > 0

----------------------------------------

(153) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(154)
Obligation:
Rules:
f2582_0_test_LE(i608:0) -> f2582_0_test_LE(arith) :|: i608:0 > 0 && arith = i608:0 - 1

----------------------------------------

(155) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2582_0_test_LE(i608:0) -> f2582_0_test_LE(arith) :|: i608:0 > 0 && arith = i608:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(156)
Obligation:

Termination digraph:
Nodes:
(1) f2582_0_test_LE(i608:0) -> f2582_0_test_LE(arith) :|: i608:0 > 0 && arith = i608:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(157) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(158)
Obligation:
Rules:
f2582_0_test_LE(i608:0:0) -> f2582_0_test_LE(i608:0:0 - 1) :|: i608:0:0 > 0

----------------------------------------

(159) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2582_0_test_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(160)
Obligation:
Rules:
f2582_0_test_LE(i608:0:0) -> f2582_0_test_LE(c) :|: c = i608:0:0 - 1 && i608:0:0 > 0

----------------------------------------

(161) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f2582_0_test_LE ] = f2582_0_test_LE_1

The following rules are decreasing:
f2582_0_test_LE(i608:0:0) -> f2582_0_test_LE(c) :|: c = i608:0:0 - 1 && i608:0:0 > 0

The following rules are bounded:
f2582_0_test_LE(i608:0:0) -> f2582_0_test_LE(c) :|: c = i608:0:0 - 1 && i608:0:0 > 0


----------------------------------------

(162)
YES

----------------------------------------

(163)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Test9.main([Ljava/lang/String;)V
SCC calls the following helper methods: Test9.test(I)V
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(164) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 29 IRulesP rules:
f15_0_main_ConstantStackPush(EOS(STATIC_15), i4, i4) -> f16_0_main_Cmp(EOS(STATIC_16), i4, i4) :|: TRUE
f16_0_main_Cmp(EOS(STATIC_16), i5, i5) -> f18_0_main_Cmp(EOS(STATIC_18), i5, i5) :|: TRUE
f18_0_main_Cmp(EOS(STATIC_18), i5, i5) -> f32_0_main_LE(EOS(STATIC_32), i5, 1) :|: TRUE
f32_0_main_LE(EOS(STATIC_32), i5, matching1) -> f34_0_main_Load(EOS(STATIC_34), i5) :|: 1 > 0 && matching1 = 1
f34_0_main_Load(EOS(STATIC_34), i5) -> f36_0_main_TypeCast(EOS(STATIC_36), i5, i5) :|: TRUE
f36_0_main_TypeCast(EOS(STATIC_36), i5, i5) -> f39_0_main_Store(EOS(STATIC_39), i5, i10) :|: i10 = i5
f39_0_main_Store(EOS(STATIC_39), i5, i10) -> f40_0_main_Load(EOS(STATIC_40), i5, i10) :|: TRUE
f40_0_main_Load(EOS(STATIC_40), i5, i10) -> f41_0_main_ConstantStackPush(EOS(STATIC_41), i5, i10, i10) :|: TRUE
f41_0_main_ConstantStackPush(EOS(STATIC_41), i5, i10, i10) -> f42_0_main_GE(EOS(STATIC_42), i5, i10, i10, 100) :|: TRUE
f42_0_main_GE(EOS(STATIC_42), i5, i11, i11, matching1) -> f44_0_main_GE(EOS(STATIC_44), i5, i11, i11, 100) :|: TRUE && matching1 = 100
f42_0_main_GE(EOS(STATIC_42), i5, i12, i12, matching1) -> f45_0_main_GE(EOS(STATIC_45), i5, i12, i12, 100) :|: TRUE && matching1 = 100
f44_0_main_GE(EOS(STATIC_44), i5, i11, i11, matching1) -> f49_0_main_Load(EOS(STATIC_49), i5, i11) :|: i11 < 100 && matching1 = 100
f49_0_main_Load(EOS(STATIC_49), i5, i11) -> f52_0_main_InvokeMethod(EOS(STATIC_52), i5, i11, i11) :|: TRUE
f52_0_main_InvokeMethod(EOS(STATIC_52), i5, i11, i11) -> f55_0_test_Load(EOS(STATIC_55), i11, i11) :|: i11 >= 1
f52_0_main_InvokeMethod(EOS(STATIC_52), i5, i11, i11) -> f55_1_test_Load(EOS(STATIC_55), i5, i11, i11) :|: i11 >= 1
f55_0_test_Load(EOS(STATIC_55), i11, i11) -> f4677_0_test_Load(EOS(STATIC_4677), i11, i11) :|: TRUE
f4285_0_test_Return(EOS(STATIC_4285), i5, i995) -> f4292_0_main_Inc(EOS(STATIC_4292), i5, i995) :|: TRUE
f4292_0_main_Inc(EOS(STATIC_4292), i5, i995) -> f4295_0_main_JMP(EOS(STATIC_4295), i5, i995 + 1) :|: TRUE
f4295_0_main_JMP(EOS(STATIC_4295), i5, i1039) -> f4384_0_main_Load(EOS(STATIC_4384), i5, i1039) :|: TRUE
f4384_0_main_Load(EOS(STATIC_4384), i5, i1039) -> f40_0_main_Load(EOS(STATIC_40), i5, i1039) :|: TRUE
f45_0_main_GE(EOS(STATIC_45), i5, i12, i12, matching1) -> f50_0_main_Load(EOS(STATIC_50), i5) :|: i12 >= 100 && matching1 = 100
f50_0_main_Load(EOS(STATIC_50), i5) -> f53_0_main_ConstantStackPush(EOS(STATIC_53), i5) :|: TRUE
f53_0_main_ConstantStackPush(EOS(STATIC_53), i5) -> f56_0_main_IntArithmetic(EOS(STATIC_56), i5, 1) :|: TRUE
f56_0_main_IntArithmetic(EOS(STATIC_56), i5, matching1) -> f68_0_main_Store(EOS(STATIC_68), i5 - 1) :|: i5 > 0 && matching1 = 1
f68_0_main_Store(EOS(STATIC_68), i15) -> f71_0_main_JMP(EOS(STATIC_71), i15) :|: TRUE
f71_0_main_JMP(EOS(STATIC_71), i15) -> f84_0_main_Load(EOS(STATIC_84), i15) :|: TRUE
f84_0_main_Load(EOS(STATIC_84), i15) -> f14_0_main_Load(EOS(STATIC_14), i15) :|: TRUE
f14_0_main_Load(EOS(STATIC_14), i4) -> f15_0_main_ConstantStackPush(EOS(STATIC_15), i4, i4) :|: TRUE
f55_1_test_Load(EOS(STATIC_55), i5, i995, i995) -> f4285_0_test_Return(EOS(STATIC_4285), i5, i995) :|: TRUE
Combined rules. Obtained 3 IRulesP rules:
f42_0_main_GE(EOS(STATIC_42), i5:0, i12:0, i12:0, 100) -> f42_0_main_GE(EOS(STATIC_42), i5:0 - 1, i5:0 - 1, i5:0 - 1, 100) :|: i5:0 > 0 && i12:0 > 99
f42_0_main_GE(EOS(STATIC_42), i5:0, i11:0, i11:0, 100) -> f42_0_main_GE(EOS(STATIC_42), i5:0, i11:0 + 1, i11:0 + 1, 100) :|: i11:0 > 0 && i11:0 < 100
Removed following non-SCC rules:
f42_0_main_GE(EOS(STATIC_42), i5:0, i11:0, i11:0, 100) -> f4677_0_test_Load(EOS(STATIC_4677), i11:0, i11:0) :|: i11:0 > 0 && i11:0 < 100
Filtered constant ground arguments:
   f42_0_main_GE(x1, x2, x3, x4, x5) -> f42_0_main_GE(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f42_0_main_GE(x1, x2, x3) -> f42_0_main_GE(x1, x3)
Finished conversion. Obtained 2 rules.P rules:
f42_0_main_GE(i5:0, i12:0) -> f42_0_main_GE(i5:0 - 1, i5:0 - 1) :|: i5:0 > 0 && i12:0 > 99
f42_0_main_GE(i5:0, i11:0) -> f42_0_main_GE(i5:0, i11:0 + 1) :|: i11:0 > 0 && i11:0 < 100

----------------------------------------

(165)
Obligation:
Rules:
f42_0_main_GE(i5:0, i12:0) -> f42_0_main_GE(i5:0 - 1, i5:0 - 1) :|: i5:0 > 0 && i12:0 > 99
f42_0_main_GE(x, x1) -> f42_0_main_GE(x, x1 + 1) :|: x1 > 0 && x1 < 100

----------------------------------------

(166) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(167)
Obligation:
Rules:
f42_0_main_GE(i5:0, i12:0) -> f42_0_main_GE(arith, arith) :|: i5:0 > 0 && i12:0 > 99 && arith = i5:0 - 1 && arith = i5:0 - 1
f42_0_main_GE(x2, x3) -> f42_0_main_GE(x2, x4) :|: x3 > 0 && x3 < 100 && x4 = x3 + 1

----------------------------------------

(168) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f42_0_main_GE(i5:0, i12:0) -> f42_0_main_GE(arith, arith) :|: i5:0 > 0 && i12:0 > 99 && arith = i5:0 - 1 && arith = i5:0 - 1
(2) f42_0_main_GE(x2, x3) -> f42_0_main_GE(x2, x4) :|: x3 > 0 && x3 < 100 && x4 = x3 + 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(169)
Obligation:

Termination digraph:
Nodes:
(1) f42_0_main_GE(i5:0, i12:0) -> f42_0_main_GE(arith, arith) :|: i5:0 > 0 && i12:0 > 99 && arith = i5:0 - 1 && arith = i5:0 - 1
(2) f42_0_main_GE(x2, x3) -> f42_0_main_GE(x2, x4) :|: x3 > 0 && x3 < 100 && x4 = x3 + 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(170) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(171)
Obligation:
Rules:
f42_0_main_GE(i5:0:0, i12:0:0) -> f42_0_main_GE(i5:0:0 - 1, i5:0:0 - 1) :|: i5:0:0 > 0 && i12:0:0 > 99
f42_0_main_GE(x2:0, x3:0) -> f42_0_main_GE(x2:0, x3:0 + 1) :|: x3:0 > 0 && x3:0 < 100

----------------------------------------

(172) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f42_0_main_GE(VARIABLE, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(173)
Obligation:
Rules:
f42_0_main_GE(i5:0:0, i12:0:0) -> f42_0_main_GE(c, c1) :|: c1 = i5:0:0 - 1 && c = i5:0:0 - 1 && (i5:0:0 > 0 && i12:0:0 > 99)
f42_0_main_GE(x2:0, x3:0) -> f42_0_main_GE(x2:0, c2) :|: c2 = x3:0 + 1 && (x3:0 > 0 && x3:0 < 100)

----------------------------------------

(174) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f42_0_main_GE ] = 2*f42_0_main_GE_1

The following rules are decreasing:
f42_0_main_GE(i5:0:0, i12:0:0) -> f42_0_main_GE(c, c1) :|: c1 = i5:0:0 - 1 && c = i5:0:0 - 1 && (i5:0:0 > 0 && i12:0:0 > 99)

The following rules are bounded:
f42_0_main_GE(i5:0:0, i12:0:0) -> f42_0_main_GE(c, c1) :|: c1 = i5:0:0 - 1 && c = i5:0:0 - 1 && (i5:0:0 > 0 && i12:0:0 > 99)


----------------------------------------

(175)
Obligation:
Rules:
f42_0_main_GE(x2:0, x3:0) -> f42_0_main_GE(x2:0, c2) :|: c2 = x3:0 + 1 && (x3:0 > 0 && x3:0 < 100)

----------------------------------------

(176) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f42_0_main_GE ] = -1*f42_0_main_GE_2

The following rules are decreasing:
f42_0_main_GE(x2:0, x3:0) -> f42_0_main_GE(x2:0, c2) :|: c2 = x3:0 + 1 && (x3:0 > 0 && x3:0 < 100)

The following rules are bounded:
f42_0_main_GE(x2:0, x3:0) -> f42_0_main_GE(x2:0, c2) :|: c2 = x3:0 + 1 && (x3:0 > 0 && x3:0 < 100)


----------------------------------------

(177)
YES
