YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/tpuPA.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 174 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 47 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 27 ms]
(16) IntTRS
(17) RankingReductionPairProof [EQUIVALENT, 11 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaC7 {
    public static void main(String[] args) {
        Random.args = args;
        int i = Random.random();
        int j = Random.random();
        int k = Random.random();

        while (i <= 100 && j <= k) {
            int t = i;
            i = j;
            j = i + 1;
            k--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaC7 {
    public static void main(String[] args) {
        Random.args = args;
        int i = Random.random();
        int j = Random.random();
        int k = Random.random();

        while (i <= 100 && j <= k) {
            int t = i;
            i = j;
            j = i + 1;
            k--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaC7.main([Ljava/lang/String;)V: Graph of 256 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaC7.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 19 IRulesP rules:
f545_0_main_ConstantStackPush(EOS(STATIC_545), i89, i90, i91, i89) -> f546_0_main_GT(EOS(STATIC_546), i89, i90, i91, i89, 100) :|: TRUE
f546_0_main_GT(EOS(STATIC_546), i95, i90, i91, i95, matching1) -> f549_0_main_GT(EOS(STATIC_549), i95, i90, i91, i95, 100) :|: TRUE && matching1 = 100
f549_0_main_GT(EOS(STATIC_549), i95, i90, i91, i95, matching1) -> f551_0_main_Load(EOS(STATIC_551), i95, i90, i91) :|: i95 <= 100 && matching1 = 100
f551_0_main_Load(EOS(STATIC_551), i95, i90, i91) -> f555_0_main_Load(EOS(STATIC_555), i95, i90, i91, i90) :|: TRUE
f555_0_main_Load(EOS(STATIC_555), i95, i90, i91, i90) -> f557_0_main_GT(EOS(STATIC_557), i95, i90, i91, i90, i91) :|: TRUE
f557_0_main_GT(EOS(STATIC_557), i95, i90, i91, i90, i91) -> f560_0_main_GT(EOS(STATIC_560), i95, i90, i91, i90, i91) :|: i90 <= i91
f560_0_main_GT(EOS(STATIC_560), i95, i90, i91, i90, i91) -> f576_0_main_Load(EOS(STATIC_576), i95, i90, i91) :|: i90 <= i91
f576_0_main_Load(EOS(STATIC_576), i95, i90, i91) -> f577_0_main_Store(EOS(STATIC_577), i90, i91, i95) :|: TRUE
f577_0_main_Store(EOS(STATIC_577), i90, i91, i95) -> f580_0_main_Load(EOS(STATIC_580), i90, i91) :|: TRUE
f580_0_main_Load(EOS(STATIC_580), i90, i91) -> f581_0_main_Store(EOS(STATIC_581), i91, i90) :|: TRUE
f581_0_main_Store(EOS(STATIC_581), i91, i90) -> f582_0_main_Load(EOS(STATIC_582), i90, i91) :|: TRUE
f582_0_main_Load(EOS(STATIC_582), i90, i91) -> f583_0_main_ConstantStackPush(EOS(STATIC_583), i90, i91, i90) :|: TRUE
f583_0_main_ConstantStackPush(EOS(STATIC_583), i90, i91, i90) -> f584_0_main_IntArithmetic(EOS(STATIC_584), i90, i91, i90, 1) :|: TRUE
f584_0_main_IntArithmetic(EOS(STATIC_584), i90, i91, i90, matching1) -> f585_0_main_Store(EOS(STATIC_585), i90, i91, i90 + 1) :|: i90 >= 0 && matching1 = 1
f585_0_main_Store(EOS(STATIC_585), i90, i91, i102) -> f586_0_main_Inc(EOS(STATIC_586), i90, i102, i91) :|: TRUE
f586_0_main_Inc(EOS(STATIC_586), i90, i102, i91) -> f587_0_main_JMP(EOS(STATIC_587), i90, i102, i91 + -1) :|: TRUE
f587_0_main_JMP(EOS(STATIC_587), i90, i102, i103) -> f612_0_main_Load(EOS(STATIC_612), i90, i102, i103) :|: TRUE
f612_0_main_Load(EOS(STATIC_612), i90, i102, i103) -> f543_0_main_Load(EOS(STATIC_543), i90, i102, i103) :|: TRUE
f543_0_main_Load(EOS(STATIC_543), i89, i90, i91) -> f545_0_main_ConstantStackPush(EOS(STATIC_545), i89, i90, i91, i89) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f545_0_main_ConstantStackPush(EOS(STATIC_545), i89:0, i90:0, i91:0, i89:0) -> f545_0_main_ConstantStackPush(EOS(STATIC_545), i90:0, i90:0 + 1, i91:0 - 1, i90:0) :|: i89:0 < 101 && i91:0 >= i90:0 && i90:0 > -1
Filtered constant ground arguments:
   f545_0_main_ConstantStackPush(x1, x2, x3, x4, x5) -> f545_0_main_ConstantStackPush(x2, x3, x4, x5)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f545_0_main_ConstantStackPush(x1, x2, x3, x4) -> f545_0_main_ConstantStackPush(x2, x3, x4)
Finished conversion. Obtained 1 rules.P rules:
f545_0_main_ConstantStackPush(i90:0, i91:0, i89:0) -> f545_0_main_ConstantStackPush(i90:0 + 1, i91:0 - 1, i90:0) :|: i91:0 >= i90:0 && i90:0 > -1 && i89:0 < 101

----------------------------------------

(8)
Obligation:
Rules:
f545_0_main_ConstantStackPush(i90:0, i91:0, i89:0) -> f545_0_main_ConstantStackPush(i90:0 + 1, i91:0 - 1, i90:0) :|: i91:0 >= i90:0 && i90:0 > -1 && i89:0 < 101

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f545_0_main_ConstantStackPush(i90:0, i91:0, i89:0) -> f545_0_main_ConstantStackPush(arith, arith1, i90:0) :|: i91:0 >= i90:0 && i90:0 > -1 && i89:0 < 101 && arith = i90:0 + 1 && arith1 = i91:0 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f545_0_main_ConstantStackPush(i90:0, i91:0, i89:0) -> f545_0_main_ConstantStackPush(arith, arith1, i90:0) :|: i91:0 >= i90:0 && i90:0 > -1 && i89:0 < 101 && arith = i90:0 + 1 && arith1 = i91:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f545_0_main_ConstantStackPush(i90:0, i91:0, i89:0) -> f545_0_main_ConstantStackPush(arith, arith1, i90:0) :|: i91:0 >= i90:0 && i90:0 > -1 && i89:0 < 101 && arith = i90:0 + 1 && arith1 = i91:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f545_0_main_ConstantStackPush(i90:0:0, i91:0:0, i89:0:0) -> f545_0_main_ConstantStackPush(i90:0:0 + 1, i91:0:0 - 1, i90:0:0) :|: i91:0:0 >= i90:0:0 && i90:0:0 > -1 && i89:0:0 < 101

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f545_0_main_ConstantStackPush(INTEGER, INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f545_0_main_ConstantStackPush(i90:0:0, i91:0:0, i89:0:0) -> f545_0_main_ConstantStackPush(c, c1, i90:0:0) :|: c1 = i91:0:0 - 1 && c = i90:0:0 + 1 && (i91:0:0 >= i90:0:0 && i90:0:0 > -1 && i89:0:0 < 101)

----------------------------------------

(17) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f545_0_main_ConstantStackPush ] = f545_0_main_ConstantStackPush_2

The following rules are decreasing:
f545_0_main_ConstantStackPush(i90:0:0, i91:0:0, i89:0:0) -> f545_0_main_ConstantStackPush(c, c1, i90:0:0) :|: c1 = i91:0:0 - 1 && c = i90:0:0 + 1 && (i91:0:0 >= i90:0:0 && i90:0:0 > -1 && i89:0:0 < 101)

The following rules are bounded:
f545_0_main_ConstantStackPush(i90:0:0, i91:0:0, i89:0:0) -> f545_0_main_ConstantStackPush(c, c1, i90:0:0) :|: c1 = i91:0:0 - 1 && c = i90:0:0 + 1 && (i91:0:0 >= i90:0:0 && i90:0:0 > -1 && i89:0:0 < 101)


----------------------------------------

(18)
YES
