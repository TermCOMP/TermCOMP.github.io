YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/kXJdY.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 169 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) JBCTerminationSCC
        (8) SCCToIRSProof [SOUND, 45 ms]
        (9) IRSwT
        (10) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (11) IRSwT
        (12) IRSwTTerminationDigraphProof [EQUIVALENT, 32 ms]
        (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) TempFilterProof [SOUND, 17 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (19) IntTRS
        (20) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) JBCTerminationSCC
        (23) SCCToIRSProof [SOUND, 45 ms]
        (24) IRSwT
        (25) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (26) IRSwT
        (27) IRSwTTerminationDigraphProof [EQUIVALENT, 23 ms]
        (28) IRSwT
        (29) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (30) IRSwT
        (31) TempFilterProof [SOUND, 20 ms]
        (32) IntTRS
        (33) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
        (34) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class List3 {
	private List3 next;

	void iterate() {
		List3 current = this.next;
	        while (current != this) {
	                current = current.next;
	        }
	}

	public static void main(String[] args) {
		//Create cyclic list:
		int length = args.length;
		List3 cur = new List3();
		List3 first = cur;
		while (length-- > 0) {
			cur.next = new List3();
			cur = cur.next;
		}
		cur.next = first;

		cur.iterate();
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class List3 {
	private List3 next;

	void iterate() {
		List3 current = this.next;
	        while (current != this) {
	                current = current.next;
	        }
	}

	public static void main(String[] args) {
		//Create cyclic list:
		int length = args.length;
		List3 cur = new List3();
		List3 first = cur;
		while (length-- > 0) {
			cur.next = new List3();
			cur = cur.next;
		}
		cur.next = first;

		cur.iterate();
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
List3.main([Ljava/lang/String;)V: Graph of 81 nodes with 2 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 2 SCCss.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: List3.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*List3: [next]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(8) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 17 IRulesP rules:
f1773_0_iterate_EQ(EOS(STATIC_1773), o130[List3.next]o131, o130[List3.next]o129, o131[List3.next]o130, o131[List3.next]o129) -> f1775_0_iterate_Load(EOS(STATIC_1775), o130[List3.next]o131, o130[List3.next]o129, o131[List3.next]o130, o131[List3.next]o129) :|: TRUE
f1775_0_iterate_Load(EOS(STATIC_1775), o130[List3.next]o131, o130[List3.next]o129, o131[List3.next]o130, o131[List3.next]o129) -> f1777_0_iterate_FieldAccess(EOS(STATIC_1777), o130[List3.next]o131, o130[List3.next]o129, o131[List3.next]o130, o131[List3.next]o129) :|: TRUE
f1777_0_iterate_FieldAccess(EOS(STATIC_1777), o130[List3.next]o131, o130[List3.next]o129, o131[List3.next]o130, o131[List3.next]o129) -> f1784_0_iterate_FieldAccess(EOS(STATIC_1784), o130[List3.next]o131, o130[List3.next]o129, o131[List3.next]o129, o131[List3.next]o130) :|: o130[List3.next]o131 > 0 && o131[List3.next]o130 > 0
f1777_0_iterate_FieldAccess(EOS(STATIC_1777), o165[List3.next]o165, o165[List3.next]o129, o165[List3.next]o165, o165[List3.next]o129) -> f1785_0_iterate_FieldAccess(EOS(STATIC_1785), o165[List3.next]o129, o165[List3.next]o165) :|: TRUE
f1784_0_iterate_FieldAccess(EOS(STATIC_1784), o130[List3.next]o166, o130[List3.next]o129, o166[List3.next]o129, o166[List3.next]o130) -> f1791_0_iterate_FieldAccess(EOS(STATIC_1791), o130[List3.next]o129, o130[List3.next]o166, o167[List3.next]o129, o167[List3.next]o130) :|: o167[List3.next]o129 < o166[List3.next]o129 && o166[List3.next]o129 >= 0 && o167[List3.next]o130 < o166[List3.next]o130 && o166[List3.next]o130 >= 0
f1791_0_iterate_FieldAccess(EOS(STATIC_1791), o130[List3.next]o129, o130[List3.next]o166, o167[List3.next]o129, o167[List3.next]o130) -> f1799_0_iterate_Store(EOS(STATIC_1799), o130[List3.next]o129, o167[List3.next]o129, o167[List3.next]o130, o130[List3.next]o167) :|: o130[List3.next]o167 > o130[List3.next]o166 && o130[List3.next]o166 >= 0
f1799_0_iterate_Store(EOS(STATIC_1799), o130[List3.next]o129, o167[List3.next]o129, o167[List3.next]o130, o130[List3.next]o167) -> f1807_0_iterate_JMP(EOS(STATIC_1807), o130[List3.next]o129, o167[List3.next]o129, o167[List3.next]o130, o130[List3.next]o167) :|: TRUE
f1807_0_iterate_JMP(EOS(STATIC_1807), o130[List3.next]o129, o167[List3.next]o129, o167[List3.next]o130, o130[List3.next]o167) -> f1817_0_iterate_Load(EOS(STATIC_1817), o130[List3.next]o129, o167[List3.next]o129, o167[List3.next]o130, o130[List3.next]o167) :|: TRUE
f1817_0_iterate_Load(EOS(STATIC_1817), o130[List3.next]o129, o167[List3.next]o129, o167[List3.next]o130, o130[List3.next]o167) -> f1659_0_iterate_Load(EOS(STATIC_1659), o130[List3.next]o167, o130[List3.next]o129, o167[List3.next]o129, o167[List3.next]o130) :|: TRUE
f1659_0_iterate_Load(EOS(STATIC_1659), o130[List3.next]o131, o130[List3.next]o129, o131[List3.next]o129, o131[List3.next]o130) -> f1720_0_iterate_Load(EOS(STATIC_1720), o130[List3.next]o131, o130[List3.next]o129, o131[List3.next]o129, o131[List3.next]o130) :|: TRUE
f1720_0_iterate_Load(EOS(STATIC_1720), o130[List3.next]o131, o130[List3.next]o129, o131[List3.next]o129, o131[List3.next]o130) -> f1764_0_iterate_EQ(EOS(STATIC_1764), o130[List3.next]o131, o130[List3.next]o129, o131[List3.next]o129, o131[List3.next]o130) :|: TRUE
f1764_0_iterate_EQ(EOS(STATIC_1764), o130[List3.next]o131, o130[List3.next]o129, o131[List3.next]o129, o131[List3.next]o130) -> f1773_0_iterate_EQ(EOS(STATIC_1773), o130[List3.next]o131, o130[List3.next]o129, o131[List3.next]o130, o131[List3.next]o129) :|: o131[List3.next]o129 > 0
f1785_0_iterate_FieldAccess(EOS(STATIC_1785), o168[List3.next]o129, o168[List3.next]o168) -> f1795_0_iterate_FieldAccess(EOS(STATIC_1795), o169[List3.next]o129, o169[List3.next]o168) :|: o169[List3.next]o129 < o168[List3.next]o129 && o168[List3.next]o129 >= 0 && o169[List3.next]o168 < o168[List3.next]o168 && o168[List3.next]o168 >= 0
f1795_0_iterate_FieldAccess(EOS(STATIC_1795), o169[List3.next]o129, o169[List3.next]o168) -> f1804_0_iterate_Store(EOS(STATIC_1804), o169[List3.next]o129, o169[List3.next]o168) :|: TRUE
f1804_0_iterate_Store(EOS(STATIC_1804), o169[List3.next]o129, o169[List3.next]o168) -> f1810_0_iterate_JMP(EOS(STATIC_1810), o169[List3.next]o129, o169[List3.next]o168) :|: TRUE
f1810_0_iterate_JMP(EOS(STATIC_1810), o169[List3.next]o129, o169[List3.next]o168) -> f1818_0_iterate_Load(EOS(STATIC_1818), o169[List3.next]o129, o169[List3.next]o168) :|: TRUE
f1818_0_iterate_Load(EOS(STATIC_1818), o169[List3.next]o129, o169[List3.next]o168) -> f1659_0_iterate_Load(EOS(STATIC_1659), o168[List3.next]o169, o168[List3.next]o129, o169[List3.next]o129, o169[List3.next]o168) :|: o168[List3.next]o169 = 1
Combined rules. Obtained 2 IRulesP rules:
f1773_0_iterate_EQ(EOS(STATIC_1773), o130[List3.next]o131:0, o130[List3.next]o129:0, o131[List3.next]o130:0, o131[List3.next]o129:0) -> f1773_0_iterate_EQ(EOS(STATIC_1773), o130[List3.next]o167:0, o130[List3.next]o129:0, o167[List3.next]o130:0, o167[List3.next]o129:0) :|: o131[List3.next]o130:0 > 0 && o130[List3.next]o131:0 > 0 && o131[List3.next]o129:0 > -1 && o167[List3.next]o129:0 < o131[List3.next]o129:0 && o167[List3.next]o130:0 < o131[List3.next]o130:0 && o167[List3.next]o129:0 > 0 && o130[List3.next]o167:0 > o130[List3.next]o131:0
f1773_0_iterate_EQ(EOS(STATIC_1773), o130[List3.next]o131:0, o130[List3.next]o129:0, o130[List3.next]o131:0, o130[List3.next]o129:0) -> f1773_0_iterate_EQ(EOS(STATIC_1773), 1, o168[List3.next]o129:0, o169[List3.next]o168:0, o169[List3.next]o129:0) :|: o130[List3.next]o129:0 > -1 && o169[List3.next]o129:0 < o130[List3.next]o129:0 && o169[List3.next]o168:0 < o130[List3.next]o131:0 && o169[List3.next]o129:0 > 0 && o130[List3.next]o131:0 > -1
Filtered constant ground arguments:
   f1773_0_iterate_EQ(x1, x2, x3, x4, x5) -> f1773_0_iterate_EQ(x2, x3, x4, x5)
   EOS(x1) -> EOS
Finished conversion. Obtained 2 rules.P rules:
f1773_0_iterate_EQ(o130[List3.next]o131:0, o130[List3.next]o129:0, o131[List3.next]o130:0, o131[List3.next]o129:0) -> f1773_0_iterate_EQ(o130[List3.next]o167:0, o130[List3.next]o129:0, o167[List3.next]o130:0, o167[List3.next]o129:0) :|: o130[List3.next]o131:0 > 0 && o131[List3.next]o130:0 > 0 && o131[List3.next]o129:0 > -1 && o167[List3.next]o129:0 < o131[List3.next]o129:0 && o167[List3.next]o130:0 < o131[List3.next]o130:0 && o130[List3.next]o167:0 > o130[List3.next]o131:0 && o167[List3.next]o129:0 > 0
f1773_0_iterate_EQ(o130[List3.next]o131:0, o130[List3.next]o129:0, o130[List3.next]o131:0, o130[List3.next]o129:0) -> f1773_0_iterate_EQ(1, o168[List3.next]o129:0, o169[List3.next]o168:0, o169[List3.next]o129:0) :|: o169[List3.next]o129:0 < o130[List3.next]o129:0 && o130[List3.next]o129:0 > -1 && o169[List3.next]o168:0 < o130[List3.next]o131:0 && o130[List3.next]o131:0 > -1 && o169[List3.next]o129:0 > 0

----------------------------------------

(9)
Obligation:
Rules:
f1773_0_iterate_EQ(o130[List3.next]o131:0, o130[List3.next]o129:0, o131[List3.next]o130:0, o131[List3.next]o129:0) -> f1773_0_iterate_EQ(o130[List3.next]o167:0, o130[List3.next]o129:0, o167[List3.next]o130:0, o167[List3.next]o129:0) :|: o130[List3.next]o131:0 > 0 && o131[List3.next]o130:0 > 0 && o131[List3.next]o129:0 > -1 && o167[List3.next]o129:0 < o131[List3.next]o129:0 && o167[List3.next]o130:0 < o131[List3.next]o130:0 && o130[List3.next]o167:0 > o130[List3.next]o131:0 && o167[List3.next]o129:0 > 0
f1773_0_iterate_EQ(x, x1, x, x1) -> f1773_0_iterate_EQ(1, x2, x3, x4) :|: x4 < x1 && x1 > -1 && x3 < x && x > -1 && x4 > 0

----------------------------------------

(10) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(11)
Obligation:
Rules:
f1773_0_iterate_EQ(o130[List3.next]o131:0, o130[List3.next]o129:0, o131[List3.next]o130:0, o131[List3.next]o129:0) -> f1773_0_iterate_EQ(o130[List3.next]o167:0, o130[List3.next]o129:0, o167[List3.next]o130:0, o167[List3.next]o129:0) :|: o130[List3.next]o131:0 > 0 && o131[List3.next]o130:0 > 0 && o131[List3.next]o129:0 > -1 && o167[List3.next]o129:0 < o131[List3.next]o129:0 && o167[List3.next]o130:0 < o131[List3.next]o130:0 && o130[List3.next]o167:0 > o130[List3.next]o131:0 && o167[List3.next]o129:0 > 0
f1773_0_iterate_EQ(x, x1, x, x1) -> f1773_0_iterate_EQ(1, x2, x3, x4) :|: x4 < x1 && x1 > -1 && x3 < x && x > -1 && x4 > 0

----------------------------------------

(12) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f1773_0_iterate_EQ(o130[List3.next]o131:0, o130[List3.next]o129:0, o131[List3.next]o130:0, o131[List3.next]o129:0) -> f1773_0_iterate_EQ(o130[List3.next]o167:0, o130[List3.next]o129:0, o167[List3.next]o130:0, o167[List3.next]o129:0) :|: o130[List3.next]o131:0 > 0 && o131[List3.next]o130:0 > 0 && o131[List3.next]o129:0 > -1 && o167[List3.next]o129:0 < o131[List3.next]o129:0 && o167[List3.next]o130:0 < o131[List3.next]o130:0 && o130[List3.next]o167:0 > o130[List3.next]o131:0 && o167[List3.next]o129:0 > 0
(2) f1773_0_iterate_EQ(x, x1, x, x1) -> f1773_0_iterate_EQ(1, x2, x3, x4) :|: x4 < x1 && x1 > -1 && x3 < x && x > -1 && x4 > 0

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f1773_0_iterate_EQ(o130[List3.next]o131:0, o130[List3.next]o129:0, o131[List3.next]o130:0, o131[List3.next]o129:0) -> f1773_0_iterate_EQ(o130[List3.next]o167:0, o130[List3.next]o129:0, o167[List3.next]o130:0, o167[List3.next]o129:0) :|: o130[List3.next]o131:0 > 0 && o131[List3.next]o130:0 > 0 && o131[List3.next]o129:0 > -1 && o167[List3.next]o129:0 < o131[List3.next]o129:0 && o167[List3.next]o130:0 < o131[List3.next]o130:0 && o130[List3.next]o167:0 > o130[List3.next]o131:0 && o167[List3.next]o129:0 > 0
(2) f1773_0_iterate_EQ(x, x1, x, x1) -> f1773_0_iterate_EQ(1, x2, x3, x4) :|: x4 < x1 && x1 > -1 && x3 < x && x > -1 && x4 > 0

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f1773_0_iterate_EQ(x:0, x1:0, x:0, x1:0) -> f1773_0_iterate_EQ(1, x2:0, x3:0, x4:0) :|: x:0 > -1 && x4:0 > 0 && x:0 > x3:0 && x1:0 > -1 && x4:0 < x1:0
f1773_0_iterate_EQ(o130[List3.next]o131:0:0, o130[List3.next]o129:0:0, o131[List3.next]o130:0:0, o131[List3.next]o129:0:0) -> f1773_0_iterate_EQ(o130[List3.next]o167:0:0, o130[List3.next]o129:0:0, o167[List3.next]o130:0:0, o167[List3.next]o129:0:0) :|: o130[List3.next]o167:0:0 > o130[List3.next]o131:0:0 && o167[List3.next]o129:0:0 > 0 && o167[List3.next]o130:0:0 < o131[List3.next]o130:0:0 && o167[List3.next]o129:0:0 < o131[List3.next]o129:0:0 && o131[List3.next]o129:0:0 > -1 && o131[List3.next]o130:0:0 > 0 && o130[List3.next]o131:0:0 > 0

----------------------------------------

(16) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f1773_0_iterate_EQ(VARIABLE, VARIABLE, INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(17)
Obligation:
Rules:
f1773_0_iterate_EQ(x:0, x1:0, x:0, x1:0) -> f1773_0_iterate_EQ(c, x2:0, x3:0, x4:0) :|: c = 1 && (x:0 > -1 && x4:0 > 0 && x:0 > x3:0 && x1:0 > -1 && x4:0 < x1:0)
f1773_0_iterate_EQ(o130[List3.next]o131:0:0, o130[List3.next]o129:0:0, o131[List3.next]o130:0:0, o131[List3.next]o129:0:0) -> f1773_0_iterate_EQ(o130[List3.next]o167:0:0, o130[List3.next]o129:0:0, o167[List3.next]o130:0:0, o167[List3.next]o129:0:0) :|: o130[List3.next]o167:0:0 > o130[List3.next]o131:0:0 && o167[List3.next]o129:0:0 > 0 && o167[List3.next]o130:0:0 < o131[List3.next]o130:0:0 && o167[List3.next]o129:0:0 < o131[List3.next]o129:0:0 && o131[List3.next]o129:0:0 > -1 && o131[List3.next]o130:0:0 > 0 && o130[List3.next]o131:0:0 > 0

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f1773_0_iterate_EQ(x, x1, x2, x3)] = -1 + x2

The following rules are decreasing:
f1773_0_iterate_EQ(x:0, x1:0, x:0, x1:0) -> f1773_0_iterate_EQ(c, x2:0, x3:0, x4:0) :|: c = 1 && (x:0 > -1 && x4:0 > 0 && x:0 > x3:0 && x1:0 > -1 && x4:0 < x1:0)
f1773_0_iterate_EQ(o130[List3.next]o131:0:0, o130[List3.next]o129:0:0, o131[List3.next]o130:0:0, o131[List3.next]o129:0:0) -> f1773_0_iterate_EQ(o130[List3.next]o167:0:0, o130[List3.next]o129:0:0, o167[List3.next]o130:0:0, o167[List3.next]o129:0:0) :|: o130[List3.next]o167:0:0 > o130[List3.next]o131:0:0 && o167[List3.next]o129:0:0 > 0 && o167[List3.next]o130:0:0 < o131[List3.next]o130:0:0 && o167[List3.next]o129:0:0 < o131[List3.next]o129:0:0 && o131[List3.next]o129:0:0 > -1 && o131[List3.next]o130:0:0 > 0 && o130[List3.next]o131:0:0 > 0
The following rules are bounded:
f1773_0_iterate_EQ(o130[List3.next]o131:0:0, o130[List3.next]o129:0:0, o131[List3.next]o130:0:0, o131[List3.next]o129:0:0) -> f1773_0_iterate_EQ(o130[List3.next]o167:0:0, o130[List3.next]o129:0:0, o167[List3.next]o130:0:0, o167[List3.next]o129:0:0) :|: o130[List3.next]o167:0:0 > o130[List3.next]o131:0:0 && o167[List3.next]o129:0:0 > 0 && o167[List3.next]o130:0:0 < o131[List3.next]o130:0:0 && o167[List3.next]o129:0:0 < o131[List3.next]o129:0:0 && o131[List3.next]o129:0:0 > -1 && o131[List3.next]o130:0:0 > 0 && o130[List3.next]o131:0:0 > 0

----------------------------------------

(19)
Obligation:
Rules:
f1773_0_iterate_EQ(x:0, x1:0, x:0, x1:0) -> f1773_0_iterate_EQ(c, x2:0, x3:0, x4:0) :|: c = 1 && (x:0 > -1 && x4:0 > 0 && x:0 > x3:0 && x1:0 > -1 && x4:0 < x1:0)

----------------------------------------

(20) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f1773_0_iterate_EQ ] = f1773_0_iterate_EQ_4

The following rules are decreasing:
f1773_0_iterate_EQ(x:0, x1:0, x:0, x1:0) -> f1773_0_iterate_EQ(c, x2:0, x3:0, x4:0) :|: c = 1 && (x:0 > -1 && x4:0 > 0 && x:0 > x3:0 && x1:0 > -1 && x4:0 < x1:0)

The following rules are bounded:
f1773_0_iterate_EQ(x:0, x1:0, x:0, x1:0) -> f1773_0_iterate_EQ(c, x2:0, x3:0, x4:0) :|: c = 1 && (x:0 > -1 && x4:0 > 0 && x:0 > x3:0 && x1:0 > -1 && x4:0 < x1:0)


----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: List3.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*List3: [next]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(23) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 25 IRulesP rules:
f1316_0_main_Inc(EOS(STATIC_1316), i92, i92, o84[List3.next]o83) -> f1317_0_main_LE(EOS(STATIC_1317), i92 + -1, i92, o84[List3.next]o83) :|: TRUE
f1317_0_main_LE(EOS(STATIC_1317), i100, i103, o84[List3.next]o83) -> f1319_0_main_LE(EOS(STATIC_1319), i100, i103, o84[List3.next]o83) :|: TRUE
f1319_0_main_LE(EOS(STATIC_1319), i100, i103, o84[List3.next]o83) -> f1321_0_main_Load(EOS(STATIC_1321), i100, o84[List3.next]o83) :|: i103 > 0
f1321_0_main_Load(EOS(STATIC_1321), i100, o84[List3.next]o83) -> f1480_0_main_New(EOS(STATIC_1480), i100, o84[List3.next]o83) :|: TRUE
f1480_0_main_New(EOS(STATIC_1480), i100, o84[List3.next]o83) -> f1482_0_main_Duplicate(EOS(STATIC_1482), i100, o84[List3.next]o83) :|: TRUE
f1482_0_main_Duplicate(EOS(STATIC_1482), i100, o84[List3.next]o83) -> f1485_0_main_InvokeMethod(EOS(STATIC_1485), i100, o84[List3.next]o83) :|: TRUE
f1485_0_main_InvokeMethod(EOS(STATIC_1485), i100, o84[List3.next]o83) -> f1488_0__init__Load(EOS(STATIC_1488), i100, o84[List3.next]o83) :|: TRUE
f1488_0__init__Load(EOS(STATIC_1488), i100, o84[List3.next]o83) -> f1493_0__init__InvokeMethod(EOS(STATIC_1493), i100, o84[List3.next]o83) :|: TRUE
f1493_0__init__InvokeMethod(EOS(STATIC_1493), i100, o84[List3.next]o83) -> f1494_0__init__Return(EOS(STATIC_1494), i100, o84[List3.next]o83) :|: TRUE
f1494_0__init__Return(EOS(STATIC_1494), i100, o84[List3.next]o83) -> f1497_0_main_FieldAccess(EOS(STATIC_1497), i100, o84[List3.next]o83) :|: TRUE
f1497_0_main_FieldAccess(EOS(STATIC_1497), i100, o84[List3.next]o83) -> f1500_0_main_FieldAccess(EOS(STATIC_1500), i100, o84[List3.next]o83) :|: o84[List3.next]o83 > 0
f1497_0_main_FieldAccess(EOS(STATIC_1497), i100, o105[List3.next]o105) -> f1501_0_main_FieldAccess(EOS(STATIC_1501), i100) :|: TRUE
f1500_0_main_FieldAccess(EOS(STATIC_1500), i100, o84[List3.next]o83) -> f1504_0_main_Load(EOS(STATIC_1504), i100, o84[List3.next]o83) :|: TRUE
f1504_0_main_Load(EOS(STATIC_1504), i100, o84[List3.next]o83) -> f1508_0_main_FieldAccess(EOS(STATIC_1508), i100, o84[List3.next]o83) :|: TRUE
f1508_0_main_FieldAccess(EOS(STATIC_1508), i100, o84[List3.next]o83) -> f1512_0_main_Store(EOS(STATIC_1512), i100, o84[List3.next]o90) :|: o84[List3.next]o90 > o84[List3.next]o83 && o84[List3.next]o83 >= 0
f1512_0_main_Store(EOS(STATIC_1512), i100, o84[List3.next]o90) -> f1516_0_main_JMP(EOS(STATIC_1516), i100, o84[List3.next]o90) :|: TRUE
f1516_0_main_JMP(EOS(STATIC_1516), i100, o84[List3.next]o90) -> f1561_0_main_Load(EOS(STATIC_1561), i100, o84[List3.next]o90) :|: TRUE
f1561_0_main_Load(EOS(STATIC_1561), i100, o84[List3.next]o90) -> f1209_0_main_Load(EOS(STATIC_1209), i100, o84[List3.next]o90) :|: TRUE
f1209_0_main_Load(EOS(STATIC_1209), i92, o84[List3.next]o83) -> f1316_0_main_Inc(EOS(STATIC_1316), i92, i92, o84[List3.next]o83) :|: TRUE
f1501_0_main_FieldAccess(EOS(STATIC_1501), i100) -> f1505_0_main_Load(EOS(STATIC_1505), i100) :|: TRUE
f1505_0_main_Load(EOS(STATIC_1505), i100) -> f1509_0_main_FieldAccess(EOS(STATIC_1509), i100) :|: TRUE
f1509_0_main_FieldAccess(EOS(STATIC_1509), i100) -> f1513_0_main_Store(EOS(STATIC_1513), i100) :|: TRUE
f1513_0_main_Store(EOS(STATIC_1513), i100) -> f1517_0_main_JMP(EOS(STATIC_1517), i100) :|: TRUE
f1517_0_main_JMP(EOS(STATIC_1517), i100) -> f1562_0_main_Load(EOS(STATIC_1562), i100) :|: TRUE
f1562_0_main_Load(EOS(STATIC_1562), i100) -> f1209_0_main_Load(EOS(STATIC_1209), i100, o105[List3.next]o90) :|: o105[List3.next]o90 = 1
Combined rules. Obtained 2 IRulesP rules:
f1316_0_main_Inc(EOS(STATIC_1316), i92:0, i92:0, o84[List3.next]o83:0) -> f1316_0_main_Inc(EOS(STATIC_1316), i92:0 - 1, i92:0 - 1, o84[List3.next]o90:0) :|: o84[List3.next]o83:0 > 0 && o84[List3.next]o90:0 > o84[List3.next]o83:0 && i92:0 > 0
f1316_0_main_Inc(EOS(STATIC_1316), i92:0, i92:0, o84[List3.next]o83:0) -> f1316_0_main_Inc(EOS(STATIC_1316), i92:0 - 1, i92:0 - 1, 1) :|: i92:0 > 0
Filtered constant ground arguments:
   f1316_0_main_Inc(x1, x2, x3, x4) -> f1316_0_main_Inc(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f1316_0_main_Inc(x1, x2, x3) -> f1316_0_main_Inc(x2, x3)
Finished conversion. Obtained 2 rules.P rules:
f1316_0_main_Inc(i92:0, o84[List3.next]o83:0) -> f1316_0_main_Inc(i92:0 - 1, o84[List3.next]o90:0) :|: o84[List3.next]o90:0 > o84[List3.next]o83:0 && i92:0 > 0 && o84[List3.next]o83:0 > 0
f1316_0_main_Inc(i92:0, o84[List3.next]o83:0) -> f1316_0_main_Inc(i92:0 - 1, 1) :|: i92:0 > 0

----------------------------------------

(24)
Obligation:
Rules:
f1316_0_main_Inc(i92:0, o84[List3.next]o83:0) -> f1316_0_main_Inc(i92:0 - 1, o84[List3.next]o90:0) :|: o84[List3.next]o90:0 > o84[List3.next]o83:0 && i92:0 > 0 && o84[List3.next]o83:0 > 0
f1316_0_main_Inc(x, x1) -> f1316_0_main_Inc(x - 1, 1) :|: x > 0

----------------------------------------

(25) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(26)
Obligation:
Rules:
f1316_0_main_Inc(i92:0, o84[List3.next]o83:0) -> f1316_0_main_Inc(arith, o84[List3.next]o90:0) :|: o84[List3.next]o90:0 > o84[List3.next]o83:0 && i92:0 > 0 && o84[List3.next]o83:0 > 0 && arith = i92:0 - 1
f1316_0_main_Inc(x2, x3) -> f1316_0_main_Inc(x4, 1) :|: x2 > 0 && x4 = x2 - 1

----------------------------------------

(27) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f1316_0_main_Inc(i92:0, o84[List3.next]o83:0) -> f1316_0_main_Inc(arith, o84[List3.next]o90:0) :|: o84[List3.next]o90:0 > o84[List3.next]o83:0 && i92:0 > 0 && o84[List3.next]o83:0 > 0 && arith = i92:0 - 1
(2) f1316_0_main_Inc(x2, x3) -> f1316_0_main_Inc(x4, 1) :|: x2 > 0 && x4 = x2 - 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(28)
Obligation:

Termination digraph:
Nodes:
(1) f1316_0_main_Inc(i92:0, o84[List3.next]o83:0) -> f1316_0_main_Inc(arith, o84[List3.next]o90:0) :|: o84[List3.next]o90:0 > o84[List3.next]o83:0 && i92:0 > 0 && o84[List3.next]o83:0 > 0 && arith = i92:0 - 1
(2) f1316_0_main_Inc(x2, x3) -> f1316_0_main_Inc(x4, 1) :|: x2 > 0 && x4 = x2 - 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(29) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(30)
Obligation:
Rules:
f1316_0_main_Inc(i92:0:0, o84[List3.next]o83:0:0) -> f1316_0_main_Inc(i92:0:0 - 1, o84[List3.next]o90:0:0) :|: o84[List3.next]o90:0:0 > o84[List3.next]o83:0:0 && i92:0:0 > 0 && o84[List3.next]o83:0:0 > 0
f1316_0_main_Inc(x2:0, x3:0) -> f1316_0_main_Inc(x2:0 - 1, 1) :|: x2:0 > 0

----------------------------------------

(31) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f1316_0_main_Inc(INTEGER, VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(32)
Obligation:
Rules:
f1316_0_main_Inc(i92:0:0, o84[List3.next]o83:0:0) -> f1316_0_main_Inc(c, o84[List3.next]o90:0:0) :|: c = i92:0:0 - 1 && (o84[List3.next]o90:0:0 > o84[List3.next]o83:0:0 && i92:0:0 > 0 && o84[List3.next]o83:0:0 > 0)
f1316_0_main_Inc(x2:0, x3:0) -> f1316_0_main_Inc(c1, c2) :|: c2 = 1 && c1 = x2:0 - 1 && x2:0 > 0

----------------------------------------

(33) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f1316_0_main_Inc(x, x1)] = x

The following rules are decreasing:
f1316_0_main_Inc(i92:0:0, o84[List3.next]o83:0:0) -> f1316_0_main_Inc(c, o84[List3.next]o90:0:0) :|: c = i92:0:0 - 1 && (o84[List3.next]o90:0:0 > o84[List3.next]o83:0:0 && i92:0:0 > 0 && o84[List3.next]o83:0:0 > 0)
f1316_0_main_Inc(x2:0, x3:0) -> f1316_0_main_Inc(c1, c2) :|: c2 = 1 && c1 = x2:0 - 1 && x2:0 > 0
The following rules are bounded:
f1316_0_main_Inc(i92:0:0, o84[List3.next]o83:0:0) -> f1316_0_main_Inc(c, o84[List3.next]o90:0:0) :|: c = i92:0:0 - 1 && (o84[List3.next]o90:0:0 > o84[List3.next]o83:0:0 && i92:0:0 > 0 && o84[List3.next]o83:0:0 > 0)
f1316_0_main_Inc(x2:0, x3:0) -> f1316_0_main_Inc(c1, c2) :|: c2 = 1 && c1 = x2:0 - 1 && x2:0 > 0

----------------------------------------

(34)
YES
