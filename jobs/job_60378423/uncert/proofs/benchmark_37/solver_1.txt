YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/hIXVf.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 153 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 1 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 36 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 14 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 27 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
(18) IntTRS
(19) RankingReductionPairProof [EQUIVALENT, 0 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaA1 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        while (x > 0) {
            int y = 0;
            while (y < x) {
                y++;
            }
            x--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaA1 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        while (x > 0) {
            int y = 0;
            while (y < x) {
                y++;
            }
            x--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaA1.main([Ljava/lang/String;)V: Graph of 120 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaA1.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 20 IRulesP rules:
f345_0_main_LE(EOS(STATIC_345), i35, i35) -> f348_0_main_LE(EOS(STATIC_348), i35, i35) :|: TRUE
f348_0_main_LE(EOS(STATIC_348), i35, i35) -> f350_0_main_ConstantStackPush(EOS(STATIC_350), i35) :|: i35 > 0
f350_0_main_ConstantStackPush(EOS(STATIC_350), i35) -> f353_0_main_Store(EOS(STATIC_353), i35, 0) :|: TRUE
f353_0_main_Store(EOS(STATIC_353), i35, matching1) -> f356_0_main_Load(EOS(STATIC_356), i35, 0) :|: TRUE && matching1 = 0
f356_0_main_Load(EOS(STATIC_356), i35, matching1) -> f400_0_main_Load(EOS(STATIC_400), i35, 0) :|: TRUE && matching1 = 0
f400_0_main_Load(EOS(STATIC_400), i35, i36) -> f490_0_main_Load(EOS(STATIC_490), i35, i36) :|: TRUE
f490_0_main_Load(EOS(STATIC_490), i35, i43) -> f2225_0_main_Load(EOS(STATIC_2225), i35, i43) :|: TRUE
f2225_0_main_Load(EOS(STATIC_2225), i35, i67) -> f2227_0_main_Load(EOS(STATIC_2227), i35, i67, i67) :|: TRUE
f2227_0_main_Load(EOS(STATIC_2227), i35, i67, i67) -> f2228_0_main_GE(EOS(STATIC_2228), i35, i67, i67, i35) :|: TRUE
f2228_0_main_GE(EOS(STATIC_2228), i35, i67, i67, i35) -> f2229_0_main_GE(EOS(STATIC_2229), i35, i67, i67, i35) :|: i67 >= i35
f2228_0_main_GE(EOS(STATIC_2228), i35, i67, i67, i35) -> f2230_0_main_GE(EOS(STATIC_2230), i35, i67, i67, i35) :|: i67 < i35
f2229_0_main_GE(EOS(STATIC_2229), i35, i67, i67, i35) -> f2231_0_main_Inc(EOS(STATIC_2231), i35) :|: i67 >= i35
f2231_0_main_Inc(EOS(STATIC_2231), i35) -> f2233_0_main_JMP(EOS(STATIC_2233), i35 + -1) :|: TRUE
f2233_0_main_JMP(EOS(STATIC_2233), i70) -> f2235_0_main_Load(EOS(STATIC_2235), i70) :|: TRUE
f2235_0_main_Load(EOS(STATIC_2235), i70) -> f339_0_main_Load(EOS(STATIC_339), i70) :|: TRUE
f339_0_main_Load(EOS(STATIC_339), i33) -> f345_0_main_LE(EOS(STATIC_345), i33, i33) :|: TRUE
f2230_0_main_GE(EOS(STATIC_2230), i35, i67, i67, i35) -> f2232_0_main_Inc(EOS(STATIC_2232), i35, i67) :|: i67 < i35
f2232_0_main_Inc(EOS(STATIC_2232), i35, i67) -> f2234_0_main_JMP(EOS(STATIC_2234), i35, i67 + 1) :|: TRUE
f2234_0_main_JMP(EOS(STATIC_2234), i35, i71) -> f2236_0_main_Load(EOS(STATIC_2236), i35, i71) :|: TRUE
f2236_0_main_Load(EOS(STATIC_2236), i35, i71) -> f2225_0_main_Load(EOS(STATIC_2225), i35, i71) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f2228_0_main_GE(EOS(STATIC_2228), i35:0, i67:0, i67:0, i35:0) -> f2228_0_main_GE(EOS(STATIC_2228), i35:0 - 1, 0, 0, i35:0 - 1) :|: i35:0 > 1 && i67:0 >= i35:0
f2228_0_main_GE(EOS(STATIC_2228), i35:0, i67:0, i67:0, i35:0) -> f2228_0_main_GE(EOS(STATIC_2228), i35:0, i67:0 + 1, i67:0 + 1, i35:0) :|: i67:0 < i35:0
Filtered constant ground arguments:
   f2228_0_main_GE(x1, x2, x3, x4, x5) -> f2228_0_main_GE(x2, x3, x4, x5)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f2228_0_main_GE(x1, x2, x3, x4) -> f2228_0_main_GE(x3, x4)
Finished conversion. Obtained 2 rules.P rules:
f2228_0_main_GE(i67:0, i35:0) -> f2228_0_main_GE(0, i35:0 - 1) :|: i35:0 > 1 && i67:0 >= i35:0
f2228_0_main_GE(i67:0, i35:0) -> f2228_0_main_GE(i67:0 + 1, i35:0) :|: i67:0 < i35:0

----------------------------------------

(8)
Obligation:
Rules:
f2228_0_main_GE(i67:0, i35:0) -> f2228_0_main_GE(0, i35:0 - 1) :|: i35:0 > 1 && i67:0 >= i35:0
f2228_0_main_GE(x, x1) -> f2228_0_main_GE(x + 1, x1) :|: x < x1

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f2228_0_main_GE(i67:0, i35:0) -> f2228_0_main_GE(0, arith) :|: i35:0 > 1 && i67:0 >= i35:0 && arith = i35:0 - 1
f2228_0_main_GE(x2, x3) -> f2228_0_main_GE(x4, x3) :|: x2 < x3 && x4 = x2 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2228_0_main_GE(i67:0, i35:0) -> f2228_0_main_GE(0, arith) :|: i35:0 > 1 && i67:0 >= i35:0 && arith = i35:0 - 1
(2) f2228_0_main_GE(x2, x3) -> f2228_0_main_GE(x4, x3) :|: x2 < x3 && x4 = x2 + 1

Arcs:
(1) -> (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f2228_0_main_GE(i67:0, i35:0) -> f2228_0_main_GE(0, arith) :|: i35:0 > 1 && i67:0 >= i35:0 && arith = i35:0 - 1
(2) f2228_0_main_GE(x2, x3) -> f2228_0_main_GE(x4, x3) :|: x2 < x3 && x4 = x2 + 1

Arcs:
(1) -> (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f2228_0_main_GE(i67:0:0, i35:0:0) -> f2228_0_main_GE(0, i35:0:0 - 1) :|: i35:0:0 > 1 && i67:0:0 >= i35:0:0
f2228_0_main_GE(x2:0, x3:0) -> f2228_0_main_GE(x2:0 + 1, x3:0) :|: x3:0 > x2:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2228_0_main_GE(VARIABLE, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f2228_0_main_GE(i67:0:0, i35:0:0) -> f2228_0_main_GE(c, c1) :|: c1 = i35:0:0 - 1 && c = 0 && (i35:0:0 > 1 && i67:0:0 >= i35:0:0)
f2228_0_main_GE(x2:0, x3:0) -> f2228_0_main_GE(c2, x3:0) :|: c2 = x2:0 + 1 && x3:0 > x2:0

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f2228_0_main_GE(x, x1)] = -2 + x1

The following rules are decreasing:
f2228_0_main_GE(i67:0:0, i35:0:0) -> f2228_0_main_GE(c, c1) :|: c1 = i35:0:0 - 1 && c = 0 && (i35:0:0 > 1 && i67:0:0 >= i35:0:0)
The following rules are bounded:
f2228_0_main_GE(i67:0:0, i35:0:0) -> f2228_0_main_GE(c, c1) :|: c1 = i35:0:0 - 1 && c = 0 && (i35:0:0 > 1 && i67:0:0 >= i35:0:0)

----------------------------------------

(18)
Obligation:
Rules:
f2228_0_main_GE(x2:0, x3:0) -> f2228_0_main_GE(c2, x3:0) :|: c2 = x2:0 + 1 && x3:0 > x2:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f2228_0_main_GE ] = f2228_0_main_GE_2 + -1*f2228_0_main_GE_1

The following rules are decreasing:
f2228_0_main_GE(x2:0, x3:0) -> f2228_0_main_GE(c2, x3:0) :|: c2 = x2:0 + 1 && x3:0 > x2:0

The following rules are bounded:
f2228_0_main_GE(x2:0, x3:0) -> f2228_0_main_GE(c2, x3:0) :|: c2 = x2:0 + 1 && x3:0 > x2:0


----------------------------------------

(20)
YES
