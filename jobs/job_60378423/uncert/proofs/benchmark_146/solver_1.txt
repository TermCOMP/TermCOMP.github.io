NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/dmnI3.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 346 ms]
(4) JBCTerminationGraph
(5) JBCNonTerm [COMPLETE, 1670 ms]
(6) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.narrowing;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Narrowing.loop(args.length);
	}

}


package simple.narrowing;

public class Narrowing {

	public static void loop(int i) {
		int range = 20;
		boolean up = false;
		while (0 <= i && i <= range) {
			if (i == 0) {
				up = true;
			} 
			if (i == range) {
				up = false;
			}
			if (up) {
				i++;
			}
			if (!up) {
				i--;
			}
			if (i == range-2) {
				range--;
			}
		}
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.narrowing;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Narrowing.loop(args.length);
	}

}


package simple.narrowing;

public class Narrowing {

	public static void loop(int i) {
		int range = 20;
		boolean up = false;
		while (0 <= i && i <= range) {
			if (i == 0) {
				up = true;
			} 
			if (i == range) {
				up = false;
			}
			if (up) {
				i++;
			}
			if (!up) {
				i--;
			}
			if (i == range-2) {
				range--;
			}
		}
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
simple.narrowing.Main.main([Ljava/lang/String;)V: Graph of 117 nodes with 1 SCC.





----------------------------------------

(5) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<simple.narrowing.Main.main||0: load ADDR args||args: a220|| ->
	a220([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
1:<simple.narrowing.Main.main||1: arraylength|| - ||a220>
	a220([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
2:<simple.narrowing.Main.main||2: simple.narrowing.Narrowing.loop(I)V|| - ||1>
YES:  (JL1)
3:<simple.narrowing.Narrowing.loop||0: push 20||i: 1|| ->
<simple.narrowing.Main.main||2: simple.narrowing.Narrowing.loop|| - || ->
YES:  (JL1)
4:<simple.narrowing.Narrowing.loop||2: store INT to range||i: 1||20>
<simple.narrowing.Main.main||2: simple.narrowing.Narrowing.loop|| - || ->
YES:  (JL1)
5:<simple.narrowing.Narrowing.loop||3: push 0||i: 1, range: 20|| ->
<simple.narrowing.Main.main||2: simple.narrowing.Narrowing.loop|| - || ->
YES:  (JL1)
6:<simple.narrowing.Narrowing.loop||4: store INT to up||i: 1, range: 20||0>
<simple.narrowing.Main.main||2: simple.narrowing.Narrowing.loop|| - || ->
YES:  (JL1)
7:<simple.narrowing.Narrowing.loop||5: push 0||i: 1, range: 20, up: 0|| ->
<simple.narrowing.Main.main||2: simple.narrowing.Narrowing.loop|| - || ->
YES:  (JL1)
Start state of loop: 

<simple.narrowing.Narrowing.loop||5: push 0||i: i365, range: i366, up: i367|| ->
[a66(lv_0_0)]
<simple.narrowing.Main.main||2: simple.narrowing.Narrowing.loop|| - || ->
	i365: #
	i366: #
	i367: #
	i20: [0,+inf)(l1)
	a66([java.lang.String...]): length i20 -->{java.lang.Object...}
YES:  (JL1)


In the loop head node, references [i365, i366, i367] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

(0 <= initial_i20 and ((((path1_i365 = path1_i375 and path1_i366 = path1_i377 and path1_i375 = path1_i376 and path1_i367 = path1_i380 and path1_i383 = (path1_i376 + 1) and path1_i397 = (path1_i377 - 2) and path1_i383 = res_i365 and path1_i377 = res_i366 and path1_i380 = res_i367 and path1_i365 = initial_i365 and path1_i366 = initial_i366 and path1_i367 = initial_i367) and (T and 0 = 0 and 0 <= path1_i375 and path1_i375 <= path1_i366 and path1_i375 <= path1_i366 and path1_i376 > 0 and path1_i376 != path1_i377 and path1_i376 < path1_i377 and path1_i380 != 0 and path1_i380 != 0 and path1_i383 != path1_i397 and path1_i383 != path1_i397)) or ((path2_i365 = path2_i375 and path2_i366 = path2_i377 and path2_i375 = path2_i376 and path2_i388 = (path2_i376 + -1) and path2_i398 = (path2_i377 - 2) and path2_i388 = res_i365 and path2_i377 = res_i366 and 0 = res_i367 and path2_i365 = initial_i365 and path2_i366 = initial_i366 and path2_i367 = initial_i367) and (T and 0 = 0 and 0 <= path2_i375 and path2_i375 <= path2_i366 and path2_i375 <= path2_i366 and path2_i376 > 0 and path2_i376 != path2_i377 and path2_i376 < path2_i377 and path2_i367 = 0 and T and T and path2_i388 != path2_i398 and path2_i388 != path2_i398)) or ((path3_i365 = path3_i375 and path3_i366 = path3_i379 and path3_i400 = (path3_i379 - 2) and path3_i400 = path3_i415 and 1 = res_i365 and 1 = res_i367 and path3_i379 = res_i366 and path3_i365 = initial_i365 and path3_i366 = initial_i366 and path3_i367 = initial_i367) and (T and 0 = 0 and 0 <= path3_i375 and path3_i375 <= path3_i366 and path3_i375 <= path3_i366 and path3_i375 = 0 and T and T and 0 = 0 and 0 < path3_i379 and 1 > 0 and 1 > 0 and T and 1 = 1 and 1 > path3_i415)) or ((path4_i365 = path4_i375 and path4_i366 = path4_i379 and path4_i400 = (path4_i379 - 2) and path4_i379 = path4_i417 and path4_i400 = path4_i416 and 1 = res_i365 and 1 = res_i367 and path4_i417 = res_i366 and path4_i365 = initial_i365 and path4_i366 = initial_i366 and path4_i367 = initial_i367) and (T and 0 = 0 and 0 <= path4_i375 and path4_i375 <= path4_i366 and path4_i375 <= path4_i366 and path4_i375 = 0 and T and T and 0 = 0 and 0 < path4_i379 and 1 > 0 and 1 > 0 and T and 1 = 1 and 1 < path4_i416)) or ((path5_i365 = path5_i375 and path5_i366 = path5_i377 and path5_i375 = path5_i376 and path5_i367 = path5_i380 and path5_i383 = (path5_i376 + 1) and path5_i397 = (path5_i377 - 2) and path5_i418 = (path5_i377 + -1) and path5_i397 = res_i365 and path5_i418 = res_i366 and path5_i380 = res_i367 and path5_i365 = initial_i365 and path5_i366 = initial_i366 and path5_i367 = initial_i367) and (T and 0 = 0 and 0 <= path5_i375 and path5_i375 <= path5_i366 and path5_i375 <= path5_i366 and path5_i376 > 0 and path5_i376 != path5_i377 and path5_i376 < path5_i377 and path5_i380 != 0 and path5_i380 != 0 and path5_i383 = path5_i397 and path5_i397 = path5_i397)) or ((path6_i365 = path6_i375 and path6_i366 = path6_i377 and path6_i375 = path6_i376 and path6_i388 = (path6_i376 + -1) and path6_i398 = (path6_i377 - 2) and path6_i419 = (path6_i377 + -1) and path6_i398 = res_i365 and path6_i419 = res_i366 and 0 = res_i367 and path6_i365 = initial_i365 and path6_i366 = initial_i366 and path6_i367 = initial_i367) and (T and 0 = 0 and 0 <= path6_i375 and path6_i375 <= path6_i366 and path6_i375 <= path6_i366 and path6_i376 > 0 and path6_i376 != path6_i377 and path6_i376 < path6_i377 and path6_i367 = 0 and T and T and path6_i388 = path6_i398 and path6_i398 = path6_i398)) or ((path7_i365 = path7_i375 and path7_i366 = path7_i377 and path7_i375 = path7_i376 and path7_i392 = (path7_i377 + -1) and path7_i392 = path7_i388 and path7_i398 = (path7_i377 - 2) and path7_i388 = res_i365 and path7_i377 = res_i366 and 0 = res_i367 and path7_i365 = initial_i365 and path7_i366 = initial_i366 and path7_i367 = initial_i367) and (T and 0 = 0 and 0 <= path7_i375 and path7_i375 <= path7_i366 and path7_i375 <= path7_i366 and path7_i376 > 0 and path7_i376 = path7_i377 and path7_i377 = path7_i377 and T and T and path7_i388 != path7_i398 and path7_i388 != path7_i398)) or ((path9_i365 = path9_i375 and path9_i366 = path9_i379 and path9_i400 = (path9_i379 - 2) and path9_i434 = (path9_i379 + -1) and 1 = res_i365 and 1 = res_i367 and path9_i434 = res_i366 and path9_i365 = initial_i365 and path9_i366 = initial_i366 and path9_i367 = initial_i367) and (T and 0 = 0 and 0 <= path9_i375 and path9_i375 <= path9_i366 and path9_i375 <= path9_i366 and path9_i375 = 0 and T and T and 0 = 0 and 0 < path9_i379 and 1 > 0 and 1 > 0 and T and path9_i400 = 1)) or ((path10_i365 = path10_i375 and path10_i366 = path10_i377 and path10_i375 = path10_i376 and path10_i392 = (path10_i377 + -1) and path10_i392 = path10_i388 and path10_i398 = (path10_i377 - 2) and path10_i419 = (path10_i377 + -1) and path10_i398 = res_i365 and path10_i419 = res_i366 and 0 = res_i367 and path10_i365 = initial_i365 and path10_i366 = initial_i366 and path10_i367 = initial_i367) and (T and 0 = 0 and 0 <= path10_i375 and path10_i375 <= path10_i366 and path10_i375 <= path10_i366 and path10_i376 > 0 and path10_i376 = path10_i377 and path10_i377 = path10_i377 and T and T and path10_i388 = path10_i398 and path10_i398 = path10_i398)) or ((path1_i365 = path1_i375 and path1_i366 = path1_i377 and path1_i375 = path1_i376 and path1_i367 = path1_i380 and path1_i383 = (path1_i376 + 1) and path1_i397 = (path1_i377 - 2) and path1_i383 = res_i365 and path1_i377 = res_i366 and path1_i380 = res_i367 and path1_i365 = initial_i365 and path1_i366 = initial_i366 and path1_i367 = initial_i367) and (T and 0 = 0 and 0 <= path1_i375 and path1_i375 <= path1_i366 and path1_i375 <= path1_i366 and path1_i376 > 0 and path1_i376 < path1_i377 and path1_i380 != 0 and path1_i380 != 0 and path1_i383 != path1_i397 and path1_i383 != path1_i397 and path1_i376 < path1_i377)) or ((path1_i365 = path1_i375 and path1_i366 = path1_i377 and path1_i375 = path1_i376 and path1_i367 = path1_i380 and path1_i383 = (path1_i376 + 1) and path1_i397 = (path1_i377 - 2) and path1_i383 = res_i365 and path1_i377 = res_i366 and path1_i380 = res_i367 and path1_i365 = initial_i365 and path1_i366 = initial_i366 and path1_i367 = initial_i367) and (T and 0 = 0 and 0 <= path1_i375 and path1_i375 <= path1_i366 and path1_i375 <= path1_i366 and path1_i376 > 0 and path1_i376 < path1_i377 and path1_i380 != 0 and path1_i380 != 0 and path1_i383 != path1_i397 and path1_i383 != path1_i397 and path1_i376 > path1_i377)) or ((path1_i365 = path1_i375 and path1_i366 = path1_i377 and path1_i375 = path1_i376 and path1_i367 = path1_i380 and path1_i383 = (path1_i376 + 1) and path1_i397 = (path1_i377 - 2) and path1_i383 = res_i365 and path1_i377 = res_i366 and path1_i380 = res_i367 and path1_i365 = initial_i365 and path1_i366 = initial_i366 and path1_i367 = initial_i367) and (T and 0 = 0 and 0 <= path1_i375 and path1_i375 <= path1_i366 and path1_i375 <= path1_i366 and path1_i376 > 0 and path1_i376 != path1_i377 and path1_i376 < path1_i377 and path1_i380 != 0 and path1_i383 != path1_i397 and path1_i383 != path1_i397 and path1_i380 < 0)) or ((path1_i365 = path1_i375 and path1_i366 = path1_i377 and path1_i375 = path1_i376 and path1_i367 = path1_i380 and path1_i383 = (path1_i376 + 1) and path1_i397 = (path1_i377 - 2) and path1_i383 = res_i365 and path1_i377 = res_i366 and path1_i380 = res_i367 and path1_i365 = initial_i365 and path1_i366 = initial_i366 and path1_i367 = initial_i367) and (T and 0 = 0 and 0 <= path1_i375 and path1_i375 <= path1_i366 and path1_i375 <= path1_i366 and path1_i376 > 0 and path1_i376 != path1_i377 and path1_i376 < path1_i377 and path1_i380 != 0 and path1_i383 != path1_i397 and path1_i383 != path1_i397 and path1_i380 > 0))) and (((res1_i365 = res1_i375 and res1_i366 = res1_i377 and res1_i375 = res1_i376 and res1_i367 = res1_i380 and res1_i383 = (res1_i376 + 1) and res1_i397 = (res1_i377 - 2) and res_i365 = res1_i365 and res_i366 = res1_i366 and res_i367 = res1_i367) and !(T and 0 = 0 and 0 <= res1_i375 and res1_i375 <= res1_i366 and res1_i375 <= res1_i366 and res1_i376 > 0 and res1_i376 != res1_i377 and res1_i376 < res1_i377 and res1_i380 != 0 and res1_i380 != 0 and res1_i383 != res1_i397 and res1_i383 != res1_i397)) and ((res2_i365 = res2_i375 and res2_i366 = res2_i377 and res2_i375 = res2_i376 and res2_i388 = (res2_i376 + -1) and res2_i398 = (res2_i377 - 2) and res_i365 = res2_i365 and res_i366 = res2_i366 and res_i367 = res2_i367) and !(T and 0 = 0 and 0 <= res2_i375 and res2_i375 <= res2_i366 and res2_i375 <= res2_i366 and res2_i376 > 0 and res2_i376 != res2_i377 and res2_i376 < res2_i377 and res2_i367 = 0 and T and T and res2_i388 != res2_i398 and res2_i388 != res2_i398)) and ((res3_i365 = res3_i375 and res3_i366 = res3_i379 and res3_i400 = (res3_i379 - 2) and res3_i400 = res3_i415 and res_i365 = res3_i365 and res_i366 = res3_i366 and res_i367 = res3_i367) and !(T and 0 = 0 and 0 <= res3_i375 and res3_i375 <= res3_i366 and res3_i375 <= res3_i366 and res3_i375 = 0 and T and T and 0 = 0 and 0 < res3_i379 and 1 > 0 and 1 > 0 and T and 1 = 1 and 1 > res3_i415)) and ((res4_i365 = res4_i375 and res4_i366 = res4_i379 and res4_i400 = (res4_i379 - 2) and res4_i379 = res4_i417 and res4_i400 = res4_i416 and res_i365 = res4_i365 and res_i366 = res4_i366 and res_i367 = res4_i367) and !(T and 0 = 0 and 0 <= res4_i375 and res4_i375 <= res4_i366 and res4_i375 <= res4_i366 and res4_i375 = 0 and T and T and 0 = 0 and 0 < res4_i379 and 1 > 0 and 1 > 0 and T and 1 = 1 and 1 < res4_i416)) and ((res5_i365 = res5_i375 and res5_i366 = res5_i377 and res5_i375 = res5_i376 and res5_i367 = res5_i380 and res5_i383 = (res5_i376 + 1) and res5_i397 = (res5_i377 - 2) and res5_i418 = (res5_i377 + -1) and res_i365 = res5_i365 and res_i366 = res5_i366 and res_i367 = res5_i367) and !(T and 0 = 0 and 0 <= res5_i375 and res5_i375 <= res5_i366 and res5_i375 <= res5_i366 and res5_i376 > 0 and res5_i376 != res5_i377 and res5_i376 < res5_i377 and res5_i380 != 0 and res5_i380 != 0 and res5_i383 = res5_i397 and res5_i397 = res5_i397)) and ((res6_i365 = res6_i375 and res6_i366 = res6_i377 and res6_i375 = res6_i376 and res6_i388 = (res6_i376 + -1) and res6_i398 = (res6_i377 - 2) and res6_i419 = (res6_i377 + -1) and res_i365 = res6_i365 and res_i366 = res6_i366 and res_i367 = res6_i367) and !(T and 0 = 0 and 0 <= res6_i375 and res6_i375 <= res6_i366 and res6_i375 <= res6_i366 and res6_i376 > 0 and res6_i376 != res6_i377 and res6_i376 < res6_i377 and res6_i367 = 0 and T and T and res6_i388 = res6_i398 and res6_i398 = res6_i398)) and ((res7_i365 = res7_i375 and res7_i366 = res7_i377 and res7_i375 = res7_i376 and res7_i392 = (res7_i377 + -1) and res7_i392 = res7_i388 and res7_i398 = (res7_i377 - 2) and res_i365 = res7_i365 and res_i366 = res7_i366 and res_i367 = res7_i367) and !(T and 0 = 0 and 0 <= res7_i375 and res7_i375 <= res7_i366 and res7_i375 <= res7_i366 and res7_i376 > 0 and res7_i376 = res7_i377 and res7_i377 = res7_i377 and T and T and res7_i388 != res7_i398 and res7_i388 != res7_i398)) and ((res9_i365 = res9_i375 and res9_i366 = res9_i379 and res9_i400 = (res9_i379 - 2) and res9_i434 = (res9_i379 + -1) and res_i365 = res9_i365 and res_i366 = res9_i366 and res_i367 = res9_i367) and !(T and 0 = 0 and 0 <= res9_i375 and res9_i375 <= res9_i366 and res9_i375 <= res9_i366 and res9_i375 = 0 and T and T and 0 = 0 and 0 < res9_i379 and 1 > 0 and 1 > 0 and T and res9_i400 = 1)) and ((res10_i365 = res10_i375 and res10_i366 = res10_i377 and res10_i375 = res10_i376 and res10_i392 = (res10_i377 + -1) and res10_i392 = res10_i388 and res10_i398 = (res10_i377 - 2) and res10_i419 = (res10_i377 + -1) and res_i365 = res10_i365 and res_i366 = res10_i366 and res_i367 = res10_i367) and !(T and 0 = 0 and 0 <= res10_i375 and res10_i375 <= res10_i366 and res10_i375 <= res10_i366 and res10_i376 > 0 and res10_i376 = res10_i377 and res10_i377 = res10_i377 and T and T and res10_i388 = res10_i398 and res10_i398 = res10_i398)) and ((res1_i365 = res1_i375 and res1_i366 = res1_i377 and res1_i375 = res1_i376 and res1_i367 = res1_i380 and res1_i383 = (res1_i376 + 1) and res1_i397 = (res1_i377 - 2) and res_i365 = res1_i365 and res_i366 = res1_i366 and res_i367 = res1_i367) and !(T and 0 = 0 and 0 <= res1_i375 and res1_i375 <= res1_i366 and res1_i375 <= res1_i366 and res1_i376 > 0 and res1_i376 < res1_i377 and res1_i380 != 0 and res1_i380 != 0 and res1_i383 != res1_i397 and res1_i383 != res1_i397 and res1_i376 < res1_i377)) and ((res1_i365 = res1_i375 and res1_i366 = res1_i377 and res1_i375 = res1_i376 and res1_i367 = res1_i380 and res1_i383 = (res1_i376 + 1) and res1_i397 = (res1_i377 - 2) and res_i365 = res1_i365 and res_i366 = res1_i366 and res_i367 = res1_i367) and !(T and 0 = 0 and 0 <= res1_i375 and res1_i375 <= res1_i366 and res1_i375 <= res1_i366 and res1_i376 > 0 and res1_i376 < res1_i377 and res1_i380 != 0 and res1_i380 != 0 and res1_i383 != res1_i397 and res1_i383 != res1_i397 and res1_i376 > res1_i377)) and ((res1_i365 = res1_i375 and res1_i366 = res1_i377 and res1_i375 = res1_i376 and res1_i367 = res1_i380 and res1_i383 = (res1_i376 + 1) and res1_i397 = (res1_i377 - 2) and res_i365 = res1_i365 and res_i366 = res1_i366 and res_i367 = res1_i367) and !(T and 0 = 0 and 0 <= res1_i375 and res1_i375 <= res1_i366 and res1_i375 <= res1_i366 and res1_i376 > 0 and res1_i376 != res1_i377 and res1_i376 < res1_i377 and res1_i380 != 0 and res1_i383 != res1_i397 and res1_i383 != res1_i397 and res1_i380 < 0)) and ((res1_i365 = res1_i375 and res1_i366 = res1_i377 and res1_i375 = res1_i376 and res1_i367 = res1_i380 and res1_i383 = (res1_i376 + 1) and res1_i397 = (res1_i377 - 2) and res_i365 = res1_i365 and res_i366 = res1_i366 and res_i367 = res1_i367) and !(T and 0 = 0 and 0 <= res1_i375 and res1_i375 <= res1_i366 and res1_i375 <= res1_i366 and res1_i376 > 0 and res1_i376 != res1_i377 and res1_i376 < res1_i377 and res1_i380 != 0 and res1_i383 != res1_i397 and res1_i383 != res1_i397 and res1_i380 > 0)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(6)
NO
