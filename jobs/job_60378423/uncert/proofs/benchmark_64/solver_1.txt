YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Dg1H3.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 172 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 19 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 25 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 28 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
(18) IntTRS
(19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaC2 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();

        while (x >= 0) {
            x = x+1;
            int y = 1;
            while (x >= y) {
                y++;
            }
            x = x-2;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaC2 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();

        while (x >= 0) {
            x = x+1;
            int y = 1;
            while (x >= y) {
                y++;
            }
            x = x-2;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaC2.main([Ljava/lang/String;)V: Graph of 127 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaC2.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 27 IRulesP rules:
f2606_0_main_LT(EOS(STATIC_2606), i66, i66) -> f2613_0_main_LT(EOS(STATIC_2613), i66, i66) :|: TRUE
f2613_0_main_LT(EOS(STATIC_2613), i66, i66) -> f2616_0_main_Load(EOS(STATIC_2616), i66) :|: i66 >= 0
f2616_0_main_Load(EOS(STATIC_2616), i66) -> f2618_0_main_ConstantStackPush(EOS(STATIC_2618), i66) :|: TRUE
f2618_0_main_ConstantStackPush(EOS(STATIC_2618), i66) -> f2619_0_main_IntArithmetic(EOS(STATIC_2619), i66, 1) :|: TRUE
f2619_0_main_IntArithmetic(EOS(STATIC_2619), i66, matching1) -> f2621_0_main_Store(EOS(STATIC_2621), i66 + 1) :|: i66 >= 0 && matching1 = 1
f2621_0_main_Store(EOS(STATIC_2621), i67) -> f2624_0_main_ConstantStackPush(EOS(STATIC_2624), i67) :|: TRUE
f2624_0_main_ConstantStackPush(EOS(STATIC_2624), i67) -> f2627_0_main_Store(EOS(STATIC_2627), i67, 1) :|: TRUE
f2627_0_main_Store(EOS(STATIC_2627), i67, matching1) -> f2628_0_main_Load(EOS(STATIC_2628), i67, 1) :|: TRUE && matching1 = 1
f2628_0_main_Load(EOS(STATIC_2628), i67, matching1) -> f2684_0_main_Load(EOS(STATIC_2684), i67, 1) :|: TRUE && matching1 = 1
f2684_0_main_Load(EOS(STATIC_2684), i67, i68) -> f2699_0_main_Load(EOS(STATIC_2699), i67, i68) :|: TRUE
f2699_0_main_Load(EOS(STATIC_2699), i67, i71) -> f2710_0_main_Load(EOS(STATIC_2710), i67, i71) :|: TRUE
f2710_0_main_Load(EOS(STATIC_2710), i67, i74) -> f2711_0_main_Load(EOS(STATIC_2711), i67, i74, i67) :|: TRUE
f2711_0_main_Load(EOS(STATIC_2711), i67, i74, i67) -> f2712_0_main_LT(EOS(STATIC_2712), i67, i74, i67, i74) :|: TRUE
f2712_0_main_LT(EOS(STATIC_2712), i67, i74, i67, i74) -> f2726_0_main_LT(EOS(STATIC_2726), i67, i74, i67, i74) :|: i67 < i74
f2712_0_main_LT(EOS(STATIC_2712), i67, i74, i67, i74) -> f2728_0_main_LT(EOS(STATIC_2728), i67, i74, i67, i74) :|: i67 >= i74
f2726_0_main_LT(EOS(STATIC_2726), i67, i74, i67, i74) -> f2734_0_main_Load(EOS(STATIC_2734), i67) :|: i67 < i74
f2734_0_main_Load(EOS(STATIC_2734), i67) -> f2742_0_main_ConstantStackPush(EOS(STATIC_2742), i67) :|: TRUE
f2742_0_main_ConstantStackPush(EOS(STATIC_2742), i67) -> f2746_0_main_IntArithmetic(EOS(STATIC_2746), i67, 2) :|: TRUE
f2746_0_main_IntArithmetic(EOS(STATIC_2746), i67, matching1) -> f2765_0_main_Store(EOS(STATIC_2765), i67 - 2) :|: i67 > 0 && matching1 = 2
f2765_0_main_Store(EOS(STATIC_2765), i78) -> f2766_0_main_JMP(EOS(STATIC_2766), i78) :|: TRUE
f2766_0_main_JMP(EOS(STATIC_2766), i78) -> f2783_0_main_Load(EOS(STATIC_2783), i78) :|: TRUE
f2783_0_main_Load(EOS(STATIC_2783), i78) -> f2600_0_main_Load(EOS(STATIC_2600), i78) :|: TRUE
f2600_0_main_Load(EOS(STATIC_2600), i64) -> f2606_0_main_LT(EOS(STATIC_2606), i64, i64) :|: TRUE
f2728_0_main_LT(EOS(STATIC_2728), i67, i74, i67, i74) -> f2739_0_main_Inc(EOS(STATIC_2739), i67, i74) :|: i67 >= i74
f2739_0_main_Inc(EOS(STATIC_2739), i67, i74) -> f2745_0_main_JMP(EOS(STATIC_2745), i67, i74 + 1) :|: TRUE
f2745_0_main_JMP(EOS(STATIC_2745), i67, i76) -> f2763_0_main_Load(EOS(STATIC_2763), i67, i76) :|: TRUE
f2763_0_main_Load(EOS(STATIC_2763), i67, i76) -> f2710_0_main_Load(EOS(STATIC_2710), i67, i76) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f2712_0_main_LT(EOS(STATIC_2712), i67:0, i74:0, i67:0, i74:0) -> f2712_0_main_LT(EOS(STATIC_2712), i67:0, i74:0 + 1, i67:0, i74:0 + 1) :|: i74:0 <= i67:0
f2712_0_main_LT(EOS(STATIC_2712), i67:0, i74:0, i67:0, i74:0) -> f2712_0_main_LT(EOS(STATIC_2712), i67:0 - 1, 1, i67:0 - 1, 1) :|: i67:0 > 1 && i74:0 > i67:0
Filtered constant ground arguments:
   f2712_0_main_LT(x1, x2, x3, x4, x5) -> f2712_0_main_LT(x2, x3, x4, x5)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f2712_0_main_LT(x1, x2, x3, x4) -> f2712_0_main_LT(x3, x4)
Finished conversion. Obtained 2 rules.P rules:
f2712_0_main_LT(i67:0, i74:0) -> f2712_0_main_LT(i67:0, i74:0 + 1) :|: i74:0 <= i67:0
f2712_0_main_LT(i67:0, i74:0) -> f2712_0_main_LT(i67:0 - 1, 1) :|: i67:0 > 1 && i74:0 > i67:0

----------------------------------------

(8)
Obligation:
Rules:
f2712_0_main_LT(i67:0, i74:0) -> f2712_0_main_LT(i67:0, i74:0 + 1) :|: i74:0 <= i67:0
f2712_0_main_LT(x, x1) -> f2712_0_main_LT(x - 1, 1) :|: x > 1 && x1 > x

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f2712_0_main_LT(i67:0, i74:0) -> f2712_0_main_LT(i67:0, arith) :|: i74:0 <= i67:0 && arith = i74:0 + 1
f2712_0_main_LT(x2, x3) -> f2712_0_main_LT(x4, 1) :|: x2 > 1 && x3 > x2 && x4 = x2 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2712_0_main_LT(i67:0, i74:0) -> f2712_0_main_LT(i67:0, arith) :|: i74:0 <= i67:0 && arith = i74:0 + 1
(2) f2712_0_main_LT(x2, x3) -> f2712_0_main_LT(x4, 1) :|: x2 > 1 && x3 > x2 && x4 = x2 - 1

Arcs:
(1) -> (1), (2)
(2) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f2712_0_main_LT(i67:0, i74:0) -> f2712_0_main_LT(i67:0, arith) :|: i74:0 <= i67:0 && arith = i74:0 + 1
(2) f2712_0_main_LT(x2, x3) -> f2712_0_main_LT(x4, 1) :|: x2 > 1 && x3 > x2 && x4 = x2 - 1

Arcs:
(1) -> (1), (2)
(2) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f2712_0_main_LT(x2:0, x3:0) -> f2712_0_main_LT(x2:0 - 1, 1) :|: x2:0 > 1 && x3:0 > x2:0
f2712_0_main_LT(i67:0:0, i74:0:0) -> f2712_0_main_LT(i67:0:0, i74:0:0 + 1) :|: i74:0:0 <= i67:0:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2712_0_main_LT(INTEGER, VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f2712_0_main_LT(x2:0, x3:0) -> f2712_0_main_LT(c, c1) :|: c1 = 1 && c = x2:0 - 1 && (x2:0 > 1 && x3:0 > x2:0)
f2712_0_main_LT(i67:0:0, i74:0:0) -> f2712_0_main_LT(i67:0:0, c2) :|: c2 = i74:0:0 + 1 && i74:0:0 <= i67:0:0

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f2712_0_main_LT(x, x1)] = -1 + x

The following rules are decreasing:
f2712_0_main_LT(x2:0, x3:0) -> f2712_0_main_LT(c, c1) :|: c1 = 1 && c = x2:0 - 1 && (x2:0 > 1 && x3:0 > x2:0)
The following rules are bounded:
f2712_0_main_LT(x2:0, x3:0) -> f2712_0_main_LT(c, c1) :|: c1 = 1 && c = x2:0 - 1 && (x2:0 > 1 && x3:0 > x2:0)

----------------------------------------

(18)
Obligation:
Rules:
f2712_0_main_LT(i67:0:0, i74:0:0) -> f2712_0_main_LT(i67:0:0, c2) :|: c2 = i74:0:0 + 1 && i74:0:0 <= i67:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f2712_0_main_LT(x, x1)] = x - x1

The following rules are decreasing:
f2712_0_main_LT(i67:0:0, i74:0:0) -> f2712_0_main_LT(i67:0:0, c2) :|: c2 = i74:0:0 + 1 && i74:0:0 <= i67:0:0
The following rules are bounded:
f2712_0_main_LT(i67:0:0, i74:0:0) -> f2712_0_main_LT(i67:0:0, c2) :|: c2 = i74:0:0 + 1 && i74:0:0 <= i67:0:0

----------------------------------------

(20)
YES
