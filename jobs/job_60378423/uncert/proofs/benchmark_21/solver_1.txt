YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/KAV9S.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 251 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) JBCTerminationSCC
        (8) SCCToIRSProof [SOUND, 19 ms]
        (9) IRSwT
        (10) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (11) IRSwT
        (12) IRSwTTerminationDigraphProof [EQUIVALENT, 16 ms]
        (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) TempFilterProof [SOUND, 9 ms]
        (17) IntTRS
        (18) RankingReductionPairProof [EQUIVALENT, 6 ms]
        (19) YES
    (20) JBCTerminationSCC
        (21) SCCToIRSProof [SOUND, 27 ms]
        (22) IRSwT
        (23) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (24) IRSwT
        (25) IRSwTTerminationDigraphProof [EQUIVALENT, 16 ms]
        (26) IRSwT
        (27) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (28) IRSwT
        (29) TempFilterProof [SOUND, 11 ms]
        (30) IntTRS
        (31) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (32) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class ListContent{

  public static void main(String[] args) {
    Random.args = args;
    IntList l = IntList.createIntList();

    while (l.value > 0) l.value--;
  }

}

class IntList {
  int value;
  IntList next;

  public IntList(int value, IntList next) {
    this.value = value;
    this.next = next;
  }

  public static IntList createIntList() {

    int i = Random.random();
    IntList l = null;

    while (i > 0) {
      l = new IntList(Random.random(), l);
      i--;
    }

    return l;
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class ListContent{

  public static void main(String[] args) {
    Random.args = args;
    IntList l = IntList.createIntList();

    while (l.value > 0) l.value--;
  }

}

class IntList {
  int value;
  IntList next;

  public IntList(int value, IntList next) {
    this.value = value;
    this.next = next;
  }

  public static IntList createIntList() {

    int i = Random.random();
    IntList l = null;

    while (i > 0) {
      l = new IntList(Random.random(), l);
      i--;
    }

    return l;
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
ListContent.main([Ljava/lang/String;)V: Graph of 65 nodes with 1 SCC.



IntList.createIntList()LIntList;: Graph of 277 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 2 SCCss.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: IntList.createIntList()LIntList;
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*java.lang.String: [count]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(8) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 39 IRulesP rules:
f4108_0_createIntList_LE(EOS(STATIC_4108(java.lang.Object(ARRAY(i6)))), i708, i708) -> f4264_0_createIntList_LE(EOS(STATIC_4264(java.lang.Object(ARRAY(i6)))), i708, i708) :|: TRUE
f4264_0_createIntList_LE(EOS(STATIC_4264(java.lang.Object(ARRAY(i6)))), i708, i708) -> f4274_0_createIntList_New(EOS(STATIC_4274(java.lang.Object(ARRAY(i6)))), i708) :|: i708 > 0
f4274_0_createIntList_New(EOS(STATIC_4274(java.lang.Object(ARRAY(i6)))), i708) -> f4279_0_createIntList_Duplicate(EOS(STATIC_4279(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4279_0_createIntList_Duplicate(EOS(STATIC_4279(java.lang.Object(ARRAY(i6)))), i708) -> f4282_0_createIntList_InvokeMethod(EOS(STATIC_4282(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4282_0_createIntList_InvokeMethod(EOS(STATIC_4282(java.lang.Object(ARRAY(i6)))), i708) -> f4308_0_random_FieldAccess(EOS(STATIC_4308(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4308_0_random_FieldAccess(EOS(STATIC_4308(java.lang.Object(ARRAY(i6)))), i708) -> f4326_0_random_FieldAccess(EOS(STATIC_4326(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(ARRAY(i6))) :|: TRUE
f4326_0_random_FieldAccess(EOS(STATIC_4326(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(ARRAY(i6))) -> f4332_0_random_ArrayAccess(EOS(STATIC_4332(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(ARRAY(i6))) :|: TRUE
f4332_0_random_ArrayAccess(EOS(STATIC_4332(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(ARRAY(i6))) -> f4334_0_random_ArrayAccess(EOS(STATIC_4334(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(ARRAY(i6))) :|: TRUE
f4334_0_random_ArrayAccess(EOS(STATIC_4334(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(ARRAY(i6))) -> f4336_0_random_Store(EOS(STATIC_4336(java.lang.Object(ARRAY(i6)))), i708, o259) :|: TRUE
f4336_0_random_Store(EOS(STATIC_4336(java.lang.Object(ARRAY(i6)))), i708, o259) -> f4340_0_random_FieldAccess(EOS(STATIC_4340(java.lang.Object(ARRAY(i6)))), i708, o259) :|: TRUE
f4340_0_random_FieldAccess(EOS(STATIC_4340(java.lang.Object(ARRAY(i6)))), i708, o259) -> f4345_0_random_ConstantStackPush(EOS(STATIC_4345(java.lang.Object(ARRAY(i6)))), i708, o259) :|: TRUE
f4345_0_random_ConstantStackPush(EOS(STATIC_4345(java.lang.Object(ARRAY(i6)))), i708, o259) -> f4352_0_random_IntArithmetic(EOS(STATIC_4352(java.lang.Object(ARRAY(i6)))), i708, o259) :|: TRUE
f4352_0_random_IntArithmetic(EOS(STATIC_4352(java.lang.Object(ARRAY(i6)))), i708, o259) -> f4358_0_random_FieldAccess(EOS(STATIC_4358(java.lang.Object(ARRAY(i6)))), i708, o259) :|: TRUE
f4358_0_random_FieldAccess(EOS(STATIC_4358(java.lang.Object(ARRAY(i6)))), i708, o259) -> f4364_0_random_Load(EOS(STATIC_4364(java.lang.Object(ARRAY(i6)))), i708, o259) :|: TRUE
f4364_0_random_Load(EOS(STATIC_4364(java.lang.Object(ARRAY(i6)))), i708, o259) -> f4374_0_random_InvokeMethod(EOS(STATIC_4374(java.lang.Object(ARRAY(i6)))), i708, o259) :|: TRUE
f4374_0_random_InvokeMethod(EOS(STATIC_4374(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(o262sub)) -> f4380_0_random_InvokeMethod(EOS(STATIC_4380(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(o262sub)) :|: TRUE
f4380_0_random_InvokeMethod(EOS(STATIC_4380(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(o263sub)) -> f4382_0_random_InvokeMethod(EOS(STATIC_4382(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(o263sub)) :|: TRUE
f4382_0_random_InvokeMethod(EOS(STATIC_4382(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(o263sub)) -> f4391_0_length_Load(EOS(STATIC_4391(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(o263sub)) :|: TRUE
f4391_0_length_Load(EOS(STATIC_4391(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(o263sub)) -> f4403_0_length_FieldAccess(EOS(STATIC_4403(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(o263sub)) :|: TRUE
f4403_0_length_FieldAccess(EOS(STATIC_4403(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(java.lang.String(EOC, i750))) -> f4416_0_length_FieldAccess(EOS(STATIC_4416(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(java.lang.String(EOC, i750))) :|: TRUE
f4416_0_length_FieldAccess(EOS(STATIC_4416(java.lang.Object(ARRAY(i6)))), i708, java.lang.Object(java.lang.String(EOC, i750))) -> f4422_0_length_Return(EOS(STATIC_4422(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4422_0_length_Return(EOS(STATIC_4422(java.lang.Object(ARRAY(i6)))), i708) -> f4428_0_random_Return(EOS(STATIC_4428(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4428_0_random_Return(EOS(STATIC_4428(java.lang.Object(ARRAY(i6)))), i708) -> f4438_0_createIntList_Load(EOS(STATIC_4438(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4438_0_createIntList_Load(EOS(STATIC_4438(java.lang.Object(ARRAY(i6)))), i708) -> f4446_0_createIntList_InvokeMethod(EOS(STATIC_4446(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4446_0_createIntList_InvokeMethod(EOS(STATIC_4446(java.lang.Object(ARRAY(i6)))), i708) -> f4457_0__init__Load(EOS(STATIC_4457(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4457_0__init__Load(EOS(STATIC_4457(java.lang.Object(ARRAY(i6)))), i708) -> f4482_0__init__InvokeMethod(EOS(STATIC_4482(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4482_0__init__InvokeMethod(EOS(STATIC_4482(java.lang.Object(ARRAY(i6)))), i708) -> f4496_0__init__Load(EOS(STATIC_4496(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4496_0__init__Load(EOS(STATIC_4496(java.lang.Object(ARRAY(i6)))), i708) -> f4509_0__init__Load(EOS(STATIC_4509(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4509_0__init__Load(EOS(STATIC_4509(java.lang.Object(ARRAY(i6)))), i708) -> f4521_0__init__FieldAccess(EOS(STATIC_4521(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4521_0__init__FieldAccess(EOS(STATIC_4521(java.lang.Object(ARRAY(i6)))), i708) -> f4537_0__init__Load(EOS(STATIC_4537(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4537_0__init__Load(EOS(STATIC_4537(java.lang.Object(ARRAY(i6)))), i708) -> f4561_0__init__Load(EOS(STATIC_4561(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4561_0__init__Load(EOS(STATIC_4561(java.lang.Object(ARRAY(i6)))), i708) -> f4574_0__init__FieldAccess(EOS(STATIC_4574(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4574_0__init__FieldAccess(EOS(STATIC_4574(java.lang.Object(ARRAY(i6)))), i708) -> f4592_0__init__Return(EOS(STATIC_4592(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4592_0__init__Return(EOS(STATIC_4592(java.lang.Object(ARRAY(i6)))), i708) -> f4604_0_createIntList_Store(EOS(STATIC_4604(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4604_0_createIntList_Store(EOS(STATIC_4604(java.lang.Object(ARRAY(i6)))), i708) -> f4617_0_createIntList_Inc(EOS(STATIC_4617(java.lang.Object(ARRAY(i6)))), i708) :|: TRUE
f4617_0_createIntList_Inc(EOS(STATIC_4617(java.lang.Object(ARRAY(i6)))), i708) -> f4628_0_createIntList_JMP(EOS(STATIC_4628(java.lang.Object(ARRAY(i6)))), i708 + -1) :|: TRUE
f4628_0_createIntList_JMP(EOS(STATIC_4628(java.lang.Object(ARRAY(i6)))), i786) -> f4715_0_createIntList_Load(EOS(STATIC_4715(java.lang.Object(ARRAY(i6)))), i786) :|: TRUE
f4715_0_createIntList_Load(EOS(STATIC_4715(java.lang.Object(ARRAY(i6)))), i786) -> f4013_0_createIntList_Load(EOS(STATIC_4013(java.lang.Object(ARRAY(i6)))), i786) :|: TRUE
f4013_0_createIntList_Load(EOS(STATIC_4013(java.lang.Object(ARRAY(i6)))), i642) -> f4108_0_createIntList_LE(EOS(STATIC_4108(java.lang.Object(ARRAY(i6)))), i642, i642) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f4108_0_createIntList_LE(EOS(STATIC_4108(java.lang.Object(ARRAY(i6:0)))), i708:0, i708:0) -> f4108_0_createIntList_LE(EOS(STATIC_4108(java.lang.Object(ARRAY(i6:0)))), i708:0 - 1, i708:0 - 1) :|: i708:0 > 0
Filtered duplicate arguments:
   f4108_0_createIntList_LE(x1, x2, x3) -> f4108_0_createIntList_LE(x1, x3)
Filtered unneeded arguments:
   f4108_0_createIntList_LE(x1, x2) -> f4108_0_createIntList_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f4108_0_createIntList_LE(i708:0) -> f4108_0_createIntList_LE(i708:0 - 1) :|: i708:0 > 0

----------------------------------------

(9)
Obligation:
Rules:
f4108_0_createIntList_LE(i708:0) -> f4108_0_createIntList_LE(i708:0 - 1) :|: i708:0 > 0

----------------------------------------

(10) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(11)
Obligation:
Rules:
f4108_0_createIntList_LE(i708:0) -> f4108_0_createIntList_LE(arith) :|: i708:0 > 0 && arith = i708:0 - 1

----------------------------------------

(12) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f4108_0_createIntList_LE(i708:0) -> f4108_0_createIntList_LE(arith) :|: i708:0 > 0 && arith = i708:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f4108_0_createIntList_LE(i708:0) -> f4108_0_createIntList_LE(arith) :|: i708:0 > 0 && arith = i708:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f4108_0_createIntList_LE(i708:0:0) -> f4108_0_createIntList_LE(i708:0:0 - 1) :|: i708:0:0 > 0

----------------------------------------

(16) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f4108_0_createIntList_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(17)
Obligation:
Rules:
f4108_0_createIntList_LE(i708:0:0) -> f4108_0_createIntList_LE(c) :|: c = i708:0:0 - 1 && i708:0:0 > 0

----------------------------------------

(18) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f4108_0_createIntList_LE ] = f4108_0_createIntList_LE_1

The following rules are decreasing:
f4108_0_createIntList_LE(i708:0:0) -> f4108_0_createIntList_LE(c) :|: c = i708:0:0 - 1 && i708:0:0 > 0

The following rules are bounded:
f4108_0_createIntList_LE(i708:0:0) -> f4108_0_createIntList_LE(c) :|: c = i708:0:0 - 1 && i708:0:0 > 0


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: ListContent.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*IntList: [value]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(21) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 14 IRulesP rules:
f3620_0_main_FieldAccess(EOS(STATIC_3620), java.lang.Object(o196sub), java.lang.Object(o196sub)) -> f3625_0_main_FieldAccess(EOS(STATIC_3625), java.lang.Object(o196sub), java.lang.Object(o196sub)) :|: TRUE
f3625_0_main_FieldAccess(EOS(STATIC_3625), java.lang.Object(IntList(EOC, i565)), java.lang.Object(IntList(EOC, i565))) -> f3639_0_main_FieldAccess(EOS(STATIC_3639), java.lang.Object(IntList(EOC, i565)), java.lang.Object(IntList(EOC, i565))) :|: TRUE
f3639_0_main_FieldAccess(EOS(STATIC_3639), java.lang.Object(IntList(EOC, i565)), java.lang.Object(IntList(EOC, i565))) -> f3647_0_main_LE(EOS(STATIC_3647), java.lang.Object(IntList(EOC, i565)), i565) :|: TRUE
f3647_0_main_LE(EOS(STATIC_3647), java.lang.Object(IntList(EOC, i567)), i567) -> f3658_0_main_LE(EOS(STATIC_3658), java.lang.Object(IntList(EOC, i567)), i567) :|: TRUE
f3658_0_main_LE(EOS(STATIC_3658), java.lang.Object(IntList(EOC, i567)), i567) -> f3669_0_main_Load(EOS(STATIC_3669), java.lang.Object(IntList(EOC, i567))) :|: i567 > 0
f3669_0_main_Load(EOS(STATIC_3669), java.lang.Object(IntList(EOC, i567))) -> f3673_0_main_Duplicate(EOS(STATIC_3673), java.lang.Object(IntList(EOC, i567)), java.lang.Object(IntList(EOC, i567))) :|: TRUE
f3673_0_main_Duplicate(EOS(STATIC_3673), java.lang.Object(IntList(EOC, i567)), java.lang.Object(IntList(EOC, i567))) -> f3683_0_main_FieldAccess(EOS(STATIC_3683), java.lang.Object(IntList(EOC, i567)), java.lang.Object(IntList(EOC, i567)), java.lang.Object(IntList(EOC, i567))) :|: TRUE
f3683_0_main_FieldAccess(EOS(STATIC_3683), java.lang.Object(IntList(EOC, i567)), java.lang.Object(IntList(EOC, i567)), java.lang.Object(IntList(EOC, i567))) -> f3697_0_main_ConstantStackPush(EOS(STATIC_3697), java.lang.Object(IntList(EOC, i567)), java.lang.Object(IntList(EOC, i567)), i567) :|: TRUE
f3697_0_main_ConstantStackPush(EOS(STATIC_3697), java.lang.Object(IntList(EOC, i567)), java.lang.Object(IntList(EOC, i567)), i567) -> f3706_0_main_IntArithmetic(EOS(STATIC_3706), java.lang.Object(IntList(EOC, i567)), java.lang.Object(IntList(EOC, i567)), i567, 1) :|: TRUE
f3706_0_main_IntArithmetic(EOS(STATIC_3706), java.lang.Object(IntList(EOC, i567)), java.lang.Object(IntList(EOC, i567)), i567, matching1) -> f3718_0_main_FieldAccess(EOS(STATIC_3718), java.lang.Object(IntList(EOC, i567)), java.lang.Object(IntList(EOC, i567)), i567 - 1) :|: i567 > 0 && matching1 = 1
f3718_0_main_FieldAccess(EOS(STATIC_3718), java.lang.Object(IntList(EOC, i567)), java.lang.Object(IntList(EOC, i567)), i579) -> f3724_0_main_JMP(EOS(STATIC_3724), java.lang.Object(IntList(EOC, i579))) :|: TRUE
f3724_0_main_JMP(EOS(STATIC_3724), java.lang.Object(IntList(EOC, i579))) -> f3731_0_main_Load(EOS(STATIC_3731), java.lang.Object(IntList(EOC, i579))) :|: TRUE
f3731_0_main_Load(EOS(STATIC_3731), java.lang.Object(IntList(EOC, i579))) -> f3607_0_main_Load(EOS(STATIC_3607), java.lang.Object(IntList(EOC, i579))) :|: TRUE
f3607_0_main_Load(EOS(STATIC_3607), o189) -> f3620_0_main_FieldAccess(EOS(STATIC_3620), o189, o189) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f3620_0_main_FieldAccess(EOS(STATIC_3620), java.lang.Object(IntList(EOC, i565:0)), java.lang.Object(IntList(EOC, i565:0))) -> f3620_0_main_FieldAccess(EOS(STATIC_3620), java.lang.Object(IntList(EOC, i565:0 - 1)), java.lang.Object(IntList(EOC, i565:0 - 1))) :|: i565:0 > 0
Filtered constant ground arguments:
   f3620_0_main_FieldAccess(x1, x2, x3) -> f3620_0_main_FieldAccess(x2, x3)
   EOS(x1) -> EOS
   IntList(x1, x2) -> IntList(x2)
Filtered duplicate arguments:
   f3620_0_main_FieldAccess(x1, x2) -> f3620_0_main_FieldAccess(x2)
Finished conversion. Obtained 1 rules.P rules:
f3620_0_main_FieldAccess(java.lang.Object(IntList(i565:0)), i565:0) -> f3620_0_main_FieldAccess(java.lang.Object(IntList(i565:0 - 1)), i565:0 - 1) :|: i565:0 > 0

----------------------------------------

(22)
Obligation:
Rules:
f3620_0_main_FieldAccess(java.lang.Object(IntList(i565:0)), i565:0) -> f3620_0_main_FieldAccess(java.lang.Object(IntList(i565:0 - 1)), i565:0 - 1) :|: i565:0 > 0

----------------------------------------

(23) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(24)
Obligation:
Rules:
f3620_0_main_FieldAccess(java.lang.Object(IntList(i565:0)), i565:0) -> f3620_0_main_FieldAccess(java.lang.Object(IntList(arith)), arith) :|: i565:0 > 0 && arith = i565:0 - 1 && arith = i565:0 - 1

----------------------------------------

(25) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3620_0_main_FieldAccess(java.lang.Object(IntList(i565:0)), i565:0) -> f3620_0_main_FieldAccess(java.lang.Object(IntList(arith)), arith) :|: i565:0 > 0 && arith = i565:0 - 1 && arith = i565:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(26)
Obligation:

Termination digraph:
Nodes:
(1) f3620_0_main_FieldAccess(java.lang.Object(IntList(i565:0)), i565:0) -> f3620_0_main_FieldAccess(java.lang.Object(IntList(arith)), arith) :|: i565:0 > 0 && arith = i565:0 - 1 && arith = i565:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(27) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(28)
Obligation:
Rules:
f3620_0_main_FieldAccess(java.lang.Object(IntList(i565:0:0)), i565:0:0) -> f3620_0_main_FieldAccess(java.lang.Object(IntList(i565:0:0 - 1)), i565:0:0 - 1) :|: i565:0:0 > 0

----------------------------------------

(29) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3620_0_main_FieldAccess(VARIABLE, INTEGER)
java.lang.Object(VARIABLE)
IntList(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(30)
Obligation:
Rules:
f3620_0_main_FieldAccess(c, i565:0:0) -> f3620_0_main_FieldAccess(c1, c2) :|: c2 = i565:0:0 - 1 && (c1 = 0 && c = 0) && i565:0:0 > 0

----------------------------------------

(31) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f3620_0_main_FieldAccess ] = f3620_0_main_FieldAccess_2

The following rules are decreasing:
f3620_0_main_FieldAccess(c, i565:0:0) -> f3620_0_main_FieldAccess(c1, c2) :|: c2 = i565:0:0 - 1 && (c1 = 0 && c = 0) && i565:0:0 > 0

The following rules are bounded:
f3620_0_main_FieldAccess(c, i565:0:0) -> f3620_0_main_FieldAccess(c1, c2) :|: c2 = i565:0:0 - 1 && (c1 = 0 && c = 0) && i565:0:0 > 0


----------------------------------------

(32)
YES
