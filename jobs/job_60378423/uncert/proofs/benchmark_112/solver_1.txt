NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/qclN9.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 192 ms]
(4) JBCTerminationGraph
(5) JBCNonTerm [COMPLETE, 192 ms]
(6) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.alternDivWidening;

public class AlternDivWidening {

	public static void loop(int i) {
		int w = 5;
		while (i != 0) {
			if (i < -w) {
				i--;
				i = i*(-1);
			} else {
				if (i > w) {
					i++;
					i = i*(-1);
				} else {
					i = 0;
				}
			}
			w++;
		}
	}
}


package simple.alternDivWidening;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		AlternDivWidening.loop(args.length);

	}

}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.alternDivWidening;

public class AlternDivWidening {

	public static void loop(int i) {
		int w = 5;
		while (i != 0) {
			if (i < -w) {
				i--;
				i = i*(-1);
			} else {
				if (i > w) {
					i++;
					i = i*(-1);
				} else {
					i = 0;
				}
			}
			w++;
		}
	}
}


package simple.alternDivWidening;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		AlternDivWidening.loop(args.length);

	}

}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
simple.alternDivWidening.Main.main([Ljava/lang/String;)V: Graph of 50 nodes with 1 SCC.





----------------------------------------

(5) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<simple.alternDivWidening.Main.main||0: load ADDR args||args: a46|| ->
	a46([java.lang.String...]): length 6 -->{java.lang.Object...}
YES:  (JL1)
1:<simple.alternDivWidening.Main.main||1: arraylength|| - ||a46>
	a46([java.lang.String...]): length 6 -->{java.lang.Object...}
YES:  (JL1)
2:<simple.alternDivWidening.Main.main||2: simple.alternDivWidening.AlternDivWidening.loop(I)V|| - ||6>
YES:  (JL1)
3:<simple.alternDivWidening.AlternDivWidening.loop||0: push 5||i: 6|| ->
<simple.alternDivWidening.Main.main||2: simple.alternDivWidening.AlternDivWidening.loop|| - || ->
YES:  (JL1)
4:<simple.alternDivWidening.AlternDivWidening.loop||1: store INT to w||i: 6||5>
<simple.alternDivWidening.Main.main||2: simple.alternDivWidening.AlternDivWidening.loop|| - || ->
YES:  (JL1)
5:<simple.alternDivWidening.AlternDivWidening.loop||2: load INT i||i: 6, w: 5|| ->
<simple.alternDivWidening.Main.main||2: simple.alternDivWidening.AlternDivWidening.loop|| - || ->
YES:  (JL1)
Start state of loop: 

<simple.alternDivWidening.AlternDivWidening.loop||2: load INT i||i: i592, w: i593|| ->
[a14(lv_0_0)]
<simple.alternDivWidening.Main.main||2: simple.alternDivWidening.AlternDivWidening.loop|| - || ->
	i592: #
	i593: [5,+inf)(l5)
	i499: [0,+inf)(l4)
	a14([java.lang.String...]): length i499 -->{java.lang.Object...}
YES:  (JL1)


In the loop head node, references [i592, i593] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((5 <= initial_i593 and 0 <= initial_i499) and ((((path1_i592 = path1_i604 and path1_i605 = (-1 * path1_i593) and path1_i612 = (path1_i604 + -1) and path1_i619 = (path1_i612 * -1) and path1_i627 = (path1_i593 + 1) and path1_i619 = res_i592 and path1_i627 = res_i593 and path1_i592 = initial_i592 and path1_i593 = initial_i593) and (path1_i604 != 0 and path1_i604 < path1_i605 and path1_i604 < path1_i605)) or ((path3_i592 = path3_i604 and path3_i605 = (-1 * path3_i593) and path3_i620 = (path3_i604 + 1) and path3_i628 = (path3_i620 * -1) and path3_i634 = (path3_i593 + 1) and path3_i628 = res_i592 and path3_i634 = res_i593 and path3_i592 = initial_i592 and path3_i593 = initial_i593) and (path3_i604 != 0 and path3_i604 >= path3_i605 and path3_i604 >= path3_i605 and path3_i604 > path3_i593 and path3_i604 > path3_i593)) or ((path1_i592 = path1_i604 and path1_i605 = (-1 * path1_i593) and path1_i612 = (path1_i604 + -1) and path1_i619 = (path1_i612 * -1) and path1_i627 = (path1_i593 + 1) and path1_i619 = res_i592 and path1_i627 = res_i593 and path1_i592 = initial_i592 and path1_i593 = initial_i593) and (path1_i604 < path1_i605 and path1_i604 < path1_i605 and path1_i604 < 0)) or ((path1_i592 = path1_i604 and path1_i605 = (-1 * path1_i593) and path1_i612 = (path1_i604 + -1) and path1_i619 = (path1_i612 * -1) and path1_i627 = (path1_i593 + 1) and path1_i619 = res_i592 and path1_i627 = res_i593 and path1_i592 = initial_i592 and path1_i593 = initial_i593) and (path1_i604 < path1_i605 and path1_i604 < path1_i605 and path1_i604 > 0))) and (((res1_i592 = res1_i604 and res1_i605 = (-1 * res1_i593) and res1_i612 = (res1_i604 + -1) and res1_i619 = (res1_i612 * -1) and res1_i627 = (res1_i593 + 1) and res_i592 = res1_i592 and res_i593 = res1_i593) and !(res1_i604 != 0 and res1_i604 < res1_i605 and res1_i604 < res1_i605)) and ((res3_i592 = res3_i604 and res3_i605 = (-1 * res3_i593) and res3_i620 = (res3_i604 + 1) and res3_i628 = (res3_i620 * -1) and res3_i634 = (res3_i593 + 1) and res_i592 = res3_i592 and res_i593 = res3_i593) and !(res3_i604 != 0 and res3_i604 >= res3_i605 and res3_i604 >= res3_i605 and res3_i604 > res3_i593 and res3_i604 > res3_i593)) and ((res1_i592 = res1_i604 and res1_i605 = (-1 * res1_i593) and res1_i612 = (res1_i604 + -1) and res1_i619 = (res1_i612 * -1) and res1_i627 = (res1_i593 + 1) and res_i592 = res1_i592 and res_i593 = res1_i593) and !(res1_i604 < res1_i605 and res1_i604 < res1_i605 and res1_i604 < 0)) and ((res1_i592 = res1_i604 and res1_i605 = (-1 * res1_i593) and res1_i612 = (res1_i604 + -1) and res1_i619 = (res1_i612 * -1) and res1_i627 = (res1_i593 + 1) and res_i592 = res1_i592 and res_i593 = res1_i593) and !(res1_i604 < res1_i605 and res1_i604 < res1_i605 and res1_i604 > 0)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(6)
NO
