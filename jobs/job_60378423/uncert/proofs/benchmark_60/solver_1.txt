YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/rxYfP.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 62 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 43 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 63 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 25 ms]
(16) IntTRS
(17) RankingReductionPairProof [EQUIVALENT, 13 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB8 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();

        if (x > 0) {
            while (x != 0) {
                if (x % 2 == 0) {
                    x = x/2;
                } else {
                    x--;
                }
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB8 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();

        if (x > 0) {
            while (x != 0) {
                if (x % 2 == 0) {
                    x = x/2;
                } else {
                    x--;
                }
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaB8.main([Ljava/lang/String;)V: Graph of 124 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaB8.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 19 IRulesP rules:
f477_0_main_EQ(EOS(STATIC_477), i77, i77) -> f482_0_main_EQ(EOS(STATIC_482), i77, i77) :|: TRUE
f482_0_main_EQ(EOS(STATIC_482), i77, i77) -> f487_0_main_Load(EOS(STATIC_487), i77) :|: i77 > 0
f487_0_main_Load(EOS(STATIC_487), i77) -> f499_0_main_ConstantStackPush(EOS(STATIC_499), i77, i77) :|: TRUE
f499_0_main_ConstantStackPush(EOS(STATIC_499), i77, i77) -> f504_0_main_IntArithmetic(EOS(STATIC_504), i77, i77, 2) :|: TRUE
f504_0_main_IntArithmetic(EOS(STATIC_504), i77, i77, matching1) -> f507_0_main_NE(EOS(STATIC_507), i77, i77 % 2) :|: TRUE && matching1 = 2
f507_0_main_NE(EOS(STATIC_507), i77, matching1) -> f510_0_main_NE(EOS(STATIC_510), i77, 1) :|: TRUE && matching1 = 1
f507_0_main_NE(EOS(STATIC_507), i77, matching1) -> f511_0_main_NE(EOS(STATIC_511), i77, 0) :|: TRUE && matching1 = 0
f510_0_main_NE(EOS(STATIC_510), i77, matching1) -> f512_0_main_Inc(EOS(STATIC_512), i77) :|: 1 > 0 && matching1 = 1
f512_0_main_Inc(EOS(STATIC_512), i77) -> f515_0_main_JMP(EOS(STATIC_515), i77 + -1) :|: TRUE
f515_0_main_JMP(EOS(STATIC_515), i85) -> f517_0_main_Load(EOS(STATIC_517), i85) :|: TRUE
f517_0_main_Load(EOS(STATIC_517), i85) -> f465_0_main_Load(EOS(STATIC_465), i85) :|: TRUE
f465_0_main_Load(EOS(STATIC_465), i72) -> f477_0_main_EQ(EOS(STATIC_477), i72, i72) :|: TRUE
f511_0_main_NE(EOS(STATIC_511), i77, matching1) -> f514_0_main_Load(EOS(STATIC_514), i77) :|: TRUE && matching1 = 0
f514_0_main_Load(EOS(STATIC_514), i77) -> f516_0_main_ConstantStackPush(EOS(STATIC_516), i77) :|: TRUE
f516_0_main_ConstantStackPush(EOS(STATIC_516), i77) -> f519_0_main_IntArithmetic(EOS(STATIC_519), i77, 2) :|: TRUE
f519_0_main_IntArithmetic(EOS(STATIC_519), i77, matching1) -> f521_0_main_Store(EOS(STATIC_521), i87) :|: i87 = i77 / 2 && i77 >= 1 && i87 < i77 && matching1 = 2
f521_0_main_Store(EOS(STATIC_521), i87) -> f523_0_main_JMP(EOS(STATIC_523), i87) :|: TRUE
f523_0_main_JMP(EOS(STATIC_523), i87) -> f530_0_main_Load(EOS(STATIC_530), i87) :|: TRUE
f530_0_main_Load(EOS(STATIC_530), i87) -> f465_0_main_Load(EOS(STATIC_465), i87) :|: TRUE
Combined rules. Obtained 4 IRulesP rules:
f477_0_main_EQ(EOS(STATIC_477), i77:0, i77:0) -> f477_0_main_EQ'(EOS(STATIC_477), i77:0, i77:0) :|: i77:0 > 0 && i77:0 - 2 * div = 0 && i77:0 > div1
f477_0_main_EQ'(EOS(STATIC_477), i77:0, i77:0) -> f477_0_main_EQ(EOS(STATIC_477), div1, div1) :|: i77:0 > 0 && i77:0 - 2 * div = 0 && i77:0 > div1 && i77:0 - 2 * div > -2 && i77:0 - 2 * div < 2 && i77:0 - 2 * div1 < 2 && i77:0 - 2 * div1 > -2
f477_0_main_EQ(EOS(STATIC_477), i77:0, i77:0) -> f477_0_main_EQ'(EOS(STATIC_477), i77:0, i77:0) :|: i77:0 - 2 * div = 1 && i77:0 > 0
f477_0_main_EQ'(EOS(STATIC_477), i77:0, i77:0) -> f477_0_main_EQ(EOS(STATIC_477), i77:0 - 1, i77:0 - 1) :|: i77:0 > 0 && i77:0 - 2 * div = 1 && i77:0 - 2 * div < 2 && i77:0 - 2 * div > -2
Filtered constant ground arguments:
   f477_0_main_EQ(x1, x2, x3) -> f477_0_main_EQ(x2, x3)
   f477_0_main_EQ'(x1, x2, x3) -> f477_0_main_EQ'(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f477_0_main_EQ(x1, x2) -> f477_0_main_EQ(x2)
   f477_0_main_EQ'(x1, x2) -> f477_0_main_EQ'(x2)
Finished conversion. Obtained 4 rules.P rules:
f477_0_main_EQ(i77:0) -> f477_0_main_EQ'(i77:0) :|: i77:0 - 2 * div = 0 && i77:0 > div1 && i77:0 > 0
f477_0_main_EQ'(i77:0) -> f477_0_main_EQ(div1) :|: i77:0 - 2 * div = 0 && i77:0 > 0 && i77:0 > div1 && i77:0 - 2 * div > -2 && i77:0 - 2 * div < 2 && i77:0 - 2 * div1 > -2 && i77:0 - 2 * div1 < 2
f477_0_main_EQ(i77:0) -> f477_0_main_EQ'(i77:0) :|: i77:0 - 2 * div = 1 && i77:0 > 0
f477_0_main_EQ'(i77:0) -> f477_0_main_EQ(i77:0 - 1) :|: i77:0 - 2 * div = 1 && i77:0 > 0 && i77:0 - 2 * div > -2 && i77:0 - 2 * div < 2

----------------------------------------

(8)
Obligation:
Rules:
f477_0_main_EQ(x) -> f477_0_main_EQ'(x) :|: x - 2 * x1 = 0 && x > x2 && x > 0
f477_0_main_EQ'(x3) -> f477_0_main_EQ(x4) :|: x3 - 2 * x5 = 0 && x3 > 0 && x3 > x4 && x3 - 2 * x5 > -2 && x3 - 2 * x5 < 2 && x3 - 2 * x4 > -2 && x3 - 2 * x4 < 2
f477_0_main_EQ(x6) -> f477_0_main_EQ'(x6) :|: x6 - 2 * x7 = 1 && x6 > 0
f477_0_main_EQ'(x8) -> f477_0_main_EQ(x8 - 1) :|: x8 - 2 * x9 = 1 && x8 > 0 && x8 - 2 * x9 > -2 && x8 - 2 * x9 < 2

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f477_0_main_EQ(x) -> f477_0_main_EQ'(x) :|: x - 2 * x1 = 0 && x > x2 && x > 0
f477_0_main_EQ'(x3) -> f477_0_main_EQ(x4) :|: x3 - 2 * x5 = 0 && x3 > 0 && x3 > x4 && x3 - 2 * x5 > -2 && x3 - 2 * x5 < 2 && x3 - 2 * x4 > -2 && x3 - 2 * x4 < 2
f477_0_main_EQ(x6) -> f477_0_main_EQ'(x6) :|: x6 - 2 * x7 = 1 && x6 > 0
f477_0_main_EQ'(x8) -> f477_0_main_EQ(arith) :|: x8 - 2 * x9 = 1 && x8 > 0 && x8 - 2 * x9 > -2 && x8 - 2 * x9 < 2 && arith = x8 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f477_0_main_EQ(x) -> f477_0_main_EQ'(x) :|: x - 2 * x1 = 0 && x > x2 && x > 0
(2) f477_0_main_EQ'(x3) -> f477_0_main_EQ(x4) :|: x3 - 2 * x5 = 0 && x3 > 0 && x3 > x4 && x3 - 2 * x5 > -2 && x3 - 2 * x5 < 2 && x3 - 2 * x4 > -2 && x3 - 2 * x4 < 2
(3) f477_0_main_EQ(x6) -> f477_0_main_EQ'(x6) :|: x6 - 2 * x7 = 1 && x6 > 0
(4) f477_0_main_EQ'(x8) -> f477_0_main_EQ(arith) :|: x8 - 2 * x9 = 1 && x8 > 0 && x8 - 2 * x9 > -2 && x8 - 2 * x9 < 2 && arith = x8 - 1

Arcs:
(1) -> (2)
(2) -> (1), (3)
(3) -> (4)
(4) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f477_0_main_EQ(x) -> f477_0_main_EQ'(x) :|: x - 2 * x1 = 0 && x > x2 && x > 0
(2) f477_0_main_EQ'(x8) -> f477_0_main_EQ(arith) :|: x8 - 2 * x9 = 1 && x8 > 0 && x8 - 2 * x9 > -2 && x8 - 2 * x9 < 2 && arith = x8 - 1
(3) f477_0_main_EQ(x6) -> f477_0_main_EQ'(x6) :|: x6 - 2 * x7 = 1 && x6 > 0
(4) f477_0_main_EQ'(x3) -> f477_0_main_EQ(x4) :|: x3 - 2 * x5 = 0 && x3 > 0 && x3 > x4 && x3 - 2 * x5 > -2 && x3 - 2 * x5 < 2 && x3 - 2 * x4 > -2 && x3 - 2 * x4 < 2

Arcs:
(1) -> (4)
(2) -> (1)
(3) -> (2)
(4) -> (1), (3)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f477_0_main_EQ'(x8:0) -> f477_0_main_EQ(x8:0 - 1) :|: x8:0 - 2 * x9:0 > -2 && x8:0 - 2 * x9:0 < 2 && x8:0 > 0 && x8:0 - 2 * x9:0 = 1
f477_0_main_EQ(x6:0) -> f477_0_main_EQ'(x6:0) :|: x6:0 - 2 * x7:0 = 1 && x6:0 > 0
f477_0_main_EQ'(x3:0) -> f477_0_main_EQ(x4:0) :|: x3:0 - 2 * x4:0 > -2 && x3:0 - 2 * x4:0 < 2 && x3:0 - 2 * x5:0 < 2 && x3:0 - 2 * x5:0 > -2 && x4:0 < x3:0 && x3:0 > 0 && x3:0 - 2 * x5:0 = 0
f477_0_main_EQ(x:0) -> f477_0_main_EQ'(x:0) :|: x:0 - 2 * x1:0 = 0 && x:0 > x2:0 && x:0 > 0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f477_0_main_EQ'(INTEGER)
f477_0_main_EQ(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f477_0_main_EQ'(x8:0) -> f477_0_main_EQ(c) :|: c = x8:0 - 1 && (x8:0 - 2 * x9:0 > -2 && x8:0 - 2 * x9:0 < 2 && x8:0 > 0 && x8:0 - 2 * x9:0 = 1)
f477_0_main_EQ(x6:0) -> f477_0_main_EQ'(x6:0) :|: x6:0 - 2 * x7:0 = 1 && x6:0 > 0
f477_0_main_EQ'(x3:0) -> f477_0_main_EQ(x4:0) :|: x3:0 - 2 * x4:0 > -2 && x3:0 - 2 * x4:0 < 2 && x3:0 - 2 * x5:0 < 2 && x3:0 - 2 * x5:0 > -2 && x4:0 < x3:0 && x3:0 > 0 && x3:0 - 2 * x5:0 = 0
f477_0_main_EQ(x:0) -> f477_0_main_EQ'(x:0) :|: x:0 - 2 * x1:0 = 0 && x:0 > x2:0 && x:0 > 0

----------------------------------------

(17) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f477_0_main_EQ' ] = 2*f477_0_main_EQ'_1 + -1
[ f477_0_main_EQ ] = 2*f477_0_main_EQ_1

The following rules are decreasing:
f477_0_main_EQ'(x8:0) -> f477_0_main_EQ(c) :|: c = x8:0 - 1 && (x8:0 - 2 * x9:0 > -2 && x8:0 - 2 * x9:0 < 2 && x8:0 > 0 && x8:0 - 2 * x9:0 = 1)
f477_0_main_EQ(x6:0) -> f477_0_main_EQ'(x6:0) :|: x6:0 - 2 * x7:0 = 1 && x6:0 > 0
f477_0_main_EQ'(x3:0) -> f477_0_main_EQ(x4:0) :|: x3:0 - 2 * x4:0 > -2 && x3:0 - 2 * x4:0 < 2 && x3:0 - 2 * x5:0 < 2 && x3:0 - 2 * x5:0 > -2 && x4:0 < x3:0 && x3:0 > 0 && x3:0 - 2 * x5:0 = 0
f477_0_main_EQ(x:0) -> f477_0_main_EQ'(x:0) :|: x:0 - 2 * x1:0 = 0 && x:0 > x2:0 && x:0 > 0

The following rules are bounded:
f477_0_main_EQ'(x8:0) -> f477_0_main_EQ(c) :|: c = x8:0 - 1 && (x8:0 - 2 * x9:0 > -2 && x8:0 - 2 * x9:0 < 2 && x8:0 > 0 && x8:0 - 2 * x9:0 = 1)
f477_0_main_EQ(x6:0) -> f477_0_main_EQ'(x6:0) :|: x6:0 - 2 * x7:0 = 1 && x6:0 > 0
f477_0_main_EQ'(x3:0) -> f477_0_main_EQ(x4:0) :|: x3:0 - 2 * x4:0 > -2 && x3:0 - 2 * x4:0 < 2 && x3:0 - 2 * x5:0 < 2 && x3:0 - 2 * x5:0 > -2 && x4:0 < x3:0 && x3:0 > 0 && x3:0 - 2 * x5:0 = 0
f477_0_main_EQ(x:0) -> f477_0_main_EQ'(x:0) :|: x:0 - 2 * x1:0 = 0 && x:0 > x2:0 && x:0 > 0


----------------------------------------

(18)
YES
