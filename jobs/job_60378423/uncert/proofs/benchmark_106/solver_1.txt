YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/e02rC.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 227 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) JBCTerminationSCC
        (8) SCCToIRSProof [SOUND, 57 ms]
        (9) IRSwT
        (10) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (11) IRSwT
        (12) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
        (13) IRSwT
        (14) TempFilterProof [SOUND, 9 ms]
        (15) IRSwT
        (16) IRSwTToQDPProof [SOUND, 5 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) JBCTerminationSCC
        (21) SCCToIRSProof [SOUND, 34 ms]
        (22) IRSwT
        (23) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (24) IRSwT
        (25) IRSwTTerminationDigraphProof [EQUIVALENT, 6 ms]
        (26) IRSwT
        (27) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (28) IRSwT
        (29) FilterProof [EQUIVALENT, 0 ms]
        (30) IntTRS
        (31) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (32) IntTRS
        (33) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (34) YES
    (35) JBCTerminationSCC
        (36) SCCToIRSProof [SOUND, 21 ms]
        (37) IRSwT
        (38) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (39) IRSwT
        (40) IRSwTTerminationDigraphProof [EQUIVALENT, 9 ms]
        (41) IRSwT
        (42) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (43) IRSwT
        (44) TempFilterProof [SOUND, 18 ms]
        (45) IntTRS
        (46) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (47) YES
    (48) JBCTerminationSCC
        (49) SCCToIRSProof [SOUND, 13 ms]
        (50) IRSwT
        (51) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (52) IRSwT
        (53) IRSwTTerminationDigraphProof [EQUIVALENT, 5 ms]
        (54) IRSwT
        (55) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (56) IRSwT
        (57) TempFilterProof [SOUND, 2 ms]
        (58) IntTRS
        (59) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (60) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class ListReversePanhandleList {
	public static void main(String... args) {
		List x = List.createPanhandleList(args[0].length(), args[1].length());
		List.reverse(x);
	}
}

class List {
	List n;

	public List(List next) {
		this.n = next;
	}

	public static void reverse(List x) {		
		List y = null;
		while (x != null) {
			List z = x;
			x = x.n;
			z.n = y;
			y = z;
		}
	}

	public static List createList(int l, List end) {
		while (--l > 0) {
			end = new List(end);
		}
		return end;
	}

	public static List createCycle(int l) {
		List last = new List(null);
		List first = createList(l - 1, last);
		last.n = first;
		return first;
	}

	public static List createPanhandleList(int pl, int cl) {
		return createList(pl, createCycle(cl));
	}

}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class ListReversePanhandleList {
	public static void main(String... args) {
		List x = List.createPanhandleList(args[0].length(), args[1].length());
		List.reverse(x);
	}
}

class List {
	List n;

	public List(List next) {
		this.n = next;
	}

	public static void reverse(List x) {		
		List y = null;
		while (x != null) {
			List z = x;
			x = x.n;
			z.n = y;
			y = z;
		}
	}

	public static List createList(int l, List end) {
		while (--l > 0) {
			end = new List(end);
		}
		return end;
	}

	public static List createCycle(int l) {
		List last = new List(null);
		List first = createList(l - 1, last);
		last.n = first;
		return first;
	}

	public static List createPanhandleList(int pl, int cl) {
		return createList(pl, createCycle(cl));
	}

}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
ListReversePanhandleList.main([Ljava/lang/String;)V: Graph of 364 nodes with 4 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 4 SCCss.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: ListReversePanhandleList.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*List: [n]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(8) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 16 IRulesP rules:
f3062_0_reverse_NULL(EOS(STATIC_3062), java.lang.Object(o1129sub), java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(o1129sub)) -> f3083_0_reverse_Load(EOS(STATIC_3083), java.lang.Object(o1129sub), java.lang.Object(List(EOC, o1048-952825999))) :|: TRUE
f3083_0_reverse_Load(EOS(STATIC_3083), java.lang.Object(o1129sub), java.lang.Object(List(EOC, o1048-952825999))) -> f3119_0_reverse_Store(EOS(STATIC_3119), java.lang.Object(o1129sub), java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(o1129sub)) :|: TRUE
f3119_0_reverse_Store(EOS(STATIC_3119), java.lang.Object(List(EOC, o1208)), java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(List(EOC, o1208))) -> f3142_0_reverse_Store(EOS(STATIC_3142), java.lang.Object(List(EOC, o1208)), java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(List(EOC, o1208))) :|: TRUE
f3142_0_reverse_Store(EOS(STATIC_3142), java.lang.Object(List(EOC, o1208)), java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(List(EOC, o1208))) -> f3153_0_reverse_Load(EOS(STATIC_3153), java.lang.Object(List(EOC, o1208)), java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(List(EOC, o1208))) :|: TRUE
f3153_0_reverse_Load(EOS(STATIC_3153), java.lang.Object(List(EOC, o1208)), java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(List(EOC, o1208))) -> f3161_0_reverse_FieldAccess(EOS(STATIC_3161), java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(List(EOC, o1208)), java.lang.Object(List(EOC, o1208))) :|: TRUE
f3161_0_reverse_FieldAccess(EOS(STATIC_3161), java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(List(EOC, o1208)), java.lang.Object(List(EOC, o1208))) -> f3183_0_reverse_Store(EOS(STATIC_3183), java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(List(EOC, o1208)), o1208) :|: TRUE
f3183_0_reverse_Store(EOS(STATIC_3183), java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(List(EOC, o1208)), o1208) -> f3218_0_reverse_Load(EOS(STATIC_3218), o1208, java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(List(EOC, o1208))) :|: TRUE
f3218_0_reverse_Load(EOS(STATIC_3218), o1208, java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(List(EOC, o1208))) -> f3262_0_reverse_Load(EOS(STATIC_3262), o1208, java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(List(EOC, o1208)), java.lang.Object(List(EOC, o1208))) :|: TRUE
f3262_0_reverse_Load(EOS(STATIC_3262), o1208, java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(List(EOC, o1208)), java.lang.Object(List(EOC, o1208))) -> f3304_0_reverse_FieldAccess(EOS(STATIC_3304), o1208, java.lang.Object(List(EOC, o1208)), java.lang.Object(List(EOC, o1208)), java.lang.Object(List(EOC, o1048-952825999))) :|: TRUE
f3304_0_reverse_FieldAccess(EOS(STATIC_3304), o1208, java.lang.Object(List(EOC, o1208)), java.lang.Object(List(EOC, o1208)), java.lang.Object(List(EOC, o1048-952825999))) -> f3342_0_reverse_Load(EOS(STATIC_3342), o1208, java.lang.Object(List(EOC, java.lang.Object(List(EOC, o1048put-1905596260))))) :|: TRUE
f3342_0_reverse_Load(EOS(STATIC_3342), o1208, java.lang.Object(List(EOC, java.lang.Object(List(EOC, o1048-1905596260))))) -> f3534_0_reverse_Store(EOS(STATIC_3534), o1208, java.lang.Object(List(EOC, java.lang.Object(List(EOC, o1048-1905596260))))) :|: TRUE
f3534_0_reverse_Store(EOS(STATIC_3534), o1208, java.lang.Object(List(EOC, java.lang.Object(List(EOC, o1048-1905596260))))) -> f3558_0_reverse_JMP(EOS(STATIC_3558), o1208, java.lang.Object(List(EOC, java.lang.Object(List(EOC, o1048-1905596260))))) :|: TRUE
f3558_0_reverse_JMP(EOS(STATIC_3558), o1208, java.lang.Object(List(EOC, java.lang.Object(List(EOC, o1048-1905596260))))) -> f3685_0_reverse_Load(EOS(STATIC_3685), o1208, java.lang.Object(List(EOC, java.lang.Object(List(EOC, o1048-1905596260))))) :|: TRUE
f3685_0_reverse_Load(EOS(STATIC_3685), o1208, java.lang.Object(List(EOC, java.lang.Object(List(EOC, o1048-1905596260))))) -> f2968_0_reverse_Load(EOS(STATIC_2968), o1208, java.lang.Object(List(EOC, java.lang.Object(List(EOC, o1048-1905596260))))) :|: TRUE
f2968_0_reverse_Load(EOS(STATIC_2968), o1046, java.lang.Object(List(EOC, o1048-952825999))) -> f3024_0_reverse_NULL(EOS(STATIC_3024), o1046, java.lang.Object(List(EOC, o1048-952825999)), o1046) :|: TRUE
f3024_0_reverse_NULL(EOS(STATIC_3024), java.lang.Object(o1129sub), java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(o1129sub)) -> f3062_0_reverse_NULL(EOS(STATIC_3062), java.lang.Object(o1129sub), java.lang.Object(List(EOC, o1048-952825999)), java.lang.Object(o1129sub)) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f3062_0_reverse_NULL(EOS(STATIC_3062), java.lang.Object(List(EOC, java.lang.Object(o1129sub:0))), java.lang.Object(List(EOC, o1048-952825999:0)), java.lang.Object(List(EOC, java.lang.Object(o1129sub:0)))) -> f3062_0_reverse_NULL(EOS(STATIC_3062), java.lang.Object(o1129sub:0), java.lang.Object(List(EOC, java.lang.Object(List(EOC, o1048put-1905596260:0)))), java.lang.Object(o1129sub:0)) :|: TRUE
Filtered constant ground arguments:
   f3062_0_reverse_NULL(x1, x2, x3, x4) -> f3062_0_reverse_NULL(x2, x3, x4)
   EOS(x1) -> EOS
   List(x1, x2) -> List(x2)
Filtered duplicate arguments:
   f3062_0_reverse_NULL(x1, x2, x3) -> f3062_0_reverse_NULL(x2, x3)
Finished conversion. Obtained 1 rules.P rules:
f3062_0_reverse_NULL(java.lang.Object(List(o1048-952825999:0)), java.lang.Object(List(java.lang.Object(o1129sub:0)))) -> f3062_0_reverse_NULL(java.lang.Object(List(java.lang.Object(List(o1048put-1905596260:0)))), java.lang.Object(o1129sub:0)) :|: TRUE

----------------------------------------

(9)
Obligation:
Rules:
f3062_0_reverse_NULL(java.lang.Object(List(o1048-952825999:0)), java.lang.Object(List(java.lang.Object(o1129sub:0)))) -> f3062_0_reverse_NULL(java.lang.Object(List(java.lang.Object(List(o1048put-1905596260:0)))), java.lang.Object(o1129sub:0)) :|: TRUE

----------------------------------------

(10) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(11)
Obligation:
Rules:
f3062_0_reverse_NULL(java.lang.Object(List(o1048-952825999:0)), java.lang.Object(List(java.lang.Object(o1129sub:0)))) -> f3062_0_reverse_NULL(java.lang.Object(List(java.lang.Object(List(o1048put-1905596260:0)))), java.lang.Object(o1129sub:0)) :|: TRUE

----------------------------------------

(12) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3062_0_reverse_NULL(java.lang.Object(List(o1048-952825999:0)), java.lang.Object(List(java.lang.Object(o1129sub:0)))) -> f3062_0_reverse_NULL(java.lang.Object(List(java.lang.Object(List(o1048put-1905596260:0)))), java.lang.Object(o1129sub:0)) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f3062_0_reverse_NULL(java.lang.Object(List(o1048-952825999:0)), java.lang.Object(List(java.lang.Object(o1129sub:0)))) -> f3062_0_reverse_NULL(java.lang.Object(List(java.lang.Object(List(o1048put-1905596260:0)))), java.lang.Object(o1129sub:0)) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3062_0_reverse_NULL(VARIABLE, VARIABLE)
java.lang.Object(VARIABLE)
List(VARIABLE)
Removed predefined arithmetic.
----------------------------------------

(15)
Obligation:
Rules:
f3062_0_reverse_NULL(java.lang.Object(List(java.lang.Object(o1129sub:0)))) -> f3062_0_reverse_NULL(java.lang.Object(o1129sub:0)) :|: TRUE

----------------------------------------

(16) IRSwTToQDPProof (SOUND)
Removed the integers and created a QDP-Problem.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f3062_0_reverse_NULL(java.lang.Object(List(java.lang.Object(o1129sub:0)))) -> f3062_0_reverse_NULL(java.lang.Object(o1129sub:0))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f3062_0_reverse_NULL(java.lang.Object(List(java.lang.Object(o1129sub:0)))) -> f3062_0_reverse_NULL(java.lang.Object(o1129sub:0))
The graph contains the following edges 1 > 1


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: ListReversePanhandleList.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*List: [n]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(21) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 16 IRulesP rules:
f2653_0_reverse_FieldAccess(EOS(STATIC_2653), o685[List.n]o685, o810[List.n]o685) -> f2683_0_reverse_FieldAccess(EOS(STATIC_2683), o685[List.n]o685, o811[List.n]o685) :|: o811[List.n]o685 < o810[List.n]o685 && o810[List.n]o685 >= 0
f2683_0_reverse_FieldAccess(EOS(STATIC_2683), o685[List.n]o685, o811[List.n]o685) -> f2715_0_reverse_Store(EOS(STATIC_2715), o685[List.n]o685, o811[List.n]o685) :|: TRUE
f2715_0_reverse_Store(EOS(STATIC_2715), o685[List.n]o685, o811[List.n]o685) -> f2766_0_reverse_Load(EOS(STATIC_2766), o685[List.n]o685, o811[List.n]o685) :|: TRUE
f2766_0_reverse_Load(EOS(STATIC_2766), o685[List.n]o685, o811[List.n]o685) -> f2783_0_reverse_Load(EOS(STATIC_2783), o685[List.n]o685, o811[List.n]o685) :|: TRUE
f2783_0_reverse_Load(EOS(STATIC_2783), o685[List.n]o685, o811[List.n]o685) -> f2801_0_reverse_FieldAccess(EOS(STATIC_2801), o685[List.n]o685, o811[List.n]o685) :|: TRUE
f2801_0_reverse_FieldAccess(EOS(STATIC_2801), o685[List.n]o685, o811[List.n]o685) -> f2875_0_reverse_Load(EOS(STATIC_2875), o685[List.n]o685, o811[List.n]o685) :|: TRUE
f2875_0_reverse_Load(EOS(STATIC_2875), o685[List.n]o685, o811[List.n]o685) -> f2892_0_reverse_Store(EOS(STATIC_2892), o685[List.n]o685, o811[List.n]o685) :|: TRUE
f2892_0_reverse_Store(EOS(STATIC_2892), o685[List.n]o685, o811[List.n]o685) -> f2919_0_reverse_JMP(EOS(STATIC_2919), o685[List.n]o685, o811[List.n]o685) :|: TRUE
f2919_0_reverse_JMP(EOS(STATIC_2919), o685[List.n]o685, o811[List.n]o685) -> f2973_0_reverse_Load(EOS(STATIC_2973), o685[List.n]o685, o811[List.n]o685) :|: TRUE
f2973_0_reverse_Load(EOS(STATIC_2973), o685[List.n]o685, o811[List.n]o685) -> f2534_0_reverse_Load(EOS(STATIC_2534), o685[List.n]o685, o811[List.n]o685) :|: TRUE
f2534_0_reverse_Load(EOS(STATIC_2534), o685[List.n]o685, o684[List.n]o685) -> f2563_0_reverse_NULL(EOS(STATIC_2563), o685[List.n]o685, o684[List.n]o685) :|: TRUE
f2563_0_reverse_NULL(EOS(STATIC_2563), o685[List.n]o685, o684[List.n]o685) -> f2572_0_reverse_Load(EOS(STATIC_2572), o685[List.n]o685, o684[List.n]o685) :|: TRUE
f2572_0_reverse_Load(EOS(STATIC_2572), o685[List.n]o685, o684[List.n]o685) -> f2586_0_reverse_Store(EOS(STATIC_2586), o685[List.n]o685, o684[List.n]o685) :|: TRUE
f2586_0_reverse_Store(EOS(STATIC_2586), o685[List.n]o685, o684[List.n]o685) -> f2602_0_reverse_Load(EOS(STATIC_2602), o685[List.n]o685, o684[List.n]o685) :|: TRUE
f2602_0_reverse_Load(EOS(STATIC_2602), o685[List.n]o685, o684[List.n]o685) -> f2616_0_reverse_FieldAccess(EOS(STATIC_2616), o685[List.n]o685, o684[List.n]o685) :|: TRUE
f2616_0_reverse_FieldAccess(EOS(STATIC_2616), o685[List.n]o685, o684[List.n]o685) -> f2653_0_reverse_FieldAccess(EOS(STATIC_2653), o685[List.n]o685, o684[List.n]o685) :|: o685[List.n]o685 > 0 && o684[List.n]o685 > 0
Combined rules. Obtained 1 IRulesP rules:
f2653_0_reverse_FieldAccess(EOS(STATIC_2653), o685[List.n]o685:0, o810[List.n]o685:0) -> f2653_0_reverse_FieldAccess(EOS(STATIC_2653), o685[List.n]o685:0, o811[List.n]o685:0) :|: o810[List.n]o685:0 > -1 && o811[List.n]o685:0 < o810[List.n]o685:0 && o685[List.n]o685:0 > 0 && o811[List.n]o685:0 > 0
Filtered constant ground arguments:
   f2653_0_reverse_FieldAccess(x1, x2, x3) -> f2653_0_reverse_FieldAccess(x2, x3)
   EOS(x1) -> EOS
Finished conversion. Obtained 1 rules.P rules:
f2653_0_reverse_FieldAccess(o685[List.n]o685:0, o810[List.n]o685:0) -> f2653_0_reverse_FieldAccess(o685[List.n]o685:0, o811[List.n]o685:0) :|: o811[List.n]o685:0 < o810[List.n]o685:0 && o810[List.n]o685:0 > -1 && o811[List.n]o685:0 > 0 && o685[List.n]o685:0 > 0

----------------------------------------

(22)
Obligation:
Rules:
f2653_0_reverse_FieldAccess(o685[List.n]o685:0, o810[List.n]o685:0) -> f2653_0_reverse_FieldAccess(o685[List.n]o685:0, o811[List.n]o685:0) :|: o811[List.n]o685:0 < o810[List.n]o685:0 && o810[List.n]o685:0 > -1 && o811[List.n]o685:0 > 0 && o685[List.n]o685:0 > 0

----------------------------------------

(23) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(24)
Obligation:
Rules:
f2653_0_reverse_FieldAccess(o685[List.n]o685:0, o810[List.n]o685:0) -> f2653_0_reverse_FieldAccess(o685[List.n]o685:0, o811[List.n]o685:0) :|: o811[List.n]o685:0 < o810[List.n]o685:0 && o810[List.n]o685:0 > -1 && o811[List.n]o685:0 > 0 && o685[List.n]o685:0 > 0

----------------------------------------

(25) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2653_0_reverse_FieldAccess(o685[List.n]o685:0, o810[List.n]o685:0) -> f2653_0_reverse_FieldAccess(o685[List.n]o685:0, o811[List.n]o685:0) :|: o811[List.n]o685:0 < o810[List.n]o685:0 && o810[List.n]o685:0 > -1 && o811[List.n]o685:0 > 0 && o685[List.n]o685:0 > 0

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(26)
Obligation:

Termination digraph:
Nodes:
(1) f2653_0_reverse_FieldAccess(o685[List.n]o685:0, o810[List.n]o685:0) -> f2653_0_reverse_FieldAccess(o685[List.n]o685:0, o811[List.n]o685:0) :|: o811[List.n]o685:0 < o810[List.n]o685:0 && o810[List.n]o685:0 > -1 && o811[List.n]o685:0 > 0 && o685[List.n]o685:0 > 0

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(27) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(28)
Obligation:
Rules:
f2653_0_reverse_FieldAccess(o685[List.n]o685:0:0, o810[List.n]o685:0:0) -> f2653_0_reverse_FieldAccess(o685[List.n]o685:0:0, o811[List.n]o685:0:0) :|: o811[List.n]o685:0:0 > 0 && o685[List.n]o685:0:0 > 0 && o810[List.n]o685:0:0 > -1 && o811[List.n]o685:0:0 < o810[List.n]o685:0:0

----------------------------------------

(29) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f2653_0_reverse_FieldAccess(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(30)
Obligation:
Rules:
f2653_0_reverse_FieldAccess(o685[List.n]o685:0:0, o810[List.n]o685:0:0) -> f2653_0_reverse_FieldAccess(o685[List.n]o685:0:0, o811[List.n]o685:0:0) :|: o811[List.n]o685:0:0 > 0 && o685[List.n]o685:0:0 > 0 && o810[List.n]o685:0:0 > -1 && o811[List.n]o685:0:0 < o810[List.n]o685:0:0

----------------------------------------

(31) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(32)
Obligation:
Rules:
f2653_0_reverse_FieldAccess(o685[List.n]o685:0:0:0, o810[List.n]o685:0:0:0) -> f2653_0_reverse_FieldAccess(o685[List.n]o685:0:0:0, o811[List.n]o685:0:0:0) :|: o810[List.n]o685:0:0:0 > -1 && o811[List.n]o685:0:0:0 < o810[List.n]o685:0:0:0 && o685[List.n]o685:0:0:0 > 0 && o811[List.n]o685:0:0:0 > 0

----------------------------------------

(33) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f2653_0_reverse_FieldAccess(x, x1)] = x1

The following rules are decreasing:
f2653_0_reverse_FieldAccess(o685[List.n]o685:0:0:0, o810[List.n]o685:0:0:0) -> f2653_0_reverse_FieldAccess(o685[List.n]o685:0:0:0, o811[List.n]o685:0:0:0) :|: o810[List.n]o685:0:0:0 > -1 && o811[List.n]o685:0:0:0 < o810[List.n]o685:0:0:0 && o685[List.n]o685:0:0:0 > 0 && o811[List.n]o685:0:0:0 > 0
The following rules are bounded:
f2653_0_reverse_FieldAccess(o685[List.n]o685:0:0:0, o810[List.n]o685:0:0:0) -> f2653_0_reverse_FieldAccess(o685[List.n]o685:0:0:0, o811[List.n]o685:0:0:0) :|: o810[List.n]o685:0:0:0 > -1 && o811[List.n]o685:0:0:0 < o810[List.n]o685:0:0:0 && o685[List.n]o685:0:0:0 > 0 && o811[List.n]o685:0:0:0 > 0

----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: ListReversePanhandleList.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(36) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 17 IRulesP rules:
f944_0_createList_Load(EOS(STATIC_944), i95) -> f984_0_createList_LE(EOS(STATIC_984), i95, i95) :|: TRUE
f984_0_createList_LE(EOS(STATIC_984), i120, i120) -> f1090_0_createList_LE(EOS(STATIC_1090), i120, i120) :|: TRUE
f1090_0_createList_LE(EOS(STATIC_1090), i120, i120) -> f1101_0_createList_New(EOS(STATIC_1101), i120) :|: i120 > 0
f1101_0_createList_New(EOS(STATIC_1101), i120) -> f1116_0_createList_Duplicate(EOS(STATIC_1116), i120) :|: TRUE
f1116_0_createList_Duplicate(EOS(STATIC_1116), i120) -> f1130_0_createList_Load(EOS(STATIC_1130), i120) :|: TRUE
f1130_0_createList_Load(EOS(STATIC_1130), i120) -> f1143_0_createList_InvokeMethod(EOS(STATIC_1143), i120) :|: TRUE
f1143_0_createList_InvokeMethod(EOS(STATIC_1143), i120) -> f1159_0__init__Load(EOS(STATIC_1159), i120) :|: TRUE
f1159_0__init__Load(EOS(STATIC_1159), i120) -> f1171_0__init__InvokeMethod(EOS(STATIC_1171), i120) :|: TRUE
f1171_0__init__InvokeMethod(EOS(STATIC_1171), i120) -> f1185_0__init__Load(EOS(STATIC_1185), i120) :|: TRUE
f1185_0__init__Load(EOS(STATIC_1185), i120) -> f1199_0__init__Load(EOS(STATIC_1199), i120) :|: TRUE
f1199_0__init__Load(EOS(STATIC_1199), i120) -> f1216_0__init__FieldAccess(EOS(STATIC_1216), i120) :|: TRUE
f1216_0__init__FieldAccess(EOS(STATIC_1216), i120) -> f1231_0__init__Return(EOS(STATIC_1231), i120) :|: TRUE
f1231_0__init__Return(EOS(STATIC_1231), i120) -> f1247_0_createList_Store(EOS(STATIC_1247), i120) :|: TRUE
f1247_0_createList_Store(EOS(STATIC_1247), i120) -> f1255_0_createList_JMP(EOS(STATIC_1255), i120) :|: TRUE
f1255_0_createList_JMP(EOS(STATIC_1255), i120) -> f1271_0_createList_Inc(EOS(STATIC_1271), i120) :|: TRUE
f1271_0_createList_Inc(EOS(STATIC_1271), i120) -> f932_0_createList_Inc(EOS(STATIC_932), i120) :|: TRUE
f932_0_createList_Inc(EOS(STATIC_932), i13) -> f944_0_createList_Load(EOS(STATIC_944), i13 + -1) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f944_0_createList_Load(EOS(STATIC_944), i95:0) -> f944_0_createList_Load(EOS(STATIC_944), i95:0 - 1) :|: i95:0 > 0
Filtered constant ground arguments:
   f944_0_createList_Load(x1, x2) -> f944_0_createList_Load(x2)
   EOS(x1) -> EOS
Finished conversion. Obtained 1 rules.P rules:
f944_0_createList_Load(i95:0) -> f944_0_createList_Load(i95:0 - 1) :|: i95:0 > 0

----------------------------------------

(37)
Obligation:
Rules:
f944_0_createList_Load(i95:0) -> f944_0_createList_Load(i95:0 - 1) :|: i95:0 > 0

----------------------------------------

(38) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(39)
Obligation:
Rules:
f944_0_createList_Load(i95:0) -> f944_0_createList_Load(arith) :|: i95:0 > 0 && arith = i95:0 - 1

----------------------------------------

(40) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f944_0_createList_Load(i95:0) -> f944_0_createList_Load(arith) :|: i95:0 > 0 && arith = i95:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(41)
Obligation:

Termination digraph:
Nodes:
(1) f944_0_createList_Load(i95:0) -> f944_0_createList_Load(arith) :|: i95:0 > 0 && arith = i95:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(42) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(43)
Obligation:
Rules:
f944_0_createList_Load(i95:0:0) -> f944_0_createList_Load(i95:0:0 - 1) :|: i95:0:0 > 0

----------------------------------------

(44) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f944_0_createList_Load(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(45)
Obligation:
Rules:
f944_0_createList_Load(i95:0:0) -> f944_0_createList_Load(c) :|: c = i95:0:0 - 1 && i95:0:0 > 0

----------------------------------------

(46) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f944_0_createList_Load ] = f944_0_createList_Load_1

The following rules are decreasing:
f944_0_createList_Load(i95:0:0) -> f944_0_createList_Load(c) :|: c = i95:0:0 - 1 && i95:0:0 > 0

The following rules are bounded:
f944_0_createList_Load(i95:0:0) -> f944_0_createList_Load(c) :|: c = i95:0:0 - 1 && i95:0:0 > 0


----------------------------------------

(47)
YES

----------------------------------------

(48)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: ListReversePanhandleList.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(49) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 17 IRulesP rules:
f746_0_createList_Load(EOS(STATIC_746), i91) -> f747_0_createList_LE(EOS(STATIC_747), i91, i91) :|: TRUE
f747_0_createList_LE(EOS(STATIC_747), i93, i93) -> f751_0_createList_LE(EOS(STATIC_751), i93, i93) :|: TRUE
f751_0_createList_LE(EOS(STATIC_751), i93, i93) -> f758_0_createList_New(EOS(STATIC_758), i93) :|: i93 > 0
f758_0_createList_New(EOS(STATIC_758), i93) -> f764_0_createList_Duplicate(EOS(STATIC_764), i93) :|: TRUE
f764_0_createList_Duplicate(EOS(STATIC_764), i93) -> f767_0_createList_Load(EOS(STATIC_767), i93) :|: TRUE
f767_0_createList_Load(EOS(STATIC_767), i93) -> f773_0_createList_InvokeMethod(EOS(STATIC_773), i93) :|: TRUE
f773_0_createList_InvokeMethod(EOS(STATIC_773), i93) -> f778_0__init__Load(EOS(STATIC_778), i93) :|: TRUE
f778_0__init__Load(EOS(STATIC_778), i93) -> f790_0__init__InvokeMethod(EOS(STATIC_790), i93) :|: TRUE
f790_0__init__InvokeMethod(EOS(STATIC_790), i93) -> f806_0__init__Load(EOS(STATIC_806), i93) :|: TRUE
f806_0__init__Load(EOS(STATIC_806), i93) -> f900_0__init__Load(EOS(STATIC_900), i93) :|: TRUE
f900_0__init__Load(EOS(STATIC_900), i93) -> f913_0__init__FieldAccess(EOS(STATIC_913), i93) :|: TRUE
f913_0__init__FieldAccess(EOS(STATIC_913), i93) -> f929_0__init__Return(EOS(STATIC_929), i93) :|: TRUE
f929_0__init__Return(EOS(STATIC_929), i93) -> f936_0_createList_Store(EOS(STATIC_936), i93) :|: TRUE
f936_0_createList_Store(EOS(STATIC_936), i93) -> f940_0_createList_JMP(EOS(STATIC_940), i93) :|: TRUE
f940_0_createList_JMP(EOS(STATIC_940), i93) -> f976_0_createList_Inc(EOS(STATIC_976), i93) :|: TRUE
f976_0_createList_Inc(EOS(STATIC_976), i93) -> f741_0_createList_Inc(EOS(STATIC_741), i93) :|: TRUE
f741_0_createList_Inc(EOS(STATIC_741), i85) -> f746_0_createList_Load(EOS(STATIC_746), i85 + -1) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f746_0_createList_Load(EOS(STATIC_746), i91:0) -> f746_0_createList_Load(EOS(STATIC_746), i91:0 - 1) :|: i91:0 > 0
Filtered constant ground arguments:
   f746_0_createList_Load(x1, x2) -> f746_0_createList_Load(x2)
   EOS(x1) -> EOS
Finished conversion. Obtained 1 rules.P rules:
f746_0_createList_Load(i91:0) -> f746_0_createList_Load(i91:0 - 1) :|: i91:0 > 0

----------------------------------------

(50)
Obligation:
Rules:
f746_0_createList_Load(i91:0) -> f746_0_createList_Load(i91:0 - 1) :|: i91:0 > 0

----------------------------------------

(51) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(52)
Obligation:
Rules:
f746_0_createList_Load(i91:0) -> f746_0_createList_Load(arith) :|: i91:0 > 0 && arith = i91:0 - 1

----------------------------------------

(53) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f746_0_createList_Load(i91:0) -> f746_0_createList_Load(arith) :|: i91:0 > 0 && arith = i91:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(54)
Obligation:

Termination digraph:
Nodes:
(1) f746_0_createList_Load(i91:0) -> f746_0_createList_Load(arith) :|: i91:0 > 0 && arith = i91:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(55) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(56)
Obligation:
Rules:
f746_0_createList_Load(i91:0:0) -> f746_0_createList_Load(i91:0:0 - 1) :|: i91:0:0 > 0

----------------------------------------

(57) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f746_0_createList_Load(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(58)
Obligation:
Rules:
f746_0_createList_Load(i91:0:0) -> f746_0_createList_Load(c) :|: c = i91:0:0 - 1 && i91:0:0 > 0

----------------------------------------

(59) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f746_0_createList_Load(x)] = x

The following rules are decreasing:
f746_0_createList_Load(i91:0:0) -> f746_0_createList_Load(c) :|: c = i91:0:0 - 1 && i91:0:0 > 0
The following rules are bounded:
f746_0_createList_Load(i91:0:0) -> f746_0_createList_Load(c) :|: c = i91:0:0 - 1 && i91:0:0 > 0

----------------------------------------

(60)
YES
