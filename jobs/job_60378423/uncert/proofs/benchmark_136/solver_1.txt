NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/bFM56.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 148 ms]
(4) JBCTerminationGraph
(5) JBCNonTerm [COMPLETE, 92 ms]
(6) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.gauss;

public class Gauss {

	// does not terminate for negative numbers 
	
	public static int sum(int n) {
		int sum = 0;
		while (n != 0) {
			sum += n;
			n--;
		}
		return sum;
	}

}


package simple.gauss;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
        int value = args[1].length();
        if (args[0].length() % 2 == 0) {
            value = -value;
        }
		Gauss.sum(value);
	}

}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.gauss;

public class Gauss {

	// does not terminate for negative numbers 
	
	public static int sum(int n) {
		int sum = 0;
		while (n != 0) {
			sum += n;
			n--;
		}
		return sum;
	}

}


package simple.gauss;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
        int value = args[1].length();
        if (args[0].length() % 2 == 0) {
            value = -value;
        }
		Gauss.sum(value);
	}

}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
simple.gauss.Main.main([Ljava/lang/String;)V: Graph of 139 nodes with 2 SCCs.





----------------------------------------

(5) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<simple.gauss.Main.main||0: load ADDR args||args: a28|| ->
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a28([java.lang.String...]): {o31, o15} -->{java.lang.Object...}
	o15!: String(count=1, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a28-><-o32
a28-><-o31
a28-><-o16
a28-><-o15
YES:  (JL1)
1:<simple.gauss.Main.main||1: push 1||args: a28||a28>
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a28([java.lang.String...]): {o31, o15} -->{java.lang.Object...}
	o15!: String(count=1, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a28-><-o32
a28-><-o31
a28-><-o16
a28-><-o15
YES:  (JL1)
2:<simple.gauss.Main.main||2: Read ADDR from array||args: a28||a28, 1>
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a28([java.lang.String...]): {o31, o15} -->{java.lang.Object...}
	o15!: String(count=1, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a28-><-o32
a28-><-o31
a28-><-o16
a28-><-o15
YES:  (JL1)
3:<simple.gauss.Main.main||3: java.lang.String.length()I||args: a28||o15>
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a28([java.lang.String...]): {o31, o15} -->{java.lang.Object...}
	o15!: String(count=1, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a28-><-o32
a28-><-o31
a28-><-o16
a28-><-o15
YES:  (JL1)
4:<java.lang.String.length||0: load ADDR this||this: o15|| ->
<simple.gauss.Main.main||3: java.lang.String.length||args: a28|| ->
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a28([java.lang.String...]): {o31, o15} -->{java.lang.Object...}
	o15!: String(count=1, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a28-><-o32
a28-><-o31
a28-><-o16
a28-><-o15
YES:  (JL1)
5:<java.lang.String.length||1: Read from count|| - ||o15>
<simple.gauss.Main.main||3: java.lang.String.length||args: a28|| ->
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a28([java.lang.String...]): {o31, o15} -->{java.lang.Object...}
	o15!: String(count=1, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a28-><-o32
a28-><-o31
a28-><-o16
a28-><-o15
YES:  (JL1)
6:<java.lang.String.length||4: return INT|| - ||1>
<simple.gauss.Main.main||3: java.lang.String.length||args: a28|| ->
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a28([java.lang.String...]): {o31, o15} -->{java.lang.Object...}
	o15!: String(count=1, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a28-><-o32
a28-><-o31
a28-><-o16
a28-><-o15
YES:  (JL1)
7:<simple.gauss.Main.main||6: store INT to value||args: a28||1>
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a28([java.lang.String...]): {o31, o15} -->{java.lang.Object...}
	o15!: String(count=1, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a28-><-o32
a28-><-o31
a28-><-o16
a28-><-o15
YES:  (JL1)
8:<simple.gauss.Main.main||7: load ADDR args||args: a28, value: 1|| ->
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a28([java.lang.String...]): {o31, o15} -->{java.lang.Object...}
	o15!: String(count=1, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a28-><-o32
a28-><-o31
a28-><-o16
a28-><-o15
YES:  (JL1)
9:<simple.gauss.Main.main||8: push 0||value: 1||a28>
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a28([java.lang.String...]): {o31, o15} -->{java.lang.Object...}
	o15!: String(count=1, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a28-><-o32
a28-><-o31
a28-><-o16
a28-><-o15
YES:  (JL1)
10:<simple.gauss.Main.main||9: Read ADDR from array||value: 1||a28, 0>
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a28([java.lang.String...]): {o31, o15} -->{java.lang.Object...}
	o15!: String(count=1, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a28-><-o32
a28-><-o31
a28-><-o16
a28-><-o15
YES:  (JL1)
11:<simple.gauss.Main.main||10: java.lang.String.length()I||value: 1||o31>
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
YES:  (JL1)
12:<java.lang.String.length||0: load ADDR this||this: o31|| ->
<simple.gauss.Main.main||10: java.lang.String.length||value: 1|| ->
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
YES:  (JL1)
13:<java.lang.String.length||1: Read from count|| - ||o31>
<simple.gauss.Main.main||10: java.lang.String.length||value: 1|| ->
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
YES:  (JL1)
14:<java.lang.String.length||4: return INT|| - ||0>
<simple.gauss.Main.main||10: java.lang.String.length||value: 1|| ->
YES:  (JL1)
15:<simple.gauss.Main.main||13: push 2||value: 1||0>
YES:  (JL1)
16:<simple.gauss.Main.main||14: TMOD||value: 1||0, 2>
YES:  (JL1)
17:<simple.gauss.Main.main||15: NE 0||value: 1||0>
YES:  (JL1)
18:<simple.gauss.Main.main||18: load INT value||value: 1|| ->
YES:  (JL1)
19:<simple.gauss.Main.main||19: NEG|| - ||1>
YES:  (JL1)
20:<simple.gauss.Main.main||20: store INT to value|| - ||-1>
YES:  (JL1)
21:<simple.gauss.Main.main||21: load INT value||value: -1|| ->
YES:  (JL1)
22:<simple.gauss.Main.main||22: simple.gauss.Gauss.sum(I)I|| - ||-1>
YES:  (JL1)
23:<simple.gauss.Gauss.sum||0: push 0||n: -1|| ->
<simple.gauss.Main.main||22: simple.gauss.Gauss.sum|| - || ->
YES:  (JL1)
24:<simple.gauss.Gauss.sum||1: store INT to sum||n: -1||0>
<simple.gauss.Main.main||22: simple.gauss.Gauss.sum|| - || ->
YES:  (JL1)
25:<simple.gauss.Gauss.sum||2: load INT n||n: -1, sum: 0|| ->
<simple.gauss.Main.main||22: simple.gauss.Gauss.sum|| - || ->
YES:  (JL1)
Start state of loop: 

<simple.gauss.Gauss.sum||2: load INT n||n: i808, sum: i810|| ->
[a17(lv_0_0)]
<simple.gauss.Main.main||22: simple.gauss.Gauss.sum|| - || ->
	i808: (-inf,0](u2){-inf,+inf}
	i810: (-inf,0](u2){-inf,+inf}
	i6: [2,+inf){0,+inf}
	a17([java.lang.String...]): length i6 -->{java.lang.Object...}
YES:  (JL1)


In the loop head node, references [i808] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((initial_i808 <= 0 and initial_i810 <= 0 and 2 <= initial_i6) and (((path1_i808 = path1_i870 and path1_i879 = (path1_i810 + path1_i870) and path1_i885 = (path1_i870 + -1) and path1_i885 = res_i808 and path1_i808 = initial_i808) and path1_i870 < 0) and ((res1_i808 = res1_i870 and res1_i879 = (res1_i810 + res1_i870) and res1_i885 = (res1_i870 + -1) and res_i808 = res1_i808) and !res1_i870 < 0)))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(6)
NO
