YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/7OlkW.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 119 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 41 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 18 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Overflow {

  // does not terminate for any value of i
  public static void overflow(int i) {
    while(i <= 2147483647) {
      i++;
    }
  }

  public static void main(String[] args) {
    Random.args = args;
    overflow(Random.random());
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Overflow {

  // does not terminate for any value of i
  public static void overflow(int i) {
    while(i <= 2147483647) {
      i++;
    }
  }

  public static void main(String[] args) {
    Random.args = args;
    overflow(Random.random());
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Overflow.main([Ljava/lang/String;)V: Graph of 109 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Overflow.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 7 IRulesP rules:
f242_0_overflow_ConstantStackPush(EOS(STATIC_242), i30, i30) -> f248_0_overflow_GT(EOS(STATIC_248), i30, i30, 2147483647) :|: TRUE
f248_0_overflow_GT(EOS(STATIC_248), i41, i41, matching1) -> f260_0_overflow_GT(EOS(STATIC_260), i41, i41, 2147483647) :|: TRUE && matching1 = 2147483647
f260_0_overflow_GT(EOS(STATIC_260), i41, i41, matching1) -> f268_0_overflow_Inc(EOS(STATIC_268), i41) :|: i41 <= 2147483647 && matching1 = 2147483647
f268_0_overflow_Inc(EOS(STATIC_268), i41) -> f279_0_overflow_JMP(EOS(STATIC_279), i41 + 1) :|: TRUE
f279_0_overflow_JMP(EOS(STATIC_279), i45) -> f293_0_overflow_Load(EOS(STATIC_293), i45) :|: TRUE
f293_0_overflow_Load(EOS(STATIC_293), i45) -> f218_0_overflow_Load(EOS(STATIC_218), i45) :|: TRUE
f218_0_overflow_Load(EOS(STATIC_218), i30) -> f242_0_overflow_ConstantStackPush(EOS(STATIC_242), i30, i30) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f242_0_overflow_ConstantStackPush(EOS(STATIC_242), i30:0, i30:0) -> f242_0_overflow_ConstantStackPush(EOS(STATIC_242), i30:0 + 1, i30:0 + 1) :|: i30:0 < 2147483648
Filtered constant ground arguments:
   f242_0_overflow_ConstantStackPush(x1, x2, x3) -> f242_0_overflow_ConstantStackPush(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f242_0_overflow_ConstantStackPush(x1, x2) -> f242_0_overflow_ConstantStackPush(x2)
Finished conversion. Obtained 1 rules.P rules:
f242_0_overflow_ConstantStackPush(i30:0) -> f242_0_overflow_ConstantStackPush(i30:0 + 1) :|: i30:0 < 2147483648

----------------------------------------

(8)
Obligation:
Rules:
f242_0_overflow_ConstantStackPush(i30:0) -> f242_0_overflow_ConstantStackPush(i30:0 + 1) :|: i30:0 < 2147483648

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f242_0_overflow_ConstantStackPush(i30:0) -> f242_0_overflow_ConstantStackPush(arith) :|: i30:0 < 2147483648 && arith = i30:0 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f242_0_overflow_ConstantStackPush(i30:0) -> f242_0_overflow_ConstantStackPush(arith) :|: i30:0 < 2147483648 && arith = i30:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f242_0_overflow_ConstantStackPush(i30:0) -> f242_0_overflow_ConstantStackPush(arith) :|: i30:0 < 2147483648 && arith = i30:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f242_0_overflow_ConstantStackPush(i30:0:0) -> f242_0_overflow_ConstantStackPush(i30:0:0 + 1) :|: i30:0:0 < 2147483648

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f242_0_overflow_ConstantStackPush(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f242_0_overflow_ConstantStackPush(i30:0:0) -> f242_0_overflow_ConstantStackPush(c) :|: c = i30:0:0 + 1 && i30:0:0 < 2147483648

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f242_0_overflow_ConstantStackPush(x)] = 2147483647 - x

The following rules are decreasing:
f242_0_overflow_ConstantStackPush(i30:0:0) -> f242_0_overflow_ConstantStackPush(c) :|: c = i30:0:0 + 1 && i30:0:0 < 2147483648
The following rules are bounded:
f242_0_overflow_ConstantStackPush(i30:0:0) -> f242_0_overflow_ConstantStackPush(c) :|: c = i30:0:0 + 1 && i30:0:0 < 2147483648

----------------------------------------

(18)
YES
