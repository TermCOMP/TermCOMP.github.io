MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/LWRwc.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could not be shown:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 276 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 54 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 32 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) IRSwTChainingProof [EQUIVALENT, 0 ms]
(16) IRSwT
(17) IRSwTTerminationDigraphProof [EQUIVALENT, 16 ms]
(18) IRSwT
(19) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(20) IRSwT
(21) TempFilterProof [SOUND, 708 ms]
(22) IRSwT
(23) IRSwTTerminationDigraphProof [EQUIVALENT, 7 ms]
(24) IRSwT
(25) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(26) IRSwT


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class MinusUserDefined{
  public static boolean gt(int x, int y) {

    while (x > 0 && y > 0) {
      x--;
      y--;
    }

    return x > 0;
  }


  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    int res = 0;

    while (gt(x,y)) {

      y++;
      res++;

    }
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class MinusUserDefined{
  public static boolean gt(int x, int y) {

    while (x > 0 && y > 0) {
      x--;
      y--;
    }

    return x > 0;
  }


  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    int res = 0;

    while (gt(x,y)) {

      y++;
      res++;

    }
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
MinusUserDefined.main([Ljava/lang/String;)V: Graph of 202 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: MinusUserDefined.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 26 IRulesP rules:
f5448_0_main_Load(EOS(STATIC_5448), i1042, i1043, i1042) -> f5449_0_main_InvokeMethod(EOS(STATIC_5449), i1042, i1043, i1042, i1043) :|: TRUE
f5449_0_main_InvokeMethod(EOS(STATIC_5449), i1042, i1043, i1042, i1043) -> f5453_0_gt_Load(EOS(STATIC_5453), i1042, i1043, i1042, i1043) :|: TRUE
f5453_0_gt_Load(EOS(STATIC_5453), i1042, i1043, i1042, i1043) -> f5958_0_gt_Load(EOS(STATIC_5958), i1042, i1043, i1042, i1043) :|: TRUE
f5958_0_gt_Load(EOS(STATIC_5958), i1094, i1096, i1092, i1093) -> f5971_0_gt_LE(EOS(STATIC_5971), i1094, i1096, i1092, i1093, i1092) :|: TRUE
f5971_0_gt_LE(EOS(STATIC_5971), i1192, i1096, i1191, i1093, i1191) -> f5980_0_gt_LE(EOS(STATIC_5980), i1192, i1096, i1191, i1093, i1191) :|: TRUE
f5980_0_gt_LE(EOS(STATIC_5980), i1192, i1096, i1191, i1093, i1191) -> f5986_0_gt_Load(EOS(STATIC_5986), i1192, i1096, i1191, i1093) :|: i1191 > 0
f5986_0_gt_Load(EOS(STATIC_5986), i1192, i1096, i1191, i1093) -> f5991_0_gt_LE(EOS(STATIC_5991), i1192, i1096, i1191, i1093, i1093) :|: TRUE
f5991_0_gt_LE(EOS(STATIC_5991), i1192, i1096, i1191, matching1, matching2) -> f5998_0_gt_LE(EOS(STATIC_5998), i1192, i1096, i1191, 0, 0) :|: TRUE && matching1 = 0 && matching2 = 0
f5991_0_gt_LE(EOS(STATIC_5991), i1192, i1195, i1191, i1194, i1194) -> f5999_0_gt_LE(EOS(STATIC_5999), i1192, i1195, i1191, i1194, i1194) :|: TRUE
f5998_0_gt_LE(EOS(STATIC_5998), i1192, i1096, i1191, matching1, matching2) -> f6010_0_gt_Load(EOS(STATIC_6010), i1192, i1096, i1191) :|: 0 <= 0 && matching1 = 0 && matching2 = 0
f6010_0_gt_Load(EOS(STATIC_6010), i1192, i1096, i1191) -> f6021_0_gt_LE(EOS(STATIC_6021), i1192, i1096, i1191) :|: TRUE
f6021_0_gt_LE(EOS(STATIC_6021), i1192, i1096, i1191) -> f6030_0_gt_ConstantStackPush(EOS(STATIC_6030), i1192, i1096) :|: i1191 > 0
f6030_0_gt_ConstantStackPush(EOS(STATIC_6030), i1192, i1096) -> f6037_0_gt_JMP(EOS(STATIC_6037), i1192, i1096, 1) :|: TRUE
f6037_0_gt_JMP(EOS(STATIC_6037), i1192, i1096, matching1) -> f6134_0_gt_Return(EOS(STATIC_6134), i1192, i1096, 1) :|: TRUE && matching1 = 1
f6134_0_gt_Return(EOS(STATIC_6134), i1192, i1096, matching1) -> f6141_0_main_EQ(EOS(STATIC_6141), i1192, i1096, 1) :|: TRUE && matching1 = 1
f6141_0_main_EQ(EOS(STATIC_6141), i1192, i1096, matching1) -> f6145_0_main_Inc(EOS(STATIC_6145), i1192, i1096) :|: 1 > 0 && matching1 = 1
f6145_0_main_Inc(EOS(STATIC_6145), i1192, i1096) -> f6148_0_main_Inc(EOS(STATIC_6148), i1192, i1096 + 1) :|: TRUE
f6148_0_main_Inc(EOS(STATIC_6148), i1192, i1227) -> f6150_0_main_JMP(EOS(STATIC_6150), i1192, i1227) :|: TRUE
f6150_0_main_JMP(EOS(STATIC_6150), i1192, i1227) -> f6202_0_main_Load(EOS(STATIC_6202), i1192, i1227) :|: TRUE
f6202_0_main_Load(EOS(STATIC_6202), i1192, i1227) -> f5435_0_main_Load(EOS(STATIC_5435), i1192, i1227) :|: TRUE
f5435_0_main_Load(EOS(STATIC_5435), i1042, i1043) -> f5448_0_main_Load(EOS(STATIC_5448), i1042, i1043, i1042) :|: TRUE
f5999_0_gt_LE(EOS(STATIC_5999), i1192, i1195, i1191, i1194, i1194) -> f6013_0_gt_Inc(EOS(STATIC_6013), i1192, i1195, i1191, i1194) :|: i1194 > 0
f6013_0_gt_Inc(EOS(STATIC_6013), i1192, i1195, i1191, i1194) -> f6024_0_gt_Inc(EOS(STATIC_6024), i1192, i1195, i1191 + -1, i1194) :|: TRUE
f6024_0_gt_Inc(EOS(STATIC_6024), i1192, i1195, i1199, i1194) -> f6031_0_gt_JMP(EOS(STATIC_6031), i1192, i1195, i1199, i1194 + -1) :|: TRUE
f6031_0_gt_JMP(EOS(STATIC_6031), i1192, i1195, i1199, i1200) -> f6119_0_gt_Load(EOS(STATIC_6119), i1192, i1195, i1199, i1200) :|: TRUE
f6119_0_gt_Load(EOS(STATIC_6119), i1192, i1195, i1199, i1200) -> f5958_0_gt_Load(EOS(STATIC_5958), i1192, i1195, i1199, i1200) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f5991_0_gt_LE(EOS(STATIC_5991), i1192:0, i1195:0, i1191:0, i1194:0, i1194:0) -> f5991_0_gt_LE(EOS(STATIC_5991), i1192:0, i1195:0, i1191:0 - 1, i1194:0 - 1, i1194:0 - 1) :|: i1191:0 > 1 && i1194:0 > 0
f5991_0_gt_LE(EOS(STATIC_5991), i1192:0, i1096:0, i1191:0, 0, 0) -> f5991_0_gt_LE(EOS(STATIC_5991), i1192:0, i1096:0 + 1, i1192:0, i1096:0 + 1, i1096:0 + 1) :|: i1192:0 > 0 && i1191:0 > 0
Filtered constant ground arguments:
   f5991_0_gt_LE(x1, x2, x3, x4, x5, x6) -> f5991_0_gt_LE(x2, x3, x4, x5, x6)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f5991_0_gt_LE(x1, x2, x3, x4, x5) -> f5991_0_gt_LE(x1, x2, x3, x5)
Finished conversion. Obtained 2 rules.P rules:
f5991_0_gt_LE(i1192:0, i1195:0, i1191:0, i1194:0) -> f5991_0_gt_LE(i1192:0, i1195:0, i1191:0 - 1, i1194:0 - 1) :|: i1191:0 > 1 && i1194:0 > 0
f5991_0_gt_LE(i1192:0, i1096:0, i1191:0, cons_0) -> f5991_0_gt_LE(i1192:0, i1096:0 + 1, i1192:0, i1096:0 + 1) :|: i1192:0 > 0 && i1191:0 > 0 && cons_0 = 0

----------------------------------------

(8)
Obligation:
Rules:
f5991_0_gt_LE(i1192:0, i1195:0, i1191:0, i1194:0) -> f5991_0_gt_LE(i1192:0, i1195:0, i1191:0 - 1, i1194:0 - 1) :|: i1191:0 > 1 && i1194:0 > 0
f5991_0_gt_LE(x, x1, x2, x3) -> f5991_0_gt_LE(x, x1 + 1, x, x1 + 1) :|: x > 0 && x2 > 0 && x3 = 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f5991_0_gt_LE(i1192:0, i1195:0, i1191:0, i1194:0) -> f5991_0_gt_LE(i1192:0, i1195:0, arith, arith1) :|: i1191:0 > 1 && i1194:0 > 0 && arith = i1191:0 - 1 && arith1 = i1194:0 - 1
f5991_0_gt_LE(x4, x5, x6, x7) -> f5991_0_gt_LE(x4, x8, x4, x8) :|: x4 > 0 && x6 > 0 && x7 = 0 && x8 = x5 + 1 && x8 = x5 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f5991_0_gt_LE(i1192:0, i1195:0, i1191:0, i1194:0) -> f5991_0_gt_LE(i1192:0, i1195:0, arith, arith1) :|: i1191:0 > 1 && i1194:0 > 0 && arith = i1191:0 - 1 && arith1 = i1194:0 - 1
(2) f5991_0_gt_LE(x4, x5, x6, x7) -> f5991_0_gt_LE(x4, x8, x4, x8) :|: x4 > 0 && x6 > 0 && x7 = 0 && x8 = x5 + 1 && x8 = x5 + 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f5991_0_gt_LE(i1192:0, i1195:0, i1191:0, i1194:0) -> f5991_0_gt_LE(i1192:0, i1195:0, arith, arith1) :|: i1191:0 > 1 && i1194:0 > 0 && arith = i1191:0 - 1 && arith1 = i1194:0 - 1
(2) f5991_0_gt_LE(x4, x5, x6, x7) -> f5991_0_gt_LE(x4, x8, x4, x8) :|: x4 > 0 && x6 > 0 && x7 = 0 && x8 = x5 + 1 && x8 = x5 + 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f5991_0_gt_LE(x4:0, x5:0, x6:0, cons_0) -> f5991_0_gt_LE(x4:0, x5:0 + 1, x4:0, x5:0 + 1) :|: x4:0 > 0 && x6:0 > 0 && cons_0 = 0
f5991_0_gt_LE(i1192:0:0, i1195:0:0, i1191:0:0, i1194:0:0) -> f5991_0_gt_LE(i1192:0:0, i1195:0:0, i1191:0:0 - 1, i1194:0:0 - 1) :|: i1191:0:0 > 1 && i1194:0:0 > 0

----------------------------------------

(15) IRSwTChainingProof (EQUIVALENT)
Chaining!
----------------------------------------

(16)
Obligation:
Rules:
f5991_0_gt_LE(x, x1, x2, x3) -> f5991_0_gt_LE(x, x1 + 2, x, x1 + 2) :|: TRUE && x >= 1 && x2 >= 1 && x1 = -1 && x3 = 0
f5991_0_gt_LE(i1192:0:0, i1195:0:0, i1191:0:0, i1194:0:0) -> f5991_0_gt_LE(i1192:0:0, i1195:0:0, i1191:0:0 - 1, i1194:0:0 - 1) :|: i1191:0:0 > 1 && i1194:0:0 > 0
f5991_0_gt_LE(x8, x9, x10, x11) -> f5991_0_gt_LE(x8, x9 + 1, x8 + -1, x9) :|: TRUE && x10 >= 1 && x8 >= 2 && x9 >= 0 && x11 = 0

----------------------------------------

(17) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f5991_0_gt_LE(x, x1, x2, x3) -> f5991_0_gt_LE(x, x1 + 2, x, x1 + 2) :|: TRUE && x >= 1 && x2 >= 1 && x1 = -1 && x3 = 0
(2) f5991_0_gt_LE(i1192:0:0, i1195:0:0, i1191:0:0, i1194:0:0) -> f5991_0_gt_LE(i1192:0:0, i1195:0:0, i1191:0:0 - 1, i1194:0:0 - 1) :|: i1191:0:0 > 1 && i1194:0:0 > 0
(3) f5991_0_gt_LE(x8, x9, x10, x11) -> f5991_0_gt_LE(x8, x9 + 1, x8 + -1, x9) :|: TRUE && x10 >= 1 && x8 >= 2 && x9 >= 0 && x11 = 0

Arcs:
(1) -> (2)
(2) -> (1), (2), (3)
(3) -> (2), (3)

This digraph is fully evaluated!
----------------------------------------

(18)
Obligation:

Termination digraph:
Nodes:
(1) f5991_0_gt_LE(x, x1, x2, x3) -> f5991_0_gt_LE(x, x1 + 2, x, x1 + 2) :|: TRUE && x >= 1 && x2 >= 1 && x1 = -1 && x3 = 0
(2) f5991_0_gt_LE(i1192:0:0, i1195:0:0, i1191:0:0, i1194:0:0) -> f5991_0_gt_LE(i1192:0:0, i1195:0:0, i1191:0:0 - 1, i1194:0:0 - 1) :|: i1191:0:0 > 1 && i1194:0:0 > 0
(3) f5991_0_gt_LE(x8, x9, x10, x11) -> f5991_0_gt_LE(x8, x9 + 1, x8 + -1, x9) :|: TRUE && x10 >= 1 && x8 >= 2 && x9 >= 0 && x11 = 0

Arcs:
(1) -> (2)
(2) -> (1), (2), (3)
(3) -> (2), (3)

This digraph is fully evaluated!

----------------------------------------

(19) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(20)
Obligation:
Rules:
f5991_0_gt_LE(x:0, cons_-1, x2:0, cons_0) -> f5991_0_gt_LE(x:0, 1, x:0, 1) :|: x2:0 > 0 && x:0 > 0 && cons_-1 = -1 && cons_0 = 0
f5991_0_gt_LE(x, x1, x2, x3) -> f5991_0_gt_LE(x, x1 + 1, x - 1, x1) :|: x > 1 && x2 > 0 && x1 > -1 && x3 = 0
f5991_0_gt_LE(i1192:0:0:0, i1195:0:0:0, i1191:0:0:0, i1194:0:0:0) -> f5991_0_gt_LE(i1192:0:0:0, i1195:0:0:0, i1191:0:0:0 - 1, i1194:0:0:0 - 1) :|: i1191:0:0:0 > 1 && i1194:0:0:0 > 0

----------------------------------------

(21) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f5991_0_gt_LE(VARIABLE, VARIABLE, INTEGER, VARIABLE)
Replaced non-predefined constructor symbols by 0.The following proof was generated: 
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given IntTRS could not be shown:



- IntTRS
  - PolynomialOrderProcessor

Rules:
f5991_0_gt_LE(x:0, c, x2:0, c1) -> f5991_0_gt_LE(x:0, c2, x:0, c3) :|: c3 = 1 && (c2 = 1 && (c1 = 0 && c = -1)) && (x2:0 > 0 && x:0 > 0 && cons_-1 = -1 && cons_0 = 0)
f5991_0_gt_LE(x, x1, x2, c4) -> f5991_0_gt_LE(x, c5, c6, x1) :|: c6 = x - 1 && (c5 = x1 + 1 && c4 = 0) && (x > 1 && x2 > 0 && x1 > -1 && x3 = 0)
f5991_0_gt_LE(i1192:0:0:0, i1195:0:0:0, i1191:0:0:0, i1194:0:0:0) -> f5991_0_gt_LE(i1192:0:0:0, i1195:0:0:0, c7, c8) :|: c8 = i1194:0:0:0 - 1 && c7 = i1191:0:0:0 - 1 && (i1191:0:0:0 > 1 && i1194:0:0:0 > 0)

Found the following polynomial interpretation:
[f5991_0_gt_LE(x, x1, x2, x3)] = -3 + x - 2*x1

The following rules are decreasing:
f5991_0_gt_LE(x:0, c, x2:0, c1) -> f5991_0_gt_LE(x:0, c2, x:0, c3) :|: c3 = 1 && (c2 = 1 && (c1 = 0 && c = -1)) && (x2:0 > 0 && x:0 > 0 && cons_-1 = -1 && cons_0 = 0)
f5991_0_gt_LE(x, x1, x2, c4) -> f5991_0_gt_LE(x, c5, c6, x1) :|: c6 = x - 1 && (c5 = x1 + 1 && c4 = 0) && (x > 1 && x2 > 0 && x1 > -1 && x3 = 0)
The following rules are bounded:
f5991_0_gt_LE(x:0, c, x2:0, c1) -> f5991_0_gt_LE(x:0, c2, x:0, c3) :|: c3 = 1 && (c2 = 1 && (c1 = 0 && c = -1)) && (x2:0 > 0 && x:0 > 0 && cons_-1 = -1 && cons_0 = 0)


- IntTRS
  - PolynomialOrderProcessor
    - IntTRS

Rules:
f5991_0_gt_LE(x, x1, x2, c4) -> f5991_0_gt_LE(x, c5, c6, x1) :|: c6 = x - 1 && (c5 = x1 + 1 && c4 = 0) && (x > 1 && x2 > 0 && x1 > -1 && x3 = 0)
f5991_0_gt_LE(i1192:0:0:0, i1195:0:0:0, i1191:0:0:0, i1194:0:0:0) -> f5991_0_gt_LE(i1192:0:0:0, i1195:0:0:0, c7, c8) :|: c8 = i1194:0:0:0 - 1 && c7 = i1191:0:0:0 - 1 && (i1191:0:0:0 > 1 && i1194:0:0:0 > 0)



----------------------------------------

(22)
Obligation:
Rules:
f5991_0_gt_LE(x, x1, x2, x3) -> f5991_0_gt_LE(x, x1 + 1, x - 1, x1) :|: x > 1 && x2 > 0 && x1 > -1 && x3 = 0
f5991_0_gt_LE(i1192:0:0:0, i1195:0:0:0, i1191:0:0:0, i1194:0:0:0) -> f5991_0_gt_LE(i1192:0:0:0, i1195:0:0:0, i1191:0:0:0 - 1, i1194:0:0:0 - 1) :|: i1191:0:0:0 > 1 && i1194:0:0:0 > 0

----------------------------------------

(23) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f5991_0_gt_LE(x, x1, x2, x3) -> f5991_0_gt_LE(x, x1 + 1, x - 1, x1) :|: x > 1 && x2 > 0 && x1 > -1 && x3 = 0
(2) f5991_0_gt_LE(i1192:0:0:0, i1195:0:0:0, i1191:0:0:0, i1194:0:0:0) -> f5991_0_gt_LE(i1192:0:0:0, i1195:0:0:0, i1191:0:0:0 - 1, i1194:0:0:0 - 1) :|: i1191:0:0:0 > 1 && i1194:0:0:0 > 0

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(24)
Obligation:

Termination digraph:
Nodes:
(1) f5991_0_gt_LE(x, x1, x2, x3) -> f5991_0_gt_LE(x, x1 + 1, x - 1, x1) :|: x > 1 && x2 > 0 && x1 > -1 && x3 = 0
(2) f5991_0_gt_LE(i1192:0:0:0, i1195:0:0:0, i1191:0:0:0, i1194:0:0:0) -> f5991_0_gt_LE(i1192:0:0:0, i1195:0:0:0, i1191:0:0:0 - 1, i1194:0:0:0 - 1) :|: i1191:0:0:0 > 1 && i1194:0:0:0 > 0

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f5991_0_gt_LE(x:0, x1:0, x2:0, cons_0) -> f5991_0_gt_LE(x:0, x1:0 + 1, x:0 - 1, x1:0) :|: x:0 > 1 && x2:0 > 0 && x1:0 > -1 && cons_0 = 0
f5991_0_gt_LE(i1192:0:0:0:0, i1195:0:0:0:0, i1191:0:0:0:0, i1194:0:0:0:0) -> f5991_0_gt_LE(i1192:0:0:0:0, i1195:0:0:0:0, i1191:0:0:0:0 - 1, i1194:0:0:0:0 - 1) :|: i1191:0:0:0:0 > 1 && i1194:0:0:0:0 > 0
