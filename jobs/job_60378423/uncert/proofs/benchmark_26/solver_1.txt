YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Z3iLw.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 183 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 36 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 18 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) FilterProof [EQUIVALENT, 0 ms]
(16) IntTRS
(17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(18) IntTRS
(19) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class LogIterative {
  public static int log(int x, int y) {
    int res = 0;
    while (x >= y && y > 1) {
      res++;
      x = x/y;
    }
    return res;
  } 

  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    log(x, y);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class LogIterative {
  public static int log(int x, int y) {
    int res = 0;
    while (x >= y && y > 1) {
      res++;
      x = x/y;
    }
    return res;
  } 

  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    log(x, y);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
LogIterative.main([Ljava/lang/String;)V: Graph of 195 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: LogIterative.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 15 IRulesP rules:
f654_0_log_Load(EOS(STATIC_654), i95, i96, i95) -> f655_0_log_LT(EOS(STATIC_655), i95, i96, i95, i96) :|: TRUE
f655_0_log_LT(EOS(STATIC_655), i95, i96, i95, i96) -> f659_0_log_LT(EOS(STATIC_659), i95, i96, i95, i96) :|: i95 >= i96
f659_0_log_LT(EOS(STATIC_659), i95, i96, i95, i96) -> f689_0_log_Load(EOS(STATIC_689), i95, i96) :|: i95 >= i96
f689_0_log_Load(EOS(STATIC_689), i95, i96) -> f694_0_log_ConstantStackPush(EOS(STATIC_694), i95, i96, i96) :|: TRUE
f694_0_log_ConstantStackPush(EOS(STATIC_694), i95, i96, i96) -> f699_0_log_LE(EOS(STATIC_699), i95, i96, i96, 1) :|: TRUE
f699_0_log_LE(EOS(STATIC_699), i108, i107, i107, matching1) -> f704_0_log_LE(EOS(STATIC_704), i108, i107, i107, 1) :|: TRUE && matching1 = 1
f704_0_log_LE(EOS(STATIC_704), i108, i107, i107, matching1) -> f728_0_log_Inc(EOS(STATIC_728), i108, i107) :|: i107 > 1 && matching1 = 1
f728_0_log_Inc(EOS(STATIC_728), i108, i107) -> f729_0_log_Load(EOS(STATIC_729), i108, i107) :|: TRUE
f729_0_log_Load(EOS(STATIC_729), i108, i107) -> f732_0_log_Load(EOS(STATIC_732), i107, i108) :|: TRUE
f732_0_log_Load(EOS(STATIC_732), i107, i108) -> f734_0_log_IntArithmetic(EOS(STATIC_734), i107, i108, i107) :|: TRUE
f734_0_log_IntArithmetic(EOS(STATIC_734), i107, i108, i107) -> f736_0_log_Store(EOS(STATIC_736), i107, i111) :|: i111 = i108 / i107 && i108 > 1 && i107 > 1 && i111 < i108
f736_0_log_Store(EOS(STATIC_736), i107, i111) -> f738_0_log_JMP(EOS(STATIC_738), i111, i107) :|: TRUE
f738_0_log_JMP(EOS(STATIC_738), i111, i107) -> f752_0_log_Load(EOS(STATIC_752), i111, i107) :|: TRUE
f752_0_log_Load(EOS(STATIC_752), i111, i107) -> f649_0_log_Load(EOS(STATIC_649), i111, i107) :|: TRUE
f649_0_log_Load(EOS(STATIC_649), i95, i96) -> f654_0_log_Load(EOS(STATIC_654), i95, i96, i95) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f654_0_log_Load(EOS(STATIC_654), i95:0, i96:0, i95:0) -> f654_0_log_Load'(EOS(STATIC_654), i95:0, i96:0, i95:0) :|: i96:0 <= i95:0 && i96:0 > 1 && i95:0 > 1 && i95:0 > div
f654_0_log_Load'(EOS(STATIC_654), i95:0, i96:0, i95:0) -> f654_0_log_Load(EOS(STATIC_654), div, i96:0, div) :|: i96:0 <= i95:0 && i96:0 > 1 && i95:0 > 1 && i95:0 > div && i96:0 > i95:0 - i96:0 * div && i95:0 - i96:0 * div + i96:0 > 0
Filtered constant ground arguments:
   f654_0_log_Load(x1, x2, x3, x4) -> f654_0_log_Load(x2, x3, x4)
   f654_0_log_Load'(x1, x2, x3, x4) -> f654_0_log_Load'(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f654_0_log_Load(x1, x2, x3) -> f654_0_log_Load(x2, x3)
   f654_0_log_Load'(x1, x2, x3) -> f654_0_log_Load'(x2, x3)
Finished conversion. Obtained 2 rules.P rules:
f654_0_log_Load(i96:0, i95:0) -> f654_0_log_Load'(i96:0, i95:0) :|: i96:0 > 1 && i96:0 <= i95:0 && i95:0 > div && i95:0 > 1
f654_0_log_Load'(i96:0, i95:0) -> f654_0_log_Load(i96:0, div) :|: i96:0 > 1 && i96:0 <= i95:0 && i95:0 > 1 && i95:0 > div && i95:0 - i96:0 * div + i96:0 > 0 && i96:0 > i95:0 - i96:0 * div

----------------------------------------

(8)
Obligation:
Rules:
f654_0_log_Load(x, x1) -> f654_0_log_Load'(x, x1) :|: x > 1 && x <= x1 && x1 > x2 && x1 > 1
f654_0_log_Load'(x3, x4) -> f654_0_log_Load(x3, x5) :|: x3 > 1 && x3 <= x4 && x4 > 1 && x4 > x5 && x4 - x3 * x5 + x3 > 0 && x3 > x4 - x3 * x5

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f654_0_log_Load(x, x1) -> f654_0_log_Load'(x, x1) :|: x > 1 && x <= x1 && x1 > x2 && x1 > 1
f654_0_log_Load'(x3, x4) -> f654_0_log_Load(x3, x5) :|: x3 > 1 && x3 <= x4 && x4 > 1 && x4 > x5 && x4 - x3 * x5 + x3 > 0 && x3 > x4 - x3 * x5

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f654_0_log_Load(x, x1) -> f654_0_log_Load'(x, x1) :|: x > 1 && x <= x1 && x1 > x2 && x1 > 1
(2) f654_0_log_Load'(x3, x4) -> f654_0_log_Load(x3, x5) :|: x3 > 1 && x3 <= x4 && x4 > 1 && x4 > x5 && x4 - x3 * x5 + x3 > 0 && x3 > x4 - x3 * x5

Arcs:
(1) -> (2)
(2) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f654_0_log_Load(x, x1) -> f654_0_log_Load'(x, x1) :|: x > 1 && x <= x1 && x1 > x2 && x1 > 1
(2) f654_0_log_Load'(x3, x4) -> f654_0_log_Load(x3, x5) :|: x3 > 1 && x3 <= x4 && x4 > 1 && x4 > x5 && x4 - x3 * x5 + x3 > 0 && x3 > x4 - x3 * x5

Arcs:
(1) -> (2)
(2) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f654_0_log_Load(x:0, x1:0) -> f654_0_log_Load(x:0, x5:0) :|: x:0 > x1:0 - x:0 * x5:0 && x2:0 < x1:0 && x1:0 - x:0 * x5:0 + x:0 > 0 && x5:0 < x1:0 && x1:0 > 1 && x:0 <= x1:0 && x:0 > 1

----------------------------------------

(15) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f654_0_log_Load(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f654_0_log_Load(x:0, x1:0) -> f654_0_log_Load(x:0, x5:0) :|: x:0 > x1:0 - x:0 * x5:0 && x2:0 < x1:0 && x1:0 - x:0 * x5:0 + x:0 > 0 && x5:0 < x1:0 && x1:0 > 1 && x:0 <= x1:0 && x:0 > 1

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f654_0_log_Load(x:0:0, x1:0:0) -> f654_0_log_Load(x:0:0, x5:0:0) :|: x:0:0 <= x1:0:0 && x:0:0 > 1 && x1:0:0 > 1 && x5:0:0 < x1:0:0 && x1:0:0 - x:0:0 * x5:0:0 + x:0:0 > 0 && x2:0:0 < x1:0:0 && x:0:0 > x1:0:0 - x:0:0 * x5:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f654_0_log_Load(x, x1)] = x1

The following rules are decreasing:
f654_0_log_Load(x:0:0, x1:0:0) -> f654_0_log_Load(x:0:0, x5:0:0) :|: x:0:0 <= x1:0:0 && x:0:0 > 1 && x1:0:0 > 1 && x5:0:0 < x1:0:0 && x1:0:0 - x:0:0 * x5:0:0 + x:0:0 > 0 && x2:0:0 < x1:0:0 && x:0:0 > x1:0:0 - x:0:0 * x5:0:0
The following rules are bounded:
f654_0_log_Load(x:0:0, x1:0:0) -> f654_0_log_Load(x:0:0, x5:0:0) :|: x:0:0 <= x1:0:0 && x:0:0 > 1 && x1:0:0 > 1 && x5:0:0 < x1:0:0 && x1:0:0 - x:0:0 * x5:0:0 + x:0:0 > 0 && x2:0:0 < x1:0:0 && x:0:0 > x1:0:0 - x:0:0 * x5:0:0

----------------------------------------

(20)
YES
