YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/n0BUg.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 173 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 27 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 24 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 33 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
(18) IntTRS
(19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Mod {
  public static void main(String[] args) {
    int x = args[0].length();
    int y = args[1].length();
    mod(x, y);
  }
  public static int mod(int x, int y) {
   
    while (x >= y && y > 0) {
      x = minus(x,y);
     
    }
    return x;
  }

  public static int minus(int x, int y) {
    while (y != 0) {
      if (y > 0)  {
        y--;
        x--;
      } else  {
        y++;
        x++;
      }
    }
    return x;
  }

}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Mod {
  public static void main(String[] args) {
    int x = args[0].length();
    int y = args[1].length();
    mod(x, y);
  }
  public static int mod(int x, int y) {
   
    while (x >= y && y > 0) {
      x = minus(x,y);
     
    }
    return x;
  }

  public static int minus(int x, int y) {
    while (y != 0) {
      if (y > 0)  {
        y--;
        x--;
      } else  {
        y++;
        x++;
      }
    }
    return x;
  }

}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Mod.main([Ljava/lang/String;)V: Graph of 152 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Mod.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 27 IRulesP rules:
f195_0_mod_Load(EOS(STATIC_195), i12, i30, i12) -> f198_0_mod_LT(EOS(STATIC_198), i12, i30, i12, i30) :|: TRUE
f198_0_mod_LT(EOS(STATIC_198), i12, i30, i12, i30) -> f207_0_mod_LT(EOS(STATIC_207), i12, i30, i12, i30) :|: i12 >= i30
f207_0_mod_LT(EOS(STATIC_207), i12, i30, i12, i30) -> f214_0_mod_Load(EOS(STATIC_214), i12, i30) :|: i12 >= i30
f214_0_mod_Load(EOS(STATIC_214), i12, i30) -> f232_0_mod_LE(EOS(STATIC_232), i12, i30, i30) :|: TRUE
f232_0_mod_LE(EOS(STATIC_232), i36, i35, i35) -> f250_0_mod_LE(EOS(STATIC_250), i36, i35, i35) :|: TRUE
f250_0_mod_LE(EOS(STATIC_250), i36, i35, i35) -> f274_0_mod_Load(EOS(STATIC_274), i36, i35) :|: i35 > 0
f274_0_mod_Load(EOS(STATIC_274), i36, i35) -> f295_0_mod_Load(EOS(STATIC_295), i35, i36) :|: TRUE
f295_0_mod_Load(EOS(STATIC_295), i35, i36) -> f299_0_mod_InvokeMethod(EOS(STATIC_299), i35, i36, i35) :|: TRUE
f299_0_mod_InvokeMethod(EOS(STATIC_299), i35, i36, i35) -> f302_0_minus_Load(EOS(STATIC_302), i35, i36, i35) :|: TRUE
f302_0_minus_Load(EOS(STATIC_302), i35, i36, i35) -> f399_0_minus_Load(EOS(STATIC_399), i35, i36, i35) :|: TRUE
f399_0_minus_Load(EOS(STATIC_399), i35, i52, i53) -> f406_0_minus_EQ(EOS(STATIC_406), i35, i52, i53, i53) :|: TRUE
f406_0_minus_EQ(EOS(STATIC_406), i35, i67, i66, i66) -> f411_0_minus_EQ(EOS(STATIC_411), i35, i67, i66, i66) :|: TRUE
f406_0_minus_EQ(EOS(STATIC_406), i35, i52, matching1, matching2) -> f412_0_minus_EQ(EOS(STATIC_412), i35, i52, 0, 0) :|: TRUE && matching1 = 0 && matching2 = 0
f411_0_minus_EQ(EOS(STATIC_411), i35, i67, i66, i66) -> f420_0_minus_Load(EOS(STATIC_420), i35, i67, i66) :|: i66 > 0
f420_0_minus_Load(EOS(STATIC_420), i35, i67, i66) -> f424_0_minus_LE(EOS(STATIC_424), i35, i67, i66, i66) :|: TRUE
f424_0_minus_LE(EOS(STATIC_424), i35, i67, i66, i66) -> f429_0_minus_Inc(EOS(STATIC_429), i35, i67, i66) :|: i66 > 0
f429_0_minus_Inc(EOS(STATIC_429), i35, i67, i66) -> f435_0_minus_Inc(EOS(STATIC_435), i35, i67, i66 + -1) :|: TRUE
f435_0_minus_Inc(EOS(STATIC_435), i35, i67, i73) -> f440_0_minus_JMP(EOS(STATIC_440), i35, i67 + -1, i73) :|: TRUE
f440_0_minus_JMP(EOS(STATIC_440), i35, i74, i73) -> f507_0_minus_Load(EOS(STATIC_507), i35, i74, i73) :|: TRUE
f507_0_minus_Load(EOS(STATIC_507), i35, i74, i73) -> f399_0_minus_Load(EOS(STATIC_399), i35, i74, i73) :|: TRUE
f412_0_minus_EQ(EOS(STATIC_412), i35, i52, matching1, matching2) -> f422_0_minus_Load(EOS(STATIC_422), i35, i52) :|: TRUE && matching1 = 0 && matching2 = 0
f422_0_minus_Load(EOS(STATIC_422), i35, i52) -> f427_0_minus_Return(EOS(STATIC_427), i35, i52) :|: TRUE
f427_0_minus_Return(EOS(STATIC_427), i35, i52) -> f431_0_mod_Store(EOS(STATIC_431), i35, i52) :|: TRUE
f431_0_mod_Store(EOS(STATIC_431), i35, i52) -> f437_0_mod_JMP(EOS(STATIC_437), i52, i35) :|: TRUE
f437_0_mod_JMP(EOS(STATIC_437), i52, i35) -> f448_0_mod_Load(EOS(STATIC_448), i52, i35) :|: TRUE
f448_0_mod_Load(EOS(STATIC_448), i52, i35) -> f189_0_mod_Load(EOS(STATIC_189), i52, i35) :|: TRUE
f189_0_mod_Load(EOS(STATIC_189), i12, i30) -> f195_0_mod_Load(EOS(STATIC_195), i12, i30, i12) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f406_0_minus_EQ(EOS(STATIC_406), i35:0, i67:0, i66:0, i66:0) -> f406_0_minus_EQ(EOS(STATIC_406), i35:0, i67:0 - 1, i66:0 - 1, i66:0 - 1) :|: i66:0 > 0
f406_0_minus_EQ(EOS(STATIC_406), i35:0, i52:0, 0, 0) -> f406_0_minus_EQ(EOS(STATIC_406), i35:0, i52:0, i35:0, i35:0) :|: i52:0 >= i35:0 && i35:0 > 0
Filtered constant ground arguments:
   f406_0_minus_EQ(x1, x2, x3, x4, x5) -> f406_0_minus_EQ(x2, x3, x4, x5)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f406_0_minus_EQ(x1, x2, x3, x4) -> f406_0_minus_EQ(x1, x2, x4)
Finished conversion. Obtained 2 rules.P rules:
f406_0_minus_EQ(i35:0, i67:0, i66:0) -> f406_0_minus_EQ(i35:0, i67:0 - 1, i66:0 - 1) :|: i66:0 > 0
f406_0_minus_EQ(i35:0, i52:0, cons_0) -> f406_0_minus_EQ(i35:0, i52:0, i35:0) :|: i52:0 >= i35:0 && i35:0 > 0 && cons_0 = 0

----------------------------------------

(8)
Obligation:
Rules:
f406_0_minus_EQ(i35:0, i67:0, i66:0) -> f406_0_minus_EQ(i35:0, i67:0 - 1, i66:0 - 1) :|: i66:0 > 0
f406_0_minus_EQ(x, x1, x2) -> f406_0_minus_EQ(x, x1, x) :|: x1 >= x && x > 0 && x2 = 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f406_0_minus_EQ(i35:0, i67:0, i66:0) -> f406_0_minus_EQ(i35:0, arith, arith1) :|: i66:0 > 0 && arith = i67:0 - 1 && arith1 = i66:0 - 1
f406_0_minus_EQ(x, x1, x2) -> f406_0_minus_EQ(x, x1, x) :|: x1 >= x && x > 0 && x2 = 0

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f406_0_minus_EQ(i35:0, i67:0, i66:0) -> f406_0_minus_EQ(i35:0, arith, arith1) :|: i66:0 > 0 && arith = i67:0 - 1 && arith1 = i66:0 - 1
(2) f406_0_minus_EQ(x, x1, x2) -> f406_0_minus_EQ(x, x1, x) :|: x1 >= x && x > 0 && x2 = 0

Arcs:
(1) -> (1), (2)
(2) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f406_0_minus_EQ(i35:0, i67:0, i66:0) -> f406_0_minus_EQ(i35:0, arith, arith1) :|: i66:0 > 0 && arith = i67:0 - 1 && arith1 = i66:0 - 1
(2) f406_0_minus_EQ(x, x1, x2) -> f406_0_minus_EQ(x, x1, x) :|: x1 >= x && x > 0 && x2 = 0

Arcs:
(1) -> (1), (2)
(2) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f406_0_minus_EQ(i35:0:0, i67:0:0, i66:0:0) -> f406_0_minus_EQ(i35:0:0, i67:0:0 - 1, i66:0:0 - 1) :|: i66:0:0 > 0
f406_0_minus_EQ(x:0, x1:0, cons_0) -> f406_0_minus_EQ(x:0, x1:0, x:0) :|: x:0 <= x1:0 && x:0 > 0 && cons_0 = 0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f406_0_minus_EQ(VARIABLE, VARIABLE, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f406_0_minus_EQ(i35:0:0, i67:0:0, i66:0:0) -> f406_0_minus_EQ(i35:0:0, c, c1) :|: c1 = i66:0:0 - 1 && c = i67:0:0 - 1 && i66:0:0 > 0
f406_0_minus_EQ(x:0, x1:0, c2) -> f406_0_minus_EQ(x:0, x1:0, x:0) :|: c2 = 0 && (x:0 <= x1:0 && x:0 > 0 && cons_0 = 0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f406_0_minus_EQ(x, x1, x2)] = x + x1 - x2

The following rules are decreasing:
f406_0_minus_EQ(x:0, x1:0, c2) -> f406_0_minus_EQ(x:0, x1:0, x:0) :|: c2 = 0 && (x:0 <= x1:0 && x:0 > 0 && cons_0 = 0)
The following rules are bounded:
f406_0_minus_EQ(x:0, x1:0, c2) -> f406_0_minus_EQ(x:0, x1:0, x:0) :|: c2 = 0 && (x:0 <= x1:0 && x:0 > 0 && cons_0 = 0)

----------------------------------------

(18)
Obligation:
Rules:
f406_0_minus_EQ(i35:0:0, i67:0:0, i66:0:0) -> f406_0_minus_EQ(i35:0:0, c, c1) :|: c1 = i66:0:0 - 1 && c = i67:0:0 - 1 && i66:0:0 > 0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f406_0_minus_EQ(x, x1, x2)] = x2

The following rules are decreasing:
f406_0_minus_EQ(i35:0:0, i67:0:0, i66:0:0) -> f406_0_minus_EQ(i35:0:0, c, c1) :|: c1 = i66:0:0 - 1 && c = i67:0:0 - 1 && i66:0:0 > 0
The following rules are bounded:
f406_0_minus_EQ(i35:0:0, i67:0:0, i66:0:0) -> f406_0_minus_EQ(i35:0:0, c, c1) :|: c1 = i66:0:0 - 1 && c = i67:0:0 - 1 && i66:0:0 > 0

----------------------------------------

(20)
YES
