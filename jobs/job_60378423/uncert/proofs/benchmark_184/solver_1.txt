YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Juos2.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 106 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 32 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 13 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 8 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * A very simple loop over an array.
 *
 * All calls terminate.
 *
 * Julia + BinTerm prove that all calls terminate
 *
 * @author <A HREF="mailto:fausto.spoto@univr.it">Fausto Spoto</A>
 */

public class Loop1 {
    public static void main(String[] args) {
	for (int i = 0; i < args.length; i++) {}
    }
}


----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * A very simple loop over an array.
 *
 * All calls terminate.
 *
 * Julia + BinTerm prove that all calls terminate
 *
 * @author <A HREF="mailto:fausto.spoto@univr.it">Fausto Spoto</A>
 */

public class Loop1 {
    public static void main(String[] args) {
	for (int i = 0; i < args.length; i++) {}
    }
}


----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Loop1.main([Ljava/lang/String;)V: Graph of 17 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Loop1.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 9 IRulesP rules:
f177_0_main_Load(EOS(STATIC_177), java.lang.Object(o12sub), java.lang.Object(o12sub), i25, i25) -> f180_0_main_ArrayLength(EOS(STATIC_180), java.lang.Object(o12sub), java.lang.Object(o12sub), i25, i25, java.lang.Object(o12sub)) :|: TRUE
f180_0_main_ArrayLength(EOS(STATIC_180), java.lang.Object(ARRAY(i28)), java.lang.Object(ARRAY(i28)), i25, i25, java.lang.Object(ARRAY(i28))) -> f181_0_main_ArrayLength(EOS(STATIC_181), java.lang.Object(ARRAY(i28)), java.lang.Object(ARRAY(i28)), i25, i25, java.lang.Object(ARRAY(i28))) :|: i28 >= 0
f181_0_main_ArrayLength(EOS(STATIC_181), java.lang.Object(ARRAY(i28)), java.lang.Object(ARRAY(i28)), i25, i25, java.lang.Object(ARRAY(i28))) -> f182_0_main_GE(EOS(STATIC_182), java.lang.Object(ARRAY(i28)), java.lang.Object(ARRAY(i28)), i25, i25, i28) :|: i28 >= 0
f182_0_main_GE(EOS(STATIC_182), java.lang.Object(ARRAY(i28)), java.lang.Object(ARRAY(i28)), i25, i25, i28) -> f192_0_main_GE(EOS(STATIC_192), java.lang.Object(ARRAY(i28)), java.lang.Object(ARRAY(i28)), i25, i25, i28) :|: i25 < i28
f192_0_main_GE(EOS(STATIC_192), java.lang.Object(ARRAY(i28)), java.lang.Object(ARRAY(i28)), i25, i25, i28) -> f202_0_main_Inc(EOS(STATIC_202), java.lang.Object(ARRAY(i28)), java.lang.Object(ARRAY(i28)), i25) :|: i25 < i28
f202_0_main_Inc(EOS(STATIC_202), java.lang.Object(ARRAY(i28)), java.lang.Object(ARRAY(i28)), i25) -> f206_0_main_JMP(EOS(STATIC_206), java.lang.Object(ARRAY(i28)), java.lang.Object(ARRAY(i28)), i25 + 1) :|: TRUE
f206_0_main_JMP(EOS(STATIC_206), java.lang.Object(ARRAY(i28)), java.lang.Object(ARRAY(i28)), i30) -> f217_0_main_Load(EOS(STATIC_217), java.lang.Object(ARRAY(i28)), java.lang.Object(ARRAY(i28)), i30) :|: TRUE
f217_0_main_Load(EOS(STATIC_217), java.lang.Object(ARRAY(i28)), java.lang.Object(ARRAY(i28)), i30) -> f176_0_main_Load(EOS(STATIC_176), java.lang.Object(ARRAY(i28)), java.lang.Object(ARRAY(i28)), i30) :|: TRUE
f176_0_main_Load(EOS(STATIC_176), java.lang.Object(o12sub), java.lang.Object(o12sub), i25) -> f177_0_main_Load(EOS(STATIC_177), java.lang.Object(o12sub), java.lang.Object(o12sub), i25, i25) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f177_0_main_Load(EOS(STATIC_177), java.lang.Object(ARRAY(i28:0)), java.lang.Object(ARRAY(i28:0)), i25:0, i25:0) -> f177_0_main_Load(EOS(STATIC_177), java.lang.Object(ARRAY(i28:0)), java.lang.Object(ARRAY(i28:0)), i25:0 + 1, i25:0 + 1) :|: i28:0 > -1 && i28:0 > i25:0
Filtered constant ground arguments:
   f177_0_main_Load(x1, x2, x3, x4, x5) -> f177_0_main_Load(x2, x3, x4, x5)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f177_0_main_Load(x1, x2, x3, x4) -> f177_0_main_Load(x2, x4)
Finished conversion. Obtained 1 rules.P rules:
f177_0_main_Load(java.lang.Object(ARRAY(i28:0)), i25:0, i28:0) -> f177_0_main_Load(java.lang.Object(ARRAY(i28:0)), i25:0 + 1, i28:0) :|: i28:0 > -1 && i28:0 > i25:0

----------------------------------------

(8)
Obligation:
Rules:
f177_0_main_Load(java.lang.Object(ARRAY(i28:0)), i25:0, i28:0) -> f177_0_main_Load(java.lang.Object(ARRAY(i28:0)), i25:0 + 1, i28:0) :|: i28:0 > -1 && i28:0 > i25:0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f177_0_main_Load(java.lang.Object(ARRAY(i28:0)), i25:0, i28:0) -> f177_0_main_Load(java.lang.Object(ARRAY(i28:0)), arith, i28:0) :|: i28:0 > -1 && i28:0 > i25:0 && arith = i25:0 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f177_0_main_Load(java.lang.Object(ARRAY(i28:0)), i25:0, i28:0) -> f177_0_main_Load(java.lang.Object(ARRAY(i28:0)), arith, i28:0) :|: i28:0 > -1 && i28:0 > i25:0 && arith = i25:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f177_0_main_Load(java.lang.Object(ARRAY(i28:0)), i25:0, i28:0) -> f177_0_main_Load(java.lang.Object(ARRAY(i28:0)), arith, i28:0) :|: i28:0 > -1 && i28:0 > i25:0 && arith = i25:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f177_0_main_Load(java.lang.Object(ARRAY(i28:0:0)), i25:0:0, i28:0:0) -> f177_0_main_Load(java.lang.Object(ARRAY(i28:0:0)), i25:0:0 + 1, i28:0:0) :|: i28:0:0 > -1 && i28:0:0 > i25:0:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f177_0_main_Load(VARIABLE, INTEGER, INTEGER)
java.lang.Object(VARIABLE)
ARRAY(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f177_0_main_Load(c, i25:0:0, i28:0:0) -> f177_0_main_Load(c1, c2, i28:0:0) :|: c2 = i25:0:0 + 1 && (c1 = 0 && c = 0) && (i28:0:0 > -1 && i28:0:0 > i25:0:0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f177_0_main_Load(x, x1, x2)] = c*x - x1 + x2

The following rules are decreasing:
f177_0_main_Load(c, i25:0:0, i28:0:0) -> f177_0_main_Load(c1, c2, i28:0:0) :|: c2 = i25:0:0 + 1 && (c1 = 0 && c = 0) && (i28:0:0 > -1 && i28:0:0 > i25:0:0)
The following rules are bounded:
f177_0_main_Load(c, i25:0:0, i28:0:0) -> f177_0_main_Load(c1, c2, i28:0:0) :|: c2 = i25:0:0 + 1 && (c1 = 0 && c = 0) && (i28:0:0 > -1 && i28:0:0 > i25:0:0)

----------------------------------------

(18)
YES
