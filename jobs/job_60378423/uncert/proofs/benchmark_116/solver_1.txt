NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/AVMyL.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 117 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.complInterv3;

public class ComplInterv3 {

	public static void loop(int i) {
		while (i != 0) {
			if (i > 5) {
				i++;
			} else {
				if (i < -5) {
					i--;
				} else {
					i = 0;
				}
			}
		}
	}
}


package simple.complInterv3;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		ComplInterv3.loop(args.length);

	}

}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.complInterv3;

public class ComplInterv3 {

	public static void loop(int i) {
		while (i != 0) {
			if (i > 5) {
				i++;
			} else {
				if (i < -5) {
					i--;
				} else {
					i = 0;
				}
			}
		}
	}
}


package simple.complInterv3;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		ComplInterv3.loop(args.length);

	}

}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<simple.complInterv3.Main.main||0: load ADDR args||args: a10|| ->
	a10([java.lang.String...]): length 6 -->{java.lang.Object...}
YES:  (JL1)
1:<simple.complInterv3.Main.main||1: arraylength|| - ||a10>
	a10([java.lang.String...]): length 6 -->{java.lang.Object...}
YES:  (JL1)
2:<simple.complInterv3.Main.main||2: simple.complInterv3.ComplInterv3.loop(I)V|| - ||6>
YES:  (JL1)
3:<simple.complInterv3.ComplInterv3.loop||0: load INT i||i: 6|| ->
<simple.complInterv3.Main.main||2: simple.complInterv3.ComplInterv3.loop|| - || ->
YES:  (JL1)
Start state of loop: 

<simple.complInterv3.ComplInterv3.loop||0: load INT i||i: i15|| ->
[a4(lv_0_0)]
<simple.complInterv3.Main.main||2: simple.complInterv3.ComplInterv3.loop|| - || ->
	i15: [0,+inf)(l1)
	i16: [0,+inf)(l1)
	a4([java.lang.String...]): length i16 -->{java.lang.Object...}
YES:  (JL1)


In the loop head node, references [i15] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((0 <= initial_i15 and 0 <= initial_i16) and (((path1_i15 = path1_i23 and path1_i23 = path1_i27 and path1_i30 = (path1_i27 + 1) and path1_i30 = res_i15 and path1_i15 = initial_i15) and (path1_i23 > 0 and T and 5 = 5 and path1_i27 > 5)) and ((res1_i15 = res1_i23 and res1_i23 = res1_i27 and res1_i30 = (res1_i27 + 1) and res_i15 = res1_i15) and !(res1_i23 > 0 and T and 5 = 5 and res1_i27 > 5))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
