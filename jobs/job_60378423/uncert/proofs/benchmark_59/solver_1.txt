YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/1Qf1o.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 142 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 31 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 4 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 22 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB7 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();
        int z = Random.random();

        while (x > z && y > z) {
            x--;
            y--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB7 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();
        int z = Random.random();

        while (x > z && y > z) {
            x--;
            y--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaB7.main([Ljava/lang/String;)V: Graph of 249 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaB7.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 12 IRulesP rules:
f520_0_main_Load(EOS(STATIC_520), i79, i80, i71, i79) -> f523_0_main_LE(EOS(STATIC_523), i79, i80, i71, i79, i71) :|: TRUE
f523_0_main_LE(EOS(STATIC_523), i79, i80, i71, i79, i71) -> f529_0_main_LE(EOS(STATIC_529), i79, i80, i71, i79, i71) :|: i79 > i71
f529_0_main_LE(EOS(STATIC_529), i79, i80, i71, i79, i71) -> f539_0_main_Load(EOS(STATIC_539), i79, i80, i71) :|: i79 > i71
f539_0_main_Load(EOS(STATIC_539), i79, i80, i71) -> f542_0_main_Load(EOS(STATIC_542), i79, i80, i71, i80) :|: TRUE
f542_0_main_Load(EOS(STATIC_542), i79, i80, i71, i80) -> f544_0_main_LE(EOS(STATIC_544), i79, i80, i71, i80, i71) :|: TRUE
f544_0_main_LE(EOS(STATIC_544), i79, i80, i71, i80, i71) -> f549_0_main_LE(EOS(STATIC_549), i79, i80, i71, i80, i71) :|: i80 > i71
f549_0_main_LE(EOS(STATIC_549), i79, i80, i71, i80, i71) -> f555_0_main_Inc(EOS(STATIC_555), i79, i80, i71) :|: i80 > i71
f555_0_main_Inc(EOS(STATIC_555), i79, i80, i71) -> f556_0_main_Inc(EOS(STATIC_556), i79 + -1, i80, i71) :|: TRUE
f556_0_main_Inc(EOS(STATIC_556), i85, i80, i71) -> f557_0_main_JMP(EOS(STATIC_557), i85, i80 + -1, i71) :|: TRUE
f557_0_main_JMP(EOS(STATIC_557), i85, i86, i71) -> f568_0_main_Load(EOS(STATIC_568), i85, i86, i71) :|: TRUE
f568_0_main_Load(EOS(STATIC_568), i85, i86, i71) -> f513_0_main_Load(EOS(STATIC_513), i85, i86, i71) :|: TRUE
f513_0_main_Load(EOS(STATIC_513), i79, i80, i71) -> f520_0_main_Load(EOS(STATIC_520), i79, i80, i71, i79) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f520_0_main_Load(EOS(STATIC_520), i79:0, i80:0, i71:0, i79:0) -> f520_0_main_Load(EOS(STATIC_520), i79:0 - 1, i80:0 - 1, i71:0, i79:0 - 1) :|: i79:0 > i71:0 && i80:0 > i71:0
Filtered constant ground arguments:
   f520_0_main_Load(x1, x2, x3, x4, x5) -> f520_0_main_Load(x2, x3, x4, x5)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f520_0_main_Load(x1, x2, x3, x4) -> f520_0_main_Load(x2, x3, x4)
Finished conversion. Obtained 1 rules.P rules:
f520_0_main_Load(i80:0, i71:0, i79:0) -> f520_0_main_Load(i80:0 - 1, i71:0, i79:0 - 1) :|: i79:0 > i71:0 && i80:0 > i71:0

----------------------------------------

(8)
Obligation:
Rules:
f520_0_main_Load(i80:0, i71:0, i79:0) -> f520_0_main_Load(i80:0 - 1, i71:0, i79:0 - 1) :|: i79:0 > i71:0 && i80:0 > i71:0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f520_0_main_Load(i80:0, i71:0, i79:0) -> f520_0_main_Load(arith, i71:0, arith1) :|: i79:0 > i71:0 && i80:0 > i71:0 && arith = i80:0 - 1 && arith1 = i79:0 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f520_0_main_Load(i80:0, i71:0, i79:0) -> f520_0_main_Load(arith, i71:0, arith1) :|: i79:0 > i71:0 && i80:0 > i71:0 && arith = i80:0 - 1 && arith1 = i79:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f520_0_main_Load(i80:0, i71:0, i79:0) -> f520_0_main_Load(arith, i71:0, arith1) :|: i79:0 > i71:0 && i80:0 > i71:0 && arith = i80:0 - 1 && arith1 = i79:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f520_0_main_Load(i80:0:0, i71:0:0, i79:0:0) -> f520_0_main_Load(i80:0:0 - 1, i71:0:0, i79:0:0 - 1) :|: i79:0:0 > i71:0:0 && i80:0:0 > i71:0:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f520_0_main_Load(INTEGER, INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f520_0_main_Load(i80:0:0, i71:0:0, i79:0:0) -> f520_0_main_Load(c, i71:0:0, c1) :|: c1 = i79:0:0 - 1 && c = i80:0:0 - 1 && (i79:0:0 > i71:0:0 && i80:0:0 > i71:0:0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f520_0_main_Load(x, x1, x2)] = -x1 + x2

The following rules are decreasing:
f520_0_main_Load(i80:0:0, i71:0:0, i79:0:0) -> f520_0_main_Load(c, i71:0:0, c1) :|: c1 = i79:0:0 - 1 && c = i80:0:0 - 1 && (i79:0:0 > i71:0:0 && i80:0:0 > i71:0:0)
The following rules are bounded:
f520_0_main_Load(i80:0:0, i71:0:0, i79:0:0) -> f520_0_main_Load(c, i71:0:0, c1) :|: c1 = i79:0:0 - 1 && c = i80:0:0 - 1 && (i79:0:0 > i71:0:0 && i80:0:0 > i71:0:0)

----------------------------------------

(18)
YES
