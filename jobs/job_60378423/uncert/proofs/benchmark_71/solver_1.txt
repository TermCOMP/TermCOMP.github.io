YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/nTfFH.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 186 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) JBCTerminationSCC
        (8) SCCToIRSProof [SOUND, 42 ms]
        (9) IRSwT
        (10) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (11) IRSwT
        (12) IRSwTTerminationDigraphProof [EQUIVALENT, 18 ms]
        (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) TempFilterProof [SOUND, 11 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (19) YES
    (20) JBCTerminationSCC
        (21) SCCToQDPProof [SOUND, 75 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class ObjectList {
  Object value;
  ObjectList next;

  public ObjectList(Object value, ObjectList next) {
    this.value = value;
    this.next = next;
  }

  public static ObjectList createList() {
    ObjectList result = null;
    int length = Random.random();
    while (length > 0) {
      result = new ObjectList(new Object(), result);
      length--;
    }
    return result;
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}


/**
 * Allegedly based on an interview question at Microsoft.
 */
public class RunningPointers {

  public static boolean isCyclic(ObjectList l) {
    if (l == null) {
      return false;
    }
    ObjectList l1, l2;
    l1 = l;
    l2 = l.next;
    while (l2 != null && l1 != l2) {
      l2 = l2.next;
      if (l2 == null) {
        return false;
      }
      else if (l2 == l1) {
        return true;
      }
      else {
        l2 = l2.next;
      }
      l1 = l1.next;
    }
    return l2 != null;
  }

  public static void main(String[] args) {
    Random.args = args;
    ObjectList list = ObjectList.createList();
    isCyclic(list);
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class ObjectList {
  Object value;
  ObjectList next;

  public ObjectList(Object value, ObjectList next) {
    this.value = value;
    this.next = next;
  }

  public static ObjectList createList() {
    ObjectList result = null;
    int length = Random.random();
    while (length > 0) {
      result = new ObjectList(new Object(), result);
      length--;
    }
    return result;
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}


/**
 * Allegedly based on an interview question at Microsoft.
 */
public class RunningPointers {

  public static boolean isCyclic(ObjectList l) {
    if (l == null) {
      return false;
    }
    ObjectList l1, l2;
    l1 = l;
    l2 = l.next;
    while (l2 != null && l1 != l2) {
      l2 = l2.next;
      if (l2 == null) {
        return false;
      }
      else if (l2 == l1) {
        return true;
      }
      else {
        l2 = l2.next;
      }
      l1 = l1.next;
    }
    return l2 != null;
  }

  public static void main(String[] args) {
    Random.args = args;
    ObjectList list = ObjectList.createList();
    isCyclic(list);
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
RunningPointers.main([Ljava/lang/String;)V: Graph of 127 nodes with 1 SCC.



ObjectList.createList()LObjectList;: Graph of 124 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 2 SCCss.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: ObjectList.createList()LObjectList;
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(8) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 23 IRulesP rules:
f2224_0_createList_LE(EOS(STATIC_2224), i101, i101) -> f2232_0_createList_LE(EOS(STATIC_2232), i101, i101) :|: TRUE
f2232_0_createList_LE(EOS(STATIC_2232), i101, i101) -> f2240_0_createList_New(EOS(STATIC_2240), i101) :|: i101 > 0
f2240_0_createList_New(EOS(STATIC_2240), i101) -> f2372_0_createList_Duplicate(EOS(STATIC_2372), i101) :|: TRUE
f2372_0_createList_Duplicate(EOS(STATIC_2372), i101) -> f2395_0_createList_New(EOS(STATIC_2395), i101) :|: TRUE
f2395_0_createList_New(EOS(STATIC_2395), i101) -> f2412_0_createList_Duplicate(EOS(STATIC_2412), i101) :|: TRUE
f2412_0_createList_Duplicate(EOS(STATIC_2412), i101) -> f2474_0_createList_InvokeMethod(EOS(STATIC_2474), i101) :|: TRUE
f2474_0_createList_InvokeMethod(EOS(STATIC_2474), i101) -> f2480_0_createList_Load(EOS(STATIC_2480), i101) :|: TRUE
f2480_0_createList_Load(EOS(STATIC_2480), i101) -> f2484_0_createList_InvokeMethod(EOS(STATIC_2484), i101) :|: TRUE
f2484_0_createList_InvokeMethod(EOS(STATIC_2484), i101) -> f2504_0__init__Load(EOS(STATIC_2504), i101) :|: TRUE
f2504_0__init__Load(EOS(STATIC_2504), i101) -> f2527_0__init__InvokeMethod(EOS(STATIC_2527), i101) :|: TRUE
f2527_0__init__InvokeMethod(EOS(STATIC_2527), i101) -> f2537_0__init__Load(EOS(STATIC_2537), i101) :|: TRUE
f2537_0__init__Load(EOS(STATIC_2537), i101) -> f2546_0__init__Load(EOS(STATIC_2546), i101) :|: TRUE
f2546_0__init__Load(EOS(STATIC_2546), i101) -> f2551_0__init__FieldAccess(EOS(STATIC_2551), i101) :|: TRUE
f2551_0__init__FieldAccess(EOS(STATIC_2551), i101) -> f2566_0__init__Load(EOS(STATIC_2566), i101) :|: TRUE
f2566_0__init__Load(EOS(STATIC_2566), i101) -> f2579_0__init__Load(EOS(STATIC_2579), i101) :|: TRUE
f2579_0__init__Load(EOS(STATIC_2579), i101) -> f2584_0__init__FieldAccess(EOS(STATIC_2584), i101) :|: TRUE
f2584_0__init__FieldAccess(EOS(STATIC_2584), i101) -> f2610_0__init__Return(EOS(STATIC_2610), i101) :|: TRUE
f2610_0__init__Return(EOS(STATIC_2610), i101) -> f2619_0_createList_Store(EOS(STATIC_2619), i101) :|: TRUE
f2619_0_createList_Store(EOS(STATIC_2619), i101) -> f2623_0_createList_Inc(EOS(STATIC_2623), i101) :|: TRUE
f2623_0_createList_Inc(EOS(STATIC_2623), i101) -> f2630_0_createList_JMP(EOS(STATIC_2630), i101 + -1) :|: TRUE
f2630_0_createList_JMP(EOS(STATIC_2630), i116) -> f2674_0_createList_Load(EOS(STATIC_2674), i116) :|: TRUE
f2674_0_createList_Load(EOS(STATIC_2674), i116) -> f2216_0_createList_Load(EOS(STATIC_2216), i116) :|: TRUE
f2216_0_createList_Load(EOS(STATIC_2216), i97) -> f2224_0_createList_LE(EOS(STATIC_2224), i97, i97) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f2224_0_createList_LE(EOS(STATIC_2224), i101:0, i101:0) -> f2224_0_createList_LE(EOS(STATIC_2224), i101:0 - 1, i101:0 - 1) :|: i101:0 > 0
Filtered constant ground arguments:
   f2224_0_createList_LE(x1, x2, x3) -> f2224_0_createList_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f2224_0_createList_LE(x1, x2) -> f2224_0_createList_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f2224_0_createList_LE(i101:0) -> f2224_0_createList_LE(i101:0 - 1) :|: i101:0 > 0

----------------------------------------

(9)
Obligation:
Rules:
f2224_0_createList_LE(i101:0) -> f2224_0_createList_LE(i101:0 - 1) :|: i101:0 > 0

----------------------------------------

(10) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(11)
Obligation:
Rules:
f2224_0_createList_LE(i101:0) -> f2224_0_createList_LE(arith) :|: i101:0 > 0 && arith = i101:0 - 1

----------------------------------------

(12) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2224_0_createList_LE(i101:0) -> f2224_0_createList_LE(arith) :|: i101:0 > 0 && arith = i101:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f2224_0_createList_LE(i101:0) -> f2224_0_createList_LE(arith) :|: i101:0 > 0 && arith = i101:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f2224_0_createList_LE(i101:0:0) -> f2224_0_createList_LE(i101:0:0 - 1) :|: i101:0:0 > 0

----------------------------------------

(16) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2224_0_createList_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(17)
Obligation:
Rules:
f2224_0_createList_LE(i101:0:0) -> f2224_0_createList_LE(c) :|: c = i101:0:0 - 1 && i101:0:0 > 0

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f2224_0_createList_LE(x)] = x

The following rules are decreasing:
f2224_0_createList_LE(i101:0:0) -> f2224_0_createList_LE(c) :|: c = i101:0:0 - 1 && i101:0:0 > 0
The following rules are bounded:
f2224_0_createList_LE(i101:0:0) -> f2224_0_createList_LE(c) :|: c = i101:0:0 - 1 && i101:0:0 > 0

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: RunningPointers.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*ObjectList: [next]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(21) SCCToQDPProof (SOUND)
Transformed TerminationGraph SCC to QDP. Log: 
Generated 29 rules for P and 0 rules for R.P rules:
f2955_0_isCyclic_NULL(EOS(STATIC_2955), o167, java.lang.Object(o172sub), java.lang.Object(o172sub)) -> f2958_0_isCyclic_Load(EOS(STATIC_2958), o167, java.lang.Object(o172sub)) :|: TRUE
f2958_0_isCyclic_Load(EOS(STATIC_2958), o167, java.lang.Object(o172sub)) -> f2962_0_isCyclic_Load(EOS(STATIC_2962), o167, java.lang.Object(o172sub), o167) :|: TRUE
f2962_0_isCyclic_Load(EOS(STATIC_2962), o167, java.lang.Object(o172sub), o167) -> f2965_0_isCyclic_EQ(EOS(STATIC_2965), o167, java.lang.Object(o172sub), o167, java.lang.Object(o172sub)) :|: TRUE
f2965_0_isCyclic_EQ(EOS(STATIC_2965), java.lang.Object(o173sub), java.lang.Object(o172sub), java.lang.Object(o173sub), java.lang.Object(o172sub)) -> f2969_0_isCyclic_EQ(EOS(STATIC_2969), java.lang.Object(o173sub), java.lang.Object(o172sub), java.lang.Object(o173sub), java.lang.Object(o172sub)) :|: TRUE
f2969_0_isCyclic_EQ(EOS(STATIC_2969), java.lang.Object(o173sub), java.lang.Object(o172sub), java.lang.Object(o173sub), java.lang.Object(o172sub)) -> f3004_0_isCyclic_EQ(EOS(STATIC_3004), java.lang.Object(o173sub), java.lang.Object(o172sub), java.lang.Object(o173sub), java.lang.Object(o172sub)) :|: TRUE
f3004_0_isCyclic_EQ(EOS(STATIC_3004), java.lang.Object(o173sub), java.lang.Object(o172sub), java.lang.Object(o173sub), java.lang.Object(o172sub)) -> f3021_0_isCyclic_Load(EOS(STATIC_3021), java.lang.Object(o173sub), java.lang.Object(o172sub)) :|: TRUE
f3021_0_isCyclic_Load(EOS(STATIC_3021), java.lang.Object(o173sub), java.lang.Object(o172sub)) -> f3128_0_isCyclic_FieldAccess(EOS(STATIC_3128), java.lang.Object(o173sub), java.lang.Object(o172sub)) :|: TRUE
f3128_0_isCyclic_FieldAccess(EOS(STATIC_3128), java.lang.Object(o173sub), java.lang.Object(ObjectList(EOC, o193))) -> f3143_0_isCyclic_FieldAccess(EOS(STATIC_3143), java.lang.Object(o173sub), java.lang.Object(ObjectList(EOC, o193))) :|: TRUE
f3143_0_isCyclic_FieldAccess(EOS(STATIC_3143), java.lang.Object(o173sub), java.lang.Object(ObjectList(EOC, o193))) -> f3152_0_isCyclic_Store(EOS(STATIC_3152), java.lang.Object(o173sub), o193) :|: TRUE
f3152_0_isCyclic_Store(EOS(STATIC_3152), java.lang.Object(o173sub), o193) -> f3160_0_isCyclic_Load(EOS(STATIC_3160), java.lang.Object(o173sub), o193) :|: TRUE
f3160_0_isCyclic_Load(EOS(STATIC_3160), java.lang.Object(o173sub), o193) -> f3173_0_isCyclic_NONNULL(EOS(STATIC_3173), java.lang.Object(o173sub), o193, o193) :|: TRUE
f3173_0_isCyclic_NONNULL(EOS(STATIC_3173), java.lang.Object(o173sub), java.lang.Object(o201sub), java.lang.Object(o201sub)) -> f3185_0_isCyclic_NONNULL(EOS(STATIC_3185), java.lang.Object(o173sub), java.lang.Object(o201sub), java.lang.Object(o201sub)) :|: TRUE
f3185_0_isCyclic_NONNULL(EOS(STATIC_3185), java.lang.Object(o173sub), java.lang.Object(o201sub), java.lang.Object(o201sub)) -> f3198_0_isCyclic_Load(EOS(STATIC_3198), java.lang.Object(o173sub), java.lang.Object(o201sub)) :|: TRUE
f3198_0_isCyclic_Load(EOS(STATIC_3198), java.lang.Object(o173sub), java.lang.Object(o201sub)) -> f3210_0_isCyclic_Load(EOS(STATIC_3210), java.lang.Object(o173sub), java.lang.Object(o201sub), java.lang.Object(o201sub)) :|: TRUE
f3210_0_isCyclic_Load(EOS(STATIC_3210), java.lang.Object(o173sub), java.lang.Object(o201sub), java.lang.Object(o201sub)) -> f3236_0_isCyclic_NE(EOS(STATIC_3236), java.lang.Object(o173sub), java.lang.Object(o201sub), java.lang.Object(o201sub), java.lang.Object(o173sub)) :|: TRUE
f3236_0_isCyclic_NE(EOS(STATIC_3236), java.lang.Object(o173sub), java.lang.Object(o201sub), java.lang.Object(o201sub), java.lang.Object(o173sub)) -> f3245_0_isCyclic_NE(EOS(STATIC_3245), java.lang.Object(o173sub), java.lang.Object(o201sub), java.lang.Object(o201sub), java.lang.Object(o173sub)) :|: TRUE
f3245_0_isCyclic_NE(EOS(STATIC_3245), java.lang.Object(o173sub), java.lang.Object(o201sub), java.lang.Object(o201sub), java.lang.Object(o173sub)) -> f3262_0_isCyclic_Load(EOS(STATIC_3262), java.lang.Object(o173sub), java.lang.Object(o201sub)) :|: TRUE
f3262_0_isCyclic_Load(EOS(STATIC_3262), java.lang.Object(o173sub), java.lang.Object(o201sub)) -> f3279_0_isCyclic_FieldAccess(EOS(STATIC_3279), java.lang.Object(o173sub), java.lang.Object(o201sub)) :|: TRUE
f3279_0_isCyclic_FieldAccess(EOS(STATIC_3279), java.lang.Object(o173sub), java.lang.Object(ObjectList(EOC, o227))) -> f3289_0_isCyclic_FieldAccess(EOS(STATIC_3289), java.lang.Object(o173sub), java.lang.Object(ObjectList(EOC, o227))) :|: TRUE
f3289_0_isCyclic_FieldAccess(EOS(STATIC_3289), java.lang.Object(o173sub), java.lang.Object(ObjectList(EOC, o227))) -> f3308_0_isCyclic_Store(EOS(STATIC_3308), java.lang.Object(o173sub), o227) :|: TRUE
f3308_0_isCyclic_Store(EOS(STATIC_3308), java.lang.Object(o173sub), o227) -> f3312_0_isCyclic_Load(EOS(STATIC_3312), java.lang.Object(o173sub), o227) :|: TRUE
f3312_0_isCyclic_Load(EOS(STATIC_3312), java.lang.Object(o173sub), o227) -> f3323_0_isCyclic_FieldAccess(EOS(STATIC_3323), o227, java.lang.Object(o173sub)) :|: TRUE
f3323_0_isCyclic_FieldAccess(EOS(STATIC_3323), o227, java.lang.Object(ObjectList(EOC, o242))) -> f3328_0_isCyclic_FieldAccess(EOS(STATIC_3328), o227, java.lang.Object(ObjectList(EOC, o242))) :|: TRUE
f3328_0_isCyclic_FieldAccess(EOS(STATIC_3328), o227, java.lang.Object(ObjectList(EOC, o242))) -> f3333_0_isCyclic_Store(EOS(STATIC_3333), o227, o242) :|: TRUE
f3333_0_isCyclic_Store(EOS(STATIC_3333), o227, o242) -> f3337_0_isCyclic_JMP(EOS(STATIC_3337), o242, o227) :|: TRUE
f3337_0_isCyclic_JMP(EOS(STATIC_3337), o242, o227) -> f3356_0_isCyclic_Load(EOS(STATIC_3356), o242, o227) :|: TRUE
f3356_0_isCyclic_Load(EOS(STATIC_3356), o242, o227) -> f2947_0_isCyclic_Load(EOS(STATIC_2947), o242, o227) :|: TRUE
f2947_0_isCyclic_Load(EOS(STATIC_2947), o167, o168) -> f2953_0_isCyclic_NULL(EOS(STATIC_2953), o167, o168, o168) :|: TRUE
f2953_0_isCyclic_NULL(EOS(STATIC_2953), o167, java.lang.Object(o172sub), java.lang.Object(o172sub)) -> f2955_0_isCyclic_NULL(EOS(STATIC_2955), o167, java.lang.Object(o172sub), java.lang.Object(o172sub)) :|: TRUE
R rules:
Combined rules. Obtained 1 conditional rules for P and 0 conditional rules for R.P rules:
f2955_0_isCyclic_NULL(EOS(STATIC_2955), java.lang.Object(ObjectList(EOC, o242:0)), java.lang.Object(ObjectList(EOC, java.lang.Object(ObjectList(EOC, java.lang.Object(o172sub:0))))), java.lang.Object(ObjectList(EOC, java.lang.Object(ObjectList(EOC, java.lang.Object(o172sub:0)))))) -> f2955_0_isCyclic_NULL(EOS(STATIC_2955), o242:0, java.lang.Object(o172sub:0), java.lang.Object(o172sub:0)) :|: TRUE
R rules:
Filtered ground terms:
   f2955_0_isCyclic_NULL(x1, x2, x3, x4) -> f2955_0_isCyclic_NULL(x2, x3, x4)
   EOS(x1) -> EOS
   ObjectList(x1, x2) -> ObjectList(x2)
Filtered duplicate args:
   f2955_0_isCyclic_NULL(x1, x2, x3) -> f2955_0_isCyclic_NULL(x1, x3)
Combined rules. Obtained 1 conditional rules for P and 0 conditional rules for R.P rules:
F2955_0_ISCYCLIC_NULL(java.lang.Object(ObjectList(o242:0:0)), java.lang.Object(ObjectList(java.lang.Object(ObjectList(java.lang.Object(o172sub:0:0)))))) -> F2955_0_ISCYCLIC_NULL(o242:0:0, java.lang.Object(o172sub:0:0)) :|: TRUE
R rules:

----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2955_0_ISCYCLIC_NULL(java.lang.Object(ObjectList(o242:0:0)), java.lang.Object(ObjectList(java.lang.Object(ObjectList(java.lang.Object(o172sub:0:0)))))) -> F2955_0_ISCYCLIC_NULL(o242:0:0, java.lang.Object(o172sub:0:0))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F2955_0_ISCYCLIC_NULL(java.lang.Object(ObjectList(o242:0:0)), java.lang.Object(ObjectList(java.lang.Object(ObjectList(java.lang.Object(o172sub:0:0)))))) -> F2955_0_ISCYCLIC_NULL(o242:0:0, java.lang.Object(o172sub:0:0))
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(24)
YES
