YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/DnwIO.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 228 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 42 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 9 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 19 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB15 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();
        int z = Random.random();

        while (x == y && x > z) {
            while (y > z) {
                x--;
                y--;
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB15 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();
        int z = Random.random();

        while (x == y && x > z) {
            while (y > z) {
                x--;
                y--;
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaB15.main([Ljava/lang/String;)V: Graph of 258 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaB15.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 21 IRulesP rules:
f684_0_main_Load(EOS(STATIC_684), i111, i112, i71, i111) -> f685_0_main_NE(EOS(STATIC_685), i111, i112, i71, i111, i112) :|: TRUE
f685_0_main_NE(EOS(STATIC_685), i112, i112, i71, i112, i112) -> f689_0_main_NE(EOS(STATIC_689), i112, i112, i71, i112, i112) :|: i111 = i112
f689_0_main_NE(EOS(STATIC_689), i112, i112, i71, i112, i112) -> f693_0_main_Load(EOS(STATIC_693), i112, i112, i71) :|: TRUE
f693_0_main_Load(EOS(STATIC_693), i112, i112, i71) -> f695_0_main_Load(EOS(STATIC_695), i112, i112, i71, i112) :|: TRUE
f695_0_main_Load(EOS(STATIC_695), i112, i112, i71, i112) -> f696_0_main_LE(EOS(STATIC_696), i112, i112, i71, i112, i71) :|: TRUE
f696_0_main_LE(EOS(STATIC_696), i112, i112, i71, i112, i71) -> f704_0_main_LE(EOS(STATIC_704), i112, i112, i71, i112, i71) :|: i112 > i71
f704_0_main_LE(EOS(STATIC_704), i112, i112, i71, i112, i71) -> f708_0_main_Load(EOS(STATIC_708), i112, i112, i71) :|: i112 > i71
f708_0_main_Load(EOS(STATIC_708), i112, i112, i71) -> f737_0_main_Load(EOS(STATIC_737), i112, i112, i71) :|: TRUE
f737_0_main_Load(EOS(STATIC_737), i121, i122, i71) -> f789_0_main_Load(EOS(STATIC_789), i121, i122, i71) :|: TRUE
f789_0_main_Load(EOS(STATIC_789), i133, i134, i71) -> f790_0_main_Load(EOS(STATIC_790), i133, i134, i71, i134) :|: TRUE
f790_0_main_Load(EOS(STATIC_790), i133, i134, i71, i134) -> f791_0_main_LE(EOS(STATIC_791), i133, i134, i71, i134, i71) :|: TRUE
f791_0_main_LE(EOS(STATIC_791), i133, i134, i71, i134, i71) -> f794_0_main_LE(EOS(STATIC_794), i133, i134, i71, i134, i71) :|: i134 <= i71
f791_0_main_LE(EOS(STATIC_791), i133, i134, i71, i134, i71) -> f795_0_main_LE(EOS(STATIC_795), i133, i134, i71, i134, i71) :|: i134 > i71
f794_0_main_LE(EOS(STATIC_794), i133, i134, i71, i134, i71) -> f803_0_main_Load(EOS(STATIC_803), i133, i134, i71) :|: i134 <= i71
f803_0_main_Load(EOS(STATIC_803), i133, i134, i71) -> f683_0_main_Load(EOS(STATIC_683), i133, i134, i71) :|: TRUE
f683_0_main_Load(EOS(STATIC_683), i111, i112, i71) -> f684_0_main_Load(EOS(STATIC_684), i111, i112, i71, i111) :|: TRUE
f795_0_main_LE(EOS(STATIC_795), i133, i134, i71, i134, i71) -> f808_0_main_Inc(EOS(STATIC_808), i133, i134, i71) :|: i134 > i71
f808_0_main_Inc(EOS(STATIC_808), i133, i134, i71) -> f809_0_main_Inc(EOS(STATIC_809), i133 + -1, i134, i71) :|: TRUE
f809_0_main_Inc(EOS(STATIC_809), i141, i134, i71) -> f810_0_main_JMP(EOS(STATIC_810), i141, i134 + -1, i71) :|: TRUE
f810_0_main_JMP(EOS(STATIC_810), i141, i142, i71) -> f819_0_main_Load(EOS(STATIC_819), i141, i142, i71) :|: TRUE
f819_0_main_Load(EOS(STATIC_819), i141, i142, i71) -> f789_0_main_Load(EOS(STATIC_789), i141, i142, i71) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f791_0_main_LE(EOS(STATIC_791), i133:0, i134:0, i71:0, i134:0, i71:0) -> f791_0_main_LE(EOS(STATIC_791), i133:0 - 1, i134:0 - 1, i71:0, i134:0 - 1, i71:0) :|: i71:0 < i134:0
Filtered constant ground arguments:
   f791_0_main_LE(x1, x2, x3, x4, x5, x6) -> f791_0_main_LE(x2, x3, x4, x5, x6)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f791_0_main_LE(x1, x2, x3, x4, x5) -> f791_0_main_LE(x1, x4, x5)
Filtered unneeded arguments:
   f791_0_main_LE(x1, x2, x3) -> f791_0_main_LE(x2, x3)
Finished conversion. Obtained 1 rules.P rules:
f791_0_main_LE(i134:0, i71:0) -> f791_0_main_LE(i134:0 - 1, i71:0) :|: i71:0 < i134:0

----------------------------------------

(8)
Obligation:
Rules:
f791_0_main_LE(i134:0, i71:0) -> f791_0_main_LE(i134:0 - 1, i71:0) :|: i71:0 < i134:0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f791_0_main_LE(i134:0, i71:0) -> f791_0_main_LE(arith, i71:0) :|: i71:0 < i134:0 && arith = i134:0 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f791_0_main_LE(i134:0, i71:0) -> f791_0_main_LE(arith, i71:0) :|: i71:0 < i134:0 && arith = i134:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f791_0_main_LE(i134:0, i71:0) -> f791_0_main_LE(arith, i71:0) :|: i71:0 < i134:0 && arith = i134:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f791_0_main_LE(i134:0:0, i71:0:0) -> f791_0_main_LE(i134:0:0 - 1, i71:0:0) :|: i71:0:0 < i134:0:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f791_0_main_LE(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f791_0_main_LE(i134:0:0, i71:0:0) -> f791_0_main_LE(c, i71:0:0) :|: c = i134:0:0 - 1 && i71:0:0 < i134:0:0

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f791_0_main_LE(x, x1)] = x - x1

The following rules are decreasing:
f791_0_main_LE(i134:0:0, i71:0:0) -> f791_0_main_LE(c, i71:0:0) :|: c = i134:0:0 - 1 && i71:0:0 < i134:0:0
The following rules are bounded:
f791_0_main_LE(i134:0:0, i71:0:0) -> f791_0_main_LE(c, i71:0:0) :|: c = i134:0:0 - 1 && i71:0:0 < i134:0:0

----------------------------------------

(18)
YES
