YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/c4QdL.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 167 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 68 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 18 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class LogMult{

  public static int log(int x, int y) {

    int res = 1;

    if (x < 0 || y < 1) return 0;
    else {
      while (x > y) { 
        y = y*y;
        res = 2*res;
      }
    }
    return res;

  }





  public static void main(String[] args) {
    Random.args = args;

    int x = Random.random();
    log(x,2);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class LogMult{

  public static int log(int x, int y) {

    int res = 1;

    if (x < 0 || y < 1) return 0;
    else {
      while (x > y) { 
        y = y*y;
        res = 2*res;
      }
    }
    return res;

  }





  public static void main(String[] args) {
    Random.args = args;

    int x = Random.random();
    log(x,2);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
LogMult.main([Ljava/lang/String;)V: Graph of 130 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: LogMult.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 14 IRulesP rules:
f471_0_log_Load(EOS(STATIC_471), i64, i65, i64) -> f473_0_log_LE(EOS(STATIC_473), i64, i65, i64, i65) :|: TRUE
f473_0_log_LE(EOS(STATIC_473), i64, i65, i64, i65) -> f481_0_log_LE(EOS(STATIC_481), i64, i65, i64, i65) :|: i64 > i65
f481_0_log_LE(EOS(STATIC_481), i64, i65, i64, i65) -> f493_0_log_Load(EOS(STATIC_493), i64, i65) :|: i64 > i65
f493_0_log_Load(EOS(STATIC_493), i64, i65) -> f495_0_log_Load(EOS(STATIC_495), i64, i65, i65) :|: TRUE
f495_0_log_Load(EOS(STATIC_495), i64, i65, i65) -> f497_0_log_IntArithmetic(EOS(STATIC_497), i64, i65, i65) :|: TRUE
f497_0_log_IntArithmetic(EOS(STATIC_497), i64, i65, i65) -> f499_0_log_Store(EOS(STATIC_499), i64, i65 * i65) :|: i65 > 1 && i65 > 1
f499_0_log_Store(EOS(STATIC_499), i64, i75) -> f501_0_log_ConstantStackPush(EOS(STATIC_501), i64, i75) :|: TRUE
f501_0_log_ConstantStackPush(EOS(STATIC_501), i64, i75) -> f502_0_log_Load(EOS(STATIC_502), i64, i75) :|: TRUE
f502_0_log_Load(EOS(STATIC_502), i64, i75) -> f503_0_log_IntArithmetic(EOS(STATIC_503), i64, i75) :|: TRUE
f503_0_log_IntArithmetic(EOS(STATIC_503), i64, i75) -> f506_0_log_Store(EOS(STATIC_506), i64, i75) :|: TRUE
f506_0_log_Store(EOS(STATIC_506), i64, i75) -> f507_0_log_JMP(EOS(STATIC_507), i64, i75) :|: TRUE
f507_0_log_JMP(EOS(STATIC_507), i64, i75) -> f511_0_log_Load(EOS(STATIC_511), i64, i75) :|: TRUE
f511_0_log_Load(EOS(STATIC_511), i64, i75) -> f470_0_log_Load(EOS(STATIC_470), i64, i75) :|: TRUE
f470_0_log_Load(EOS(STATIC_470), i64, i65) -> f471_0_log_Load(EOS(STATIC_471), i64, i65, i64) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f471_0_log_Load(EOS(STATIC_471), i64:0, i65:0, i64:0) -> f471_0_log_Load(EOS(STATIC_471), i64:0, i65:0 * i65:0, i64:0) :|: i65:0 < i64:0 && i65:0 > 1
Filtered constant ground arguments:
   f471_0_log_Load(x1, x2, x3, x4) -> f471_0_log_Load(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f471_0_log_Load(x1, x2, x3) -> f471_0_log_Load(x2, x3)
Finished conversion. Obtained 1 rules.P rules:
f471_0_log_Load(i65:0, i64:0) -> f471_0_log_Load(i65:0 * i65:0, i64:0) :|: i65:0 < i64:0 && i65:0 > 1

----------------------------------------

(8)
Obligation:
Rules:
f471_0_log_Load(i65:0, i64:0) -> f471_0_log_Load(i65:0 * i65:0, i64:0) :|: i65:0 < i64:0 && i65:0 > 1

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f471_0_log_Load(i65:0, i64:0) -> f471_0_log_Load(arith, i64:0) :|: i65:0 < i64:0 && i65:0 > 1 && arith = i65:0 * i65:0

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f471_0_log_Load(i65:0, i64:0) -> f471_0_log_Load(arith, i64:0) :|: i65:0 < i64:0 && i65:0 > 1 && arith = i65:0 * i65:0

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f471_0_log_Load(i65:0, i64:0) -> f471_0_log_Load(arith, i64:0) :|: i65:0 < i64:0 && i65:0 > 1 && arith = i65:0 * i65:0

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f471_0_log_Load(i65:0:0, i64:0:0) -> f471_0_log_Load(i65:0:0 * i65:0:0, i64:0:0) :|: i65:0:0 < i64:0:0 && i65:0:0 > 1

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f471_0_log_Load(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f471_0_log_Load(i65:0:0, i64:0:0) -> f471_0_log_Load(c, i64:0:0) :|: c = i65:0:0 * i65:0:0 && (i65:0:0 < i64:0:0 && i65:0:0 > 1)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f471_0_log_Load(x, x1)] = -x + x1

The following rules are decreasing:
f471_0_log_Load(i65:0:0, i64:0:0) -> f471_0_log_Load(c, i64:0:0) :|: c = i65:0:0 * i65:0:0 && (i65:0:0 < i64:0:0 && i65:0:0 > 1)
The following rules are bounded:
f471_0_log_Load(i65:0:0, i64:0:0) -> f471_0_log_Load(c, i64:0:0) :|: c = i65:0:0 * i65:0:0 && (i65:0:0 < i64:0:0 && i65:0:0 > 1)

----------------------------------------

(18)
YES
