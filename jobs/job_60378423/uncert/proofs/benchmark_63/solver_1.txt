YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/DB0Oe.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 165 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 61 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 19 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 26 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
(18) IntTRS
(19) RankingReductionPairProof [EQUIVALENT, 0 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaC1 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();

		while (x >= 0) {
			int y = 1;
			while (x > y) {
				y = 2*y;
			}
			x--;
		}
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaC1 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();

		while (x >= 0) {
			int y = 1;
			while (x > y) {
				y = 2*y;
			}
			x--;
		}
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaC1.main([Ljava/lang/String;)V: Graph of 124 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaC1.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 23 IRulesP rules:
f2975_0_main_LT(EOS(STATIC_2975), i138, i138) -> f2978_0_main_LT(EOS(STATIC_2978), i138, i138) :|: TRUE
f2978_0_main_LT(EOS(STATIC_2978), i138, i138) -> f2980_0_main_ConstantStackPush(EOS(STATIC_2980), i138) :|: i138 >= 0
f2980_0_main_ConstantStackPush(EOS(STATIC_2980), i138) -> f2982_0_main_Store(EOS(STATIC_2982), i138, 1) :|: TRUE
f2982_0_main_Store(EOS(STATIC_2982), i138, matching1) -> f2984_0_main_Load(EOS(STATIC_2984), i138, 1) :|: TRUE && matching1 = 1
f2984_0_main_Load(EOS(STATIC_2984), i138, matching1) -> f3052_0_main_Load(EOS(STATIC_3052), i138, 1) :|: TRUE && matching1 = 1
f3052_0_main_Load(EOS(STATIC_3052), i144, i145) -> f3312_0_main_Load(EOS(STATIC_3312), i144, i145) :|: TRUE
f3312_0_main_Load(EOS(STATIC_3312), i157, i158) -> f3500_0_main_Load(EOS(STATIC_3500), i157, i158) :|: TRUE
f3500_0_main_Load(EOS(STATIC_3500), i172, i173) -> f3507_0_main_Load(EOS(STATIC_3507), i172, i173, i172) :|: TRUE
f3507_0_main_Load(EOS(STATIC_3507), i172, i173, i172) -> f3508_0_main_LE(EOS(STATIC_3508), i172, i173, i172, i173) :|: TRUE
f3508_0_main_LE(EOS(STATIC_3508), i172, i173, i172, i173) -> f3509_0_main_LE(EOS(STATIC_3509), i172, i173, i172, i173) :|: i172 <= i173
f3508_0_main_LE(EOS(STATIC_3508), i172, i173, i172, i173) -> f3510_0_main_LE(EOS(STATIC_3510), i172, i173, i172, i173) :|: i172 > i173
f3509_0_main_LE(EOS(STATIC_3509), i172, i173, i172, i173) -> f3511_0_main_Inc(EOS(STATIC_3511), i172) :|: i172 <= i173
f3511_0_main_Inc(EOS(STATIC_3511), i172) -> f3530_0_main_JMP(EOS(STATIC_3530), i172 + -1) :|: TRUE
f3530_0_main_JMP(EOS(STATIC_3530), i177) -> f3540_0_main_Load(EOS(STATIC_3540), i177) :|: TRUE
f3540_0_main_Load(EOS(STATIC_3540), i177) -> f2974_0_main_Load(EOS(STATIC_2974), i177) :|: TRUE
f2974_0_main_Load(EOS(STATIC_2974), i135) -> f2975_0_main_LT(EOS(STATIC_2975), i135, i135) :|: TRUE
f3510_0_main_LE(EOS(STATIC_3510), i172, i173, i172, i173) -> f3528_0_main_ConstantStackPush(EOS(STATIC_3528), i172, i173) :|: i172 > i173
f3528_0_main_ConstantStackPush(EOS(STATIC_3528), i172, i173) -> f3531_0_main_Load(EOS(STATIC_3531), i172, i173, 2) :|: TRUE
f3531_0_main_Load(EOS(STATIC_3531), i172, i173, matching1) -> f3541_0_main_IntArithmetic(EOS(STATIC_3541), i172, 2, i173) :|: TRUE && matching1 = 2
f3541_0_main_IntArithmetic(EOS(STATIC_3541), i172, matching1, i173) -> f3542_0_main_Store(EOS(STATIC_3542), i172, 2 * i173) :|: i173 >= 1 && matching1 = 2
f3542_0_main_Store(EOS(STATIC_3542), i172, i179) -> f3543_0_main_JMP(EOS(STATIC_3543), i172, i179) :|: TRUE
f3543_0_main_JMP(EOS(STATIC_3543), i172, i179) -> f3544_0_main_Load(EOS(STATIC_3544), i172, i179) :|: TRUE
f3544_0_main_Load(EOS(STATIC_3544), i172, i179) -> f3500_0_main_Load(EOS(STATIC_3500), i172, i179) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f3508_0_main_LE(EOS(STATIC_3508), i172:0, i173:0, i172:0, i173:0) -> f3508_0_main_LE(EOS(STATIC_3508), i172:0 - 1, 1, i172:0 - 1, 1) :|: i172:0 > 0 && i173:0 >= i172:0
f3508_0_main_LE(EOS(STATIC_3508), i172:0, i173:0, i172:0, i173:0) -> f3508_0_main_LE(EOS(STATIC_3508), i172:0, 2 * i173:0, i172:0, 2 * i173:0) :|: i173:0 < i172:0 && i173:0 > 0
Filtered constant ground arguments:
   f3508_0_main_LE(x1, x2, x3, x4, x5) -> f3508_0_main_LE(x2, x3, x4, x5)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f3508_0_main_LE(x1, x2, x3, x4) -> f3508_0_main_LE(x3, x4)
Finished conversion. Obtained 2 rules.P rules:
f3508_0_main_LE(i172:0, i173:0) -> f3508_0_main_LE(i172:0 - 1, 1) :|: i172:0 > 0 && i173:0 >= i172:0
f3508_0_main_LE(i172:0, i173:0) -> f3508_0_main_LE(i172:0, 2 * i173:0) :|: i173:0 < i172:0 && i173:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f3508_0_main_LE(i172:0, i173:0) -> f3508_0_main_LE(i172:0 - 1, 1) :|: i172:0 > 0 && i173:0 >= i172:0
f3508_0_main_LE(x, x1) -> f3508_0_main_LE(x, 2 * x1) :|: x1 < x && x1 > 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f3508_0_main_LE(i172:0, i173:0) -> f3508_0_main_LE(arith, 1) :|: i172:0 > 0 && i173:0 >= i172:0 && arith = i172:0 - 1
f3508_0_main_LE(x2, x3) -> f3508_0_main_LE(x2, x4) :|: x3 < x2 && x3 > 0 && x4 = 2 * x3

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3508_0_main_LE(i172:0, i173:0) -> f3508_0_main_LE(arith, 1) :|: i172:0 > 0 && i173:0 >= i172:0 && arith = i172:0 - 1
(2) f3508_0_main_LE(x2, x3) -> f3508_0_main_LE(x2, x4) :|: x3 < x2 && x3 > 0 && x4 = 2 * x3

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f3508_0_main_LE(i172:0, i173:0) -> f3508_0_main_LE(arith, 1) :|: i172:0 > 0 && i173:0 >= i172:0 && arith = i172:0 - 1
(2) f3508_0_main_LE(x2, x3) -> f3508_0_main_LE(x2, x4) :|: x3 < x2 && x3 > 0 && x4 = 2 * x3

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f3508_0_main_LE(x2:0, x3:0) -> f3508_0_main_LE(x2:0, 2 * x3:0) :|: x3:0 < x2:0 && x3:0 > 0
f3508_0_main_LE(i172:0:0, i173:0:0) -> f3508_0_main_LE(i172:0:0 - 1, 1) :|: i172:0:0 > 0 && i173:0:0 >= i172:0:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3508_0_main_LE(INTEGER, VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f3508_0_main_LE(x2:0, x3:0) -> f3508_0_main_LE(x2:0, c) :|: c = 2 * x3:0 && (x3:0 < x2:0 && x3:0 > 0)
f3508_0_main_LE(i172:0:0, i173:0:0) -> f3508_0_main_LE(c1, c2) :|: c2 = 1 && c1 = i172:0:0 - 1 && (i172:0:0 > 0 && i173:0:0 >= i172:0:0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f3508_0_main_LE(x, x1)] = x

The following rules are decreasing:
f3508_0_main_LE(i172:0:0, i173:0:0) -> f3508_0_main_LE(c1, c2) :|: c2 = 1 && c1 = i172:0:0 - 1 && (i172:0:0 > 0 && i173:0:0 >= i172:0:0)
The following rules are bounded:
f3508_0_main_LE(x2:0, x3:0) -> f3508_0_main_LE(x2:0, c) :|: c = 2 * x3:0 && (x3:0 < x2:0 && x3:0 > 0)
f3508_0_main_LE(i172:0:0, i173:0:0) -> f3508_0_main_LE(c1, c2) :|: c2 = 1 && c1 = i172:0:0 - 1 && (i172:0:0 > 0 && i173:0:0 >= i172:0:0)

----------------------------------------

(18)
Obligation:
Rules:
f3508_0_main_LE(x2:0, x3:0) -> f3508_0_main_LE(x2:0, c) :|: c = 2 * x3:0 && (x3:0 < x2:0 && x3:0 > 0)

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f3508_0_main_LE ] = -1*f3508_0_main_LE_2 + f3508_0_main_LE_1

The following rules are decreasing:
f3508_0_main_LE(x2:0, x3:0) -> f3508_0_main_LE(x2:0, c) :|: c = 2 * x3:0 && (x3:0 < x2:0 && x3:0 > 0)

The following rules are bounded:
f3508_0_main_LE(x2:0, x3:0) -> f3508_0_main_LE(x2:0, c) :|: c = 2 * x3:0 && (x3:0 < x2:0 && x3:0 > 0)


----------------------------------------

(20)
YES
