YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/19uiE.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 126 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package ArrayPrimitives;

public class ArrayPrimitives {
	public static void main(String[] argv) {
		Random.args = argv;
		int int0 = Random.random();
		int int1 = Random.random();
		int int2 = Random.random();
		int[] data = {int0, int1, int2};
		while (data[0] != int0);
		while (data[1] != int1);
		while (data[2] != int2);
	}
}


package ArrayPrimitives;

public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package ArrayPrimitives;

public class ArrayPrimitives {
	public static void main(String[] argv) {
		Random.args = argv;
		int int0 = Random.random();
		int int1 = Random.random();
		int int2 = Random.random();
		int[] data = {int0, int1, int2};
		while (data[0] != int0);
		while (data[1] != int1);
		while (data[2] != int2);
	}
}


package ArrayPrimitives;

public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
ArrayPrimitives.ArrayPrimitives.main([Ljava/lang/String;)V: Graph of 263 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Proven termination by absence of SCCs
----------------------------------------

(6)
TRUE
