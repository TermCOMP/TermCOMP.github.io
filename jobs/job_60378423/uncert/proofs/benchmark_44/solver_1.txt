YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/yoI98.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 162 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 45 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 27 ms]
(12) AND
    (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) TempFilterProof [SOUND, 9 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (19) YES
    (20) IRSwT
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IRSwT
        (23) TempFilterProof [SOUND, 21 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB10 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x + y > 0) {
            if (x > 0) {
                x--;
            } else if (y > 0) {
                y--;
            } else {
                continue;
            }            
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB10 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x + y > 0) {
            if (x > 0) {
                x--;
            } else if (y > 0) {
                y--;
            } else {
                continue;
            }            
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaB10.main([Ljava/lang/String;)V: Graph of 188 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaB10.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 22 IRulesP rules:
f571_0_main_Load(EOS(STATIC_571), i85, i45, i85) -> f579_0_main_IntArithmetic(EOS(STATIC_579), i85, i45, i85, i45) :|: TRUE
f579_0_main_IntArithmetic(EOS(STATIC_579), i85, i45, i85, i45) -> f588_0_main_LE(EOS(STATIC_588), i85, i45, i85 + i45) :|: i85 >= 0 && i45 >= 0
f588_0_main_LE(EOS(STATIC_588), i85, i45, i97) -> f596_0_main_LE(EOS(STATIC_596), i85, i45, i97) :|: TRUE
f596_0_main_LE(EOS(STATIC_596), i85, i45, i97) -> f604_0_main_Load(EOS(STATIC_604), i85, i45) :|: i97 > 0
f604_0_main_Load(EOS(STATIC_604), i85, i45) -> f611_0_main_LE(EOS(STATIC_611), i85, i45, i85) :|: TRUE
f611_0_main_LE(EOS(STATIC_611), matching1, i45, matching2) -> f616_0_main_LE(EOS(STATIC_616), 0, i45, 0) :|: TRUE && matching1 = 0 && matching2 = 0
f611_0_main_LE(EOS(STATIC_611), i99, i45, i99) -> f617_0_main_LE(EOS(STATIC_617), i99, i45, i99) :|: TRUE
f616_0_main_LE(EOS(STATIC_616), matching1, i45, matching2) -> f619_0_main_Load(EOS(STATIC_619), 0, i45) :|: 0 <= 0 && matching1 = 0 && matching2 = 0
f619_0_main_Load(EOS(STATIC_619), matching1, i45) -> f624_0_main_LE(EOS(STATIC_624), 0, i45, i45) :|: TRUE && matching1 = 0
f624_0_main_LE(EOS(STATIC_624), matching1, matching2, matching3) -> f629_0_main_LE(EOS(STATIC_629), 0, 0, 0) :|: TRUE && matching1 = 0 && matching2 = 0 && matching3 = 0
f624_0_main_LE(EOS(STATIC_624), matching1, i102, i102) -> f630_0_main_LE(EOS(STATIC_630), 0, i102, i102) :|: TRUE && matching1 = 0
f629_0_main_LE(EOS(STATIC_629), matching1, matching2, matching3) -> f5572_0_main_Load(EOS(STATIC_5572), 0, 0) :|: 0 <= 0 && matching1 = 0 && matching2 = 0 && matching3 = 0
f5572_0_main_Load(EOS(STATIC_5572), matching1, matching2) -> f554_0_main_Load(EOS(STATIC_554), 0, 0) :|: TRUE && matching1 = 0 && matching2 = 0
f554_0_main_Load(EOS(STATIC_554), i85, i45) -> f571_0_main_Load(EOS(STATIC_571), i85, i45, i85) :|: TRUE
f630_0_main_LE(EOS(STATIC_630), matching1, i102, i102) -> f5581_0_main_Inc(EOS(STATIC_5581), 0, i102) :|: i102 > 0 && matching1 = 0
f5581_0_main_Inc(EOS(STATIC_5581), matching1, i102) -> f5589_0_main_JMP(EOS(STATIC_5589), 0, i102 + -1) :|: TRUE && matching1 = 0
f5589_0_main_JMP(EOS(STATIC_5589), matching1, i857) -> f5723_0_main_Load(EOS(STATIC_5723), 0, i857) :|: TRUE && matching1 = 0
f5723_0_main_Load(EOS(STATIC_5723), matching1, i857) -> f554_0_main_Load(EOS(STATIC_554), 0, i857) :|: TRUE && matching1 = 0
f617_0_main_LE(EOS(STATIC_617), i99, i45, i99) -> f622_0_main_Inc(EOS(STATIC_622), i99, i45) :|: i99 > 0
f622_0_main_Inc(EOS(STATIC_622), i99, i45) -> f626_0_main_JMP(EOS(STATIC_626), i99 + -1, i45) :|: TRUE
f626_0_main_JMP(EOS(STATIC_626), i101, i45) -> f666_0_main_Load(EOS(STATIC_666), i101, i45) :|: TRUE
f666_0_main_Load(EOS(STATIC_666), i101, i45) -> f554_0_main_Load(EOS(STATIC_554), i101, i45) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f571_0_main_Load(EOS(STATIC_571), 0, i45:0, 0) -> f571_0_main_Load(EOS(STATIC_571), 0, i45:0 - 1, 0) :|: i45:0 > 0
f571_0_main_Load(EOS(STATIC_571), i85:0, i45:0, i85:0) -> f571_0_main_Load(EOS(STATIC_571), i85:0 - 1, i45:0, i85:0 - 1) :|: i85:0 > 0 && i85:0 + i45:0 > 0 && i45:0 > -1
Filtered constant ground arguments:
   f571_0_main_Load(x1, x2, x3, x4) -> f571_0_main_Load(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f571_0_main_Load(x1, x2, x3) -> f571_0_main_Load(x2, x3)
Finished conversion. Obtained 2 rules.P rules:
f571_0_main_Load(i45:0, cons_0) -> f571_0_main_Load(i45:0 - 1, 0) :|: i45:0 > 0 && cons_0 = 0
f571_0_main_Load(i45:0, i85:0) -> f571_0_main_Load(i45:0, i85:0 - 1) :|: i85:0 + i45:0 > 0 && i45:0 > -1 && i85:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f571_0_main_Load(i45:0, cons_0) -> f571_0_main_Load(i45:0 - 1, 0) :|: i45:0 > 0 && cons_0 = 0
f571_0_main_Load(x, x1) -> f571_0_main_Load(x, x1 - 1) :|: x1 + x > 0 && x > -1 && x1 > 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f571_0_main_Load(i45:0, cons_0) -> f571_0_main_Load(arith, 0) :|: i45:0 > 0 && cons_0 = 0 && arith = i45:0 - 1
f571_0_main_Load(x2, x3) -> f571_0_main_Load(x2, x4) :|: x3 + x2 > 0 && x2 > -1 && x3 > 0 && x4 = x3 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f571_0_main_Load(i45:0, cons_0) -> f571_0_main_Load(arith, 0) :|: i45:0 > 0 && cons_0 = 0 && arith = i45:0 - 1
(2) f571_0_main_Load(x2, x3) -> f571_0_main_Load(x2, x4) :|: x3 + x2 > 0 && x2 > -1 && x3 > 0 && x4 = x3 - 1

Arcs:
(1) -> (1)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f571_0_main_Load(x2, x3) -> f571_0_main_Load(x2, x4) :|: x3 + x2 > 0 && x2 > -1 && x3 > 0 && x4 = x3 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f571_0_main_Load(x2:0, x3:0) -> f571_0_main_Load(x2:0, x3:0 - 1) :|: x3:0 + x2:0 > 0 && x2:0 > -1 && x3:0 > 0

----------------------------------------

(16) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f571_0_main_Load(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(17)
Obligation:
Rules:
f571_0_main_Load(x2:0, x3:0) -> f571_0_main_Load(x2:0, c) :|: c = x3:0 - 1 && (x3:0 + x2:0 > 0 && x2:0 > -1 && x3:0 > 0)

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f571_0_main_Load(x, x1)] = x + x1

The following rules are decreasing:
f571_0_main_Load(x2:0, x3:0) -> f571_0_main_Load(x2:0, c) :|: c = x3:0 - 1 && (x3:0 + x2:0 > 0 && x2:0 > -1 && x3:0 > 0)
The following rules are bounded:
f571_0_main_Load(x2:0, x3:0) -> f571_0_main_Load(x2:0, c) :|: c = x3:0 - 1 && (x3:0 + x2:0 > 0 && x2:0 > -1 && x3:0 > 0)

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:

Termination digraph:
Nodes:
(1) f571_0_main_Load(i45:0, cons_0) -> f571_0_main_Load(arith, 0) :|: i45:0 > 0 && cons_0 = 0 && arith = i45:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f571_0_main_Load(i45:0:0, cons_0) -> f571_0_main_Load(i45:0:0 - 1, 0) :|: i45:0:0 > 0 && cons_0 = 0

----------------------------------------

(23) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f571_0_main_Load(INTEGER, VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(24)
Obligation:
Rules:
f571_0_main_Load(i45:0:0, c) -> f571_0_main_Load(c1, c2) :|: c2 = 0 && (c1 = i45:0:0 - 1 && c = 0) && (i45:0:0 > 0 && cons_0 = 0)

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f571_0_main_Load(x, x1)] = x + c1*x1

The following rules are decreasing:
f571_0_main_Load(i45:0:0, c) -> f571_0_main_Load(c1, c2) :|: c2 = 0 && (c1 = i45:0:0 - 1 && c = 0) && (i45:0:0 > 0 && cons_0 = 0)
The following rules are bounded:
f571_0_main_Load(i45:0:0, c) -> f571_0_main_Load(c1, c2) :|: c2 = 0 && (c1 = i45:0:0 - 1 && c = 0) && (i45:0:0 > 0 && cons_0 = 0)

----------------------------------------

(26)
YES
