NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/P0j9J.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 94 ms]
(4) JBCTerminationGraph
(5) JBCNonTerm [COMPLETE, 18 ms]
(6) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * A loop continously throwing and catching an exception.
 * Since the exception is thrown before the statement that makes the loop
 * progress, that loop diverges.
 *
 * The call to <tt>main()</tt> diverges.
 *
 * Julia + BinTerm cannot prove that the call to <tt>main()</tt> terminates.
 *
 * @author <A HREF="mailto:fausto.spoto@univr.it">Fausto Spoto</A>
 */

public class Exc2 {
    public static void main(String[] args) {
	int i = 0;

	while (i < 20) {
	    try {
		if (i > 10) throw null;
		i++;
	    }
	    catch (NullPointerException e) {
	    }
	}
    }
}


----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * A loop continously throwing and catching an exception.
 * Since the exception is thrown before the statement that makes the loop
 * progress, that loop diverges.
 *
 * The call to <tt>main()</tt> diverges.
 *
 * Julia + BinTerm cannot prove that the call to <tt>main()</tt> terminates.
 *
 * @author <A HREF="mailto:fausto.spoto@univr.it">Fausto Spoto</A>
 */

public class Exc2 {
    public static void main(String[] args) {
	int i = 0;

	while (i < 20) {
	    try {
		if (i > 10) throw null;
		i++;
	    }
	    catch (NullPointerException e) {
	    }
	}
    }
}


----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Exc2.main([Ljava/lang/String;)V: Graph of 45 nodes with 1 SCC.





----------------------------------------

(5) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<Exc2.main||0: push 0|| - || ->
YES:  (JL1)
1:<Exc2.main||1: store INT to i|| - ||0>
YES:  (JL1)
2:<Exc2.main||2: load INT i||i: 0|| ->
YES:  (JL1)
Start state of loop: 

[o12(lv_0_0)]
<Exc2.main||2: load INT i||i: i7|| ->
	o12([java.lang.String...]): Object() -->{java.lang.Object...}
	i7: [0,+inf)(l3)
YES:  (JL1)


In the loop head node, references [i7] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

(0 <= initial_i7 and ((((path1_i7 = path1_i9 and path1_i9 = path1_i11 and path1_i13 = (path1_i11 + 1) and path1_i13 = res_i7 and path1_i7 = initial_i7) and (T and 20 = 20 and path1_i9 < 20 and T and 10 = 10 and path1_i11 <= 10)) or ((path2_i7 = path2_i9 and path2_i9 = path2_i12 and path2_i12 = res_i7 and path2_i7 = initial_i7) and (T and 20 = 20 and path2_i9 < 20 and T and 10 = 10 and path2_i12 > 10))) and (((res1_i7 = res1_i9 and res1_i9 = res1_i11 and res1_i13 = (res1_i11 + 1) and res_i7 = res1_i7) and !(T and 20 = 20 and res1_i9 < 20 and T and 10 = 10 and res1_i11 <= 10)) and ((res2_i7 = res2_i9 and res2_i9 = res2_i12 and res_i7 = res2_i7) and !(T and 20 = 20 and res2_i9 < 20 and T and 10 = 10 and res2_i12 > 10)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(6)
NO
