NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/M6UG4.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 102 ms]
(4) JBCTerminationGraph
(5) JBCNonTerm [COMPLETE, 57 ms]
(6) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.ex09half;

public class Half {

	/*
	 * This is taken from a broken mergesort, where the calculation of the
	 * borders was wrong. I removed all information about the arrays and so on
	 * an so this is left.
	 */

	public static void loop(int i) {
		int l = i;
		i = 0;
		while (l - i > 0) {
			i = i + (l - i) / 2;
		}
	}
}


package simple.ex09half;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Half.loop(args.length);
	}

}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.ex09half;

public class Half {

	/*
	 * This is taken from a broken mergesort, where the calculation of the
	 * borders was wrong. I removed all information about the arrays and so on
	 * an so this is left.
	 */

	public static void loop(int i) {
		int l = i;
		i = 0;
		while (l - i > 0) {
			i = i + (l - i) / 2;
		}
	}
}


package simple.ex09half;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Half.loop(args.length);
	}

}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
simple.ex09half.Main.main([Ljava/lang/String;)V: Graph of 29 nodes with 1 SCC.





----------------------------------------

(5) JBCNonTerm (COMPLETE)
Constructed a run with a repetition. States 7 and 20 are repetitions (when considering only the interesting positions [lv_0_1, lv_0_0]).

0:<simple.ex09half.Main.main||0: load ADDR args||args: a13|| ->
	a13([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
1:<simple.ex09half.Main.main||1: arraylength|| - ||a13>
	a13([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
2:<simple.ex09half.Main.main||2: simple.ex09half.Half.loop(I)V|| - ||1>
YES:  (JL1)
3:<simple.ex09half.Half.loop||0: load INT i||i: 1|| ->
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
4:<simple.ex09half.Half.loop||1: store INT to l|| - ||1>
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
5:<simple.ex09half.Half.loop||2: push 0||l: 1|| ->
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
6:<simple.ex09half.Half.loop||3: store INT to i||l: 1||0>
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
7:<simple.ex09half.Half.loop||4: load INT l||i: 0, l: 1|| ->
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
8:<simple.ex09half.Half.loop||5: load INT i||i: 0, l: 1||1>
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
9:<simple.ex09half.Half.loop||6: SUB||i: 0, l: 1||1, 0>
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
10:<simple.ex09half.Half.loop||7: LE 0||i: 0, l: 1||1>
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
11:<simple.ex09half.Half.loop||10: load INT i||i: 0, l: 1|| ->
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
12:<simple.ex09half.Half.loop||11: load INT l||i: 0, l: 1||0>
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
13:<simple.ex09half.Half.loop||12: load INT i||i: 0, l: 1||0, 1>
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
14:<simple.ex09half.Half.loop||13: SUB||l: 1||0, 1, 0>
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
15:<simple.ex09half.Half.loop||14: push 2||l: 1||0, 1>
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
16:<simple.ex09half.Half.loop||15: TIDIV||l: 1||0, 1, 2>
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
17:<simple.ex09half.Half.loop||16: ADD||l: 1||0, 0>
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
18:<simple.ex09half.Half.loop||17: store INT to i||l: 1||0>
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
19:<simple.ex09half.Half.loop||18: jmp||i: 0, l: 1|| ->
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)
20:<simple.ex09half.Half.loop||4: load INT l||i: 0, l: 1|| ->
<simple.ex09half.Main.main||2: simple.ex09half.Half.loop|| - || ->
YES:  (JL1)

----------------------------------------

(6)
NO
