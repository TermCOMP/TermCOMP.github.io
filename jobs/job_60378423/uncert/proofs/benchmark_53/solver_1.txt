YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/fAQox.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 177 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 40 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 22 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB1 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x > y) {
            x--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB1 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x > y) {
            x--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaB1.main([Ljava/lang/String;)V: Graph of 175 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaB1.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 7 IRulesP rules:
f349_0_main_Load(EOS(STATIC_349), i46, i42, i46) -> f357_0_main_LE(EOS(STATIC_357), i46, i42, i46, i42) :|: TRUE
f357_0_main_LE(EOS(STATIC_357), i46, i42, i46, i42) -> f364_0_main_LE(EOS(STATIC_364), i46, i42, i46, i42) :|: i46 > i42
f364_0_main_LE(EOS(STATIC_364), i46, i42, i46, i42) -> f374_0_main_Inc(EOS(STATIC_374), i46, i42) :|: i46 > i42
f374_0_main_Inc(EOS(STATIC_374), i46, i42) -> f380_0_main_JMP(EOS(STATIC_380), i46 + -1, i42) :|: TRUE
f380_0_main_JMP(EOS(STATIC_380), i51, i42) -> f392_0_main_Load(EOS(STATIC_392), i51, i42) :|: TRUE
f392_0_main_Load(EOS(STATIC_392), i51, i42) -> f340_0_main_Load(EOS(STATIC_340), i51, i42) :|: TRUE
f340_0_main_Load(EOS(STATIC_340), i46, i42) -> f349_0_main_Load(EOS(STATIC_349), i46, i42, i46) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f349_0_main_Load(EOS(STATIC_349), i46:0, i42:0, i46:0) -> f349_0_main_Load(EOS(STATIC_349), i46:0 - 1, i42:0, i46:0 - 1) :|: i46:0 > i42:0
Filtered constant ground arguments:
   f349_0_main_Load(x1, x2, x3, x4) -> f349_0_main_Load(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f349_0_main_Load(x1, x2, x3) -> f349_0_main_Load(x2, x3)
Finished conversion. Obtained 1 rules.P rules:
f349_0_main_Load(i42:0, i46:0) -> f349_0_main_Load(i42:0, i46:0 - 1) :|: i46:0 > i42:0

----------------------------------------

(8)
Obligation:
Rules:
f349_0_main_Load(i42:0, i46:0) -> f349_0_main_Load(i42:0, i46:0 - 1) :|: i46:0 > i42:0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f349_0_main_Load(i42:0, i46:0) -> f349_0_main_Load(i42:0, arith) :|: i46:0 > i42:0 && arith = i46:0 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f349_0_main_Load(i42:0, i46:0) -> f349_0_main_Load(i42:0, arith) :|: i46:0 > i42:0 && arith = i46:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f349_0_main_Load(i42:0, i46:0) -> f349_0_main_Load(i42:0, arith) :|: i46:0 > i42:0 && arith = i46:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f349_0_main_Load(i42:0:0, i46:0:0) -> f349_0_main_Load(i42:0:0, i46:0:0 - 1) :|: i46:0:0 > i42:0:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f349_0_main_Load(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f349_0_main_Load(i42:0:0, i46:0:0) -> f349_0_main_Load(i42:0:0, c) :|: c = i46:0:0 - 1 && i46:0:0 > i42:0:0

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f349_0_main_Load(x, x1)] = -x + x1

The following rules are decreasing:
f349_0_main_Load(i42:0:0, i46:0:0) -> f349_0_main_Load(i42:0:0, c) :|: c = i46:0:0 - 1 && i46:0:0 > i42:0:0
The following rules are bounded:
f349_0_main_Load(i42:0:0, i46:0:0) -> f349_0_main_Load(i42:0:0, c) :|: c = i46:0:0 - 1 && i46:0:0 > i42:0:0

----------------------------------------

(18)
YES
