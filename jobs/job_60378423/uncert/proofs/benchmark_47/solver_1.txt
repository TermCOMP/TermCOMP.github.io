YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/4tFg1.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 38 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 198 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 56 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 29 ms]
(12) AND
    (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IRSwT
        (18) TempFilterProof [SOUND, 5 ms]
        (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (21) YES
    (22) IRSwT
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IRSwT
        (25) TempFilterProof [SOUND, 7 ms]
        (26) IntTRS
        (27) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (28) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB13 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();
        int z = Random.random();

        while (x > z || y > z) {
            if (x > z) {
                x--;
            } else if (y > z) {
                y--;
            } else {
                continue;
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB13 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();
        int z = Random.random();

        while (x > z || y > z) {
            if (x > z) {
                x--;
            } else if (y > z) {
                y--;
            } else {
                continue;
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaB13.main([Ljava/lang/String;)V: Graph of 262 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaB13.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 28 IRulesP rules:
f509_0_main_Load(EOS(STATIC_509), i75, i48, i71, i75) -> f512_0_main_GT(EOS(STATIC_512), i75, i48, i71, i75, i71) :|: TRUE
f512_0_main_GT(EOS(STATIC_512), i75, i48, i71, i75, i71) -> f519_0_main_GT(EOS(STATIC_519), i75, i48, i71, i75, i71) :|: i75 > i71
f512_0_main_GT(EOS(STATIC_512), i75, i48, i71, i75, i71) -> f520_0_main_GT(EOS(STATIC_520), i75, i48, i71, i75, i71) :|: i75 <= i71
f519_0_main_GT(EOS(STATIC_519), i75, i48, i71, i75, i71) -> f524_0_main_Load(EOS(STATIC_524), i75, i48, i71) :|: i75 > i71
f524_0_main_Load(EOS(STATIC_524), i75, i48, i71) -> f527_0_main_Load(EOS(STATIC_527), i75, i48, i71, i75) :|: TRUE
f527_0_main_Load(EOS(STATIC_527), i75, i48, i71, i75) -> f531_0_main_LE(EOS(STATIC_531), i75, i48, i71, i75, i71) :|: TRUE
f531_0_main_LE(EOS(STATIC_531), i75, i48, i71, i75, i71) -> f536_0_main_LE(EOS(STATIC_536), i75, i48, i71, i75, i71) :|: i75 > i71
f536_0_main_LE(EOS(STATIC_536), i75, i48, i71, i75, i71) -> f539_0_main_Inc(EOS(STATIC_539), i75, i48, i71) :|: i75 > i71
f539_0_main_Inc(EOS(STATIC_539), i75, i48, i71) -> f545_0_main_JMP(EOS(STATIC_545), i75 + -1, i48, i71) :|: TRUE
f545_0_main_JMP(EOS(STATIC_545), i79, i48, i71) -> f559_0_main_Load(EOS(STATIC_559), i79, i48, i71) :|: TRUE
f559_0_main_Load(EOS(STATIC_559), i79, i48, i71) -> f504_0_main_Load(EOS(STATIC_504), i79, i48, i71) :|: TRUE
f504_0_main_Load(EOS(STATIC_504), i75, i48, i71) -> f509_0_main_Load(EOS(STATIC_509), i75, i48, i71, i75) :|: TRUE
f520_0_main_GT(EOS(STATIC_520), i75, i48, i71, i75, i71) -> f525_0_main_Load(EOS(STATIC_525), i75, i48, i71) :|: i75 <= i71
f525_0_main_Load(EOS(STATIC_525), i75, i48, i71) -> f528_0_main_Load(EOS(STATIC_528), i75, i48, i71, i48) :|: TRUE
f528_0_main_Load(EOS(STATIC_528), i75, i48, i71, i48) -> f532_0_main_LE(EOS(STATIC_532), i75, i48, i71, i48, i71) :|: TRUE
f532_0_main_LE(EOS(STATIC_532), i75, i48, i71, i48, i71) -> f538_0_main_LE(EOS(STATIC_538), i75, i48, i71, i48, i71) :|: i48 > i71
f538_0_main_LE(EOS(STATIC_538), i75, i48, i71, i48, i71) -> f544_0_main_Load(EOS(STATIC_544), i75, i48, i71) :|: i48 > i71
f544_0_main_Load(EOS(STATIC_544), i75, i48, i71) -> f547_0_main_Load(EOS(STATIC_547), i75, i48, i71, i75) :|: TRUE
f547_0_main_Load(EOS(STATIC_547), i75, i48, i71, i75) -> f569_0_main_LE(EOS(STATIC_569), i75, i48, i71, i75, i71) :|: TRUE
f569_0_main_LE(EOS(STATIC_569), i75, i48, i71, i75, i71) -> f575_0_main_LE(EOS(STATIC_575), i75, i48, i71, i75, i71) :|: i75 <= i71
f575_0_main_LE(EOS(STATIC_575), i75, i48, i71, i75, i71) -> f580_0_main_Load(EOS(STATIC_580), i75, i48, i71) :|: i75 <= i71
f580_0_main_Load(EOS(STATIC_580), i75, i48, i71) -> f582_0_main_Load(EOS(STATIC_582), i75, i48, i71, i48) :|: TRUE
f582_0_main_Load(EOS(STATIC_582), i75, i48, i71, i48) -> f583_0_main_LE(EOS(STATIC_583), i75, i48, i71, i48, i71) :|: TRUE
f583_0_main_LE(EOS(STATIC_583), i75, i48, i71, i48, i71) -> f587_0_main_LE(EOS(STATIC_587), i75, i48, i71, i48, i71) :|: i48 > i71
f587_0_main_LE(EOS(STATIC_587), i75, i48, i71, i48, i71) -> f588_0_main_Inc(EOS(STATIC_588), i75, i48, i71) :|: i48 > i71
f588_0_main_Inc(EOS(STATIC_588), i75, i48, i71) -> f589_0_main_JMP(EOS(STATIC_589), i75, i48 + -1, i71) :|: TRUE
f589_0_main_JMP(EOS(STATIC_589), i75, i86, i71) -> f593_0_main_Load(EOS(STATIC_593), i75, i86, i71) :|: TRUE
f593_0_main_Load(EOS(STATIC_593), i75, i86, i71) -> f504_0_main_Load(EOS(STATIC_504), i75, i86, i71) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f509_0_main_Load(EOS(STATIC_509), i75:0, i48:0, i71:0, i75:0) -> f509_0_main_Load(EOS(STATIC_509), i75:0, i48:0 - 1, i71:0, i75:0) :|: i75:0 <= i71:0 && i71:0 < i48:0
f509_0_main_Load(EOS(STATIC_509), i75:0, i48:0, i71:0, i75:0) -> f509_0_main_Load(EOS(STATIC_509), i75:0 - 1, i48:0, i71:0, i75:0 - 1) :|: i75:0 > i71:0
Filtered constant ground arguments:
   f509_0_main_Load(x1, x2, x3, x4, x5) -> f509_0_main_Load(x2, x3, x4, x5)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f509_0_main_Load(x1, x2, x3, x4) -> f509_0_main_Load(x2, x3, x4)
Finished conversion. Obtained 2 rules.P rules:
f509_0_main_Load(i48:0, i71:0, i75:0) -> f509_0_main_Load(i48:0 - 1, i71:0, i75:0) :|: i75:0 <= i71:0 && i71:0 < i48:0
f509_0_main_Load(i48:0, i71:0, i75:0) -> f509_0_main_Load(i48:0, i71:0, i75:0 - 1) :|: i75:0 > i71:0

----------------------------------------

(8)
Obligation:
Rules:
f509_0_main_Load(i48:0, i71:0, i75:0) -> f509_0_main_Load(i48:0 - 1, i71:0, i75:0) :|: i75:0 <= i71:0 && i71:0 < i48:0
f509_0_main_Load(x, x1, x2) -> f509_0_main_Load(x, x1, x2 - 1) :|: x2 > x1

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f509_0_main_Load(i48:0, i71:0, i75:0) -> f509_0_main_Load(arith, i71:0, i75:0) :|: i75:0 <= i71:0 && i71:0 < i48:0 && arith = i48:0 - 1
f509_0_main_Load(x3, x4, x5) -> f509_0_main_Load(x3, x4, x6) :|: x5 > x4 && x6 = x5 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f509_0_main_Load(i48:0, i71:0, i75:0) -> f509_0_main_Load(arith, i71:0, i75:0) :|: i75:0 <= i71:0 && i71:0 < i48:0 && arith = i48:0 - 1
(2) f509_0_main_Load(x3, x4, x5) -> f509_0_main_Load(x3, x4, x6) :|: x5 > x4 && x6 = x5 - 1

Arcs:
(1) -> (1)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f509_0_main_Load(x3, x4, x5) -> f509_0_main_Load(x3, x4, x6) :|: x5 > x4 && x6 = x5 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f509_0_main_Load(x3:0, x4:0, x5:0) -> f509_0_main_Load(x3:0, x4:0, x5:0 - 1) :|: x5:0 > x4:0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f509_0_main_Load(x1, x2, x3) -> f509_0_main_Load(x2, x3)

----------------------------------------

(17)
Obligation:
Rules:
f509_0_main_Load(x4:0, x5:0) -> f509_0_main_Load(x4:0, x5:0 - 1) :|: x5:0 > x4:0

----------------------------------------

(18) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f509_0_main_Load(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(19)
Obligation:
Rules:
f509_0_main_Load(x4:0, x5:0) -> f509_0_main_Load(x4:0, c) :|: c = x5:0 - 1 && x5:0 > x4:0

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f509_0_main_Load(x, x1)] = -x + x1

The following rules are decreasing:
f509_0_main_Load(x4:0, x5:0) -> f509_0_main_Load(x4:0, c) :|: c = x5:0 - 1 && x5:0 > x4:0
The following rules are bounded:
f509_0_main_Load(x4:0, x5:0) -> f509_0_main_Load(x4:0, c) :|: c = x5:0 - 1 && x5:0 > x4:0

----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:

Termination digraph:
Nodes:
(1) f509_0_main_Load(i48:0, i71:0, i75:0) -> f509_0_main_Load(arith, i71:0, i75:0) :|: i75:0 <= i71:0 && i71:0 < i48:0 && arith = i48:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f509_0_main_Load(i48:0:0, i71:0:0, i75:0:0) -> f509_0_main_Load(i48:0:0 - 1, i71:0:0, i75:0:0) :|: i75:0:0 <= i71:0:0 && i71:0:0 < i48:0:0

----------------------------------------

(25) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f509_0_main_Load(INTEGER, INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(26)
Obligation:
Rules:
f509_0_main_Load(i48:0:0, i71:0:0, i75:0:0) -> f509_0_main_Load(c, i71:0:0, i75:0:0) :|: c = i48:0:0 - 1 && (i75:0:0 <= i71:0:0 && i71:0:0 < i48:0:0)

----------------------------------------

(27) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f509_0_main_Load(x, x1, x2)] = x - x1

The following rules are decreasing:
f509_0_main_Load(i48:0:0, i71:0:0, i75:0:0) -> f509_0_main_Load(c, i71:0:0, i75:0:0) :|: c = i48:0:0 - 1 && (i75:0:0 <= i71:0:0 && i71:0:0 < i48:0:0)
The following rules are bounded:
f509_0_main_Load(i48:0:0, i71:0:0, i75:0:0) -> f509_0_main_Load(c, i71:0:0, i75:0:0) :|: c = i48:0:0 - 1 && (i75:0:0 <= i71:0:0 && i71:0:0 < i48:0:0)

----------------------------------------

(28)
YES
