YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/KvJ7Y.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 77 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * A loop that might potentially throw a <tt>NullPointerException</tt>
 * because of the instance field access <tt>exc.f</tt>. If that happened,
 * the loop would diverge since the exception handler does not include any
 * progress statement. However, Julia can prove that <tt>exc</tt> is not
 * <tt>null</tt> at the point where <tt>exc.f</tt> is accessed, so that
 * no exception can be thrown there. Hence the loop is proved to terminate.
 *
 * All calls terminate.
 *
 * Julia + BinTerm prove that all calls terminate.
 *
 * Note: without a preliminary nullness analysis, termination could not
 *       be proved.
 *
 * @author <A HREF="mailto:fausto.spoto@univr.it">Fausto Spoto</A>
 */

public class Exc {
    private int f;

    public static void main(String[] args) {
	Exc exc = new Exc();
	int i = 0;

	while (i < 20) {
	    try {
		if (i > 10) exc.f = 5;
		i += 2;
	    }
	    catch (NullPointerException e) {
	    }
	}
    }
}


----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * A loop that might potentially throw a <tt>NullPointerException</tt>
 * because of the instance field access <tt>exc.f</tt>. If that happened,
 * the loop would diverge since the exception handler does not include any
 * progress statement. However, Julia can prove that <tt>exc</tt> is not
 * <tt>null</tt> at the point where <tt>exc.f</tt> is accessed, so that
 * no exception can be thrown there. Hence the loop is proved to terminate.
 *
 * All calls terminate.
 *
 * Julia + BinTerm prove that all calls terminate.
 *
 * Note: without a preliminary nullness analysis, termination could not
 *       be proved.
 *
 * @author <A HREF="mailto:fausto.spoto@univr.it">Fausto Spoto</A>
 */

public class Exc {
    private int f;

    public static void main(String[] args) {
	Exc exc = new Exc();
	int i = 0;

	while (i < 20) {
	    try {
		if (i > 10) exc.f = 5;
		i += 2;
	    }
	    catch (NullPointerException e) {
	    }
	}
    }
}


----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Exc.main([Ljava/lang/String;)V: Graph of 106 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Proven termination by absence of SCCs
----------------------------------------

(6)
TRUE
