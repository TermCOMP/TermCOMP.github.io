YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/4Aoci.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 93 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 52 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 21 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 24 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB6 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x > 0 && y > 0) {
            x--;
            y--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB6 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x > 0 && y > 0) {
            x--;
            y--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaB6.main([Ljava/lang/String;)V: Graph of 180 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaB6.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 10 IRulesP rules:
f596_0_main_LE(EOS(STATIC_596), i123, i109, i123) -> f610_0_main_LE(EOS(STATIC_610), i123, i109, i123) :|: TRUE
f610_0_main_LE(EOS(STATIC_610), i123, i109, i123) -> f622_0_main_Load(EOS(STATIC_622), i123, i109) :|: i123 > 0
f622_0_main_Load(EOS(STATIC_622), i123, i109) -> f633_0_main_LE(EOS(STATIC_633), i123, i109, i109) :|: TRUE
f633_0_main_LE(EOS(STATIC_633), i123, i130, i130) -> f641_0_main_LE(EOS(STATIC_641), i123, i130, i130) :|: TRUE
f641_0_main_LE(EOS(STATIC_641), i123, i130, i130) -> f653_0_main_Inc(EOS(STATIC_653), i123, i130) :|: i130 > 0
f653_0_main_Inc(EOS(STATIC_653), i123, i130) -> f658_0_main_Inc(EOS(STATIC_658), i123 + -1, i130) :|: TRUE
f658_0_main_Inc(EOS(STATIC_658), i134, i130) -> f663_0_main_JMP(EOS(STATIC_663), i134, i130 + -1) :|: TRUE
f663_0_main_JMP(EOS(STATIC_663), i134, i136) -> f694_0_main_Load(EOS(STATIC_694), i134, i136) :|: TRUE
f694_0_main_Load(EOS(STATIC_694), i134, i136) -> f579_0_main_Load(EOS(STATIC_579), i134, i136) :|: TRUE
f579_0_main_Load(EOS(STATIC_579), i108, i109) -> f596_0_main_LE(EOS(STATIC_596), i108, i109, i108) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f596_0_main_LE(EOS(STATIC_596), i123:0, i109:0, i123:0) -> f596_0_main_LE(EOS(STATIC_596), i123:0 - 1, i109:0 - 1, i123:0 - 1) :|: i109:0 > 0 && i123:0 > 0
Filtered constant ground arguments:
   f596_0_main_LE(x1, x2, x3, x4) -> f596_0_main_LE(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f596_0_main_LE(x1, x2, x3) -> f596_0_main_LE(x2, x3)
Finished conversion. Obtained 1 rules.P rules:
f596_0_main_LE(i109:0, i123:0) -> f596_0_main_LE(i109:0 - 1, i123:0 - 1) :|: i109:0 > 0 && i123:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f596_0_main_LE(i109:0, i123:0) -> f596_0_main_LE(i109:0 - 1, i123:0 - 1) :|: i109:0 > 0 && i123:0 > 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f596_0_main_LE(i109:0, i123:0) -> f596_0_main_LE(arith, arith1) :|: i109:0 > 0 && i123:0 > 0 && arith = i109:0 - 1 && arith1 = i123:0 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f596_0_main_LE(i109:0, i123:0) -> f596_0_main_LE(arith, arith1) :|: i109:0 > 0 && i123:0 > 0 && arith = i109:0 - 1 && arith1 = i123:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f596_0_main_LE(i109:0, i123:0) -> f596_0_main_LE(arith, arith1) :|: i109:0 > 0 && i123:0 > 0 && arith = i109:0 - 1 && arith1 = i123:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f596_0_main_LE(i109:0:0, i123:0:0) -> f596_0_main_LE(i109:0:0 - 1, i123:0:0 - 1) :|: i109:0:0 > 0 && i123:0:0 > 0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f596_0_main_LE(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f596_0_main_LE(i109:0:0, i123:0:0) -> f596_0_main_LE(c, c1) :|: c1 = i123:0:0 - 1 && c = i109:0:0 - 1 && (i109:0:0 > 0 && i123:0:0 > 0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f596_0_main_LE(x, x1)] = x1

The following rules are decreasing:
f596_0_main_LE(i109:0:0, i123:0:0) -> f596_0_main_LE(c, c1) :|: c1 = i123:0:0 - 1 && c = i109:0:0 - 1 && (i109:0:0 > 0 && i123:0:0 > 0)
The following rules are bounded:
f596_0_main_LE(i109:0:0, i123:0:0) -> f596_0_main_LE(c, c1) :|: c1 = i123:0:0 - 1 && c = i109:0:0 - 1 && (i109:0:0 > 0 && i123:0:0 > 0)

----------------------------------------

(18)
YES
