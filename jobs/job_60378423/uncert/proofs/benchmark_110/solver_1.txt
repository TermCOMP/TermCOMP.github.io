NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/yIBWu.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 95 ms]
(4) JBCTerminationGraph
(5) JBCNonTerm [COMPLETE, 61 ms]
(6) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.alternDiv;

public class AlternDiv {

	public static void loop(int i) {
		while (i != 0) {
			if (i < 0) {
				i--;
				i = i*(-1);
			} else {
				i++;
				i = i*(-1);
			}
		}
	}
}


package simple.alternDiv;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		AlternDiv.loop(args.length);

	}

}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.alternDiv;

public class AlternDiv {

	public static void loop(int i) {
		while (i != 0) {
			if (i < 0) {
				i--;
				i = i*(-1);
			} else {
				i++;
				i = i*(-1);
			}
		}
	}
}


package simple.alternDiv;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		AlternDiv.loop(args.length);

	}

}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
simple.alternDiv.Main.main([Ljava/lang/String;)V: Graph of 31 nodes with 1 SCC.





----------------------------------------

(5) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<simple.alternDiv.Main.main||0: load ADDR args||args: a16|| ->
	a16([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
1:<simple.alternDiv.Main.main||1: arraylength|| - ||a16>
	a16([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
2:<simple.alternDiv.Main.main||2: simple.alternDiv.AlternDiv.loop(I)V|| - ||1>
YES:  (JL1)
3:<simple.alternDiv.AlternDiv.loop||0: load INT i||i: 1|| ->
<simple.alternDiv.Main.main||2: simple.alternDiv.AlternDiv.loop|| - || ->
YES:  (JL1)
Start state of loop: 

<simple.alternDiv.AlternDiv.loop||0: load INT i||i: i426|| ->
[a6(lv_0_0)]
<simple.alternDiv.Main.main||2: simple.alternDiv.AlternDiv.loop|| - || ->
	i426: #
	i22: [0,+inf)(l1)
	a6([java.lang.String...]): length i22 -->{java.lang.Object...}
YES:  (JL1)


In the loop head node, references [i426] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

(0 <= initial_i22 and ((((path1_i426 = path1_i456 and path1_i456 = path1_i520 and path1_i522 = (path1_i520 + -1) and path1_i524 = (path1_i522 * -1) and path1_i524 = res_i426 and path1_i426 = initial_i426) and (path1_i456 != 0 and path1_i520 < 0)) or ((path2_i426 = path2_i456 and path2_i456 = path2_i521 and path2_i523 = (path2_i521 + 1) and path2_i525 = (path2_i523 * -1) and path2_i525 = res_i426 and path2_i426 = initial_i426) and (path2_i456 != 0 and path2_i521 >= 0)) or ((path1_i426 = path1_i456 and path1_i456 = path1_i520 and path1_i522 = (path1_i520 + -1) and path1_i524 = (path1_i522 * -1) and path1_i524 = res_i426 and path1_i426 = initial_i426) and (path1_i520 < 0 and path1_i456 < 0)) or ((path1_i426 = path1_i456 and path1_i456 = path1_i520 and path1_i522 = (path1_i520 + -1) and path1_i524 = (path1_i522 * -1) and path1_i524 = res_i426 and path1_i426 = initial_i426) and (path1_i520 < 0 and path1_i456 > 0)) or ((path2_i426 = path2_i456 and path2_i456 = path2_i521 and path2_i523 = (path2_i521 + 1) and path2_i525 = (path2_i523 * -1) and path2_i525 = res_i426 and path2_i426 = initial_i426) and (path2_i521 >= 0 and path2_i456 < 0)) or ((path2_i426 = path2_i456 and path2_i456 = path2_i521 and path2_i523 = (path2_i521 + 1) and path2_i525 = (path2_i523 * -1) and path2_i525 = res_i426 and path2_i426 = initial_i426) and (path2_i521 >= 0 and path2_i456 > 0))) and (((res1_i426 = res1_i456 and res1_i456 = res1_i520 and res1_i522 = (res1_i520 + -1) and res1_i524 = (res1_i522 * -1) and res_i426 = res1_i426) and !(res1_i456 != 0 and res1_i520 < 0)) and ((res2_i426 = res2_i456 and res2_i456 = res2_i521 and res2_i523 = (res2_i521 + 1) and res2_i525 = (res2_i523 * -1) and res_i426 = res2_i426) and !(res2_i456 != 0 and res2_i521 >= 0)) and ((res1_i426 = res1_i456 and res1_i456 = res1_i520 and res1_i522 = (res1_i520 + -1) and res1_i524 = (res1_i522 * -1) and res_i426 = res1_i426) and !(res1_i520 < 0 and res1_i456 < 0)) and ((res1_i426 = res1_i456 and res1_i456 = res1_i520 and res1_i522 = (res1_i520 + -1) and res1_i524 = (res1_i522 * -1) and res_i426 = res1_i426) and !(res1_i520 < 0 and res1_i456 > 0)) and ((res2_i426 = res2_i456 and res2_i456 = res2_i521 and res2_i523 = (res2_i521 + 1) and res2_i525 = (res2_i523 * -1) and res_i426 = res2_i426) and !(res2_i521 >= 0 and res2_i456 < 0)) and ((res2_i426 = res2_i456 and res2_i456 = res2_i521 and res2_i523 = (res2_i521 + 1) and res2_i525 = (res2_i523 * -1) and res_i426 = res2_i426) and !(res2_i521 >= 0 and res2_i456 > 0)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(6)
NO
