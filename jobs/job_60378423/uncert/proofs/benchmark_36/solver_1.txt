YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ge4W0.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 251 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 45 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
(12) AND
    (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) TempFilterProof [SOUND, 14 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (19) YES
    (20) IRSwT
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IRSwT
        (23) TempFilterProof [SOUND, 5 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaA10 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x != y) {
            if (x > y) {
                y++;
            } else {
                x++;
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaA10 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x != y) {
            if (x > y) {
                y++;
            } else {
                x++;
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaA10.main([Ljava/lang/String;)V: Graph of 183 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaA10.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 16 IRulesP rules:
f375_0_main_Load(EOS(STATIC_375), i48, i49, i48) -> f379_0_main_EQ(EOS(STATIC_379), i48, i49, i48, i49) :|: TRUE
f379_0_main_EQ(EOS(STATIC_379), i48, i49, i48, i49) -> f385_0_main_EQ(EOS(STATIC_385), i48, i49, i48, i49) :|: !(i48 = i49)
f385_0_main_EQ(EOS(STATIC_385), i48, i49, i48, i49) -> f388_0_main_Load(EOS(STATIC_388), i48, i49) :|: !(i48 = i49)
f388_0_main_Load(EOS(STATIC_388), i48, i49) -> f391_0_main_Load(EOS(STATIC_391), i48, i49, i48) :|: TRUE
f391_0_main_Load(EOS(STATIC_391), i48, i49, i48) -> f395_0_main_LE(EOS(STATIC_395), i48, i49, i48, i49) :|: TRUE
f395_0_main_LE(EOS(STATIC_395), i48, i49, i48, i49) -> f404_0_main_LE(EOS(STATIC_404), i48, i49, i48, i49) :|: i48 <= i49
f395_0_main_LE(EOS(STATIC_395), i48, i49, i48, i49) -> f405_0_main_LE(EOS(STATIC_405), i48, i49, i48, i49) :|: i48 > i49
f404_0_main_LE(EOS(STATIC_404), i48, i49, i48, i49) -> f406_0_main_Inc(EOS(STATIC_406), i48, i49) :|: i48 < i49
f406_0_main_Inc(EOS(STATIC_406), i48, i49) -> f408_0_main_JMP(EOS(STATIC_408), i48 + 1, i49) :|: TRUE
f408_0_main_JMP(EOS(STATIC_408), i54, i49) -> f417_0_main_Load(EOS(STATIC_417), i54, i49) :|: TRUE
f417_0_main_Load(EOS(STATIC_417), i54, i49) -> f362_0_main_Load(EOS(STATIC_362), i54, i49) :|: TRUE
f362_0_main_Load(EOS(STATIC_362), i48, i49) -> f375_0_main_Load(EOS(STATIC_375), i48, i49, i48) :|: TRUE
f405_0_main_LE(EOS(STATIC_405), i48, i49, i48, i49) -> f407_0_main_Inc(EOS(STATIC_407), i48, i49) :|: i48 > i49
f407_0_main_Inc(EOS(STATIC_407), i48, i49) -> f409_0_main_JMP(EOS(STATIC_409), i48, i49 + 1) :|: TRUE
f409_0_main_JMP(EOS(STATIC_409), i48, i55) -> f425_0_main_Load(EOS(STATIC_425), i48, i55) :|: TRUE
f425_0_main_Load(EOS(STATIC_425), i48, i55) -> f362_0_main_Load(EOS(STATIC_362), i48, i55) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f375_0_main_Load(EOS(STATIC_375), i48:0, i49:0, i48:0) -> f375_0_main_Load(EOS(STATIC_375), i48:0, i49:0 + 1, i48:0) :|: i49:0 < i48:0
f375_0_main_Load(EOS(STATIC_375), i48:0, i49:0, i48:0) -> f375_0_main_Load(EOS(STATIC_375), i48:0 + 1, i49:0, i48:0 + 1) :|: i49:0 > i48:0
Filtered constant ground arguments:
   f375_0_main_Load(x1, x2, x3, x4) -> f375_0_main_Load(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f375_0_main_Load(x1, x2, x3) -> f375_0_main_Load(x2, x3)
Finished conversion. Obtained 2 rules.P rules:
f375_0_main_Load(i49:0, i48:0) -> f375_0_main_Load(i49:0 + 1, i48:0) :|: i49:0 < i48:0
f375_0_main_Load(i49:0, i48:0) -> f375_0_main_Load(i49:0, i48:0 + 1) :|: i49:0 > i48:0

----------------------------------------

(8)
Obligation:
Rules:
f375_0_main_Load(i49:0, i48:0) -> f375_0_main_Load(i49:0 + 1, i48:0) :|: i49:0 < i48:0
f375_0_main_Load(x, x1) -> f375_0_main_Load(x, x1 + 1) :|: x > x1

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f375_0_main_Load(i49:0, i48:0) -> f375_0_main_Load(arith, i48:0) :|: i49:0 < i48:0 && arith = i49:0 + 1
f375_0_main_Load(x2, x3) -> f375_0_main_Load(x2, x4) :|: x2 > x3 && x4 = x3 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f375_0_main_Load(i49:0, i48:0) -> f375_0_main_Load(arith, i48:0) :|: i49:0 < i48:0 && arith = i49:0 + 1
(2) f375_0_main_Load(x2, x3) -> f375_0_main_Load(x2, x4) :|: x2 > x3 && x4 = x3 + 1

Arcs:
(1) -> (1)
(2) -> (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f375_0_main_Load(x2, x3) -> f375_0_main_Load(x2, x4) :|: x2 > x3 && x4 = x3 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f375_0_main_Load(x2:0, x3:0) -> f375_0_main_Load(x2:0, x3:0 + 1) :|: x3:0 < x2:0

----------------------------------------

(16) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f375_0_main_Load(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(17)
Obligation:
Rules:
f375_0_main_Load(x2:0, x3:0) -> f375_0_main_Load(x2:0, c) :|: c = x3:0 + 1 && x3:0 < x2:0

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f375_0_main_Load(x, x1)] = x - x1

The following rules are decreasing:
f375_0_main_Load(x2:0, x3:0) -> f375_0_main_Load(x2:0, c) :|: c = x3:0 + 1 && x3:0 < x2:0
The following rules are bounded:
f375_0_main_Load(x2:0, x3:0) -> f375_0_main_Load(x2:0, c) :|: c = x3:0 + 1 && x3:0 < x2:0

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:

Termination digraph:
Nodes:
(1) f375_0_main_Load(i49:0, i48:0) -> f375_0_main_Load(arith, i48:0) :|: i49:0 < i48:0 && arith = i49:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f375_0_main_Load(i49:0:0, i48:0:0) -> f375_0_main_Load(i49:0:0 + 1, i48:0:0) :|: i49:0:0 < i48:0:0

----------------------------------------

(23) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f375_0_main_Load(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(24)
Obligation:
Rules:
f375_0_main_Load(i49:0:0, i48:0:0) -> f375_0_main_Load(c, i48:0:0) :|: c = i49:0:0 + 1 && i49:0:0 < i48:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f375_0_main_Load(x, x1)] = -x + x1

The following rules are decreasing:
f375_0_main_Load(i49:0:0, i48:0:0) -> f375_0_main_Load(c, i48:0:0) :|: c = i49:0:0 + 1 && i49:0:0 < i48:0:0
The following rules are bounded:
f375_0_main_Load(i49:0:0, i48:0:0) -> f375_0_main_Load(c, i48:0:0) :|: c = i49:0:0 + 1 && i49:0:0 < i48:0:0

----------------------------------------

(26)
YES
