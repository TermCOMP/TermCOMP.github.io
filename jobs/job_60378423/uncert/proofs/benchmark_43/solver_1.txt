YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/2uEJ5.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 143 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 31 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 15 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 14 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaA9 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();
        int z = Random.random();

        if (y > 0) {
            while (x >= z) {
                z += y;
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaA9 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();
        int z = Random.random();

        if (y > 0) {
            while (x >= z) {
                z += y;
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaA9.main([Ljava/lang/String;)V: Graph of 250 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaA9.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 10 IRulesP rules:
f572_0_main_Load(EOS(STATIC_572), i19, i74, i82, i19) -> f574_0_main_LT(EOS(STATIC_574), i19, i74, i82, i19, i82) :|: TRUE
f574_0_main_LT(EOS(STATIC_574), i19, i74, i82, i19, i82) -> f584_0_main_LT(EOS(STATIC_584), i19, i74, i82, i19, i82) :|: i19 >= i82
f584_0_main_LT(EOS(STATIC_584), i19, i74, i82, i19, i82) -> f594_0_main_Load(EOS(STATIC_594), i19, i74, i82) :|: i19 >= i82
f594_0_main_Load(EOS(STATIC_594), i19, i74, i82) -> f603_0_main_Load(EOS(STATIC_603), i19, i74, i82) :|: TRUE
f603_0_main_Load(EOS(STATIC_603), i19, i74, i82) -> f605_0_main_IntArithmetic(EOS(STATIC_605), i19, i74, i82, i74) :|: TRUE
f605_0_main_IntArithmetic(EOS(STATIC_605), i19, i74, i82, i74) -> f609_0_main_Store(EOS(STATIC_609), i19, i74, i82 + i74) :|: i82 >= 0 && i74 > 0
f609_0_main_Store(EOS(STATIC_609), i19, i74, i87) -> f610_0_main_JMP(EOS(STATIC_610), i19, i74, i87) :|: TRUE
f610_0_main_JMP(EOS(STATIC_610), i19, i74, i87) -> f647_0_main_Load(EOS(STATIC_647), i19, i74, i87) :|: TRUE
f647_0_main_Load(EOS(STATIC_647), i19, i74, i87) -> f565_0_main_Load(EOS(STATIC_565), i19, i74, i87) :|: TRUE
f565_0_main_Load(EOS(STATIC_565), i19, i74, i82) -> f572_0_main_Load(EOS(STATIC_572), i19, i74, i82, i19) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f572_0_main_Load(EOS(STATIC_572), i19:0, i74:0, i82:0, i19:0) -> f572_0_main_Load(EOS(STATIC_572), i19:0, i74:0, i82:0 + i74:0, i19:0) :|: i82:0 <= i19:0 && i82:0 > -1 && i74:0 > 0
Filtered constant ground arguments:
   f572_0_main_Load(x1, x2, x3, x4, x5) -> f572_0_main_Load(x2, x3, x4, x5)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f572_0_main_Load(x1, x2, x3, x4) -> f572_0_main_Load(x2, x3, x4)
Finished conversion. Obtained 1 rules.P rules:
f572_0_main_Load(i74:0, i82:0, i19:0) -> f572_0_main_Load(i74:0, i82:0 + i74:0, i19:0) :|: i82:0 > -1 && i74:0 > 0 && i82:0 <= i19:0

----------------------------------------

(8)
Obligation:
Rules:
f572_0_main_Load(i74:0, i82:0, i19:0) -> f572_0_main_Load(i74:0, i82:0 + i74:0, i19:0) :|: i82:0 > -1 && i74:0 > 0 && i82:0 <= i19:0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f572_0_main_Load(i74:0, i82:0, i19:0) -> f572_0_main_Load(i74:0, arith, i19:0) :|: i82:0 > -1 && i74:0 > 0 && i82:0 <= i19:0 && arith = i82:0 + i74:0

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f572_0_main_Load(i74:0, i82:0, i19:0) -> f572_0_main_Load(i74:0, arith, i19:0) :|: i82:0 > -1 && i74:0 > 0 && i82:0 <= i19:0 && arith = i82:0 + i74:0

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f572_0_main_Load(i74:0, i82:0, i19:0) -> f572_0_main_Load(i74:0, arith, i19:0) :|: i82:0 > -1 && i74:0 > 0 && i82:0 <= i19:0 && arith = i82:0 + i74:0

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f572_0_main_Load(i74:0:0, i82:0:0, i19:0:0) -> f572_0_main_Load(i74:0:0, i82:0:0 + i74:0:0, i19:0:0) :|: i82:0:0 > -1 && i74:0:0 > 0 && i82:0:0 <= i19:0:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f572_0_main_Load(INTEGER, INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f572_0_main_Load(i74:0:0, i82:0:0, i19:0:0) -> f572_0_main_Load(i74:0:0, c, i19:0:0) :|: c = i82:0:0 + i74:0:0 && (i82:0:0 > -1 && i74:0:0 > 0 && i82:0:0 <= i19:0:0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f572_0_main_Load(x, x1, x2)] = -x1 + x2

The following rules are decreasing:
f572_0_main_Load(i74:0:0, i82:0:0, i19:0:0) -> f572_0_main_Load(i74:0:0, c, i19:0:0) :|: c = i82:0:0 + i74:0:0 && (i82:0:0 > -1 && i74:0:0 > 0 && i82:0:0 <= i19:0:0)
The following rules are bounded:
f572_0_main_Load(i74:0:0, i82:0:0, i19:0:0) -> f572_0_main_Load(i74:0:0, c, i19:0:0) :|: c = i82:0:0 + i74:0:0 && (i82:0:0 > -1 && i74:0:0 > 0 && i82:0:0 <= i19:0:0)

----------------------------------------

(18)
YES
