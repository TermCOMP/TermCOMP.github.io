YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/jNwHR.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 184 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 66 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 49 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 18 ms]
(16) IntTRS
(17) RankingReductionPairProof [EQUIVALENT, 0 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class GCD2 {
  public static int mod(int a, int b) {
    if (a == b) {
      return 0;
    }
    while(a>b) {
      a -= b;
    }
    return a;
  }

  public static int gcd(int a, int b) {
    int tmp;
    while(b != 0 && a >= 0 && b >= 0) {
      tmp = b;
      b = mod(a, b);
      a = tmp;
    }
    return a;
  }

  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    gcd(x, y);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class GCD2 {
  public static int mod(int a, int b) {
    if (a == b) {
      return 0;
    }
    while(a>b) {
      a -= b;
    }
    return a;
  }

  public static int gcd(int a, int b) {
    int tmp;
    while(b != 0 && a >= 0 && b >= 0) {
      tmp = b;
      b = mod(a, b);
      a = tmp;
    }
    return a;
  }

  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    gcd(x, y);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
GCD2.main([Ljava/lang/String;)V: Graph of 214 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: GCD2.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 42 IRulesP rules:
f505_0_gcd_EQ(EOS(STATIC_505), i53, i60, i60) -> f506_0_gcd_EQ(EOS(STATIC_506), i53, i60, i60) :|: TRUE
f506_0_gcd_EQ(EOS(STATIC_506), i53, i60, i60) -> f508_0_gcd_Load(EOS(STATIC_508), i53, i60) :|: i60 > 0
f508_0_gcd_Load(EOS(STATIC_508), i53, i60) -> f510_0_gcd_LT(EOS(STATIC_510), i53, i60, i53) :|: TRUE
f510_0_gcd_LT(EOS(STATIC_510), i53, i60, i53) -> f512_0_gcd_Load(EOS(STATIC_512), i53, i60) :|: i53 >= 0
f512_0_gcd_Load(EOS(STATIC_512), i53, i60) -> f514_0_gcd_LT(EOS(STATIC_514), i53, i60, i60) :|: TRUE
f514_0_gcd_LT(EOS(STATIC_514), i53, i60, i60) -> f518_0_gcd_Load(EOS(STATIC_518), i53, i60) :|: i60 >= 0
f518_0_gcd_Load(EOS(STATIC_518), i53, i60) -> f520_0_gcd_Store(EOS(STATIC_520), i53, i60, i60) :|: TRUE
f520_0_gcd_Store(EOS(STATIC_520), i53, i60, i60) -> f521_0_gcd_Load(EOS(STATIC_521), i53, i60, i60) :|: TRUE
f521_0_gcd_Load(EOS(STATIC_521), i53, i60, i60) -> f522_0_gcd_Load(EOS(STATIC_522), i60, i60, i53) :|: TRUE
f522_0_gcd_Load(EOS(STATIC_522), i60, i60, i53) -> f523_0_gcd_InvokeMethod(EOS(STATIC_523), i60, i53, i60) :|: TRUE
f523_0_gcd_InvokeMethod(EOS(STATIC_523), i60, i53, i60) -> f524_0_mod_Load(EOS(STATIC_524), i60, i53, i60) :|: TRUE
f524_0_mod_Load(EOS(STATIC_524), i60, i53, i60) -> f526_0_mod_Load(EOS(STATIC_526), i60, i53, i60, i53) :|: TRUE
f526_0_mod_Load(EOS(STATIC_526), i60, i53, i60, i53) -> f528_0_mod_NE(EOS(STATIC_528), i60, i53, i60, i53, i60) :|: TRUE
f528_0_mod_NE(EOS(STATIC_528), i60, i53, i60, i53, i60) -> f531_0_mod_NE(EOS(STATIC_531), i60, i53, i60, i53, i60) :|: !(i53 = i60)
f528_0_mod_NE(EOS(STATIC_528), i60, i60, i60, i60, i60) -> f532_0_mod_NE(EOS(STATIC_532), i60, i60, i60, i60, i60) :|: i53 = i60
f531_0_mod_NE(EOS(STATIC_531), i60, i53, i60, i53, i60) -> f541_0_mod_Load(EOS(STATIC_541), i60, i53, i60) :|: !(i53 = i60)
f541_0_mod_Load(EOS(STATIC_541), i60, i53, i60) -> f600_0_mod_Load(EOS(STATIC_600), i60, i53, i60) :|: TRUE
f600_0_mod_Load(EOS(STATIC_600), i60, i66, i60) -> f612_0_mod_Load(EOS(STATIC_612), i60, i66, i60, i66) :|: TRUE
f612_0_mod_Load(EOS(STATIC_612), i60, i66, i60, i66) -> f614_0_mod_LE(EOS(STATIC_614), i60, i66, i60, i66, i60) :|: TRUE
f614_0_mod_LE(EOS(STATIC_614), i60, i66, i60, i66, i60) -> f625_0_mod_LE(EOS(STATIC_625), i60, i66, i60, i66, i60) :|: i66 <= i60
f614_0_mod_LE(EOS(STATIC_614), i60, i66, i60, i66, i60) -> f626_0_mod_LE(EOS(STATIC_626), i60, i66, i60, i66, i60) :|: i66 > i60
f625_0_mod_LE(EOS(STATIC_625), i60, i66, i60, i66, i60) -> f633_0_mod_Load(EOS(STATIC_633), i60, i66) :|: i66 <= i60
f633_0_mod_Load(EOS(STATIC_633), i60, i66) -> f641_0_mod_Return(EOS(STATIC_641), i60, i66) :|: TRUE
f641_0_mod_Return(EOS(STATIC_641), i60, i66) -> f658_0_gcd_Store(EOS(STATIC_658), i60, i66) :|: TRUE
f658_0_gcd_Store(EOS(STATIC_658), i60, i66) -> f688_0_gcd_Load(EOS(STATIC_688), i66, i60) :|: TRUE
f688_0_gcd_Load(EOS(STATIC_688), i66, i60) -> f690_0_gcd_Store(EOS(STATIC_690), i66, i60) :|: TRUE
f690_0_gcd_Store(EOS(STATIC_690), i66, i60) -> f692_0_gcd_JMP(EOS(STATIC_692), i60, i66) :|: TRUE
f692_0_gcd_JMP(EOS(STATIC_692), i60, i66) -> f694_0_gcd_Load(EOS(STATIC_694), i60, i66) :|: TRUE
f694_0_gcd_Load(EOS(STATIC_694), i60, i66) -> f489_0_gcd_Load(EOS(STATIC_489), i60, i66) :|: TRUE
f489_0_gcd_Load(EOS(STATIC_489), i53, i54) -> f505_0_gcd_EQ(EOS(STATIC_505), i53, i54, i54) :|: TRUE
f626_0_mod_LE(EOS(STATIC_626), i60, i66, i60, i66, i60) -> f635_0_mod_Load(EOS(STATIC_635), i60, i66, i60) :|: i66 > i60
f635_0_mod_Load(EOS(STATIC_635), i60, i66, i60) -> f644_0_mod_Load(EOS(STATIC_644), i60, i60, i66) :|: TRUE
f644_0_mod_Load(EOS(STATIC_644), i60, i60, i66) -> f687_0_mod_IntArithmetic(EOS(STATIC_687), i60, i60, i66, i60) :|: TRUE
f687_0_mod_IntArithmetic(EOS(STATIC_687), i60, i60, i66, i60) -> f689_0_mod_Store(EOS(STATIC_689), i60, i60, i66 - i60) :|: i66 > 0 && i60 > 0
f689_0_mod_Store(EOS(STATIC_689), i60, i60, i75) -> f691_0_mod_JMP(EOS(STATIC_691), i60, i75, i60) :|: TRUE
f691_0_mod_JMP(EOS(STATIC_691), i60, i75, i60) -> f693_0_mod_Load(EOS(STATIC_693), i60, i75, i60) :|: TRUE
f693_0_mod_Load(EOS(STATIC_693), i60, i75, i60) -> f600_0_mod_Load(EOS(STATIC_600), i60, i75, i60) :|: TRUE
f532_0_mod_NE(EOS(STATIC_532), i60, i60, i60, i60, i60) -> f544_0_mod_ConstantStackPush(EOS(STATIC_544), i60) :|: TRUE
f544_0_mod_ConstantStackPush(EOS(STATIC_544), i60) -> f546_0_mod_Return(EOS(STATIC_546), i60, 0) :|: TRUE
f546_0_mod_Return(EOS(STATIC_546), i60, matching1) -> f549_0_gcd_Store(EOS(STATIC_549), i60, 0) :|: TRUE && matching1 = 0
f549_0_gcd_Store(EOS(STATIC_549), i60, matching1) -> f568_0_gcd_Store(EOS(STATIC_568), i60, 0) :|: TRUE && matching1 = 0
f568_0_gcd_Store(EOS(STATIC_568), i60, i53) -> f658_0_gcd_Store(EOS(STATIC_658), i60, i53) :|: TRUE
Combined rules. Obtained 5 IRulesP rules:
f614_0_mod_LE(EOS(STATIC_614), i60:0, i66:0, i60:0, i66:0, i60:0) -> f505_0_gcd_EQ(EOS(STATIC_505), i60:0, i66:0, i66:0) :|: i66:0 <= i60:0
f505_0_gcd_EQ(EOS(STATIC_505), i53:0, i60:0, i60:0) -> f614_0_mod_LE(EOS(STATIC_614), i60:0, i53:0, i60:0, i53:0, i60:0) :|: i60:0 > 0 && i53:0 > -1 && i60:0 > i53:0
f505_0_gcd_EQ(EOS(STATIC_505), i53:0, i60:0, i60:0) -> f614_0_mod_LE(EOS(STATIC_614), i60:0, i53:0, i60:0, i53:0, i60:0) :|: i60:0 > 0 && i53:0 > -1 && i60:0 < i53:0
f614_0_mod_LE(EOS(STATIC_614), i60:0, i66:0, i60:0, i66:0, i60:0) -> f614_0_mod_LE(EOS(STATIC_614), i60:0, i66:0 - i60:0, i60:0, i66:0 - i60:0, i60:0) :|: i66:0 > i60:0 && i66:0 > 0 && i60:0 > 0
f505_0_gcd_EQ(EOS(STATIC_505), i53:0, i53:0, i53:0) -> f505_0_gcd_EQ(EOS(STATIC_505), i53:0, 0, 0) :|: i53:0 > 0
Filtered constant ground arguments:
   f614_0_mod_LE(x1, x2, x3, x4, x5, x6) -> f614_0_mod_LE(x2, x3, x4, x5, x6)
   f505_0_gcd_EQ(x1, x2, x3, x4) -> f505_0_gcd_EQ(x2, x3, x4)
Filtered duplicate arguments:
   f614_0_mod_LE(x1, x2, x3, x4, x5) -> f614_0_mod_LE(x4, x5)
   f505_0_gcd_EQ(x1, x2, x3) -> f505_0_gcd_EQ(x1, x3)
Finished conversion. Obtained 5 rules.P rules:
f614_0_mod_LE(i66:0, i60:0) -> f505_0_gcd_EQ(i60:0, i66:0) :|: i66:0 <= i60:0
f505_0_gcd_EQ(i53:0, i60:0) -> f614_0_mod_LE(i53:0, i60:0) :|: i53:0 > -1 && i60:0 > i53:0 && i60:0 > 0
f505_0_gcd_EQ(i53:0, i60:0) -> f614_0_mod_LE(i53:0, i60:0) :|: i53:0 > -1 && i60:0 < i53:0 && i60:0 > 0
f614_0_mod_LE(i66:0, i60:0) -> f614_0_mod_LE(i66:0 - i60:0, i60:0) :|: i66:0 > 0 && i60:0 > 0 && i66:0 > i60:0
f505_0_gcd_EQ(i53:0, i53:0) -> f505_0_gcd_EQ(i53:0, 0) :|: i53:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f614_0_mod_LE(i66:0, i60:0) -> f505_0_gcd_EQ(i60:0, i66:0) :|: i66:0 <= i60:0
f505_0_gcd_EQ(x, x1) -> f614_0_mod_LE(x, x1) :|: x > -1 && x1 > x && x1 > 0
f505_0_gcd_EQ(x2, x3) -> f614_0_mod_LE(x2, x3) :|: x2 > -1 && x3 < x2 && x3 > 0
f614_0_mod_LE(x4, x5) -> f614_0_mod_LE(x4 - x5, x5) :|: x4 > 0 && x5 > 0 && x4 > x5
f505_0_gcd_EQ(i53:0, i53:0) -> f505_0_gcd_EQ(i53:0, 0) :|: i53:0 > 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f614_0_mod_LE(i66:0, i60:0) -> f505_0_gcd_EQ(i60:0, i66:0) :|: i66:0 <= i60:0
f505_0_gcd_EQ(x, x1) -> f614_0_mod_LE(x, x1) :|: x > -1 && x1 > x && x1 > 0
f505_0_gcd_EQ(x2, x3) -> f614_0_mod_LE(x2, x3) :|: x2 > -1 && x3 < x2 && x3 > 0
f614_0_mod_LE(x4, x5) -> f614_0_mod_LE(arith, x5) :|: x4 > 0 && x5 > 0 && x4 > x5 && arith = x4 - x5
f505_0_gcd_EQ(i53:0, i53:0) -> f505_0_gcd_EQ(i53:0, 0) :|: i53:0 > 0

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f614_0_mod_LE(i66:0, i60:0) -> f505_0_gcd_EQ(i60:0, i66:0) :|: i66:0 <= i60:0
(2) f505_0_gcd_EQ(x, x1) -> f614_0_mod_LE(x, x1) :|: x > -1 && x1 > x && x1 > 0
(3) f505_0_gcd_EQ(x2, x3) -> f614_0_mod_LE(x2, x3) :|: x2 > -1 && x3 < x2 && x3 > 0
(4) f614_0_mod_LE(x4, x5) -> f614_0_mod_LE(arith, x5) :|: x4 > 0 && x5 > 0 && x4 > x5 && arith = x4 - x5
(5) f505_0_gcd_EQ(i53:0, i53:0) -> f505_0_gcd_EQ(i53:0, 0) :|: i53:0 > 0

Arcs:
(1) -> (3), (5)
(2) -> (1)
(3) -> (4)
(4) -> (1), (4)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f614_0_mod_LE(i66:0, i60:0) -> f505_0_gcd_EQ(i60:0, i66:0) :|: i66:0 <= i60:0
(2) f614_0_mod_LE(x4, x5) -> f614_0_mod_LE(arith, x5) :|: x4 > 0 && x5 > 0 && x4 > x5 && arith = x4 - x5
(3) f505_0_gcd_EQ(x2, x3) -> f614_0_mod_LE(x2, x3) :|: x2 > -1 && x3 < x2 && x3 > 0

Arcs:
(1) -> (3)
(2) -> (1), (2)
(3) -> (2)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f614_0_mod_LE(i66:0:0, i60:0:0) -> f614_0_mod_LE(i60:0:0, i66:0:0) :|: i60:0:0 > -1 && i66:0:0 < i60:0:0 && i66:0:0 > 0
f614_0_mod_LE(x4:0, x5:0) -> f614_0_mod_LE(x4:0 - x5:0, x5:0) :|: x4:0 > 0 && x5:0 > 0 && x5:0 < x4:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f614_0_mod_LE(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f614_0_mod_LE(i66:0:0, i60:0:0) -> f614_0_mod_LE(i60:0:0, i66:0:0) :|: i60:0:0 > -1 && i66:0:0 < i60:0:0 && i66:0:0 > 0
f614_0_mod_LE(x4:0, x5:0) -> f614_0_mod_LE(c, x5:0) :|: c = x4:0 - x5:0 && (x4:0 > 0 && x5:0 > 0 && x5:0 < x4:0)

----------------------------------------

(17) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f614_0_mod_LE ] = 2*f614_0_mod_LE_2 + f614_0_mod_LE_1

The following rules are decreasing:
f614_0_mod_LE(i66:0:0, i60:0:0) -> f614_0_mod_LE(i60:0:0, i66:0:0) :|: i60:0:0 > -1 && i66:0:0 < i60:0:0 && i66:0:0 > 0
f614_0_mod_LE(x4:0, x5:0) -> f614_0_mod_LE(c, x5:0) :|: c = x4:0 - x5:0 && (x4:0 > 0 && x5:0 > 0 && x5:0 < x4:0)

The following rules are bounded:
f614_0_mod_LE(i66:0:0, i60:0:0) -> f614_0_mod_LE(i60:0:0, i66:0:0) :|: i60:0:0 > -1 && i66:0:0 < i60:0:0 && i66:0:0 > 0
f614_0_mod_LE(x4:0, x5:0) -> f614_0_mod_LE(c, x5:0) :|: c = x4:0 - x5:0 && (x4:0 > 0 && x5:0 > 0 && x5:0 < x4:0)


----------------------------------------

(18)
YES
