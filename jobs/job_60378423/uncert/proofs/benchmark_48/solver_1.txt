YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ecmeS.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 142 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 51 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 11 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 6 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB14 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x == y && x > 0) {
            while (y > 0) {
                x--;
                y--;                
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB14 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x == y && x > 0) {
            while (y > 0) {
                x--;
                y--;                
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaB14.main([Ljava/lang/String;)V: Graph of 190 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaB14.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 20 IRulesP rules:
f580_0_main_Load(EOS(STATIC_580), i116, i117, i116) -> f581_0_main_NE(EOS(STATIC_581), i116, i117, i116, i117) :|: TRUE
f581_0_main_NE(EOS(STATIC_581), i117, i117, i117, i117) -> f597_0_main_NE(EOS(STATIC_597), i117, i117, i117, i117) :|: i116 = i117
f597_0_main_NE(EOS(STATIC_597), i117, i117, i117, i117) -> f599_0_main_Load(EOS(STATIC_599), i117, i117) :|: TRUE
f599_0_main_Load(EOS(STATIC_599), i117, i117) -> f604_0_main_LE(EOS(STATIC_604), i117, i117, i117) :|: TRUE
f604_0_main_LE(EOS(STATIC_604), i124, i124, i124) -> f607_0_main_LE(EOS(STATIC_607), i124, i124, i124) :|: TRUE
f607_0_main_LE(EOS(STATIC_607), i124, i124, i124) -> f610_0_main_Load(EOS(STATIC_610), i124, i124) :|: i124 > 0
f610_0_main_Load(EOS(STATIC_610), i124, i124) -> f632_0_main_Load(EOS(STATIC_632), i124, i124) :|: TRUE
f632_0_main_Load(EOS(STATIC_632), i129, i130) -> f683_0_main_Load(EOS(STATIC_683), i129, i130) :|: TRUE
f683_0_main_Load(EOS(STATIC_683), i147, i148) -> f775_0_main_Load(EOS(STATIC_775), i147, i148) :|: TRUE
f775_0_main_Load(EOS(STATIC_775), i166, i167) -> f778_0_main_LE(EOS(STATIC_778), i166, i167, i167) :|: TRUE
f778_0_main_LE(EOS(STATIC_778), i166, matching1, matching2) -> f779_0_main_LE(EOS(STATIC_779), i166, 0, 0) :|: TRUE && matching1 = 0 && matching2 = 0
f778_0_main_LE(EOS(STATIC_778), i166, i181, i181) -> f780_0_main_LE(EOS(STATIC_780), i166, i181, i181) :|: TRUE
f779_0_main_LE(EOS(STATIC_779), i166, matching1, matching2) -> f799_0_main_Load(EOS(STATIC_799), i166, 0) :|: 0 <= 0 && matching1 = 0 && matching2 = 0
f799_0_main_Load(EOS(STATIC_799), i166, matching1) -> f579_0_main_Load(EOS(STATIC_579), i166, 0) :|: TRUE && matching1 = 0
f579_0_main_Load(EOS(STATIC_579), i116, i117) -> f580_0_main_Load(EOS(STATIC_580), i116, i117, i116) :|: TRUE
f780_0_main_LE(EOS(STATIC_780), i166, i181, i181) -> f800_0_main_Inc(EOS(STATIC_800), i166, i181) :|: i181 > 0
f800_0_main_Inc(EOS(STATIC_800), i166, i181) -> f807_0_main_Inc(EOS(STATIC_807), i166 + -1, i181) :|: TRUE
f807_0_main_Inc(EOS(STATIC_807), i188, i181) -> f814_0_main_JMP(EOS(STATIC_814), i188, i181 + -1) :|: TRUE
f814_0_main_JMP(EOS(STATIC_814), i188, i190) -> f853_0_main_Load(EOS(STATIC_853), i188, i190) :|: TRUE
f853_0_main_Load(EOS(STATIC_853), i188, i190) -> f775_0_main_Load(EOS(STATIC_775), i188, i190) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f778_0_main_LE(EOS(STATIC_778), i166:0, i181:0, i181:0) -> f778_0_main_LE(EOS(STATIC_778), i166:0 - 1, i181:0 - 1, i181:0 - 1) :|: i181:0 > 0
Filtered constant ground arguments:
   f778_0_main_LE(x1, x2, x3, x4) -> f778_0_main_LE(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f778_0_main_LE(x1, x2, x3) -> f778_0_main_LE(x1, x3)
Filtered unneeded arguments:
   f778_0_main_LE(x1, x2) -> f778_0_main_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f778_0_main_LE(i181:0) -> f778_0_main_LE(i181:0 - 1) :|: i181:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f778_0_main_LE(i181:0) -> f778_0_main_LE(i181:0 - 1) :|: i181:0 > 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f778_0_main_LE(i181:0) -> f778_0_main_LE(arith) :|: i181:0 > 0 && arith = i181:0 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f778_0_main_LE(i181:0) -> f778_0_main_LE(arith) :|: i181:0 > 0 && arith = i181:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f778_0_main_LE(i181:0) -> f778_0_main_LE(arith) :|: i181:0 > 0 && arith = i181:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f778_0_main_LE(i181:0:0) -> f778_0_main_LE(i181:0:0 - 1) :|: i181:0:0 > 0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f778_0_main_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f778_0_main_LE(i181:0:0) -> f778_0_main_LE(c) :|: c = i181:0:0 - 1 && i181:0:0 > 0

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f778_0_main_LE(x)] = x

The following rules are decreasing:
f778_0_main_LE(i181:0:0) -> f778_0_main_LE(c) :|: c = i181:0:0 - 1 && i181:0:0 > 0
The following rules are bounded:
f778_0_main_LE(i181:0:0) -> f778_0_main_LE(c) :|: c = i181:0:0 - 1 && i181:0:0 > 0

----------------------------------------

(18)
YES
