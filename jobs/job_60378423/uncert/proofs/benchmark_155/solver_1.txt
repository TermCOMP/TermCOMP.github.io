YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zCNMT.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 91 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 44 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 17 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.whileDecr;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		WhileDecr.decrease(args.length);
	}

}


package simple.whileDecr;

public class WhileDecr {

	// this example does acutally terminate.
	
	public static void decrease(int i) {
		while (i > 5) {
			i--;
		}
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.whileDecr;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		WhileDecr.decrease(args.length);
	}

}


package simple.whileDecr;

public class WhileDecr {

	// this example does acutally terminate.
	
	public static void decrease(int i) {
		while (i > 5) {
			i--;
		}
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
simple.whileDecr.Main.main([Ljava/lang/String;)V: Graph of 16 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: simple.whileDecr.Main.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 7 IRulesP rules:
f67_0_decrease_ConstantStackPush(EOS(STATIC_67), i16, i16) -> f68_0_decrease_LE(EOS(STATIC_68), i16, i16, 5) :|: TRUE
f68_0_decrease_LE(EOS(STATIC_68), i26, i26, matching1) -> f71_0_decrease_LE(EOS(STATIC_71), i26, i26, 5) :|: TRUE && matching1 = 5
f71_0_decrease_LE(EOS(STATIC_71), i26, i26, matching1) -> f81_0_decrease_Inc(EOS(STATIC_81), i26) :|: i26 > 5 && matching1 = 5
f81_0_decrease_Inc(EOS(STATIC_81), i26) -> f83_0_decrease_JMP(EOS(STATIC_83), i26 + -1) :|: TRUE
f83_0_decrease_JMP(EOS(STATIC_83), i30) -> f96_0_decrease_Load(EOS(STATIC_96), i30) :|: TRUE
f96_0_decrease_Load(EOS(STATIC_96), i30) -> f65_0_decrease_Load(EOS(STATIC_65), i30) :|: TRUE
f65_0_decrease_Load(EOS(STATIC_65), i16) -> f67_0_decrease_ConstantStackPush(EOS(STATIC_67), i16, i16) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f67_0_decrease_ConstantStackPush(EOS(STATIC_67), i16:0, i16:0) -> f67_0_decrease_ConstantStackPush(EOS(STATIC_67), i16:0 - 1, i16:0 - 1) :|: i16:0 > 5
Filtered constant ground arguments:
   f67_0_decrease_ConstantStackPush(x1, x2, x3) -> f67_0_decrease_ConstantStackPush(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f67_0_decrease_ConstantStackPush(x1, x2) -> f67_0_decrease_ConstantStackPush(x2)
Finished conversion. Obtained 1 rules.P rules:
f67_0_decrease_ConstantStackPush(i16:0) -> f67_0_decrease_ConstantStackPush(i16:0 - 1) :|: i16:0 > 5

----------------------------------------

(8)
Obligation:
Rules:
f67_0_decrease_ConstantStackPush(i16:0) -> f67_0_decrease_ConstantStackPush(i16:0 - 1) :|: i16:0 > 5

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f67_0_decrease_ConstantStackPush(i16:0) -> f67_0_decrease_ConstantStackPush(arith) :|: i16:0 > 5 && arith = i16:0 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f67_0_decrease_ConstantStackPush(i16:0) -> f67_0_decrease_ConstantStackPush(arith) :|: i16:0 > 5 && arith = i16:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f67_0_decrease_ConstantStackPush(i16:0) -> f67_0_decrease_ConstantStackPush(arith) :|: i16:0 > 5 && arith = i16:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f67_0_decrease_ConstantStackPush(i16:0:0) -> f67_0_decrease_ConstantStackPush(i16:0:0 - 1) :|: i16:0:0 > 5

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f67_0_decrease_ConstantStackPush(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f67_0_decrease_ConstantStackPush(i16:0:0) -> f67_0_decrease_ConstantStackPush(c) :|: c = i16:0:0 - 1 && i16:0:0 > 5

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f67_0_decrease_ConstantStackPush(x)] = x

The following rules are decreasing:
f67_0_decrease_ConstantStackPush(i16:0:0) -> f67_0_decrease_ConstantStackPush(c) :|: c = i16:0:0 - 1 && i16:0:0 > 5
The following rules are bounded:
f67_0_decrease_ConstantStackPush(i16:0:0) -> f67_0_decrease_ConstantStackPush(c) :|: c = i16:0:0 - 1 && i16:0:0 > 5

----------------------------------------

(18)
YES
