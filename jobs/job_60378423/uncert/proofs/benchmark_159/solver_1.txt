NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/Caak9.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 106 ms]
(4) JBCTerminationGraph
(5) JBCNonTerm [COMPLETE, 23 ms]
(6) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.whileNestedOffset;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		WhileNestedOffset.increase(args.length);

	}

}


package simple.whileNestedOffset;

public class WhileNestedOffset {

	public static void increase(int i) {
		int j;
		while (i < 10) {
			j = i;
			while (j > 5) {
				j++;
			}
			i++;
		}
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.whileNestedOffset;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		WhileNestedOffset.increase(args.length);

	}

}


package simple.whileNestedOffset;

public class WhileNestedOffset {

	public static void increase(int i) {
		int j;
		while (i < 10) {
			j = i;
			while (j > 5) {
				j++;
			}
			i++;
		}
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
simple.whileNestedOffset.Main.main([Ljava/lang/String;)V: Graph of 28 nodes with 1 SCC.





----------------------------------------

(5) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<simple.whileNestedOffset.Main.main||0: load ADDR args||args: a29|| ->
	a29([java.lang.String...]): length 6 -->{java.lang.Object...}
YES:  (JL1)
1:<simple.whileNestedOffset.Main.main||1: arraylength|| - ||a29>
	a29([java.lang.String...]): length 6 -->{java.lang.Object...}
YES:  (JL1)
2:<simple.whileNestedOffset.Main.main||2: simple.whileNestedOffset.WhileNestedOffset.increase(I)V|| - ||6>
YES:  (JL1)
3:<simple.whileNestedOffset.WhileNestedOffset.increase||0: load INT i||i: 6|| ->
<simple.whileNestedOffset.Main.main||2: simple.whileNestedOffset.WhileNestedOffset.increase|| - || ->
YES:  (JL1)
4:<simple.whileNestedOffset.WhileNestedOffset.increase||1: push 10||i: 6||6>
<simple.whileNestedOffset.Main.main||2: simple.whileNestedOffset.WhileNestedOffset.increase|| - || ->
YES:  (JL1)
5:<simple.whileNestedOffset.WhileNestedOffset.increase||3: GE||i: 6||6, 10>
<simple.whileNestedOffset.Main.main||2: simple.whileNestedOffset.WhileNestedOffset.increase|| - || ->
YES:  (JL1)
6:<simple.whileNestedOffset.WhileNestedOffset.increase||6: load INT i||i: 6|| ->
<simple.whileNestedOffset.Main.main||2: simple.whileNestedOffset.WhileNestedOffset.increase|| - || ->
YES:  (JL1)
7:<simple.whileNestedOffset.WhileNestedOffset.increase||7: store INT to j||i: 6||6>
<simple.whileNestedOffset.Main.main||2: simple.whileNestedOffset.WhileNestedOffset.increase|| - || ->
YES:  (JL1)
8:<simple.whileNestedOffset.WhileNestedOffset.increase||8: load INT j||i: 6, j: 6|| ->
<simple.whileNestedOffset.Main.main||2: simple.whileNestedOffset.WhileNestedOffset.increase|| - || ->
YES:  (JL1)
Start state of loop: 

<simple.whileNestedOffset.WhileNestedOffset.increase||8: load INT j||i: i42, j: i106|| ->
[a11(lv_0_0)]
<simple.whileNestedOffset.Main.main||2: simple.whileNestedOffset.WhileNestedOffset.increase|| - || ->
	i42: [0,9](2,1){0,+inf}
	i106: [0,+inf)(l3)
	i27: [0,9](u1){0,+inf}
	a11([java.lang.String...]): length i27 -->{java.lang.Object...}
YES:  (JL1)


In the loop head node, references [i106, i42, i27] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((0 <= initial_i42 and initial_i42 <= 9 and 0 <= initial_i106 and 0 <= initial_i27 and initial_i27 <= 9) and (((path1_i106 = path1_i113 and path1_i116 = (path1_i113 + 1) and path1_i42 = res_i42 and path1_i116 = res_i106 and path1_i27 = res_i27 and path1_i42 = initial_i42 and path1_i106 = initial_i106 and path1_i27 = initial_i27) and (T and 5 = 5 and path1_i113 > 5)) and ((res1_i106 = res1_i113 and res1_i116 = (res1_i113 + 1) and res_i42 = res1_i42 and res_i106 = res1_i106 and res_i27 = res1_i27) and !(T and 5 = 5 and res1_i113 > 5))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(6)
NO
