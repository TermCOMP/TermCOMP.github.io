YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/f3OkQ.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 180 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Diff {
    // We assume that A and B have no repetitions.
 static void dif(int[] A, int[] B, int[] D){
    int k=0;
    int i=0;
    int l1=A.length;
    int l2=B.length;
    boolean found;
    while(i<l1){
        int j=0;
        found=false;
	while((j<l2)&&(!found)){
	  if(A[i]==B[j]) found=true;
	  else j++;
         }

	if (!found) {
            D[k]=A[i];
	    k++;
	}
      i++;
    }
 }

    public static void main(String[] args) {
	dif(new int[20],new int[20],new int[20]);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Diff {
    // We assume that A and B have no repetitions.
 static void dif(int[] A, int[] B, int[] D){
    int k=0;
    int i=0;
    int l1=A.length;
    int l2=B.length;
    boolean found;
    while(i<l1){
        int j=0;
        found=false;
	while((j<l2)&&(!found)){
	  if(A[i]==B[j]) found=true;
	  else j++;
         }

	if (!found) {
            D[k]=A[i];
	    k++;
	}
      i++;
    }
 }

    public static void main(String[] args) {
	dif(new int[20],new int[20],new int[20]);
    }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Diff.main([Ljava/lang/String;)V: Graph of 643 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Proven termination by absence of SCCs
----------------------------------------

(6)
TRUE
