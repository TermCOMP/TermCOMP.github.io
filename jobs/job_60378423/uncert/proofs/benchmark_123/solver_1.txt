NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/rxiaY.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 275 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.ex01;

public class Ex01 {

	public static void loop(int i) {
		while (i < 0) {
			i--;
		}
	}
}


package simple.ex01;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
        int value = args[1].length();
        if (args[0].length() % 2 == 0) {
            value = -value;
        }
		Ex01.loop(value);
	}

}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.ex01;

public class Ex01 {

	public static void loop(int i) {
		while (i < 0) {
			i--;
		}
	}
}


package simple.ex01;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
        int value = args[1].length();
        if (args[0].length() % 2 == 0) {
            value = -value;
        }
		Ex01.loop(value);
	}

}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<simple.ex01.Main.main||0: load ADDR args||args: a2|| ->
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o31, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o14?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o14:: [CHAR] -->{java.lang.Object...}
a2-><-o32
a2-><-o31
a2-><-o14
a2-><-o13
YES:  (JL1)
1:<simple.ex01.Main.main||1: push 1||args: a2||a2>
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o31, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o14?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o14:: [CHAR] -->{java.lang.Object...}
a2-><-o32
a2-><-o31
a2-><-o14
a2-><-o13
YES:  (JL1)
2:<simple.ex01.Main.main||2: Read ADDR from array||args: a2||a2, 1>
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o31, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o14?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o14:: [CHAR] -->{java.lang.Object...}
a2-><-o32
a2-><-o31
a2-><-o14
a2-><-o13
YES:  (JL1)
3:<simple.ex01.Main.main||3: java.lang.String.length()I||args: a2||o13>
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o31, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o14?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o14:: [CHAR] -->{java.lang.Object...}
a2-><-o32
a2-><-o31
a2-><-o14
a2-><-o13
YES:  (JL1)
4:<java.lang.String.length||0: load ADDR this||this: o13|| ->
<simple.ex01.Main.main||3: java.lang.String.length||args: a2|| ->
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o31, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o14?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o14:: [CHAR] -->{java.lang.Object...}
a2-><-o32
a2-><-o31
a2-><-o14
a2-><-o13
YES:  (JL1)
5:<java.lang.String.length||1: Read from count|| - ||o13>
<simple.ex01.Main.main||3: java.lang.String.length||args: a2|| ->
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o31, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o14?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o14:: [CHAR] -->{java.lang.Object...}
a2-><-o32
a2-><-o31
a2-><-o14
a2-><-o13
YES:  (JL1)
6:<java.lang.String.length||4: return INT|| - ||1>
<simple.ex01.Main.main||3: java.lang.String.length||args: a2|| ->
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o31, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o14?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o14:: [CHAR] -->{java.lang.Object...}
a2-><-o32
a2-><-o31
a2-><-o14
a2-><-o13
YES:  (JL1)
7:<simple.ex01.Main.main||6: store INT to value||args: a2||1>
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o31, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o14?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o14:: [CHAR] -->{java.lang.Object...}
a2-><-o32
a2-><-o31
a2-><-o14
a2-><-o13
YES:  (JL1)
8:<simple.ex01.Main.main||7: load ADDR args||args: a2, value: 1|| ->
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o31, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o14?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o14:: [CHAR] -->{java.lang.Object...}
a2-><-o32
a2-><-o31
a2-><-o14
a2-><-o13
YES:  (JL1)
9:<simple.ex01.Main.main||8: push 0||value: 1||a2>
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o31, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o14?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o14:: [CHAR] -->{java.lang.Object...}
a2-><-o32
a2-><-o31
a2-><-o14
a2-><-o13
YES:  (JL1)
10:<simple.ex01.Main.main||9: Read ADDR from array||value: 1||a2, 0>
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o31, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o14?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
o14:: [CHAR] -->{java.lang.Object...}
a2-><-o32
a2-><-o31
a2-><-o14
a2-><-o13
YES:  (JL1)
11:<simple.ex01.Main.main||10: java.lang.String.length()I||value: 1||o31>
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
YES:  (JL1)
12:<java.lang.String.length||0: load ADDR this||this: o31|| ->
<simple.ex01.Main.main||10: java.lang.String.length||value: 1|| ->
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
YES:  (JL1)
13:<java.lang.String.length||1: Read from count|| - ||o31>
<simple.ex01.Main.main||10: java.lang.String.length||value: 1|| ->
	o31!: String(count=0, hash=#, offset=0, value=o32?) -->{java.lang.Object...}
o32:: [CHAR] -->{java.lang.Object...}
YES:  (JL1)
14:<java.lang.String.length||4: return INT|| - ||0>
<simple.ex01.Main.main||10: java.lang.String.length||value: 1|| ->
YES:  (JL1)
15:<simple.ex01.Main.main||13: push 2||value: 1||0>
YES:  (JL1)
16:<simple.ex01.Main.main||14: TMOD||value: 1||0, 2>
YES:  (JL1)
17:<simple.ex01.Main.main||15: NE 0||value: 1||0>
YES:  (JL1)
18:<simple.ex01.Main.main||18: load INT value||value: 1|| ->
YES:  (JL1)
19:<simple.ex01.Main.main||19: NEG|| - ||1>
YES:  (JL1)
20:<simple.ex01.Main.main||20: store INT to value|| - ||-1>
YES:  (JL1)
21:<simple.ex01.Main.main||21: load INT value||value: -1|| ->
YES:  (JL1)
22:<simple.ex01.Main.main||22: simple.ex01.Ex01.loop(I)V|| - ||-1>
YES:  (JL1)
23:<simple.ex01.Ex01.loop||0: load INT i||i: -1|| ->
<simple.ex01.Main.main||22: simple.ex01.Ex01.loop|| - || ->
YES:  (JL1)
Start state of loop: 

<simple.ex01.Ex01.loop||0: load INT i||i: i37|| ->
[a2(lv_0_0)]
<simple.ex01.Main.main||22: simple.ex01.Ex01.loop|| - || ->
	a2([java.lang.String...]): length i5 -->{java.lang.Object...}
	i5: [2,+inf){0,+inf}
	i37: (-inf,0]{-inf,+inf}
YES:  (JL1)


In the loop head node, references [i37] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((initial_i37 <= 0 and 2 <= initial_i5) and (((path1_i37 = path1_i58 and path1_i67 = (path1_i58 + -1) and path1_i67 = res_i37 and path1_i37 = initial_i37) and path1_i58 < 0) and ((res1_i37 = res1_i58 and res1_i67 = (res1_i58 + -1) and res_i37 = res1_i37) and !res1_i58 < 0)))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
