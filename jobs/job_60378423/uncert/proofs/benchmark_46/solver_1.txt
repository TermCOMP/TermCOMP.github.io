YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/TjciU.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 55 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 171 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 59 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 10 ms]
(12) AND
    (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IRSwT
        (18) TempFilterProof [SOUND, 17 ms]
        (19) IntTRS
        (20) RankingReductionPairProof [EQUIVALENT, 9 ms]
        (21) YES
    (22) IRSwT
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IRSwT
        (25) TempFilterProof [SOUND, 11 ms]
        (26) IntTRS
        (27) RankingReductionPairProof [EQUIVALENT, 6 ms]
        (28) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB12 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x > 0 || y > 0) {
            if (x > 0) {
                x--;
            } else if (y > 0) {
                y--;
            } else {
                continue;
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB12 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x > 0 || y > 0) {
            if (x > 0) {
                x--;
            } else if (y > 0) {
                y--;
            } else {
                continue;
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaB12.main([Ljava/lang/String;)V: Graph of 187 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaB12.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 20 IRulesP rules:
f517_0_main_GT(EOS(STATIC_517), matching1, i45, matching2) -> f533_0_main_GT(EOS(STATIC_533), 0, i45, 0) :|: TRUE && matching1 = 0 && matching2 = 0
f517_0_main_GT(EOS(STATIC_517), i81, i45, i81) -> f534_0_main_GT(EOS(STATIC_534), i81, i45, i81) :|: TRUE
f533_0_main_GT(EOS(STATIC_533), matching1, i45, matching2) -> f545_0_main_Load(EOS(STATIC_545), 0, i45) :|: 0 <= 0 && matching1 = 0 && matching2 = 0
f545_0_main_Load(EOS(STATIC_545), matching1, i45) -> f558_0_main_LE(EOS(STATIC_558), 0, i45, i45) :|: TRUE && matching1 = 0
f558_0_main_LE(EOS(STATIC_558), matching1, i86, i86) -> f571_0_main_LE(EOS(STATIC_571), 0, i86, i86) :|: TRUE && matching1 = 0
f571_0_main_LE(EOS(STATIC_571), matching1, i86, i86) -> f586_0_main_Load(EOS(STATIC_586), 0, i86) :|: i86 > 0 && matching1 = 0
f586_0_main_Load(EOS(STATIC_586), matching1, i86) -> f595_0_main_LE(EOS(STATIC_595), 0, i86, 0) :|: TRUE && matching1 = 0
f595_0_main_LE(EOS(STATIC_595), matching1, i86, matching2) -> f630_0_main_Load(EOS(STATIC_630), 0, i86) :|: 0 <= 0 && matching1 = 0 && matching2 = 0
f630_0_main_Load(EOS(STATIC_630), matching1, i86) -> f636_0_main_LE(EOS(STATIC_636), 0, i86, i86) :|: TRUE && matching1 = 0
f636_0_main_LE(EOS(STATIC_636), matching1, i86, i86) -> f640_0_main_Inc(EOS(STATIC_640), 0, i86) :|: i86 > 0 && matching1 = 0
f640_0_main_Inc(EOS(STATIC_640), matching1, i86) -> f643_0_main_JMP(EOS(STATIC_643), 0, i86 + -1) :|: TRUE && matching1 = 0
f643_0_main_JMP(EOS(STATIC_643), matching1, i98) -> f3273_0_main_Load(EOS(STATIC_3273), 0, i98) :|: TRUE && matching1 = 0
f3273_0_main_Load(EOS(STATIC_3273), matching1, i98) -> f486_0_main_Load(EOS(STATIC_486), 0, i98) :|: TRUE && matching1 = 0
f486_0_main_Load(EOS(STATIC_486), i69, i45) -> f517_0_main_GT(EOS(STATIC_517), i69, i45, i69) :|: TRUE
f534_0_main_GT(EOS(STATIC_534), i81, i45, i81) -> f548_0_main_Load(EOS(STATIC_548), i81, i45) :|: i81 > 0
f548_0_main_Load(EOS(STATIC_548), i81, i45) -> f560_0_main_LE(EOS(STATIC_560), i81, i45, i81) :|: TRUE
f560_0_main_LE(EOS(STATIC_560), i81, i45, i81) -> f574_0_main_Inc(EOS(STATIC_574), i81, i45) :|: i81 > 0
f574_0_main_Inc(EOS(STATIC_574), i81, i45) -> f588_0_main_JMP(EOS(STATIC_588), i81 + -1, i45) :|: TRUE
f588_0_main_JMP(EOS(STATIC_588), i88, i45) -> f624_0_main_Load(EOS(STATIC_624), i88, i45) :|: TRUE
f624_0_main_Load(EOS(STATIC_624), i88, i45) -> f486_0_main_Load(EOS(STATIC_486), i88, i45) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f517_0_main_GT(EOS(STATIC_517), 0, i45:0, 0) -> f517_0_main_GT(EOS(STATIC_517), 0, i45:0 - 1, 0) :|: i45:0 > 0
f517_0_main_GT(EOS(STATIC_517), i81:0, i45:0, i81:0) -> f517_0_main_GT(EOS(STATIC_517), i81:0 - 1, i45:0, i81:0 - 1) :|: i81:0 > 0
Filtered constant ground arguments:
   f517_0_main_GT(x1, x2, x3, x4) -> f517_0_main_GT(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f517_0_main_GT(x1, x2, x3) -> f517_0_main_GT(x2, x3)
Finished conversion. Obtained 2 rules.P rules:
f517_0_main_GT(i45:0, cons_0) -> f517_0_main_GT(i45:0 - 1, 0) :|: i45:0 > 0 && cons_0 = 0
f517_0_main_GT(i45:0, i81:0) -> f517_0_main_GT(i45:0, i81:0 - 1) :|: i81:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f517_0_main_GT(i45:0, cons_0) -> f517_0_main_GT(i45:0 - 1, 0) :|: i45:0 > 0 && cons_0 = 0
f517_0_main_GT(x, x1) -> f517_0_main_GT(x, x1 - 1) :|: x1 > 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f517_0_main_GT(i45:0, cons_0) -> f517_0_main_GT(arith, 0) :|: i45:0 > 0 && cons_0 = 0 && arith = i45:0 - 1
f517_0_main_GT(x2, x3) -> f517_0_main_GT(x2, x4) :|: x3 > 0 && x4 = x3 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f517_0_main_GT(i45:0, cons_0) -> f517_0_main_GT(arith, 0) :|: i45:0 > 0 && cons_0 = 0 && arith = i45:0 - 1
(2) f517_0_main_GT(x2, x3) -> f517_0_main_GT(x2, x4) :|: x3 > 0 && x4 = x3 - 1

Arcs:
(1) -> (1)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f517_0_main_GT(x2, x3) -> f517_0_main_GT(x2, x4) :|: x3 > 0 && x4 = x3 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f517_0_main_GT(x2:0, x3:0) -> f517_0_main_GT(x2:0, x3:0 - 1) :|: x3:0 > 0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f517_0_main_GT(x1, x2) -> f517_0_main_GT(x2)

----------------------------------------

(17)
Obligation:
Rules:
f517_0_main_GT(x3:0) -> f517_0_main_GT(x3:0 - 1) :|: x3:0 > 0

----------------------------------------

(18) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f517_0_main_GT(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(19)
Obligation:
Rules:
f517_0_main_GT(x3:0) -> f517_0_main_GT(c) :|: c = x3:0 - 1 && x3:0 > 0

----------------------------------------

(20) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f517_0_main_GT ] = f517_0_main_GT_1

The following rules are decreasing:
f517_0_main_GT(x3:0) -> f517_0_main_GT(c) :|: c = x3:0 - 1 && x3:0 > 0

The following rules are bounded:
f517_0_main_GT(x3:0) -> f517_0_main_GT(c) :|: c = x3:0 - 1 && x3:0 > 0


----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:

Termination digraph:
Nodes:
(1) f517_0_main_GT(i45:0, cons_0) -> f517_0_main_GT(arith, 0) :|: i45:0 > 0 && cons_0 = 0 && arith = i45:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f517_0_main_GT(i45:0:0, cons_0) -> f517_0_main_GT(i45:0:0 - 1, 0) :|: i45:0:0 > 0 && cons_0 = 0

----------------------------------------

(25) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f517_0_main_GT(INTEGER, VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(26)
Obligation:
Rules:
f517_0_main_GT(i45:0:0, c) -> f517_0_main_GT(c1, c2) :|: c2 = 0 && (c1 = i45:0:0 - 1 && c = 0) && (i45:0:0 > 0 && cons_0 = 0)

----------------------------------------

(27) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f517_0_main_GT ] = f517_0_main_GT_1

The following rules are decreasing:
f517_0_main_GT(i45:0:0, c) -> f517_0_main_GT(c1, c2) :|: c2 = 0 && (c1 = i45:0:0 - 1 && c = 0) && (i45:0:0 > 0 && cons_0 = 0)

The following rules are bounded:
f517_0_main_GT(i45:0:0, c) -> f517_0_main_GT(c1, c2) :|: c2 = 0 && (c1 = i45:0:0 - 1 && c = 0) && (i45:0:0 > 0 && cons_0 = 0)


----------------------------------------

(28)
YES
