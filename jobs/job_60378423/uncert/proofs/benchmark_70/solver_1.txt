YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/fJgcM.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 105 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 35 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 14 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) IRSwTChainingProof [EQUIVALENT, 0 ms]
(16) IRSwT
(17) IRSwTTerminationDigraphProof [EQUIVALENT, 6 ms]
(18) TRUE


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}


public class Round3{
  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();

    while (x % 3 != 0) {
      x++;
    }
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}


public class Round3{
  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();

    while (x % 3 != 0) {
      x++;
    }
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Round3.main([Ljava/lang/String;)V: Graph of 109 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Round3.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 8 IRulesP rules:
f291_0_main_ConstantStackPush(EOS(STATIC_291), i30, i30) -> f303_0_main_IntArithmetic(EOS(STATIC_303), i30, i30, 3) :|: TRUE
f303_0_main_IntArithmetic(EOS(STATIC_303), i30, i30, matching1) -> f316_0_main_EQ(EOS(STATIC_316), i30, i30 % 3) :|: TRUE && matching1 = 3
f316_0_main_EQ(EOS(STATIC_316), i30, i65) -> f327_0_main_EQ(EOS(STATIC_327), i30, i65) :|: TRUE
f327_0_main_EQ(EOS(STATIC_327), i30, i65) -> f339_0_main_Inc(EOS(STATIC_339), i30) :|: i65 > 0
f339_0_main_Inc(EOS(STATIC_339), i30) -> f349_0_main_JMP(EOS(STATIC_349), i30 + 1) :|: TRUE
f349_0_main_JMP(EOS(STATIC_349), i69) -> f381_0_main_Load(EOS(STATIC_381), i69) :|: TRUE
f381_0_main_Load(EOS(STATIC_381), i69) -> f229_0_main_Load(EOS(STATIC_229), i69) :|: TRUE
f229_0_main_Load(EOS(STATIC_229), i30) -> f291_0_main_ConstantStackPush(EOS(STATIC_291), i30, i30) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f291_0_main_ConstantStackPush(EOS(STATIC_291), i30:0, i30:0) -> f291_0_main_ConstantStackPush'(EOS(STATIC_291), i30:0, i30:0) :|: i30:0 - 3 * div > 0
f291_0_main_ConstantStackPush'(EOS(STATIC_291), i30:0, i30:0) -> f291_0_main_ConstantStackPush(EOS(STATIC_291), i30:0 + 1, i30:0 + 1) :|: i30:0 - 3 * div < 3 && i30:0 - 3 * div > 0
Filtered constant ground arguments:
   f291_0_main_ConstantStackPush(x1, x2, x3) -> f291_0_main_ConstantStackPush(x2, x3)
   f291_0_main_ConstantStackPush'(x1, x2, x3) -> f291_0_main_ConstantStackPush'(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f291_0_main_ConstantStackPush(x1, x2) -> f291_0_main_ConstantStackPush(x2)
   f291_0_main_ConstantStackPush'(x1, x2) -> f291_0_main_ConstantStackPush'(x2)
Finished conversion. Obtained 2 rules.P rules:
f291_0_main_ConstantStackPush(i30:0) -> f291_0_main_ConstantStackPush'(i30:0) :|: i30:0 - 3 * div > 0
f291_0_main_ConstantStackPush'(i30:0) -> f291_0_main_ConstantStackPush(i30:0 + 1) :|: i30:0 - 3 * div < 3 && i30:0 - 3 * div > 0

----------------------------------------

(8)
Obligation:
Rules:
f291_0_main_ConstantStackPush(x) -> f291_0_main_ConstantStackPush'(x) :|: x - 3 * x1 > 0
f291_0_main_ConstantStackPush'(x2) -> f291_0_main_ConstantStackPush(x2 + 1) :|: x2 - 3 * x3 < 3 && x2 - 3 * x3 > 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f291_0_main_ConstantStackPush(x) -> f291_0_main_ConstantStackPush'(x) :|: x - 3 * x1 > 0
f291_0_main_ConstantStackPush'(x2) -> f291_0_main_ConstantStackPush(arith) :|: x2 - 3 * x3 < 3 && x2 - 3 * x3 > 0 && arith = x2 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f291_0_main_ConstantStackPush(x) -> f291_0_main_ConstantStackPush'(x) :|: x - 3 * x1 > 0
(2) f291_0_main_ConstantStackPush'(x2) -> f291_0_main_ConstantStackPush(arith) :|: x2 - 3 * x3 < 3 && x2 - 3 * x3 > 0 && arith = x2 + 1

Arcs:
(1) -> (2)
(2) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f291_0_main_ConstantStackPush(x) -> f291_0_main_ConstantStackPush'(x) :|: x - 3 * x1 > 0
(2) f291_0_main_ConstantStackPush'(x2) -> f291_0_main_ConstantStackPush(arith) :|: x2 - 3 * x3 < 3 && x2 - 3 * x3 > 0 && arith = x2 + 1

Arcs:
(1) -> (2)
(2) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f291_0_main_ConstantStackPush(x:0) -> f291_0_main_ConstantStackPush(x:0 + 1) :|: x:0 - 3 * x3:0 < 3 && x:0 - 3 * x3:0 > 0 && x:0 - 3 * x1:0 > 0

----------------------------------------

(15) IRSwTChainingProof (EQUIVALENT)
Chaining!
----------------------------------------

(16)
Obligation:
Rules:
f291_0_main_ConstantStackPush(x) -> f291_0_main_ConstantStackPush(x + 2) :|: TRUE && x + -3 * x1 <= 2 && x + -3 * x1 >= 1 && x + -3 * x2 >= 1 && x + -3 * x4 <= 1 && x + -3 * x4 >= 0 && x + -3 * x5 >= 0

----------------------------------------

(17) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f291_0_main_ConstantStackPush(x) -> f291_0_main_ConstantStackPush(x + 2) :|: TRUE && x + -3 * x1 <= 2 && x + -3 * x1 >= 1 && x + -3 * x2 >= 1 && x + -3 * x4 <= 1 && x + -3 * x4 >= 0 && x + -3 * x5 >= 0

No arcs!

This digraph is fully evaluated!
----------------------------------------

(18)
TRUE
