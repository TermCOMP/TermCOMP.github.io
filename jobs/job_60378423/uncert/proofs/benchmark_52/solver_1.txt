YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Nwk0L.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 184 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 92 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 49 ms]
(12) AND
    (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IRSwT
        (18) TempFilterProof [SOUND, 14 ms]
        (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (21) YES
    (22) IRSwT
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IRSwT
        (25) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (26) IRSwT
        (27) TempFilterProof [SOUND, 17 ms]
        (28) IntTRS
        (29) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (30) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB18 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x > 0 && y > 0) {
            if (x > y) {
                while (x > 0) {
                    x--;
                }
            } else {
                while (y > 0) {
                    y--;
                }
            }
        }        
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB18 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x > 0 && y > 0) {
            if (x > y) {
                while (x > 0) {
                    x--;
                }
            } else {
                while (y > 0) {
                    y--;
                }
            }
        }        
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaB18.main([Ljava/lang/String;)V: Graph of 200 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaB18.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 33 IRulesP rules:
f760_0_main_LE(EOS(STATIC_760), i129, i113, i129) -> f764_0_main_LE(EOS(STATIC_764), i129, i113, i129) :|: TRUE
f764_0_main_LE(EOS(STATIC_764), i129, i113, i129) -> f768_0_main_Load(EOS(STATIC_768), i129, i113) :|: i129 > 0
f768_0_main_Load(EOS(STATIC_768), i129, i113) -> f773_0_main_LE(EOS(STATIC_773), i129, i113, i113) :|: TRUE
f773_0_main_LE(EOS(STATIC_773), i129, i131, i131) -> f778_0_main_LE(EOS(STATIC_778), i129, i131, i131) :|: TRUE
f778_0_main_LE(EOS(STATIC_778), i129, i131, i131) -> f790_0_main_Load(EOS(STATIC_790), i129, i131) :|: i131 > 0
f790_0_main_Load(EOS(STATIC_790), i129, i131) -> f793_0_main_Load(EOS(STATIC_793), i129, i131, i129) :|: TRUE
f793_0_main_Load(EOS(STATIC_793), i129, i131, i129) -> f794_0_main_LE(EOS(STATIC_794), i129, i131, i129, i131) :|: TRUE
f794_0_main_LE(EOS(STATIC_794), i129, i131, i129, i131) -> f828_0_main_LE(EOS(STATIC_828), i129, i131, i129, i131) :|: i129 <= i131
f794_0_main_LE(EOS(STATIC_794), i129, i131, i129, i131) -> f829_0_main_LE(EOS(STATIC_829), i129, i131, i129, i131) :|: i129 > i131
f828_0_main_LE(EOS(STATIC_828), i129, i131, i129, i131) -> f843_0_main_Load(EOS(STATIC_843), i129, i131) :|: i129 <= i131
f843_0_main_Load(EOS(STATIC_843), i129, i131) -> f920_0_main_Load(EOS(STATIC_920), i129, i131) :|: TRUE
f920_0_main_Load(EOS(STATIC_920), i129, i152) -> f1153_0_main_LE(EOS(STATIC_1153), i129, i152, i152) :|: TRUE
f1153_0_main_LE(EOS(STATIC_1153), i129, matching1, matching2) -> f1161_0_main_LE(EOS(STATIC_1161), i129, 0, 0) :|: TRUE && matching1 = 0 && matching2 = 0
f1153_0_main_LE(EOS(STATIC_1153), i129, i204, i204) -> f1163_0_main_LE(EOS(STATIC_1163), i129, i204, i204) :|: TRUE
f1161_0_main_LE(EOS(STATIC_1161), i129, matching1, matching2) -> f1301_0_main_Load(EOS(STATIC_1301), i129, 0) :|: 0 <= 0 && matching1 = 0 && matching2 = 0
f1301_0_main_Load(EOS(STATIC_1301), i129, matching1) -> f751_0_main_Load(EOS(STATIC_751), i129, 0) :|: TRUE && matching1 = 0
f751_0_main_Load(EOS(STATIC_751), i112, i113) -> f760_0_main_LE(EOS(STATIC_760), i112, i113, i112) :|: TRUE
f1163_0_main_LE(EOS(STATIC_1163), i129, i204, i204) -> f1320_0_main_Inc(EOS(STATIC_1320), i129, i204) :|: i204 > 0
f1320_0_main_Inc(EOS(STATIC_1320), i129, i204) -> f1329_0_main_JMP(EOS(STATIC_1329), i129, i204 + -1) :|: TRUE
f1329_0_main_JMP(EOS(STATIC_1329), i129, i238) -> f1451_0_main_Load(EOS(STATIC_1451), i129, i238) :|: TRUE
f1451_0_main_Load(EOS(STATIC_1451), i129, i238) -> f920_0_main_Load(EOS(STATIC_920), i129, i238) :|: TRUE
f829_0_main_LE(EOS(STATIC_829), i129, i131, i129, i131) -> f856_0_main_Load(EOS(STATIC_856), i129, i131) :|: i129 > i131
f856_0_main_Load(EOS(STATIC_856), i129, i131) -> f1103_0_main_Load(EOS(STATIC_1103), i129, i131) :|: TRUE
f1103_0_main_Load(EOS(STATIC_1103), i162, i131) -> f1419_0_main_Load(EOS(STATIC_1419), i162, i131) :|: TRUE
f1419_0_main_Load(EOS(STATIC_1419), i245, i131) -> f1456_0_main_LE(EOS(STATIC_1456), i245, i131, i245) :|: TRUE
f1456_0_main_LE(EOS(STATIC_1456), matching1, i131, matching2) -> f1460_0_main_LE(EOS(STATIC_1460), 0, i131, 0) :|: TRUE && matching1 = 0 && matching2 = 0
f1456_0_main_LE(EOS(STATIC_1456), i264, i131, i264) -> f1463_0_main_LE(EOS(STATIC_1463), i264, i131, i264) :|: TRUE
f1460_0_main_LE(EOS(STATIC_1460), matching1, i131, matching2) -> f1562_0_main_Load(EOS(STATIC_1562), 0, i131) :|: 0 <= 0 && matching1 = 0 && matching2 = 0
f1562_0_main_Load(EOS(STATIC_1562), matching1, i131) -> f751_0_main_Load(EOS(STATIC_751), 0, i131) :|: TRUE && matching1 = 0
f1463_0_main_LE(EOS(STATIC_1463), i264, i131, i264) -> f1569_0_main_Inc(EOS(STATIC_1569), i264, i131) :|: i264 > 0
f1569_0_main_Inc(EOS(STATIC_1569), i264, i131) -> f1574_0_main_JMP(EOS(STATIC_1574), i264 + -1, i131) :|: TRUE
f1574_0_main_JMP(EOS(STATIC_1574), i287, i131) -> f1597_0_main_Load(EOS(STATIC_1597), i287, i131) :|: TRUE
f1597_0_main_Load(EOS(STATIC_1597), i287, i131) -> f1419_0_main_Load(EOS(STATIC_1419), i287, i131) :|: TRUE
Combined rules. Obtained 6 IRulesP rules:
f760_0_main_LE(EOS(STATIC_760), i129:0, i113:0, i129:0) -> f1456_0_main_LE(EOS(STATIC_1456), i129:0, i113:0, i129:0) :|: i129:0 > 0 && i113:0 > 0 && i129:0 > i113:0
f1456_0_main_LE(EOS(STATIC_1456), i264:0, i131:0, i264:0) -> f1456_0_main_LE(EOS(STATIC_1456), i264:0 - 1, i131:0, i264:0 - 1) :|: i264:0 > 0
f1153_0_main_LE(EOS(STATIC_1153), i129:0, 0, 0) -> f760_0_main_LE(EOS(STATIC_760), i129:0, 0, i129:0) :|: TRUE
f1456_0_main_LE(EOS(STATIC_1456), 0, i131:0, 0) -> f760_0_main_LE(EOS(STATIC_760), 0, i131:0, 0) :|: TRUE
f760_0_main_LE(EOS(STATIC_760), i129:0, i113:0, i129:0) -> f1153_0_main_LE(EOS(STATIC_1153), i129:0, i113:0, i113:0) :|: i129:0 > 0 && i113:0 > 0 && i129:0 <= i113:0
f1153_0_main_LE(EOS(STATIC_1153), i129:0, i204:0, i204:0) -> f1153_0_main_LE(EOS(STATIC_1153), i129:0, i204:0 - 1, i204:0 - 1) :|: i204:0 > 0
Filtered constant ground arguments:
   f760_0_main_LE(x1, x2, x3, x4) -> f760_0_main_LE(x2, x3, x4)
   f1456_0_main_LE(x1, x2, x3, x4) -> f1456_0_main_LE(x2, x3, x4)
   f1153_0_main_LE(x1, x2, x3, x4) -> f1153_0_main_LE(x2, x3, x4)
Filtered duplicate arguments:
   f760_0_main_LE(x1, x2, x3) -> f760_0_main_LE(x2, x3)
   f1456_0_main_LE(x1, x2, x3) -> f1456_0_main_LE(x2, x3)
   f1153_0_main_LE(x1, x2, x3) -> f1153_0_main_LE(x1, x3)
Finished conversion. Obtained 6 rules.P rules:
f760_0_main_LE(i113:0, i129:0) -> f1456_0_main_LE(i113:0, i129:0) :|: i113:0 > 0 && i129:0 > i113:0 && i129:0 > 0
f1456_0_main_LE(i131:0, i264:0) -> f1456_0_main_LE(i131:0, i264:0 - 1) :|: i264:0 > 0
f1153_0_main_LE(i129:0, cons_0) -> f760_0_main_LE(0, i129:0) :|: TRUE && cons_0 = 0
f1456_0_main_LE(i131:0, cons_0) -> f760_0_main_LE(i131:0, 0) :|: TRUE && cons_0 = 0
f760_0_main_LE(i113:0, i129:0) -> f1153_0_main_LE(i129:0, i113:0) :|: i113:0 > 0 && i129:0 <= i113:0 && i129:0 > 0
f1153_0_main_LE(i129:0, i204:0) -> f1153_0_main_LE(i129:0, i204:0 - 1) :|: i204:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f760_0_main_LE(i113:0, i129:0) -> f1456_0_main_LE(i113:0, i129:0) :|: i113:0 > 0 && i129:0 > i113:0 && i129:0 > 0
f1456_0_main_LE(i131:0, i264:0) -> f1456_0_main_LE(i131:0, i264:0 - 1) :|: i264:0 > 0
f1153_0_main_LE(x, x1) -> f760_0_main_LE(0, x) :|: TRUE && x1 = 0
f1456_0_main_LE(x2, x3) -> f760_0_main_LE(x2, 0) :|: TRUE && x3 = 0
f760_0_main_LE(x4, x5) -> f1153_0_main_LE(x5, x4) :|: x4 > 0 && x5 <= x4 && x5 > 0
f1153_0_main_LE(x6, x7) -> f1153_0_main_LE(x6, x7 - 1) :|: x7 > 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f760_0_main_LE(i113:0, i129:0) -> f1456_0_main_LE(i113:0, i129:0) :|: i113:0 > 0 && i129:0 > i113:0 && i129:0 > 0
f1456_0_main_LE(i131:0, i264:0) -> f1456_0_main_LE(i131:0, arith) :|: i264:0 > 0 && arith = i264:0 - 1
f1153_0_main_LE(x, x1) -> f760_0_main_LE(0, x) :|: TRUE && x1 = 0
f1456_0_main_LE(x2, x3) -> f760_0_main_LE(x2, 0) :|: TRUE && x3 = 0
f760_0_main_LE(x4, x5) -> f1153_0_main_LE(x5, x4) :|: x4 > 0 && x5 <= x4 && x5 > 0
f1153_0_main_LE(x8, x9) -> f1153_0_main_LE(x8, x10) :|: x9 > 0 && x10 = x9 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f760_0_main_LE(i113:0, i129:0) -> f1456_0_main_LE(i113:0, i129:0) :|: i113:0 > 0 && i129:0 > i113:0 && i129:0 > 0
(2) f1456_0_main_LE(i131:0, i264:0) -> f1456_0_main_LE(i131:0, arith) :|: i264:0 > 0 && arith = i264:0 - 1
(3) f1153_0_main_LE(x, x1) -> f760_0_main_LE(0, x) :|: TRUE && x1 = 0
(4) f1456_0_main_LE(x2, x3) -> f760_0_main_LE(x2, 0) :|: TRUE && x3 = 0
(5) f760_0_main_LE(x4, x5) -> f1153_0_main_LE(x5, x4) :|: x4 > 0 && x5 <= x4 && x5 > 0
(6) f1153_0_main_LE(x8, x9) -> f1153_0_main_LE(x8, x10) :|: x9 > 0 && x10 = x9 - 1

Arcs:
(1) -> (2)
(2) -> (2), (4)
(5) -> (6)
(6) -> (3), (6)

This digraph is fully evaluated!
----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f1153_0_main_LE(x8, x9) -> f1153_0_main_LE(x8, x10) :|: x9 > 0 && x10 = x9 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f1153_0_main_LE(x8:0, x9:0) -> f1153_0_main_LE(x8:0, x9:0 - 1) :|: x9:0 > 0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f1153_0_main_LE(x1, x2) -> f1153_0_main_LE(x2)

----------------------------------------

(17)
Obligation:
Rules:
f1153_0_main_LE(x9:0) -> f1153_0_main_LE(x9:0 - 1) :|: x9:0 > 0

----------------------------------------

(18) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f1153_0_main_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(19)
Obligation:
Rules:
f1153_0_main_LE(x9:0) -> f1153_0_main_LE(c) :|: c = x9:0 - 1 && x9:0 > 0

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f1153_0_main_LE(x)] = x

The following rules are decreasing:
f1153_0_main_LE(x9:0) -> f1153_0_main_LE(c) :|: c = x9:0 - 1 && x9:0 > 0
The following rules are bounded:
f1153_0_main_LE(x9:0) -> f1153_0_main_LE(c) :|: c = x9:0 - 1 && x9:0 > 0

----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:

Termination digraph:
Nodes:
(1) f1456_0_main_LE(i131:0, i264:0) -> f1456_0_main_LE(i131:0, arith) :|: i264:0 > 0 && arith = i264:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f1456_0_main_LE(i131:0:0, i264:0:0) -> f1456_0_main_LE(i131:0:0, i264:0:0 - 1) :|: i264:0:0 > 0

----------------------------------------

(25) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f1456_0_main_LE(x1, x2) -> f1456_0_main_LE(x2)

----------------------------------------

(26)
Obligation:
Rules:
f1456_0_main_LE(i264:0:0) -> f1456_0_main_LE(i264:0:0 - 1) :|: i264:0:0 > 0

----------------------------------------

(27) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f1456_0_main_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(28)
Obligation:
Rules:
f1456_0_main_LE(i264:0:0) -> f1456_0_main_LE(c) :|: c = i264:0:0 - 1 && i264:0:0 > 0

----------------------------------------

(29) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f1456_0_main_LE(x)] = x

The following rules are decreasing:
f1456_0_main_LE(i264:0:0) -> f1456_0_main_LE(c) :|: c = i264:0:0 - 1 && i264:0:0 > 0
The following rules are bounded:
f1456_0_main_LE(i264:0:0) -> f1456_0_main_LE(c) :|: c = i264:0:0 - 1 && i264:0:0 > 0

----------------------------------------

(30)
YES
