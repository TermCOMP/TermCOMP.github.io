NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/kVNbt.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 339 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class List {
    public int head;
    public List tail;

    public List(int h, List t) {
	head = h;
	tail = t;
    }
}

public class Test13 {
    private static List l1, l2;

    public static void main(String[] args) {
	List l = new List(13, null);
	List start = l;

	for (int i = 0; i < args.length + 1; i++) 
	    l = l.tail = new List(11, null);

	l1 = l;
	l2 = start;

	test();

	length(start);
    }

    private static int length(List l) {
	int length = 0;

	while (l != null) {
	    l = l.tail;
	    length++;
	}

	return length;
    }

    private static void test() {
	l1.tail = l2;
    }
}


----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class List {
    public int head;
    public List tail;

    public List(int h, List t) {
	head = h;
	tail = t;
    }
}

public class Test13 {
    private static List l1, l2;

    public static void main(String[] args) {
	List l = new List(13, null);
	List start = l;

	for (int i = 0; i < args.length + 1; i++) 
	    l = l.tail = new List(11, null);

	l1 = l;
	l2 = start;

	test();

	length(start);
    }

    private static int length(List l) {
	int length = 0;

	while (l != null) {
	    l = l.tail;
	    length++;
	}

	return length;
    }

    private static void test() {
	l1.tail = l2;
    }
}


----------------------------------------

(3) JBCNonTerm (COMPLETE)
Symbolic evaluation of method public static main([Ljava/lang/String;)V never reaches a method end (by explicit return or exception).

As this is the main method, we can conclude non-termination of the input program.
----------------------------------------

(4)
NO
