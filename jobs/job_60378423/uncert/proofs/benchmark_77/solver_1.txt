YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/5zCDo.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 132 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 40 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 9 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 19 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class AG313 {
  public static void main(String[] args) {
    int x, y;
    x = args[0].length();
    y = args[1].length() + 1;
    quot(x,y);

  }


  public static int quot(int x, int y) {
    int i = 0;
    if(x==0) return 0;
    while (x > 0 && y > 0) {
      i += 1;
      x = (x - 1)- (y - 1);

    }
    return i;
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class AG313 {
  public static void main(String[] args) {
    int x, y;
    x = args[0].length();
    y = args[1].length() + 1;
    quot(x,y);

  }


  public static int quot(int x, int y) {
    int i = 0;
    if(x==0) return 0;
    while (x > 0 && y > 0) {
      i += 1;
      x = (x - 1)- (y - 1);

    }
    return i;
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
AG313.main([Ljava/lang/String;)V: Graph of 156 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: AG313.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 16 IRulesP rules:
f4539_0_quot_LE(EOS(STATIC_4539), i1076, i34, i1076) -> f4545_0_quot_LE(EOS(STATIC_4545), i1076, i34, i1076) :|: TRUE
f4545_0_quot_LE(EOS(STATIC_4545), i1076, i34, i1076) -> f4553_0_quot_Load(EOS(STATIC_4553), i1076, i34) :|: i1076 > 0
f4553_0_quot_Load(EOS(STATIC_4553), i1076, i34) -> f4558_0_quot_LE(EOS(STATIC_4558), i1076, i34, i34) :|: TRUE
f4558_0_quot_LE(EOS(STATIC_4558), i1076, i34, i34) -> f5530_0_quot_Inc(EOS(STATIC_5530), i1076, i34) :|: i34 > 0
f5530_0_quot_Inc(EOS(STATIC_5530), i1076, i34) -> f5537_0_quot_Load(EOS(STATIC_5537), i1076, i34) :|: TRUE
f5537_0_quot_Load(EOS(STATIC_5537), i1076, i34) -> f5544_0_quot_ConstantStackPush(EOS(STATIC_5544), i34, i1076) :|: TRUE
f5544_0_quot_ConstantStackPush(EOS(STATIC_5544), i34, i1076) -> f5548_0_quot_IntArithmetic(EOS(STATIC_5548), i34, i1076, 1) :|: TRUE
f5548_0_quot_IntArithmetic(EOS(STATIC_5548), i34, i1076, matching1) -> f5553_0_quot_Load(EOS(STATIC_5553), i34, i1076 - 1) :|: i1076 > 0 && matching1 = 1
f5553_0_quot_Load(EOS(STATIC_5553), i34, i1314) -> f5555_0_quot_ConstantStackPush(EOS(STATIC_5555), i34, i1314, i34) :|: TRUE
f5555_0_quot_ConstantStackPush(EOS(STATIC_5555), i34, i1314, i34) -> f5558_0_quot_IntArithmetic(EOS(STATIC_5558), i34, i1314, i34, 1) :|: TRUE
f5558_0_quot_IntArithmetic(EOS(STATIC_5558), i34, i1314, i34, matching1) -> f5562_0_quot_IntArithmetic(EOS(STATIC_5562), i34, i1314, i34 - 1) :|: i34 > 0 && matching1 = 1
f5562_0_quot_IntArithmetic(EOS(STATIC_5562), i34, i1314, i1317) -> f5565_0_quot_Store(EOS(STATIC_5565), i34, i1314 - i1317) :|: i1314 >= 0 && i1317 >= 0
f5565_0_quot_Store(EOS(STATIC_5565), i34, i1319) -> f5569_0_quot_JMP(EOS(STATIC_5569), i1319, i34) :|: TRUE
f5569_0_quot_JMP(EOS(STATIC_5569), i1319, i34) -> f5769_0_quot_Load(EOS(STATIC_5769), i1319, i34) :|: TRUE
f5769_0_quot_Load(EOS(STATIC_5769), i1319, i34) -> f4528_0_quot_Load(EOS(STATIC_4528), i1319, i34) :|: TRUE
f4528_0_quot_Load(EOS(STATIC_4528), i1045, i34) -> f4539_0_quot_LE(EOS(STATIC_4539), i1045, i34, i1045) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f4539_0_quot_LE(EOS(STATIC_4539), i1076:0, i34:0, i1076:0) -> f4539_0_quot_LE(EOS(STATIC_4539), i1076:0 - 1 - (i34:0 - 1), i34:0, i1076:0 - 1 - (i34:0 - 1)) :|: i1076:0 > 0 && i34:0 > 0
Filtered constant ground arguments:
   f4539_0_quot_LE(x1, x2, x3, x4) -> f4539_0_quot_LE(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f4539_0_quot_LE(x1, x2, x3) -> f4539_0_quot_LE(x2, x3)
Finished conversion. Obtained 1 rules.P rules:
f4539_0_quot_LE(i34:0, i1076:0) -> f4539_0_quot_LE(i34:0, i1076:0 - 1 - (i34:0 - 1)) :|: i1076:0 > 0 && i34:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f4539_0_quot_LE(i34:0, i1076:0) -> f4539_0_quot_LE(i34:0, i1076:0 - 1 - (i34:0 - 1)) :|: i1076:0 > 0 && i34:0 > 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f4539_0_quot_LE(i34:0, i1076:0) -> f4539_0_quot_LE(i34:0, arith) :|: i1076:0 > 0 && i34:0 > 0 && arith = i1076:0 - 1 - (i34:0 - 1)

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f4539_0_quot_LE(i34:0, i1076:0) -> f4539_0_quot_LE(i34:0, arith) :|: i1076:0 > 0 && i34:0 > 0 && arith = i1076:0 - 1 - (i34:0 - 1)

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f4539_0_quot_LE(i34:0, i1076:0) -> f4539_0_quot_LE(i34:0, arith) :|: i1076:0 > 0 && i34:0 > 0 && arith = i1076:0 - 1 - (i34:0 - 1)

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f4539_0_quot_LE(i34:0:0, i1076:0:0) -> f4539_0_quot_LE(i34:0:0, i1076:0:0 - 1 - (i34:0:0 - 1)) :|: i1076:0:0 > 0 && i34:0:0 > 0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f4539_0_quot_LE(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f4539_0_quot_LE(i34:0:0, i1076:0:0) -> f4539_0_quot_LE(i34:0:0, c) :|: c = i1076:0:0 - 1 - (i34:0:0 - 1) && (i1076:0:0 > 0 && i34:0:0 > 0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f4539_0_quot_LE(x, x1)] = x1

The following rules are decreasing:
f4539_0_quot_LE(i34:0:0, i1076:0:0) -> f4539_0_quot_LE(i34:0:0, c) :|: c = i1076:0:0 - 1 - (i34:0:0 - 1) && (i1076:0:0 > 0 && i34:0:0 > 0)
The following rules are bounded:
f4539_0_quot_LE(i34:0:0, i1076:0:0) -> f4539_0_quot_LE(i34:0:0, c) :|: c = i1076:0:0 - 1 - (i34:0:0 - 1) && (i1076:0:0 > 0 && i34:0:0 > 0)

----------------------------------------

(18)
YES
