YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/3iGMk.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 55 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class CyclicPair2 {
	CyclicPair2 next;

    public static void main(String[] args) {
        Random.args = args;
        CyclicPair2 one = new CyclicPair2();
        CyclicPair2 two = new CyclicPair2();
		int rand = Random.random();
        if (rand != 0) {
            one.next = two;
            two.next = one;
        } else {
            one.next = two;
        }

        if (rand == 0) {
            one.run();
        }
    }

    public void run() {
       CyclicPair2 current = this;
       while (current != null)
           current = current.next;
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class CyclicPair2 {
	CyclicPair2 next;

    public static void main(String[] args) {
        Random.args = args;
        CyclicPair2 one = new CyclicPair2();
        CyclicPair2 two = new CyclicPair2();
		int rand = Random.random();
        if (rand != 0) {
            one.next = two;
            two.next = one;
        } else {
            one.next = two;
        }

        if (rand == 0) {
            one.run();
        }
    }

    public void run() {
       CyclicPair2 current = this;
       while (current != null)
           current = current.next;
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
CyclicPair2.main([Ljava/lang/String;)V: Graph of 152 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Proven termination by absence of SCCs
----------------------------------------

(6)
TRUE
