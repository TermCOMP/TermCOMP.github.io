YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zZ1cV.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 155 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 52 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 22 ms]
(12) AND
    (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IRSwT
        (18) TempFilterProof [SOUND, 7 ms]
        (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (21) YES
    (22) IRSwT
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IRSwT
        (25) TempFilterProof [SOUND, 17 ms]
        (26) IntTRS
        (27) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (28) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB17 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();
        int z = Random.random();

        while (x > z) {
            while (y > z) {
                y--;
            }
            x--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB17 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();
        int z = Random.random();

        while (x > z) {
            while (y > z) {
                y--;
            }
            x--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaB17.main([Ljava/lang/String;)V: Graph of 250 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaB17.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 16 IRulesP rules:
f510_0_main_Load(EOS(STATIC_510), i77, i48, i71, i77) -> f514_0_main_LE(EOS(STATIC_514), i77, i48, i71, i77, i71) :|: TRUE
f514_0_main_LE(EOS(STATIC_514), i77, i48, i71, i77, i71) -> f520_0_main_LE(EOS(STATIC_520), i77, i48, i71, i77, i71) :|: i77 > i71
f520_0_main_LE(EOS(STATIC_520), i77, i48, i71, i77, i71) -> f527_0_main_Load(EOS(STATIC_527), i77, i48, i71) :|: i77 > i71
f527_0_main_Load(EOS(STATIC_527), i77, i48, i71) -> f530_0_main_Load(EOS(STATIC_530), i77, i48, i71, i48) :|: TRUE
f530_0_main_Load(EOS(STATIC_530), i77, i48, i71, i48) -> f532_0_main_LE(EOS(STATIC_532), i77, i48, i71, i48, i71) :|: TRUE
f532_0_main_LE(EOS(STATIC_532), i77, i48, i71, i48, i71) -> f534_0_main_LE(EOS(STATIC_534), i77, i48, i71, i48, i71) :|: i48 <= i71
f532_0_main_LE(EOS(STATIC_532), i77, i48, i71, i48, i71) -> f535_0_main_LE(EOS(STATIC_535), i77, i48, i71, i48, i71) :|: i48 > i71
f534_0_main_LE(EOS(STATIC_534), i77, i48, i71, i48, i71) -> f538_0_main_Inc(EOS(STATIC_538), i77, i48, i71) :|: i48 <= i71
f538_0_main_Inc(EOS(STATIC_538), i77, i48, i71) -> f540_0_main_JMP(EOS(STATIC_540), i77 + -1, i48, i71) :|: TRUE
f540_0_main_JMP(EOS(STATIC_540), i82, i48, i71) -> f547_0_main_Load(EOS(STATIC_547), i82, i48, i71) :|: TRUE
f547_0_main_Load(EOS(STATIC_547), i82, i48, i71) -> f507_0_main_Load(EOS(STATIC_507), i82, i48, i71) :|: TRUE
f507_0_main_Load(EOS(STATIC_507), i77, i48, i71) -> f510_0_main_Load(EOS(STATIC_510), i77, i48, i71, i77) :|: TRUE
f535_0_main_LE(EOS(STATIC_535), i77, i48, i71, i48, i71) -> f539_0_main_Inc(EOS(STATIC_539), i77, i48, i71) :|: i48 > i71
f539_0_main_Inc(EOS(STATIC_539), i77, i48, i71) -> f541_0_main_JMP(EOS(STATIC_541), i77, i48 + -1, i71) :|: TRUE
f541_0_main_JMP(EOS(STATIC_541), i77, i83, i71) -> f549_0_main_Load(EOS(STATIC_549), i77, i83, i71) :|: TRUE
f549_0_main_Load(EOS(STATIC_549), i77, i83, i71) -> f527_0_main_Load(EOS(STATIC_527), i77, i83, i71) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f532_0_main_LE(EOS(STATIC_532), i77:0, i48:0, i71:0, i48:0, i71:0) -> f532_0_main_LE(EOS(STATIC_532), i77:0, i48:0 - 1, i71:0, i48:0 - 1, i71:0) :|: i71:0 < i48:0
f532_0_main_LE(EOS(STATIC_532), i77:0, i48:0, i71:0, i48:0, i71:0) -> f532_0_main_LE(EOS(STATIC_532), i77:0 - 1, i48:0, i71:0, i48:0, i71:0) :|: i71:0 >= i48:0 && i77:0 - 1 > i71:0
Filtered constant ground arguments:
   f532_0_main_LE(x1, x2, x3, x4, x5, x6) -> f532_0_main_LE(x2, x3, x4, x5, x6)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f532_0_main_LE(x1, x2, x3, x4, x5) -> f532_0_main_LE(x1, x4, x5)
Finished conversion. Obtained 2 rules.P rules:
f532_0_main_LE(i77:0, i48:0, i71:0) -> f532_0_main_LE(i77:0, i48:0 - 1, i71:0) :|: i71:0 < i48:0
f532_0_main_LE(i77:0, i48:0, i71:0) -> f532_0_main_LE(i77:0 - 1, i48:0, i71:0) :|: i71:0 >= i48:0 && i77:0 - 1 > i71:0

----------------------------------------

(8)
Obligation:
Rules:
f532_0_main_LE(i77:0, i48:0, i71:0) -> f532_0_main_LE(i77:0, i48:0 - 1, i71:0) :|: i71:0 < i48:0
f532_0_main_LE(x, x1, x2) -> f532_0_main_LE(x - 1, x1, x2) :|: x2 >= x1 && x - 1 > x2

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f532_0_main_LE(i77:0, i48:0, i71:0) -> f532_0_main_LE(i77:0, arith, i71:0) :|: i71:0 < i48:0 && arith = i48:0 - 1
f532_0_main_LE(x3, x4, x5) -> f532_0_main_LE(x6, x4, x5) :|: x5 >= x4 && x3 - 1 > x5 && x6 = x3 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f532_0_main_LE(i77:0, i48:0, i71:0) -> f532_0_main_LE(i77:0, arith, i71:0) :|: i71:0 < i48:0 && arith = i48:0 - 1
(2) f532_0_main_LE(x3, x4, x5) -> f532_0_main_LE(x6, x4, x5) :|: x5 >= x4 && x3 - 1 > x5 && x6 = x3 - 1

Arcs:
(1) -> (1), (2)
(2) -> (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f532_0_main_LE(i77:0, i48:0, i71:0) -> f532_0_main_LE(i77:0, arith, i71:0) :|: i71:0 < i48:0 && arith = i48:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f532_0_main_LE(i77:0:0, i48:0:0, i71:0:0) -> f532_0_main_LE(i77:0:0, i48:0:0 - 1, i71:0:0) :|: i71:0:0 < i48:0:0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f532_0_main_LE(x1, x2, x3) -> f532_0_main_LE(x2, x3)

----------------------------------------

(17)
Obligation:
Rules:
f532_0_main_LE(i48:0:0, i71:0:0) -> f532_0_main_LE(i48:0:0 - 1, i71:0:0) :|: i71:0:0 < i48:0:0

----------------------------------------

(18) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f532_0_main_LE(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(19)
Obligation:
Rules:
f532_0_main_LE(i48:0:0, i71:0:0) -> f532_0_main_LE(c, i71:0:0) :|: c = i48:0:0 - 1 && i71:0:0 < i48:0:0

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f532_0_main_LE(x, x1)] = x - x1

The following rules are decreasing:
f532_0_main_LE(i48:0:0, i71:0:0) -> f532_0_main_LE(c, i71:0:0) :|: c = i48:0:0 - 1 && i71:0:0 < i48:0:0
The following rules are bounded:
f532_0_main_LE(i48:0:0, i71:0:0) -> f532_0_main_LE(c, i71:0:0) :|: c = i48:0:0 - 1 && i71:0:0 < i48:0:0

----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:

Termination digraph:
Nodes:
(1) f532_0_main_LE(x3, x4, x5) -> f532_0_main_LE(x6, x4, x5) :|: x5 >= x4 && x3 - 1 > x5 && x6 = x3 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f532_0_main_LE(x3:0, x4:0, x5:0) -> f532_0_main_LE(x3:0 - 1, x4:0, x5:0) :|: x5:0 >= x4:0 && x5:0 < x3:0 - 1

----------------------------------------

(25) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f532_0_main_LE(INTEGER, INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(26)
Obligation:
Rules:
f532_0_main_LE(x3:0, x4:0, x5:0) -> f532_0_main_LE(c, x4:0, x5:0) :|: c = x3:0 - 1 && (x5:0 >= x4:0 && x5:0 < x3:0 - 1)

----------------------------------------

(27) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f532_0_main_LE(x, x1, x2)] = x - x2

The following rules are decreasing:
f532_0_main_LE(x3:0, x4:0, x5:0) -> f532_0_main_LE(c, x4:0, x5:0) :|: c = x3:0 - 1 && (x5:0 >= x4:0 && x5:0 < x3:0 - 1)
The following rules are bounded:
f532_0_main_LE(x3:0, x4:0, x5:0) -> f532_0_main_LE(c, x4:0, x5:0) :|: c = x3:0 - 1 && (x5:0 >= x4:0 && x5:0 < x3:0 - 1)

----------------------------------------

(28)
YES
