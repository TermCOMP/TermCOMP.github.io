YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/uVzpk.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 211 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 53 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 17 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) IRSwTChainingProof [EQUIVALENT, 0 ms]
(16) IRSwT
(17) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
(18) IRSwT
(19) IntTRSCompressionProof [EQUIVALENT, 1 ms]
(20) IRSwT
(21) TempFilterProof [SOUND, 11 ms]
(22) IntTRS
(23) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(24) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Et1 {
    public static void main(String[] args) {
		Random.args = args;
	    int a = - Random.random(); 
	   	int b = - Random.random();	
	   	while (a > b) {
	   		b = b + a;
 			a = a + 1;
	   	}
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
      if (index >= args.length)
	  return 0;

      String string = args[index];
      index++;
      return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Et1 {
    public static void main(String[] args) {
		Random.args = args;
	    int a = - Random.random(); 
	   	int b = - Random.random();	
	   	while (a > b) {
	   		b = b + a;
 			a = a + 1;
	   	}
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
      if (index >= args.length)
	  return 0;

      String string = args[index];
      index++;
      return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Et1.main([Ljava/lang/String;)V: Graph of 226 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Et1.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 14 IRulesP rules:
f966_0_main_Load(EOS(STATIC_966), i172, i173, i172) -> f981_0_main_LE(EOS(STATIC_981), i172, i173, i172, i173) :|: TRUE
f981_0_main_LE(EOS(STATIC_981), i172, i173, i172, i173) -> f986_0_main_LE(EOS(STATIC_986), i172, i173, i172, i173) :|: i172 > i173
f986_0_main_LE(EOS(STATIC_986), i172, i173, i172, i173) -> f1001_0_main_Load(EOS(STATIC_1001), i172, i173) :|: i172 > i173
f1001_0_main_Load(EOS(STATIC_1001), i172, i173) -> f1003_0_main_Load(EOS(STATIC_1003), i172, i173) :|: TRUE
f1003_0_main_Load(EOS(STATIC_1003), i172, i173) -> f1004_0_main_IntArithmetic(EOS(STATIC_1004), i172, i173, i172) :|: TRUE
f1004_0_main_IntArithmetic(EOS(STATIC_1004), i172, i173, i172) -> f1005_0_main_Store(EOS(STATIC_1005), i172, i173 + i172) :|: TRUE
f1005_0_main_Store(EOS(STATIC_1005), i172, i204) -> f1006_0_main_Load(EOS(STATIC_1006), i172, i204) :|: TRUE
f1006_0_main_Load(EOS(STATIC_1006), i172, i204) -> f1007_0_main_ConstantStackPush(EOS(STATIC_1007), i204, i172) :|: TRUE
f1007_0_main_ConstantStackPush(EOS(STATIC_1007), i204, i172) -> f1008_0_main_IntArithmetic(EOS(STATIC_1008), i204, i172, 1) :|: TRUE
f1008_0_main_IntArithmetic(EOS(STATIC_1008), i204, i172, matching1) -> f1009_0_main_Store(EOS(STATIC_1009), i204, i172 + 1) :|: TRUE && matching1 = 1
f1009_0_main_Store(EOS(STATIC_1009), i204, i205) -> f1010_0_main_JMP(EOS(STATIC_1010), i205, i204) :|: TRUE
f1010_0_main_JMP(EOS(STATIC_1010), i205, i204) -> f1031_0_main_Load(EOS(STATIC_1031), i205, i204) :|: TRUE
f1031_0_main_Load(EOS(STATIC_1031), i205, i204) -> f963_0_main_Load(EOS(STATIC_963), i205, i204) :|: TRUE
f963_0_main_Load(EOS(STATIC_963), i172, i173) -> f966_0_main_Load(EOS(STATIC_966), i172, i173, i172) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f966_0_main_Load(EOS(STATIC_966), i172:0, i173:0, i172:0) -> f966_0_main_Load(EOS(STATIC_966), i172:0 + 1, i173:0 + i172:0, i172:0 + 1) :|: i173:0 < i172:0
Filtered constant ground arguments:
   f966_0_main_Load(x1, x2, x3, x4) -> f966_0_main_Load(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f966_0_main_Load(x1, x2, x3) -> f966_0_main_Load(x2, x3)
Finished conversion. Obtained 1 rules.P rules:
f966_0_main_Load(i173:0, i172:0) -> f966_0_main_Load(i173:0 + i172:0, i172:0 + 1) :|: i173:0 < i172:0

----------------------------------------

(8)
Obligation:
Rules:
f966_0_main_Load(i173:0, i172:0) -> f966_0_main_Load(i173:0 + i172:0, i172:0 + 1) :|: i173:0 < i172:0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f966_0_main_Load(i173:0, i172:0) -> f966_0_main_Load(arith, arith1) :|: i173:0 < i172:0 && arith = i173:0 + i172:0 && arith1 = i172:0 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f966_0_main_Load(i173:0, i172:0) -> f966_0_main_Load(arith, arith1) :|: i173:0 < i172:0 && arith = i173:0 + i172:0 && arith1 = i172:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f966_0_main_Load(i173:0, i172:0) -> f966_0_main_Load(arith, arith1) :|: i173:0 < i172:0 && arith = i173:0 + i172:0 && arith1 = i172:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f966_0_main_Load(i173:0:0, i172:0:0) -> f966_0_main_Load(i173:0:0 + i172:0:0, i172:0:0 + 1) :|: i173:0:0 < i172:0:0

----------------------------------------

(15) IRSwTChainingProof (EQUIVALENT)
Chaining!
----------------------------------------

(16)
Obligation:
Rules:
f966_0_main_Load(x, x1) -> f966_0_main_Load(x + 2 * x1 + 1, x1 + 2) :|: TRUE && x + -1 * x1 <= -1 && x <= 0

----------------------------------------

(17) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f966_0_main_Load(x, x1) -> f966_0_main_Load(x + 2 * x1 + 1, x1 + 2) :|: TRUE && x + -1 * x1 <= -1 && x <= 0

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(18)
Obligation:

Termination digraph:
Nodes:
(1) f966_0_main_Load(x, x1) -> f966_0_main_Load(x + 2 * x1 + 1, x1 + 2) :|: TRUE && x + -1 * x1 <= -1 && x <= 0

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(19) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(20)
Obligation:
Rules:
f966_0_main_Load(x:0, x1:0) -> f966_0_main_Load(x:0 + 2 * x1:0 + 1, x1:0 + 2) :|: x:0 < 1 && x:0 + -1 * x1:0 <= -1

----------------------------------------

(21) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f966_0_main_Load(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(22)
Obligation:
Rules:
f966_0_main_Load(x:0, x1:0) -> f966_0_main_Load(c, c1) :|: c1 = x1:0 + 2 && c = x:0 + 2 * x1:0 + 1 && (x:0 < 1 && x:0 + -1 * x1:0 <= -1)

----------------------------------------

(23) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f966_0_main_Load(x, x1)] = 1 - 2*x - 2*x1 + x1^2

The following rules are decreasing:
f966_0_main_Load(x:0, x1:0) -> f966_0_main_Load(c, c1) :|: c1 = x1:0 + 2 && c = x:0 + 2 * x1:0 + 1 && (x:0 < 1 && x:0 + -1 * x1:0 <= -1)
The following rules are bounded:
f966_0_main_Load(x:0, x1:0) -> f966_0_main_Load(c, c1) :|: c1 = x1:0 + 2 && c = x:0 + 2 * x1:0 + 1 && (x:0 < 1 && x:0 + -1 * x1:0 <= -1)

----------------------------------------

(24)
YES
