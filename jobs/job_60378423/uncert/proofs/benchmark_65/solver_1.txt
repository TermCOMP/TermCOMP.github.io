YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/wsFkS.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 161 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 55 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 20 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 40 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(18) AND
    (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (21) YES
    (22) IntTRS
        (23) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaC3 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();
        int z = Random.random();

        while (x < y) {
            if (x < z) {
                x++;
            } else {
                z++;
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaC3 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();
        int z = Random.random();

        while (x < y) {
            if (x < z) {
                x++;
            } else {
                z++;
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaC3.main([Ljava/lang/String;)V: Graph of 250 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaC3.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 16 IRulesP rules:
f506_0_main_Load(EOS(STATIC_506), i19, i77, i78, i19) -> f509_0_main_GE(EOS(STATIC_509), i19, i77, i78, i19, i77) :|: TRUE
f509_0_main_GE(EOS(STATIC_509), i19, i77, i78, i19, i77) -> f515_0_main_GE(EOS(STATIC_515), i19, i77, i78, i19, i77) :|: i19 < i77
f515_0_main_GE(EOS(STATIC_515), i19, i77, i78, i19, i77) -> f520_0_main_Load(EOS(STATIC_520), i19, i77, i78) :|: i19 < i77
f520_0_main_Load(EOS(STATIC_520), i19, i77, i78) -> f523_0_main_Load(EOS(STATIC_523), i19, i77, i78, i19) :|: TRUE
f523_0_main_Load(EOS(STATIC_523), i19, i77, i78, i19) -> f525_0_main_GE(EOS(STATIC_525), i19, i77, i78, i19, i78) :|: TRUE
f525_0_main_GE(EOS(STATIC_525), i19, i77, i78, i19, i78) -> f530_0_main_GE(EOS(STATIC_530), i19, i77, i78, i19, i78) :|: i19 >= i78
f525_0_main_GE(EOS(STATIC_525), i19, i77, i78, i19, i78) -> f531_0_main_GE(EOS(STATIC_531), i19, i77, i78, i19, i78) :|: i19 < i78
f530_0_main_GE(EOS(STATIC_530), i19, i77, i78, i19, i78) -> f542_0_main_Inc(EOS(STATIC_542), i19, i77, i78) :|: i19 >= i78
f542_0_main_Inc(EOS(STATIC_542), i19, i77, i78) -> f551_0_main_JMP(EOS(STATIC_551), i19, i77, i78 + 1) :|: TRUE
f551_0_main_JMP(EOS(STATIC_551), i19, i77, i85) -> f556_0_main_Load(EOS(STATIC_556), i19, i77, i85) :|: TRUE
f556_0_main_Load(EOS(STATIC_556), i19, i77, i85) -> f496_0_main_Load(EOS(STATIC_496), i19, i77, i85) :|: TRUE
f496_0_main_Load(EOS(STATIC_496), i19, i77, i78) -> f506_0_main_Load(EOS(STATIC_506), i19, i77, i78, i19) :|: TRUE
f531_0_main_GE(EOS(STATIC_531), i19, i77, i78, i19, i78) -> f550_0_main_Inc(EOS(STATIC_550), i19, i77, i78) :|: i19 < i78
f550_0_main_Inc(EOS(STATIC_550), i19, i77, i78) -> f552_0_main_JMP(EOS(STATIC_552), i19 + 1, i77, i78) :|: TRUE
f552_0_main_JMP(EOS(STATIC_552), i86, i77, i78) -> f560_0_main_Load(EOS(STATIC_560), i86, i77, i78) :|: TRUE
f560_0_main_Load(EOS(STATIC_560), i86, i77, i78) -> f496_0_main_Load(EOS(STATIC_496), i86, i77, i78) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f506_0_main_Load(EOS(STATIC_506), i19:0, i77:0, i78:0, i19:0) -> f506_0_main_Load(EOS(STATIC_506), i19:0, i77:0, i78:0 + 1, i19:0) :|: i77:0 > i19:0 && i78:0 <= i19:0
f506_0_main_Load(EOS(STATIC_506), i19:0, i77:0, i78:0, i19:0) -> f506_0_main_Load(EOS(STATIC_506), i19:0 + 1, i77:0, i78:0, i19:0 + 1) :|: i77:0 > i19:0 && i78:0 > i19:0
Filtered constant ground arguments:
   f506_0_main_Load(x1, x2, x3, x4, x5) -> f506_0_main_Load(x2, x3, x4, x5)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f506_0_main_Load(x1, x2, x3, x4) -> f506_0_main_Load(x2, x3, x4)
Finished conversion. Obtained 2 rules.P rules:
f506_0_main_Load(i77:0, i78:0, i19:0) -> f506_0_main_Load(i77:0, i78:0 + 1, i19:0) :|: i77:0 > i19:0 && i78:0 <= i19:0
f506_0_main_Load(i77:0, i78:0, i19:0) -> f506_0_main_Load(i77:0, i78:0, i19:0 + 1) :|: i77:0 > i19:0 && i78:0 > i19:0

----------------------------------------

(8)
Obligation:
Rules:
f506_0_main_Load(i77:0, i78:0, i19:0) -> f506_0_main_Load(i77:0, i78:0 + 1, i19:0) :|: i77:0 > i19:0 && i78:0 <= i19:0
f506_0_main_Load(x, x1, x2) -> f506_0_main_Load(x, x1, x2 + 1) :|: x > x2 && x1 > x2

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f506_0_main_Load(i77:0, i78:0, i19:0) -> f506_0_main_Load(i77:0, arith, i19:0) :|: i77:0 > i19:0 && i78:0 <= i19:0 && arith = i78:0 + 1
f506_0_main_Load(x3, x4, x5) -> f506_0_main_Load(x3, x4, x6) :|: x3 > x5 && x4 > x5 && x6 = x5 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f506_0_main_Load(i77:0, i78:0, i19:0) -> f506_0_main_Load(i77:0, arith, i19:0) :|: i77:0 > i19:0 && i78:0 <= i19:0 && arith = i78:0 + 1
(2) f506_0_main_Load(x3, x4, x5) -> f506_0_main_Load(x3, x4, x6) :|: x3 > x5 && x4 > x5 && x6 = x5 + 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f506_0_main_Load(i77:0, i78:0, i19:0) -> f506_0_main_Load(i77:0, arith, i19:0) :|: i77:0 > i19:0 && i78:0 <= i19:0 && arith = i78:0 + 1
(2) f506_0_main_Load(x3, x4, x5) -> f506_0_main_Load(x3, x4, x6) :|: x3 > x5 && x4 > x5 && x6 = x5 + 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f506_0_main_Load(i77:0:0, i78:0:0, i19:0:0) -> f506_0_main_Load(i77:0:0, i78:0:0 + 1, i19:0:0) :|: i77:0:0 > i19:0:0 && i78:0:0 <= i19:0:0
f506_0_main_Load(x3:0, x4:0, x5:0) -> f506_0_main_Load(x3:0, x4:0, x5:0 + 1) :|: x5:0 < x3:0 && x5:0 < x4:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f506_0_main_Load(INTEGER, INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f506_0_main_Load(i77:0:0, i78:0:0, i19:0:0) -> f506_0_main_Load(i77:0:0, c, i19:0:0) :|: c = i78:0:0 + 1 && (i77:0:0 > i19:0:0 && i78:0:0 <= i19:0:0)
f506_0_main_Load(x3:0, x4:0, x5:0) -> f506_0_main_Load(x3:0, x4:0, c1) :|: c1 = x5:0 + 1 && (x5:0 < x3:0 && x5:0 < x4:0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f506_0_main_Load(x, x1, x2)] = x - x2

The following rules are decreasing:
f506_0_main_Load(x3:0, x4:0, x5:0) -> f506_0_main_Load(x3:0, x4:0, c1) :|: c1 = x5:0 + 1 && (x5:0 < x3:0 && x5:0 < x4:0)
The following rules are bounded:
f506_0_main_Load(i77:0:0, i78:0:0, i19:0:0) -> f506_0_main_Load(i77:0:0, c, i19:0:0) :|: c = i78:0:0 + 1 && (i77:0:0 > i19:0:0 && i78:0:0 <= i19:0:0)

----------------------------------------

(18)
Complex Obligation (AND)

----------------------------------------

(19)
Obligation:
Rules:
f506_0_main_Load(i77:0:0, i78:0:0, i19:0:0) -> f506_0_main_Load(i77:0:0, c, i19:0:0) :|: c = i78:0:0 + 1 && (i77:0:0 > i19:0:0 && i78:0:0 <= i19:0:0)

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f506_0_main_Load(x, x1, x2)] = -x1 + x2

The following rules are decreasing:
f506_0_main_Load(i77:0:0, i78:0:0, i19:0:0) -> f506_0_main_Load(i77:0:0, c, i19:0:0) :|: c = i78:0:0 + 1 && (i77:0:0 > i19:0:0 && i78:0:0 <= i19:0:0)
The following rules are bounded:
f506_0_main_Load(i77:0:0, i78:0:0, i19:0:0) -> f506_0_main_Load(i77:0:0, c, i19:0:0) :|: c = i78:0:0 + 1 && (i77:0:0 > i19:0:0 && i78:0:0 <= i19:0:0)

----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Rules:
f506_0_main_Load(x3:0, x4:0, x5:0) -> f506_0_main_Load(x3:0, x4:0, c1) :|: c1 = x5:0 + 1 && (x5:0 < x3:0 && x5:0 < x4:0)

----------------------------------------

(23) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f506_0_main_Load(x, x1, x2)] = x1 - x2

The following rules are decreasing:
f506_0_main_Load(x3:0, x4:0, x5:0) -> f506_0_main_Load(x3:0, x4:0, c1) :|: c1 = x5:0 + 1 && (x5:0 < x3:0 && x5:0 < x4:0)
The following rules are bounded:
f506_0_main_Load(x3:0, x4:0, x5:0) -> f506_0_main_Load(x3:0, x4:0, c1) :|: c1 = x5:0 + 1 && (x5:0 < x3:0 && x5:0 < x4:0)

----------------------------------------

(24)
YES
