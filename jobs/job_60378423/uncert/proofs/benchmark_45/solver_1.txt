YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/UQUHt.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 202 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 67 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 33 ms]
(12) AND
    (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) TempFilterProof [SOUND, 6 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (19) YES
    (20) IRSwT
        (21) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (22) IRSwT
        (23) TempFilterProof [SOUND, 6 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB11 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x + y > 0) {
            if (x > y) {
                x--;
            } else if (x == y) {
                x--;
            } else {
                y--;
            }     
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB11 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x + y > 0) {
            if (x > y) {
                x--;
            } else if (x == y) {
                x--;
            } else {
                y--;
            }     
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaB11.main([Ljava/lang/String;)V: Graph of 198 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaB11.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 26 IRulesP rules:
f1872_0_main_Load(EOS(STATIC_1872), i422, i397, i422) -> f1873_0_main_IntArithmetic(EOS(STATIC_1873), i422, i397, i422, i397) :|: TRUE
f1873_0_main_IntArithmetic(EOS(STATIC_1873), i422, i397, i422, i397) -> f1874_0_main_LE(EOS(STATIC_1874), i422, i397, i422 + i397) :|: TRUE
f1874_0_main_LE(EOS(STATIC_1874), i422, i397, i427) -> f1878_0_main_LE(EOS(STATIC_1878), i422, i397, i427) :|: TRUE
f1878_0_main_LE(EOS(STATIC_1878), i422, i397, i427) -> f1880_0_main_Load(EOS(STATIC_1880), i422, i397) :|: i427 > 0
f1880_0_main_Load(EOS(STATIC_1880), i422, i397) -> f1882_0_main_Load(EOS(STATIC_1882), i422, i397, i422) :|: TRUE
f1882_0_main_Load(EOS(STATIC_1882), i422, i397, i422) -> f1885_0_main_LE(EOS(STATIC_1885), i422, i397, i422, i397) :|: TRUE
f1885_0_main_LE(EOS(STATIC_1885), i422, i397, i422, i397) -> f1898_0_main_LE(EOS(STATIC_1898), i422, i397, i422, i397) :|: i422 <= i397
f1885_0_main_LE(EOS(STATIC_1885), i422, i397, i422, i397) -> f1899_0_main_LE(EOS(STATIC_1899), i422, i397, i422, i397) :|: i422 > i397
f1898_0_main_LE(EOS(STATIC_1898), i422, i397, i422, i397) -> f1905_0_main_Load(EOS(STATIC_1905), i422, i397) :|: i422 <= i397
f1905_0_main_Load(EOS(STATIC_1905), i422, i397) -> f1912_0_main_Load(EOS(STATIC_1912), i422, i397, i422) :|: TRUE
f1912_0_main_Load(EOS(STATIC_1912), i422, i397, i422) -> f1916_0_main_NE(EOS(STATIC_1916), i422, i397, i422, i397) :|: TRUE
f1916_0_main_NE(EOS(STATIC_1916), i422, i397, i422, i397) -> f1919_0_main_NE(EOS(STATIC_1919), i422, i397, i422, i397) :|: !(i422 = i397)
f1916_0_main_NE(EOS(STATIC_1916), i397, i397, i397, i397) -> f1920_0_main_NE(EOS(STATIC_1920), i397, i397, i397, i397) :|: i422 = i397
f1919_0_main_NE(EOS(STATIC_1919), i422, i397, i422, i397) -> f1921_0_main_Inc(EOS(STATIC_1921), i422, i397) :|: i422 < i397
f1921_0_main_Inc(EOS(STATIC_1921), i422, i397) -> f1924_0_main_JMP(EOS(STATIC_1924), i422, i397 + -1) :|: TRUE
f1924_0_main_JMP(EOS(STATIC_1924), i422, i456) -> f1927_0_main_Load(EOS(STATIC_1927), i422, i456) :|: TRUE
f1927_0_main_Load(EOS(STATIC_1927), i422, i456) -> f1871_0_main_Load(EOS(STATIC_1871), i422, i456) :|: TRUE
f1871_0_main_Load(EOS(STATIC_1871), i422, i397) -> f1872_0_main_Load(EOS(STATIC_1872), i422, i397, i422) :|: TRUE
f1920_0_main_NE(EOS(STATIC_1920), i397, i397, i397, i397) -> f1922_0_main_Inc(EOS(STATIC_1922), i397, i397) :|: TRUE
f1922_0_main_Inc(EOS(STATIC_1922), i397, i397) -> f1925_0_main_JMP(EOS(STATIC_1925), i397 + -1, i397) :|: TRUE
f1925_0_main_JMP(EOS(STATIC_1925), i457, i397) -> f1930_0_main_Load(EOS(STATIC_1930), i457, i397) :|: TRUE
f1930_0_main_Load(EOS(STATIC_1930), i457, i397) -> f1871_0_main_Load(EOS(STATIC_1871), i457, i397) :|: TRUE
f1899_0_main_LE(EOS(STATIC_1899), i422, i397, i422, i397) -> f1911_0_main_Inc(EOS(STATIC_1911), i422, i397) :|: i422 > i397
f1911_0_main_Inc(EOS(STATIC_1911), i422, i397) -> f1915_0_main_JMP(EOS(STATIC_1915), i422 + -1, i397) :|: TRUE
f1915_0_main_JMP(EOS(STATIC_1915), i454, i397) -> f1918_0_main_Load(EOS(STATIC_1918), i454, i397) :|: TRUE
f1918_0_main_Load(EOS(STATIC_1918), i454, i397) -> f1871_0_main_Load(EOS(STATIC_1871), i454, i397) :|: TRUE
Combined rules. Obtained 3 IRulesP rules:
f1872_0_main_Load(EOS(STATIC_1872), i422:0, i422:0, i422:0) -> f1872_0_main_Load(EOS(STATIC_1872), i422:0 - 1, i422:0, i422:0 - 1) :|: i422:0 + i422:0 > 0
f1872_0_main_Load(EOS(STATIC_1872), i422:0, i397:0, i422:0) -> f1872_0_main_Load(EOS(STATIC_1872), i422:0 - 1, i397:0, i422:0 - 1) :|: i422:0 + i397:0 > 0 && i422:0 > i397:0
f1872_0_main_Load(EOS(STATIC_1872), i422:0, i397:0, i422:0) -> f1872_0_main_Load(EOS(STATIC_1872), i422:0, i397:0 - 1, i422:0) :|: i422:0 < i397:0 && i422:0 + i397:0 > 0
Filtered constant ground arguments:
   f1872_0_main_Load(x1, x2, x3, x4) -> f1872_0_main_Load(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f1872_0_main_Load(x1, x2, x3) -> f1872_0_main_Load(x2, x3)
Finished conversion. Obtained 3 rules.P rules:
f1872_0_main_Load(i422:0, i422:0) -> f1872_0_main_Load(i422:0, i422:0 - 1) :|: i422:0 + i422:0 > 0
f1872_0_main_Load(i397:0, i422:0) -> f1872_0_main_Load(i397:0, i422:0 - 1) :|: i422:0 + i397:0 > 0 && i422:0 > i397:0
f1872_0_main_Load(i397:0, i422:0) -> f1872_0_main_Load(i397:0 - 1, i422:0) :|: i422:0 < i397:0 && i422:0 + i397:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f1872_0_main_Load(i422:0, i422:0) -> f1872_0_main_Load(i422:0, i422:0 - 1) :|: i422:0 + i422:0 > 0
f1872_0_main_Load(x, x1) -> f1872_0_main_Load(x, x1 - 1) :|: x1 + x > 0 && x1 > x
f1872_0_main_Load(x2, x3) -> f1872_0_main_Load(x2 - 1, x3) :|: x3 < x2 && x3 + x2 > 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f1872_0_main_Load(i422:0, i422:0) -> f1872_0_main_Load(i422:0, arith) :|: i422:0 + i422:0 > 0 && arith = i422:0 - 1
f1872_0_main_Load(x4, x5) -> f1872_0_main_Load(x4, x6) :|: x5 + x4 > 0 && x5 > x4 && x6 = x5 - 1
f1872_0_main_Load(x7, x8) -> f1872_0_main_Load(x9, x8) :|: x8 < x7 && x8 + x7 > 0 && x9 = x7 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f1872_0_main_Load(i422:0, i422:0) -> f1872_0_main_Load(i422:0, arith) :|: i422:0 + i422:0 > 0 && arith = i422:0 - 1
(2) f1872_0_main_Load(x4, x5) -> f1872_0_main_Load(x4, x6) :|: x5 + x4 > 0 && x5 > x4 && x6 = x5 - 1
(3) f1872_0_main_Load(x7, x8) -> f1872_0_main_Load(x9, x8) :|: x8 < x7 && x8 + x7 > 0 && x9 = x7 - 1

Arcs:
(1) -> (3)
(2) -> (1), (2)
(3) -> (1), (3)

This digraph is fully evaluated!
----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f1872_0_main_Load(x4, x5) -> f1872_0_main_Load(x4, x6) :|: x5 + x4 > 0 && x5 > x4 && x6 = x5 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f1872_0_main_Load(x4:0, x5:0) -> f1872_0_main_Load(x4:0, x5:0 - 1) :|: x5:0 + x4:0 > 0 && x5:0 > x4:0

----------------------------------------

(16) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f1872_0_main_Load(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(17)
Obligation:
Rules:
f1872_0_main_Load(x4:0, x5:0) -> f1872_0_main_Load(x4:0, c) :|: c = x5:0 - 1 && (x5:0 + x4:0 > 0 && x5:0 > x4:0)

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f1872_0_main_Load(x, x1)] = -x + x1

The following rules are decreasing:
f1872_0_main_Load(x4:0, x5:0) -> f1872_0_main_Load(x4:0, c) :|: c = x5:0 - 1 && (x5:0 + x4:0 > 0 && x5:0 > x4:0)
The following rules are bounded:
f1872_0_main_Load(x4:0, x5:0) -> f1872_0_main_Load(x4:0, c) :|: c = x5:0 - 1 && (x5:0 + x4:0 > 0 && x5:0 > x4:0)

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:

Termination digraph:
Nodes:
(1) f1872_0_main_Load(i422:0, i422:0) -> f1872_0_main_Load(i422:0, arith) :|: i422:0 + i422:0 > 0 && arith = i422:0 - 1
(2) f1872_0_main_Load(x7, x8) -> f1872_0_main_Load(x9, x8) :|: x8 < x7 && x8 + x7 > 0 && x9 = x7 - 1

Arcs:
(1) -> (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(21) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(22)
Obligation:
Rules:
f1872_0_main_Load(i422:0:0, i422:0:0) -> f1872_0_main_Load(i422:0:0, i422:0:0 - 1) :|: i422:0:0 + i422:0:0 > 0
f1872_0_main_Load(x7:0, x8:0) -> f1872_0_main_Load(x7:0 - 1, x8:0) :|: x8:0 < x7:0 && x8:0 + x7:0 > 0

----------------------------------------

(23) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f1872_0_main_Load(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(24)
Obligation:
Rules:
f1872_0_main_Load(i422:0:0, i422:0:0) -> f1872_0_main_Load(i422:0:0, c) :|: c = i422:0:0 - 1 && i422:0:0 + i422:0:0 > 0
f1872_0_main_Load(x7:0, x8:0) -> f1872_0_main_Load(c1, x8:0) :|: c1 = x7:0 - 1 && (x8:0 < x7:0 && x8:0 + x7:0 > 0)

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f1872_0_main_Load(x, x1)] = x + x1

The following rules are decreasing:
f1872_0_main_Load(i422:0:0, i422:0:0) -> f1872_0_main_Load(i422:0:0, c) :|: c = i422:0:0 - 1 && i422:0:0 + i422:0:0 > 0
f1872_0_main_Load(x7:0, x8:0) -> f1872_0_main_Load(c1, x8:0) :|: c1 = x7:0 - 1 && (x8:0 < x7:0 && x8:0 + x7:0 > 0)
The following rules are bounded:
f1872_0_main_Load(i422:0:0, i422:0:0) -> f1872_0_main_Load(i422:0:0, c) :|: c = i422:0:0 - 1 && i422:0:0 + i422:0:0 > 0
f1872_0_main_Load(x7:0, x8:0) -> f1872_0_main_Load(c1, x8:0) :|: c1 = x7:0 - 1 && (x8:0 < x7:0 && x8:0 + x7:0 > 0)

----------------------------------------

(26)
YES
