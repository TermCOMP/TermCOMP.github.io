YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/KLQAA.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 53 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 141 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 38 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 23 ms]
(12) AND
    (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IRSwT
        (18) TempFilterProof [SOUND, 16 ms]
        (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (21) YES
    (22) IRSwT
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IRSwT
        (25) TempFilterProof [SOUND, 9 ms]
        (26) IntTRS
        (27) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (28) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB16 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x > 0) {
            while (y > 0) {
                y--;
            }
            x--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB16 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x > 0) {
            while (y > 0) {
                y--;
            }
            x--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaB16.main([Ljava/lang/String;)V: Graph of 181 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaB16.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 14 IRulesP rules:
f2398_0_main_LE(EOS(STATIC_2398), i495, i105, i495) -> f2425_0_main_LE(EOS(STATIC_2425), i495, i105, i495) :|: TRUE
f2425_0_main_LE(EOS(STATIC_2425), i495, i105, i495) -> f2442_0_main_Load(EOS(STATIC_2442), i495, i105) :|: i495 > 0
f2442_0_main_Load(EOS(STATIC_2442), i495, i105) -> f2463_0_main_LE(EOS(STATIC_2463), i495, i105, i105) :|: TRUE
f2463_0_main_LE(EOS(STATIC_2463), i495, matching1, matching2) -> f2482_0_main_LE(EOS(STATIC_2482), i495, 0, 0) :|: TRUE && matching1 = 0 && matching2 = 0
f2463_0_main_LE(EOS(STATIC_2463), i495, i505, i505) -> f2483_0_main_LE(EOS(STATIC_2483), i495, i505, i505) :|: TRUE
f2482_0_main_LE(EOS(STATIC_2482), i495, matching1, matching2) -> f2490_0_main_Inc(EOS(STATIC_2490), i495, 0) :|: 0 <= 0 && matching1 = 0 && matching2 = 0
f2490_0_main_Inc(EOS(STATIC_2490), i495, matching1) -> f2502_0_main_JMP(EOS(STATIC_2502), i495 + -1, 0) :|: TRUE && matching1 = 0
f2502_0_main_JMP(EOS(STATIC_2502), i509, matching1) -> f2746_0_main_Load(EOS(STATIC_2746), i509, 0) :|: TRUE && matching1 = 0
f2746_0_main_Load(EOS(STATIC_2746), i509, matching1) -> f2342_0_main_Load(EOS(STATIC_2342), i509, 0) :|: TRUE && matching1 = 0
f2342_0_main_Load(EOS(STATIC_2342), i104, i105) -> f2398_0_main_LE(EOS(STATIC_2398), i104, i105, i104) :|: TRUE
f2483_0_main_LE(EOS(STATIC_2483), i495, i505, i505) -> f2493_0_main_Inc(EOS(STATIC_2493), i495, i505) :|: i505 > 0
f2493_0_main_Inc(EOS(STATIC_2493), i495, i505) -> f2507_0_main_JMP(EOS(STATIC_2507), i495, i505 + -1) :|: TRUE
f2507_0_main_JMP(EOS(STATIC_2507), i495, i511) -> f2851_0_main_Load(EOS(STATIC_2851), i495, i511) :|: TRUE
f2851_0_main_Load(EOS(STATIC_2851), i495, i511) -> f2442_0_main_Load(EOS(STATIC_2442), i495, i511) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f2463_0_main_LE(EOS(STATIC_2463), i495:0, i505:0, i505:0) -> f2463_0_main_LE(EOS(STATIC_2463), i495:0, i505:0 - 1, i505:0 - 1) :|: i505:0 > 0
f2463_0_main_LE(EOS(STATIC_2463), i495:0, 0, 0) -> f2463_0_main_LE(EOS(STATIC_2463), i495:0 - 1, 0, 0) :|: i495:0 > 1
Filtered constant ground arguments:
   f2463_0_main_LE(x1, x2, x3, x4) -> f2463_0_main_LE(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f2463_0_main_LE(x1, x2, x3) -> f2463_0_main_LE(x1, x3)
Finished conversion. Obtained 2 rules.P rules:
f2463_0_main_LE(i495:0, i505:0) -> f2463_0_main_LE(i495:0, i505:0 - 1) :|: i505:0 > 0
f2463_0_main_LE(i495:0, cons_0) -> f2463_0_main_LE(i495:0 - 1, 0) :|: i495:0 > 1 && cons_0 = 0

----------------------------------------

(8)
Obligation:
Rules:
f2463_0_main_LE(i495:0, i505:0) -> f2463_0_main_LE(i495:0, i505:0 - 1) :|: i505:0 > 0
f2463_0_main_LE(x, x1) -> f2463_0_main_LE(x - 1, 0) :|: x > 1 && x1 = 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f2463_0_main_LE(i495:0, i505:0) -> f2463_0_main_LE(i495:0, arith) :|: i505:0 > 0 && arith = i505:0 - 1
f2463_0_main_LE(x2, x3) -> f2463_0_main_LE(x4, 0) :|: x2 > 1 && x3 = 0 && x4 = x2 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2463_0_main_LE(i495:0, i505:0) -> f2463_0_main_LE(i495:0, arith) :|: i505:0 > 0 && arith = i505:0 - 1
(2) f2463_0_main_LE(x2, x3) -> f2463_0_main_LE(x4, 0) :|: x2 > 1 && x3 = 0 && x4 = x2 - 1

Arcs:
(1) -> (1), (2)
(2) -> (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f2463_0_main_LE(i495:0, i505:0) -> f2463_0_main_LE(i495:0, arith) :|: i505:0 > 0 && arith = i505:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f2463_0_main_LE(i495:0:0, i505:0:0) -> f2463_0_main_LE(i495:0:0, i505:0:0 - 1) :|: i505:0:0 > 0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f2463_0_main_LE(x1, x2) -> f2463_0_main_LE(x2)

----------------------------------------

(17)
Obligation:
Rules:
f2463_0_main_LE(i505:0:0) -> f2463_0_main_LE(i505:0:0 - 1) :|: i505:0:0 > 0

----------------------------------------

(18) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2463_0_main_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(19)
Obligation:
Rules:
f2463_0_main_LE(i505:0:0) -> f2463_0_main_LE(c) :|: c = i505:0:0 - 1 && i505:0:0 > 0

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f2463_0_main_LE(x)] = x

The following rules are decreasing:
f2463_0_main_LE(i505:0:0) -> f2463_0_main_LE(c) :|: c = i505:0:0 - 1 && i505:0:0 > 0
The following rules are bounded:
f2463_0_main_LE(i505:0:0) -> f2463_0_main_LE(c) :|: c = i505:0:0 - 1 && i505:0:0 > 0

----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:

Termination digraph:
Nodes:
(1) f2463_0_main_LE(x2, x3) -> f2463_0_main_LE(x4, 0) :|: x2 > 1 && x3 = 0 && x4 = x2 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f2463_0_main_LE(x2:0, cons_0) -> f2463_0_main_LE(x2:0 - 1, 0) :|: x2:0 > 1 && cons_0 = 0

----------------------------------------

(25) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2463_0_main_LE(INTEGER, VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(26)
Obligation:
Rules:
f2463_0_main_LE(x2:0, c) -> f2463_0_main_LE(c1, c2) :|: c2 = 0 && (c1 = x2:0 - 1 && c = 0) && (x2:0 > 1 && cons_0 = 0)

----------------------------------------

(27) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f2463_0_main_LE(x, x1)] = x + c1*x1

The following rules are decreasing:
f2463_0_main_LE(x2:0, c) -> f2463_0_main_LE(c1, c2) :|: c2 = 0 && (c1 = x2:0 - 1 && c = 0) && (x2:0 > 1 && cons_0 = 0)
The following rules are bounded:
f2463_0_main_LE(x2:0, c) -> f2463_0_main_LE(c1, c2) :|: c2 = 0 && (c1 = x2:0 - 1 && c = 0) && (x2:0 > 1 && cons_0 = 0)

----------------------------------------

(28)
YES
