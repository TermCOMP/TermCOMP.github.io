YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/F5RCC.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 130 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 46 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 19 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 8 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaA6 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();
        int z = Random.random();

        while (x > y + z) {
            y++;
            z++;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaA6 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();
        int z = Random.random();

        while (x > y + z) {
            y++;
            z++;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaA6.main([Ljava/lang/String;)V: Graph of 245 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaA6.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 10 IRulesP rules:
f508_0_main_Load(EOS(STATIC_508), i83, i84, i85, i83) -> f511_0_main_Load(EOS(STATIC_511), i83, i84, i85, i83, i84) :|: TRUE
f511_0_main_Load(EOS(STATIC_511), i83, i84, i85, i83, i84) -> f516_0_main_IntArithmetic(EOS(STATIC_516), i83, i84, i85, i83, i84, i85) :|: TRUE
f516_0_main_IntArithmetic(EOS(STATIC_516), i83, i84, i85, i83, i84, i85) -> f520_0_main_LE(EOS(STATIC_520), i83, i84, i85, i83, i84 + i85) :|: i84 >= 0 && i85 >= 0
f520_0_main_LE(EOS(STATIC_520), i83, i84, i85, i83, i92) -> f532_0_main_LE(EOS(STATIC_532), i83, i84, i85, i83, i92) :|: i83 > i92
f532_0_main_LE(EOS(STATIC_532), i83, i84, i85, i83, i92) -> f538_0_main_Inc(EOS(STATIC_538), i83, i84, i85) :|: i83 > i92
f538_0_main_Inc(EOS(STATIC_538), i83, i84, i85) -> f545_0_main_Inc(EOS(STATIC_545), i83, i84 + 1, i85) :|: TRUE
f545_0_main_Inc(EOS(STATIC_545), i83, i97, i85) -> f550_0_main_JMP(EOS(STATIC_550), i83, i97, i85 + 1) :|: TRUE
f550_0_main_JMP(EOS(STATIC_550), i83, i97, i99) -> f556_0_main_Load(EOS(STATIC_556), i83, i97, i99) :|: TRUE
f556_0_main_Load(EOS(STATIC_556), i83, i97, i99) -> f496_0_main_Load(EOS(STATIC_496), i83, i97, i99) :|: TRUE
f496_0_main_Load(EOS(STATIC_496), i83, i84, i85) -> f508_0_main_Load(EOS(STATIC_508), i83, i84, i85, i83) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f508_0_main_Load(EOS(STATIC_508), i83:0, i84:0, i85:0, i83:0) -> f508_0_main_Load(EOS(STATIC_508), i83:0, i84:0 + 1, i85:0 + 1, i83:0) :|: i85:0 > -1 && i84:0 > -1 && i84:0 + i85:0 < i83:0
Filtered constant ground arguments:
   f508_0_main_Load(x1, x2, x3, x4, x5) -> f508_0_main_Load(x2, x3, x4, x5)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f508_0_main_Load(x1, x2, x3, x4) -> f508_0_main_Load(x2, x3, x4)
Finished conversion. Obtained 1 rules.P rules:
f508_0_main_Load(i84:0, i85:0, i83:0) -> f508_0_main_Load(i84:0 + 1, i85:0 + 1, i83:0) :|: i84:0 > -1 && i84:0 + i85:0 < i83:0 && i85:0 > -1

----------------------------------------

(8)
Obligation:
Rules:
f508_0_main_Load(i84:0, i85:0, i83:0) -> f508_0_main_Load(i84:0 + 1, i85:0 + 1, i83:0) :|: i84:0 > -1 && i84:0 + i85:0 < i83:0 && i85:0 > -1

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f508_0_main_Load(i84:0, i85:0, i83:0) -> f508_0_main_Load(arith, arith1, i83:0) :|: i84:0 > -1 && i84:0 + i85:0 < i83:0 && i85:0 > -1 && arith = i84:0 + 1 && arith1 = i85:0 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f508_0_main_Load(i84:0, i85:0, i83:0) -> f508_0_main_Load(arith, arith1, i83:0) :|: i84:0 > -1 && i84:0 + i85:0 < i83:0 && i85:0 > -1 && arith = i84:0 + 1 && arith1 = i85:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f508_0_main_Load(i84:0, i85:0, i83:0) -> f508_0_main_Load(arith, arith1, i83:0) :|: i84:0 > -1 && i84:0 + i85:0 < i83:0 && i85:0 > -1 && arith = i84:0 + 1 && arith1 = i85:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f508_0_main_Load(i84:0:0, i85:0:0, i83:0:0) -> f508_0_main_Load(i84:0:0 + 1, i85:0:0 + 1, i83:0:0) :|: i84:0:0 > -1 && i84:0:0 + i85:0:0 < i83:0:0 && i85:0:0 > -1

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f508_0_main_Load(INTEGER, INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f508_0_main_Load(i84:0:0, i85:0:0, i83:0:0) -> f508_0_main_Load(c, c1, i83:0:0) :|: c1 = i85:0:0 + 1 && c = i84:0:0 + 1 && (i84:0:0 > -1 && i84:0:0 + i85:0:0 < i83:0:0 && i85:0:0 > -1)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f508_0_main_Load(x, x1, x2)] = -x - x1 + x2

The following rules are decreasing:
f508_0_main_Load(i84:0:0, i85:0:0, i83:0:0) -> f508_0_main_Load(c, c1, i83:0:0) :|: c1 = i85:0:0 + 1 && c = i84:0:0 + 1 && (i84:0:0 > -1 && i84:0:0 + i85:0:0 < i83:0:0 && i85:0:0 > -1)
The following rules are bounded:
f508_0_main_Load(i84:0:0, i85:0:0, i83:0:0) -> f508_0_main_Load(c, c1, i83:0:0) :|: c1 = i85:0:0 + 1 && c = i84:0:0 + 1 && (i84:0:0 > -1 && i84:0:0 + i85:0:0 < i83:0:0 && i85:0:0 > -1)

----------------------------------------

(18)
YES
