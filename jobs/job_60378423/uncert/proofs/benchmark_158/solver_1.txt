NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/E5GYP.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 95 ms]
(4) JBCTerminationGraph
(5) JBCNonTerm [COMPLETE, 36 ms]
(6) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.whileNested;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		WhileNested.increase(args.length);

	}

}


package simple.whileNested;

public class WhileNested {

	public static void increase(int i) {
		int j;
		while (i < 10) {
			j = i;
			while (j > 0) {
				j++;
			}
			i++;
		}
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.whileNested;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		WhileNested.increase(args.length);

	}

}


package simple.whileNested;

public class WhileNested {

	public static void increase(int i) {
		int j;
		while (i < 10) {
			j = i;
			while (j > 0) {
				j++;
			}
			i++;
		}
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
simple.whileNested.Main.main([Ljava/lang/String;)V: Graph of 27 nodes with 1 SCC.





----------------------------------------

(5) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<simple.whileNested.Main.main||0: load ADDR args||args: a32|| ->
	a32([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
1:<simple.whileNested.Main.main||1: arraylength|| - ||a32>
	a32([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
2:<simple.whileNested.Main.main||2: simple.whileNested.WhileNested.increase(I)V|| - ||1>
YES:  (JL1)
3:<simple.whileNested.WhileNested.increase||0: load INT i||i: 1|| ->
<simple.whileNested.Main.main||2: simple.whileNested.WhileNested.increase|| - || ->
YES:  (JL1)
4:<simple.whileNested.WhileNested.increase||1: push 10||i: 1||1>
<simple.whileNested.Main.main||2: simple.whileNested.WhileNested.increase|| - || ->
YES:  (JL1)
5:<simple.whileNested.WhileNested.increase||3: GE||i: 1||1, 10>
<simple.whileNested.Main.main||2: simple.whileNested.WhileNested.increase|| - || ->
YES:  (JL1)
6:<simple.whileNested.WhileNested.increase||6: load INT i||i: 1|| ->
<simple.whileNested.Main.main||2: simple.whileNested.WhileNested.increase|| - || ->
YES:  (JL1)
7:<simple.whileNested.WhileNested.increase||7: store INT to j||i: 1||1>
<simple.whileNested.Main.main||2: simple.whileNested.WhileNested.increase|| - || ->
YES:  (JL1)
8:<simple.whileNested.WhileNested.increase||8: load INT j||i: 1, j: 1|| ->
<simple.whileNested.Main.main||2: simple.whileNested.WhileNested.increase|| - || ->
YES:  (JL1)
Start state of loop: 

<simple.whileNested.WhileNested.increase||8: load INT j||i: i66, j: i67|| ->
[a12(lv_0_0)]
<simple.whileNested.Main.main||2: simple.whileNested.WhileNested.increase|| - || ->
	i66: [0,9](3,2){0,+inf}
	i67: [0,+inf)(l3)
	i41: [0,+inf)
	a12([java.lang.String...]): length i41 -->{java.lang.Object...}
YES:  (JL1)


In the loop head node, references [i67, i66] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((0 <= initial_i66 and initial_i66 <= 9 and 0 <= initial_i67 and 0 <= initial_i41) and (((path1_i67 = path1_i634 and path1_i638 = (path1_i634 + 1) and path1_i66 = res_i66 and path1_i638 = res_i67 and path1_i66 = initial_i66 and path1_i67 = initial_i67) and path1_i634 > 0) and ((res1_i67 = res1_i634 and res1_i638 = (res1_i634 + 1) and res_i66 = res1_i66 and res_i67 = res1_i67) and !res1_i634 > 0)))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(6)
NO
