YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/152Kz.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 169 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 2 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 0 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 5 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 23 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Duplicate{

  public static int round (int x) {

    if (x % 2 == 0) return x;
    else return x+1;
  }


  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();

    while ((x > y) && (y > 2)) {
      x++;
      y = 2*y;

    }
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Duplicate{

  public static int round (int x) {

    if (x % 2 == 0) return x;
    else return x+1;
  }


  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();

    while ((x > y) && (y > 2)) {
      x++;
      y = 2*y;

    }
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Duplicate.main([Ljava/lang/String;)V: Graph of 185 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Duplicate.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 15 IRulesP rules:
f390_0_main_Load(EOS(STATIC_390), i54, i55, i54) -> f392_0_main_LE(EOS(STATIC_392), i54, i55, i54, i55) :|: TRUE
f392_0_main_LE(EOS(STATIC_392), i54, i55, i54, i55) -> f400_0_main_LE(EOS(STATIC_400), i54, i55, i54, i55) :|: i54 > i55
f400_0_main_LE(EOS(STATIC_400), i54, i55, i54, i55) -> f410_0_main_Load(EOS(STATIC_410), i54, i55) :|: i54 > i55
f410_0_main_Load(EOS(STATIC_410), i54, i55) -> f413_0_main_ConstantStackPush(EOS(STATIC_413), i54, i55, i55) :|: TRUE
f413_0_main_ConstantStackPush(EOS(STATIC_413), i54, i55, i55) -> f414_0_main_LE(EOS(STATIC_414), i54, i55, i55, 2) :|: TRUE
f414_0_main_LE(EOS(STATIC_414), i64, i63, i63, matching1) -> f416_0_main_LE(EOS(STATIC_416), i64, i63, i63, 2) :|: TRUE && matching1 = 2
f416_0_main_LE(EOS(STATIC_416), i64, i63, i63, matching1) -> f431_0_main_Inc(EOS(STATIC_431), i64, i63) :|: i63 > 2 && matching1 = 2
f431_0_main_Inc(EOS(STATIC_431), i64, i63) -> f435_0_main_ConstantStackPush(EOS(STATIC_435), i64 + 1, i63) :|: TRUE
f435_0_main_ConstantStackPush(EOS(STATIC_435), i67, i63) -> f436_0_main_Load(EOS(STATIC_436), i67, i63, 2) :|: TRUE
f436_0_main_Load(EOS(STATIC_436), i67, i63, matching1) -> f437_0_main_IntArithmetic(EOS(STATIC_437), i67, 2, i63) :|: TRUE && matching1 = 2
f437_0_main_IntArithmetic(EOS(STATIC_437), i67, matching1, i63) -> f438_0_main_Store(EOS(STATIC_438), i67, 2 * i63) :|: i63 > 1 && matching1 = 2
f438_0_main_Store(EOS(STATIC_438), i67, i68) -> f439_0_main_JMP(EOS(STATIC_439), i67, i68) :|: TRUE
f439_0_main_JMP(EOS(STATIC_439), i67, i68) -> f456_0_main_Load(EOS(STATIC_456), i67, i68) :|: TRUE
f456_0_main_Load(EOS(STATIC_456), i67, i68) -> f386_0_main_Load(EOS(STATIC_386), i67, i68) :|: TRUE
f386_0_main_Load(EOS(STATIC_386), i54, i55) -> f390_0_main_Load(EOS(STATIC_390), i54, i55, i54) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f390_0_main_Load(EOS(STATIC_390), i54:0, i55:0, i54:0) -> f390_0_main_Load(EOS(STATIC_390), i54:0 + 1, 2 * i55:0, i54:0 + 1) :|: i55:0 > 2 && i55:0 < i54:0
Filtered constant ground arguments:
   f390_0_main_Load(x1, x2, x3, x4) -> f390_0_main_Load(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f390_0_main_Load(x1, x2, x3) -> f390_0_main_Load(x2, x3)
Finished conversion. Obtained 1 rules.P rules:
f390_0_main_Load(i55:0, i54:0) -> f390_0_main_Load(2 * i55:0, i54:0 + 1) :|: i55:0 > 2 && i55:0 < i54:0

----------------------------------------

(8)
Obligation:
Rules:
f390_0_main_Load(i55:0, i54:0) -> f390_0_main_Load(2 * i55:0, i54:0 + 1) :|: i55:0 > 2 && i55:0 < i54:0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f390_0_main_Load(i55:0, i54:0) -> f390_0_main_Load(arith, arith1) :|: i55:0 > 2 && i55:0 < i54:0 && arith = 2 * i55:0 && arith1 = i54:0 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f390_0_main_Load(i55:0, i54:0) -> f390_0_main_Load(arith, arith1) :|: i55:0 > 2 && i55:0 < i54:0 && arith = 2 * i55:0 && arith1 = i54:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f390_0_main_Load(i55:0, i54:0) -> f390_0_main_Load(arith, arith1) :|: i55:0 > 2 && i55:0 < i54:0 && arith = 2 * i55:0 && arith1 = i54:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f390_0_main_Load(i55:0:0, i54:0:0) -> f390_0_main_Load(2 * i55:0:0, i54:0:0 + 1) :|: i55:0:0 > 2 && i55:0:0 < i54:0:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f390_0_main_Load(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f390_0_main_Load(i55:0:0, i54:0:0) -> f390_0_main_Load(c, c1) :|: c1 = i54:0:0 + 1 && c = 2 * i55:0:0 && (i55:0:0 > 2 && i55:0:0 < i54:0:0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f390_0_main_Load(x, x1)] = -x + x1

The following rules are decreasing:
f390_0_main_Load(i55:0:0, i54:0:0) -> f390_0_main_Load(c, c1) :|: c1 = i54:0:0 + 1 && c = 2 * i55:0:0 && (i55:0:0 > 2 && i55:0:0 < i54:0:0)
The following rules are bounded:
f390_0_main_Load(i55:0:0, i54:0:0) -> f390_0_main_Load(c, c1) :|: c1 = i54:0:0 + 1 && c = 2 * i55:0:0 && (i55:0:0 > 2 && i55:0:0 < i54:0:0)

----------------------------------------

(18)
YES
