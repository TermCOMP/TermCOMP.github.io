YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/8CBDq.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 273 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) JBCTerminationSCC
        (8) SCCToIRSProof [SOUND, 23 ms]
        (9) IRSwT
        (10) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (11) IRSwT
        (12) IRSwTTerminationDigraphProof [EQUIVALENT, 8 ms]
        (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) TempFilterProof [SOUND, 9 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (19) YES
    (20) JBCTerminationSCC
        (21) SCCToIRSProof [SOUND, 35 ms]
        (22) IRSwT
        (23) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (24) IRSwT
        (25) IRSwTTerminationDigraphProof [EQUIVALENT, 7 ms]
        (26) IRSwT
        (27) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (28) IRSwT
        (29) TempFilterProof [SOUND, 2 ms]
        (30) IntTRS
        (31) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
        (32) YES
    (33) JBCTerminationSCC
        (34) SCCToIRSProof [SOUND, 12 ms]
        (35) IRSwT
        (36) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (37) IRSwT
        (38) IRSwTTerminationDigraphProof [EQUIVALENT, 12 ms]
        (39) IRSwT
        (40) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (41) IRSwT
        (42) TempFilterProof [SOUND, 13 ms]
        (43) IntTRS
        (44) RankingReductionPairProof [EQUIVALENT, 7 ms]
        (45) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class ListContentArbitrary{

  public static void main(String[] args) {
    Random.args = args;
    IntList l = IntList.createIntList();
    int n = Random.random();
    int m = l.nth(n);

    while (m > 0) m--;
  }

}

class IntList {
  int value;
  IntList next;

  public IntList(int value, IntList next) {
    this.value = value;
    this.next = next;
  }

  public static IntList createIntList() {

    int i = Random.random();
    IntList l = null;

    while (i > 0) {
      l = new IntList(Random.random(), l);
      i--;
    }

    return l;
  }

  public int nth(int n){

    IntList l = this;

    while (n > 1) {
      n--;
      l = l.next;
    }

    return l.value;
  }
}



public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class ListContentArbitrary{

  public static void main(String[] args) {
    Random.args = args;
    IntList l = IntList.createIntList();
    int n = Random.random();
    int m = l.nth(n);

    while (m > 0) m--;
  }

}

class IntList {
  int value;
  IntList next;

  public IntList(int value, IntList next) {
    this.value = value;
    this.next = next;
  }

  public static IntList createIntList() {

    int i = Random.random();
    IntList l = null;

    while (i > 0) {
      l = new IntList(Random.random(), l);
      i--;
    }

    return l;
  }

  public int nth(int n){

    IntList l = this;

    while (n > 1) {
      n--;
      l = l.next;
    }

    return l.value;
  }
}



public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
ListContentArbitrary.main([Ljava/lang/String;)V: Graph of 192 nodes with 2 SCCs.



IntList.createIntList()LIntList;: Graph of 277 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 3 SCCss.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: IntList.createIntList()LIntList;
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*java.lang.String: [count]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(8) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 39 IRulesP rules:
f3139_0_createIntList_LE(EOS(STATIC_3139(java.lang.Object(ARRAY(i6)))), i649, i649) -> f3158_0_createIntList_LE(EOS(STATIC_3158(java.lang.Object(ARRAY(i6)))), i649, i649) :|: TRUE
f3158_0_createIntList_LE(EOS(STATIC_3158(java.lang.Object(ARRAY(i6)))), i649, i649) -> f3182_0_createIntList_New(EOS(STATIC_3182(java.lang.Object(ARRAY(i6)))), i649) :|: i649 > 0
f3182_0_createIntList_New(EOS(STATIC_3182(java.lang.Object(ARRAY(i6)))), i649) -> f3191_0_createIntList_Duplicate(EOS(STATIC_3191(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f3191_0_createIntList_Duplicate(EOS(STATIC_3191(java.lang.Object(ARRAY(i6)))), i649) -> f3197_0_createIntList_InvokeMethod(EOS(STATIC_3197(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f3197_0_createIntList_InvokeMethod(EOS(STATIC_3197(java.lang.Object(ARRAY(i6)))), i649) -> f3229_0_random_FieldAccess(EOS(STATIC_3229(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f3229_0_random_FieldAccess(EOS(STATIC_3229(java.lang.Object(ARRAY(i6)))), i649) -> f3324_0_random_FieldAccess(EOS(STATIC_3324(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(ARRAY(i6))) :|: TRUE
f3324_0_random_FieldAccess(EOS(STATIC_3324(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(ARRAY(i6))) -> f3361_0_random_ArrayAccess(EOS(STATIC_3361(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(ARRAY(i6))) :|: TRUE
f3361_0_random_ArrayAccess(EOS(STATIC_3361(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(ARRAY(i6))) -> f3395_0_random_ArrayAccess(EOS(STATIC_3395(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(ARRAY(i6))) :|: TRUE
f3395_0_random_ArrayAccess(EOS(STATIC_3395(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(ARRAY(i6))) -> f3434_0_random_Store(EOS(STATIC_3434(java.lang.Object(ARRAY(i6)))), i649, o297) :|: TRUE
f3434_0_random_Store(EOS(STATIC_3434(java.lang.Object(ARRAY(i6)))), i649, o297) -> f3505_0_random_FieldAccess(EOS(STATIC_3505(java.lang.Object(ARRAY(i6)))), i649, o297) :|: TRUE
f3505_0_random_FieldAccess(EOS(STATIC_3505(java.lang.Object(ARRAY(i6)))), i649, o297) -> f3525_0_random_ConstantStackPush(EOS(STATIC_3525(java.lang.Object(ARRAY(i6)))), i649, o297) :|: TRUE
f3525_0_random_ConstantStackPush(EOS(STATIC_3525(java.lang.Object(ARRAY(i6)))), i649, o297) -> f3672_0_random_IntArithmetic(EOS(STATIC_3672(java.lang.Object(ARRAY(i6)))), i649, o297) :|: TRUE
f3672_0_random_IntArithmetic(EOS(STATIC_3672(java.lang.Object(ARRAY(i6)))), i649, o297) -> f3687_0_random_FieldAccess(EOS(STATIC_3687(java.lang.Object(ARRAY(i6)))), i649, o297) :|: TRUE
f3687_0_random_FieldAccess(EOS(STATIC_3687(java.lang.Object(ARRAY(i6)))), i649, o297) -> f3713_0_random_Load(EOS(STATIC_3713(java.lang.Object(ARRAY(i6)))), i649, o297) :|: TRUE
f3713_0_random_Load(EOS(STATIC_3713(java.lang.Object(ARRAY(i6)))), i649, o297) -> f3759_0_random_InvokeMethod(EOS(STATIC_3759(java.lang.Object(ARRAY(i6)))), i649, o297) :|: TRUE
f3759_0_random_InvokeMethod(EOS(STATIC_3759(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(o317sub)) -> f3796_0_random_InvokeMethod(EOS(STATIC_3796(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(o317sub)) :|: TRUE
f3796_0_random_InvokeMethod(EOS(STATIC_3796(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(o322sub)) -> f3813_0_random_InvokeMethod(EOS(STATIC_3813(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(o322sub)) :|: TRUE
f3813_0_random_InvokeMethod(EOS(STATIC_3813(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(o322sub)) -> f3841_0_length_Load(EOS(STATIC_3841(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(o322sub)) :|: TRUE
f3841_0_length_Load(EOS(STATIC_3841(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(o322sub)) -> f3895_0_length_FieldAccess(EOS(STATIC_3895(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(o322sub)) :|: TRUE
f3895_0_length_FieldAccess(EOS(STATIC_3895(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(java.lang.String(EOC, i823))) -> f3924_0_length_FieldAccess(EOS(STATIC_3924(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(java.lang.String(EOC, i823))) :|: TRUE
f3924_0_length_FieldAccess(EOS(STATIC_3924(java.lang.Object(ARRAY(i6)))), i649, java.lang.Object(java.lang.String(EOC, i823))) -> f3933_0_length_Return(EOS(STATIC_3933(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f3933_0_length_Return(EOS(STATIC_3933(java.lang.Object(ARRAY(i6)))), i649) -> f3938_0_random_Return(EOS(STATIC_3938(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f3938_0_random_Return(EOS(STATIC_3938(java.lang.Object(ARRAY(i6)))), i649) -> f3966_0_createIntList_Load(EOS(STATIC_3966(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f3966_0_createIntList_Load(EOS(STATIC_3966(java.lang.Object(ARRAY(i6)))), i649) -> f3973_0_createIntList_InvokeMethod(EOS(STATIC_3973(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f3973_0_createIntList_InvokeMethod(EOS(STATIC_3973(java.lang.Object(ARRAY(i6)))), i649) -> f3996_0__init__Load(EOS(STATIC_3996(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f3996_0__init__Load(EOS(STATIC_3996(java.lang.Object(ARRAY(i6)))), i649) -> f4105_0__init__InvokeMethod(EOS(STATIC_4105(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f4105_0__init__InvokeMethod(EOS(STATIC_4105(java.lang.Object(ARRAY(i6)))), i649) -> f4137_0__init__Load(EOS(STATIC_4137(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f4137_0__init__Load(EOS(STATIC_4137(java.lang.Object(ARRAY(i6)))), i649) -> f4167_0__init__Load(EOS(STATIC_4167(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f4167_0__init__Load(EOS(STATIC_4167(java.lang.Object(ARRAY(i6)))), i649) -> f4199_0__init__FieldAccess(EOS(STATIC_4199(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f4199_0__init__FieldAccess(EOS(STATIC_4199(java.lang.Object(ARRAY(i6)))), i649) -> f4233_0__init__Load(EOS(STATIC_4233(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f4233_0__init__Load(EOS(STATIC_4233(java.lang.Object(ARRAY(i6)))), i649) -> f4250_0__init__Load(EOS(STATIC_4250(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f4250_0__init__Load(EOS(STATIC_4250(java.lang.Object(ARRAY(i6)))), i649) -> f4271_0__init__FieldAccess(EOS(STATIC_4271(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f4271_0__init__FieldAccess(EOS(STATIC_4271(java.lang.Object(ARRAY(i6)))), i649) -> f4304_0__init__Return(EOS(STATIC_4304(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f4304_0__init__Return(EOS(STATIC_4304(java.lang.Object(ARRAY(i6)))), i649) -> f4328_0_createIntList_Store(EOS(STATIC_4328(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f4328_0_createIntList_Store(EOS(STATIC_4328(java.lang.Object(ARRAY(i6)))), i649) -> f4347_0_createIntList_Inc(EOS(STATIC_4347(java.lang.Object(ARRAY(i6)))), i649) :|: TRUE
f4347_0_createIntList_Inc(EOS(STATIC_4347(java.lang.Object(ARRAY(i6)))), i649) -> f4352_0_createIntList_JMP(EOS(STATIC_4352(java.lang.Object(ARRAY(i6)))), i649 + -1) :|: TRUE
f4352_0_createIntList_JMP(EOS(STATIC_4352(java.lang.Object(ARRAY(i6)))), i918) -> f4419_0_createIntList_Load(EOS(STATIC_4419(java.lang.Object(ARRAY(i6)))), i918) :|: TRUE
f4419_0_createIntList_Load(EOS(STATIC_4419(java.lang.Object(ARRAY(i6)))), i918) -> f3044_0_createIntList_Load(EOS(STATIC_3044(java.lang.Object(ARRAY(i6)))), i918) :|: TRUE
f3044_0_createIntList_Load(EOS(STATIC_3044(java.lang.Object(ARRAY(i6)))), i602) -> f3139_0_createIntList_LE(EOS(STATIC_3139(java.lang.Object(ARRAY(i6)))), i602, i602) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f3139_0_createIntList_LE(EOS(STATIC_3139(java.lang.Object(ARRAY(i6:0)))), i649:0, i649:0) -> f3139_0_createIntList_LE(EOS(STATIC_3139(java.lang.Object(ARRAY(i6:0)))), i649:0 - 1, i649:0 - 1) :|: i649:0 > 0
Filtered duplicate arguments:
   f3139_0_createIntList_LE(x1, x2, x3) -> f3139_0_createIntList_LE(x1, x3)
Filtered unneeded arguments:
   f3139_0_createIntList_LE(x1, x2) -> f3139_0_createIntList_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f3139_0_createIntList_LE(i649:0) -> f3139_0_createIntList_LE(i649:0 - 1) :|: i649:0 > 0

----------------------------------------

(9)
Obligation:
Rules:
f3139_0_createIntList_LE(i649:0) -> f3139_0_createIntList_LE(i649:0 - 1) :|: i649:0 > 0

----------------------------------------

(10) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(11)
Obligation:
Rules:
f3139_0_createIntList_LE(i649:0) -> f3139_0_createIntList_LE(arith) :|: i649:0 > 0 && arith = i649:0 - 1

----------------------------------------

(12) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3139_0_createIntList_LE(i649:0) -> f3139_0_createIntList_LE(arith) :|: i649:0 > 0 && arith = i649:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f3139_0_createIntList_LE(i649:0) -> f3139_0_createIntList_LE(arith) :|: i649:0 > 0 && arith = i649:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f3139_0_createIntList_LE(i649:0:0) -> f3139_0_createIntList_LE(i649:0:0 - 1) :|: i649:0:0 > 0

----------------------------------------

(16) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3139_0_createIntList_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(17)
Obligation:
Rules:
f3139_0_createIntList_LE(i649:0:0) -> f3139_0_createIntList_LE(c) :|: c = i649:0:0 - 1 && i649:0:0 > 0

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f3139_0_createIntList_LE(x)] = x

The following rules are decreasing:
f3139_0_createIntList_LE(i649:0:0) -> f3139_0_createIntList_LE(c) :|: c = i649:0:0 - 1 && i649:0:0 > 0
The following rules are bounded:
f3139_0_createIntList_LE(i649:0:0) -> f3139_0_createIntList_LE(c) :|: c = i649:0:0 - 1 && i649:0:0 > 0

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: ListContentArbitrary.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(21) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 6 IRulesP rules:
f3764_0_main_LE(EOS(STATIC_3764), i788, i788) -> f3803_0_main_LE(EOS(STATIC_3803), i788, i788) :|: TRUE
f3803_0_main_LE(EOS(STATIC_3803), i788, i788) -> f3833_0_main_Inc(EOS(STATIC_3833), i788) :|: i788 > 0
f3833_0_main_Inc(EOS(STATIC_3833), i788) -> f3847_0_main_JMP(EOS(STATIC_3847), i788 + -1) :|: TRUE
f3847_0_main_JMP(EOS(STATIC_3847), i794) -> f3866_0_main_Load(EOS(STATIC_3866), i794) :|: TRUE
f3866_0_main_Load(EOS(STATIC_3866), i794) -> f3722_0_main_Load(EOS(STATIC_3722), i794) :|: TRUE
f3722_0_main_Load(EOS(STATIC_3722), i756) -> f3764_0_main_LE(EOS(STATIC_3764), i756, i756) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f3764_0_main_LE(EOS(STATIC_3764), i788:0, i788:0) -> f3764_0_main_LE(EOS(STATIC_3764), i788:0 - 1, i788:0 - 1) :|: i788:0 > 0
Filtered constant ground arguments:
   f3764_0_main_LE(x1, x2, x3) -> f3764_0_main_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f3764_0_main_LE(x1, x2) -> f3764_0_main_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f3764_0_main_LE(i788:0) -> f3764_0_main_LE(i788:0 - 1) :|: i788:0 > 0

----------------------------------------

(22)
Obligation:
Rules:
f3764_0_main_LE(i788:0) -> f3764_0_main_LE(i788:0 - 1) :|: i788:0 > 0

----------------------------------------

(23) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(24)
Obligation:
Rules:
f3764_0_main_LE(i788:0) -> f3764_0_main_LE(arith) :|: i788:0 > 0 && arith = i788:0 - 1

----------------------------------------

(25) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3764_0_main_LE(i788:0) -> f3764_0_main_LE(arith) :|: i788:0 > 0 && arith = i788:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(26)
Obligation:

Termination digraph:
Nodes:
(1) f3764_0_main_LE(i788:0) -> f3764_0_main_LE(arith) :|: i788:0 > 0 && arith = i788:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(27) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(28)
Obligation:
Rules:
f3764_0_main_LE(i788:0:0) -> f3764_0_main_LE(i788:0:0 - 1) :|: i788:0:0 > 0

----------------------------------------

(29) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3764_0_main_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(30)
Obligation:
Rules:
f3764_0_main_LE(i788:0:0) -> f3764_0_main_LE(c) :|: c = i788:0:0 - 1 && i788:0:0 > 0

----------------------------------------

(31) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f3764_0_main_LE(x)] = x

The following rules are decreasing:
f3764_0_main_LE(i788:0:0) -> f3764_0_main_LE(c) :|: c = i788:0:0 - 1 && i788:0:0 > 0
The following rules are bounded:
f3764_0_main_LE(i788:0:0) -> f3764_0_main_LE(c) :|: c = i788:0:0 - 1 && i788:0:0 > 0

----------------------------------------

(32)
YES

----------------------------------------

(33)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: ListContentArbitrary.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*IntList: [next]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(34) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 12 IRulesP rules:
f3310_0_nth_ConstantStackPush(EOS(STATIC_3310), i667, o290, i667) -> f3329_0_nth_LE(EOS(STATIC_3329), i667, o290, i667, 1) :|: TRUE
f3329_0_nth_LE(EOS(STATIC_3329), i701, o290, i701, matching1) -> f3383_0_nth_LE(EOS(STATIC_3383), i701, o290, i701, 1) :|: TRUE && matching1 = 1
f3383_0_nth_LE(EOS(STATIC_3383), i701, o290, i701, matching1) -> f3422_0_nth_Inc(EOS(STATIC_3422), i701, o290) :|: i701 > 1 && matching1 = 1
f3422_0_nth_Inc(EOS(STATIC_3422), i701, o290) -> f3471_0_nth_Load(EOS(STATIC_3471), i701 + -1, o290) :|: TRUE
f3471_0_nth_Load(EOS(STATIC_3471), i713, o290) -> f3513_0_nth_FieldAccess(EOS(STATIC_3513), i713, o290) :|: TRUE
f3513_0_nth_FieldAccess(EOS(STATIC_3513), i713, java.lang.Object(o307sub)) -> f3668_0_nth_FieldAccess(EOS(STATIC_3668), i713, java.lang.Object(o307sub)) :|: TRUE
f3668_0_nth_FieldAccess(EOS(STATIC_3668), i713, java.lang.Object(IntList(EOC, o309))) -> f3676_0_nth_FieldAccess(EOS(STATIC_3676), i713, java.lang.Object(IntList(EOC, o309))) :|: TRUE
f3676_0_nth_FieldAccess(EOS(STATIC_3676), i713, java.lang.Object(IntList(EOC, o309))) -> f3703_0_nth_Store(EOS(STATIC_3703), i713, o309) :|: TRUE
f3703_0_nth_Store(EOS(STATIC_3703), i713, o309) -> f3728_0_nth_JMP(EOS(STATIC_3728), i713, o309) :|: TRUE
f3728_0_nth_JMP(EOS(STATIC_3728), i713, o309) -> f3787_0_nth_Load(EOS(STATIC_3787), i713, o309) :|: TRUE
f3787_0_nth_Load(EOS(STATIC_3787), i713, o309) -> f3269_0_nth_Load(EOS(STATIC_3269), i713, o309) :|: TRUE
f3269_0_nth_Load(EOS(STATIC_3269), i667, o290) -> f3310_0_nth_ConstantStackPush(EOS(STATIC_3310), i667, o290, i667) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f3310_0_nth_ConstantStackPush(EOS(STATIC_3310), i667:0, java.lang.Object(IntList(EOC, o309:0)), i667:0) -> f3310_0_nth_ConstantStackPush(EOS(STATIC_3310), i667:0 - 1, o309:0, i667:0 - 1) :|: i667:0 > 1
Filtered constant ground arguments:
   f3310_0_nth_ConstantStackPush(x1, x2, x3, x4) -> f3310_0_nth_ConstantStackPush(x2, x3, x4)
   EOS(x1) -> EOS
   IntList(x1, x2) -> IntList(x2)
Filtered duplicate arguments:
   f3310_0_nth_ConstantStackPush(x1, x2, x3) -> f3310_0_nth_ConstantStackPush(x2, x3)
Finished conversion. Obtained 1 rules.P rules:
f3310_0_nth_ConstantStackPush(java.lang.Object(IntList(o309:0)), i667:0) -> f3310_0_nth_ConstantStackPush(o309:0, i667:0 - 1) :|: i667:0 > 1

----------------------------------------

(35)
Obligation:
Rules:
f3310_0_nth_ConstantStackPush(java.lang.Object(IntList(o309:0)), i667:0) -> f3310_0_nth_ConstantStackPush(o309:0, i667:0 - 1) :|: i667:0 > 1

----------------------------------------

(36) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(37)
Obligation:
Rules:
f3310_0_nth_ConstantStackPush(java.lang.Object(IntList(o309:0)), i667:0) -> f3310_0_nth_ConstantStackPush(o309:0, arith) :|: i667:0 > 1 && arith = i667:0 - 1

----------------------------------------

(38) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3310_0_nth_ConstantStackPush(java.lang.Object(IntList(o309:0)), i667:0) -> f3310_0_nth_ConstantStackPush(o309:0, arith) :|: i667:0 > 1 && arith = i667:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(39)
Obligation:

Termination digraph:
Nodes:
(1) f3310_0_nth_ConstantStackPush(java.lang.Object(IntList(o309:0)), i667:0) -> f3310_0_nth_ConstantStackPush(o309:0, arith) :|: i667:0 > 1 && arith = i667:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(40) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(41)
Obligation:
Rules:
f3310_0_nth_ConstantStackPush(java.lang.Object(IntList(o309:0:0)), i667:0:0) -> f3310_0_nth_ConstantStackPush(o309:0:0, i667:0:0 - 1) :|: i667:0:0 > 1

----------------------------------------

(42) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3310_0_nth_ConstantStackPush(VARIABLE, INTEGER)
java.lang.Object(VARIABLE)
IntList(VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(43)
Obligation:
Rules:
f3310_0_nth_ConstantStackPush(c, i667:0:0) -> f3310_0_nth_ConstantStackPush(o309:0:0, c1) :|: c1 = i667:0:0 - 1 && c = 0 && i667:0:0 > 1

----------------------------------------

(44) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f3310_0_nth_ConstantStackPush ] = f3310_0_nth_ConstantStackPush_2

The following rules are decreasing:
f3310_0_nth_ConstantStackPush(c, i667:0:0) -> f3310_0_nth_ConstantStackPush(o309:0:0, c1) :|: c1 = i667:0:0 - 1 && c = 0 && i667:0:0 > 1

The following rules are bounded:
f3310_0_nth_ConstantStackPush(c, i667:0:0) -> f3310_0_nth_ConstantStackPush(o309:0:0, c1) :|: c1 = i667:0:0 - 1 && c = 0 && i667:0:0 > 1


----------------------------------------

(45)
YES
