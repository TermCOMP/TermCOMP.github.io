YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/cnqPM.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 220 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 73 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 13 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 36 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class PlusSwap{
  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    int z;
    int res = 0;

    while (y > 0) {

      z = x;
      x = y-1;
      y = z;
      res++;

    }

    res = res + x;
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class PlusSwap{
  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    int z;
    int res = 0;

    while (y > 0) {

      z = x;
      x = y-1;
      y = z;
      res++;

    }

    res = res + x;
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PlusSwap.main([Ljava/lang/String;)V: Graph of 190 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PlusSwap.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 14 IRulesP rules:
f2826_0_main_LE(EOS(STATIC_2826), i419, i444, i444) -> f2832_0_main_LE(EOS(STATIC_2832), i419, i444, i444) :|: TRUE
f2832_0_main_LE(EOS(STATIC_2832), i419, i444, i444) -> f2839_0_main_Load(EOS(STATIC_2839), i419, i444) :|: i444 > 0
f2839_0_main_Load(EOS(STATIC_2839), i419, i444) -> f2844_0_main_Store(EOS(STATIC_2844), i444, i419) :|: TRUE
f2844_0_main_Store(EOS(STATIC_2844), i444, i419) -> f2924_0_main_Load(EOS(STATIC_2924), i444, i419) :|: TRUE
f2924_0_main_Load(EOS(STATIC_2924), i444, i419) -> f2929_0_main_ConstantStackPush(EOS(STATIC_2929), i419, i444) :|: TRUE
f2929_0_main_ConstantStackPush(EOS(STATIC_2929), i419, i444) -> f2936_0_main_IntArithmetic(EOS(STATIC_2936), i419, i444, 1) :|: TRUE
f2936_0_main_IntArithmetic(EOS(STATIC_2936), i419, i444, matching1) -> f2943_0_main_Store(EOS(STATIC_2943), i419, i444 - 1) :|: i444 > 0 && matching1 = 1
f2943_0_main_Store(EOS(STATIC_2943), i419, i460) -> f2945_0_main_Load(EOS(STATIC_2945), i460, i419) :|: TRUE
f2945_0_main_Load(EOS(STATIC_2945), i460, i419) -> f2948_0_main_Store(EOS(STATIC_2948), i460, i419) :|: TRUE
f2948_0_main_Store(EOS(STATIC_2948), i460, i419) -> f2950_0_main_Inc(EOS(STATIC_2950), i460, i419) :|: TRUE
f2950_0_main_Inc(EOS(STATIC_2950), i460, i419) -> f2954_0_main_JMP(EOS(STATIC_2954), i460, i419) :|: TRUE
f2954_0_main_JMP(EOS(STATIC_2954), i460, i419) -> f3091_0_main_Load(EOS(STATIC_3091), i460, i419) :|: TRUE
f3091_0_main_Load(EOS(STATIC_3091), i460, i419) -> f2815_0_main_Load(EOS(STATIC_2815), i460, i419) :|: TRUE
f2815_0_main_Load(EOS(STATIC_2815), i419, i420) -> f2826_0_main_LE(EOS(STATIC_2826), i419, i420, i420) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f2826_0_main_LE(EOS(STATIC_2826), i419:0, i444:0, i444:0) -> f2826_0_main_LE(EOS(STATIC_2826), i444:0 - 1, i419:0, i419:0) :|: i444:0 > 0
Filtered constant ground arguments:
   f2826_0_main_LE(x1, x2, x3, x4) -> f2826_0_main_LE(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f2826_0_main_LE(x1, x2, x3) -> f2826_0_main_LE(x1, x3)
Finished conversion. Obtained 1 rules.P rules:
f2826_0_main_LE(i419:0, i444:0) -> f2826_0_main_LE(i444:0 - 1, i419:0) :|: i444:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f2826_0_main_LE(i419:0, i444:0) -> f2826_0_main_LE(i444:0 - 1, i419:0) :|: i444:0 > 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f2826_0_main_LE(i419:0, i444:0) -> f2826_0_main_LE(arith, i419:0) :|: i444:0 > 0 && arith = i444:0 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2826_0_main_LE(i419:0, i444:0) -> f2826_0_main_LE(arith, i419:0) :|: i444:0 > 0 && arith = i444:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f2826_0_main_LE(i419:0, i444:0) -> f2826_0_main_LE(arith, i419:0) :|: i444:0 > 0 && arith = i444:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f2826_0_main_LE(i419:0:0, i444:0:0) -> f2826_0_main_LE(i444:0:0 - 1, i419:0:0) :|: i444:0:0 > 0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2826_0_main_LE(VARIABLE, VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f2826_0_main_LE(i419:0:0, i444:0:0) -> f2826_0_main_LE(c, i419:0:0) :|: c = i444:0:0 - 1 && i444:0:0 > 0

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f2826_0_main_LE(x, x1)] = x^2 + x1^2

The following rules are decreasing:
f2826_0_main_LE(i419:0:0, i444:0:0) -> f2826_0_main_LE(c, i419:0:0) :|: c = i444:0:0 - 1 && i444:0:0 > 0
The following rules are bounded:
f2826_0_main_LE(i419:0:0, i444:0:0) -> f2826_0_main_LE(c, i419:0:0) :|: c = i444:0:0 - 1 && i444:0:0 > 0

----------------------------------------

(18)
YES
