YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/BLnhg.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 247 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 73 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 19 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 46 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(18) IntTRS
(19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class DivWithoutMinus{
  // adaption of the algorithm from [Kolbe 95]
  public static void main(String[] args) {
    Random.args = args;

    int x = Random.random();
    int y = Random.random();
    int z = y;
    int res = 0;

    while (z > 0 && (y == 0 || y > 0 && x > 0))	{

      if (y == 0) {
        res++;
        y = z;
      }
      else {
        x--;
        y--;
      }
    }
  }
}



public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class DivWithoutMinus{
  // adaption of the algorithm from [Kolbe 95]
  public static void main(String[] args) {
    Random.args = args;

    int x = Random.random();
    int y = Random.random();
    int z = y;
    int res = 0;

    while (z > 0 && (y == 0 || y > 0 && x > 0))	{

      if (y == 0) {
        res++;
        y = z;
      }
      else {
        x--;
        y--;
      }
    }
  }
}



public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
DivWithoutMinus.main([Ljava/lang/String;)V: Graph of 202 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: DivWithoutMinus.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 26 IRulesP rules:
f3153_0_main_LE(EOS(STATIC_3153), i88, i488, i514, i514) -> f3159_0_main_LE(EOS(STATIC_3159), i88, i488, i514, i514) :|: TRUE
f3159_0_main_LE(EOS(STATIC_3159), i88, i488, i514, i514) -> f3165_0_main_Load(EOS(STATIC_3165), i88, i488, i514) :|: i514 > 0
f3165_0_main_Load(EOS(STATIC_3165), i88, i488, i514) -> f3169_0_main_EQ(EOS(STATIC_3169), i88, i488, i514, i488) :|: TRUE
f3169_0_main_EQ(EOS(STATIC_3169), i88, i515, i514, i515) -> f3174_0_main_EQ(EOS(STATIC_3174), i88, i515, i514, i515) :|: TRUE
f3169_0_main_EQ(EOS(STATIC_3169), i88, matching1, i514, matching2) -> f3175_0_main_EQ(EOS(STATIC_3175), i88, 0, i514, 0) :|: TRUE && matching1 = 0 && matching2 = 0
f3174_0_main_EQ(EOS(STATIC_3174), i88, i515, i514, i515) -> f3179_0_main_Load(EOS(STATIC_3179), i88, i515, i514) :|: i515 > 0
f3179_0_main_Load(EOS(STATIC_3179), i88, i515, i514) -> f3185_0_main_LE(EOS(STATIC_3185), i88, i515, i514, i515) :|: TRUE
f3185_0_main_LE(EOS(STATIC_3185), i88, i515, i514, i515) -> f3191_0_main_Load(EOS(STATIC_3191), i88, i515, i514) :|: i515 > 0
f3191_0_main_Load(EOS(STATIC_3191), i88, i515, i514) -> f3197_0_main_LE(EOS(STATIC_3197), i88, i515, i514, i88) :|: TRUE
f3197_0_main_LE(EOS(STATIC_3197), i517, i515, i514, i517) -> f3206_0_main_LE(EOS(STATIC_3206), i517, i515, i514, i517) :|: TRUE
f3206_0_main_LE(EOS(STATIC_3206), i517, i515, i514, i517) -> f3229_0_main_Load(EOS(STATIC_3229), i517, i515, i514) :|: i517 > 0
f3229_0_main_Load(EOS(STATIC_3229), i517, i515, i514) -> f3236_0_main_NE(EOS(STATIC_3236), i517, i515, i514, i515) :|: TRUE
f3236_0_main_NE(EOS(STATIC_3236), i517, i515, i514, i515) -> f3388_0_main_Inc(EOS(STATIC_3388), i517, i515, i514) :|: i515 > 0
f3388_0_main_Inc(EOS(STATIC_3388), i517, i515, i514) -> f3392_0_main_Inc(EOS(STATIC_3392), i517 + -1, i515, i514) :|: TRUE
f3392_0_main_Inc(EOS(STATIC_3392), i558, i515, i514) -> f3397_0_main_JMP(EOS(STATIC_3397), i558, i515 + -1, i514) :|: TRUE
f3397_0_main_JMP(EOS(STATIC_3397), i558, i559, i514) -> f3825_0_main_Load(EOS(STATIC_3825), i558, i559, i514) :|: TRUE
f3825_0_main_Load(EOS(STATIC_3825), i558, i559, i514) -> f3146_0_main_Load(EOS(STATIC_3146), i558, i559, i514) :|: TRUE
f3146_0_main_Load(EOS(STATIC_3146), i88, i488, i489) -> f3153_0_main_LE(EOS(STATIC_3153), i88, i488, i489, i489) :|: TRUE
f3175_0_main_EQ(EOS(STATIC_3175), i88, matching1, i514, matching2) -> f3182_0_main_Load(EOS(STATIC_3182), i88, 0, i514) :|: TRUE && matching1 = 0 && matching2 = 0
f3182_0_main_Load(EOS(STATIC_3182), i88, matching1, i514) -> f3188_0_main_NE(EOS(STATIC_3188), i88, 0, i514, 0) :|: TRUE && matching1 = 0
f3188_0_main_NE(EOS(STATIC_3188), i88, matching1, i514, matching2) -> f3195_0_main_Inc(EOS(STATIC_3195), i88, i514) :|: TRUE && matching1 = 0 && matching2 = 0
f3195_0_main_Inc(EOS(STATIC_3195), i88, i514) -> f3201_0_main_Load(EOS(STATIC_3201), i88, i514) :|: TRUE
f3201_0_main_Load(EOS(STATIC_3201), i88, i514) -> f3207_0_main_Store(EOS(STATIC_3207), i88, i514, i514) :|: TRUE
f3207_0_main_Store(EOS(STATIC_3207), i88, i514, i514) -> f3231_0_main_JMP(EOS(STATIC_3231), i88, i514, i514) :|: TRUE
f3231_0_main_JMP(EOS(STATIC_3231), i88, i514, i514) -> f3381_0_main_Load(EOS(STATIC_3381), i88, i514, i514) :|: TRUE
f3381_0_main_Load(EOS(STATIC_3381), i88, i514, i514) -> f3146_0_main_Load(EOS(STATIC_3146), i88, i514, i514) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f3153_0_main_LE(EOS(STATIC_3153), i88:0, 0, i514:0, i514:0) -> f3153_0_main_LE(EOS(STATIC_3153), i88:0, i514:0, i514:0, i514:0) :|: i514:0 > 0
f3153_0_main_LE(EOS(STATIC_3153), i88:0, i488:0, i514:0, i514:0) -> f3153_0_main_LE(EOS(STATIC_3153), i88:0 - 1, i488:0 - 1, i514:0, i514:0) :|: i514:0 > 0 && i488:0 > 0 && i88:0 > 0
Filtered constant ground arguments:
   f3153_0_main_LE(x1, x2, x3, x4, x5) -> f3153_0_main_LE(x2, x3, x4, x5)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f3153_0_main_LE(x1, x2, x3, x4) -> f3153_0_main_LE(x1, x2, x4)
Finished conversion. Obtained 2 rules.P rules:
f3153_0_main_LE(i88:0, cons_0, i514:0) -> f3153_0_main_LE(i88:0, i514:0, i514:0) :|: i514:0 > 0 && cons_0 = 0
f3153_0_main_LE(i88:0, i488:0, i514:0) -> f3153_0_main_LE(i88:0 - 1, i488:0 - 1, i514:0) :|: i488:0 > 0 && i88:0 > 0 && i514:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f3153_0_main_LE(i88:0, cons_0, i514:0) -> f3153_0_main_LE(i88:0, i514:0, i514:0) :|: i514:0 > 0 && cons_0 = 0
f3153_0_main_LE(x, x1, x2) -> f3153_0_main_LE(x - 1, x1 - 1, x2) :|: x1 > 0 && x > 0 && x2 > 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f3153_0_main_LE(i88:0, cons_0, i514:0) -> f3153_0_main_LE(i88:0, i514:0, i514:0) :|: i514:0 > 0 && cons_0 = 0
f3153_0_main_LE(x, x1, x2) -> f3153_0_main_LE(arith, arith1, x2) :|: x1 > 0 && x > 0 && x2 > 0 && arith = x - 1 && arith1 = x1 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3153_0_main_LE(i88:0, cons_0, i514:0) -> f3153_0_main_LE(i88:0, i514:0, i514:0) :|: i514:0 > 0 && cons_0 = 0
(2) f3153_0_main_LE(x, x1, x2) -> f3153_0_main_LE(arith, arith1, x2) :|: x1 > 0 && x > 0 && x2 > 0 && arith = x - 1 && arith1 = x1 - 1

Arcs:
(1) -> (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f3153_0_main_LE(i88:0, cons_0, i514:0) -> f3153_0_main_LE(i88:0, i514:0, i514:0) :|: i514:0 > 0 && cons_0 = 0
(2) f3153_0_main_LE(x, x1, x2) -> f3153_0_main_LE(arith, arith1, x2) :|: x1 > 0 && x > 0 && x2 > 0 && arith = x - 1 && arith1 = x1 - 1

Arcs:
(1) -> (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f3153_0_main_LE(x:0, x1:0, x2:0) -> f3153_0_main_LE(x:0 - 1, x1:0 - 1, x2:0) :|: x1:0 > 0 && x:0 > 0 && x2:0 > 0
f3153_0_main_LE(i88:0:0, cons_0, i514:0:0) -> f3153_0_main_LE(i88:0:0, i514:0:0, i514:0:0) :|: i514:0:0 > 0 && cons_0 = 0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3153_0_main_LE(VARIABLE, INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f3153_0_main_LE(x:0, x1:0, x2:0) -> f3153_0_main_LE(c, c1, x2:0) :|: c1 = x1:0 - 1 && c = x:0 - 1 && (x1:0 > 0 && x:0 > 0 && x2:0 > 0)
f3153_0_main_LE(i88:0:0, c2, i514:0:0) -> f3153_0_main_LE(i88:0:0, i514:0:0, i514:0:0) :|: c2 = 0 && (i514:0:0 > 0 && cons_0 = 0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f3153_0_main_LE(x, x1, x2)] = -1 + x

The following rules are decreasing:
f3153_0_main_LE(x:0, x1:0, x2:0) -> f3153_0_main_LE(c, c1, x2:0) :|: c1 = x1:0 - 1 && c = x:0 - 1 && (x1:0 > 0 && x:0 > 0 && x2:0 > 0)
The following rules are bounded:
f3153_0_main_LE(x:0, x1:0, x2:0) -> f3153_0_main_LE(c, c1, x2:0) :|: c1 = x1:0 - 1 && c = x:0 - 1 && (x1:0 > 0 && x:0 > 0 && x2:0 > 0)

----------------------------------------

(18)
Obligation:
Rules:
f3153_0_main_LE(i88:0:0, c2, i514:0:0) -> f3153_0_main_LE(i88:0:0, i514:0:0, i514:0:0) :|: c2 = 0 && (i514:0:0 > 0 && cons_0 = 0)

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f3153_0_main_LE(x, x1, x2)] = -x1

The following rules are decreasing:
f3153_0_main_LE(i88:0:0, c2, i514:0:0) -> f3153_0_main_LE(i88:0:0, i514:0:0, i514:0:0) :|: c2 = 0 && (i514:0:0 > 0 && cons_0 = 0)
The following rules are bounded:
f3153_0_main_LE(i88:0:0, c2, i514:0:0) -> f3153_0_main_LE(i88:0:0, i514:0:0, i514:0:0) :|: c2 = 0 && (i514:0:0 > 0 && cons_0 = 0)

----------------------------------------

(20)
YES
