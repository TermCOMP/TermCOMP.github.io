YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/RdUFx.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 180 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 73 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 19 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 34 ms]
(16) IntTRS
(17) RankingReductionPairProof [EQUIVALENT, 0 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class DivMinus {
  public static int div(int x, int y) {
    int res = 0;
    while (x >= y && y > 0) {
      x = x-y;
      res = res + 1;
    }
    return res;
  }

  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    div(x, y);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class DivMinus {
  public static int div(int x, int y) {
    int res = 0;
    while (x >= y && y > 0) {
      x = x-y;
      res = res + 1;
    }
    return res;
  }

  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    div(x, y);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
DivMinus.main([Ljava/lang/String;)V: Graph of 197 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: DivMinus.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 17 IRulesP rules:
f588_0_div_Load(EOS(STATIC_588), i86, i87, i86) -> f589_0_div_LT(EOS(STATIC_589), i86, i87, i86, i87) :|: TRUE
f589_0_div_LT(EOS(STATIC_589), i86, i87, i86, i87) -> f600_0_div_LT(EOS(STATIC_600), i86, i87, i86, i87) :|: i86 >= i87
f600_0_div_LT(EOS(STATIC_600), i86, i87, i86, i87) -> f604_0_div_Load(EOS(STATIC_604), i86, i87) :|: i86 >= i87
f604_0_div_Load(EOS(STATIC_604), i86, i87) -> f606_0_div_LE(EOS(STATIC_606), i86, i87, i87) :|: TRUE
f606_0_div_LE(EOS(STATIC_606), i96, i95, i95) -> f610_0_div_LE(EOS(STATIC_610), i96, i95, i95) :|: TRUE
f610_0_div_LE(EOS(STATIC_610), i96, i95, i95) -> f621_0_div_Load(EOS(STATIC_621), i96, i95) :|: i95 > 0
f621_0_div_Load(EOS(STATIC_621), i96, i95) -> f624_0_div_Load(EOS(STATIC_624), i95, i96) :|: TRUE
f624_0_div_Load(EOS(STATIC_624), i95, i96) -> f625_0_div_IntArithmetic(EOS(STATIC_625), i95, i96, i95) :|: TRUE
f625_0_div_IntArithmetic(EOS(STATIC_625), i95, i96, i95) -> f635_0_div_Store(EOS(STATIC_635), i95, i96 - i95) :|: i96 > 0 && i95 > 0
f635_0_div_Store(EOS(STATIC_635), i95, i98) -> f636_0_div_Load(EOS(STATIC_636), i98, i95) :|: TRUE
f636_0_div_Load(EOS(STATIC_636), i98, i95) -> f637_0_div_ConstantStackPush(EOS(STATIC_637), i98, i95) :|: TRUE
f637_0_div_ConstantStackPush(EOS(STATIC_637), i98, i95) -> f638_0_div_IntArithmetic(EOS(STATIC_638), i98, i95) :|: TRUE
f638_0_div_IntArithmetic(EOS(STATIC_638), i98, i95) -> f639_0_div_Store(EOS(STATIC_639), i98, i95) :|: TRUE
f639_0_div_Store(EOS(STATIC_639), i98, i95) -> f640_0_div_JMP(EOS(STATIC_640), i98, i95) :|: TRUE
f640_0_div_JMP(EOS(STATIC_640), i98, i95) -> f659_0_div_Load(EOS(STATIC_659), i98, i95) :|: TRUE
f659_0_div_Load(EOS(STATIC_659), i98, i95) -> f579_0_div_Load(EOS(STATIC_579), i98, i95) :|: TRUE
f579_0_div_Load(EOS(STATIC_579), i86, i87) -> f588_0_div_Load(EOS(STATIC_588), i86, i87, i86) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f588_0_div_Load(EOS(STATIC_588), i86:0, i87:0, i86:0) -> f588_0_div_Load(EOS(STATIC_588), i86:0 - i87:0, i87:0, i86:0 - i87:0) :|: i87:0 <= i86:0 && i87:0 > 0 && i86:0 > 0
Filtered constant ground arguments:
   f588_0_div_Load(x1, x2, x3, x4) -> f588_0_div_Load(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f588_0_div_Load(x1, x2, x3) -> f588_0_div_Load(x2, x3)
Finished conversion. Obtained 1 rules.P rules:
f588_0_div_Load(i87:0, i86:0) -> f588_0_div_Load(i87:0, i86:0 - i87:0) :|: i87:0 > 0 && i86:0 > 0 && i87:0 <= i86:0

----------------------------------------

(8)
Obligation:
Rules:
f588_0_div_Load(i87:0, i86:0) -> f588_0_div_Load(i87:0, i86:0 - i87:0) :|: i87:0 > 0 && i86:0 > 0 && i87:0 <= i86:0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f588_0_div_Load(i87:0, i86:0) -> f588_0_div_Load(i87:0, arith) :|: i87:0 > 0 && i86:0 > 0 && i87:0 <= i86:0 && arith = i86:0 - i87:0

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f588_0_div_Load(i87:0, i86:0) -> f588_0_div_Load(i87:0, arith) :|: i87:0 > 0 && i86:0 > 0 && i87:0 <= i86:0 && arith = i86:0 - i87:0

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f588_0_div_Load(i87:0, i86:0) -> f588_0_div_Load(i87:0, arith) :|: i87:0 > 0 && i86:0 > 0 && i87:0 <= i86:0 && arith = i86:0 - i87:0

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f588_0_div_Load(i87:0:0, i86:0:0) -> f588_0_div_Load(i87:0:0, i86:0:0 - i87:0:0) :|: i87:0:0 > 0 && i86:0:0 > 0 && i87:0:0 <= i86:0:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f588_0_div_Load(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f588_0_div_Load(i87:0:0, i86:0:0) -> f588_0_div_Load(i87:0:0, c) :|: c = i86:0:0 - i87:0:0 && (i87:0:0 > 0 && i86:0:0 > 0 && i87:0:0 <= i86:0:0)

----------------------------------------

(17) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f588_0_div_Load ] = f588_0_div_Load_2

The following rules are decreasing:
f588_0_div_Load(i87:0:0, i86:0:0) -> f588_0_div_Load(i87:0:0, c) :|: c = i86:0:0 - i87:0:0 && (i87:0:0 > 0 && i86:0:0 > 0 && i87:0:0 <= i86:0:0)

The following rules are bounded:
f588_0_div_Load(i87:0:0, i86:0:0) -> f588_0_div_Load(i87:0:0, c) :|: c = i86:0:0 - i87:0:0 && (i87:0:0 > 0 && i86:0:0 > 0 && i87:0:0 <= i86:0:0)


----------------------------------------

(18)
YES
