YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/oZvg7.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 120 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 11 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 15 ms]
(12) TRUE


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB5 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();

        while (x > 0 && (x % 2) == 0) {
            x--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB5 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();

        while (x > 0 && (x % 2) == 0) {
            x--;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaB5.main([Ljava/lang/String;)V: Graph of 114 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaB5.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 11 IRulesP rules:
f402_0_main_LE(EOS(STATIC_402), i64, i64) -> f413_0_main_LE(EOS(STATIC_413), i64, i64) :|: TRUE
f413_0_main_LE(EOS(STATIC_413), i64, i64) -> f423_0_main_Load(EOS(STATIC_423), i64) :|: i64 > 0
f423_0_main_Load(EOS(STATIC_423), i64) -> f431_0_main_ConstantStackPush(EOS(STATIC_431), i64, i64) :|: TRUE
f431_0_main_ConstantStackPush(EOS(STATIC_431), i64, i64) -> f436_0_main_IntArithmetic(EOS(STATIC_436), i64, i64, 2) :|: TRUE
f436_0_main_IntArithmetic(EOS(STATIC_436), i64, i64, matching1) -> f443_0_main_NE(EOS(STATIC_443), i64, i64 % 2) :|: TRUE && matching1 = 2
f443_0_main_NE(EOS(STATIC_443), i64, matching1) -> f450_0_main_NE(EOS(STATIC_450), i64, 0) :|: TRUE && matching1 = 0
f450_0_main_NE(EOS(STATIC_450), i64, matching1) -> f461_0_main_Inc(EOS(STATIC_461), i64) :|: TRUE && matching1 = 0
f461_0_main_Inc(EOS(STATIC_461), i64) -> f464_0_main_JMP(EOS(STATIC_464), i64 + -1) :|: TRUE
f464_0_main_JMP(EOS(STATIC_464), i72) -> f503_0_main_Load(EOS(STATIC_503), i72) :|: TRUE
f503_0_main_Load(EOS(STATIC_503), i72) -> f385_0_main_Load(EOS(STATIC_385), i72) :|: TRUE
f385_0_main_Load(EOS(STATIC_385), i53) -> f402_0_main_LE(EOS(STATIC_402), i53, i53) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f402_0_main_LE(EOS(STATIC_402), i64:0, i64:0) -> f402_0_main_LE'(EOS(STATIC_402), i64:0, i64:0) :|: i64:0 - 2 * div = 0 && i64:0 > 0
f402_0_main_LE'(EOS(STATIC_402), i64:0, i64:0) -> f402_0_main_LE(EOS(STATIC_402), i64:0 - 1, i64:0 - 1) :|: i64:0 > 0 && i64:0 - 2 * div = 0 && i64:0 - 2 * div < 2 && i64:0 - 2 * div > -2
Filtered constant ground arguments:
   f402_0_main_LE(x1, x2, x3) -> f402_0_main_LE(x2, x3)
   f402_0_main_LE'(x1, x2, x3) -> f402_0_main_LE'(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f402_0_main_LE(x1, x2) -> f402_0_main_LE(x2)
   f402_0_main_LE'(x1, x2) -> f402_0_main_LE'(x2)
Finished conversion. Obtained 2 rules.P rules:
f402_0_main_LE(i64:0) -> f402_0_main_LE'(i64:0) :|: i64:0 - 2 * div = 0 && i64:0 > 0
f402_0_main_LE'(i64:0) -> f402_0_main_LE(i64:0 - 1) :|: i64:0 - 2 * div = 0 && i64:0 > 0 && i64:0 - 2 * div > -2 && i64:0 - 2 * div < 2

----------------------------------------

(8)
Obligation:
Rules:
f402_0_main_LE(x) -> f402_0_main_LE'(x) :|: x - 2 * x1 = 0 && x > 0
f402_0_main_LE'(x2) -> f402_0_main_LE(x2 - 1) :|: x2 - 2 * x3 = 0 && x2 > 0 && x2 - 2 * x3 > -2 && x2 - 2 * x3 < 2

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f402_0_main_LE(x) -> f402_0_main_LE'(x) :|: x - 2 * x1 = 0 && x > 0
f402_0_main_LE'(x2) -> f402_0_main_LE(arith) :|: x2 - 2 * x3 = 0 && x2 > 0 && x2 - 2 * x3 > -2 && x2 - 2 * x3 < 2 && arith = x2 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f402_0_main_LE(x) -> f402_0_main_LE'(x) :|: x - 2 * x1 = 0 && x > 0
(2) f402_0_main_LE'(x2) -> f402_0_main_LE(arith) :|: x2 - 2 * x3 = 0 && x2 > 0 && x2 - 2 * x3 > -2 && x2 - 2 * x3 < 2 && arith = x2 - 1

Arcs:
(1) -> (2)

This digraph is fully evaluated!
----------------------------------------

(12)
TRUE
