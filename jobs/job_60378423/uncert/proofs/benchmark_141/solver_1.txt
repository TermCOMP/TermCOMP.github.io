NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/nujft.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 50 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 204 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.middle;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Middle.middle(args[0].length(), args[1].length());
	}

}


package simple.middle;

public class Middle {

	/*
	 * returns the number which is exactly between the first and the second
	 * input number, does not work if one number is even and one is odd or if i <
	 * j
	 */
	public static int middle(int i, int j) {
		while (i != j) {
			i--;
			j++;
		}
		return i;
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.middle;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Middle.middle(args[0].length(), args[1].length());
	}

}


package simple.middle;

public class Middle {

	/*
	 * returns the number which is exactly between the first and the second
	 * input number, does not work if one number is even and one is odd or if i <
	 * j
	 */
	public static int middle(int i, int j) {
		while (i != j) {
			i--;
			j++;
		}
		return i;
	}
}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<simple.middle.Main.main||0: load ADDR args||args: a18|| ->
	o37!: String(count=1, hash=#, offset=0, value=o38?) -->{java.lang.Object...}
	a18([java.lang.String...]): {o15, o37} -->{java.lang.Object...}
	o15!: String(count=0, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o38:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a18-><-o38
a18-><-o37
a18-><-o16
a18-><-o15
YES:  (JL1)
1:<simple.middle.Main.main||1: push 0||args: a18||a18>
	o37!: String(count=1, hash=#, offset=0, value=o38?) -->{java.lang.Object...}
	a18([java.lang.String...]): {o15, o37} -->{java.lang.Object...}
	o15!: String(count=0, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o38:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a18-><-o38
a18-><-o37
a18-><-o16
a18-><-o15
YES:  (JL1)
2:<simple.middle.Main.main||2: Read ADDR from array||args: a18||a18, 0>
	o37!: String(count=1, hash=#, offset=0, value=o38?) -->{java.lang.Object...}
	a18([java.lang.String...]): {o15, o37} -->{java.lang.Object...}
	o15!: String(count=0, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o38:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a18-><-o38
a18-><-o37
a18-><-o16
a18-><-o15
YES:  (JL1)
3:<simple.middle.Main.main||3: java.lang.String.length()I||args: a18||o15>
	o37!: String(count=1, hash=#, offset=0, value=o38?) -->{java.lang.Object...}
	a18([java.lang.String...]): {o15, o37} -->{java.lang.Object...}
	o15!: String(count=0, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o38:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a18-><-o38
a18-><-o37
a18-><-o16
a18-><-o15
YES:  (JL1)
4:<java.lang.String.length||0: load ADDR this||this: o15|| ->
<simple.middle.Main.main||3: java.lang.String.length||args: a18|| ->
	o37!: String(count=1, hash=#, offset=0, value=o38?) -->{java.lang.Object...}
	a18([java.lang.String...]): {o15, o37} -->{java.lang.Object...}
	o15!: String(count=0, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o38:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a18-><-o38
a18-><-o37
a18-><-o16
a18-><-o15
YES:  (JL1)
5:<java.lang.String.length||1: Read from count|| - ||o15>
<simple.middle.Main.main||3: java.lang.String.length||args: a18|| ->
	o37!: String(count=1, hash=#, offset=0, value=o38?) -->{java.lang.Object...}
	a18([java.lang.String...]): {o15, o37} -->{java.lang.Object...}
	o15!: String(count=0, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o38:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a18-><-o38
a18-><-o37
a18-><-o16
a18-><-o15
YES:  (JL1)
6:<java.lang.String.length||4: return INT|| - ||0>
<simple.middle.Main.main||3: java.lang.String.length||args: a18|| ->
	o37!: String(count=1, hash=#, offset=0, value=o38?) -->{java.lang.Object...}
	a18([java.lang.String...]): {o15, o37} -->{java.lang.Object...}
	o15!: String(count=0, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o38:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a18-><-o38
a18-><-o37
a18-><-o16
a18-><-o15
YES:  (JL1)
7:<simple.middle.Main.main||6: load ADDR args||args: a18||0>
	o37!: String(count=1, hash=#, offset=0, value=o38?) -->{java.lang.Object...}
	a18([java.lang.String...]): {o15, o37} -->{java.lang.Object...}
	o15!: String(count=0, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o38:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a18-><-o38
a18-><-o37
a18-><-o16
a18-><-o15
YES:  (JL1)
8:<simple.middle.Main.main||7: push 1|| - ||0, a18>
	o37!: String(count=1, hash=#, offset=0, value=o38?) -->{java.lang.Object...}
	a18([java.lang.String...]): {o15, o37} -->{java.lang.Object...}
	o15!: String(count=0, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o38:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a18-><-o38
a18-><-o37
a18-><-o16
a18-><-o15
YES:  (JL1)
9:<simple.middle.Main.main||8: Read ADDR from array|| - ||0, a18, 1>
	o37!: String(count=1, hash=#, offset=0, value=o38?) -->{java.lang.Object...}
	a18([java.lang.String...]): {o15, o37} -->{java.lang.Object...}
	o15!: String(count=0, hash=#, offset=0, value=o16?) -->{java.lang.Object...}
o38:: [CHAR] -->{java.lang.Object...}
o16:: [CHAR] -->{java.lang.Object...}
a18-><-o38
a18-><-o37
a18-><-o16
a18-><-o15
YES:  (JL1)
10:<simple.middle.Main.main||9: java.lang.String.length()I|| - ||0, o37>
	o37!: String(count=1, hash=#, offset=0, value=o38?) -->{java.lang.Object...}
o38:: [CHAR] -->{java.lang.Object...}
YES:  (JL1)
11:<java.lang.String.length||0: load ADDR this||this: o37|| ->
<simple.middle.Main.main||9: java.lang.String.length|| - ||0>
	o37!: String(count=1, hash=#, offset=0, value=o38?) -->{java.lang.Object...}
o38:: [CHAR] -->{java.lang.Object...}
YES:  (JL1)
12:<java.lang.String.length||1: Read from count|| - ||o37>
<simple.middle.Main.main||9: java.lang.String.length|| - ||0>
	o37!: String(count=1, hash=#, offset=0, value=o38?) -->{java.lang.Object...}
o38:: [CHAR] -->{java.lang.Object...}
YES:  (JL1)
13:<java.lang.String.length||4: return INT|| - ||1>
<simple.middle.Main.main||9: java.lang.String.length|| - ||0>
YES:  (JL1)
14:<simple.middle.Main.main||12: simple.middle.Middle.middle(II)I|| - ||0, 1>
YES:  (JL1)
15:<simple.middle.Middle.middle||0: load INT i||i: 0, j: 1|| ->
<simple.middle.Main.main||12: simple.middle.Middle.middle|| - || ->
YES:  (JL1)
Start state of loop: 

<simple.middle.Middle.middle||0: load INT i||i: i61, j: i62|| ->
[a7(lv_0_0)]
<simple.middle.Main.main||12: simple.middle.Middle.middle|| - || ->
	i61: #
	i62: [0,+inf)(l3)
	i16: [2,+inf){0,+inf}
	a7([java.lang.String...]): length i16 -->{java.lang.Object...}
YES:  (JL1)


In the loop head node, references [i61, i62] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((0 <= initial_i62 and 2 <= initial_i16) and ((((path1_i67 = (path1_i61 + -1) and path1_i68 = (path1_i62 + 1) and path1_i67 = res_i61 and path1_i68 = res_i62 and path1_i61 = initial_i61 and path1_i62 = initial_i62) and (path1_i61 != path1_i62 and path1_i61 < path1_i62)) or ((path1_i67 = (path1_i61 + -1) and path1_i68 = (path1_i62 + 1) and path1_i67 = res_i61 and path1_i68 = res_i62 and path1_i61 = initial_i61 and path1_i62 = initial_i62) and (path1_i61 != path1_i62 and path1_i61 < path1_i62))) and (((res1_i67 = (res1_i61 + -1) and res1_i68 = (res1_i62 + 1) and res_i61 = res1_i61 and res_i62 = res1_i62) and !(res1_i61 != res1_i62 and res1_i61 < res1_i62)) and ((res1_i67 = (res1_i61 + -1) and res1_i68 = (res1_i62 + 1) and res_i61 = res1_i61 and res_i62 = res1_i62) and !(res1_i61 != res1_i62 and res1_i61 < res1_i62)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
