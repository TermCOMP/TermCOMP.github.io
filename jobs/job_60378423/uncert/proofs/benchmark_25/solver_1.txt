YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/WyyUy.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 53 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 178 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 33 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 12 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) FilterProof [EQUIVALENT, 0 ms]
(16) IntTRS
(17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(18) IntTRS
(19) RankingReductionPairProof [EQUIVALENT, 5 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class LogBuiltIn{
  public static int log(int x) {

    int res = 0;

    while (x > 1) {

      x = x/2;
      res++;

    }

    return res;

  }


  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    log(x);
  }
}



public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class LogBuiltIn{
  public static int log(int x) {

    int res = 0;

    while (x > 1) {

      x = x/2;
      res++;

    }

    return res;

  }


  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    log(x);
  }
}



public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
LogBuiltIn.main([Ljava/lang/String;)V: Graph of 121 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: LogBuiltIn.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 11 IRulesP rules:
f440_0_log_ConstantStackPush(EOS(STATIC_440), i69, i69) -> f443_0_log_LE(EOS(STATIC_443), i69, i69, 1) :|: TRUE
f443_0_log_LE(EOS(STATIC_443), i76, i76, matching1) -> f453_0_log_LE(EOS(STATIC_453), i76, i76, 1) :|: TRUE && matching1 = 1
f453_0_log_LE(EOS(STATIC_453), i76, i76, matching1) -> f459_0_log_Load(EOS(STATIC_459), i76) :|: i76 > 1 && matching1 = 1
f459_0_log_Load(EOS(STATIC_459), i76) -> f464_0_log_ConstantStackPush(EOS(STATIC_464), i76) :|: TRUE
f464_0_log_ConstantStackPush(EOS(STATIC_464), i76) -> f484_0_log_IntArithmetic(EOS(STATIC_484), i76, 2) :|: TRUE
f484_0_log_IntArithmetic(EOS(STATIC_484), i76, matching1) -> f490_0_log_Store(EOS(STATIC_490), i81) :|: i81 = i76 / 2 && i76 > 1 && i81 < i76 && matching1 = 2
f490_0_log_Store(EOS(STATIC_490), i81) -> f493_0_log_Inc(EOS(STATIC_493), i81) :|: TRUE
f493_0_log_Inc(EOS(STATIC_493), i81) -> f494_0_log_JMP(EOS(STATIC_494), i81) :|: TRUE
f494_0_log_JMP(EOS(STATIC_494), i81) -> f502_0_log_Load(EOS(STATIC_502), i81) :|: TRUE
f502_0_log_Load(EOS(STATIC_502), i81) -> f436_0_log_Load(EOS(STATIC_436), i81) :|: TRUE
f436_0_log_Load(EOS(STATIC_436), i69) -> f440_0_log_ConstantStackPush(EOS(STATIC_440), i69, i69) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f440_0_log_ConstantStackPush(EOS(STATIC_440), i69:0, i69:0) -> f440_0_log_ConstantStackPush'(EOS(STATIC_440), i69:0, i69:0) :|: i69:0 > 1 && i69:0 > div
f440_0_log_ConstantStackPush'(EOS(STATIC_440), i69:0, i69:0) -> f440_0_log_ConstantStackPush(EOS(STATIC_440), div, div) :|: i69:0 > 1 && i69:0 > div && i69:0 - 2 * div < 2 && i69:0 - 2 * div > -2
Filtered constant ground arguments:
   f440_0_log_ConstantStackPush(x1, x2, x3) -> f440_0_log_ConstantStackPush(x2, x3)
   f440_0_log_ConstantStackPush'(x1, x2, x3) -> f440_0_log_ConstantStackPush'(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f440_0_log_ConstantStackPush(x1, x2) -> f440_0_log_ConstantStackPush(x2)
   f440_0_log_ConstantStackPush'(x1, x2) -> f440_0_log_ConstantStackPush'(x2)
Finished conversion. Obtained 2 rules.P rules:
f440_0_log_ConstantStackPush(i69:0) -> f440_0_log_ConstantStackPush'(i69:0) :|: i69:0 > 1 && i69:0 > div
f440_0_log_ConstantStackPush'(i69:0) -> f440_0_log_ConstantStackPush(div) :|: i69:0 > div && i69:0 > 1 && i69:0 - 2 * div > -2 && i69:0 - 2 * div < 2

----------------------------------------

(8)
Obligation:
Rules:
f440_0_log_ConstantStackPush(x) -> f440_0_log_ConstantStackPush'(x) :|: x > 1 && x > x1
f440_0_log_ConstantStackPush'(x2) -> f440_0_log_ConstantStackPush(x3) :|: x2 > x3 && x2 > 1 && x2 - 2 * x3 > -2 && x2 - 2 * x3 < 2

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f440_0_log_ConstantStackPush(x) -> f440_0_log_ConstantStackPush'(x) :|: x > 1 && x > x1
f440_0_log_ConstantStackPush'(x2) -> f440_0_log_ConstantStackPush(x3) :|: x2 > x3 && x2 > 1 && x2 - 2 * x3 > -2 && x2 - 2 * x3 < 2

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f440_0_log_ConstantStackPush(x) -> f440_0_log_ConstantStackPush'(x) :|: x > 1 && x > x1
(2) f440_0_log_ConstantStackPush'(x2) -> f440_0_log_ConstantStackPush(x3) :|: x2 > x3 && x2 > 1 && x2 - 2 * x3 > -2 && x2 - 2 * x3 < 2

Arcs:
(1) -> (2)
(2) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f440_0_log_ConstantStackPush(x) -> f440_0_log_ConstantStackPush'(x) :|: x > 1 && x > x1
(2) f440_0_log_ConstantStackPush'(x2) -> f440_0_log_ConstantStackPush(x3) :|: x2 > x3 && x2 > 1 && x2 - 2 * x3 > -2 && x2 - 2 * x3 < 2

Arcs:
(1) -> (2)
(2) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f440_0_log_ConstantStackPush(x:0) -> f440_0_log_ConstantStackPush(x3:0) :|: x:0 > x1:0 && x:0 - 2 * x3:0 < 2 && x:0 - 2 * x3:0 > -2 && x:0 > 1 && x:0 > x3:0

----------------------------------------

(15) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f440_0_log_ConstantStackPush(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f440_0_log_ConstantStackPush(x:0) -> f440_0_log_ConstantStackPush(x3:0) :|: x:0 > x1:0 && x:0 - 2 * x3:0 < 2 && x:0 - 2 * x3:0 > -2 && x:0 > 1 && x:0 > x3:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f440_0_log_ConstantStackPush(x:0:0) -> f440_0_log_ConstantStackPush(x3:0:0) :|: x:0:0 > 1 && x:0:0 > x3:0:0 && x:0:0 - 2 * x3:0:0 > -2 && x:0:0 - 2 * x3:0:0 < 2 && x:0:0 > x1:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f440_0_log_ConstantStackPush ] = f440_0_log_ConstantStackPush_1

The following rules are decreasing:
f440_0_log_ConstantStackPush(x:0:0) -> f440_0_log_ConstantStackPush(x3:0:0) :|: x:0:0 > 1 && x:0:0 > x3:0:0 && x:0:0 - 2 * x3:0:0 > -2 && x:0:0 - 2 * x3:0:0 < 2 && x:0:0 > x1:0:0

The following rules are bounded:
f440_0_log_ConstantStackPush(x:0:0) -> f440_0_log_ConstantStackPush(x3:0:0) :|: x:0:0 > 1 && x:0:0 > x3:0:0 && x:0:0 - 2 * x3:0:0 > -2 && x:0:0 - 2 * x3:0:0 < 2 && x:0:0 > x1:0:0


----------------------------------------

(20)
YES
