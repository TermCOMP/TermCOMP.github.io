YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/a3jid.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 170 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 57 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 34 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 33 ms]
(16) IntTRS
(17) RankingReductionPairProof [EQUIVALENT, 13 ms]
(18) IntTRS
(19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class McCarthyIterative {
  public static int main(int x) {
    int c = 1;
    while (c > 0) {
      if (x > 100) {
        x -= 10;
        c--;
      } else {
        x += 11;
        c++;
      }
    }
    return x;
  }

  public static void main(String[] args) {
    Random.args = args;
    main(Random.random());
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class McCarthyIterative {
  public static int main(int x) {
    int c = 1;
    while (c > 0) {
      if (x > 100) {
        x -= 10;
        c--;
      } else {
        x += 11;
        c++;
      }
    }
    return x;
  }

  public static void main(String[] args) {
    Random.args = args;
    main(Random.random());
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
McCarthyIterative.main([Ljava/lang/String;)V: Graph of 125 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: McCarthyIterative.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 17 IRulesP rules:
f2103_0_main_LE(EOS(STATIC_2103), i94, i209, i209) -> f2113_0_main_LE(EOS(STATIC_2113), i94, i209, i209) :|: TRUE
f2113_0_main_LE(EOS(STATIC_2113), i94, i209, i209) -> f2120_0_main_Load(EOS(STATIC_2120), i94, i209) :|: i209 > 0
f2120_0_main_Load(EOS(STATIC_2120), i94, i209) -> f2125_0_main_ConstantStackPush(EOS(STATIC_2125), i94, i209, i94) :|: TRUE
f2125_0_main_ConstantStackPush(EOS(STATIC_2125), i94, i209, i94) -> f2127_0_main_LE(EOS(STATIC_2127), i94, i209, i94, 100) :|: TRUE
f2127_0_main_LE(EOS(STATIC_2127), i210, i209, i210, matching1) -> f2136_0_main_LE(EOS(STATIC_2136), i210, i209, i210, 100) :|: TRUE && matching1 = 100
f2127_0_main_LE(EOS(STATIC_2127), i211, i209, i211, matching1) -> f2137_0_main_LE(EOS(STATIC_2137), i211, i209, i211, 100) :|: TRUE && matching1 = 100
f2136_0_main_LE(EOS(STATIC_2136), i210, i209, i210, matching1) -> f2145_0_main_Inc(EOS(STATIC_2145), i210, i209) :|: i210 <= 100 && matching1 = 100
f2145_0_main_Inc(EOS(STATIC_2145), i210, i209) -> f2153_0_main_Inc(EOS(STATIC_2153), i210 + 11, i209) :|: TRUE
f2153_0_main_Inc(EOS(STATIC_2153), i213, i209) -> f2155_0_main_JMP(EOS(STATIC_2155), i213, i209 + 1) :|: TRUE
f2155_0_main_JMP(EOS(STATIC_2155), i213, i215) -> f2169_0_main_Load(EOS(STATIC_2169), i213, i215) :|: TRUE
f2169_0_main_Load(EOS(STATIC_2169), i213, i215) -> f413_0_main_Load(EOS(STATIC_413), i213, i215) :|: TRUE
f413_0_main_Load(EOS(STATIC_413), i94, i95) -> f2103_0_main_LE(EOS(STATIC_2103), i94, i95, i95) :|: TRUE
f2137_0_main_LE(EOS(STATIC_2137), i211, i209, i211, matching1) -> f2148_0_main_Inc(EOS(STATIC_2148), i211, i209) :|: i211 > 100 && matching1 = 100
f2148_0_main_Inc(EOS(STATIC_2148), i211, i209) -> f2154_0_main_Inc(EOS(STATIC_2154), i211 + -10, i209) :|: TRUE
f2154_0_main_Inc(EOS(STATIC_2154), i214, i209) -> f2156_0_main_JMP(EOS(STATIC_2156), i214, i209 + -1) :|: TRUE
f2156_0_main_JMP(EOS(STATIC_2156), i214, i216) -> f2179_0_main_Load(EOS(STATIC_2179), i214, i216) :|: TRUE
f2179_0_main_Load(EOS(STATIC_2179), i214, i216) -> f413_0_main_Load(EOS(STATIC_413), i214, i216) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f2103_0_main_LE(EOS(STATIC_2103), i94:0, i209:0, i209:0) -> f2103_0_main_LE(EOS(STATIC_2103), i94:0 - 10, i209:0 - 1, i209:0 - 1) :|: i94:0 > 100 && i209:0 > 0
f2103_0_main_LE(EOS(STATIC_2103), i94:0, i209:0, i209:0) -> f2103_0_main_LE(EOS(STATIC_2103), i94:0 + 11, i209:0 + 1, i209:0 + 1) :|: i94:0 < 101 && i209:0 > 0
Filtered constant ground arguments:
   f2103_0_main_LE(x1, x2, x3, x4) -> f2103_0_main_LE(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f2103_0_main_LE(x1, x2, x3) -> f2103_0_main_LE(x1, x3)
Finished conversion. Obtained 2 rules.P rules:
f2103_0_main_LE(i94:0, i209:0) -> f2103_0_main_LE(i94:0 - 10, i209:0 - 1) :|: i94:0 > 100 && i209:0 > 0
f2103_0_main_LE(i94:0, i209:0) -> f2103_0_main_LE(i94:0 + 11, i209:0 + 1) :|: i94:0 < 101 && i209:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f2103_0_main_LE(i94:0, i209:0) -> f2103_0_main_LE(i94:0 - 10, i209:0 - 1) :|: i94:0 > 100 && i209:0 > 0
f2103_0_main_LE(x, x1) -> f2103_0_main_LE(x + 11, x1 + 1) :|: x < 101 && x1 > 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f2103_0_main_LE(i94:0, i209:0) -> f2103_0_main_LE(arith, arith1) :|: i94:0 > 100 && i209:0 > 0 && arith = i94:0 - 10 && arith1 = i209:0 - 1
f2103_0_main_LE(x2, x3) -> f2103_0_main_LE(x4, x5) :|: x2 < 101 && x3 > 0 && x4 = x2 + 11 && x5 = x3 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2103_0_main_LE(i94:0, i209:0) -> f2103_0_main_LE(arith, arith1) :|: i94:0 > 100 && i209:0 > 0 && arith = i94:0 - 10 && arith1 = i209:0 - 1
(2) f2103_0_main_LE(x2, x3) -> f2103_0_main_LE(x4, x5) :|: x2 < 101 && x3 > 0 && x4 = x2 + 11 && x5 = x3 + 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f2103_0_main_LE(i94:0, i209:0) -> f2103_0_main_LE(arith, arith1) :|: i94:0 > 100 && i209:0 > 0 && arith = i94:0 - 10 && arith1 = i209:0 - 1
(2) f2103_0_main_LE(x2, x3) -> f2103_0_main_LE(x4, x5) :|: x2 < 101 && x3 > 0 && x4 = x2 + 11 && x5 = x3 + 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f2103_0_main_LE(x2:0, x3:0) -> f2103_0_main_LE(x2:0 + 11, x3:0 + 1) :|: x2:0 < 101 && x3:0 > 0
f2103_0_main_LE(i94:0:0, i209:0:0) -> f2103_0_main_LE(i94:0:0 - 10, i209:0:0 - 1) :|: i94:0:0 > 100 && i209:0:0 > 0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2103_0_main_LE(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f2103_0_main_LE(x2:0, x3:0) -> f2103_0_main_LE(c, c1) :|: c1 = x3:0 + 1 && c = x2:0 + 11 && (x2:0 < 101 && x3:0 > 0)
f2103_0_main_LE(i94:0:0, i209:0:0) -> f2103_0_main_LE(c2, c3) :|: c3 = i209:0:0 - 1 && c2 = i94:0:0 - 10 && (i94:0:0 > 100 && i209:0:0 > 0)

----------------------------------------

(17) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f2103_0_main_LE ] = -3*f2103_0_main_LE_1 + 32*f2103_0_main_LE_2

The following rules are decreasing:
f2103_0_main_LE(x2:0, x3:0) -> f2103_0_main_LE(c, c1) :|: c1 = x3:0 + 1 && c = x2:0 + 11 && (x2:0 < 101 && x3:0 > 0)
f2103_0_main_LE(i94:0:0, i209:0:0) -> f2103_0_main_LE(c2, c3) :|: c3 = i209:0:0 - 1 && c2 = i94:0:0 - 10 && (i94:0:0 > 100 && i209:0:0 > 0)

The following rules are bounded:
f2103_0_main_LE(x2:0, x3:0) -> f2103_0_main_LE(c, c1) :|: c1 = x3:0 + 1 && c = x2:0 + 11 && (x2:0 < 101 && x3:0 > 0)


----------------------------------------

(18)
Obligation:
Rules:
f2103_0_main_LE(i94:0:0, i209:0:0) -> f2103_0_main_LE(c2, c3) :|: c3 = i209:0:0 - 1 && c2 = i94:0:0 - 10 && (i94:0:0 > 100 && i209:0:0 > 0)

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f2103_0_main_LE(x, x1)] = x1

The following rules are decreasing:
f2103_0_main_LE(i94:0:0, i209:0:0) -> f2103_0_main_LE(c2, c3) :|: c3 = i209:0:0 - 1 && c2 = i94:0:0 - 10 && (i94:0:0 > 100 && i209:0:0 > 0)
The following rules are bounded:
f2103_0_main_LE(i94:0:0, i209:0:0) -> f2103_0_main_LE(c2, c3) :|: c3 = i209:0:0 - 1 && c2 = i94:0:0 - 10 && (i94:0:0 > 100 && i209:0:0 > 0)

----------------------------------------

(20)
YES
