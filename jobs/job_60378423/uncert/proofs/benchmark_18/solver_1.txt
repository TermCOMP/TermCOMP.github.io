YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zatxc.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 148 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 70 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 37 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 21 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(18) IntTRS
(19) RankingReductionPairProof [EQUIVALENT, 0 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class GCD {
  public static int mod(int a, int b) {
    if(a <= 0 || b <= 0)
      return 0;
    if (a == b) {
      return 0;
    }
    while(a>b) {
      a -= b;
    }
    return a;
  }

  public static int gcd(int a, int b) {
    int tmp;
    while(b != 0) {
      tmp = b;
      b = mod(a, b);
      a = tmp;
    }
    return a;
  }

  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    gcd(x, y);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class GCD {
  public static int mod(int a, int b) {
    if(a <= 0 || b <= 0)
      return 0;
    if (a == b) {
      return 0;
    }
    while(a>b) {
      a -= b;
    }
    return a;
  }

  public static int gcd(int a, int b) {
    int tmp;
    while(b != 0) {
      tmp = b;
      b = mod(a, b);
      a = tmp;
    }
    return a;
  }

  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    gcd(x, y);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
GCD.main([Ljava/lang/String;)V: Graph of 222 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: GCD.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 51 IRulesP rules:
f440_0_gcd_EQ(EOS(STATIC_440), i50, i57, i57) -> f441_0_gcd_EQ(EOS(STATIC_441), i50, i57, i57) :|: TRUE
f441_0_gcd_EQ(EOS(STATIC_441), i50, i57, i57) -> f443_0_gcd_Load(EOS(STATIC_443), i50, i57) :|: i57 > 0
f443_0_gcd_Load(EOS(STATIC_443), i50, i57) -> f445_0_gcd_Store(EOS(STATIC_445), i50, i57, i57) :|: TRUE
f445_0_gcd_Store(EOS(STATIC_445), i50, i57, i57) -> f447_0_gcd_Load(EOS(STATIC_447), i50, i57, i57) :|: TRUE
f447_0_gcd_Load(EOS(STATIC_447), i50, i57, i57) -> f449_0_gcd_Load(EOS(STATIC_449), i57, i57, i50) :|: TRUE
f449_0_gcd_Load(EOS(STATIC_449), i57, i57, i50) -> f451_0_gcd_InvokeMethod(EOS(STATIC_451), i57, i50, i57) :|: TRUE
f451_0_gcd_InvokeMethod(EOS(STATIC_451), i57, i50, i57) -> f455_0_mod_Load(EOS(STATIC_455), i57, i50, i57) :|: TRUE
f455_0_mod_Load(EOS(STATIC_455), i57, i50, i57) -> f458_0_mod_LE(EOS(STATIC_458), i57, i50, i57, i50) :|: TRUE
f458_0_mod_LE(EOS(STATIC_458), i57, matching1, i57, matching2) -> f459_0_mod_LE(EOS(STATIC_459), i57, 0, i57, 0) :|: TRUE && matching1 = 0 && matching2 = 0
f458_0_mod_LE(EOS(STATIC_458), i57, i58, i57, i58) -> f460_0_mod_LE(EOS(STATIC_460), i57, i58, i57, i58) :|: TRUE
f459_0_mod_LE(EOS(STATIC_459), i57, matching1, i57, matching2) -> f461_0_mod_ConstantStackPush(EOS(STATIC_461), i57) :|: 0 <= 0 && matching1 = 0 && matching2 = 0
f461_0_mod_ConstantStackPush(EOS(STATIC_461), i57) -> f464_0_mod_Return(EOS(STATIC_464), i57, 0) :|: TRUE
f464_0_mod_Return(EOS(STATIC_464), i57, matching1) -> f466_0_gcd_Store(EOS(STATIC_466), i57, 0) :|: TRUE && matching1 = 0
f466_0_gcd_Store(EOS(STATIC_466), i57, matching1) -> f468_0_gcd_Load(EOS(STATIC_468), 0, i57) :|: TRUE && matching1 = 0
f468_0_gcd_Load(EOS(STATIC_468), matching1, i57) -> f470_0_gcd_Store(EOS(STATIC_470), 0, i57) :|: TRUE && matching1 = 0
f470_0_gcd_Store(EOS(STATIC_470), matching1, i57) -> f474_0_gcd_JMP(EOS(STATIC_474), i57, 0) :|: TRUE && matching1 = 0
f474_0_gcd_JMP(EOS(STATIC_474), i57, matching1) -> f523_0_gcd_Load(EOS(STATIC_523), i57, 0) :|: TRUE && matching1 = 0
f523_0_gcd_Load(EOS(STATIC_523), i57, matching1) -> f438_0_gcd_Load(EOS(STATIC_438), i57, 0) :|: TRUE && matching1 = 0
f438_0_gcd_Load(EOS(STATIC_438), i50, i51) -> f440_0_gcd_EQ(EOS(STATIC_440), i50, i51, i51) :|: TRUE
f460_0_mod_LE(EOS(STATIC_460), i57, i58, i57, i58) -> f462_0_mod_Load(EOS(STATIC_462), i57, i58, i57) :|: i58 > 0
f462_0_mod_Load(EOS(STATIC_462), i57, i58, i57) -> f465_0_mod_GT(EOS(STATIC_465), i57, i58, i57, i57) :|: TRUE
f465_0_mod_GT(EOS(STATIC_465), i57, i58, i57, i57) -> f467_0_mod_Load(EOS(STATIC_467), i57, i58, i57) :|: i57 > 0
f467_0_mod_Load(EOS(STATIC_467), i57, i58, i57) -> f469_0_mod_Load(EOS(STATIC_469), i57, i58, i57, i58) :|: TRUE
f469_0_mod_Load(EOS(STATIC_469), i57, i58, i57, i58) -> f472_0_mod_NE(EOS(STATIC_472), i57, i58, i57, i58, i57) :|: TRUE
f472_0_mod_NE(EOS(STATIC_472), i57, i58, i57, i58, i57) -> f496_0_mod_NE(EOS(STATIC_496), i57, i58, i57, i58, i57) :|: !(i58 = i57)
f472_0_mod_NE(EOS(STATIC_472), i57, i57, i57, i57, i57) -> f497_0_mod_NE(EOS(STATIC_497), i57, i57, i57, i57, i57) :|: i58 = i57
f496_0_mod_NE(EOS(STATIC_496), i57, i58, i57, i58, i57) -> f528_0_mod_Load(EOS(STATIC_528), i57, i58, i57) :|: !(i58 = i57)
f528_0_mod_Load(EOS(STATIC_528), i57, i58, i57) -> f2553_0_mod_Load(EOS(STATIC_2553), i57, i58, i57) :|: TRUE
f2553_0_mod_Load(EOS(STATIC_2553), i57, i131, i57) -> f2556_0_mod_Load(EOS(STATIC_2556), i57, i131, i57, i131) :|: TRUE
f2556_0_mod_Load(EOS(STATIC_2556), i57, i131, i57, i131) -> f2559_0_mod_LE(EOS(STATIC_2559), i57, i131, i57, i131, i57) :|: TRUE
f2559_0_mod_LE(EOS(STATIC_2559), i57, i131, i57, i131, i57) -> f2563_0_mod_LE(EOS(STATIC_2563), i57, i131, i57, i131, i57) :|: i131 <= i57
f2559_0_mod_LE(EOS(STATIC_2559), i57, i131, i57, i131, i57) -> f2564_0_mod_LE(EOS(STATIC_2564), i57, i131, i57, i131, i57) :|: i131 > i57
f2563_0_mod_LE(EOS(STATIC_2563), i57, i131, i57, i131, i57) -> f2565_0_mod_Load(EOS(STATIC_2565), i57, i131) :|: i131 <= i57
f2565_0_mod_Load(EOS(STATIC_2565), i57, i131) -> f2567_0_mod_Return(EOS(STATIC_2567), i57, i131) :|: TRUE
f2567_0_mod_Return(EOS(STATIC_2567), i57, i131) -> f2582_0_gcd_Store(EOS(STATIC_2582), i57, i131) :|: TRUE
f2582_0_gcd_Store(EOS(STATIC_2582), i57, i131) -> f2585_0_gcd_Load(EOS(STATIC_2585), i131, i57) :|: TRUE
f2585_0_gcd_Load(EOS(STATIC_2585), i131, i57) -> f2595_0_gcd_Store(EOS(STATIC_2595), i131, i57) :|: TRUE
f2595_0_gcd_Store(EOS(STATIC_2595), i131, i57) -> f2598_0_gcd_JMP(EOS(STATIC_2598), i57, i131) :|: TRUE
f2598_0_gcd_JMP(EOS(STATIC_2598), i57, i131) -> f2605_0_gcd_Load(EOS(STATIC_2605), i57, i131) :|: TRUE
f2605_0_gcd_Load(EOS(STATIC_2605), i57, i131) -> f438_0_gcd_Load(EOS(STATIC_438), i57, i131) :|: TRUE
f2564_0_mod_LE(EOS(STATIC_2564), i57, i131, i57, i131, i57) -> f2566_0_mod_Load(EOS(STATIC_2566), i57, i131, i57) :|: i131 > i57
f2566_0_mod_Load(EOS(STATIC_2566), i57, i131, i57) -> f2568_0_mod_Load(EOS(STATIC_2568), i57, i57, i131) :|: TRUE
f2568_0_mod_Load(EOS(STATIC_2568), i57, i57, i131) -> f2583_0_mod_IntArithmetic(EOS(STATIC_2583), i57, i57, i131, i57) :|: TRUE
f2583_0_mod_IntArithmetic(EOS(STATIC_2583), i57, i57, i131, i57) -> f2593_0_mod_Store(EOS(STATIC_2593), i57, i57, i131 - i57) :|: i131 > 0 && i57 > 0
f2593_0_mod_Store(EOS(STATIC_2593), i57, i57, i145) -> f2596_0_mod_JMP(EOS(STATIC_2596), i57, i145, i57) :|: TRUE
f2596_0_mod_JMP(EOS(STATIC_2596), i57, i145, i57) -> f2600_0_mod_Load(EOS(STATIC_2600), i57, i145, i57) :|: TRUE
f2600_0_mod_Load(EOS(STATIC_2600), i57, i145, i57) -> f2553_0_mod_Load(EOS(STATIC_2553), i57, i145, i57) :|: TRUE
f497_0_mod_NE(EOS(STATIC_497), i57, i57, i57, i57, i57) -> f529_0_mod_ConstantStackPush(EOS(STATIC_529), i57) :|: TRUE
f529_0_mod_ConstantStackPush(EOS(STATIC_529), i57) -> f2435_0_mod_Return(EOS(STATIC_2435), i57, 0) :|: TRUE
f2435_0_mod_Return(EOS(STATIC_2435), i57, matching1) -> f2463_0_gcd_Store(EOS(STATIC_2463), i57, 0) :|: TRUE && matching1 = 0
f2463_0_gcd_Store(EOS(STATIC_2463), i57, matching1) -> f466_0_gcd_Store(EOS(STATIC_466), i57, 0) :|: TRUE && matching1 = 0
Combined rules. Obtained 6 IRulesP rules:
f440_0_gcd_EQ(EOS(STATIC_440), i50:0, i57:0, i57:0) -> f2559_0_mod_LE(EOS(STATIC_2559), i57:0, i50:0, i57:0, i50:0, i57:0) :|: i57:0 > 0 && i50:0 > 0 && i57:0 > i50:0
f440_0_gcd_EQ(EOS(STATIC_440), i50:0, i57:0, i57:0) -> f2559_0_mod_LE(EOS(STATIC_2559), i57:0, i50:0, i57:0, i50:0, i57:0) :|: i57:0 > 0 && i50:0 > 0 && i57:0 < i50:0
f440_0_gcd_EQ(EOS(STATIC_440), i57:0, i57:0, i57:0) -> f440_0_gcd_EQ(EOS(STATIC_440), i57:0, 0, 0) :|: i57:0 > 0
f2559_0_mod_LE(EOS(STATIC_2559), i57:0, i131:0, i57:0, i131:0, i57:0) -> f440_0_gcd_EQ(EOS(STATIC_440), i57:0, i131:0, i131:0) :|: i57:0 >= i131:0
f440_0_gcd_EQ(EOS(STATIC_440), 0, i57:0, i57:0) -> f440_0_gcd_EQ(EOS(STATIC_440), i57:0, 0, 0) :|: i57:0 > 0
f2559_0_mod_LE(EOS(STATIC_2559), i57:0, i131:0, i57:0, i131:0, i57:0) -> f2559_0_mod_LE(EOS(STATIC_2559), i57:0, i131:0 - i57:0, i57:0, i131:0 - i57:0, i57:0) :|: i57:0 < i131:0 && i131:0 > 0 && i57:0 > 0
Filtered constant ground arguments:
   f440_0_gcd_EQ(x1, x2, x3, x4) -> f440_0_gcd_EQ(x2, x3, x4)
   f2559_0_mod_LE(x1, x2, x3, x4, x5, x6) -> f2559_0_mod_LE(x2, x3, x4, x5, x6)
Filtered duplicate arguments:
   f440_0_gcd_EQ(x1, x2, x3) -> f440_0_gcd_EQ(x1, x3)
   f2559_0_mod_LE(x1, x2, x3, x4, x5) -> f2559_0_mod_LE(x4, x5)
Finished conversion. Obtained 6 rules.P rules:
f440_0_gcd_EQ(i50:0, i57:0) -> f2559_0_mod_LE(i50:0, i57:0) :|: i50:0 > 0 && i57:0 > i50:0 && i57:0 > 0
f440_0_gcd_EQ(i50:0, i57:0) -> f2559_0_mod_LE(i50:0, i57:0) :|: i50:0 > 0 && i57:0 < i50:0 && i57:0 > 0
f440_0_gcd_EQ(i57:0, i57:0) -> f440_0_gcd_EQ(i57:0, 0) :|: i57:0 > 0
f2559_0_mod_LE(i131:0, i57:0) -> f440_0_gcd_EQ(i57:0, i131:0) :|: i57:0 >= i131:0
f440_0_gcd_EQ(cons_0, i57:0) -> f440_0_gcd_EQ(i57:0, 0) :|: i57:0 > 0 && cons_0 = 0
f2559_0_mod_LE(i131:0, i57:0) -> f2559_0_mod_LE(i131:0 - i57:0, i57:0) :|: i131:0 > 0 && i57:0 > 0 && i57:0 < i131:0

----------------------------------------

(8)
Obligation:
Rules:
f440_0_gcd_EQ(i50:0, i57:0) -> f2559_0_mod_LE(i50:0, i57:0) :|: i50:0 > 0 && i57:0 > i50:0 && i57:0 > 0
f440_0_gcd_EQ(x, x1) -> f2559_0_mod_LE(x, x1) :|: x > 0 && x1 < x && x1 > 0
f440_0_gcd_EQ(x2, x2) -> f440_0_gcd_EQ(x2, 0) :|: x2 > 0
f2559_0_mod_LE(x3, x4) -> f440_0_gcd_EQ(x4, x3) :|: x4 >= x3
f440_0_gcd_EQ(x5, x6) -> f440_0_gcd_EQ(x6, 0) :|: x6 > 0 && x5 = 0
f2559_0_mod_LE(x7, x8) -> f2559_0_mod_LE(x7 - x8, x8) :|: x7 > 0 && x8 > 0 && x8 < x7

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f440_0_gcd_EQ(i50:0, i57:0) -> f2559_0_mod_LE(i50:0, i57:0) :|: i50:0 > 0 && i57:0 > i50:0 && i57:0 > 0
f440_0_gcd_EQ(x, x1) -> f2559_0_mod_LE(x, x1) :|: x > 0 && x1 < x && x1 > 0
f440_0_gcd_EQ(x2, x2) -> f440_0_gcd_EQ(x2, 0) :|: x2 > 0
f2559_0_mod_LE(x3, x4) -> f440_0_gcd_EQ(x4, x3) :|: x4 >= x3
f440_0_gcd_EQ(x5, x6) -> f440_0_gcd_EQ(x6, 0) :|: x6 > 0 && x5 = 0
f2559_0_mod_LE(x7, x8) -> f2559_0_mod_LE(arith, x8) :|: x7 > 0 && x8 > 0 && x8 < x7 && arith = x7 - x8

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f440_0_gcd_EQ(i50:0, i57:0) -> f2559_0_mod_LE(i50:0, i57:0) :|: i50:0 > 0 && i57:0 > i50:0 && i57:0 > 0
(2) f440_0_gcd_EQ(x, x1) -> f2559_0_mod_LE(x, x1) :|: x > 0 && x1 < x && x1 > 0
(3) f440_0_gcd_EQ(x2, x2) -> f440_0_gcd_EQ(x2, 0) :|: x2 > 0
(4) f2559_0_mod_LE(x3, x4) -> f440_0_gcd_EQ(x4, x3) :|: x4 >= x3
(5) f440_0_gcd_EQ(x5, x6) -> f440_0_gcd_EQ(x6, 0) :|: x6 > 0 && x5 = 0
(6) f2559_0_mod_LE(x7, x8) -> f2559_0_mod_LE(arith, x8) :|: x7 > 0 && x8 > 0 && x8 < x7 && arith = x7 - x8

Arcs:
(1) -> (4)
(2) -> (6)
(4) -> (2), (3)
(6) -> (4), (6)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f2559_0_mod_LE(x3, x4) -> f440_0_gcd_EQ(x4, x3) :|: x4 >= x3
(2) f2559_0_mod_LE(x7, x8) -> f2559_0_mod_LE(arith, x8) :|: x7 > 0 && x8 > 0 && x8 < x7 && arith = x7 - x8
(3) f440_0_gcd_EQ(x, x1) -> f2559_0_mod_LE(x, x1) :|: x > 0 && x1 < x && x1 > 0

Arcs:
(1) -> (3)
(2) -> (1), (2)
(3) -> (2)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f2559_0_mod_LE(x3:0, x4:0) -> f2559_0_mod_LE(x4:0, x3:0) :|: x4:0 > 0 && x4:0 > x3:0 && x3:0 > 0
f2559_0_mod_LE(x7:0, x8:0) -> f2559_0_mod_LE(x7:0 - x8:0, x8:0) :|: x7:0 > 0 && x8:0 > 0 && x8:0 < x7:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2559_0_mod_LE(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f2559_0_mod_LE(x3:0, x4:0) -> f2559_0_mod_LE(x4:0, x3:0) :|: x4:0 > 0 && x4:0 > x3:0 && x3:0 > 0
f2559_0_mod_LE(x7:0, x8:0) -> f2559_0_mod_LE(c, x8:0) :|: c = x7:0 - x8:0 && (x7:0 > 0 && x8:0 > 0 && x8:0 < x7:0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f2559_0_mod_LE(x, x1)] = -2 + x1

The following rules are decreasing:
f2559_0_mod_LE(x3:0, x4:0) -> f2559_0_mod_LE(x4:0, x3:0) :|: x4:0 > 0 && x4:0 > x3:0 && x3:0 > 0
The following rules are bounded:
f2559_0_mod_LE(x3:0, x4:0) -> f2559_0_mod_LE(x4:0, x3:0) :|: x4:0 > 0 && x4:0 > x3:0 && x3:0 > 0

----------------------------------------

(18)
Obligation:
Rules:
f2559_0_mod_LE(x7:0, x8:0) -> f2559_0_mod_LE(c, x8:0) :|: c = x7:0 - x8:0 && (x7:0 > 0 && x8:0 > 0 && x8:0 < x7:0)

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f2559_0_mod_LE ] = f2559_0_mod_LE_1

The following rules are decreasing:
f2559_0_mod_LE(x7:0, x8:0) -> f2559_0_mod_LE(c, x8:0) :|: c = x7:0 - x8:0 && (x7:0 > 0 && x8:0 > 0 && x8:0 < x7:0)

The following rules are bounded:
f2559_0_mod_LE(x7:0, x8:0) -> f2559_0_mod_LE(c, x8:0) :|: c = x7:0 - x8:0 && (x7:0 > 0 && x8:0 > 0 && x8:0 < x7:0)


----------------------------------------

(20)
YES
