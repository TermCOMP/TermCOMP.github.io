NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/OD18U.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 106 ms]
(4) JBCTerminationGraph
(5) JBCNonTerm [COMPLETE, 44 ms]
(6) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.even;

public class Even {
	
	// does not terminate for negative numbers
	
	public static boolean even(int i) {
		while (i != 1 && i != 0) {
			i = i-2;
		}
		return (i == 0);
	}
}


package simple.even;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
	    int even = args[1].length();
	    if (args[0].length() % 2 == 0) {
	        even = -even;
	    }
		Even.even(even);

	}

}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.even;

public class Even {
	
	// does not terminate for negative numbers
	
	public static boolean even(int i) {
		while (i != 1 && i != 0) {
			i = i-2;
		}
		return (i == 0);
	}
}


package simple.even;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
	    int even = args[1].length();
	    if (args[0].length() % 2 == 0) {
	        even = -even;
	    }
		Even.even(even);

	}

}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
simple.even.Main.main([Ljava/lang/String;)V: Graph of 143 nodes with 2 SCCs.





----------------------------------------

(5) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<simple.even.Main.main||0: load ADDR args||args: a2|| ->
	o33!: String(count=0, hash=#, offset=0, value=o34?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o33, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o15?) -->{java.lang.Object...}
o34:: [CHAR] -->{java.lang.Object...}
o15:: [CHAR] -->{java.lang.Object...}
a2-><-o34
a2-><-o33
a2-><-o15
a2-><-o13
YES:  (JL1)
1:<simple.even.Main.main||1: push 1||args: a2||a2>
	o33!: String(count=0, hash=#, offset=0, value=o34?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o33, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o15?) -->{java.lang.Object...}
o34:: [CHAR] -->{java.lang.Object...}
o15:: [CHAR] -->{java.lang.Object...}
a2-><-o34
a2-><-o33
a2-><-o15
a2-><-o13
YES:  (JL1)
2:<simple.even.Main.main||2: Read ADDR from array||args: a2||a2, 1>
	o33!: String(count=0, hash=#, offset=0, value=o34?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o33, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o15?) -->{java.lang.Object...}
o34:: [CHAR] -->{java.lang.Object...}
o15:: [CHAR] -->{java.lang.Object...}
a2-><-o34
a2-><-o33
a2-><-o15
a2-><-o13
YES:  (JL1)
3:<simple.even.Main.main||3: java.lang.String.length()I||args: a2||o13>
	o33!: String(count=0, hash=#, offset=0, value=o34?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o33, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o15?) -->{java.lang.Object...}
o34:: [CHAR] -->{java.lang.Object...}
o15:: [CHAR] -->{java.lang.Object...}
a2-><-o34
a2-><-o33
a2-><-o15
a2-><-o13
YES:  (JL1)
4:<java.lang.String.length||0: load ADDR this||this: o13|| ->
<simple.even.Main.main||3: java.lang.String.length||args: a2|| ->
	o33!: String(count=0, hash=#, offset=0, value=o34?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o33, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o15?) -->{java.lang.Object...}
o34:: [CHAR] -->{java.lang.Object...}
o15:: [CHAR] -->{java.lang.Object...}
a2-><-o34
a2-><-o33
a2-><-o15
a2-><-o13
YES:  (JL1)
5:<java.lang.String.length||1: Read from count|| - ||o13>
<simple.even.Main.main||3: java.lang.String.length||args: a2|| ->
	o33!: String(count=0, hash=#, offset=0, value=o34?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o33, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o15?) -->{java.lang.Object...}
o34:: [CHAR] -->{java.lang.Object...}
o15:: [CHAR] -->{java.lang.Object...}
a2-><-o34
a2-><-o33
a2-><-o15
a2-><-o13
YES:  (JL1)
6:<java.lang.String.length||4: return INT|| - ||1>
<simple.even.Main.main||3: java.lang.String.length||args: a2|| ->
	o33!: String(count=0, hash=#, offset=0, value=o34?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o33, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o15?) -->{java.lang.Object...}
o34:: [CHAR] -->{java.lang.Object...}
o15:: [CHAR] -->{java.lang.Object...}
a2-><-o34
a2-><-o33
a2-><-o15
a2-><-o13
YES:  (JL1)
7:<simple.even.Main.main||6: store INT to even||args: a2||1>
	o33!: String(count=0, hash=#, offset=0, value=o34?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o33, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o15?) -->{java.lang.Object...}
o34:: [CHAR] -->{java.lang.Object...}
o15:: [CHAR] -->{java.lang.Object...}
a2-><-o34
a2-><-o33
a2-><-o15
a2-><-o13
YES:  (JL1)
8:<simple.even.Main.main||7: load ADDR args||args: a2, even: 1|| ->
	o33!: String(count=0, hash=#, offset=0, value=o34?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o33, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o15?) -->{java.lang.Object...}
o34:: [CHAR] -->{java.lang.Object...}
o15:: [CHAR] -->{java.lang.Object...}
a2-><-o34
a2-><-o33
a2-><-o15
a2-><-o13
YES:  (JL1)
9:<simple.even.Main.main||8: push 0||even: 1||a2>
	o33!: String(count=0, hash=#, offset=0, value=o34?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o33, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o15?) -->{java.lang.Object...}
o34:: [CHAR] -->{java.lang.Object...}
o15:: [CHAR] -->{java.lang.Object...}
a2-><-o34
a2-><-o33
a2-><-o15
a2-><-o13
YES:  (JL1)
10:<simple.even.Main.main||9: Read ADDR from array||even: 1||a2, 0>
	o33!: String(count=0, hash=#, offset=0, value=o34?) -->{java.lang.Object...}
	a2([java.lang.String...]): {o33, o13} -->{java.lang.Object...}
	o13!: String(count=1, hash=#, offset=0, value=o15?) -->{java.lang.Object...}
o34:: [CHAR] -->{java.lang.Object...}
o15:: [CHAR] -->{java.lang.Object...}
a2-><-o34
a2-><-o33
a2-><-o15
a2-><-o13
YES:  (JL1)
11:<simple.even.Main.main||10: java.lang.String.length()I||even: 1||o33>
	o33!: String(count=0, hash=#, offset=0, value=o34?) -->{java.lang.Object...}
o34:: [CHAR] -->{java.lang.Object...}
YES:  (JL1)
12:<java.lang.String.length||0: load ADDR this||this: o33|| ->
<simple.even.Main.main||10: java.lang.String.length||even: 1|| ->
	o33!: String(count=0, hash=#, offset=0, value=o34?) -->{java.lang.Object...}
o34:: [CHAR] -->{java.lang.Object...}
YES:  (JL1)
13:<java.lang.String.length||1: Read from count|| - ||o33>
<simple.even.Main.main||10: java.lang.String.length||even: 1|| ->
	o33!: String(count=0, hash=#, offset=0, value=o34?) -->{java.lang.Object...}
o34:: [CHAR] -->{java.lang.Object...}
YES:  (JL1)
14:<java.lang.String.length||4: return INT|| - ||0>
<simple.even.Main.main||10: java.lang.String.length||even: 1|| ->
YES:  (JL1)
15:<simple.even.Main.main||13: push 2||even: 1||0>
YES:  (JL1)
16:<simple.even.Main.main||14: TMOD||even: 1||0, 2>
YES:  (JL1)
17:<simple.even.Main.main||15: NE 0||even: 1||0>
YES:  (JL1)
18:<simple.even.Main.main||18: load INT even||even: 1|| ->
YES:  (JL1)
19:<simple.even.Main.main||19: NEG|| - ||1>
YES:  (JL1)
20:<simple.even.Main.main||20: store INT to even|| - ||-1>
YES:  (JL1)
21:<simple.even.Main.main||21: load INT even||even: -1|| ->
YES:  (JL1)
22:<simple.even.Main.main||22: simple.even.Even.even(I)Z|| - ||-1>
YES:  (JL1)
23:<simple.even.Even.even||0: load INT i||i: -1|| ->
<simple.even.Main.main||22: simple.even.Even.even|| - || ->
YES:  (JL1)
Start state of loop: 

<simple.even.Even.even||0: load INT i||i: i36|| ->
[a2(lv_0_0)]
<simple.even.Main.main||22: simple.even.Even.even|| - || ->
	a2([java.lang.String...]): length i6 -->{java.lang.Object...}
	i6: [2,+inf){0,+inf}
	i36: (-inf,0]{-inf,+inf}
YES:  (JL1)


In the loop head node, references [i36] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((initial_i36 <= 0 and 2 <= initial_i6) and (((path1_i36 = path1_i43 and path1_i290 = (path1_i43 - 2) and path1_i290 = res_i36 and path1_i36 = initial_i36) and (path1_i36 < 1 and path1_i43 < 0)) and ((res1_i36 = res1_i43 and res1_i290 = (res1_i43 - 2) and res_i36 = res1_i36) and !(res1_i36 < 1 and res1_i43 < 0))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(6)
NO
