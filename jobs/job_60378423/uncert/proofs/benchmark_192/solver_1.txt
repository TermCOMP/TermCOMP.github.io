MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/b6HIU.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could not be shown:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 131 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 52 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 11 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) IRSwTChainingProof [EQUIVALENT, 0 ms]
(16) IRSwT
(17) IRSwTTerminationDigraphProof [EQUIVALENT, 12 ms]
(18) IRSwT
(19) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(20) IRSwT
(21) IRSwTChainingProof [EQUIVALENT, 0 ms]
(22) IRSwT
(23) IRSwTTerminationDigraphProof [EQUIVALENT, 30 ms]
(24) IRSwT
(25) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(26) IRSwT
(27) IRSwTChainingProof [EQUIVALENT, 0 ms]
(28) IRSwT
(29) IRSwTTerminationDigraphProof [EQUIVALENT, 60 ms]
(30) IRSwT
(31) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(32) IRSwT
(33) TempFilterProof [SOUND, 291 ms]
(34) IRSwT
(35) IRSwTTerminationDigraphProof [EQUIVALENT, 25 ms]
(36) IRSwT
(37) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(38) IRSwT


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * All lasso-shaped runs of this program are terminating.
 */
public class MultiLasso {
    
    public static void main(String[] args) {
        int x = args[0].length() - args[1].length();
        int y;

        while (x > 0) {
            x++;
            y = x;
            while (y > 0) {
                y--;
            }
        }
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * All lasso-shaped runs of this program are terminating.
 */
public class MultiLasso {
    
    public static void main(String[] args) {
        int x = args[0].length() - args[1].length();
        int y;

        while (x > 0) {
            x++;
            y = x;
            while (y > 0) {
                y--;
            }
        }
    }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
MultiLasso.main([Ljava/lang/String;)V: Graph of 134 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: MultiLasso.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 17 IRulesP rules:
f167_0_main_LE(EOS(STATIC_167), i38, i38) -> f179_0_main_LE(EOS(STATIC_179), i38, i38) :|: TRUE
f179_0_main_LE(EOS(STATIC_179), i38, i38) -> f188_0_main_Inc(EOS(STATIC_188), i38) :|: i38 > 0
f188_0_main_Inc(EOS(STATIC_188), i38) -> f204_0_main_Load(EOS(STATIC_204), i38 + 1) :|: TRUE
f204_0_main_Load(EOS(STATIC_204), i40) -> f209_0_main_Store(EOS(STATIC_209), i40, i40) :|: TRUE
f209_0_main_Store(EOS(STATIC_209), i40, i40) -> f218_0_main_Load(EOS(STATIC_218), i40, i40) :|: TRUE
f218_0_main_Load(EOS(STATIC_218), i40, i40) -> f1913_0_main_Load(EOS(STATIC_1913), i40, i40) :|: TRUE
f1913_0_main_Load(EOS(STATIC_1913), i40, i66) -> f2570_0_main_Load(EOS(STATIC_2570), i40, i66) :|: TRUE
f2570_0_main_Load(EOS(STATIC_2570), i40, i476) -> f2595_0_main_LE(EOS(STATIC_2595), i40, i476, i476) :|: TRUE
f2595_0_main_LE(EOS(STATIC_2595), i40, matching1, matching2) -> f2608_0_main_LE(EOS(STATIC_2608), i40, 0, 0) :|: TRUE && matching1 = 0 && matching2 = 0
f2595_0_main_LE(EOS(STATIC_2595), i40, i629, i629) -> f2610_0_main_LE(EOS(STATIC_2610), i40, i629, i629) :|: TRUE
f2608_0_main_LE(EOS(STATIC_2608), i40, matching1, matching2) -> f2771_0_main_Load(EOS(STATIC_2771), i40) :|: 0 <= 0 && matching1 = 0 && matching2 = 0
f2771_0_main_Load(EOS(STATIC_2771), i40) -> f153_0_main_Load(EOS(STATIC_153), i40) :|: TRUE
f153_0_main_Load(EOS(STATIC_153), i34) -> f167_0_main_LE(EOS(STATIC_167), i34, i34) :|: TRUE
f2610_0_main_LE(EOS(STATIC_2610), i40, i629, i629) -> f2780_0_main_Inc(EOS(STATIC_2780), i40, i629) :|: i629 > 0
f2780_0_main_Inc(EOS(STATIC_2780), i40, i629) -> f2785_0_main_JMP(EOS(STATIC_2785), i40, i629 + -1) :|: TRUE
f2785_0_main_JMP(EOS(STATIC_2785), i40, i663) -> f2887_0_main_Load(EOS(STATIC_2887), i40, i663) :|: TRUE
f2887_0_main_Load(EOS(STATIC_2887), i40, i663) -> f2570_0_main_Load(EOS(STATIC_2570), i40, i663) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f2595_0_main_LE(EOS(STATIC_2595), i40:0, i629:0, i629:0) -> f2595_0_main_LE(EOS(STATIC_2595), i40:0, i629:0 - 1, i629:0 - 1) :|: i629:0 > 0
f2595_0_main_LE(EOS(STATIC_2595), i40:0, 0, 0) -> f2595_0_main_LE(EOS(STATIC_2595), i40:0 + 1, i40:0 + 1, i40:0 + 1) :|: i40:0 > 0
Filtered constant ground arguments:
   f2595_0_main_LE(x1, x2, x3, x4) -> f2595_0_main_LE(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f2595_0_main_LE(x1, x2, x3) -> f2595_0_main_LE(x1, x3)
Finished conversion. Obtained 2 rules.P rules:
f2595_0_main_LE(i40:0, i629:0) -> f2595_0_main_LE(i40:0, i629:0 - 1) :|: i629:0 > 0
f2595_0_main_LE(i40:0, cons_0) -> f2595_0_main_LE(i40:0 + 1, i40:0 + 1) :|: i40:0 > 0 && cons_0 = 0

----------------------------------------

(8)
Obligation:
Rules:
f2595_0_main_LE(i40:0, i629:0) -> f2595_0_main_LE(i40:0, i629:0 - 1) :|: i629:0 > 0
f2595_0_main_LE(x, x1) -> f2595_0_main_LE(x + 1, x + 1) :|: x > 0 && x1 = 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f2595_0_main_LE(i40:0, i629:0) -> f2595_0_main_LE(i40:0, arith) :|: i629:0 > 0 && arith = i629:0 - 1
f2595_0_main_LE(x2, x3) -> f2595_0_main_LE(x4, x4) :|: x2 > 0 && x3 = 0 && x4 = x2 + 1 && x4 = x2 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2595_0_main_LE(i40:0, i629:0) -> f2595_0_main_LE(i40:0, arith) :|: i629:0 > 0 && arith = i629:0 - 1
(2) f2595_0_main_LE(x2, x3) -> f2595_0_main_LE(x4, x4) :|: x2 > 0 && x3 = 0 && x4 = x2 + 1 && x4 = x2 + 1

Arcs:
(1) -> (1), (2)
(2) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f2595_0_main_LE(i40:0, i629:0) -> f2595_0_main_LE(i40:0, arith) :|: i629:0 > 0 && arith = i629:0 - 1
(2) f2595_0_main_LE(x2, x3) -> f2595_0_main_LE(x4, x4) :|: x2 > 0 && x3 = 0 && x4 = x2 + 1 && x4 = x2 + 1

Arcs:
(1) -> (1), (2)
(2) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f2595_0_main_LE(i40:0:0, i629:0:0) -> f2595_0_main_LE(i40:0:0, i629:0:0 - 1) :|: i629:0:0 > 0
f2595_0_main_LE(x2:0, cons_0) -> f2595_0_main_LE(x2:0 + 1, x2:0 + 1) :|: x2:0 > 0 && cons_0 = 0

----------------------------------------

(15) IRSwTChainingProof (EQUIVALENT)
Chaining!
----------------------------------------

(16)
Obligation:
Rules:
f2595_0_main_LE(x, x1) -> f2595_0_main_LE(x, x1 + -2) :|: TRUE && x1 >= 2
f2595_0_main_LE(x2:0, cons_0) -> f2595_0_main_LE(x2:0 + 1, x2:0 + 1) :|: x2:0 > 0 && cons_0 = 0
f2595_0_main_LE(x4, x5) -> f2595_0_main_LE(x4 + 1, x4 + 1) :|: TRUE && x4 >= 1 && x5 = 1

----------------------------------------

(17) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2595_0_main_LE(x, x1) -> f2595_0_main_LE(x, x1 + -2) :|: TRUE && x1 >= 2
(2) f2595_0_main_LE(x2:0, cons_0) -> f2595_0_main_LE(x2:0 + 1, x2:0 + 1) :|: x2:0 > 0 && cons_0 = 0
(3) f2595_0_main_LE(x4, x5) -> f2595_0_main_LE(x4 + 1, x4 + 1) :|: TRUE && x4 >= 1 && x5 = 1

Arcs:
(1) -> (1), (2), (3)
(2) -> (1)
(3) -> (1)

This digraph is fully evaluated!
----------------------------------------

(18)
Obligation:

Termination digraph:
Nodes:
(1) f2595_0_main_LE(x, x1) -> f2595_0_main_LE(x, x1 + -2) :|: TRUE && x1 >= 2
(2) f2595_0_main_LE(x4, x5) -> f2595_0_main_LE(x4 + 1, x4 + 1) :|: TRUE && x4 >= 1 && x5 = 1
(3) f2595_0_main_LE(x2:0, cons_0) -> f2595_0_main_LE(x2:0 + 1, x2:0 + 1) :|: x2:0 > 0 && cons_0 = 0

Arcs:
(1) -> (1), (2), (3)
(2) -> (1)
(3) -> (1)

This digraph is fully evaluated!

----------------------------------------

(19) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(20)
Obligation:
Rules:
f2595_0_main_LE(x:0, x1:0) -> f2595_0_main_LE(x:0, x1:0 - 2) :|: x1:0 > 1
f2595_0_main_LE(x4:0, cons_1) -> f2595_0_main_LE(x4:0 + 1, x4:0 + 1) :|: x4:0 > 0 && cons_1 = 1
f2595_0_main_LE(x2:0:0, cons_0) -> f2595_0_main_LE(x2:0:0 + 1, x2:0:0 + 1) :|: x2:0:0 > 0 && cons_0 = 0

----------------------------------------

(21) IRSwTChainingProof (EQUIVALENT)
Chaining!
----------------------------------------

(22)
Obligation:
Rules:
f2595_0_main_LE(x, x1) -> f2595_0_main_LE(x, x1 + -4) :|: TRUE && x1 >= 4
f2595_0_main_LE(x4:0, cons_1) -> f2595_0_main_LE(x4:0 + 1, x4:0 + 1) :|: x4:0 > 0 && cons_1 = 1
f2595_0_main_LE(x4, x5) -> f2595_0_main_LE(x4 + 1, x4 + 1) :|: TRUE && x4 >= 1 && x5 = 3
f2595_0_main_LE(x2:0:0, cons_0) -> f2595_0_main_LE(x2:0:0 + 1, x2:0:0 + 1) :|: x2:0:0 > 0 && cons_0 = 0
f2595_0_main_LE(x8, x9) -> f2595_0_main_LE(x8 + 1, x8 + 1) :|: TRUE && x8 >= 1 && x9 = 2

----------------------------------------

(23) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2595_0_main_LE(x, x1) -> f2595_0_main_LE(x, x1 + -4) :|: TRUE && x1 >= 4
(2) f2595_0_main_LE(x4:0, cons_1) -> f2595_0_main_LE(x4:0 + 1, x4:0 + 1) :|: x4:0 > 0 && cons_1 = 1
(3) f2595_0_main_LE(x4, x5) -> f2595_0_main_LE(x4 + 1, x4 + 1) :|: TRUE && x4 >= 1 && x5 = 3
(4) f2595_0_main_LE(x2:0:0, cons_0) -> f2595_0_main_LE(x2:0:0 + 1, x2:0:0 + 1) :|: x2:0:0 > 0 && cons_0 = 0
(5) f2595_0_main_LE(x8, x9) -> f2595_0_main_LE(x8 + 1, x8 + 1) :|: TRUE && x8 >= 1 && x9 = 2

Arcs:
(1) -> (1), (2), (3), (4), (5)
(2) -> (1), (3), (5)
(3) -> (1), (3), (5)
(4) -> (1), (3), (5)
(5) -> (1), (3), (5)

This digraph is fully evaluated!
----------------------------------------

(24)
Obligation:

Termination digraph:
Nodes:
(1) f2595_0_main_LE(x, x1) -> f2595_0_main_LE(x, x1 + -4) :|: TRUE && x1 >= 4
(2) f2595_0_main_LE(x4, x5) -> f2595_0_main_LE(x4 + 1, x4 + 1) :|: TRUE && x4 >= 1 && x5 = 3
(3) f2595_0_main_LE(x8, x9) -> f2595_0_main_LE(x8 + 1, x8 + 1) :|: TRUE && x8 >= 1 && x9 = 2
(4) f2595_0_main_LE(x2:0:0, cons_0) -> f2595_0_main_LE(x2:0:0 + 1, x2:0:0 + 1) :|: x2:0:0 > 0 && cons_0 = 0
(5) f2595_0_main_LE(x4:0, cons_1) -> f2595_0_main_LE(x4:0 + 1, x4:0 + 1) :|: x4:0 > 0 && cons_1 = 1

Arcs:
(1) -> (1), (2), (3), (4), (5)
(2) -> (1), (2), (3)
(3) -> (1), (2), (3)
(4) -> (1), (2), (3)
(5) -> (1), (2), (3)

This digraph is fully evaluated!

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f2595_0_main_LE(x4:0, cons_3) -> f2595_0_main_LE(x4:0 + 1, x4:0 + 1) :|: x4:0 > 0 && cons_3 = 3
f2595_0_main_LE(x8:0, cons_2) -> f2595_0_main_LE(x8:0 + 1, x8:0 + 1) :|: x8:0 > 0 && cons_2 = 2
f2595_0_main_LE(x2:0:0:0, cons_0) -> f2595_0_main_LE(x2:0:0:0 + 1, x2:0:0:0 + 1) :|: x2:0:0:0 > 0 && cons_0 = 0
f2595_0_main_LE(x:0, x1:0) -> f2595_0_main_LE(x:0, x1:0 - 4) :|: x1:0 > 3
f2595_0_main_LE(x4:0:0, cons_1) -> f2595_0_main_LE(x4:0:0 + 1, x4:0:0 + 1) :|: x4:0:0 > 0 && cons_1 = 1

----------------------------------------

(27) IRSwTChainingProof (EQUIVALENT)
Chaining!
----------------------------------------

(28)
Obligation:
Rules:
f2595_0_main_LE(x, x1) -> f2595_0_main_LE(x + 2, x + 2) :|: TRUE && x1 = 3 && x = 2
f2595_0_main_LE(x8:0, cons_2) -> f2595_0_main_LE(x8:0 + 1, x8:0 + 1) :|: x8:0 > 0 && cons_2 = 2
f2595_0_main_LE(x4, x5) -> f2595_0_main_LE(x4 + 2, x4 + 2) :|: TRUE && x5 = 3 && x4 = 1
f2595_0_main_LE(x2:0:0:0, cons_0) -> f2595_0_main_LE(x2:0:0:0 + 1, x2:0:0:0 + 1) :|: x2:0:0:0 > 0 && cons_0 = 0
f2595_0_main_LE(x:0, x1:0) -> f2595_0_main_LE(x:0, x1:0 - 4) :|: x1:0 > 3
f2595_0_main_LE(x12, x13) -> f2595_0_main_LE(x12 + 1, x12 + -3) :|: TRUE && x13 = 3 && x12 >= 3
f2595_0_main_LE(x4:0:0, cons_1) -> f2595_0_main_LE(x4:0:0 + 1, x4:0:0 + 1) :|: x4:0:0 > 0 && cons_1 = 1

----------------------------------------

(29) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2595_0_main_LE(x, x1) -> f2595_0_main_LE(x + 2, x + 2) :|: TRUE && x1 = 3 && x = 2
(2) f2595_0_main_LE(x8:0, cons_2) -> f2595_0_main_LE(x8:0 + 1, x8:0 + 1) :|: x8:0 > 0 && cons_2 = 2
(3) f2595_0_main_LE(x4, x5) -> f2595_0_main_LE(x4 + 2, x4 + 2) :|: TRUE && x5 = 3 && x4 = 1
(4) f2595_0_main_LE(x2:0:0:0, cons_0) -> f2595_0_main_LE(x2:0:0:0 + 1, x2:0:0:0 + 1) :|: x2:0:0:0 > 0 && cons_0 = 0
(5) f2595_0_main_LE(x:0, x1:0) -> f2595_0_main_LE(x:0, x1:0 - 4) :|: x1:0 > 3
(6) f2595_0_main_LE(x12, x13) -> f2595_0_main_LE(x12 + 1, x12 + -3) :|: TRUE && x13 = 3 && x12 >= 3
(7) f2595_0_main_LE(x4:0:0, cons_1) -> f2595_0_main_LE(x4:0:0 + 1, x4:0:0 + 1) :|: x4:0:0 > 0 && cons_1 = 1

Arcs:
(1) -> (5)
(2) -> (2), (5), (6)
(3) -> (6)
(4) -> (2), (5), (6)
(5) -> (1), (2), (3), (4), (5), (6), (7)
(6) -> (2), (4), (5), (6), (7)
(7) -> (2), (5), (6)

This digraph is fully evaluated!
----------------------------------------

(30)
Obligation:

Termination digraph:
Nodes:
(1) f2595_0_main_LE(x, x1) -> f2595_0_main_LE(x + 2, x + 2) :|: TRUE && x1 = 3 && x = 2
(2) f2595_0_main_LE(x:0, x1:0) -> f2595_0_main_LE(x:0, x1:0 - 4) :|: x1:0 > 3
(3) f2595_0_main_LE(x8:0, cons_2) -> f2595_0_main_LE(x8:0 + 1, x8:0 + 1) :|: x8:0 > 0 && cons_2 = 2
(4) f2595_0_main_LE(x2:0:0:0, cons_0) -> f2595_0_main_LE(x2:0:0:0 + 1, x2:0:0:0 + 1) :|: x2:0:0:0 > 0 && cons_0 = 0
(5) f2595_0_main_LE(x12, x13) -> f2595_0_main_LE(x12 + 1, x12 + -3) :|: TRUE && x13 = 3 && x12 >= 3
(6) f2595_0_main_LE(x4:0:0, cons_1) -> f2595_0_main_LE(x4:0:0 + 1, x4:0:0 + 1) :|: x4:0:0 > 0 && cons_1 = 1
(7) f2595_0_main_LE(x4, x5) -> f2595_0_main_LE(x4 + 2, x4 + 2) :|: TRUE && x5 = 3 && x4 = 1

Arcs:
(1) -> (2)
(2) -> (1), (2), (3), (4), (5), (6), (7)
(3) -> (2), (3), (5)
(4) -> (2), (3), (5)
(5) -> (2), (3), (4), (5), (6)
(6) -> (2), (3), (5)
(7) -> (5)

This digraph is fully evaluated!

----------------------------------------

(31) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(32)
Obligation:
Rules:
f2595_0_main_LE(cons_1, cons_3) -> f2595_0_main_LE(3, 3) :|: TRUE && cons_1 = 1 && cons_3 = 3
f2595_0_main_LE(x2:0:0:0:0, cons_0) -> f2595_0_main_LE(x2:0:0:0:0 + 1, x2:0:0:0:0 + 1) :|: x2:0:0:0:0 > 0 && cons_0 = 0
f2595_0_main_LE(x8:0:0, cons_2) -> f2595_0_main_LE(x8:0:0 + 1, x8:0:0 + 1) :|: x8:0:0 > 0 && cons_2 = 2
f2595_0_main_LE(x, x1) -> f2595_0_main_LE(4, 4) :|: TRUE && x = 2 && x1 = 3
f2595_0_main_LE(x:0:0, x1:0:0) -> f2595_0_main_LE(x:0:0, x1:0:0 - 4) :|: x1:0:0 > 3
f2595_0_main_LE(x2, x3) -> f2595_0_main_LE(x2 + 1, x2 - 3) :|: x2 > 2 && x3 = 3
f2595_0_main_LE(x4, x5) -> f2595_0_main_LE(x4 + 1, x4 + 1) :|: x4 > 0 && x5 = 1

----------------------------------------

(33) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2595_0_main_LE(VARIABLE, VARIABLE)
Replaced non-predefined constructor symbols by 0.The following proof was generated: 
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given IntTRS could not be shown:



- IntTRS
  - PolynomialOrderProcessor

Rules:
f2595_0_main_LE(c, c1) -> f2595_0_main_LE(c2, c3) :|: c3 = 3 && (c2 = 3 && (c1 = 3 && c = 1)) && (TRUE && cons_1 = 1 && cons_3 = 3)
f2595_0_main_LE(x2:0:0:0:0, c4) -> f2595_0_main_LE(c5, c6) :|: c6 = x2:0:0:0:0 + 1 && (c5 = x2:0:0:0:0 + 1 && c4 = 0) && (x2:0:0:0:0 > 0 && cons_0 = 0)
f2595_0_main_LE(x8:0:0, c7) -> f2595_0_main_LE(c8, c9) :|: c9 = x8:0:0 + 1 && (c8 = x8:0:0 + 1 && c7 = 2) && (x8:0:0 > 0 && cons_2 = 2)
f2595_0_main_LE(c10, c11) -> f2595_0_main_LE(c12, c13) :|: c13 = 4 && (c12 = 4 && (c11 = 3 && c10 = 2)) && (TRUE && x = 2 && x1 = 3)
f2595_0_main_LE(x:0:0, x1:0:0) -> f2595_0_main_LE(x:0:0, c14) :|: c14 = x1:0:0 - 4 && x1:0:0 > 3
f2595_0_main_LE(x2, c15) -> f2595_0_main_LE(c16, c17) :|: c17 = x2 - 3 && (c16 = x2 + 1 && c15 = 3) && (x2 > 2 && x3 = 3)
f2595_0_main_LE(x4, c18) -> f2595_0_main_LE(c19, c20) :|: c20 = x4 + 1 && (c19 = x4 + 1 && c18 = 1) && (x4 > 0 && x5 = 1)

Found the following polynomial interpretation:
[f2595_0_main_LE(x, x1)] = 1 - x

The following rules are decreasing:
f2595_0_main_LE(c, c1) -> f2595_0_main_LE(c2, c3) :|: c3 = 3 && (c2 = 3 && (c1 = 3 && c = 1)) && (TRUE && cons_1 = 1 && cons_3 = 3)
f2595_0_main_LE(x2:0:0:0:0, c4) -> f2595_0_main_LE(c5, c6) :|: c6 = x2:0:0:0:0 + 1 && (c5 = x2:0:0:0:0 + 1 && c4 = 0) && (x2:0:0:0:0 > 0 && cons_0 = 0)
f2595_0_main_LE(x8:0:0, c7) -> f2595_0_main_LE(c8, c9) :|: c9 = x8:0:0 + 1 && (c8 = x8:0:0 + 1 && c7 = 2) && (x8:0:0 > 0 && cons_2 = 2)
f2595_0_main_LE(c10, c11) -> f2595_0_main_LE(c12, c13) :|: c13 = 4 && (c12 = 4 && (c11 = 3 && c10 = 2)) && (TRUE && x = 2 && x1 = 3)
f2595_0_main_LE(x2, c15) -> f2595_0_main_LE(c16, c17) :|: c17 = x2 - 3 && (c16 = x2 + 1 && c15 = 3) && (x2 > 2 && x3 = 3)
f2595_0_main_LE(x4, c18) -> f2595_0_main_LE(c19, c20) :|: c20 = x4 + 1 && (c19 = x4 + 1 && c18 = 1) && (x4 > 0 && x5 = 1)
The following rules are bounded:
f2595_0_main_LE(c, c1) -> f2595_0_main_LE(c2, c3) :|: c3 = 3 && (c2 = 3 && (c1 = 3 && c = 1)) && (TRUE && cons_1 = 1 && cons_3 = 3)


- IntTRS
  - PolynomialOrderProcessor
    - IntTRS
      - PolynomialOrderProcessor

Rules:
f2595_0_main_LE(x2:0:0:0:0, c4) -> f2595_0_main_LE(c5, c6) :|: c6 = x2:0:0:0:0 + 1 && (c5 = x2:0:0:0:0 + 1 && c4 = 0) && (x2:0:0:0:0 > 0 && cons_0 = 0)
f2595_0_main_LE(x8:0:0, c7) -> f2595_0_main_LE(c8, c9) :|: c9 = x8:0:0 + 1 && (c8 = x8:0:0 + 1 && c7 = 2) && (x8:0:0 > 0 && cons_2 = 2)
f2595_0_main_LE(c10, c11) -> f2595_0_main_LE(c12, c13) :|: c13 = 4 && (c12 = 4 && (c11 = 3 && c10 = 2)) && (TRUE && x = 2 && x1 = 3)
f2595_0_main_LE(x:0:0, x1:0:0) -> f2595_0_main_LE(x:0:0, c14) :|: c14 = x1:0:0 - 4 && x1:0:0 > 3
f2595_0_main_LE(x2, c15) -> f2595_0_main_LE(c16, c17) :|: c17 = x2 - 3 && (c16 = x2 + 1 && c15 = 3) && (x2 > 2 && x3 = 3)
f2595_0_main_LE(x4, c18) -> f2595_0_main_LE(c19, c20) :|: c20 = x4 + 1 && (c19 = x4 + 1 && c18 = 1) && (x4 > 0 && x5 = 1)

Found the following polynomial interpretation:
[f2595_0_main_LE(x, x1)] = 2 - x

The following rules are decreasing:
f2595_0_main_LE(x2:0:0:0:0, c4) -> f2595_0_main_LE(c5, c6) :|: c6 = x2:0:0:0:0 + 1 && (c5 = x2:0:0:0:0 + 1 && c4 = 0) && (x2:0:0:0:0 > 0 && cons_0 = 0)
f2595_0_main_LE(x8:0:0, c7) -> f2595_0_main_LE(c8, c9) :|: c9 = x8:0:0 + 1 && (c8 = x8:0:0 + 1 && c7 = 2) && (x8:0:0 > 0 && cons_2 = 2)
f2595_0_main_LE(c10, c11) -> f2595_0_main_LE(c12, c13) :|: c13 = 4 && (c12 = 4 && (c11 = 3 && c10 = 2)) && (TRUE && x = 2 && x1 = 3)
f2595_0_main_LE(x2, c15) -> f2595_0_main_LE(c16, c17) :|: c17 = x2 - 3 && (c16 = x2 + 1 && c15 = 3) && (x2 > 2 && x3 = 3)
f2595_0_main_LE(x4, c18) -> f2595_0_main_LE(c19, c20) :|: c20 = x4 + 1 && (c19 = x4 + 1 && c18 = 1) && (x4 > 0 && x5 = 1)
The following rules are bounded:
f2595_0_main_LE(c10, c11) -> f2595_0_main_LE(c12, c13) :|: c13 = 4 && (c12 = 4 && (c11 = 3 && c10 = 2)) && (TRUE && x = 2 && x1 = 3)


- IntTRS
  - PolynomialOrderProcessor
    - IntTRS
      - PolynomialOrderProcessor
        - IntTRS

Rules:
f2595_0_main_LE(x2:0:0:0:0, c4) -> f2595_0_main_LE(c5, c6) :|: c6 = x2:0:0:0:0 + 1 && (c5 = x2:0:0:0:0 + 1 && c4 = 0) && (x2:0:0:0:0 > 0 && cons_0 = 0)
f2595_0_main_LE(x8:0:0, c7) -> f2595_0_main_LE(c8, c9) :|: c9 = x8:0:0 + 1 && (c8 = x8:0:0 + 1 && c7 = 2) && (x8:0:0 > 0 && cons_2 = 2)
f2595_0_main_LE(x:0:0, x1:0:0) -> f2595_0_main_LE(x:0:0, c14) :|: c14 = x1:0:0 - 4 && x1:0:0 > 3
f2595_0_main_LE(x2, c15) -> f2595_0_main_LE(c16, c17) :|: c17 = x2 - 3 && (c16 = x2 + 1 && c15 = 3) && (x2 > 2 && x3 = 3)
f2595_0_main_LE(x4, c18) -> f2595_0_main_LE(c19, c20) :|: c20 = x4 + 1 && (c19 = x4 + 1 && c18 = 1) && (x4 > 0 && x5 = 1)



----------------------------------------

(34)
Obligation:
Rules:
f2595_0_main_LE(x2:0:0:0:0, cons_0) -> f2595_0_main_LE(x2:0:0:0:0 + 1, x2:0:0:0:0 + 1) :|: x2:0:0:0:0 > 0 && cons_0 = 0
f2595_0_main_LE(x8:0:0, cons_2) -> f2595_0_main_LE(x8:0:0 + 1, x8:0:0 + 1) :|: x8:0:0 > 0 && cons_2 = 2
f2595_0_main_LE(x:0:0, x1:0:0) -> f2595_0_main_LE(x:0:0, x1:0:0 - 4) :|: x1:0:0 > 3
f2595_0_main_LE(x2, x3) -> f2595_0_main_LE(x2 + 1, x2 - 3) :|: x2 > 2 && x3 = 3
f2595_0_main_LE(x4, x5) -> f2595_0_main_LE(x4 + 1, x4 + 1) :|: x4 > 0 && x5 = 1

----------------------------------------

(35) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2595_0_main_LE(x2:0:0:0:0, cons_0) -> f2595_0_main_LE(x2:0:0:0:0 + 1, x2:0:0:0:0 + 1) :|: x2:0:0:0:0 > 0 && cons_0 = 0
(2) f2595_0_main_LE(x8:0:0, cons_2) -> f2595_0_main_LE(x8:0:0 + 1, x8:0:0 + 1) :|: x8:0:0 > 0 && cons_2 = 2
(3) f2595_0_main_LE(x:0:0, x1:0:0) -> f2595_0_main_LE(x:0:0, x1:0:0 - 4) :|: x1:0:0 > 3
(4) f2595_0_main_LE(x2, x3) -> f2595_0_main_LE(x2 + 1, x2 - 3) :|: x2 > 2 && x3 = 3
(5) f2595_0_main_LE(x4, x5) -> f2595_0_main_LE(x4 + 1, x4 + 1) :|: x4 > 0 && x5 = 1

Arcs:
(1) -> (2), (3), (4)
(2) -> (2), (3), (4)
(3) -> (1), (2), (3), (4), (5)
(4) -> (1), (2), (3), (4), (5)
(5) -> (2), (3), (4)

This digraph is fully evaluated!
----------------------------------------

(36)
Obligation:

Termination digraph:
Nodes:
(1) f2595_0_main_LE(x2:0:0:0:0, cons_0) -> f2595_0_main_LE(x2:0:0:0:0 + 1, x2:0:0:0:0 + 1) :|: x2:0:0:0:0 > 0 && cons_0 = 0
(2) f2595_0_main_LE(x:0:0, x1:0:0) -> f2595_0_main_LE(x:0:0, x1:0:0 - 4) :|: x1:0:0 > 3
(3) f2595_0_main_LE(x8:0:0, cons_2) -> f2595_0_main_LE(x8:0:0 + 1, x8:0:0 + 1) :|: x8:0:0 > 0 && cons_2 = 2
(4) f2595_0_main_LE(x2, x3) -> f2595_0_main_LE(x2 + 1, x2 - 3) :|: x2 > 2 && x3 = 3
(5) f2595_0_main_LE(x4, x5) -> f2595_0_main_LE(x4 + 1, x4 + 1) :|: x4 > 0 && x5 = 1

Arcs:
(1) -> (2), (3), (4)
(2) -> (1), (2), (3), (4), (5)
(3) -> (2), (3), (4)
(4) -> (1), (2), (3), (4), (5)
(5) -> (2), (3), (4)

This digraph is fully evaluated!

----------------------------------------

(37) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(38)
Obligation:
Rules:
f2595_0_main_LE(x2:0:0:0:0:0, cons_0) -> f2595_0_main_LE(x2:0:0:0:0:0 + 1, x2:0:0:0:0:0 + 1) :|: x2:0:0:0:0:0 > 0 && cons_0 = 0
f2595_0_main_LE(x2:0, cons_3) -> f2595_0_main_LE(x2:0 + 1, x2:0 - 3) :|: x2:0 > 2 && cons_3 = 3
f2595_0_main_LE(x8:0:0:0, cons_2) -> f2595_0_main_LE(x8:0:0:0 + 1, x8:0:0:0 + 1) :|: x8:0:0:0 > 0 && cons_2 = 2
f2595_0_main_LE(x:0:0:0, x1:0:0:0) -> f2595_0_main_LE(x:0:0:0, x1:0:0:0 - 4) :|: x1:0:0:0 > 3
f2595_0_main_LE(x4:0, cons_1) -> f2595_0_main_LE(x4:0 + 1, x4:0 + 1) :|: x4:0 > 0 && cons_1 = 1
