NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/JmiRt.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 204 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.fib;

public class Fibonacci {

	public static void fib(int n) {
		int i = 0;
		int j = 1;
		int t = 0;
		while (j != n) {
			t = j+i;
			i = j;
			j = t;
		}
	}
}


package simple.fib;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Fibonacci.fib(args.length);
	}

}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.fib;

public class Fibonacci {

	public static void fib(int n) {
		int i = 0;
		int j = 1;
		int t = 0;
		while (j != n) {
			t = j+i;
			i = j;
			j = t;
		}
	}
}


package simple.fib;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Fibonacci.fib(args.length);
	}

}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<simple.fib.Main.main||0: load ADDR args||args: a18|| ->
	a18([java.lang.String...]): length 0 -->{java.lang.Object...}
YES:  (JL1)
1:<simple.fib.Main.main||1: arraylength|| - ||a18>
	a18([java.lang.String...]): length 0 -->{java.lang.Object...}
YES:  (JL1)
2:<simple.fib.Main.main||2: simple.fib.Fibonacci.fib(I)V|| - ||0>
YES:  (JL1)
3:<simple.fib.Fibonacci.fib||0: push 0||n: 0|| ->
<simple.fib.Main.main||2: simple.fib.Fibonacci.fib|| - || ->
YES:  (JL1)
4:<simple.fib.Fibonacci.fib||1: store INT to i||n: 0||0>
<simple.fib.Main.main||2: simple.fib.Fibonacci.fib|| - || ->
YES:  (JL1)
5:<simple.fib.Fibonacci.fib||2: push 1||n: 0, i: 0|| ->
<simple.fib.Main.main||2: simple.fib.Fibonacci.fib|| - || ->
YES:  (JL1)
6:<simple.fib.Fibonacci.fib||3: store INT to j||n: 0, i: 0||1>
<simple.fib.Main.main||2: simple.fib.Fibonacci.fib|| - || ->
YES:  (JL1)
7:<simple.fib.Fibonacci.fib||4: push 0||n: 0, i: 0, j: 1|| ->
<simple.fib.Main.main||2: simple.fib.Fibonacci.fib|| - || ->
YES:  (JL1)
8:<simple.fib.Fibonacci.fib||5: store INT to t||n: 0, i: 0, j: 1||0>
<simple.fib.Main.main||2: simple.fib.Fibonacci.fib|| - || ->
YES:  (JL1)
9:<simple.fib.Fibonacci.fib||6: load INT j||n: 0, i: 0, j: 1|| ->
<simple.fib.Main.main||2: simple.fib.Fibonacci.fib|| - || ->
YES:  (JL1)
Start state of loop: 

<simple.fib.Fibonacci.fib||6: load INT j||n: i23, i: i34, j: i35|| ->
[a7(lv_0_0)]
<simple.fib.Main.main||2: simple.fib.Fibonacci.fib|| - || ->
	i23: [0,+inf)
	i34: [0,+inf)(l3)
	i35: [1,+inf)(l2){0,+inf}
	a7([java.lang.String...]): length i23 -->{java.lang.Object...}
YES:  (JL1)


In the loop head node, references [i35, i23, i34] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((0 <= initial_i23 and 0 <= initial_i34 and 1 <= initial_i35) and ((((path1_i38 = (path1_i35 + path1_i34) and path1_i23 = res_i23 and path1_i35 = res_i34 and path1_i38 = res_i35 and path1_i23 = initial_i23 and path1_i34 = initial_i34 and path1_i35 = initial_i35) and (path1_i35 != path1_i23 and path1_i35 > path1_i23)) or ((path1_i38 = (path1_i35 + path1_i34) and path1_i23 = res_i23 and path1_i35 = res_i34 and path1_i38 = res_i35 and path1_i23 = initial_i23 and path1_i34 = initial_i34 and path1_i35 = initial_i35) and (path1_i35 != path1_i23 and path1_i35 > path1_i23))) and (((res1_i38 = (res1_i35 + res1_i34) and res_i23 = res1_i23 and res_i34 = res1_i34 and res_i35 = res1_i35) and !(res1_i35 != res1_i23 and res1_i35 > res1_i23)) and ((res1_i38 = (res1_i35 + res1_i34) and res_i23 = res1_i23 and res_i34 = res1_i34 and res_i35 = res1_i35) and !(res1_i35 != res1_i23 and res1_i35 > res1_i23)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
