YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/E0w5i.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 165 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 57 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 14 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 24 ms]
(16) IntTRS
(17) RankingReductionPairProof [EQUIVALENT, 0 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Java can do infinite data objects, too.
 * Here we take the first n elements from an
 * ascending infinite list of integer numbers.
 *
 * @author Carsten Fuhs
 */
public class Take {

    public static int[] take(int n, MyIterator f) {
        int[] result = new int[n];
        for (int i = 0; i < n; ++i) {
            if (f.hasNext()) {
                result[i] = f.next();
            }
            else {
                break;
            }
        }
        return result;
    }

    public static void main(String args[]) {
        int start = args[0].length();
        int howMany = args[1].length();
        From f = new From(start);
        int[] firstHowMany = take(howMany, f);
    }
}

interface MyIterator {
    boolean hasNext();
    int next();
}

class From implements MyIterator {

    private int current;

    public From(int start) {
        this.current = start;
    }

    public boolean hasNext() {
        return true;
    }

    public int next() {
        return current++;
    }
}




----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Java can do infinite data objects, too.
 * Here we take the first n elements from an
 * ascending infinite list of integer numbers.
 *
 * @author Carsten Fuhs
 */
public class Take {

    public static int[] take(int n, MyIterator f) {
        int[] result = new int[n];
        for (int i = 0; i < n; ++i) {
            if (f.hasNext()) {
                result[i] = f.next();
            }
            else {
                break;
            }
        }
        return result;
    }

    public static void main(String args[]) {
        int start = args[0].length();
        int howMany = args[1].length();
        From f = new From(start);
        int[] firstHowMany = take(howMany, f);
    }
}

interface MyIterator {
    boolean hasNext();
    int next();
}

class From implements MyIterator {

    private int current;

    public From(int start) {
        this.current = start;
    }

    public boolean hasNext() {
        return true;
    }

    public int next() {
        return current++;
    }
}




----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Take.main([Ljava/lang/String;)V: Graph of 194 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Take.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*From: [current]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 26 IRulesP rules:
f795_0_take_Load(EOS(STATIC_795), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, i87) -> f796_0_take_GE(EOS(STATIC_796), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, i87, i85) :|: TRUE
f796_0_take_GE(EOS(STATIC_796), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, i87, i85) -> f818_0_take_GE(EOS(STATIC_818), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, i87, i85) :|: i87 < i85
f818_0_take_GE(EOS(STATIC_818), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, i87, i85) -> f829_0_take_Load(EOS(STATIC_829), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87) :|: i87 < i85
f829_0_take_Load(EOS(STATIC_829), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87) -> f831_0_take_InvokeMethod(EOS(STATIC_831), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(From(EOC, i86))) :|: TRUE
f831_0_take_InvokeMethod(EOS(STATIC_831), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(From(EOC, i86))) -> f833_0_hasNext_ConstantStackPush(EOS(STATIC_833), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87) :|: TRUE
f833_0_hasNext_ConstantStackPush(EOS(STATIC_833), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87) -> f837_0_hasNext_Return(EOS(STATIC_837), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, 1) :|: TRUE
f837_0_hasNext_Return(EOS(STATIC_837), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, matching1) -> f838_0_take_EQ(EOS(STATIC_838), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, 1) :|: TRUE && matching1 = 1
f838_0_take_EQ(EOS(STATIC_838), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, matching1) -> f839_0_take_Load(EOS(STATIC_839), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87) :|: 1 > 0 && matching1 = 1
f839_0_take_Load(EOS(STATIC_839), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87) -> f841_0_take_Load(EOS(STATIC_841), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85))) :|: TRUE
f841_0_take_Load(EOS(STATIC_841), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85))) -> f843_0_take_Load(EOS(STATIC_843), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87) :|: TRUE
f843_0_take_Load(EOS(STATIC_843), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87) -> f845_0_take_InvokeMethod(EOS(STATIC_845), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, java.lang.Object(From(EOC, i86))) :|: TRUE
f845_0_take_InvokeMethod(EOS(STATIC_845), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, java.lang.Object(From(EOC, i86))) -> f848_0_next_Load(EOS(STATIC_848), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, java.lang.Object(From(EOC, i86))) :|: TRUE
f848_0_next_Load(EOS(STATIC_848), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, java.lang.Object(From(EOC, i86))) -> f850_0_next_Duplicate(EOS(STATIC_850), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, java.lang.Object(From(EOC, i86))) :|: TRUE
f850_0_next_Duplicate(EOS(STATIC_850), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, java.lang.Object(From(EOC, i86))) -> f857_0_next_FieldAccess(EOS(STATIC_857), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, java.lang.Object(From(EOC, i86)), java.lang.Object(From(EOC, i86))) :|: TRUE
f857_0_next_FieldAccess(EOS(STATIC_857), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, java.lang.Object(From(EOC, i86)), java.lang.Object(From(EOC, i86))) -> f860_0_next_Duplicate(EOS(STATIC_860), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, java.lang.Object(From(EOC, i86)), i86) :|: TRUE
f860_0_next_Duplicate(EOS(STATIC_860), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, java.lang.Object(From(EOC, i86)), i86) -> f863_0_next_ConstantStackPush(EOS(STATIC_863), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, i86, java.lang.Object(From(EOC, i86)), i86) :|: TRUE
f863_0_next_ConstantStackPush(EOS(STATIC_863), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, i86, java.lang.Object(From(EOC, i86)), i86) -> f865_0_next_IntArithmetic(EOS(STATIC_865), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, i86, java.lang.Object(From(EOC, i86)), i86, 1) :|: TRUE
f865_0_next_IntArithmetic(EOS(STATIC_865), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, i86, java.lang.Object(From(EOC, i86)), i86, matching1) -> f868_0_next_FieldAccess(EOS(STATIC_868), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, i86, java.lang.Object(From(EOC, i86)), i86 + 1) :|: i86 >= 0 && matching1 = 1
f868_0_next_FieldAccess(EOS(STATIC_868), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, i86, java.lang.Object(From(EOC, i86)), i100) -> f871_0_next_Return(EOS(STATIC_871), i85, java.lang.Object(From(EOC, i100)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, i86) :|: TRUE
f871_0_next_Return(EOS(STATIC_871), i85, java.lang.Object(From(EOC, i100)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, i86) -> f873_0_take_ArrayAccess(EOS(STATIC_873), i85, java.lang.Object(From(EOC, i100)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, i86) :|: TRUE
f873_0_take_ArrayAccess(EOS(STATIC_873), i85, java.lang.Object(From(EOC, i100)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, i86) -> f875_0_take_ArrayAccess(EOS(STATIC_875), i85, java.lang.Object(From(EOC, i100)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, i86) :|: TRUE
f875_0_take_ArrayAccess(EOS(STATIC_875), i85, java.lang.Object(From(EOC, i100)), java.lang.Object(ARRAY(i85)), i87, java.lang.Object(ARRAY(i85)), i87, i86) -> f878_0_take_Inc(EOS(STATIC_878), i85, java.lang.Object(From(EOC, i100)), java.lang.Object(ARRAY(i85)), i87) :|: i87 < i85
f878_0_take_Inc(EOS(STATIC_878), i85, java.lang.Object(From(EOC, i100)), java.lang.Object(ARRAY(i85)), i87) -> f880_0_take_JMP(EOS(STATIC_880), i85, java.lang.Object(From(EOC, i100)), java.lang.Object(ARRAY(i85)), i87 + 1) :|: TRUE
f880_0_take_JMP(EOS(STATIC_880), i85, java.lang.Object(From(EOC, i100)), java.lang.Object(ARRAY(i85)), i102) -> f914_0_take_Load(EOS(STATIC_914), i85, java.lang.Object(From(EOC, i100)), java.lang.Object(ARRAY(i85)), i102) :|: TRUE
f914_0_take_Load(EOS(STATIC_914), i85, java.lang.Object(From(EOC, i100)), java.lang.Object(ARRAY(i85)), i102) -> f793_0_take_Load(EOS(STATIC_793), i85, java.lang.Object(From(EOC, i100)), java.lang.Object(ARRAY(i85)), i102) :|: TRUE
f793_0_take_Load(EOS(STATIC_793), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87) -> f795_0_take_Load(EOS(STATIC_795), i85, java.lang.Object(From(EOC, i86)), java.lang.Object(ARRAY(i85)), i87, i87) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f795_0_take_Load(EOS(STATIC_795), i85:0, java.lang.Object(From(EOC, i86:0)), java.lang.Object(ARRAY(i85:0)), i87:0, i87:0) -> f795_0_take_Load(EOS(STATIC_795), i85:0, java.lang.Object(From(EOC, i86:0 + 1)), java.lang.Object(ARRAY(i85:0)), i87:0 + 1, i87:0 + 1) :|: i87:0 < i85:0 && i86:0 > -1
Filtered constant ground arguments:
   f795_0_take_Load(x1, x2, x3, x4, x5, x6) -> f795_0_take_Load(x2, x3, x4, x5, x6)
   EOS(x1) -> EOS
   From(x1, x2) -> From(x2)
Filtered duplicate arguments:
   f795_0_take_Load(x1, x2, x3, x4, x5) -> f795_0_take_Load(x1, x2, x3, x5)
Finished conversion. Obtained 1 rules.P rules:
f795_0_take_Load(i85:0, java.lang.Object(From(i86:0)), java.lang.Object(ARRAY(i85:0)), i87:0, i86:0, i85:0) -> f795_0_take_Load(i85:0, java.lang.Object(From(i86:0 + 1)), java.lang.Object(ARRAY(i85:0)), i87:0 + 1, i86:0 + 1, i85:0) :|: i87:0 < i85:0 && i86:0 > -1

----------------------------------------

(8)
Obligation:
Rules:
f795_0_take_Load(i85:0, java.lang.Object(From(i86:0)), java.lang.Object(ARRAY(i85:0)), i87:0, i86:0, i85:0) -> f795_0_take_Load(i85:0, java.lang.Object(From(i86:0 + 1)), java.lang.Object(ARRAY(i85:0)), i87:0 + 1, i86:0 + 1, i85:0) :|: i87:0 < i85:0 && i86:0 > -1

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f795_0_take_Load(i85:0, java.lang.Object(From(i86:0)), java.lang.Object(ARRAY(i85:0)), i87:0, i86:0, i85:0) -> f795_0_take_Load(i85:0, java.lang.Object(From(arith1)), java.lang.Object(ARRAY(i85:0)), arith, arith1, i85:0) :|: i87:0 < i85:0 && i86:0 > -1 && arith = i87:0 + 1 && arith1 = i86:0 + 1 && arith1 = i86:0 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f795_0_take_Load(i85:0, java.lang.Object(From(i86:0)), java.lang.Object(ARRAY(i85:0)), i87:0, i86:0, i85:0) -> f795_0_take_Load(i85:0, java.lang.Object(From(arith1)), java.lang.Object(ARRAY(i85:0)), arith, arith1, i85:0) :|: i87:0 < i85:0 && i86:0 > -1 && arith = i87:0 + 1 && arith1 = i86:0 + 1 && arith1 = i86:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f795_0_take_Load(i85:0, java.lang.Object(From(i86:0)), java.lang.Object(ARRAY(i85:0)), i87:0, i86:0, i85:0) -> f795_0_take_Load(i85:0, java.lang.Object(From(arith1)), java.lang.Object(ARRAY(i85:0)), arith, arith1, i85:0) :|: i87:0 < i85:0 && i86:0 > -1 && arith = i87:0 + 1 && arith1 = i86:0 + 1 && arith1 = i86:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f795_0_take_Load(i85:0:0, java.lang.Object(From(i86:0:0)), java.lang.Object(ARRAY(i85:0:0)), i87:0:0, i86:0:0, i85:0:0) -> f795_0_take_Load(i85:0:0, java.lang.Object(From(i86:0:0 + 1)), java.lang.Object(ARRAY(i85:0:0)), i87:0:0 + 1, i86:0:0 + 1, i85:0:0) :|: i87:0:0 < i85:0:0 && i86:0:0 > -1

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f795_0_take_Load(INTEGER, VARIABLE, VARIABLE, INTEGER, INTEGER, INTEGER)
java.lang.Object(VARIABLE)
From(INTEGER)
ARRAY(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f795_0_take_Load(i85:0:0, c, c1, i87:0:0, i86:0:0, i85:0:0) -> f795_0_take_Load(i85:0:0, c2, c3, c4, c5, i85:0:0) :|: c5 = i86:0:0 + 1 && (c4 = i87:0:0 + 1 && (c3 = 0 && (c2 = 0 && (c1 = 0 && c = 0)))) && (i87:0:0 < i85:0:0 && i86:0:0 > -1)

----------------------------------------

(17) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f795_0_take_Load ] = -1*f795_0_take_Load_4 + f795_0_take_Load_6

The following rules are decreasing:
f795_0_take_Load(i85:0:0, c, c1, i87:0:0, i86:0:0, i85:0:0) -> f795_0_take_Load(i85:0:0, c2, c3, c4, c5, i85:0:0) :|: c5 = i86:0:0 + 1 && (c4 = i87:0:0 + 1 && (c3 = 0 && (c2 = 0 && (c1 = 0 && c = 0)))) && (i87:0:0 < i85:0:0 && i86:0:0 > -1)

The following rules are bounded:
f795_0_take_Load(i85:0:0, c, c1, i87:0:0, i86:0:0, i85:0:0) -> f795_0_take_Load(i85:0:0, c2, c3, c4, c5, i85:0:0) :|: c5 = i86:0:0 + 1 && (c4 = i87:0:0 + 1 && (c3 = 0 && (c2 = 0 && (c1 = 0 && c = 0)))) && (i87:0:0 < i85:0:0 && i86:0:0 > -1)


----------------------------------------

(18)
YES
