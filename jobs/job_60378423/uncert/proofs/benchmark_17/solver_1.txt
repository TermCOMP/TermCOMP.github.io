YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/wtpKi.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 90 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 35 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 36 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 2 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 23 ms]
(16) IntTRS
(17) RankingReductionPairProof [EQUIVALENT, 14 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class GCD5 {
  public static int gcd(int a, int b) {
    int tmp;
    while(b > 0 && a > 0) {
      tmp = b;
      b = a % b;
      a = tmp;
    }
    return a;
  }

  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    gcd(x, y);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class GCD5 {
  public static int gcd(int a, int b) {
    int tmp;
    while(b > 0 && a > 0) {
      tmp = b;
      b = a % b;
      a = tmp;
    }
    return a;
  }

  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    gcd(x, y);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
GCD5.main([Ljava/lang/String;)V: Graph of 195 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: GCD5.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 16 IRulesP rules:
f628_0_gcd_LE(EOS(STATIC_628), i73, i82, i82) -> f633_0_gcd_LE(EOS(STATIC_633), i73, i82, i82) :|: TRUE
f633_0_gcd_LE(EOS(STATIC_633), i73, i82, i82) -> f663_0_gcd_Load(EOS(STATIC_663), i73, i82) :|: i82 > 0
f663_0_gcd_Load(EOS(STATIC_663), i73, i82) -> f665_0_gcd_LE(EOS(STATIC_665), i73, i82, i73) :|: TRUE
f665_0_gcd_LE(EOS(STATIC_665), i86, i82, i86) -> f668_0_gcd_LE(EOS(STATIC_668), i86, i82, i86) :|: TRUE
f668_0_gcd_LE(EOS(STATIC_668), i86, i82, i86) -> f747_0_gcd_Load(EOS(STATIC_747), i86, i82) :|: i86 > 0
f747_0_gcd_Load(EOS(STATIC_747), i86, i82) -> f755_0_gcd_Store(EOS(STATIC_755), i86, i82, i82) :|: TRUE
f755_0_gcd_Store(EOS(STATIC_755), i86, i82, i82) -> f762_0_gcd_Load(EOS(STATIC_762), i86, i82, i82) :|: TRUE
f762_0_gcd_Load(EOS(STATIC_762), i86, i82, i82) -> f772_0_gcd_Load(EOS(STATIC_772), i82, i82, i86) :|: TRUE
f772_0_gcd_Load(EOS(STATIC_772), i82, i82, i86) -> f773_0_gcd_IntArithmetic(EOS(STATIC_773), i82, i86, i82) :|: TRUE
f773_0_gcd_IntArithmetic(EOS(STATIC_773), i82, i86, i82) -> f777_0_gcd_Store(EOS(STATIC_777), i82, i86 % i82) :|: TRUE
f777_0_gcd_Store(EOS(STATIC_777), i82, i97) -> f780_0_gcd_Load(EOS(STATIC_780), i97, i82) :|: TRUE
f780_0_gcd_Load(EOS(STATIC_780), i97, i82) -> f782_0_gcd_Store(EOS(STATIC_782), i97, i82) :|: TRUE
f782_0_gcd_Store(EOS(STATIC_782), i97, i82) -> f785_0_gcd_JMP(EOS(STATIC_785), i82, i97) :|: TRUE
f785_0_gcd_JMP(EOS(STATIC_785), i82, i97) -> f828_0_gcd_Load(EOS(STATIC_828), i82, i97) :|: TRUE
f828_0_gcd_Load(EOS(STATIC_828), i82, i97) -> f619_0_gcd_Load(EOS(STATIC_619), i82, i97) :|: TRUE
f619_0_gcd_Load(EOS(STATIC_619), i73, i74) -> f628_0_gcd_LE(EOS(STATIC_628), i73, i74, i74) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f628_0_gcd_LE(EOS(STATIC_628), i73:0, i82:0, i82:0) -> f628_0_gcd_LE'(EOS(STATIC_628), i73:0, i82:0, i82:0) :|: i73:0 > 0 && i82:0 > 0
f628_0_gcd_LE'(EOS(STATIC_628), i73:0, i82:0, i82:0) -> f628_0_gcd_LE(EOS(STATIC_628), i82:0, i73:0 - i82:0 * div, i73:0 - i82:0 * div1) :|: i82:0 > 0 && i73:0 > 0 && i73:0 - i82:0 * div + i82:0 > 0 && i82:0 > i73:0 - i82:0 * div && i82:0 > i73:0 - i82:0 * div1 && i73:0 - i82:0 * div1 + i82:0 > 0
Filtered constant ground arguments:
   f628_0_gcd_LE(x1, x2, x3, x4) -> f628_0_gcd_LE(x2, x3, x4)
   f628_0_gcd_LE'(x1, x2, x3, x4) -> f628_0_gcd_LE'(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f628_0_gcd_LE'(x1, x2, x3) -> f628_0_gcd_LE'(x1, x3)
Finished conversion. Obtained 2 rules.P rules:
f628_0_gcd_LE(i73:0, i82:0, i82:0) -> f628_0_gcd_LE'(i73:0, i82:0) :|: i73:0 > 0 && i82:0 > 0
f628_0_gcd_LE'(i73:0, i82:0) -> f628_0_gcd_LE(i82:0, i73:0 - i82:0 * div, i73:0 - i82:0 * div1) :|: i73:0 > 0 && i82:0 > 0 && i73:0 - i82:0 * div + i82:0 > 0 && i82:0 > i73:0 - i82:0 * div && i73:0 - i82:0 * div1 + i82:0 > 0 && i82:0 > i73:0 - i82:0 * div1

----------------------------------------

(8)
Obligation:
Rules:
f628_0_gcd_LE(i73:0, i82:0, i82:0) -> f628_0_gcd_LE'(i73:0, i82:0) :|: i73:0 > 0 && i82:0 > 0
f628_0_gcd_LE'(x, x1) -> f628_0_gcd_LE(x1, x - x1 * x2, x - x1 * x3) :|: x > 0 && x1 > 0 && x - x1 * x2 + x1 > 0 && x1 > x - x1 * x2 && x - x1 * x3 + x1 > 0 && x1 > x - x1 * x3

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f628_0_gcd_LE(i73:0, i82:0, i82:0) -> f628_0_gcd_LE'(i73:0, i82:0) :|: i73:0 > 0 && i82:0 > 0
f628_0_gcd_LE'(x, x1) -> f628_0_gcd_LE(x1, arith, arith1) :|: x > 0 && x1 > 0 && x - x1 * x2 + x1 > 0 && x1 > x - x1 * x2 && x - x1 * x3 + x1 > 0 && x1 > x - x1 * x3 && arith = x - x1 * x2 && arith1 = x - x1 * x3

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f628_0_gcd_LE(i73:0, i82:0, i82:0) -> f628_0_gcd_LE'(i73:0, i82:0) :|: i73:0 > 0 && i82:0 > 0
(2) f628_0_gcd_LE'(x, x1) -> f628_0_gcd_LE(x1, arith, arith1) :|: x > 0 && x1 > 0 && x - x1 * x2 + x1 > 0 && x1 > x - x1 * x2 && x - x1 * x3 + x1 > 0 && x1 > x - x1 * x3 && arith = x - x1 * x2 && arith1 = x - x1 * x3

Arcs:
(1) -> (2)
(2) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f628_0_gcd_LE(i73:0, i82:0, i82:0) -> f628_0_gcd_LE'(i73:0, i82:0) :|: i73:0 > 0 && i82:0 > 0
(2) f628_0_gcd_LE'(x, x1) -> f628_0_gcd_LE(x1, arith, arith1) :|: x > 0 && x1 > 0 && x - x1 * x2 + x1 > 0 && x1 > x - x1 * x2 && x - x1 * x3 + x1 > 0 && x1 > x - x1 * x3 && arith = x - x1 * x2 && arith1 = x - x1 * x3

Arcs:
(1) -> (2)
(2) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f628_0_gcd_LE(i73:0:0, i82:0:0, i82:0:0) -> f628_0_gcd_LE(i82:0:0, i73:0:0 - i82:0:0 * x2:0, i73:0:0 - i82:0:0 * x3:0) :|: i82:0:0 > i73:0:0 - i82:0:0 * x3:0 && i73:0:0 - i82:0:0 * x3:0 + i82:0:0 > 0 && i82:0:0 > i73:0:0 - i82:0:0 * x2:0 && i73:0:0 - i82:0:0 * x2:0 + i82:0:0 > 0 && i82:0:0 > 0 && i73:0:0 > 0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f628_0_gcd_LE(INTEGER, INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f628_0_gcd_LE(i73:0:0, i82:0:0, i82:0:0) -> f628_0_gcd_LE(i82:0:0, c, c1) :|: c1 = i73:0:0 - i82:0:0 * x3:0 && c = i73:0:0 - i82:0:0 * x2:0 && (i82:0:0 > i73:0:0 - i82:0:0 * x3:0 && i73:0:0 - i82:0:0 * x3:0 + i82:0:0 > 0 && i82:0:0 > i73:0:0 - i82:0:0 * x2:0 && i73:0:0 - i82:0:0 * x2:0 + i82:0:0 > 0 && i82:0:0 > 0 && i73:0:0 > 0)

----------------------------------------

(17) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f628_0_gcd_LE ] = f628_0_gcd_LE_3

The following rules are decreasing:
f628_0_gcd_LE(i73:0:0, i82:0:0, i82:0:0) -> f628_0_gcd_LE(i82:0:0, c, c1) :|: c1 = i73:0:0 - i82:0:0 * x3:0 && c = i73:0:0 - i82:0:0 * x2:0 && (i82:0:0 > i73:0:0 - i82:0:0 * x3:0 && i73:0:0 - i82:0:0 * x3:0 + i82:0:0 > 0 && i82:0:0 > i73:0:0 - i82:0:0 * x2:0 && i73:0:0 - i82:0:0 * x2:0 + i82:0:0 > 0 && i82:0:0 > 0 && i73:0:0 > 0)

The following rules are bounded:
f628_0_gcd_LE(i73:0:0, i82:0:0, i82:0:0) -> f628_0_gcd_LE(i82:0:0, c, c1) :|: c1 = i73:0:0 - i82:0:0 * x3:0 && c = i73:0:0 - i82:0:0 * x2:0 && (i82:0:0 > i73:0:0 - i82:0:0 * x3:0 && i73:0:0 - i82:0:0 * x3:0 + i82:0:0 > 0 && i82:0:0 > i73:0:0 - i82:0:0 * x2:0 && i73:0:0 - i82:0:0 * x2:0 + i82:0:0 > 0 && i82:0:0 > 0 && i73:0:0 > 0)


----------------------------------------

(18)
YES
