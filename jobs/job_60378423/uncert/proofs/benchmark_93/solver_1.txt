YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/kwrLU.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 19 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package ArrayObjects;

public class ArrayObjects {
	public static void main(String[] argv) {
		Object obj0 = new Object();
		Object obj1 = new Object();
		Object obj2 = new Object();
		Object[] data = {obj0, obj1, obj2};
		while (data[0] != obj0);
		while (data[1] != obj1);
		while (data[2] != obj2);
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package ArrayObjects;

public class ArrayObjects {
	public static void main(String[] argv) {
		Object obj0 = new Object();
		Object obj1 = new Object();
		Object obj2 = new Object();
		Object[] data = {obj0, obj1, obj2};
		while (data[0] != obj0);
		while (data[1] != obj1);
		while (data[2] != obj2);
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
ArrayObjects.ArrayObjects.main([Ljava/lang/String;)V: Graph of 44 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Proven termination by absence of SCCs
----------------------------------------

(6)
TRUE
