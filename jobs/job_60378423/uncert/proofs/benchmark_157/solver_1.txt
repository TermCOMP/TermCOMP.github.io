NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/o3La1.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 115 ms]
(4) JBCTerminationGraph
(5) JBCNonTerm [COMPLETE, 47 ms]
(6) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.whileIncrPart;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		WhileIncrPart.increase(args.length);

	}

}


package simple.whileIncrPart;

public class WhileIncrPart {

	public static void increase(int i) {
		while (i > 0) {
			if (i > 3) {
				i++;
			} else {
			  i--;
			}
		}
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.whileIncrPart;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		WhileIncrPart.increase(args.length);

	}

}


package simple.whileIncrPart;

public class WhileIncrPart {

	public static void increase(int i) {
		while (i > 0) {
			if (i > 3) {
				i++;
			} else {
			  i--;
			}
		}
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
simple.whileIncrPart.Main.main([Ljava/lang/String;)V: Graph of 24 nodes with 1 SCC.





----------------------------------------

(5) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<simple.whileIncrPart.Main.main||0: load ADDR args||args: a20|| ->
	a20([java.lang.String...]): length 4 -->{java.lang.Object...}
YES:  (JL1)
1:<simple.whileIncrPart.Main.main||1: arraylength|| - ||a20>
	a20([java.lang.String...]): length 4 -->{java.lang.Object...}
YES:  (JL1)
2:<simple.whileIncrPart.Main.main||2: simple.whileIncrPart.WhileIncrPart.increase(I)V|| - ||4>
YES:  (JL1)
3:<simple.whileIncrPart.WhileIncrPart.increase||0: load INT i||i: 4|| ->
<simple.whileIncrPart.Main.main||2: simple.whileIncrPart.WhileIncrPart.increase|| - || ->
YES:  (JL1)
Start state of loop: 

<simple.whileIncrPart.WhileIncrPart.increase||0: load INT i||i: i47|| ->
[a9(lv_0_0)]
<simple.whileIncrPart.Main.main||2: simple.whileIncrPart.WhileIncrPart.increase|| - || ->
	i47: [0,+inf)(l1)
	i48: [0,+inf)(l2)
	a9([java.lang.String...]): length i48 -->{java.lang.Object...}
YES:  (JL1)


In the loop head node, references [i47] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((0 <= initial_i47 and 0 <= initial_i48) and (((path2_i47 = path2_i232 and path2_i232 = path2_i236 and path2_i240 = (path2_i236 + 1) and path2_i240 = res_i47 and path2_i47 = initial_i47) and (path2_i232 > 0 and T and 3 = 3 and path2_i236 > 3)) and ((res2_i47 = res2_i232 and res2_i232 = res2_i236 and res2_i240 = (res2_i236 + 1) and res_i47 = res2_i47) and !(res2_i232 > 0 and T and 3 = 3 and res2_i236 > 3))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(6)
NO
