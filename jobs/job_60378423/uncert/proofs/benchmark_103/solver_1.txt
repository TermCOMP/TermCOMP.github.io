YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/83NoB.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 177 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 1 ms]
(6) AND
    (7) JBCTerminationSCC
        (8) SCCToIRSProof [SOUND, 27 ms]
        (9) IRSwT
        (10) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (11) IRSwT
        (12) IRSwTTerminationDigraphProof [EQUIVALENT, 4 ms]
        (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) TempFilterProof [SOUND, 3 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (19) YES
    (20) JBCTerminationSCC
        (21) SCCToIRSProof [SOUND, 14 ms]
        (22) IRSwT
        (23) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (24) IRSwT
        (25) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
        (26) IRSwT
        (27) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (28) IRSwT
        (29) TempFilterProof [SOUND, 12 ms]
        (30) IntTRS
        (31) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (32) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class List2 {
	private List2 next;
	private int mark;

	static void visit(List2 c) {
		int expectedMark = c.mark;
		while (c != null && c.mark == expectedMark) {
			c.mark = expectedMark + 1;
			c = c.next;
		}
	}

	public static void main(String[] args) {
		//Create cyclic list:
		int length = args.length;
		List2 cur = new List2();
		List2 last = cur;
		while (length-- > 0) {
			List2 n = new List2();
			n.next = cur;
			cur = n;
		}
		last.next = cur;

		visit(cur);		
	}
}




----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class List2 {
	private List2 next;
	private int mark;

	static void visit(List2 c) {
		int expectedMark = c.mark;
		while (c != null && c.mark == expectedMark) {
			c.mark = expectedMark + 1;
			c = c.next;
		}
	}

	public static void main(String[] args) {
		//Create cyclic list:
		int length = args.length;
		List2 cur = new List2();
		List2 last = cur;
		while (length-- > 0) {
			List2 n = new List2();
			n.next = cur;
			cur = n;
		}
		last.next = cur;

		visit(cur);		
	}
}




----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
List2.main([Ljava/lang/String;)V: Graph of 56 nodes with 1 SCC.



List2.visit(LList2;)V: Graph of 29 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 2 SCCss.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: List2.visit(LList2;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*List2: [mark, next]
*Marker field analysis yielded the following relations that could be markers:
*List2.mark = iconst_0 (Introduced counter i147)
----------------------------------------

(8) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 19 IRulesP rules:
f1911_0_visit_NULL(EOS(STATIC_1911), java.lang.Object(o79sub0), matching1, java.lang.Object(o79sub0), i147) -> f2882_0_visit_NULL(EOS(STATIC_2882), java.lang.Object(o79sub0), 0, java.lang.Object(o79sub0), i147) :|: TRUE && matching1 = 0
f2882_0_visit_NULL(EOS(STATIC_2882), java.lang.Object(o79sub0), matching1, java.lang.Object(o79sub0), i147) -> f2886_0_visit_Load(EOS(STATIC_2886), java.lang.Object(o79sub0), 0, i147) :|: TRUE && matching1 = 0
f2886_0_visit_Load(EOS(STATIC_2886), java.lang.Object(o79sub0), matching1, i147) -> f2908_0_visit_FieldAccess(EOS(STATIC_2908), java.lang.Object(o79sub0), 0, java.lang.Object(o79sub0), i147) :|: TRUE && matching1 = 0
f2908_0_visit_FieldAccess(EOS(STATIC_2908), java.lang.Object(List2(EOC, i122, o872052624247)), matching1, java.lang.Object(List2(EOC, i122, o872052624247)), i147) -> f2911_0_visit_FieldAccess(EOS(STATIC_2911), java.lang.Object(List2(EOC, i122, o872052624247)), 0, java.lang.Object(List2(EOC, i122, o872052624247)), i147) :|: TRUE && matching1 = 0
f2911_0_visit_FieldAccess(EOS(STATIC_2911), java.lang.Object(List2(EOC, i122, o872052624247)), matching1, java.lang.Object(List2(EOC, i122, o872052624247)), i147) -> f2913_0_visit_Load(EOS(STATIC_2913), java.lang.Object(List2(EOC, i122, o872052624247)), 0, i122, i147) :|: TRUE && matching1 = 0
f2913_0_visit_Load(EOS(STATIC_2913), java.lang.Object(List2(EOC, i122, o872052624247)), matching1, i122, i147) -> f2916_0_visit_NE(EOS(STATIC_2916), java.lang.Object(List2(EOC, i122, o872052624247)), 0, i122, 0, i147) :|: TRUE && matching1 = 0
f2916_0_visit_NE(EOS(STATIC_2916), java.lang.Object(List2(EOC, matching1, o872052624247)), matching2, matching3, matching4, i147) -> f2939_0_visit_NE(EOS(STATIC_2939), java.lang.Object(List2(EOC, 0, o872052624247)), 0, 0, 0, i147) :|: i122 = 0 && matching1 = 0 && matching2 = 0 && matching3 = 0 && matching4 = 0
f2939_0_visit_NE(EOS(STATIC_2939), java.lang.Object(List2(EOC, matching1, o872052624247)), matching2, matching3, matching4, i147) -> f2953_0_visit_Load(EOS(STATIC_2953), java.lang.Object(List2(EOC, 0, o872052624247)), 0, i147) :|: TRUE && matching1 = 0 && matching2 = 0 && matching3 = 0 && matching4 = 0
f2953_0_visit_Load(EOS(STATIC_2953), java.lang.Object(List2(EOC, matching1, o872052624247)), matching2, i147) -> f2959_0_visit_Load(EOS(STATIC_2959), java.lang.Object(List2(EOC, 0, o872052624247)), 0, java.lang.Object(List2(EOC, 0, o872052624247)), i147) :|: TRUE && matching1 = 0 && matching2 = 0
f2959_0_visit_Load(EOS(STATIC_2959), java.lang.Object(List2(EOC, matching1, o872052624247)), matching2, java.lang.Object(List2(EOC, matching3, o872052624247)), i147) -> f2969_0_visit_ConstantStackPush(EOS(STATIC_2969), java.lang.Object(List2(EOC, 0, o872052624247)), 0, java.lang.Object(List2(EOC, 0, o872052624247)), 0, i147) :|: TRUE && matching1 = 0 && matching2 = 0 && matching3 = 0
f2969_0_visit_ConstantStackPush(EOS(STATIC_2969), java.lang.Object(List2(EOC, matching1, o872052624247)), matching2, java.lang.Object(List2(EOC, matching3, o872052624247)), matching4, i147) -> f2983_0_visit_IntArithmetic(EOS(STATIC_2983), java.lang.Object(List2(EOC, 0, o872052624247)), 0, java.lang.Object(List2(EOC, 0, o872052624247)), 0, 1, i147) :|: TRUE && matching1 = 0 && matching2 = 0 && matching3 = 0 && matching4 = 0
f2983_0_visit_IntArithmetic(EOS(STATIC_2983), java.lang.Object(List2(EOC, matching1, o872052624247)), matching2, java.lang.Object(List2(EOC, matching3, o872052624247)), matching4, matching5, i147) -> f2998_0_visit_FieldAccess(EOS(STATIC_2998), java.lang.Object(List2(EOC, 0, o872052624247)), 0, java.lang.Object(List2(EOC, 0, o872052624247)), 1, i147) :|: TRUE && matching1 = 0 && matching2 = 0 && matching3 = 0 && matching4 = 0 && matching5 = 1
f2998_0_visit_FieldAccess(EOS(STATIC_2998), java.lang.Object(List2(EOC, matching1, o872052624247)), matching2, java.lang.Object(List2(EOC, matching3, o872052624247)), matching4, i147) -> f3002_0_visit_Load(EOS(STATIC_3002), java.lang.Object(List2(EOC, 1, o87put2052624247)), 0, i147 + -1) :|: i147 >= 0 && matching1 = 0 && matching2 = 0 && matching3 = 0 && matching4 = 1
f3002_0_visit_Load(EOS(STATIC_3002), java.lang.Object(List2(EOC, matching1, o872052624247)), matching2, i147) -> f3006_0_visit_FieldAccess(EOS(STATIC_3006), 0, java.lang.Object(List2(EOC, 1, o872052624247)), i147) :|: TRUE && matching1 = 1 && matching2 = 0
f3006_0_visit_FieldAccess(EOS(STATIC_3006), matching1, java.lang.Object(List2(EOC, matching2, o872052624247)), i147) -> f3011_0_visit_Store(EOS(STATIC_3011), 0, o870, i147) :|: TRUE && matching1 = 0 && matching2 = 1
f3011_0_visit_Store(EOS(STATIC_3011), matching1, o870, i147) -> f3014_0_visit_JMP(EOS(STATIC_3014), o870, 0, i147) :|: TRUE && matching1 = 0
f3014_0_visit_JMP(EOS(STATIC_3014), o870, matching1, i147) -> f3027_0_visit_Load(EOS(STATIC_3027), o870, 0, i147) :|: TRUE && matching1 = 0
f3027_0_visit_Load(EOS(STATIC_3027), o870, matching1, i147) -> f1901_0_visit_Load(EOS(STATIC_1901), o870, 0, i147) :|: TRUE && matching1 = 0
f1901_0_visit_Load(EOS(STATIC_1901), o670, matching1, i147) -> f1911_0_visit_NULL(EOS(STATIC_1911), o670, 0, o670, i147) :|: TRUE && matching1 = 0
Combined rules. Obtained 1 IRulesP rules:
f1911_0_visit_NULL(EOS(STATIC_1911), java.lang.Object(List2(EOC, 0, o872052624247:0)), 0, java.lang.Object(List2(EOC, 0, o872052624247:0)), i147:0) -> f1911_0_visit_NULL(EOS(STATIC_1911), o870:0, 0, o870:0, i147:0 - 1) :|: i147:0 > -1
Filtered constant ground arguments:
   f1911_0_visit_NULL(x1, x2, x3, x4, x5) -> f1911_0_visit_NULL(x2, x4, x5)
   EOS(x1) -> EOS
   List2(x1, x2, x3) -> List2(x3)
Filtered duplicate arguments:
   f1911_0_visit_NULL(x1, x2, x3) -> f1911_0_visit_NULL(x2, x3)
Finished conversion. Obtained 1 rules.P rules:
f1911_0_visit_NULL(java.lang.Object(List2(o872052624247:0)), i147:0) -> f1911_0_visit_NULL(o870:0, i147:0 - 1) :|: i147:0 > -1

----------------------------------------

(9)
Obligation:
Rules:
f1911_0_visit_NULL(java.lang.Object(List2(o872052624247:0)), i147:0) -> f1911_0_visit_NULL(o870:0, i147:0 - 1) :|: i147:0 > -1

----------------------------------------

(10) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(11)
Obligation:
Rules:
f1911_0_visit_NULL(java.lang.Object(List2(o872052624247:0)), i147:0) -> f1911_0_visit_NULL(o870:0, arith) :|: i147:0 > -1 && arith = i147:0 - 1

----------------------------------------

(12) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f1911_0_visit_NULL(java.lang.Object(List2(o872052624247:0)), i147:0) -> f1911_0_visit_NULL(o870:0, arith) :|: i147:0 > -1 && arith = i147:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f1911_0_visit_NULL(java.lang.Object(List2(o872052624247:0)), i147:0) -> f1911_0_visit_NULL(o870:0, arith) :|: i147:0 > -1 && arith = i147:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f1911_0_visit_NULL(java.lang.Object(List2(o872052624247:0:0)), i147:0:0) -> f1911_0_visit_NULL(o870:0:0, i147:0:0 - 1) :|: i147:0:0 > -1

----------------------------------------

(16) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f1911_0_visit_NULL(VARIABLE, INTEGER)
java.lang.Object(VARIABLE)
List2(VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(17)
Obligation:
Rules:
f1911_0_visit_NULL(c, i147:0:0) -> f1911_0_visit_NULL(o870:0:0, c1) :|: c1 = i147:0:0 - 1 && c = 0 && i147:0:0 > -1

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f1911_0_visit_NULL(x, x1)] = x1

The following rules are decreasing:
f1911_0_visit_NULL(c, i147:0:0) -> f1911_0_visit_NULL(o870:0:0, c1) :|: c1 = i147:0:0 - 1 && c = 0 && i147:0:0 > -1
The following rules are bounded:
f1911_0_visit_NULL(c, i147:0:0) -> f1911_0_visit_NULL(o870:0:0, c1) :|: c1 = i147:0:0 - 1 && c = 0 && i147:0:0 > -1

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: List2.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(21) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 18 IRulesP rules:
f2910_0_main_Inc(EOS(STATIC_2910), i118, i118) -> f2912_0_main_LE(EOS(STATIC_2912), i118 + -1, i118) :|: TRUE
f2912_0_main_LE(EOS(STATIC_2912), i123, i126) -> f2915_0_main_LE(EOS(STATIC_2915), i123, i126) :|: TRUE
f2915_0_main_LE(EOS(STATIC_2915), i123, i126) -> f2918_0_main_New(EOS(STATIC_2918), i123) :|: i126 > 0
f2918_0_main_New(EOS(STATIC_2918), i123) -> f2941_0_main_Duplicate(EOS(STATIC_2941), i123) :|: TRUE
f2941_0_main_Duplicate(EOS(STATIC_2941), i123) -> f2956_0_main_InvokeMethod(EOS(STATIC_2956), i123) :|: TRUE
f2956_0_main_InvokeMethod(EOS(STATIC_2956), i123) -> f2967_0__init__Load(EOS(STATIC_2967), i123) :|: TRUE
f2967_0__init__Load(EOS(STATIC_2967), i123) -> f2997_0__init__InvokeMethod(EOS(STATIC_2997), i123) :|: TRUE
f2997_0__init__InvokeMethod(EOS(STATIC_2997), i123) -> f3001_0__init__Return(EOS(STATIC_3001), i123) :|: TRUE
f3001_0__init__Return(EOS(STATIC_3001), i123) -> f3005_0_main_Store(EOS(STATIC_3005), i123) :|: TRUE
f3005_0_main_Store(EOS(STATIC_3005), i123) -> f3009_0_main_Load(EOS(STATIC_3009), i123) :|: TRUE
f3009_0_main_Load(EOS(STATIC_3009), i123) -> f3013_0_main_Load(EOS(STATIC_3013), i123) :|: TRUE
f3013_0_main_Load(EOS(STATIC_3013), i123) -> f3016_0_main_FieldAccess(EOS(STATIC_3016), i123) :|: TRUE
f3016_0_main_FieldAccess(EOS(STATIC_3016), i123) -> f3104_0_main_Load(EOS(STATIC_3104), i123) :|: TRUE
f3104_0_main_Load(EOS(STATIC_3104), i123) -> f3679_0_main_Store(EOS(STATIC_3679), i123) :|: TRUE
f3679_0_main_Store(EOS(STATIC_3679), i123) -> f3684_0_main_JMP(EOS(STATIC_3684), i123) :|: TRUE
f3684_0_main_JMP(EOS(STATIC_3684), i123) -> f3711_0_main_Load(EOS(STATIC_3711), i123) :|: TRUE
f3711_0_main_Load(EOS(STATIC_3711), i123) -> f2907_0_main_Load(EOS(STATIC_2907), i123) :|: TRUE
f2907_0_main_Load(EOS(STATIC_2907), i118) -> f2910_0_main_Inc(EOS(STATIC_2910), i118, i118) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f2910_0_main_Inc(EOS(STATIC_2910), i118:0, i118:0) -> f2910_0_main_Inc(EOS(STATIC_2910), i118:0 - 1, i118:0 - 1) :|: i118:0 > 0
Filtered constant ground arguments:
   f2910_0_main_Inc(x1, x2, x3) -> f2910_0_main_Inc(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f2910_0_main_Inc(x1, x2) -> f2910_0_main_Inc(x2)
Finished conversion. Obtained 1 rules.P rules:
f2910_0_main_Inc(i118:0) -> f2910_0_main_Inc(i118:0 - 1) :|: i118:0 > 0

----------------------------------------

(22)
Obligation:
Rules:
f2910_0_main_Inc(i118:0) -> f2910_0_main_Inc(i118:0 - 1) :|: i118:0 > 0

----------------------------------------

(23) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(24)
Obligation:
Rules:
f2910_0_main_Inc(i118:0) -> f2910_0_main_Inc(arith) :|: i118:0 > 0 && arith = i118:0 - 1

----------------------------------------

(25) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2910_0_main_Inc(i118:0) -> f2910_0_main_Inc(arith) :|: i118:0 > 0 && arith = i118:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(26)
Obligation:

Termination digraph:
Nodes:
(1) f2910_0_main_Inc(i118:0) -> f2910_0_main_Inc(arith) :|: i118:0 > 0 && arith = i118:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(27) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(28)
Obligation:
Rules:
f2910_0_main_Inc(i118:0:0) -> f2910_0_main_Inc(i118:0:0 - 1) :|: i118:0:0 > 0

----------------------------------------

(29) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2910_0_main_Inc(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(30)
Obligation:
Rules:
f2910_0_main_Inc(i118:0:0) -> f2910_0_main_Inc(c) :|: c = i118:0:0 - 1 && i118:0:0 > 0

----------------------------------------

(31) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f2910_0_main_Inc(x)] = x

The following rules are decreasing:
f2910_0_main_Inc(i118:0:0) -> f2910_0_main_Inc(c) :|: c = i118:0:0 - 1 && i118:0:0 > 0
The following rules are bounded:
f2910_0_main_Inc(i118:0:0) -> f2910_0_main_Inc(c) :|: c = i118:0:0 - 1 && i118:0:0 > 0

----------------------------------------

(32)
YES
