NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/Ice5e.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 75 ms]
(4) JBCTerminationGraph
(5) JBCNonTerm [COMPLETE, 35 ms]
(6) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.whileIncr;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		WhileIncr.increase(args.length);

	}

}


package simple.whileIncr;

public class WhileIncr {

	public static void increase(int i) {
		while (i > 0) {
			i++;
		}
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.whileIncr;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		WhileIncr.increase(args.length);

	}

}


package simple.whileIncr;

public class WhileIncr {

	public static void increase(int i) {
		while (i > 0) {
			i++;
		}
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
simple.whileIncr.Main.main([Ljava/lang/String;)V: Graph of 15 nodes with 1 SCC.





----------------------------------------

(5) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<simple.whileIncr.Main.main||0: load ADDR args||args: a10|| ->
	a10([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
1:<simple.whileIncr.Main.main||1: arraylength|| - ||a10>
	a10([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
2:<simple.whileIncr.Main.main||2: simple.whileIncr.WhileIncr.increase(I)V|| - ||1>
YES:  (JL1)
3:<simple.whileIncr.WhileIncr.increase||0: load INT i||i: 1|| ->
<simple.whileIncr.Main.main||2: simple.whileIncr.WhileIncr.increase|| - || ->
YES:  (JL1)
Start state of loop: 

<simple.whileIncr.WhileIncr.increase||0: load INT i||i: i36|| ->
[a4(lv_0_0)]
<simple.whileIncr.Main.main||2: simple.whileIncr.WhileIncr.increase|| - || ->
	i36: [0,+inf)(l1)
	i37: [0,+inf)(l1)
	a4([java.lang.String...]): length i37 -->{java.lang.Object...}
YES:  (JL1)


In the loop head node, references [i36] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((0 <= initial_i36 and 0 <= initial_i37) and (((path1_i36 = path1_i671 and path1_i675 = (path1_i671 + 1) and path1_i675 = res_i36 and path1_i36 = initial_i36) and path1_i671 > 0) and ((res1_i36 = res1_i671 and res1_i675 = (res1_i671 + 1) and res_i36 = res1_i36) and !res1_i671 > 0)))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(6)
NO
