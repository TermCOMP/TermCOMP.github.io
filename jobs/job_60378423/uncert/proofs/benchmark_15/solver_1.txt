YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/rdDyT.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 163 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 53 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 13 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 31 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 9 ms]
(18) IntTRS
(19) RankingReductionPairProof [EQUIVALENT, 0 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class GCD3 {
  public static int mod(int a, int b) {
    if(b == 0) {
      return b;
    }
    if(b < 0) {
      a = -a;
    }
    if(a > 0) {
      while(a>=b) {
        a -= b;
      }
      return a;
    } else {
      while(a < 0) {
        a -= b;
      }
      return a;
    }
  }

  public static int gcd(int a, int b) {
    int tmp;
    while(b > 0 && a > 0) {
      tmp = b;
      b = mod(a, b);
      a = tmp;
    }
    return a;
  }

  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    gcd(x, y);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class GCD3 {
  public static int mod(int a, int b) {
    if(b == 0) {
      return b;
    }
    if(b < 0) {
      a = -a;
    }
    if(a > 0) {
      while(a>=b) {
        a -= b;
      }
      return a;
    } else {
      while(a < 0) {
        a -= b;
      }
      return a;
    }
  }

  public static int gcd(int a, int b) {
    int tmp;
    while(b > 0 && a > 0) {
      tmp = b;
      b = mod(a, b);
      a = tmp;
    }
    return a;
  }

  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    gcd(x, y);
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
GCD3.main([Ljava/lang/String;)V: Graph of 215 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: GCD3.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 37 IRulesP rules:
f530_0_gcd_LE(EOS(STATIC_530), i62, i68, i68) -> f536_0_gcd_LE(EOS(STATIC_536), i62, i68, i68) :|: TRUE
f536_0_gcd_LE(EOS(STATIC_536), i62, i68, i68) -> f539_0_gcd_Load(EOS(STATIC_539), i62, i68) :|: i68 > 0
f539_0_gcd_Load(EOS(STATIC_539), i62, i68) -> f541_0_gcd_LE(EOS(STATIC_541), i62, i68, i62) :|: TRUE
f541_0_gcd_LE(EOS(STATIC_541), i69, i68, i69) -> f544_0_gcd_LE(EOS(STATIC_544), i69, i68, i69) :|: TRUE
f544_0_gcd_LE(EOS(STATIC_544), i69, i68, i69) -> f552_0_gcd_Load(EOS(STATIC_552), i69, i68) :|: i69 > 0
f552_0_gcd_Load(EOS(STATIC_552), i69, i68) -> f561_0_gcd_Store(EOS(STATIC_561), i69, i68, i68) :|: TRUE
f561_0_gcd_Store(EOS(STATIC_561), i69, i68, i68) -> f563_0_gcd_Load(EOS(STATIC_563), i69, i68, i68) :|: TRUE
f563_0_gcd_Load(EOS(STATIC_563), i69, i68, i68) -> f569_0_gcd_Load(EOS(STATIC_569), i68, i68, i69) :|: TRUE
f569_0_gcd_Load(EOS(STATIC_569), i68, i68, i69) -> f571_0_gcd_InvokeMethod(EOS(STATIC_571), i68, i69, i68) :|: TRUE
f571_0_gcd_InvokeMethod(EOS(STATIC_571), i68, i69, i68) -> f574_0_mod_Load(EOS(STATIC_574), i68, i69, i68) :|: TRUE
f574_0_mod_Load(EOS(STATIC_574), i68, i69, i68) -> f577_0_mod_NE(EOS(STATIC_577), i68, i69, i68, i68) :|: TRUE
f577_0_mod_NE(EOS(STATIC_577), i68, i69, i68, i68) -> f580_0_mod_Load(EOS(STATIC_580), i68, i69, i68) :|: i68 > 0
f580_0_mod_Load(EOS(STATIC_580), i68, i69, i68) -> f583_0_mod_GE(EOS(STATIC_583), i68, i69, i68, i68) :|: TRUE
f583_0_mod_GE(EOS(STATIC_583), i68, i69, i68, i68) -> f585_0_mod_Load(EOS(STATIC_585), i68, i69, i68) :|: i68 >= 0
f585_0_mod_Load(EOS(STATIC_585), i68, i69, i68) -> f588_0_mod_LE(EOS(STATIC_588), i68, i69, i68, i69) :|: TRUE
f588_0_mod_LE(EOS(STATIC_588), i68, i69, i68, i69) -> f590_0_mod_Load(EOS(STATIC_590), i68, i69, i68) :|: i69 > 0
f590_0_mod_Load(EOS(STATIC_590), i68, i69, i68) -> f618_0_mod_Load(EOS(STATIC_618), i68, i69, i68) :|: TRUE
f618_0_mod_Load(EOS(STATIC_618), i68, i75, i68) -> f621_0_mod_Load(EOS(STATIC_621), i68, i75, i68, i75) :|: TRUE
f621_0_mod_Load(EOS(STATIC_621), i68, i75, i68, i75) -> f623_0_mod_LT(EOS(STATIC_623), i68, i75, i68, i75, i68) :|: TRUE
f623_0_mod_LT(EOS(STATIC_623), i68, i75, i68, i75, i68) -> f629_0_mod_LT(EOS(STATIC_629), i68, i75, i68, i75, i68) :|: i75 < i68
f623_0_mod_LT(EOS(STATIC_623), i68, i75, i68, i75, i68) -> f630_0_mod_LT(EOS(STATIC_630), i68, i75, i68, i75, i68) :|: i75 >= i68
f629_0_mod_LT(EOS(STATIC_629), i68, i75, i68, i75, i68) -> f632_0_mod_Load(EOS(STATIC_632), i68, i75) :|: i75 < i68
f632_0_mod_Load(EOS(STATIC_632), i68, i75) -> f643_0_mod_Return(EOS(STATIC_643), i68, i75) :|: TRUE
f643_0_mod_Return(EOS(STATIC_643), i68, i75) -> f646_0_gcd_Store(EOS(STATIC_646), i68, i75) :|: TRUE
f646_0_gcd_Store(EOS(STATIC_646), i68, i75) -> f648_0_gcd_Load(EOS(STATIC_648), i75, i68) :|: TRUE
f648_0_gcd_Load(EOS(STATIC_648), i75, i68) -> f655_0_gcd_Store(EOS(STATIC_655), i75, i68) :|: TRUE
f655_0_gcd_Store(EOS(STATIC_655), i75, i68) -> f660_0_gcd_JMP(EOS(STATIC_660), i68, i75) :|: TRUE
f660_0_gcd_JMP(EOS(STATIC_660), i68, i75) -> f682_0_gcd_Load(EOS(STATIC_682), i68, i75) :|: TRUE
f682_0_gcd_Load(EOS(STATIC_682), i68, i75) -> f527_0_gcd_Load(EOS(STATIC_527), i68, i75) :|: TRUE
f527_0_gcd_Load(EOS(STATIC_527), i62, i63) -> f530_0_gcd_LE(EOS(STATIC_530), i62, i63, i63) :|: TRUE
f630_0_mod_LT(EOS(STATIC_630), i68, i75, i68, i75, i68) -> f640_0_mod_Load(EOS(STATIC_640), i68, i75, i68) :|: i75 >= i68
f640_0_mod_Load(EOS(STATIC_640), i68, i75, i68) -> f645_0_mod_Load(EOS(STATIC_645), i68, i68, i75) :|: TRUE
f645_0_mod_Load(EOS(STATIC_645), i68, i68, i75) -> f647_0_mod_IntArithmetic(EOS(STATIC_647), i68, i68, i75, i68) :|: TRUE
f647_0_mod_IntArithmetic(EOS(STATIC_647), i68, i68, i75, i68) -> f653_0_mod_Store(EOS(STATIC_653), i68, i68, i75 - i68) :|: i75 > 0 && i68 > 0
f653_0_mod_Store(EOS(STATIC_653), i68, i68, i78) -> f658_0_mod_JMP(EOS(STATIC_658), i68, i78, i68) :|: TRUE
f658_0_mod_JMP(EOS(STATIC_658), i68, i78, i68) -> f667_0_mod_Load(EOS(STATIC_667), i68, i78, i68) :|: TRUE
f667_0_mod_Load(EOS(STATIC_667), i68, i78, i68) -> f618_0_mod_Load(EOS(STATIC_618), i68, i78, i68) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f623_0_mod_LT(EOS(STATIC_623), i68:0, i75:0, i68:0, i75:0, i68:0) -> f623_0_mod_LT(EOS(STATIC_623), i68:0, i75:0 - i68:0, i68:0, i75:0 - i68:0, i68:0) :|: i75:0 >= i68:0 && i75:0 > 0 && i68:0 > 0
f623_0_mod_LT(EOS(STATIC_623), i68:0, i75:0, i68:0, i75:0, i68:0) -> f623_0_mod_LT(EOS(STATIC_623), i75:0, i68:0, i75:0, i68:0, i75:0) :|: i75:0 > 0 && i68:0 > 0 && i75:0 < i68:0
Filtered constant ground arguments:
   f623_0_mod_LT(x1, x2, x3, x4, x5, x6) -> f623_0_mod_LT(x2, x3, x4, x5, x6)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f623_0_mod_LT(x1, x2, x3, x4, x5) -> f623_0_mod_LT(x4, x5)
Finished conversion. Obtained 2 rules.P rules:
f623_0_mod_LT(i75:0, i68:0) -> f623_0_mod_LT(i75:0 - i68:0, i68:0) :|: i75:0 > 0 && i68:0 > 0 && i75:0 >= i68:0
f623_0_mod_LT(i75:0, i68:0) -> f623_0_mod_LT(i68:0, i75:0) :|: i68:0 > 0 && i75:0 < i68:0 && i75:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f623_0_mod_LT(i75:0, i68:0) -> f623_0_mod_LT(i75:0 - i68:0, i68:0) :|: i75:0 > 0 && i68:0 > 0 && i75:0 >= i68:0
f623_0_mod_LT(x, x1) -> f623_0_mod_LT(x1, x) :|: x1 > 0 && x < x1 && x > 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f623_0_mod_LT(i75:0, i68:0) -> f623_0_mod_LT(arith, i68:0) :|: i75:0 > 0 && i68:0 > 0 && i75:0 >= i68:0 && arith = i75:0 - i68:0
f623_0_mod_LT(x, x1) -> f623_0_mod_LT(x1, x) :|: x1 > 0 && x < x1 && x > 0

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f623_0_mod_LT(i75:0, i68:0) -> f623_0_mod_LT(arith, i68:0) :|: i75:0 > 0 && i68:0 > 0 && i75:0 >= i68:0 && arith = i75:0 - i68:0
(2) f623_0_mod_LT(x, x1) -> f623_0_mod_LT(x1, x) :|: x1 > 0 && x < x1 && x > 0

Arcs:
(1) -> (1), (2)
(2) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f623_0_mod_LT(i75:0, i68:0) -> f623_0_mod_LT(arith, i68:0) :|: i75:0 > 0 && i68:0 > 0 && i75:0 >= i68:0 && arith = i75:0 - i68:0
(2) f623_0_mod_LT(x, x1) -> f623_0_mod_LT(x1, x) :|: x1 > 0 && x < x1 && x > 0

Arcs:
(1) -> (1), (2)
(2) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f623_0_mod_LT(x:0, x1:0) -> f623_0_mod_LT(x1:0, x:0) :|: x1:0 > 0 && x:0 < x1:0 && x:0 > 0
f623_0_mod_LT(i75:0:0, i68:0:0) -> f623_0_mod_LT(i75:0:0 - i68:0:0, i68:0:0) :|: i75:0:0 > 0 && i68:0:0 > 0 && i75:0:0 >= i68:0:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f623_0_mod_LT(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f623_0_mod_LT(x:0, x1:0) -> f623_0_mod_LT(x1:0, x:0) :|: x1:0 > 0 && x:0 < x1:0 && x:0 > 0
f623_0_mod_LT(i75:0:0, i68:0:0) -> f623_0_mod_LT(c, i68:0:0) :|: c = i75:0:0 - i68:0:0 && (i75:0:0 > 0 && i68:0:0 > 0 && i75:0:0 >= i68:0:0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f623_0_mod_LT(x, x1)] = x1

The following rules are decreasing:
f623_0_mod_LT(x:0, x1:0) -> f623_0_mod_LT(x1:0, x:0) :|: x1:0 > 0 && x:0 < x1:0 && x:0 > 0
The following rules are bounded:
f623_0_mod_LT(x:0, x1:0) -> f623_0_mod_LT(x1:0, x:0) :|: x1:0 > 0 && x:0 < x1:0 && x:0 > 0
f623_0_mod_LT(i75:0:0, i68:0:0) -> f623_0_mod_LT(c, i68:0:0) :|: c = i75:0:0 - i68:0:0 && (i75:0:0 > 0 && i68:0:0 > 0 && i75:0:0 >= i68:0:0)

----------------------------------------

(18)
Obligation:
Rules:
f623_0_mod_LT(i75:0:0, i68:0:0) -> f623_0_mod_LT(c, i68:0:0) :|: c = i75:0:0 - i68:0:0 && (i75:0:0 > 0 && i68:0:0 > 0 && i75:0:0 >= i68:0:0)

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f623_0_mod_LT ] = f623_0_mod_LT_1

The following rules are decreasing:
f623_0_mod_LT(i75:0:0, i68:0:0) -> f623_0_mod_LT(c, i68:0:0) :|: c = i75:0:0 - i68:0:0 && (i75:0:0 > 0 && i68:0:0 > 0 && i75:0:0 >= i68:0:0)

The following rules are bounded:
f623_0_mod_LT(i75:0:0, i68:0:0) -> f623_0_mod_LT(c, i68:0:0) :|: c = i75:0:0 - i68:0:0 && (i75:0:0 > 0 && i68:0:0 > 0 && i75:0:0 >= i68:0:0)


----------------------------------------

(20)
YES
