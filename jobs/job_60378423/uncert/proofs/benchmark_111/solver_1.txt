NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/nGwHu.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 62 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 171 ms]
(4) JBCTerminationGraph
(5) JBCNonTerm [COMPLETE, 303 ms]
(6) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package simple.alternDivWide;

public class AlternDivWide {

	public static void loop(int i) {
		int w = 5;
		while (i != 0) {
			if (i < -w) {
				i--;
				i = i*(-1);
			} else {
				if (i > w) {
					i++;
					i = i*(-1);
				} else {
					i = 0;
				}
			}
		}
	}
}


package simple.alternDivWide;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		AlternDivWide.loop(args.length);

	}

}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package simple.alternDivWide;

public class AlternDivWide {

	public static void loop(int i) {
		int w = 5;
		while (i != 0) {
			if (i < -w) {
				i--;
				i = i*(-1);
			} else {
				if (i > w) {
					i++;
					i = i*(-1);
				} else {
					i = 0;
				}
			}
		}
	}
}


package simple.alternDivWide;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		AlternDivWide.loop(args.length);

	}

}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
simple.alternDivWide.Main.main([Ljava/lang/String;)V: Graph of 45 nodes with 1 SCC.





----------------------------------------

(5) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<simple.alternDivWide.Main.main||0: load ADDR args||args: a25|| ->
	a25([java.lang.String...]): length 6 -->{java.lang.Object...}
YES:  (JL1)
1:<simple.alternDivWide.Main.main||1: arraylength|| - ||a25>
	a25([java.lang.String...]): length 6 -->{java.lang.Object...}
YES:  (JL1)
2:<simple.alternDivWide.Main.main||2: simple.alternDivWide.AlternDivWide.loop(I)V|| - ||6>
YES:  (JL1)
3:<simple.alternDivWide.AlternDivWide.loop||0: push 5||i: 6|| ->
<simple.alternDivWide.Main.main||2: simple.alternDivWide.AlternDivWide.loop|| - || ->
YES:  (JL1)
4:<simple.alternDivWide.AlternDivWide.loop||1: store INT to w||i: 6||5>
<simple.alternDivWide.Main.main||2: simple.alternDivWide.AlternDivWide.loop|| - || ->
YES:  (JL1)
5:<simple.alternDivWide.AlternDivWide.loop||2: load INT i||i: 6, w: 5|| ->
<simple.alternDivWide.Main.main||2: simple.alternDivWide.AlternDivWide.loop|| - || ->
YES:  (JL1)
Start state of loop: 

<simple.alternDivWide.AlternDivWide.loop||2: load INT i||i: i595, w: iconst_5|| ->
[a11(lv_0_0)]
<simple.alternDivWide.Main.main||2: simple.alternDivWide.AlternDivWide.loop|| - || ->
	i595: #
	i541: [0,+inf)(l2)
	a11([java.lang.String...]): length i541 -->{java.lang.Object...}
YES:  (JL1)


In the loop head node, references [i595, iconst_5] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

(0 <= initial_i541 and ((((path1_i595 = path1_i608 and -5 = (-1 * 5) and path1_i608 = path1_i611 and path1_i617 = (path1_i611 + -1) and path1_i622 = (path1_i617 * -1) and path1_i622 = res_i595 and path1_i595 = initial_i595) and (path1_i608 != 0 and T and -5 = -5 and path1_i611 < -5)) or ((path3_i595 = path3_i608 and -5 = (-1 * 5) and path3_i608 = path3_i612 and path3_i612 = path3_i621 and path3_i627 = (path3_i621 + 1) and path3_i640 = (path3_i627 * -1) and path3_i640 = res_i595 and path3_i595 = initial_i595) and (path3_i608 != 0 and T and -5 = -5 and path3_i612 >= -5 and T and 5 = 5 and path3_i621 > 5)) or ((path1_i595 = path1_i608 and -5 = (-1 * 5) and path1_i608 = path1_i611 and path1_i617 = (path1_i611 + -1) and path1_i622 = (path1_i617 * -1) and path1_i622 = res_i595 and path1_i595 = initial_i595) and (T and -5 = -5 and path1_i611 < -5 and path1_i608 < 0)) or ((path1_i595 = path1_i608 and -5 = (-1 * 5) and path1_i608 = path1_i611 and path1_i617 = (path1_i611 + -1) and path1_i622 = (path1_i617 * -1) and path1_i622 = res_i595 and path1_i595 = initial_i595) and (T and -5 = -5 and path1_i611 < -5 and path1_i608 > 0))) and (((res1_i595 = res1_i608 and -5 = (-1 * 5) and res1_i608 = res1_i611 and res1_i617 = (res1_i611 + -1) and res1_i622 = (res1_i617 * -1) and res_i595 = res1_i595) and !(res1_i608 != 0 and T and -5 = -5 and res1_i611 < -5)) and ((res3_i595 = res3_i608 and -5 = (-1 * 5) and res3_i608 = res3_i612 and res3_i612 = res3_i621 and res3_i627 = (res3_i621 + 1) and res3_i640 = (res3_i627 * -1) and res_i595 = res3_i595) and !(res3_i608 != 0 and T and -5 = -5 and res3_i612 >= -5 and T and 5 = 5 and res3_i621 > 5)) and ((res1_i595 = res1_i608 and -5 = (-1 * 5) and res1_i608 = res1_i611 and res1_i617 = (res1_i611 + -1) and res1_i622 = (res1_i617 * -1) and res_i595 = res1_i595) and !(T and -5 = -5 and res1_i611 < -5 and res1_i608 < 0)) and ((res1_i595 = res1_i608 and -5 = (-1 * 5) and res1_i608 = res1_i611 and res1_i617 = (res1_i611 + -1) and res1_i622 = (res1_i617 * -1) and res_i595 = res1_i595) and !(T and -5 = -5 and res1_i611 < -5 and res1_i608 > 0)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(6)
NO
