YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/rH83B.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 191 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 55 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
(12) TRUE


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB3 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        if (x > 0) {
            while (x > y) {
                y = x+y;
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaB3 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        if (x > 0) {
            while (x > y) {
                y = x+y;
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaB3.main([Ljava/lang/String;)V: Graph of 183 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaB3.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 10 IRulesP rules:
f390_0_main_Load(EOS(STATIC_390), i45, i49, i45) -> f394_0_main_LE(EOS(STATIC_394), i45, i49, i45, i49) :|: TRUE
f394_0_main_LE(EOS(STATIC_394), i45, i49, i45, i49) -> f405_0_main_LE(EOS(STATIC_405), i45, i49, i45, i49) :|: i45 > i49
f405_0_main_LE(EOS(STATIC_405), i45, i49, i45, i49) -> f412_0_main_Load(EOS(STATIC_412), i45, i49) :|: i45 > i49
f412_0_main_Load(EOS(STATIC_412), i45, i49) -> f416_0_main_Load(EOS(STATIC_416), i45, i49, i45) :|: TRUE
f416_0_main_Load(EOS(STATIC_416), i45, i49, i45) -> f417_0_main_IntArithmetic(EOS(STATIC_417), i45, i45, i49) :|: TRUE
f417_0_main_IntArithmetic(EOS(STATIC_417), i45, i45, i49) -> f418_0_main_Store(EOS(STATIC_418), i45, i45 + i49) :|: i45 > 0 && i49 >= 0
f418_0_main_Store(EOS(STATIC_418), i45, i53) -> f419_0_main_JMP(EOS(STATIC_419), i45, i53) :|: TRUE
f419_0_main_JMP(EOS(STATIC_419), i45, i53) -> f431_0_main_Load(EOS(STATIC_431), i45, i53) :|: TRUE
f431_0_main_Load(EOS(STATIC_431), i45, i53) -> f381_0_main_Load(EOS(STATIC_381), i45, i53) :|: TRUE
f381_0_main_Load(EOS(STATIC_381), i45, i49) -> f390_0_main_Load(EOS(STATIC_390), i45, i49, i45) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f390_0_main_Load(EOS(STATIC_390), i45:0, i49:0, i45:0) -> f390_0_main_Load(EOS(STATIC_390), i45:0, i45:0 + i49:0, i45:0) :|: i49:0 < i45:0 && i45:0 > 0 && i49:0 > -1
Filtered constant ground arguments:
   f390_0_main_Load(x1, x2, x3, x4) -> f390_0_main_Load(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f390_0_main_Load(x1, x2, x3) -> f390_0_main_Load(x2, x3)
Finished conversion. Obtained 1 rules.P rules:
f390_0_main_Load(i49:0, i45:0) -> f390_0_main_Load(i45:0 + i49:0, i45:0) :|: i45:0 > 0 && i49:0 > -1 && i49:0 < i45:0

----------------------------------------

(8)
Obligation:
Rules:
f390_0_main_Load(i49:0, i45:0) -> f390_0_main_Load(i45:0 + i49:0, i45:0) :|: i45:0 > 0 && i49:0 > -1 && i49:0 < i45:0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f390_0_main_Load(i49:0, i45:0) -> f390_0_main_Load(arith, i45:0) :|: i45:0 > 0 && i49:0 > -1 && i49:0 < i45:0 && arith = i45:0 + i49:0

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f390_0_main_Load(i49:0, i45:0) -> f390_0_main_Load(arith, i45:0) :|: i45:0 > 0 && i49:0 > -1 && i49:0 < i45:0 && arith = i45:0 + i49:0

No arcs!

This digraph is fully evaluated!
----------------------------------------

(12)
TRUE
