YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/DwhQI.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 46 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 268 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) JBCTerminationSCC
        (8) SCCToIRSProof [SOUND, 28 ms]
        (9) IRSwT
        (10) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (11) IRSwT
        (12) IRSwTTerminationDigraphProof [EQUIVALENT, 26 ms]
        (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) TempFilterProof [SOUND, 23 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (19) YES
    (20) JBCTerminationSCC
        (21) SCCToIRSProof [SOUND, 28 ms]
        (22) IRSwT
        (23) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (24) IRSwT
        (25) IRSwTTerminationDigraphProof [EQUIVALENT, 15 ms]
        (26) IRSwT
        (27) IntTRSCompressionProof [EQUIVALENT, 2 ms]
        (28) IRSwT
        (29) TempFilterProof [SOUND, 178 ms]
        (30) IRSwT
        (31) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
        (32) IRSwT
        (33) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (34) IRSwT
        (35) IRSwTOrderProof [EQUIVALENT, 4 ms]
        (36) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Convert{

  // adapted from [Giesl, 95]
  // converts a number to decimal notation

  public static void main(String[] args) {
    Random.args = args;
    IntList l = IntList.createIntList();

    int b = Random.random();
    int res = 0;

    while (l != null) {

      if (l.value <= 0) {
        l = l.next;
        if (l != null) res = res * b;
      }
      else {
        l.value--;
        res++;
      }
    }
  }
}

class IntList {
  int value;
  IntList next;

  public IntList(int value, IntList next) {
    this.value = value;
    this.next = next;
  }

  public static IntList createIntList() {

    int i = Random.random();
    IntList l = null;

    while (i > 0) {
      l = new IntList(Random.random(), l);
      i--;
    }

    return l;
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Convert{

  // adapted from [Giesl, 95]
  // converts a number to decimal notation

  public static void main(String[] args) {
    Random.args = args;
    IntList l = IntList.createIntList();

    int b = Random.random();
    int res = 0;

    while (l != null) {

      if (l.value <= 0) {
        l = l.next;
        if (l != null) res = res * b;
      }
      else {
        l.value--;
        res++;
      }
    }
  }
}

class IntList {
  int value;
  IntList next;

  public IntList(int value, IntList next) {
    this.value = value;
    this.next = next;
  }

  public static IntList createIntList() {

    int i = Random.random();
    IntList l = null;

    while (i > 0) {
      l = new IntList(Random.random(), l);
      i--;
    }

    return l;
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Convert.main([Ljava/lang/String;)V: Graph of 131 nodes with 1 SCC.



IntList.createIntList()LIntList;: Graph of 187 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 2 SCCss.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: IntList.createIntList()LIntList;
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*java.lang.String: [count]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(8) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 39 IRulesP rules:
f3114_0_createIntList_LE(EOS(STATIC_3114(java.lang.Object(ARRAY(i6)))), i413, i413) -> f3139_0_createIntList_LE(EOS(STATIC_3139(java.lang.Object(ARRAY(i6)))), i413, i413) :|: TRUE
f3139_0_createIntList_LE(EOS(STATIC_3139(java.lang.Object(ARRAY(i6)))), i413, i413) -> f3145_0_createIntList_New(EOS(STATIC_3145(java.lang.Object(ARRAY(i6)))), i413) :|: i413 > 0
f3145_0_createIntList_New(EOS(STATIC_3145(java.lang.Object(ARRAY(i6)))), i413) -> f3150_0_createIntList_Duplicate(EOS(STATIC_3150(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3150_0_createIntList_Duplicate(EOS(STATIC_3150(java.lang.Object(ARRAY(i6)))), i413) -> f3155_0_createIntList_InvokeMethod(EOS(STATIC_3155(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3155_0_createIntList_InvokeMethod(EOS(STATIC_3155(java.lang.Object(ARRAY(i6)))), i413) -> f3164_0_random_FieldAccess(EOS(STATIC_3164(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3164_0_random_FieldAccess(EOS(STATIC_3164(java.lang.Object(ARRAY(i6)))), i413) -> f3433_0_random_FieldAccess(EOS(STATIC_3433(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(ARRAY(i6))) :|: TRUE
f3433_0_random_FieldAccess(EOS(STATIC_3433(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(ARRAY(i6))) -> f3448_0_random_ArrayAccess(EOS(STATIC_3448(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(ARRAY(i6))) :|: TRUE
f3448_0_random_ArrayAccess(EOS(STATIC_3448(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(ARRAY(i6))) -> f3453_0_random_ArrayAccess(EOS(STATIC_3453(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(ARRAY(i6))) :|: TRUE
f3453_0_random_ArrayAccess(EOS(STATIC_3453(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(ARRAY(i6))) -> f3465_0_random_Store(EOS(STATIC_3465(java.lang.Object(ARRAY(i6)))), i413, o212) :|: TRUE
f3465_0_random_Store(EOS(STATIC_3465(java.lang.Object(ARRAY(i6)))), i413, o212) -> f3477_0_random_FieldAccess(EOS(STATIC_3477(java.lang.Object(ARRAY(i6)))), i413, o212) :|: TRUE
f3477_0_random_FieldAccess(EOS(STATIC_3477(java.lang.Object(ARRAY(i6)))), i413, o212) -> f3484_0_random_ConstantStackPush(EOS(STATIC_3484(java.lang.Object(ARRAY(i6)))), i413, o212) :|: TRUE
f3484_0_random_ConstantStackPush(EOS(STATIC_3484(java.lang.Object(ARRAY(i6)))), i413, o212) -> f3496_0_random_IntArithmetic(EOS(STATIC_3496(java.lang.Object(ARRAY(i6)))), i413, o212) :|: TRUE
f3496_0_random_IntArithmetic(EOS(STATIC_3496(java.lang.Object(ARRAY(i6)))), i413, o212) -> f3514_0_random_FieldAccess(EOS(STATIC_3514(java.lang.Object(ARRAY(i6)))), i413, o212) :|: TRUE
f3514_0_random_FieldAccess(EOS(STATIC_3514(java.lang.Object(ARRAY(i6)))), i413, o212) -> f3524_0_random_Load(EOS(STATIC_3524(java.lang.Object(ARRAY(i6)))), i413, o212) :|: TRUE
f3524_0_random_Load(EOS(STATIC_3524(java.lang.Object(ARRAY(i6)))), i413, o212) -> f3532_0_random_InvokeMethod(EOS(STATIC_3532(java.lang.Object(ARRAY(i6)))), i413, o212) :|: TRUE
f3532_0_random_InvokeMethod(EOS(STATIC_3532(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(o217sub)) -> f3536_0_random_InvokeMethod(EOS(STATIC_3536(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(o217sub)) :|: TRUE
f3536_0_random_InvokeMethod(EOS(STATIC_3536(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(o218sub)) -> f3539_0_random_InvokeMethod(EOS(STATIC_3539(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(o218sub)) :|: TRUE
f3539_0_random_InvokeMethod(EOS(STATIC_3539(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(o218sub)) -> f3544_0_length_Load(EOS(STATIC_3544(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(o218sub)) :|: TRUE
f3544_0_length_Load(EOS(STATIC_3544(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(o218sub)) -> f3551_0_length_FieldAccess(EOS(STATIC_3551(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(o218sub)) :|: TRUE
f3551_0_length_FieldAccess(EOS(STATIC_3551(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(java.lang.String(EOC, i497))) -> f3557_0_length_FieldAccess(EOS(STATIC_3557(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(java.lang.String(EOC, i497))) :|: TRUE
f3557_0_length_FieldAccess(EOS(STATIC_3557(java.lang.Object(ARRAY(i6)))), i413, java.lang.Object(java.lang.String(EOC, i497))) -> f3561_0_length_Return(EOS(STATIC_3561(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3561_0_length_Return(EOS(STATIC_3561(java.lang.Object(ARRAY(i6)))), i413) -> f3564_0_random_Return(EOS(STATIC_3564(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3564_0_random_Return(EOS(STATIC_3564(java.lang.Object(ARRAY(i6)))), i413) -> f3596_0_createIntList_Load(EOS(STATIC_3596(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3596_0_createIntList_Load(EOS(STATIC_3596(java.lang.Object(ARRAY(i6)))), i413) -> f3621_0_createIntList_InvokeMethod(EOS(STATIC_3621(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3621_0_createIntList_InvokeMethod(EOS(STATIC_3621(java.lang.Object(ARRAY(i6)))), i413) -> f3636_0__init__Load(EOS(STATIC_3636(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3636_0__init__Load(EOS(STATIC_3636(java.lang.Object(ARRAY(i6)))), i413) -> f3681_0__init__InvokeMethod(EOS(STATIC_3681(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3681_0__init__InvokeMethod(EOS(STATIC_3681(java.lang.Object(ARRAY(i6)))), i413) -> f3713_0__init__Load(EOS(STATIC_3713(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3713_0__init__Load(EOS(STATIC_3713(java.lang.Object(ARRAY(i6)))), i413) -> f3744_0__init__Load(EOS(STATIC_3744(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3744_0__init__Load(EOS(STATIC_3744(java.lang.Object(ARRAY(i6)))), i413) -> f3757_0__init__FieldAccess(EOS(STATIC_3757(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3757_0__init__FieldAccess(EOS(STATIC_3757(java.lang.Object(ARRAY(i6)))), i413) -> f3763_0__init__Load(EOS(STATIC_3763(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3763_0__init__Load(EOS(STATIC_3763(java.lang.Object(ARRAY(i6)))), i413) -> f3770_0__init__Load(EOS(STATIC_3770(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3770_0__init__Load(EOS(STATIC_3770(java.lang.Object(ARRAY(i6)))), i413) -> f3777_0__init__FieldAccess(EOS(STATIC_3777(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3777_0__init__FieldAccess(EOS(STATIC_3777(java.lang.Object(ARRAY(i6)))), i413) -> f3784_0__init__Return(EOS(STATIC_3784(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3784_0__init__Return(EOS(STATIC_3784(java.lang.Object(ARRAY(i6)))), i413) -> f3790_0_createIntList_Store(EOS(STATIC_3790(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3790_0_createIntList_Store(EOS(STATIC_3790(java.lang.Object(ARRAY(i6)))), i413) -> f3796_0_createIntList_Inc(EOS(STATIC_3796(java.lang.Object(ARRAY(i6)))), i413) :|: TRUE
f3796_0_createIntList_Inc(EOS(STATIC_3796(java.lang.Object(ARRAY(i6)))), i413) -> f3803_0_createIntList_JMP(EOS(STATIC_3803(java.lang.Object(ARRAY(i6)))), i413 + -1) :|: TRUE
f3803_0_createIntList_JMP(EOS(STATIC_3803(java.lang.Object(ARRAY(i6)))), i529) -> f3874_0_createIntList_Load(EOS(STATIC_3874(java.lang.Object(ARRAY(i6)))), i529) :|: TRUE
f3874_0_createIntList_Load(EOS(STATIC_3874(java.lang.Object(ARRAY(i6)))), i529) -> f2941_0_createIntList_Load(EOS(STATIC_2941(java.lang.Object(ARRAY(i6)))), i529) :|: TRUE
f2941_0_createIntList_Load(EOS(STATIC_2941(java.lang.Object(ARRAY(i6)))), i371) -> f3114_0_createIntList_LE(EOS(STATIC_3114(java.lang.Object(ARRAY(i6)))), i371, i371) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f3114_0_createIntList_LE(EOS(STATIC_3114(java.lang.Object(ARRAY(i6:0)))), i413:0, i413:0) -> f3114_0_createIntList_LE(EOS(STATIC_3114(java.lang.Object(ARRAY(i6:0)))), i413:0 - 1, i413:0 - 1) :|: i413:0 > 0
Filtered duplicate arguments:
   f3114_0_createIntList_LE(x1, x2, x3) -> f3114_0_createIntList_LE(x1, x3)
Filtered unneeded arguments:
   f3114_0_createIntList_LE(x1, x2) -> f3114_0_createIntList_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f3114_0_createIntList_LE(i413:0) -> f3114_0_createIntList_LE(i413:0 - 1) :|: i413:0 > 0

----------------------------------------

(9)
Obligation:
Rules:
f3114_0_createIntList_LE(i413:0) -> f3114_0_createIntList_LE(i413:0 - 1) :|: i413:0 > 0

----------------------------------------

(10) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(11)
Obligation:
Rules:
f3114_0_createIntList_LE(i413:0) -> f3114_0_createIntList_LE(arith) :|: i413:0 > 0 && arith = i413:0 - 1

----------------------------------------

(12) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3114_0_createIntList_LE(i413:0) -> f3114_0_createIntList_LE(arith) :|: i413:0 > 0 && arith = i413:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f3114_0_createIntList_LE(i413:0) -> f3114_0_createIntList_LE(arith) :|: i413:0 > 0 && arith = i413:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f3114_0_createIntList_LE(i413:0:0) -> f3114_0_createIntList_LE(i413:0:0 - 1) :|: i413:0:0 > 0

----------------------------------------

(16) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3114_0_createIntList_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(17)
Obligation:
Rules:
f3114_0_createIntList_LE(i413:0:0) -> f3114_0_createIntList_LE(c) :|: c = i413:0:0 - 1 && i413:0:0 > 0

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f3114_0_createIntList_LE(x)] = x

The following rules are decreasing:
f3114_0_createIntList_LE(i413:0:0) -> f3114_0_createIntList_LE(c) :|: c = i413:0:0 - 1 && i413:0:0 > 0
The following rules are bounded:
f3114_0_createIntList_LE(i413:0:0) -> f3114_0_createIntList_LE(c) :|: c = i413:0:0 - 1 && i413:0:0 > 0

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Convert.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*IntList: [value, next]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(21) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 31 IRulesP rules:
f5543_0_main_NULL(EOS(STATIC_5543), java.lang.Object(o286sub), java.lang.Object(o286sub)) -> f5548_0_main_NULL(EOS(STATIC_5548), java.lang.Object(o286sub), java.lang.Object(o286sub)) :|: TRUE
f5548_0_main_NULL(EOS(STATIC_5548), java.lang.Object(o286sub), java.lang.Object(o286sub)) -> f5551_0_main_Load(EOS(STATIC_5551), java.lang.Object(o286sub)) :|: TRUE
f5551_0_main_Load(EOS(STATIC_5551), java.lang.Object(o286sub)) -> f5556_0_main_FieldAccess(EOS(STATIC_5556), java.lang.Object(o286sub), java.lang.Object(o286sub)) :|: TRUE
f5556_0_main_FieldAccess(EOS(STATIC_5556), java.lang.Object(IntList(EOC, i769, o288)), java.lang.Object(IntList(EOC, i769, o288))) -> f5567_0_main_FieldAccess(EOS(STATIC_5567), java.lang.Object(IntList(EOC, i769, o288)), java.lang.Object(IntList(EOC, i769, o288))) :|: TRUE
f5567_0_main_FieldAccess(EOS(STATIC_5567), java.lang.Object(IntList(EOC, i769, o288)), java.lang.Object(IntList(EOC, i769, o288))) -> f5571_0_main_GT(EOS(STATIC_5571), java.lang.Object(IntList(EOC, i769, o288)), i769) :|: TRUE
f5571_0_main_GT(EOS(STATIC_5571), java.lang.Object(IntList(EOC, i770, o288)), i770) -> f5576_0_main_GT(EOS(STATIC_5576), java.lang.Object(IntList(EOC, i770, o288)), i770) :|: TRUE
f5571_0_main_GT(EOS(STATIC_5571), java.lang.Object(IntList(EOC, i771, o288)), i771) -> f5577_0_main_GT(EOS(STATIC_5577), java.lang.Object(IntList(EOC, i771, o288)), i771) :|: TRUE
f5576_0_main_GT(EOS(STATIC_5576), java.lang.Object(IntList(EOC, i770, o288)), i770) -> f5580_0_main_Load(EOS(STATIC_5580), java.lang.Object(IntList(EOC, i770, o288))) :|: i770 <= 0
f5580_0_main_Load(EOS(STATIC_5580), java.lang.Object(IntList(EOC, i770, o288))) -> f5585_0_main_FieldAccess(EOS(STATIC_5585), java.lang.Object(IntList(EOC, i770, o288))) :|: TRUE
f5585_0_main_FieldAccess(EOS(STATIC_5585), java.lang.Object(IntList(EOC, i770, o288))) -> f5587_0_main_Store(EOS(STATIC_5587), o288) :|: TRUE
f5587_0_main_Store(EOS(STATIC_5587), o288) -> f5592_0_main_Load(EOS(STATIC_5592), o288) :|: TRUE
f5592_0_main_Load(EOS(STATIC_5592), o288) -> f5596_0_main_NULL(EOS(STATIC_5596), o288, o288) :|: TRUE
f5596_0_main_NULL(EOS(STATIC_5596), java.lang.Object(o289sub), java.lang.Object(o289sub)) -> f5603_0_main_NULL(EOS(STATIC_5603), java.lang.Object(o289sub), java.lang.Object(o289sub)) :|: TRUE
f5603_0_main_NULL(EOS(STATIC_5603), java.lang.Object(o289sub), java.lang.Object(o289sub)) -> f5613_0_main_Load(EOS(STATIC_5613), java.lang.Object(o289sub)) :|: TRUE
f5613_0_main_Load(EOS(STATIC_5613), java.lang.Object(o289sub)) -> f5634_0_main_Load(EOS(STATIC_5634), java.lang.Object(o289sub)) :|: TRUE
f5634_0_main_Load(EOS(STATIC_5634), java.lang.Object(o289sub)) -> f5643_0_main_IntArithmetic(EOS(STATIC_5643), java.lang.Object(o289sub)) :|: TRUE
f5643_0_main_IntArithmetic(EOS(STATIC_5643), java.lang.Object(o289sub)) -> f5680_0_main_Store(EOS(STATIC_5680), java.lang.Object(o289sub)) :|: TRUE
f5680_0_main_Store(EOS(STATIC_5680), java.lang.Object(o289sub)) -> f5684_0_main_JMP(EOS(STATIC_5684), java.lang.Object(o289sub)) :|: TRUE
f5684_0_main_JMP(EOS(STATIC_5684), java.lang.Object(o289sub)) -> f5701_0_main_Load(EOS(STATIC_5701), java.lang.Object(o289sub)) :|: TRUE
f5701_0_main_Load(EOS(STATIC_5701), java.lang.Object(o289sub)) -> f5530_0_main_Load(EOS(STATIC_5530), java.lang.Object(o289sub)) :|: TRUE
f5530_0_main_Load(EOS(STATIC_5530), o281) -> f5543_0_main_NULL(EOS(STATIC_5543), o281, o281) :|: TRUE
f5577_0_main_GT(EOS(STATIC_5577), java.lang.Object(IntList(EOC, i771, o288)), i771) -> f5583_0_main_Load(EOS(STATIC_5583), java.lang.Object(IntList(EOC, i771, o288))) :|: i771 > 0
f5583_0_main_Load(EOS(STATIC_5583), java.lang.Object(IntList(EOC, i771, o288))) -> f5586_0_main_Duplicate(EOS(STATIC_5586), java.lang.Object(IntList(EOC, i771, o288)), java.lang.Object(IntList(EOC, i771, o288))) :|: TRUE
f5586_0_main_Duplicate(EOS(STATIC_5586), java.lang.Object(IntList(EOC, i771, o288)), java.lang.Object(IntList(EOC, i771, o288))) -> f5589_0_main_FieldAccess(EOS(STATIC_5589), java.lang.Object(IntList(EOC, i771, o288)), java.lang.Object(IntList(EOC, i771, o288)), java.lang.Object(IntList(EOC, i771, o288))) :|: TRUE
f5589_0_main_FieldAccess(EOS(STATIC_5589), java.lang.Object(IntList(EOC, i771, o288)), java.lang.Object(IntList(EOC, i771, o288)), java.lang.Object(IntList(EOC, i771, o288))) -> f5594_0_main_ConstantStackPush(EOS(STATIC_5594), java.lang.Object(IntList(EOC, i771, o288)), java.lang.Object(IntList(EOC, i771, o288)), i771) :|: TRUE
f5594_0_main_ConstantStackPush(EOS(STATIC_5594), java.lang.Object(IntList(EOC, i771, o288)), java.lang.Object(IntList(EOC, i771, o288)), i771) -> f5600_0_main_IntArithmetic(EOS(STATIC_5600), java.lang.Object(IntList(EOC, i771, o288)), java.lang.Object(IntList(EOC, i771, o288)), i771, 1) :|: TRUE
f5600_0_main_IntArithmetic(EOS(STATIC_5600), java.lang.Object(IntList(EOC, i771, o288)), java.lang.Object(IntList(EOC, i771, o288)), i771, matching1) -> f5610_0_main_FieldAccess(EOS(STATIC_5610), java.lang.Object(IntList(EOC, i771, o288)), java.lang.Object(IntList(EOC, i771, o288)), i771 - 1) :|: i771 > 0 && matching1 = 1
f5610_0_main_FieldAccess(EOS(STATIC_5610), java.lang.Object(IntList(EOC, i771, o288)), java.lang.Object(IntList(EOC, i771, o288)), i773) -> f5632_0_main_Inc(EOS(STATIC_5632), java.lang.Object(IntList(EOC, i773, o288))) :|: TRUE
f5632_0_main_Inc(EOS(STATIC_5632), java.lang.Object(IntList(EOC, i773, o288))) -> f5641_0_main_JMP(EOS(STATIC_5641), java.lang.Object(IntList(EOC, i773, o288))) :|: TRUE
f5641_0_main_JMP(EOS(STATIC_5641), java.lang.Object(IntList(EOC, i773, o288))) -> f5678_0_main_Load(EOS(STATIC_5678), java.lang.Object(IntList(EOC, i773, o288))) :|: TRUE
f5678_0_main_Load(EOS(STATIC_5678), java.lang.Object(IntList(EOC, i773, o288))) -> f5530_0_main_Load(EOS(STATIC_5530), java.lang.Object(IntList(EOC, i773, o288))) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f5543_0_main_NULL(EOS(STATIC_5543), java.lang.Object(IntList(EOC, i769:0, o288:0)), java.lang.Object(IntList(EOC, i769:0, o288:0))) -> f5543_0_main_NULL(EOS(STATIC_5543), java.lang.Object(IntList(EOC, i769:0 - 1, o288:0)), java.lang.Object(IntList(EOC, i769:0 - 1, o288:0))) :|: i769:0 > 0
f5543_0_main_NULL(EOS(STATIC_5543), java.lang.Object(IntList(EOC, i769:0, java.lang.Object(o289sub:0))), java.lang.Object(IntList(EOC, i769:0, java.lang.Object(o289sub:0)))) -> f5543_0_main_NULL(EOS(STATIC_5543), java.lang.Object(o289sub:0), java.lang.Object(o289sub:0)) :|: i769:0 < 1
Filtered constant ground arguments:
   f5543_0_main_NULL(x1, x2, x3) -> f5543_0_main_NULL(x2, x3)
   EOS(x1) -> EOS
   IntList(x1, x2, x3) -> IntList(x2, x3)
Filtered duplicate arguments:
   f5543_0_main_NULL(x1, x2) -> f5543_0_main_NULL(x2)
Finished conversion. Obtained 2 rules.P rules:
f5543_0_main_NULL(java.lang.Object(IntList(i769:0, o288:0))) -> f5543_0_main_NULL(java.lang.Object(IntList(i769:0 - 1, o288:0))) :|: i769:0 > 0
f5543_0_main_NULL(java.lang.Object(IntList(i769:0, java.lang.Object(o289sub:0)))) -> f5543_0_main_NULL(java.lang.Object(o289sub:0)) :|: i769:0 < 1

----------------------------------------

(22)
Obligation:
Rules:
f5543_0_main_NULL(java.lang.Object(IntList(i769:0, o288:0))) -> f5543_0_main_NULL(java.lang.Object(IntList(i769:0 - 1, o288:0))) :|: i769:0 > 0
f5543_0_main_NULL(java.lang.Object(IntList(x, java.lang.Object(x1)))) -> f5543_0_main_NULL(java.lang.Object(x1)) :|: x < 1

----------------------------------------

(23) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(24)
Obligation:
Rules:
f5543_0_main_NULL(java.lang.Object(IntList(i769:0, o288:0))) -> f5543_0_main_NULL(java.lang.Object(IntList(arith, o288:0))) :|: i769:0 > 0 && arith = i769:0 - 1
f5543_0_main_NULL(java.lang.Object(IntList(x, java.lang.Object(x1)))) -> f5543_0_main_NULL(java.lang.Object(x1)) :|: x < 1

----------------------------------------

(25) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f5543_0_main_NULL(java.lang.Object(IntList(i769:0, o288:0))) -> f5543_0_main_NULL(java.lang.Object(IntList(arith, o288:0))) :|: i769:0 > 0 && arith = i769:0 - 1
(2) f5543_0_main_NULL(java.lang.Object(IntList(x, java.lang.Object(x1)))) -> f5543_0_main_NULL(java.lang.Object(x1)) :|: x < 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(26)
Obligation:

Termination digraph:
Nodes:
(1) f5543_0_main_NULL(java.lang.Object(IntList(i769:0, o288:0))) -> f5543_0_main_NULL(java.lang.Object(IntList(arith, o288:0))) :|: i769:0 > 0 && arith = i769:0 - 1
(2) f5543_0_main_NULL(java.lang.Object(IntList(x, java.lang.Object(x1)))) -> f5543_0_main_NULL(java.lang.Object(x1)) :|: x < 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(27) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(28)
Obligation:
Rules:
f5543_0_main_NULL(java.lang.Object(IntList(i769:0:0, o288:0:0))) -> f5543_0_main_NULL(java.lang.Object(IntList(i769:0:0 - 1, o288:0:0))) :|: i769:0:0 > 0
f5543_0_main_NULL(java.lang.Object(IntList(x:0, java.lang.Object(x1:0)))) -> f5543_0_main_NULL(java.lang.Object(x1:0)) :|: x:0 < 1

----------------------------------------

(29) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f5543_0_main_NULL(VARIABLE)
java.lang.Object(VARIABLE)
IntList(INTEGER, VARIABLE)
Removed predefined arithmetic.The following proof was generated: 
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given IRSwT could not be shown:



- IRSwT
  - IRSwTToQDPProof

Rules:
f5543_0_main_NULL(java.lang.Object(IntList(o288:0:0))) -> f5543_0_main_NULL(java.lang.Object(IntList(o288:0:0)))
f5543_0_main_NULL(java.lang.Object(IntList(java.lang.Object(x1:0)))) -> f5543_0_main_NULL(java.lang.Object(x1:0))

Removed the integers and created a QDP-Problem.

- IRSwT
  - IRSwTToQDPProof
    - QDP
      - MRRProof

Q DP problem:
The TRS P consists of the following rules:

   f5543_0_main_NULL(java.lang.Object(IntList(o288:0:0))) -> f5543_0_main_NULL(java.lang.Object(IntList(o288:0:0)))
   f5543_0_main_NULL(java.lang.Object(IntList(java.lang.Object(x1:0)))) -> f5543_0_main_NULL(java.lang.Object(x1:0))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   f5543_0_main_NULL(java.lang.Object(IntList(java.lang.Object(x1:0)))) -> f5543_0_main_NULL(java.lang.Object(x1:0))


Used ordering: Knuth-Bendix order [KBO] with precedence:IntList_1 > java.lang.Object_1 > f5543_0_main_NULL_1

and weight map:

   f5543_0_main_NULL_1=1
   java.lang.Object_1=1
   IntList_1=1

The variable weight is 1


- IRSwT
  - IRSwTToQDPProof
    - QDP
      - MRRProof
        - QDP

Q DP problem:
The TRS P consists of the following rules:

   f5543_0_main_NULL(java.lang.Object(IntList(o288:0:0))) -> f5543_0_main_NULL(java.lang.Object(IntList(o288:0:0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.


----------------------------------------

(30)
Obligation:
Rules:
f5543_0_main_NULL(java.lang.Object(IntList(i769:0:0, o288:0:0))) -> f5543_0_main_NULL(java.lang.Object(IntList(i769:0:0 - 1, o288:0:0))) :|: i769:0:0 > 0

----------------------------------------

(31) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f5543_0_main_NULL(java.lang.Object(IntList(i769:0:0, o288:0:0))) -> f5543_0_main_NULL(java.lang.Object(IntList(i769:0:0 - 1, o288:0:0))) :|: i769:0:0 > 0

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(32)
Obligation:

Termination digraph:
Nodes:
(1) f5543_0_main_NULL(java.lang.Object(IntList(i769:0:0, o288:0:0))) -> f5543_0_main_NULL(java.lang.Object(IntList(i769:0:0 - 1, o288:0:0))) :|: i769:0:0 > 0

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(33) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   IntList(x1, x2) -> IntList(x1)

----------------------------------------

(34)
Obligation:
Rules:
f5543_0_main_NULL(java.lang.Object(IntList(i769:0:0))) -> f5543_0_main_NULL(java.lang.Object(IntList(i769:0:0 - 1))) :|: i769:0:0 > 0

----------------------------------------

(35) IRSwTOrderProof (EQUIVALENT)
[f5543_0_main_NULL(x)] = -9 + 1*x
[java.lang.Object(x1)] = 0 + 3*x1
[IntList(x2)] = 0 + 3*x2

The following rules are decreasing: 
f5543_0_main_NULL(java.lang.Object(IntList(i769:0:0))) -> f5543_0_main_NULL(java.lang.Object(IntList(i769:0:0 - 1))) :|: i769:0:0 > 0

The following rules are bounded: 
f5543_0_main_NULL(java.lang.Object(IntList(i769:0:0))) -> f5543_0_main_NULL(java.lang.Object(IntList(i769:0:0 - 1))) :|: i769:0:0 > 0

----------------------------------------

(36)
YES
