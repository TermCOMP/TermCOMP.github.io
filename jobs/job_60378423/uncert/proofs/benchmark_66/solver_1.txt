YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/CHhAY.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 522 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 55 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 22 ms]
(16) IntTRS
(17) RankingReductionPairProof [EQUIVALENT, 10 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaC5 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        if (x > 0 && y > 0) {
            while (x != y) {
                if (x > y) {
                    x = x - y;
                } else {
                    y = y - x;
                }
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaC5 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        if (x > 0 && y > 0) {
            while (x != y) {
                if (x > y) {
                    x = x - y;
                } else {
                    y = y - x;
                }
            }
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaC5.main([Ljava/lang/String;)V: Graph of 199 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaC5.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 22 IRulesP rules:
f419_0_main_Load(EOS(STATIC_419), i46, i52, i46) -> f420_0_main_EQ(EOS(STATIC_420), i46, i52, i46, i52) :|: TRUE
f420_0_main_EQ(EOS(STATIC_420), i46, i52, i46, i52) -> f424_0_main_EQ(EOS(STATIC_424), i46, i52, i46, i52) :|: !(i46 = i52)
f424_0_main_EQ(EOS(STATIC_424), i46, i52, i46, i52) -> f428_0_main_Load(EOS(STATIC_428), i46, i52) :|: !(i46 = i52)
f428_0_main_Load(EOS(STATIC_428), i46, i52) -> f430_0_main_Load(EOS(STATIC_430), i46, i52, i46) :|: TRUE
f430_0_main_Load(EOS(STATIC_430), i46, i52, i46) -> f432_0_main_LE(EOS(STATIC_432), i46, i52, i46, i52) :|: TRUE
f432_0_main_LE(EOS(STATIC_432), i46, i52, i46, i52) -> f436_0_main_LE(EOS(STATIC_436), i46, i52, i46, i52) :|: i46 <= i52
f432_0_main_LE(EOS(STATIC_432), i46, i52, i46, i52) -> f437_0_main_LE(EOS(STATIC_437), i46, i52, i46, i52) :|: i46 > i52
f436_0_main_LE(EOS(STATIC_436), i46, i52, i46, i52) -> f446_0_main_Load(EOS(STATIC_446), i46, i52) :|: i46 < i52
f446_0_main_Load(EOS(STATIC_446), i46, i52) -> f449_0_main_Load(EOS(STATIC_449), i46, i52) :|: TRUE
f449_0_main_Load(EOS(STATIC_449), i46, i52) -> f451_0_main_IntArithmetic(EOS(STATIC_451), i46, i52, i46) :|: TRUE
f451_0_main_IntArithmetic(EOS(STATIC_451), i46, i52, i46) -> f454_0_main_Store(EOS(STATIC_454), i46, i52 - i46) :|: i52 > 0 && i46 > 0
f454_0_main_Store(EOS(STATIC_454), i46, i56) -> f461_0_main_JMP(EOS(STATIC_461), i46, i56) :|: TRUE
f461_0_main_JMP(EOS(STATIC_461), i46, i56) -> f478_0_main_Load(EOS(STATIC_478), i46, i56) :|: TRUE
f478_0_main_Load(EOS(STATIC_478), i46, i56) -> f418_0_main_Load(EOS(STATIC_418), i46, i56) :|: TRUE
f418_0_main_Load(EOS(STATIC_418), i46, i52) -> f419_0_main_Load(EOS(STATIC_419), i46, i52, i46) :|: TRUE
f437_0_main_LE(EOS(STATIC_437), i46, i52, i46, i52) -> f448_0_main_Load(EOS(STATIC_448), i46, i52) :|: i46 > i52
f448_0_main_Load(EOS(STATIC_448), i46, i52) -> f450_0_main_Load(EOS(STATIC_450), i52, i46) :|: TRUE
f450_0_main_Load(EOS(STATIC_450), i52, i46) -> f452_0_main_IntArithmetic(EOS(STATIC_452), i52, i46, i52) :|: TRUE
f452_0_main_IntArithmetic(EOS(STATIC_452), i52, i46, i52) -> f457_0_main_Store(EOS(STATIC_457), i52, i46 - i52) :|: i46 > 0 && i52 > 0
f457_0_main_Store(EOS(STATIC_457), i52, i58) -> f463_0_main_JMP(EOS(STATIC_463), i58, i52) :|: TRUE
f463_0_main_JMP(EOS(STATIC_463), i58, i52) -> f481_0_main_Load(EOS(STATIC_481), i58, i52) :|: TRUE
f481_0_main_Load(EOS(STATIC_481), i58, i52) -> f418_0_main_Load(EOS(STATIC_418), i58, i52) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f419_0_main_Load(EOS(STATIC_419), i46:0, i52:0, i46:0) -> f419_0_main_Load(EOS(STATIC_419), i46:0 - i52:0, i52:0, i46:0 - i52:0) :|: i52:0 < i46:0 && i46:0 > 0 && i52:0 > 0
f419_0_main_Load(EOS(STATIC_419), i46:0, i52:0, i46:0) -> f419_0_main_Load(EOS(STATIC_419), i46:0, i52:0 - i46:0, i46:0) :|: i52:0 > i46:0 && i52:0 > 0 && i46:0 > 0
Filtered constant ground arguments:
   f419_0_main_Load(x1, x2, x3, x4) -> f419_0_main_Load(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f419_0_main_Load(x1, x2, x3) -> f419_0_main_Load(x2, x3)
Finished conversion. Obtained 2 rules.P rules:
f419_0_main_Load(i52:0, i46:0) -> f419_0_main_Load(i52:0, i46:0 - i52:0) :|: i46:0 > 0 && i52:0 > 0 && i52:0 < i46:0
f419_0_main_Load(i52:0, i46:0) -> f419_0_main_Load(i52:0 - i46:0, i46:0) :|: i52:0 > 0 && i46:0 > 0 && i52:0 > i46:0

----------------------------------------

(8)
Obligation:
Rules:
f419_0_main_Load(i52:0, i46:0) -> f419_0_main_Load(i52:0, i46:0 - i52:0) :|: i46:0 > 0 && i52:0 > 0 && i52:0 < i46:0
f419_0_main_Load(x, x1) -> f419_0_main_Load(x - x1, x1) :|: x > 0 && x1 > 0 && x > x1

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f419_0_main_Load(i52:0, i46:0) -> f419_0_main_Load(i52:0, arith) :|: i46:0 > 0 && i52:0 > 0 && i52:0 < i46:0 && arith = i46:0 - i52:0
f419_0_main_Load(x2, x3) -> f419_0_main_Load(x4, x3) :|: x2 > 0 && x3 > 0 && x2 > x3 && x4 = x2 - x3

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f419_0_main_Load(i52:0, i46:0) -> f419_0_main_Load(i52:0, arith) :|: i46:0 > 0 && i52:0 > 0 && i52:0 < i46:0 && arith = i46:0 - i52:0
(2) f419_0_main_Load(x2, x3) -> f419_0_main_Load(x4, x3) :|: x2 > 0 && x3 > 0 && x2 > x3 && x4 = x2 - x3

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f419_0_main_Load(i52:0, i46:0) -> f419_0_main_Load(i52:0, arith) :|: i46:0 > 0 && i52:0 > 0 && i52:0 < i46:0 && arith = i46:0 - i52:0
(2) f419_0_main_Load(x2, x3) -> f419_0_main_Load(x4, x3) :|: x2 > 0 && x3 > 0 && x2 > x3 && x4 = x2 - x3

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f419_0_main_Load(x2:0, x3:0) -> f419_0_main_Load(x2:0 - x3:0, x3:0) :|: x2:0 > 0 && x3:0 > 0 && x3:0 < x2:0
f419_0_main_Load(i52:0:0, i46:0:0) -> f419_0_main_Load(i52:0:0, i46:0:0 - i52:0:0) :|: i46:0:0 > 0 && i52:0:0 > 0 && i52:0:0 < i46:0:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f419_0_main_Load(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f419_0_main_Load(x2:0, x3:0) -> f419_0_main_Load(c, x3:0) :|: c = x2:0 - x3:0 && (x2:0 > 0 && x3:0 > 0 && x3:0 < x2:0)
f419_0_main_Load(i52:0:0, i46:0:0) -> f419_0_main_Load(i52:0:0, c1) :|: c1 = i46:0:0 - i52:0:0 && (i46:0:0 > 0 && i52:0:0 > 0 && i52:0:0 < i46:0:0)

----------------------------------------

(17) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f419_0_main_Load ] = f419_0_main_Load_1 + f419_0_main_Load_2

The following rules are decreasing:
f419_0_main_Load(x2:0, x3:0) -> f419_0_main_Load(c, x3:0) :|: c = x2:0 - x3:0 && (x2:0 > 0 && x3:0 > 0 && x3:0 < x2:0)
f419_0_main_Load(i52:0:0, i46:0:0) -> f419_0_main_Load(i52:0:0, c1) :|: c1 = i46:0:0 - i52:0:0 && (i46:0:0 > 0 && i52:0:0 > 0 && i52:0:0 < i46:0:0)

The following rules are bounded:
f419_0_main_Load(x2:0, x3:0) -> f419_0_main_Load(c, x3:0) :|: c = x2:0 - x3:0 && (x2:0 > 0 && x3:0 > 0 && x3:0 < x2:0)
f419_0_main_Load(i52:0:0, i46:0:0) -> f419_0_main_Load(i52:0:0, c1) :|: c1 = i46:0:0 - i52:0:0 && (i46:0:0 > 0 && i52:0:0 > 0 && i52:0:0 < i46:0:0)


----------------------------------------

(18)
YES
