YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/FUrqU.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 162 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) JBCTerminationSCC
        (8) SCCToIRSProof [SOUND, 26 ms]
        (9) IRSwT
        (10) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (11) IRSwT
        (12) IRSwTTerminationDigraphProof [EQUIVALENT, 11 ms]
        (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) TempFilterProof [SOUND, 13 ms]
        (17) IntTRS
        (18) RankingReductionPairProof [EQUIVALENT, 9 ms]
        (19) YES
    (20) JBCTerminationSCC
        (21) SCCToIRSProof [SOUND, 15 ms]
        (22) IRSwT
        (23) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (24) IRSwT
        (25) IRSwTTerminationDigraphProof [EQUIVALENT, 11 ms]
        (26) IRSwT
        (27) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (28) IRSwT
        (29) TempFilterProof [SOUND, 15 ms]
        (30) IntTRS
        (31) RankingReductionPairProof [EQUIVALENT, 7 ms]
        (32) YES
    (33) JBCTerminationSCC
        (34) SCCToIRSProof [SOUND, 23 ms]
        (35) IRSwT
        (36) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (37) IRSwT
        (38) IRSwTTerminationDigraphProof [EQUIVALENT, 8 ms]
        (39) IRSwT
        (40) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (41) IRSwT
        (42) TempFilterProof [SOUND, 9 ms]
        (43) IntTRS
        (44) RankingReductionPairProof [EQUIVALENT, 6 ms]
        (45) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package example_1;

public class A {

	int incr(int i) {
		return i=i+1;
	}
}


package example_1;

public class B extends A {
	int incr(int i) {
		return i = i+2;
	}
}



package example_1;

public class C extends B {
	int incr(int i) {
		return i=i+3;
	}
}


package example_1;

public class Test {

	public int add(int n,A o){
		int res=0;
		int i=0;
		while (i<=n){
			res=res+i;
			i=o.incr(i);
		}    
		return res;
	}

	public static void main(String[] args) {
		int test = 1000;
		Test testClass = new Test();
		A a = new A();
		int result1 = testClass.add(test,a);
		a = new B();
		int result2 = testClass.add(test,a);
		a = new C(); 
		int result3 = testClass.add(test,a);     
		// System.out.println("Result: "+result1 + result2 + result3);
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package example_1;

public class A {

	int incr(int i) {
		return i=i+1;
	}
}


package example_1;

public class B extends A {
	int incr(int i) {
		return i = i+2;
	}
}



package example_1;

public class C extends B {
	int incr(int i) {
		return i=i+3;
	}
}


package example_1;

public class Test {

	public int add(int n,A o){
		int res=0;
		int i=0;
		while (i<=n){
			res=res+i;
			i=o.incr(i);
		}    
		return res;
	}

	public static void main(String[] args) {
		int test = 1000;
		Test testClass = new Test();
		A a = new A();
		int result1 = testClass.add(test,a);
		a = new B();
		int result2 = testClass.add(test,a);
		a = new C(); 
		int result3 = testClass.add(test,a);     
		// System.out.println("Result: "+result1 + result2 + result3);
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
example_1.Test.main([Ljava/lang/String;)V: Graph of 146 nodes with 3 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 3 SCCss.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: example_1.Test.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(8) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 20 IRulesP rules:
f1625_0_add_Load(EOS(STATIC_1625), matching1, i65, i65) -> f1645_0_add_GT(EOS(STATIC_1645), 1000, i65, i65, 1000) :|: TRUE && matching1 = 1000
f1645_0_add_GT(EOS(STATIC_1645), matching1, i70, i70, matching2) -> f1663_0_add_GT(EOS(STATIC_1663), 1000, i70, i70, 1000) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1663_0_add_GT(EOS(STATIC_1663), matching1, i70, i70, matching2) -> f1683_0_add_Load(EOS(STATIC_1683), 1000, i70) :|: i70 <= 1000 && matching1 = 1000 && matching2 = 1000
f1683_0_add_Load(EOS(STATIC_1683), matching1, i70) -> f1691_0_add_Load(EOS(STATIC_1691), 1000, i70) :|: TRUE && matching1 = 1000
f1691_0_add_Load(EOS(STATIC_1691), matching1, i70) -> f1701_0_add_IntArithmetic(EOS(STATIC_1701), 1000, i70, i70) :|: TRUE && matching1 = 1000
f1701_0_add_IntArithmetic(EOS(STATIC_1701), matching1, i70, i70) -> f1707_0_add_Store(EOS(STATIC_1707), 1000, i70) :|: i70 >= 0 && matching1 = 1000
f1707_0_add_Store(EOS(STATIC_1707), matching1, i70) -> f1709_0_add_Load(EOS(STATIC_1709), 1000, i70) :|: TRUE && matching1 = 1000
f1709_0_add_Load(EOS(STATIC_1709), matching1, i70) -> f1721_0_add_Load(EOS(STATIC_1721), 1000, i70) :|: TRUE && matching1 = 1000
f1721_0_add_Load(EOS(STATIC_1721), matching1, i70) -> f1730_0_add_InvokeMethod(EOS(STATIC_1730), 1000, i70) :|: TRUE && matching1 = 1000
f1730_0_add_InvokeMethod(EOS(STATIC_1730), matching1, i70) -> f1731_0_incr_Load(EOS(STATIC_1731), 1000, i70) :|: TRUE && matching1 = 1000
f1731_0_incr_Load(EOS(STATIC_1731), matching1, i70) -> f1732_0_incr_ConstantStackPush(EOS(STATIC_1732), 1000, i70) :|: TRUE && matching1 = 1000
f1732_0_incr_ConstantStackPush(EOS(STATIC_1732), matching1, i70) -> f1733_0_incr_IntArithmetic(EOS(STATIC_1733), 1000, i70, 3) :|: TRUE && matching1 = 1000
f1733_0_incr_IntArithmetic(EOS(STATIC_1733), matching1, i70, matching2) -> f1735_0_incr_Duplicate(EOS(STATIC_1735), 1000, i70 + 3) :|: i70 >= 0 && matching1 = 1000 && matching2 = 3
f1735_0_incr_Duplicate(EOS(STATIC_1735), matching1, i77) -> f1738_0_incr_Store(EOS(STATIC_1738), 1000, i77, i77) :|: TRUE && matching1 = 1000
f1738_0_incr_Store(EOS(STATIC_1738), matching1, i77, i77) -> f1740_0_incr_Return(EOS(STATIC_1740), 1000, i77) :|: TRUE && matching1 = 1000
f1740_0_incr_Return(EOS(STATIC_1740), matching1, i77) -> f1746_0_add_Store(EOS(STATIC_1746), 1000, i77) :|: TRUE && matching1 = 1000
f1746_0_add_Store(EOS(STATIC_1746), matching1, i77) -> f1754_0_add_JMP(EOS(STATIC_1754), 1000, i77) :|: TRUE && matching1 = 1000
f1754_0_add_JMP(EOS(STATIC_1754), matching1, i77) -> f1767_0_add_Load(EOS(STATIC_1767), 1000, i77) :|: TRUE && matching1 = 1000
f1767_0_add_Load(EOS(STATIC_1767), matching1, i77) -> f1620_0_add_Load(EOS(STATIC_1620), 1000, i77) :|: TRUE && matching1 = 1000
f1620_0_add_Load(EOS(STATIC_1620), matching1, i65) -> f1625_0_add_Load(EOS(STATIC_1625), 1000, i65, i65) :|: TRUE && matching1 = 1000
Combined rules. Obtained 1 IRulesP rules:
f1625_0_add_Load(EOS(STATIC_1625), 1000, i65:0, i65:0) -> f1625_0_add_Load(EOS(STATIC_1625), 1000, i65:0 + 3, i65:0 + 3) :|: i65:0 < 1001 && i65:0 > -1
Filtered constant ground arguments:
   f1625_0_add_Load(x1, x2, x3, x4) -> f1625_0_add_Load(x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f1625_0_add_Load(x1, x2) -> f1625_0_add_Load(x2)
Finished conversion. Obtained 1 rules.P rules:
f1625_0_add_Load(i65:0) -> f1625_0_add_Load(i65:0 + 3) :|: i65:0 < 1001 && i65:0 > -1

----------------------------------------

(9)
Obligation:
Rules:
f1625_0_add_Load(i65:0) -> f1625_0_add_Load(i65:0 + 3) :|: i65:0 < 1001 && i65:0 > -1

----------------------------------------

(10) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(11)
Obligation:
Rules:
f1625_0_add_Load(i65:0) -> f1625_0_add_Load(arith) :|: i65:0 < 1001 && i65:0 > -1 && arith = i65:0 + 3

----------------------------------------

(12) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f1625_0_add_Load(i65:0) -> f1625_0_add_Load(arith) :|: i65:0 < 1001 && i65:0 > -1 && arith = i65:0 + 3

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f1625_0_add_Load(i65:0) -> f1625_0_add_Load(arith) :|: i65:0 < 1001 && i65:0 > -1 && arith = i65:0 + 3

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f1625_0_add_Load(i65:0:0) -> f1625_0_add_Load(i65:0:0 + 3) :|: i65:0:0 < 1001 && i65:0:0 > -1

----------------------------------------

(16) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f1625_0_add_Load(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(17)
Obligation:
Rules:
f1625_0_add_Load(i65:0:0) -> f1625_0_add_Load(c) :|: c = i65:0:0 + 3 && (i65:0:0 < 1001 && i65:0:0 > -1)

----------------------------------------

(18) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f1625_0_add_Load ] = -1/3*f1625_0_add_Load_1

The following rules are decreasing:
f1625_0_add_Load(i65:0:0) -> f1625_0_add_Load(c) :|: c = i65:0:0 + 3 && (i65:0:0 < 1001 && i65:0:0 > -1)

The following rules are bounded:
f1625_0_add_Load(i65:0:0) -> f1625_0_add_Load(c) :|: c = i65:0:0 + 3 && (i65:0:0 < 1001 && i65:0:0 > -1)


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: example_1.Test.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(21) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 20 IRulesP rules:
f1064_0_add_Load(EOS(STATIC_1064), matching1, matching2, i36, i36) -> f1083_0_add_GT(EOS(STATIC_1083), 1000, 1000, i36, i36, 1000) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1083_0_add_GT(EOS(STATIC_1083), matching1, matching2, i41, i41, matching3) -> f1093_0_add_GT(EOS(STATIC_1093), 1000, 1000, i41, i41, 1000) :|: TRUE && matching1 = 1000 && matching2 = 1000 && matching3 = 1000
f1093_0_add_GT(EOS(STATIC_1093), matching1, matching2, i41, i41, matching3) -> f1113_0_add_Load(EOS(STATIC_1113), 1000, 1000, i41) :|: i41 <= 1000 && matching1 = 1000 && matching2 = 1000 && matching3 = 1000
f1113_0_add_Load(EOS(STATIC_1113), matching1, matching2, i41) -> f1118_0_add_Load(EOS(STATIC_1118), 1000, 1000, i41) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1118_0_add_Load(EOS(STATIC_1118), matching1, matching2, i41) -> f1139_0_add_IntArithmetic(EOS(STATIC_1139), 1000, 1000, i41, i41) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1139_0_add_IntArithmetic(EOS(STATIC_1139), matching1, matching2, i41, i41) -> f1145_0_add_Store(EOS(STATIC_1145), 1000, 1000, i41) :|: i41 >= 0 && matching1 = 1000 && matching2 = 1000
f1145_0_add_Store(EOS(STATIC_1145), matching1, matching2, i41) -> f1151_0_add_Load(EOS(STATIC_1151), 1000, 1000, i41) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1151_0_add_Load(EOS(STATIC_1151), matching1, matching2, i41) -> f1159_0_add_Load(EOS(STATIC_1159), 1000, 1000, i41) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1159_0_add_Load(EOS(STATIC_1159), matching1, matching2, i41) -> f1161_0_add_InvokeMethod(EOS(STATIC_1161), 1000, 1000, i41) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1161_0_add_InvokeMethod(EOS(STATIC_1161), matching1, matching2, i41) -> f1164_0_incr_Load(EOS(STATIC_1164), 1000, 1000, i41) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1164_0_incr_Load(EOS(STATIC_1164), matching1, matching2, i41) -> f1172_0_incr_ConstantStackPush(EOS(STATIC_1172), 1000, 1000, i41) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1172_0_incr_ConstantStackPush(EOS(STATIC_1172), matching1, matching2, i41) -> f1176_0_incr_IntArithmetic(EOS(STATIC_1176), 1000, 1000, i41, 2) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1176_0_incr_IntArithmetic(EOS(STATIC_1176), matching1, matching2, i41, matching3) -> f1180_0_incr_Duplicate(EOS(STATIC_1180), 1000, 1000, i41 + 2) :|: i41 >= 0 && matching1 = 1000 && matching2 = 1000 && matching3 = 2
f1180_0_incr_Duplicate(EOS(STATIC_1180), matching1, matching2, i46) -> f1187_0_incr_Store(EOS(STATIC_1187), 1000, 1000, i46, i46) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1187_0_incr_Store(EOS(STATIC_1187), matching1, matching2, i46, i46) -> f1190_0_incr_Return(EOS(STATIC_1190), 1000, 1000, i46) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1190_0_incr_Return(EOS(STATIC_1190), matching1, matching2, i46) -> f1191_0_add_Store(EOS(STATIC_1191), 1000, 1000, i46) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1191_0_add_Store(EOS(STATIC_1191), matching1, matching2, i46) -> f1194_0_add_JMP(EOS(STATIC_1194), 1000, 1000, i46) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1194_0_add_JMP(EOS(STATIC_1194), matching1, matching2, i46) -> f1213_0_add_Load(EOS(STATIC_1213), 1000, 1000, i46) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1213_0_add_Load(EOS(STATIC_1213), matching1, matching2, i46) -> f1057_0_add_Load(EOS(STATIC_1057), 1000, 1000, i46) :|: TRUE && matching1 = 1000 && matching2 = 1000
f1057_0_add_Load(EOS(STATIC_1057), matching1, matching2, i36) -> f1064_0_add_Load(EOS(STATIC_1064), 1000, 1000, i36, i36) :|: TRUE && matching1 = 1000 && matching2 = 1000
Combined rules. Obtained 1 IRulesP rules:
f1064_0_add_Load(EOS(STATIC_1064), 1000, 1000, i36:0, i36:0) -> f1064_0_add_Load(EOS(STATIC_1064), 1000, 1000, i36:0 + 2, i36:0 + 2) :|: i36:0 < 1001 && i36:0 > -1
Filtered constant ground arguments:
   f1064_0_add_Load(x1, x2, x3, x4, x5) -> f1064_0_add_Load(x4, x5)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f1064_0_add_Load(x1, x2) -> f1064_0_add_Load(x2)
Finished conversion. Obtained 1 rules.P rules:
f1064_0_add_Load(i36:0) -> f1064_0_add_Load(i36:0 + 2) :|: i36:0 < 1001 && i36:0 > -1

----------------------------------------

(22)
Obligation:
Rules:
f1064_0_add_Load(i36:0) -> f1064_0_add_Load(i36:0 + 2) :|: i36:0 < 1001 && i36:0 > -1

----------------------------------------

(23) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(24)
Obligation:
Rules:
f1064_0_add_Load(i36:0) -> f1064_0_add_Load(arith) :|: i36:0 < 1001 && i36:0 > -1 && arith = i36:0 + 2

----------------------------------------

(25) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f1064_0_add_Load(i36:0) -> f1064_0_add_Load(arith) :|: i36:0 < 1001 && i36:0 > -1 && arith = i36:0 + 2

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(26)
Obligation:

Termination digraph:
Nodes:
(1) f1064_0_add_Load(i36:0) -> f1064_0_add_Load(arith) :|: i36:0 < 1001 && i36:0 > -1 && arith = i36:0 + 2

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(27) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(28)
Obligation:
Rules:
f1064_0_add_Load(i36:0:0) -> f1064_0_add_Load(i36:0:0 + 2) :|: i36:0:0 < 1001 && i36:0:0 > -1

----------------------------------------

(29) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f1064_0_add_Load(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(30)
Obligation:
Rules:
f1064_0_add_Load(i36:0:0) -> f1064_0_add_Load(c) :|: c = i36:0:0 + 2 && (i36:0:0 < 1001 && i36:0:0 > -1)

----------------------------------------

(31) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f1064_0_add_Load ] = -1/2*f1064_0_add_Load_1

The following rules are decreasing:
f1064_0_add_Load(i36:0:0) -> f1064_0_add_Load(c) :|: c = i36:0:0 + 2 && (i36:0:0 < 1001 && i36:0:0 > -1)

The following rules are bounded:
f1064_0_add_Load(i36:0:0) -> f1064_0_add_Load(c) :|: c = i36:0:0 + 2 && (i36:0:0 < 1001 && i36:0:0 > -1)


----------------------------------------

(32)
YES

----------------------------------------

(33)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: example_1.Test.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(34) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 20 IRulesP rules:
f635_0_add_Load(EOS(STATIC_635), matching1, matching2, i11, i11) -> f637_0_add_GT(EOS(STATIC_637), 1000, 1000, i11, i11, 1000) :|: TRUE && matching1 = 1000 && matching2 = 1000
f637_0_add_GT(EOS(STATIC_637), matching1, matching2, i14, i14, matching3) -> f665_0_add_GT(EOS(STATIC_665), 1000, 1000, i14, i14, 1000) :|: TRUE && matching1 = 1000 && matching2 = 1000 && matching3 = 1000
f665_0_add_GT(EOS(STATIC_665), matching1, matching2, i14, i14, matching3) -> f684_0_add_Load(EOS(STATIC_684), 1000, 1000, i14) :|: i14 <= 1000 && matching1 = 1000 && matching2 = 1000 && matching3 = 1000
f684_0_add_Load(EOS(STATIC_684), matching1, matching2, i14) -> f691_0_add_Load(EOS(STATIC_691), 1000, 1000, i14) :|: TRUE && matching1 = 1000 && matching2 = 1000
f691_0_add_Load(EOS(STATIC_691), matching1, matching2, i14) -> f694_0_add_IntArithmetic(EOS(STATIC_694), 1000, 1000, i14, i14) :|: TRUE && matching1 = 1000 && matching2 = 1000
f694_0_add_IntArithmetic(EOS(STATIC_694), matching1, matching2, i14, i14) -> f696_0_add_Store(EOS(STATIC_696), 1000, 1000, i14) :|: i14 >= 0 && matching1 = 1000 && matching2 = 1000
f696_0_add_Store(EOS(STATIC_696), matching1, matching2, i14) -> f698_0_add_Load(EOS(STATIC_698), 1000, 1000, i14) :|: TRUE && matching1 = 1000 && matching2 = 1000
f698_0_add_Load(EOS(STATIC_698), matching1, matching2, i14) -> f704_0_add_Load(EOS(STATIC_704), 1000, 1000, i14) :|: TRUE && matching1 = 1000 && matching2 = 1000
f704_0_add_Load(EOS(STATIC_704), matching1, matching2, i14) -> f709_0_add_InvokeMethod(EOS(STATIC_709), 1000, 1000, i14) :|: TRUE && matching1 = 1000 && matching2 = 1000
f709_0_add_InvokeMethod(EOS(STATIC_709), matching1, matching2, i14) -> f714_0_incr_Load(EOS(STATIC_714), 1000, 1000, i14) :|: TRUE && matching1 = 1000 && matching2 = 1000
f714_0_incr_Load(EOS(STATIC_714), matching1, matching2, i14) -> f716_0_incr_ConstantStackPush(EOS(STATIC_716), 1000, 1000, i14) :|: TRUE && matching1 = 1000 && matching2 = 1000
f716_0_incr_ConstantStackPush(EOS(STATIC_716), matching1, matching2, i14) -> f718_0_incr_IntArithmetic(EOS(STATIC_718), 1000, 1000, i14, 1) :|: TRUE && matching1 = 1000 && matching2 = 1000
f718_0_incr_IntArithmetic(EOS(STATIC_718), matching1, matching2, i14, matching3) -> f721_0_incr_Duplicate(EOS(STATIC_721), 1000, 1000, i14 + 1) :|: i14 >= 0 && matching1 = 1000 && matching2 = 1000 && matching3 = 1
f721_0_incr_Duplicate(EOS(STATIC_721), matching1, matching2, i17) -> f727_0_incr_Store(EOS(STATIC_727), 1000, 1000, i17, i17) :|: TRUE && matching1 = 1000 && matching2 = 1000
f727_0_incr_Store(EOS(STATIC_727), matching1, matching2, i17, i17) -> f731_0_incr_Return(EOS(STATIC_731), 1000, 1000, i17) :|: TRUE && matching1 = 1000 && matching2 = 1000
f731_0_incr_Return(EOS(STATIC_731), matching1, matching2, i17) -> f733_0_add_Store(EOS(STATIC_733), 1000, 1000, i17) :|: TRUE && matching1 = 1000 && matching2 = 1000
f733_0_add_Store(EOS(STATIC_733), matching1, matching2, i17) -> f735_0_add_JMP(EOS(STATIC_735), 1000, 1000, i17) :|: TRUE && matching1 = 1000 && matching2 = 1000
f735_0_add_JMP(EOS(STATIC_735), matching1, matching2, i17) -> f766_0_add_Load(EOS(STATIC_766), 1000, 1000, i17) :|: TRUE && matching1 = 1000 && matching2 = 1000
f766_0_add_Load(EOS(STATIC_766), matching1, matching2, i17) -> f631_0_add_Load(EOS(STATIC_631), 1000, 1000, i17) :|: TRUE && matching1 = 1000 && matching2 = 1000
f631_0_add_Load(EOS(STATIC_631), matching1, matching2, i11) -> f635_0_add_Load(EOS(STATIC_635), 1000, 1000, i11, i11) :|: TRUE && matching1 = 1000 && matching2 = 1000
Combined rules. Obtained 1 IRulesP rules:
f635_0_add_Load(EOS(STATIC_635), 1000, 1000, i11:0, i11:0) -> f635_0_add_Load(EOS(STATIC_635), 1000, 1000, i11:0 + 1, i11:0 + 1) :|: i11:0 < 1001 && i11:0 > -1
Filtered constant ground arguments:
   f635_0_add_Load(x1, x2, x3, x4, x5) -> f635_0_add_Load(x4, x5)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f635_0_add_Load(x1, x2) -> f635_0_add_Load(x2)
Finished conversion. Obtained 1 rules.P rules:
f635_0_add_Load(i11:0) -> f635_0_add_Load(i11:0 + 1) :|: i11:0 < 1001 && i11:0 > -1

----------------------------------------

(35)
Obligation:
Rules:
f635_0_add_Load(i11:0) -> f635_0_add_Load(i11:0 + 1) :|: i11:0 < 1001 && i11:0 > -1

----------------------------------------

(36) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(37)
Obligation:
Rules:
f635_0_add_Load(i11:0) -> f635_0_add_Load(arith) :|: i11:0 < 1001 && i11:0 > -1 && arith = i11:0 + 1

----------------------------------------

(38) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f635_0_add_Load(i11:0) -> f635_0_add_Load(arith) :|: i11:0 < 1001 && i11:0 > -1 && arith = i11:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(39)
Obligation:

Termination digraph:
Nodes:
(1) f635_0_add_Load(i11:0) -> f635_0_add_Load(arith) :|: i11:0 < 1001 && i11:0 > -1 && arith = i11:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(40) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(41)
Obligation:
Rules:
f635_0_add_Load(i11:0:0) -> f635_0_add_Load(i11:0:0 + 1) :|: i11:0:0 < 1001 && i11:0:0 > -1

----------------------------------------

(42) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f635_0_add_Load(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(43)
Obligation:
Rules:
f635_0_add_Load(i11:0:0) -> f635_0_add_Load(c) :|: c = i11:0:0 + 1 && (i11:0:0 < 1001 && i11:0:0 > -1)

----------------------------------------

(44) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f635_0_add_Load ] = -1*f635_0_add_Load_1

The following rules are decreasing:
f635_0_add_Load(i11:0:0) -> f635_0_add_Load(c) :|: c = i11:0:0 + 1 && (i11:0:0 < 1001 && i11:0:0 > -1)

The following rules are bounded:
f635_0_add_Load(i11:0:0) -> f635_0_add_Load(c) :|: c = i11:0:0 + 1 && (i11:0:0 < 1001 && i11:0:0 > -1)


----------------------------------------

(45)
YES
