YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/H9K30.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 133 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 7 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 10 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 13 ms]
(16) IntTRS
(17) RankingReductionPairProof [EQUIVALENT, 0 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaA4 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x > y) {
            y++;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * Example taken from "A Term Rewriting Approach to the Automated Termination
 * Analysis of Imperative Programs" (http://www.cs.unm.edu/~spf/papers/2009-02.pdf)
 * and converted to Java.
 */

public class PastaA4 {
    public static void main(String[] args) {
        Random.args = args;
        int x = Random.random();
        int y = Random.random();

        while (x > y) {
            y++;
        }
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
PastaA4.main([Ljava/lang/String;)V: Graph of 175 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: PastaA4.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 7 IRulesP rules:
f328_0_main_Load(EOS(STATIC_328), i46, i47, i46) -> f332_0_main_LE(EOS(STATIC_332), i46, i47, i46, i47) :|: TRUE
f332_0_main_LE(EOS(STATIC_332), i46, i47, i46, i47) -> f350_0_main_LE(EOS(STATIC_350), i46, i47, i46, i47) :|: i46 > i47
f350_0_main_LE(EOS(STATIC_350), i46, i47, i46, i47) -> f358_0_main_Inc(EOS(STATIC_358), i46, i47) :|: i46 > i47
f358_0_main_Inc(EOS(STATIC_358), i46, i47) -> f365_0_main_JMP(EOS(STATIC_365), i46, i47 + 1) :|: TRUE
f365_0_main_JMP(EOS(STATIC_365), i46, i51) -> f375_0_main_Load(EOS(STATIC_375), i46, i51) :|: TRUE
f375_0_main_Load(EOS(STATIC_375), i46, i51) -> f325_0_main_Load(EOS(STATIC_325), i46, i51) :|: TRUE
f325_0_main_Load(EOS(STATIC_325), i46, i47) -> f328_0_main_Load(EOS(STATIC_328), i46, i47, i46) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f328_0_main_Load(EOS(STATIC_328), i46:0, i47:0, i46:0) -> f328_0_main_Load(EOS(STATIC_328), i46:0, i47:0 + 1, i46:0) :|: i47:0 < i46:0
Filtered constant ground arguments:
   f328_0_main_Load(x1, x2, x3, x4) -> f328_0_main_Load(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f328_0_main_Load(x1, x2, x3) -> f328_0_main_Load(x2, x3)
Finished conversion. Obtained 1 rules.P rules:
f328_0_main_Load(i47:0, i46:0) -> f328_0_main_Load(i47:0 + 1, i46:0) :|: i47:0 < i46:0

----------------------------------------

(8)
Obligation:
Rules:
f328_0_main_Load(i47:0, i46:0) -> f328_0_main_Load(i47:0 + 1, i46:0) :|: i47:0 < i46:0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f328_0_main_Load(i47:0, i46:0) -> f328_0_main_Load(arith, i46:0) :|: i47:0 < i46:0 && arith = i47:0 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f328_0_main_Load(i47:0, i46:0) -> f328_0_main_Load(arith, i46:0) :|: i47:0 < i46:0 && arith = i47:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f328_0_main_Load(i47:0, i46:0) -> f328_0_main_Load(arith, i46:0) :|: i47:0 < i46:0 && arith = i47:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f328_0_main_Load(i47:0:0, i46:0:0) -> f328_0_main_Load(i47:0:0 + 1, i46:0:0) :|: i47:0:0 < i46:0:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f328_0_main_Load(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f328_0_main_Load(i47:0:0, i46:0:0) -> f328_0_main_Load(c, i46:0:0) :|: c = i47:0:0 + 1 && i47:0:0 < i46:0:0

----------------------------------------

(17) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f328_0_main_Load ] = -1*f328_0_main_Load_1 + f328_0_main_Load_2

The following rules are decreasing:
f328_0_main_Load(i47:0:0, i46:0:0) -> f328_0_main_Load(c, i46:0:0) :|: c = i47:0:0 + 1 && i47:0:0 < i46:0:0

The following rules are bounded:
f328_0_main_Load(i47:0:0, i46:0:0) -> f328_0_main_Load(c, i46:0:0) :|: c = i47:0:0 + 1 && i47:0:0 < i46:0:0


----------------------------------------

(18)
YES
